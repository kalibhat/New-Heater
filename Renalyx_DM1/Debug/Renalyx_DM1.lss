
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00024c10  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000014a4  20070000  000a4c10  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001e50  200714a4  000a60b4  000414a4  2**2
                  ALLOC
  3 .stack        00002004  200732f4  000a7f04  000414a4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000414a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000414cd  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054cd9  00000000  00000000  00041526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a037  00000000  00000000  000961ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000107cf  00000000  00000000  000a0236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000021b8  00000000  00000000  000b0a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001d88  00000000  00000000  000b2bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003469f  00000000  00000000  000b4945  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005a5fd  00000000  00000000  000e8fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00073cbe  00000000  00000000  001435e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000087c4  00000000  00000000  001b72a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200752f8 	.word	0x200752f8
   80004:	00097ec9 	.word	0x00097ec9
   80008:	00097ec1 	.word	0x00097ec1
   8000c:	00097ec1 	.word	0x00097ec1
   80010:	00097ec1 	.word	0x00097ec1
   80014:	00097ec1 	.word	0x00097ec1
   80018:	00097ec1 	.word	0x00097ec1
	...
   8002c:	00097ec1 	.word	0x00097ec1
   80030:	00097ec1 	.word	0x00097ec1
   80034:	00000000 	.word	0x00000000
   80038:	00097ec1 	.word	0x00097ec1
   8003c:	00093f89 	.word	0x00093f89
   80040:	00097ec1 	.word	0x00097ec1
   80044:	00097ec1 	.word	0x00097ec1
   80048:	00097ec1 	.word	0x00097ec1
   8004c:	00097ec1 	.word	0x00097ec1
   80050:	00097ec1 	.word	0x00097ec1
   80054:	00097ec1 	.word	0x00097ec1
   80058:	00097ec1 	.word	0x00097ec1
   8005c:	00097ec1 	.word	0x00097ec1
   80060:	00093ed1 	.word	0x00093ed1
   80064:	00097ec1 	.word	0x00097ec1
   80068:	00000000 	.word	0x00000000
   8006c:	00097701 	.word	0x00097701
   80070:	00097719 	.word	0x00097719
   80074:	00097731 	.word	0x00097731
   80078:	00097749 	.word	0x00097749
	...
   80084:	00097ec1 	.word	0x00097ec1
   80088:	00097ec1 	.word	0x00097ec1
   8008c:	00097ec1 	.word	0x00097ec1
   80090:	00097ec1 	.word	0x00097ec1
   80094:	00097ec1 	.word	0x00097ec1
   80098:	00097ec1 	.word	0x00097ec1
   8009c:	00097ec1 	.word	0x00097ec1
   800a0:	00097ec1 	.word	0x00097ec1
   800a4:	00000000 	.word	0x00000000
   800a8:	00097ec1 	.word	0x00097ec1
   800ac:	00093f0d 	.word	0x00093f0d
   800b0:	00098d29 	.word	0x00098d29
   800b4:	00097ec1 	.word	0x00097ec1
   800b8:	00093f65 	.word	0x00093f65
   800bc:	00097ec1 	.word	0x00097ec1
   800c0:	00097ec1 	.word	0x00097ec1
   800c4:	00093f41 	.word	0x00093f41
   800c8:	00097ec1 	.word	0x00097ec1
   800cc:	00097ec1 	.word	0x00097ec1
   800d0:	00097ec1 	.word	0x00097ec1
   800d4:	00097ec1 	.word	0x00097ec1
   800d8:	00097ec1 	.word	0x00097ec1
   800dc:	00097ec1 	.word	0x00097ec1
   800e0:	00097ec1 	.word	0x00097ec1
   800e4:	00097ec1 	.word	0x00097ec1
   800e8:	00097ec1 	.word	0x00097ec1
   800ec:	0009310d 	.word	0x0009310d
   800f0:	00097ec1 	.word	0x00097ec1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714a4 	.word	0x200714a4
   80110:	00000000 	.word	0x00000000
   80114:	000a4c10 	.word	0x000a4c10

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200714a8 	.word	0x200714a8
   80144:	000a4c10 	.word	0x000a4c10
   80148:	000a4c10 	.word	0x000a4c10
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d831      	bhi.n	801c2 <osc_enable+0x72>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b11      	ldr	r3, [pc, #68]	; (801cc <osc_enable+0x7c>)
   80188:	4798      	blx	r3
		break;
   8018a:	e01a      	b.n	801c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0f      	ldr	r3, [pc, #60]	; (801cc <osc_enable+0x7c>)
   80190:	4798      	blx	r3
		break;
   80192:	e016      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0e      	ldr	r3, [pc, #56]	; (801d0 <osc_enable+0x80>)
   80198:	4798      	blx	r3
		break;
   8019a:	e012      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <osc_enable+0x80>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00e      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b0a      	ldr	r3, [pc, #40]	; (801d0 <osc_enable+0x80>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e00a      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	213e      	movs	r1, #62	; 0x3e
   801ae:	2000      	movs	r0, #0
   801b0:	4b08      	ldr	r3, [pc, #32]	; (801d4 <osc_enable+0x84>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e005      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	213e      	movs	r1, #62	; 0x3e
   801b8:	2001      	movs	r0, #1
   801ba:	4b06      	ldr	r3, [pc, #24]	; (801d4 <osc_enable+0x84>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	e000      	b.n	801c2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   801c0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   801c2:	bf00      	nop
   801c4:	3708      	adds	r7, #8
   801c6:	46bd      	mov	sp, r7
   801c8:	bd80      	pop	{r7, pc}
   801ca:	bf00      	nop
   801cc:	000977e1 	.word	0x000977e1
   801d0:	0009784d 	.word	0x0009784d
   801d4:	000978ed 	.word	0x000978ed

000801d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d826      	bhi.n	80234 <osc_is_ready+0x5c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_is_ready+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	0008020d 	.word	0x0008020d
   801f0:	00080211 	.word	0x00080211
   801f4:	00080211 	.word	0x00080211
   801f8:	00080223 	.word	0x00080223
   801fc:	00080223 	.word	0x00080223
   80200:	00080223 	.word	0x00080223
   80204:	00080223 	.word	0x00080223
   80208:	00080223 	.word	0x00080223
	case OSC_SLCK_32K_RC:
		return 1;
   8020c:	2301      	movs	r3, #1
   8020e:	e012      	b.n	80236 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80210:	4b0b      	ldr	r3, [pc, #44]	; (80240 <osc_is_ready+0x68>)
   80212:	4798      	blx	r3
   80214:	4603      	mov	r3, r0
   80216:	2b00      	cmp	r3, #0
   80218:	bf14      	ite	ne
   8021a:	2301      	movne	r3, #1
   8021c:	2300      	moveq	r3, #0
   8021e:	b2db      	uxtb	r3, r3
   80220:	e009      	b.n	80236 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80222:	4b08      	ldr	r3, [pc, #32]	; (80244 <osc_is_ready+0x6c>)
   80224:	4798      	blx	r3
   80226:	4603      	mov	r3, r0
   80228:	2b00      	cmp	r3, #0
   8022a:	bf14      	ite	ne
   8022c:	2301      	movne	r3, #1
   8022e:	2300      	moveq	r3, #0
   80230:	b2db      	uxtb	r3, r3
   80232:	e000      	b.n	80236 <osc_is_ready+0x5e>
	}

	return 0;
   80234:	2300      	movs	r3, #0
}
   80236:	4618      	mov	r0, r3
   80238:	3708      	adds	r7, #8
   8023a:	46bd      	mov	sp, r7
   8023c:	bd80      	pop	{r7, pc}
   8023e:	bf00      	nop
   80240:	00097819 	.word	0x00097819
   80244:	00097965 	.word	0x00097965

00080248 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	2b07      	cmp	r3, #7
   80254:	d825      	bhi.n	802a2 <osc_get_rate+0x5a>
   80256:	a201      	add	r2, pc, #4	; (adr r2, 8025c <osc_get_rate+0x14>)
   80258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8025c:	0008027d 	.word	0x0008027d
   80260:	00080283 	.word	0x00080283
   80264:	00080289 	.word	0x00080289
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
   80278:	0008029f 	.word	0x0008029f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80280:	e010      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80286:	e00d      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8028c:	e00a      	b.n	802a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x68>)
   80290:	e008      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x6c>)
   80294:	e006      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80296:	4b08      	ldr	r3, [pc, #32]	; (802b8 <osc_get_rate+0x70>)
   80298:	e004      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <osc_get_rate+0x70>)
   8029c:	e002      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029e:	4b06      	ldr	r3, [pc, #24]	; (802b8 <osc_get_rate+0x70>)
   802a0:	e000      	b.n	802a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   802a2:	2300      	movs	r3, #0
}
   802a4:	4618      	mov	r0, r3
   802a6:	370c      	adds	r7, #12
   802a8:	46bd      	mov	sp, r7
   802aa:	bc80      	pop	{r7}
   802ac:	4770      	bx	lr
   802ae:	bf00      	nop
   802b0:	003d0900 	.word	0x003d0900
   802b4:	007a1200 	.word	0x007a1200
   802b8:	00b71b00 	.word	0x00b71b00

000802bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802bc:	b580      	push	{r7, lr}
   802be:	b082      	sub	sp, #8
   802c0:	af00      	add	r7, sp, #0
   802c2:	4603      	mov	r3, r0
   802c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c6:	bf00      	nop
   802c8:	79fb      	ldrb	r3, [r7, #7]
   802ca:	4618      	mov	r0, r3
   802cc:	4b05      	ldr	r3, [pc, #20]	; (802e4 <osc_wait_ready+0x28>)
   802ce:	4798      	blx	r3
   802d0:	4603      	mov	r3, r0
   802d2:	f083 0301 	eor.w	r3, r3, #1
   802d6:	b2db      	uxtb	r3, r3
   802d8:	2b00      	cmp	r3, #0
   802da:	d1f5      	bne.n	802c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802dc:	bf00      	nop
   802de:	3708      	adds	r7, #8
   802e0:	46bd      	mov	sp, r7
   802e2:	bd80      	pop	{r7, pc}
   802e4:	000801d9 	.word	0x000801d9

000802e8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b086      	sub	sp, #24
   802ec:	af00      	add	r7, sp, #0
   802ee:	60f8      	str	r0, [r7, #12]
   802f0:	607a      	str	r2, [r7, #4]
   802f2:	603b      	str	r3, [r7, #0]
   802f4:	460b      	mov	r3, r1
   802f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f8:	687b      	ldr	r3, [r7, #4]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d107      	bne.n	8030e <pll_config_init+0x26>
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	2b00      	cmp	r3, #0
   80302:	d104      	bne.n	8030e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80304:	68fb      	ldr	r3, [r7, #12]
   80306:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8030a:	601a      	str	r2, [r3, #0]
   8030c:	e019      	b.n	80342 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030e:	7afb      	ldrb	r3, [r7, #11]
   80310:	4618      	mov	r0, r3
   80312:	4b0e      	ldr	r3, [pc, #56]	; (8034c <pll_config_init+0x64>)
   80314:	4798      	blx	r3
   80316:	4602      	mov	r2, r0
   80318:	687b      	ldr	r3, [r7, #4]
   8031a:	fbb2 f3f3 	udiv	r3, r2, r3
   8031e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80320:	697b      	ldr	r3, [r7, #20]
   80322:	683a      	ldr	r2, [r7, #0]
   80324:	fb02 f303 	mul.w	r3, r2, r3
   80328:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	3b01      	subs	r3, #1
   8032e:	041a      	lsls	r2, r3, #16
   80330:	4b07      	ldr	r3, [pc, #28]	; (80350 <pll_config_init+0x68>)
   80332:	4013      	ands	r3, r2
   80334:	687a      	ldr	r2, [r7, #4]
   80336:	b2d2      	uxtb	r2, r2
   80338:	4313      	orrs	r3, r2
   8033a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033e:	68fb      	ldr	r3, [r7, #12]
   80340:	601a      	str	r2, [r3, #0]
	}
}
   80342:	bf00      	nop
   80344:	3718      	adds	r7, #24
   80346:	46bd      	mov	sp, r7
   80348:	bd80      	pop	{r7, pc}
   8034a:	bf00      	nop
   8034c:	00080249 	.word	0x00080249
   80350:	07ff0000 	.word	0x07ff0000

00080354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80354:	b580      	push	{r7, lr}
   80356:	b082      	sub	sp, #8
   80358:	af00      	add	r7, sp, #0
   8035a:	6078      	str	r0, [r7, #4]
   8035c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	2b00      	cmp	r3, #0
   80362:	d108      	bne.n	80376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <pll_enable+0x38>)
   80366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80368:	4a09      	ldr	r2, [pc, #36]	; (80390 <pll_enable+0x3c>)
   8036a:	687b      	ldr	r3, [r7, #4]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80374:	e005      	b.n	80382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80376:	4a06      	ldr	r2, [pc, #24]	; (80390 <pll_enable+0x3c>)
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	681b      	ldr	r3, [r3, #0]
   8037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80380:	61d3      	str	r3, [r2, #28]
	}
}
   80382:	bf00      	nop
   80384:	3708      	adds	r7, #8
   80386:	46bd      	mov	sp, r7
   80388:	bd80      	pop	{r7, pc}
   8038a:	bf00      	nop
   8038c:	0009797d 	.word	0x0009797d
   80390:	400e0600 	.word	0x400e0600

00080394 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
   8039a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b00      	cmp	r3, #0
   803a0:	d103      	bne.n	803aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <pll_is_locked+0x24>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	e002      	b.n	803b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <pll_is_locked+0x28>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
	}
}
   803b0:	4618      	mov	r0, r3
   803b2:	3708      	adds	r7, #8
   803b4:	46bd      	mov	sp, r7
   803b6:	bd80      	pop	{r7, pc}
   803b8:	00097995 	.word	0x00097995
   803bc:	000979ad 	.word	0x000979ad

000803c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803c0:	b580      	push	{r7, lr}
   803c2:	b082      	sub	sp, #8
   803c4:	af00      	add	r7, sp, #0
   803c6:	4603      	mov	r3, r0
   803c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ca:	79fb      	ldrb	r3, [r7, #7]
   803cc:	3b03      	subs	r3, #3
   803ce:	2b04      	cmp	r3, #4
   803d0:	d808      	bhi.n	803e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803d2:	79fb      	ldrb	r3, [r7, #7]
   803d4:	4618      	mov	r0, r3
   803d6:	4b06      	ldr	r3, [pc, #24]	; (803f0 <pll_enable_source+0x30>)
   803d8:	4798      	blx	r3
		osc_wait_ready(e_src);
   803da:	79fb      	ldrb	r3, [r7, #7]
   803dc:	4618      	mov	r0, r3
   803de:	4b05      	ldr	r3, [pc, #20]	; (803f4 <pll_enable_source+0x34>)
   803e0:	4798      	blx	r3
		break;
   803e2:	e000      	b.n	803e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803e4:	bf00      	nop
	}
}
   803e6:	bf00      	nop
   803e8:	3708      	adds	r7, #8
   803ea:	46bd      	mov	sp, r7
   803ec:	bd80      	pop	{r7, pc}
   803ee:	bf00      	nop
   803f0:	00080151 	.word	0x00080151
   803f4:	000802bd 	.word	0x000802bd

000803f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803f8:	b580      	push	{r7, lr}
   803fa:	b082      	sub	sp, #8
   803fc:	af00      	add	r7, sp, #0
   803fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80400:	bf00      	nop
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b04      	ldr	r3, [pc, #16]	; (80418 <pll_wait_for_lock+0x20>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d0f9      	beq.n	80402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8040e:	2300      	movs	r3, #0
}
   80410:	4618      	mov	r0, r3
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00080395 	.word	0x00080395

0008041c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80420:	2006      	movs	r0, #6
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <sysclk_get_main_hz+0x18>)
   80424:	4798      	blx	r3
   80426:	4602      	mov	r2, r0
   80428:	4613      	mov	r3, r2
   8042a:	00db      	lsls	r3, r3, #3
   8042c:	1a9b      	subs	r3, r3, r2
   8042e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80430:	4618      	mov	r0, r3
   80432:	bd80      	pop	{r7, pc}
   80434:	00080249 	.word	0x00080249

00080438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80438:	b580      	push	{r7, lr}
   8043a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8043c:	4b02      	ldr	r3, [pc, #8]	; (80448 <sysclk_get_cpu_hz+0x10>)
   8043e:	4798      	blx	r3
   80440:	4603      	mov	r3, r0
   80442:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80444:	4618      	mov	r0, r3
   80446:	bd80      	pop	{r7, pc}
   80448:	0008041d 	.word	0x0008041d

0008044c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8044c:	b590      	push	{r4, r7, lr}
   8044e:	b083      	sub	sp, #12
   80450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <sysclk_init+0x48>)
   80454:	4798      	blx	r3
   80456:	4603      	mov	r3, r0
   80458:	4618      	mov	r0, r3
   8045a:	4b0f      	ldr	r3, [pc, #60]	; (80498 <sysclk_init+0x4c>)
   8045c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8045e:	2006      	movs	r0, #6
   80460:	4b0e      	ldr	r3, [pc, #56]	; (8049c <sysclk_init+0x50>)
   80462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80464:	1d38      	adds	r0, r7, #4
   80466:	230e      	movs	r3, #14
   80468:	2201      	movs	r2, #1
   8046a:	2106      	movs	r1, #6
   8046c:	4c0c      	ldr	r4, [pc, #48]	; (804a0 <sysclk_init+0x54>)
   8046e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80470:	1d3b      	adds	r3, r7, #4
   80472:	2100      	movs	r1, #0
   80474:	4618      	mov	r0, r3
   80476:	4b0b      	ldr	r3, [pc, #44]	; (804a4 <sysclk_init+0x58>)
   80478:	4798      	blx	r3
		pll_wait_for_lock(0);
   8047a:	2000      	movs	r0, #0
   8047c:	4b0a      	ldr	r3, [pc, #40]	; (804a8 <sysclk_init+0x5c>)
   8047e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80480:	2010      	movs	r0, #16
   80482:	4b0a      	ldr	r3, [pc, #40]	; (804ac <sysclk_init+0x60>)
   80484:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80486:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <sysclk_init+0x64>)
   80488:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bd90      	pop	{r4, r7, pc}
   80492:	bf00      	nop
   80494:	00080439 	.word	0x00080439
   80498:	000980f5 	.word	0x000980f5
   8049c:	000803c1 	.word	0x000803c1
   804a0:	000802e9 	.word	0x000802e9
   804a4:	00080355 	.word	0x00080355
   804a8:	000803f9 	.word	0x000803f9
   804ac:	00097761 	.word	0x00097761
   804b0:	00097f71 	.word	0x00097f71

000804b4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804b4:	b580      	push	{r7, lr}
   804b6:	b084      	sub	sp, #16
   804b8:	af00      	add	r7, sp, #0
   804ba:	60f8      	str	r0, [r7, #12]
   804bc:	60b9      	str	r1, [r7, #8]
   804be:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	021b      	lsls	r3, r3, #8
   804c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804c8:	68bb      	ldr	r3, [r7, #8]
   804ca:	4313      	orrs	r3, r2
   804cc:	4619      	mov	r1, r3
   804ce:	68f8      	ldr	r0, [r7, #12]
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <efc_init+0x2c>)
   804d2:	4798      	blx	r3
	return EFC_RC_OK;
   804d4:	2300      	movs	r3, #0
}
   804d6:	4618      	mov	r0, r3
   804d8:	3710      	adds	r7, #16
   804da:	46bd      	mov	sp, r7
   804dc:	bd80      	pop	{r7, pc}
   804de:	bf00      	nop
   804e0:	200700b5 	.word	0x200700b5

000804e4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804ee:	687b      	ldr	r3, [r7, #4]
   804f0:	681b      	ldr	r3, [r3, #0]
   804f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804f6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804f8:	683b      	ldr	r3, [r7, #0]
   804fa:	021b      	lsls	r3, r3, #8
   804fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	4313      	orrs	r3, r2
   80504:	4619      	mov	r1, r3
   80506:	6878      	ldr	r0, [r7, #4]
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <efc_set_wait_state+0x30>)
   8050a:	4798      	blx	r3
}
   8050c:	bf00      	nop
   8050e:	3710      	adds	r7, #16
   80510:	46bd      	mov	sp, r7
   80512:	bd80      	pop	{r7, pc}
   80514:	200700b5 	.word	0x200700b5

00080518 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	681b      	ldr	r3, [r3, #0]
   80524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80528:	0a1b      	lsrs	r3, r3, #8
}
   8052a:	4618      	mov	r0, r3
   8052c:	370c      	adds	r7, #12
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80534:	b580      	push	{r7, lr}
   80536:	b086      	sub	sp, #24
   80538:	af00      	add	r7, sp, #0
   8053a:	60f8      	str	r0, [r7, #12]
   8053c:	60b9      	str	r1, [r7, #8]
   8053e:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80540:	68bb      	ldr	r3, [r7, #8]
   80542:	2b0e      	cmp	r3, #14
   80544:	d002      	beq.n	8054c <efc_perform_command+0x18>
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	2b0f      	cmp	r3, #15
   8054a:	d102      	bne.n	80552 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8054c:	f04f 33ff 	mov.w	r3, #4294967295
   80550:	e020      	b.n	80594 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <efc_perform_command+0x68>)
   80556:	4293      	cmp	r3, r2
   80558:	bf14      	ite	ne
   8055a:	2301      	movne	r3, #1
   8055c:	2300      	moveq	r3, #0
   8055e:	b2db      	uxtb	r3, r3
   80560:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80562:	4b0f      	ldr	r3, [pc, #60]	; (805a0 <efc_perform_command+0x6c>)
   80564:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   80566:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <efc_perform_command+0x70>)
   8056a:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <efc_perform_command+0x70>)
   8056e:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80570:	687b      	ldr	r3, [r7, #4]
   80572:	021b      	lsls	r3, r3, #8
   80574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80578:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8057c:	68b9      	ldr	r1, [r7, #8]
   8057e:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80580:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80582:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   80586:	4619      	mov	r1, r3
   80588:	6978      	ldr	r0, [r7, #20]
   8058a:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	689b      	ldr	r3, [r3, #8]
   80590:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80594:	4618      	mov	r0, r3
   80596:	3718      	adds	r7, #24
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	00100008 	.word	0x00100008
   805a4:	200714c0 	.word	0x200714c0

000805a8 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   805a8:	b480      	push	{r7}
   805aa:	b083      	sub	sp, #12
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	68db      	ldr	r3, [r3, #12]
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805c0:	b580      	push	{r7, lr}
   805c2:	b082      	sub	sp, #8
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805c8:	6878      	ldr	r0, [r7, #4]
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <sysclk_enable_peripheral_clock+0x18>)
   805cc:	4798      	blx	r3
}
   805ce:	bf00      	nop
   805d0:	3708      	adds	r7, #8
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	000979c5 	.word	0x000979c5

000805dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b082      	sub	sp, #8
   805e0:	af00      	add	r7, sp, #0
   805e2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <spi_enable_clock+0x20>)
   805e8:	4293      	cmp	r3, r2
   805ea:	d102      	bne.n	805f2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805ec:	2018      	movs	r0, #24
   805ee:	4b04      	ldr	r3, [pc, #16]	; (80600 <spi_enable_clock+0x24>)
   805f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805f2:	bf00      	nop
   805f4:	3708      	adds	r7, #8
   805f6:	46bd      	mov	sp, r7
   805f8:	bd80      	pop	{r7, pc}
   805fa:	bf00      	nop
   805fc:	40008000 	.word	0x40008000
   80600:	000805c1 	.word	0x000805c1

00080604 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	2208      	movs	r2, #8
   80610:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2220      	movs	r2, #32
   80616:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
}
   8061e:	bf00      	nop
   80620:	370c      	adds	r7, #12
   80622:	46bd      	mov	sp, r7
   80624:	bc80      	pop	{r7}
   80626:	4770      	bx	lr

00080628 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80628:	b580      	push	{r7, lr}
   8062a:	b084      	sub	sp, #16
   8062c:	af00      	add	r7, sp, #0
   8062e:	6078      	str	r0, [r7, #4]
   80630:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80632:	2300      	movs	r3, #0
   80634:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	f04f 32ff 	mov.w	r2, #4294967295
   8063c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4b0e      	ldr	r3, [pc, #56]	; (80680 <twi_master_init+0x58>)
   80646:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80648:	6878      	ldr	r0, [r7, #4]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <twi_master_init+0x5c>)
   8064c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8064e:	683b      	ldr	r3, [r7, #0]
   80650:	6859      	ldr	r1, [r3, #4]
   80652:	683b      	ldr	r3, [r7, #0]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	461a      	mov	r2, r3
   80658:	6878      	ldr	r0, [r7, #4]
   8065a:	4b0b      	ldr	r3, [pc, #44]	; (80688 <twi_master_init+0x60>)
   8065c:	4798      	blx	r3
   8065e:	4603      	mov	r3, r0
   80660:	2b01      	cmp	r3, #1
   80662:	d101      	bne.n	80668 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80664:	2301      	movs	r3, #1
   80666:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	7a5b      	ldrb	r3, [r3, #9]
   8066c:	2b01      	cmp	r3, #1
   8066e:	d102      	bne.n	80676 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2240      	movs	r2, #64	; 0x40
   80674:	601a      	str	r2, [r3, #0]
	}

	return status;
   80676:	68fb      	ldr	r3, [r7, #12]
}
   80678:	4618      	mov	r0, r3
   8067a:	3710      	adds	r7, #16
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	0008082d 	.word	0x0008082d
   80684:	00080605 	.word	0x00080605
   80688:	0008068d 	.word	0x0008068d

0008068c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8068c:	b480      	push	{r7}
   8068e:	b087      	sub	sp, #28
   80690:	af00      	add	r7, sp, #0
   80692:	60f8      	str	r0, [r7, #12]
   80694:	60b9      	str	r1, [r7, #8]
   80696:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80698:	2300      	movs	r3, #0
   8069a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	4a17      	ldr	r2, [pc, #92]	; (806fc <twi_set_speed+0x70>)
   806a0:	4293      	cmp	r3, r2
   806a2:	d901      	bls.n	806a8 <twi_set_speed+0x1c>
		return FAIL;
   806a4:	2301      	movs	r3, #1
   806a6:	e024      	b.n	806f2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   806a8:	68bb      	ldr	r3, [r7, #8]
   806aa:	005b      	lsls	r3, r3, #1
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	fbb2 f3f3 	udiv	r3, r2, r3
   806b2:	3b04      	subs	r3, #4
   806b4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b6:	e005      	b.n	806c4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806b8:	697b      	ldr	r3, [r7, #20]
   806ba:	3301      	adds	r3, #1
   806bc:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806be:	693b      	ldr	r3, [r7, #16]
   806c0:	085b      	lsrs	r3, r3, #1
   806c2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c4:	693b      	ldr	r3, [r7, #16]
   806c6:	2bff      	cmp	r3, #255	; 0xff
   806c8:	d902      	bls.n	806d0 <twi_set_speed+0x44>
   806ca:	697b      	ldr	r3, [r7, #20]
   806cc:	2b06      	cmp	r3, #6
   806ce:	d9f3      	bls.n	806b8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806d0:	4a0b      	ldr	r2, [pc, #44]	; (80700 <twi_set_speed+0x74>)
   806d2:	693b      	ldr	r3, [r7, #16]
   806d4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806d6:	693b      	ldr	r3, [r7, #16]
   806d8:	b2da      	uxtb	r2, r3
   806da:	693b      	ldr	r3, [r7, #16]
   806dc:	021b      	lsls	r3, r3, #8
   806de:	b29b      	uxth	r3, r3
   806e0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806e2:	697b      	ldr	r3, [r7, #20]
   806e4:	041b      	lsls	r3, r3, #16
   806e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ea:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806f0:	2300      	movs	r3, #0
}
   806f2:	4618      	mov	r0, r3
   806f4:	371c      	adds	r7, #28
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr
   806fc:	00061a80 	.word	0x00061a80
   80700:	200714c4 	.word	0x200714c4

00080704 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80704:	b480      	push	{r7}
   80706:	b085      	sub	sp, #20
   80708:	af00      	add	r7, sp, #0
   8070a:	6078      	str	r0, [r7, #4]
   8070c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   8070e:	683b      	ldr	r3, [r7, #0]
   80710:	2b00      	cmp	r3, #0
   80712:	d101      	bne.n	80718 <twi_mk_addr+0x14>
		return 0;
   80714:	2300      	movs	r3, #0
   80716:	e01d      	b.n	80754 <twi_mk_addr+0x50>

	val = addr[0];
   80718:	687b      	ldr	r3, [r7, #4]
   8071a:	781b      	ldrb	r3, [r3, #0]
   8071c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   8071e:	683b      	ldr	r3, [r7, #0]
   80720:	2b01      	cmp	r3, #1
   80722:	dd09      	ble.n	80738 <twi_mk_addr+0x34>
		val <<= 8;
   80724:	68fb      	ldr	r3, [r7, #12]
   80726:	021b      	lsls	r3, r3, #8
   80728:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   8072a:	687b      	ldr	r3, [r7, #4]
   8072c:	3301      	adds	r3, #1
   8072e:	781b      	ldrb	r3, [r3, #0]
   80730:	461a      	mov	r2, r3
   80732:	68fb      	ldr	r3, [r7, #12]
   80734:	4313      	orrs	r3, r2
   80736:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80738:	683b      	ldr	r3, [r7, #0]
   8073a:	2b02      	cmp	r3, #2
   8073c:	dd09      	ble.n	80752 <twi_mk_addr+0x4e>
		val <<= 8;
   8073e:	68fb      	ldr	r3, [r7, #12]
   80740:	021b      	lsls	r3, r3, #8
   80742:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	3302      	adds	r3, #2
   80748:	781b      	ldrb	r3, [r3, #0]
   8074a:	461a      	mov	r2, r3
   8074c:	68fb      	ldr	r3, [r7, #12]
   8074e:	4313      	orrs	r3, r2
   80750:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80752:	68fb      	ldr	r3, [r7, #12]
}
   80754:	4618      	mov	r0, r3
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	bc80      	pop	{r7}
   8075c:	4770      	bx	lr
   8075e:	bf00      	nop

00080760 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80760:	b580      	push	{r7, lr}
   80762:	b086      	sub	sp, #24
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
   80768:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
   8076a:	683b      	ldr	r3, [r7, #0]
   8076c:	68db      	ldr	r3, [r3, #12]
   8076e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
   80770:	683b      	ldr	r3, [r7, #0]
   80772:	689b      	ldr	r3, [r3, #8]
   80774:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
   80776:	697b      	ldr	r3, [r7, #20]
   80778:	2b00      	cmp	r3, #0
   8077a:	d101      	bne.n	80780 <twi_master_read+0x20>
		return TWI_INVALID_ARGUMENT;
   8077c:	2301      	movs	r3, #1
   8077e:	e04f      	b.n	80820 <twi_master_read+0xc0>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80780:	687b      	ldr	r3, [r7, #4]
   80782:	2200      	movs	r2, #0
   80784:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80786:	683b      	ldr	r3, [r7, #0]
   80788:	7c1b      	ldrb	r3, [r3, #16]
   8078a:	041b      	lsls	r3, r3, #16
   8078c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	685b      	ldr	r3, [r3, #4]
   80794:	021b      	lsls	r3, r3, #8
   80796:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8079a:	4313      	orrs	r3, r2
   8079c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   807a0:	687b      	ldr	r3, [r7, #4]
   807a2:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   807a4:	687b      	ldr	r3, [r7, #4]
   807a6:	2200      	movs	r2, #0
   807a8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   807aa:	683a      	ldr	r2, [r7, #0]
   807ac:	683b      	ldr	r3, [r7, #0]
   807ae:	685b      	ldr	r3, [r3, #4]
   807b0:	4619      	mov	r1, r3
   807b2:	4610      	mov	r0, r2
   807b4:	4b1c      	ldr	r3, [pc, #112]	; (80828 <twi_master_read+0xc8>)
   807b6:	4798      	blx	r3
   807b8:	4602      	mov	r2, r0
   807ba:	687b      	ldr	r3, [r7, #4]
   807bc:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
   807be:	687b      	ldr	r3, [r7, #4]
   807c0:	2201      	movs	r2, #1
   807c2:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
   807c4:	e01f      	b.n	80806 <twi_master_read+0xa6>
		status = p_twi->TWI_SR;
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	6a1b      	ldr	r3, [r3, #32]
   807ca:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   807cc:	68fb      	ldr	r3, [r7, #12]
   807ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
   807d2:	2b00      	cmp	r3, #0
   807d4:	d001      	beq.n	807da <twi_master_read+0x7a>
			return TWI_RECEIVE_NACK;
   807d6:	2305      	movs	r3, #5
   807d8:	e022      	b.n	80820 <twi_master_read+0xc0>
		}

		/* Last byte ? */
		if (cnt == 1) {
   807da:	697b      	ldr	r3, [r7, #20]
   807dc:	2b01      	cmp	r3, #1
   807de:	d102      	bne.n	807e6 <twi_master_read+0x86>
			p_twi->TWI_CR = TWI_CR_STOP;
   807e0:	687b      	ldr	r3, [r7, #4]
   807e2:	2202      	movs	r2, #2
   807e4:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWI_SR_RXRDY)) {
   807e6:	68fb      	ldr	r3, [r7, #12]
   807e8:	f003 0302 	and.w	r3, r3, #2
   807ec:	2b00      	cmp	r3, #0
   807ee:	d100      	bne.n	807f2 <twi_master_read+0x92>
			continue;
   807f0:	e009      	b.n	80806 <twi_master_read+0xa6>
		}
		*buffer++ = p_twi->TWI_RHR;
   807f2:	693b      	ldr	r3, [r7, #16]
   807f4:	1c5a      	adds	r2, r3, #1
   807f6:	613a      	str	r2, [r7, #16]
   807f8:	687a      	ldr	r2, [r7, #4]
   807fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
   807fc:	b2d2      	uxtb	r2, r2
   807fe:	701a      	strb	r2, [r3, #0]

		cnt--;
   80800:	697b      	ldr	r3, [r7, #20]
   80802:	3b01      	subs	r3, #1
   80804:	617b      	str	r3, [r7, #20]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
   80806:	697b      	ldr	r3, [r7, #20]
   80808:	2b00      	cmp	r3, #0
   8080a:	d1dc      	bne.n	807c6 <twi_master_read+0x66>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8080c:	bf00      	nop
   8080e:	687b      	ldr	r3, [r7, #4]
   80810:	6a1b      	ldr	r3, [r3, #32]
   80812:	f003 0301 	and.w	r3, r3, #1
   80816:	2b00      	cmp	r3, #0
   80818:	d0f9      	beq.n	8080e <twi_master_read+0xae>
	}

	p_twi->TWI_SR;
   8081a:	687b      	ldr	r3, [r7, #4]
   8081c:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
   8081e:	2300      	movs	r3, #0
}
   80820:	4618      	mov	r0, r3
   80822:	3718      	adds	r7, #24
   80824:	46bd      	mov	sp, r7
   80826:	bd80      	pop	{r7, pc}
   80828:	00080705 	.word	0x00080705

0008082c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   8082c:	b480      	push	{r7}
   8082e:	b083      	sub	sp, #12
   80830:	af00      	add	r7, sp, #0
   80832:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80834:	687b      	ldr	r3, [r7, #4]
   80836:	2280      	movs	r2, #128	; 0x80
   80838:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8083a:	687b      	ldr	r3, [r7, #4]
   8083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80848:	b480      	push	{r7}
   8084a:	b087      	sub	sp, #28
   8084c:	af00      	add	r7, sp, #0
   8084e:	60f8      	str	r0, [r7, #12]
   80850:	60b9      	str	r1, [r7, #8]
   80852:	607a      	str	r2, [r7, #4]
   80854:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80856:	68bb      	ldr	r3, [r7, #8]
   80858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   8085c:	d30b      	bcc.n	80876 <translate_address+0x2e>
		p_efc = EFC1;
   8085e:	4b17      	ldr	r3, [pc, #92]	; (808bc <translate_address+0x74>)
   80860:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   80862:	68bb      	ldr	r3, [r7, #8]
   80864:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80868:	0a1b      	lsrs	r3, r3, #8
   8086a:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   8086c:	68bb      	ldr	r3, [r7, #8]
   8086e:	b29b      	uxth	r3, r3
   80870:	b2db      	uxtb	r3, r3
   80872:	823b      	strh	r3, [r7, #16]
   80874:	e00a      	b.n	8088c <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80876:	4b12      	ldr	r3, [pc, #72]	; (808c0 <translate_address+0x78>)
   80878:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   8087a:	68bb      	ldr	r3, [r7, #8]
   8087c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80880:	0a1b      	lsrs	r3, r3, #8
   80882:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80884:	68bb      	ldr	r3, [r7, #8]
   80886:	b29b      	uxth	r3, r3
   80888:	b2db      	uxtb	r3, r3
   8088a:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   8088c:	68fb      	ldr	r3, [r7, #12]
   8088e:	2b00      	cmp	r3, #0
   80890:	d002      	beq.n	80898 <translate_address+0x50>
		*pp_efc = p_efc;
   80892:	68fb      	ldr	r3, [r7, #12]
   80894:	697a      	ldr	r2, [r7, #20]
   80896:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d002      	beq.n	808a4 <translate_address+0x5c>
		*pus_page = us_page;
   8089e:	687b      	ldr	r3, [r7, #4]
   808a0:	8a7a      	ldrh	r2, [r7, #18]
   808a2:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   808a4:	683b      	ldr	r3, [r7, #0]
   808a6:	2b00      	cmp	r3, #0
   808a8:	d002      	beq.n	808b0 <translate_address+0x68>
		*pus_offset = us_offset;
   808aa:	683b      	ldr	r3, [r7, #0]
   808ac:	8a3a      	ldrh	r2, [r7, #16]
   808ae:	801a      	strh	r2, [r3, #0]
	}
}
   808b0:	bf00      	nop
   808b2:	371c      	adds	r7, #28
   808b4:	46bd      	mov	sp, r7
   808b6:	bc80      	pop	{r7}
   808b8:	4770      	bx	lr
   808ba:	bf00      	nop
   808bc:	400e0c00 	.word	0x400e0c00
   808c0:	400e0a00 	.word	0x400e0a00

000808c4 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   808c4:	b480      	push	{r7}
   808c6:	b087      	sub	sp, #28
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	607b      	str	r3, [r7, #4]
   808ce:	460b      	mov	r3, r1
   808d0:	817b      	strh	r3, [r7, #10]
   808d2:	4613      	mov	r3, r2
   808d4:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808d6:	68fb      	ldr	r3, [r7, #12]
   808d8:	4a0d      	ldr	r2, [pc, #52]	; (80910 <compute_address+0x4c>)
   808da:	4293      	cmp	r3, r2
   808dc:	d106      	bne.n	808ec <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   808de:	897b      	ldrh	r3, [r7, #10]
   808e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   808e4:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808e6:	893b      	ldrh	r3, [r7, #8]
   808e8:	4413      	add	r3, r2
   808ea:	e005      	b.n	808f8 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   808ec:	897b      	ldrh	r3, [r7, #10]
   808ee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   808f2:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808f4:	893b      	ldrh	r3, [r7, #8]
   808f6:	4413      	add	r3, r2
   808f8:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   808fa:	687b      	ldr	r3, [r7, #4]
   808fc:	2b00      	cmp	r3, #0
   808fe:	d002      	beq.n	80906 <compute_address+0x42>
		*pul_addr = ul_addr;
   80900:	687b      	ldr	r3, [r7, #4]
   80902:	697a      	ldr	r2, [r7, #20]
   80904:	601a      	str	r2, [r3, #0]
	}
}
   80906:	bf00      	nop
   80908:	371c      	adds	r7, #28
   8090a:	46bd      	mov	sp, r7
   8090c:	bc80      	pop	{r7}
   8090e:	4770      	bx	lr
   80910:	400e0a00 	.word	0x400e0a00

00080914 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80914:	b480      	push	{r7}
   80916:	b087      	sub	sp, #28
   80918:	af00      	add	r7, sp, #0
   8091a:	60f8      	str	r0, [r7, #12]
   8091c:	60b9      	str	r1, [r7, #8]
   8091e:	607a      	str	r2, [r7, #4]
   80920:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80922:	68fb      	ldr	r3, [r7, #12]
   80924:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   8092c:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   8092e:	68bb      	ldr	r3, [r7, #8]
   80930:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80938:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   8093c:	333f      	adds	r3, #63	; 0x3f
   8093e:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   80940:	687b      	ldr	r3, [r7, #4]
   80942:	2b00      	cmp	r3, #0
   80944:	d002      	beq.n	8094c <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   80946:	687b      	ldr	r3, [r7, #4]
   80948:	697a      	ldr	r2, [r7, #20]
   8094a:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   8094c:	683b      	ldr	r3, [r7, #0]
   8094e:	2b00      	cmp	r3, #0
   80950:	d002      	beq.n	80958 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   80952:	683b      	ldr	r3, [r7, #0]
   80954:	693a      	ldr	r2, [r7, #16]
   80956:	601a      	str	r2, [r3, #0]
	}
}
   80958:	bf00      	nop
   8095a:	371c      	adds	r7, #28
   8095c:	46bd      	mov	sp, r7
   8095e:	bc80      	pop	{r7}
   80960:	4770      	bx	lr
   80962:	bf00      	nop

00080964 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   80964:	b580      	push	{r7, lr}
   80966:	b082      	sub	sp, #8
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
   8096c:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   8096e:	683a      	ldr	r2, [r7, #0]
   80970:	6879      	ldr	r1, [r7, #4]
   80972:	4806      	ldr	r0, [pc, #24]	; (8098c <flash_init+0x28>)
   80974:	4b06      	ldr	r3, [pc, #24]	; (80990 <flash_init+0x2c>)
   80976:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80978:	683a      	ldr	r2, [r7, #0]
   8097a:	6879      	ldr	r1, [r7, #4]
   8097c:	4805      	ldr	r0, [pc, #20]	; (80994 <flash_init+0x30>)
   8097e:	4b04      	ldr	r3, [pc, #16]	; (80990 <flash_init+0x2c>)
   80980:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   80982:	2300      	movs	r3, #0
}
   80984:	4618      	mov	r0, r3
   80986:	3708      	adds	r7, #8
   80988:	46bd      	mov	sp, r7
   8098a:	bd80      	pop	{r7, pc}
   8098c:	400e0a00 	.word	0x400e0a00
   80990:	000804b5 	.word	0x000804b5
   80994:	400e0c00 	.word	0x400e0c00

00080998 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80998:	b590      	push	{r4, r7, lr}
   8099a:	b08f      	sub	sp, #60	; 0x3c
   8099c:	af00      	add	r7, sp, #0
   8099e:	60f8      	str	r0, [r7, #12]
   809a0:	60b9      	str	r1, [r7, #8]
   809a2:	607a      	str	r2, [r7, #4]
   809a4:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   809a6:	4b4a      	ldr	r3, [pc, #296]	; (80ad0 <flash_write+0x138>)
   809a8:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   809aa:	f107 0314 	add.w	r3, r7, #20
   809ae:	f107 0216 	add.w	r2, r7, #22
   809b2:	f107 0018 	add.w	r0, r7, #24
   809b6:	68f9      	ldr	r1, [r7, #12]
   809b8:	4c46      	ldr	r4, [pc, #280]	; (80ad4 <flash_write+0x13c>)
   809ba:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   809bc:	69bb      	ldr	r3, [r7, #24]
   809be:	4618      	mov	r0, r3
   809c0:	4b45      	ldr	r3, [pc, #276]	; (80ad8 <flash_write+0x140>)
   809c2:	4798      	blx	r3
   809c4:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   809c6:	69bb      	ldr	r3, [r7, #24]
   809c8:	2106      	movs	r1, #6
   809ca:	4618      	mov	r0, r3
   809cc:	4b43      	ldr	r3, [pc, #268]	; (80adc <flash_write+0x144>)
   809ce:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   809d0:	e071      	b.n	80ab6 <flash_write+0x11e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   809d2:	8abb      	ldrh	r3, [r7, #20]
   809d4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   809d8:	687b      	ldr	r3, [r7, #4]
   809da:	4293      	cmp	r3, r2
   809dc:	bf28      	it	cs
   809de:	4613      	movcs	r3, r2
   809e0:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   809e2:	69b8      	ldr	r0, [r7, #24]
   809e4:	8af9      	ldrh	r1, [r7, #22]
   809e6:	f107 0310 	add.w	r3, r7, #16
   809ea:	2200      	movs	r2, #0
   809ec:	4c3c      	ldr	r4, [pc, #240]	; (80ae0 <flash_write+0x148>)
   809ee:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   809f0:	8abb      	ldrh	r3, [r7, #20]
   809f2:	425b      	negs	r3, r3
   809f4:	b29a      	uxth	r2, r3
   809f6:	6a3b      	ldr	r3, [r7, #32]
   809f8:	b29b      	uxth	r3, r3
   809fa:	1ad3      	subs	r3, r2, r3
   809fc:	b29b      	uxth	r3, r3
   809fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
   80a02:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80a04:	693b      	ldr	r3, [r7, #16]
   80a06:	4619      	mov	r1, r3
   80a08:	8abb      	ldrh	r3, [r7, #20]
   80a0a:	461a      	mov	r2, r3
   80a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   80a0e:	4b35      	ldr	r3, [pc, #212]	; (80ae4 <flash_write+0x14c>)
   80a10:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80a12:	8abb      	ldrh	r3, [r7, #20]
   80a14:	461a      	mov	r2, r3
   80a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80a18:	4413      	add	r3, r2
   80a1a:	6a3a      	ldr	r2, [r7, #32]
   80a1c:	68b9      	ldr	r1, [r7, #8]
   80a1e:	4618      	mov	r0, r3
   80a20:	4b30      	ldr	r3, [pc, #192]	; (80ae4 <flash_write+0x14c>)
   80a22:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a24:	8abb      	ldrh	r3, [r7, #20]
   80a26:	461a      	mov	r2, r3
   80a28:	6a3b      	ldr	r3, [r7, #32]
   80a2a:	4413      	add	r3, r2
   80a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80a2e:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80a30:	8abb      	ldrh	r3, [r7, #20]
   80a32:	461a      	mov	r2, r3
   80a34:	693b      	ldr	r3, [r7, #16]
   80a36:	441a      	add	r2, r3
   80a38:	6a3b      	ldr	r3, [r7, #32]
   80a3a:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a3c:	4619      	mov	r1, r3
   80a3e:	8bfb      	ldrh	r3, [r7, #30]
   80a40:	461a      	mov	r2, r3
   80a42:	4b28      	ldr	r3, [pc, #160]	; (80ae4 <flash_write+0x14c>)
   80a44:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   80a46:	693b      	ldr	r3, [r7, #16]
   80a48:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a4a:	2300      	movs	r3, #0
   80a4c:	633b      	str	r3, [r7, #48]	; 0x30
   80a4e:	e00a      	b.n	80a66 <flash_write+0xce>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80a52:	1d1a      	adds	r2, r3, #4
   80a54:	62fa      	str	r2, [r7, #44]	; 0x2c
   80a56:	491e      	ldr	r1, [pc, #120]	; (80ad0 <flash_write+0x138>)
   80a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80a5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80a5e:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a62:	3301      	adds	r3, #1
   80a64:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a68:	2b3f      	cmp	r3, #63	; 0x3f
   80a6a:	d9f1      	bls.n	80a50 <flash_write+0xb8>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80a6c:	683b      	ldr	r3, [r7, #0]
   80a6e:	2b00      	cmp	r3, #0
   80a70:	d007      	beq.n	80a82 <flash_write+0xea>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80a72:	69bb      	ldr	r3, [r7, #24]
   80a74:	8afa      	ldrh	r2, [r7, #22]
   80a76:	2103      	movs	r1, #3
   80a78:	4618      	mov	r0, r3
   80a7a:	4b1b      	ldr	r3, [pc, #108]	; (80ae8 <flash_write+0x150>)
   80a7c:	4798      	blx	r3
   80a7e:	6378      	str	r0, [r7, #52]	; 0x34
   80a80:	e006      	b.n	80a90 <flash_write+0xf8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80a82:	69bb      	ldr	r3, [r7, #24]
   80a84:	8afa      	ldrh	r2, [r7, #22]
   80a86:	2101      	movs	r1, #1
   80a88:	4618      	mov	r0, r3
   80a8a:	4b17      	ldr	r3, [pc, #92]	; (80ae8 <flash_write+0x150>)
   80a8c:	4798      	blx	r3
   80a8e:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a92:	2b00      	cmp	r3, #0
   80a94:	d001      	beq.n	80a9a <flash_write+0x102>
			return ul_error;
   80a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a98:	e016      	b.n	80ac8 <flash_write+0x130>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80a9a:	68ba      	ldr	r2, [r7, #8]
   80a9c:	6a3b      	ldr	r3, [r7, #32]
   80a9e:	4413      	add	r3, r2
   80aa0:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   80aa2:	687a      	ldr	r2, [r7, #4]
   80aa4:	6a3b      	ldr	r3, [r7, #32]
   80aa6:	1ad3      	subs	r3, r2, r3
   80aa8:	607b      	str	r3, [r7, #4]
		us_page++;
   80aaa:	8afb      	ldrh	r3, [r7, #22]
   80aac:	3301      	adds	r3, #1
   80aae:	b29b      	uxth	r3, r3
   80ab0:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   80ab2:	2300      	movs	r3, #0
   80ab4:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   80ab6:	687b      	ldr	r3, [r7, #4]
   80ab8:	2b00      	cmp	r3, #0
   80aba:	d18a      	bne.n	809d2 <flash_write+0x3a>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80abc:	69bb      	ldr	r3, [r7, #24]
   80abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b06      	ldr	r3, [pc, #24]	; (80adc <flash_write+0x144>)
   80ac4:	4798      	blx	r3

	return FLASH_RC_OK;
   80ac6:	2300      	movs	r3, #0
}
   80ac8:	4618      	mov	r0, r3
   80aca:	373c      	adds	r7, #60	; 0x3c
   80acc:	46bd      	mov	sp, r7
   80ace:	bd90      	pop	{r4, r7, pc}
   80ad0:	200714c8 	.word	0x200714c8
   80ad4:	00080849 	.word	0x00080849
   80ad8:	00080519 	.word	0x00080519
   80adc:	000804e5 	.word	0x000804e5
   80ae0:	000808c5 	.word	0x000808c5
   80ae4:	000a2af5 	.word	0x000a2af5
   80ae8:	00080535 	.word	0x00080535

00080aec <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80aec:	b590      	push	{r4, r7, lr}
   80aee:	b08b      	sub	sp, #44	; 0x2c
   80af0:	af00      	add	r7, sp, #0
   80af2:	60f8      	str	r0, [r7, #12]
   80af4:	60b9      	str	r1, [r7, #8]
   80af6:	607a      	str	r2, [r7, #4]
   80af8:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80afa:	2340      	movs	r3, #64	; 0x40
   80afc:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80afe:	f107 0314 	add.w	r3, r7, #20
   80b02:	f107 0218 	add.w	r2, r7, #24
   80b06:	68b9      	ldr	r1, [r7, #8]
   80b08:	68f8      	ldr	r0, [r7, #12]
   80b0a:	4c1c      	ldr	r4, [pc, #112]	; (80b7c <flash_lock+0x90>)
   80b0c:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   80b0e:	687b      	ldr	r3, [r7, #4]
   80b10:	2b00      	cmp	r3, #0
   80b12:	d002      	beq.n	80b1a <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   80b14:	69ba      	ldr	r2, [r7, #24]
   80b16:	687b      	ldr	r3, [r7, #4]
   80b18:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   80b1a:	683b      	ldr	r3, [r7, #0]
   80b1c:	2b00      	cmp	r3, #0
   80b1e:	d002      	beq.n	80b26 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   80b20:	697a      	ldr	r2, [r7, #20]
   80b22:	683b      	ldr	r3, [r7, #0]
   80b24:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80b26:	69b9      	ldr	r1, [r7, #24]
   80b28:	f107 0212 	add.w	r2, r7, #18
   80b2c:	f107 001c 	add.w	r0, r7, #28
   80b30:	2300      	movs	r3, #0
   80b32:	4c13      	ldr	r4, [pc, #76]	; (80b80 <flash_lock+0x94>)
   80b34:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80b36:	6979      	ldr	r1, [r7, #20]
   80b38:	f107 0210 	add.w	r2, r7, #16
   80b3c:	2300      	movs	r3, #0
   80b3e:	2000      	movs	r0, #0
   80b40:	4c0f      	ldr	r4, [pc, #60]	; (80b80 <flash_lock+0x94>)
   80b42:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b44:	e010      	b.n	80b68 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80b46:	69fb      	ldr	r3, [r7, #28]
   80b48:	8a7a      	ldrh	r2, [r7, #18]
   80b4a:	2108      	movs	r1, #8
   80b4c:	4618      	mov	r0, r3
   80b4e:	4b0d      	ldr	r3, [pc, #52]	; (80b84 <flash_lock+0x98>)
   80b50:	4798      	blx	r3
   80b52:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80b54:	6a3b      	ldr	r3, [r7, #32]
   80b56:	2b00      	cmp	r3, #0
   80b58:	d001      	beq.n	80b5e <flash_lock+0x72>
			return ul_error;
   80b5a:	6a3b      	ldr	r3, [r7, #32]
   80b5c:	e009      	b.n	80b72 <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80b5e:	8a7a      	ldrh	r2, [r7, #18]
   80b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80b62:	4413      	add	r3, r2
   80b64:	b29b      	uxth	r3, r3
   80b66:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b68:	8a7a      	ldrh	r2, [r7, #18]
   80b6a:	8a3b      	ldrh	r3, [r7, #16]
   80b6c:	429a      	cmp	r2, r3
   80b6e:	d3ea      	bcc.n	80b46 <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80b70:	2300      	movs	r3, #0
}
   80b72:	4618      	mov	r0, r3
   80b74:	372c      	adds	r7, #44	; 0x2c
   80b76:	46bd      	mov	sp, r7
   80b78:	bd90      	pop	{r4, r7, pc}
   80b7a:	bf00      	nop
   80b7c:	00080915 	.word	0x00080915
   80b80:	00080849 	.word	0x00080849
   80b84:	00080535 	.word	0x00080535

00080b88 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80b88:	b590      	push	{r4, r7, lr}
   80b8a:	b08b      	sub	sp, #44	; 0x2c
   80b8c:	af00      	add	r7, sp, #0
   80b8e:	60f8      	str	r0, [r7, #12]
   80b90:	60b9      	str	r1, [r7, #8]
   80b92:	607a      	str	r2, [r7, #4]
   80b94:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80b96:	2340      	movs	r3, #64	; 0x40
   80b98:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80b9a:	f107 0314 	add.w	r3, r7, #20
   80b9e:	f107 0218 	add.w	r2, r7, #24
   80ba2:	68b9      	ldr	r1, [r7, #8]
   80ba4:	68f8      	ldr	r0, [r7, #12]
   80ba6:	4c1c      	ldr	r4, [pc, #112]	; (80c18 <flash_unlock+0x90>)
   80ba8:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	2b00      	cmp	r3, #0
   80bae:	d002      	beq.n	80bb6 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80bb0:	69ba      	ldr	r2, [r7, #24]
   80bb2:	687b      	ldr	r3, [r7, #4]
   80bb4:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80bb6:	683b      	ldr	r3, [r7, #0]
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d002      	beq.n	80bc2 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80bbc:	697a      	ldr	r2, [r7, #20]
   80bbe:	683b      	ldr	r3, [r7, #0]
   80bc0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80bc2:	69b9      	ldr	r1, [r7, #24]
   80bc4:	f107 0212 	add.w	r2, r7, #18
   80bc8:	f107 001c 	add.w	r0, r7, #28
   80bcc:	2300      	movs	r3, #0
   80bce:	4c13      	ldr	r4, [pc, #76]	; (80c1c <flash_unlock+0x94>)
   80bd0:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80bd2:	6979      	ldr	r1, [r7, #20]
   80bd4:	f107 0210 	add.w	r2, r7, #16
   80bd8:	2300      	movs	r3, #0
   80bda:	2000      	movs	r0, #0
   80bdc:	4c0f      	ldr	r4, [pc, #60]	; (80c1c <flash_unlock+0x94>)
   80bde:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80be0:	e010      	b.n	80c04 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80be2:	69fb      	ldr	r3, [r7, #28]
   80be4:	8a7a      	ldrh	r2, [r7, #18]
   80be6:	2109      	movs	r1, #9
   80be8:	4618      	mov	r0, r3
   80bea:	4b0d      	ldr	r3, [pc, #52]	; (80c20 <flash_unlock+0x98>)
   80bec:	4798      	blx	r3
   80bee:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80bf0:	6a3b      	ldr	r3, [r7, #32]
   80bf2:	2b00      	cmp	r3, #0
   80bf4:	d001      	beq.n	80bfa <flash_unlock+0x72>
			return ul_error;
   80bf6:	6a3b      	ldr	r3, [r7, #32]
   80bf8:	e009      	b.n	80c0e <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80bfa:	8a7a      	ldrh	r2, [r7, #18]
   80bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80bfe:	4413      	add	r3, r2
   80c00:	b29b      	uxth	r3, r3
   80c02:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80c04:	8a7a      	ldrh	r2, [r7, #18]
   80c06:	8a3b      	ldrh	r3, [r7, #16]
   80c08:	429a      	cmp	r2, r3
   80c0a:	d3ea      	bcc.n	80be2 <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80c0c:	2300      	movs	r3, #0
}
   80c0e:	4618      	mov	r0, r3
   80c10:	372c      	adds	r7, #44	; 0x2c
   80c12:	46bd      	mov	sp, r7
   80c14:	bd90      	pop	{r4, r7, pc}
   80c16:	bf00      	nop
   80c18:	00080915 	.word	0x00080915
   80c1c:	00080849 	.word	0x00080849
   80c20:	00080535 	.word	0x00080535

00080c24 <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	af00      	add	r7, sp, #0
   80c2a:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c2c:	687b      	ldr	r3, [r7, #4]
   80c2e:	2b02      	cmp	r3, #2
   80c30:	d901      	bls.n	80c36 <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80c32:	2311      	movs	r3, #17
   80c34:	e012      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80c36:	6878      	ldr	r0, [r7, #4]
   80c38:	4b0a      	ldr	r3, [pc, #40]	; (80c64 <flash_set_gpnvm+0x40>)
   80c3a:	4798      	blx	r3
   80c3c:	4603      	mov	r3, r0
   80c3e:	2b01      	cmp	r3, #1
   80c40:	d101      	bne.n	80c46 <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80c42:	2300      	movs	r3, #0
   80c44:	e00a      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80c46:	687a      	ldr	r2, [r7, #4]
   80c48:	210b      	movs	r1, #11
   80c4a:	4807      	ldr	r0, [pc, #28]	; (80c68 <flash_set_gpnvm+0x44>)
   80c4c:	4b07      	ldr	r3, [pc, #28]	; (80c6c <flash_set_gpnvm+0x48>)
   80c4e:	4798      	blx	r3
   80c50:	4603      	mov	r3, r0
   80c52:	2b00      	cmp	r3, #0
   80c54:	d101      	bne.n	80c5a <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80c56:	2300      	movs	r3, #0
   80c58:	e000      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80c5a:	2310      	movs	r3, #16
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	3708      	adds	r7, #8
   80c60:	46bd      	mov	sp, r7
   80c62:	bd80      	pop	{r7, pc}
   80c64:	00080c71 	.word	0x00080c71
   80c68:	400e0a00 	.word	0x400e0a00
   80c6c:	00080535 	.word	0x00080535

00080c70 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80c70:	b580      	push	{r7, lr}
   80c72:	b084      	sub	sp, #16
   80c74:	af00      	add	r7, sp, #0
   80c76:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c78:	687b      	ldr	r3, [r7, #4]
   80c7a:	2b02      	cmp	r3, #2
   80c7c:	d901      	bls.n	80c82 <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80c7e:	2311      	movs	r3, #17
   80c80:	e019      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80c82:	2200      	movs	r2, #0
   80c84:	210d      	movs	r1, #13
   80c86:	480e      	ldr	r0, [pc, #56]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c88:	4b0e      	ldr	r3, [pc, #56]	; (80cc4 <flash_is_gpnvm_set+0x54>)
   80c8a:	4798      	blx	r3
   80c8c:	4603      	mov	r3, r0
   80c8e:	2b00      	cmp	r3, #0
   80c90:	d001      	beq.n	80c96 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80c92:	2310      	movs	r3, #16
   80c94:	e00f      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80c96:	480a      	ldr	r0, [pc, #40]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c98:	4b0b      	ldr	r3, [pc, #44]	; (80cc8 <flash_is_gpnvm_set+0x58>)
   80c9a:	4798      	blx	r3
   80c9c:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80c9e:	2201      	movs	r2, #1
   80ca0:	687b      	ldr	r3, [r7, #4]
   80ca2:	fa02 f303 	lsl.w	r3, r2, r3
   80ca6:	461a      	mov	r2, r3
   80ca8:	68fb      	ldr	r3, [r7, #12]
   80caa:	4013      	ands	r3, r2
   80cac:	2b00      	cmp	r3, #0
   80cae:	d001      	beq.n	80cb4 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80cb0:	2301      	movs	r3, #1
   80cb2:	e000      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80cb4:	2300      	movs	r3, #0
}
   80cb6:	4618      	mov	r0, r3
   80cb8:	3710      	adds	r7, #16
   80cba:	46bd      	mov	sp, r7
   80cbc:	bd80      	pop	{r7, pc}
   80cbe:	bf00      	nop
   80cc0:	400e0a00 	.word	0x400e0a00
   80cc4:	00080535 	.word	0x00080535
   80cc8:	000805a9 	.word	0x000805a9

00080ccc <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80ccc:	b580      	push	{r7, lr}
   80cce:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80cd0:	2000      	movs	r0, #0
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <flash_enable_security_bit+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	4603      	mov	r3, r0
}
   80cd8:	4618      	mov	r0, r3
   80cda:	bd80      	pop	{r7, pc}
   80cdc:	00080c25 	.word	0x00080c25

00080ce0 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80ce0:	b580      	push	{r7, lr}
   80ce2:	b082      	sub	sp, #8
   80ce4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80ce6:	2304      	movs	r3, #4
   80ce8:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80cea:	4b10      	ldr	r3, [pc, #64]	; (80d2c <Cl_Init_Alarms+0x4c>)
   80cec:	4798      	blx	r3
   80cee:	4603      	mov	r3, r0
   80cf0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80cf2:	79fb      	ldrb	r3, [r7, #7]
   80cf4:	2b00      	cmp	r3, #0
   80cf6:	d001      	beq.n	80cfc <Cl_Init_Alarms+0x1c>
   80cf8:	4b0d      	ldr	r3, [pc, #52]	; (80d30 <Cl_Init_Alarms+0x50>)
   80cfa:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80cfc:	4b0d      	ldr	r3, [pc, #52]	; (80d34 <Cl_Init_Alarms+0x54>)
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80d04:	79fb      	ldrb	r3, [r7, #7]
   80d06:	2b00      	cmp	r3, #0
   80d08:	d001      	beq.n	80d0e <Cl_Init_Alarms+0x2e>
   80d0a:	4b09      	ldr	r3, [pc, #36]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d0c:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80d0e:	4b0a      	ldr	r3, [pc, #40]	; (80d38 <Cl_Init_Alarms+0x58>)
   80d10:	4798      	blx	r3
   80d12:	4603      	mov	r3, r0
   80d14:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80d16:	79fb      	ldrb	r3, [r7, #7]
   80d18:	2b00      	cmp	r3, #0
   80d1a:	d001      	beq.n	80d20 <Cl_Init_Alarms+0x40>
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d1e:	4798      	blx	r3
	return CL_OK;
   80d20:	2300      	movs	r3, #0
	
}
   80d22:	4618      	mov	r0, r3
   80d24:	3708      	adds	r7, #8
   80d26:	46bd      	mov	sp, r7
   80d28:	bd80      	pop	{r7, pc}
   80d2a:	bf00      	nop
   80d2c:	00080d3d 	.word	0x00080d3d
   80d30:	000893e9 	.word	0x000893e9
   80d34:	0008ec45 	.word	0x0008ec45
   80d38:	0008e605 	.word	0x0008e605

00080d3c <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80d3c:	b480      	push	{r7}
   80d3e:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 13.0;
   80d40:	4b3b      	ldr	r3, [pc, #236]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d42:	220d      	movs	r2, #13
   80d44:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 14.5;
   80d46:	4b3a      	ldr	r3, [pc, #232]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d48:	220e      	movs	r2, #14
   80d4a:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80d4c:	4b38      	ldr	r3, [pc, #224]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d4e:	2200      	movs	r2, #0
   80d50:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80d52:	4b37      	ldr	r3, [pc, #220]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d54:	f242 7210 	movw	r2, #10000	; 0x2710
   80d58:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80d5a:	4b35      	ldr	r3, [pc, #212]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d5c:	4a35      	ldr	r2, [pc, #212]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d5e:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80d60:	4b33      	ldr	r3, [pc, #204]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d62:	4a35      	ldr	r2, [pc, #212]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d64:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80d66:	4b32      	ldr	r3, [pc, #200]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d68:	4a32      	ldr	r2, [pc, #200]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d6a:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80d6c:	4b30      	ldr	r3, [pc, #192]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d6e:	4a32      	ldr	r2, [pc, #200]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d70:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80d72:	4b2f      	ldr	r3, [pc, #188]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d74:	4a31      	ldr	r2, [pc, #196]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d76:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80d78:	4b2d      	ldr	r3, [pc, #180]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d7a:	4a31      	ldr	r2, [pc, #196]	; (80e40 <Cl_LoadAlarmThresholdTable+0x104>)
   80d7c:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80d7e:	4b2c      	ldr	r3, [pc, #176]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d80:	4a2e      	ldr	r2, [pc, #184]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d82:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80d84:	4b2a      	ldr	r3, [pc, #168]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d86:	4a2c      	ldr	r2, [pc, #176]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d88:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 700;
   80d8a:	4b29      	ldr	r3, [pc, #164]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d8c:	4a2d      	ldr	r2, [pc, #180]	; (80e44 <Cl_LoadAlarmThresholdTable+0x108>)
   80d8e:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80d90:	4b27      	ldr	r3, [pc, #156]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d92:	4a29      	ldr	r2, [pc, #164]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d94:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80d96:	4b26      	ldr	r3, [pc, #152]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d98:	4a2b      	ldr	r2, [pc, #172]	; (80e48 <Cl_LoadAlarmThresholdTable+0x10c>)
   80d9a:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80d9c:	4b24      	ldr	r3, [pc, #144]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d9e:	4a2b      	ldr	r2, [pc, #172]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80da0:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80da2:	4b23      	ldr	r3, [pc, #140]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80da4:	4a2a      	ldr	r2, [pc, #168]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80da6:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80da8:	4b21      	ldr	r3, [pc, #132]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80daa:	4a28      	ldr	r2, [pc, #160]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80dac:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 80;
   80dae:	4b20      	ldr	r3, [pc, #128]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db0:	4a27      	ldr	r2, [pc, #156]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80db2:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 25;
   80db4:	4b1e      	ldr	r3, [pc, #120]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db6:	4a25      	ldr	r2, [pc, #148]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80db8:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80dba:	4b1d      	ldr	r3, [pc, #116]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dbc:	4a25      	ldr	r2, [pc, #148]	; (80e54 <Cl_LoadAlarmThresholdTable+0x118>)
   80dbe:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80dc0:	4b1b      	ldr	r3, [pc, #108]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dc2:	f242 7210 	movw	r2, #10000	; 0x2710
   80dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80dca:	4b19      	ldr	r3, [pc, #100]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dcc:	2200      	movs	r2, #0
   80dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80dd2:	4b17      	ldr	r3, [pc, #92]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dd4:	f242 7210 	movw	r2, #10000	; 0x2710
   80dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80ddc:	4b14      	ldr	r3, [pc, #80]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dde:	2200      	movs	r2, #0
   80de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80de4:	4b12      	ldr	r3, [pc, #72]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80de6:	f242 7210 	movw	r2, #10000	; 0x2710
   80dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80dee:	4b10      	ldr	r3, [pc, #64]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df0:	2200      	movs	r2, #0
   80df2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80df6:	4b0e      	ldr	r3, [pc, #56]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df8:	2205      	movs	r2, #5
   80dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80dfe:	4b0c      	ldr	r3, [pc, #48]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e00:	2214      	movs	r2, #20
   80e02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80e06:	4b0a      	ldr	r3, [pc, #40]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e08:	221e      	movs	r2, #30
   80e0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80e0e:	4b08      	ldr	r3, [pc, #32]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e10:	2205      	movs	r2, #5
   80e12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80e16:	4b06      	ldr	r3, [pc, #24]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e18:	221e      	movs	r2, #30
   80e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80e1e:	4b04      	ldr	r3, [pc, #16]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e20:	2205      	movs	r2, #5
   80e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		
		return CL_OK ;
   80e26:	2300      	movs	r3, #0
}
   80e28:	4618      	mov	r0, r3
   80e2a:	46bd      	mov	sp, r7
   80e2c:	bc80      	pop	{r7}
   80e2e:	4770      	bx	lr
   80e30:	20072c9c 	.word	0x20072c9c
   80e34:	43fa0000 	.word	0x43fa0000
   80e38:	c3960000 	.word	0xc3960000
   80e3c:	43c80000 	.word	0x43c80000
   80e40:	c3480000 	.word	0xc3480000
   80e44:	442f0000 	.word	0x442f0000
   80e48:	42140000 	.word	0x42140000
   80e4c:	41c80000 	.word	0x41c80000
   80e50:	42a00000 	.word	0x42a00000
   80e54:	42340000 	.word	0x42340000

00080e58 <Cl_Alarm_translate_sensor_values>:
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
  
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void)
{							
   80e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e5a:	b087      	sub	sp, #28
   80e5c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80e5e:	2304      	movs	r3, #4
   80e60:	75fb      	strb	r3, [r7, #23]
	{
		ps3 = prev_ps3val;
	}
	#endif
	
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80e62:	4b89      	ldr	r3, [pc, #548]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80e64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80e66:	461a      	mov	r2, r3
   80e68:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e6c:	fb03 f302 	mul.w	r3, r3, r2
   80e70:	2b00      	cmp	r3, #0
   80e72:	da01      	bge.n	80e78 <Cl_Alarm_translate_sensor_values+0x20>
   80e74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e78:	131b      	asrs	r3, r3, #12
   80e7a:	461a      	mov	r2, r3
   80e7c:	4b83      	ldr	r3, [pc, #524]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80e7e:	4610      	mov	r0, r2
   80e80:	4798      	blx	r3
   80e82:	4603      	mov	r3, r0
   80e84:	613b      	str	r3, [r7, #16]
	calibration_ps1(temp);
   80e86:	4b82      	ldr	r3, [pc, #520]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80e88:	6938      	ldr	r0, [r7, #16]
   80e8a:	4798      	blx	r3
   80e8c:	4603      	mov	r3, r0
   80e8e:	b21b      	sxth	r3, r3
   80e90:	4618      	mov	r0, r3
   80e92:	4b80      	ldr	r3, [pc, #512]	; (81094 <Cl_Alarm_translate_sensor_values+0x23c>)
   80e94:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS1STATUS].test_flag == true)
   80e96:	4b80      	ldr	r3, [pc, #512]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80e9c:	2b00      	cmp	r3, #0
   80e9e:	d015      	beq.n	80ecc <Cl_Alarm_translate_sensor_values+0x74>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS1",5);
   80ea0:	2205      	movs	r2, #5
   80ea2:	497e      	ldr	r1, [pc, #504]	; (8109c <Cl_Alarm_translate_sensor_values+0x244>)
   80ea4:	2018      	movs	r0, #24
   80ea6:	4b7e      	ldr	r3, [pc, #504]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80ea8:	4798      	blx	r3
   80eaa:	4603      	mov	r3, r0
   80eac:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80eae:	7dfb      	ldrb	r3, [r7, #23]
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d001      	beq.n	80eb8 <Cl_Alarm_translate_sensor_values+0x60>
   80eb4:	4b7b      	ldr	r3, [pc, #492]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80eb6:	4798      	blx	r3
		ps1 =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   80eb8:	4b77      	ldr	r3, [pc, #476]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80eba:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
   80ebe:	4b73      	ldr	r3, [pc, #460]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ec0:	4610      	mov	r0, r2
   80ec2:	4798      	blx	r3
   80ec4:	4602      	mov	r2, r0
   80ec6:	4b78      	ldr	r3, [pc, #480]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ec8:	601a      	str	r2, [r3, #0]
   80eca:	e016      	b.n	80efa <Cl_Alarm_translate_sensor_values+0xa2>
		
	}
	else
	{
		ps1 = ((ps1* 49) + pressure_final_ps1)/50;
   80ecc:	4b76      	ldr	r3, [pc, #472]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ece:	681a      	ldr	r2, [r3, #0]
   80ed0:	4b76      	ldr	r3, [pc, #472]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80ed2:	4977      	ldr	r1, [pc, #476]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80ed4:	4610      	mov	r0, r2
   80ed6:	4798      	blx	r3
   80ed8:	4603      	mov	r3, r0
   80eda:	4618      	mov	r0, r3
   80edc:	4b75      	ldr	r3, [pc, #468]	; (810b4 <Cl_Alarm_translate_sensor_values+0x25c>)
   80ede:	681a      	ldr	r2, [r3, #0]
   80ee0:	4b75      	ldr	r3, [pc, #468]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80ee2:	4611      	mov	r1, r2
   80ee4:	4798      	blx	r3
   80ee6:	4603      	mov	r3, r0
   80ee8:	461a      	mov	r2, r3
   80eea:	4b74      	ldr	r3, [pc, #464]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80eec:	4974      	ldr	r1, [pc, #464]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80eee:	4610      	mov	r0, r2
   80ef0:	4798      	blx	r3
   80ef2:	4603      	mov	r3, r0
   80ef4:	461a      	mov	r2, r3
   80ef6:	4b6c      	ldr	r3, [pc, #432]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ef8:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80efa:	4b63      	ldr	r3, [pc, #396]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80efc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80efe:	461a      	mov	r2, r3
   80f00:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f04:	fb03 f302 	mul.w	r3, r3, r2
   80f08:	2b00      	cmp	r3, #0
   80f0a:	da01      	bge.n	80f10 <Cl_Alarm_translate_sensor_values+0xb8>
   80f0c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f10:	131b      	asrs	r3, r3, #12
   80f12:	461a      	mov	r2, r3
   80f14:	4b5d      	ldr	r3, [pc, #372]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f16:	4610      	mov	r0, r2
   80f18:	4798      	blx	r3
   80f1a:	4603      	mov	r3, r0
   80f1c:	613b      	str	r3, [r7, #16]
	calibration_ps2(temp);
   80f1e:	4b5c      	ldr	r3, [pc, #368]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80f20:	6938      	ldr	r0, [r7, #16]
   80f22:	4798      	blx	r3
   80f24:	4603      	mov	r3, r0
   80f26:	b21b      	sxth	r3, r3
   80f28:	4618      	mov	r0, r3
   80f2a:	4b66      	ldr	r3, [pc, #408]	; (810c4 <Cl_Alarm_translate_sensor_values+0x26c>)
   80f2c:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS2STATUS].test_flag == true)
   80f2e:	4b5a      	ldr	r3, [pc, #360]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80f34:	2b00      	cmp	r3, #0
   80f36:	d015      	beq.n	80f64 <Cl_Alarm_translate_sensor_values+0x10c>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS2",5);
   80f38:	2205      	movs	r2, #5
   80f3a:	4963      	ldr	r1, [pc, #396]	; (810c8 <Cl_Alarm_translate_sensor_values+0x270>)
   80f3c:	2018      	movs	r0, #24
   80f3e:	4b58      	ldr	r3, [pc, #352]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80f40:	4798      	blx	r3
   80f42:	4603      	mov	r3, r0
   80f44:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80f46:	7dfb      	ldrb	r3, [r7, #23]
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d001      	beq.n	80f50 <Cl_Alarm_translate_sensor_values+0xf8>
   80f4c:	4b55      	ldr	r3, [pc, #340]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80f4e:	4798      	blx	r3
		ps2 =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   80f50:	4b51      	ldr	r3, [pc, #324]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f52:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   80f56:	4b4d      	ldr	r3, [pc, #308]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f58:	4610      	mov	r0, r2
   80f5a:	4798      	blx	r3
   80f5c:	4602      	mov	r2, r0
   80f5e:	4b5b      	ldr	r3, [pc, #364]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f60:	601a      	str	r2, [r3, #0]
   80f62:	e016      	b.n	80f92 <Cl_Alarm_translate_sensor_values+0x13a>
		
	}
	else
	{
		ps2 = ((ps2* 49) + pressure_final_ps2)/50;
   80f64:	4b59      	ldr	r3, [pc, #356]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f66:	681a      	ldr	r2, [r3, #0]
   80f68:	4b50      	ldr	r3, [pc, #320]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80f6a:	4951      	ldr	r1, [pc, #324]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80f6c:	4610      	mov	r0, r2
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	4618      	mov	r0, r3
   80f74:	4b56      	ldr	r3, [pc, #344]	; (810d0 <Cl_Alarm_translate_sensor_values+0x278>)
   80f76:	681a      	ldr	r2, [r3, #0]
   80f78:	4b4f      	ldr	r3, [pc, #316]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80f7a:	4611      	mov	r1, r2
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	461a      	mov	r2, r3
   80f82:	4b4e      	ldr	r3, [pc, #312]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80f84:	494e      	ldr	r1, [pc, #312]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80f86:	4610      	mov	r0, r2
   80f88:	4798      	blx	r3
   80f8a:	4603      	mov	r3, r0
   80f8c:	461a      	mov	r2, r3
   80f8e:	4b4f      	ldr	r3, [pc, #316]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f90:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80f92:	4b3d      	ldr	r3, [pc, #244]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80f96:	461a      	mov	r2, r3
   80f98:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f9c:	fb03 f302 	mul.w	r3, r3, r2
   80fa0:	2b00      	cmp	r3, #0
   80fa2:	da01      	bge.n	80fa8 <Cl_Alarm_translate_sensor_values+0x150>
   80fa4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80fa8:	131b      	asrs	r3, r3, #12
   80faa:	461a      	mov	r2, r3
   80fac:	4b37      	ldr	r3, [pc, #220]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80fae:	4610      	mov	r0, r2
   80fb0:	4798      	blx	r3
   80fb2:	4603      	mov	r3, r0
   80fb4:	613b      	str	r3, [r7, #16]
	calibration_ps3(temp);
   80fb6:	4b36      	ldr	r3, [pc, #216]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80fb8:	6938      	ldr	r0, [r7, #16]
   80fba:	4798      	blx	r3
   80fbc:	4603      	mov	r3, r0
   80fbe:	b21b      	sxth	r3, r3
   80fc0:	4618      	mov	r0, r3
   80fc2:	4b44      	ldr	r3, [pc, #272]	; (810d4 <Cl_Alarm_translate_sensor_values+0x27c>)
   80fc4:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS3STATUS].test_flag == true)
   80fc6:	4b34      	ldr	r3, [pc, #208]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d015      	beq.n	80ffc <Cl_Alarm_translate_sensor_values+0x1a4>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS3",5);
   80fd0:	2205      	movs	r2, #5
   80fd2:	4941      	ldr	r1, [pc, #260]	; (810d8 <Cl_Alarm_translate_sensor_values+0x280>)
   80fd4:	2018      	movs	r0, #24
   80fd6:	4b32      	ldr	r3, [pc, #200]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80fd8:	4798      	blx	r3
   80fda:	4603      	mov	r3, r0
   80fdc:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80fde:	7dfb      	ldrb	r3, [r7, #23]
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	d001      	beq.n	80fe8 <Cl_Alarm_translate_sensor_values+0x190>
   80fe4:	4b2f      	ldr	r3, [pc, #188]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80fe6:	4798      	blx	r3
		ps3 =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;			
   80fe8:	4b2b      	ldr	r3, [pc, #172]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fea:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   80fee:	4b27      	ldr	r3, [pc, #156]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ff0:	4610      	mov	r0, r2
   80ff2:	4798      	blx	r3
   80ff4:	4602      	mov	r2, r0
   80ff6:	4b39      	ldr	r3, [pc, #228]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ff8:	601a      	str	r2, [r3, #0]
   80ffa:	e016      	b.n	8102a <Cl_Alarm_translate_sensor_values+0x1d2>
	}
	else
	{
		ps3 = ((ps3* 49) + pressure_final_ps3)/50;
   80ffc:	4b37      	ldr	r3, [pc, #220]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ffe:	681a      	ldr	r2, [r3, #0]
   81000:	4b2a      	ldr	r3, [pc, #168]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   81002:	492b      	ldr	r1, [pc, #172]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   81004:	4610      	mov	r0, r2
   81006:	4798      	blx	r3
   81008:	4603      	mov	r3, r0
   8100a:	4618      	mov	r0, r3
   8100c:	4b34      	ldr	r3, [pc, #208]	; (810e0 <Cl_Alarm_translate_sensor_values+0x288>)
   8100e:	681a      	ldr	r2, [r3, #0]
   81010:	4b29      	ldr	r3, [pc, #164]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   81012:	4611      	mov	r1, r2
   81014:	4798      	blx	r3
   81016:	4603      	mov	r3, r0
   81018:	461a      	mov	r2, r3
   8101a:	4b28      	ldr	r3, [pc, #160]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   8101c:	4928      	ldr	r1, [pc, #160]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   8101e:	4610      	mov	r0, r2
   81020:	4798      	blx	r3
   81022:	4603      	mov	r3, r0
   81024:	461a      	mov	r2, r3
   81026:	4b2d      	ldr	r3, [pc, #180]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   81028:	601a      	str	r2, [r3, #0]
	}
				
	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   8102a:	4b17      	ldr	r3, [pc, #92]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   8102c:	8a1b      	ldrh	r3, [r3, #16]
   8102e:	461a      	mov	r2, r3
   81030:	f640 43e4 	movw	r3, #3300	; 0xce4
   81034:	fb03 f302 	mul.w	r3, r3, r2
   81038:	2b00      	cmp	r3, #0
   8103a:	da01      	bge.n	81040 <Cl_Alarm_translate_sensor_values+0x1e8>
   8103c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81040:	131b      	asrs	r3, r3, #12
   81042:	461a      	mov	r2, r3
   81044:	4b11      	ldr	r3, [pc, #68]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   81046:	4610      	mov	r0, r2
   81048:	4798      	blx	r3
   8104a:	4603      	mov	r3, r0
   8104c:	613b      	str	r3, [r7, #16]
	calibration_apt(temp);
   8104e:	4b10      	ldr	r3, [pc, #64]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   81050:	6938      	ldr	r0, [r7, #16]
   81052:	4798      	blx	r3
   81054:	4603      	mov	r3, r0
   81056:	b21b      	sxth	r3, r3
   81058:	4618      	mov	r0, r3
   8105a:	4b22      	ldr	r3, [pc, #136]	; (810e4 <Cl_Alarm_translate_sensor_values+0x28c>)
   8105c:	4798      	blx	r3
	if(test_sensor_status[SENSOR_APTSTATUS].test_flag == true)
   8105e:	4b0e      	ldr	r3, [pc, #56]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81060:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   81064:	2b00      	cmp	r3, #0
   81066:	d043      	beq.n	810f0 <Cl_Alarm_translate_sensor_values+0x298>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   81068:	2205      	movs	r2, #5
   8106a:	491f      	ldr	r1, [pc, #124]	; (810e8 <Cl_Alarm_translate_sensor_values+0x290>)
   8106c:	2018      	movs	r0, #24
   8106e:	4b0c      	ldr	r3, [pc, #48]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   81070:	4798      	blx	r3
		apt =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   81072:	4b09      	ldr	r3, [pc, #36]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81074:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   81078:	4b04      	ldr	r3, [pc, #16]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   8107a:	4610      	mov	r0, r2
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	4b1a      	ldr	r3, [pc, #104]	; (810ec <Cl_Alarm_translate_sensor_values+0x294>)
   81082:	601a      	str	r2, [r3, #0]
   81084:	e04b      	b.n	8111e <Cl_Alarm_translate_sensor_values+0x2c6>
   81086:	bf00      	nop
   81088:	20072dbc 	.word	0x20072dbc
   8108c:	000a25e5 	.word	0x000a25e5
   81090:	000a2a19 	.word	0x000a2a19
   81094:	0008413d 	.word	0x0008413d
   81098:	200730a0 	.word	0x200730a0
   8109c:	000a4650 	.word	0x000a4650
   810a0:	00098601 	.word	0x00098601
   810a4:	000893e9 	.word	0x000893e9
   810a8:	200715e0 	.word	0x200715e0
   810ac:	000a268d 	.word	0x000a268d
   810b0:	42440000 	.word	0x42440000
   810b4:	2007161c 	.word	0x2007161c
   810b8:	000a247d 	.word	0x000a247d
   810bc:	000a27f5 	.word	0x000a27f5
   810c0:	42480000 	.word	0x42480000
   810c4:	0008424d 	.word	0x0008424d
   810c8:	000a4658 	.word	0x000a4658
   810cc:	200715e4 	.word	0x200715e4
   810d0:	20071620 	.word	0x20071620
   810d4:	0008435d 	.word	0x0008435d
   810d8:	000a4660 	.word	0x000a4660
   810dc:	200715e8 	.word	0x200715e8
   810e0:	20071624 	.word	0x20071624
   810e4:	00083e39 	.word	0x00083e39
   810e8:	000a4668 	.word	0x000a4668
   810ec:	20072c94 	.word	0x20072c94
	}
	else
	{
		apt = ((apt* 49) + pressure_final_apt)/50;
   810f0:	4b91      	ldr	r3, [pc, #580]	; (81338 <Cl_Alarm_translate_sensor_values+0x4e0>)
   810f2:	681a      	ldr	r2, [r3, #0]
   810f4:	4b91      	ldr	r3, [pc, #580]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   810f6:	4992      	ldr	r1, [pc, #584]	; (81340 <Cl_Alarm_translate_sensor_values+0x4e8>)
   810f8:	4610      	mov	r0, r2
   810fa:	4798      	blx	r3
   810fc:	4603      	mov	r3, r0
   810fe:	4618      	mov	r0, r3
   81100:	4b90      	ldr	r3, [pc, #576]	; (81344 <Cl_Alarm_translate_sensor_values+0x4ec>)
   81102:	681a      	ldr	r2, [r3, #0]
   81104:	4b90      	ldr	r3, [pc, #576]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81106:	4611      	mov	r1, r2
   81108:	4798      	blx	r3
   8110a:	4603      	mov	r3, r0
   8110c:	461a      	mov	r2, r3
   8110e:	4b8f      	ldr	r3, [pc, #572]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   81110:	498f      	ldr	r1, [pc, #572]	; (81350 <Cl_Alarm_translate_sensor_values+0x4f8>)
   81112:	4610      	mov	r0, r2
   81114:	4798      	blx	r3
   81116:	4603      	mov	r3, r0
   81118:	461a      	mov	r2, r3
   8111a:	4b87      	ldr	r3, [pc, #540]	; (81338 <Cl_Alarm_translate_sensor_values+0x4e0>)
   8111c:	601a      	str	r2, [r3, #0]
	}

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   8111e:	4b8d      	ldr	r3, [pc, #564]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   81120:	8a5b      	ldrh	r3, [r3, #18]
   81122:	461a      	mov	r2, r3
   81124:	f640 43e4 	movw	r3, #3300	; 0xce4
   81128:	fb03 f302 	mul.w	r3, r3, r2
   8112c:	2b00      	cmp	r3, #0
   8112e:	da01      	bge.n	81134 <Cl_Alarm_translate_sensor_values+0x2dc>
   81130:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81134:	131b      	asrs	r3, r3, #12
   81136:	461a      	mov	r2, r3
   81138:	4b87      	ldr	r3, [pc, #540]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8113a:	4610      	mov	r0, r2
   8113c:	4798      	blx	r3
   8113e:	4603      	mov	r3, r0
   81140:	613b      	str	r3, [r7, #16]
	calibration_vpt(temp);
   81142:	4b86      	ldr	r3, [pc, #536]	; (8135c <Cl_Alarm_translate_sensor_values+0x504>)
   81144:	6938      	ldr	r0, [r7, #16]
   81146:	4798      	blx	r3
   81148:	4603      	mov	r3, r0
   8114a:	b21b      	sxth	r3, r3
   8114c:	4618      	mov	r0, r3
   8114e:	4b84      	ldr	r3, [pc, #528]	; (81360 <Cl_Alarm_translate_sensor_values+0x508>)
   81150:	4798      	blx	r3
	if(test_sensor_status[SENSOR_VPTSTATUS].test_flag == true)
   81152:	4b84      	ldr	r3, [pc, #528]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81154:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   81158:	2b00      	cmp	r3, #0
   8115a:	d00e      	beq.n	8117a <Cl_Alarm_translate_sensor_values+0x322>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   8115c:	2205      	movs	r2, #5
   8115e:	4982      	ldr	r1, [pc, #520]	; (81368 <Cl_Alarm_translate_sensor_values+0x510>)
   81160:	2018      	movs	r0, #24
   81162:	4b82      	ldr	r3, [pc, #520]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   81164:	4798      	blx	r3
		vpt =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   81166:	4b7f      	ldr	r3, [pc, #508]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81168:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
   8116c:	4b7a      	ldr	r3, [pc, #488]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8116e:	4610      	mov	r0, r2
   81170:	4798      	blx	r3
   81172:	4602      	mov	r2, r0
   81174:	4b7e      	ldr	r3, [pc, #504]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   81176:	601a      	str	r2, [r3, #0]
   81178:	e016      	b.n	811a8 <Cl_Alarm_translate_sensor_values+0x350>
	}
	else
	{
		vpt = ((vpt* 49) + pressure_final_vpt)/50;
   8117a:	4b7d      	ldr	r3, [pc, #500]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   8117c:	681a      	ldr	r2, [r3, #0]
   8117e:	4b6f      	ldr	r3, [pc, #444]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   81180:	496f      	ldr	r1, [pc, #444]	; (81340 <Cl_Alarm_translate_sensor_values+0x4e8>)
   81182:	4610      	mov	r0, r2
   81184:	4798      	blx	r3
   81186:	4603      	mov	r3, r0
   81188:	4618      	mov	r0, r3
   8118a:	4b7a      	ldr	r3, [pc, #488]	; (81374 <Cl_Alarm_translate_sensor_values+0x51c>)
   8118c:	681a      	ldr	r2, [r3, #0]
   8118e:	4b6e      	ldr	r3, [pc, #440]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81190:	4611      	mov	r1, r2
   81192:	4798      	blx	r3
   81194:	4603      	mov	r3, r0
   81196:	461a      	mov	r2, r3
   81198:	4b6c      	ldr	r3, [pc, #432]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   8119a:	496d      	ldr	r1, [pc, #436]	; (81350 <Cl_Alarm_translate_sensor_values+0x4f8>)
   8119c:	4610      	mov	r0, r2
   8119e:	4798      	blx	r3
   811a0:	4603      	mov	r3, r0
   811a2:	461a      	mov	r2, r3
   811a4:	4b72      	ldr	r3, [pc, #456]	; (81370 <Cl_Alarm_translate_sensor_values+0x518>)
   811a6:	601a      	str	r2, [r3, #0]
	}

// 	temp = cl_sys_statbuffer.Temp1status * 0.805;
// 	calibration_tmp(temp,TS1);
	if(test_sensor_status[SENSOR_TEMP1STATUS].test_flag == true)
   811a8:	4b6e      	ldr	r3, [pc, #440]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   811aa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   811ae:	2b00      	cmp	r3, #0
   811b0:	d00e      	beq.n	811d0 <Cl_Alarm_translate_sensor_values+0x378>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT1",7);
   811b2:	2207      	movs	r2, #7
   811b4:	4970      	ldr	r1, [pc, #448]	; (81378 <Cl_Alarm_translate_sensor_values+0x520>)
   811b6:	2018      	movs	r0, #24
   811b8:	4b6c      	ldr	r3, [pc, #432]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   811ba:	4798      	blx	r3
		temp1 =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   811bc:	4b69      	ldr	r3, [pc, #420]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   811be:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
   811c2:	4b65      	ldr	r3, [pc, #404]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   811c4:	4610      	mov	r0, r2
   811c6:	4798      	blx	r3
   811c8:	4602      	mov	r2, r0
   811ca:	4b6c      	ldr	r3, [pc, #432]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   811cc:	601a      	str	r2, [r3, #0]
   811ce:	e04d      	b.n	8126c <Cl_Alarm_translate_sensor_values+0x414>
	}
	else
	{
		
		uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp1status)/(2*32768);
   811d0:	4b60      	ldr	r3, [pc, #384]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   811d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   811d4:	461a      	mov	r2, r3
   811d6:	f649 5308 	movw	r3, #40200	; 0x9d08
   811da:	fb03 f302 	mul.w	r3, r3, r2
   811de:	2b00      	cmp	r3, #0
   811e0:	da02      	bge.n	811e8 <Cl_Alarm_translate_sensor_values+0x390>
   811e2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   811e6:	33ff      	adds	r3, #255	; 0xff
   811e8:	141b      	asrs	r3, r3, #16
   811ea:	81fb      	strh	r3, [r7, #14]
		res_temp_lookuptable(cal_data);
   811ec:	89fb      	ldrh	r3, [r7, #14]
   811ee:	4618      	mov	r0, r3
   811f0:	4b63      	ldr	r3, [pc, #396]	; (81380 <Cl_Alarm_translate_sensor_values+0x528>)
   811f2:	4798      	blx	r3
		
		uint16_t temp = res_temp_value/100;
   811f4:	4b63      	ldr	r3, [pc, #396]	; (81384 <Cl_Alarm_translate_sensor_values+0x52c>)
   811f6:	681a      	ldr	r2, [r3, #0]
   811f8:	4b54      	ldr	r3, [pc, #336]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   811fa:	4963      	ldr	r1, [pc, #396]	; (81388 <Cl_Alarm_translate_sensor_values+0x530>)
   811fc:	4610      	mov	r0, r2
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	461a      	mov	r2, r3
   81204:	4b61      	ldr	r3, [pc, #388]	; (8138c <Cl_Alarm_translate_sensor_values+0x534>)
   81206:	4610      	mov	r0, r2
   81208:	4798      	blx	r3
   8120a:	4603      	mov	r3, r0
   8120c:	81bb      	strh	r3, [r7, #12]
		temp = temp - 2.5;
   8120e:	89ba      	ldrh	r2, [r7, #12]
   81210:	4b5f      	ldr	r3, [pc, #380]	; (81390 <Cl_Alarm_translate_sensor_values+0x538>)
   81212:	4610      	mov	r0, r2
   81214:	4798      	blx	r3
   81216:	4c5f      	ldr	r4, [pc, #380]	; (81394 <Cl_Alarm_translate_sensor_values+0x53c>)
   81218:	f04f 0200 	mov.w	r2, #0
   8121c:	4b5e      	ldr	r3, [pc, #376]	; (81398 <Cl_Alarm_translate_sensor_values+0x540>)
   8121e:	47a0      	blx	r4
   81220:	4603      	mov	r3, r0
   81222:	460c      	mov	r4, r1
   81224:	4619      	mov	r1, r3
   81226:	4622      	mov	r2, r4
   81228:	4b5c      	ldr	r3, [pc, #368]	; (8139c <Cl_Alarm_translate_sensor_values+0x544>)
   8122a:	4608      	mov	r0, r1
   8122c:	4611      	mov	r1, r2
   8122e:	4798      	blx	r3
   81230:	4603      	mov	r3, r0
   81232:	81bb      	strh	r3, [r7, #12]
								
		temp1 = ((temp1* 4) +temp)/5;
   81234:	4b51      	ldr	r3, [pc, #324]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   81236:	681a      	ldr	r2, [r3, #0]
   81238:	4b40      	ldr	r3, [pc, #256]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   8123a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   8123e:	4610      	mov	r0, r2
   81240:	4798      	blx	r3
   81242:	4603      	mov	r3, r0
   81244:	461c      	mov	r4, r3
   81246:	89ba      	ldrh	r2, [r7, #12]
   81248:	4b43      	ldr	r3, [pc, #268]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8124a:	4610      	mov	r0, r2
   8124c:	4798      	blx	r3
   8124e:	4602      	mov	r2, r0
   81250:	4b3d      	ldr	r3, [pc, #244]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81252:	4611      	mov	r1, r2
   81254:	4620      	mov	r0, r4
   81256:	4798      	blx	r3
   81258:	4603      	mov	r3, r0
   8125a:	461a      	mov	r2, r3
   8125c:	4b3b      	ldr	r3, [pc, #236]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   8125e:	4950      	ldr	r1, [pc, #320]	; (813a0 <Cl_Alarm_translate_sensor_values+0x548>)
   81260:	4610      	mov	r0, r2
   81262:	4798      	blx	r3
   81264:	4603      	mov	r3, r0
   81266:	461a      	mov	r2, r3
   81268:	4b44      	ldr	r3, [pc, #272]	; (8137c <Cl_Alarm_translate_sensor_values+0x524>)
   8126a:	601a      	str	r2, [r3, #0]
		//temp1=temp1*10;
	}
	

	if(test_sensor_status[SENSOR_TEMP2STATUS].test_flag == true)
   8126c:	4b3d      	ldr	r3, [pc, #244]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   8126e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81272:	2b00      	cmp	r3, #0
   81274:	d00e      	beq.n	81294 <Cl_Alarm_translate_sensor_values+0x43c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT2",7);
   81276:	2207      	movs	r2, #7
   81278:	494a      	ldr	r1, [pc, #296]	; (813a4 <Cl_Alarm_translate_sensor_values+0x54c>)
   8127a:	2018      	movs	r0, #24
   8127c:	4b3b      	ldr	r3, [pc, #236]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   8127e:	4798      	blx	r3
		temp2 =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   81280:	4b38      	ldr	r3, [pc, #224]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81282:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
   81286:	4b34      	ldr	r3, [pc, #208]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   81288:	4610      	mov	r0, r2
   8128a:	4798      	blx	r3
   8128c:	4602      	mov	r2, r0
   8128e:	4b46      	ldr	r3, [pc, #280]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   81290:	601a      	str	r2, [r3, #0]
   81292:	e03d      	b.n	81310 <Cl_Alarm_translate_sensor_values+0x4b8>
	}
	else
	{
				uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp2status)/(2*32768);
   81294:	4b2f      	ldr	r3, [pc, #188]	; (81354 <Cl_Alarm_translate_sensor_values+0x4fc>)
   81296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   81298:	461a      	mov	r2, r3
   8129a:	f649 5308 	movw	r3, #40200	; 0x9d08
   8129e:	fb03 f302 	mul.w	r3, r3, r2
   812a2:	2b00      	cmp	r3, #0
   812a4:	da02      	bge.n	812ac <Cl_Alarm_translate_sensor_values+0x454>
   812a6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   812aa:	33ff      	adds	r3, #255	; 0xff
   812ac:	141b      	asrs	r3, r3, #16
   812ae:	817b      	strh	r3, [r7, #10]
				res_temp_lookuptable(cal_data);
   812b0:	897b      	ldrh	r3, [r7, #10]
   812b2:	4618      	mov	r0, r3
   812b4:	4b32      	ldr	r3, [pc, #200]	; (81380 <Cl_Alarm_translate_sensor_values+0x528>)
   812b6:	4798      	blx	r3
				
				uint16_t temp = res_temp_value/100;
   812b8:	4b32      	ldr	r3, [pc, #200]	; (81384 <Cl_Alarm_translate_sensor_values+0x52c>)
   812ba:	681a      	ldr	r2, [r3, #0]
   812bc:	4b23      	ldr	r3, [pc, #140]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   812be:	4932      	ldr	r1, [pc, #200]	; (81388 <Cl_Alarm_translate_sensor_values+0x530>)
   812c0:	4610      	mov	r0, r2
   812c2:	4798      	blx	r3
   812c4:	4603      	mov	r3, r0
   812c6:	461a      	mov	r2, r3
   812c8:	4b30      	ldr	r3, [pc, #192]	; (8138c <Cl_Alarm_translate_sensor_values+0x534>)
   812ca:	4610      	mov	r0, r2
   812cc:	4798      	blx	r3
   812ce:	4603      	mov	r3, r0
   812d0:	813b      	strh	r3, [r7, #8]

		
					temp = temp - 9;
   812d2:	893b      	ldrh	r3, [r7, #8]
   812d4:	3b09      	subs	r3, #9
   812d6:	813b      	strh	r3, [r7, #8]
	
				
				
				temp2 = ((temp2* 4) +temp)/5;
   812d8:	4b33      	ldr	r3, [pc, #204]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   812da:	681a      	ldr	r2, [r3, #0]
   812dc:	4b17      	ldr	r3, [pc, #92]	; (8133c <Cl_Alarm_translate_sensor_values+0x4e4>)
   812de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   812e2:	4610      	mov	r0, r2
   812e4:	4798      	blx	r3
   812e6:	4603      	mov	r3, r0
   812e8:	461c      	mov	r4, r3
   812ea:	893a      	ldrh	r2, [r7, #8]
   812ec:	4b1a      	ldr	r3, [pc, #104]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   812ee:	4610      	mov	r0, r2
   812f0:	4798      	blx	r3
   812f2:	4602      	mov	r2, r0
   812f4:	4b14      	ldr	r3, [pc, #80]	; (81348 <Cl_Alarm_translate_sensor_values+0x4f0>)
   812f6:	4611      	mov	r1, r2
   812f8:	4620      	mov	r0, r4
   812fa:	4798      	blx	r3
   812fc:	4603      	mov	r3, r0
   812fe:	461a      	mov	r2, r3
   81300:	4b12      	ldr	r3, [pc, #72]	; (8134c <Cl_Alarm_translate_sensor_values+0x4f4>)
   81302:	4927      	ldr	r1, [pc, #156]	; (813a0 <Cl_Alarm_translate_sensor_values+0x548>)
   81304:	4610      	mov	r0, r2
   81306:	4798      	blx	r3
   81308:	4603      	mov	r3, r0
   8130a:	461a      	mov	r2, r3
   8130c:	4b26      	ldr	r3, [pc, #152]	; (813a8 <Cl_Alarm_translate_sensor_values+0x550>)
   8130e:	601a      	str	r2, [r3, #0]
		//temp2=temp2*10;
	}

	if(test_sensor_status[SENSOR_TEMP3STATUS].test_flag == true)
   81310:	4b14      	ldr	r3, [pc, #80]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81312:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   81316:	2b00      	cmp	r3, #0
   81318:	d04c      	beq.n	813b4 <Cl_Alarm_translate_sensor_values+0x55c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT3",7);
   8131a:	2207      	movs	r2, #7
   8131c:	4923      	ldr	r1, [pc, #140]	; (813ac <Cl_Alarm_translate_sensor_values+0x554>)
   8131e:	2018      	movs	r0, #24
   81320:	4b12      	ldr	r3, [pc, #72]	; (8136c <Cl_Alarm_translate_sensor_values+0x514>)
   81322:	4798      	blx	r3
		temp3 =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <Cl_Alarm_translate_sensor_values+0x50c>)
   81326:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
   8132a:	4b0b      	ldr	r3, [pc, #44]	; (81358 <Cl_Alarm_translate_sensor_values+0x500>)
   8132c:	4610      	mov	r0, r2
   8132e:	4798      	blx	r3
   81330:	4602      	mov	r2, r0
   81332:	4b1f      	ldr	r3, [pc, #124]	; (813b0 <Cl_Alarm_translate_sensor_values+0x558>)
   81334:	601a      	str	r2, [r3, #0]
   81336:	e08b      	b.n	81450 <Cl_Alarm_translate_sensor_values+0x5f8>
   81338:	20072c94 	.word	0x20072c94
   8133c:	000a268d 	.word	0x000a268d
   81340:	42440000 	.word	0x42440000
   81344:	20072d08 	.word	0x20072d08
   81348:	000a247d 	.word	0x000a247d
   8134c:	000a27f5 	.word	0x000a27f5
   81350:	42480000 	.word	0x42480000
   81354:	20072dbc 	.word	0x20072dbc
   81358:	000a25e5 	.word	0x000a25e5
   8135c:	000a2a19 	.word	0x000a2a19
   81360:	00083fb9 	.word	0x00083fb9
   81364:	200730a0 	.word	0x200730a0
   81368:	000a4668 	.word	0x000a4668
   8136c:	00098601 	.word	0x00098601
   81370:	200715dc 	.word	0x200715dc
   81374:	20071618 	.word	0x20071618
   81378:	000a4670 	.word	0x000a4670
   8137c:	200715ec 	.word	0x200715ec
   81380:	0008e659 	.word	0x0008e659
   81384:	200725ec 	.word	0x200725ec
   81388:	42c80000 	.word	0x42c80000
   8138c:	000a2a65 	.word	0x000a2a65
   81390:	000a1d41 	.word	0x000a1d41
   81394:	000a1aa5 	.word	0x000a1aa5
   81398:	40040000 	.word	0x40040000
   8139c:	000a2391 	.word	0x000a2391
   813a0:	40a00000 	.word	0x40a00000
   813a4:	000a4678 	.word	0x000a4678
   813a8:	200715f0 	.word	0x200715f0
   813ac:	000a4680 	.word	0x000a4680
   813b0:	200715f4 	.word	0x200715f4
	}
	else
	{
				uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp3status)/(2*32768);
   813b4:	4b7e      	ldr	r3, [pc, #504]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   813b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   813b8:	461a      	mov	r2, r3
   813ba:	f649 5308 	movw	r3, #40200	; 0x9d08
   813be:	fb03 f302 	mul.w	r3, r3, r2
   813c2:	2b00      	cmp	r3, #0
   813c4:	da02      	bge.n	813cc <Cl_Alarm_translate_sensor_values+0x574>
   813c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   813ca:	33ff      	adds	r3, #255	; 0xff
   813cc:	141b      	asrs	r3, r3, #16
   813ce:	80fb      	strh	r3, [r7, #6]
				res_temp_lookuptable(cal_data);
   813d0:	88fb      	ldrh	r3, [r7, #6]
   813d2:	4618      	mov	r0, r3
   813d4:	4b77      	ldr	r3, [pc, #476]	; (815b4 <Cl_Alarm_translate_sensor_values+0x75c>)
   813d6:	4798      	blx	r3
				
				uint16_t temp = res_temp_value/100;
   813d8:	4b77      	ldr	r3, [pc, #476]	; (815b8 <Cl_Alarm_translate_sensor_values+0x760>)
   813da:	681a      	ldr	r2, [r3, #0]
   813dc:	4b77      	ldr	r3, [pc, #476]	; (815bc <Cl_Alarm_translate_sensor_values+0x764>)
   813de:	4978      	ldr	r1, [pc, #480]	; (815c0 <Cl_Alarm_translate_sensor_values+0x768>)
   813e0:	4610      	mov	r0, r2
   813e2:	4798      	blx	r3
   813e4:	4603      	mov	r3, r0
   813e6:	461a      	mov	r2, r3
   813e8:	4b76      	ldr	r3, [pc, #472]	; (815c4 <Cl_Alarm_translate_sensor_values+0x76c>)
   813ea:	4610      	mov	r0, r2
   813ec:	4798      	blx	r3
   813ee:	4603      	mov	r3, r0
   813f0:	80bb      	strh	r3, [r7, #4]
				temp = temp - 2.5;
   813f2:	88ba      	ldrh	r2, [r7, #4]
   813f4:	4b74      	ldr	r3, [pc, #464]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   813f6:	4610      	mov	r0, r2
   813f8:	4798      	blx	r3
   813fa:	4c74      	ldr	r4, [pc, #464]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   813fc:	f04f 0200 	mov.w	r2, #0
   81400:	4b73      	ldr	r3, [pc, #460]	; (815d0 <Cl_Alarm_translate_sensor_values+0x778>)
   81402:	47a0      	blx	r4
   81404:	4603      	mov	r3, r0
   81406:	460c      	mov	r4, r1
   81408:	4619      	mov	r1, r3
   8140a:	4622      	mov	r2, r4
   8140c:	4b71      	ldr	r3, [pc, #452]	; (815d4 <Cl_Alarm_translate_sensor_values+0x77c>)
   8140e:	4608      	mov	r0, r1
   81410:	4611      	mov	r1, r2
   81412:	4798      	blx	r3
   81414:	4603      	mov	r3, r0
   81416:	80bb      	strh	r3, [r7, #4]
				
				temp3 = ((temp3* 4) +temp)/5;
   81418:	4b6f      	ldr	r3, [pc, #444]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   8141a:	681a      	ldr	r2, [r3, #0]
   8141c:	4b6f      	ldr	r3, [pc, #444]	; (815dc <Cl_Alarm_translate_sensor_values+0x784>)
   8141e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   81422:	4610      	mov	r0, r2
   81424:	4798      	blx	r3
   81426:	4603      	mov	r3, r0
   81428:	461c      	mov	r4, r3
   8142a:	88ba      	ldrh	r2, [r7, #4]
   8142c:	4b6c      	ldr	r3, [pc, #432]	; (815e0 <Cl_Alarm_translate_sensor_values+0x788>)
   8142e:	4610      	mov	r0, r2
   81430:	4798      	blx	r3
   81432:	4602      	mov	r2, r0
   81434:	4b6b      	ldr	r3, [pc, #428]	; (815e4 <Cl_Alarm_translate_sensor_values+0x78c>)
   81436:	4611      	mov	r1, r2
   81438:	4620      	mov	r0, r4
   8143a:	4798      	blx	r3
   8143c:	4603      	mov	r3, r0
   8143e:	461a      	mov	r2, r3
   81440:	4b5e      	ldr	r3, [pc, #376]	; (815bc <Cl_Alarm_translate_sensor_values+0x764>)
   81442:	4969      	ldr	r1, [pc, #420]	; (815e8 <Cl_Alarm_translate_sensor_values+0x790>)
   81444:	4610      	mov	r0, r2
   81446:	4798      	blx	r3
   81448:	4603      	mov	r3, r0
   8144a:	461a      	mov	r2, r3
   8144c:	4b62      	ldr	r3, [pc, #392]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   8144e:	601a      	str	r2, [r3, #0]
		//temp3=temp3*10;
	}
	

	
	if(test_sensor_status[SENSOR_COND_STATUS].test_flag == true)
   81450:	4b66      	ldr	r3, [pc, #408]	; (815ec <Cl_Alarm_translate_sensor_values+0x794>)
   81452:	7f9b      	ldrb	r3, [r3, #30]
   81454:	2b00      	cmp	r3, #0
   81456:	d00e      	beq.n	81476 <Cl_Alarm_translate_sensor_values+0x61e>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTCOND",5);
   81458:	2205      	movs	r2, #5
   8145a:	4965      	ldr	r1, [pc, #404]	; (815f0 <Cl_Alarm_translate_sensor_values+0x798>)
   8145c:	2018      	movs	r0, #24
   8145e:	4b65      	ldr	r3, [pc, #404]	; (815f4 <Cl_Alarm_translate_sensor_values+0x79c>)
   81460:	4798      	blx	r3
		cond_final =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   81462:	4b62      	ldr	r3, [pc, #392]	; (815ec <Cl_Alarm_translate_sensor_values+0x794>)
   81464:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   81468:	4b5d      	ldr	r3, [pc, #372]	; (815e0 <Cl_Alarm_translate_sensor_values+0x788>)
   8146a:	4610      	mov	r0, r2
   8146c:	4798      	blx	r3
   8146e:	4602      	mov	r2, r0
   81470:	4b61      	ldr	r3, [pc, #388]	; (815f8 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81472:	601a      	str	r2, [r3, #0]
   81474:	e084      	b.n	81580 <Cl_Alarm_translate_sensor_values+0x728>
		
	}
	else
	{
		
		cond1 =  -0.0001 * cl_sys_statbuffer.cond_status * cl_sys_statbuffer.cond_status   + 0.36 * cl_sys_statbuffer.cond_status  - 38.39 ;
   81476:	4b4e      	ldr	r3, [pc, #312]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   81478:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8147a:	461a      	mov	r2, r3
   8147c:	4b52      	ldr	r3, [pc, #328]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   8147e:	4610      	mov	r0, r2
   81480:	4798      	blx	r3
   81482:	4c5e      	ldr	r4, [pc, #376]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   81484:	a342      	add	r3, pc, #264	; (adr r3, 81590 <Cl_Alarm_translate_sensor_values+0x738>)
   81486:	e9d3 2300 	ldrd	r2, r3, [r3]
   8148a:	47a0      	blx	r4
   8148c:	4603      	mov	r3, r0
   8148e:	460c      	mov	r4, r1
   81490:	461d      	mov	r5, r3
   81492:	4626      	mov	r6, r4
   81494:	4b46      	ldr	r3, [pc, #280]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   81496:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   81498:	461a      	mov	r2, r3
   8149a:	4b4b      	ldr	r3, [pc, #300]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   8149c:	4610      	mov	r0, r2
   8149e:	4798      	blx	r3
   814a0:	4602      	mov	r2, r0
   814a2:	460b      	mov	r3, r1
   814a4:	4c55      	ldr	r4, [pc, #340]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   814a6:	4628      	mov	r0, r5
   814a8:	4631      	mov	r1, r6
   814aa:	47a0      	blx	r4
   814ac:	4603      	mov	r3, r0
   814ae:	460c      	mov	r4, r1
   814b0:	461d      	mov	r5, r3
   814b2:	4626      	mov	r6, r4
   814b4:	4b3e      	ldr	r3, [pc, #248]	; (815b0 <Cl_Alarm_translate_sensor_values+0x758>)
   814b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   814b8:	461a      	mov	r2, r3
   814ba:	4b43      	ldr	r3, [pc, #268]	; (815c8 <Cl_Alarm_translate_sensor_values+0x770>)
   814bc:	4610      	mov	r0, r2
   814be:	4798      	blx	r3
   814c0:	4c4e      	ldr	r4, [pc, #312]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   814c2:	a335      	add	r3, pc, #212	; (adr r3, 81598 <Cl_Alarm_translate_sensor_values+0x740>)
   814c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   814c8:	47a0      	blx	r4
   814ca:	4603      	mov	r3, r0
   814cc:	460c      	mov	r4, r1
   814ce:	461a      	mov	r2, r3
   814d0:	4623      	mov	r3, r4
   814d2:	4c4b      	ldr	r4, [pc, #300]	; (81600 <Cl_Alarm_translate_sensor_values+0x7a8>)
   814d4:	4628      	mov	r0, r5
   814d6:	4631      	mov	r1, r6
   814d8:	47a0      	blx	r4
   814da:	4603      	mov	r3, r0
   814dc:	460c      	mov	r4, r1
   814de:	4618      	mov	r0, r3
   814e0:	4621      	mov	r1, r4
   814e2:	4c3a      	ldr	r4, [pc, #232]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   814e4:	a32e      	add	r3, pc, #184	; (adr r3, 815a0 <Cl_Alarm_translate_sensor_values+0x748>)
   814e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   814ea:	47a0      	blx	r4
   814ec:	4603      	mov	r3, r0
   814ee:	460c      	mov	r4, r1
   814f0:	4619      	mov	r1, r3
   814f2:	4622      	mov	r2, r4
   814f4:	4b43      	ldr	r3, [pc, #268]	; (81604 <Cl_Alarm_translate_sensor_values+0x7ac>)
   814f6:	4608      	mov	r0, r1
   814f8:	4611      	mov	r1, r2
   814fa:	4798      	blx	r3
   814fc:	4602      	mov	r2, r0
   814fe:	4b42      	ldr	r3, [pc, #264]	; (81608 <Cl_Alarm_translate_sensor_values+0x7b0>)
   81500:	601a      	str	r2, [r3, #0]
		cond_final= (cond1/(1+(temp3-25.0)*0.020)/10);
   81502:	4b41      	ldr	r3, [pc, #260]	; (81608 <Cl_Alarm_translate_sensor_values+0x7b0>)
   81504:	681a      	ldr	r2, [r3, #0]
   81506:	4b41      	ldr	r3, [pc, #260]	; (8160c <Cl_Alarm_translate_sensor_values+0x7b4>)
   81508:	4610      	mov	r0, r2
   8150a:	4798      	blx	r3
   8150c:	4605      	mov	r5, r0
   8150e:	460e      	mov	r6, r1
   81510:	4b31      	ldr	r3, [pc, #196]	; (815d8 <Cl_Alarm_translate_sensor_values+0x780>)
   81512:	681a      	ldr	r2, [r3, #0]
   81514:	4b3d      	ldr	r3, [pc, #244]	; (8160c <Cl_Alarm_translate_sensor_values+0x7b4>)
   81516:	4610      	mov	r0, r2
   81518:	4798      	blx	r3
   8151a:	4c2c      	ldr	r4, [pc, #176]	; (815cc <Cl_Alarm_translate_sensor_values+0x774>)
   8151c:	f04f 0200 	mov.w	r2, #0
   81520:	4b3b      	ldr	r3, [pc, #236]	; (81610 <Cl_Alarm_translate_sensor_values+0x7b8>)
   81522:	47a0      	blx	r4
   81524:	4603      	mov	r3, r0
   81526:	460c      	mov	r4, r1
   81528:	4618      	mov	r0, r3
   8152a:	4621      	mov	r1, r4
   8152c:	4c33      	ldr	r4, [pc, #204]	; (815fc <Cl_Alarm_translate_sensor_values+0x7a4>)
   8152e:	a31e      	add	r3, pc, #120	; (adr r3, 815a8 <Cl_Alarm_translate_sensor_values+0x750>)
   81530:	e9d3 2300 	ldrd	r2, r3, [r3]
   81534:	47a0      	blx	r4
   81536:	4603      	mov	r3, r0
   81538:	460c      	mov	r4, r1
   8153a:	4618      	mov	r0, r3
   8153c:	4621      	mov	r1, r4
   8153e:	4c30      	ldr	r4, [pc, #192]	; (81600 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81540:	f04f 0200 	mov.w	r2, #0
   81544:	4b33      	ldr	r3, [pc, #204]	; (81614 <Cl_Alarm_translate_sensor_values+0x7bc>)
   81546:	47a0      	blx	r4
   81548:	4603      	mov	r3, r0
   8154a:	460c      	mov	r4, r1
   8154c:	461a      	mov	r2, r3
   8154e:	4623      	mov	r3, r4
   81550:	4c31      	ldr	r4, [pc, #196]	; (81618 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81552:	4628      	mov	r0, r5
   81554:	4631      	mov	r1, r6
   81556:	47a0      	blx	r4
   81558:	4603      	mov	r3, r0
   8155a:	460c      	mov	r4, r1
   8155c:	4618      	mov	r0, r3
   8155e:	4621      	mov	r1, r4
   81560:	4c2d      	ldr	r4, [pc, #180]	; (81618 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81562:	f04f 0200 	mov.w	r2, #0
   81566:	4b2d      	ldr	r3, [pc, #180]	; (8161c <Cl_Alarm_translate_sensor_values+0x7c4>)
   81568:	47a0      	blx	r4
   8156a:	4603      	mov	r3, r0
   8156c:	460c      	mov	r4, r1
   8156e:	4619      	mov	r1, r3
   81570:	4622      	mov	r2, r4
   81572:	4b24      	ldr	r3, [pc, #144]	; (81604 <Cl_Alarm_translate_sensor_values+0x7ac>)
   81574:	4608      	mov	r0, r1
   81576:	4611      	mov	r1, r2
   81578:	4798      	blx	r3
   8157a:	4602      	mov	r2, r0
   8157c:	4b1e      	ldr	r3, [pc, #120]	; (815f8 <Cl_Alarm_translate_sensor_values+0x7a0>)
   8157e:	601a      	str	r2, [r3, #0]
// 		cond1 = ((cond1* 10) + cond_final_cs3)/11;
// 		cond_final= cond1/(1+(temp3-25.0)*0.021);
// 		cond_final=cond_final/10;
	}
	
}
   81580:	bf00      	nop
   81582:	4618      	mov	r0, r3
   81584:	371c      	adds	r7, #28
   81586:	46bd      	mov	sp, r7
   81588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8158a:	bf00      	nop
   8158c:	f3af 8000 	nop.w
   81590:	eb1c432d 	.word	0xeb1c432d
   81594:	bf1a36e2 	.word	0xbf1a36e2
   81598:	70a3d70a 	.word	0x70a3d70a
   8159c:	3fd70a3d 	.word	0x3fd70a3d
   815a0:	851eb852 	.word	0x851eb852
   815a4:	404331eb 	.word	0x404331eb
   815a8:	47ae147b 	.word	0x47ae147b
   815ac:	3f947ae1 	.word	0x3f947ae1
   815b0:	20072dbc 	.word	0x20072dbc
   815b4:	0008e659 	.word	0x0008e659
   815b8:	200725ec 	.word	0x200725ec
   815bc:	000a27f5 	.word	0x000a27f5
   815c0:	42c80000 	.word	0x42c80000
   815c4:	000a2a65 	.word	0x000a2a65
   815c8:	000a1d41 	.word	0x000a1d41
   815cc:	000a1aa5 	.word	0x000a1aa5
   815d0:	40040000 	.word	0x40040000
   815d4:	000a2391 	.word	0x000a2391
   815d8:	200715f4 	.word	0x200715f4
   815dc:	000a268d 	.word	0x000a268d
   815e0:	000a25e5 	.word	0x000a25e5
   815e4:	000a247d 	.word	0x000a247d
   815e8:	40a00000 	.word	0x40a00000
   815ec:	200730a0 	.word	0x200730a0
   815f0:	000a4688 	.word	0x000a4688
   815f4:	00098601 	.word	0x00098601
   815f8:	200715fc 	.word	0x200715fc
   815fc:	000a1e0d 	.word	0x000a1e0d
   81600:	000a1aa9 	.word	0x000a1aa9
   81604:	000a23d1 	.word	0x000a23d1
   81608:	200715f8 	.word	0x200715f8
   8160c:	000a1d65 	.word	0x000a1d65
   81610:	40390000 	.word	0x40390000
   81614:	3ff00000 	.word	0x3ff00000
   81618:	000a2061 	.word	0x000a2061
   8161c:	40240000 	.word	0x40240000

00081620 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   81620:	b580      	push	{r7, lr}
   81622:	b082      	sub	sp, #8
   81624:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   81626:	4ba2      	ldr	r3, [pc, #648]	; (818b0 <Cl_alarms_scanforAlarms+0x290>)
   81628:	4798      	blx	r3
   8162a:	4603      	mov	r3, r0
   8162c:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   8162e:	79fb      	ldrb	r3, [r7, #7]
   81630:	2b00      	cmp	r3, #0
   81632:	d001      	beq.n	81638 <Cl_alarms_scanforAlarms+0x18>
   81634:	4b9f      	ldr	r3, [pc, #636]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81636:	4798      	blx	r3
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   81638:	4b9f      	ldr	r3, [pc, #636]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8163a:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   8163e:	2b00      	cmp	r3, #0
   81640:	d049      	beq.n	816d6 <Cl_alarms_scanforAlarms+0xb6>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   81642:	4b9d      	ldr	r3, [pc, #628]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81644:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   81648:	2b01      	cmp	r3, #1
   8164a:	d104      	bne.n	81656 <Cl_alarms_scanforAlarms+0x36>
   8164c:	4b9b      	ldr	r3, [pc, #620]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8164e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81652:	2b00      	cmp	r3, #0
   81654:	d109      	bne.n	8166a <Cl_alarms_scanforAlarms+0x4a>
   81656:	4b98      	ldr	r3, [pc, #608]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81658:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   8165c:	2b00      	cmp	r3, #0
   8165e:	d134      	bne.n	816ca <Cl_alarms_scanforAlarms+0xaa>
   81660:	4b96      	ldr	r3, [pc, #600]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81666:	2b00      	cmp	r3, #0
   81668:	d12f      	bne.n	816ca <Cl_alarms_scanforAlarms+0xaa>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8166a:	4b93      	ldr	r3, [pc, #588]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8166c:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   81670:	2b01      	cmp	r3, #1
   81672:	d02f      	beq.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81674:	4b90      	ldr	r3, [pc, #576]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81676:	2201      	movs	r2, #1
   81678:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   8167c:	4b90      	ldr	r3, [pc, #576]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8167e:	781b      	ldrb	r3, [r3, #0]
   81680:	4a8f      	ldr	r2, [pc, #572]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81682:	3301      	adds	r3, #1
   81684:	00db      	lsls	r3, r3, #3
   81686:	4413      	add	r3, r2
   81688:	2229      	movs	r2, #41	; 0x29
   8168a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   8168c:	4b8a      	ldr	r3, [pc, #552]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8168e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   81692:	3301      	adds	r3, #1
   81694:	b2da      	uxtb	r2, r3
   81696:	4b88      	ldr	r3, [pc, #544]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81698:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   8169c:	4b89      	ldr	r3, [pc, #548]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   8169e:	2201      	movs	r2, #1
   816a0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   816a2:	4b89      	ldr	r3, [pc, #548]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   816a4:	2229      	movs	r2, #41	; 0x29
   816a6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   816a8:	4b85      	ldr	r3, [pc, #532]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   816aa:	781b      	ldrb	r3, [r3, #0]
   816ac:	461a      	mov	r2, r3
   816ae:	4b84      	ldr	r3, [pc, #528]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   816b0:	4413      	add	r3, r2
   816b2:	222e      	movs	r2, #46	; 0x2e
   816b4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   816b6:	4b85      	ldr	r3, [pc, #532]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   816b8:	4798      	blx	r3
   816ba:	4603      	mov	r3, r0
   816bc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   816be:	79fb      	ldrb	r3, [r7, #7]
   816c0:	2b00      	cmp	r3, #0
   816c2:	d007      	beq.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
   816c4:	4b7b      	ldr	r3, [pc, #492]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   816c6:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   816c8:	e004      	b.n	816d4 <Cl_alarms_scanforAlarms+0xb4>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   816ca:	4b7b      	ldr	r3, [pc, #492]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816cc:	2204      	movs	r2, #4
   816ce:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   816d2:	e000      	b.n	816d6 <Cl_alarms_scanforAlarms+0xb6>
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   816d4:	bf00      	nop
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   816d6:	4b78      	ldr	r3, [pc, #480]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816d8:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   816dc:	2b00      	cmp	r3, #0
   816de:	d049      	beq.n	81774 <Cl_alarms_scanforAlarms+0x154>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   816e0:	4b75      	ldr	r3, [pc, #468]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816e2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   816e6:	2b01      	cmp	r3, #1
   816e8:	d104      	bne.n	816f4 <Cl_alarms_scanforAlarms+0xd4>
   816ea:	4b74      	ldr	r3, [pc, #464]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   816ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   816f0:	2b00      	cmp	r3, #0
   816f2:	d109      	bne.n	81708 <Cl_alarms_scanforAlarms+0xe8>
   816f4:	4b70      	ldr	r3, [pc, #448]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   816f6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   816fa:	2b00      	cmp	r3, #0
   816fc:	d134      	bne.n	81768 <Cl_alarms_scanforAlarms+0x148>
   816fe:	4b6f      	ldr	r3, [pc, #444]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81704:	2b00      	cmp	r3, #0
   81706:	d12f      	bne.n	81768 <Cl_alarms_scanforAlarms+0x148>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81708:	4b6b      	ldr	r3, [pc, #428]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8170a:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   8170e:	2b01      	cmp	r3, #1
   81710:	d02f      	beq.n	81772 <Cl_alarms_scanforAlarms+0x152>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81712:	4b69      	ldr	r3, [pc, #420]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81714:	2201      	movs	r2, #1
   81716:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   8171a:	4b69      	ldr	r3, [pc, #420]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8171c:	781b      	ldrb	r3, [r3, #0]
   8171e:	4a68      	ldr	r2, [pc, #416]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81720:	3301      	adds	r3, #1
   81722:	00db      	lsls	r3, r3, #3
   81724:	4413      	add	r3, r2
   81726:	2229      	movs	r2, #41	; 0x29
   81728:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   8172a:	4b63      	ldr	r3, [pc, #396]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8172c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   81730:	3301      	adds	r3, #1
   81732:	b2da      	uxtb	r2, r3
   81734:	4b60      	ldr	r3, [pc, #384]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81736:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   8173a:	4b62      	ldr	r3, [pc, #392]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   8173c:	2201      	movs	r2, #1
   8173e:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   81740:	4b61      	ldr	r3, [pc, #388]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   81742:	222a      	movs	r2, #42	; 0x2a
   81744:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81746:	4b5e      	ldr	r3, [pc, #376]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81748:	781b      	ldrb	r3, [r3, #0]
   8174a:	461a      	mov	r2, r3
   8174c:	4b5c      	ldr	r3, [pc, #368]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8174e:	4413      	add	r3, r2
   81750:	222e      	movs	r2, #46	; 0x2e
   81752:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81754:	4b5d      	ldr	r3, [pc, #372]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   81756:	4798      	blx	r3
   81758:	4603      	mov	r3, r0
   8175a:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   8175c:	79fb      	ldrb	r3, [r7, #7]
   8175e:	2b00      	cmp	r3, #0
   81760:	d007      	beq.n	81772 <Cl_alarms_scanforAlarms+0x152>
   81762:	4b54      	ldr	r3, [pc, #336]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81764:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81766:	e004      	b.n	81772 <Cl_alarms_scanforAlarms+0x152>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81768:	4b53      	ldr	r3, [pc, #332]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8176a:	2204      	movs	r2, #4
   8176c:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   81770:	e000      	b.n	81774 <Cl_alarms_scanforAlarms+0x154>
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81772:	bf00      	nop
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   81774:	4b50      	ldr	r3, [pc, #320]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81776:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   8177a:	2b00      	cmp	r3, #0
   8177c:	d049      	beq.n	81812 <Cl_alarms_scanforAlarms+0x1f2>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   8177e:	4b4e      	ldr	r3, [pc, #312]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81780:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   81784:	2b01      	cmp	r3, #1
   81786:	d104      	bne.n	81792 <Cl_alarms_scanforAlarms+0x172>
   81788:	4b4c      	ldr	r3, [pc, #304]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8178a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8178e:	2b00      	cmp	r3, #0
   81790:	d109      	bne.n	817a6 <Cl_alarms_scanforAlarms+0x186>
   81792:	4b49      	ldr	r3, [pc, #292]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81794:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   81798:	2b00      	cmp	r3, #0
   8179a:	d134      	bne.n	81806 <Cl_alarms_scanforAlarms+0x1e6>
   8179c:	4b47      	ldr	r3, [pc, #284]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8179e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817a2:	2b00      	cmp	r3, #0
   817a4:	d12f      	bne.n	81806 <Cl_alarms_scanforAlarms+0x1e6>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   817a6:	4b44      	ldr	r3, [pc, #272]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817a8:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   817ac:	2b01      	cmp	r3, #1
   817ae:	d02f      	beq.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   817b0:	4b41      	ldr	r3, [pc, #260]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817b2:	2201      	movs	r2, #1
   817b4:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   817b8:	4b41      	ldr	r3, [pc, #260]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817ba:	781b      	ldrb	r3, [r3, #0]
   817bc:	4a40      	ldr	r2, [pc, #256]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817be:	3301      	adds	r3, #1
   817c0:	00db      	lsls	r3, r3, #3
   817c2:	4413      	add	r3, r2
   817c4:	222b      	movs	r2, #43	; 0x2b
   817c6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   817c8:	4b3b      	ldr	r3, [pc, #236]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817ca:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   817ce:	3301      	adds	r3, #1
   817d0:	b2da      	uxtb	r2, r3
   817d2:	4b39      	ldr	r3, [pc, #228]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   817d4:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   817d8:	4b3a      	ldr	r3, [pc, #232]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   817da:	2201      	movs	r2, #1
   817dc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   817de:	4b3a      	ldr	r3, [pc, #232]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   817e0:	222b      	movs	r2, #43	; 0x2b
   817e2:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   817e4:	4b36      	ldr	r3, [pc, #216]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817e6:	781b      	ldrb	r3, [r3, #0]
   817e8:	461a      	mov	r2, r3
   817ea:	4b35      	ldr	r3, [pc, #212]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   817ec:	4413      	add	r3, r2
   817ee:	222e      	movs	r2, #46	; 0x2e
   817f0:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   817f2:	4b36      	ldr	r3, [pc, #216]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   817f4:	4798      	blx	r3
   817f6:	4603      	mov	r3, r0
   817f8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   817fa:	79fb      	ldrb	r3, [r7, #7]
   817fc:	2b00      	cmp	r3, #0
   817fe:	d007      	beq.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
   81800:	4b2c      	ldr	r3, [pc, #176]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   81802:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81804:	e004      	b.n	81810 <Cl_alarms_scanforAlarms+0x1f0>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81806:	4b2c      	ldr	r3, [pc, #176]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81808:	2204      	movs	r2, #4
   8180a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   8180e:	e000      	b.n	81812 <Cl_alarms_scanforAlarms+0x1f2>
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81810:	bf00      	nop
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   81812:	4b29      	ldr	r3, [pc, #164]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81814:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81818:	2b00      	cmp	r3, #0
   8181a:	d05a      	beq.n	818d2 <Cl_alarms_scanforAlarms+0x2b2>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   8181c:	4b26      	ldr	r3, [pc, #152]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   8181e:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81822:	2b01      	cmp	r3, #1
   81824:	d104      	bne.n	81830 <Cl_alarms_scanforAlarms+0x210>
   81826:	4b25      	ldr	r3, [pc, #148]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   81828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8182c:	2b00      	cmp	r3, #0
   8182e:	d109      	bne.n	81844 <Cl_alarms_scanforAlarms+0x224>
   81830:	4b21      	ldr	r3, [pc, #132]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81832:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81836:	2b00      	cmp	r3, #0
   81838:	d134      	bne.n	818a4 <Cl_alarms_scanforAlarms+0x284>
   8183a:	4b20      	ldr	r3, [pc, #128]	; (818bc <Cl_alarms_scanforAlarms+0x29c>)
   8183c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81840:	2b00      	cmp	r3, #0
   81842:	d12f      	bne.n	818a4 <Cl_alarms_scanforAlarms+0x284>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81844:	4b1c      	ldr	r3, [pc, #112]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81846:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   8184a:	2b01      	cmp	r3, #1
   8184c:	d040      	beq.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8184e:	4b1a      	ldr	r3, [pc, #104]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81850:	2201      	movs	r2, #1
   81852:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   81856:	4b1a      	ldr	r3, [pc, #104]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81858:	781b      	ldrb	r3, [r3, #0]
   8185a:	4a19      	ldr	r2, [pc, #100]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8185c:	3301      	adds	r3, #1
   8185e:	00db      	lsls	r3, r3, #3
   81860:	4413      	add	r3, r2
   81862:	222c      	movs	r2, #44	; 0x2c
   81864:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   81866:	4b14      	ldr	r3, [pc, #80]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81868:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   8186c:	3301      	adds	r3, #1
   8186e:	b2da      	uxtb	r2, r3
   81870:	4b11      	ldr	r3, [pc, #68]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   81872:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   81876:	4b13      	ldr	r3, [pc, #76]	; (818c4 <Cl_alarms_scanforAlarms+0x2a4>)
   81878:	2201      	movs	r2, #1
   8187a:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   8187c:	4b12      	ldr	r3, [pc, #72]	; (818c8 <Cl_alarms_scanforAlarms+0x2a8>)
   8187e:	222c      	movs	r2, #44	; 0x2c
   81880:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81882:	4b0f      	ldr	r3, [pc, #60]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   81884:	781b      	ldrb	r3, [r3, #0]
   81886:	461a      	mov	r2, r3
   81888:	4b0d      	ldr	r3, [pc, #52]	; (818c0 <Cl_alarms_scanforAlarms+0x2a0>)
   8188a:	4413      	add	r3, r2
   8188c:	222e      	movs	r2, #46	; 0x2e
   8188e:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81890:	4b0e      	ldr	r3, [pc, #56]	; (818cc <Cl_alarms_scanforAlarms+0x2ac>)
   81892:	4798      	blx	r3
   81894:	4603      	mov	r3, r0
   81896:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81898:	79fb      	ldrb	r3, [r7, #7]
   8189a:	2b00      	cmp	r3, #0
   8189c:	d018      	beq.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
   8189e:	4b05      	ldr	r3, [pc, #20]	; (818b4 <Cl_alarms_scanforAlarms+0x294>)
   818a0:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   818a2:	e015      	b.n	818d0 <Cl_alarms_scanforAlarms+0x2b0>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   818a4:	4b04      	ldr	r3, [pc, #16]	; (818b8 <Cl_alarms_scanforAlarms+0x298>)
   818a6:	2204      	movs	r2, #4
   818a8:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   818ac:	e011      	b.n	818d2 <Cl_alarms_scanforAlarms+0x2b2>
   818ae:	bf00      	nop
   818b0:	00080e59 	.word	0x00080e59
   818b4:	000893e9 	.word	0x000893e9
   818b8:	20072874 	.word	0x20072874
   818bc:	20072dbc 	.word	0x20072dbc
   818c0:	20072e58 	.word	0x20072e58
   818c4:	200715d9 	.word	0x200715d9
   818c8:	20072c98 	.word	0x20072c98
   818cc:	00082e69 	.word	0x00082e69
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   818d0:	bf00      	nop
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   818d2:	4b95      	ldr	r3, [pc, #596]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818d4:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   818d8:	2b00      	cmp	r3, #0
   818da:	d032      	beq.n	81942 <Cl_alarms_scanforAlarms+0x322>
	{
		
		if(!cl_sys_statbuffer.abdstatus)
   818dc:	4b93      	ldr	r3, [pc, #588]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   818de:	8b1b      	ldrh	r3, [r3, #24]
   818e0:	2b00      	cmp	r3, #0
   818e2:	d12a      	bne.n	8193a <Cl_alarms_scanforAlarms+0x31a>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   818e4:	4b90      	ldr	r3, [pc, #576]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818e6:	2201      	movs	r2, #1
   818e8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ABD_EVENT; 
   818ec:	4b90      	ldr	r3, [pc, #576]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   818ee:	781b      	ldrb	r3, [r3, #0]
   818f0:	4a8f      	ldr	r2, [pc, #572]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   818f2:	3301      	adds	r3, #1
   818f4:	00db      	lsls	r3, r3, #3
   818f6:	4413      	add	r3, r2
   818f8:	2220      	movs	r2, #32
   818fa:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   818fc:	4b8a      	ldr	r3, [pc, #552]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   818fe:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   81902:	3301      	adds	r3, #1
   81904:	b2da      	uxtb	r2, r3
   81906:	4b88      	ldr	r3, [pc, #544]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81908:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   8190c:	4b89      	ldr	r3, [pc, #548]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   8190e:	2201      	movs	r2, #1
   81910:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   81912:	4b89      	ldr	r3, [pc, #548]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81914:	2220      	movs	r2, #32
   81916:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81918:	4b85      	ldr	r3, [pc, #532]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8191a:	781b      	ldrb	r3, [r3, #0]
   8191c:	461a      	mov	r2, r3
   8191e:	4b84      	ldr	r3, [pc, #528]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81920:	4413      	add	r3, r2
   81922:	222e      	movs	r2, #46	; 0x2e
   81924:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81926:	4b85      	ldr	r3, [pc, #532]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81928:	4798      	blx	r3
   8192a:	4603      	mov	r3, r0
   8192c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8192e:	79fb      	ldrb	r3, [r7, #7]
   81930:	2b00      	cmp	r3, #0
   81932:	d006      	beq.n	81942 <Cl_alarms_scanforAlarms+0x322>
   81934:	4b82      	ldr	r3, [pc, #520]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81936:	4798      	blx	r3
   81938:	e003      	b.n	81942 <Cl_alarms_scanforAlarms+0x322>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   8193a:	4b7b      	ldr	r3, [pc, #492]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   8193c:	2204      	movs	r2, #4
   8193e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   81942:	4b79      	ldr	r3, [pc, #484]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81944:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   81948:	2b00      	cmp	r3, #0
   8194a:	d032      	beq.n	819b2 <Cl_alarms_scanforAlarms+0x392>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   8194c:	4b77      	ldr	r3, [pc, #476]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   8194e:	8b5b      	ldrh	r3, [r3, #26]
   81950:	2b00      	cmp	r3, #0
   81952:	d02a      	beq.n	819aa <Cl_alarms_scanforAlarms+0x38a>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81954:	4b74      	ldr	r3, [pc, #464]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81956:	2201      	movs	r2, #1
   81958:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BD_EVENT; 
   8195c:	4b74      	ldr	r3, [pc, #464]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8195e:	781b      	ldrb	r3, [r3, #0]
   81960:	4a73      	ldr	r2, [pc, #460]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81962:	3301      	adds	r3, #1
   81964:	00db      	lsls	r3, r3, #3
   81966:	4413      	add	r3, r2
   81968:	2221      	movs	r2, #33	; 0x21
   8196a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   8196c:	4b6e      	ldr	r3, [pc, #440]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   8196e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   81972:	3301      	adds	r3, #1
   81974:	b2da      	uxtb	r2, r3
   81976:	4b6c      	ldr	r3, [pc, #432]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81978:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   8197c:	4b6d      	ldr	r3, [pc, #436]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   8197e:	2201      	movs	r2, #1
   81980:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81982:	4b6d      	ldr	r3, [pc, #436]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81984:	2221      	movs	r2, #33	; 0x21
   81986:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81988:	4b69      	ldr	r3, [pc, #420]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   8198a:	781b      	ldrb	r3, [r3, #0]
   8198c:	461a      	mov	r2, r3
   8198e:	4b68      	ldr	r3, [pc, #416]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81990:	4413      	add	r3, r2
   81992:	222e      	movs	r2, #46	; 0x2e
   81994:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81996:	4b69      	ldr	r3, [pc, #420]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81998:	4798      	blx	r3
   8199a:	4603      	mov	r3, r0
   8199c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8199e:	79fb      	ldrb	r3, [r7, #7]
   819a0:	2b00      	cmp	r3, #0
   819a2:	d006      	beq.n	819b2 <Cl_alarms_scanforAlarms+0x392>
   819a4:	4b66      	ldr	r3, [pc, #408]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   819a6:	4798      	blx	r3
   819a8:	e003      	b.n	819b2 <Cl_alarms_scanforAlarms+0x392>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   819aa:	4b5f      	ldr	r3, [pc, #380]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819ac:	2204      	movs	r2, #4
   819ae:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   819b2:	4b5d      	ldr	r3, [pc, #372]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819b4:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   819b8:	2b00      	cmp	r3, #0
   819ba:	d032      	beq.n	81a22 <Cl_alarms_scanforAlarms+0x402>
	{
				if(cl_sys_statbuffer.bldstatus)
   819bc:	4b5b      	ldr	r3, [pc, #364]	; (81b2c <Cl_alarms_scanforAlarms+0x50c>)
   819be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   819c0:	2b00      	cmp	r3, #0
   819c2:	d02a      	beq.n	81a1a <Cl_alarms_scanforAlarms+0x3fa>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   819c4:	4b58      	ldr	r3, [pc, #352]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819c6:	2201      	movs	r2, #1
   819c8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BLD_EVENT; 
   819cc:	4b58      	ldr	r3, [pc, #352]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819ce:	781b      	ldrb	r3, [r3, #0]
   819d0:	4a57      	ldr	r2, [pc, #348]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819d2:	3301      	adds	r3, #1
   819d4:	00db      	lsls	r3, r3, #3
   819d6:	4413      	add	r3, r2
   819d8:	2222      	movs	r2, #34	; 0x22
   819da:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   819dc:	4b52      	ldr	r3, [pc, #328]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819de:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   819e2:	3301      	adds	r3, #1
   819e4:	b2da      	uxtb	r2, r3
   819e6:	4b50      	ldr	r3, [pc, #320]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   819e8:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   819ec:	4b51      	ldr	r3, [pc, #324]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   819ee:	2201      	movs	r2, #1
   819f0:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   819f2:	4b51      	ldr	r3, [pc, #324]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   819f4:	2222      	movs	r2, #34	; 0x22
   819f6:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   819f8:	4b4d      	ldr	r3, [pc, #308]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   819fa:	781b      	ldrb	r3, [r3, #0]
   819fc:	461a      	mov	r2, r3
   819fe:	4b4c      	ldr	r3, [pc, #304]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a00:	4413      	add	r3, r2
   81a02:	222e      	movs	r2, #46	; 0x2e
   81a04:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a06:	4b4d      	ldr	r3, [pc, #308]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81a08:	4798      	blx	r3
   81a0a:	4603      	mov	r3, r0
   81a0c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81a0e:	79fb      	ldrb	r3, [r7, #7]
   81a10:	2b00      	cmp	r3, #0
   81a12:	d006      	beq.n	81a22 <Cl_alarms_scanforAlarms+0x402>
   81a14:	4b4a      	ldr	r3, [pc, #296]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81a16:	4798      	blx	r3
   81a18:	e003      	b.n	81a22 <Cl_alarms_scanforAlarms+0x402>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81a1a:	4b43      	ldr	r3, [pc, #268]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a1c:	2204      	movs	r2, #4
   81a1e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   81a22:	4b41      	ldr	r3, [pc, #260]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a24:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81a28:	2b00      	cmp	r3, #0
   81a2a:	d03d      	beq.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
	{
		
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   81a2c:	4b45      	ldr	r3, [pc, #276]	; (81b44 <Cl_alarms_scanforAlarms+0x524>)
   81a2e:	689a      	ldr	r2, [r3, #8]
   81a30:	4b45      	ldr	r3, [pc, #276]	; (81b48 <Cl_alarms_scanforAlarms+0x528>)
   81a32:	6819      	ldr	r1, [r3, #0]
   81a34:	4b45      	ldr	r3, [pc, #276]	; (81b4c <Cl_alarms_scanforAlarms+0x52c>)
   81a36:	4610      	mov	r0, r2
   81a38:	4798      	blx	r3
   81a3a:	4603      	mov	r3, r0
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	d02a      	beq.n	81a96 <Cl_alarms_scanforAlarms+0x476>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81a40:	4b39      	ldr	r3, [pc, #228]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a42:	2201      	movs	r2, #1
   81a44:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   81a48:	4b39      	ldr	r3, [pc, #228]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a4a:	781b      	ldrb	r3, [r3, #0]
   81a4c:	4a38      	ldr	r2, [pc, #224]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a4e:	3301      	adds	r3, #1
   81a50:	00db      	lsls	r3, r3, #3
   81a52:	4413      	add	r3, r2
   81a54:	2224      	movs	r2, #36	; 0x24
   81a56:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   81a58:	4b33      	ldr	r3, [pc, #204]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a5a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   81a5e:	3301      	adds	r3, #1
   81a60:	b2da      	uxtb	r2, r3
   81a62:	4b31      	ldr	r3, [pc, #196]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a64:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   81a68:	4b32      	ldr	r3, [pc, #200]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   81a6a:	2201      	movs	r2, #1
   81a6c:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   81a6e:	4b32      	ldr	r3, [pc, #200]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81a70:	2224      	movs	r2, #36	; 0x24
   81a72:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a74:	4b2e      	ldr	r3, [pc, #184]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a76:	781b      	ldrb	r3, [r3, #0]
   81a78:	461a      	mov	r2, r3
   81a7a:	4b2d      	ldr	r3, [pc, #180]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81a7c:	4413      	add	r3, r2
   81a7e:	222e      	movs	r2, #46	; 0x2e
   81a80:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a82:	4b2e      	ldr	r3, [pc, #184]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81a84:	4798      	blx	r3
   81a86:	4603      	mov	r3, r0
   81a88:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81a8a:	79fb      	ldrb	r3, [r7, #7]
   81a8c:	2b00      	cmp	r3, #0
   81a8e:	d00b      	beq.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
   81a90:	4b2b      	ldr	r3, [pc, #172]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81a92:	4798      	blx	r3
   81a94:	e008      	b.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81a96:	4b24      	ldr	r3, [pc, #144]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81a98:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   81a9c:	2b01      	cmp	r3, #1
   81a9e:	d103      	bne.n	81aa8 <Cl_alarms_scanforAlarms+0x488>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81aa0:	4b21      	ldr	r3, [pc, #132]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aa2:	2204      	movs	r2, #4
   81aa4:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   81aa8:	4b1f      	ldr	r3, [pc, #124]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aaa:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d05d      	beq.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
   81ab2:	220b      	movs	r2, #11
   81ab4:	4926      	ldr	r1, [pc, #152]	; (81b50 <Cl_alarms_scanforAlarms+0x530>)
   81ab6:	2018      	movs	r0, #24
   81ab8:	4b26      	ldr	r3, [pc, #152]	; (81b54 <Cl_alarms_scanforAlarms+0x534>)
   81aba:	4798      	blx	r3
		if(apt < Cl_alarmThresholdTable.apt_low_threshold)
   81abc:	4b21      	ldr	r3, [pc, #132]	; (81b44 <Cl_alarms_scanforAlarms+0x524>)
   81abe:	68da      	ldr	r2, [r3, #12]
   81ac0:	4b21      	ldr	r3, [pc, #132]	; (81b48 <Cl_alarms_scanforAlarms+0x528>)
   81ac2:	6819      	ldr	r1, [r3, #0]
   81ac4:	4b24      	ldr	r3, [pc, #144]	; (81b58 <Cl_alarms_scanforAlarms+0x538>)
   81ac6:	4610      	mov	r0, r2
   81ac8:	4798      	blx	r3
   81aca:	4603      	mov	r3, r0
   81acc:	2b00      	cmp	r3, #0
   81ace:	d045      	beq.n	81b5c <Cl_alarms_scanforAlarms+0x53c>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81ad0:	4b15      	ldr	r3, [pc, #84]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81ad2:	2201      	movs	r2, #1
   81ad4:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81ad8:	4b15      	ldr	r3, [pc, #84]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81ada:	781b      	ldrb	r3, [r3, #0]
   81adc:	4a14      	ldr	r2, [pc, #80]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81ade:	3301      	adds	r3, #1
   81ae0:	00db      	lsls	r3, r3, #3
   81ae2:	4413      	add	r3, r2
   81ae4:	2223      	movs	r2, #35	; 0x23
   81ae6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81ae8:	4b0f      	ldr	r3, [pc, #60]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81aea:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81aee:	3301      	adds	r3, #1
   81af0:	b2da      	uxtb	r2, r3
   81af2:	4b0d      	ldr	r3, [pc, #52]	; (81b28 <Cl_alarms_scanforAlarms+0x508>)
   81af4:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81af8:	4b0e      	ldr	r3, [pc, #56]	; (81b34 <Cl_alarms_scanforAlarms+0x514>)
   81afa:	2201      	movs	r2, #1
   81afc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81afe:	4b0e      	ldr	r3, [pc, #56]	; (81b38 <Cl_alarms_scanforAlarms+0x518>)
   81b00:	2223      	movs	r2, #35	; 0x23
   81b02:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b04:	4b0a      	ldr	r3, [pc, #40]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81b06:	781b      	ldrb	r3, [r3, #0]
   81b08:	461a      	mov	r2, r3
   81b0a:	4b09      	ldr	r3, [pc, #36]	; (81b30 <Cl_alarms_scanforAlarms+0x510>)
   81b0c:	4413      	add	r3, r2
   81b0e:	222e      	movs	r2, #46	; 0x2e
   81b10:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81b12:	4b0a      	ldr	r3, [pc, #40]	; (81b3c <Cl_alarms_scanforAlarms+0x51c>)
   81b14:	4798      	blx	r3
   81b16:	4603      	mov	r3, r0
   81b18:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81b1a:	79fb      	ldrb	r3, [r7, #7]
   81b1c:	2b00      	cmp	r3, #0
   81b1e:	d026      	beq.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81b20:	4b07      	ldr	r3, [pc, #28]	; (81b40 <Cl_alarms_scanforAlarms+0x520>)
   81b22:	4798      	blx	r3
   81b24:	e023      	b.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
   81b26:	bf00      	nop
   81b28:	20072874 	.word	0x20072874
   81b2c:	20072dbc 	.word	0x20072dbc
   81b30:	20072e58 	.word	0x20072e58
   81b34:	200715d9 	.word	0x200715d9
   81b38:	20072c98 	.word	0x20072c98
   81b3c:	00082e69 	.word	0x00082e69
   81b40:	000893e9 	.word	0x000893e9
   81b44:	20072c9c 	.word	0x20072c9c
   81b48:	20072c94 	.word	0x20072c94
   81b4c:	000a29c9 	.word	0x000a29c9
   81b50:	000a4694 	.word	0x000a4694
   81b54:	00098601 	.word	0x00098601
   81b58:	000a2a05 	.word	0x000a2a05
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81b5c:	4b93      	ldr	r3, [pc, #588]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b5e:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81b62:	2b01      	cmp	r3, #1
   81b64:	d103      	bne.n	81b6e <Cl_alarms_scanforAlarms+0x54e>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81b66:	4b91      	ldr	r3, [pc, #580]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b68:	2204      	movs	r2, #4
   81b6a:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81b6e:	4b8f      	ldr	r3, [pc, #572]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81b70:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81b74:	2b00      	cmp	r3, #0
   81b76:	d047      	beq.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81b78:	2207      	movs	r2, #7
   81b7a:	498d      	ldr	r1, [pc, #564]	; (81db0 <Cl_alarms_scanforAlarms+0x790>)
   81b7c:	2018      	movs	r0, #24
   81b7e:	4b8d      	ldr	r3, [pc, #564]	; (81db4 <Cl_alarms_scanforAlarms+0x794>)
   81b80:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   81b82:	79fb      	ldrb	r3, [r7, #7]
   81b84:	2b00      	cmp	r3, #0
   81b86:	d001      	beq.n	81b8c <Cl_alarms_scanforAlarms+0x56c>
   81b88:	4b8b      	ldr	r3, [pc, #556]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81b8a:	4798      	blx	r3
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81b8c:	4b8b      	ldr	r3, [pc, #556]	; (81dbc <Cl_alarms_scanforAlarms+0x79c>)
   81b8e:	691a      	ldr	r2, [r3, #16]
   81b90:	4b8b      	ldr	r3, [pc, #556]	; (81dc0 <Cl_alarms_scanforAlarms+0x7a0>)
   81b92:	6819      	ldr	r1, [r3, #0]
   81b94:	4b8b      	ldr	r3, [pc, #556]	; (81dc4 <Cl_alarms_scanforAlarms+0x7a4>)
   81b96:	4610      	mov	r0, r2
   81b98:	4798      	blx	r3
   81b9a:	4603      	mov	r3, r0
   81b9c:	2b00      	cmp	r3, #0
   81b9e:	d02a      	beq.n	81bf6 <Cl_alarms_scanforAlarms+0x5d6>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81ba0:	4b82      	ldr	r3, [pc, #520]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ba2:	2201      	movs	r2, #1
   81ba4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81ba8:	4b87      	ldr	r3, [pc, #540]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81baa:	781b      	ldrb	r3, [r3, #0]
   81bac:	4a86      	ldr	r2, [pc, #536]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bae:	3301      	adds	r3, #1
   81bb0:	00db      	lsls	r3, r3, #3
   81bb2:	4413      	add	r3, r2
   81bb4:	2226      	movs	r2, #38	; 0x26
   81bb6:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81bb8:	4b7c      	ldr	r3, [pc, #496]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bba:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   81bbe:	3301      	adds	r3, #1
   81bc0:	b2da      	uxtb	r2, r3
   81bc2:	4b7a      	ldr	r3, [pc, #488]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bc4:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   81bc8:	4b80      	ldr	r3, [pc, #512]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81bca:	2201      	movs	r2, #1
   81bcc:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   81bce:	4b80      	ldr	r3, [pc, #512]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81bd0:	2226      	movs	r2, #38	; 0x26
   81bd2:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81bd4:	4b7c      	ldr	r3, [pc, #496]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bd6:	781b      	ldrb	r3, [r3, #0]
   81bd8:	461a      	mov	r2, r3
   81bda:	4b7b      	ldr	r3, [pc, #492]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81bdc:	4413      	add	r3, r2
   81bde:	222e      	movs	r2, #46	; 0x2e
   81be0:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81be2:	4b7c      	ldr	r3, [pc, #496]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81be4:	4798      	blx	r3
   81be6:	4603      	mov	r3, r0
   81be8:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81bea:	79fb      	ldrb	r3, [r7, #7]
   81bec:	2b00      	cmp	r3, #0
   81bee:	d00b      	beq.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
   81bf0:	4b71      	ldr	r3, [pc, #452]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81bf2:	4798      	blx	r3
   81bf4:	e008      	b.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81bf6:	4b6d      	ldr	r3, [pc, #436]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81bf8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81bfc:	2b01      	cmp	r3, #1
   81bfe:	d103      	bne.n	81c08 <Cl_alarms_scanforAlarms+0x5e8>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81c00:	4b6a      	ldr	r3, [pc, #424]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c02:	2204      	movs	r2, #4
   81c04:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   81c08:	4b68      	ldr	r3, [pc, #416]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c0a:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81c0e:	2b00      	cmp	r3, #0
   81c10:	d03d      	beq.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
	{
		
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   81c12:	4b6a      	ldr	r3, [pc, #424]	; (81dbc <Cl_alarms_scanforAlarms+0x79c>)
   81c14:	695a      	ldr	r2, [r3, #20]
   81c16:	4b6a      	ldr	r3, [pc, #424]	; (81dc0 <Cl_alarms_scanforAlarms+0x7a0>)
   81c18:	6819      	ldr	r1, [r3, #0]
   81c1a:	4b6f      	ldr	r3, [pc, #444]	; (81dd8 <Cl_alarms_scanforAlarms+0x7b8>)
   81c1c:	4610      	mov	r0, r2
   81c1e:	4798      	blx	r3
   81c20:	4603      	mov	r3, r0
   81c22:	2b00      	cmp	r3, #0
   81c24:	d02a      	beq.n	81c7c <Cl_alarms_scanforAlarms+0x65c>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81c26:	4b61      	ldr	r3, [pc, #388]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c28:	2201      	movs	r2, #1
   81c2a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   81c2e:	4b66      	ldr	r3, [pc, #408]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c30:	781b      	ldrb	r3, [r3, #0]
   81c32:	4a65      	ldr	r2, [pc, #404]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c34:	3301      	adds	r3, #1
   81c36:	00db      	lsls	r3, r3, #3
   81c38:	4413      	add	r3, r2
   81c3a:	2225      	movs	r2, #37	; 0x25
   81c3c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   81c3e:	4b5b      	ldr	r3, [pc, #364]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c40:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81c44:	3301      	adds	r3, #1
   81c46:	b2da      	uxtb	r2, r3
   81c48:	4b58      	ldr	r3, [pc, #352]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c4a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   81c4e:	4b5f      	ldr	r3, [pc, #380]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81c50:	2201      	movs	r2, #1
   81c52:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   81c54:	4b5e      	ldr	r3, [pc, #376]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81c56:	2226      	movs	r2, #38	; 0x26
   81c58:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c5a:	4b5b      	ldr	r3, [pc, #364]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c5c:	781b      	ldrb	r3, [r3, #0]
   81c5e:	461a      	mov	r2, r3
   81c60:	4b59      	ldr	r3, [pc, #356]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81c62:	4413      	add	r3, r2
   81c64:	222e      	movs	r2, #46	; 0x2e
   81c66:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81c68:	4b5a      	ldr	r3, [pc, #360]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81c6a:	4798      	blx	r3
   81c6c:	4603      	mov	r3, r0
   81c6e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81c70:	79fb      	ldrb	r3, [r7, #7]
   81c72:	2b00      	cmp	r3, #0
   81c74:	d00b      	beq.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
   81c76:	4b50      	ldr	r3, [pc, #320]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81c78:	4798      	blx	r3
   81c7a:	e008      	b.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81c7c:	4b4b      	ldr	r3, [pc, #300]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c7e:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   81c82:	2b01      	cmp	r3, #1
   81c84:	d103      	bne.n	81c8e <Cl_alarms_scanforAlarms+0x66e>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81c86:	4b49      	ldr	r3, [pc, #292]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c88:	2204      	movs	r2, #4
   81c8a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   81c8e:	4b47      	ldr	r3, [pc, #284]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c90:	7f9b      	ldrb	r3, [r3, #30]
   81c92:	2b00      	cmp	r3, #0
   81c94:	d043      	beq.n	81d1e <Cl_alarms_scanforAlarms+0x6fe>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81c96:	4b45      	ldr	r3, [pc, #276]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81c98:	7c5b      	ldrb	r3, [r3, #17]
   81c9a:	2b01      	cmp	r3, #1
   81c9c:	d103      	bne.n	81ca6 <Cl_alarms_scanforAlarms+0x686>
   81c9e:	4b4f      	ldr	r3, [pc, #316]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81ca0:	781b      	ldrb	r3, [r3, #0]
   81ca2:	2b00      	cmp	r3, #0
   81ca4:	d10a      	bne.n	81cbc <Cl_alarms_scanforAlarms+0x69c>
   81ca6:	4b41      	ldr	r3, [pc, #260]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ca8:	7c5b      	ldrb	r3, [r3, #17]
   81caa:	2b00      	cmp	r3, #0
   81cac:	d132      	bne.n	81d14 <Cl_alarms_scanforAlarms+0x6f4>
   81cae:	4b4b      	ldr	r3, [pc, #300]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81cb0:	781b      	ldrb	r3, [r3, #0]
   81cb2:	f083 0301 	eor.w	r3, r3, #1
   81cb6:	b2db      	uxtb	r3, r3
   81cb8:	2b00      	cmp	r3, #0
   81cba:	d02b      	beq.n	81d14 <Cl_alarms_scanforAlarms+0x6f4>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81cbc:	4b3b      	ldr	r3, [pc, #236]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cbe:	7c9b      	ldrb	r3, [r3, #18]
   81cc0:	2b01      	cmp	r3, #1
   81cc2:	d02b      	beq.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81cc4:	4b39      	ldr	r3, [pc, #228]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cc6:	2201      	movs	r2, #1
   81cc8:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81cca:	4b3f      	ldr	r3, [pc, #252]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81ccc:	781b      	ldrb	r3, [r3, #0]
   81cce:	4a3e      	ldr	r2, [pc, #248]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cd0:	3301      	adds	r3, #1
   81cd2:	00db      	lsls	r3, r3, #3
   81cd4:	4413      	add	r3, r2
   81cd6:	2201      	movs	r2, #1
   81cd8:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81cda:	4b34      	ldr	r3, [pc, #208]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81cdc:	7f5b      	ldrb	r3, [r3, #29]
   81cde:	3301      	adds	r3, #1
   81ce0:	b2da      	uxtb	r2, r3
   81ce2:	4b32      	ldr	r3, [pc, #200]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81ce4:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81ce6:	4b39      	ldr	r3, [pc, #228]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81ce8:	2201      	movs	r2, #1
   81cea:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   81cec:	4b38      	ldr	r3, [pc, #224]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81cee:	2201      	movs	r2, #1
   81cf0:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81cf2:	4b35      	ldr	r3, [pc, #212]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cf4:	781b      	ldrb	r3, [r3, #0]
   81cf6:	461a      	mov	r2, r3
   81cf8:	4b33      	ldr	r3, [pc, #204]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81cfa:	4413      	add	r3, r2
   81cfc:	222e      	movs	r2, #46	; 0x2e
   81cfe:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d00:	4b34      	ldr	r3, [pc, #208]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81d02:	4798      	blx	r3
   81d04:	4603      	mov	r3, r0
   81d06:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81d08:	79fb      	ldrb	r3, [r7, #7]
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d006      	beq.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>
   81d0e:	4b2a      	ldr	r3, [pc, #168]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81d10:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81d12:	e003      	b.n	81d1c <Cl_alarms_scanforAlarms+0x6fc>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81d14:	4b25      	ldr	r3, [pc, #148]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d16:	2204      	movs	r2, #4
   81d18:	749a      	strb	r2, [r3, #18]
   81d1a:	e000      	b.n	81d1e <Cl_alarms_scanforAlarms+0x6fe>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81d1c:	bf00      	nop
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   81d1e:	4b23      	ldr	r3, [pc, #140]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81d24:	2b00      	cmp	r3, #0
   81d26:	d05f      	beq.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81d28:	4b20      	ldr	r3, [pc, #128]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d2e:	2b01      	cmp	r3, #1
   81d30:	d104      	bne.n	81d3c <Cl_alarms_scanforAlarms+0x71c>
   81d32:	4b2a      	ldr	r3, [pc, #168]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d38:	2b00      	cmp	r3, #0
   81d3a:	d10c      	bne.n	81d56 <Cl_alarms_scanforAlarms+0x736>
   81d3c:	4b1b      	ldr	r3, [pc, #108]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d42:	2b00      	cmp	r3, #0
   81d44:	d14c      	bne.n	81de0 <Cl_alarms_scanforAlarms+0x7c0>
   81d46:	4b25      	ldr	r3, [pc, #148]	; (81ddc <Cl_alarms_scanforAlarms+0x7bc>)
   81d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d4c:	f083 0301 	eor.w	r3, r3, #1
   81d50:	b2db      	uxtb	r3, r3
   81d52:	2b00      	cmp	r3, #0
   81d54:	d044      	beq.n	81de0 <Cl_alarms_scanforAlarms+0x7c0>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81d56:	4b15      	ldr	r3, [pc, #84]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d58:	2201      	movs	r2, #1
   81d5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   81d5e:	4b1a      	ldr	r3, [pc, #104]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d60:	781b      	ldrb	r3, [r3, #0]
   81d62:	4a19      	ldr	r2, [pc, #100]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d64:	3301      	adds	r3, #1
   81d66:	00db      	lsls	r3, r3, #3
   81d68:	4413      	add	r3, r2
   81d6a:	2203      	movs	r2, #3
   81d6c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   81d6e:	4b0f      	ldr	r3, [pc, #60]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81d74:	3301      	adds	r3, #1
   81d76:	b2da      	uxtb	r2, r3
   81d78:	4b0c      	ldr	r3, [pc, #48]	; (81dac <Cl_alarms_scanforAlarms+0x78c>)
   81d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   81d7e:	4b13      	ldr	r3, [pc, #76]	; (81dcc <Cl_alarms_scanforAlarms+0x7ac>)
   81d80:	2201      	movs	r2, #1
   81d82:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81d84:	4b12      	ldr	r3, [pc, #72]	; (81dd0 <Cl_alarms_scanforAlarms+0x7b0>)
   81d86:	2203      	movs	r2, #3
   81d88:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d8a:	4b0f      	ldr	r3, [pc, #60]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d8c:	781b      	ldrb	r3, [r3, #0]
   81d8e:	461a      	mov	r2, r3
   81d90:	4b0d      	ldr	r3, [pc, #52]	; (81dc8 <Cl_alarms_scanforAlarms+0x7a8>)
   81d92:	4413      	add	r3, r2
   81d94:	222e      	movs	r2, #46	; 0x2e
   81d96:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d98:	4b0e      	ldr	r3, [pc, #56]	; (81dd4 <Cl_alarms_scanforAlarms+0x7b4>)
   81d9a:	4798      	blx	r3
   81d9c:	4603      	mov	r3, r0
   81d9e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81da0:	79fb      	ldrb	r3, [r7, #7]
   81da2:	2b00      	cmp	r3, #0
   81da4:	d020      	beq.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
   81da6:	4b04      	ldr	r3, [pc, #16]	; (81db8 <Cl_alarms_scanforAlarms+0x798>)
   81da8:	4798      	blx	r3
   81daa:	e01d      	b.n	81de8 <Cl_alarms_scanforAlarms+0x7c8>
   81dac:	20072874 	.word	0x20072874
   81db0:	000a46a0 	.word	0x000a46a0
   81db4:	00098601 	.word	0x00098601
   81db8:	000893e9 	.word	0x000893e9
   81dbc:	20072c9c 	.word	0x20072c9c
   81dc0:	200715dc 	.word	0x200715dc
   81dc4:	000a29c9 	.word	0x000a29c9
   81dc8:	20072e58 	.word	0x20072e58
   81dcc:	200715d9 	.word	0x200715d9
   81dd0:	20072c98 	.word	0x20072c98
   81dd4:	00082e69 	.word	0x00082e69
   81dd8:	000a2a05 	.word	0x000a2a05
   81ddc:	20072dbc 	.word	0x20072dbc
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   81de0:	4b96      	ldr	r3, [pc, #600]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81de2:	2204      	movs	r2, #4
   81de4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81de8:	4b94      	ldr	r3, [pc, #592]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81dea:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81dee:	2b00      	cmp	r3, #0
   81df0:	d045      	beq.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81df2:	4b92      	ldr	r3, [pc, #584]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81df8:	2b01      	cmp	r3, #1
   81dfa:	d104      	bne.n	81e06 <Cl_alarms_scanforAlarms+0x7e6>
   81dfc:	4b90      	ldr	r3, [pc, #576]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e02:	2b00      	cmp	r3, #0
   81e04:	d10c      	bne.n	81e20 <Cl_alarms_scanforAlarms+0x800>
   81e06:	4b8d      	ldr	r3, [pc, #564]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81e0c:	2b00      	cmp	r3, #0
   81e0e:	d132      	bne.n	81e76 <Cl_alarms_scanforAlarms+0x856>
   81e10:	4b8b      	ldr	r3, [pc, #556]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e16:	f083 0301 	eor.w	r3, r3, #1
   81e1a:	b2db      	uxtb	r3, r3
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d02a      	beq.n	81e76 <Cl_alarms_scanforAlarms+0x856>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81e20:	4b86      	ldr	r3, [pc, #536]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e22:	2201      	movs	r2, #1
   81e24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81e28:	4b86      	ldr	r3, [pc, #536]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e2a:	781b      	ldrb	r3, [r3, #0]
   81e2c:	4a85      	ldr	r2, [pc, #532]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e2e:	3301      	adds	r3, #1
   81e30:	00db      	lsls	r3, r3, #3
   81e32:	4413      	add	r3, r2
   81e34:	2203      	movs	r2, #3
   81e36:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81e38:	4b80      	ldr	r3, [pc, #512]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   81e3e:	3301      	adds	r3, #1
   81e40:	b2da      	uxtb	r2, r3
   81e42:	4b7e      	ldr	r3, [pc, #504]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81e48:	4b7f      	ldr	r3, [pc, #508]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81e4a:	2201      	movs	r2, #1
   81e4c:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   81e4e:	4b7f      	ldr	r3, [pc, #508]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81e50:	2205      	movs	r2, #5
   81e52:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e54:	4b7b      	ldr	r3, [pc, #492]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e56:	781b      	ldrb	r3, [r3, #0]
   81e58:	461a      	mov	r2, r3
   81e5a:	4b7a      	ldr	r3, [pc, #488]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81e5c:	4413      	add	r3, r2
   81e5e:	222e      	movs	r2, #46	; 0x2e
   81e60:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81e62:	4b7b      	ldr	r3, [pc, #492]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81e64:	4798      	blx	r3
   81e66:	4603      	mov	r3, r0
   81e68:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81e6a:	79fb      	ldrb	r3, [r7, #7]
   81e6c:	2b00      	cmp	r3, #0
   81e6e:	d006      	beq.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
   81e70:	4b78      	ldr	r3, [pc, #480]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81e72:	4798      	blx	r3
   81e74:	e003      	b.n	81e7e <Cl_alarms_scanforAlarms+0x85e>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81e76:	4b71      	ldr	r3, [pc, #452]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e78:	2204      	movs	r2, #4
   81e7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   81e7e:	4b6f      	ldr	r3, [pc, #444]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e80:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81e84:	2b00      	cmp	r3, #0
   81e86:	d045      	beq.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81e88:	4b6c      	ldr	r3, [pc, #432]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e8e:	2b01      	cmp	r3, #1
   81e90:	d104      	bne.n	81e9c <Cl_alarms_scanforAlarms+0x87c>
   81e92:	4b6b      	ldr	r3, [pc, #428]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e98:	2b00      	cmp	r3, #0
   81e9a:	d10c      	bne.n	81eb6 <Cl_alarms_scanforAlarms+0x896>
   81e9c:	4b67      	ldr	r3, [pc, #412]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81ea2:	2b00      	cmp	r3, #0
   81ea4:	d132      	bne.n	81f0c <Cl_alarms_scanforAlarms+0x8ec>
   81ea6:	4b66      	ldr	r3, [pc, #408]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81eac:	f083 0301 	eor.w	r3, r3, #1
   81eb0:	b2db      	uxtb	r3, r3
   81eb2:	2b00      	cmp	r3, #0
   81eb4:	d02a      	beq.n	81f0c <Cl_alarms_scanforAlarms+0x8ec>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81eb6:	4b61      	ldr	r3, [pc, #388]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81eb8:	2201      	movs	r2, #1
   81eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81ebe:	4b61      	ldr	r3, [pc, #388]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ec0:	781b      	ldrb	r3, [r3, #0]
   81ec2:	4a60      	ldr	r2, [pc, #384]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ec4:	3301      	adds	r3, #1
   81ec6:	00db      	lsls	r3, r3, #3
   81ec8:	4413      	add	r3, r2
   81eca:	2204      	movs	r2, #4
   81ecc:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81ece:	4b5b      	ldr	r3, [pc, #364]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81ed0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81ed4:	3301      	adds	r3, #1
   81ed6:	b2da      	uxtb	r2, r3
   81ed8:	4b58      	ldr	r3, [pc, #352]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81eda:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81ede:	4b5a      	ldr	r3, [pc, #360]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81ee0:	2201      	movs	r2, #1
   81ee2:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81ee4:	4b59      	ldr	r3, [pc, #356]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81ee6:	2204      	movs	r2, #4
   81ee8:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81eea:	4b56      	ldr	r3, [pc, #344]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81eec:	781b      	ldrb	r3, [r3, #0]
   81eee:	461a      	mov	r2, r3
   81ef0:	4b54      	ldr	r3, [pc, #336]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ef2:	4413      	add	r3, r2
   81ef4:	222e      	movs	r2, #46	; 0x2e
   81ef6:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ef8:	4b55      	ldr	r3, [pc, #340]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81efa:	4798      	blx	r3
   81efc:	4603      	mov	r3, r0
   81efe:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81f00:	79fb      	ldrb	r3, [r7, #7]
   81f02:	2b00      	cmp	r3, #0
   81f04:	d006      	beq.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
   81f06:	4b53      	ldr	r3, [pc, #332]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81f08:	4798      	blx	r3
   81f0a:	e003      	b.n	81f14 <Cl_alarms_scanforAlarms+0x8f4>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81f0c:	4b4b      	ldr	r3, [pc, #300]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f0e:	2204      	movs	r2, #4
   81f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81f14:	4b49      	ldr	r3, [pc, #292]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f16:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81f1a:	2b00      	cmp	r3, #0
   81f1c:	d045      	beq.n	81faa <Cl_alarms_scanforAlarms+0x98a>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81f1e:	4b47      	ldr	r3, [pc, #284]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f24:	2b01      	cmp	r3, #1
   81f26:	d104      	bne.n	81f32 <Cl_alarms_scanforAlarms+0x912>
   81f28:	4b45      	ldr	r3, [pc, #276]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d10c      	bne.n	81f4c <Cl_alarms_scanforAlarms+0x92c>
   81f32:	4b42      	ldr	r3, [pc, #264]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d132      	bne.n	81fa2 <Cl_alarms_scanforAlarms+0x982>
   81f3c:	4b40      	ldr	r3, [pc, #256]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f42:	f083 0301 	eor.w	r3, r3, #1
   81f46:	b2db      	uxtb	r3, r3
   81f48:	2b00      	cmp	r3, #0
   81f4a:	d02a      	beq.n	81fa2 <Cl_alarms_scanforAlarms+0x982>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81f4c:	4b3b      	ldr	r3, [pc, #236]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f4e:	2201      	movs	r2, #1
   81f50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81f54:	4b3b      	ldr	r3, [pc, #236]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f56:	781b      	ldrb	r3, [r3, #0]
   81f58:	4a3a      	ldr	r2, [pc, #232]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f5a:	3301      	adds	r3, #1
   81f5c:	00db      	lsls	r3, r3, #3
   81f5e:	4413      	add	r3, r2
   81f60:	2206      	movs	r2, #6
   81f62:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81f64:	4b35      	ldr	r3, [pc, #212]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f66:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81f6a:	3301      	adds	r3, #1
   81f6c:	b2da      	uxtb	r2, r3
   81f6e:	4b33      	ldr	r3, [pc, #204]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81f70:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81f74:	4b34      	ldr	r3, [pc, #208]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81f76:	2201      	movs	r2, #1
   81f78:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81f7a:	4b34      	ldr	r3, [pc, #208]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81f7c:	2206      	movs	r2, #6
   81f7e:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f80:	4b30      	ldr	r3, [pc, #192]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f82:	781b      	ldrb	r3, [r3, #0]
   81f84:	461a      	mov	r2, r3
   81f86:	4b2f      	ldr	r3, [pc, #188]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81f88:	4413      	add	r3, r2
   81f8a:	222e      	movs	r2, #46	; 0x2e
   81f8c:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81f8e:	4b30      	ldr	r3, [pc, #192]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   81f90:	4798      	blx	r3
   81f92:	4603      	mov	r3, r0
   81f94:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81f96:	79fb      	ldrb	r3, [r7, #7]
   81f98:	2b00      	cmp	r3, #0
   81f9a:	d006      	beq.n	81faa <Cl_alarms_scanforAlarms+0x98a>
   81f9c:	4b2d      	ldr	r3, [pc, #180]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   81f9e:	4798      	blx	r3
   81fa0:	e003      	b.n	81faa <Cl_alarms_scanforAlarms+0x98a>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81fa2:	4b26      	ldr	r3, [pc, #152]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fa4:	2204      	movs	r2, #4
   81fa6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		}
		
		

	}
	if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   81faa:	4b24      	ldr	r3, [pc, #144]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fac:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   81fb0:	2b00      	cmp	r3, #0
   81fb2:	d060      	beq.n	82076 <Cl_alarms_scanforAlarms+0xa56>
	{			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
				if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   81fb4:	4b22      	ldr	r3, [pc, #136]	; (82040 <Cl_alarms_scanforAlarms+0xa20>)
   81fb6:	8b9b      	ldrh	r3, [r3, #28]
   81fb8:	2b01      	cmp	r3, #1
   81fba:	d14f      	bne.n	8205c <Cl_alarms_scanforAlarms+0xa3c>
   81fbc:	4b26      	ldr	r3, [pc, #152]	; (82058 <Cl_alarms_scanforAlarms+0xa38>)
   81fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	d14a      	bne.n	8205c <Cl_alarms_scanforAlarms+0xa3c>
				{
				
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   81fc6:	4b1d      	ldr	r3, [pc, #116]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fc8:	2201      	movs	r2, #1
   81fca:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FPCURRENTSTATUS; 
   81fce:	4b1d      	ldr	r3, [pc, #116]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81fd0:	781b      	ldrb	r3, [r3, #0]
   81fd2:	4a1c      	ldr	r2, [pc, #112]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81fd4:	3301      	adds	r3, #1
   81fd6:	00db      	lsls	r3, r3, #3
   81fd8:	4413      	add	r3, r2
   81fda:	223c      	movs	r2, #60	; 0x3c
   81fdc:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   81fde:	4b17      	ldr	r3, [pc, #92]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fe0:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   81fe4:	3301      	adds	r3, #1
   81fe6:	b2da      	uxtb	r2, r3
   81fe8:	4b14      	ldr	r3, [pc, #80]	; (8203c <Cl_alarms_scanforAlarms+0xa1c>)
   81fea:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
					cl_alarm_triggered = true;	
   81fee:	4b16      	ldr	r3, [pc, #88]	; (82048 <Cl_alarms_scanforAlarms+0xa28>)
   81ff0:	2201      	movs	r2, #1
   81ff2:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = FPCURRENTSTATUS;
   81ff4:	4b15      	ldr	r3, [pc, #84]	; (8204c <Cl_alarms_scanforAlarms+0xa2c>)
   81ff6:	223c      	movs	r2, #60	; 0x3c
   81ff8:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   81ffa:	4b12      	ldr	r3, [pc, #72]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   81ffc:	781b      	ldrb	r3, [r3, #0]
   81ffe:	461a      	mov	r2, r3
   82000:	4b10      	ldr	r3, [pc, #64]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   82002:	4413      	add	r3, r2
   82004:	222d      	movs	r2, #45	; 0x2d
   82006:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82008:	4b11      	ldr	r3, [pc, #68]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   8200a:	4798      	blx	r3
   8200c:	4603      	mov	r3, r0
   8200e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82010:	79fb      	ldrb	r3, [r7, #7]
   82012:	2b00      	cmp	r3, #0
   82014:	d001      	beq.n	8201a <Cl_alarms_scanforAlarms+0x9fa>
   82016:	4b0f      	ldr	r3, [pc, #60]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   82018:	4798      	blx	r3
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   8201a:	4b0a      	ldr	r3, [pc, #40]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   8201c:	781b      	ldrb	r3, [r3, #0]
   8201e:	461a      	mov	r2, r3
   82020:	4b08      	ldr	r3, [pc, #32]	; (82044 <Cl_alarms_scanforAlarms+0xa24>)
   82022:	4413      	add	r3, r2
   82024:	222f      	movs	r2, #47	; 0x2f
   82026:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82028:	4b09      	ldr	r3, [pc, #36]	; (82050 <Cl_alarms_scanforAlarms+0xa30>)
   8202a:	4798      	blx	r3
   8202c:	4603      	mov	r3, r0
   8202e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82030:	79fb      	ldrb	r3, [r7, #7]
   82032:	2b00      	cmp	r3, #0
   82034:	d01a      	beq.n	8206c <Cl_alarms_scanforAlarms+0xa4c>
   82036:	4b07      	ldr	r3, [pc, #28]	; (82054 <Cl_alarms_scanforAlarms+0xa34>)
   82038:	4798      	blx	r3
   8203a:	e017      	b.n	8206c <Cl_alarms_scanforAlarms+0xa4c>
   8203c:	20072874 	.word	0x20072874
   82040:	20072dbc 	.word	0x20072dbc
   82044:	20072e58 	.word	0x20072e58
   82048:	200715d9 	.word	0x200715d9
   8204c:	20072c98 	.word	0x20072c98
   82050:	00082e69 	.word	0x00082e69
   82054:	000893e9 	.word	0x000893e9
   82058:	200715da 	.word	0x200715da
					 
				}
				else
				{

						Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   8205c:	4b9b      	ldr	r3, [pc, #620]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8205e:	2204      	movs	r2, #4
   82060:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
						Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   82064:	4b99      	ldr	r3, [pc, #612]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82066:	2200      	movs	r2, #0
   82068:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

						
				}
				FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   8206c:	4b98      	ldr	r3, [pc, #608]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8206e:	8b9b      	ldrh	r3, [r3, #28]
   82070:	b21a      	sxth	r2, r3
   82072:	4b98      	ldr	r3, [pc, #608]	; (822d4 <Cl_alarms_scanforAlarms+0xcb4>)
   82074:	801a      	strh	r2, [r3, #0]
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   82076:	4b96      	ldr	r3, [pc, #600]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82078:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8207a:	2b00      	cmp	r3, #0
   8207c:	d002      	beq.n	82084 <Cl_alarms_scanforAlarms+0xa64>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   8207e:	4b96      	ldr	r3, [pc, #600]	; (822d8 <Cl_alarms_scanforAlarms+0xcb8>)
   82080:	2201      	movs	r2, #1
   82082:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   82084:	4b92      	ldr	r3, [pc, #584]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82086:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82088:	2b00      	cmp	r3, #0
   8208a:	d102      	bne.n	82092 <Cl_alarms_scanforAlarms+0xa72>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   8208c:	4b92      	ldr	r3, [pc, #584]	; (822d8 <Cl_alarms_scanforAlarms+0xcb8>)
   8208e:	2202      	movs	r2, #2
   82090:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   82092:	4b8e      	ldr	r3, [pc, #568]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82094:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   82098:	2b00      	cmp	r3, #0
   8209a:	d046      	beq.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   8209c:	4b8c      	ldr	r3, [pc, #560]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8209e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   820a2:	2b00      	cmp	r3, #0
   820a4:	d004      	beq.n	820b0 <Cl_alarms_scanforAlarms+0xa90>
   820a6:	4b89      	ldr	r3, [pc, #548]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820a8:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   820ac:	2b01      	cmp	r3, #1
   820ae:	d00c      	beq.n	820ca <Cl_alarms_scanforAlarms+0xaaa>
   820b0:	4b87      	ldr	r3, [pc, #540]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   820b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   820b6:	f083 0301 	eor.w	r3, r3, #1
   820ba:	b2db      	uxtb	r3, r3
   820bc:	2b00      	cmp	r3, #0
   820be:	d034      	beq.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
   820c0:	4b82      	ldr	r3, [pc, #520]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820c2:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   820c6:	2b00      	cmp	r3, #0
   820c8:	d12f      	bne.n	8212a <Cl_alarms_scanforAlarms+0xb0a>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   820ca:	4b80      	ldr	r3, [pc, #512]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820cc:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   820d0:	2b01      	cmp	r3, #1
   820d2:	d020      	beq.n	82116 <Cl_alarms_scanforAlarms+0xaf6>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   820d4:	4b7d      	ldr	r3, [pc, #500]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820d6:	2202      	movs	r2, #2
   820d8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   820dc:	4b7b      	ldr	r3, [pc, #492]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   820de:	2201      	movs	r2, #1
   820e0:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   820e4:	4b7d      	ldr	r3, [pc, #500]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   820e6:	781b      	ldrb	r3, [r3, #0]
   820e8:	4a7c      	ldr	r2, [pc, #496]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   820ea:	3301      	adds	r3, #1
   820ec:	00db      	lsls	r3, r3, #3
   820ee:	4413      	add	r3, r2
   820f0:	223d      	movs	r2, #61	; 0x3d
   820f2:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   820f4:	4b7a      	ldr	r3, [pc, #488]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   820f6:	2201      	movs	r2, #1
   820f8:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   820fa:	4b7a      	ldr	r3, [pc, #488]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   820fc:	223d      	movs	r2, #61	; 0x3d
   820fe:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82100:	4b76      	ldr	r3, [pc, #472]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82102:	781b      	ldrb	r3, [r3, #0]
   82104:	461a      	mov	r2, r3
   82106:	4b75      	ldr	r3, [pc, #468]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82108:	4413      	add	r3, r2
   8210a:	222e      	movs	r2, #46	; 0x2e
   8210c:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   8210e:	4b76      	ldr	r3, [pc, #472]	; (822e8 <Cl_alarms_scanforAlarms+0xcc8>)
   82110:	2201      	movs	r2, #1
   82112:	701a      	strb	r2, [r3, #0]
   82114:	e006      	b.n	82124 <Cl_alarms_scanforAlarms+0xb04>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   82116:	4b6d      	ldr	r3, [pc, #436]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82118:	2200      	movs	r2, #0
   8211a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   8211e:	4b70      	ldr	r3, [pc, #448]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   82120:	2200      	movs	r2, #0
   82122:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   82124:	4b71      	ldr	r3, [pc, #452]	; (822ec <Cl_alarms_scanforAlarms+0xccc>)
   82126:	2200      	movs	r2, #0
   82128:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   8212a:	4b68      	ldr	r3, [pc, #416]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8212c:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82130:	2b00      	cmp	r3, #0
   82132:	d043      	beq.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   82134:	4b66      	ldr	r3, [pc, #408]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   82136:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8213a:	2b00      	cmp	r3, #0
   8213c:	d004      	beq.n	82148 <Cl_alarms_scanforAlarms+0xb28>
   8213e:	4b63      	ldr	r3, [pc, #396]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82140:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   82144:	2b01      	cmp	r3, #1
   82146:	d00c      	beq.n	82162 <Cl_alarms_scanforAlarms+0xb42>
   82148:	4b61      	ldr	r3, [pc, #388]	; (822d0 <Cl_alarms_scanforAlarms+0xcb0>)
   8214a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8214e:	f083 0301 	eor.w	r3, r3, #1
   82152:	b2db      	uxtb	r3, r3
   82154:	2b00      	cmp	r3, #0
   82156:	d031      	beq.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
   82158:	4b5c      	ldr	r3, [pc, #368]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8215a:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   8215e:	2b00      	cmp	r3, #0
   82160:	d12c      	bne.n	821bc <Cl_alarms_scanforAlarms+0xb9c>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   82162:	4b5a      	ldr	r3, [pc, #360]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82164:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   82168:	2b01      	cmp	r3, #1
   8216a:	d01d      	beq.n	821a8 <Cl_alarms_scanforAlarms+0xb88>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   8216c:	4b57      	ldr	r3, [pc, #348]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8216e:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82172:	2b00      	cmp	r3, #0
   82174:	d01f      	beq.n	821b6 <Cl_alarms_scanforAlarms+0xb96>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   82176:	4b55      	ldr	r3, [pc, #340]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82178:	2202      	movs	r2, #2
   8217a:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   8217e:	4b53      	ldr	r3, [pc, #332]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82180:	2201      	movs	r2, #1
   82182:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   82186:	4b56      	ldr	r3, [pc, #344]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   82188:	2201      	movs	r2, #1
   8218a:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   8218c:	4b55      	ldr	r3, [pc, #340]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   8218e:	223e      	movs	r2, #62	; 0x3e
   82190:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82192:	4b52      	ldr	r3, [pc, #328]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82194:	781b      	ldrb	r3, [r3, #0]
   82196:	461a      	mov	r2, r3
   82198:	4b50      	ldr	r3, [pc, #320]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8219a:	4413      	add	r3, r2
   8219c:	222e      	movs	r2, #46	; 0x2e
   8219e:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   821a0:	4b51      	ldr	r3, [pc, #324]	; (822e8 <Cl_alarms_scanforAlarms+0xcc8>)
   821a2:	2202      	movs	r2, #2
   821a4:	701a      	strb	r2, [r3, #0]
   821a6:	e006      	b.n	821b6 <Cl_alarms_scanforAlarms+0xb96>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   821a8:	4b48      	ldr	r3, [pc, #288]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821aa:	2200      	movs	r2, #0
   821ac:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   821b0:	4b4b      	ldr	r3, [pc, #300]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   821b2:	2200      	movs	r2, #0
   821b4:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   821b6:	4b4d      	ldr	r3, [pc, #308]	; (822ec <Cl_alarms_scanforAlarms+0xccc>)
   821b8:	2201      	movs	r2, #1
   821ba:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   821bc:	4b43      	ldr	r3, [pc, #268]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821be:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   821c2:	2b00      	cmp	r3, #0
   821c4:	d042      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   821c6:	4b41      	ldr	r3, [pc, #260]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821c8:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   821cc:	2b01      	cmp	r3, #1
   821ce:	d034      	beq.n	8223a <Cl_alarms_scanforAlarms+0xc1a>
		{
				if(ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   821d0:	4b47      	ldr	r3, [pc, #284]	; (822f0 <Cl_alarms_scanforAlarms+0xcd0>)
   821d2:	699a      	ldr	r2, [r3, #24]
   821d4:	4b47      	ldr	r3, [pc, #284]	; (822f4 <Cl_alarms_scanforAlarms+0xcd4>)
   821d6:	6819      	ldr	r1, [r3, #0]
   821d8:	4b47      	ldr	r3, [pc, #284]	; (822f8 <Cl_alarms_scanforAlarms+0xcd8>)
   821da:	4610      	mov	r0, r2
   821dc:	4798      	blx	r3
   821de:	4603      	mov	r3, r0
   821e0:	2b00      	cmp	r3, #0
   821e2:	d033      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   821e4:	4b39      	ldr	r3, [pc, #228]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821e6:	2201      	movs	r2, #1
   821e8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   821ec:	4b3b      	ldr	r3, [pc, #236]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   821ee:	781b      	ldrb	r3, [r3, #0]
   821f0:	4a3a      	ldr	r2, [pc, #232]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   821f2:	3301      	adds	r3, #1
   821f4:	00db      	lsls	r3, r3, #3
   821f6:	4413      	add	r3, r2
   821f8:	2215      	movs	r2, #21
   821fa:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   821fc:	4b33      	ldr	r3, [pc, #204]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   821fe:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   82202:	3301      	adds	r3, #1
   82204:	b2da      	uxtb	r2, r3
   82206:	4b31      	ldr	r3, [pc, #196]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82208:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   8220c:	4b34      	ldr	r3, [pc, #208]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   8220e:	2201      	movs	r2, #1
   82210:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   82212:	4b34      	ldr	r3, [pc, #208]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   82214:	2215      	movs	r2, #21
   82216:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82218:	4b30      	ldr	r3, [pc, #192]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8221a:	781b      	ldrb	r3, [r3, #0]
   8221c:	461a      	mov	r2, r3
   8221e:	4b2f      	ldr	r3, [pc, #188]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82220:	4413      	add	r3, r2
   82222:	222e      	movs	r2, #46	; 0x2e
   82224:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82226:	4b35      	ldr	r3, [pc, #212]	; (822fc <Cl_alarms_scanforAlarms+0xcdc>)
   82228:	4798      	blx	r3
   8222a:	4603      	mov	r3, r0
   8222c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8222e:	79fb      	ldrb	r3, [r7, #7]
   82230:	2b00      	cmp	r3, #0
   82232:	d00b      	beq.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
   82234:	4b32      	ldr	r3, [pc, #200]	; (82300 <Cl_alarms_scanforAlarms+0xce0>)
   82236:	4798      	blx	r3
   82238:	e008      	b.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   8223a:	4b24      	ldr	r3, [pc, #144]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8223c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   82240:	2b01      	cmp	r3, #1
   82242:	d103      	bne.n	8224c <Cl_alarms_scanforAlarms+0xc2c>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82244:	4b21      	ldr	r3, [pc, #132]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82246:	2204      	movs	r2, #4
   82248:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   8224c:	4b1f      	ldr	r3, [pc, #124]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8224e:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   82252:	2b00      	cmp	r3, #0
   82254:	d061      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82256:	4b1d      	ldr	r3, [pc, #116]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82258:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8225c:	2b01      	cmp	r3, #1
   8225e:	d053      	beq.n	82308 <Cl_alarms_scanforAlarms+0xce8>
	{
		if(ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   82260:	4b23      	ldr	r3, [pc, #140]	; (822f0 <Cl_alarms_scanforAlarms+0xcd0>)
   82262:	69da      	ldr	r2, [r3, #28]
   82264:	4b23      	ldr	r3, [pc, #140]	; (822f4 <Cl_alarms_scanforAlarms+0xcd4>)
   82266:	6819      	ldr	r1, [r3, #0]
   82268:	4b26      	ldr	r3, [pc, #152]	; (82304 <Cl_alarms_scanforAlarms+0xce4>)
   8226a:	4610      	mov	r0, r2
   8226c:	4798      	blx	r3
   8226e:	4603      	mov	r3, r0
   82270:	2b00      	cmp	r3, #0
   82272:	d052      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82274:	4b15      	ldr	r3, [pc, #84]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82276:	2201      	movs	r2, #1
   82278:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   8227c:	4b17      	ldr	r3, [pc, #92]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   8227e:	781b      	ldrb	r3, [r3, #0]
   82280:	4a16      	ldr	r2, [pc, #88]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   82282:	3301      	adds	r3, #1
   82284:	00db      	lsls	r3, r3, #3
   82286:	4413      	add	r3, r2
   82288:	2216      	movs	r2, #22
   8228a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   8228c:	4b0f      	ldr	r3, [pc, #60]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   8228e:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   82292:	3301      	adds	r3, #1
   82294:	b2da      	uxtb	r2, r3
   82296:	4b0d      	ldr	r3, [pc, #52]	; (822cc <Cl_alarms_scanforAlarms+0xcac>)
   82298:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   8229c:	4b10      	ldr	r3, [pc, #64]	; (822e0 <Cl_alarms_scanforAlarms+0xcc0>)
   8229e:	2201      	movs	r2, #1
   822a0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   822a2:	4b10      	ldr	r3, [pc, #64]	; (822e4 <Cl_alarms_scanforAlarms+0xcc4>)
   822a4:	2216      	movs	r2, #22
   822a6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   822a8:	4b0c      	ldr	r3, [pc, #48]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   822aa:	781b      	ldrb	r3, [r3, #0]
   822ac:	461a      	mov	r2, r3
   822ae:	4b0b      	ldr	r3, [pc, #44]	; (822dc <Cl_alarms_scanforAlarms+0xcbc>)
   822b0:	4413      	add	r3, r2
   822b2:	222e      	movs	r2, #46	; 0x2e
   822b4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   822b6:	4b11      	ldr	r3, [pc, #68]	; (822fc <Cl_alarms_scanforAlarms+0xcdc>)
   822b8:	4798      	blx	r3
   822ba:	4603      	mov	r3, r0
   822bc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   822be:	79fb      	ldrb	r3, [r7, #7]
   822c0:	2b00      	cmp	r3, #0
   822c2:	d02a      	beq.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   822c4:	4b0e      	ldr	r3, [pc, #56]	; (82300 <Cl_alarms_scanforAlarms+0xce0>)
   822c6:	4798      	blx	r3
   822c8:	e027      	b.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
   822ca:	bf00      	nop
   822cc:	20072874 	.word	0x20072874
   822d0:	20072dbc 	.word	0x20072dbc
   822d4:	200715da 	.word	0x200715da
   822d8:	20072658 	.word	0x20072658
   822dc:	20072e58 	.word	0x20072e58
   822e0:	200715d9 	.word	0x200715d9
   822e4:	20072c98 	.word	0x20072c98
   822e8:	20072684 	.word	0x20072684
   822ec:	20070100 	.word	0x20070100
   822f0:	20072c9c 	.word	0x20072c9c
   822f4:	200715e0 	.word	0x200715e0
   822f8:	000a29c9 	.word	0x000a29c9
   822fc:	00082e69 	.word	0x00082e69
   82300:	000893e9 	.word	0x000893e9
   82304:	000a2a05 	.word	0x000a2a05
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82308:	4b99      	ldr	r3, [pc, #612]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8230a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8230e:	2b01      	cmp	r3, #1
   82310:	d103      	bne.n	8231a <Cl_alarms_scanforAlarms+0xcfa>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82312:	4b97      	ldr	r3, [pc, #604]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82314:	2204      	movs	r2, #4
   82316:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   8231a:	4b95      	ldr	r3, [pc, #596]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8231c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   82320:	2b00      	cmp	r3, #0
   82322:	d042      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82324:	4b92      	ldr	r3, [pc, #584]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82326:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   8232a:	2b01      	cmp	r3, #1
   8232c:	d034      	beq.n	82398 <Cl_alarms_scanforAlarms+0xd78>
				{
				if(ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   8232e:	4b91      	ldr	r3, [pc, #580]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   82330:	6a1a      	ldr	r2, [r3, #32]
   82332:	4b91      	ldr	r3, [pc, #580]	; (82578 <Cl_alarms_scanforAlarms+0xf58>)
   82334:	6819      	ldr	r1, [r3, #0]
   82336:	4b91      	ldr	r3, [pc, #580]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   82338:	4610      	mov	r0, r2
   8233a:	4798      	blx	r3
   8233c:	4603      	mov	r3, r0
   8233e:	2b00      	cmp	r3, #0
   82340:	d033      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   82342:	4b8b      	ldr	r3, [pc, #556]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82344:	2201      	movs	r2, #1
   82346:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   8234a:	4b8d      	ldr	r3, [pc, #564]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8234c:	781b      	ldrb	r3, [r3, #0]
   8234e:	4a8c      	ldr	r2, [pc, #560]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82350:	3301      	adds	r3, #1
   82352:	00db      	lsls	r3, r3, #3
   82354:	4413      	add	r3, r2
   82356:	2217      	movs	r2, #23
   82358:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   8235a:	4b85      	ldr	r3, [pc, #532]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8235c:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   82360:	3301      	adds	r3, #1
   82362:	b2da      	uxtb	r2, r3
   82364:	4b82      	ldr	r3, [pc, #520]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82366:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   8236a:	4b86      	ldr	r3, [pc, #536]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   8236c:	2201      	movs	r2, #1
   8236e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   82370:	4b85      	ldr	r3, [pc, #532]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82372:	2217      	movs	r2, #23
   82374:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82376:	4b82      	ldr	r3, [pc, #520]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82378:	781b      	ldrb	r3, [r3, #0]
   8237a:	461a      	mov	r2, r3
   8237c:	4b80      	ldr	r3, [pc, #512]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8237e:	4413      	add	r3, r2
   82380:	222e      	movs	r2, #46	; 0x2e
   82382:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82384:	4b81      	ldr	r3, [pc, #516]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   82386:	4798      	blx	r3
   82388:	4603      	mov	r3, r0
   8238a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8238c:	79fb      	ldrb	r3, [r7, #7]
   8238e:	2b00      	cmp	r3, #0
   82390:	d00b      	beq.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
   82392:	4b7f      	ldr	r3, [pc, #508]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   82394:	4798      	blx	r3
   82396:	e008      	b.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82398:	4b75      	ldr	r3, [pc, #468]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8239a:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   8239e:	2b01      	cmp	r3, #1
   823a0:	d103      	bne.n	823aa <Cl_alarms_scanforAlarms+0xd8a>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   823a2:	4b73      	ldr	r3, [pc, #460]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823a4:	2204      	movs	r2, #4
   823a6:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   823aa:	4b71      	ldr	r3, [pc, #452]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823ac:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   823b0:	2b00      	cmp	r3, #0
   823b2:	d042      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   823b4:	4b6e      	ldr	r3, [pc, #440]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823b6:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   823ba:	2b01      	cmp	r3, #1
   823bc:	d034      	beq.n	82428 <Cl_alarms_scanforAlarms+0xe08>
			{
				if(ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   823be:	4b6d      	ldr	r3, [pc, #436]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   823c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   823c2:	4b6d      	ldr	r3, [pc, #436]	; (82578 <Cl_alarms_scanforAlarms+0xf58>)
   823c4:	6819      	ldr	r1, [r3, #0]
   823c6:	4b73      	ldr	r3, [pc, #460]	; (82594 <Cl_alarms_scanforAlarms+0xf74>)
   823c8:	4610      	mov	r0, r2
   823ca:	4798      	blx	r3
   823cc:	4603      	mov	r3, r0
   823ce:	2b00      	cmp	r3, #0
   823d0:	d033      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   823d2:	4b67      	ldr	r3, [pc, #412]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823d4:	2201      	movs	r2, #1
   823d6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   823da:	4b69      	ldr	r3, [pc, #420]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   823dc:	781b      	ldrb	r3, [r3, #0]
   823de:	4a68      	ldr	r2, [pc, #416]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   823e0:	3301      	adds	r3, #1
   823e2:	00db      	lsls	r3, r3, #3
   823e4:	4413      	add	r3, r2
   823e6:	2218      	movs	r2, #24
   823e8:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   823ea:	4b61      	ldr	r3, [pc, #388]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823ec:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   823f0:	3301      	adds	r3, #1
   823f2:	b2da      	uxtb	r2, r3
   823f4:	4b5e      	ldr	r3, [pc, #376]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   823f6:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   823fa:	4b62      	ldr	r3, [pc, #392]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   823fc:	2201      	movs	r2, #1
   823fe:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   82400:	4b61      	ldr	r3, [pc, #388]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82402:	2218      	movs	r2, #24
   82404:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82406:	4b5e      	ldr	r3, [pc, #376]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82408:	781b      	ldrb	r3, [r3, #0]
   8240a:	461a      	mov	r2, r3
   8240c:	4b5c      	ldr	r3, [pc, #368]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8240e:	4413      	add	r3, r2
   82410:	222e      	movs	r2, #46	; 0x2e
   82412:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82414:	4b5d      	ldr	r3, [pc, #372]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   82416:	4798      	blx	r3
   82418:	4603      	mov	r3, r0
   8241a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8241c:	79fb      	ldrb	r3, [r7, #7]
   8241e:	2b00      	cmp	r3, #0
   82420:	d00b      	beq.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
   82422:	4b5b      	ldr	r3, [pc, #364]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   82424:	4798      	blx	r3
   82426:	e008      	b.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82428:	4b51      	ldr	r3, [pc, #324]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8242a:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8242e:	2b01      	cmp	r3, #1
   82430:	d103      	bne.n	8243a <Cl_alarms_scanforAlarms+0xe1a>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82432:	4b4f      	ldr	r3, [pc, #316]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82434:	2204      	movs	r2, #4
   82436:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   8243a:	4b4d      	ldr	r3, [pc, #308]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8243c:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   82440:	2b00      	cmp	r3, #0
   82442:	d042      	beq.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarmThresholdTable.ps3_high_threshold ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   82444:	4b4b      	ldr	r3, [pc, #300]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   82446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82448:	4b53      	ldr	r3, [pc, #332]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   8244a:	6819      	ldr	r1, [r3, #0]
   8244c:	4b4b      	ldr	r3, [pc, #300]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   8244e:	4610      	mov	r0, r2
   82450:	4798      	blx	r3
   82452:	4603      	mov	r3, r0
   82454:	2b00      	cmp	r3, #0
   82456:	d02f      	beq.n	824b8 <Cl_alarms_scanforAlarms+0xe98>
   82458:	4b45      	ldr	r3, [pc, #276]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8245a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   8245e:	2b01      	cmp	r3, #1
   82460:	d02a      	beq.n	824b8 <Cl_alarms_scanforAlarms+0xe98>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82462:	4b43      	ldr	r3, [pc, #268]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82464:	2201      	movs	r2, #1
   82466:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   8246a:	4b45      	ldr	r3, [pc, #276]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8246c:	781b      	ldrb	r3, [r3, #0]
   8246e:	4a44      	ldr	r2, [pc, #272]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82470:	3301      	adds	r3, #1
   82472:	00db      	lsls	r3, r3, #3
   82474:	4413      	add	r3, r2
   82476:	2227      	movs	r2, #39	; 0x27
   82478:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   8247a:	4b3d      	ldr	r3, [pc, #244]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8247c:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   82480:	3301      	adds	r3, #1
   82482:	b2da      	uxtb	r2, r3
   82484:	4b3a      	ldr	r3, [pc, #232]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82486:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   8248a:	4b3e      	ldr	r3, [pc, #248]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   8248c:	2201      	movs	r2, #1
   8248e:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   82490:	4b3d      	ldr	r3, [pc, #244]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   82492:	2227      	movs	r2, #39	; 0x27
   82494:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82496:	4b3a      	ldr	r3, [pc, #232]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82498:	781b      	ldrb	r3, [r3, #0]
   8249a:	461a      	mov	r2, r3
   8249c:	4b38      	ldr	r3, [pc, #224]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   8249e:	4413      	add	r3, r2
   824a0:	222e      	movs	r2, #46	; 0x2e
   824a2:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   824a4:	4b39      	ldr	r3, [pc, #228]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   824a6:	4798      	blx	r3
   824a8:	4603      	mov	r3, r0
   824aa:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   824ac:	79fb      	ldrb	r3, [r7, #7]
   824ae:	2b00      	cmp	r3, #0
   824b0:	d00b      	beq.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
   824b2:	4b37      	ldr	r3, [pc, #220]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   824b4:	4798      	blx	r3
   824b6:	e008      	b.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   824b8:	4b2d      	ldr	r3, [pc, #180]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824ba:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   824be:	2b01      	cmp	r3, #1
   824c0:	d103      	bne.n	824ca <Cl_alarms_scanforAlarms+0xeaa>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   824c2:	4b2b      	ldr	r3, [pc, #172]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824c4:	2204      	movs	r2, #4
   824c6:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   824ca:	4b29      	ldr	r3, [pc, #164]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824cc:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   824d0:	2b00      	cmp	r3, #0
   824d2:	d070      	beq.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   824d4:	4b27      	ldr	r3, [pc, #156]	; (82574 <Cl_alarms_scanforAlarms+0xf54>)
   824d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   824d8:	4b2f      	ldr	r3, [pc, #188]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   824da:	6819      	ldr	r1, [r3, #0]
   824dc:	4b2d      	ldr	r3, [pc, #180]	; (82594 <Cl_alarms_scanforAlarms+0xf74>)
   824de:	4610      	mov	r0, r2
   824e0:	4798      	blx	r3
   824e2:	4603      	mov	r3, r0
   824e4:	2b00      	cmp	r3, #0
   824e6:	d05d      	beq.n	825a4 <Cl_alarms_scanforAlarms+0xf84>
   824e8:	4b21      	ldr	r3, [pc, #132]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   824ea:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   824ee:	2b01      	cmp	r3, #1
   824f0:	d058      	beq.n	825a4 <Cl_alarms_scanforAlarms+0xf84>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
			
			if(ps3 < 0)
   824f2:	4b29      	ldr	r3, [pc, #164]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   824f4:	681a      	ldr	r2, [r3, #0]
   824f6:	4b21      	ldr	r3, [pc, #132]	; (8257c <Cl_alarms_scanforAlarms+0xf5c>)
   824f8:	f04f 0100 	mov.w	r1, #0
   824fc:	4610      	mov	r0, r2
   824fe:	4798      	blx	r3
   82500:	4603      	mov	r3, r0
   82502:	2b00      	cmp	r3, #0
   82504:	d009      	beq.n	8251a <Cl_alarms_scanforAlarms+0xefa>
			{
				ps3 = ps3+1000;
   82506:	4b24      	ldr	r3, [pc, #144]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   82508:	681a      	ldr	r2, [r3, #0]
   8250a:	4b24      	ldr	r3, [pc, #144]	; (8259c <Cl_alarms_scanforAlarms+0xf7c>)
   8250c:	4924      	ldr	r1, [pc, #144]	; (825a0 <Cl_alarms_scanforAlarms+0xf80>)
   8250e:	4610      	mov	r0, r2
   82510:	4798      	blx	r3
   82512:	4603      	mov	r3, r0
   82514:	461a      	mov	r2, r3
   82516:	4b20      	ldr	r3, [pc, #128]	; (82598 <Cl_alarms_scanforAlarms+0xf78>)
   82518:	601a      	str	r2, [r3, #0]
				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			}
			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8251a:	4b15      	ldr	r3, [pc, #84]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8251c:	2201      	movs	r2, #1
   8251e:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   82522:	4b17      	ldr	r3, [pc, #92]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82524:	781b      	ldrb	r3, [r3, #0]
   82526:	4a16      	ldr	r2, [pc, #88]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82528:	3301      	adds	r3, #1
   8252a:	00db      	lsls	r3, r3, #3
   8252c:	4413      	add	r3, r2
   8252e:	2228      	movs	r2, #40	; 0x28
   82530:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   82532:	4b0f      	ldr	r3, [pc, #60]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   82534:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   82538:	3301      	adds	r3, #1
   8253a:	b2da      	uxtb	r2, r3
   8253c:	4b0c      	ldr	r3, [pc, #48]	; (82570 <Cl_alarms_scanforAlarms+0xf50>)
   8253e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   82542:	4b10      	ldr	r3, [pc, #64]	; (82584 <Cl_alarms_scanforAlarms+0xf64>)
   82544:	2201      	movs	r2, #1
   82546:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   82548:	4b0f      	ldr	r3, [pc, #60]	; (82588 <Cl_alarms_scanforAlarms+0xf68>)
   8254a:	2228      	movs	r2, #40	; 0x28
   8254c:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8254e:	4b0c      	ldr	r3, [pc, #48]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82550:	781b      	ldrb	r3, [r3, #0]
   82552:	461a      	mov	r2, r3
   82554:	4b0a      	ldr	r3, [pc, #40]	; (82580 <Cl_alarms_scanforAlarms+0xf60>)
   82556:	4413      	add	r3, r2
   82558:	222e      	movs	r2, #46	; 0x2e
   8255a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8255c:	4b0b      	ldr	r3, [pc, #44]	; (8258c <Cl_alarms_scanforAlarms+0xf6c>)
   8255e:	4798      	blx	r3
   82560:	4603      	mov	r3, r0
   82562:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82564:	79fb      	ldrb	r3, [r7, #7]
   82566:	2b00      	cmp	r3, #0
   82568:	d025      	beq.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   8256a:	4b09      	ldr	r3, [pc, #36]	; (82590 <Cl_alarms_scanforAlarms+0xf70>)
   8256c:	4798      	blx	r3
   8256e:	e022      	b.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
   82570:	20072874 	.word	0x20072874
   82574:	20072c9c 	.word	0x20072c9c
   82578:	200715e4 	.word	0x200715e4
   8257c:	000a29c9 	.word	0x000a29c9
   82580:	20072e58 	.word	0x20072e58
   82584:	200715d9 	.word	0x200715d9
   82588:	20072c98 	.word	0x20072c98
   8258c:	00082e69 	.word	0x00082e69
   82590:	000893e9 	.word	0x000893e9
   82594:	000a2a05 	.word	0x000a2a05
   82598:	200715e8 	.word	0x200715e8
   8259c:	000a247d 	.word	0x000a247d
   825a0:	447a0000 	.word	0x447a0000
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   825a4:	4b99      	ldr	r3, [pc, #612]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825a6:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   825aa:	2b01      	cmp	r3, #1
   825ac:	d103      	bne.n	825b6 <Cl_alarms_scanforAlarms+0xf96>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   825ae:	4b97      	ldr	r3, [pc, #604]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825b0:	2204      	movs	r2, #4
   825b2:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   825b6:	4b95      	ldr	r3, [pc, #596]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825b8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   825bc:	2b00      	cmp	r3, #0
   825be:	d045      	beq.n	8264c <Cl_alarms_scanforAlarms+0x102c>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 > Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   825c0:	4b92      	ldr	r3, [pc, #584]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825c2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   825c6:	4b92      	ldr	r3, [pc, #584]	; (82810 <Cl_alarms_scanforAlarms+0x11f0>)
   825c8:	6819      	ldr	r1, [r3, #0]
   825ca:	4b92      	ldr	r3, [pc, #584]	; (82814 <Cl_alarms_scanforAlarms+0x11f4>)
   825cc:	4610      	mov	r0, r2
   825ce:	4798      	blx	r3
   825d0:	4603      	mov	r3, r0
   825d2:	2b00      	cmp	r3, #0
   825d4:	d02a      	beq.n	8262c <Cl_alarms_scanforAlarms+0x100c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   825d6:	4b8d      	ldr	r3, [pc, #564]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825d8:	2201      	movs	r2, #1
   825da:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   825de:	4b8e      	ldr	r3, [pc, #568]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   825e0:	781b      	ldrb	r3, [r3, #0]
   825e2:	4a8d      	ldr	r2, [pc, #564]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   825e4:	3301      	adds	r3, #1
   825e6:	00db      	lsls	r3, r3, #3
   825e8:	4413      	add	r3, r2
   825ea:	220f      	movs	r2, #15
   825ec:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   825ee:	4b87      	ldr	r3, [pc, #540]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825f0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   825f4:	3301      	adds	r3, #1
   825f6:	b2da      	uxtb	r2, r3
   825f8:	4b84      	ldr	r3, [pc, #528]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   825fa:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   825fe:	4b87      	ldr	r3, [pc, #540]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82600:	2201      	movs	r2, #1
   82602:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   82604:	4b86      	ldr	r3, [pc, #536]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   82606:	220f      	movs	r2, #15
   82608:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8260a:	4b83      	ldr	r3, [pc, #524]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   8260c:	781b      	ldrb	r3, [r3, #0]
   8260e:	461a      	mov	r2, r3
   82610:	4b81      	ldr	r3, [pc, #516]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82612:	4413      	add	r3, r2
   82614:	222e      	movs	r2, #46	; 0x2e
   82616:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82618:	4b82      	ldr	r3, [pc, #520]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   8261a:	4798      	blx	r3
   8261c:	4603      	mov	r3, r0
   8261e:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   82620:	79fb      	ldrb	r3, [r7, #7]
   82622:	2b00      	cmp	r3, #0
   82624:	d012      	beq.n	8264c <Cl_alarms_scanforAlarms+0x102c>
   82626:	4b80      	ldr	r3, [pc, #512]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82628:	4798      	blx	r3
   8262a:	e00f      	b.n	8264c <Cl_alarms_scanforAlarms+0x102c>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8262c:	4b77      	ldr	r3, [pc, #476]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8262e:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   82632:	2b01      	cmp	r3, #1
   82634:	d10a      	bne.n	8264c <Cl_alarms_scanforAlarms+0x102c>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82636:	4b75      	ldr	r3, [pc, #468]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82638:	2204      	movs	r2, #4
   8263a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   8263e:	4b73      	ldr	r3, [pc, #460]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82640:	2200      	movs	r2, #0
   82642:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   82646:	4b75      	ldr	r3, [pc, #468]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82648:	2200      	movs	r2, #0
   8264a:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   8264c:	4b6f      	ldr	r3, [pc, #444]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8264e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   82652:	2b00      	cmp	r3, #0
   82654:	d04a      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   82656:	4b6d      	ldr	r3, [pc, #436]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82658:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8265c:	4b6c      	ldr	r3, [pc, #432]	; (82810 <Cl_alarms_scanforAlarms+0x11f0>)
   8265e:	6819      	ldr	r1, [r3, #0]
   82660:	4b72      	ldr	r3, [pc, #456]	; (8282c <Cl_alarms_scanforAlarms+0x120c>)
   82662:	4610      	mov	r0, r2
   82664:	4798      	blx	r3
   82666:	4603      	mov	r3, r0
   82668:	2b00      	cmp	r3, #0
   8266a:	d02f      	beq.n	826cc <Cl_alarms_scanforAlarms+0x10ac>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8266c:	4b67      	ldr	r3, [pc, #412]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8266e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82672:	2b01      	cmp	r3, #1
   82674:	d03a      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82676:	4b65      	ldr	r3, [pc, #404]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82678:	2201      	movs	r2, #1
   8267a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   8267e:	4b66      	ldr	r3, [pc, #408]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82680:	781b      	ldrb	r3, [r3, #0]
   82682:	4a65      	ldr	r2, [pc, #404]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82684:	3301      	adds	r3, #1
   82686:	00db      	lsls	r3, r3, #3
   82688:	4413      	add	r3, r2
   8268a:	2210      	movs	r2, #16
   8268c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   8268e:	4b5f      	ldr	r3, [pc, #380]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82690:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   82694:	3301      	adds	r3, #1
   82696:	b2da      	uxtb	r2, r3
   82698:	4b5c      	ldr	r3, [pc, #368]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8269a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   8269e:	4b5f      	ldr	r3, [pc, #380]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   826a0:	2201      	movs	r2, #1
   826a2:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   826a4:	4b5e      	ldr	r3, [pc, #376]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   826a6:	2210      	movs	r2, #16
   826a8:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   826aa:	4b5b      	ldr	r3, [pc, #364]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   826ac:	781b      	ldrb	r3, [r3, #0]
   826ae:	461a      	mov	r2, r3
   826b0:	4b59      	ldr	r3, [pc, #356]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   826b2:	4413      	add	r3, r2
   826b4:	222e      	movs	r2, #46	; 0x2e
   826b6:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   826b8:	4b5a      	ldr	r3, [pc, #360]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   826ba:	4798      	blx	r3
   826bc:	4603      	mov	r3, r0
   826be:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   826c0:	79fb      	ldrb	r3, [r7, #7]
   826c2:	2b00      	cmp	r3, #0
   826c4:	d012      	beq.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
   826c6:	4b58      	ldr	r3, [pc, #352]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   826c8:	4798      	blx	r3
   826ca:	e00f      	b.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   826cc:	4b4f      	ldr	r3, [pc, #316]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826ce:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   826d2:	2b01      	cmp	r3, #1
   826d4:	d10a      	bne.n	826ec <Cl_alarms_scanforAlarms+0x10cc>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   826d6:	4b4d      	ldr	r3, [pc, #308]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826d8:	2204      	movs	r2, #4
   826da:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   826de:	4b4b      	ldr	r3, [pc, #300]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826e0:	2200      	movs	r2, #0
   826e2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   826e6:	4b4d      	ldr	r3, [pc, #308]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   826e8:	2200      	movs	r2, #0
   826ea:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   826ec:	4b47      	ldr	r3, [pc, #284]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826ee:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   826f2:	2b00      	cmp	r3, #0
   826f4:	d04a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_upper)
   826f6:	4b45      	ldr	r3, [pc, #276]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   826f8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   826fc:	4b4c      	ldr	r3, [pc, #304]	; (82830 <Cl_alarms_scanforAlarms+0x1210>)
   826fe:	6819      	ldr	r1, [r3, #0]
   82700:	4b44      	ldr	r3, [pc, #272]	; (82814 <Cl_alarms_scanforAlarms+0x11f4>)
   82702:	4610      	mov	r0, r2
   82704:	4798      	blx	r3
   82706:	4603      	mov	r3, r0
   82708:	2b00      	cmp	r3, #0
   8270a:	d02f      	beq.n	8276c <Cl_alarms_scanforAlarms+0x114c>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8270c:	4b3f      	ldr	r3, [pc, #252]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8270e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82712:	2b01      	cmp	r3, #1
   82714:	d03a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82716:	4b3d      	ldr	r3, [pc, #244]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82718:	2201      	movs	r2, #1
   8271a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   8271e:	4b3e      	ldr	r3, [pc, #248]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82720:	781b      	ldrb	r3, [r3, #0]
   82722:	4a3d      	ldr	r2, [pc, #244]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82724:	3301      	adds	r3, #1
   82726:	00db      	lsls	r3, r3, #3
   82728:	4413      	add	r3, r2
   8272a:	2213      	movs	r2, #19
   8272c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   8272e:	4b37      	ldr	r3, [pc, #220]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82730:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   82734:	3301      	adds	r3, #1
   82736:	b2da      	uxtb	r2, r3
   82738:	4b34      	ldr	r3, [pc, #208]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8273a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   8273e:	4b37      	ldr	r3, [pc, #220]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82740:	2201      	movs	r2, #1
   82742:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   82744:	4b36      	ldr	r3, [pc, #216]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   82746:	2213      	movs	r2, #19
   82748:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8274a:	4b33      	ldr	r3, [pc, #204]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   8274c:	781b      	ldrb	r3, [r3, #0]
   8274e:	461a      	mov	r2, r3
   82750:	4b31      	ldr	r3, [pc, #196]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   82752:	4413      	add	r3, r2
   82754:	222e      	movs	r2, #46	; 0x2e
   82756:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82758:	4b32      	ldr	r3, [pc, #200]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   8275a:	4798      	blx	r3
   8275c:	4603      	mov	r3, r0
   8275e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82760:	79fb      	ldrb	r3, [r7, #7]
   82762:	2b00      	cmp	r3, #0
   82764:	d012      	beq.n	8278c <Cl_alarms_scanforAlarms+0x116c>
   82766:	4b30      	ldr	r3, [pc, #192]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82768:	4798      	blx	r3
   8276a:	e00f      	b.n	8278c <Cl_alarms_scanforAlarms+0x116c>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8276c:	4b27      	ldr	r3, [pc, #156]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8276e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82772:	2b01      	cmp	r3, #1
   82774:	d10a      	bne.n	8278c <Cl_alarms_scanforAlarms+0x116c>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82776:	4b25      	ldr	r3, [pc, #148]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82778:	2204      	movs	r2, #4
   8277a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   8277e:	4b23      	ldr	r3, [pc, #140]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82780:	2200      	movs	r2, #0
   82782:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   82786:	4b25      	ldr	r3, [pc, #148]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   82788:	2200      	movs	r2, #0
   8278a:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   8278c:	4b1f      	ldr	r3, [pc, #124]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   8278e:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   82792:	2b00      	cmp	r3, #0
   82794:	d05e      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_lower)
   82796:	4b1d      	ldr	r3, [pc, #116]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   82798:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   8279c:	4b24      	ldr	r3, [pc, #144]	; (82830 <Cl_alarms_scanforAlarms+0x1210>)
   8279e:	6819      	ldr	r1, [r3, #0]
   827a0:	4b22      	ldr	r3, [pc, #136]	; (8282c <Cl_alarms_scanforAlarms+0x120c>)
   827a2:	4610      	mov	r0, r2
   827a4:	4798      	blx	r3
   827a6:	4603      	mov	r3, r0
   827a8:	2b00      	cmp	r3, #0
   827aa:	d043      	beq.n	82834 <Cl_alarms_scanforAlarms+0x1214>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   827ac:	4b17      	ldr	r3, [pc, #92]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827ae:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   827b2:	2b01      	cmp	r3, #1
   827b4:	d04e      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   827b6:	4b15      	ldr	r3, [pc, #84]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827b8:	2201      	movs	r2, #1
   827ba:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   827be:	4b16      	ldr	r3, [pc, #88]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827c0:	781b      	ldrb	r3, [r3, #0]
   827c2:	4a15      	ldr	r2, [pc, #84]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827c4:	3301      	adds	r3, #1
   827c6:	00db      	lsls	r3, r3, #3
   827c8:	4413      	add	r3, r2
   827ca:	2214      	movs	r2, #20
   827cc:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   827ce:	4b0f      	ldr	r3, [pc, #60]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827d0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   827d4:	3301      	adds	r3, #1
   827d6:	b2da      	uxtb	r2, r3
   827d8:	4b0c      	ldr	r3, [pc, #48]	; (8280c <Cl_alarms_scanforAlarms+0x11ec>)
   827da:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   827de:	4b0f      	ldr	r3, [pc, #60]	; (8281c <Cl_alarms_scanforAlarms+0x11fc>)
   827e0:	2201      	movs	r2, #1
   827e2:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   827e4:	4b0e      	ldr	r3, [pc, #56]	; (82820 <Cl_alarms_scanforAlarms+0x1200>)
   827e6:	2214      	movs	r2, #20
   827e8:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   827ea:	4b0b      	ldr	r3, [pc, #44]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827ec:	781b      	ldrb	r3, [r3, #0]
   827ee:	461a      	mov	r2, r3
   827f0:	4b09      	ldr	r3, [pc, #36]	; (82818 <Cl_alarms_scanforAlarms+0x11f8>)
   827f2:	4413      	add	r3, r2
   827f4:	222e      	movs	r2, #46	; 0x2e
   827f6:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   827f8:	4b0a      	ldr	r3, [pc, #40]	; (82824 <Cl_alarms_scanforAlarms+0x1204>)
   827fa:	4798      	blx	r3
   827fc:	4603      	mov	r3, r0
   827fe:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   82800:	79fb      	ldrb	r3, [r7, #7]
   82802:	2b00      	cmp	r3, #0
   82804:	d026      	beq.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   82806:	4b08      	ldr	r3, [pc, #32]	; (82828 <Cl_alarms_scanforAlarms+0x1208>)
   82808:	4798      	blx	r3
   8280a:	e023      	b.n	82854 <Cl_alarms_scanforAlarms+0x1234>
   8280c:	20072874 	.word	0x20072874
   82810:	200715ec 	.word	0x200715ec
   82814:	000a29c9 	.word	0x000a29c9
   82818:	20072e58 	.word	0x20072e58
   8281c:	200715d9 	.word	0x200715d9
   82820:	20072c98 	.word	0x20072c98
   82824:	00082e69 	.word	0x00082e69
   82828:	000893e9 	.word	0x000893e9
   8282c:	000a2a05 	.word	0x000a2a05
   82830:	200715f4 	.word	0x200715f4
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82834:	4b9a      	ldr	r3, [pc, #616]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82836:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8283a:	2b01      	cmp	r3, #1
   8283c:	d10a      	bne.n	82854 <Cl_alarms_scanforAlarms+0x1234>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8283e:	4b98      	ldr	r3, [pc, #608]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82840:	2204      	movs	r2, #4
   82842:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   82846:	4b96      	ldr	r3, [pc, #600]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82848:	2200      	movs	r2, #0
   8284a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   8284e:	4b95      	ldr	r3, [pc, #596]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82850:	2200      	movs	r2, #0
   82852:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   82854:	4b92      	ldr	r3, [pc, #584]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82856:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   8285a:	2b00      	cmp	r3, #0
   8285c:	d04a      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   8285e:	4b90      	ldr	r3, [pc, #576]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82860:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   82864:	4b90      	ldr	r3, [pc, #576]	; (82aa8 <Cl_alarms_scanforAlarms+0x1488>)
   82866:	6819      	ldr	r1, [r3, #0]
   82868:	4b90      	ldr	r3, [pc, #576]	; (82aac <Cl_alarms_scanforAlarms+0x148c>)
   8286a:	4610      	mov	r0, r2
   8286c:	4798      	blx	r3
   8286e:	4603      	mov	r3, r0
   82870:	2b00      	cmp	r3, #0
   82872:	d02f      	beq.n	828d4 <Cl_alarms_scanforAlarms+0x12b4>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82874:	4b8a      	ldr	r3, [pc, #552]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82876:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8287a:	2b01      	cmp	r3, #1
   8287c:	d03a      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8287e:	4b88      	ldr	r3, [pc, #544]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82880:	2201      	movs	r2, #1
   82882:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   82886:	4b8a      	ldr	r3, [pc, #552]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82888:	781b      	ldrb	r3, [r3, #0]
   8288a:	4a89      	ldr	r2, [pc, #548]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8288c:	3301      	adds	r3, #1
   8288e:	00db      	lsls	r3, r3, #3
   82890:	4413      	add	r3, r2
   82892:	2211      	movs	r2, #17
   82894:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   82896:	4b82      	ldr	r3, [pc, #520]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82898:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   8289c:	3301      	adds	r3, #1
   8289e:	b2da      	uxtb	r2, r3
   828a0:	4b7f      	ldr	r3, [pc, #508]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828a2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   828a6:	4b7f      	ldr	r3, [pc, #508]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   828a8:	2201      	movs	r2, #1
   828aa:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   828ac:	4b81      	ldr	r3, [pc, #516]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   828ae:	2211      	movs	r2, #17
   828b0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   828b2:	4b7f      	ldr	r3, [pc, #508]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   828b4:	781b      	ldrb	r3, [r3, #0]
   828b6:	461a      	mov	r2, r3
   828b8:	4b7d      	ldr	r3, [pc, #500]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   828ba:	4413      	add	r3, r2
   828bc:	222e      	movs	r2, #46	; 0x2e
   828be:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   828c0:	4b7d      	ldr	r3, [pc, #500]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   828c2:	4798      	blx	r3
   828c4:	4603      	mov	r3, r0
   828c6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   828c8:	79fb      	ldrb	r3, [r7, #7]
   828ca:	2b00      	cmp	r3, #0
   828cc:	d012      	beq.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
   828ce:	4b7b      	ldr	r3, [pc, #492]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   828d0:	4798      	blx	r3
   828d2:	e00f      	b.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   828d4:	4b72      	ldr	r3, [pc, #456]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828d6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   828da:	2b01      	cmp	r3, #1
   828dc:	d10a      	bne.n	828f4 <Cl_alarms_scanforAlarms+0x12d4>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   828de:	4b70      	ldr	r3, [pc, #448]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828e0:	2204      	movs	r2, #4
   828e2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   828e6:	4b6e      	ldr	r3, [pc, #440]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828e8:	2200      	movs	r2, #0
   828ea:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   828ee:	4b6d      	ldr	r3, [pc, #436]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   828f0:	2200      	movs	r2, #0
   828f2:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   828f4:	4b6a      	ldr	r3, [pc, #424]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   828f6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   828fa:	2b00      	cmp	r3, #0
   828fc:	d04a      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)
   828fe:	4b68      	ldr	r3, [pc, #416]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82900:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   82904:	4b68      	ldr	r3, [pc, #416]	; (82aa8 <Cl_alarms_scanforAlarms+0x1488>)
   82906:	6819      	ldr	r1, [r3, #0]
   82908:	4b6d      	ldr	r3, [pc, #436]	; (82ac0 <Cl_alarms_scanforAlarms+0x14a0>)
   8290a:	4610      	mov	r0, r2
   8290c:	4798      	blx	r3
   8290e:	4603      	mov	r3, r0
   82910:	2b00      	cmp	r3, #0
   82912:	d02f      	beq.n	82974 <Cl_alarms_scanforAlarms+0x1354>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82914:	4b62      	ldr	r3, [pc, #392]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82916:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8291a:	2b01      	cmp	r3, #1
   8291c:	d03a      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8291e:	4b60      	ldr	r3, [pc, #384]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82920:	2201      	movs	r2, #1
   82922:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   82926:	4b62      	ldr	r3, [pc, #392]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82928:	781b      	ldrb	r3, [r3, #0]
   8292a:	4a61      	ldr	r2, [pc, #388]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8292c:	3301      	adds	r3, #1
   8292e:	00db      	lsls	r3, r3, #3
   82930:	4413      	add	r3, r2
   82932:	2212      	movs	r2, #18
   82934:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   82936:	4b5a      	ldr	r3, [pc, #360]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82938:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   8293c:	3301      	adds	r3, #1
   8293e:	b2da      	uxtb	r2, r3
   82940:	4b57      	ldr	r3, [pc, #348]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82942:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   82946:	4b57      	ldr	r3, [pc, #348]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82948:	2201      	movs	r2, #1
   8294a:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   8294c:	4b59      	ldr	r3, [pc, #356]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   8294e:	2212      	movs	r2, #18
   82950:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82952:	4b57      	ldr	r3, [pc, #348]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82954:	781b      	ldrb	r3, [r3, #0]
   82956:	461a      	mov	r2, r3
   82958:	4b55      	ldr	r3, [pc, #340]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   8295a:	4413      	add	r3, r2
   8295c:	222e      	movs	r2, #46	; 0x2e
   8295e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82960:	4b55      	ldr	r3, [pc, #340]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   82962:	4798      	blx	r3
   82964:	4603      	mov	r3, r0
   82966:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82968:	79fb      	ldrb	r3, [r7, #7]
   8296a:	2b00      	cmp	r3, #0
   8296c:	d012      	beq.n	82994 <Cl_alarms_scanforAlarms+0x1374>
   8296e:	4b53      	ldr	r3, [pc, #332]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82970:	4798      	blx	r3
   82972:	e00f      	b.n	82994 <Cl_alarms_scanforAlarms+0x1374>
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82974:	4b4a      	ldr	r3, [pc, #296]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82976:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8297a:	2b01      	cmp	r3, #1
   8297c:	d10a      	bne.n	82994 <Cl_alarms_scanforAlarms+0x1374>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8297e:	4b48      	ldr	r3, [pc, #288]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82980:	2204      	movs	r2, #4
   82982:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   82986:	4b46      	ldr	r3, [pc, #280]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82988:	2200      	movs	r2, #0
   8298a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   8298e:	4b45      	ldr	r3, [pc, #276]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82990:	2200      	movs	r2, #0
   82992:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   82994:	4b42      	ldr	r3, [pc, #264]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82996:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   8299a:	2b00      	cmp	r3, #0
   8299c:	d045      	beq.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   8299e:	4b40      	ldr	r3, [pc, #256]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   829a4:	4b47      	ldr	r3, [pc, #284]	; (82ac4 <Cl_alarms_scanforAlarms+0x14a4>)
   829a6:	6819      	ldr	r1, [r3, #0]
   829a8:	4b40      	ldr	r3, [pc, #256]	; (82aac <Cl_alarms_scanforAlarms+0x148c>)
   829aa:	4610      	mov	r0, r2
   829ac:	4798      	blx	r3
   829ae:	4603      	mov	r3, r0
   829b0:	2b00      	cmp	r3, #0
   829b2:	d02a      	beq.n	82a0a <Cl_alarms_scanforAlarms+0x13ea>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   829b4:	4b3a      	ldr	r3, [pc, #232]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829b6:	2201      	movs	r2, #1
   829b8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   829bc:	4b3c      	ldr	r3, [pc, #240]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829be:	781b      	ldrb	r3, [r3, #0]
   829c0:	4a3b      	ldr	r2, [pc, #236]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829c2:	3301      	adds	r3, #1
   829c4:	00db      	lsls	r3, r3, #3
   829c6:	4413      	add	r3, r2
   829c8:	2208      	movs	r2, #8
   829ca:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   829cc:	4b34      	ldr	r3, [pc, #208]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   829d2:	3301      	adds	r3, #1
   829d4:	b2da      	uxtb	r2, r3
   829d6:	4b32      	ldr	r3, [pc, #200]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   829d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   829dc:	4b31      	ldr	r3, [pc, #196]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   829de:	2201      	movs	r2, #1
   829e0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   829e2:	4b34      	ldr	r3, [pc, #208]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   829e4:	2208      	movs	r2, #8
   829e6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   829e8:	4b31      	ldr	r3, [pc, #196]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829ea:	781b      	ldrb	r3, [r3, #0]
   829ec:	461a      	mov	r2, r3
   829ee:	4b30      	ldr	r3, [pc, #192]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   829f0:	4413      	add	r3, r2
   829f2:	222e      	movs	r2, #46	; 0x2e
   829f4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   829f6:	4b30      	ldr	r3, [pc, #192]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   829f8:	4798      	blx	r3
   829fa:	4603      	mov	r3, r0
   829fc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   829fe:	79fb      	ldrb	r3, [r7, #7]
   82a00:	2b00      	cmp	r3, #0
   82a02:	d012      	beq.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
   82a04:	4b2d      	ldr	r3, [pc, #180]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82a06:	4798      	blx	r3
   82a08:	e00f      	b.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   82a0a:	4b25      	ldr	r3, [pc, #148]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a0c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   82a10:	2b01      	cmp	r3, #1
   82a12:	d10a      	bne.n	82a2a <Cl_alarms_scanforAlarms+0x140a>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82a14:	4b22      	ldr	r3, [pc, #136]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a16:	2204      	movs	r2, #4
   82a18:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   82a1c:	4b20      	ldr	r3, [pc, #128]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a1e:	2200      	movs	r2, #0
   82a20:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   82a24:	4b1f      	ldr	r3, [pc, #124]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82a26:	2200      	movs	r2, #0
   82a28:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   82a2a:	4b1d      	ldr	r3, [pc, #116]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a2c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   82a30:	2b00      	cmp	r3, #0
   82a32:	d059      	beq.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarms_alarms[COND_STATUS_LOW].cl_lower)
   82a34:	4b1a      	ldr	r3, [pc, #104]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a36:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   82a38:	4b22      	ldr	r3, [pc, #136]	; (82ac4 <Cl_alarms_scanforAlarms+0x14a4>)
   82a3a:	6819      	ldr	r1, [r3, #0]
   82a3c:	4b20      	ldr	r3, [pc, #128]	; (82ac0 <Cl_alarms_scanforAlarms+0x14a0>)
   82a3e:	4610      	mov	r0, r2
   82a40:	4798      	blx	r3
   82a42:	4603      	mov	r3, r0
   82a44:	2b00      	cmp	r3, #0
   82a46:	d03f      	beq.n	82ac8 <Cl_alarms_scanforAlarms+0x14a8>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   82a48:	4b15      	ldr	r3, [pc, #84]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a4a:	2201      	movs	r2, #1
   82a4c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   82a50:	4b17      	ldr	r3, [pc, #92]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a52:	781b      	ldrb	r3, [r3, #0]
   82a54:	4a16      	ldr	r2, [pc, #88]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a56:	3301      	adds	r3, #1
   82a58:	00db      	lsls	r3, r3, #3
   82a5a:	4413      	add	r3, r2
   82a5c:	2207      	movs	r2, #7
   82a5e:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   82a60:	4b0f      	ldr	r3, [pc, #60]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   82a66:	3301      	adds	r3, #1
   82a68:	b2da      	uxtb	r2, r3
   82a6a:	4b0d      	ldr	r3, [pc, #52]	; (82aa0 <Cl_alarms_scanforAlarms+0x1480>)
   82a6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   82a70:	4b0c      	ldr	r3, [pc, #48]	; (82aa4 <Cl_alarms_scanforAlarms+0x1484>)
   82a72:	2201      	movs	r2, #1
   82a74:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   82a76:	4b0f      	ldr	r3, [pc, #60]	; (82ab4 <Cl_alarms_scanforAlarms+0x1494>)
   82a78:	2207      	movs	r2, #7
   82a7a:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82a7c:	4b0c      	ldr	r3, [pc, #48]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a7e:	781b      	ldrb	r3, [r3, #0]
   82a80:	461a      	mov	r2, r3
   82a82:	4b0b      	ldr	r3, [pc, #44]	; (82ab0 <Cl_alarms_scanforAlarms+0x1490>)
   82a84:	4413      	add	r3, r2
   82a86:	222e      	movs	r2, #46	; 0x2e
   82a88:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82a8a:	4b0b      	ldr	r3, [pc, #44]	; (82ab8 <Cl_alarms_scanforAlarms+0x1498>)
   82a8c:	4798      	blx	r3
   82a8e:	4603      	mov	r3, r0
   82a90:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82a92:	79fb      	ldrb	r3, [r7, #7]
   82a94:	2b00      	cmp	r3, #0
   82a96:	d027      	beq.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82a98:	4b08      	ldr	r3, [pc, #32]	; (82abc <Cl_alarms_scanforAlarms+0x149c>)
   82a9a:	4798      	blx	r3
   82a9c:	e024      	b.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
   82a9e:	bf00      	nop
   82aa0:	20072874 	.word	0x20072874
   82aa4:	200715d9 	.word	0x200715d9
   82aa8:	200715f0 	.word	0x200715f0
   82aac:	000a29c9 	.word	0x000a29c9
   82ab0:	20072e58 	.word	0x20072e58
   82ab4:	20072c98 	.word	0x20072c98
   82ab8:	00082e69 	.word	0x00082e69
   82abc:	000893e9 	.word	0x000893e9
   82ac0:	000a2a05 	.word	0x000a2a05
   82ac4:	200715fc 	.word	0x200715fc
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   82ac8:	4b82      	ldr	r3, [pc, #520]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82aca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   82ace:	2b01      	cmp	r3, #1
   82ad0:	d10a      	bne.n	82ae8 <Cl_alarms_scanforAlarms+0x14c8>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82ad2:	4b80      	ldr	r3, [pc, #512]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82ad4:	2204      	movs	r2, #4
   82ad6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   82ada:	4b7e      	ldr	r3, [pc, #504]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82adc:	2200      	movs	r2, #0
   82ade:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   82ae2:	4b7d      	ldr	r3, [pc, #500]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82ae4:	2200      	movs	r2, #0
   82ae6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   82ae8:	4b7a      	ldr	r3, [pc, #488]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82aea:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   82aee:	2b00      	cmp	r3, #0
   82af0:	d10a      	bne.n	82b08 <Cl_alarms_scanforAlarms+0x14e8>
   82af2:	4b78      	ldr	r3, [pc, #480]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82af4:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   82af8:	2b00      	cmp	r3, #0
   82afa:	d105      	bne.n	82b08 <Cl_alarms_scanforAlarms+0x14e8>
   82afc:	4b75      	ldr	r3, [pc, #468]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82afe:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82b02:	2b00      	cmp	r3, #0
   82b04:	f000 80f7 	beq.w	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
	{
			dac_cond_alarm = _NO_ALARM;
   82b08:	4b74      	ldr	r3, [pc, #464]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b0a:	2200      	movs	r2, #0
   82b0c:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   82b0e:	4873      	ldr	r0, [pc, #460]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b10:	4b73      	ldr	r3, [pc, #460]	; (82ce0 <Cl_alarms_scanforAlarms+0x16c0>)
   82b12:	4798      	blx	r3
   82b14:	4603      	mov	r3, r0
   82b16:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82b18:	79fb      	ldrb	r3, [r7, #7]
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	d001      	beq.n	82b22 <Cl_alarms_scanforAlarms+0x1502>
   82b1e:	4b71      	ldr	r3, [pc, #452]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82b20:	4798      	blx	r3
				switch(dac_cond_alarm)
   82b22:	4b6e      	ldr	r3, [pc, #440]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b24:	781b      	ldrb	r3, [r3, #0]
   82b26:	2b0a      	cmp	r3, #10
   82b28:	d049      	beq.n	82bbe <Cl_alarms_scanforAlarms+0x159e>
   82b2a:	2b0b      	cmp	r3, #11
   82b2c:	f000 808a 	beq.w	82c44 <Cl_alarms_scanforAlarms+0x1624>
   82b30:	2b09      	cmp	r3, #9
   82b32:	f040 80e0 	bne.w	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82b36:	4b69      	ldr	r3, [pc, #420]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b38:	781b      	ldrb	r3, [r3, #0]
   82b3a:	4a66      	ldr	r2, [pc, #408]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b3c:	011b      	lsls	r3, r3, #4
   82b3e:	4413      	add	r3, r2
   82b40:	3302      	adds	r3, #2
   82b42:	2201      	movs	r2, #1
   82b44:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82b46:	4b63      	ldr	r3, [pc, #396]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b48:	2204      	movs	r2, #4
   82b4a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82b4e:	4b61      	ldr	r3, [pc, #388]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b50:	2204      	movs	r2, #4
   82b52:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82b56:	4b64      	ldr	r3, [pc, #400]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b58:	781b      	ldrb	r3, [r3, #0]
   82b5a:	4618      	mov	r0, r3
   82b5c:	4b5f      	ldr	r3, [pc, #380]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b5e:	781b      	ldrb	r3, [r3, #0]
   82b60:	b299      	uxth	r1, r3
   82b62:	4a61      	ldr	r2, [pc, #388]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b64:	1c43      	adds	r3, r0, #1
   82b66:	00db      	lsls	r3, r3, #3
   82b68:	4413      	add	r3, r2
   82b6a:	460a      	mov	r2, r1
   82b6c:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82b6e:	4b5b      	ldr	r3, [pc, #364]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b70:	781b      	ldrb	r3, [r3, #0]
   82b72:	4958      	ldr	r1, [pc, #352]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b74:	011a      	lsls	r2, r3, #4
   82b76:	440a      	add	r2, r1
   82b78:	320d      	adds	r2, #13
   82b7a:	7812      	ldrb	r2, [r2, #0]
   82b7c:	3201      	adds	r2, #1
   82b7e:	b2d1      	uxtb	r1, r2
   82b80:	4a54      	ldr	r2, [pc, #336]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82b82:	011b      	lsls	r3, r3, #4
   82b84:	4413      	add	r3, r2
   82b86:	330d      	adds	r3, #13
   82b88:	460a      	mov	r2, r1
   82b8a:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82b8c:	4b52      	ldr	r3, [pc, #328]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82b8e:	2201      	movs	r2, #1
   82b90:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82b92:	4b52      	ldr	r3, [pc, #328]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82b94:	781a      	ldrb	r2, [r3, #0]
   82b96:	4b55      	ldr	r3, [pc, #340]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82b98:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82b9a:	4b53      	ldr	r3, [pc, #332]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82b9c:	781b      	ldrb	r3, [r3, #0]
   82b9e:	461a      	mov	r2, r3
   82ba0:	4b51      	ldr	r3, [pc, #324]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82ba2:	4413      	add	r3, r2
   82ba4:	222e      	movs	r2, #46	; 0x2e
   82ba6:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82ba8:	4b51      	ldr	r3, [pc, #324]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82baa:	4798      	blx	r3
   82bac:	4603      	mov	r3, r0
   82bae:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82bb0:	79fb      	ldrb	r3, [r7, #7]
   82bb2:	2b00      	cmp	r3, #0
   82bb4:	f000 8089 	beq.w	82cca <Cl_alarms_scanforAlarms+0x16aa>
   82bb8:	4b4a      	ldr	r3, [pc, #296]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82bba:	4798      	blx	r3
					break;
   82bbc:	e085      	b.n	82cca <Cl_alarms_scanforAlarms+0x16aa>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82bbe:	4b47      	ldr	r3, [pc, #284]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82bc0:	781b      	ldrb	r3, [r3, #0]
   82bc2:	4a44      	ldr	r2, [pc, #272]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bc4:	011b      	lsls	r3, r3, #4
   82bc6:	4413      	add	r3, r2
   82bc8:	3302      	adds	r3, #2
   82bca:	2201      	movs	r2, #1
   82bcc:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82bce:	4b41      	ldr	r3, [pc, #260]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bd0:	2204      	movs	r2, #4
   82bd2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82bd6:	4b3f      	ldr	r3, [pc, #252]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bd8:	2204      	movs	r2, #4
   82bda:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82bde:	4b42      	ldr	r3, [pc, #264]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82be0:	781b      	ldrb	r3, [r3, #0]
   82be2:	4618      	mov	r0, r3
   82be4:	4b3d      	ldr	r3, [pc, #244]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82be6:	781b      	ldrb	r3, [r3, #0]
   82be8:	b299      	uxth	r1, r3
   82bea:	4a3f      	ldr	r2, [pc, #252]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82bec:	1c43      	adds	r3, r0, #1
   82bee:	00db      	lsls	r3, r3, #3
   82bf0:	4413      	add	r3, r2
   82bf2:	460a      	mov	r2, r1
   82bf4:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82bf6:	4b39      	ldr	r3, [pc, #228]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82bf8:	781b      	ldrb	r3, [r3, #0]
   82bfa:	4936      	ldr	r1, [pc, #216]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82bfc:	011a      	lsls	r2, r3, #4
   82bfe:	440a      	add	r2, r1
   82c00:	320d      	adds	r2, #13
   82c02:	7812      	ldrb	r2, [r2, #0]
   82c04:	3201      	adds	r2, #1
   82c06:	b2d1      	uxtb	r1, r2
   82c08:	4a32      	ldr	r2, [pc, #200]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c0a:	011b      	lsls	r3, r3, #4
   82c0c:	4413      	add	r3, r2
   82c0e:	330d      	adds	r3, #13
   82c10:	460a      	mov	r2, r1
   82c12:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82c14:	4b30      	ldr	r3, [pc, #192]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82c16:	2201      	movs	r2, #1
   82c18:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82c1a:	4b30      	ldr	r3, [pc, #192]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c1c:	781a      	ldrb	r2, [r3, #0]
   82c1e:	4b33      	ldr	r3, [pc, #204]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82c20:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82c22:	4b31      	ldr	r3, [pc, #196]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c24:	781b      	ldrb	r3, [r3, #0]
   82c26:	461a      	mov	r2, r3
   82c28:	4b2f      	ldr	r3, [pc, #188]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c2a:	4413      	add	r3, r2
   82c2c:	222e      	movs	r2, #46	; 0x2e
   82c2e:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82c30:	4b2f      	ldr	r3, [pc, #188]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82c32:	4798      	blx	r3
   82c34:	4603      	mov	r3, r0
   82c36:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82c38:	79fb      	ldrb	r3, [r7, #7]
   82c3a:	2b00      	cmp	r3, #0
   82c3c:	d047      	beq.n	82cce <Cl_alarms_scanforAlarms+0x16ae>
   82c3e:	4b29      	ldr	r3, [pc, #164]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82c40:	4798      	blx	r3
					break;
   82c42:	e044      	b.n	82cce <Cl_alarms_scanforAlarms+0x16ae>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82c44:	4b25      	ldr	r3, [pc, #148]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c46:	781b      	ldrb	r3, [r3, #0]
   82c48:	4a22      	ldr	r2, [pc, #136]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c4a:	011b      	lsls	r3, r3, #4
   82c4c:	4413      	add	r3, r2
   82c4e:	3302      	adds	r3, #2
   82c50:	2201      	movs	r2, #1
   82c52:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82c54:	4b1f      	ldr	r3, [pc, #124]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c56:	2204      	movs	r2, #4
   82c58:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82c5c:	4b1d      	ldr	r3, [pc, #116]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c5e:	2204      	movs	r2, #4
   82c60:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82c64:	4b20      	ldr	r3, [pc, #128]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c66:	781b      	ldrb	r3, [r3, #0]
   82c68:	4618      	mov	r0, r3
   82c6a:	4b1c      	ldr	r3, [pc, #112]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c6c:	781b      	ldrb	r3, [r3, #0]
   82c6e:	b299      	uxth	r1, r3
   82c70:	4a1d      	ldr	r2, [pc, #116]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82c72:	1c43      	adds	r3, r0, #1
   82c74:	00db      	lsls	r3, r3, #3
   82c76:	4413      	add	r3, r2
   82c78:	460a      	mov	r2, r1
   82c7a:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82c7c:	4b17      	ldr	r3, [pc, #92]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82c7e:	781b      	ldrb	r3, [r3, #0]
   82c80:	4914      	ldr	r1, [pc, #80]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c82:	011a      	lsls	r2, r3, #4
   82c84:	440a      	add	r2, r1
   82c86:	320d      	adds	r2, #13
   82c88:	7812      	ldrb	r2, [r2, #0]
   82c8a:	3201      	adds	r2, #1
   82c8c:	b2d1      	uxtb	r1, r2
   82c8e:	4a11      	ldr	r2, [pc, #68]	; (82cd4 <Cl_alarms_scanforAlarms+0x16b4>)
   82c90:	011b      	lsls	r3, r3, #4
   82c92:	4413      	add	r3, r2
   82c94:	330d      	adds	r3, #13
   82c96:	460a      	mov	r2, r1
   82c98:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82c9a:	4b0f      	ldr	r3, [pc, #60]	; (82cd8 <Cl_alarms_scanforAlarms+0x16b8>)
   82c9c:	2201      	movs	r2, #1
   82c9e:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82ca0:	4b0e      	ldr	r3, [pc, #56]	; (82cdc <Cl_alarms_scanforAlarms+0x16bc>)
   82ca2:	781a      	ldrb	r2, [r3, #0]
   82ca4:	4b11      	ldr	r3, [pc, #68]	; (82cec <Cl_alarms_scanforAlarms+0x16cc>)
   82ca6:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82ca8:	4b0f      	ldr	r3, [pc, #60]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82caa:	781b      	ldrb	r3, [r3, #0]
   82cac:	461a      	mov	r2, r3
   82cae:	4b0e      	ldr	r3, [pc, #56]	; (82ce8 <Cl_alarms_scanforAlarms+0x16c8>)
   82cb0:	4413      	add	r3, r2
   82cb2:	222e      	movs	r2, #46	; 0x2e
   82cb4:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82cb6:	4b0e      	ldr	r3, [pc, #56]	; (82cf0 <Cl_alarms_scanforAlarms+0x16d0>)
   82cb8:	4798      	blx	r3
   82cba:	4603      	mov	r3, r0
   82cbc:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82cbe:	79fb      	ldrb	r3, [r7, #7]
   82cc0:	2b00      	cmp	r3, #0
   82cc2:	d017      	beq.n	82cf4 <Cl_alarms_scanforAlarms+0x16d4>
   82cc4:	4b07      	ldr	r3, [pc, #28]	; (82ce4 <Cl_alarms_scanforAlarms+0x16c4>)
   82cc6:	4798      	blx	r3

					break;
   82cc8:	e014      	b.n	82cf4 <Cl_alarms_scanforAlarms+0x16d4>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82cca:	bf00      	nop
   82ccc:	e013      	b.n	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82cce:	bf00      	nop
   82cd0:	e011      	b.n	82cf6 <Cl_alarms_scanforAlarms+0x16d6>
   82cd2:	bf00      	nop
   82cd4:	20072874 	.word	0x20072874
   82cd8:	200715d9 	.word	0x200715d9
   82cdc:	200715d8 	.word	0x200715d8
   82ce0:	0008321d 	.word	0x0008321d
   82ce4:	000893e9 	.word	0x000893e9
   82ce8:	20072e58 	.word	0x20072e58
   82cec:	20072c98 	.word	0x20072c98
   82cf0:	00082e69 	.word	0x00082e69
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);

					break;
   82cf4:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   82cf6:	4b50      	ldr	r3, [pc, #320]	; (82e38 <Cl_alarms_scanforAlarms+0x1818>)
   82cf8:	781b      	ldrb	r3, [r3, #0]
   82cfa:	2b00      	cmp	r3, #0
   82cfc:	f000 8097 	beq.w	82e2e <Cl_alarms_scanforAlarms+0x180e>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   82d00:	4b4e      	ldr	r3, [pc, #312]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d02:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82d06:	2b00      	cmp	r3, #0
   82d08:	d10a      	bne.n	82d20 <Cl_alarms_scanforAlarms+0x1700>
   82d0a:	4b4c      	ldr	r3, [pc, #304]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d0c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82d10:	2b00      	cmp	r3, #0
   82d12:	d105      	bne.n	82d20 <Cl_alarms_scanforAlarms+0x1700>
   82d14:	4b49      	ldr	r3, [pc, #292]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d16:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   82d1a:	2b00      	cmp	r3, #0
   82d1c:	f000 8087 	beq.w	82e2e <Cl_alarms_scanforAlarms+0x180e>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   82d20:	4b47      	ldr	r3, [pc, #284]	; (82e40 <Cl_alarms_scanforAlarms+0x1820>)
   82d22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82d24:	461a      	mov	r2, r3
   82d26:	4b47      	ldr	r3, [pc, #284]	; (82e44 <Cl_alarms_scanforAlarms+0x1824>)
   82d28:	681b      	ldr	r3, [r3, #0]
   82d2a:	429a      	cmp	r2, r3
   82d2c:	d00c      	beq.n	82d48 <Cl_alarms_scanforAlarms+0x1728>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   82d2e:	4b46      	ldr	r3, [pc, #280]	; (82e48 <Cl_alarms_scanforAlarms+0x1828>)
   82d30:	2200      	movs	r2, #0
   82d32:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82d34:	4b45      	ldr	r3, [pc, #276]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82d36:	681b      	ldr	r3, [r3, #0]
   82d38:	3301      	adds	r3, #1
   82d3a:	4a44      	ldr	r2, [pc, #272]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82d3c:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   82d3e:	4b44      	ldr	r3, [pc, #272]	; (82e50 <Cl_alarms_scanforAlarms+0x1830>)
   82d40:	681b      	ldr	r3, [r3, #0]
   82d42:	3301      	adds	r3, #1
   82d44:	4a42      	ldr	r2, [pc, #264]	; (82e50 <Cl_alarms_scanforAlarms+0x1830>)
   82d46:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   82d48:	4b3f      	ldr	r3, [pc, #252]	; (82e48 <Cl_alarms_scanforAlarms+0x1828>)
   82d4a:	681b      	ldr	r3, [r3, #0]
   82d4c:	2b28      	cmp	r3, #40	; 0x28
   82d4e:	d932      	bls.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   82d50:	4b3a      	ldr	r3, [pc, #232]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d52:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82d56:	2b01      	cmp	r3, #1
   82d58:	d02d      	beq.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82d5a:	4b38      	ldr	r3, [pc, #224]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d5c:	2201      	movs	r2, #1
   82d5e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82d62:	4b3c      	ldr	r3, [pc, #240]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d64:	781b      	ldrb	r3, [r3, #0]
   82d66:	4a3b      	ldr	r2, [pc, #236]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d68:	3301      	adds	r3, #1
   82d6a:	00db      	lsls	r3, r3, #3
   82d6c:	4413      	add	r3, r2
   82d6e:	220c      	movs	r2, #12
   82d70:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   82d72:	4b32      	ldr	r3, [pc, #200]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d74:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82d78:	3301      	adds	r3, #1
   82d7a:	b2da      	uxtb	r2, r3
   82d7c:	4b2f      	ldr	r3, [pc, #188]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d7e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82d82:	4b2e      	ldr	r3, [pc, #184]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82d84:	2204      	movs	r2, #4
   82d86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   82d8a:	4b33      	ldr	r3, [pc, #204]	; (82e58 <Cl_alarms_scanforAlarms+0x1838>)
   82d8c:	2201      	movs	r2, #1
   82d8e:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82d90:	4b32      	ldr	r3, [pc, #200]	; (82e5c <Cl_alarms_scanforAlarms+0x183c>)
   82d92:	220c      	movs	r2, #12
   82d94:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82d96:	4b2f      	ldr	r3, [pc, #188]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d98:	781b      	ldrb	r3, [r3, #0]
   82d9a:	461a      	mov	r2, r3
   82d9c:	4b2d      	ldr	r3, [pc, #180]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82d9e:	4413      	add	r3, r2
   82da0:	222d      	movs	r2, #45	; 0x2d
   82da2:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82da4:	4b2e      	ldr	r3, [pc, #184]	; (82e60 <Cl_alarms_scanforAlarms+0x1840>)
   82da6:	4798      	blx	r3
   82da8:	4603      	mov	r3, r0
   82daa:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82dac:	79fb      	ldrb	r3, [r7, #7]
   82dae:	2b00      	cmp	r3, #0
   82db0:	d001      	beq.n	82db6 <Cl_alarms_scanforAlarms+0x1796>
   82db2:	4b2c      	ldr	r3, [pc, #176]	; (82e64 <Cl_alarms_scanforAlarms+0x1844>)
   82db4:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   82db6:	4b25      	ldr	r3, [pc, #148]	; (82e4c <Cl_alarms_scanforAlarms+0x182c>)
   82db8:	681b      	ldr	r3, [r3, #0]
   82dba:	2b02      	cmp	r3, #2
   82dbc:	d932      	bls.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   82dbe:	4b1f      	ldr	r3, [pc, #124]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dc0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82dc4:	2b01      	cmp	r3, #1
   82dc6:	d02d      	beq.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82dc8:	4b1c      	ldr	r3, [pc, #112]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dca:	2201      	movs	r2, #1
   82dcc:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   82dd0:	4b20      	ldr	r3, [pc, #128]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82dd2:	781b      	ldrb	r3, [r3, #0]
   82dd4:	4a1f      	ldr	r2, [pc, #124]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82dd6:	3301      	adds	r3, #1
   82dd8:	00db      	lsls	r3, r3, #3
   82dda:	4413      	add	r3, r2
   82ddc:	220e      	movs	r2, #14
   82dde:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82de0:	4b16      	ldr	r3, [pc, #88]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82de2:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   82de6:	3301      	adds	r3, #1
   82de8:	b2da      	uxtb	r2, r3
   82dea:	4b14      	ldr	r3, [pc, #80]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82dec:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82df0:	4b12      	ldr	r3, [pc, #72]	; (82e3c <Cl_alarms_scanforAlarms+0x181c>)
   82df2:	2204      	movs	r2, #4
   82df4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   82df8:	4b17      	ldr	r3, [pc, #92]	; (82e58 <Cl_alarms_scanforAlarms+0x1838>)
   82dfa:	2201      	movs	r2, #1
   82dfc:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   82dfe:	4b17      	ldr	r3, [pc, #92]	; (82e5c <Cl_alarms_scanforAlarms+0x183c>)
   82e00:	220e      	movs	r2, #14
   82e02:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82e04:	4b13      	ldr	r3, [pc, #76]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82e06:	781b      	ldrb	r3, [r3, #0]
   82e08:	461a      	mov	r2, r3
   82e0a:	4b12      	ldr	r3, [pc, #72]	; (82e54 <Cl_alarms_scanforAlarms+0x1834>)
   82e0c:	4413      	add	r3, r2
   82e0e:	222d      	movs	r2, #45	; 0x2d
   82e10:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82e12:	4b13      	ldr	r3, [pc, #76]	; (82e60 <Cl_alarms_scanforAlarms+0x1840>)
   82e14:	4798      	blx	r3
   82e16:	4603      	mov	r3, r0
   82e18:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82e1a:	79fb      	ldrb	r3, [r7, #7]
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	d001      	beq.n	82e24 <Cl_alarms_scanforAlarms+0x1804>
   82e20:	4b10      	ldr	r3, [pc, #64]	; (82e64 <Cl_alarms_scanforAlarms+0x1844>)
   82e22:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82e24:	4b06      	ldr	r3, [pc, #24]	; (82e40 <Cl_alarms_scanforAlarms+0x1820>)
   82e26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82e28:	461a      	mov	r2, r3
   82e2a:	4b06      	ldr	r3, [pc, #24]	; (82e44 <Cl_alarms_scanforAlarms+0x1824>)
   82e2c:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82e2e:	2300      	movs	r3, #0
}
   82e30:	4618      	mov	r0, r3
   82e32:	3708      	adds	r7, #8
   82e34:	46bd      	mov	sp, r7
   82e36:	bd80      	pop	{r7, pc}
   82e38:	200725fb 	.word	0x200725fb
   82e3c:	20072874 	.word	0x20072874
   82e40:	20072dbc 	.word	0x20072dbc
   82e44:	200715c8 	.word	0x200715c8
   82e48:	200715cc 	.word	0x200715cc
   82e4c:	200715d0 	.word	0x200715d0
   82e50:	200715d4 	.word	0x200715d4
   82e54:	20072e58 	.word	0x20072e58
   82e58:	200715d9 	.word	0x200715d9
   82e5c:	20072c98 	.word	0x20072c98
   82e60:	00082e69 	.word	0x00082e69
   82e64:	000893e9 	.word	0x000893e9

00082e68 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82e68:	b480      	push	{r7}
   82e6a:	af00      	add	r7, sp, #0
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX ))
   82e6c:	4b0a      	ldr	r3, [pc, #40]	; (82e98 <Cl_UpdateMacAlarmEventTable+0x30>)
   82e6e:	781b      	ldrb	r3, [r3, #0]
   82e70:	2b00      	cmp	r3, #0
   82e72:	d00c      	beq.n	82e8e <Cl_UpdateMacAlarmEventTable+0x26>
   82e74:	4b09      	ldr	r3, [pc, #36]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e76:	781b      	ldrb	r3, [r3, #0]
   82e78:	2b0a      	cmp	r3, #10
   82e7a:	d808      	bhi.n	82e8e <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   82e7c:	4b07      	ldr	r3, [pc, #28]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e7e:	2201      	movs	r2, #1
   82e80:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   82e82:	4b06      	ldr	r3, [pc, #24]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e84:	781b      	ldrb	r3, [r3, #0]
   82e86:	3301      	adds	r3, #1
   82e88:	b2da      	uxtb	r2, r3
   82e8a:	4b04      	ldr	r3, [pc, #16]	; (82e9c <Cl_UpdateMacAlarmEventTable+0x34>)
   82e8c:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   82e8e:	2300      	movs	r3, #0
}
   82e90:	4618      	mov	r0, r3
   82e92:	46bd      	mov	sp, r7
   82e94:	bc80      	pop	{r7}
   82e96:	4770      	bx	lr
   82e98:	200715d9 	.word	0x200715d9
   82e9c:	20072e58 	.word	0x20072e58

00082ea0 <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   82ea0:	b480      	push	{r7}
   82ea2:	b085      	sub	sp, #20
   82ea4:	af00      	add	r7, sp, #0
   82ea6:	60ba      	str	r2, [r7, #8]
   82ea8:	607b      	str	r3, [r7, #4]
   82eaa:	4603      	mov	r3, r0
   82eac:	73fb      	strb	r3, [r7, #15]
   82eae:	460b      	mov	r3, r1
   82eb0:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   82eb2:	7bfb      	ldrb	r3, [r7, #15]
   82eb4:	4a10      	ldr	r2, [pc, #64]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82eb6:	011b      	lsls	r3, r3, #4
   82eb8:	4413      	add	r3, r2
   82eba:	3301      	adds	r3, #1
   82ebc:	7bba      	ldrb	r2, [r7, #14]
   82ebe:	701a      	strb	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   82ec0:	7bfb      	ldrb	r3, [r7, #15]
   82ec2:	4a0d      	ldr	r2, [pc, #52]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ec4:	011b      	lsls	r3, r3, #4
   82ec6:	4413      	add	r3, r2
   82ec8:	3308      	adds	r3, #8
   82eca:	687a      	ldr	r2, [r7, #4]
   82ecc:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   82ece:	7bfb      	ldrb	r3, [r7, #15]
   82ed0:	4a09      	ldr	r2, [pc, #36]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ed2:	011b      	lsls	r3, r3, #4
   82ed4:	4413      	add	r3, r2
   82ed6:	3304      	adds	r3, #4
   82ed8:	68ba      	ldr	r2, [r7, #8]
   82eda:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   82edc:	7bfb      	ldrb	r3, [r7, #15]
   82ede:	4a06      	ldr	r2, [pc, #24]	; (82ef8 <Cl_AlarmConfigureAlarmType+0x58>)
   82ee0:	011b      	lsls	r3, r3, #4
   82ee2:	4413      	add	r3, r2
   82ee4:	330c      	adds	r3, #12
   82ee6:	7e3a      	ldrb	r2, [r7, #24]
   82ee8:	701a      	strb	r2, [r3, #0]

return CL_OK;
   82eea:	2300      	movs	r3, #0
		
}
   82eec:	4618      	mov	r0, r3
   82eee:	3714      	adds	r7, #20
   82ef0:	46bd      	mov	sp, r7
   82ef2:	bc80      	pop	{r7}
   82ef4:	4770      	bx	lr
   82ef6:	bf00      	nop
   82ef8:	20072874 	.word	0x20072874

00082efc <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   82efc:	b580      	push	{r7, lr}
   82efe:	b084      	sub	sp, #16
   82f00:	af00      	add	r7, sp, #0
   82f02:	4603      	mov	r3, r0
   82f04:	460a      	mov	r2, r1
   82f06:	71fb      	strb	r3, [r7, #7]
   82f08:	4613      	mov	r3, r2
   82f0a:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82f0c:	2300      	movs	r3, #0
   82f0e:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82f10:	79fb      	ldrb	r3, [r7, #7]
   82f12:	2b00      	cmp	r3, #0
   82f14:	d05f      	beq.n	82fd6 <Cl_AlarmActivateAlarms+0xda>
   82f16:	79fb      	ldrb	r3, [r7, #7]
   82f18:	2b41      	cmp	r3, #65	; 0x41
   82f1a:	d85c      	bhi.n	82fd6 <Cl_AlarmActivateAlarms+0xda>
	{

	if ((cl_alarm_id == HOLDER1STATUS_CLOSED) ||(cl_alarm_id == HOLDER2STATUS_CLOSED) || (cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82f1c:	79fb      	ldrb	r3, [r7, #7]
   82f1e:	2b05      	cmp	r3, #5
   82f20:	d00b      	beq.n	82f3a <Cl_AlarmActivateAlarms+0x3e>
   82f22:	79fb      	ldrb	r3, [r7, #7]
   82f24:	2b06      	cmp	r3, #6
   82f26:	d008      	beq.n	82f3a <Cl_AlarmActivateAlarms+0x3e>
   82f28:	79fb      	ldrb	r3, [r7, #7]
   82f2a:	2b3d      	cmp	r3, #61	; 0x3d
   82f2c:	d005      	beq.n	82f3a <Cl_AlarmActivateAlarms+0x3e>
   82f2e:	79fb      	ldrb	r3, [r7, #7]
   82f30:	2b3e      	cmp	r3, #62	; 0x3e
   82f32:	d002      	beq.n	82f3a <Cl_AlarmActivateAlarms+0x3e>
   82f34:	79fb      	ldrb	r3, [r7, #7]
   82f36:	2b3c      	cmp	r3, #60	; 0x3c
   82f38:	d114      	bne.n	82f64 <Cl_AlarmActivateAlarms+0x68>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82f3a:	79fb      	ldrb	r3, [r7, #7]
   82f3c:	4a2c      	ldr	r2, [pc, #176]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f3e:	011b      	lsls	r3, r3, #4
   82f40:	4413      	add	r3, r2
   82f42:	330e      	adds	r3, #14
   82f44:	2201      	movs	r2, #1
   82f46:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82f48:	79fb      	ldrb	r3, [r7, #7]
   82f4a:	4a29      	ldr	r2, [pc, #164]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f4c:	011b      	lsls	r3, r3, #4
   82f4e:	4413      	add	r3, r2
   82f50:	3302      	adds	r3, #2
   82f52:	2202      	movs	r2, #2
   82f54:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82f56:	79fb      	ldrb	r3, [r7, #7]
   82f58:	4a25      	ldr	r2, [pc, #148]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f5a:	011b      	lsls	r3, r3, #4
   82f5c:	4413      	add	r3, r2
   82f5e:	330d      	adds	r3, #13
   82f60:	2200      	movs	r2, #0
   82f62:	701a      	strb	r2, [r3, #0]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82f64:	4b23      	ldr	r3, [pc, #140]	; (82ff4 <Cl_AlarmActivateAlarms+0xf8>)
   82f66:	781b      	ldrb	r3, [r3, #0]
   82f68:	2b00      	cmp	r3, #0
   82f6a:	d036      	beq.n	82fda <Cl_AlarmActivateAlarms+0xde>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82f6c:	79fb      	ldrb	r3, [r7, #7]
   82f6e:	4a20      	ldr	r2, [pc, #128]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f70:	011b      	lsls	r3, r3, #4
   82f72:	4413      	add	r3, r2
   82f74:	79fa      	ldrb	r2, [r7, #7]
   82f76:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82f78:	79bb      	ldrb	r3, [r7, #6]
   82f7a:	2b00      	cmp	r3, #0
   82f7c:	d015      	beq.n	82faa <Cl_AlarmActivateAlarms+0xae>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82f7e:	79fb      	ldrb	r3, [r7, #7]
   82f80:	4a1b      	ldr	r2, [pc, #108]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f82:	011b      	lsls	r3, r3, #4
   82f84:	4413      	add	r3, r2
   82f86:	330e      	adds	r3, #14
   82f88:	2201      	movs	r2, #1
   82f8a:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82f8c:	79fb      	ldrb	r3, [r7, #7]
   82f8e:	4a18      	ldr	r2, [pc, #96]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f90:	011b      	lsls	r3, r3, #4
   82f92:	4413      	add	r3, r2
   82f94:	3302      	adds	r3, #2
   82f96:	2202      	movs	r2, #2
   82f98:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82f9a:	79fb      	ldrb	r3, [r7, #7]
   82f9c:	4a14      	ldr	r2, [pc, #80]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82f9e:	011b      	lsls	r3, r3, #4
   82fa0:	4413      	add	r3, r2
   82fa2:	330d      	adds	r3, #13
   82fa4:	2200      	movs	r2, #0
   82fa6:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82fa8:	e017      	b.n	82fda <Cl_AlarmActivateAlarms+0xde>
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82faa:	79fb      	ldrb	r3, [r7, #7]
   82fac:	4a10      	ldr	r2, [pc, #64]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82fae:	011b      	lsls	r3, r3, #4
   82fb0:	4413      	add	r3, r2
   82fb2:	330e      	adds	r3, #14
   82fb4:	2200      	movs	r2, #0
   82fb6:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82fb8:	79fb      	ldrb	r3, [r7, #7]
   82fba:	4a0d      	ldr	r2, [pc, #52]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82fbc:	011b      	lsls	r3, r3, #4
   82fbe:	4413      	add	r3, r2
   82fc0:	3302      	adds	r3, #2
   82fc2:	2204      	movs	r2, #4
   82fc4:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82fc6:	79fb      	ldrb	r3, [r7, #7]
   82fc8:	4a09      	ldr	r2, [pc, #36]	; (82ff0 <Cl_AlarmActivateAlarms+0xf4>)
   82fca:	011b      	lsls	r3, r3, #4
   82fcc:	4413      	add	r3, r2
   82fce:	330d      	adds	r3, #13
   82fd0:	2200      	movs	r2, #0
   82fd2:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82fd4:	e001      	b.n	82fda <Cl_AlarmActivateAlarms+0xde>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   82fd6:	2304      	movs	r3, #4
   82fd8:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   82fda:	7bfb      	ldrb	r3, [r7, #15]
   82fdc:	2b00      	cmp	r3, #0
   82fde:	d001      	beq.n	82fe4 <Cl_AlarmActivateAlarms+0xe8>
   82fe0:	4b05      	ldr	r3, [pc, #20]	; (82ff8 <Cl_AlarmActivateAlarms+0xfc>)
   82fe2:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   82fe4:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82fe6:	4618      	mov	r0, r3
   82fe8:	3710      	adds	r7, #16
   82fea:	46bd      	mov	sp, r7
   82fec:	bd80      	pop	{r7, pc}
   82fee:	bf00      	nop
   82ff0:	20072874 	.word	0x20072874
   82ff4:	200709b0 	.word	0x200709b0
   82ff8:	000893e9 	.word	0x000893e9

00082ffc <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82ffc:	b480      	push	{r7}
   82ffe:	b085      	sub	sp, #20
   83000:	af00      	add	r7, sp, #0
   83002:	4603      	mov	r3, r0
   83004:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   83006:	2300      	movs	r3, #0
   83008:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   8300a:	79fb      	ldrb	r3, [r7, #7]
   8300c:	2b00      	cmp	r3, #0
   8300e:	d00c      	beq.n	8302a <Cl_AlarmResetAlarm+0x2e>
   83010:	79fb      	ldrb	r3, [r7, #7]
   83012:	2b41      	cmp	r3, #65	; 0x41
   83014:	d809      	bhi.n	8302a <Cl_AlarmResetAlarm+0x2e>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   83016:	79fb      	ldrb	r3, [r7, #7]
   83018:	4a08      	ldr	r2, [pc, #32]	; (8303c <Cl_AlarmResetAlarm+0x40>)
   8301a:	011b      	lsls	r3, r3, #4
   8301c:	4413      	add	r3, r2
   8301e:	3302      	adds	r3, #2
   83020:	2202      	movs	r2, #2
   83022:	701a      	strb	r2, [r3, #0]
						cl_AlarmRetCode = CL_OK;
   83024:	2300      	movs	r3, #0
   83026:	73fb      	strb	r3, [r7, #15]
   83028:	e001      	b.n	8302e <Cl_AlarmResetAlarm+0x32>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   8302a:	2304      	movs	r3, #4
   8302c:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   8302e:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   83030:	4618      	mov	r0, r3
   83032:	3714      	adds	r7, #20
   83034:	46bd      	mov	sp, r7
   83036:	bc80      	pop	{r7}
   83038:	4770      	bx	lr
   8303a:	bf00      	nop
   8303c:	20072874 	.word	0x20072874

00083040 <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   83040:	b580      	push	{r7, lr}
   83042:	b084      	sub	sp, #16
   83044:	af00      	add	r7, sp, #0
   83046:	4603      	mov	r3, r0
   83048:	6039      	str	r1, [r7, #0]
   8304a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   8304c:	2300      	movs	r3, #0
   8304e:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   83050:	79fb      	ldrb	r3, [r7, #7]
   83052:	2b00      	cmp	r3, #0
   83054:	d01c      	beq.n	83090 <Cl_Alarm_GetAlarmStatus+0x50>
   83056:	79fb      	ldrb	r3, [r7, #7]
   83058:	2b41      	cmp	r3, #65	; 0x41
   8305a:	d819      	bhi.n	83090 <Cl_Alarm_GetAlarmStatus+0x50>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   8305c:	79fb      	ldrb	r3, [r7, #7]
   8305e:	4a12      	ldr	r2, [pc, #72]	; (830a8 <Cl_Alarm_GetAlarmStatus+0x68>)
   83060:	011b      	lsls	r3, r3, #4
   83062:	4413      	add	r3, r2
   83064:	3302      	adds	r3, #2
   83066:	781b      	ldrb	r3, [r3, #0]
   83068:	2b01      	cmp	r3, #1
   8306a:	d007      	beq.n	8307c <Cl_Alarm_GetAlarmStatus+0x3c>
   8306c:	79fb      	ldrb	r3, [r7, #7]
   8306e:	4a0e      	ldr	r2, [pc, #56]	; (830a8 <Cl_Alarm_GetAlarmStatus+0x68>)
   83070:	011b      	lsls	r3, r3, #4
   83072:	4413      	add	r3, r2
   83074:	3302      	adds	r3, #2
   83076:	781b      	ldrb	r3, [r3, #0]
   83078:	2b03      	cmp	r3, #3
   8307a:	d103      	bne.n	83084 <Cl_Alarm_GetAlarmStatus+0x44>
		 {
			 *cl_status = true;
   8307c:	683b      	ldr	r3, [r7, #0]
   8307e:	2201      	movs	r2, #1
   83080:	701a      	strb	r2, [r3, #0]
   83082:	e002      	b.n	8308a <Cl_Alarm_GetAlarmStatus+0x4a>
		 }
		 else
		 {
			 *cl_status = false;
   83084:	683b      	ldr	r3, [r7, #0]
   83086:	2200      	movs	r2, #0
   83088:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   8308a:	2300      	movs	r3, #0
   8308c:	73fb      	strb	r3, [r7, #15]
   8308e:	e001      	b.n	83094 <Cl_Alarm_GetAlarmStatus+0x54>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   83090:	2304      	movs	r3, #4
   83092:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   83094:	7bfb      	ldrb	r3, [r7, #15]
   83096:	2b00      	cmp	r3, #0
   83098:	d001      	beq.n	8309e <Cl_Alarm_GetAlarmStatus+0x5e>
   8309a:	4b04      	ldr	r3, [pc, #16]	; (830ac <Cl_Alarm_GetAlarmStatus+0x6c>)
   8309c:	4798      	blx	r3
	return cl_alarmRetCode;
   8309e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   830a0:	4618      	mov	r0, r3
   830a2:	3710      	adds	r7, #16
   830a4:	46bd      	mov	sp, r7
   830a6:	bd80      	pop	{r7, pc}
   830a8:	20072874 	.word	0x20072874
   830ac:	000893e9 	.word	0x000893e9

000830b0 <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   830b0:	b580      	push	{r7, lr}
   830b2:	b084      	sub	sp, #16
   830b4:	af00      	add	r7, sp, #0
   830b6:	4603      	mov	r3, r0
   830b8:	460a      	mov	r2, r1
   830ba:	71fb      	strb	r3, [r7, #7]
   830bc:	4613      	mov	r3, r2
   830be:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   830c0:	2300      	movs	r3, #0
   830c2:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   830c4:	79fb      	ldrb	r3, [r7, #7]
   830c6:	2b00      	cmp	r3, #0
   830c8:	d063      	beq.n	83192 <Cl_Alarm_TriggerAlarm+0xe2>
   830ca:	79fb      	ldrb	r3, [r7, #7]
   830cc:	2b41      	cmp	r3, #65	; 0x41
   830ce:	d860      	bhi.n	83192 <Cl_Alarm_TriggerAlarm+0xe2>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   830d0:	79fb      	ldrb	r3, [r7, #7]
   830d2:	4a36      	ldr	r2, [pc, #216]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   830d4:	011b      	lsls	r3, r3, #4
   830d6:	4413      	add	r3, r2
   830d8:	330e      	adds	r3, #14
   830da:	781b      	ldrb	r3, [r3, #0]
   830dc:	2b00      	cmp	r3, #0
   830de:	d055      	beq.n	8318c <Cl_Alarm_TriggerAlarm+0xdc>
	{
			if(cl_status)
   830e0:	79bb      	ldrb	r3, [r7, #6]
   830e2:	2b00      	cmp	r3, #0
   830e4:	d039      	beq.n	8315a <Cl_Alarm_TriggerAlarm+0xaa>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   830e6:	79fb      	ldrb	r3, [r7, #7]
   830e8:	4a30      	ldr	r2, [pc, #192]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   830ea:	011b      	lsls	r3, r3, #4
   830ec:	4413      	add	r3, r2
   830ee:	3302      	adds	r3, #2
   830f0:	2201      	movs	r2, #1
   830f2:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=cl_alarm_id;
   830f4:	4b2e      	ldr	r3, [pc, #184]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   830f6:	781b      	ldrb	r3, [r3, #0]
   830f8:	79fa      	ldrb	r2, [r7, #7]
   830fa:	b291      	uxth	r1, r2
   830fc:	4a2c      	ldr	r2, [pc, #176]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   830fe:	3301      	adds	r3, #1
   83100:	00db      	lsls	r3, r3, #3
   83102:	4413      	add	r3, r2
   83104:	460a      	mov	r2, r1
   83106:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   83108:	79fb      	ldrb	r3, [r7, #7]
   8310a:	4928      	ldr	r1, [pc, #160]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   8310c:	011a      	lsls	r2, r3, #4
   8310e:	440a      	add	r2, r1
   83110:	320d      	adds	r2, #13
   83112:	7812      	ldrb	r2, [r2, #0]
   83114:	3201      	adds	r2, #1
   83116:	b2d1      	uxtb	r1, r2
   83118:	4a24      	ldr	r2, [pc, #144]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   8311a:	011b      	lsls	r3, r3, #4
   8311c:	4413      	add	r3, r2
   8311e:	330d      	adds	r3, #13
   83120:	460a      	mov	r2, r1
   83122:	701a      	strb	r2, [r3, #0]
				cl_alarm_triggered = true;
   83124:	4b23      	ldr	r3, [pc, #140]	; (831b4 <Cl_Alarm_TriggerAlarm+0x104>)
   83126:	2201      	movs	r2, #1
   83128:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   8312a:	4a23      	ldr	r2, [pc, #140]	; (831b8 <Cl_Alarm_TriggerAlarm+0x108>)
   8312c:	79fb      	ldrb	r3, [r7, #7]
   8312e:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   83130:	79fb      	ldrb	r3, [r7, #7]
   83132:	2b3c      	cmp	r3, #60	; 0x3c
   83134:	d107      	bne.n	83146 <Cl_Alarm_TriggerAlarm+0x96>
				{
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   83136:	4b1e      	ldr	r3, [pc, #120]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   83138:	781b      	ldrb	r3, [r3, #0]
   8313a:	461a      	mov	r2, r3
   8313c:	4b1c      	ldr	r3, [pc, #112]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   8313e:	4413      	add	r3, r2
   83140:	222d      	movs	r2, #45	; 0x2d
   83142:	709a      	strb	r2, [r3, #2]
   83144:	e006      	b.n	83154 <Cl_Alarm_TriggerAlarm+0xa4>
				}
				else
				{
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   83146:	4b1a      	ldr	r3, [pc, #104]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   83148:	781b      	ldrb	r3, [r3, #0]
   8314a:	461a      	mov	r2, r3
   8314c:	4b18      	ldr	r3, [pc, #96]	; (831b0 <Cl_Alarm_TriggerAlarm+0x100>)
   8314e:	4413      	add	r3, r2
   83150:	222e      	movs	r2, #46	; 0x2e
   83152:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   83154:	4b19      	ldr	r3, [pc, #100]	; (831bc <Cl_Alarm_TriggerAlarm+0x10c>)
   83156:	4798      	blx	r3
   83158:	e018      	b.n	8318c <Cl_Alarm_TriggerAlarm+0xdc>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   8315a:	79fb      	ldrb	r3, [r7, #7]
   8315c:	4a13      	ldr	r2, [pc, #76]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   8315e:	011b      	lsls	r3, r3, #4
   83160:	4413      	add	r3, r2
   83162:	3302      	adds	r3, #2
   83164:	781b      	ldrb	r3, [r3, #0]
   83166:	2b01      	cmp	r3, #1
   83168:	d110      	bne.n	8318c <Cl_Alarm_TriggerAlarm+0xdc>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   8316a:	79fb      	ldrb	r3, [r7, #7]
   8316c:	4a0f      	ldr	r2, [pc, #60]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   8316e:	011b      	lsls	r3, r3, #4
   83170:	4413      	add	r3, r2
   83172:	3302      	adds	r3, #2
   83174:	2204      	movs	r2, #4
   83176:	701a      	strb	r2, [r3, #0]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   83178:	79fb      	ldrb	r3, [r7, #7]
   8317a:	4a0c      	ldr	r2, [pc, #48]	; (831ac <Cl_Alarm_TriggerAlarm+0xfc>)
   8317c:	011b      	lsls	r3, r3, #4
   8317e:	4413      	add	r3, r2
   83180:	330d      	adds	r3, #13
   83182:	2200      	movs	r2, #0
   83184:	701a      	strb	r2, [r3, #0]
					cl_alarm_triggered = false;
   83186:	4b0b      	ldr	r3, [pc, #44]	; (831b4 <Cl_Alarm_TriggerAlarm+0x104>)
   83188:	2200      	movs	r2, #0
   8318a:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   8318c:	2300      	movs	r3, #0
   8318e:	73fb      	strb	r3, [r7, #15]
   83190:	e001      	b.n	83196 <Cl_Alarm_TriggerAlarm+0xe6>
}else
{
	cl_alarmRetCode = CL_ERROR;
   83192:	2304      	movs	r3, #4
   83194:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   83196:	7bfb      	ldrb	r3, [r7, #15]
   83198:	2b00      	cmp	r3, #0
   8319a:	d001      	beq.n	831a0 <Cl_Alarm_TriggerAlarm+0xf0>
   8319c:	4b08      	ldr	r3, [pc, #32]	; (831c0 <Cl_Alarm_TriggerAlarm+0x110>)
   8319e:	4798      	blx	r3
return CL_OK;
   831a0:	2300      	movs	r3, #0

}
   831a2:	4618      	mov	r0, r3
   831a4:	3710      	adds	r7, #16
   831a6:	46bd      	mov	sp, r7
   831a8:	bd80      	pop	{r7, pc}
   831aa:	bf00      	nop
   831ac:	20072874 	.word	0x20072874
   831b0:	20072e58 	.word	0x20072e58
   831b4:	200715d9 	.word	0x200715d9
   831b8:	20072c98 	.word	0x20072c98
   831bc:	00082e69 	.word	0x00082e69
   831c0:	000893e9 	.word	0x000893e9

000831c4 <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   831c4:	b480      	push	{r7}
   831c6:	b083      	sub	sp, #12
   831c8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   831ca:	2300      	movs	r3, #0
   831cc:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   831ce:	4b0f      	ldr	r3, [pc, #60]	; (8320c <Cl_Alarm_timmer_50millisec+0x48>)
   831d0:	881b      	ldrh	r3, [r3, #0]
   831d2:	3301      	adds	r3, #1
   831d4:	b29a      	uxth	r2, r3
   831d6:	4b0d      	ldr	r3, [pc, #52]	; (8320c <Cl_Alarm_timmer_50millisec+0x48>)
   831d8:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   831da:	4b0d      	ldr	r3, [pc, #52]	; (83210 <Cl_Alarm_timmer_50millisec+0x4c>)
   831dc:	2200      	movs	r2, #0
   831de:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   831e0:	4b0c      	ldr	r3, [pc, #48]	; (83214 <Cl_Alarm_timmer_50millisec+0x50>)
   831e2:	681b      	ldr	r3, [r3, #0]
   831e4:	3301      	adds	r3, #1
   831e6:	4a0b      	ldr	r2, [pc, #44]	; (83214 <Cl_Alarm_timmer_50millisec+0x50>)
   831e8:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   831ea:	4b08      	ldr	r3, [pc, #32]	; (8320c <Cl_Alarm_timmer_50millisec+0x48>)
   831ec:	881b      	ldrh	r3, [r3, #0]
   831ee:	2b14      	cmp	r3, #20
   831f0:	d905      	bls.n	831fe <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   831f2:	4b09      	ldr	r3, [pc, #36]	; (83218 <Cl_Alarm_timmer_50millisec+0x54>)
   831f4:	2200      	movs	r2, #0
   831f6:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   831f8:	4b04      	ldr	r3, [pc, #16]	; (8320c <Cl_Alarm_timmer_50millisec+0x48>)
   831fa:	2200      	movs	r2, #0
   831fc:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   831fe:	2300      	movs	r3, #0
	
}
   83200:	4618      	mov	r0, r3
   83202:	370c      	adds	r7, #12
   83204:	46bd      	mov	sp, r7
   83206:	bc80      	pop	{r7}
   83208:	4770      	bx	lr
   8320a:	bf00      	nop
   8320c:	20071600 	.word	0x20071600
   83210:	200715d0 	.word	0x200715d0
   83214:	200715cc 	.word	0x200715cc
   83218:	200715d4 	.word	0x200715d4

0008321c <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   8321c:	b480      	push	{r7}
   8321e:	b083      	sub	sp, #12
   83220:	af00      	add	r7, sp, #0
   83222:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   83224:	4b3b      	ldr	r3, [pc, #236]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   83226:	881b      	ldrh	r3, [r3, #0]
   83228:	461a      	mov	r2, r3
   8322a:	4613      	mov	r3, r2
   8322c:	00db      	lsls	r3, r3, #3
   8322e:	4413      	add	r3, r2
   83230:	4a39      	ldr	r2, [pc, #228]	; (83318 <cl_get_dac_conductivity_info+0xfc>)
   83232:	8e52      	ldrh	r2, [r2, #50]	; 0x32
   83234:	4413      	add	r3, r2
   83236:	4a39      	ldr	r2, [pc, #228]	; (8331c <cl_get_dac_conductivity_info+0x100>)
   83238:	fb82 1203 	smull	r1, r2, r2, r3
   8323c:	1092      	asrs	r2, r2, #2
   8323e:	17db      	asrs	r3, r3, #31
   83240:	1ad3      	subs	r3, r2, r3
   83242:	b29a      	uxth	r2, r3
   83244:	4b33      	ldr	r3, [pc, #204]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   83246:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   83248:	4b35      	ldr	r3, [pc, #212]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   8324a:	781b      	ldrb	r3, [r3, #0]
   8324c:	2b03      	cmp	r3, #3
   8324e:	d85b      	bhi.n	83308 <cl_get_dac_conductivity_info+0xec>
   83250:	a201      	add	r2, pc, #4	; (adr r2, 83258 <cl_get_dac_conductivity_info+0x3c>)
   83252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83256:	bf00      	nop
   83258:	00083269 	.word	0x00083269
   8325c:	0008329f 	.word	0x0008329f
   83260:	00083269 	.word	0x00083269
   83264:	000832cb 	.word	0x000832cb
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   83268:	4b2a      	ldr	r3, [pc, #168]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   8326a:	881b      	ldrh	r3, [r3, #0]
   8326c:	2b32      	cmp	r3, #50	; 0x32
   8326e:	d90a      	bls.n	83286 <cl_get_dac_conductivity_info+0x6a>
   83270:	4b28      	ldr	r3, [pc, #160]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   83272:	881b      	ldrh	r3, [r3, #0]
   83274:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83278:	d205      	bcs.n	83286 <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   8327a:	687b      	ldr	r3, [r7, #4]
   8327c:	220a      	movs	r2, #10
   8327e:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   83280:	4b27      	ldr	r3, [pc, #156]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   83282:	2201      	movs	r2, #1
   83284:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   83286:	4b23      	ldr	r3, [pc, #140]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   83288:	881b      	ldrh	r3, [r3, #0]
   8328a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8328e:	d936      	bls.n	832fe <cl_get_dac_conductivity_info+0xe2>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   83290:	687b      	ldr	r3, [r7, #4]
   83292:	220b      	movs	r2, #11
   83294:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   83296:	4b22      	ldr	r3, [pc, #136]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   83298:	2203      	movs	r2, #3
   8329a:	701a      	strb	r2, [r3, #0]
		}
		break;
   8329c:	e02f      	b.n	832fe <cl_get_dac_conductivity_info+0xe2>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   8329e:	4b1d      	ldr	r3, [pc, #116]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   832a0:	881b      	ldrh	r3, [r3, #0]
   832a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832a6:	d905      	bls.n	832b4 <cl_get_dac_conductivity_info+0x98>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   832a8:	687b      	ldr	r3, [r7, #4]
   832aa:	220b      	movs	r2, #11
   832ac:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   832ae:	4b1c      	ldr	r3, [pc, #112]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   832b0:	2203      	movs	r2, #3
   832b2:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   832b4:	4b17      	ldr	r3, [pc, #92]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   832b6:	881b      	ldrh	r3, [r3, #0]
   832b8:	2b31      	cmp	r3, #49	; 0x31
   832ba:	d822      	bhi.n	83302 <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832bc:	687b      	ldr	r3, [r7, #4]
   832be:	2209      	movs	r2, #9
   832c0:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   832c2:	4b17      	ldr	r3, [pc, #92]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   832c4:	2202      	movs	r2, #2
   832c6:	701a      	strb	r2, [r3, #0]
				}
		break;
   832c8:	e01b      	b.n	83302 <cl_get_dac_conductivity_info+0xe6>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   832ca:	4b12      	ldr	r3, [pc, #72]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   832cc:	881b      	ldrh	r3, [r3, #0]
   832ce:	2b32      	cmp	r3, #50	; 0x32
   832d0:	d90a      	bls.n	832e8 <cl_get_dac_conductivity_info+0xcc>
   832d2:	4b10      	ldr	r3, [pc, #64]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   832d4:	881b      	ldrh	r3, [r3, #0]
   832d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832da:	d205      	bcs.n	832e8 <cl_get_dac_conductivity_info+0xcc>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   832dc:	687b      	ldr	r3, [r7, #4]
   832de:	220a      	movs	r2, #10
   832e0:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   832e2:	4b0f      	ldr	r3, [pc, #60]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   832e4:	2201      	movs	r2, #1
   832e6:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   832e8:	4b0a      	ldr	r3, [pc, #40]	; (83314 <cl_get_dac_conductivity_info+0xf8>)
   832ea:	881b      	ldrh	r3, [r3, #0]
   832ec:	2b31      	cmp	r3, #49	; 0x31
   832ee:	d80a      	bhi.n	83306 <cl_get_dac_conductivity_info+0xea>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832f0:	687b      	ldr	r3, [r7, #4]
   832f2:	2209      	movs	r2, #9
   832f4:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   832f6:	4b0a      	ldr	r3, [pc, #40]	; (83320 <cl_get_dac_conductivity_info+0x104>)
   832f8:	2202      	movs	r2, #2
   832fa:	701a      	strb	r2, [r3, #0]
				}
		break;
   832fc:	e003      	b.n	83306 <cl_get_dac_conductivity_info+0xea>
		if(cl_ten_pt_dac_cond_avg > 2000)
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
		}
		break;
   832fe:	bf00      	nop
   83300:	e002      	b.n	83308 <cl_get_dac_conductivity_info+0xec>
				if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
				}
		break;
   83302:	bf00      	nop
   83304:	e000      	b.n	83308 <cl_get_dac_conductivity_info+0xec>
		if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
				}
		break;
   83306:	bf00      	nop
	}
return CL_OK;
   83308:	2300      	movs	r3, #0
}
   8330a:	4618      	mov	r0, r3
   8330c:	370c      	adds	r7, #12
   8330e:	46bd      	mov	sp, r7
   83310:	bc80      	pop	{r7}
   83312:	4770      	bx	lr
   83314:	20071602 	.word	0x20071602
   83318:	20072dbc 	.word	0x20072dbc
   8331c:	66666667 	.word	0x66666667
   83320:	20071604 	.word	0x20071604

00083324 <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   83324:	b580      	push	{r7, lr}
   83326:	b084      	sub	sp, #16
   83328:	af00      	add	r7, sp, #0
   8332a:	4603      	mov	r3, r0
   8332c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   8332e:	2300      	movs	r3, #0
   83330:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   83332:	79fb      	ldrb	r3, [r7, #7]
   83334:	3b04      	subs	r3, #4
   83336:	2b0a      	cmp	r3, #10
   83338:	d856      	bhi.n	833e8 <Cl_bc_controller+0xc4>
   8333a:	a201      	add	r2, pc, #4	; (adr r2, 83340 <Cl_bc_controller+0x1c>)
   8333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83340:	0008336d 	.word	0x0008336d
   83344:	000833cb 	.word	0x000833cb
   83348:	000833e9 	.word	0x000833e9
   8334c:	000833e9 	.word	0x000833e9
   83350:	000833e9 	.word	0x000833e9
   83354:	000833e9 	.word	0x000833e9
   83358:	000833e9 	.word	0x000833e9
   8335c:	0008339b 	.word	0x0008339b
   83360:	000833e9 	.word	0x000833e9
   83364:	000833d9 	.word	0x000833d9
   83368:	000833e9 	.word	0x000833e9
	{
		case	BC_EVENT_START:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   8336c:	2007      	movs	r0, #7
   8336e:	4b82      	ldr	r3, [pc, #520]	; (83578 <Cl_bc_controller+0x254>)
   83370:	4798      	blx	r3
   83372:	4603      	mov	r3, r0
   83374:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   83376:	f240 414c 	movw	r1, #1100	; 0x44c
   8337a:	2002      	movs	r0, #2
   8337c:	4b7f      	ldr	r3, [pc, #508]	; (8357c <Cl_bc_controller+0x258>)
   8337e:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   83380:	f44f 7161 	mov.w	r1, #900	; 0x384
   83384:	2001      	movs	r0, #1
   83386:	4b7d      	ldr	r3, [pc, #500]	; (8357c <Cl_bc_controller+0x258>)
   83388:	4798      	blx	r3
				bc_laststate = bc_state;
   8338a:	4b7d      	ldr	r3, [pc, #500]	; (83580 <Cl_bc_controller+0x25c>)
   8338c:	781a      	ldrb	r2, [r3, #0]
   8338e:	4b7d      	ldr	r3, [pc, #500]	; (83584 <Cl_bc_controller+0x260>)
   83390:	701a      	strb	r2, [r3, #0]
				bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83392:	4b7b      	ldr	r3, [pc, #492]	; (83580 <Cl_bc_controller+0x25c>)
   83394:	2202      	movs	r2, #2
   83396:	701a      	strb	r2, [r3, #0]
		break;
   83398:	e026      	b.n	833e8 <Cl_bc_controller+0xc4>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   8339a:	4b79      	ldr	r3, [pc, #484]	; (83580 <Cl_bc_controller+0x25c>)
   8339c:	781b      	ldrb	r3, [r3, #0]
   8339e:	2b00      	cmp	r3, #0
   833a0:	d121      	bne.n	833e6 <Cl_bc_controller+0xc2>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833a2:	2007      	movs	r0, #7
   833a4:	4b74      	ldr	r3, [pc, #464]	; (83578 <Cl_bc_controller+0x254>)
   833a6:	4798      	blx	r3
   833a8:	4603      	mov	r3, r0
   833aa:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   833ac:	4b75      	ldr	r3, [pc, #468]	; (83584 <Cl_bc_controller+0x260>)
   833ae:	781b      	ldrb	r3, [r3, #0]
   833b0:	461a      	mov	r2, r3
   833b2:	4b75      	ldr	r3, [pc, #468]	; (83588 <Cl_bc_controller+0x264>)
   833b4:	5c9b      	ldrb	r3, [r3, r2]
   833b6:	4618      	mov	r0, r3
   833b8:	4b6f      	ldr	r3, [pc, #444]	; (83578 <Cl_bc_controller+0x254>)
   833ba:	4798      	blx	r3
   833bc:	4603      	mov	r3, r0
   833be:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   833c0:	4b70      	ldr	r3, [pc, #448]	; (83584 <Cl_bc_controller+0x260>)
   833c2:	781a      	ldrb	r2, [r3, #0]
   833c4:	4b6e      	ldr	r3, [pc, #440]	; (83580 <Cl_bc_controller+0x25c>)
   833c6:	701a      	strb	r2, [r3, #0]
				}
		break;
   833c8:	e00d      	b.n	833e6 <Cl_bc_controller+0xc2>
		case	BC_EVENT_STOP:
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   833ca:	2011      	movs	r0, #17
   833cc:	4b6a      	ldr	r3, [pc, #424]	; (83578 <Cl_bc_controller+0x254>)
   833ce:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   833d0:	4b6b      	ldr	r3, [pc, #428]	; (83580 <Cl_bc_controller+0x25c>)
   833d2:	2200      	movs	r2, #0
   833d4:	701a      	strb	r2, [r3, #0]
			
		break;
   833d6:	e007      	b.n	833e8 <Cl_bc_controller+0xc4>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   833d8:	4b6c      	ldr	r3, [pc, #432]	; (8358c <Cl_bc_controller+0x268>)
   833da:	2200      	movs	r2, #0
   833dc:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   833de:	4b68      	ldr	r3, [pc, #416]	; (83580 <Cl_bc_controller+0x25c>)
   833e0:	2200      	movs	r2, #0
   833e2:	701a      	strb	r2, [r3, #0]
		break;
   833e4:	e000      	b.n	833e8 <Cl_bc_controller+0xc4>
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
				}
		break;
   833e6:	bf00      	nop
		case	BC_EVENT_PAUSE:
		break;
		case	BC_EVENT_RESET:
		break;
	}
	switch (bc_state)
   833e8:	4b65      	ldr	r3, [pc, #404]	; (83580 <Cl_bc_controller+0x25c>)
   833ea:	781b      	ldrb	r3, [r3, #0]
   833ec:	2b15      	cmp	r3, #21
   833ee:	f200 848d 	bhi.w	83d0c <Cl_bc_controller+0x9e8>
   833f2:	a201      	add	r2, pc, #4	; (adr r2, 833f8 <Cl_bc_controller+0xd4>)
   833f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833f8:	00083d0d 	.word	0x00083d0d
   833fc:	00083d0d 	.word	0x00083d0d
   83400:	00083451 	.word	0x00083451
   83404:	0008350b 	.word	0x0008350b
   83408:	0008370d 	.word	0x0008370d
   8340c:	00083741 	.word	0x00083741
   83410:	0008375d 	.word	0x0008375d
   83414:	00083791 	.word	0x00083791
   83418:	000837ad 	.word	0x000837ad
   8341c:	000837d3 	.word	0x000837d3
   83420:	000837ef 	.word	0x000837ef
   83424:	00083885 	.word	0x00083885
   83428:	000838a1 	.word	0x000838a1
   8342c:	00083903 	.word	0x00083903
   83430:	00083a51 	.word	0x00083a51
   83434:	00083ab3 	.word	0x00083ab3
   83438:	00083c85 	.word	0x00083c85
   8343c:	00083d0d 	.word	0x00083d0d
   83440:	00083cc9 	.word	0x00083cc9
   83444:	00083d0d 	.word	0x00083d0d
   83448:	00083d0d 	.word	0x00083d0d
   8344c:	00083d0d 	.word	0x00083d0d
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   83450:	79fb      	ldrb	r3, [r7, #7]
   83452:	3b01      	subs	r3, #1
   83454:	2b07      	cmp	r3, #7
   83456:	d84c      	bhi.n	834f2 <Cl_bc_controller+0x1ce>
   83458:	a201      	add	r2, pc, #4	; (adr r2, 83460 <Cl_bc_controller+0x13c>)
   8345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8345e:	bf00      	nop
   83460:	00083481 	.word	0x00083481
   83464:	00083489 	.word	0x00083489
   83468:	000834f3 	.word	0x000834f3
   8346c:	000834f3 	.word	0x000834f3
   83470:	000834f3 	.word	0x000834f3
   83474:	000834a7 	.word	0x000834a7
   83478:	000834f3 	.word	0x000834f3
   8347c:	000834cd 	.word	0x000834cd
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   83480:	4b43      	ldr	r3, [pc, #268]	; (83590 <Cl_bc_controller+0x26c>)
   83482:	2201      	movs	r2, #1
   83484:	701a      	strb	r2, [r3, #0]
								break;
   83486:	e03e      	b.n	83506 <Cl_bc_controller+0x1e2>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83488:	4b41      	ldr	r3, [pc, #260]	; (83590 <Cl_bc_controller+0x26c>)
   8348a:	781b      	ldrb	r3, [r3, #0]
   8348c:	2b00      	cmp	r3, #0
   8348e:	d033      	beq.n	834f8 <Cl_bc_controller+0x1d4>
								{
									bc_laststate = bc_state;
   83490:	4b3b      	ldr	r3, [pc, #236]	; (83580 <Cl_bc_controller+0x25c>)
   83492:	781a      	ldrb	r2, [r3, #0]
   83494:	4b3b      	ldr	r3, [pc, #236]	; (83584 <Cl_bc_controller+0x260>)
   83496:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   83498:	4b39      	ldr	r3, [pc, #228]	; (83580 <Cl_bc_controller+0x25c>)
   8349a:	2203      	movs	r2, #3
   8349c:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8349e:	4b3c      	ldr	r3, [pc, #240]	; (83590 <Cl_bc_controller+0x26c>)
   834a0:	2200      	movs	r2, #0
   834a2:	701a      	strb	r2, [r3, #0]
								}
								break;
   834a4:	e028      	b.n	834f8 <Cl_bc_controller+0x1d4>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   834a6:	4b39      	ldr	r3, [pc, #228]	; (8358c <Cl_bc_controller+0x268>)
   834a8:	2200      	movs	r2, #0
   834aa:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   834ac:	2005      	movs	r0, #5
   834ae:	4b32      	ldr	r3, [pc, #200]	; (83578 <Cl_bc_controller+0x254>)
   834b0:	4798      	blx	r3
   834b2:	4603      	mov	r3, r0
   834b4:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   834b6:	7bfb      	ldrb	r3, [r7, #15]
   834b8:	2b00      	cmp	r3, #0
   834ba:	d120      	bne.n	834fe <Cl_bc_controller+0x1da>
								{
									bc_laststate = bc_state;
   834bc:	4b30      	ldr	r3, [pc, #192]	; (83580 <Cl_bc_controller+0x25c>)
   834be:	781a      	ldrb	r2, [r3, #0]
   834c0:	4b30      	ldr	r3, [pc, #192]	; (83584 <Cl_bc_controller+0x260>)
   834c2:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   834c4:	4b2e      	ldr	r3, [pc, #184]	; (83580 <Cl_bc_controller+0x25c>)
   834c6:	2210      	movs	r2, #16
   834c8:	701a      	strb	r2, [r3, #0]
								}
								break;
   834ca:	e018      	b.n	834fe <Cl_bc_controller+0x1da>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   834cc:	4b2f      	ldr	r3, [pc, #188]	; (8358c <Cl_bc_controller+0x268>)
   834ce:	2200      	movs	r2, #0
   834d0:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   834d2:	2006      	movs	r0, #6
   834d4:	4b28      	ldr	r3, [pc, #160]	; (83578 <Cl_bc_controller+0x254>)
   834d6:	4798      	blx	r3
   834d8:	4603      	mov	r3, r0
   834da:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   834dc:	7bfb      	ldrb	r3, [r7, #15]
   834de:	2b00      	cmp	r3, #0
   834e0:	d110      	bne.n	83504 <Cl_bc_controller+0x1e0>
								{
									bc_laststate = bc_state;
   834e2:	4b27      	ldr	r3, [pc, #156]	; (83580 <Cl_bc_controller+0x25c>)
   834e4:	781a      	ldrb	r2, [r3, #0]
   834e6:	4b27      	ldr	r3, [pc, #156]	; (83584 <Cl_bc_controller+0x260>)
   834e8:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   834ea:	4b25      	ldr	r3, [pc, #148]	; (83580 <Cl_bc_controller+0x25c>)
   834ec:	2212      	movs	r2, #18
   834ee:	701a      	strb	r2, [r3, #0]
								}
								break;
   834f0:	e008      	b.n	83504 <Cl_bc_controller+0x1e0>
								default:break;
   834f2:	bf00      	nop
   834f4:	f000 bc0b 	b.w	83d0e <Cl_bc_controller+0x9ea>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_OPENFILL;
									bc_wait = false;
								}
								break;
   834f8:	bf00      	nop
   834fa:	f000 bc08 	b.w	83d0e <Cl_bc_controller+0x9ea>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   834fe:	bf00      	nop
   83500:	f000 bc05 	b.w	83d0e <Cl_bc_controller+0x9ea>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83504:	bf00      	nop
								default:break;
							}
			break;
   83506:	f000 bc02 	b.w	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8350a:	79fb      	ldrb	r3, [r7, #7]
   8350c:	3b01      	subs	r3, #1
   8350e:	2b07      	cmp	r3, #7
   83510:	f200 80f4 	bhi.w	836fc <Cl_bc_controller+0x3d8>
   83514:	a201      	add	r2, pc, #4	; (adr r2, 8351c <Cl_bc_controller+0x1f8>)
   83516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8351a:	bf00      	nop
   8351c:	000836fd 	.word	0x000836fd
   83520:	0008353d 	.word	0x0008353d
   83524:	000836fd 	.word	0x000836fd
   83528:	000836fd 	.word	0x000836fd
   8352c:	000836fd 	.word	0x000836fd
   83530:	000836b1 	.word	0x000836b1
   83534:	000836fd 	.word	0x000836fd
   83538:	000836d7 	.word	0x000836d7
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   8353c:	4b13      	ldr	r3, [pc, #76]	; (8358c <Cl_bc_controller+0x268>)
   8353e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83542:	b29a      	uxth	r2, r3
   83544:	3201      	adds	r2, #1
   83546:	b292      	uxth	r2, r2
   83548:	b211      	sxth	r1, r2
   8354a:	4a10      	ldr	r2, [pc, #64]	; (8358c <Cl_bc_controller+0x268>)
   8354c:	8011      	strh	r1, [r2, #0]
   8354e:	2b78      	cmp	r3, #120	; 0x78
   83550:	f340 80d6 	ble.w	83700 <Cl_bc_controller+0x3dc>
								{
									if (openfill_flag == 1)
   83554:	4b0f      	ldr	r3, [pc, #60]	; (83594 <Cl_bc_controller+0x270>)
   83556:	781b      	ldrb	r3, [r3, #0]
   83558:	2b01      	cmp	r3, #1
   8355a:	d11d      	bne.n	83598 <Cl_bc_controller+0x274>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   8355c:	4b0b      	ldr	r3, [pc, #44]	; (8358c <Cl_bc_controller+0x268>)
   8355e:	2200      	movs	r2, #0
   83560:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   83562:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   83566:	2002      	movs	r0, #2
   83568:	4b04      	ldr	r3, [pc, #16]	; (8357c <Cl_bc_controller+0x258>)
   8356a:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,400);
   8356c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   83570:	2001      	movs	r0, #1
   83572:	4b02      	ldr	r3, [pc, #8]	; (8357c <Cl_bc_controller+0x258>)
   83574:	4798      	blx	r3
   83576:	e07d      	b.n	83674 <Cl_bc_controller+0x350>
   83578:	00096a6d 	.word	0x00096a6d
   8357c:	000968f5 	.word	0x000968f5
   83580:	20071605 	.word	0x20071605
   83584:	20071606 	.word	0x20071606
   83588:	20070104 	.word	0x20070104
   8358c:	2007160a 	.word	0x2007160a
   83590:	20071607 	.word	0x20071607
   83594:	20072786 	.word	0x20072786
										
									}
									else
									{
									sv_prop_stopopenfill();
   83598:	4b9a      	ldr	r3, [pc, #616]	; (83804 <Cl_bc_controller+0x4e0>)
   8359a:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   8359c:	4b9a      	ldr	r3, [pc, #616]	; (83808 <Cl_bc_controller+0x4e4>)
   8359e:	4798      	blx	r3
							
									openfillcounter = 0;
   835a0:	4b9a      	ldr	r3, [pc, #616]	; (8380c <Cl_bc_controller+0x4e8>)
   835a2:	2200      	movs	r2, #0
   835a4:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   835a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   835aa:	2002      	movs	r0, #2
   835ac:	4b98      	ldr	r3, [pc, #608]	; (83810 <Cl_bc_controller+0x4ec>)
   835ae:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   835b0:	f240 414c 	movw	r1, #1100	; 0x44c
   835b4:	2001      	movs	r0, #1
   835b6:	4b96      	ldr	r3, [pc, #600]	; (83810 <Cl_bc_controller+0x4ec>)
   835b8:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   835ba:	4b96      	ldr	r3, [pc, #600]	; (83814 <Cl_bc_controller+0x4f0>)
   835bc:	2244      	movs	r2, #68	; 0x44
   835be:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   835c0:	4b94      	ldr	r3, [pc, #592]	; (83814 <Cl_bc_controller+0x4f0>)
   835c2:	881b      	ldrh	r3, [r3, #0]
   835c4:	4618      	mov	r0, r3
   835c6:	4b94      	ldr	r3, [pc, #592]	; (83818 <Cl_bc_controller+0x4f4>)
   835c8:	4798      	blx	r3
										if (hotrinse_flag == 1)
   835ca:	4b94      	ldr	r3, [pc, #592]	; (8381c <Cl_bc_controller+0x4f8>)
   835cc:	781b      	ldrb	r3, [r3, #0]
   835ce:	2b01      	cmp	r3, #1
   835d0:	d150      	bne.n	83674 <Cl_bc_controller+0x350>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   835d2:	f44f 7116 	mov.w	r1, #600	; 0x258
   835d6:	2002      	movs	r0, #2
   835d8:	4b8d      	ldr	r3, [pc, #564]	; (83810 <Cl_bc_controller+0x4ec>)
   835da:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,500);
   835dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   835e0:	2001      	movs	r0, #1
   835e2:	4b8b      	ldr	r3, [pc, #556]	; (83810 <Cl_bc_controller+0x4ec>)
   835e4:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   835e6:	4b8e      	ldr	r3, [pc, #568]	; (83820 <Cl_bc_controller+0x4fc>)
   835e8:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											potvalue = (550 * 1024)/10000;                                 // added on 30.06.2017
   835ea:	4b8a      	ldr	r3, [pc, #552]	; (83814 <Cl_bc_controller+0x4f0>)
   835ec:	2238      	movs	r2, #56	; 0x38
   835ee:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   835f0:	4b88      	ldr	r3, [pc, #544]	; (83814 <Cl_bc_controller+0x4f0>)
   835f2:	881b      	ldrh	r3, [r3, #0]
   835f4:	4618      	mov	r0, r3
   835f6:	4b88      	ldr	r3, [pc, #544]	; (83818 <Cl_bc_controller+0x4f4>)
   835f8:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   835fa:	4b8a      	ldr	r3, [pc, #552]	; (83824 <Cl_bc_controller+0x500>)
   835fc:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   835fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   83602:	4b89      	ldr	r3, [pc, #548]	; (83828 <Cl_bc_controller+0x504>)
   83604:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   83606:	2001      	movs	r0, #1
   83608:	4b88      	ldr	r3, [pc, #544]	; (8382c <Cl_bc_controller+0x508>)
   8360a:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);
   8360c:	4988      	ldr	r1, [pc, #544]	; (83830 <Cl_bc_controller+0x50c>)
   8360e:	2005      	movs	r0, #5
   83610:	4b88      	ldr	r3, [pc, #544]	; (83834 <Cl_bc_controller+0x510>)
   83612:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   83614:	2002      	movs	r0, #2
   83616:	4b88      	ldr	r3, [pc, #544]	; (83838 <Cl_bc_controller+0x514>)
   83618:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   8361a:	2003      	movs	r0, #3
   8361c:	4b86      	ldr	r3, [pc, #536]	; (83838 <Cl_bc_controller+0x514>)
   8361e:	4798      	blx	r3
											sv_prop_startmixing();
   83620:	4b86      	ldr	r3, [pc, #536]	; (8383c <Cl_bc_controller+0x518>)
   83622:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   83624:	2100      	movs	r1, #0
   83626:	2002      	movs	r0, #2
   83628:	4b85      	ldr	r3, [pc, #532]	; (83840 <Cl_bc_controller+0x51c>)
   8362a:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   8362c:	4b85      	ldr	r3, [pc, #532]	; (83844 <Cl_bc_controller+0x520>)
   8362e:	4798      	blx	r3
											cl_wait(100);
   83630:	2064      	movs	r0, #100	; 0x64
   83632:	4b85      	ldr	r3, [pc, #532]	; (83848 <Cl_bc_controller+0x524>)
   83634:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,9000);
   83636:	f242 3128 	movw	r1, #9000	; 0x2328
   8363a:	2001      	movs	r0, #1
   8363c:	4b80      	ldr	r3, [pc, #512]	; (83840 <Cl_bc_controller+0x51c>)
   8363e:	4798      	blx	r3
											cl_wait(200);
   83640:	20c8      	movs	r0, #200	; 0xc8
   83642:	4b81      	ldr	r3, [pc, #516]	; (83848 <Cl_bc_controller+0x524>)
   83644:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   83646:	f241 3188 	movw	r1, #5000	; 0x1388
   8364a:	2001      	movs	r0, #1
   8364c:	4b7c      	ldr	r3, [pc, #496]	; (83840 <Cl_bc_controller+0x51c>)
   8364e:	4798      	blx	r3
											cl_wait(600);
   83650:	f44f 7016 	mov.w	r0, #600	; 0x258
   83654:	4b7c      	ldr	r3, [pc, #496]	; (83848 <Cl_bc_controller+0x524>)
   83656:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
   83658:	f640 31b8 	movw	r1, #3000	; 0xbb8
   8365c:	2001      	movs	r0, #1
   8365e:	4b78      	ldr	r3, [pc, #480]	; (83840 <Cl_bc_controller+0x51c>)
   83660:	4798      	blx	r3
											cl_wait(800);
   83662:	f44f 7048 	mov.w	r0, #800	; 0x320
   83666:	4b78      	ldr	r3, [pc, #480]	; (83848 <Cl_bc_controller+0x524>)
   83668:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   8366a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   8366e:	2001      	movs	r0, #1
   83670:	4b73      	ldr	r3, [pc, #460]	; (83840 <Cl_bc_controller+0x51c>)
   83672:	4798      	blx	r3
//check	
							//		sv_cntrl_setpumpspeed(DCMOTOR2,900);
							//		sv_cntrl_setpumpspeed(DCMOTOR1,560);  //960
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83674:	2005      	movs	r0, #5
   83676:	4b75      	ldr	r3, [pc, #468]	; (8384c <Cl_bc_controller+0x528>)
   83678:	4798      	blx	r3
   8367a:	4603      	mov	r3, r0
   8367c:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   8367e:	2013      	movs	r0, #19
   83680:	4b73      	ldr	r3, [pc, #460]	; (83850 <Cl_bc_controller+0x52c>)
   83682:	4798      	blx	r3
   83684:	4603      	mov	r3, r0
   83686:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   83688:	2051      	movs	r0, #81	; 0x51
   8368a:	4b72      	ldr	r3, [pc, #456]	; (83854 <Cl_bc_controller+0x530>)
   8368c:	4798      	blx	r3
   8368e:	4603      	mov	r3, r0
   83690:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   83692:	7bfb      	ldrb	r3, [r7, #15]
   83694:	2b00      	cmp	r3, #0
   83696:	d133      	bne.n	83700 <Cl_bc_controller+0x3dc>
									{
										bc_laststate = bc_state;
   83698:	4b6f      	ldr	r3, [pc, #444]	; (83858 <Cl_bc_controller+0x534>)
   8369a:	781a      	ldrb	r2, [r3, #0]
   8369c:	4b6f      	ldr	r3, [pc, #444]	; (8385c <Cl_bc_controller+0x538>)
   8369e:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   836a0:	4b6d      	ldr	r3, [pc, #436]	; (83858 <Cl_bc_controller+0x534>)
   836a2:	220c      	movs	r2, #12
   836a4:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   836a6:	4b6c      	ldr	r3, [pc, #432]	; (83858 <Cl_bc_controller+0x534>)
   836a8:	781a      	ldrb	r2, [r3, #0]
   836aa:	4b6c      	ldr	r3, [pc, #432]	; (8385c <Cl_bc_controller+0x538>)
   836ac:	701a      	strb	r2, [r3, #0]
									}
								}
								break;
   836ae:	e027      	b.n	83700 <Cl_bc_controller+0x3dc>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   836b0:	4b56      	ldr	r3, [pc, #344]	; (8380c <Cl_bc_controller+0x4e8>)
   836b2:	2200      	movs	r2, #0
   836b4:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   836b6:	2005      	movs	r0, #5
   836b8:	4b64      	ldr	r3, [pc, #400]	; (8384c <Cl_bc_controller+0x528>)
   836ba:	4798      	blx	r3
   836bc:	4603      	mov	r3, r0
   836be:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   836c0:	7bfb      	ldrb	r3, [r7, #15]
   836c2:	2b00      	cmp	r3, #0
   836c4:	d11e      	bne.n	83704 <Cl_bc_controller+0x3e0>
								{
									bc_laststate = bc_state;
   836c6:	4b64      	ldr	r3, [pc, #400]	; (83858 <Cl_bc_controller+0x534>)
   836c8:	781a      	ldrb	r2, [r3, #0]
   836ca:	4b64      	ldr	r3, [pc, #400]	; (8385c <Cl_bc_controller+0x538>)
   836cc:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   836ce:	4b62      	ldr	r3, [pc, #392]	; (83858 <Cl_bc_controller+0x534>)
   836d0:	2210      	movs	r2, #16
   836d2:	701a      	strb	r2, [r3, #0]
								}
								break;
   836d4:	e016      	b.n	83704 <Cl_bc_controller+0x3e0>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   836d6:	4b4d      	ldr	r3, [pc, #308]	; (8380c <Cl_bc_controller+0x4e8>)
   836d8:	2200      	movs	r2, #0
   836da:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   836dc:	2006      	movs	r0, #6
   836de:	4b5b      	ldr	r3, [pc, #364]	; (8384c <Cl_bc_controller+0x528>)
   836e0:	4798      	blx	r3
   836e2:	4603      	mov	r3, r0
   836e4:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   836e6:	7bfb      	ldrb	r3, [r7, #15]
   836e8:	2b00      	cmp	r3, #0
   836ea:	d10d      	bne.n	83708 <Cl_bc_controller+0x3e4>
								{
									bc_laststate = bc_state;
   836ec:	4b5a      	ldr	r3, [pc, #360]	; (83858 <Cl_bc_controller+0x534>)
   836ee:	781a      	ldrb	r2, [r3, #0]
   836f0:	4b5a      	ldr	r3, [pc, #360]	; (8385c <Cl_bc_controller+0x538>)
   836f2:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   836f4:	4b58      	ldr	r3, [pc, #352]	; (83858 <Cl_bc_controller+0x534>)
   836f6:	2212      	movs	r2, #18
   836f8:	701a      	strb	r2, [r3, #0]
								}
								break;
   836fa:	e005      	b.n	83708 <Cl_bc_controller+0x3e4>
								default:break;
   836fc:	bf00      	nop
   836fe:	e306      	b.n	83d0e <Cl_bc_controller+0x9ea>
										bc_laststate = bc_state;
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								break;
   83700:	bf00      	nop
   83702:	e304      	b.n	83d0e <Cl_bc_controller+0x9ea>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   83704:	bf00      	nop
   83706:	e302      	b.n	83d0e <Cl_bc_controller+0x9ea>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83708:	bf00      	nop
								default:break;
							}
			break;
   8370a:	e300      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   8370c:	79fb      	ldrb	r3, [r7, #7]
   8370e:	2b01      	cmp	r3, #1
   83710:	d002      	beq.n	83718 <Cl_bc_controller+0x3f4>
   83712:	2b02      	cmp	r3, #2
   83714:	d004      	beq.n	83720 <Cl_bc_controller+0x3fc>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83716:	e012      	b.n	8373e <Cl_bc_controller+0x41a>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   83718:	4b51      	ldr	r3, [pc, #324]	; (83860 <Cl_bc_controller+0x53c>)
   8371a:	2201      	movs	r2, #1
   8371c:	701a      	strb	r2, [r3, #0]
								
								break;
   8371e:	e00e      	b.n	8373e <Cl_bc_controller+0x41a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83720:	4b4f      	ldr	r3, [pc, #316]	; (83860 <Cl_bc_controller+0x53c>)
   83722:	781b      	ldrb	r3, [r3, #0]
   83724:	2b00      	cmp	r3, #0
   83726:	d009      	beq.n	8373c <Cl_bc_controller+0x418>
								{
									bc_laststate = bc_state;
   83728:	4b4b      	ldr	r3, [pc, #300]	; (83858 <Cl_bc_controller+0x534>)
   8372a:	781a      	ldrb	r2, [r3, #0]
   8372c:	4b4b      	ldr	r3, [pc, #300]	; (8385c <Cl_bc_controller+0x538>)
   8372e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   83730:	4b49      	ldr	r3, [pc, #292]	; (83858 <Cl_bc_controller+0x534>)
   83732:	2205      	movs	r2, #5
   83734:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83736:	4b4a      	ldr	r3, [pc, #296]	; (83860 <Cl_bc_controller+0x53c>)
   83738:	2200      	movs	r2, #0
   8373a:	701a      	strb	r2, [r3, #0]
								}
								break;
   8373c:	bf00      	nop
								default:break;
							}
			break;
   8373e:	e2e6      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   83740:	79fb      	ldrb	r3, [r7, #7]
   83742:	2b02      	cmp	r3, #2
   83744:	d004      	beq.n	83750 <Cl_bc_controller+0x42c>
   83746:	2b03      	cmp	r3, #3
   83748:	d004      	beq.n	83754 <Cl_bc_controller+0x430>
   8374a:	2b01      	cmp	r3, #1
   8374c:	d004      	beq.n	83758 <Cl_bc_controller+0x434>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8374e:	e004      	b.n	8375a <Cl_bc_controller+0x436>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   83750:	bf00      	nop
   83752:	e2dc      	b.n	83d0e <Cl_bc_controller+0x9ea>
								case	BC_EVENT_CS:
								break;
   83754:	bf00      	nop
   83756:	e2da      	b.n	83d0e <Cl_bc_controller+0x9ea>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83758:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8375a:	e2d8      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   8375c:	79fb      	ldrb	r3, [r7, #7]
   8375e:	2b01      	cmp	r3, #1
   83760:	d002      	beq.n	83768 <Cl_bc_controller+0x444>
   83762:	2b02      	cmp	r3, #2
   83764:	d004      	beq.n	83770 <Cl_bc_controller+0x44c>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83766:	e012      	b.n	8378e <Cl_bc_controller+0x46a>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   83768:	4b3d      	ldr	r3, [pc, #244]	; (83860 <Cl_bc_controller+0x53c>)
   8376a:	2201      	movs	r2, #1
   8376c:	701a      	strb	r2, [r3, #0]
								
								break;
   8376e:	e00e      	b.n	8378e <Cl_bc_controller+0x46a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83770:	4b3b      	ldr	r3, [pc, #236]	; (83860 <Cl_bc_controller+0x53c>)
   83772:	781b      	ldrb	r3, [r3, #0]
   83774:	2b00      	cmp	r3, #0
   83776:	d009      	beq.n	8378c <Cl_bc_controller+0x468>
								{
									bc_laststate = bc_state;
   83778:	4b37      	ldr	r3, [pc, #220]	; (83858 <Cl_bc_controller+0x534>)
   8377a:	781a      	ldrb	r2, [r3, #0]
   8377c:	4b37      	ldr	r3, [pc, #220]	; (8385c <Cl_bc_controller+0x538>)
   8377e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   83780:	4b35      	ldr	r3, [pc, #212]	; (83858 <Cl_bc_controller+0x534>)
   83782:	2207      	movs	r2, #7
   83784:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83786:	4b36      	ldr	r3, [pc, #216]	; (83860 <Cl_bc_controller+0x53c>)
   83788:	2200      	movs	r2, #0
   8378a:	701a      	strb	r2, [r3, #0]
								}
								break;
   8378c:	bf00      	nop
								default:break;
							}
			break;
   8378e:	e2be      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   83790:	79fb      	ldrb	r3, [r7, #7]
   83792:	2b02      	cmp	r3, #2
   83794:	d004      	beq.n	837a0 <Cl_bc_controller+0x47c>
   83796:	2b03      	cmp	r3, #3
   83798:	d004      	beq.n	837a4 <Cl_bc_controller+0x480>
   8379a:	2b01      	cmp	r3, #1
   8379c:	d004      	beq.n	837a8 <Cl_bc_controller+0x484>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8379e:	e004      	b.n	837aa <Cl_bc_controller+0x486>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   837a0:	bf00      	nop
   837a2:	e2b4      	b.n	83d0e <Cl_bc_controller+0x9ea>
								case	BC_EVENT_CS:
								break;
   837a4:	bf00      	nop
   837a6:	e2b2      	b.n	83d0e <Cl_bc_controller+0x9ea>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   837a8:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   837aa:	e2b0      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   837ac:	79fb      	ldrb	r3, [r7, #7]
   837ae:	2b01      	cmp	r3, #1
   837b0:	d002      	beq.n	837b8 <Cl_bc_controller+0x494>
   837b2:	2b02      	cmp	r3, #2
   837b4:	d00b      	beq.n	837ce <Cl_bc_controller+0x4aa>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   837b6:	e00b      	b.n	837d0 <Cl_bc_controller+0x4ac>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   837b8:	4b27      	ldr	r3, [pc, #156]	; (83858 <Cl_bc_controller+0x534>)
   837ba:	781a      	ldrb	r2, [r3, #0]
   837bc:	4b27      	ldr	r3, [pc, #156]	; (8385c <Cl_bc_controller+0x538>)
   837be:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   837c0:	4b25      	ldr	r3, [pc, #148]	; (83858 <Cl_bc_controller+0x534>)
   837c2:	2209      	movs	r2, #9
   837c4:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   837c6:	4b26      	ldr	r3, [pc, #152]	; (83860 <Cl_bc_controller+0x53c>)
   837c8:	2200      	movs	r2, #0
   837ca:	701a      	strb	r2, [r3, #0]
								break;
   837cc:	e000      	b.n	837d0 <Cl_bc_controller+0x4ac>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   837ce:	bf00      	nop
								default:break;
							}
			break;
   837d0:	e29d      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   837d2:	79fb      	ldrb	r3, [r7, #7]
   837d4:	2b02      	cmp	r3, #2
   837d6:	d004      	beq.n	837e2 <Cl_bc_controller+0x4be>
   837d8:	2b03      	cmp	r3, #3
   837da:	d004      	beq.n	837e6 <Cl_bc_controller+0x4c2>
   837dc:	2b01      	cmp	r3, #1
   837de:	d004      	beq.n	837ea <Cl_bc_controller+0x4c6>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   837e0:	e004      	b.n	837ec <Cl_bc_controller+0x4c8>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   837e2:	bf00      	nop
   837e4:	e293      	b.n	83d0e <Cl_bc_controller+0x9ea>
								case	BC_EVENT_CS:
								break;
   837e6:	bf00      	nop
   837e8:	e291      	b.n	83d0e <Cl_bc_controller+0x9ea>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   837ea:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   837ec:	e28f      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   837ee:	79fb      	ldrb	r3, [r7, #7]
   837f0:	2b01      	cmp	r3, #1
   837f2:	d002      	beq.n	837fa <Cl_bc_controller+0x4d6>
   837f4:	2b02      	cmp	r3, #2
   837f6:	d035      	beq.n	83864 <Cl_bc_controller+0x540>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   837f8:	e043      	b.n	83882 <Cl_bc_controller+0x55e>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   837fa:	4b19      	ldr	r3, [pc, #100]	; (83860 <Cl_bc_controller+0x53c>)
   837fc:	2201      	movs	r2, #1
   837fe:	701a      	strb	r2, [r3, #0]
								
								break;
   83800:	e03f      	b.n	83882 <Cl_bc_controller+0x55e>
   83802:	bf00      	nop
   83804:	00096d01 	.word	0x00096d01
   83808:	00096bf9 	.word	0x00096bf9
   8380c:	2007160a 	.word	0x2007160a
   83810:	000968f5 	.word	0x000968f5
   83814:	2007160c 	.word	0x2007160c
   83818:	00096d29 	.word	0x00096d29
   8381c:	20072821 	.word	0x20072821
   83820:	000969f1 	.word	0x000969f1
   83824:	00096855 	.word	0x00096855
   83828:	0009695d 	.word	0x0009695d
   8382c:	00089749 	.word	0x00089749
   83830:	42960000 	.word	0x42960000
   83834:	000896e9 	.word	0x000896e9
   83838:	0009687d 	.word	0x0009687d
   8383c:	00096c25 	.word	0x00096c25
   83840:	00092e89 	.word	0x00092e89
   83844:	00092c4d 	.word	0x00092c4d
   83848:	00091b9d 	.word	0x00091b9d
   8384c:	00096a6d 	.word	0x00096a6d
   83850:	0009689d 	.word	0x0009689d
   83854:	0008a915 	.word	0x0008a915
   83858:	20071605 	.word	0x20071605
   8385c:	20071606 	.word	0x20071606
   83860:	20071607 	.word	0x20071607
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83864:	4b9f      	ldr	r3, [pc, #636]	; (83ae4 <Cl_bc_controller+0x7c0>)
   83866:	781b      	ldrb	r3, [r3, #0]
   83868:	2b00      	cmp	r3, #0
   8386a:	d009      	beq.n	83880 <Cl_bc_controller+0x55c>
								{
									bc_laststate = bc_state;
   8386c:	4b9e      	ldr	r3, [pc, #632]	; (83ae8 <Cl_bc_controller+0x7c4>)
   8386e:	781a      	ldrb	r2, [r3, #0]
   83870:	4b9e      	ldr	r3, [pc, #632]	; (83aec <Cl_bc_controller+0x7c8>)
   83872:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   83874:	4b9c      	ldr	r3, [pc, #624]	; (83ae8 <Cl_bc_controller+0x7c4>)
   83876:	220b      	movs	r2, #11
   83878:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8387a:	4b9a      	ldr	r3, [pc, #616]	; (83ae4 <Cl_bc_controller+0x7c0>)
   8387c:	2200      	movs	r2, #0
   8387e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83880:	bf00      	nop
								default:break;
							}
			break;
   83882:	e244      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   83884:	79fb      	ldrb	r3, [r7, #7]
   83886:	2b02      	cmp	r3, #2
   83888:	d004      	beq.n	83894 <Cl_bc_controller+0x570>
   8388a:	2b03      	cmp	r3, #3
   8388c:	d004      	beq.n	83898 <Cl_bc_controller+0x574>
   8388e:	2b01      	cmp	r3, #1
   83890:	d004      	beq.n	8389c <Cl_bc_controller+0x578>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83892:	e004      	b.n	8389e <Cl_bc_controller+0x57a>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83894:	bf00      	nop
   83896:	e23a      	b.n	83d0e <Cl_bc_controller+0x9ea>
								case	BC_EVENT_CS:
								break;
   83898:	bf00      	nop
   8389a:	e238      	b.n	83d0e <Cl_bc_controller+0x9ea>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8389c:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8389e:	e236      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   838a0:	79fb      	ldrb	r3, [r7, #7]
   838a2:	2b00      	cmp	r3, #0
   838a4:	d001      	beq.n	838aa <Cl_bc_controller+0x586>
   838a6:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   838a8:	e02a      	b.n	83900 <Cl_bc_controller+0x5dc>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   838aa:	4b91      	ldr	r3, [pc, #580]	; (83af0 <Cl_bc_controller+0x7cc>)
   838ac:	f9b3 3000 	ldrsh.w	r3, [r3]
   838b0:	b29b      	uxth	r3, r3
   838b2:	3301      	adds	r3, #1
   838b4:	b29b      	uxth	r3, r3
   838b6:	b21a      	sxth	r2, r3
   838b8:	4b8d      	ldr	r3, [pc, #564]	; (83af0 <Cl_bc_controller+0x7cc>)
   838ba:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   838bc:	4b8d      	ldr	r3, [pc, #564]	; (83af4 <Cl_bc_controller+0x7d0>)
   838be:	f9b3 3000 	ldrsh.w	r3, [r3]
   838c2:	2b13      	cmp	r3, #19
   838c4:	dc11      	bgt.n	838ea <Cl_bc_controller+0x5c6>
								{
									if(wait_counter == 2)
   838c6:	4b8b      	ldr	r3, [pc, #556]	; (83af4 <Cl_bc_controller+0x7d0>)
   838c8:	f9b3 3000 	ldrsh.w	r3, [r3]
   838cc:	2b02      	cmp	r3, #2
   838ce:	d102      	bne.n	838d6 <Cl_bc_controller+0x5b2>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   838d0:	2013      	movs	r0, #19
   838d2:	4b89      	ldr	r3, [pc, #548]	; (83af8 <Cl_bc_controller+0x7d4>)
   838d4:	4798      	blx	r3
									}
									wait_counter ++;	// 1 sec wait
   838d6:	4b87      	ldr	r3, [pc, #540]	; (83af4 <Cl_bc_controller+0x7d0>)
   838d8:	f9b3 3000 	ldrsh.w	r3, [r3]
   838dc:	b29b      	uxth	r3, r3
   838de:	3301      	adds	r3, #1
   838e0:	b29b      	uxth	r3, r3
   838e2:	b21a      	sxth	r2, r3
   838e4:	4b83      	ldr	r3, [pc, #524]	; (83af4 <Cl_bc_controller+0x7d0>)
   838e6:	801a      	strh	r2, [r3, #0]
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO1_V13V14;
									
								}
								break;
   838e8:	e009      	b.n	838fe <Cl_bc_controller+0x5da>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   838ea:	4b82      	ldr	r3, [pc, #520]	; (83af4 <Cl_bc_controller+0x7d0>)
   838ec:	2200      	movs	r2, #0
   838ee:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   838f0:	4b7d      	ldr	r3, [pc, #500]	; (83ae8 <Cl_bc_controller+0x7c4>)
   838f2:	781a      	ldrb	r2, [r3, #0]
   838f4:	4b7d      	ldr	r3, [pc, #500]	; (83aec <Cl_bc_controller+0x7c8>)
   838f6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   838f8:	4b7b      	ldr	r3, [pc, #492]	; (83ae8 <Cl_bc_controller+0x7c4>)
   838fa:	220d      	movs	r2, #13
   838fc:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   838fe:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   83900:	e205      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   83902:	79fb      	ldrb	r3, [r7, #7]
   83904:	2b03      	cmp	r3, #3
   83906:	f200 809f 	bhi.w	83a48 <Cl_bc_controller+0x724>
   8390a:	a201      	add	r2, pc, #4	; (adr r2, 83910 <Cl_bc_controller+0x5ec>)
   8390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83910:	00083921 	.word	0x00083921
   83914:	00083a49 	.word	0x00083a49
   83918:	00083a49 	.word	0x00083a49
   8391c:	00083935 	.word	0x00083935
							{
								case BC_EVENT_50MS:
								fill_time++;
   83920:	4b73      	ldr	r3, [pc, #460]	; (83af0 <Cl_bc_controller+0x7cc>)
   83922:	f9b3 3000 	ldrsh.w	r3, [r3]
   83926:	b29b      	uxth	r3, r3
   83928:	3301      	adds	r3, #1
   8392a:	b29b      	uxth	r3, r3
   8392c:	b21a      	sxth	r2, r3
   8392e:	4b70      	ldr	r3, [pc, #448]	; (83af0 <Cl_bc_controller+0x7cc>)
   83930:	801a      	strh	r2, [r3, #0]
								break;
   83932:	e08c      	b.n	83a4e <Cl_bc_controller+0x72a>
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   83934:	4b71      	ldr	r3, [pc, #452]	; (83afc <Cl_bc_controller+0x7d8>)
   83936:	2201      	movs	r2, #1
   83938:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   8393a:	4b71      	ldr	r3, [pc, #452]	; (83b00 <Cl_bc_controller+0x7dc>)
   8393c:	2200      	movs	r2, #0
   8393e:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83940:	4b6b      	ldr	r3, [pc, #428]	; (83af0 <Cl_bc_controller+0x7cc>)
   83942:	f9b3 3000 	ldrsh.w	r3, [r3]
   83946:	b29a      	uxth	r2, r3
   83948:	4b6d      	ldr	r3, [pc, #436]	; (83b00 <Cl_bc_controller+0x7dc>)
   8394a:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   8394c:	4b6c      	ldr	r3, [pc, #432]	; (83b00 <Cl_bc_controller+0x7dc>)
   8394e:	2216      	movs	r2, #22
   83950:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   83952:	4b67      	ldr	r3, [pc, #412]	; (83af0 <Cl_bc_controller+0x7cc>)
   83954:	f9b3 3000 	ldrsh.w	r3, [r3]
   83958:	b29a      	uxth	r2, r3
   8395a:	4b6a      	ldr	r3, [pc, #424]	; (83b04 <Cl_bc_controller+0x7e0>)
   8395c:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   8395e:	4b6a      	ldr	r3, [pc, #424]	; (83b08 <Cl_bc_controller+0x7e4>)
   83960:	781b      	ldrb	r3, [r3, #0]
   83962:	2b01      	cmp	r3, #1
   83964:	d150      	bne.n	83a08 <Cl_bc_controller+0x6e4>
									{
										switch (flow_rate)
   83966:	4b69      	ldr	r3, [pc, #420]	; (83b0c <Cl_bc_controller+0x7e8>)
   83968:	681b      	ldr	r3, [r3, #0]
   8396a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8396e:	d01d      	beq.n	839ac <Cl_bc_controller+0x688>
   83970:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83974:	d003      	beq.n	8397e <Cl_bc_controller+0x65a>
   83976:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8397a:	d02e      	beq.n	839da <Cl_bc_controller+0x6b6>
   8397c:	e044      	b.n	83a08 <Cl_bc_controller+0x6e4>
										{
											case 800:
												if (fill_time > 55)
   8397e:	4b5c      	ldr	r3, [pc, #368]	; (83af0 <Cl_bc_controller+0x7cc>)
   83980:	f9b3 3000 	ldrsh.w	r3, [r3]
   83984:	2b37      	cmp	r3, #55	; 0x37
   83986:	dd0e      	ble.n	839a6 <Cl_bc_controller+0x682>
												{	sv_cntrl_setyellowalarm();
   83988:	4b61      	ldr	r3, [pc, #388]	; (83b10 <Cl_bc_controller+0x7ec>)
   8398a:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   8398c:	2004      	movs	r0, #4
   8398e:	4b61      	ldr	r3, [pc, #388]	; (83b14 <Cl_bc_controller+0x7f0>)
   83990:	4798      	blx	r3
													cl_wait(50);
   83992:	2032      	movs	r0, #50	; 0x32
   83994:	4b60      	ldr	r3, [pc, #384]	; (83b18 <Cl_bc_controller+0x7f4>)
   83996:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83998:	2004      	movs	r0, #4
   8399a:	4b57      	ldr	r3, [pc, #348]	; (83af8 <Cl_bc_controller+0x7d4>)
   8399c:	4798      	blx	r3
													cl_wait(50);
   8399e:	2032      	movs	r0, #50	; 0x32
   839a0:	4b5d      	ldr	r3, [pc, #372]	; (83b18 <Cl_bc_controller+0x7f4>)
   839a2:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   839a4:	e030      	b.n	83a08 <Cl_bc_controller+0x6e4>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   839a6:	4b5d      	ldr	r3, [pc, #372]	; (83b1c <Cl_bc_controller+0x7f8>)
   839a8:	4798      	blx	r3
												}
											break;
   839aa:	e02d      	b.n	83a08 <Cl_bc_controller+0x6e4>
											
											case 500:
												if (fill_time > 80)
   839ac:	4b50      	ldr	r3, [pc, #320]	; (83af0 <Cl_bc_controller+0x7cc>)
   839ae:	f9b3 3000 	ldrsh.w	r3, [r3]
   839b2:	2b50      	cmp	r3, #80	; 0x50
   839b4:	dd0e      	ble.n	839d4 <Cl_bc_controller+0x6b0>
												{
													sv_cntrl_setyellowalarm();
   839b6:	4b56      	ldr	r3, [pc, #344]	; (83b10 <Cl_bc_controller+0x7ec>)
   839b8:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   839ba:	2004      	movs	r0, #4
   839bc:	4b55      	ldr	r3, [pc, #340]	; (83b14 <Cl_bc_controller+0x7f0>)
   839be:	4798      	blx	r3
													cl_wait(50);
   839c0:	2032      	movs	r0, #50	; 0x32
   839c2:	4b55      	ldr	r3, [pc, #340]	; (83b18 <Cl_bc_controller+0x7f4>)
   839c4:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   839c6:	2004      	movs	r0, #4
   839c8:	4b4b      	ldr	r3, [pc, #300]	; (83af8 <Cl_bc_controller+0x7d4>)
   839ca:	4798      	blx	r3
													cl_wait(50);
   839cc:	2032      	movs	r0, #50	; 0x32
   839ce:	4b52      	ldr	r3, [pc, #328]	; (83b18 <Cl_bc_controller+0x7f4>)
   839d0:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   839d2:	e019      	b.n	83a08 <Cl_bc_controller+0x6e4>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   839d4:	4b51      	ldr	r3, [pc, #324]	; (83b1c <Cl_bc_controller+0x7f8>)
   839d6:	4798      	blx	r3
												}
											break;
   839d8:	e016      	b.n	83a08 <Cl_bc_controller+0x6e4>
																											
											case 300:
												if (fill_time > 130)
   839da:	4b45      	ldr	r3, [pc, #276]	; (83af0 <Cl_bc_controller+0x7cc>)
   839dc:	f9b3 3000 	ldrsh.w	r3, [r3]
   839e0:	2b82      	cmp	r3, #130	; 0x82
   839e2:	dd0e      	ble.n	83a02 <Cl_bc_controller+0x6de>
												{
													sv_cntrl_setyellowalarm();
   839e4:	4b4a      	ldr	r3, [pc, #296]	; (83b10 <Cl_bc_controller+0x7ec>)
   839e6:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   839e8:	2004      	movs	r0, #4
   839ea:	4b4a      	ldr	r3, [pc, #296]	; (83b14 <Cl_bc_controller+0x7f0>)
   839ec:	4798      	blx	r3
													cl_wait(50);
   839ee:	2032      	movs	r0, #50	; 0x32
   839f0:	4b49      	ldr	r3, [pc, #292]	; (83b18 <Cl_bc_controller+0x7f4>)
   839f2:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   839f4:	2004      	movs	r0, #4
   839f6:	4b40      	ldr	r3, [pc, #256]	; (83af8 <Cl_bc_controller+0x7d4>)
   839f8:	4798      	blx	r3
													cl_wait(50);
   839fa:	2032      	movs	r0, #50	; 0x32
   839fc:	4b46      	ldr	r3, [pc, #280]	; (83b18 <Cl_bc_controller+0x7f4>)
   839fe:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83a00:	e001      	b.n	83a06 <Cl_bc_controller+0x6e2>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83a02:	4b46      	ldr	r3, [pc, #280]	; (83b1c <Cl_bc_controller+0x7f8>)
   83a04:	4798      	blx	r3
												}
											break;
   83a06:	bf00      	nop
											
											}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83a08:	2006      	movs	r0, #6
   83a0a:	4b45      	ldr	r3, [pc, #276]	; (83b20 <Cl_bc_controller+0x7fc>)
   83a0c:	4798      	blx	r3
   83a0e:	4603      	mov	r3, r0
   83a10:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83a12:	2013      	movs	r0, #19
   83a14:	4b3f      	ldr	r3, [pc, #252]	; (83b14 <Cl_bc_controller+0x7f0>)
   83a16:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83a18:	2204      	movs	r2, #4
   83a1a:	4939      	ldr	r1, [pc, #228]	; (83b00 <Cl_bc_controller+0x7dc>)
   83a1c:	2037      	movs	r0, #55	; 0x37
   83a1e:	4b41      	ldr	r3, [pc, #260]	; (83b24 <Cl_bc_controller+0x800>)
   83a20:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,4);
   83a22:	2204      	movs	r2, #4
   83a24:	4937      	ldr	r1, [pc, #220]	; (83b04 <Cl_bc_controller+0x7e0>)
   83a26:	2049      	movs	r0, #73	; 0x49
   83a28:	4b3e      	ldr	r3, [pc, #248]	; (83b24 <Cl_bc_controller+0x800>)
   83a2a:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   83a2c:	7bfb      	ldrb	r3, [r7, #15]
   83a2e:	2b00      	cmp	r3, #0
   83a30:	d10c      	bne.n	83a4c <Cl_bc_controller+0x728>
								{
									bc_laststate = bc_state;
   83a32:	4b2d      	ldr	r3, [pc, #180]	; (83ae8 <Cl_bc_controller+0x7c4>)
   83a34:	781a      	ldrb	r2, [r3, #0]
   83a36:	4b2d      	ldr	r3, [pc, #180]	; (83aec <Cl_bc_controller+0x7c8>)
   83a38:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83a3a:	4b2b      	ldr	r3, [pc, #172]	; (83ae8 <Cl_bc_controller+0x7c4>)
   83a3c:	220e      	movs	r2, #14
   83a3e:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83a40:	4b2b      	ldr	r3, [pc, #172]	; (83af0 <Cl_bc_controller+0x7cc>)
   83a42:	2200      	movs	r2, #0
   83a44:	801a      	strh	r2, [r3, #0]
								}
								break;
   83a46:	e001      	b.n	83a4c <Cl_bc_controller+0x728>
								default:break;								
   83a48:	bf00      	nop
   83a4a:	e160      	b.n	83d0e <Cl_bc_controller+0x9ea>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
									fill_time = 0;															
								}
								break;
   83a4c:	bf00      	nop
								default:break;								
							}
			break;
   83a4e:	e15e      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83a50:	79fb      	ldrb	r3, [r7, #7]
   83a52:	2b00      	cmp	r3, #0
   83a54:	d001      	beq.n	83a5a <Cl_bc_controller+0x736>
   83a56:	2b02      	cmp	r3, #2
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
								
								break;
   83a58:	e02a      	b.n	83ab0 <Cl_bc_controller+0x78c>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83a5a:	4b25      	ldr	r3, [pc, #148]	; (83af0 <Cl_bc_controller+0x7cc>)
   83a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a60:	b29b      	uxth	r3, r3
   83a62:	3301      	adds	r3, #1
   83a64:	b29b      	uxth	r3, r3
   83a66:	b21a      	sxth	r2, r3
   83a68:	4b21      	ldr	r3, [pc, #132]	; (83af0 <Cl_bc_controller+0x7cc>)
   83a6a:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   83a6c:	4b21      	ldr	r3, [pc, #132]	; (83af4 <Cl_bc_controller+0x7d0>)
   83a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a72:	2b13      	cmp	r3, #19
   83a74:	dc11      	bgt.n	83a9a <Cl_bc_controller+0x776>
								{
									if(wait_counter == 2)
   83a76:	4b1f      	ldr	r3, [pc, #124]	; (83af4 <Cl_bc_controller+0x7d0>)
   83a78:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a7c:	2b02      	cmp	r3, #2
   83a7e:	d102      	bne.n	83a86 <Cl_bc_controller+0x762>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83a80:	2013      	movs	r0, #19
   83a82:	4b1d      	ldr	r3, [pc, #116]	; (83af8 <Cl_bc_controller+0x7d4>)
   83a84:	4798      	blx	r3
									}
									
									wait_counter ++;	// 1 sec wait
   83a86:	4b1b      	ldr	r3, [pc, #108]	; (83af4 <Cl_bc_controller+0x7d0>)
   83a88:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a8c:	b29b      	uxth	r3, r3
   83a8e:	3301      	adds	r3, #1
   83a90:	b29b      	uxth	r3, r3
   83a92:	b21a      	sxth	r2, r3
   83a94:	4b17      	ldr	r3, [pc, #92]	; (83af4 <Cl_bc_controller+0x7d0>)
   83a96:	801a      	strh	r2, [r3, #0]
								{
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
   83a98:	e009      	b.n	83aae <Cl_bc_controller+0x78a>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   83a9a:	4b16      	ldr	r3, [pc, #88]	; (83af4 <Cl_bc_controller+0x7d0>)
   83a9c:	2200      	movs	r2, #0
   83a9e:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83aa0:	4b11      	ldr	r3, [pc, #68]	; (83ae8 <Cl_bc_controller+0x7c4>)
   83aa2:	781a      	ldrb	r2, [r3, #0]
   83aa4:	4b11      	ldr	r3, [pc, #68]	; (83aec <Cl_bc_controller+0x7c8>)
   83aa6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   83aa8:	4b0f      	ldr	r3, [pc, #60]	; (83ae8 <Cl_bc_controller+0x7c4>)
   83aaa:	220f      	movs	r2, #15
   83aac:	701a      	strb	r2, [r3, #0]
								}
								break;case BC_EVENT_SECOND:
   83aae:	bf00      	nop
								
								break;
								
							}
			break;
   83ab0:	e12d      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83ab2:	79fb      	ldrb	r3, [r7, #7]
   83ab4:	2b03      	cmp	r3, #3
   83ab6:	f200 80e1 	bhi.w	83c7c <Cl_bc_controller+0x958>
   83aba:	a201      	add	r2, pc, #4	; (adr r2, 83ac0 <Cl_bc_controller+0x79c>)
   83abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83ac0:	00083ad1 	.word	0x00083ad1
   83ac4:	00083c7d 	.word	0x00083c7d
   83ac8:	00083c7d 	.word	0x00083c7d
   83acc:	00083b29 	.word	0x00083b29
							{
								case BC_EVENT_50MS:
								fill_time++;
   83ad0:	4b07      	ldr	r3, [pc, #28]	; (83af0 <Cl_bc_controller+0x7cc>)
   83ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ad6:	b29b      	uxth	r3, r3
   83ad8:	3301      	adds	r3, #1
   83ada:	b29b      	uxth	r3, r3
   83adc:	b21a      	sxth	r2, r3
   83ade:	4b04      	ldr	r3, [pc, #16]	; (83af0 <Cl_bc_controller+0x7cc>)
   83ae0:	801a      	strh	r2, [r3, #0]
								break;
   83ae2:	e0ce      	b.n	83c82 <Cl_bc_controller+0x95e>
   83ae4:	20071607 	.word	0x20071607
   83ae8:	20071605 	.word	0x20071605
   83aec:	20071606 	.word	0x20071606
   83af0:	2007160e 	.word	0x2007160e
   83af4:	20071608 	.word	0x20071608
   83af8:	0009689d 	.word	0x0009689d
   83afc:	200725f0 	.word	0x200725f0
   83b00:	20071610 	.word	0x20071610
   83b04:	20071614 	.word	0x20071614
   83b08:	200720ab 	.word	0x200720ab
   83b0c:	200720ac 	.word	0x200720ac
   83b10:	00096ae9 	.word	0x00096ae9
   83b14:	0009687d 	.word	0x0009687d
   83b18:	00091b9d 	.word	0x00091b9d
   83b1c:	00096b39 	.word	0x00096b39
   83b20:	00096a6d 	.word	0x00096a6d
   83b24:	00098601 	.word	0x00098601
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								 current_sense = true;
   83b28:	4b7b      	ldr	r3, [pc, #492]	; (83d18 <Cl_bc_controller+0x9f4>)
   83b2a:	2201      	movs	r2, #1
   83b2c:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83b2e:	4b7b      	ldr	r3, [pc, #492]	; (83d1c <Cl_bc_controller+0x9f8>)
   83b30:	2200      	movs	r2, #0
   83b32:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83b34:	4b7a      	ldr	r3, [pc, #488]	; (83d20 <Cl_bc_controller+0x9fc>)
   83b36:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b3a:	b29a      	uxth	r2, r3
   83b3c:	4b77      	ldr	r3, [pc, #476]	; (83d1c <Cl_bc_controller+0x9f8>)
   83b3e:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   83b40:	4b76      	ldr	r3, [pc, #472]	; (83d1c <Cl_bc_controller+0x9f8>)
   83b42:	2215      	movs	r2, #21
   83b44:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83b46:	4b76      	ldr	r3, [pc, #472]	; (83d20 <Cl_bc_controller+0x9fc>)
   83b48:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b4c:	b29a      	uxth	r2, r3
   83b4e:	4b75      	ldr	r3, [pc, #468]	; (83d24 <Cl_bc_controller+0xa00>)
   83b50:	801a      	strh	r2, [r3, #0]
								cl_tdata_temp.word = cl_tdata_temp.word << 16;
   83b52:	4b74      	ldr	r3, [pc, #464]	; (83d24 <Cl_bc_controller+0xa00>)
   83b54:	681b      	ldr	r3, [r3, #0]
   83b56:	041b      	lsls	r3, r3, #16
   83b58:	4a72      	ldr	r2, [pc, #456]	; (83d24 <Cl_bc_controller+0xa00>)
   83b5a:	6013      	str	r3, [r2, #0]
									if (bc_flag == 1)
   83b5c:	4b72      	ldr	r3, [pc, #456]	; (83d28 <Cl_bc_controller+0xa04>)
   83b5e:	781b      	ldrb	r3, [r3, #0]
   83b60:	2b01      	cmp	r3, #1
   83b62:	d170      	bne.n	83c46 <Cl_bc_controller+0x922>
									{
										switch (flow_rate)
   83b64:	4b71      	ldr	r3, [pc, #452]	; (83d2c <Cl_bc_controller+0xa08>)
   83b66:	681b      	ldr	r3, [r3, #0]
   83b68:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83b6c:	d06a      	beq.n	83c44 <Cl_bc_controller+0x920>
   83b6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83b72:	d805      	bhi.n	83b80 <Cl_bc_controller+0x85c>
   83b74:	2bc8      	cmp	r3, #200	; 0xc8
   83b76:	d04e      	beq.n	83c16 <Cl_bc_controller+0x8f2>
   83b78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83b7c:	d034      	beq.n	83be8 <Cl_bc_controller+0x8c4>
   83b7e:	e062      	b.n	83c46 <Cl_bc_controller+0x922>
   83b80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83b84:	d019      	beq.n	83bba <Cl_bc_controller+0x896>
   83b86:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83b8a:	d15c      	bne.n	83c46 <Cl_bc_controller+0x922>
										{
											case 800:
												if (fill_time > 55)
   83b8c:	4b64      	ldr	r3, [pc, #400]	; (83d20 <Cl_bc_controller+0x9fc>)
   83b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b92:	2b37      	cmp	r3, #55	; 0x37
   83b94:	dd0e      	ble.n	83bb4 <Cl_bc_controller+0x890>
												{
													sv_cntrl_setyellowalarm();
   83b96:	4b66      	ldr	r3, [pc, #408]	; (83d30 <Cl_bc_controller+0xa0c>)
   83b98:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83b9a:	2004      	movs	r0, #4
   83b9c:	4b65      	ldr	r3, [pc, #404]	; (83d34 <Cl_bc_controller+0xa10>)
   83b9e:	4798      	blx	r3
													cl_wait(50);
   83ba0:	2032      	movs	r0, #50	; 0x32
   83ba2:	4b65      	ldr	r3, [pc, #404]	; (83d38 <Cl_bc_controller+0xa14>)
   83ba4:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83ba6:	2004      	movs	r0, #4
   83ba8:	4b64      	ldr	r3, [pc, #400]	; (83d3c <Cl_bc_controller+0xa18>)
   83baa:	4798      	blx	r3
													cl_wait(50);
   83bac:	2032      	movs	r0, #50	; 0x32
   83bae:	4b62      	ldr	r3, [pc, #392]	; (83d38 <Cl_bc_controller+0xa14>)
   83bb0:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83bb2:	e048      	b.n	83c46 <Cl_bc_controller+0x922>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83bb4:	4b62      	ldr	r3, [pc, #392]	; (83d40 <Cl_bc_controller+0xa1c>)
   83bb6:	4798      	blx	r3
												}
											break;
   83bb8:	e045      	b.n	83c46 <Cl_bc_controller+0x922>
											
											case 500:
												if (fill_time > 80)
   83bba:	4b59      	ldr	r3, [pc, #356]	; (83d20 <Cl_bc_controller+0x9fc>)
   83bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bc0:	2b50      	cmp	r3, #80	; 0x50
   83bc2:	dd0e      	ble.n	83be2 <Cl_bc_controller+0x8be>
												{
													sv_cntrl_setyellowalarm();
   83bc4:	4b5a      	ldr	r3, [pc, #360]	; (83d30 <Cl_bc_controller+0xa0c>)
   83bc6:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83bc8:	2004      	movs	r0, #4
   83bca:	4b5a      	ldr	r3, [pc, #360]	; (83d34 <Cl_bc_controller+0xa10>)
   83bcc:	4798      	blx	r3
													cl_wait(50);
   83bce:	2032      	movs	r0, #50	; 0x32
   83bd0:	4b59      	ldr	r3, [pc, #356]	; (83d38 <Cl_bc_controller+0xa14>)
   83bd2:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83bd4:	2004      	movs	r0, #4
   83bd6:	4b59      	ldr	r3, [pc, #356]	; (83d3c <Cl_bc_controller+0xa18>)
   83bd8:	4798      	blx	r3
													cl_wait(50);
   83bda:	2032      	movs	r0, #50	; 0x32
   83bdc:	4b56      	ldr	r3, [pc, #344]	; (83d38 <Cl_bc_controller+0xa14>)
   83bde:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83be0:	e031      	b.n	83c46 <Cl_bc_controller+0x922>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83be2:	4b57      	ldr	r3, [pc, #348]	; (83d40 <Cl_bc_controller+0xa1c>)
   83be4:	4798      	blx	r3
												}
											break;
   83be6:	e02e      	b.n	83c46 <Cl_bc_controller+0x922>
											
											case 400:
											break;
											
											case 300:
											if (fill_time > 130)
   83be8:	4b4d      	ldr	r3, [pc, #308]	; (83d20 <Cl_bc_controller+0x9fc>)
   83bea:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bee:	2b82      	cmp	r3, #130	; 0x82
   83bf0:	dd0e      	ble.n	83c10 <Cl_bc_controller+0x8ec>
											{
												sv_cntrl_setyellowalarm();
   83bf2:	4b4f      	ldr	r3, [pc, #316]	; (83d30 <Cl_bc_controller+0xa0c>)
   83bf4:	4798      	blx	r3
												sv_cntrl_activate_valve( VALVE_ID4);
   83bf6:	2004      	movs	r0, #4
   83bf8:	4b4e      	ldr	r3, [pc, #312]	; (83d34 <Cl_bc_controller+0xa10>)
   83bfa:	4798      	blx	r3
												cl_wait(50);
   83bfc:	2032      	movs	r0, #50	; 0x32
   83bfe:	4b4e      	ldr	r3, [pc, #312]	; (83d38 <Cl_bc_controller+0xa14>)
   83c00:	4798      	blx	r3
												sv_cntrl_deactivate_valve(VALVE_ID4);
   83c02:	2004      	movs	r0, #4
   83c04:	4b4d      	ldr	r3, [pc, #308]	; (83d3c <Cl_bc_controller+0xa18>)
   83c06:	4798      	blx	r3
												cl_wait(50);
   83c08:	2032      	movs	r0, #50	; 0x32
   83c0a:	4b4b      	ldr	r3, [pc, #300]	; (83d38 <Cl_bc_controller+0xa14>)
   83c0c:	4798      	blx	r3
											}
											else
											{
												sv_cntrl_resetyellowalarm();
											}
											break;
   83c0e:	e01a      	b.n	83c46 <Cl_bc_controller+0x922>
												sv_cntrl_deactivate_valve(VALVE_ID4);
												cl_wait(50);
											}
											else
											{
												sv_cntrl_resetyellowalarm();
   83c10:	4b4b      	ldr	r3, [pc, #300]	; (83d40 <Cl_bc_controller+0xa1c>)
   83c12:	4798      	blx	r3
											}
											break;
   83c14:	e017      	b.n	83c46 <Cl_bc_controller+0x922>
											
											case 200:
												if (fill_time > 190)
   83c16:	4b42      	ldr	r3, [pc, #264]	; (83d20 <Cl_bc_controller+0x9fc>)
   83c18:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c1c:	2bbe      	cmp	r3, #190	; 0xbe
   83c1e:	dd0e      	ble.n	83c3e <Cl_bc_controller+0x91a>
												{
													sv_cntrl_setyellowalarm();
   83c20:	4b43      	ldr	r3, [pc, #268]	; (83d30 <Cl_bc_controller+0xa0c>)
   83c22:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83c24:	2004      	movs	r0, #4
   83c26:	4b43      	ldr	r3, [pc, #268]	; (83d34 <Cl_bc_controller+0xa10>)
   83c28:	4798      	blx	r3
													cl_wait(50);
   83c2a:	2032      	movs	r0, #50	; 0x32
   83c2c:	4b42      	ldr	r3, [pc, #264]	; (83d38 <Cl_bc_controller+0xa14>)
   83c2e:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83c30:	2004      	movs	r0, #4
   83c32:	4b42      	ldr	r3, [pc, #264]	; (83d3c <Cl_bc_controller+0xa18>)
   83c34:	4798      	blx	r3
													cl_wait(50);
   83c36:	2032      	movs	r0, #50	; 0x32
   83c38:	4b3f      	ldr	r3, [pc, #252]	; (83d38 <Cl_bc_controller+0xa14>)
   83c3a:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83c3c:	e003      	b.n	83c46 <Cl_bc_controller+0x922>
													sv_cntrl_deactivate_valve(VALVE_ID4);
													cl_wait(50);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83c3e:	4b40      	ldr	r3, [pc, #256]	; (83d40 <Cl_bc_controller+0xa1c>)
   83c40:	4798      	blx	r3
												}
											break;
   83c42:	e000      	b.n	83c46 <Cl_bc_controller+0x922>
													sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83c44:	bf00      	nop
												}
											break;
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83c46:	2005      	movs	r0, #5
   83c48:	4b3e      	ldr	r3, [pc, #248]	; (83d44 <Cl_bc_controller+0xa20>)
   83c4a:	4798      	blx	r3
   83c4c:	4603      	mov	r3, r0
   83c4e:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83c50:	2013      	movs	r0, #19
   83c52:	4b38      	ldr	r3, [pc, #224]	; (83d34 <Cl_bc_controller+0xa10>)
   83c54:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83c56:	2204      	movs	r2, #4
   83c58:	4930      	ldr	r1, [pc, #192]	; (83d1c <Cl_bc_controller+0x9f8>)
   83c5a:	2037      	movs	r0, #55	; 0x37
   83c5c:	4b3a      	ldr	r3, [pc, #232]	; (83d48 <Cl_bc_controller+0xa24>)
   83c5e:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   83c60:	7bfb      	ldrb	r3, [r7, #15]
   83c62:	2b00      	cmp	r3, #0
   83c64:	d10c      	bne.n	83c80 <Cl_bc_controller+0x95c>
								{
									bc_laststate = bc_state;
   83c66:	4b39      	ldr	r3, [pc, #228]	; (83d4c <Cl_bc_controller+0xa28>)
   83c68:	781a      	ldrb	r2, [r3, #0]
   83c6a:	4b39      	ldr	r3, [pc, #228]	; (83d50 <Cl_bc_controller+0xa2c>)
   83c6c:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83c6e:	4b2c      	ldr	r3, [pc, #176]	; (83d20 <Cl_bc_controller+0x9fc>)
   83c70:	2200      	movs	r2, #0
   83c72:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83c74:	4b35      	ldr	r3, [pc, #212]	; (83d4c <Cl_bc_controller+0xa28>)
   83c76:	220c      	movs	r2, #12
   83c78:	701a      	strb	r2, [r3, #0]
								}
								break;
   83c7a:	e001      	b.n	83c80 <Cl_bc_controller+0x95c>
								default:break;
   83c7c:	bf00      	nop
   83c7e:	e046      	b.n	83d0e <Cl_bc_controller+0x9ea>
								{
									bc_laststate = bc_state;
									fill_time = 0;
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
								}
								break;
   83c80:	bf00      	nop
								default:break;
							}
			break;
   83c82:	e044      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83c84:	79fb      	ldrb	r3, [r7, #7]
   83c86:	2b04      	cmp	r3, #4
   83c88:	d00b      	beq.n	83ca2 <Cl_bc_controller+0x97e>
   83c8a:	2b07      	cmp	r3, #7
   83c8c:	d000      	beq.n	83c90 <Cl_bc_controller+0x96c>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83c8e:	e01a      	b.n	83cc6 <Cl_bc_controller+0x9a2>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83c90:	2005      	movs	r0, #5
   83c92:	4b2c      	ldr	r3, [pc, #176]	; (83d44 <Cl_bc_controller+0xa20>)
   83c94:	4798      	blx	r3
   83c96:	4603      	mov	r3, r0
   83c98:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83c9a:	4b2c      	ldr	r3, [pc, #176]	; (83d4c <Cl_bc_controller+0xa28>)
   83c9c:	2211      	movs	r2, #17
   83c9e:	701a      	strb	r2, [r3, #0]
								break;
   83ca0:	e011      	b.n	83cc6 <Cl_bc_controller+0x9a2>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83ca2:	2007      	movs	r0, #7
   83ca4:	4b27      	ldr	r3, [pc, #156]	; (83d44 <Cl_bc_controller+0xa20>)
   83ca6:	4798      	blx	r3
   83ca8:	4603      	mov	r3, r0
   83caa:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83cac:	4b27      	ldr	r3, [pc, #156]	; (83d4c <Cl_bc_controller+0xa28>)
   83cae:	781a      	ldrb	r2, [r3, #0]
   83cb0:	4b27      	ldr	r3, [pc, #156]	; (83d50 <Cl_bc_controller+0xa2c>)
   83cb2:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83cb4:	4b25      	ldr	r3, [pc, #148]	; (83d4c <Cl_bc_controller+0xa28>)
   83cb6:	2202      	movs	r2, #2
   83cb8:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83cba:	2013      	movs	r0, #19
   83cbc:	4b1d      	ldr	r3, [pc, #116]	; (83d34 <Cl_bc_controller+0xa10>)
   83cbe:	4798      	blx	r3
   83cc0:	4603      	mov	r3, r0
   83cc2:	73fb      	strb	r3, [r7, #15]
								break;
   83cc4:	bf00      	nop
								default:break;
						
							}
						
			break;
   83cc6:	e022      	b.n	83d0e <Cl_bc_controller+0x9ea>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83cc8:	79fb      	ldrb	r3, [r7, #7]
   83cca:	2b04      	cmp	r3, #4
   83ccc:	d00b      	beq.n	83ce6 <Cl_bc_controller+0x9c2>
   83cce:	2b09      	cmp	r3, #9
   83cd0:	d000      	beq.n	83cd4 <Cl_bc_controller+0x9b0>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83cd2:	e01a      	b.n	83d0a <Cl_bc_controller+0x9e6>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83cd4:	2006      	movs	r0, #6
   83cd6:	4b1b      	ldr	r3, [pc, #108]	; (83d44 <Cl_bc_controller+0xa20>)
   83cd8:	4798      	blx	r3
   83cda:	4603      	mov	r3, r0
   83cdc:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83cde:	4b1b      	ldr	r3, [pc, #108]	; (83d4c <Cl_bc_controller+0xa28>)
   83ce0:	2213      	movs	r2, #19
   83ce2:	701a      	strb	r2, [r3, #0]
								break;
   83ce4:	e011      	b.n	83d0a <Cl_bc_controller+0x9e6>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83ce6:	2007      	movs	r0, #7
   83ce8:	4b16      	ldr	r3, [pc, #88]	; (83d44 <Cl_bc_controller+0xa20>)
   83cea:	4798      	blx	r3
   83cec:	4603      	mov	r3, r0
   83cee:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83cf0:	4b16      	ldr	r3, [pc, #88]	; (83d4c <Cl_bc_controller+0xa28>)
   83cf2:	781a      	ldrb	r2, [r3, #0]
   83cf4:	4b16      	ldr	r3, [pc, #88]	; (83d50 <Cl_bc_controller+0xa2c>)
   83cf6:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83cf8:	2013      	movs	r0, #19
   83cfa:	4b0e      	ldr	r3, [pc, #56]	; (83d34 <Cl_bc_controller+0xa10>)
   83cfc:	4798      	blx	r3
   83cfe:	4603      	mov	r3, r0
   83d00:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83d02:	4b12      	ldr	r3, [pc, #72]	; (83d4c <Cl_bc_controller+0xa28>)
   83d04:	2202      	movs	r2, #2
   83d06:	701a      	strb	r2, [r3, #0]
								break;
   83d08:	bf00      	nop
								default:break;
								
							}
			break;
   83d0a:	e000      	b.n	83d0e <Cl_bc_controller+0x9ea>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83d0c:	bf00      	nop
	}

	
	return 0;
   83d0e:	2300      	movs	r3, #0
}
   83d10:	4618      	mov	r0, r3
   83d12:	3710      	adds	r7, #16
   83d14:	46bd      	mov	sp, r7
   83d16:	bd80      	pop	{r7, pc}
   83d18:	200725f0 	.word	0x200725f0
   83d1c:	20071610 	.word	0x20071610
   83d20:	2007160e 	.word	0x2007160e
   83d24:	20071614 	.word	0x20071614
   83d28:	200720ab 	.word	0x200720ab
   83d2c:	200720ac 	.word	0x200720ac
   83d30:	00096ae9 	.word	0x00096ae9
   83d34:	0009687d 	.word	0x0009687d
   83d38:	00091b9d 	.word	0x00091b9d
   83d3c:	0009689d 	.word	0x0009689d
   83d40:	00096b39 	.word	0x00096b39
   83d44:	00096a6d 	.word	0x00096a6d
   83d48:	00098601 	.word	0x00098601
   83d4c:	20071605 	.word	0x20071605
   83d50:	20071606 	.word	0x20071606

00083d54 <hep_calibration>:

//*************************************************** till this************


void hep_calibration(Cl_Uint32Type inpt_ml)
{
   83d54:	b480      	push	{r7}
   83d56:	b085      	sub	sp, #20
   83d58:	af00      	add	r7, sp, #0
   83d5a:	6078      	str	r0, [r7, #4]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<2;i++)
   83d5c:	2300      	movs	r3, #0
   83d5e:	60fb      	str	r3, [r7, #12]
   83d60:	e05d      	b.n	83e1e <hep_calibration+0xca>
	{
		if (inpt_ml == hp[i].ml)
   83d62:	4a33      	ldr	r2, [pc, #204]	; (83e30 <hep_calibration+0xdc>)
   83d64:	68fb      	ldr	r3, [r7, #12]
   83d66:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83d6a:	b29b      	uxth	r3, r3
   83d6c:	461a      	mov	r2, r3
   83d6e:	687b      	ldr	r3, [r7, #4]
   83d70:	429a      	cmp	r2, r3
   83d72:	d109      	bne.n	83d88 <hep_calibration+0x34>
		{
			hep_speed=hp[i].speed;
   83d74:	4a2e      	ldr	r2, [pc, #184]	; (83e30 <hep_calibration+0xdc>)
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	009b      	lsls	r3, r3, #2
   83d7a:	4413      	add	r3, r2
   83d7c:	885b      	ldrh	r3, [r3, #2]
   83d7e:	b29b      	uxth	r3, r3
   83d80:	461a      	mov	r2, r3
   83d82:	4b2c      	ldr	r3, [pc, #176]	; (83e34 <hep_calibration+0xe0>)
   83d84:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   83d86:	e04d      	b.n	83e24 <hep_calibration+0xd0>
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   83d88:	4a29      	ldr	r2, [pc, #164]	; (83e30 <hep_calibration+0xdc>)
   83d8a:	68fb      	ldr	r3, [r7, #12]
   83d8c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83d90:	b29b      	uxth	r3, r3
   83d92:	461a      	mov	r2, r3
   83d94:	687b      	ldr	r3, [r7, #4]
   83d96:	429a      	cmp	r2, r3
   83d98:	d23e      	bcs.n	83e18 <hep_calibration+0xc4>
   83d9a:	68fb      	ldr	r3, [r7, #12]
   83d9c:	3301      	adds	r3, #1
   83d9e:	4a24      	ldr	r2, [pc, #144]	; (83e30 <hep_calibration+0xdc>)
   83da0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83da4:	b29b      	uxth	r3, r3
   83da6:	461a      	mov	r2, r3
   83da8:	687b      	ldr	r3, [r7, #4]
   83daa:	429a      	cmp	r2, r3
   83dac:	d934      	bls.n	83e18 <hep_calibration+0xc4>
		{
			slope = ((hp[i+1].ml-hp[i].ml)/(hp[i+1].speed-hp[i].speed));
   83dae:	68fb      	ldr	r3, [r7, #12]
   83db0:	3301      	adds	r3, #1
   83db2:	4a1f      	ldr	r2, [pc, #124]	; (83e30 <hep_calibration+0xdc>)
   83db4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83db8:	b29b      	uxth	r3, r3
   83dba:	4619      	mov	r1, r3
   83dbc:	4a1c      	ldr	r2, [pc, #112]	; (83e30 <hep_calibration+0xdc>)
   83dbe:	68fb      	ldr	r3, [r7, #12]
   83dc0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83dc4:	b29b      	uxth	r3, r3
   83dc6:	1aca      	subs	r2, r1, r3
   83dc8:	68fb      	ldr	r3, [r7, #12]
   83dca:	3301      	adds	r3, #1
   83dcc:	4918      	ldr	r1, [pc, #96]	; (83e30 <hep_calibration+0xdc>)
   83dce:	009b      	lsls	r3, r3, #2
   83dd0:	440b      	add	r3, r1
   83dd2:	885b      	ldrh	r3, [r3, #2]
   83dd4:	b29b      	uxth	r3, r3
   83dd6:	4618      	mov	r0, r3
   83dd8:	4915      	ldr	r1, [pc, #84]	; (83e30 <hep_calibration+0xdc>)
   83dda:	68fb      	ldr	r3, [r7, #12]
   83ddc:	009b      	lsls	r3, r3, #2
   83dde:	440b      	add	r3, r1
   83de0:	885b      	ldrh	r3, [r3, #2]
   83de2:	b29b      	uxth	r3, r3
   83de4:	1ac3      	subs	r3, r0, r3
   83de6:	fb92 f3f3 	sdiv	r3, r2, r3
   83dea:	817b      	strh	r3, [r7, #10]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   83dec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83df0:	490f      	ldr	r1, [pc, #60]	; (83e30 <hep_calibration+0xdc>)
   83df2:	68fa      	ldr	r2, [r7, #12]
   83df4:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   83df8:	b292      	uxth	r2, r2
   83dfa:	4611      	mov	r1, r2
   83dfc:	687a      	ldr	r2, [r7, #4]
   83dfe:	1a52      	subs	r2, r2, r1
   83e00:	fb02 f203 	mul.w	r2, r2, r3
   83e04:	490a      	ldr	r1, [pc, #40]	; (83e30 <hep_calibration+0xdc>)
   83e06:	68fb      	ldr	r3, [r7, #12]
   83e08:	009b      	lsls	r3, r3, #2
   83e0a:	440b      	add	r3, r1
   83e0c:	885b      	ldrh	r3, [r3, #2]
   83e0e:	b29b      	uxth	r3, r3
   83e10:	4413      	add	r3, r2
   83e12:	4a08      	ldr	r2, [pc, #32]	; (83e34 <hep_calibration+0xe0>)
   83e14:	6013      	str	r3, [r2, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   83e16:	e005      	b.n	83e24 <hep_calibration+0xd0>
void hep_calibration(Cl_Uint32Type inpt_ml)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<2;i++)
   83e18:	68fb      	ldr	r3, [r7, #12]
   83e1a:	3301      	adds	r3, #1
   83e1c:	60fb      	str	r3, [r7, #12]
   83e1e:	68fb      	ldr	r3, [r7, #12]
   83e20:	2b01      	cmp	r3, #1
   83e22:	dd9e      	ble.n	83d62 <hep_calibration+0xe>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   83e24:	bf00      	nop
   83e26:	3714      	adds	r7, #20
   83e28:	46bd      	mov	sp, r7
   83e2a:	bc80      	pop	{r7}
   83e2c:	4770      	bx	lr
   83e2e:	bf00      	nop
   83e30:	20071efc 	.word	0x20071efc
   83e34:	20072d0c 	.word	0x20072d0c

00083e38 <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   83e38:	b590      	push	{r4, r7, lr}
   83e3a:	b085      	sub	sp, #20
   83e3c:	af00      	add	r7, sp, #0
   83e3e:	4603      	mov	r3, r0
   83e40:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83e42:	2300      	movs	r3, #0
   83e44:	60fb      	str	r3, [r7, #12]
   83e46:	e0a1      	b.n	83f8c <calibration_apt+0x154>
	{
		if (sensordata == apt2[i].millivolt)
   83e48:	4a54      	ldr	r2, [pc, #336]	; (83f9c <calibration_apt+0x164>)
   83e4a:	68fb      	ldr	r3, [r7, #12]
   83e4c:	009b      	lsls	r3, r3, #2
   83e4e:	4413      	add	r3, r2
   83e50:	885b      	ldrh	r3, [r3, #2]
   83e52:	b21b      	sxth	r3, r3
   83e54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e58:	429a      	cmp	r2, r3
   83e5a:	d10b      	bne.n	83e74 <calibration_apt+0x3c>
		{
			pressure_final_apt=apt2[i].pressure;
   83e5c:	4a4f      	ldr	r2, [pc, #316]	; (83f9c <calibration_apt+0x164>)
   83e5e:	68fb      	ldr	r3, [r7, #12]
   83e60:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83e64:	b21a      	sxth	r2, r3
   83e66:	4b4e      	ldr	r3, [pc, #312]	; (83fa0 <calibration_apt+0x168>)
   83e68:	4610      	mov	r0, r2
   83e6a:	4798      	blx	r3
   83e6c:	4602      	mov	r2, r0
   83e6e:	4b4d      	ldr	r3, [pc, #308]	; (83fa4 <calibration_apt+0x16c>)
   83e70:	601a      	str	r2, [r3, #0]
   83e72:	e088      	b.n	83f86 <calibration_apt+0x14e>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   83e74:	4a49      	ldr	r2, [pc, #292]	; (83f9c <calibration_apt+0x164>)
   83e76:	68fb      	ldr	r3, [r7, #12]
   83e78:	009b      	lsls	r3, r3, #2
   83e7a:	4413      	add	r3, r2
   83e7c:	885b      	ldrh	r3, [r3, #2]
   83e7e:	b21b      	sxth	r3, r3
   83e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e84:	429a      	cmp	r2, r3
   83e86:	dd5b      	ble.n	83f40 <calibration_apt+0x108>
   83e88:	68fb      	ldr	r3, [r7, #12]
   83e8a:	3301      	adds	r3, #1
   83e8c:	4a43      	ldr	r2, [pc, #268]	; (83f9c <calibration_apt+0x164>)
   83e8e:	009b      	lsls	r3, r3, #2
   83e90:	4413      	add	r3, r2
   83e92:	885b      	ldrh	r3, [r3, #2]
   83e94:	b21b      	sxth	r3, r3
   83e96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e9a:	429a      	cmp	r2, r3
   83e9c:	da50      	bge.n	83f40 <calibration_apt+0x108>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   83e9e:	68fb      	ldr	r3, [r7, #12]
   83ea0:	3301      	adds	r3, #1
   83ea2:	4a3e      	ldr	r2, [pc, #248]	; (83f9c <calibration_apt+0x164>)
   83ea4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83ea8:	b21b      	sxth	r3, r3
   83eaa:	4619      	mov	r1, r3
   83eac:	4a3b      	ldr	r2, [pc, #236]	; (83f9c <calibration_apt+0x164>)
   83eae:	68fb      	ldr	r3, [r7, #12]
   83eb0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83eb4:	b21b      	sxth	r3, r3
   83eb6:	1acb      	subs	r3, r1, r3
   83eb8:	2264      	movs	r2, #100	; 0x64
   83eba:	fb02 f203 	mul.w	r2, r2, r3
   83ebe:	68fb      	ldr	r3, [r7, #12]
   83ec0:	3301      	adds	r3, #1
   83ec2:	4936      	ldr	r1, [pc, #216]	; (83f9c <calibration_apt+0x164>)
   83ec4:	009b      	lsls	r3, r3, #2
   83ec6:	440b      	add	r3, r1
   83ec8:	885b      	ldrh	r3, [r3, #2]
   83eca:	b21b      	sxth	r3, r3
   83ecc:	4618      	mov	r0, r3
   83ece:	4933      	ldr	r1, [pc, #204]	; (83f9c <calibration_apt+0x164>)
   83ed0:	68fb      	ldr	r3, [r7, #12]
   83ed2:	009b      	lsls	r3, r3, #2
   83ed4:	440b      	add	r3, r1
   83ed6:	885b      	ldrh	r3, [r3, #2]
   83ed8:	b21b      	sxth	r3, r3
   83eda:	1ac3      	subs	r3, r0, r3
   83edc:	fb92 f2f3 	sdiv	r2, r2, r3
   83ee0:	4b2f      	ldr	r3, [pc, #188]	; (83fa0 <calibration_apt+0x168>)
   83ee2:	4610      	mov	r0, r2
   83ee4:	4798      	blx	r3
   83ee6:	4603      	mov	r3, r0
   83ee8:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   83eea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83eee:	492b      	ldr	r1, [pc, #172]	; (83f9c <calibration_apt+0x164>)
   83ef0:	68fb      	ldr	r3, [r7, #12]
   83ef2:	009b      	lsls	r3, r3, #2
   83ef4:	440b      	add	r3, r1
   83ef6:	885b      	ldrh	r3, [r3, #2]
   83ef8:	b21b      	sxth	r3, r3
   83efa:	1ad2      	subs	r2, r2, r3
   83efc:	4b28      	ldr	r3, [pc, #160]	; (83fa0 <calibration_apt+0x168>)
   83efe:	4610      	mov	r0, r2
   83f00:	4798      	blx	r3
   83f02:	4602      	mov	r2, r0
   83f04:	4b28      	ldr	r3, [pc, #160]	; (83fa8 <calibration_apt+0x170>)
   83f06:	68b9      	ldr	r1, [r7, #8]
   83f08:	4610      	mov	r0, r2
   83f0a:	4798      	blx	r3
   83f0c:	4603      	mov	r3, r0
   83f0e:	461a      	mov	r2, r3
   83f10:	4b26      	ldr	r3, [pc, #152]	; (83fac <calibration_apt+0x174>)
   83f12:	4927      	ldr	r1, [pc, #156]	; (83fb0 <calibration_apt+0x178>)
   83f14:	4610      	mov	r0, r2
   83f16:	4798      	blx	r3
   83f18:	4603      	mov	r3, r0
   83f1a:	461c      	mov	r4, r3
   83f1c:	4a1f      	ldr	r2, [pc, #124]	; (83f9c <calibration_apt+0x164>)
   83f1e:	68fb      	ldr	r3, [r7, #12]
   83f20:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83f24:	b21a      	sxth	r2, r3
   83f26:	4b1e      	ldr	r3, [pc, #120]	; (83fa0 <calibration_apt+0x168>)
   83f28:	4610      	mov	r0, r2
   83f2a:	4798      	blx	r3
   83f2c:	4602      	mov	r2, r0
   83f2e:	4b21      	ldr	r3, [pc, #132]	; (83fb4 <calibration_apt+0x17c>)
   83f30:	4611      	mov	r1, r2
   83f32:	4620      	mov	r0, r4
   83f34:	4798      	blx	r3
   83f36:	4603      	mov	r3, r0
   83f38:	461a      	mov	r2, r3
   83f3a:	4b1a      	ldr	r3, [pc, #104]	; (83fa4 <calibration_apt+0x16c>)
   83f3c:	601a      	str	r2, [r3, #0]
   83f3e:	e022      	b.n	83f86 <calibration_apt+0x14e>
		}
		else if(sensordata < apt2[0].millivolt)
   83f40:	4b16      	ldr	r3, [pc, #88]	; (83f9c <calibration_apt+0x164>)
   83f42:	885b      	ldrh	r3, [r3, #2]
   83f44:	b21b      	sxth	r3, r3
   83f46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83f4a:	429a      	cmp	r2, r3
   83f4c:	da09      	bge.n	83f62 <calibration_apt+0x12a>
		{
			pressure_final_apt = apt2[0].pressure;
   83f4e:	4b13      	ldr	r3, [pc, #76]	; (83f9c <calibration_apt+0x164>)
   83f50:	881b      	ldrh	r3, [r3, #0]
   83f52:	b21a      	sxth	r2, r3
   83f54:	4b12      	ldr	r3, [pc, #72]	; (83fa0 <calibration_apt+0x168>)
   83f56:	4610      	mov	r0, r2
   83f58:	4798      	blx	r3
   83f5a:	4602      	mov	r2, r0
   83f5c:	4b11      	ldr	r3, [pc, #68]	; (83fa4 <calibration_apt+0x16c>)
   83f5e:	601a      	str	r2, [r3, #0]
   83f60:	e011      	b.n	83f86 <calibration_apt+0x14e>
		}
		else  if(sensordata > apt2[25].millivolt)
   83f62:	4b0e      	ldr	r3, [pc, #56]	; (83f9c <calibration_apt+0x164>)
   83f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   83f68:	b21b      	sxth	r3, r3
   83f6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83f6e:	429a      	cmp	r2, r3
   83f70:	dd09      	ble.n	83f86 <calibration_apt+0x14e>
		{
			pressure_final_apt = apt2[25].pressure;
   83f72:	4b0a      	ldr	r3, [pc, #40]	; (83f9c <calibration_apt+0x164>)
   83f74:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   83f78:	b21a      	sxth	r2, r3
   83f7a:	4b09      	ldr	r3, [pc, #36]	; (83fa0 <calibration_apt+0x168>)
   83f7c:	4610      	mov	r0, r2
   83f7e:	4798      	blx	r3
   83f80:	4602      	mov	r2, r0
   83f82:	4b08      	ldr	r3, [pc, #32]	; (83fa4 <calibration_apt+0x16c>)
   83f84:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83f86:	68fb      	ldr	r3, [r7, #12]
   83f88:	3301      	adds	r3, #1
   83f8a:	60fb      	str	r3, [r7, #12]
   83f8c:	68fb      	ldr	r3, [r7, #12]
   83f8e:	2b19      	cmp	r3, #25
   83f90:	f77f af5a 	ble.w	83e48 <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   83f94:	bf00      	nop
   83f96:	3714      	adds	r7, #20
   83f98:	46bd      	mov	sp, r7
   83f9a:	bd90      	pop	{r4, r7, pc}
   83f9c:	2007011c 	.word	0x2007011c
   83fa0:	000a25e5 	.word	0x000a25e5
   83fa4:	20072d08 	.word	0x20072d08
   83fa8:	000a268d 	.word	0x000a268d
   83fac:	000a27f5 	.word	0x000a27f5
   83fb0:	42c80000 	.word	0x42c80000
   83fb4:	000a247d 	.word	0x000a247d

00083fb8 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   83fb8:	b590      	push	{r4, r7, lr}
   83fba:	b085      	sub	sp, #20
   83fbc:	af00      	add	r7, sp, #0
   83fbe:	4603      	mov	r3, r0
   83fc0:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83fc2:	2300      	movs	r3, #0
   83fc4:	60fb      	str	r3, [r7, #12]
   83fc6:	e0a1      	b.n	8410c <calibration_vpt+0x154>
	{
		if (sensordata == vpt2[i].millivolt)
   83fc8:	4a54      	ldr	r2, [pc, #336]	; (8411c <calibration_vpt+0x164>)
   83fca:	68fb      	ldr	r3, [r7, #12]
   83fcc:	009b      	lsls	r3, r3, #2
   83fce:	4413      	add	r3, r2
   83fd0:	885b      	ldrh	r3, [r3, #2]
   83fd2:	b21b      	sxth	r3, r3
   83fd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83fd8:	429a      	cmp	r2, r3
   83fda:	d10b      	bne.n	83ff4 <calibration_vpt+0x3c>
		{
			pressure_final_vpt=vpt2[i].pressure;
   83fdc:	4a4f      	ldr	r2, [pc, #316]	; (8411c <calibration_vpt+0x164>)
   83fde:	68fb      	ldr	r3, [r7, #12]
   83fe0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fe4:	b21a      	sxth	r2, r3
   83fe6:	4b4e      	ldr	r3, [pc, #312]	; (84120 <calibration_vpt+0x168>)
   83fe8:	4610      	mov	r0, r2
   83fea:	4798      	blx	r3
   83fec:	4602      	mov	r2, r0
   83fee:	4b4d      	ldr	r3, [pc, #308]	; (84124 <calibration_vpt+0x16c>)
   83ff0:	601a      	str	r2, [r3, #0]
			break;
   83ff2:	e08f      	b.n	84114 <calibration_vpt+0x15c>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   83ff4:	4a49      	ldr	r2, [pc, #292]	; (8411c <calibration_vpt+0x164>)
   83ff6:	68fb      	ldr	r3, [r7, #12]
   83ff8:	009b      	lsls	r3, r3, #2
   83ffa:	4413      	add	r3, r2
   83ffc:	885b      	ldrh	r3, [r3, #2]
   83ffe:	b21b      	sxth	r3, r3
   84000:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84004:	429a      	cmp	r2, r3
   84006:	dd5b      	ble.n	840c0 <calibration_vpt+0x108>
   84008:	68fb      	ldr	r3, [r7, #12]
   8400a:	3301      	adds	r3, #1
   8400c:	4a43      	ldr	r2, [pc, #268]	; (8411c <calibration_vpt+0x164>)
   8400e:	009b      	lsls	r3, r3, #2
   84010:	4413      	add	r3, r2
   84012:	885b      	ldrh	r3, [r3, #2]
   84014:	b21b      	sxth	r3, r3
   84016:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8401a:	429a      	cmp	r2, r3
   8401c:	da50      	bge.n	840c0 <calibration_vpt+0x108>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   8401e:	68fb      	ldr	r3, [r7, #12]
   84020:	3301      	adds	r3, #1
   84022:	4a3e      	ldr	r2, [pc, #248]	; (8411c <calibration_vpt+0x164>)
   84024:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84028:	b21b      	sxth	r3, r3
   8402a:	4619      	mov	r1, r3
   8402c:	4a3b      	ldr	r2, [pc, #236]	; (8411c <calibration_vpt+0x164>)
   8402e:	68fb      	ldr	r3, [r7, #12]
   84030:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84034:	b21b      	sxth	r3, r3
   84036:	1acb      	subs	r3, r1, r3
   84038:	2264      	movs	r2, #100	; 0x64
   8403a:	fb02 f203 	mul.w	r2, r2, r3
   8403e:	68fb      	ldr	r3, [r7, #12]
   84040:	3301      	adds	r3, #1
   84042:	4936      	ldr	r1, [pc, #216]	; (8411c <calibration_vpt+0x164>)
   84044:	009b      	lsls	r3, r3, #2
   84046:	440b      	add	r3, r1
   84048:	885b      	ldrh	r3, [r3, #2]
   8404a:	b21b      	sxth	r3, r3
   8404c:	4618      	mov	r0, r3
   8404e:	4933      	ldr	r1, [pc, #204]	; (8411c <calibration_vpt+0x164>)
   84050:	68fb      	ldr	r3, [r7, #12]
   84052:	009b      	lsls	r3, r3, #2
   84054:	440b      	add	r3, r1
   84056:	885b      	ldrh	r3, [r3, #2]
   84058:	b21b      	sxth	r3, r3
   8405a:	1ac3      	subs	r3, r0, r3
   8405c:	fb92 f2f3 	sdiv	r2, r2, r3
   84060:	4b2f      	ldr	r3, [pc, #188]	; (84120 <calibration_vpt+0x168>)
   84062:	4610      	mov	r0, r2
   84064:	4798      	blx	r3
   84066:	4603      	mov	r3, r0
   84068:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   8406a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8406e:	492b      	ldr	r1, [pc, #172]	; (8411c <calibration_vpt+0x164>)
   84070:	68fb      	ldr	r3, [r7, #12]
   84072:	009b      	lsls	r3, r3, #2
   84074:	440b      	add	r3, r1
   84076:	885b      	ldrh	r3, [r3, #2]
   84078:	b21b      	sxth	r3, r3
   8407a:	1ad2      	subs	r2, r2, r3
   8407c:	4b28      	ldr	r3, [pc, #160]	; (84120 <calibration_vpt+0x168>)
   8407e:	4610      	mov	r0, r2
   84080:	4798      	blx	r3
   84082:	4602      	mov	r2, r0
   84084:	4b28      	ldr	r3, [pc, #160]	; (84128 <calibration_vpt+0x170>)
   84086:	68b9      	ldr	r1, [r7, #8]
   84088:	4610      	mov	r0, r2
   8408a:	4798      	blx	r3
   8408c:	4603      	mov	r3, r0
   8408e:	461a      	mov	r2, r3
   84090:	4b26      	ldr	r3, [pc, #152]	; (8412c <calibration_vpt+0x174>)
   84092:	4927      	ldr	r1, [pc, #156]	; (84130 <calibration_vpt+0x178>)
   84094:	4610      	mov	r0, r2
   84096:	4798      	blx	r3
   84098:	4603      	mov	r3, r0
   8409a:	461c      	mov	r4, r3
   8409c:	4a1f      	ldr	r2, [pc, #124]	; (8411c <calibration_vpt+0x164>)
   8409e:	68fb      	ldr	r3, [r7, #12]
   840a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840a4:	b21a      	sxth	r2, r3
   840a6:	4b1e      	ldr	r3, [pc, #120]	; (84120 <calibration_vpt+0x168>)
   840a8:	4610      	mov	r0, r2
   840aa:	4798      	blx	r3
   840ac:	4602      	mov	r2, r0
   840ae:	4b21      	ldr	r3, [pc, #132]	; (84134 <calibration_vpt+0x17c>)
   840b0:	4611      	mov	r1, r2
   840b2:	4620      	mov	r0, r4
   840b4:	4798      	blx	r3
   840b6:	4603      	mov	r3, r0
   840b8:	461a      	mov	r2, r3
   840ba:	4b1a      	ldr	r3, [pc, #104]	; (84124 <calibration_vpt+0x16c>)
   840bc:	601a      	str	r2, [r3, #0]
			break;
   840be:	e029      	b.n	84114 <calibration_vpt+0x15c>
		}
		else if(sensordata < vpt2[0].millivolt)
   840c0:	4b16      	ldr	r3, [pc, #88]	; (8411c <calibration_vpt+0x164>)
   840c2:	885b      	ldrh	r3, [r3, #2]
   840c4:	b21b      	sxth	r3, r3
   840c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840ca:	429a      	cmp	r2, r3
   840cc:	da09      	bge.n	840e2 <calibration_vpt+0x12a>
		{
			pressure_final_apt = vpt2[0].pressure;
   840ce:	4b13      	ldr	r3, [pc, #76]	; (8411c <calibration_vpt+0x164>)
   840d0:	881b      	ldrh	r3, [r3, #0]
   840d2:	b21a      	sxth	r2, r3
   840d4:	4b12      	ldr	r3, [pc, #72]	; (84120 <calibration_vpt+0x168>)
   840d6:	4610      	mov	r0, r2
   840d8:	4798      	blx	r3
   840da:	4602      	mov	r2, r0
   840dc:	4b16      	ldr	r3, [pc, #88]	; (84138 <calibration_vpt+0x180>)
   840de:	601a      	str	r2, [r3, #0]
   840e0:	e011      	b.n	84106 <calibration_vpt+0x14e>
		}
		else  if(sensordata > vpt2[25].millivolt)
   840e2:	4b0e      	ldr	r3, [pc, #56]	; (8411c <calibration_vpt+0x164>)
   840e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   840e8:	b21b      	sxth	r3, r3
   840ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840ee:	429a      	cmp	r2, r3
   840f0:	dd09      	ble.n	84106 <calibration_vpt+0x14e>
		{
			pressure_final_apt = vpt2[25].pressure;
   840f2:	4b0a      	ldr	r3, [pc, #40]	; (8411c <calibration_vpt+0x164>)
   840f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   840f8:	b21a      	sxth	r2, r3
   840fa:	4b09      	ldr	r3, [pc, #36]	; (84120 <calibration_vpt+0x168>)
   840fc:	4610      	mov	r0, r2
   840fe:	4798      	blx	r3
   84100:	4602      	mov	r2, r0
   84102:	4b0d      	ldr	r3, [pc, #52]	; (84138 <calibration_vpt+0x180>)
   84104:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   84106:	68fb      	ldr	r3, [r7, #12]
   84108:	3301      	adds	r3, #1
   8410a:	60fb      	str	r3, [r7, #12]
   8410c:	68fb      	ldr	r3, [r7, #12]
   8410e:	2b19      	cmp	r3, #25
   84110:	f77f af5a 	ble.w	83fc8 <calibration_vpt+0x10>
		{
			pressure_final_apt = vpt2[25].pressure;
		}
	}
	
}
   84114:	bf00      	nop
   84116:	3714      	adds	r7, #20
   84118:	46bd      	mov	sp, r7
   8411a:	bd90      	pop	{r4, r7, pc}
   8411c:	20070184 	.word	0x20070184
   84120:	000a25e5 	.word	0x000a25e5
   84124:	20071618 	.word	0x20071618
   84128:	000a268d 	.word	0x000a268d
   8412c:	000a27f5 	.word	0x000a27f5
   84130:	42c80000 	.word	0x42c80000
   84134:	000a247d 	.word	0x000a247d
   84138:	20072d08 	.word	0x20072d08

0008413c <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   8413c:	b580      	push	{r7, lr}
   8413e:	b084      	sub	sp, #16
   84140:	af00      	add	r7, sp, #0
   84142:	4603      	mov	r3, r0
   84144:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84146:	2300      	movs	r3, #0
   84148:	60fb      	str	r3, [r7, #12]
   8414a:	e06f      	b.n	8422c <calibration_ps1+0xf0>
	{
		if (sensordata == ps_1_2[i].millivolt)
   8414c:	4a3b      	ldr	r2, [pc, #236]	; (8423c <calibration_ps1+0x100>)
   8414e:	68fb      	ldr	r3, [r7, #12]
   84150:	009b      	lsls	r3, r3, #2
   84152:	4413      	add	r3, r2
   84154:	885b      	ldrh	r3, [r3, #2]
   84156:	b21b      	sxth	r3, r3
   84158:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8415c:	429a      	cmp	r2, r3
   8415e:	d10b      	bne.n	84178 <calibration_ps1+0x3c>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   84160:	4a36      	ldr	r2, [pc, #216]	; (8423c <calibration_ps1+0x100>)
   84162:	68fb      	ldr	r3, [r7, #12]
   84164:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84168:	b21a      	sxth	r2, r3
   8416a:	4b35      	ldr	r3, [pc, #212]	; (84240 <calibration_ps1+0x104>)
   8416c:	4610      	mov	r0, r2
   8416e:	4798      	blx	r3
   84170:	4602      	mov	r2, r0
   84172:	4b34      	ldr	r3, [pc, #208]	; (84244 <calibration_ps1+0x108>)
   84174:	601a      	str	r2, [r3, #0]
			break;
   84176:	e05c      	b.n	84232 <calibration_ps1+0xf6>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   84178:	4a30      	ldr	r2, [pc, #192]	; (8423c <calibration_ps1+0x100>)
   8417a:	68fb      	ldr	r3, [r7, #12]
   8417c:	009b      	lsls	r3, r3, #2
   8417e:	4413      	add	r3, r2
   84180:	885b      	ldrh	r3, [r3, #2]
   84182:	b21b      	sxth	r3, r3
   84184:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84188:	429a      	cmp	r2, r3
   8418a:	dd4c      	ble.n	84226 <calibration_ps1+0xea>
   8418c:	68fb      	ldr	r3, [r7, #12]
   8418e:	3301      	adds	r3, #1
   84190:	4a2a      	ldr	r2, [pc, #168]	; (8423c <calibration_ps1+0x100>)
   84192:	009b      	lsls	r3, r3, #2
   84194:	4413      	add	r3, r2
   84196:	885b      	ldrh	r3, [r3, #2]
   84198:	b21b      	sxth	r3, r3
   8419a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8419e:	429a      	cmp	r2, r3
   841a0:	da41      	bge.n	84226 <calibration_ps1+0xea>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   841a2:	68fb      	ldr	r3, [r7, #12]
   841a4:	3301      	adds	r3, #1
   841a6:	4a25      	ldr	r2, [pc, #148]	; (8423c <calibration_ps1+0x100>)
   841a8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841ac:	b21b      	sxth	r3, r3
   841ae:	4619      	mov	r1, r3
   841b0:	4a22      	ldr	r2, [pc, #136]	; (8423c <calibration_ps1+0x100>)
   841b2:	68fb      	ldr	r3, [r7, #12]
   841b4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841b8:	b21b      	sxth	r3, r3
   841ba:	1acb      	subs	r3, r1, r3
   841bc:	2264      	movs	r2, #100	; 0x64
   841be:	fb02 f203 	mul.w	r2, r2, r3
   841c2:	68fb      	ldr	r3, [r7, #12]
   841c4:	3301      	adds	r3, #1
   841c6:	491d      	ldr	r1, [pc, #116]	; (8423c <calibration_ps1+0x100>)
   841c8:	009b      	lsls	r3, r3, #2
   841ca:	440b      	add	r3, r1
   841cc:	885b      	ldrh	r3, [r3, #2]
   841ce:	b21b      	sxth	r3, r3
   841d0:	4618      	mov	r0, r3
   841d2:	491a      	ldr	r1, [pc, #104]	; (8423c <calibration_ps1+0x100>)
   841d4:	68fb      	ldr	r3, [r7, #12]
   841d6:	009b      	lsls	r3, r3, #2
   841d8:	440b      	add	r3, r1
   841da:	885b      	ldrh	r3, [r3, #2]
   841dc:	b21b      	sxth	r3, r3
   841de:	1ac3      	subs	r3, r0, r3
   841e0:	fb92 f3f3 	sdiv	r3, r2, r3
   841e4:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   841e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   841ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   841ee:	4813      	ldr	r0, [pc, #76]	; (8423c <calibration_ps1+0x100>)
   841f0:	68fb      	ldr	r3, [r7, #12]
   841f2:	009b      	lsls	r3, r3, #2
   841f4:	4403      	add	r3, r0
   841f6:	885b      	ldrh	r3, [r3, #2]
   841f8:	b21b      	sxth	r3, r3
   841fa:	1acb      	subs	r3, r1, r3
   841fc:	fb03 f302 	mul.w	r3, r3, r2
   84200:	4a11      	ldr	r2, [pc, #68]	; (84248 <calibration_ps1+0x10c>)
   84202:	fb82 1203 	smull	r1, r2, r2, r3
   84206:	1152      	asrs	r2, r2, #5
   84208:	17db      	asrs	r3, r3, #31
   8420a:	1ad3      	subs	r3, r2, r3
   8420c:	490b      	ldr	r1, [pc, #44]	; (8423c <calibration_ps1+0x100>)
   8420e:	68fa      	ldr	r2, [r7, #12]
   84210:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84214:	b212      	sxth	r2, r2
   84216:	441a      	add	r2, r3
   84218:	4b09      	ldr	r3, [pc, #36]	; (84240 <calibration_ps1+0x104>)
   8421a:	4610      	mov	r0, r2
   8421c:	4798      	blx	r3
   8421e:	4602      	mov	r2, r0
   84220:	4b08      	ldr	r3, [pc, #32]	; (84244 <calibration_ps1+0x108>)
   84222:	601a      	str	r2, [r3, #0]
			break;
   84224:	e005      	b.n	84232 <calibration_ps1+0xf6>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84226:	68fb      	ldr	r3, [r7, #12]
   84228:	3301      	adds	r3, #1
   8422a:	60fb      	str	r3, [r7, #12]
   8422c:	68fb      	ldr	r3, [r7, #12]
   8422e:	2b1a      	cmp	r3, #26
   84230:	dd8c      	ble.n	8414c <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   84232:	bf00      	nop
   84234:	3710      	adds	r7, #16
   84236:	46bd      	mov	sp, r7
   84238:	bd80      	pop	{r7, pc}
   8423a:	bf00      	nop
   8423c:	200701ec 	.word	0x200701ec
   84240:	000a25e5 	.word	0x000a25e5
   84244:	2007161c 	.word	0x2007161c
   84248:	51eb851f 	.word	0x51eb851f

0008424c <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   8424c:	b580      	push	{r7, lr}
   8424e:	b084      	sub	sp, #16
   84250:	af00      	add	r7, sp, #0
   84252:	4603      	mov	r3, r0
   84254:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84256:	2300      	movs	r3, #0
   84258:	60fb      	str	r3, [r7, #12]
   8425a:	e06f      	b.n	8433c <calibration_ps2+0xf0>
	{
		if (sensordata == ps_2_2[i].millivolt)
   8425c:	4a3b      	ldr	r2, [pc, #236]	; (8434c <calibration_ps2+0x100>)
   8425e:	68fb      	ldr	r3, [r7, #12]
   84260:	009b      	lsls	r3, r3, #2
   84262:	4413      	add	r3, r2
   84264:	885b      	ldrh	r3, [r3, #2]
   84266:	b21b      	sxth	r3, r3
   84268:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8426c:	429a      	cmp	r2, r3
   8426e:	d10b      	bne.n	84288 <calibration_ps2+0x3c>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   84270:	4a36      	ldr	r2, [pc, #216]	; (8434c <calibration_ps2+0x100>)
   84272:	68fb      	ldr	r3, [r7, #12]
   84274:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84278:	b21a      	sxth	r2, r3
   8427a:	4b35      	ldr	r3, [pc, #212]	; (84350 <calibration_ps2+0x104>)
   8427c:	4610      	mov	r0, r2
   8427e:	4798      	blx	r3
   84280:	4602      	mov	r2, r0
   84282:	4b34      	ldr	r3, [pc, #208]	; (84354 <calibration_ps2+0x108>)
   84284:	601a      	str	r2, [r3, #0]
			break;
   84286:	e05c      	b.n	84342 <calibration_ps2+0xf6>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   84288:	4a30      	ldr	r2, [pc, #192]	; (8434c <calibration_ps2+0x100>)
   8428a:	68fb      	ldr	r3, [r7, #12]
   8428c:	009b      	lsls	r3, r3, #2
   8428e:	4413      	add	r3, r2
   84290:	885b      	ldrh	r3, [r3, #2]
   84292:	b21b      	sxth	r3, r3
   84294:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84298:	429a      	cmp	r2, r3
   8429a:	dd4c      	ble.n	84336 <calibration_ps2+0xea>
   8429c:	68fb      	ldr	r3, [r7, #12]
   8429e:	3301      	adds	r3, #1
   842a0:	4a2a      	ldr	r2, [pc, #168]	; (8434c <calibration_ps2+0x100>)
   842a2:	009b      	lsls	r3, r3, #2
   842a4:	4413      	add	r3, r2
   842a6:	885b      	ldrh	r3, [r3, #2]
   842a8:	b21b      	sxth	r3, r3
   842aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842ae:	429a      	cmp	r2, r3
   842b0:	da41      	bge.n	84336 <calibration_ps2+0xea>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   842b2:	68fb      	ldr	r3, [r7, #12]
   842b4:	3301      	adds	r3, #1
   842b6:	4a25      	ldr	r2, [pc, #148]	; (8434c <calibration_ps2+0x100>)
   842b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842bc:	b21b      	sxth	r3, r3
   842be:	4619      	mov	r1, r3
   842c0:	4a22      	ldr	r2, [pc, #136]	; (8434c <calibration_ps2+0x100>)
   842c2:	68fb      	ldr	r3, [r7, #12]
   842c4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842c8:	b21b      	sxth	r3, r3
   842ca:	1acb      	subs	r3, r1, r3
   842cc:	2264      	movs	r2, #100	; 0x64
   842ce:	fb02 f203 	mul.w	r2, r2, r3
   842d2:	68fb      	ldr	r3, [r7, #12]
   842d4:	3301      	adds	r3, #1
   842d6:	491d      	ldr	r1, [pc, #116]	; (8434c <calibration_ps2+0x100>)
   842d8:	009b      	lsls	r3, r3, #2
   842da:	440b      	add	r3, r1
   842dc:	885b      	ldrh	r3, [r3, #2]
   842de:	b21b      	sxth	r3, r3
   842e0:	4618      	mov	r0, r3
   842e2:	491a      	ldr	r1, [pc, #104]	; (8434c <calibration_ps2+0x100>)
   842e4:	68fb      	ldr	r3, [r7, #12]
   842e6:	009b      	lsls	r3, r3, #2
   842e8:	440b      	add	r3, r1
   842ea:	885b      	ldrh	r3, [r3, #2]
   842ec:	b21b      	sxth	r3, r3
   842ee:	1ac3      	subs	r3, r0, r3
   842f0:	fb92 f3f3 	sdiv	r3, r2, r3
   842f4:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   842f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   842fa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   842fe:	4813      	ldr	r0, [pc, #76]	; (8434c <calibration_ps2+0x100>)
   84300:	68fb      	ldr	r3, [r7, #12]
   84302:	009b      	lsls	r3, r3, #2
   84304:	4403      	add	r3, r0
   84306:	885b      	ldrh	r3, [r3, #2]
   84308:	b21b      	sxth	r3, r3
   8430a:	1acb      	subs	r3, r1, r3
   8430c:	fb03 f302 	mul.w	r3, r3, r2
   84310:	4a11      	ldr	r2, [pc, #68]	; (84358 <calibration_ps2+0x10c>)
   84312:	fb82 1203 	smull	r1, r2, r2, r3
   84316:	1152      	asrs	r2, r2, #5
   84318:	17db      	asrs	r3, r3, #31
   8431a:	1ad3      	subs	r3, r2, r3
   8431c:	490b      	ldr	r1, [pc, #44]	; (8434c <calibration_ps2+0x100>)
   8431e:	68fa      	ldr	r2, [r7, #12]
   84320:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84324:	b212      	sxth	r2, r2
   84326:	441a      	add	r2, r3
   84328:	4b09      	ldr	r3, [pc, #36]	; (84350 <calibration_ps2+0x104>)
   8432a:	4610      	mov	r0, r2
   8432c:	4798      	blx	r3
   8432e:	4602      	mov	r2, r0
   84330:	4b08      	ldr	r3, [pc, #32]	; (84354 <calibration_ps2+0x108>)
   84332:	601a      	str	r2, [r3, #0]
			break;
   84334:	e005      	b.n	84342 <calibration_ps2+0xf6>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84336:	68fb      	ldr	r3, [r7, #12]
   84338:	3301      	adds	r3, #1
   8433a:	60fb      	str	r3, [r7, #12]
   8433c:	68fb      	ldr	r3, [r7, #12]
   8433e:	2b1a      	cmp	r3, #26
   84340:	dd8c      	ble.n	8425c <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   84342:	bf00      	nop
   84344:	3710      	adds	r7, #16
   84346:	46bd      	mov	sp, r7
   84348:	bd80      	pop	{r7, pc}
   8434a:	bf00      	nop
   8434c:	20070258 	.word	0x20070258
   84350:	000a25e5 	.word	0x000a25e5
   84354:	20071620 	.word	0x20071620
   84358:	51eb851f 	.word	0x51eb851f

0008435c <calibration_ps3>:
void calibration_ps3(int16_t sensordata)
{
   8435c:	b580      	push	{r7, lr}
   8435e:	b084      	sub	sp, #16
   84360:	af00      	add	r7, sp, #0
   84362:	4603      	mov	r3, r0
   84364:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84366:	2300      	movs	r3, #0
   84368:	60fb      	str	r3, [r7, #12]
   8436a:	e06f      	b.n	8444c <calibration_ps3+0xf0>
	{
		if (sensordata == ps_3_2[i].millivolt)
   8436c:	4a3b      	ldr	r2, [pc, #236]	; (8445c <calibration_ps3+0x100>)
   8436e:	68fb      	ldr	r3, [r7, #12]
   84370:	009b      	lsls	r3, r3, #2
   84372:	4413      	add	r3, r2
   84374:	885b      	ldrh	r3, [r3, #2]
   84376:	b21b      	sxth	r3, r3
   84378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8437c:	429a      	cmp	r2, r3
   8437e:	d10b      	bne.n	84398 <calibration_ps3+0x3c>
		{
			pressure_final_ps3=ps_3_2[i].pressure;
   84380:	4a36      	ldr	r2, [pc, #216]	; (8445c <calibration_ps3+0x100>)
   84382:	68fb      	ldr	r3, [r7, #12]
   84384:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84388:	b21a      	sxth	r2, r3
   8438a:	4b35      	ldr	r3, [pc, #212]	; (84460 <calibration_ps3+0x104>)
   8438c:	4610      	mov	r0, r2
   8438e:	4798      	blx	r3
   84390:	4602      	mov	r2, r0
   84392:	4b34      	ldr	r3, [pc, #208]	; (84464 <calibration_ps3+0x108>)
   84394:	601a      	str	r2, [r3, #0]
			break;
   84396:	e05c      	b.n	84452 <calibration_ps3+0xf6>
		}
		else if ((sensordata > ps_3_2[i].millivolt) && (sensordata < ps_3_2[i+1].millivolt))
   84398:	4a30      	ldr	r2, [pc, #192]	; (8445c <calibration_ps3+0x100>)
   8439a:	68fb      	ldr	r3, [r7, #12]
   8439c:	009b      	lsls	r3, r3, #2
   8439e:	4413      	add	r3, r2
   843a0:	885b      	ldrh	r3, [r3, #2]
   843a2:	b21b      	sxth	r3, r3
   843a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843a8:	429a      	cmp	r2, r3
   843aa:	dd4c      	ble.n	84446 <calibration_ps3+0xea>
   843ac:	68fb      	ldr	r3, [r7, #12]
   843ae:	3301      	adds	r3, #1
   843b0:	4a2a      	ldr	r2, [pc, #168]	; (8445c <calibration_ps3+0x100>)
   843b2:	009b      	lsls	r3, r3, #2
   843b4:	4413      	add	r3, r2
   843b6:	885b      	ldrh	r3, [r3, #2]
   843b8:	b21b      	sxth	r3, r3
   843ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843be:	429a      	cmp	r2, r3
   843c0:	da41      	bge.n	84446 <calibration_ps3+0xea>
		{
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
   843c2:	68fb      	ldr	r3, [r7, #12]
   843c4:	3301      	adds	r3, #1
   843c6:	4a25      	ldr	r2, [pc, #148]	; (8445c <calibration_ps3+0x100>)
   843c8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843cc:	b21b      	sxth	r3, r3
   843ce:	4619      	mov	r1, r3
   843d0:	4a22      	ldr	r2, [pc, #136]	; (8445c <calibration_ps3+0x100>)
   843d2:	68fb      	ldr	r3, [r7, #12]
   843d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843d8:	b21b      	sxth	r3, r3
   843da:	1acb      	subs	r3, r1, r3
   843dc:	2264      	movs	r2, #100	; 0x64
   843de:	fb02 f203 	mul.w	r2, r2, r3
   843e2:	68fb      	ldr	r3, [r7, #12]
   843e4:	3301      	adds	r3, #1
   843e6:	491d      	ldr	r1, [pc, #116]	; (8445c <calibration_ps3+0x100>)
   843e8:	009b      	lsls	r3, r3, #2
   843ea:	440b      	add	r3, r1
   843ec:	885b      	ldrh	r3, [r3, #2]
   843ee:	b21b      	sxth	r3, r3
   843f0:	4618      	mov	r0, r3
   843f2:	491a      	ldr	r1, [pc, #104]	; (8445c <calibration_ps3+0x100>)
   843f4:	68fb      	ldr	r3, [r7, #12]
   843f6:	009b      	lsls	r3, r3, #2
   843f8:	440b      	add	r3, r1
   843fa:	885b      	ldrh	r3, [r3, #2]
   843fc:	b21b      	sxth	r3, r3
   843fe:	1ac3      	subs	r3, r0, r3
   84400:	fb92 f3f3 	sdiv	r3, r2, r3
   84404:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
   84406:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8440a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   8440e:	4813      	ldr	r0, [pc, #76]	; (8445c <calibration_ps3+0x100>)
   84410:	68fb      	ldr	r3, [r7, #12]
   84412:	009b      	lsls	r3, r3, #2
   84414:	4403      	add	r3, r0
   84416:	885b      	ldrh	r3, [r3, #2]
   84418:	b21b      	sxth	r3, r3
   8441a:	1acb      	subs	r3, r1, r3
   8441c:	fb03 f302 	mul.w	r3, r3, r2
   84420:	4a11      	ldr	r2, [pc, #68]	; (84468 <calibration_ps3+0x10c>)
   84422:	fb82 1203 	smull	r1, r2, r2, r3
   84426:	1152      	asrs	r2, r2, #5
   84428:	17db      	asrs	r3, r3, #31
   8442a:	1ad3      	subs	r3, r2, r3
   8442c:	490f      	ldr	r1, [pc, #60]	; (8446c <calibration_ps3+0x110>)
   8442e:	68fa      	ldr	r2, [r7, #12]
   84430:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84434:	b212      	sxth	r2, r2
   84436:	441a      	add	r2, r3
   84438:	4b09      	ldr	r3, [pc, #36]	; (84460 <calibration_ps3+0x104>)
   8443a:	4610      	mov	r0, r2
   8443c:	4798      	blx	r3
   8443e:	4602      	mov	r2, r0
   84440:	4b08      	ldr	r3, [pc, #32]	; (84464 <calibration_ps3+0x108>)
   84442:	601a      	str	r2, [r3, #0]
			break;
   84444:	e005      	b.n	84452 <calibration_ps3+0xf6>
void calibration_ps3(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84446:	68fb      	ldr	r3, [r7, #12]
   84448:	3301      	adds	r3, #1
   8444a:	60fb      	str	r3, [r7, #12]
   8444c:	68fb      	ldr	r3, [r7, #12]
   8444e:	2b31      	cmp	r3, #49	; 0x31
   84450:	dd8c      	ble.n	8436c <calibration_ps3+0x10>
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
			break;
		}
	}
}
   84452:	bf00      	nop
   84454:	3710      	adds	r7, #16
   84456:	46bd      	mov	sp, r7
   84458:	bd80      	pop	{r7, pc}
   8445a:	bf00      	nop
   8445c:	200702c4 	.word	0x200702c4
   84460:	000a25e5 	.word	0x000a25e5
   84464:	20071624 	.word	0x20071624
   84468:	51eb851f 	.word	0x51eb851f
   8446c:	20071e34 	.word	0x20071e34

00084470 <calibration_cond>:

void calibration_cond(float sensordata)
{
   84470:	b590      	push	{r4, r7, lr}
   84472:	b087      	sub	sp, #28
   84474:	af00      	add	r7, sp, #0
   84476:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   84478:	f04f 0300 	mov.w	r3, #0
   8447c:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   8447e:	687b      	ldr	r3, [r7, #4]
   84480:	613b      	str	r3, [r7, #16]
	float slope=0;
   84482:	f04f 0300 	mov.w	r3, #0
   84486:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84488:	2300      	movs	r3, #0
   8448a:	617b      	str	r3, [r7, #20]
   8448c:	e08f      	b.n	845ae <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   8448e:	4a4c      	ldr	r2, [pc, #304]	; (845c0 <calibration_cond+0x150>)
   84490:	697b      	ldr	r3, [r7, #20]
   84492:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84496:	b29b      	uxth	r3, r3
   84498:	461a      	mov	r2, r3
   8449a:	4b4a      	ldr	r3, [pc, #296]	; (845c4 <calibration_cond+0x154>)
   8449c:	4610      	mov	r0, r2
   8449e:	4798      	blx	r3
   844a0:	4602      	mov	r2, r0
   844a2:	4b49      	ldr	r3, [pc, #292]	; (845c8 <calibration_cond+0x158>)
   844a4:	6939      	ldr	r1, [r7, #16]
   844a6:	4610      	mov	r0, r2
   844a8:	4798      	blx	r3
   844aa:	4603      	mov	r3, r0
   844ac:	2b00      	cmp	r3, #0
   844ae:	d00c      	beq.n	844ca <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   844b0:	4a43      	ldr	r2, [pc, #268]	; (845c0 <calibration_cond+0x150>)
   844b2:	697b      	ldr	r3, [r7, #20]
   844b4:	009b      	lsls	r3, r3, #2
   844b6:	4413      	add	r3, r2
   844b8:	885b      	ldrh	r3, [r3, #2]
   844ba:	b29a      	uxth	r2, r3
   844bc:	4b43      	ldr	r3, [pc, #268]	; (845cc <calibration_cond+0x15c>)
   844be:	4610      	mov	r0, r2
   844c0:	4798      	blx	r3
   844c2:	4602      	mov	r2, r0
   844c4:	4b42      	ldr	r3, [pc, #264]	; (845d0 <calibration_cond+0x160>)
   844c6:	601a      	str	r2, [r3, #0]
   844c8:	e06e      	b.n	845a8 <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   844ca:	4a3d      	ldr	r2, [pc, #244]	; (845c0 <calibration_cond+0x150>)
   844cc:	697b      	ldr	r3, [r7, #20]
   844ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844d2:	b29b      	uxth	r3, r3
   844d4:	461a      	mov	r2, r3
   844d6:	4b3b      	ldr	r3, [pc, #236]	; (845c4 <calibration_cond+0x154>)
   844d8:	4610      	mov	r0, r2
   844da:	4798      	blx	r3
   844dc:	4602      	mov	r2, r0
   844de:	4b3d      	ldr	r3, [pc, #244]	; (845d4 <calibration_cond+0x164>)
   844e0:	6939      	ldr	r1, [r7, #16]
   844e2:	4610      	mov	r0, r2
   844e4:	4798      	blx	r3
   844e6:	4603      	mov	r3, r0
   844e8:	2b00      	cmp	r3, #0
   844ea:	d05d      	beq.n	845a8 <calibration_cond+0x138>
   844ec:	697b      	ldr	r3, [r7, #20]
   844ee:	3301      	adds	r3, #1
   844f0:	4a33      	ldr	r2, [pc, #204]	; (845c0 <calibration_cond+0x150>)
   844f2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844f6:	b29b      	uxth	r3, r3
   844f8:	461a      	mov	r2, r3
   844fa:	4b32      	ldr	r3, [pc, #200]	; (845c4 <calibration_cond+0x154>)
   844fc:	4610      	mov	r0, r2
   844fe:	4798      	blx	r3
   84500:	4602      	mov	r2, r0
   84502:	4b35      	ldr	r3, [pc, #212]	; (845d8 <calibration_cond+0x168>)
   84504:	6939      	ldr	r1, [r7, #16]
   84506:	4610      	mov	r0, r2
   84508:	4798      	blx	r3
   8450a:	4603      	mov	r3, r0
   8450c:	2b00      	cmp	r3, #0
   8450e:	d04b      	beq.n	845a8 <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   84510:	697b      	ldr	r3, [r7, #20]
   84512:	3301      	adds	r3, #1
   84514:	4a2a      	ldr	r2, [pc, #168]	; (845c0 <calibration_cond+0x150>)
   84516:	009b      	lsls	r3, r3, #2
   84518:	4413      	add	r3, r2
   8451a:	885b      	ldrh	r3, [r3, #2]
   8451c:	b29b      	uxth	r3, r3
   8451e:	4619      	mov	r1, r3
   84520:	4a27      	ldr	r2, [pc, #156]	; (845c0 <calibration_cond+0x150>)
   84522:	697b      	ldr	r3, [r7, #20]
   84524:	009b      	lsls	r3, r3, #2
   84526:	4413      	add	r3, r2
   84528:	885b      	ldrh	r3, [r3, #2]
   8452a:	b29b      	uxth	r3, r3
   8452c:	1aca      	subs	r2, r1, r3
   8452e:	697b      	ldr	r3, [r7, #20]
   84530:	3301      	adds	r3, #1
   84532:	4923      	ldr	r1, [pc, #140]	; (845c0 <calibration_cond+0x150>)
   84534:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84538:	b29b      	uxth	r3, r3
   8453a:	4618      	mov	r0, r3
   8453c:	4920      	ldr	r1, [pc, #128]	; (845c0 <calibration_cond+0x150>)
   8453e:	697b      	ldr	r3, [r7, #20]
   84540:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84544:	b29b      	uxth	r3, r3
   84546:	1ac3      	subs	r3, r0, r3
   84548:	fb92 f2f3 	sdiv	r2, r2, r3
   8454c:	4b1d      	ldr	r3, [pc, #116]	; (845c4 <calibration_cond+0x154>)
   8454e:	4610      	mov	r0, r2
   84550:	4798      	blx	r3
   84552:	4603      	mov	r3, r0
   84554:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   84556:	4a1a      	ldr	r2, [pc, #104]	; (845c0 <calibration_cond+0x150>)
   84558:	697b      	ldr	r3, [r7, #20]
   8455a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8455e:	b29b      	uxth	r3, r3
   84560:	461a      	mov	r2, r3
   84562:	4b18      	ldr	r3, [pc, #96]	; (845c4 <calibration_cond+0x154>)
   84564:	4610      	mov	r0, r2
   84566:	4798      	blx	r3
   84568:	4602      	mov	r2, r0
   8456a:	4b1c      	ldr	r3, [pc, #112]	; (845dc <calibration_cond+0x16c>)
   8456c:	4611      	mov	r1, r2
   8456e:	6938      	ldr	r0, [r7, #16]
   84570:	4798      	blx	r3
   84572:	4603      	mov	r3, r0
   84574:	461a      	mov	r2, r3
   84576:	4b1a      	ldr	r3, [pc, #104]	; (845e0 <calibration_cond+0x170>)
   84578:	68f9      	ldr	r1, [r7, #12]
   8457a:	4610      	mov	r0, r2
   8457c:	4798      	blx	r3
   8457e:	4603      	mov	r3, r0
   84580:	461c      	mov	r4, r3
   84582:	4a0f      	ldr	r2, [pc, #60]	; (845c0 <calibration_cond+0x150>)
   84584:	697b      	ldr	r3, [r7, #20]
   84586:	009b      	lsls	r3, r3, #2
   84588:	4413      	add	r3, r2
   8458a:	885b      	ldrh	r3, [r3, #2]
   8458c:	b29b      	uxth	r3, r3
   8458e:	461a      	mov	r2, r3
   84590:	4b0c      	ldr	r3, [pc, #48]	; (845c4 <calibration_cond+0x154>)
   84592:	4610      	mov	r0, r2
   84594:	4798      	blx	r3
   84596:	4602      	mov	r2, r0
   84598:	4b12      	ldr	r3, [pc, #72]	; (845e4 <calibration_cond+0x174>)
   8459a:	4611      	mov	r1, r2
   8459c:	4620      	mov	r0, r4
   8459e:	4798      	blx	r3
   845a0:	4603      	mov	r3, r0
   845a2:	461a      	mov	r2, r3
   845a4:	4b0a      	ldr	r3, [pc, #40]	; (845d0 <calibration_cond+0x160>)
   845a6:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   845a8:	697b      	ldr	r3, [r7, #20]
   845aa:	3301      	adds	r3, #1
   845ac:	617b      	str	r3, [r7, #20]
   845ae:	697b      	ldr	r3, [r7, #20]
   845b0:	2b31      	cmp	r3, #49	; 0x31
   845b2:	f77f af6c 	ble.w	8448e <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   845b6:	bf00      	nop
   845b8:	371c      	adds	r7, #28
   845ba:	46bd      	mov	sp, r7
   845bc:	bd90      	pop	{r4, r7, pc}
   845be:	bf00      	nop
   845c0:	20071fc4 	.word	0x20071fc4
   845c4:	000a25e5 	.word	0x000a25e5
   845c8:	000a29b5 	.word	0x000a29b5
   845cc:	000a25dd 	.word	0x000a25dd
   845d0:	20071634 	.word	0x20071634
   845d4:	000a29c9 	.word	0x000a29c9
   845d8:	000a2a05 	.word	0x000a2a05
   845dc:	000a2479 	.word	0x000a2479
   845e0:	000a268d 	.word	0x000a268d
   845e4:	000a247d 	.word	0x000a247d

000845e8 <cl_datamanager_init>:
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;


Cl_ReturnCodeType cl_datamanager_init()
{
   845e8:	b480      	push	{r7}
   845ea:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   845ec:	4b1a      	ldr	r3, [pc, #104]	; (84658 <cl_datamanager_init+0x70>)
   845ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   845f2:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   845f4:	4b18      	ldr	r3, [pc, #96]	; (84658 <cl_datamanager_init+0x70>)
   845f6:	f44f 72b9 	mov.w	r2, #370	; 0x172
   845fa:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 138;
   845fc:	4b16      	ldr	r3, [pc, #88]	; (84658 <cl_datamanager_init+0x70>)
   845fe:	228a      	movs	r2, #138	; 0x8a
   84600:	62da      	str	r2, [r3, #44]	; 0x2c
	
	Treatdata[ID_tempulimit] = 375;
   84602:	4b15      	ldr	r3, [pc, #84]	; (84658 <cl_datamanager_init+0x70>)
   84604:	f240 1277 	movw	r2, #375	; 0x177
   84608:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   8460a:	4b13      	ldr	r3, [pc, #76]	; (84658 <cl_datamanager_init+0x70>)
   8460c:	f240 126d 	movw	r2, #365	; 0x16d
   84610:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 139;
   84612:	4b11      	ldr	r3, [pc, #68]	; (84658 <cl_datamanager_init+0x70>)
   84614:	228b      	movs	r2, #139	; 0x8b
   84616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condulimit] = 137;
   8461a:	4b0f      	ldr	r3, [pc, #60]	; (84658 <cl_datamanager_init+0x70>)
   8461c:	2289      	movs	r2, #137	; 0x89
   8461e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_aptulimit] =  400;
   84622:	4b0d      	ldr	r3, [pc, #52]	; (84658 <cl_datamanager_init+0x70>)
   84624:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 0;
   8462c:	4b0a      	ldr	r3, [pc, #40]	; (84658 <cl_datamanager_init+0x70>)
   8462e:	2200      	movs	r2, #0
   84630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 400;
   84634:	4b08      	ldr	r3, [pc, #32]	; (84658 <cl_datamanager_init+0x70>)
   84636:	f44f 72c8 	mov.w	r2, #400	; 0x190
   8463a:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 0;
   8463c:	4b06      	ldr	r3, [pc, #24]	; (84658 <cl_datamanager_init+0x70>)
   8463e:	2200      	movs	r2, #0
   84640:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   84642:	4b05      	ldr	r3, [pc, #20]	; (84658 <cl_datamanager_init+0x70>)
   84644:	2232      	movs	r2, #50	; 0x32
   84646:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   84648:	4b03      	ldr	r3, [pc, #12]	; (84658 <cl_datamanager_init+0x70>)
   8464a:	2200      	movs	r2, #0
   8464c:	665a      	str	r2, [r3, #100]	; 0x64
	
	return CL_OK;
   8464e:	2300      	movs	r3, #0
	
}
   84650:	4618      	mov	r0, r3
   84652:	46bd      	mov	sp, r7
   84654:	bc80      	pop	{r7}
   84656:	4770      	bx	lr
   84658:	20073138 	.word	0x20073138

0008465c <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   8465c:	b580      	push	{r7, lr}
   8465e:	b092      	sub	sp, #72	; 0x48
   84660:	af00      	add	r7, sp, #0
   84662:	4603      	mov	r3, r0
   84664:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84666:	2304      	movs	r3, #4
   84668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8466c:	234a      	movs	r3, #74	; 0x4a
   8466e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84672:	f107 030c 	add.w	r3, r7, #12
   84676:	2232      	movs	r2, #50	; 0x32
   84678:	2100      	movs	r1, #0
   8467a:	4618      	mov	r0, r3
   8467c:	4bbc      	ldr	r3, [pc, #752]	; (84970 <cl_datamamanager+0x314>)
   8467e:	4798      	blx	r3
	
	switch(cl_data_event)
   84680:	79fb      	ldrb	r3, [r7, #7]
   84682:	2b0d      	cmp	r3, #13
   84684:	f000 8361 	beq.w	84d4a <cl_datamamanager+0x6ee>
   84688:	2b0e      	cmp	r3, #14
   8468a:	d001      	beq.n	84690 <cl_datamamanager+0x34>
							
		}
		break;
		
		default:
		break;
   8468c:	f000 bc38 	b.w	84f00 <cl_datamamanager+0x8a4>
	Cl_Uint8Type dataarray[50] = {};
	
	switch(cl_data_event)
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84690:	4bb8      	ldr	r3, [pc, #736]	; (84974 <cl_datamamanager+0x318>)
   84692:	7e1b      	ldrb	r3, [r3, #24]
   84694:	2b00      	cmp	r3, #0
   84696:	f000 8430 	beq.w	84efa <cl_datamamanager+0x89e>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   8469a:	4bb6      	ldr	r3, [pc, #728]	; (84974 <cl_datamamanager+0x318>)
   8469c:	791b      	ldrb	r3, [r3, #4]
   8469e:	3b01      	subs	r3, #1
   846a0:	2b20      	cmp	r3, #32
   846a2:	f200 834e 	bhi.w	84d42 <cl_datamamanager+0x6e6>
   846a6:	a201      	add	r2, pc, #4	; (adr r2, 846ac <cl_datamamanager+0x50>)
   846a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   846ac:	00084731 	.word	0x00084731
   846b0:	00084767 	.word	0x00084767
   846b4:	0008480b 	.word	0x0008480b
   846b8:	00084831 	.word	0x00084831
   846bc:	00084d43 	.word	0x00084d43
   846c0:	00084d43 	.word	0x00084d43
   846c4:	00084d43 	.word	0x00084d43
   846c8:	00084d43 	.word	0x00084d43
   846cc:	00084d43 	.word	0x00084d43
   846d0:	00084d43 	.word	0x00084d43
   846d4:	00084d43 	.word	0x00084d43
   846d8:	00084d43 	.word	0x00084d43
   846dc:	00084d43 	.word	0x00084d43
   846e0:	00084d43 	.word	0x00084d43
   846e4:	00084d43 	.word	0x00084d43
   846e8:	00084d43 	.word	0x00084d43
   846ec:	00084d43 	.word	0x00084d43
   846f0:	00084867 	.word	0x00084867
   846f4:	00084d43 	.word	0x00084d43
   846f8:	00084d43 	.word	0x00084d43
   846fc:	00084d43 	.word	0x00084d43
   84700:	00084d43 	.word	0x00084d43
   84704:	00084d43 	.word	0x00084d43
   84708:	00084d43 	.word	0x00084d43
   8470c:	00084d43 	.word	0x00084d43
   84710:	00084d43 	.word	0x00084d43
   84714:	00084d43 	.word	0x00084d43
   84718:	00084d43 	.word	0x00084d43
   8471c:	00084d43 	.word	0x00084d43
   84720:	0008479d 	.word	0x0008479d
   84724:	00084d43 	.word	0x00084d43
   84728:	000847c3 	.word	0x000847c3
   8472c:	000847e9 	.word	0x000847e9
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84730:	2316      	movs	r3, #22
   84732:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84736:	2301      	movs	r3, #1
   84738:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   8473a:	f107 030c 	add.w	r3, r7, #12
   8473e:	3301      	adds	r3, #1
   84740:	4619      	mov	r1, r3
   84742:	2001      	movs	r0, #1
   84744:	4b8c      	ldr	r3, [pc, #560]	; (84978 <cl_datamamanager+0x31c>)
   84746:	4798      	blx	r3
   84748:	4603      	mov	r3, r0
   8474a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8474e:	f107 010c 	add.w	r1, r7, #12
   84752:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84756:	2202      	movs	r2, #2
   84758:	4618      	mov	r0, r3
   8475a:	4b88      	ldr	r3, [pc, #544]	; (8497c <cl_datamamanager+0x320>)
   8475c:	4798      	blx	r3
   8475e:	4603      	mov	r3, r0
   84760:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84764:	e2f0      	b.n	84d48 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84766:	2316      	movs	r3, #22
   84768:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   8476c:	2302      	movs	r3, #2
   8476e:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84770:	f107 030c 	add.w	r3, r7, #12
   84774:	3301      	adds	r3, #1
   84776:	4619      	mov	r1, r3
   84778:	2002      	movs	r0, #2
   8477a:	4b7f      	ldr	r3, [pc, #508]	; (84978 <cl_datamamanager+0x31c>)
   8477c:	4798      	blx	r3
   8477e:	4603      	mov	r3, r0
   84780:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84784:	f107 010c 	add.w	r1, r7, #12
   84788:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8478c:	2202      	movs	r2, #2
   8478e:	4618      	mov	r0, r3
   84790:	4b7a      	ldr	r3, [pc, #488]	; (8497c <cl_datamamanager+0x320>)
   84792:	4798      	blx	r3
   84794:	4603      	mov	r3, r0
   84796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   8479a:	e2d5      	b.n	84d48 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   8479c:	2316      	movs	r3, #22
   8479e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   847a2:	2320      	movs	r3, #32
   847a4:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   847a6:	2300      	movs	r3, #0
   847a8:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   847aa:	f107 010c 	add.w	r1, r7, #12
   847ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   847b2:	2202      	movs	r2, #2
   847b4:	4618      	mov	r0, r3
   847b6:	4b71      	ldr	r3, [pc, #452]	; (8497c <cl_datamamanager+0x320>)
   847b8:	4798      	blx	r3
   847ba:	4603      	mov	r3, r0
   847bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   847c0:	e2c2      	b.n	84d48 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   847c2:	2316      	movs	r3, #22
   847c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   847c8:	2321      	movs	r3, #33	; 0x21
   847ca:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   847cc:	2300      	movs	r3, #0
   847ce:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   847d0:	f107 010c 	add.w	r1, r7, #12
   847d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   847d8:	2202      	movs	r2, #2
   847da:	4618      	mov	r0, r3
   847dc:	4b67      	ldr	r3, [pc, #412]	; (8497c <cl_datamamanager+0x320>)
   847de:	4798      	blx	r3
   847e0:	4603      	mov	r3, r0
   847e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   847e6:	e2af      	b.n	84d48 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   847e8:	2316      	movs	r3, #22
   847ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   847ee:	2323      	movs	r3, #35	; 0x23
   847f0:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   847f2:	f107 010c 	add.w	r1, r7, #12
   847f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   847fa:	2202      	movs	r2, #2
   847fc:	4618      	mov	r0, r3
   847fe:	4b5f      	ldr	r3, [pc, #380]	; (8497c <cl_datamamanager+0x320>)
   84800:	4798      	blx	r3
   84802:	4603      	mov	r3, r0
   84804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84808:	e29e      	b.n	84d48 <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   8480a:	2316      	movs	r3, #22
   8480c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84810:	2303      	movs	r3, #3
   84812:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84814:	2300      	movs	r3, #0
   84816:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84818:	f107 010c 	add.w	r1, r7, #12
   8481c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84820:	2202      	movs	r2, #2
   84822:	4618      	mov	r0, r3
   84824:	4b55      	ldr	r3, [pc, #340]	; (8497c <cl_datamamanager+0x320>)
   84826:	4798      	blx	r3
   84828:	4603      	mov	r3, r0
   8482a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   8482e:	e28b      	b.n	84d48 <cl_datamamanager+0x6ec>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84830:	2316      	movs	r3, #22
   84832:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84836:	2304      	movs	r3, #4
   84838:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8483a:	f107 030c 	add.w	r3, r7, #12
   8483e:	3301      	adds	r3, #1
   84840:	4619      	mov	r1, r3
   84842:	2004      	movs	r0, #4
   84844:	4b4c      	ldr	r3, [pc, #304]	; (84978 <cl_datamamanager+0x31c>)
   84846:	4798      	blx	r3
   84848:	4603      	mov	r3, r0
   8484a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8484e:	f107 010c 	add.w	r1, r7, #12
   84852:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84856:	2202      	movs	r2, #2
   84858:	4618      	mov	r0, r3
   8485a:	4b48      	ldr	r3, [pc, #288]	; (8497c <cl_datamamanager+0x320>)
   8485c:	4798      	blx	r3
   8485e:	4603      	mov	r3, r0
   84860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84864:	e270      	b.n	84d48 <cl_datamamanager+0x6ec>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84866:	2316      	movs	r3, #22
   84868:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   8486c:	2312      	movs	r3, #18
   8486e:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84870:	4b40      	ldr	r3, [pc, #256]	; (84974 <cl_datamamanager+0x318>)
   84872:	795b      	ldrb	r3, [r3, #5]
   84874:	2b25      	cmp	r3, #37	; 0x25
   84876:	d820      	bhi.n	848ba <cl_datamamanager+0x25e>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84878:	4b3e      	ldr	r3, [pc, #248]	; (84974 <cl_datamamanager+0x318>)
   8487a:	795b      	ldrb	r3, [r3, #5]
   8487c:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   8487e:	7b7b      	ldrb	r3, [r7, #13]
   84880:	461a      	mov	r2, r3
   84882:	4b3f      	ldr	r3, [pc, #252]	; (84980 <cl_datamamanager+0x324>)
   84884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84888:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   8488a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8488e:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84890:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84894:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84896:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8489a:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   8489c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   848a0:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   848a2:	f107 010c 	add.w	r1, r7, #12
   848a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   848aa:	2206      	movs	r2, #6
   848ac:	4618      	mov	r0, r3
   848ae:	4b33      	ldr	r3, [pc, #204]	; (8497c <cl_datamamanager+0x320>)
   848b0:	4798      	blx	r3
   848b2:	4603      	mov	r3, r0
   848b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
					
				}
		

				break;
   848b8:	e245      	b.n	84d46 <cl_datamamanager+0x6ea>
					dataarray[4] = datastream.bytearray[2];
					dataarray[5] = datastream.bytearray[3];

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   848ba:	4b2e      	ldr	r3, [pc, #184]	; (84974 <cl_datamamanager+0x318>)
   848bc:	795b      	ldrb	r3, [r3, #5]
   848be:	2b2d      	cmp	r3, #45	; 0x2d
   848c0:	f200 8241 	bhi.w	84d46 <cl_datamamanager+0x6ea>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   848c4:	4b2b      	ldr	r3, [pc, #172]	; (84974 <cl_datamamanager+0x318>)
   848c6:	795b      	ldrb	r3, [r3, #5]
   848c8:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   848ca:	4b2a      	ldr	r3, [pc, #168]	; (84974 <cl_datamamanager+0x318>)
   848cc:	795b      	ldrb	r3, [r3, #5]
   848ce:	3b26      	subs	r3, #38	; 0x26
   848d0:	2b07      	cmp	r3, #7
   848d2:	f200 8234 	bhi.w	84d3e <cl_datamamanager+0x6e2>
   848d6:	a201      	add	r2, pc, #4	; (adr r2, 848dc <cl_datamamanager+0x280>)
   848d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   848dc:	000848fd 	.word	0x000848fd
   848e0:	000849fd 	.word	0x000849fd
   848e4:	00084d3f 	.word	0x00084d3f
   848e8:	00084985 	.word	0x00084985
   848ec:	00084a6f 	.word	0x00084a6f
   848f0:	00084cc9 	.word	0x00084cc9
   848f4:	00084c4f 	.word	0x00084c4f
   848f8:	00084adf 	.word	0x00084adf
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   848fc:	4b20      	ldr	r3, [pc, #128]	; (84980 <cl_datamamanager+0x324>)
   848fe:	695b      	ldr	r3, [r3, #20]
   84900:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84902:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84906:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84908:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8490c:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   8490e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84912:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84914:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84918:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   8491a:	4b19      	ldr	r3, [pc, #100]	; (84980 <cl_datamamanager+0x324>)
   8491c:	699b      	ldr	r3, [r3, #24]
   8491e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84920:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84924:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84926:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8492a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8492c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84930:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84936:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84938:	4b11      	ldr	r3, [pc, #68]	; (84980 <cl_datamamanager+0x324>)
   8493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8493c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8493e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84942:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84944:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84948:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8494a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8494e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84950:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84954:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84956:	f107 010c 	add.w	r1, r7, #12
   8495a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8495e:	220e      	movs	r2, #14
   84960:	4618      	mov	r0, r3
   84962:	4b06      	ldr	r3, [pc, #24]	; (8497c <cl_datamamanager+0x320>)
   84964:	4798      	blx	r3
   84966:	4603      	mov	r3, r0
   84968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8496c:	e1e8      	b.n	84d40 <cl_datamamanager+0x6e4>
   8496e:	bf00      	nop
   84970:	000a2be1 	.word	0x000a2be1
   84974:	20072f2c 	.word	0x20072f2c
   84978:	0009710d 	.word	0x0009710d
   8497c:	00098601 	.word	0x00098601
   84980:	20073138 	.word	0x20073138
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84984:	4bce      	ldr	r3, [pc, #824]	; (84cc0 <cl_datamamanager+0x664>)
   84986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   8498a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   8498c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84990:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84992:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84996:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84998:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8499c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   8499e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   849a2:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   849a4:	4bc6      	ldr	r3, [pc, #792]	; (84cc0 <cl_datamamanager+0x664>)
   849a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   849aa:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   849ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   849b0:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   849b2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   849b6:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   849b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   849bc:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   849be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   849c2:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   849c4:	4bbe      	ldr	r3, [pc, #760]	; (84cc0 <cl_datamamanager+0x664>)
   849c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   849ca:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   849cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   849d0:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   849d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   849d6:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   849d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   849dc:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   849de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   849e2:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   849e4:	f107 010c 	add.w	r1, r7, #12
   849e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   849ec:	220e      	movs	r2, #14
   849ee:	4618      	mov	r0, r3
   849f0:	4bb4      	ldr	r3, [pc, #720]	; (84cc4 <cl_datamamanager+0x668>)
   849f2:	4798      	blx	r3
   849f4:	4603      	mov	r3, r0
   849f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   849fa:	e1a1      	b.n	84d40 <cl_datamamanager+0x6e4>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   849fc:	4bb0      	ldr	r3, [pc, #704]	; (84cc0 <cl_datamamanager+0x664>)
   849fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84a00:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84a02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a06:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84a08:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a0c:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84a0e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a12:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84a14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a18:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84a1a:	4ba9      	ldr	r3, [pc, #676]	; (84cc0 <cl_datamamanager+0x664>)
   84a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84a1e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84a20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a24:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84a26:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a2a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84a2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a30:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84a32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a36:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84a38:	4ba1      	ldr	r3, [pc, #644]	; (84cc0 <cl_datamamanager+0x664>)
   84a3a:	699b      	ldr	r3, [r3, #24]
   84a3c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84a3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a42:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84a44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a48:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84a4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a4e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84a50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a54:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84a56:	f107 010c 	add.w	r1, r7, #12
   84a5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84a5e:	220e      	movs	r2, #14
   84a60:	4618      	mov	r0, r3
   84a62:	4b98      	ldr	r3, [pc, #608]	; (84cc4 <cl_datamamanager+0x668>)
   84a64:	4798      	blx	r3
   84a66:	4603      	mov	r3, r0
   84a68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84a6c:	e168      	b.n	84d40 <cl_datamamanager+0x6e4>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84a6e:	4b94      	ldr	r3, [pc, #592]	; (84cc0 <cl_datamamanager+0x664>)
   84a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84a72:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84a74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a78:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84a7a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a7e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84a80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a84:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84a86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a8a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84a8c:	4b8c      	ldr	r3, [pc, #560]	; (84cc0 <cl_datamamanager+0x664>)
   84a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84a90:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84a92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a96:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84a98:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a9c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84a9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84aa2:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84aa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84aa8:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84aaa:	23c8      	movs	r3, #200	; 0xc8
   84aac:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84aae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ab2:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84ab4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ab8:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84aba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84abe:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ac4:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84ac6:	f107 010c 	add.w	r1, r7, #12
   84aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84ace:	220e      	movs	r2, #14
   84ad0:	4618      	mov	r0, r3
   84ad2:	4b7c      	ldr	r3, [pc, #496]	; (84cc4 <cl_datamamanager+0x668>)
   84ad4:	4798      	blx	r3
   84ad6:	4603      	mov	r3, r0
   84ad8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84adc:	e130      	b.n	84d40 <cl_datamamanager+0x6e4>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84ade:	4b78      	ldr	r3, [pc, #480]	; (84cc0 <cl_datamamanager+0x664>)
   84ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84ae2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ae8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84aea:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84aee:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84af0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84af4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84afa:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84afc:	4b70      	ldr	r3, [pc, #448]	; (84cc0 <cl_datamamanager+0x664>)
   84afe:	699b      	ldr	r3, [r3, #24]
   84b00:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84b02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b06:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84b08:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b0c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84b0e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b12:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84b14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b18:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84b1a:	4b69      	ldr	r3, [pc, #420]	; (84cc0 <cl_datamamanager+0x664>)
   84b1c:	695b      	ldr	r3, [r3, #20]
   84b1e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84b20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b24:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84b26:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b2a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b30:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84b32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b36:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84b38:	4b61      	ldr	r3, [pc, #388]	; (84cc0 <cl_datamamanager+0x664>)
   84b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84b3c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84b3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b42:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84b44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b48:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84b4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b4e:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84b50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b54:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84b56:	4b5a      	ldr	r3, [pc, #360]	; (84cc0 <cl_datamamanager+0x664>)
   84b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84b5a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84b5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b60:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84b62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b66:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84b68:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b6c:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84b78:	4b51      	ldr	r3, [pc, #324]	; (84cc0 <cl_datamamanager+0x664>)
   84b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84b7c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84b7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84b86:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84b8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84b96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84b9e:	4b48      	ldr	r3, [pc, #288]	; (84cc0 <cl_datamamanager+0x664>)
   84ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84ba2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84ba4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84bac:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   84bb4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84bb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84bbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84bc0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   84bc4:	4b3e      	ldr	r3, [pc, #248]	; (84cc0 <cl_datamamanager+0x664>)
   84bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   84bc8:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84bca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84bce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84bd2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84bda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84bde:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84be2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84be6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   84bea:	4b35      	ldr	r3, [pc, #212]	; (84cc0 <cl_datamamanager+0x664>)
   84bec:	69db      	ldr	r3, [r3, #28]
   84bee:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   84bf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84bf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   84bf8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84c00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   84c08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c0c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   84c10:	4b2b      	ldr	r3, [pc, #172]	; (84cc0 <cl_datamamanager+0x664>)
   84c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84c14:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   84c16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   84c1e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   84c26:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   84c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   84c36:	f107 010c 	add.w	r1, r7, #12
   84c3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c3e:	222a      	movs	r2, #42	; 0x2a
   84c40:	4618      	mov	r0, r3
   84c42:	4b20      	ldr	r3, [pc, #128]	; (84cc4 <cl_datamamanager+0x668>)
   84c44:	4798      	blx	r3
   84c46:	4603      	mov	r3, r0
   84c48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84c4c:	e078      	b.n	84d40 <cl_datamamanager+0x6e4>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   84c4e:	4b1c      	ldr	r3, [pc, #112]	; (84cc0 <cl_datamamanager+0x664>)
   84c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84c52:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84c54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c58:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84c5a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c5e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84c60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c64:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84c66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c6a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   84c6c:	4b14      	ldr	r3, [pc, #80]	; (84cc0 <cl_datamamanager+0x664>)
   84c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   84c70:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84c72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c76:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84c78:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c7c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84c7e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c82:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84c84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c88:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   84c8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   84c8e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84c90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c94:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84c96:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c9a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84c9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ca0:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ca6:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84ca8:	f107 010c 	add.w	r1, r7, #12
   84cac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84cb0:	220e      	movs	r2, #14
   84cb2:	4618      	mov	r0, r3
   84cb4:	4b03      	ldr	r3, [pc, #12]	; (84cc4 <cl_datamamanager+0x668>)
   84cb6:	4798      	blx	r3
   84cb8:	4603      	mov	r3, r0
   84cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84cbe:	e03f      	b.n	84d40 <cl_datamamanager+0x6e4>
   84cc0:	20073138 	.word	0x20073138
   84cc4:	00098601 	.word	0x00098601
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   84cc8:	4b90      	ldr	r3, [pc, #576]	; (84f0c <cl_datamamanager+0x8b0>)
   84cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   84cce:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84cd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cd4:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84cd6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cda:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84cdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ce0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ce6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   84ce8:	4b88      	ldr	r3, [pc, #544]	; (84f0c <cl_datamamanager+0x8b0>)
   84cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   84cee:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84cf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cf4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84cf6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cfa:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84cfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d00:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d06:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   84d08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   84d0c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d12:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d14:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d18:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d1e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d24:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84d26:	f107 010c 	add.w	r1, r7, #12
   84d2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84d2e:	220e      	movs	r2, #14
   84d30:	4618      	mov	r0, r3
   84d32:	4b77      	ldr	r3, [pc, #476]	; (84f10 <cl_datamamanager+0x8b4>)
   84d34:	4798      	blx	r3
   84d36:	4603      	mov	r3, r0
   84d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84d3c:	e000      	b.n	84d40 <cl_datamamanager+0x6e4>
						
						default:break;
   84d3e:	bf00      	nop
					}
					
				}
		

				break;
   84d40:	e001      	b.n	84d46 <cl_datamamanager+0x6ea>
				
				default:
				break;
   84d42:	bf00      	nop
   84d44:	e0d9      	b.n	84efa <cl_datamamanager+0x89e>
					}
					
				}
		

				break;
   84d46:	bf00      	nop
				
				default:
				break;
			}
		}
		break;
   84d48:	e0d7      	b.n	84efa <cl_datamamanager+0x89e>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84d4a:	4b72      	ldr	r3, [pc, #456]	; (84f14 <cl_datamamanager+0x8b8>)
   84d4c:	7e1b      	ldrb	r3, [r3, #24]
   84d4e:	2b00      	cmp	r3, #0
   84d50:	f000 80d5 	beq.w	84efe <cl_datamamanager+0x8a2>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   84d54:	4b6f      	ldr	r3, [pc, #444]	; (84f14 <cl_datamamanager+0x8b8>)
   84d56:	791b      	ldrb	r3, [r3, #4]
   84d58:	2b12      	cmp	r3, #18
   84d5a:	d000      	beq.n	84d5e <cl_datamamanager+0x702>
						break;

						default:break;
					}
				break;
				default:break;
   84d5c:	e0cc      	b.n	84ef8 <cl_datamamanager+0x89c>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84d5e:	4b6d      	ldr	r3, [pc, #436]	; (84f14 <cl_datamamanager+0x8b8>)
   84d60:	795b      	ldrb	r3, [r3, #5]
   84d62:	2b25      	cmp	r3, #37	; 0x25
   84d64:	d818      	bhi.n	84d98 <cl_datamamanager+0x73c>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84d66:	4b6b      	ldr	r3, [pc, #428]	; (84f14 <cl_datamamanager+0x8b8>)
   84d68:	795b      	ldrb	r3, [r3, #5]
   84d6a:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   84d6c:	4b69      	ldr	r3, [pc, #420]	; (84f14 <cl_datamamanager+0x8b8>)
   84d6e:	799b      	ldrb	r3, [r3, #6]
   84d70:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   84d74:	4b67      	ldr	r3, [pc, #412]	; (84f14 <cl_datamamanager+0x8b8>)
   84d76:	79db      	ldrb	r3, [r3, #7]
   84d78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   84d7c:	4b65      	ldr	r3, [pc, #404]	; (84f14 <cl_datamamanager+0x8b8>)
   84d7e:	7a1b      	ldrb	r3, [r3, #8]
   84d80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   84d84:	4b63      	ldr	r3, [pc, #396]	; (84f14 <cl_datamamanager+0x8b8>)
   84d86:	7a5b      	ldrb	r3, [r3, #9]
   84d88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   84d8c:	7b7b      	ldrb	r3, [r7, #13]
   84d8e:	4619      	mov	r1, r3
   84d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d92:	4a5e      	ldr	r2, [pc, #376]	; (84f0c <cl_datamamanager+0x8b0>)
   84d94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   84d98:	4b5e      	ldr	r3, [pc, #376]	; (84f14 <cl_datamamanager+0x8b8>)
   84d9a:	795b      	ldrb	r3, [r3, #5]
   84d9c:	3b05      	subs	r3, #5
   84d9e:	2b20      	cmp	r3, #32
   84da0:	f200 80a8 	bhi.w	84ef4 <cl_datamamanager+0x898>
   84da4:	a201      	add	r2, pc, #4	; (adr r2, 84dac <cl_datamamanager+0x750>)
   84da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84daa:	bf00      	nop
   84dac:	00084ef5 	.word	0x00084ef5
   84db0:	00084ef5 	.word	0x00084ef5
   84db4:	00084ef5 	.word	0x00084ef5
   84db8:	00084ef5 	.word	0x00084ef5
   84dbc:	00084ef5 	.word	0x00084ef5
   84dc0:	00084ef5 	.word	0x00084ef5
   84dc4:	00084ef5 	.word	0x00084ef5
   84dc8:	00084ef5 	.word	0x00084ef5
   84dcc:	00084ef5 	.word	0x00084ef5
   84dd0:	00084ef5 	.word	0x00084ef5
   84dd4:	00084ef5 	.word	0x00084ef5
   84dd8:	00084ef5 	.word	0x00084ef5
   84ddc:	00084ef5 	.word	0x00084ef5
   84de0:	00084ef5 	.word	0x00084ef5
   84de4:	00084ef5 	.word	0x00084ef5
   84de8:	00084ef5 	.word	0x00084ef5
   84dec:	00084ef5 	.word	0x00084ef5
   84df0:	00084ef5 	.word	0x00084ef5
   84df4:	00084ef5 	.word	0x00084ef5
   84df8:	00084e31 	.word	0x00084e31
   84dfc:	00084e49 	.word	0x00084e49
   84e00:	00084e61 	.word	0x00084e61
   84e04:	00084e71 	.word	0x00084e71
   84e08:	00084e81 	.word	0x00084e81
   84e0c:	00084e91 	.word	0x00084e91
   84e10:	00084ef5 	.word	0x00084ef5
   84e14:	00084ef5 	.word	0x00084ef5
   84e18:	00084ef5 	.word	0x00084ef5
   84e1c:	00084ef5 	.word	0x00084ef5
   84e20:	00084ea9 	.word	0x00084ea9
   84e24:	00084ebb 	.word	0x00084ebb
   84e28:	00084ecd 	.word	0x00084ecd
   84e2c:	00084edd 	.word	0x00084edd
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word)/10;
   84e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84e32:	4a39      	ldr	r2, [pc, #228]	; (84f18 <cl_datamamanager+0x8bc>)
   84e34:	fba2 2303 	umull	r2, r3, r2, r3
   84e38:	08da      	lsrs	r2, r3, #3
   84e3a:	4b38      	ldr	r3, [pc, #224]	; (84f1c <cl_datamamanager+0x8c0>)
   84e3c:	4610      	mov	r0, r2
   84e3e:	4798      	blx	r3
   84e40:	4602      	mov	r2, r0
   84e42:	4b37      	ldr	r3, [pc, #220]	; (84f20 <cl_datamamanager+0x8c4>)
   84e44:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   84e46:	e056      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word)/10;
   84e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84e4a:	4a33      	ldr	r2, [pc, #204]	; (84f18 <cl_datamamanager+0x8bc>)
   84e4c:	fba2 2303 	umull	r2, r3, r2, r3
   84e50:	08da      	lsrs	r2, r3, #3
   84e52:	4b32      	ldr	r3, [pc, #200]	; (84f1c <cl_datamamanager+0x8c0>)
   84e54:	4610      	mov	r0, r2
   84e56:	4798      	blx	r3
   84e58:	4602      	mov	r2, r0
   84e5a:	4b31      	ldr	r3, [pc, #196]	; (84f20 <cl_datamamanager+0x8c4>)
   84e5c:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   84e5e:	e04a      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   84e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e62:	4b2e      	ldr	r3, [pc, #184]	; (84f1c <cl_datamamanager+0x8c0>)
   84e64:	4610      	mov	r0, r2
   84e66:	4798      	blx	r3
   84e68:	4602      	mov	r2, r0
   84e6a:	4b2d      	ldr	r3, [pc, #180]	; (84f20 <cl_datamamanager+0x8c4>)
   84e6c:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   84e6e:	e042      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   84e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e72:	4b2a      	ldr	r3, [pc, #168]	; (84f1c <cl_datamamanager+0x8c0>)
   84e74:	4610      	mov	r0, r2
   84e76:	4798      	blx	r3
   84e78:	4602      	mov	r2, r0
   84e7a:	4b29      	ldr	r3, [pc, #164]	; (84f20 <cl_datamamanager+0x8c4>)
   84e7c:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   84e7e:	e03a      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  (datastream.word);
   84e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e82:	4b26      	ldr	r3, [pc, #152]	; (84f1c <cl_datamamanager+0x8c0>)
   84e84:	4610      	mov	r0, r2
   84e86:	4798      	blx	r3
   84e88:	4602      	mov	r2, r0
   84e8a:	4b25      	ldr	r3, [pc, #148]	; (84f20 <cl_datamamanager+0x8c4>)
   84e8c:	615a      	str	r2, [r3, #20]
						break;
   84e8e:	e032      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  (datastream.word)/100;
   84e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84e92:	4a24      	ldr	r2, [pc, #144]	; (84f24 <cl_datamamanager+0x8c8>)
   84e94:	fba2 2303 	umull	r2, r3, r2, r3
   84e98:	095a      	lsrs	r2, r3, #5
   84e9a:	4b20      	ldr	r3, [pc, #128]	; (84f1c <cl_datamamanager+0x8c0>)
   84e9c:	4610      	mov	r0, r2
   84e9e:	4798      	blx	r3
   84ea0:	4602      	mov	r2, r0
   84ea2:	4b1f      	ldr	r3, [pc, #124]	; (84f20 <cl_datamamanager+0x8c4>)
   84ea4:	611a      	str	r2, [r3, #16]
						break;
   84ea6:	e026      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word/10;
   84ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84eaa:	4a1b      	ldr	r2, [pc, #108]	; (84f18 <cl_datamamanager+0x8bc>)
   84eac:	fba2 2303 	umull	r2, r3, r2, r3
   84eb0:	08db      	lsrs	r3, r3, #3
   84eb2:	b21a      	sxth	r2, r3
   84eb4:	4b1a      	ldr	r3, [pc, #104]	; (84f20 <cl_datamamanager+0x8c4>)
   84eb6:	801a      	strh	r2, [r3, #0]
						break;
   84eb8:	e01d      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word/10;
   84eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84ebc:	4a16      	ldr	r2, [pc, #88]	; (84f18 <cl_datamamanager+0x8bc>)
   84ebe:	fba2 2303 	umull	r2, r3, r2, r3
   84ec2:	08db      	lsrs	r3, r3, #3
   84ec4:	b21a      	sxth	r2, r3
   84ec6:	4b16      	ldr	r3, [pc, #88]	; (84f20 <cl_datamamanager+0x8c4>)
   84ec8:	805a      	strh	r2, [r3, #2]
						break;
   84eca:	e014      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   84ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84ece:	4b13      	ldr	r3, [pc, #76]	; (84f1c <cl_datamamanager+0x8c0>)
   84ed0:	4610      	mov	r0, r2
   84ed2:	4798      	blx	r3
   84ed4:	4602      	mov	r2, r0
   84ed6:	4b12      	ldr	r3, [pc, #72]	; (84f20 <cl_datamamanager+0x8c4>)
   84ed8:	60da      	str	r2, [r3, #12]
						break;
   84eda:	e00c      	b.n	84ef6 <cl_datamamanager+0x89a>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word)/100;
   84edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84ede:	4a11      	ldr	r2, [pc, #68]	; (84f24 <cl_datamamanager+0x8c8>)
   84ee0:	fba2 2303 	umull	r2, r3, r2, r3
   84ee4:	095a      	lsrs	r2, r3, #5
   84ee6:	4b0d      	ldr	r3, [pc, #52]	; (84f1c <cl_datamamanager+0x8c0>)
   84ee8:	4610      	mov	r0, r2
   84eea:	4798      	blx	r3
   84eec:	4602      	mov	r2, r0
   84eee:	4b0c      	ldr	r3, [pc, #48]	; (84f20 <cl_datamamanager+0x8c4>)
   84ef0:	609a      	str	r2, [r3, #8]
						break;
   84ef2:	e000      	b.n	84ef6 <cl_datamamanager+0x89a>

						default:break;
   84ef4:	bf00      	nop
					}
				break;
   84ef6:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   84ef8:	e001      	b.n	84efe <cl_datamamanager+0x8a2>
				
				default:
				break;
			}
		}
		break;
   84efa:	bf00      	nop
   84efc:	e000      	b.n	84f00 <cl_datamamanager+0x8a4>
				default:break;
			}
							
							
		}
		break;
   84efe:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   84f00:	2300      	movs	r3, #0
}
   84f02:	4618      	mov	r0, r3
   84f04:	3748      	adds	r7, #72	; 0x48
   84f06:	46bd      	mov	sp, r7
   84f08:	bd80      	pop	{r7, pc}
   84f0a:	bf00      	nop
   84f0c:	20073138 	.word	0x20073138
   84f10:	00098601 	.word	0x00098601
   84f14:	20072f2c 	.word	0x20072f2c
   84f18:	cccccccd 	.word	0xcccccccd
   84f1c:	000a25dd 	.word	0x000a25dd
   84f20:	20072c9c 	.word	0x20072c9c
   84f24:	51eb851f 	.word	0x51eb851f

00084f28 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   84f28:	b480      	push	{r7}
   84f2a:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   84f2c:	4b2a      	ldr	r3, [pc, #168]	; (84fd8 <Cl_dlsis_init+0xb0>)
   84f2e:	2200      	movs	r2, #0
   84f30:	601a      	str	r2, [r3, #0]
   84f32:	4b2a      	ldr	r3, [pc, #168]	; (84fdc <Cl_dlsis_init+0xb4>)
   84f34:	2200      	movs	r2, #0
   84f36:	601a      	str	r2, [r3, #0]
   84f38:	4b29      	ldr	r3, [pc, #164]	; (84fe0 <Cl_dlsis_init+0xb8>)
   84f3a:	2200      	movs	r2, #0
   84f3c:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   84f3e:	4b29      	ldr	r3, [pc, #164]	; (84fe4 <Cl_dlsis_init+0xbc>)
   84f40:	2200      	movs	r2, #0
   84f42:	601a      	str	r2, [r3, #0]
   84f44:	4b28      	ldr	r3, [pc, #160]	; (84fe8 <Cl_dlsis_init+0xc0>)
   84f46:	2200      	movs	r2, #0
   84f48:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   84f4a:	4b28      	ldr	r3, [pc, #160]	; (84fec <Cl_dlsis_init+0xc4>)
   84f4c:	2200      	movs	r2, #0
   84f4e:	701a      	strb	r2, [r3, #0]
   84f50:	4b27      	ldr	r3, [pc, #156]	; (84ff0 <Cl_dlsis_init+0xc8>)
   84f52:	2200      	movs	r2, #0
   84f54:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   84f56:	4b27      	ldr	r3, [pc, #156]	; (84ff4 <Cl_dlsis_init+0xcc>)
   84f58:	2200      	movs	r2, #0
   84f5a:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   84f5c:	4b26      	ldr	r3, [pc, #152]	; (84ff8 <Cl_dlsis_init+0xd0>)
   84f5e:	2200      	movs	r2, #0
   84f60:	801a      	strh	r2, [r3, #0]
   84f62:	4b26      	ldr	r3, [pc, #152]	; (84ffc <Cl_dlsis_init+0xd4>)
   84f64:	2200      	movs	r2, #0
   84f66:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   84f68:	4b25      	ldr	r3, [pc, #148]	; (85000 <Cl_dlsis_init+0xd8>)
   84f6a:	2200      	movs	r2, #0
   84f6c:	801a      	strh	r2, [r3, #0]
   84f6e:	4b25      	ldr	r3, [pc, #148]	; (85004 <Cl_dlsis_init+0xdc>)
   84f70:	2200      	movs	r2, #0
   84f72:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   84f74:	4b24      	ldr	r3, [pc, #144]	; (85008 <Cl_dlsis_init+0xe0>)
   84f76:	2200      	movs	r2, #0
   84f78:	701a      	strb	r2, [r3, #0]
   bc_flag=0;
   84f7a:	4b24      	ldr	r3, [pc, #144]	; (8500c <Cl_dlsis_init+0xe4>)
   84f7c:	2200      	movs	r2, #0
   84f7e:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   84f80:	4b23      	ldr	r3, [pc, #140]	; (85010 <Cl_dlsis_init+0xe8>)
   84f82:	2200      	movs	r2, #0
   84f84:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   84f86:	4b23      	ldr	r3, [pc, #140]	; (85014 <Cl_dlsis_init+0xec>)
   84f88:	f04f 0200 	mov.w	r2, #0
   84f8c:	601a      	str	r2, [r3, #0]
   84f8e:	4b22      	ldr	r3, [pc, #136]	; (85018 <Cl_dlsis_init+0xf0>)
   84f90:	f04f 0200 	mov.w	r2, #0
   84f94:	601a      	str	r2, [r3, #0]
   84f96:	4b21      	ldr	r3, [pc, #132]	; (8501c <Cl_dlsis_init+0xf4>)
   84f98:	f04f 0200 	mov.w	r2, #0
   84f9c:	601a      	str	r2, [r3, #0]
   84f9e:	4b20      	ldr	r3, [pc, #128]	; (85020 <Cl_dlsis_init+0xf8>)
   84fa0:	f04f 0200 	mov.w	r2, #0
   84fa4:	601a      	str	r2, [r3, #0]
   84fa6:	4b1f      	ldr	r3, [pc, #124]	; (85024 <Cl_dlsis_init+0xfc>)
   84fa8:	f04f 0200 	mov.w	r2, #0
   84fac:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   84fae:	4b1e      	ldr	r3, [pc, #120]	; (85028 <Cl_dlsis_init+0x100>)
   84fb0:	f04f 0200 	mov.w	r2, #0
   84fb4:	601a      	str	r2, [r3, #0]
   84fb6:	4b1d      	ldr	r3, [pc, #116]	; (8502c <Cl_dlsis_init+0x104>)
   84fb8:	f04f 0200 	mov.w	r2, #0
   84fbc:	601a      	str	r2, [r3, #0]
   84fbe:	4b1c      	ldr	r3, [pc, #112]	; (85030 <Cl_dlsis_init+0x108>)
   84fc0:	f04f 0200 	mov.w	r2, #0
   84fc4:	601a      	str	r2, [r3, #0]
   84fc6:	4b1b      	ldr	r3, [pc, #108]	; (85034 <Cl_dlsis_init+0x10c>)
   84fc8:	f04f 0200 	mov.w	r2, #0
   84fcc:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   84fce:	2300      	movs	r3, #0
 }
   84fd0:	4618      	mov	r0, r3
   84fd2:	46bd      	mov	sp, r7
   84fd4:	bc80      	pop	{r7}
   84fd6:	4770      	bx	lr
   84fd8:	20072090 	.word	0x20072090
   84fdc:	20072094 	.word	0x20072094
   84fe0:	20072098 	.word	0x20072098
   84fe4:	2007209c 	.word	0x2007209c
   84fe8:	200720a0 	.word	0x200720a0
   84fec:	200720a4 	.word	0x200720a4
   84ff0:	200720a5 	.word	0x200720a5
   84ff4:	20072d14 	.word	0x20072d14
   84ff8:	200720a6 	.word	0x200720a6
   84ffc:	200720a8 	.word	0x200720a8
   85000:	20072d10 	.word	0x20072d10
   85004:	20072d16 	.word	0x20072d16
   85008:	200720aa 	.word	0x200720aa
   8500c:	200720ab 	.word	0x200720ab
   85010:	200720ac 	.word	0x200720ac
   85014:	200720b0 	.word	0x200720b0
   85018:	200720b4 	.word	0x200720b4
   8501c:	200720b8 	.word	0x200720b8
   85020:	200720bc 	.word	0x200720bc
   85024:	200720c0 	.word	0x200720c0
   85028:	200720c4 	.word	0x200720c4
   8502c:	200720c8 	.word	0x200720c8
   85030:	200720cc 	.word	0x200720cc
   85034:	200720d0 	.word	0x200720d0

00085038 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   85038:	b580      	push	{r7, lr}
   8503a:	b094      	sub	sp, #80	; 0x50
   8503c:	af00      	add	r7, sp, #0
   8503e:	4603      	mov	r3, r0
   85040:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   85042:	2300      	movs	r3, #0
   85044:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   85048:	2300      	movs	r3, #0
   8504a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
   8504e:	2300      	movs	r3, #0
   85050:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   85054:	2300      	movs	r3, #0
   85056:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
   8505a:	2300      	movs	r3, #0
   8505c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   85060:	2300      	movs	r3, #0
   85062:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   85066:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8506a:	2200      	movs	r2, #0
   8506c:	601a      	str	r2, [r3, #0]
   8506e:	605a      	str	r2, [r3, #4]
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85070:	234a      	movs	r3, #74	; 0x4a
   85072:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
Cl_Uint8Type data = 0;
   85076:	2300      	movs	r3, #0
   85078:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
Cl_Uint16Type tempcount=0;
   8507c:	2300      	movs	r3, #0
   8507e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
float temp;
//static float apt=0, vpt=0;

Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   85082:	f107 023f 	add.w	r2, r7, #63	; 0x3f
   85086:	79fb      	ldrb	r3, [r7, #7]
   85088:	4611      	mov	r1, r2
   8508a:	4618      	mov	r0, r3
   8508c:	4bc4      	ldr	r3, [pc, #784]	; (853a0 <Cl_Dlsis_controller+0x368>)
   8508e:	4798      	blx	r3
   85090:	4603      	mov	r3, r0
   85092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	switch(cl_dlsis_event)
   85096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   8509a:	3b11      	subs	r3, #17
   8509c:	2b11      	cmp	r3, #17
   8509e:	f200 8086 	bhi.w	851ae <Cl_Dlsis_controller+0x176>
   850a2:	a201      	add	r2, pc, #4	; (adr r2, 850a8 <Cl_Dlsis_controller+0x70>)
   850a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   850a8:	000851af 	.word	0x000851af
   850ac:	000851af 	.word	0x000851af
   850b0:	000850f1 	.word	0x000850f1
   850b4:	000851af 	.word	0x000851af
   850b8:	000851af 	.word	0x000851af
   850bc:	000851af 	.word	0x000851af
   850c0:	000851af 	.word	0x000851af
   850c4:	000851af 	.word	0x000851af
   850c8:	000851af 	.word	0x000851af
   850cc:	000851af 	.word	0x000851af
   850d0:	000851af 	.word	0x000851af
   850d4:	000851af 	.word	0x000851af
   850d8:	00085173 	.word	0x00085173
   850dc:	0008515f 	.word	0x0008515f
   850e0:	00085169 	.word	0x00085169
   850e4:	000850ff 	.word	0x000850ff
   850e8:	00085147 	.word	0x00085147
   850ec:	00085155 	.word	0x00085155
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   850f0:	2002      	movs	r0, #2
   850f2:	4bac      	ldr	r3, [pc, #688]	; (853a4 <Cl_Dlsis_controller+0x36c>)
   850f4:	4798      	blx	r3
   850f6:	4603      	mov	r3, r0
   850f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
   850fc:	e05c      	b.n	851b8 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_TICK_50MS:
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   850fe:	4baa      	ldr	r3, [pc, #680]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85100:	7e1b      	ldrb	r3, [r3, #24]
   85102:	2b00      	cmp	r3, #0
   85104:	d055      	beq.n	851b2 <Cl_Dlsis_controller+0x17a>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85106:	4ba8      	ldr	r3, [pc, #672]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85108:	791b      	ldrb	r3, [r3, #4]
   8510a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8510e:	4ba6      	ldr	r3, [pc, #664]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85110:	795b      	ldrb	r3, [r3, #5]
   85112:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85116:	4ba4      	ldr	r3, [pc, #656]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85118:	799b      	ldrb	r3, [r3, #6]
   8511a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8511e:	4ba2      	ldr	r3, [pc, #648]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85120:	79db      	ldrb	r3, [r3, #7]
   85122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   85126:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   85128:	461a      	mov	r2, r3
   8512a:	4ba0      	ldr	r3, [pc, #640]	; (853ac <Cl_Dlsis_controller+0x374>)
   8512c:	61da      	str	r2, [r3, #28]
				hep_calibration(Treatdata[ID_heprate]);
   8512e:	4b9f      	ldr	r3, [pc, #636]	; (853ac <Cl_Dlsis_controller+0x374>)
   85130:	69db      	ldr	r3, [r3, #28]
   85132:	4618      	mov	r0, r3
   85134:	4b9e      	ldr	r3, [pc, #632]	; (853b0 <Cl_Dlsis_controller+0x378>)
   85136:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85138:	4b9e      	ldr	r3, [pc, #632]	; (853b4 <Cl_Dlsis_controller+0x37c>)
   8513a:	681b      	ldr	r3, [r3, #0]
   8513c:	4619      	mov	r1, r3
   8513e:	2006      	movs	r0, #6
   85140:	4b9d      	ldr	r3, [pc, #628]	; (853b8 <Cl_Dlsis_controller+0x380>)
   85142:	4798      	blx	r3
			}
		break;
   85144:	e035      	b.n	851b2 <Cl_Dlsis_controller+0x17a>
		case EVENT_DLSIS_HEP_ON:
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   85146:	4b9b      	ldr	r3, [pc, #620]	; (853b4 <Cl_Dlsis_controller+0x37c>)
   85148:	681b      	ldr	r3, [r3, #0]
   8514a:	4619      	mov	r1, r3
   8514c:	200a      	movs	r0, #10
   8514e:	4b9a      	ldr	r3, [pc, #616]	; (853b8 <Cl_Dlsis_controller+0x380>)
   85150:	4798      	blx	r3
		break;
   85152:	e031      	b.n	851b8 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   85154:	2100      	movs	r1, #0
   85156:	2009      	movs	r0, #9
   85158:	4b97      	ldr	r3, [pc, #604]	; (853b8 <Cl_Dlsis_controller+0x380>)
   8515a:	4798      	blx	r3
		break;
   8515c:	e02c      	b.n	851b8 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   8515e:	2100      	movs	r1, #0
   85160:	2002      	movs	r0, #2
   85162:	4b96      	ldr	r3, [pc, #600]	; (853bc <Cl_Dlsis_controller+0x384>)
   85164:	4798      	blx	r3
		break;
   85166:	e027      	b.n	851b8 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   85168:	2100      	movs	r1, #0
   8516a:	2004      	movs	r0, #4
   8516c:	4b93      	ldr	r3, [pc, #588]	; (853bc <Cl_Dlsis_controller+0x384>)
   8516e:	4798      	blx	r3
		break;
   85170:	e022      	b.n	851b8 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   85172:	4b8d      	ldr	r3, [pc, #564]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85174:	7e1b      	ldrb	r3, [r3, #24]
   85176:	2b00      	cmp	r3, #0
   85178:	d01d      	beq.n	851b6 <Cl_Dlsis_controller+0x17e>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8517a:	4b8b      	ldr	r3, [pc, #556]	; (853a8 <Cl_Dlsis_controller+0x370>)
   8517c:	791b      	ldrb	r3, [r3, #4]
   8517e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85182:	4b89      	ldr	r3, [pc, #548]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85184:	795b      	ldrb	r3, [r3, #5]
   85186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8518a:	4b87      	ldr	r3, [pc, #540]	; (853a8 <Cl_Dlsis_controller+0x370>)
   8518c:	799b      	ldrb	r3, [r3, #6]
   8518e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85192:	4b85      	ldr	r3, [pc, #532]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85194:	79db      	ldrb	r3, [r3, #7]
   85196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   8519a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8519c:	4619      	mov	r1, r3
   8519e:	2001      	movs	r0, #1
   851a0:	4b86      	ldr	r3, [pc, #536]	; (853bc <Cl_Dlsis_controller+0x384>)
   851a2:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   851a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   851a6:	461a      	mov	r2, r3
   851a8:	4b80      	ldr	r3, [pc, #512]	; (853ac <Cl_Dlsis_controller+0x374>)
   851aa:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   851ac:	e003      	b.n	851b6 <Cl_Dlsis_controller+0x17e>
		default:break;
   851ae:	bf00      	nop
   851b0:	e002      	b.n	851b8 <Cl_Dlsis_controller+0x180>
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
				Treatdata[ID_heprate] = cl_temp.Twobyte;
				hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
			}
		break;
   851b2:	bf00      	nop
   851b4:	e000      	b.n	851b8 <Cl_Dlsis_controller+0x180>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   851b6:	bf00      	nop
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   851b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   851bc:	2b13      	cmp	r3, #19
   851be:	d115      	bne.n	851ec <Cl_Dlsis_controller+0x1b4>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   851c0:	200c      	movs	r0, #12
   851c2:	4b7f      	ldr	r3, [pc, #508]	; (853c0 <Cl_Dlsis_controller+0x388>)
   851c4:	4798      	blx	r3
   851c6:	4603      	mov	r3, r0
   851c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   851cc:	200e      	movs	r0, #14
   851ce:	4b7c      	ldr	r3, [pc, #496]	; (853c0 <Cl_Dlsis_controller+0x388>)
   851d0:	4798      	blx	r3
   851d2:	4603      	mov	r3, r0
   851d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   851d8:	200d      	movs	r0, #13
   851da:	4b79      	ldr	r3, [pc, #484]	; (853c0 <Cl_Dlsis_controller+0x388>)
   851dc:	4798      	blx	r3
   851de:	4603      	mov	r3, r0
   851e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   851e4:	4b77      	ldr	r3, [pc, #476]	; (853c4 <Cl_Dlsis_controller+0x38c>)
   851e6:	781a      	ldrb	r2, [r3, #0]
   851e8:	4b77      	ldr	r3, [pc, #476]	; (853c8 <Cl_Dlsis_controller+0x390>)
   851ea:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   851ec:	4b75      	ldr	r3, [pc, #468]	; (853c4 <Cl_Dlsis_controller+0x38c>)
   851ee:	781b      	ldrb	r3, [r3, #0]
   851f0:	2b0a      	cmp	r3, #10
   851f2:	f200 86db 	bhi.w	85fac <Cl_Dlsis_controller+0xf74>
   851f6:	a201      	add	r2, pc, #4	; (adr r2, 851fc <Cl_Dlsis_controller+0x1c4>)
   851f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851fc:	00085229 	.word	0x00085229
   85200:	00085fad 	.word	0x00085fad
   85204:	000854a1 	.word	0x000854a1
   85208:	000854cd 	.word	0x000854cd
   8520c:	000855ef 	.word	0x000855ef
   85210:	000855cb 	.word	0x000855cb
   85214:	00085d01 	.word	0x00085d01
   85218:	00085a5b 	.word	0x00085a5b
   8521c:	00085a39 	.word	0x00085a39
   85220:	00085a77 	.word	0x00085a77
   85224:	00085a95 	.word	0x00085a95
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   85228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   8522c:	3b02      	subs	r3, #2
   8522e:	2b14      	cmp	r3, #20
   85230:	f200 812d 	bhi.w	8548e <Cl_Dlsis_controller+0x456>
   85234:	a201      	add	r2, pc, #4	; (adr r2, 8523c <Cl_Dlsis_controller+0x204>)
   85236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8523a:	bf00      	nop
   8523c:	00085291 	.word	0x00085291
   85240:	000852df 	.word	0x000852df
   85244:	0008548f 	.word	0x0008548f
   85248:	0008547d 	.word	0x0008547d
   8524c:	0008548f 	.word	0x0008548f
   85250:	0008548f 	.word	0x0008548f
   85254:	0008548f 	.word	0x0008548f
   85258:	0008548f 	.word	0x0008548f
   8525c:	0008548f 	.word	0x0008548f
   85260:	0008548f 	.word	0x0008548f
   85264:	0008548f 	.word	0x0008548f
   85268:	0008548f 	.word	0x0008548f
   8526c:	0008548f 	.word	0x0008548f
   85270:	0008548f 	.word	0x0008548f
   85274:	0008548f 	.word	0x0008548f
   85278:	0008548f 	.word	0x0008548f
   8527c:	0008548f 	.word	0x0008548f
   85280:	0008548f 	.word	0x0008548f
   85284:	0008548f 	.word	0x0008548f
   85288:	0008548f 	.word	0x0008548f
   8528c:	00085483 	.word	0x00085483
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85290:	4b45      	ldr	r3, [pc, #276]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85292:	7e1b      	ldrb	r3, [r3, #24]
   85294:	2b00      	cmp	r3, #0
   85296:	f000 80fd 	beq.w	85494 <Cl_Dlsis_controller+0x45c>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   8529a:	4b43      	ldr	r3, [pc, #268]	; (853a8 <Cl_Dlsis_controller+0x370>)
   8529c:	791b      	ldrb	r3, [r3, #4]
   8529e:	2b04      	cmp	r3, #4
   852a0:	d000      	beq.n	852a4 <Cl_Dlsis_controller+0x26c>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   852a2:	e01b      	b.n	852dc <Cl_Dlsis_controller+0x2a4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   852a4:	2316      	movs	r3, #22
   852a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   852aa:	2304      	movs	r3, #4
   852ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   852b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   852b4:	3301      	adds	r3, #1
   852b6:	4619      	mov	r1, r3
   852b8:	2004      	movs	r0, #4
   852ba:	4b44      	ldr	r3, [pc, #272]	; (853cc <Cl_Dlsis_controller+0x394>)
   852bc:	4798      	blx	r3
   852be:	4603      	mov	r3, r0
   852c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   852c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   852c8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
   852cc:	2202      	movs	r2, #2
   852ce:	4618      	mov	r0, r3
   852d0:	4b3f      	ldr	r3, [pc, #252]	; (853d0 <Cl_Dlsis_controller+0x398>)
   852d2:	4798      	blx	r3
   852d4:	4603      	mov	r3, r0
   852d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   852da:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   852dc:	e0da      	b.n	85494 <Cl_Dlsis_controller+0x45c>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   852de:	4b32      	ldr	r3, [pc, #200]	; (853a8 <Cl_Dlsis_controller+0x370>)
   852e0:	7e1b      	ldrb	r3, [r3, #24]
   852e2:	2b00      	cmp	r3, #0
   852e4:	f000 80d9 	beq.w	8549a <Cl_Dlsis_controller+0x462>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   852e8:	4b2f      	ldr	r3, [pc, #188]	; (853a8 <Cl_Dlsis_controller+0x370>)
   852ea:	795b      	ldrb	r3, [r3, #5]
   852ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   852f0:	4b2d      	ldr	r3, [pc, #180]	; (853a8 <Cl_Dlsis_controller+0x370>)
   852f2:	799b      	ldrb	r3, [r3, #6]
   852f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   852f8:	4b2b      	ldr	r3, [pc, #172]	; (853a8 <Cl_Dlsis_controller+0x370>)
   852fa:	79db      	ldrb	r3, [r3, #7]
   852fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85300:	4b29      	ldr	r3, [pc, #164]	; (853a8 <Cl_Dlsis_controller+0x370>)
   85302:	7a1b      	ldrb	r3, [r3, #8]
   85304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   85308:	4b27      	ldr	r3, [pc, #156]	; (853a8 <Cl_Dlsis_controller+0x370>)
   8530a:	791b      	ldrb	r3, [r3, #4]
   8530c:	3b05      	subs	r3, #5
   8530e:	2b20      	cmp	r3, #32
   85310:	f200 80b2 	bhi.w	85478 <Cl_Dlsis_controller+0x440>
   85314:	a201      	add	r2, pc, #4	; (adr r2, 8531c <Cl_Dlsis_controller+0x2e4>)
   85316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8531a:	bf00      	nop
   8531c:	00085479 	.word	0x00085479
   85320:	00085479 	.word	0x00085479
   85324:	00085479 	.word	0x00085479
   85328:	00085479 	.word	0x00085479
   8532c:	00085479 	.word	0x00085479
   85330:	00085479 	.word	0x00085479
   85334:	00085479 	.word	0x00085479
   85338:	00085479 	.word	0x00085479
   8533c:	00085479 	.word	0x00085479
   85340:	00085479 	.word	0x00085479
   85344:	00085479 	.word	0x00085479
   85348:	00085479 	.word	0x00085479
   8534c:	00085479 	.word	0x00085479
   85350:	00085479 	.word	0x00085479
   85354:	00085479 	.word	0x00085479
   85358:	00085479 	.word	0x00085479
   8535c:	00085479 	.word	0x00085479
   85360:	00085479 	.word	0x00085479
   85364:	00085479 	.word	0x00085479
   85368:	000853d5 	.word	0x000853d5
   8536c:	000853ed 	.word	0x000853ed
   85370:	00085405 	.word	0x00085405
   85374:	00085415 	.word	0x00085415
   85378:	00085425 	.word	0x00085425
   8537c:	00085435 	.word	0x00085435
   85380:	00085479 	.word	0x00085479
   85384:	00085479 	.word	0x00085479
   85388:	00085479 	.word	0x00085479
   8538c:	00085479 	.word	0x00085479
   85390:	00085445 	.word	0x00085445
   85394:	0008544f 	.word	0x0008544f
   85398:	00085459 	.word	0x00085459
   8539c:	00085469 	.word	0x00085469
   853a0:	00086e99 	.word	0x00086e99
   853a4:	00083325 	.word	0x00083325
   853a8:	20072f2c 	.word	0x20072f2c
   853ac:	20073138 	.word	0x20073138
   853b0:	00083d55 	.word	0x00083d55
   853b4:	20072d0c 	.word	0x20072d0c
   853b8:	00092315 	.word	0x00092315
   853bc:	00091c25 	.word	0x00091c25
   853c0:	00082ffd 	.word	0x00082ffd
   853c4:	2007208c 	.word	0x2007208c
   853c8:	20073132 	.word	0x20073132
   853cc:	0009710d 	.word	0x0009710d
   853d0:	00098601 	.word	0x00098601
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   853d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   853d6:	4aab      	ldr	r2, [pc, #684]	; (85684 <Cl_Dlsis_controller+0x64c>)
   853d8:	fba2 2303 	umull	r2, r3, r2, r3
   853dc:	08da      	lsrs	r2, r3, #3
   853de:	4baa      	ldr	r3, [pc, #680]	; (85688 <Cl_Dlsis_controller+0x650>)
   853e0:	4610      	mov	r0, r2
   853e2:	4798      	blx	r3
   853e4:	4602      	mov	r2, r0
   853e6:	4ba9      	ldr	r3, [pc, #676]	; (8568c <Cl_Dlsis_controller+0x654>)
   853e8:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   853ea:	e046      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   853ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   853ee:	4aa5      	ldr	r2, [pc, #660]	; (85684 <Cl_Dlsis_controller+0x64c>)
   853f0:	fba2 2303 	umull	r2, r3, r2, r3
   853f4:	08da      	lsrs	r2, r3, #3
   853f6:	4ba4      	ldr	r3, [pc, #656]	; (85688 <Cl_Dlsis_controller+0x650>)
   853f8:	4610      	mov	r0, r2
   853fa:	4798      	blx	r3
   853fc:	4602      	mov	r2, r0
   853fe:	4ba3      	ldr	r3, [pc, #652]	; (8568c <Cl_Dlsis_controller+0x654>)
   85400:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   85402:	e03a      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85404:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85406:	4ba0      	ldr	r3, [pc, #640]	; (85688 <Cl_Dlsis_controller+0x650>)
   85408:	4610      	mov	r0, r2
   8540a:	4798      	blx	r3
   8540c:	4602      	mov	r2, r0
   8540e:	4b9f      	ldr	r3, [pc, #636]	; (8568c <Cl_Dlsis_controller+0x654>)
   85410:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   85412:	e032      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85414:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85416:	4b9c      	ldr	r3, [pc, #624]	; (85688 <Cl_Dlsis_controller+0x650>)
   85418:	4610      	mov	r0, r2
   8541a:	4798      	blx	r3
   8541c:	4602      	mov	r2, r0
   8541e:	4b9b      	ldr	r3, [pc, #620]	; (8568c <Cl_Dlsis_controller+0x654>)
   85420:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   85422:	e02a      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85424:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85426:	4b98      	ldr	r3, [pc, #608]	; (85688 <Cl_Dlsis_controller+0x650>)
   85428:	4610      	mov	r0, r2
   8542a:	4798      	blx	r3
   8542c:	4602      	mov	r2, r0
   8542e:	4b97      	ldr	r3, [pc, #604]	; (8568c <Cl_Dlsis_controller+0x654>)
   85430:	615a      	str	r2, [r3, #20]
					break;
   85432:	e022      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85434:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85436:	4b94      	ldr	r3, [pc, #592]	; (85688 <Cl_Dlsis_controller+0x650>)
   85438:	4610      	mov	r0, r2
   8543a:	4798      	blx	r3
   8543c:	4602      	mov	r2, r0
   8543e:	4b93      	ldr	r3, [pc, #588]	; (8568c <Cl_Dlsis_controller+0x654>)
   85440:	611a      	str	r2, [r3, #16]
					break;
   85442:	e01a      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85444:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85446:	b21a      	sxth	r2, r3
   85448:	4b90      	ldr	r3, [pc, #576]	; (8568c <Cl_Dlsis_controller+0x654>)
   8544a:	801a      	strh	r2, [r3, #0]
					break;
   8544c:	e015      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85450:	b21a      	sxth	r2, r3
   85452:	4b8e      	ldr	r3, [pc, #568]	; (8568c <Cl_Dlsis_controller+0x654>)
   85454:	805a      	strh	r2, [r3, #2]
					break;
   85456:	e010      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85458:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8545a:	4b8b      	ldr	r3, [pc, #556]	; (85688 <Cl_Dlsis_controller+0x650>)
   8545c:	4610      	mov	r0, r2
   8545e:	4798      	blx	r3
   85460:	4602      	mov	r2, r0
   85462:	4b8a      	ldr	r3, [pc, #552]	; (8568c <Cl_Dlsis_controller+0x654>)
   85464:	60da      	str	r2, [r3, #12]
					break;
   85466:	e008      	b.n	8547a <Cl_Dlsis_controller+0x442>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85468:	6aba      	ldr	r2, [r7, #40]	; 0x28
   8546a:	4b87      	ldr	r3, [pc, #540]	; (85688 <Cl_Dlsis_controller+0x650>)
   8546c:	4610      	mov	r0, r2
   8546e:	4798      	blx	r3
   85470:	4602      	mov	r2, r0
   85472:	4b86      	ldr	r3, [pc, #536]	; (8568c <Cl_Dlsis_controller+0x654>)
   85474:	609a      	str	r2, [r3, #8]
					break;
   85476:	e000      	b.n	8547a <Cl_Dlsis_controller+0x442>

					default:break;
   85478:	bf00      	nop
				}
			}
			
			
			break;
   8547a:	e00e      	b.n	8549a <Cl_Dlsis_controller+0x462>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   8547c:	4b84      	ldr	r3, [pc, #528]	; (85690 <Cl_Dlsis_controller+0x658>)
   8547e:	4798      	blx	r3
			break;
   85480:	e00c      	b.n	8549c <Cl_Dlsis_controller+0x464>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85482:	4b84      	ldr	r3, [pc, #528]	; (85694 <Cl_Dlsis_controller+0x65c>)
   85484:	4798      	blx	r3
   85486:	4603      	mov	r3, r0
   85488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
   8548c:	e006      	b.n	8549c <Cl_Dlsis_controller+0x464>
			default:
			break;
   8548e:	bf00      	nop
   85490:	f000 bd8f 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
							
						default:
						break;
					}
				}
			break;
   85494:	bf00      	nop
   85496:	f000 bd8c 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
					default:break;
				}
			}
			
			
			break;
   8549a:	bf00      	nop
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
		}
		break;
   8549c:	f000 bd89 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   854a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   854a4:	2b12      	cmp	r3, #18
   854a6:	d000      	beq.n	854aa <Cl_Dlsis_controller+0x472>
				
					}
				break;
				
				
				default:break;
   854a8:	e00e      	b.n	854c8 <Cl_Dlsis_controller+0x490>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
				
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   854aa:	487b      	ldr	r0, [pc, #492]	; (85698 <Cl_Dlsis_controller+0x660>)
   854ac:	4b7b      	ldr	r3, [pc, #492]	; (8569c <Cl_Dlsis_controller+0x664>)
   854ae:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   854b0:	2300      	movs	r3, #0
   854b2:	84fb      	strh	r3, [r7, #38]	; 0x26
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
   854b4:	f107 0326 	add.w	r3, r7, #38	; 0x26
   854b8:	4619      	mov	r1, r3
   854ba:	2007      	movs	r0, #7
   854bc:	4b78      	ldr	r3, [pc, #480]	; (856a0 <Cl_Dlsis_controller+0x668>)
   854be:	4798      	blx	r3
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					//if( (temp == 0))
					{
				
						cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   854c0:	4b78      	ldr	r3, [pc, #480]	; (856a4 <Cl_Dlsis_controller+0x66c>)
   854c2:	2203      	movs	r2, #3
   854c4:	701a      	strb	r2, [r3, #0]
				
				

				
					}
				break;
   854c6:	bf00      	nop
				
				
				default:break;
			}

		break;
   854c8:	f000 bd73 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   854cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   854d0:	2b12      	cmp	r3, #18
   854d2:	d000      	beq.n	854d6 <Cl_Dlsis_controller+0x49e>
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
					}
					}
			break;
			default:break;
   854d4:	e077      	b.n	855c6 <Cl_Dlsis_controller+0x58e>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   854d6:	2300      	movs	r3, #0
   854d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   854da:	f107 0324 	add.w	r3, r7, #36	; 0x24
   854de:	4619      	mov	r1, r3
   854e0:	200a      	movs	r0, #10
   854e2:	4b6f      	ldr	r3, [pc, #444]	; (856a0 <Cl_Dlsis_controller+0x668>)
   854e4:	4798      	blx	r3
					if( temp == 0)
   854e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   854e8:	2b00      	cmp	r3, #0
   854ea:	d16b      	bne.n	855c4 <Cl_Dlsis_controller+0x58c>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   854ec:	2208      	movs	r2, #8
   854ee:	496e      	ldr	r1, [pc, #440]	; (856a8 <Cl_Dlsis_controller+0x670>)
   854f0:	2018      	movs	r0, #24
   854f2:	4b6e      	ldr	r3, [pc, #440]	; (856ac <Cl_Dlsis_controller+0x674>)
   854f4:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,1000);
   854f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   854fa:	2006      	movs	r0, #6
   854fc:	4b6c      	ldr	r3, [pc, #432]	; (856b0 <Cl_Dlsis_controller+0x678>)
   854fe:	4798      	blx	r3
							cl_wait(100);
   85500:	2064      	movs	r0, #100	; 0x64
   85502:	4b6c      	ldr	r3, [pc, #432]	; (856b4 <Cl_Dlsis_controller+0x67c>)
   85504:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   85506:	2100      	movs	r1, #0
   85508:	200a      	movs	r0, #10
   8550a:	4b69      	ldr	r3, [pc, #420]	; (856b0 <Cl_Dlsis_controller+0x678>)
   8550c:	4798      	blx	r3
							cl_wait(100);
   8550e:	2064      	movs	r0, #100	; 0x64
   85510:	4b68      	ldr	r3, [pc, #416]	; (856b4 <Cl_Dlsis_controller+0x67c>)
   85512:	4798      	blx	r3
							Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   85514:	4b68      	ldr	r3, [pc, #416]	; (856b8 <Cl_Dlsis_controller+0x680>)
   85516:	69db      	ldr	r3, [r3, #28]
   85518:	623b      	str	r3, [r7, #32]
							hep_calibration(temp1);
   8551a:	6a3b      	ldr	r3, [r7, #32]
   8551c:	4618      	mov	r0, r3
   8551e:	4b67      	ldr	r3, [pc, #412]	; (856bc <Cl_Dlsis_controller+0x684>)
   85520:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   85522:	f107 0320 	add.w	r3, r7, #32
   85526:	2202      	movs	r2, #2
   85528:	4619      	mov	r1, r3
   8552a:	2019      	movs	r0, #25
   8552c:	4b5f      	ldr	r3, [pc, #380]	; (856ac <Cl_Dlsis_controller+0x674>)
   8552e:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   85530:	2202      	movs	r2, #2
   85532:	4963      	ldr	r1, [pc, #396]	; (856c0 <Cl_Dlsis_controller+0x688>)
   85534:	2019      	movs	r0, #25
   85536:	4b5d      	ldr	r3, [pc, #372]	; (856ac <Cl_Dlsis_controller+0x674>)
   85538:	4798      	blx	r3
							cl_wait(100);
   8553a:	2064      	movs	r0, #100	; 0x64
   8553c:	4b5d      	ldr	r3, [pc, #372]	; (856b4 <Cl_Dlsis_controller+0x67c>)
   8553e:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85540:	4b5f      	ldr	r3, [pc, #380]	; (856c0 <Cl_Dlsis_controller+0x688>)
   85542:	681b      	ldr	r3, [r3, #0]
   85544:	4619      	mov	r1, r3
   85546:	2006      	movs	r0, #6
   85548:	4b59      	ldr	r3, [pc, #356]	; (856b0 <Cl_Dlsis_controller+0x678>)
   8554a:	4798      	blx	r3
							cl_wait(100);
   8554c:	2064      	movs	r0, #100	; 0x64
   8554e:	4b59      	ldr	r3, [pc, #356]	; (856b4 <Cl_Dlsis_controller+0x67c>)
   85550:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   85552:	2100      	movs	r1, #0
   85554:	200a      	movs	r0, #10
   85556:	4b56      	ldr	r3, [pc, #344]	; (856b0 <Cl_Dlsis_controller+0x678>)
   85558:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   8555a:	4b5a      	ldr	r3, [pc, #360]	; (856c4 <Cl_Dlsis_controller+0x68c>)
   8555c:	4798      	blx	r3
						Cl_Uint32Type temp = Treatdata[ID_ufgoal];
   8555e:	4b56      	ldr	r3, [pc, #344]	; (856b8 <Cl_Dlsis_controller+0x680>)
   85560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   85562:	643b      	str	r3, [r7, #64]	; 0x40
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   85564:	2100      	movs	r1, #0
   85566:	2002      	movs	r0, #2
   85568:	4b57      	ldr	r3, [pc, #348]	; (856c8 <Cl_Dlsis_controller+0x690>)
   8556a:	4798      	blx	r3
						cl_wait(100);
   8556c:	2064      	movs	r0, #100	; 0x64
   8556e:	4b51      	ldr	r3, [pc, #324]	; (856b4 <Cl_Dlsis_controller+0x67c>)
   85570:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   85572:	f242 7110 	movw	r1, #10000	; 0x2710
   85576:	2001      	movs	r0, #1
   85578:	4b53      	ldr	r3, [pc, #332]	; (856c8 <Cl_Dlsis_controller+0x690>)
   8557a:	4798      	blx	r3
						cl_ufpumpFeedback_start();
   8557c:	4b53      	ldr	r3, [pc, #332]	; (856cc <Cl_Dlsis_controller+0x694>)
   8557e:	4798      	blx	r3
						switch (temp)
   85580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85582:	2b5a      	cmp	r3, #90	; 0x5a
   85584:	d009      	beq.n	8559a <Cl_Dlsis_controller+0x562>
   85586:	2b78      	cmp	r3, #120	; 0x78
   85588:	d00d      	beq.n	855a6 <Cl_Dlsis_controller+0x56e>
   8558a:	2b3c      	cmp	r3, #60	; 0x3c
   8558c:	d111      	bne.n	855b2 <Cl_Dlsis_controller+0x57a>
						{
							case 60:
								cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,35000);
   8558e:	f648 01b8 	movw	r1, #35000	; 0x88b8
   85592:	2001      	movs	r0, #1
   85594:	4b4c      	ldr	r3, [pc, #304]	; (856c8 <Cl_Dlsis_controller+0x690>)
   85596:	4798      	blx	r3
							break;
   85598:	e011      	b.n	855be <Cl_Dlsis_controller+0x586>
							case 90:
								cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,25000);
   8559a:	f246 11a8 	movw	r1, #25000	; 0x61a8
   8559e:	2001      	movs	r0, #1
   855a0:	4b49      	ldr	r3, [pc, #292]	; (856c8 <Cl_Dlsis_controller+0x690>)
   855a2:	4798      	blx	r3
							break;
   855a4:	e00b      	b.n	855be <Cl_Dlsis_controller+0x586>
							case 120:
								cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,20000);
   855a6:	f644 6120 	movw	r1, #20000	; 0x4e20
   855aa:	2001      	movs	r0, #1
   855ac:	4b46      	ldr	r3, [pc, #280]	; (856c8 <Cl_Dlsis_controller+0x690>)
   855ae:	4798      	blx	r3
							break;
   855b0:	e005      	b.n	855be <Cl_Dlsis_controller+0x586>
							default:
								cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   855b2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   855b6:	2001      	movs	r0, #1
   855b8:	4b43      	ldr	r3, [pc, #268]	; (856c8 <Cl_Dlsis_controller+0x690>)
   855ba:	4798      	blx	r3
							break;
   855bc:	bf00      	nop
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
   855be:	4b39      	ldr	r3, [pc, #228]	; (856a4 <Cl_Dlsis_controller+0x66c>)
   855c0:	2205      	movs	r2, #5
   855c2:	701a      	strb	r2, [r3, #0]
					}
					}
			break;
   855c4:	bf00      	nop
			default:break;
		}
		break;
   855c6:	f000 bcf4 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   855ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   855ce:	2b13      	cmp	r3, #19
   855d0:	d000      	beq.n	855d4 <Cl_Dlsis_controller+0x59c>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   855d2:	e00a      	b.n	855ea <Cl_Dlsis_controller+0x5b2>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   855d4:	4b3e      	ldr	r3, [pc, #248]	; (856d0 <Cl_Dlsis_controller+0x698>)
   855d6:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   855d8:	f640 11c4 	movw	r1, #2500	; 0x9c4
   855dc:	2001      	movs	r0, #1
   855de:	4b3a      	ldr	r3, [pc, #232]	; (856c8 <Cl_Dlsis_controller+0x690>)
   855e0:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   855e2:	4b30      	ldr	r3, [pc, #192]	; (856a4 <Cl_Dlsis_controller+0x66c>)
   855e4:	2204      	movs	r2, #4
   855e6:	701a      	strb	r2, [r3, #0]
			break;
   855e8:	bf00      	nop
			default:break;
		}
		
		break;
   855ea:	f000 bce2 	b.w	85fb2 <Cl_Dlsis_controller+0xf7a>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   855ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   855f2:	3b02      	subs	r3, #2
   855f4:	2b1d      	cmp	r3, #29
   855f6:	f200 84db 	bhi.w	85fb0 <Cl_Dlsis_controller+0xf78>
   855fa:	a201      	add	r2, pc, #4	; (adr r2, 85600 <Cl_Dlsis_controller+0x5c8>)
   855fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85600:	000856d9 	.word	0x000856d9
   85604:	00085727 	.word	0x00085727
   85608:	00085fb1 	.word	0x00085fb1
   8560c:	00085fb1 	.word	0x00085fb1
   85610:	000859d5 	.word	0x000859d5
   85614:	000859eb 	.word	0x000859eb
   85618:	000859f7 	.word	0x000859f7
   8561c:	000859fd 	.word	0x000859fd
   85620:	00085fb1 	.word	0x00085fb1
   85624:	00085fb1 	.word	0x00085fb1
   85628:	00085fb1 	.word	0x00085fb1
   8562c:	00085fb1 	.word	0x00085fb1
   85630:	00085fb1 	.word	0x00085fb1
   85634:	00085fb1 	.word	0x00085fb1
   85638:	00085fb1 	.word	0x00085fb1
   8563c:	00085a29 	.word	0x00085a29
   85640:	00085a29 	.word	0x00085a29
   85644:	00085889 	.word	0x00085889
   85648:	00085fb1 	.word	0x00085fb1
   8564c:	00085fb1 	.word	0x00085fb1
   85650:	00085a03 	.word	0x00085a03
   85654:	00085a0f 	.word	0x00085a0f
   85658:	00085fb1 	.word	0x00085fb1
   8565c:	00085fb1 	.word	0x00085fb1
   85660:	00085fb1 	.word	0x00085fb1
   85664:	00085a29 	.word	0x00085a29
   85668:	00085a29 	.word	0x00085a29
   8566c:	00085fb1 	.word	0x00085fb1
   85670:	00085fb1 	.word	0x00085fb1
   85674:	00085679 	.word	0x00085679
		{
			

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85678:	4b16      	ldr	r3, [pc, #88]	; (856d4 <Cl_Dlsis_controller+0x69c>)
   8567a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   8567c:	4b09      	ldr	r3, [pc, #36]	; (856a4 <Cl_Dlsis_controller+0x66c>)
   8567e:	2207      	movs	r2, #7
   85680:	701a      	strb	r2, [r3, #0]
			break;
   85682:	e1d8      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
   85684:	cccccccd 	.word	0xcccccccd
   85688:	000a25dd 	.word	0x000a25dd
   8568c:	20072c9c 	.word	0x20072c9c
   85690:	000883d1 	.word	0x000883d1
   85694:	000879c5 	.word	0x000879c5
   85698:	200720a5 	.word	0x200720a5
   8569c:	00089629 	.word	0x00089629
   856a0:	0008d499 	.word	0x0008d499
   856a4:	2007208c 	.word	0x2007208c
   856a8:	000a46a8 	.word	0x000a46a8
   856ac:	00098601 	.word	0x00098601
   856b0:	00092315 	.word	0x00092315
   856b4:	00091b9d 	.word	0x00091b9d
   856b8:	20073138 	.word	0x20073138
   856bc:	00083d55 	.word	0x00083d55
   856c0:	20072d0c 	.word	0x20072d0c
   856c4:	00096a51 	.word	0x00096a51
   856c8:	00092e89 	.word	0x00092e89
   856cc:	00092c4d 	.word	0x00092c4d
   856d0:	00087a0d 	.word	0x00087a0d
   856d4:	00087971 	.word	0x00087971
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   856d8:	4ba7      	ldr	r3, [pc, #668]	; (85978 <Cl_Dlsis_controller+0x940>)
   856da:	7e1b      	ldrb	r3, [r3, #24]
   856dc:	2b00      	cmp	r3, #0
   856de:	f000 81a5 	beq.w	85a2c <Cl_Dlsis_controller+0x9f4>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   856e2:	4ba5      	ldr	r3, [pc, #660]	; (85978 <Cl_Dlsis_controller+0x940>)
   856e4:	791b      	ldrb	r3, [r3, #4]
   856e6:	2b04      	cmp	r3, #4
   856e8:	d000      	beq.n	856ec <Cl_Dlsis_controller+0x6b4>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   856ea:	e01b      	b.n	85724 <Cl_Dlsis_controller+0x6ec>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   856ec:	2316      	movs	r3, #22
   856ee:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   856f2:	2304      	movs	r3, #4
   856f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   856f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
   856fc:	3301      	adds	r3, #1
   856fe:	4619      	mov	r1, r3
   85700:	2004      	movs	r0, #4
   85702:	4b9e      	ldr	r3, [pc, #632]	; (8597c <Cl_Dlsis_controller+0x944>)
   85704:	4798      	blx	r3
   85706:	4603      	mov	r3, r0
   85708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   8570c:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85710:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
   85714:	2202      	movs	r2, #2
   85716:	4618      	mov	r0, r3
   85718:	4b99      	ldr	r3, [pc, #612]	; (85980 <Cl_Dlsis_controller+0x948>)
   8571a:	4798      	blx	r3
   8571c:	4603      	mov	r3, r0
   8571e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   85722:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85724:	e182      	b.n	85a2c <Cl_Dlsis_controller+0x9f4>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85726:	4b94      	ldr	r3, [pc, #592]	; (85978 <Cl_Dlsis_controller+0x940>)
   85728:	7e1b      	ldrb	r3, [r3, #24]
   8572a:	2b00      	cmp	r3, #0
   8572c:	f000 8180 	beq.w	85a30 <Cl_Dlsis_controller+0x9f8>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85730:	4b91      	ldr	r3, [pc, #580]	; (85978 <Cl_Dlsis_controller+0x940>)
   85732:	795b      	ldrb	r3, [r3, #5]
   85734:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85736:	4b90      	ldr	r3, [pc, #576]	; (85978 <Cl_Dlsis_controller+0x940>)
   85738:	799b      	ldrb	r3, [r3, #6]
   8573a:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   8573c:	4b8e      	ldr	r3, [pc, #568]	; (85978 <Cl_Dlsis_controller+0x940>)
   8573e:	79db      	ldrb	r3, [r3, #7]
   85740:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85742:	4b8d      	ldr	r3, [pc, #564]	; (85978 <Cl_Dlsis_controller+0x940>)
   85744:	7a1b      	ldrb	r3, [r3, #8]
   85746:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85748:	4b8b      	ldr	r3, [pc, #556]	; (85978 <Cl_Dlsis_controller+0x940>)
   8574a:	791b      	ldrb	r3, [r3, #4]
   8574c:	3b05      	subs	r3, #5
   8574e:	2b20      	cmp	r3, #32
   85750:	f200 8098 	bhi.w	85884 <Cl_Dlsis_controller+0x84c>
   85754:	a201      	add	r2, pc, #4	; (adr r2, 8575c <Cl_Dlsis_controller+0x724>)
   85756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8575a:	bf00      	nop
   8575c:	00085885 	.word	0x00085885
   85760:	00085885 	.word	0x00085885
   85764:	00085885 	.word	0x00085885
   85768:	00085885 	.word	0x00085885
   8576c:	00085885 	.word	0x00085885
   85770:	00085885 	.word	0x00085885
   85774:	00085885 	.word	0x00085885
   85778:	00085885 	.word	0x00085885
   8577c:	00085885 	.word	0x00085885
   85780:	00085885 	.word	0x00085885
   85784:	00085885 	.word	0x00085885
   85788:	00085885 	.word	0x00085885
   8578c:	00085885 	.word	0x00085885
   85790:	00085885 	.word	0x00085885
   85794:	00085885 	.word	0x00085885
   85798:	00085885 	.word	0x00085885
   8579c:	00085885 	.word	0x00085885
   857a0:	00085885 	.word	0x00085885
   857a4:	00085885 	.word	0x00085885
   857a8:	000857e1 	.word	0x000857e1
   857ac:	000857f9 	.word	0x000857f9
   857b0:	00085811 	.word	0x00085811
   857b4:	00085821 	.word	0x00085821
   857b8:	00085831 	.word	0x00085831
   857bc:	00085841 	.word	0x00085841
   857c0:	00085885 	.word	0x00085885
   857c4:	00085885 	.word	0x00085885
   857c8:	00085885 	.word	0x00085885
   857cc:	00085885 	.word	0x00085885
   857d0:	00085851 	.word	0x00085851
   857d4:	0008585b 	.word	0x0008585b
   857d8:	00085865 	.word	0x00085865
   857dc:	00085875 	.word	0x00085875
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   857e0:	69fb      	ldr	r3, [r7, #28]
   857e2:	4a68      	ldr	r2, [pc, #416]	; (85984 <Cl_Dlsis_controller+0x94c>)
   857e4:	fba2 2303 	umull	r2, r3, r2, r3
   857e8:	08da      	lsrs	r2, r3, #3
   857ea:	4b67      	ldr	r3, [pc, #412]	; (85988 <Cl_Dlsis_controller+0x950>)
   857ec:	4610      	mov	r0, r2
   857ee:	4798      	blx	r3
   857f0:	4602      	mov	r2, r0
   857f2:	4b66      	ldr	r3, [pc, #408]	; (8598c <Cl_Dlsis_controller+0x954>)
   857f4:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   857f6:	e046      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   857f8:	69fb      	ldr	r3, [r7, #28]
   857fa:	4a62      	ldr	r2, [pc, #392]	; (85984 <Cl_Dlsis_controller+0x94c>)
   857fc:	fba2 2303 	umull	r2, r3, r2, r3
   85800:	08da      	lsrs	r2, r3, #3
   85802:	4b61      	ldr	r3, [pc, #388]	; (85988 <Cl_Dlsis_controller+0x950>)
   85804:	4610      	mov	r0, r2
   85806:	4798      	blx	r3
   85808:	4602      	mov	r2, r0
   8580a:	4b60      	ldr	r3, [pc, #384]	; (8598c <Cl_Dlsis_controller+0x954>)
   8580c:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   8580e:	e03a      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85810:	69fa      	ldr	r2, [r7, #28]
   85812:	4b5d      	ldr	r3, [pc, #372]	; (85988 <Cl_Dlsis_controller+0x950>)
   85814:	4610      	mov	r0, r2
   85816:	4798      	blx	r3
   85818:	4602      	mov	r2, r0
   8581a:	4b5c      	ldr	r3, [pc, #368]	; (8598c <Cl_Dlsis_controller+0x954>)
   8581c:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   8581e:	e032      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85820:	69fa      	ldr	r2, [r7, #28]
   85822:	4b59      	ldr	r3, [pc, #356]	; (85988 <Cl_Dlsis_controller+0x950>)
   85824:	4610      	mov	r0, r2
   85826:	4798      	blx	r3
   85828:	4602      	mov	r2, r0
   8582a:	4b58      	ldr	r3, [pc, #352]	; (8598c <Cl_Dlsis_controller+0x954>)
   8582c:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   8582e:	e02a      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85830:	69fa      	ldr	r2, [r7, #28]
   85832:	4b55      	ldr	r3, [pc, #340]	; (85988 <Cl_Dlsis_controller+0x950>)
   85834:	4610      	mov	r0, r2
   85836:	4798      	blx	r3
   85838:	4602      	mov	r2, r0
   8583a:	4b54      	ldr	r3, [pc, #336]	; (8598c <Cl_Dlsis_controller+0x954>)
   8583c:	615a      	str	r2, [r3, #20]
													break;
   8583e:	e022      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85840:	69fa      	ldr	r2, [r7, #28]
   85842:	4b51      	ldr	r3, [pc, #324]	; (85988 <Cl_Dlsis_controller+0x950>)
   85844:	4610      	mov	r0, r2
   85846:	4798      	blx	r3
   85848:	4602      	mov	r2, r0
   8584a:	4b50      	ldr	r3, [pc, #320]	; (8598c <Cl_Dlsis_controller+0x954>)
   8584c:	611a      	str	r2, [r3, #16]
													break;
   8584e:	e01a      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85850:	69fb      	ldr	r3, [r7, #28]
   85852:	b21a      	sxth	r2, r3
   85854:	4b4d      	ldr	r3, [pc, #308]	; (8598c <Cl_Dlsis_controller+0x954>)
   85856:	801a      	strh	r2, [r3, #0]
													break;
   85858:	e015      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8585a:	69fb      	ldr	r3, [r7, #28]
   8585c:	b21a      	sxth	r2, r3
   8585e:	4b4b      	ldr	r3, [pc, #300]	; (8598c <Cl_Dlsis_controller+0x954>)
   85860:	805a      	strh	r2, [r3, #2]
													break;
   85862:	e010      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85864:	69fa      	ldr	r2, [r7, #28]
   85866:	4b48      	ldr	r3, [pc, #288]	; (85988 <Cl_Dlsis_controller+0x950>)
   85868:	4610      	mov	r0, r2
   8586a:	4798      	blx	r3
   8586c:	4602      	mov	r2, r0
   8586e:	4b47      	ldr	r3, [pc, #284]	; (8598c <Cl_Dlsis_controller+0x954>)
   85870:	60da      	str	r2, [r3, #12]
													break;
   85872:	e008      	b.n	85886 <Cl_Dlsis_controller+0x84e>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85874:	69fa      	ldr	r2, [r7, #28]
   85876:	4b44      	ldr	r3, [pc, #272]	; (85988 <Cl_Dlsis_controller+0x950>)
   85878:	4610      	mov	r0, r2
   8587a:	4798      	blx	r3
   8587c:	4602      	mov	r2, r0
   8587e:	4b43      	ldr	r3, [pc, #268]	; (8598c <Cl_Dlsis_controller+0x954>)
   85880:	609a      	str	r2, [r3, #8]
													break;
   85882:	e000      	b.n	85886 <Cl_Dlsis_controller+0x84e>

												default:break;
   85884:	bf00      	nop
											}
										}
						
			break;
   85886:	e0d3      	b.n	85a30 <Cl_Dlsis_controller+0x9f8>
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85888:	4b41      	ldr	r3, [pc, #260]	; (85990 <Cl_Dlsis_controller+0x958>)
   8588a:	4798      	blx	r3
			//	UpdateHeaterControls();
				cl_uf_controller(CL_UF_EVENT_SECOND,0);
   8588c:	2100      	movs	r1, #0
   8588e:	2006      	movs	r0, #6
   85890:	4b40      	ldr	r3, [pc, #256]	; (85994 <Cl_Dlsis_controller+0x95c>)
   85892:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   85894:	2100      	movs	r1, #0
   85896:	200d      	movs	r0, #13
   85898:	4b3f      	ldr	r3, [pc, #252]	; (85998 <Cl_Dlsis_controller+0x960>)
   8589a:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   8589c:	4b3f      	ldr	r3, [pc, #252]	; (8599c <Cl_Dlsis_controller+0x964>)
   8589e:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   858a0:	4b3f      	ldr	r3, [pc, #252]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858a2:	781b      	ldrb	r3, [r3, #0]
   858a4:	3301      	adds	r3, #1
   858a6:	b2da      	uxtb	r2, r3
   858a8:	4b3d      	ldr	r3, [pc, #244]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858aa:	701a      	strb	r2, [r3, #0]
			/*	if ((DlsisTime.Cl_dlsissecondscounter == 30)&&(flag_bc == 1))
				{
					sv_cs_setpotvalue(1900);
					flag_bc =0 ;
				}*/
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   858ac:	4b3c      	ldr	r3, [pc, #240]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858ae:	781b      	ldrb	r3, [r3, #0]
   858b0:	2b3c      	cmp	r3, #60	; 0x3c
   858b2:	d13f      	bne.n	85934 <Cl_Dlsis_controller+0x8fc>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   858b4:	4b3b      	ldr	r3, [pc, #236]	; (859a4 <Cl_Dlsis_controller+0x96c>)
   858b6:	4798      	blx	r3
   858b8:	4603      	mov	r3, r0
   858ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					DlsisTime.Cl_dlsissecondscounter = 0;
   858be:	4b38      	ldr	r3, [pc, #224]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858c0:	2200      	movs	r2, #0
   858c2:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   858c4:	4b36      	ldr	r3, [pc, #216]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858c6:	785b      	ldrb	r3, [r3, #1]
   858c8:	3301      	adds	r3, #1
   858ca:	b2da      	uxtb	r2, r3
   858cc:	4b34      	ldr	r3, [pc, #208]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858ce:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   858d0:	4b33      	ldr	r3, [pc, #204]	; (859a0 <Cl_Dlsis_controller+0x968>)
   858d2:	785b      	ldrb	r3, [r3, #1]
   858d4:	2b01      	cmp	r3, #1
   858d6:	d127      	bne.n	85928 <Cl_Dlsis_controller+0x8f0>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   858d8:	2300      	movs	r3, #0
   858da:	837b      	strh	r3, [r7, #26]
   858dc:	2300      	movs	r3, #0
   858de:	833b      	strh	r3, [r7, #24]
   858e0:	2300      	movs	r3, #0
   858e2:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   858e4:	4b30      	ldr	r3, [pc, #192]	; (859a8 <Cl_Dlsis_controller+0x970>)
   858e6:	681a      	ldr	r2, [r3, #0]
   858e8:	4b30      	ldr	r3, [pc, #192]	; (859ac <Cl_Dlsis_controller+0x974>)
   858ea:	4610      	mov	r0, r2
   858ec:	4798      	blx	r3
   858ee:	4603      	mov	r3, r0
   858f0:	b29b      	uxth	r3, r3
   858f2:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   858f4:	2204      	movs	r2, #4
   858f6:	492e      	ldr	r1, [pc, #184]	; (859b0 <Cl_Dlsis_controller+0x978>)
   858f8:	2018      	movs	r0, #24
   858fa:	4b21      	ldr	r3, [pc, #132]	; (85980 <Cl_Dlsis_controller+0x948>)
   858fc:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   858fe:	f107 031a 	add.w	r3, r7, #26
   85902:	2202      	movs	r2, #2
   85904:	4619      	mov	r1, r3
   85906:	2019      	movs	r0, #25
   85908:	4b1d      	ldr	r3, [pc, #116]	; (85980 <Cl_Dlsis_controller+0x948>)
   8590a:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   8590c:	f107 0318 	add.w	r3, r7, #24
   85910:	2202      	movs	r2, #2
   85912:	4619      	mov	r1, r3
   85914:	2019      	movs	r0, #25
   85916:	4b1a      	ldr	r3, [pc, #104]	; (85980 <Cl_Dlsis_controller+0x948>)
   85918:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   8591a:	f107 0316 	add.w	r3, r7, #22
   8591e:	2202      	movs	r2, #2
   85920:	4619      	mov	r1, r3
   85922:	2019      	movs	r0, #25
   85924:	4b16      	ldr	r3, [pc, #88]	; (85980 <Cl_Dlsis_controller+0x948>)
   85926:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85928:	4b1d      	ldr	r3, [pc, #116]	; (859a0 <Cl_Dlsis_controller+0x968>)
   8592a:	78db      	ldrb	r3, [r3, #3]
   8592c:	3301      	adds	r3, #1
   8592e:	b2da      	uxtb	r2, r3
   85930:	4b1b      	ldr	r3, [pc, #108]	; (859a0 <Cl_Dlsis_controller+0x968>)
   85932:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == 5)
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85934:	4b1f      	ldr	r3, [pc, #124]	; (859b4 <Cl_Dlsis_controller+0x97c>)
   85936:	4798      	blx	r3
   85938:	4603      	mov	r3, r0
   8593a:	2b00      	cmp	r3, #0
   8593c:	d17a      	bne.n	85a34 <Cl_Dlsis_controller+0x9fc>
				{
					sv_cntrl_setgreenalarm();
   8593e:	4b1e      	ldr	r3, [pc, #120]	; (859b8 <Cl_Dlsis_controller+0x980>)
   85940:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85942:	4b1e      	ldr	r3, [pc, #120]	; (859bc <Cl_Dlsis_controller+0x984>)
   85944:	4798      	blx	r3
   85946:	4603      	mov	r3, r0
   85948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sv_cntrl_poweroffheater();
   8594c:	4b1c      	ldr	r3, [pc, #112]	; (859c0 <Cl_Dlsis_controller+0x988>)
   8594e:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85950:	2004      	movs	r0, #4
   85952:	4b1c      	ldr	r3, [pc, #112]	; (859c4 <Cl_Dlsis_controller+0x98c>)
   85954:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85956:	2011      	movs	r0, #17
   85958:	4b1b      	ldr	r3, [pc, #108]	; (859c8 <Cl_Dlsis_controller+0x990>)
   8595a:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   8595c:	4b1b      	ldr	r3, [pc, #108]	; (859cc <Cl_Dlsis_controller+0x994>)
   8595e:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85960:	2100      	movs	r1, #0
   85962:	2004      	movs	r0, #4
   85964:	4b0b      	ldr	r3, [pc, #44]	; (85994 <Cl_Dlsis_controller+0x95c>)
   85966:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85968:	2100      	movs	r1, #0
   8596a:	200c      	movs	r0, #12
   8596c:	4b0a      	ldr	r3, [pc, #40]	; (85998 <Cl_Dlsis_controller+0x960>)
   8596e:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85970:	4b17      	ldr	r3, [pc, #92]	; (859d0 <Cl_Dlsis_controller+0x998>)
   85972:	2206      	movs	r2, #6
   85974:	701a      	strb	r2, [r3, #0]
				}
			break;
   85976:	e05d      	b.n	85a34 <Cl_Dlsis_controller+0x9fc>
   85978:	20072f2c 	.word	0x20072f2c
   8597c:	0009710d 	.word	0x0009710d
   85980:	00098601 	.word	0x00098601
   85984:	cccccccd 	.word	0xcccccccd
   85988:	000a25dd 	.word	0x000a25dd
   8598c:	20072c9c 	.word	0x20072c9c
   85990:	00087a0d 	.word	0x00087a0d
   85994:	00092e89 	.word	0x00092e89
   85998:	00092315 	.word	0x00092315
   8599c:	00087b79 	.word	0x00087b79
   859a0:	20072d18 	.word	0x20072d18
   859a4:	00087079 	.word	0x00087079
   859a8:	20072c94 	.word	0x20072c94
   859ac:	000a2a65 	.word	0x000a2a65
   859b0:	000a46b4 	.word	0x000a46b4
   859b4:	000870f1 	.word	0x000870f1
   859b8:	00096afd 	.word	0x00096afd
   859bc:	00087119 	.word	0x00087119
   859c0:	00096869 	.word	0x00096869
   859c4:	00089749 	.word	0x00089749
   859c8:	00096a6d 	.word	0x00096a6d
   859cc:	000879ed 	.word	0x000879ed
   859d0:	2007208c 	.word	0x2007208c
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   859d4:	4baf      	ldr	r3, [pc, #700]	; (85c94 <Cl_Dlsis_controller+0xc5c>)
   859d6:	4798      	blx	r3
   859d8:	4603      	mov	r3, r0
   859da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Cl_Dlsis_StopDialysis();
   859de:	4bae      	ldr	r3, [pc, #696]	; (85c98 <Cl_Dlsis_controller+0xc60>)
   859e0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   859e2:	4bae      	ldr	r3, [pc, #696]	; (85c9c <Cl_Dlsis_controller+0xc64>)
   859e4:	2209      	movs	r2, #9
   859e6:	701a      	strb	r2, [r3, #0]
			break;
   859e8:	e025      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   859ea:	4bad      	ldr	r3, [pc, #692]	; (85ca0 <Cl_Dlsis_controller+0xc68>)
   859ec:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   859ee:	4bab      	ldr	r3, [pc, #684]	; (85c9c <Cl_Dlsis_controller+0xc64>)
   859f0:	2207      	movs	r2, #7
   859f2:	701a      	strb	r2, [r3, #0]
			break;
   859f4:	e01f      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   859f6:	4bab      	ldr	r3, [pc, #684]	; (85ca4 <Cl_Dlsis_controller+0xc6c>)
   859f8:	4798      	blx	r3
			break;
   859fa:	e01c      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   859fc:	4baa      	ldr	r3, [pc, #680]	; (85ca8 <Cl_Dlsis_controller+0xc70>)
   859fe:	4798      	blx	r3
			break;
   85a00:	e019      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85a02:	4baa      	ldr	r3, [pc, #680]	; (85cac <Cl_Dlsis_controller+0xc74>)
   85a04:	4798      	blx	r3
   85a06:	4603      	mov	r3, r0
   85a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
   85a0c:	e013      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   85a0e:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   85a12:	4619      	mov	r1, r3
   85a14:	2011      	movs	r0, #17
   85a16:	4ba6      	ldr	r3, [pc, #664]	; (85cb0 <Cl_Dlsis_controller+0xc78>)
   85a18:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   85a1a:	f107 033d 	add.w	r3, r7, #61	; 0x3d
   85a1e:	4619      	mov	r1, r3
   85a20:	200e      	movs	r0, #14
   85a22:	4ba3      	ldr	r3, [pc, #652]	; (85cb0 <Cl_Dlsis_controller+0xc78>)
   85a24:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   85a26:	e006      	b.n	85a36 <Cl_Dlsis_controller+0x9fe>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   85a28:	bf00      	nop
   85a2a:	e2c1      	b.n	85fb0 <Cl_Dlsis_controller+0xf78>

						default:
						break;
					}
				}
			break;
   85a2c:	bf00      	nop
   85a2e:	e2bf      	b.n	85fb0 <Cl_Dlsis_controller+0xf78>

												default:break;
											}
										}
						
			break;
   85a30:	bf00      	nop
   85a32:	e2bd      	b.n	85fb0 <Cl_Dlsis_controller+0xf78>
					Cl_DlsisFillingFlowOff();
					cl_uf_controller(CL_UF_EVENT_STOP,0);
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
				}
			break;
   85a34:	bf00      	nop
					//	}
			break;


		}
		break;
   85a36:	e2bb      	b.n	85fb0 <Cl_Dlsis_controller+0xf78>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   85a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   85a3c:	2b09      	cmp	r3, #9
   85a3e:	d008      	beq.n	85a52 <Cl_Dlsis_controller+0xa1a>
   85a40:	2b16      	cmp	r3, #22
   85a42:	d000      	beq.n	85a46 <Cl_Dlsis_controller+0xa0e>
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
										break;
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
										break;
										default:break;
   85a44:	e008      	b.n	85a58 <Cl_Dlsis_controller+0xa20>
		break;
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85a46:	4b99      	ldr	r3, [pc, #612]	; (85cac <Cl_Dlsis_controller+0xc74>)
   85a48:	4798      	blx	r3
   85a4a:	4603      	mov	r3, r0
   85a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;
   85a50:	e002      	b.n	85a58 <Cl_Dlsis_controller+0xa20>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   85a52:	4b95      	ldr	r3, [pc, #596]	; (85ca8 <Cl_Dlsis_controller+0xc70>)
   85a54:	4798      	blx	r3
										break;
   85a56:	bf00      	nop
										default:break;
									}

					
		break;
   85a58:	e2ab      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   85a5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   85a5e:	2b05      	cmp	r3, #5
   85a60:	d002      	beq.n	85a68 <Cl_Dlsis_controller+0xa30>
   85a62:	2b06      	cmp	r3, #6
   85a64:	d003      	beq.n	85a6e <Cl_Dlsis_controller+0xa36>
								Cl_Dlsis_ResumeDialysis();
								break;
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
								break;
								default:break;
   85a66:	e005      	b.n	85a74 <Cl_Dlsis_controller+0xa3c>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   85a68:	4b92      	ldr	r3, [pc, #584]	; (85cb4 <Cl_Dlsis_controller+0xc7c>)
   85a6a:	4798      	blx	r3
								break;
   85a6c:	e002      	b.n	85a74 <Cl_Dlsis_controller+0xa3c>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   85a6e:	4b8a      	ldr	r3, [pc, #552]	; (85c98 <Cl_Dlsis_controller+0xc60>)
   85a70:	4798      	blx	r3
								break;
   85a72:	bf00      	nop
								default:break;
							}
		
		break;
   85a74:	e29d      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   85a76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   85a7a:	2b04      	cmp	r3, #4
   85a7c:	d005      	beq.n	85a8a <Cl_Dlsis_controller+0xa52>
   85a7e:	2b05      	cmp	r3, #5
   85a80:	d000      	beq.n	85a84 <Cl_Dlsis_controller+0xa4c>
								Cl_Dlsis_StartDialysis();
								break;
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
								break;
								default:break;
   85a82:	e006      	b.n	85a92 <Cl_Dlsis_controller+0xa5a>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   85a84:	4b8c      	ldr	r3, [pc, #560]	; (85cb8 <Cl_Dlsis_controller+0xc80>)
   85a86:	4798      	blx	r3
								break;
   85a88:	e003      	b.n	85a92 <Cl_Dlsis_controller+0xa5a>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   85a8a:	2056      	movs	r0, #86	; 0x56
   85a8c:	4b8b      	ldr	r3, [pc, #556]	; (85cbc <Cl_Dlsis_controller+0xc84>)
   85a8e:	4798      	blx	r3
								break;
   85a90:	bf00      	nop
								default:break;
							}
							
		break;
   85a92:	e28e      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   85a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   85a98:	3b01      	subs	r3, #1
   85a9a:	2b19      	cmp	r3, #25
   85a9c:	f200 80f5 	bhi.w	85c8a <Cl_Dlsis_controller+0xc52>
   85aa0:	a201      	add	r2, pc, #4	; (adr r2, 85aa8 <Cl_Dlsis_controller+0xa70>)
   85aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85aa6:	bf00      	nop
   85aa8:	00085c55 	.word	0x00085c55
   85aac:	00085b17 	.word	0x00085b17
   85ab0:	00085c8b 	.word	0x00085c8b
   85ab4:	00085c8b 	.word	0x00085c8b
   85ab8:	00085b11 	.word	0x00085b11
   85abc:	00085c8b 	.word	0x00085c8b
   85ac0:	00085c8b 	.word	0x00085c8b
   85ac4:	00085c7f 	.word	0x00085c7f
   85ac8:	00085c85 	.word	0x00085c85
   85acc:	00085c8b 	.word	0x00085c8b
   85ad0:	00085c8b 	.word	0x00085c8b
   85ad4:	00085c8b 	.word	0x00085c8b
   85ad8:	00085c8b 	.word	0x00085c8b
   85adc:	00085c8b 	.word	0x00085c8b
   85ae0:	00085c8b 	.word	0x00085c8b
   85ae4:	00085c8b 	.word	0x00085c8b
   85ae8:	00085c8b 	.word	0x00085c8b
   85aec:	00085c8b 	.word	0x00085c8b
   85af0:	00085b65 	.word	0x00085b65
   85af4:	00085c8b 	.word	0x00085c8b
   85af8:	00085c8b 	.word	0x00085c8b
   85afc:	00085c73 	.word	0x00085c73
   85b00:	00085c8b 	.word	0x00085c8b
   85b04:	00085c8b 	.word	0x00085c8b
   85b08:	00085c8b 	.word	0x00085c8b
   85b0c:	00085c8b 	.word	0x00085c8b
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   85b10:	4b68      	ldr	r3, [pc, #416]	; (85cb4 <Cl_Dlsis_controller+0xc7c>)
   85b12:	4798      	blx	r3
						break;
   85b14:	e0bc      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   85b16:	4b6a      	ldr	r3, [pc, #424]	; (85cc0 <Cl_Dlsis_controller+0xc88>)
   85b18:	7e1b      	ldrb	r3, [r3, #24]
   85b1a:	2b00      	cmp	r3, #0
   85b1c:	f000 80b7 	beq.w	85c8e <Cl_Dlsis_controller+0xc56>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   85b20:	4b67      	ldr	r3, [pc, #412]	; (85cc0 <Cl_Dlsis_controller+0xc88>)
   85b22:	791b      	ldrb	r3, [r3, #4]
   85b24:	2b04      	cmp	r3, #4
   85b26:	d000      	beq.n	85b2a <Cl_Dlsis_controller+0xaf2>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   85b28:	e01b      	b.n	85b62 <Cl_Dlsis_controller+0xb2a>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   85b2a:	2316      	movs	r3, #22
   85b2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85b30:	2304      	movs	r3, #4
   85b32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85b36:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85b3a:	3301      	adds	r3, #1
   85b3c:	4619      	mov	r1, r3
   85b3e:	2004      	movs	r0, #4
   85b40:	4b60      	ldr	r3, [pc, #384]	; (85cc4 <Cl_Dlsis_controller+0xc8c>)
   85b42:	4798      	blx	r3
   85b44:	4603      	mov	r3, r0
   85b46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85b4a:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85b4e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
   85b52:	2202      	movs	r2, #2
   85b54:	4618      	mov	r0, r3
   85b56:	4b5c      	ldr	r3, [pc, #368]	; (85cc8 <Cl_Dlsis_controller+0xc90>)
   85b58:	4798      	blx	r3
   85b5a:	4603      	mov	r3, r0
   85b5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
									break;
   85b60:	bf00      	nop

									default:
									break;
								}
							}
						break;
   85b62:	e094      	b.n	85c8e <Cl_Dlsis_controller+0xc56>
						case EVENT_DLSIS_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   85b64:	2300      	movs	r3, #0
   85b66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   85b6a:	e06e      	b.n	85c4a <Cl_Dlsis_controller+0xc12>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   85b6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   85b70:	4956      	ldr	r1, [pc, #344]	; (85ccc <Cl_Dlsis_controller+0xc94>)
   85b72:	4613      	mov	r3, r2
   85b74:	00db      	lsls	r3, r3, #3
   85b76:	1a9b      	subs	r3, r3, r2
   85b78:	440b      	add	r3, r1
   85b7a:	7818      	ldrb	r0, [r3, #0]
   85b7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   85b80:	4613      	mov	r3, r2
   85b82:	00db      	lsls	r3, r3, #3
   85b84:	1a9b      	subs	r3, r3, r2
   85b86:	4a51      	ldr	r2, [pc, #324]	; (85ccc <Cl_Dlsis_controller+0xc94>)
   85b88:	4413      	add	r3, r2
   85b8a:	3302      	adds	r3, #2
   85b8c:	4619      	mov	r1, r3
   85b8e:	4b48      	ldr	r3, [pc, #288]	; (85cb0 <Cl_Dlsis_controller+0xc78>)
   85b90:	4798      	blx	r3
								if (Cl_DlsisAlarmTable[tempcount].IsActive)
   85b92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   85b96:	494d      	ldr	r1, [pc, #308]	; (85ccc <Cl_Dlsis_controller+0xc94>)
   85b98:	4613      	mov	r3, r2
   85b9a:	00db      	lsls	r3, r3, #3
   85b9c:	1a9b      	subs	r3, r3, r2
   85b9e:	440b      	add	r3, r1
   85ba0:	3302      	adds	r3, #2
   85ba2:	781b      	ldrb	r3, [r3, #0]
   85ba4:	2b00      	cmp	r3, #0
   85ba6:	d022      	beq.n	85bee <Cl_Dlsis_controller+0xbb6>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   85ba8:	2208      	movs	r2, #8
   85baa:	4949      	ldr	r1, [pc, #292]	; (85cd0 <Cl_Dlsis_controller+0xc98>)
   85bac:	2018      	movs	r0, #24
   85bae:	4b46      	ldr	r3, [pc, #280]	; (85cc8 <Cl_Dlsis_controller+0xc90>)
   85bb0:	4798      	blx	r3
										dlsisalarm = Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
   85bb2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   85bb6:	4945      	ldr	r1, [pc, #276]	; (85ccc <Cl_Dlsis_controller+0xc94>)
   85bb8:	4613      	mov	r3, r2
   85bba:	00db      	lsls	r3, r3, #3
   85bbc:	1a9b      	subs	r3, r3, r2
   85bbe:	440b      	add	r3, r1
   85bc0:	781a      	ldrb	r2, [r3, #0]
   85bc2:	4b44      	ldr	r3, [pc, #272]	; (85cd4 <Cl_Dlsis_controller+0xc9c>)
   85bc4:	701a      	strb	r2, [r3, #0]
										dlsis_check_alarm(dlsisalarm);
   85bc6:	4b43      	ldr	r3, [pc, #268]	; (85cd4 <Cl_Dlsis_controller+0xc9c>)
   85bc8:	781b      	ldrb	r3, [r3, #0]
   85bca:	4618      	mov	r0, r3
   85bcc:	4b42      	ldr	r3, [pc, #264]	; (85cd8 <Cl_Dlsis_controller+0xca0>)
   85bce:	4798      	blx	r3
										dlsisalarm1 = dlsisalarm;
   85bd0:	4b40      	ldr	r3, [pc, #256]	; (85cd4 <Cl_Dlsis_controller+0xc9c>)
   85bd2:	781a      	ldrb	r2, [r3, #0]
   85bd4:	4b41      	ldr	r3, [pc, #260]	; (85cdc <Cl_Dlsis_controller+0xca4>)
   85bd6:	701a      	strb	r2, [r3, #0]
										var=1;
   85bd8:	4b41      	ldr	r3, [pc, #260]	; (85ce0 <Cl_Dlsis_controller+0xca8>)
   85bda:	2201      	movs	r2, #1
   85bdc:	701a      	strb	r2, [r3, #0]
										cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85bde:	4b2f      	ldr	r3, [pc, #188]	; (85c9c <Cl_Dlsis_controller+0xc64>)
   85be0:	220a      	movs	r2, #10
   85be2:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   85be4:	2300      	movs	r3, #0
   85be6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
										break;	
   85bea:	bf00      	nop
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   85bec:	e050      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
										var=1;
										cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								if (var == 1)
   85bee:	4b3c      	ldr	r3, [pc, #240]	; (85ce0 <Cl_Dlsis_controller+0xca8>)
   85bf0:	781b      	ldrb	r3, [r3, #0]
   85bf2:	b2db      	uxtb	r3, r3
   85bf4:	2b01      	cmp	r3, #1
   85bf6:	d10c      	bne.n	85c12 <Cl_Dlsis_controller+0xbda>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RECOVERY",8);
   85bf8:	2208      	movs	r2, #8
   85bfa:	493a      	ldr	r1, [pc, #232]	; (85ce4 <Cl_Dlsis_controller+0xcac>)
   85bfc:	2018      	movs	r0, #24
   85bfe:	4b32      	ldr	r3, [pc, #200]	; (85cc8 <Cl_Dlsis_controller+0xc90>)
   85c00:	4798      	blx	r3
									dlsis_check_alarm(dlsisalarm1);
   85c02:	4b36      	ldr	r3, [pc, #216]	; (85cdc <Cl_Dlsis_controller+0xca4>)
   85c04:	781b      	ldrb	r3, [r3, #0]
   85c06:	4618      	mov	r0, r3
   85c08:	4b33      	ldr	r3, [pc, #204]	; (85cd8 <Cl_Dlsis_controller+0xca0>)
   85c0a:	4798      	blx	r3
									var = 0;
   85c0c:	4b34      	ldr	r3, [pc, #208]	; (85ce0 <Cl_Dlsis_controller+0xca8>)
   85c0e:	2200      	movs	r2, #0
   85c10:	701a      	strb	r2, [r3, #0]
								}
								if (tempcount == CL_DLSIS_ALRM_MAX - 1)
   85c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   85c16:	2b1d      	cmp	r3, #29
   85c18:	d112      	bne.n	85c40 <Cl_Dlsis_controller+0xc08>
								{
									if(!Cl_DlsisAlarmTable[tempcount].IsActive)
   85c1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   85c1e:	492b      	ldr	r1, [pc, #172]	; (85ccc <Cl_Dlsis_controller+0xc94>)
   85c20:	4613      	mov	r3, r2
   85c22:	00db      	lsls	r3, r3, #3
   85c24:	1a9b      	subs	r3, r3, r2
   85c26:	440b      	add	r3, r1
   85c28:	3302      	adds	r3, #2
   85c2a:	781b      	ldrb	r3, [r3, #0]
   85c2c:	f083 0301 	eor.w	r3, r3, #1
   85c30:	b2db      	uxtb	r3, r3
   85c32:	2b00      	cmp	r3, #0
   85c34:	d004      	beq.n	85c40 <Cl_Dlsis_controller+0xc08>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   85c36:	2208      	movs	r2, #8
   85c38:	492b      	ldr	r1, [pc, #172]	; (85ce8 <Cl_Dlsis_controller+0xcb0>)
   85c3a:	2018      	movs	r0, #24
   85c3c:	4b22      	ldr	r3, [pc, #136]	; (85cc8 <Cl_Dlsis_controller+0xc90>)
   85c3e:	4798      	blx	r3
								}
							}
						break;
						case EVENT_DLSIS_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   85c40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   85c44:	3301      	adds	r3, #1
   85c46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   85c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   85c4e:	2b1d      	cmp	r3, #29
   85c50:	d98c      	bls.n	85b6c <Cl_Dlsis_controller+0xb34>
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   85c52:	e01d      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						case EVENT_DLSIS_CLR_ALARM:
										sv_cntrl_resetredalarm();
   85c54:	4b25      	ldr	r3, [pc, #148]	; (85cec <Cl_Dlsis_controller+0xcb4>)
   85c56:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   85c58:	4b25      	ldr	r3, [pc, #148]	; (85cf0 <Cl_Dlsis_controller+0xcb8>)
   85c5a:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   85c5c:	4b25      	ldr	r3, [pc, #148]	; (85cf4 <Cl_Dlsis_controller+0xcbc>)
   85c5e:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   85c60:	2100      	movs	r1, #0
   85c62:	2002      	movs	r0, #2
   85c64:	4b24      	ldr	r3, [pc, #144]	; (85cf8 <Cl_Dlsis_controller+0xcc0>)
   85c66:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   85c68:	4b24      	ldr	r3, [pc, #144]	; (85cfc <Cl_Dlsis_controller+0xcc4>)
   85c6a:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   85c6c:	4b0e      	ldr	r3, [pc, #56]	; (85ca8 <Cl_Dlsis_controller+0xc70>)
   85c6e:	4798      	blx	r3
						break;
   85c70:	e00e      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85c72:	4b0e      	ldr	r3, [pc, #56]	; (85cac <Cl_Dlsis_controller+0xc74>)
   85c74:	4798      	blx	r3
   85c76:	4603      	mov	r3, r0
   85c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   85c7c:	e008      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   85c7e:	4b09      	ldr	r3, [pc, #36]	; (85ca4 <Cl_Dlsis_controller+0xc6c>)
   85c80:	4798      	blx	r3
						break;
   85c82:	e005      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   85c84:	4b08      	ldr	r3, [pc, #32]	; (85ca8 <Cl_Dlsis_controller+0xc70>)
   85c86:	4798      	blx	r3
						break;
   85c88:	e002      	b.n	85c90 <Cl_Dlsis_controller+0xc58>
						
						default:break;
   85c8a:	bf00      	nop
   85c8c:	e191      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>

									default:
									break;
								}
							}
						break;
   85c8e:	bf00      	nop
						Cl_Dlsis_BypassOff();
						break;
						
						default:break;
					}
		break;
   85c90:	e18f      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
   85c92:	bf00      	nop
   85c94:	00096a29 	.word	0x00096a29
   85c98:	000875c5 	.word	0x000875c5
   85c9c:	2007208c 	.word	0x2007208c
   85ca0:	00087971 	.word	0x00087971
   85ca4:	0008769d 	.word	0x0008769d
   85ca8:	0008780d 	.word	0x0008780d
   85cac:	000879c5 	.word	0x000879c5
   85cb0:	00083041 	.word	0x00083041
   85cb4:	0008844d 	.word	0x0008844d
   85cb8:	000883d1 	.word	0x000883d1
   85cbc:	0008a915 	.word	0x0008a915
   85cc0:	20072f2c 	.word	0x20072f2c
   85cc4:	0009710d 	.word	0x0009710d
   85cc8:	00098601 	.word	0x00098601
   85ccc:	20070364 	.word	0x20070364
   85cd0:	000a46b8 	.word	0x000a46b8
   85cd4:	20072d1d 	.word	0x20072d1d
   85cd8:	00085fe1 	.word	0x00085fe1
   85cdc:	20072d12 	.word	0x20072d12
   85ce0:	200720d4 	.word	0x200720d4
   85ce4:	000a46c0 	.word	0x000a46c0
   85ce8:	000a46cc 	.word	0x000a46cc
   85cec:	00096b25 	.word	0x00096b25
   85cf0:	00096b39 	.word	0x00096b39
   85cf4:	00096b61 	.word	0x00096b61
   85cf8:	00091c25 	.word	0x00091c25
   85cfc:	000969c9 	.word	0x000969c9
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   85d00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   85d04:	3b02      	subs	r3, #2
   85d06:	2b20      	cmp	r3, #32
   85d08:	f200 8148 	bhi.w	85f9c <Cl_Dlsis_controller+0xf64>
   85d0c:	a201      	add	r2, pc, #4	; (adr r2, 85d14 <Cl_Dlsis_controller+0xcdc>)
   85d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85d12:	bf00      	nop
   85d14:	00085d99 	.word	0x00085d99
   85d18:	00085e3d 	.word	0x00085e3d
   85d1c:	00085f9d 	.word	0x00085f9d
   85d20:	00085f9d 	.word	0x00085f9d
   85d24:	00085f9d 	.word	0x00085f9d
   85d28:	00085f9d 	.word	0x00085f9d
   85d2c:	00085f9d 	.word	0x00085f9d
   85d30:	00085f9d 	.word	0x00085f9d
   85d34:	00085f9d 	.word	0x00085f9d
   85d38:	00085f9d 	.word	0x00085f9d
   85d3c:	00085f9d 	.word	0x00085f9d
   85d40:	00085f9d 	.word	0x00085f9d
   85d44:	00085f9d 	.word	0x00085f9d
   85d48:	00085f9d 	.word	0x00085f9d
   85d4c:	00085f9d 	.word	0x00085f9d
   85d50:	00085f9d 	.word	0x00085f9d
   85d54:	00085f9d 	.word	0x00085f9d
   85d58:	00085f9d 	.word	0x00085f9d
   85d5c:	00085f9d 	.word	0x00085f9d
   85d60:	00085f9d 	.word	0x00085f9d
   85d64:	00085f9d 	.word	0x00085f9d
   85d68:	00085f9d 	.word	0x00085f9d
   85d6c:	00085f9d 	.word	0x00085f9d
   85d70:	00085f9d 	.word	0x00085f9d
   85d74:	00085f9d 	.word	0x00085f9d
   85d78:	00085f9d 	.word	0x00085f9d
   85d7c:	00085f9d 	.word	0x00085f9d
   85d80:	00085e07 	.word	0x00085e07
   85d84:	00085df3 	.word	0x00085df3
   85d88:	00085dfd 	.word	0x00085dfd
   85d8c:	00085d99 	.word	0x00085d99
   85d90:	00085ddb 	.word	0x00085ddb
   85d94:	00085de9 	.word	0x00085de9
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   85d98:	4b88      	ldr	r3, [pc, #544]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85d9a:	7e1b      	ldrb	r3, [r3, #24]
   85d9c:	2b00      	cmp	r3, #0
   85d9e:	f000 80ff 	beq.w	85fa0 <Cl_Dlsis_controller+0xf68>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85da2:	4b86      	ldr	r3, [pc, #536]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85da4:	791b      	ldrb	r3, [r3, #4]
   85da6:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85da8:	4b84      	ldr	r3, [pc, #528]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85daa:	795b      	ldrb	r3, [r3, #5]
   85dac:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85dae:	4b83      	ldr	r3, [pc, #524]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85db0:	799b      	ldrb	r3, [r3, #6]
   85db2:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85db4:	4b81      	ldr	r3, [pc, #516]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85db6:	79db      	ldrb	r3, [r3, #7]
   85db8:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   85dba:	8a3b      	ldrh	r3, [r7, #16]
   85dbc:	461a      	mov	r2, r3
   85dbe:	4b80      	ldr	r3, [pc, #512]	; (85fc0 <Cl_Dlsis_controller+0xf88>)
   85dc0:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   85dc2:	4b7f      	ldr	r3, [pc, #508]	; (85fc0 <Cl_Dlsis_controller+0xf88>)
   85dc4:	69db      	ldr	r3, [r3, #28]
   85dc6:	4618      	mov	r0, r3
   85dc8:	4b7e      	ldr	r3, [pc, #504]	; (85fc4 <Cl_Dlsis_controller+0xf8c>)
   85dca:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85dcc:	4b7e      	ldr	r3, [pc, #504]	; (85fc8 <Cl_Dlsis_controller+0xf90>)
   85dce:	681b      	ldr	r3, [r3, #0]
   85dd0:	4619      	mov	r1, r3
   85dd2:	2006      	movs	r0, #6
   85dd4:	4b7d      	ldr	r3, [pc, #500]	; (85fcc <Cl_Dlsis_controller+0xf94>)
   85dd6:	4798      	blx	r3
							}
						break;
   85dd8:	e0e2      	b.n	85fa0 <Cl_Dlsis_controller+0xf68>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   85dda:	4b7b      	ldr	r3, [pc, #492]	; (85fc8 <Cl_Dlsis_controller+0xf90>)
   85ddc:	681b      	ldr	r3, [r3, #0]
   85dde:	4619      	mov	r1, r3
   85de0:	200a      	movs	r0, #10
   85de2:	4b7a      	ldr	r3, [pc, #488]	; (85fcc <Cl_Dlsis_controller+0xf94>)
   85de4:	4798      	blx	r3
						break;
   85de6:	e0e0      	b.n	85faa <Cl_Dlsis_controller+0xf72>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   85de8:	2100      	movs	r1, #0
   85dea:	2009      	movs	r0, #9
   85dec:	4b77      	ldr	r3, [pc, #476]	; (85fcc <Cl_Dlsis_controller+0xf94>)
   85dee:	4798      	blx	r3
						break;
   85df0:	e0db      	b.n	85faa <Cl_Dlsis_controller+0xf72>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   85df2:	2100      	movs	r1, #0
   85df4:	2002      	movs	r0, #2
   85df6:	4b76      	ldr	r3, [pc, #472]	; (85fd0 <Cl_Dlsis_controller+0xf98>)
   85df8:	4798      	blx	r3
						break;
   85dfa:	e0d6      	b.n	85faa <Cl_Dlsis_controller+0xf72>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   85dfc:	2100      	movs	r1, #0
   85dfe:	2004      	movs	r0, #4
   85e00:	4b73      	ldr	r3, [pc, #460]	; (85fd0 <Cl_Dlsis_controller+0xf98>)
   85e02:	4798      	blx	r3
						break;
   85e04:	e0d1      	b.n	85faa <Cl_Dlsis_controller+0xf72>
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   85e06:	4b6d      	ldr	r3, [pc, #436]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e08:	7e1b      	ldrb	r3, [r3, #24]
   85e0a:	2b00      	cmp	r3, #0
   85e0c:	f000 80ca 	beq.w	85fa4 <Cl_Dlsis_controller+0xf6c>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85e10:	4b6a      	ldr	r3, [pc, #424]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e12:	791b      	ldrb	r3, [r3, #4]
   85e14:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85e16:	4b69      	ldr	r3, [pc, #420]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e18:	795b      	ldrb	r3, [r3, #5]
   85e1a:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85e1c:	4b67      	ldr	r3, [pc, #412]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e1e:	799b      	ldrb	r3, [r3, #6]
   85e20:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85e22:	4b66      	ldr	r3, [pc, #408]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e24:	79db      	ldrb	r3, [r3, #7]
   85e26:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   85e28:	89bb      	ldrh	r3, [r7, #12]
   85e2a:	4619      	mov	r1, r3
   85e2c:	2001      	movs	r0, #1
   85e2e:	4b68      	ldr	r3, [pc, #416]	; (85fd0 <Cl_Dlsis_controller+0xf98>)
   85e30:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   85e32:	89bb      	ldrh	r3, [r7, #12]
   85e34:	461a      	mov	r2, r3
   85e36:	4b62      	ldr	r3, [pc, #392]	; (85fc0 <Cl_Dlsis_controller+0xf88>)
   85e38:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   85e3a:	e0b3      	b.n	85fa4 <Cl_Dlsis_controller+0xf6c>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   85e3c:	4b5f      	ldr	r3, [pc, #380]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e3e:	7e1b      	ldrb	r3, [r3, #24]
   85e40:	2b00      	cmp	r3, #0
   85e42:	f000 80b1 	beq.w	85fa8 <Cl_Dlsis_controller+0xf70>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85e46:	4b5d      	ldr	r3, [pc, #372]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e48:	795b      	ldrb	r3, [r3, #5]
   85e4a:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85e4c:	4b5b      	ldr	r3, [pc, #364]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e4e:	799b      	ldrb	r3, [r3, #6]
   85e50:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85e52:	4b5a      	ldr	r3, [pc, #360]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e54:	79db      	ldrb	r3, [r3, #7]
   85e56:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85e58:	4b58      	ldr	r3, [pc, #352]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e5a:	7a1b      	ldrb	r3, [r3, #8]
   85e5c:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   85e5e:	4b57      	ldr	r3, [pc, #348]	; (85fbc <Cl_Dlsis_controller+0xf84>)
   85e60:	791b      	ldrb	r3, [r3, #4]
   85e62:	3b05      	subs	r3, #5
   85e64:	2b20      	cmp	r3, #32
   85e66:	f200 8097 	bhi.w	85f98 <Cl_Dlsis_controller+0xf60>
   85e6a:	a201      	add	r2, pc, #4	; (adr r2, 85e70 <Cl_Dlsis_controller+0xe38>)
   85e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85e70:	00085f99 	.word	0x00085f99
   85e74:	00085f99 	.word	0x00085f99
   85e78:	00085f99 	.word	0x00085f99
   85e7c:	00085f99 	.word	0x00085f99
   85e80:	00085f99 	.word	0x00085f99
   85e84:	00085f99 	.word	0x00085f99
   85e88:	00085f99 	.word	0x00085f99
   85e8c:	00085f99 	.word	0x00085f99
   85e90:	00085f99 	.word	0x00085f99
   85e94:	00085f99 	.word	0x00085f99
   85e98:	00085f99 	.word	0x00085f99
   85e9c:	00085f99 	.word	0x00085f99
   85ea0:	00085f99 	.word	0x00085f99
   85ea4:	00085f99 	.word	0x00085f99
   85ea8:	00085f99 	.word	0x00085f99
   85eac:	00085f99 	.word	0x00085f99
   85eb0:	00085f99 	.word	0x00085f99
   85eb4:	00085f99 	.word	0x00085f99
   85eb8:	00085f99 	.word	0x00085f99
   85ebc:	00085ef5 	.word	0x00085ef5
   85ec0:	00085f0d 	.word	0x00085f0d
   85ec4:	00085f25 	.word	0x00085f25
   85ec8:	00085f35 	.word	0x00085f35
   85ecc:	00085f45 	.word	0x00085f45
   85ed0:	00085f55 	.word	0x00085f55
   85ed4:	00085f99 	.word	0x00085f99
   85ed8:	00085f99 	.word	0x00085f99
   85edc:	00085f99 	.word	0x00085f99
   85ee0:	00085f99 	.word	0x00085f99
   85ee4:	00085f65 	.word	0x00085f65
   85ee8:	00085f6f 	.word	0x00085f6f
   85eec:	00085f79 	.word	0x00085f79
   85ef0:	00085f89 	.word	0x00085f89
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85ef4:	68bb      	ldr	r3, [r7, #8]
   85ef6:	4a37      	ldr	r2, [pc, #220]	; (85fd4 <Cl_Dlsis_controller+0xf9c>)
   85ef8:	fba2 2303 	umull	r2, r3, r2, r3
   85efc:	08da      	lsrs	r2, r3, #3
   85efe:	4b36      	ldr	r3, [pc, #216]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f00:	4610      	mov	r0, r2
   85f02:	4798      	blx	r3
   85f04:	4602      	mov	r2, r0
   85f06:	4b35      	ldr	r3, [pc, #212]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f08:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   85f0a:	e046      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85f0c:	68bb      	ldr	r3, [r7, #8]
   85f0e:	4a31      	ldr	r2, [pc, #196]	; (85fd4 <Cl_Dlsis_controller+0xf9c>)
   85f10:	fba2 2303 	umull	r2, r3, r2, r3
   85f14:	08da      	lsrs	r2, r3, #3
   85f16:	4b30      	ldr	r3, [pc, #192]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f18:	4610      	mov	r0, r2
   85f1a:	4798      	blx	r3
   85f1c:	4602      	mov	r2, r0
   85f1e:	4b2f      	ldr	r3, [pc, #188]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f20:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   85f22:	e03a      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85f24:	68ba      	ldr	r2, [r7, #8]
   85f26:	4b2c      	ldr	r3, [pc, #176]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f28:	4610      	mov	r0, r2
   85f2a:	4798      	blx	r3
   85f2c:	4602      	mov	r2, r0
   85f2e:	4b2b      	ldr	r3, [pc, #172]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f30:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   85f32:	e032      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85f34:	68ba      	ldr	r2, [r7, #8]
   85f36:	4b28      	ldr	r3, [pc, #160]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f38:	4610      	mov	r0, r2
   85f3a:	4798      	blx	r3
   85f3c:	4602      	mov	r2, r0
   85f3e:	4b27      	ldr	r3, [pc, #156]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f40:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   85f42:	e02a      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85f44:	68ba      	ldr	r2, [r7, #8]
   85f46:	4b24      	ldr	r3, [pc, #144]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f48:	4610      	mov	r0, r2
   85f4a:	4798      	blx	r3
   85f4c:	4602      	mov	r2, r0
   85f4e:	4b23      	ldr	r3, [pc, #140]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f50:	615a      	str	r2, [r3, #20]
											break;
   85f52:	e022      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85f54:	68ba      	ldr	r2, [r7, #8]
   85f56:	4b20      	ldr	r3, [pc, #128]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f58:	4610      	mov	r0, r2
   85f5a:	4798      	blx	r3
   85f5c:	4602      	mov	r2, r0
   85f5e:	4b1f      	ldr	r3, [pc, #124]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f60:	611a      	str	r2, [r3, #16]
											break;
   85f62:	e01a      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85f64:	68bb      	ldr	r3, [r7, #8]
   85f66:	b21a      	sxth	r2, r3
   85f68:	4b1c      	ldr	r3, [pc, #112]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f6a:	801a      	strh	r2, [r3, #0]
											break;
   85f6c:	e015      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85f6e:	68bb      	ldr	r3, [r7, #8]
   85f70:	b21a      	sxth	r2, r3
   85f72:	4b1a      	ldr	r3, [pc, #104]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f74:	805a      	strh	r2, [r3, #2]
											break;
   85f76:	e010      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85f78:	68ba      	ldr	r2, [r7, #8]
   85f7a:	4b17      	ldr	r3, [pc, #92]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f7c:	4610      	mov	r0, r2
   85f7e:	4798      	blx	r3
   85f80:	4602      	mov	r2, r0
   85f82:	4b16      	ldr	r3, [pc, #88]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f84:	60da      	str	r2, [r3, #12]
											break;
   85f86:	e008      	b.n	85f9a <Cl_Dlsis_controller+0xf62>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85f88:	68ba      	ldr	r2, [r7, #8]
   85f8a:	4b13      	ldr	r3, [pc, #76]	; (85fd8 <Cl_Dlsis_controller+0xfa0>)
   85f8c:	4610      	mov	r0, r2
   85f8e:	4798      	blx	r3
   85f90:	4602      	mov	r2, r0
   85f92:	4b12      	ldr	r3, [pc, #72]	; (85fdc <Cl_Dlsis_controller+0xfa4>)
   85f94:	609a      	str	r2, [r3, #8]
											
											break;
   85f96:	e000      	b.n	85f9a <Cl_Dlsis_controller+0xf62>

											default:break;
   85f98:	bf00      	nop
											}
										
										}
			
						break;
   85f9a:	e005      	b.n	85fa8 <Cl_Dlsis_controller+0xf70>
						default:
						break;
   85f9c:	bf00      	nop
   85f9e:	e008      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
								Treatdata[ID_heprate] = cl_temp.Twobyte;
								hep_calibration(Treatdata[ID_heprate]);
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
							}
						break;
   85fa0:	bf00      	nop
   85fa2:	e006      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
						}
						break;
   85fa4:	bf00      	nop
   85fa6:	e004      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
											default:break;
											}
										
										}
			
						break;
   85fa8:	bf00      	nop
						default:
						break;
					}
		break;
   85faa:	e002      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
		default:break;
   85fac:	bf00      	nop
   85fae:	e000      	b.n	85fb2 <Cl_Dlsis_controller+0xf7a>
					//	}
			break;


		}
		break;
   85fb0:	bf00      	nop
		default:break;
	}



return CL_OK;
   85fb2:	2300      	movs	r3, #0
}
   85fb4:	4618      	mov	r0, r3
   85fb6:	3750      	adds	r7, #80	; 0x50
   85fb8:	46bd      	mov	sp, r7
   85fba:	bd80      	pop	{r7, pc}
   85fbc:	20072f2c 	.word	0x20072f2c
   85fc0:	20073138 	.word	0x20073138
   85fc4:	00083d55 	.word	0x00083d55
   85fc8:	20072d0c 	.word	0x20072d0c
   85fcc:	00092315 	.word	0x00092315
   85fd0:	00091c25 	.word	0x00091c25
   85fd4:	cccccccd 	.word	0xcccccccd
   85fd8:	000a25dd 	.word	0x000a25dd
   85fdc:	20072c9c 	.word	0x20072c9c

00085fe0 <dlsis_check_alarm>:


Cl_ReturnCodeType dlsis_check_alarm(Cl_NewAlarmIdType dlsisalarm)
{
   85fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   85fe2:	b08f      	sub	sp, #60	; 0x3c
   85fe4:	af00      	add	r7, sp, #0
   85fe6:	4603      	mov	r3, r0
   85fe8:	71fb      	strb	r3, [r7, #7]
	float temp;
	Cl_Uint8Type temp1;
	Cl_Uint8Type dlsis;
	switch (dlsisalarm)
   85fea:	79fb      	ldrb	r3, [r7, #7]
   85fec:	3b01      	subs	r3, #1
   85fee:	2b27      	cmp	r3, #39	; 0x27
   85ff0:	f200 8734 	bhi.w	86e5c <dlsis_check_alarm+0xe7c>
   85ff4:	a201      	add	r2, pc, #4	; (adr r2, 85ffc <dlsis_check_alarm+0x1c>)
   85ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85ffa:	bf00      	nop
   85ffc:	0008609d 	.word	0x0008609d
   86000:	00086e5d 	.word	0x00086e5d
   86004:	00086e5d 	.word	0x00086e5d
   86008:	00086e5d 	.word	0x00086e5d
   8600c:	000860c7 	.word	0x000860c7
   86010:	0008610f 	.word	0x0008610f
   86014:	0008638d 	.word	0x0008638d
   86018:	000861ef 	.word	0x000861ef
   8601c:	00086e5d 	.word	0x00086e5d
   86020:	00086e5d 	.word	0x00086e5d
   86024:	00086e5d 	.word	0x00086e5d
   86028:	00086e5d 	.word	0x00086e5d
   8602c:	00086e5d 	.word	0x00086e5d
   86030:	00086e5d 	.word	0x00086e5d
   86034:	00086d45 	.word	0x00086d45
   86038:	00086df5 	.word	0x00086df5
   8603c:	00086c75 	.word	0x00086c75
   86040:	00086cdd 	.word	0x00086cdd
   86044:	00086ba5 	.word	0x00086ba5
   86048:	00086c0d 	.word	0x00086c0d
   8604c:	000864ab 	.word	0x000864ab
   86050:	00086543 	.word	0x00086543
   86054:	0008666d 	.word	0x0008666d
   86058:	00086701 	.word	0x00086701
   8605c:	00086e5d 	.word	0x00086e5d
   86060:	00086e5d 	.word	0x00086e5d
   86064:	00086e5d 	.word	0x00086e5d
   86068:	00086e5d 	.word	0x00086e5d
   8606c:	00086e5d 	.word	0x00086e5d
   86070:	00086e5d 	.word	0x00086e5d
   86074:	00086e5d 	.word	0x00086e5d
   86078:	00086173 	.word	0x00086173
   8607c:	00086139 	.word	0x00086139
   86080:	000861b1 	.word	0x000861b1
   86084:	0008699d 	.word	0x0008699d
   86088:	00086909 	.word	0x00086909
   8608c:	00086ac5 	.word	0x00086ac5
   86090:	00086a31 	.word	0x00086a31
   86094:	00086795 	.word	0x00086795
   86098:	00086829 	.word	0x00086829
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_2",8);
		
		case BLOODDOOR_STATUS_OPEN:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BLOODDOOR_STATUS,&temp1);
   8609c:	f107 0333 	add.w	r3, r7, #51	; 0x33
   860a0:	4619      	mov	r1, r3
   860a2:	2001      	movs	r0, #1
   860a4:	4b98      	ldr	r3, [pc, #608]	; (86308 <dlsis_check_alarm+0x328>)
   860a6:	4798      	blx	r3
				if (temp1 == 1)
   860a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   860ac:	2b01      	cmp	r3, #1
   860ae:	d103      	bne.n	860b8 <dlsis_check_alarm+0xd8>
				{
					Cl_Dlsis_safesate();
   860b0:	4b96      	ldr	r3, [pc, #600]	; (8630c <dlsis_check_alarm+0x32c>)
   860b2:	4798      	blx	r3
				else
				{
					Cl_Dlsis_recoveredsate();
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
				}	
		break;
   860b4:	f000 bed2 	b.w	86e5c <dlsis_check_alarm+0xe7c>
				{
					Cl_Dlsis_safesate();
				}
				else
				{
					Cl_Dlsis_recoveredsate();
   860b8:	4b95      	ldr	r3, [pc, #596]	; (86310 <dlsis_check_alarm+0x330>)
   860ba:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   860bc:	4b95      	ldr	r3, [pc, #596]	; (86314 <dlsis_check_alarm+0x334>)
   860be:	220a      	movs	r2, #10
   860c0:	701a      	strb	r2, [r3, #0]
				}	
		break;
   860c2:	f000 becb 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case HOLDER1STATUS_CLOSED:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_2",8);
   860c6:	2208      	movs	r2, #8
   860c8:	4993      	ldr	r1, [pc, #588]	; (86318 <dlsis_check_alarm+0x338>)
   860ca:	2018      	movs	r0, #24
   860cc:	4b93      	ldr	r3, [pc, #588]	; (8631c <dlsis_check_alarm+0x33c>)
   860ce:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&dlsis);
   860d0:	f107 0332 	add.w	r3, r7, #50	; 0x32
   860d4:	4619      	mov	r1, r3
   860d6:	2003      	movs	r0, #3
   860d8:	4b8b      	ldr	r3, [pc, #556]	; (86308 <dlsis_check_alarm+0x328>)
   860da:	4798      	blx	r3
			if (dlsis == 0)
   860dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   860e0:	2b00      	cmp	r3, #0
   860e2:	d108      	bne.n	860f6 <dlsis_check_alarm+0x116>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   860e4:	2208      	movs	r2, #8
   860e6:	498e      	ldr	r1, [pc, #568]	; (86320 <dlsis_check_alarm+0x340>)
   860e8:	2018      	movs	r0, #24
   860ea:	4b8c      	ldr	r3, [pc, #560]	; (8631c <dlsis_check_alarm+0x33c>)
   860ec:	4798      	blx	r3
				cl_temp_safestate();
   860ee:	4b8d      	ldr	r3, [pc, #564]	; (86324 <dlsis_check_alarm+0x344>)
   860f0:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				cl_temp_recoveredstate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   860f2:	f000 beb3 	b.w	86e5c <dlsis_check_alarm+0xe7c>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
				cl_temp_safestate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   860f6:	2208      	movs	r2, #8
   860f8:	498b      	ldr	r1, [pc, #556]	; (86328 <dlsis_check_alarm+0x348>)
   860fa:	2018      	movs	r0, #24
   860fc:	4b87      	ldr	r3, [pc, #540]	; (8631c <dlsis_check_alarm+0x33c>)
   860fe:	4798      	blx	r3
				cl_temp_recoveredstate();
   86100:	4b8a      	ldr	r3, [pc, #552]	; (8632c <dlsis_check_alarm+0x34c>)
   86102:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86104:	4b83      	ldr	r3, [pc, #524]	; (86314 <dlsis_check_alarm+0x334>)
   86106:	220a      	movs	r2, #10
   86108:	701a      	strb	r2, [r3, #0]
			}
		break;
   8610a:	f000 bea7 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case HOLDER2STATUS_CLOSED:
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&dlsis);
   8610e:	f107 0332 	add.w	r3, r7, #50	; 0x32
   86112:	4619      	mov	r1, r3
   86114:	2004      	movs	r0, #4
   86116:	4b7c      	ldr	r3, [pc, #496]	; (86308 <dlsis_check_alarm+0x328>)
   86118:	4798      	blx	r3
		if (dlsis == 0)
   8611a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   8611e:	2b00      	cmp	r3, #0
   86120:	d103      	bne.n	8612a <dlsis_check_alarm+0x14a>
		{
			cl_temp_safestate();
   86122:	4b80      	ldr	r3, [pc, #512]	; (86324 <dlsis_check_alarm+0x344>)
   86124:	4798      	blx	r3
		else
		{
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86126:	f000 be99 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		{
			cl_temp_safestate();
		}
		else
		{
			cl_temp_recoveredstate();
   8612a:	4b80      	ldr	r3, [pc, #512]	; (8632c <dlsis_check_alarm+0x34c>)
   8612c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8612e:	4b79      	ldr	r3, [pc, #484]	; (86314 <dlsis_check_alarm+0x334>)
   86130:	220a      	movs	r2, #10
   86132:	701a      	strb	r2, [r3, #0]
		}
		break;
   86134:	f000 be92 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case BD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86138:	2208      	movs	r2, #8
   8613a:	4979      	ldr	r1, [pc, #484]	; (86320 <dlsis_check_alarm+0x340>)
   8613c:	2018      	movs	r0, #24
   8613e:	4b77      	ldr	r3, [pc, #476]	; (8631c <dlsis_check_alarm+0x33c>)
   86140:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS,&temp1);
   86142:	f107 0333 	add.w	r3, r7, #51	; 0x33
   86146:	4619      	mov	r1, r3
   86148:	200a      	movs	r0, #10
   8614a:	4b6f      	ldr	r3, [pc, #444]	; (86308 <dlsis_check_alarm+0x328>)
   8614c:	4798      	blx	r3
			if (temp1 == 0)
   8614e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   86152:	2b00      	cmp	r3, #0
   86154:	d106      	bne.n	86164 <dlsis_check_alarm+0x184>
			{
				Cl_Dlsis_StartDialysis();
   86156:	4b76      	ldr	r3, [pc, #472]	; (86330 <dlsis_check_alarm+0x350>)
   86158:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   8615a:	4b6e      	ldr	r3, [pc, #440]	; (86314 <dlsis_check_alarm+0x334>)
   8615c:	2204      	movs	r2, #4
   8615e:	701a      	strb	r2, [r3, #0]
			else
			{
				Cl_Dlsis_StopDialysis();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   86160:	f000 be7c 	b.w	86e5c <dlsis_check_alarm+0xe7c>
				Cl_Dlsis_StartDialysis();
				cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
			}
			else
			{
				Cl_Dlsis_StopDialysis();
   86164:	4b73      	ldr	r3, [pc, #460]	; (86334 <dlsis_check_alarm+0x354>)
   86166:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86168:	4b6a      	ldr	r3, [pc, #424]	; (86314 <dlsis_check_alarm+0x334>)
   8616a:	220a      	movs	r2, #10
   8616c:	701a      	strb	r2, [r3, #0]
			}
		break;
   8616e:	f000 be75 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case ABD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86172:	2208      	movs	r2, #8
   86174:	496a      	ldr	r1, [pc, #424]	; (86320 <dlsis_check_alarm+0x340>)
   86176:	2018      	movs	r0, #24
   86178:	4b68      	ldr	r3, [pc, #416]	; (8631c <dlsis_check_alarm+0x33c>)
   8617a:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_ABDSTATUS,&temp1);
   8617c:	f107 0333 	add.w	r3, r7, #51	; 0x33
   86180:	4619      	mov	r1, r3
   86182:	2009      	movs	r0, #9
   86184:	4b60      	ldr	r3, [pc, #384]	; (86308 <dlsis_check_alarm+0x328>)
   86186:	4798      	blx	r3
			if (temp1 == 0)
   86188:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   8618c:	2b00      	cmp	r3, #0
   8618e:	d103      	bne.n	86198 <dlsis_check_alarm+0x1b8>
			{
				Cl_Dlsis_safesate();
   86190:	4b5e      	ldr	r3, [pc, #376]	; (8630c <dlsis_check_alarm+0x32c>)
   86192:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				Cl_Dlsis_recoveredsate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   86194:	f000 be62 	b.w	86e5c <dlsis_check_alarm+0xe7c>
			{
				Cl_Dlsis_safesate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86198:	2208      	movs	r2, #8
   8619a:	4963      	ldr	r1, [pc, #396]	; (86328 <dlsis_check_alarm+0x348>)
   8619c:	2018      	movs	r0, #24
   8619e:	4b5f      	ldr	r3, [pc, #380]	; (8631c <dlsis_check_alarm+0x33c>)
   861a0:	4798      	blx	r3
				Cl_Dlsis_recoveredsate();
   861a2:	4b5b      	ldr	r3, [pc, #364]	; (86310 <dlsis_check_alarm+0x330>)
   861a4:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   861a6:	4b5b      	ldr	r3, [pc, #364]	; (86314 <dlsis_check_alarm+0x334>)
   861a8:	220a      	movs	r2, #10
   861aa:	701a      	strb	r2, [r3, #0]
			}
		break;
   861ac:	f000 be56 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case BLD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   861b0:	2208      	movs	r2, #8
   861b2:	495b      	ldr	r1, [pc, #364]	; (86320 <dlsis_check_alarm+0x340>)
   861b4:	2018      	movs	r0, #24
   861b6:	4b59      	ldr	r3, [pc, #356]	; (8631c <dlsis_check_alarm+0x33c>)
   861b8:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_BLDSTATUS,&temp1);
   861ba:	f107 0333 	add.w	r3, r7, #51	; 0x33
   861be:	4619      	mov	r1, r3
   861c0:	200d      	movs	r0, #13
   861c2:	4b51      	ldr	r3, [pc, #324]	; (86308 <dlsis_check_alarm+0x328>)
   861c4:	4798      	blx	r3
			if (temp1 == 0)
   861c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   861ca:	2b00      	cmp	r3, #0
   861cc:	d103      	bne.n	861d6 <dlsis_check_alarm+0x1f6>
			{
				Cl_Dlsis_safesate();
   861ce:	4b4f      	ldr	r3, [pc, #316]	; (8630c <dlsis_check_alarm+0x32c>)
   861d0:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				Cl_Dlsis_recoveredsate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   861d2:	f000 be43 	b.w	86e5c <dlsis_check_alarm+0xe7c>
			{
				Cl_Dlsis_safesate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   861d6:	2208      	movs	r2, #8
   861d8:	4953      	ldr	r1, [pc, #332]	; (86328 <dlsis_check_alarm+0x348>)
   861da:	2018      	movs	r0, #24
   861dc:	4b4f      	ldr	r3, [pc, #316]	; (8631c <dlsis_check_alarm+0x33c>)
   861de:	4798      	blx	r3
				Cl_Dlsis_recoveredsate();
   861e0:	4b4b      	ldr	r3, [pc, #300]	; (86310 <dlsis_check_alarm+0x330>)
   861e2:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   861e4:	4b4b      	ldr	r3, [pc, #300]	; (86314 <dlsis_check_alarm+0x334>)
   861e6:	220a      	movs	r2, #10
   861e8:	701a      	strb	r2, [r3, #0]
			}
		break;
   861ea:	f000 be37 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case COND_STATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   861ee:	2208      	movs	r2, #8
   861f0:	494b      	ldr	r1, [pc, #300]	; (86320 <dlsis_check_alarm+0x340>)
   861f2:	2018      	movs	r0, #24
   861f4:	4b49      	ldr	r3, [pc, #292]	; (8631c <dlsis_check_alarm+0x33c>)
   861f6:	4798      	blx	r3
		temp = (cl_sys_statbuffer.cond_status * 3300/4096);
   861f8:	4b4f      	ldr	r3, [pc, #316]	; (86338 <dlsis_check_alarm+0x358>)
   861fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   861fc:	461a      	mov	r2, r3
   861fe:	f640 43e4 	movw	r3, #3300	; 0xce4
   86202:	fb03 f302 	mul.w	r3, r3, r2
   86206:	2b00      	cmp	r3, #0
   86208:	da01      	bge.n	8620e <dlsis_check_alarm+0x22e>
   8620a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8620e:	131b      	asrs	r3, r3, #12
   86210:	461a      	mov	r2, r3
   86212:	4b4a      	ldr	r3, [pc, #296]	; (8633c <dlsis_check_alarm+0x35c>)
   86214:	4610      	mov	r0, r2
   86216:	4798      	blx	r3
   86218:	4603      	mov	r3, r0
   8621a:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_cond(temp);
   8621c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8621e:	4b48      	ldr	r3, [pc, #288]	; (86340 <dlsis_check_alarm+0x360>)
   86220:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
// 		calibration_tmp(temp,TS3);
       
		dlsis_cond= cond_final_cs3/(1+(cl_sys_statbuffer.Temp3status-25.0)*0.021);         // changed the temperature reading style from previous to current
   86222:	4b48      	ldr	r3, [pc, #288]	; (86344 <dlsis_check_alarm+0x364>)
   86224:	681a      	ldr	r2, [r3, #0]
   86226:	4b48      	ldr	r3, [pc, #288]	; (86348 <dlsis_check_alarm+0x368>)
   86228:	4610      	mov	r0, r2
   8622a:	4798      	blx	r3
   8622c:	4605      	mov	r5, r0
   8622e:	460e      	mov	r6, r1
   86230:	4b41      	ldr	r3, [pc, #260]	; (86338 <dlsis_check_alarm+0x358>)
   86232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   86234:	461a      	mov	r2, r3
   86236:	4b45      	ldr	r3, [pc, #276]	; (8634c <dlsis_check_alarm+0x36c>)
   86238:	4610      	mov	r0, r2
   8623a:	4798      	blx	r3
   8623c:	4c44      	ldr	r4, [pc, #272]	; (86350 <dlsis_check_alarm+0x370>)
   8623e:	f04f 0200 	mov.w	r2, #0
   86242:	4b44      	ldr	r3, [pc, #272]	; (86354 <dlsis_check_alarm+0x374>)
   86244:	47a0      	blx	r4
   86246:	4603      	mov	r3, r0
   86248:	460c      	mov	r4, r1
   8624a:	4618      	mov	r0, r3
   8624c:	4621      	mov	r1, r4
   8624e:	4c42      	ldr	r4, [pc, #264]	; (86358 <dlsis_check_alarm+0x378>)
   86250:	a32b      	add	r3, pc, #172	; (adr r3, 86300 <dlsis_check_alarm+0x320>)
   86252:	e9d3 2300 	ldrd	r2, r3, [r3]
   86256:	47a0      	blx	r4
   86258:	4603      	mov	r3, r0
   8625a:	460c      	mov	r4, r1
   8625c:	4618      	mov	r0, r3
   8625e:	4621      	mov	r1, r4
   86260:	4c3e      	ldr	r4, [pc, #248]	; (8635c <dlsis_check_alarm+0x37c>)
   86262:	f04f 0200 	mov.w	r2, #0
   86266:	4b3e      	ldr	r3, [pc, #248]	; (86360 <dlsis_check_alarm+0x380>)
   86268:	47a0      	blx	r4
   8626a:	4603      	mov	r3, r0
   8626c:	460c      	mov	r4, r1
   8626e:	461a      	mov	r2, r3
   86270:	4623      	mov	r3, r4
   86272:	4c3c      	ldr	r4, [pc, #240]	; (86364 <dlsis_check_alarm+0x384>)
   86274:	4628      	mov	r0, r5
   86276:	4631      	mov	r1, r6
   86278:	47a0      	blx	r4
   8627a:	4603      	mov	r3, r0
   8627c:	460c      	mov	r4, r1
   8627e:	4619      	mov	r1, r3
   86280:	4622      	mov	r2, r4
   86282:	4b39      	ldr	r3, [pc, #228]	; (86368 <dlsis_check_alarm+0x388>)
   86284:	4608      	mov	r0, r1
   86286:	4611      	mov	r1, r2
   86288:	4798      	blx	r3
   8628a:	4602      	mov	r2, r0
   8628c:	4b37      	ldr	r3, [pc, #220]	; (8636c <dlsis_check_alarm+0x38c>)
   8628e:	601a      	str	r2, [r3, #0]
		dlsis_cond=dlsis_cond/10;
   86290:	4b36      	ldr	r3, [pc, #216]	; (8636c <dlsis_check_alarm+0x38c>)
   86292:	681a      	ldr	r2, [r3, #0]
   86294:	4b36      	ldr	r3, [pc, #216]	; (86370 <dlsis_check_alarm+0x390>)
   86296:	4937      	ldr	r1, [pc, #220]	; (86374 <dlsis_check_alarm+0x394>)
   86298:	4610      	mov	r0, r2
   8629a:	4798      	blx	r3
   8629c:	4603      	mov	r3, r0
   8629e:	461a      	mov	r2, r3
   862a0:	4b32      	ldr	r3, [pc, #200]	; (8636c <dlsis_check_alarm+0x38c>)
   862a2:	601a      	str	r2, [r3, #0]
		Cl_Uint16Type var1;
		var1=dlsis_cond;
   862a4:	4b31      	ldr	r3, [pc, #196]	; (8636c <dlsis_check_alarm+0x38c>)
   862a6:	681a      	ldr	r2, [r3, #0]
   862a8:	4b33      	ldr	r3, [pc, #204]	; (86378 <dlsis_check_alarm+0x398>)
   862aa:	4610      	mov	r0, r2
   862ac:	4798      	blx	r3
   862ae:	4603      	mov	r3, r0
   862b0:	b29b      	uxth	r3, r3
   862b2:	863b      	strh	r3, [r7, #48]	; 0x30
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   862b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
   862b8:	2202      	movs	r2, #2
   862ba:	4619      	mov	r1, r3
   862bc:	2019      	movs	r0, #25
   862be:	4b17      	ldr	r3, [pc, #92]	; (8631c <dlsis_check_alarm+0x33c>)
   862c0:	4798      	blx	r3
		if (dlsis_cond > Cl_alarmThresholdTable.cond_high_threshold)
   862c2:	4b2e      	ldr	r3, [pc, #184]	; (8637c <dlsis_check_alarm+0x39c>)
   862c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   862c8:	4b1c      	ldr	r3, [pc, #112]	; (8633c <dlsis_check_alarm+0x35c>)
   862ca:	4610      	mov	r0, r2
   862cc:	4798      	blx	r3
   862ce:	4b27      	ldr	r3, [pc, #156]	; (8636c <dlsis_check_alarm+0x38c>)
   862d0:	681a      	ldr	r2, [r3, #0]
   862d2:	4b2b      	ldr	r3, [pc, #172]	; (86380 <dlsis_check_alarm+0x3a0>)
   862d4:	4611      	mov	r1, r2
   862d6:	4798      	blx	r3
   862d8:	4603      	mov	r3, r0
   862da:	2b00      	cmp	r3, #0
   862dc:	d003      	beq.n	862e6 <dlsis_check_alarm+0x306>
		{
			cl_cond_safestate();
   862de:	4b29      	ldr	r3, [pc, #164]	; (86384 <dlsis_check_alarm+0x3a4>)
   862e0:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_cond_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   862e2:	f000 bdbb 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		{
			cl_cond_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   862e6:	2208      	movs	r2, #8
   862e8:	490f      	ldr	r1, [pc, #60]	; (86328 <dlsis_check_alarm+0x348>)
   862ea:	2018      	movs	r0, #24
   862ec:	4b0b      	ldr	r3, [pc, #44]	; (8631c <dlsis_check_alarm+0x33c>)
   862ee:	4798      	blx	r3
			cl_cond_recoveredstate();
   862f0:	4b25      	ldr	r3, [pc, #148]	; (86388 <dlsis_check_alarm+0x3a8>)
   862f2:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   862f4:	4b07      	ldr	r3, [pc, #28]	; (86314 <dlsis_check_alarm+0x334>)
   862f6:	220a      	movs	r2, #10
   862f8:	701a      	strb	r2, [r3, #0]
		}
		break;
   862fa:	f000 bdaf 	b.w	86e5c <dlsis_check_alarm+0xe7c>
   862fe:	bf00      	nop
   86300:	24dd2f1b 	.word	0x24dd2f1b
   86304:	3f958106 	.word	0x3f958106
   86308:	0008d499 	.word	0x0008d499
   8630c:	00088775 	.word	0x00088775
   86310:	000887b9 	.word	0x000887b9
   86314:	2007208c 	.word	0x2007208c
   86318:	000a46d4 	.word	0x000a46d4
   8631c:	00098601 	.word	0x00098601
   86320:	000a46dc 	.word	0x000a46dc
   86324:	0008881d 	.word	0x0008881d
   86328:	000a46e4 	.word	0x000a46e4
   8632c:	00088869 	.word	0x00088869
   86330:	000883d1 	.word	0x000883d1
   86334:	000875c5 	.word	0x000875c5
   86338:	20072dbc 	.word	0x20072dbc
   8633c:	000a25e5 	.word	0x000a25e5
   86340:	00084471 	.word	0x00084471
   86344:	20071634 	.word	0x20071634
   86348:	000a1d65 	.word	0x000a1d65
   8634c:	000a1d41 	.word	0x000a1d41
   86350:	000a1aa5 	.word	0x000a1aa5
   86354:	40390000 	.word	0x40390000
   86358:	000a1e0d 	.word	0x000a1e0d
   8635c:	000a1aa9 	.word	0x000a1aa9
   86360:	3ff00000 	.word	0x3ff00000
   86364:	000a2061 	.word	0x000a2061
   86368:	000a23d1 	.word	0x000a23d1
   8636c:	200720d0 	.word	0x200720d0
   86370:	000a27f5 	.word	0x000a27f5
   86374:	41200000 	.word	0x41200000
   86378:	000a2a65 	.word	0x000a2a65
   8637c:	20072c9c 	.word	0x20072c9c
   86380:	000a29c9 	.word	0x000a29c9
   86384:	000888cd 	.word	0x000888cd
   86388:	000888e9 	.word	0x000888e9
		
		case COND_STATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8638c:	2208      	movs	r2, #8
   8638e:	4996      	ldr	r1, [pc, #600]	; (865e8 <dlsis_check_alarm+0x608>)
   86390:	2018      	movs	r0, #24
   86392:	4b96      	ldr	r3, [pc, #600]	; (865ec <dlsis_check_alarm+0x60c>)
   86394:	4798      	blx	r3
		temp = (cl_sys_statbuffer.cond_status * 3300/4096);
   86396:	4b96      	ldr	r3, [pc, #600]	; (865f0 <dlsis_check_alarm+0x610>)
   86398:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8639a:	461a      	mov	r2, r3
   8639c:	f640 43e4 	movw	r3, #3300	; 0xce4
   863a0:	fb03 f302 	mul.w	r3, r3, r2
   863a4:	2b00      	cmp	r3, #0
   863a6:	da01      	bge.n	863ac <dlsis_check_alarm+0x3cc>
   863a8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   863ac:	131b      	asrs	r3, r3, #12
   863ae:	461a      	mov	r2, r3
   863b0:	4b90      	ldr	r3, [pc, #576]	; (865f4 <dlsis_check_alarm+0x614>)
   863b2:	4610      	mov	r0, r2
   863b4:	4798      	blx	r3
   863b6:	4603      	mov	r3, r0
   863b8:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_cond(temp);
   863ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
   863bc:	4b8e      	ldr	r3, [pc, #568]	; (865f8 <dlsis_check_alarm+0x618>)
   863be:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
// 		calibration_tmp(temp,TS3);
		temprature_final_value_3 = cl_sys_statbuffer.Temp3status;
   863c0:	4b8b      	ldr	r3, [pc, #556]	; (865f0 <dlsis_check_alarm+0x610>)
   863c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   863c4:	4b8d      	ldr	r3, [pc, #564]	; (865fc <dlsis_check_alarm+0x61c>)
   863c6:	4610      	mov	r0, r2
   863c8:	4798      	blx	r3
   863ca:	4602      	mov	r2, r0
   863cc:	4b8c      	ldr	r3, [pc, #560]	; (86600 <dlsis_check_alarm+0x620>)
   863ce:	601a      	str	r2, [r3, #0]
		dlsis_cond= cond_final_cs3/(1+(temprature_final_value_3-25.0)*0.021);
   863d0:	4b8c      	ldr	r3, [pc, #560]	; (86604 <dlsis_check_alarm+0x624>)
   863d2:	681a      	ldr	r2, [r3, #0]
   863d4:	4b8c      	ldr	r3, [pc, #560]	; (86608 <dlsis_check_alarm+0x628>)
   863d6:	4610      	mov	r0, r2
   863d8:	4798      	blx	r3
   863da:	4605      	mov	r5, r0
   863dc:	460e      	mov	r6, r1
   863de:	4b88      	ldr	r3, [pc, #544]	; (86600 <dlsis_check_alarm+0x620>)
   863e0:	681a      	ldr	r2, [r3, #0]
   863e2:	4b89      	ldr	r3, [pc, #548]	; (86608 <dlsis_check_alarm+0x628>)
   863e4:	4610      	mov	r0, r2
   863e6:	4798      	blx	r3
   863e8:	4c88      	ldr	r4, [pc, #544]	; (8660c <dlsis_check_alarm+0x62c>)
   863ea:	f04f 0200 	mov.w	r2, #0
   863ee:	4b88      	ldr	r3, [pc, #544]	; (86610 <dlsis_check_alarm+0x630>)
   863f0:	47a0      	blx	r4
   863f2:	4603      	mov	r3, r0
   863f4:	460c      	mov	r4, r1
   863f6:	4618      	mov	r0, r3
   863f8:	4621      	mov	r1, r4
   863fa:	4c86      	ldr	r4, [pc, #536]	; (86614 <dlsis_check_alarm+0x634>)
   863fc:	a378      	add	r3, pc, #480	; (adr r3, 865e0 <dlsis_check_alarm+0x600>)
   863fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   86402:	47a0      	blx	r4
   86404:	4603      	mov	r3, r0
   86406:	460c      	mov	r4, r1
   86408:	4618      	mov	r0, r3
   8640a:	4621      	mov	r1, r4
   8640c:	4c82      	ldr	r4, [pc, #520]	; (86618 <dlsis_check_alarm+0x638>)
   8640e:	f04f 0200 	mov.w	r2, #0
   86412:	4b82      	ldr	r3, [pc, #520]	; (8661c <dlsis_check_alarm+0x63c>)
   86414:	47a0      	blx	r4
   86416:	4603      	mov	r3, r0
   86418:	460c      	mov	r4, r1
   8641a:	461a      	mov	r2, r3
   8641c:	4623      	mov	r3, r4
   8641e:	4c80      	ldr	r4, [pc, #512]	; (86620 <dlsis_check_alarm+0x640>)
   86420:	4628      	mov	r0, r5
   86422:	4631      	mov	r1, r6
   86424:	47a0      	blx	r4
   86426:	4603      	mov	r3, r0
   86428:	460c      	mov	r4, r1
   8642a:	4619      	mov	r1, r3
   8642c:	4622      	mov	r2, r4
   8642e:	4b7d      	ldr	r3, [pc, #500]	; (86624 <dlsis_check_alarm+0x644>)
   86430:	4608      	mov	r0, r1
   86432:	4611      	mov	r1, r2
   86434:	4798      	blx	r3
   86436:	4602      	mov	r2, r0
   86438:	4b7b      	ldr	r3, [pc, #492]	; (86628 <dlsis_check_alarm+0x648>)
   8643a:	601a      	str	r2, [r3, #0]
		dlsis_cond=dlsis_cond/10;
   8643c:	4b7a      	ldr	r3, [pc, #488]	; (86628 <dlsis_check_alarm+0x648>)
   8643e:	681a      	ldr	r2, [r3, #0]
   86440:	4b7a      	ldr	r3, [pc, #488]	; (8662c <dlsis_check_alarm+0x64c>)
   86442:	497b      	ldr	r1, [pc, #492]	; (86630 <dlsis_check_alarm+0x650>)
   86444:	4610      	mov	r0, r2
   86446:	4798      	blx	r3
   86448:	4603      	mov	r3, r0
   8644a:	461a      	mov	r2, r3
   8644c:	4b76      	ldr	r3, [pc, #472]	; (86628 <dlsis_check_alarm+0x648>)
   8644e:	601a      	str	r2, [r3, #0]
		if (dlsis_cond < Cl_alarmThresholdTable.cond_low_threshold)
   86450:	4b78      	ldr	r3, [pc, #480]	; (86634 <dlsis_check_alarm+0x654>)
   86452:	f9b3 2000 	ldrsh.w	r2, [r3]
   86456:	4b67      	ldr	r3, [pc, #412]	; (865f4 <dlsis_check_alarm+0x614>)
   86458:	4610      	mov	r0, r2
   8645a:	4798      	blx	r3
   8645c:	4b72      	ldr	r3, [pc, #456]	; (86628 <dlsis_check_alarm+0x648>)
   8645e:	681a      	ldr	r2, [r3, #0]
   86460:	4b75      	ldr	r3, [pc, #468]	; (86638 <dlsis_check_alarm+0x658>)
   86462:	4611      	mov	r1, r2
   86464:	4798      	blx	r3
   86466:	4603      	mov	r3, r0
   86468:	2b00      	cmp	r3, #0
   8646a:	d012      	beq.n	86492 <dlsis_check_alarm+0x4b2>
		{
			Cl_Uint16Type var1;
			var1=dlsis_cond;
   8646c:	4b6e      	ldr	r3, [pc, #440]	; (86628 <dlsis_check_alarm+0x648>)
   8646e:	681a      	ldr	r2, [r3, #0]
   86470:	4b72      	ldr	r3, [pc, #456]	; (8663c <dlsis_check_alarm+0x65c>)
   86472:	4610      	mov	r0, r2
   86474:	4798      	blx	r3
   86476:	4603      	mov	r3, r0
   86478:	b29b      	uxth	r3, r3
   8647a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8647c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   86480:	2202      	movs	r2, #2
   86482:	4619      	mov	r1, r3
   86484:	2019      	movs	r0, #25
   86486:	4b59      	ldr	r3, [pc, #356]	; (865ec <dlsis_check_alarm+0x60c>)
   86488:	4798      	blx	r3
			cl_cond_safestate();
   8648a:	4b6d      	ldr	r3, [pc, #436]	; (86640 <dlsis_check_alarm+0x660>)
   8648c:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_cond_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8648e:	f000 bce5 	b.w	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_cond_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86492:	2208      	movs	r2, #8
   86494:	496b      	ldr	r1, [pc, #428]	; (86644 <dlsis_check_alarm+0x664>)
   86496:	2018      	movs	r0, #24
   86498:	4b54      	ldr	r3, [pc, #336]	; (865ec <dlsis_check_alarm+0x60c>)
   8649a:	4798      	blx	r3
			cl_cond_recoveredstate();
   8649c:	4b6a      	ldr	r3, [pc, #424]	; (86648 <dlsis_check_alarm+0x668>)
   8649e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   864a0:	4b6a      	ldr	r3, [pc, #424]	; (8664c <dlsis_check_alarm+0x66c>)
   864a2:	220a      	movs	r2, #10
   864a4:	701a      	strb	r2, [r3, #0]
		}
		break;
   864a6:	f000 bcd9 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case PS1_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   864aa:	2208      	movs	r2, #8
   864ac:	494e      	ldr	r1, [pc, #312]	; (865e8 <dlsis_check_alarm+0x608>)
   864ae:	2018      	movs	r0, #24
   864b0:	4b4e      	ldr	r3, [pc, #312]	; (865ec <dlsis_check_alarm+0x60c>)
   864b2:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps1status * 3300/4096);
   864b4:	4b4e      	ldr	r3, [pc, #312]	; (865f0 <dlsis_check_alarm+0x610>)
   864b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   864b8:	461a      	mov	r2, r3
   864ba:	f640 43e4 	movw	r3, #3300	; 0xce4
   864be:	fb03 f302 	mul.w	r3, r3, r2
   864c2:	2b00      	cmp	r3, #0
   864c4:	da01      	bge.n	864ca <dlsis_check_alarm+0x4ea>
   864c6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   864ca:	131b      	asrs	r3, r3, #12
   864cc:	461a      	mov	r2, r3
   864ce:	4b49      	ldr	r3, [pc, #292]	; (865f4 <dlsis_check_alarm+0x614>)
   864d0:	4610      	mov	r0, r2
   864d2:	4798      	blx	r3
   864d4:	4603      	mov	r3, r0
   864d6:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps1(temp);
   864d8:	4b5d      	ldr	r3, [pc, #372]	; (86650 <dlsis_check_alarm+0x670>)
   864da:	6b78      	ldr	r0, [r7, #52]	; 0x34
   864dc:	4798      	blx	r3
   864de:	4603      	mov	r3, r0
   864e0:	b21b      	sxth	r3, r3
   864e2:	4618      	mov	r0, r3
   864e4:	4b5b      	ldr	r3, [pc, #364]	; (86654 <dlsis_check_alarm+0x674>)
   864e6:	4798      	blx	r3
		dlsis_ps1 = pressure_final_ps1;
   864e8:	4b5b      	ldr	r3, [pc, #364]	; (86658 <dlsis_check_alarm+0x678>)
   864ea:	681b      	ldr	r3, [r3, #0]
   864ec:	4a5b      	ldr	r2, [pc, #364]	; (8665c <dlsis_check_alarm+0x67c>)
   864ee:	6013      	str	r3, [r2, #0]
		if (dlsis_ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   864f0:	4b50      	ldr	r3, [pc, #320]	; (86634 <dlsis_check_alarm+0x654>)
   864f2:	699a      	ldr	r2, [r3, #24]
   864f4:	4b59      	ldr	r3, [pc, #356]	; (8665c <dlsis_check_alarm+0x67c>)
   864f6:	6819      	ldr	r1, [r3, #0]
   864f8:	4b59      	ldr	r3, [pc, #356]	; (86660 <dlsis_check_alarm+0x680>)
   864fa:	4610      	mov	r0, r2
   864fc:	4798      	blx	r3
   864fe:	4603      	mov	r3, r0
   86500:	2b00      	cmp	r3, #0
   86502:	d012      	beq.n	8652a <dlsis_check_alarm+0x54a>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps1;
   86504:	4b55      	ldr	r3, [pc, #340]	; (8665c <dlsis_check_alarm+0x67c>)
   86506:	681a      	ldr	r2, [r3, #0]
   86508:	4b4c      	ldr	r3, [pc, #304]	; (8663c <dlsis_check_alarm+0x65c>)
   8650a:	4610      	mov	r0, r2
   8650c:	4798      	blx	r3
   8650e:	4603      	mov	r3, r0
   86510:	b29b      	uxth	r3, r3
   86512:	85bb      	strh	r3, [r7, #44]	; 0x2c
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   86518:	2202      	movs	r2, #2
   8651a:	4619      	mov	r1, r3
   8651c:	2019      	movs	r0, #25
   8651e:	4b33      	ldr	r3, [pc, #204]	; (865ec <dlsis_check_alarm+0x60c>)
   86520:	4798      	blx	r3
			cl_temp_safestate();
   86522:	4b50      	ldr	r3, [pc, #320]	; (86664 <dlsis_check_alarm+0x684>)
   86524:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86526:	f000 bc99 	b.w	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   8652a:	2208      	movs	r2, #8
   8652c:	4945      	ldr	r1, [pc, #276]	; (86644 <dlsis_check_alarm+0x664>)
   8652e:	2018      	movs	r0, #24
   86530:	4b2e      	ldr	r3, [pc, #184]	; (865ec <dlsis_check_alarm+0x60c>)
   86532:	4798      	blx	r3
			cl_temp_recoveredstate();
   86534:	4b4c      	ldr	r3, [pc, #304]	; (86668 <dlsis_check_alarm+0x688>)
   86536:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86538:	4b44      	ldr	r3, [pc, #272]	; (8664c <dlsis_check_alarm+0x66c>)
   8653a:	220a      	movs	r2, #10
   8653c:	701a      	strb	r2, [r3, #0]
		}
		break;
   8653e:	f000 bc8d 	b.w	86e5c <dlsis_check_alarm+0xe7c>
		
		case PS1_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86542:	2208      	movs	r2, #8
   86544:	4928      	ldr	r1, [pc, #160]	; (865e8 <dlsis_check_alarm+0x608>)
   86546:	2018      	movs	r0, #24
   86548:	4b28      	ldr	r3, [pc, #160]	; (865ec <dlsis_check_alarm+0x60c>)
   8654a:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps1status * 3300/4096);
   8654c:	4b28      	ldr	r3, [pc, #160]	; (865f0 <dlsis_check_alarm+0x610>)
   8654e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   86550:	461a      	mov	r2, r3
   86552:	f640 43e4 	movw	r3, #3300	; 0xce4
   86556:	fb03 f302 	mul.w	r3, r3, r2
   8655a:	2b00      	cmp	r3, #0
   8655c:	da01      	bge.n	86562 <dlsis_check_alarm+0x582>
   8655e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86562:	131b      	asrs	r3, r3, #12
   86564:	461a      	mov	r2, r3
   86566:	4b23      	ldr	r3, [pc, #140]	; (865f4 <dlsis_check_alarm+0x614>)
   86568:	4610      	mov	r0, r2
   8656a:	4798      	blx	r3
   8656c:	4603      	mov	r3, r0
   8656e:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps1(temp);
   86570:	4b37      	ldr	r3, [pc, #220]	; (86650 <dlsis_check_alarm+0x670>)
   86572:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86574:	4798      	blx	r3
   86576:	4603      	mov	r3, r0
   86578:	b21b      	sxth	r3, r3
   8657a:	4618      	mov	r0, r3
   8657c:	4b35      	ldr	r3, [pc, #212]	; (86654 <dlsis_check_alarm+0x674>)
   8657e:	4798      	blx	r3
		dlsis_ps1 = pressure_final_ps1;
   86580:	4b35      	ldr	r3, [pc, #212]	; (86658 <dlsis_check_alarm+0x678>)
   86582:	681b      	ldr	r3, [r3, #0]
   86584:	4a35      	ldr	r2, [pc, #212]	; (8665c <dlsis_check_alarm+0x67c>)
   86586:	6013      	str	r3, [r2, #0]
		if (dlsis_ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   86588:	4b2a      	ldr	r3, [pc, #168]	; (86634 <dlsis_check_alarm+0x654>)
   8658a:	69da      	ldr	r2, [r3, #28]
   8658c:	4b33      	ldr	r3, [pc, #204]	; (8665c <dlsis_check_alarm+0x67c>)
   8658e:	6819      	ldr	r1, [r3, #0]
   86590:	4b29      	ldr	r3, [pc, #164]	; (86638 <dlsis_check_alarm+0x658>)
   86592:	4610      	mov	r0, r2
   86594:	4798      	blx	r3
   86596:	4603      	mov	r3, r0
   86598:	2b00      	cmp	r3, #0
   8659a:	d012      	beq.n	865c2 <dlsis_check_alarm+0x5e2>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps1;
   8659c:	4b2f      	ldr	r3, [pc, #188]	; (8665c <dlsis_check_alarm+0x67c>)
   8659e:	681a      	ldr	r2, [r3, #0]
   865a0:	4b26      	ldr	r3, [pc, #152]	; (8663c <dlsis_check_alarm+0x65c>)
   865a2:	4610      	mov	r0, r2
   865a4:	4798      	blx	r3
   865a6:	4603      	mov	r3, r0
   865a8:	b29b      	uxth	r3, r3
   865aa:	857b      	strh	r3, [r7, #42]	; 0x2a
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   865ac:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   865b0:	2202      	movs	r2, #2
   865b2:	4619      	mov	r1, r3
   865b4:	2019      	movs	r0, #25
   865b6:	4b0d      	ldr	r3, [pc, #52]	; (865ec <dlsis_check_alarm+0x60c>)
   865b8:	4798      	blx	r3
			cl_temp_safestate();
   865ba:	4b2a      	ldr	r3, [pc, #168]	; (86664 <dlsis_check_alarm+0x684>)
   865bc:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   865be:	f000 bc4d 	b.w	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   865c2:	2208      	movs	r2, #8
   865c4:	491f      	ldr	r1, [pc, #124]	; (86644 <dlsis_check_alarm+0x664>)
   865c6:	2018      	movs	r0, #24
   865c8:	4b08      	ldr	r3, [pc, #32]	; (865ec <dlsis_check_alarm+0x60c>)
   865ca:	4798      	blx	r3
			cl_temp_recoveredstate();
   865cc:	4b26      	ldr	r3, [pc, #152]	; (86668 <dlsis_check_alarm+0x688>)
   865ce:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   865d0:	4b1e      	ldr	r3, [pc, #120]	; (8664c <dlsis_check_alarm+0x66c>)
   865d2:	220a      	movs	r2, #10
   865d4:	701a      	strb	r2, [r3, #0]
		}
		break;
   865d6:	f000 bc41 	b.w	86e5c <dlsis_check_alarm+0xe7c>
   865da:	bf00      	nop
   865dc:	f3af 8000 	nop.w
   865e0:	24dd2f1b 	.word	0x24dd2f1b
   865e4:	3f958106 	.word	0x3f958106
   865e8:	000a46dc 	.word	0x000a46dc
   865ec:	00098601 	.word	0x00098601
   865f0:	20072dbc 	.word	0x20072dbc
   865f4:	000a25e5 	.word	0x000a25e5
   865f8:	00084471 	.word	0x00084471
   865fc:	000a25dd 	.word	0x000a25dd
   86600:	20071630 	.word	0x20071630
   86604:	20071634 	.word	0x20071634
   86608:	000a1d65 	.word	0x000a1d65
   8660c:	000a1aa5 	.word	0x000a1aa5
   86610:	40390000 	.word	0x40390000
   86614:	000a1e0d 	.word	0x000a1e0d
   86618:	000a1aa9 	.word	0x000a1aa9
   8661c:	3ff00000 	.word	0x3ff00000
   86620:	000a2061 	.word	0x000a2061
   86624:	000a23d1 	.word	0x000a23d1
   86628:	200720d0 	.word	0x200720d0
   8662c:	000a27f5 	.word	0x000a27f5
   86630:	41200000 	.word	0x41200000
   86634:	20072c9c 	.word	0x20072c9c
   86638:	000a2a05 	.word	0x000a2a05
   8663c:	000a2a65 	.word	0x000a2a65
   86640:	000888cd 	.word	0x000888cd
   86644:	000a46e4 	.word	0x000a46e4
   86648:	000888e9 	.word	0x000888e9
   8664c:	2007208c 	.word	0x2007208c
   86650:	000a2a19 	.word	0x000a2a19
   86654:	0008413d 	.word	0x0008413d
   86658:	2007161c 	.word	0x2007161c
   8665c:	200720b0 	.word	0x200720b0
   86660:	000a29c9 	.word	0x000a29c9
   86664:	0008881d 	.word	0x0008881d
   86668:	00088869 	.word	0x00088869
		
		case PS2_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8666c:	2208      	movs	r2, #8
   8666e:	4993      	ldr	r1, [pc, #588]	; (868bc <dlsis_check_alarm+0x8dc>)
   86670:	2018      	movs	r0, #24
   86672:	4b93      	ldr	r3, [pc, #588]	; (868c0 <dlsis_check_alarm+0x8e0>)
   86674:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps2status * 3300/4096);
   86676:	4b93      	ldr	r3, [pc, #588]	; (868c4 <dlsis_check_alarm+0x8e4>)
   86678:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8667a:	461a      	mov	r2, r3
   8667c:	f640 43e4 	movw	r3, #3300	; 0xce4
   86680:	fb03 f302 	mul.w	r3, r3, r2
   86684:	2b00      	cmp	r3, #0
   86686:	da01      	bge.n	8668c <dlsis_check_alarm+0x6ac>
   86688:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8668c:	131b      	asrs	r3, r3, #12
   8668e:	461a      	mov	r2, r3
   86690:	4b8d      	ldr	r3, [pc, #564]	; (868c8 <dlsis_check_alarm+0x8e8>)
   86692:	4610      	mov	r0, r2
   86694:	4798      	blx	r3
   86696:	4603      	mov	r3, r0
   86698:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps2(temp);
   8669a:	4b8c      	ldr	r3, [pc, #560]	; (868cc <dlsis_check_alarm+0x8ec>)
   8669c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8669e:	4798      	blx	r3
   866a0:	4603      	mov	r3, r0
   866a2:	b21b      	sxth	r3, r3
   866a4:	4618      	mov	r0, r3
   866a6:	4b8a      	ldr	r3, [pc, #552]	; (868d0 <dlsis_check_alarm+0x8f0>)
   866a8:	4798      	blx	r3
		dlsis_ps2 = pressure_final_ps2;
   866aa:	4b8a      	ldr	r3, [pc, #552]	; (868d4 <dlsis_check_alarm+0x8f4>)
   866ac:	681b      	ldr	r3, [r3, #0]
   866ae:	4a8a      	ldr	r2, [pc, #552]	; (868d8 <dlsis_check_alarm+0x8f8>)
   866b0:	6013      	str	r3, [r2, #0]
		if (dlsis_ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   866b2:	4b8a      	ldr	r3, [pc, #552]	; (868dc <dlsis_check_alarm+0x8fc>)
   866b4:	6a1a      	ldr	r2, [r3, #32]
   866b6:	4b88      	ldr	r3, [pc, #544]	; (868d8 <dlsis_check_alarm+0x8f8>)
   866b8:	6819      	ldr	r1, [r3, #0]
   866ba:	4b89      	ldr	r3, [pc, #548]	; (868e0 <dlsis_check_alarm+0x900>)
   866bc:	4610      	mov	r0, r2
   866be:	4798      	blx	r3
   866c0:	4603      	mov	r3, r0
   866c2:	2b00      	cmp	r3, #0
   866c4:	d011      	beq.n	866ea <dlsis_check_alarm+0x70a>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps2;
   866c6:	4b84      	ldr	r3, [pc, #528]	; (868d8 <dlsis_check_alarm+0x8f8>)
   866c8:	681a      	ldr	r2, [r3, #0]
   866ca:	4b86      	ldr	r3, [pc, #536]	; (868e4 <dlsis_check_alarm+0x904>)
   866cc:	4610      	mov	r0, r2
   866ce:	4798      	blx	r3
   866d0:	4603      	mov	r3, r0
   866d2:	b29b      	uxth	r3, r3
   866d4:	853b      	strh	r3, [r7, #40]	; 0x28
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   866d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   866da:	2202      	movs	r2, #2
   866dc:	4619      	mov	r1, r3
   866de:	2019      	movs	r0, #25
   866e0:	4b77      	ldr	r3, [pc, #476]	; (868c0 <dlsis_check_alarm+0x8e0>)
   866e2:	4798      	blx	r3
			cl_temp_safestate();
   866e4:	4b80      	ldr	r3, [pc, #512]	; (868e8 <dlsis_check_alarm+0x908>)
   866e6:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   866e8:	e3b8      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   866ea:	2208      	movs	r2, #8
   866ec:	497f      	ldr	r1, [pc, #508]	; (868ec <dlsis_check_alarm+0x90c>)
   866ee:	2018      	movs	r0, #24
   866f0:	4b73      	ldr	r3, [pc, #460]	; (868c0 <dlsis_check_alarm+0x8e0>)
   866f2:	4798      	blx	r3
			cl_temp_recoveredstate();
   866f4:	4b7e      	ldr	r3, [pc, #504]	; (868f0 <dlsis_check_alarm+0x910>)
   866f6:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   866f8:	4b7e      	ldr	r3, [pc, #504]	; (868f4 <dlsis_check_alarm+0x914>)
   866fa:	220a      	movs	r2, #10
   866fc:	701a      	strb	r2, [r3, #0]
		}
		break;
   866fe:	e3ad      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case PS2_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86700:	2208      	movs	r2, #8
   86702:	496e      	ldr	r1, [pc, #440]	; (868bc <dlsis_check_alarm+0x8dc>)
   86704:	2018      	movs	r0, #24
   86706:	4b6e      	ldr	r3, [pc, #440]	; (868c0 <dlsis_check_alarm+0x8e0>)
   86708:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps2status * 3300/4096);
   8670a:	4b6e      	ldr	r3, [pc, #440]	; (868c4 <dlsis_check_alarm+0x8e4>)
   8670c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8670e:	461a      	mov	r2, r3
   86710:	f640 43e4 	movw	r3, #3300	; 0xce4
   86714:	fb03 f302 	mul.w	r3, r3, r2
   86718:	2b00      	cmp	r3, #0
   8671a:	da01      	bge.n	86720 <dlsis_check_alarm+0x740>
   8671c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86720:	131b      	asrs	r3, r3, #12
   86722:	461a      	mov	r2, r3
   86724:	4b68      	ldr	r3, [pc, #416]	; (868c8 <dlsis_check_alarm+0x8e8>)
   86726:	4610      	mov	r0, r2
   86728:	4798      	blx	r3
   8672a:	4603      	mov	r3, r0
   8672c:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps2(temp);
   8672e:	4b67      	ldr	r3, [pc, #412]	; (868cc <dlsis_check_alarm+0x8ec>)
   86730:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86732:	4798      	blx	r3
   86734:	4603      	mov	r3, r0
   86736:	b21b      	sxth	r3, r3
   86738:	4618      	mov	r0, r3
   8673a:	4b65      	ldr	r3, [pc, #404]	; (868d0 <dlsis_check_alarm+0x8f0>)
   8673c:	4798      	blx	r3
		dlsis_ps2 = pressure_final_ps2;
   8673e:	4b65      	ldr	r3, [pc, #404]	; (868d4 <dlsis_check_alarm+0x8f4>)
   86740:	681b      	ldr	r3, [r3, #0]
   86742:	4a65      	ldr	r2, [pc, #404]	; (868d8 <dlsis_check_alarm+0x8f8>)
   86744:	6013      	str	r3, [r2, #0]
		if (dlsis_ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   86746:	4b65      	ldr	r3, [pc, #404]	; (868dc <dlsis_check_alarm+0x8fc>)
   86748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   8674a:	4b63      	ldr	r3, [pc, #396]	; (868d8 <dlsis_check_alarm+0x8f8>)
   8674c:	6819      	ldr	r1, [r3, #0]
   8674e:	4b6a      	ldr	r3, [pc, #424]	; (868f8 <dlsis_check_alarm+0x918>)
   86750:	4610      	mov	r0, r2
   86752:	4798      	blx	r3
   86754:	4603      	mov	r3, r0
   86756:	2b00      	cmp	r3, #0
   86758:	d011      	beq.n	8677e <dlsis_check_alarm+0x79e>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps2;
   8675a:	4b5f      	ldr	r3, [pc, #380]	; (868d8 <dlsis_check_alarm+0x8f8>)
   8675c:	681a      	ldr	r2, [r3, #0]
   8675e:	4b61      	ldr	r3, [pc, #388]	; (868e4 <dlsis_check_alarm+0x904>)
   86760:	4610      	mov	r0, r2
   86762:	4798      	blx	r3
   86764:	4603      	mov	r3, r0
   86766:	b29b      	uxth	r3, r3
   86768:	84fb      	strh	r3, [r7, #38]	; 0x26
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8676a:	f107 0326 	add.w	r3, r7, #38	; 0x26
   8676e:	2202      	movs	r2, #2
   86770:	4619      	mov	r1, r3
   86772:	2019      	movs	r0, #25
   86774:	4b52      	ldr	r3, [pc, #328]	; (868c0 <dlsis_check_alarm+0x8e0>)
   86776:	4798      	blx	r3
			cl_temp_safestate();
   86778:	4b5b      	ldr	r3, [pc, #364]	; (868e8 <dlsis_check_alarm+0x908>)
   8677a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8677c:	e36e      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   8677e:	2208      	movs	r2, #8
   86780:	495a      	ldr	r1, [pc, #360]	; (868ec <dlsis_check_alarm+0x90c>)
   86782:	2018      	movs	r0, #24
   86784:	4b4e      	ldr	r3, [pc, #312]	; (868c0 <dlsis_check_alarm+0x8e0>)
   86786:	4798      	blx	r3
			cl_temp_recoveredstate();
   86788:	4b59      	ldr	r3, [pc, #356]	; (868f0 <dlsis_check_alarm+0x910>)
   8678a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8678c:	4b59      	ldr	r3, [pc, #356]	; (868f4 <dlsis_check_alarm+0x914>)
   8678e:	220a      	movs	r2, #10
   86790:	701a      	strb	r2, [r3, #0]
		}
		break;
   86792:	e363      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case PS3_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86794:	2208      	movs	r2, #8
   86796:	4949      	ldr	r1, [pc, #292]	; (868bc <dlsis_check_alarm+0x8dc>)
   86798:	2018      	movs	r0, #24
   8679a:	4b49      	ldr	r3, [pc, #292]	; (868c0 <dlsis_check_alarm+0x8e0>)
   8679c:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps3status * 3300/4096);
   8679e:	4b49      	ldr	r3, [pc, #292]	; (868c4 <dlsis_check_alarm+0x8e4>)
   867a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   867a2:	461a      	mov	r2, r3
   867a4:	f640 43e4 	movw	r3, #3300	; 0xce4
   867a8:	fb03 f302 	mul.w	r3, r3, r2
   867ac:	2b00      	cmp	r3, #0
   867ae:	da01      	bge.n	867b4 <dlsis_check_alarm+0x7d4>
   867b0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   867b4:	131b      	asrs	r3, r3, #12
   867b6:	461a      	mov	r2, r3
   867b8:	4b43      	ldr	r3, [pc, #268]	; (868c8 <dlsis_check_alarm+0x8e8>)
   867ba:	4610      	mov	r0, r2
   867bc:	4798      	blx	r3
   867be:	4603      	mov	r3, r0
   867c0:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps3(temp);
   867c2:	4b42      	ldr	r3, [pc, #264]	; (868cc <dlsis_check_alarm+0x8ec>)
   867c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   867c6:	4798      	blx	r3
   867c8:	4603      	mov	r3, r0
   867ca:	b21b      	sxth	r3, r3
   867cc:	4618      	mov	r0, r3
   867ce:	4b4b      	ldr	r3, [pc, #300]	; (868fc <dlsis_check_alarm+0x91c>)
   867d0:	4798      	blx	r3
		dlsis_ps3 = pressure_final_ps3;
   867d2:	4b4b      	ldr	r3, [pc, #300]	; (86900 <dlsis_check_alarm+0x920>)
   867d4:	681b      	ldr	r3, [r3, #0]
   867d6:	4a4b      	ldr	r2, [pc, #300]	; (86904 <dlsis_check_alarm+0x924>)
   867d8:	6013      	str	r3, [r2, #0]
		if (dlsis_ps3 > Cl_alarmThresholdTable.ps3_high_threshold)
   867da:	4b40      	ldr	r3, [pc, #256]	; (868dc <dlsis_check_alarm+0x8fc>)
   867dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   867de:	4b49      	ldr	r3, [pc, #292]	; (86904 <dlsis_check_alarm+0x924>)
   867e0:	6819      	ldr	r1, [r3, #0]
   867e2:	4b3f      	ldr	r3, [pc, #252]	; (868e0 <dlsis_check_alarm+0x900>)
   867e4:	4610      	mov	r0, r2
   867e6:	4798      	blx	r3
   867e8:	4603      	mov	r3, r0
   867ea:	2b00      	cmp	r3, #0
   867ec:	d011      	beq.n	86812 <dlsis_check_alarm+0x832>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps3;
   867ee:	4b45      	ldr	r3, [pc, #276]	; (86904 <dlsis_check_alarm+0x924>)
   867f0:	681a      	ldr	r2, [r3, #0]
   867f2:	4b3c      	ldr	r3, [pc, #240]	; (868e4 <dlsis_check_alarm+0x904>)
   867f4:	4610      	mov	r0, r2
   867f6:	4798      	blx	r3
   867f8:	4603      	mov	r3, r0
   867fa:	b29b      	uxth	r3, r3
   867fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   867fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
   86802:	2202      	movs	r2, #2
   86804:	4619      	mov	r1, r3
   86806:	2019      	movs	r0, #25
   86808:	4b2d      	ldr	r3, [pc, #180]	; (868c0 <dlsis_check_alarm+0x8e0>)
   8680a:	4798      	blx	r3
			cl_temp_safestate();
   8680c:	4b36      	ldr	r3, [pc, #216]	; (868e8 <dlsis_check_alarm+0x908>)
   8680e:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86810:	e324      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86812:	2208      	movs	r2, #8
   86814:	4935      	ldr	r1, [pc, #212]	; (868ec <dlsis_check_alarm+0x90c>)
   86816:	2018      	movs	r0, #24
   86818:	4b29      	ldr	r3, [pc, #164]	; (868c0 <dlsis_check_alarm+0x8e0>)
   8681a:	4798      	blx	r3
			cl_temp_recoveredstate();
   8681c:	4b34      	ldr	r3, [pc, #208]	; (868f0 <dlsis_check_alarm+0x910>)
   8681e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86820:	4b34      	ldr	r3, [pc, #208]	; (868f4 <dlsis_check_alarm+0x914>)
   86822:	220a      	movs	r2, #10
   86824:	701a      	strb	r2, [r3, #0]
		}
		break;
   86826:	e319      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case PS3_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86828:	2208      	movs	r2, #8
   8682a:	4924      	ldr	r1, [pc, #144]	; (868bc <dlsis_check_alarm+0x8dc>)
   8682c:	2018      	movs	r0, #24
   8682e:	4b24      	ldr	r3, [pc, #144]	; (868c0 <dlsis_check_alarm+0x8e0>)
   86830:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps3status * 3300/4096);
   86832:	4b24      	ldr	r3, [pc, #144]	; (868c4 <dlsis_check_alarm+0x8e4>)
   86834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   86836:	461a      	mov	r2, r3
   86838:	f640 43e4 	movw	r3, #3300	; 0xce4
   8683c:	fb03 f302 	mul.w	r3, r3, r2
   86840:	2b00      	cmp	r3, #0
   86842:	da01      	bge.n	86848 <dlsis_check_alarm+0x868>
   86844:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86848:	131b      	asrs	r3, r3, #12
   8684a:	461a      	mov	r2, r3
   8684c:	4b1e      	ldr	r3, [pc, #120]	; (868c8 <dlsis_check_alarm+0x8e8>)
   8684e:	4610      	mov	r0, r2
   86850:	4798      	blx	r3
   86852:	4603      	mov	r3, r0
   86854:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps3(temp);
   86856:	4b1d      	ldr	r3, [pc, #116]	; (868cc <dlsis_check_alarm+0x8ec>)
   86858:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8685a:	4798      	blx	r3
   8685c:	4603      	mov	r3, r0
   8685e:	b21b      	sxth	r3, r3
   86860:	4618      	mov	r0, r3
   86862:	4b26      	ldr	r3, [pc, #152]	; (868fc <dlsis_check_alarm+0x91c>)
   86864:	4798      	blx	r3
		dlsis_ps3 = pressure_final_ps3;
   86866:	4b26      	ldr	r3, [pc, #152]	; (86900 <dlsis_check_alarm+0x920>)
   86868:	681b      	ldr	r3, [r3, #0]
   8686a:	4a26      	ldr	r2, [pc, #152]	; (86904 <dlsis_check_alarm+0x924>)
   8686c:	6013      	str	r3, [r2, #0]
		if (dlsis_ps3 < Cl_alarmThresholdTable.ps3_low_threshold)
   8686e:	4b1b      	ldr	r3, [pc, #108]	; (868dc <dlsis_check_alarm+0x8fc>)
   86870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   86872:	4b24      	ldr	r3, [pc, #144]	; (86904 <dlsis_check_alarm+0x924>)
   86874:	6819      	ldr	r1, [r3, #0]
   86876:	4b20      	ldr	r3, [pc, #128]	; (868f8 <dlsis_check_alarm+0x918>)
   86878:	4610      	mov	r0, r2
   8687a:	4798      	blx	r3
   8687c:	4603      	mov	r3, r0
   8687e:	2b00      	cmp	r3, #0
   86880:	d011      	beq.n	868a6 <dlsis_check_alarm+0x8c6>
		{
			Cl_Uint16Type var1;
			var1=dlsis_ps3;
   86882:	4b20      	ldr	r3, [pc, #128]	; (86904 <dlsis_check_alarm+0x924>)
   86884:	681a      	ldr	r2, [r3, #0]
   86886:	4b17      	ldr	r3, [pc, #92]	; (868e4 <dlsis_check_alarm+0x904>)
   86888:	4610      	mov	r0, r2
   8688a:	4798      	blx	r3
   8688c:	4603      	mov	r3, r0
   8688e:	b29b      	uxth	r3, r3
   86890:	847b      	strh	r3, [r7, #34]	; 0x22
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86892:	f107 0322 	add.w	r3, r7, #34	; 0x22
   86896:	2202      	movs	r2, #2
   86898:	4619      	mov	r1, r3
   8689a:	2019      	movs	r0, #25
   8689c:	4b08      	ldr	r3, [pc, #32]	; (868c0 <dlsis_check_alarm+0x8e0>)
   8689e:	4798      	blx	r3
			cl_temp_safestate();
   868a0:	4b11      	ldr	r3, [pc, #68]	; (868e8 <dlsis_check_alarm+0x908>)
   868a2:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   868a4:	e2da      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   868a6:	2208      	movs	r2, #8
   868a8:	4910      	ldr	r1, [pc, #64]	; (868ec <dlsis_check_alarm+0x90c>)
   868aa:	2018      	movs	r0, #24
   868ac:	4b04      	ldr	r3, [pc, #16]	; (868c0 <dlsis_check_alarm+0x8e0>)
   868ae:	4798      	blx	r3
			cl_temp_recoveredstate();
   868b0:	4b0f      	ldr	r3, [pc, #60]	; (868f0 <dlsis_check_alarm+0x910>)
   868b2:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868b4:	4b0f      	ldr	r3, [pc, #60]	; (868f4 <dlsis_check_alarm+0x914>)
   868b6:	220a      	movs	r2, #10
   868b8:	701a      	strb	r2, [r3, #0]
		}
		break;
   868ba:	e2cf      	b.n	86e5c <dlsis_check_alarm+0xe7c>
   868bc:	000a46dc 	.word	0x000a46dc
   868c0:	00098601 	.word	0x00098601
   868c4:	20072dbc 	.word	0x20072dbc
   868c8:	000a25e5 	.word	0x000a25e5
   868cc:	000a2a19 	.word	0x000a2a19
   868d0:	0008424d 	.word	0x0008424d
   868d4:	20071620 	.word	0x20071620
   868d8:	200720b4 	.word	0x200720b4
   868dc:	20072c9c 	.word	0x20072c9c
   868e0:	000a29c9 	.word	0x000a29c9
   868e4:	000a2a65 	.word	0x000a2a65
   868e8:	0008881d 	.word	0x0008881d
   868ec:	000a46e4 	.word	0x000a46e4
   868f0:	00088869 	.word	0x00088869
   868f4:	2007208c 	.word	0x2007208c
   868f8:	000a2a05 	.word	0x000a2a05
   868fc:	0008435d 	.word	0x0008435d
   86900:	20071624 	.word	0x20071624
   86904:	200720b8 	.word	0x200720b8
		case APTSTATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86908:	2208      	movs	r2, #8
   8690a:	4993      	ldr	r1, [pc, #588]	; (86b58 <dlsis_check_alarm+0xb78>)
   8690c:	2018      	movs	r0, #24
   8690e:	4b93      	ldr	r3, [pc, #588]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86910:	4798      	blx	r3
		temp = (cl_sys_statbuffer.aptstatus * 3300/4096);
   86912:	4b93      	ldr	r3, [pc, #588]	; (86b60 <dlsis_check_alarm+0xb80>)
   86914:	8a1b      	ldrh	r3, [r3, #16]
   86916:	461a      	mov	r2, r3
   86918:	f640 43e4 	movw	r3, #3300	; 0xce4
   8691c:	fb03 f302 	mul.w	r3, r3, r2
   86920:	2b00      	cmp	r3, #0
   86922:	da01      	bge.n	86928 <dlsis_check_alarm+0x948>
   86924:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86928:	131b      	asrs	r3, r3, #12
   8692a:	461a      	mov	r2, r3
   8692c:	4b8d      	ldr	r3, [pc, #564]	; (86b64 <dlsis_check_alarm+0xb84>)
   8692e:	4610      	mov	r0, r2
   86930:	4798      	blx	r3
   86932:	4603      	mov	r3, r0
   86934:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_apt(temp);
   86936:	4b8c      	ldr	r3, [pc, #560]	; (86b68 <dlsis_check_alarm+0xb88>)
   86938:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8693a:	4798      	blx	r3
   8693c:	4603      	mov	r3, r0
   8693e:	b21b      	sxth	r3, r3
   86940:	4618      	mov	r0, r3
   86942:	4b8a      	ldr	r3, [pc, #552]	; (86b6c <dlsis_check_alarm+0xb8c>)
   86944:	4798      	blx	r3
		dlsis_apt = pressure_final_apt;
   86946:	4b8a      	ldr	r3, [pc, #552]	; (86b70 <dlsis_check_alarm+0xb90>)
   86948:	681b      	ldr	r3, [r3, #0]
   8694a:	4a8a      	ldr	r2, [pc, #552]	; (86b74 <dlsis_check_alarm+0xb94>)
   8694c:	6013      	str	r3, [r2, #0]
		if (dlsis_apt > Cl_alarmThresholdTable.apt_high_threshold)
   8694e:	4b8a      	ldr	r3, [pc, #552]	; (86b78 <dlsis_check_alarm+0xb98>)
   86950:	689a      	ldr	r2, [r3, #8]
   86952:	4b88      	ldr	r3, [pc, #544]	; (86b74 <dlsis_check_alarm+0xb94>)
   86954:	6819      	ldr	r1, [r3, #0]
   86956:	4b89      	ldr	r3, [pc, #548]	; (86b7c <dlsis_check_alarm+0xb9c>)
   86958:	4610      	mov	r0, r2
   8695a:	4798      	blx	r3
   8695c:	4603      	mov	r3, r0
   8695e:	2b00      	cmp	r3, #0
   86960:	d011      	beq.n	86986 <dlsis_check_alarm+0x9a6>
		{
			Cl_Uint16Type var1;
			var1=dlsis_apt;
   86962:	4b84      	ldr	r3, [pc, #528]	; (86b74 <dlsis_check_alarm+0xb94>)
   86964:	681a      	ldr	r2, [r3, #0]
   86966:	4b86      	ldr	r3, [pc, #536]	; (86b80 <dlsis_check_alarm+0xba0>)
   86968:	4610      	mov	r0, r2
   8696a:	4798      	blx	r3
   8696c:	4603      	mov	r3, r0
   8696e:	b29b      	uxth	r3, r3
   86970:	843b      	strh	r3, [r7, #32]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86972:	f107 0320 	add.w	r3, r7, #32
   86976:	2202      	movs	r2, #2
   86978:	4619      	mov	r1, r3
   8697a:	2019      	movs	r0, #25
   8697c:	4b77      	ldr	r3, [pc, #476]	; (86b5c <dlsis_check_alarm+0xb7c>)
   8697e:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86980:	4b80      	ldr	r3, [pc, #512]	; (86b84 <dlsis_check_alarm+0xba4>)
   86982:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86984:	e26a      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86986:	2208      	movs	r2, #8
   86988:	497f      	ldr	r1, [pc, #508]	; (86b88 <dlsis_check_alarm+0xba8>)
   8698a:	2018      	movs	r0, #24
   8698c:	4b73      	ldr	r3, [pc, #460]	; (86b5c <dlsis_check_alarm+0xb7c>)
   8698e:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86990:	4b7e      	ldr	r3, [pc, #504]	; (86b8c <dlsis_check_alarm+0xbac>)
   86992:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86994:	4b7e      	ldr	r3, [pc, #504]	; (86b90 <dlsis_check_alarm+0xbb0>)
   86996:	220a      	movs	r2, #10
   86998:	701a      	strb	r2, [r3, #0]
		}
		break;
   8699a:	e25f      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case APTSTATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8699c:	2208      	movs	r2, #8
   8699e:	496e      	ldr	r1, [pc, #440]	; (86b58 <dlsis_check_alarm+0xb78>)
   869a0:	2018      	movs	r0, #24
   869a2:	4b6e      	ldr	r3, [pc, #440]	; (86b5c <dlsis_check_alarm+0xb7c>)
   869a4:	4798      	blx	r3
		temp = (cl_sys_statbuffer.aptstatus * 3300/4096);
   869a6:	4b6e      	ldr	r3, [pc, #440]	; (86b60 <dlsis_check_alarm+0xb80>)
   869a8:	8a1b      	ldrh	r3, [r3, #16]
   869aa:	461a      	mov	r2, r3
   869ac:	f640 43e4 	movw	r3, #3300	; 0xce4
   869b0:	fb03 f302 	mul.w	r3, r3, r2
   869b4:	2b00      	cmp	r3, #0
   869b6:	da01      	bge.n	869bc <dlsis_check_alarm+0x9dc>
   869b8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   869bc:	131b      	asrs	r3, r3, #12
   869be:	461a      	mov	r2, r3
   869c0:	4b68      	ldr	r3, [pc, #416]	; (86b64 <dlsis_check_alarm+0xb84>)
   869c2:	4610      	mov	r0, r2
   869c4:	4798      	blx	r3
   869c6:	4603      	mov	r3, r0
   869c8:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_apt(temp);
   869ca:	4b67      	ldr	r3, [pc, #412]	; (86b68 <dlsis_check_alarm+0xb88>)
   869cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   869ce:	4798      	blx	r3
   869d0:	4603      	mov	r3, r0
   869d2:	b21b      	sxth	r3, r3
   869d4:	4618      	mov	r0, r3
   869d6:	4b65      	ldr	r3, [pc, #404]	; (86b6c <dlsis_check_alarm+0xb8c>)
   869d8:	4798      	blx	r3
		dlsis_apt = pressure_final_apt;
   869da:	4b65      	ldr	r3, [pc, #404]	; (86b70 <dlsis_check_alarm+0xb90>)
   869dc:	681b      	ldr	r3, [r3, #0]
   869de:	4a65      	ldr	r2, [pc, #404]	; (86b74 <dlsis_check_alarm+0xb94>)
   869e0:	6013      	str	r3, [r2, #0]
		if (dlsis_apt < Cl_alarmThresholdTable.apt_low_threshold)
   869e2:	4b65      	ldr	r3, [pc, #404]	; (86b78 <dlsis_check_alarm+0xb98>)
   869e4:	68da      	ldr	r2, [r3, #12]
   869e6:	4b63      	ldr	r3, [pc, #396]	; (86b74 <dlsis_check_alarm+0xb94>)
   869e8:	6819      	ldr	r1, [r3, #0]
   869ea:	4b6a      	ldr	r3, [pc, #424]	; (86b94 <dlsis_check_alarm+0xbb4>)
   869ec:	4610      	mov	r0, r2
   869ee:	4798      	blx	r3
   869f0:	4603      	mov	r3, r0
   869f2:	2b00      	cmp	r3, #0
   869f4:	d011      	beq.n	86a1a <dlsis_check_alarm+0xa3a>
		{
			Cl_Uint16Type var1;
			var1=dlsis_apt;
   869f6:	4b5f      	ldr	r3, [pc, #380]	; (86b74 <dlsis_check_alarm+0xb94>)
   869f8:	681a      	ldr	r2, [r3, #0]
   869fa:	4b61      	ldr	r3, [pc, #388]	; (86b80 <dlsis_check_alarm+0xba0>)
   869fc:	4610      	mov	r0, r2
   869fe:	4798      	blx	r3
   86a00:	4603      	mov	r3, r0
   86a02:	b29b      	uxth	r3, r3
   86a04:	83fb      	strh	r3, [r7, #30]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86a06:	f107 031e 	add.w	r3, r7, #30
   86a0a:	2202      	movs	r2, #2
   86a0c:	4619      	mov	r1, r3
   86a0e:	2019      	movs	r0, #25
   86a10:	4b52      	ldr	r3, [pc, #328]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86a12:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86a14:	4b5b      	ldr	r3, [pc, #364]	; (86b84 <dlsis_check_alarm+0xba4>)
   86a16:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86a18:	e220      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86a1a:	2208      	movs	r2, #8
   86a1c:	495a      	ldr	r1, [pc, #360]	; (86b88 <dlsis_check_alarm+0xba8>)
   86a1e:	2018      	movs	r0, #24
   86a20:	4b4e      	ldr	r3, [pc, #312]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86a22:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86a24:	4b59      	ldr	r3, [pc, #356]	; (86b8c <dlsis_check_alarm+0xbac>)
   86a26:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86a28:	4b59      	ldr	r3, [pc, #356]	; (86b90 <dlsis_check_alarm+0xbb0>)
   86a2a:	220a      	movs	r2, #10
   86a2c:	701a      	strb	r2, [r3, #0]
		}
		break;
   86a2e:	e215      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case VPTSTATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86a30:	2208      	movs	r2, #8
   86a32:	4949      	ldr	r1, [pc, #292]	; (86b58 <dlsis_check_alarm+0xb78>)
   86a34:	2018      	movs	r0, #24
   86a36:	4b49      	ldr	r3, [pc, #292]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86a38:	4798      	blx	r3
		temp = (cl_sys_statbuffer.vptstatus * 3300/4096);
   86a3a:	4b49      	ldr	r3, [pc, #292]	; (86b60 <dlsis_check_alarm+0xb80>)
   86a3c:	8a5b      	ldrh	r3, [r3, #18]
   86a3e:	461a      	mov	r2, r3
   86a40:	f640 43e4 	movw	r3, #3300	; 0xce4
   86a44:	fb03 f302 	mul.w	r3, r3, r2
   86a48:	2b00      	cmp	r3, #0
   86a4a:	da01      	bge.n	86a50 <dlsis_check_alarm+0xa70>
   86a4c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86a50:	131b      	asrs	r3, r3, #12
   86a52:	461a      	mov	r2, r3
   86a54:	4b43      	ldr	r3, [pc, #268]	; (86b64 <dlsis_check_alarm+0xb84>)
   86a56:	4610      	mov	r0, r2
   86a58:	4798      	blx	r3
   86a5a:	4603      	mov	r3, r0
   86a5c:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_vpt(temp);
   86a5e:	4b42      	ldr	r3, [pc, #264]	; (86b68 <dlsis_check_alarm+0xb88>)
   86a60:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86a62:	4798      	blx	r3
   86a64:	4603      	mov	r3, r0
   86a66:	b21b      	sxth	r3, r3
   86a68:	4618      	mov	r0, r3
   86a6a:	4b4b      	ldr	r3, [pc, #300]	; (86b98 <dlsis_check_alarm+0xbb8>)
   86a6c:	4798      	blx	r3
		dlsis_vpt = pressure_final_vpt;
   86a6e:	4b4b      	ldr	r3, [pc, #300]	; (86b9c <dlsis_check_alarm+0xbbc>)
   86a70:	681b      	ldr	r3, [r3, #0]
   86a72:	4a4b      	ldr	r2, [pc, #300]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86a74:	6013      	str	r3, [r2, #0]
		if (dlsis_vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   86a76:	4b40      	ldr	r3, [pc, #256]	; (86b78 <dlsis_check_alarm+0xb98>)
   86a78:	691a      	ldr	r2, [r3, #16]
   86a7a:	4b49      	ldr	r3, [pc, #292]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86a7c:	6819      	ldr	r1, [r3, #0]
   86a7e:	4b3f      	ldr	r3, [pc, #252]	; (86b7c <dlsis_check_alarm+0xb9c>)
   86a80:	4610      	mov	r0, r2
   86a82:	4798      	blx	r3
   86a84:	4603      	mov	r3, r0
   86a86:	2b00      	cmp	r3, #0
   86a88:	d011      	beq.n	86aae <dlsis_check_alarm+0xace>
		{
			Cl_Uint16Type var1;
			var1=dlsis_vpt;
   86a8a:	4b45      	ldr	r3, [pc, #276]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86a8c:	681a      	ldr	r2, [r3, #0]
   86a8e:	4b3c      	ldr	r3, [pc, #240]	; (86b80 <dlsis_check_alarm+0xba0>)
   86a90:	4610      	mov	r0, r2
   86a92:	4798      	blx	r3
   86a94:	4603      	mov	r3, r0
   86a96:	b29b      	uxth	r3, r3
   86a98:	83bb      	strh	r3, [r7, #28]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86a9a:	f107 031c 	add.w	r3, r7, #28
   86a9e:	2202      	movs	r2, #2
   86aa0:	4619      	mov	r1, r3
   86aa2:	2019      	movs	r0, #25
   86aa4:	4b2d      	ldr	r3, [pc, #180]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86aa6:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86aa8:	4b36      	ldr	r3, [pc, #216]	; (86b84 <dlsis_check_alarm+0xba4>)
   86aaa:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86aac:	e1d6      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86aae:	2208      	movs	r2, #8
   86ab0:	4935      	ldr	r1, [pc, #212]	; (86b88 <dlsis_check_alarm+0xba8>)
   86ab2:	2018      	movs	r0, #24
   86ab4:	4b29      	ldr	r3, [pc, #164]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86ab6:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86ab8:	4b34      	ldr	r3, [pc, #208]	; (86b8c <dlsis_check_alarm+0xbac>)
   86aba:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86abc:	4b34      	ldr	r3, [pc, #208]	; (86b90 <dlsis_check_alarm+0xbb0>)
   86abe:	220a      	movs	r2, #10
   86ac0:	701a      	strb	r2, [r3, #0]
		}
		break;
   86ac2:	e1cb      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case VPTSTATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86ac4:	2208      	movs	r2, #8
   86ac6:	4924      	ldr	r1, [pc, #144]	; (86b58 <dlsis_check_alarm+0xb78>)
   86ac8:	2018      	movs	r0, #24
   86aca:	4b24      	ldr	r3, [pc, #144]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86acc:	4798      	blx	r3
		temp = (cl_sys_statbuffer.vptstatus * 3300/4096);
   86ace:	4b24      	ldr	r3, [pc, #144]	; (86b60 <dlsis_check_alarm+0xb80>)
   86ad0:	8a5b      	ldrh	r3, [r3, #18]
   86ad2:	461a      	mov	r2, r3
   86ad4:	f640 43e4 	movw	r3, #3300	; 0xce4
   86ad8:	fb03 f302 	mul.w	r3, r3, r2
   86adc:	2b00      	cmp	r3, #0
   86ade:	da01      	bge.n	86ae4 <dlsis_check_alarm+0xb04>
   86ae0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86ae4:	131b      	asrs	r3, r3, #12
   86ae6:	461a      	mov	r2, r3
   86ae8:	4b1e      	ldr	r3, [pc, #120]	; (86b64 <dlsis_check_alarm+0xb84>)
   86aea:	4610      	mov	r0, r2
   86aec:	4798      	blx	r3
   86aee:	4603      	mov	r3, r0
   86af0:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_vpt(temp);
   86af2:	4b1d      	ldr	r3, [pc, #116]	; (86b68 <dlsis_check_alarm+0xb88>)
   86af4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86af6:	4798      	blx	r3
   86af8:	4603      	mov	r3, r0
   86afa:	b21b      	sxth	r3, r3
   86afc:	4618      	mov	r0, r3
   86afe:	4b26      	ldr	r3, [pc, #152]	; (86b98 <dlsis_check_alarm+0xbb8>)
   86b00:	4798      	blx	r3
		dlsis_vpt = pressure_final_vpt;
   86b02:	4b26      	ldr	r3, [pc, #152]	; (86b9c <dlsis_check_alarm+0xbbc>)
   86b04:	681b      	ldr	r3, [r3, #0]
   86b06:	4a26      	ldr	r2, [pc, #152]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86b08:	6013      	str	r3, [r2, #0]
		if (dlsis_vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   86b0a:	4b1b      	ldr	r3, [pc, #108]	; (86b78 <dlsis_check_alarm+0xb98>)
   86b0c:	695a      	ldr	r2, [r3, #20]
   86b0e:	4b24      	ldr	r3, [pc, #144]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86b10:	6819      	ldr	r1, [r3, #0]
   86b12:	4b20      	ldr	r3, [pc, #128]	; (86b94 <dlsis_check_alarm+0xbb4>)
   86b14:	4610      	mov	r0, r2
   86b16:	4798      	blx	r3
   86b18:	4603      	mov	r3, r0
   86b1a:	2b00      	cmp	r3, #0
   86b1c:	d011      	beq.n	86b42 <dlsis_check_alarm+0xb62>
		{
			Cl_Uint16Type var1;
			var1=dlsis_vpt;
   86b1e:	4b20      	ldr	r3, [pc, #128]	; (86ba0 <dlsis_check_alarm+0xbc0>)
   86b20:	681a      	ldr	r2, [r3, #0]
   86b22:	4b17      	ldr	r3, [pc, #92]	; (86b80 <dlsis_check_alarm+0xba0>)
   86b24:	4610      	mov	r0, r2
   86b26:	4798      	blx	r3
   86b28:	4603      	mov	r3, r0
   86b2a:	b29b      	uxth	r3, r3
   86b2c:	837b      	strh	r3, [r7, #26]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86b2e:	f107 031a 	add.w	r3, r7, #26
   86b32:	2202      	movs	r2, #2
   86b34:	4619      	mov	r1, r3
   86b36:	2019      	movs	r0, #25
   86b38:	4b08      	ldr	r3, [pc, #32]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86b3a:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86b3c:	4b11      	ldr	r3, [pc, #68]	; (86b84 <dlsis_check_alarm+0xba4>)
   86b3e:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86b40:	e18c      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86b42:	2208      	movs	r2, #8
   86b44:	4910      	ldr	r1, [pc, #64]	; (86b88 <dlsis_check_alarm+0xba8>)
   86b46:	2018      	movs	r0, #24
   86b48:	4b04      	ldr	r3, [pc, #16]	; (86b5c <dlsis_check_alarm+0xb7c>)
   86b4a:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86b4c:	4b0f      	ldr	r3, [pc, #60]	; (86b8c <dlsis_check_alarm+0xbac>)
   86b4e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86b50:	4b0f      	ldr	r3, [pc, #60]	; (86b90 <dlsis_check_alarm+0xbb0>)
   86b52:	220a      	movs	r2, #10
   86b54:	701a      	strb	r2, [r3, #0]
		}
		break;
   86b56:	e181      	b.n	86e5c <dlsis_check_alarm+0xe7c>
   86b58:	000a46dc 	.word	0x000a46dc
   86b5c:	00098601 	.word	0x00098601
   86b60:	20072dbc 	.word	0x20072dbc
   86b64:	000a25e5 	.word	0x000a25e5
   86b68:	000a2a19 	.word	0x000a2a19
   86b6c:	00083e39 	.word	0x00083e39
   86b70:	20072d08 	.word	0x20072d08
   86b74:	200720bc 	.word	0x200720bc
   86b78:	20072c9c 	.word	0x20072c9c
   86b7c:	000a29c9 	.word	0x000a29c9
   86b80:	000a2a65 	.word	0x000a2a65
   86b84:	00088775 	.word	0x00088775
   86b88:	000a46e4 	.word	0x000a46e4
   86b8c:	000887b9 	.word	0x000887b9
   86b90:	2007208c 	.word	0x2007208c
   86b94:	000a2a05 	.word	0x000a2a05
   86b98:	00083fb9 	.word	0x00083fb9
   86b9c:	20071618 	.word	0x20071618
   86ba0:	200720c0 	.word	0x200720c0
		case TEMP3_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86ba4:	2208      	movs	r2, #8
   86ba6:	4983      	ldr	r1, [pc, #524]	; (86db4 <dlsis_check_alarm+0xdd4>)
   86ba8:	2018      	movs	r0, #24
   86baa:	4b83      	ldr	r3, [pc, #524]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86bac:	4798      	blx	r3
//		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
//		calibration_tmp(temp,TS3);
		dlsis_temp3 = cl_sys_statbuffer.Temp3status;
   86bae:	4b83      	ldr	r3, [pc, #524]	; (86dbc <dlsis_check_alarm+0xddc>)
   86bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   86bb2:	4b83      	ldr	r3, [pc, #524]	; (86dc0 <dlsis_check_alarm+0xde0>)
   86bb4:	4610      	mov	r0, r2
   86bb6:	4798      	blx	r3
   86bb8:	4602      	mov	r2, r0
   86bba:	4b82      	ldr	r3, [pc, #520]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86bbc:	601a      	str	r2, [r3, #0]
		if (dlsis_temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   86bbe:	4b82      	ldr	r3, [pc, #520]	; (86dc8 <dlsis_check_alarm+0xde8>)
   86bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   86bc2:	4b80      	ldr	r3, [pc, #512]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86bc4:	6819      	ldr	r1, [r3, #0]
   86bc6:	4b81      	ldr	r3, [pc, #516]	; (86dcc <dlsis_check_alarm+0xdec>)
   86bc8:	4610      	mov	r0, r2
   86bca:	4798      	blx	r3
   86bcc:	4603      	mov	r3, r0
   86bce:	2b00      	cmp	r3, #0
   86bd0:	d011      	beq.n	86bf6 <dlsis_check_alarm+0xc16>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp3;
   86bd2:	4b7c      	ldr	r3, [pc, #496]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86bd4:	681a      	ldr	r2, [r3, #0]
   86bd6:	4b7e      	ldr	r3, [pc, #504]	; (86dd0 <dlsis_check_alarm+0xdf0>)
   86bd8:	4610      	mov	r0, r2
   86bda:	4798      	blx	r3
   86bdc:	4603      	mov	r3, r0
   86bde:	b29b      	uxth	r3, r3
   86be0:	833b      	strh	r3, [r7, #24]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86be2:	f107 0318 	add.w	r3, r7, #24
   86be6:	2202      	movs	r2, #2
   86be8:	4619      	mov	r1, r3
   86bea:	2019      	movs	r0, #25
   86bec:	4b72      	ldr	r3, [pc, #456]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86bee:	4798      	blx	r3
			cl_temp_safestate();
   86bf0:	4b78      	ldr	r3, [pc, #480]	; (86dd4 <dlsis_check_alarm+0xdf4>)
   86bf2:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86bf4:	e132      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86bf6:	2208      	movs	r2, #8
   86bf8:	4977      	ldr	r1, [pc, #476]	; (86dd8 <dlsis_check_alarm+0xdf8>)
   86bfa:	2018      	movs	r0, #24
   86bfc:	4b6e      	ldr	r3, [pc, #440]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86bfe:	4798      	blx	r3
			cl_temp_recoveredstate();
   86c00:	4b76      	ldr	r3, [pc, #472]	; (86ddc <dlsis_check_alarm+0xdfc>)
   86c02:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86c04:	4b76      	ldr	r3, [pc, #472]	; (86de0 <dlsis_check_alarm+0xe00>)
   86c06:	220a      	movs	r2, #10
   86c08:	701a      	strb	r2, [r3, #0]
		}
		break;
   86c0a:	e127      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		case TEMP3_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86c0c:	2208      	movs	r2, #8
   86c0e:	4969      	ldr	r1, [pc, #420]	; (86db4 <dlsis_check_alarm+0xdd4>)
   86c10:	2018      	movs	r0, #24
   86c12:	4b69      	ldr	r3, [pc, #420]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86c14:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
// 		calibration_tmp(temp,TS3);
		
		dlsis_temp3 = cl_sys_statbuffer.Temp1status;
   86c16:	4b69      	ldr	r3, [pc, #420]	; (86dbc <dlsis_check_alarm+0xddc>)
   86c18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   86c1a:	4b69      	ldr	r3, [pc, #420]	; (86dc0 <dlsis_check_alarm+0xde0>)
   86c1c:	4610      	mov	r0, r2
   86c1e:	4798      	blx	r3
   86c20:	4602      	mov	r2, r0
   86c22:	4b68      	ldr	r3, [pc, #416]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86c24:	601a      	str	r2, [r3, #0]
		if (dlsis_temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   86c26:	4b68      	ldr	r3, [pc, #416]	; (86dc8 <dlsis_check_alarm+0xde8>)
   86c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   86c2a:	4b66      	ldr	r3, [pc, #408]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86c2c:	6819      	ldr	r1, [r3, #0]
   86c2e:	4b6d      	ldr	r3, [pc, #436]	; (86de4 <dlsis_check_alarm+0xe04>)
   86c30:	4610      	mov	r0, r2
   86c32:	4798      	blx	r3
   86c34:	4603      	mov	r3, r0
   86c36:	2b00      	cmp	r3, #0
   86c38:	d011      	beq.n	86c5e <dlsis_check_alarm+0xc7e>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp3;
   86c3a:	4b62      	ldr	r3, [pc, #392]	; (86dc4 <dlsis_check_alarm+0xde4>)
   86c3c:	681a      	ldr	r2, [r3, #0]
   86c3e:	4b64      	ldr	r3, [pc, #400]	; (86dd0 <dlsis_check_alarm+0xdf0>)
   86c40:	4610      	mov	r0, r2
   86c42:	4798      	blx	r3
   86c44:	4603      	mov	r3, r0
   86c46:	b29b      	uxth	r3, r3
   86c48:	82fb      	strh	r3, [r7, #22]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86c4a:	f107 0316 	add.w	r3, r7, #22
   86c4e:	2202      	movs	r2, #2
   86c50:	4619      	mov	r1, r3
   86c52:	2019      	movs	r0, #25
   86c54:	4b58      	ldr	r3, [pc, #352]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86c56:	4798      	blx	r3
			cl_temp_safestate();
   86c58:	4b5e      	ldr	r3, [pc, #376]	; (86dd4 <dlsis_check_alarm+0xdf4>)
   86c5a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86c5c:	e0fe      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86c5e:	2208      	movs	r2, #8
   86c60:	495d      	ldr	r1, [pc, #372]	; (86dd8 <dlsis_check_alarm+0xdf8>)
   86c62:	2018      	movs	r0, #24
   86c64:	4b54      	ldr	r3, [pc, #336]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86c66:	4798      	blx	r3
			cl_temp_recoveredstate();
   86c68:	4b5c      	ldr	r3, [pc, #368]	; (86ddc <dlsis_check_alarm+0xdfc>)
   86c6a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86c6c:	4b5c      	ldr	r3, [pc, #368]	; (86de0 <dlsis_check_alarm+0xe00>)
   86c6e:	220a      	movs	r2, #10
   86c70:	701a      	strb	r2, [r3, #0]
		}
		break;
   86c72:	e0f3      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		
		case TEMP2_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86c74:	2208      	movs	r2, #8
   86c76:	494f      	ldr	r1, [pc, #316]	; (86db4 <dlsis_check_alarm+0xdd4>)
   86c78:	2018      	movs	r0, #24
   86c7a:	4b4f      	ldr	r3, [pc, #316]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86c7c:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp2status * 3300/4096);
// 		calibration_tmp(temp,TS2);
		dlsis_temp2 = cl_sys_statbuffer.Temp2status;
   86c7e:	4b4f      	ldr	r3, [pc, #316]	; (86dbc <dlsis_check_alarm+0xddc>)
   86c80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   86c82:	4b4f      	ldr	r3, [pc, #316]	; (86dc0 <dlsis_check_alarm+0xde0>)
   86c84:	4610      	mov	r0, r2
   86c86:	4798      	blx	r3
   86c88:	4602      	mov	r2, r0
   86c8a:	4b57      	ldr	r3, [pc, #348]	; (86de8 <dlsis_check_alarm+0xe08>)
   86c8c:	601a      	str	r2, [r3, #0]
		if (dlsis_temp2 > Cl_alarmThresholdTable.temp2_high_threshold)
   86c8e:	4b4e      	ldr	r3, [pc, #312]	; (86dc8 <dlsis_check_alarm+0xde8>)
   86c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   86c92:	4b55      	ldr	r3, [pc, #340]	; (86de8 <dlsis_check_alarm+0xe08>)
   86c94:	6819      	ldr	r1, [r3, #0]
   86c96:	4b4d      	ldr	r3, [pc, #308]	; (86dcc <dlsis_check_alarm+0xdec>)
   86c98:	4610      	mov	r0, r2
   86c9a:	4798      	blx	r3
   86c9c:	4603      	mov	r3, r0
   86c9e:	2b00      	cmp	r3, #0
   86ca0:	d011      	beq.n	86cc6 <dlsis_check_alarm+0xce6>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp2;
   86ca2:	4b51      	ldr	r3, [pc, #324]	; (86de8 <dlsis_check_alarm+0xe08>)
   86ca4:	681a      	ldr	r2, [r3, #0]
   86ca6:	4b4a      	ldr	r3, [pc, #296]	; (86dd0 <dlsis_check_alarm+0xdf0>)
   86ca8:	4610      	mov	r0, r2
   86caa:	4798      	blx	r3
   86cac:	4603      	mov	r3, r0
   86cae:	b29b      	uxth	r3, r3
   86cb0:	82bb      	strh	r3, [r7, #20]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86cb2:	f107 0314 	add.w	r3, r7, #20
   86cb6:	2202      	movs	r2, #2
   86cb8:	4619      	mov	r1, r3
   86cba:	2019      	movs	r0, #25
   86cbc:	4b3e      	ldr	r3, [pc, #248]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86cbe:	4798      	blx	r3
			cl_temp_safestate();
   86cc0:	4b44      	ldr	r3, [pc, #272]	; (86dd4 <dlsis_check_alarm+0xdf4>)
   86cc2:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86cc4:	e0ca      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86cc6:	2208      	movs	r2, #8
   86cc8:	4943      	ldr	r1, [pc, #268]	; (86dd8 <dlsis_check_alarm+0xdf8>)
   86cca:	2018      	movs	r0, #24
   86ccc:	4b3a      	ldr	r3, [pc, #232]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86cce:	4798      	blx	r3
			cl_temp_recoveredstate();
   86cd0:	4b42      	ldr	r3, [pc, #264]	; (86ddc <dlsis_check_alarm+0xdfc>)
   86cd2:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86cd4:	4b42      	ldr	r3, [pc, #264]	; (86de0 <dlsis_check_alarm+0xe00>)
   86cd6:	220a      	movs	r2, #10
   86cd8:	701a      	strb	r2, [r3, #0]
		}
		break;
   86cda:	e0bf      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		case TEMP2_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86cdc:	2208      	movs	r2, #8
   86cde:	4935      	ldr	r1, [pc, #212]	; (86db4 <dlsis_check_alarm+0xdd4>)
   86ce0:	2018      	movs	r0, #24
   86ce2:	4b35      	ldr	r3, [pc, #212]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86ce4:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp2status * 3300/4096);
// 		calibration_tmp(temp,TS2);
		dlsis_temp2 = cl_sys_statbuffer.Temp2status;
   86ce6:	4b35      	ldr	r3, [pc, #212]	; (86dbc <dlsis_check_alarm+0xddc>)
   86ce8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   86cea:	4b35      	ldr	r3, [pc, #212]	; (86dc0 <dlsis_check_alarm+0xde0>)
   86cec:	4610      	mov	r0, r2
   86cee:	4798      	blx	r3
   86cf0:	4602      	mov	r2, r0
   86cf2:	4b3d      	ldr	r3, [pc, #244]	; (86de8 <dlsis_check_alarm+0xe08>)
   86cf4:	601a      	str	r2, [r3, #0]
		if (dlsis_temp2 < Cl_alarmThresholdTable.temp2_low_threshold)
   86cf6:	4b34      	ldr	r3, [pc, #208]	; (86dc8 <dlsis_check_alarm+0xde8>)
   86cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   86cfa:	4b3b      	ldr	r3, [pc, #236]	; (86de8 <dlsis_check_alarm+0xe08>)
   86cfc:	6819      	ldr	r1, [r3, #0]
   86cfe:	4b39      	ldr	r3, [pc, #228]	; (86de4 <dlsis_check_alarm+0xe04>)
   86d00:	4610      	mov	r0, r2
   86d02:	4798      	blx	r3
   86d04:	4603      	mov	r3, r0
   86d06:	2b00      	cmp	r3, #0
   86d08:	d011      	beq.n	86d2e <dlsis_check_alarm+0xd4e>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp2;
   86d0a:	4b37      	ldr	r3, [pc, #220]	; (86de8 <dlsis_check_alarm+0xe08>)
   86d0c:	681a      	ldr	r2, [r3, #0]
   86d0e:	4b30      	ldr	r3, [pc, #192]	; (86dd0 <dlsis_check_alarm+0xdf0>)
   86d10:	4610      	mov	r0, r2
   86d12:	4798      	blx	r3
   86d14:	4603      	mov	r3, r0
   86d16:	b29b      	uxth	r3, r3
   86d18:	827b      	strh	r3, [r7, #18]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86d1a:	f107 0312 	add.w	r3, r7, #18
   86d1e:	2202      	movs	r2, #2
   86d20:	4619      	mov	r1, r3
   86d22:	2019      	movs	r0, #25
   86d24:	4b24      	ldr	r3, [pc, #144]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86d26:	4798      	blx	r3
			cl_temp_safestate();
   86d28:	4b2a      	ldr	r3, [pc, #168]	; (86dd4 <dlsis_check_alarm+0xdf4>)
   86d2a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86d2c:	e096      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86d2e:	2208      	movs	r2, #8
   86d30:	4929      	ldr	r1, [pc, #164]	; (86dd8 <dlsis_check_alarm+0xdf8>)
   86d32:	2018      	movs	r0, #24
   86d34:	4b20      	ldr	r3, [pc, #128]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86d36:	4798      	blx	r3
			cl_temp_recoveredstate();
   86d38:	4b28      	ldr	r3, [pc, #160]	; (86ddc <dlsis_check_alarm+0xdfc>)
   86d3a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86d3c:	4b28      	ldr	r3, [pc, #160]	; (86de0 <dlsis_check_alarm+0xe00>)
   86d3e:	220a      	movs	r2, #10
   86d40:	701a      	strb	r2, [r3, #0]
		}
		break;
   86d42:	e08b      	b.n	86e5c <dlsis_check_alarm+0xe7c>
		case TEMP1_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86d44:	2208      	movs	r2, #8
   86d46:	491b      	ldr	r1, [pc, #108]	; (86db4 <dlsis_check_alarm+0xdd4>)
   86d48:	2018      	movs	r0, #24
   86d4a:	4b1b      	ldr	r3, [pc, #108]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86d4c:	4798      	blx	r3
// 		temp = (cl_sys_statbuffer.Temp1status * 3300/4096);
// 		calibration_tmp(temp,TS1);
		dlsis_temp1 = cl_sys_statbuffer.Temp1status;
   86d4e:	4b1b      	ldr	r3, [pc, #108]	; (86dbc <dlsis_check_alarm+0xddc>)
   86d50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   86d52:	4b1b      	ldr	r3, [pc, #108]	; (86dc0 <dlsis_check_alarm+0xde0>)
   86d54:	4610      	mov	r0, r2
   86d56:	4798      	blx	r3
   86d58:	4602      	mov	r2, r0
   86d5a:	4b24      	ldr	r3, [pc, #144]	; (86dec <dlsis_check_alarm+0xe0c>)
   86d5c:	601a      	str	r2, [r3, #0]
		dlsis_temp1 = temprature_final_value_1;
   86d5e:	4b24      	ldr	r3, [pc, #144]	; (86df0 <dlsis_check_alarm+0xe10>)
   86d60:	681b      	ldr	r3, [r3, #0]
   86d62:	4a22      	ldr	r2, [pc, #136]	; (86dec <dlsis_check_alarm+0xe0c>)
   86d64:	6013      	str	r3, [r2, #0]
		if (dlsis_temp1 > Cl_alarmThresholdTable.temp1_high_threshold)
   86d66:	4b18      	ldr	r3, [pc, #96]	; (86dc8 <dlsis_check_alarm+0xde8>)
   86d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   86d6a:	4b20      	ldr	r3, [pc, #128]	; (86dec <dlsis_check_alarm+0xe0c>)
   86d6c:	6819      	ldr	r1, [r3, #0]
   86d6e:	4b17      	ldr	r3, [pc, #92]	; (86dcc <dlsis_check_alarm+0xdec>)
   86d70:	4610      	mov	r0, r2
   86d72:	4798      	blx	r3
   86d74:	4603      	mov	r3, r0
   86d76:	2b00      	cmp	r3, #0
   86d78:	d011      	beq.n	86d9e <dlsis_check_alarm+0xdbe>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp1;
   86d7a:	4b1c      	ldr	r3, [pc, #112]	; (86dec <dlsis_check_alarm+0xe0c>)
   86d7c:	681a      	ldr	r2, [r3, #0]
   86d7e:	4b14      	ldr	r3, [pc, #80]	; (86dd0 <dlsis_check_alarm+0xdf0>)
   86d80:	4610      	mov	r0, r2
   86d82:	4798      	blx	r3
   86d84:	4603      	mov	r3, r0
   86d86:	b29b      	uxth	r3, r3
   86d88:	823b      	strh	r3, [r7, #16]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86d8a:	f107 0310 	add.w	r3, r7, #16
   86d8e:	2202      	movs	r2, #2
   86d90:	4619      	mov	r1, r3
   86d92:	2019      	movs	r0, #25
   86d94:	4b08      	ldr	r3, [pc, #32]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86d96:	4798      	blx	r3
			cl_temp_safestate();
   86d98:	4b0e      	ldr	r3, [pc, #56]	; (86dd4 <dlsis_check_alarm+0xdf4>)
   86d9a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86d9c:	e05e      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86d9e:	2208      	movs	r2, #8
   86da0:	490d      	ldr	r1, [pc, #52]	; (86dd8 <dlsis_check_alarm+0xdf8>)
   86da2:	2018      	movs	r0, #24
   86da4:	4b04      	ldr	r3, [pc, #16]	; (86db8 <dlsis_check_alarm+0xdd8>)
   86da6:	4798      	blx	r3
			cl_temp_recoveredstate();
   86da8:	4b0c      	ldr	r3, [pc, #48]	; (86ddc <dlsis_check_alarm+0xdfc>)
   86daa:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86dac:	4b0c      	ldr	r3, [pc, #48]	; (86de0 <dlsis_check_alarm+0xe00>)
   86dae:	220a      	movs	r2, #10
   86db0:	701a      	strb	r2, [r3, #0]
		}
		break;
   86db2:	e053      	b.n	86e5c <dlsis_check_alarm+0xe7c>
   86db4:	000a46dc 	.word	0x000a46dc
   86db8:	00098601 	.word	0x00098601
   86dbc:	20072dbc 	.word	0x20072dbc
   86dc0:	000a25dd 	.word	0x000a25dd
   86dc4:	200720cc 	.word	0x200720cc
   86dc8:	20072c9c 	.word	0x20072c9c
   86dcc:	000a29c9 	.word	0x000a29c9
   86dd0:	000a2a65 	.word	0x000a2a65
   86dd4:	0008881d 	.word	0x0008881d
   86dd8:	000a46e4 	.word	0x000a46e4
   86ddc:	00088869 	.word	0x00088869
   86de0:	2007208c 	.word	0x2007208c
   86de4:	000a2a05 	.word	0x000a2a05
   86de8:	200720c8 	.word	0x200720c8
   86dec:	200720c4 	.word	0x200720c4
   86df0:	20071628 	.word	0x20071628
		case TEMP1_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86df4:	2208      	movs	r2, #8
   86df6:	491c      	ldr	r1, [pc, #112]	; (86e68 <dlsis_check_alarm+0xe88>)
   86df8:	2018      	movs	r0, #24
   86dfa:	4b1c      	ldr	r3, [pc, #112]	; (86e6c <dlsis_check_alarm+0xe8c>)
   86dfc:	4798      	blx	r3
// 		temp = cl_sys_statbuffer.Temp1status * 0.805;
// 		calibration_tmp(temp,TS1);
		dlsis_temp1 = cl_sys_statbuffer.Temp1status;
   86dfe:	4b1c      	ldr	r3, [pc, #112]	; (86e70 <dlsis_check_alarm+0xe90>)
   86e00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   86e02:	4b1c      	ldr	r3, [pc, #112]	; (86e74 <dlsis_check_alarm+0xe94>)
   86e04:	4610      	mov	r0, r2
   86e06:	4798      	blx	r3
   86e08:	4602      	mov	r2, r0
   86e0a:	4b1b      	ldr	r3, [pc, #108]	; (86e78 <dlsis_check_alarm+0xe98>)
   86e0c:	601a      	str	r2, [r3, #0]
		if (dlsis_temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
   86e0e:	4b1b      	ldr	r3, [pc, #108]	; (86e7c <dlsis_check_alarm+0xe9c>)
   86e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   86e12:	4b19      	ldr	r3, [pc, #100]	; (86e78 <dlsis_check_alarm+0xe98>)
   86e14:	6819      	ldr	r1, [r3, #0]
   86e16:	4b1a      	ldr	r3, [pc, #104]	; (86e80 <dlsis_check_alarm+0xea0>)
   86e18:	4610      	mov	r0, r2
   86e1a:	4798      	blx	r3
   86e1c:	4603      	mov	r3, r0
   86e1e:	2b00      	cmp	r3, #0
   86e20:	d011      	beq.n	86e46 <dlsis_check_alarm+0xe66>
		{
			Cl_Uint16Type var1;
			var1=dlsis_temp1;
   86e22:	4b15      	ldr	r3, [pc, #84]	; (86e78 <dlsis_check_alarm+0xe98>)
   86e24:	681a      	ldr	r2, [r3, #0]
   86e26:	4b17      	ldr	r3, [pc, #92]	; (86e84 <dlsis_check_alarm+0xea4>)
   86e28:	4610      	mov	r0, r2
   86e2a:	4798      	blx	r3
   86e2c:	4603      	mov	r3, r0
   86e2e:	b29b      	uxth	r3, r3
   86e30:	81fb      	strh	r3, [r7, #14]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86e32:	f107 030e 	add.w	r3, r7, #14
   86e36:	2202      	movs	r2, #2
   86e38:	4619      	mov	r1, r3
   86e3a:	2019      	movs	r0, #25
   86e3c:	4b0b      	ldr	r3, [pc, #44]	; (86e6c <dlsis_check_alarm+0xe8c>)
   86e3e:	4798      	blx	r3
			cl_temp_safestate();
   86e40:	4b11      	ldr	r3, [pc, #68]	; (86e88 <dlsis_check_alarm+0xea8>)
   86e42:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86e44:	e00a      	b.n	86e5c <dlsis_check_alarm+0xe7c>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86e46:	2208      	movs	r2, #8
   86e48:	4910      	ldr	r1, [pc, #64]	; (86e8c <dlsis_check_alarm+0xeac>)
   86e4a:	2018      	movs	r0, #24
   86e4c:	4b07      	ldr	r3, [pc, #28]	; (86e6c <dlsis_check_alarm+0xe8c>)
   86e4e:	4798      	blx	r3
			cl_temp_recoveredstate();
   86e50:	4b0f      	ldr	r3, [pc, #60]	; (86e90 <dlsis_check_alarm+0xeb0>)
   86e52:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86e54:	4b0f      	ldr	r3, [pc, #60]	; (86e94 <dlsis_check_alarm+0xeb4>)
   86e56:	220a      	movs	r2, #10
   86e58:	701a      	strb	r2, [r3, #0]
		}
		break;
   86e5a:	bf00      	nop
	}
return CL_OK;
   86e5c:	2300      	movs	r3, #0
}
   86e5e:	4618      	mov	r0, r3
   86e60:	373c      	adds	r7, #60	; 0x3c
   86e62:	46bd      	mov	sp, r7
   86e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86e66:	bf00      	nop
   86e68:	000a46dc 	.word	0x000a46dc
   86e6c:	00098601 	.word	0x00098601
   86e70:	20072dbc 	.word	0x20072dbc
   86e74:	000a25dd 	.word	0x000a25dd
   86e78:	200720c4 	.word	0x200720c4
   86e7c:	20072c9c 	.word	0x20072c9c
   86e80:	000a2a05 	.word	0x000a2a05
   86e84:	000a2a65 	.word	0x000a2a65
   86e88:	0008881d 	.word	0x0008881d
   86e8c:	000a46e4 	.word	0x000a46e4
   86e90:	00088869 	.word	0x00088869
   86e94:	2007208c 	.word	0x2007208c

00086e98 <cl_dlsis_translatemacevent>:

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   86e98:	b480      	push	{r7}
   86e9a:	b083      	sub	sp, #12
   86e9c:	af00      	add	r7, sp, #0
   86e9e:	4603      	mov	r3, r0
   86ea0:	6039      	str	r1, [r7, #0]
   86ea2:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   86ea4:	79fb      	ldrb	r3, [r7, #7]
   86ea6:	3b07      	subs	r3, #7
   86ea8:	2b36      	cmp	r3, #54	; 0x36
   86eaa:	f200 80dd 	bhi.w	87068 <cl_dlsis_translatemacevent+0x1d0>
   86eae:	a201      	add	r2, pc, #4	; (adr r2, 86eb4 <cl_dlsis_translatemacevent+0x1c>)
   86eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86eb4:	00086fc1 	.word	0x00086fc1
   86eb8:	00087069 	.word	0x00087069
   86ebc:	00087069 	.word	0x00087069
   86ec0:	00086fa1 	.word	0x00086fa1
   86ec4:	00086fa9 	.word	0x00086fa9
   86ec8:	00086f99 	.word	0x00086f99
   86ecc:	00086fb9 	.word	0x00086fb9
   86ed0:	00086fb1 	.word	0x00086fb1
   86ed4:	00087069 	.word	0x00087069
   86ed8:	00087069 	.word	0x00087069
   86edc:	00087069 	.word	0x00087069
   86ee0:	00087069 	.word	0x00087069
   86ee4:	00087069 	.word	0x00087069
   86ee8:	00087069 	.word	0x00087069
   86eec:	00087051 	.word	0x00087051
   86ef0:	00087069 	.word	0x00087069
   86ef4:	00086fc9 	.word	0x00086fc9
   86ef8:	00086fd1 	.word	0x00086fd1
   86efc:	00086fd9 	.word	0x00086fd9
   86f00:	00086fe1 	.word	0x00086fe1
   86f04:	00086fe9 	.word	0x00086fe9
   86f08:	00087069 	.word	0x00087069
   86f0c:	00087069 	.word	0x00087069
   86f10:	00087069 	.word	0x00087069
   86f14:	00087069 	.word	0x00087069
   86f18:	00087069 	.word	0x00087069
   86f1c:	00087029 	.word	0x00087029
   86f20:	00087031 	.word	0x00087031
   86f24:	00087039 	.word	0x00087039
   86f28:	00087041 	.word	0x00087041
   86f2c:	00087049 	.word	0x00087049
   86f30:	00087069 	.word	0x00087069
   86f34:	00087059 	.word	0x00087059
   86f38:	00087061 	.word	0x00087061
   86f3c:	00086f91 	.word	0x00086f91
   86f40:	00087069 	.word	0x00087069
   86f44:	00087069 	.word	0x00087069
   86f48:	00087069 	.word	0x00087069
   86f4c:	00087021 	.word	0x00087021
   86f50:	00087019 	.word	0x00087019
   86f54:	00087069 	.word	0x00087069
   86f58:	00087069 	.word	0x00087069
   86f5c:	00087069 	.word	0x00087069
   86f60:	00087069 	.word	0x00087069
   86f64:	00087069 	.word	0x00087069
   86f68:	00087069 	.word	0x00087069
   86f6c:	00087069 	.word	0x00087069
   86f70:	00087069 	.word	0x00087069
   86f74:	00087069 	.word	0x00087069
   86f78:	00086ff1 	.word	0x00086ff1
   86f7c:	00087069 	.word	0x00087069
   86f80:	00086ff9 	.word	0x00086ff9
   86f84:	00087001 	.word	0x00087001
   86f88:	00087009 	.word	0x00087009
   86f8c:	00087011 	.word	0x00087011
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   86f90:	683b      	ldr	r3, [r7, #0]
   86f92:	2201      	movs	r2, #1
   86f94:	701a      	strb	r2, [r3, #0]
		break;
   86f96:	e068      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   86f98:	683b      	ldr	r3, [r7, #0]
   86f9a:	221d      	movs	r2, #29
   86f9c:	701a      	strb	r2, [r3, #0]
		break;
   86f9e:	e064      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   86fa0:	683b      	ldr	r3, [r7, #0]
   86fa2:	221e      	movs	r2, #30
   86fa4:	701a      	strb	r2, [r3, #0]
		break;
   86fa6:	e060      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   86fa8:	683b      	ldr	r3, [r7, #0]
   86faa:	221f      	movs	r2, #31
   86fac:	701a      	strb	r2, [r3, #0]
		break;
   86fae:	e05c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   86fb0:	683b      	ldr	r3, [r7, #0]
   86fb2:	2202      	movs	r2, #2
   86fb4:	701a      	strb	r2, [r3, #0]
		break;
   86fb6:	e058      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   86fb8:	683b      	ldr	r3, [r7, #0]
   86fba:	2203      	movs	r2, #3
   86fbc:	701a      	strb	r2, [r3, #0]
		break;
   86fbe:	e054      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   86fc0:	683b      	ldr	r3, [r7, #0]
   86fc2:	2204      	movs	r2, #4
   86fc4:	701a      	strb	r2, [r3, #0]
		break;
   86fc6:	e050      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   86fc8:	683b      	ldr	r3, [r7, #0]
   86fca:	2205      	movs	r2, #5
   86fcc:	701a      	strb	r2, [r3, #0]
		break;
   86fce:	e04c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   86fd0:	683b      	ldr	r3, [r7, #0]
   86fd2:	2206      	movs	r2, #6
   86fd4:	701a      	strb	r2, [r3, #0]
		break;
   86fd6:	e048      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   86fd8:	683b      	ldr	r3, [r7, #0]
   86fda:	2207      	movs	r2, #7
   86fdc:	701a      	strb	r2, [r3, #0]
		break;
   86fde:	e044      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86fe0:	683b      	ldr	r3, [r7, #0]
   86fe2:	2208      	movs	r2, #8
   86fe4:	701a      	strb	r2, [r3, #0]
		break;
   86fe6:	e040      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86fe8:	683b      	ldr	r3, [r7, #0]
   86fea:	2209      	movs	r2, #9
   86fec:	701a      	strb	r2, [r3, #0]
		break;
   86fee:	e03c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86ff0:	683b      	ldr	r3, [r7, #0]
   86ff2:	2211      	movs	r2, #17
   86ff4:	701a      	strb	r2, [r3, #0]
		break;
   86ff6:	e038      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86ff8:	683b      	ldr	r3, [r7, #0]
   86ffa:	2212      	movs	r2, #18
   86ffc:	701a      	strb	r2, [r3, #0]
		break;
   86ffe:	e034      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   87000:	683b      	ldr	r3, [r7, #0]
   87002:	2213      	movs	r2, #19
   87004:	701a      	strb	r2, [r3, #0]
		break;
   87006:	e030      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   87008:	683b      	ldr	r3, [r7, #0]
   8700a:	2214      	movs	r2, #20
   8700c:	701a      	strb	r2, [r3, #0]
		break;
   8700e:	e02c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   87010:	683b      	ldr	r3, [r7, #0]
   87012:	2215      	movs	r2, #21
   87014:	701a      	strb	r2, [r3, #0]
		break;
   87016:	e028      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   87018:	683b      	ldr	r3, [r7, #0]
   8701a:	2216      	movs	r2, #22
   8701c:	701a      	strb	r2, [r3, #0]
		break;
   8701e:	e024      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   87020:	683b      	ldr	r3, [r7, #0]
   87022:	2217      	movs	r2, #23
   87024:	701a      	strb	r2, [r3, #0]
		break;
   87026:	e020      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   87028:	683b      	ldr	r3, [r7, #0]
   8702a:	2219      	movs	r2, #25
   8702c:	701a      	strb	r2, [r3, #0]

		break;
   8702e:	e01c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   87030:	683b      	ldr	r3, [r7, #0]
   87032:	221a      	movs	r2, #26
   87034:	701a      	strb	r2, [r3, #0]
		break;
   87036:	e018      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   87038:	683b      	ldr	r3, [r7, #0]
   8703a:	221a      	movs	r2, #26
   8703c:	701a      	strb	r2, [r3, #0]
		break;
   8703e:	e014      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   87040:	683b      	ldr	r3, [r7, #0]
   87042:	221b      	movs	r2, #27
   87044:	701a      	strb	r2, [r3, #0]
		break;
   87046:	e010      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   87048:	683b      	ldr	r3, [r7, #0]
   8704a:	221c      	movs	r2, #28
   8704c:	701a      	strb	r2, [r3, #0]
		break;
   8704e:	e00c      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   87050:	683b      	ldr	r3, [r7, #0]
   87052:	2220      	movs	r2, #32
   87054:	701a      	strb	r2, [r3, #0]
		break;
   87056:	e008      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   87058:	683b      	ldr	r3, [r7, #0]
   8705a:	2221      	movs	r2, #33	; 0x21
   8705c:	701a      	strb	r2, [r3, #0]
		break;
   8705e:	e004      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   87060:	683b      	ldr	r3, [r7, #0]
   87062:	2222      	movs	r2, #34	; 0x22
   87064:	701a      	strb	r2, [r3, #0]
		break;
   87066:	e000      	b.n	8706a <cl_dlsis_translatemacevent+0x1d2>
		default:
		break;
   87068:	bf00      	nop
	}
	return CL_OK;
   8706a:	2300      	movs	r3, #0
}
   8706c:	4618      	mov	r0, r3
   8706e:	370c      	adds	r7, #12
   87070:	46bd      	mov	sp, r7
   87072:	bc80      	pop	{r7}
   87074:	4770      	bx	lr
   87076:	bf00      	nop

00087078 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   87078:	b580      	push	{r7, lr}
   8707a:	b084      	sub	sp, #16
   8707c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   8707e:	2304      	movs	r3, #4
   87080:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87082:	234a      	movs	r3, #74	; 0x4a
   87084:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   87086:	1d3b      	adds	r3, r7, #4
   87088:	2200      	movs	r2, #0
   8708a:	601a      	str	r2, [r3, #0]
   8708c:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   87090:	230a      	movs	r3, #10
   87092:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   87094:	2305      	movs	r3, #5
   87096:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   87098:	4b13      	ldr	r3, [pc, #76]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   8709a:	78db      	ldrb	r3, [r3, #3]
   8709c:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   8709e:	4b12      	ldr	r3, [pc, #72]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   870a0:	791b      	ldrb	r3, [r3, #4]
   870a2:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   870a4:	4b10      	ldr	r3, [pc, #64]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   870a6:	781b      	ldrb	r3, [r3, #0]
   870a8:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   870aa:	4b0f      	ldr	r3, [pc, #60]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   870ac:	78da      	ldrb	r2, [r3, #3]
   870ae:	f06f 030f 	mvn.w	r3, #15
   870b2:	1a9b      	subs	r3, r3, r2
   870b4:	b2db      	uxtb	r3, r3
   870b6:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   870b8:	4b0b      	ldr	r3, [pc, #44]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   870ba:	791b      	ldrb	r3, [r3, #4]
   870bc:	425b      	negs	r3, r3
   870be:	b2db      	uxtb	r3, r3
   870c0:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   870c2:	4b09      	ldr	r3, [pc, #36]	; (870e8 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   870c4:	781b      	ldrb	r3, [r3, #0]
   870c6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   870ca:	b2db      	uxtb	r3, r3
   870cc:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   870ce:	1d39      	adds	r1, r7, #4
   870d0:	7bbb      	ldrb	r3, [r7, #14]
   870d2:	2207      	movs	r2, #7
   870d4:	4618      	mov	r0, r3
   870d6:	4b05      	ldr	r3, [pc, #20]	; (870ec <Cl_Dlsis_UpdateTimeInfo+0x74>)
   870d8:	4798      	blx	r3
   870da:	4603      	mov	r3, r0
   870dc:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   870de:	2300      	movs	r3, #0
	}
   870e0:	4618      	mov	r0, r3
   870e2:	3710      	adds	r7, #16
   870e4:	46bd      	mov	sp, r7
   870e6:	bd80      	pop	{r7, pc}
   870e8:	20072d18 	.word	0x20072d18
   870ec:	00098601 	.word	0x00098601

000870f0 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   870f0:	b480      	push	{r7}
   870f2:	b083      	sub	sp, #12
   870f4:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   870f6:	2304      	movs	r3, #4
   870f8:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > CL_DLSIS_TIMEOUT_MIN )
   870fa:	4b06      	ldr	r3, [pc, #24]	; (87114 <cl_Dlsis_CheckforDialysisCompletion+0x24>)
   870fc:	78db      	ldrb	r3, [r3, #3]
   870fe:	2bf0      	cmp	r3, #240	; 0xf0
   87100:	d901      	bls.n	87106 <cl_Dlsis_CheckforDialysisCompletion+0x16>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   87102:	2300      	movs	r3, #0
   87104:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   87106:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   87108:	4618      	mov	r0, r3
   8710a:	370c      	adds	r7, #12
   8710c:	46bd      	mov	sp, r7
   8710e:	bc80      	pop	{r7}
   87110:	4770      	bx	lr
   87112:	bf00      	nop
   87114:	20072d18 	.word	0x20072d18

00087118 <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   87118:	b580      	push	{r7, lr}
   8711a:	b082      	sub	sp, #8
   8711c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8711e:	2300      	movs	r3, #0
   87120:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   87122:	2300      	movs	r3, #0
   87124:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   87126:	4b10      	ldr	r3, [pc, #64]	; (87168 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   87128:	2200      	movs	r2, #0
   8712a:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   8712c:	4b0e      	ldr	r3, [pc, #56]	; (87168 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8712e:	2200      	movs	r2, #0
   87130:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   87132:	4b0d      	ldr	r3, [pc, #52]	; (87168 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   87134:	2200      	movs	r2, #0
   87136:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   87138:	4b0b      	ldr	r3, [pc, #44]	; (87168 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8713a:	2200      	movs	r2, #0
   8713c:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   8713e:	4b0a      	ldr	r3, [pc, #40]	; (87168 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   87140:	2200      	movs	r2, #0
   87142:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   87144:	1dbb      	adds	r3, r7, #6
   87146:	2200      	movs	r2, #0
   87148:	4619      	mov	r1, r3
   8714a:	2015      	movs	r0, #21
   8714c:	4b07      	ldr	r3, [pc, #28]	; (8716c <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   8714e:	4798      	blx	r3
   87150:	4603      	mov	r3, r0
   87152:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   87154:	2050      	movs	r0, #80	; 0x50
   87156:	4b06      	ldr	r3, [pc, #24]	; (87170 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   87158:	4798      	blx	r3
   8715a:	4603      	mov	r3, r0
   8715c:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   8715e:	79fb      	ldrb	r3, [r7, #7]
	}
   87160:	4618      	mov	r0, r3
   87162:	3708      	adds	r7, #8
   87164:	46bd      	mov	sp, r7
   87166:	bd80      	pop	{r7, pc}
   87168:	20072d18 	.word	0x20072d18
   8716c:	00098601 	.word	0x00098601
   87170:	0008a915 	.word	0x0008a915

00087174 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   87174:	b580      	push	{r7, lr}
   87176:	b084      	sub	sp, #16
   87178:	af00      	add	r7, sp, #0
   8717a:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8717c:	2300      	movs	r3, #0
   8717e:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   87180:	2300      	movs	r3, #0
   87182:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87184:	234a      	movs	r3, #74	; 0x4a
   87186:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   87188:	2300      	movs	r3, #0
   8718a:	73bb      	strb	r3, [r7, #14]
   8718c:	e07f      	b.n	8728e <Cl_Dlsis_UpdateAlarmTable+0x11a>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   8718e:	7bba      	ldrb	r2, [r7, #14]
   87190:	4943      	ldr	r1, [pc, #268]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   87192:	4613      	mov	r3, r2
   87194:	00db      	lsls	r3, r3, #3
   87196:	1a9b      	subs	r3, r3, r2
   87198:	440b      	add	r3, r1
   8719a:	7818      	ldrb	r0, [r3, #0]
   8719c:	7bba      	ldrb	r2, [r7, #14]
   8719e:	4613      	mov	r3, r2
   871a0:	00db      	lsls	r3, r3, #3
   871a2:	1a9b      	subs	r3, r3, r2
   871a4:	4a3e      	ldr	r2, [pc, #248]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   871a6:	4413      	add	r3, r2
   871a8:	3302      	adds	r3, #2
   871aa:	4619      	mov	r1, r3
   871ac:	4b3d      	ldr	r3, [pc, #244]	; (872a4 <Cl_Dlsis_UpdateAlarmTable+0x130>)
   871ae:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   871b0:	7bba      	ldrb	r2, [r7, #14]
   871b2:	493b      	ldr	r1, [pc, #236]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   871b4:	4613      	mov	r3, r2
   871b6:	00db      	lsls	r3, r3, #3
   871b8:	1a9b      	subs	r3, r3, r2
   871ba:	440b      	add	r3, r1
   871bc:	3302      	adds	r3, #2
   871be:	781b      	ldrb	r3, [r3, #0]
   871c0:	2b00      	cmp	r3, #0
   871c2:	d039      	beq.n	87238 <Cl_Dlsis_UpdateAlarmTable+0xc4>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   871c4:	7bba      	ldrb	r2, [r7, #14]
   871c6:	4936      	ldr	r1, [pc, #216]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   871c8:	4613      	mov	r3, r2
   871ca:	00db      	lsls	r3, r3, #3
   871cc:	1a9b      	subs	r3, r3, r2
   871ce:	440b      	add	r3, r1
   871d0:	3303      	adds	r3, #3
   871d2:	781b      	ldrb	r3, [r3, #0]
   871d4:	f083 0301 	eor.w	r3, r3, #1
   871d8:	b2db      	uxtb	r3, r3
   871da:	2b00      	cmp	r3, #0
   871dc:	d054      	beq.n	87288 <Cl_Dlsis_UpdateAlarmTable+0x114>
				{
				//	cl_alarmId = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;

					data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;             // uncommented on 04.07.17 to get alarm indication on tablet
   871de:	7bba      	ldrb	r2, [r7, #14]
   871e0:	492f      	ldr	r1, [pc, #188]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   871e2:	4613      	mov	r3, r2
   871e4:	00db      	lsls	r3, r3, #3
   871e6:	1a9b      	subs	r3, r3, r2
   871e8:	440b      	add	r3, r1
   871ea:	781b      	ldrb	r3, [r3, #0]
   871ec:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;									// uncommented on 04.07.17 to get alarm indication on tablet
   871ee:	2301      	movs	r3, #1
   871f0:	727b      	strb	r3, [r7, #9]
					data[1] = (Cl_Uint8Type) CRITICAL;											// uncommented on 04.07.17 to get alarm indication on tablet
   871f2:	2302      	movs	r3, #2
   871f4:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;							// uncommented on 04.07.17 to get alarm indication on tablet
   871f6:	2307      	movs	r3, #7
   871f8:	737b      	strb	r3, [r7, #13]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);     // uncommented on 04.07.17 to get alarm indication on tablet
   871fa:	f107 0108 	add.w	r1, r7, #8
   871fe:	7b7b      	ldrb	r3, [r7, #13]
   87200:	2203      	movs	r2, #3
   87202:	4618      	mov	r0, r3
   87204:	4b28      	ldr	r3, [pc, #160]	; (872a8 <Cl_Dlsis_UpdateAlarmTable+0x134>)
   87206:	4798      	blx	r3
   87208:	4603      	mov	r3, r0
   8720a:	73fb      	strb	r3, [r7, #15]
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   8720c:	7bba      	ldrb	r2, [r7, #14]
   8720e:	4924      	ldr	r1, [pc, #144]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   87210:	4613      	mov	r3, r2
   87212:	00db      	lsls	r3, r3, #3
   87214:	1a9b      	subs	r3, r3, r2
   87216:	440b      	add	r3, r1
   87218:	3303      	adds	r3, #3
   8721a:	2201      	movs	r2, #1
   8721c:	701a      	strb	r2, [r3, #0]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   8721e:	7bba      	ldrb	r2, [r7, #14]
   87220:	491f      	ldr	r1, [pc, #124]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   87222:	4613      	mov	r3, r2
   87224:	00db      	lsls	r3, r3, #3
   87226:	1a9b      	subs	r3, r3, r2
   87228:	440b      	add	r3, r1
   8722a:	781b      	ldrb	r3, [r3, #0]
   8722c:	4618      	mov	r0, r3
   8722e:	4b1f      	ldr	r3, [pc, #124]	; (872ac <Cl_Dlsis_UpdateAlarmTable+0x138>)
   87230:	4798      	blx	r3
   87232:	4603      	mov	r3, r0
   87234:	73fb      	strb	r3, [r7, #15]
   87236:	e027      	b.n	87288 <Cl_Dlsis_UpdateAlarmTable+0x114>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   87238:	7bba      	ldrb	r2, [r7, #14]
   8723a:	4919      	ldr	r1, [pc, #100]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   8723c:	4613      	mov	r3, r2
   8723e:	00db      	lsls	r3, r3, #3
   87240:	1a9b      	subs	r3, r3, r2
   87242:	440b      	add	r3, r1
   87244:	3303      	adds	r3, #3
   87246:	781b      	ldrb	r3, [r3, #0]
   87248:	2b00      	cmp	r3, #0
   8724a:	d01d      	beq.n	87288 <Cl_Dlsis_UpdateAlarmTable+0x114>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   8724c:	7bba      	ldrb	r2, [r7, #14]
   8724e:	4914      	ldr	r1, [pc, #80]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   87250:	4613      	mov	r3, r2
   87252:	00db      	lsls	r3, r3, #3
   87254:	1a9b      	subs	r3, r3, r2
   87256:	440b      	add	r3, r1
   87258:	3303      	adds	r3, #3
   8725a:	2200      	movs	r2, #0
   8725c:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   8725e:	2307      	movs	r3, #7
   87260:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   87262:	7bba      	ldrb	r2, [r7, #14]
   87264:	490e      	ldr	r1, [pc, #56]	; (872a0 <Cl_Dlsis_UpdateAlarmTable+0x12c>)
   87266:	4613      	mov	r3, r2
   87268:	00db      	lsls	r3, r3, #3
   8726a:	1a9b      	subs	r3, r3, r2
   8726c:	440b      	add	r3, r1
   8726e:	781b      	ldrb	r3, [r3, #0]
   87270:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   87272:	2300      	movs	r3, #0
   87274:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   87276:	f107 0108 	add.w	r1, r7, #8
   8727a:	7b7b      	ldrb	r3, [r7, #13]
   8727c:	2202      	movs	r2, #2
   8727e:	4618      	mov	r0, r3
   87280:	4b09      	ldr	r3, [pc, #36]	; (872a8 <Cl_Dlsis_UpdateAlarmTable+0x134>)
   87282:	4798      	blx	r3
   87284:	4603      	mov	r3, r0
   87286:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   87288:	7bbb      	ldrb	r3, [r7, #14]
   8728a:	3301      	adds	r3, #1
   8728c:	73bb      	strb	r3, [r7, #14]
   8728e:	7bbb      	ldrb	r3, [r7, #14]
   87290:	2b1d      	cmp	r3, #29
   87292:	f67f af7c 	bls.w	8718e <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   87296:	7bfb      	ldrb	r3, [r7, #15]
}
   87298:	4618      	mov	r0, r3
   8729a:	3710      	adds	r7, #16
   8729c:	46bd      	mov	sp, r7
   8729e:	bd80      	pop	{r7, pc}
   872a0:	20070364 	.word	0x20070364
   872a4:	00083041 	.word	0x00083041
   872a8:	00098601 	.word	0x00098601
   872ac:	000872b1 	.word	0x000872b1

000872b0 <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   872b0:	b580      	push	{r7, lr}
   872b2:	b086      	sub	sp, #24
   872b4:	af00      	add	r7, sp, #0
   872b6:	4603      	mov	r3, r0
   872b8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   872ba:	2300      	movs	r3, #0
   872bc:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   872be:	f107 0308 	add.w	r3, r7, #8
   872c2:	2100      	movs	r1, #0
   872c4:	460a      	mov	r2, r1
   872c6:	801a      	strh	r2, [r3, #0]
   872c8:	460a      	mov	r2, r1
   872ca:	709a      	strb	r2, [r3, #2]
   872cc:	2300      	movs	r3, #0
   872ce:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   872d0:	234a      	movs	r3, #74	; 0x4a
   872d2:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   872d4:	2300      	movs	r3, #0
   872d6:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   872d8:	2300      	movs	r3, #0
   872da:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   872dc:	79fb      	ldrb	r3, [r7, #7]
   872de:	3b01      	subs	r3, #1
   872e0:	2b3a      	cmp	r3, #58	; 0x3a
   872e2:	f200 811d 	bhi.w	87520 <CL_DlsisAlarmActon+0x270>
   872e6:	a201      	add	r2, pc, #4	; (adr r2, 872ec <CL_DlsisAlarmActon+0x3c>)
   872e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   872ec:	000873d9 	.word	0x000873d9
   872f0:	00087521 	.word	0x00087521
   872f4:	00087521 	.word	0x00087521
   872f8:	00087521 	.word	0x00087521
   872fc:	000873e7 	.word	0x000873e7
   87300:	000873f5 	.word	0x000873f5
   87304:	000874ab 	.word	0x000874ab
   87308:	000874ab 	.word	0x000874ab
   8730c:	000874b9 	.word	0x000874b9
   87310:	00087521 	.word	0x00087521
   87314:	00087521 	.word	0x00087521
   87318:	00087473 	.word	0x00087473
   8731c:	0008747f 	.word	0x0008747f
   87320:	00087495 	.word	0x00087495
   87324:	00087403 	.word	0x00087403
   87328:	00087403 	.word	0x00087403
   8732c:	00087411 	.word	0x00087411
   87330:	00087411 	.word	0x00087411
   87334:	0008741f 	.word	0x0008741f
   87338:	0008741f 	.word	0x0008741f
   8733c:	0008742d 	.word	0x0008742d
   87340:	0008742d 	.word	0x0008742d
   87344:	0008743b 	.word	0x0008743b
   87348:	0008743b 	.word	0x0008743b
   8734c:	00087521 	.word	0x00087521
   87350:	00087521 	.word	0x00087521
   87354:	00087521 	.word	0x00087521
   87358:	00087521 	.word	0x00087521
   8735c:	00087521 	.word	0x00087521
   87360:	00087521 	.word	0x00087521
   87364:	00087521 	.word	0x00087521
   87368:	000874fb 	.word	0x000874fb
   8736c:	000874dd 	.word	0x000874dd
   87370:	00087513 	.word	0x00087513
   87374:	00087457 	.word	0x00087457
   87378:	00087457 	.word	0x00087457
   8737c:	00087465 	.word	0x00087465
   87380:	00087465 	.word	0x00087465
   87384:	00087449 	.word	0x00087449
   87388:	00087449 	.word	0x00087449
   8738c:	00087521 	.word	0x00087521
   87390:	00087521 	.word	0x00087521
   87394:	00087521 	.word	0x00087521
   87398:	00087521 	.word	0x00087521
   8739c:	00087521 	.word	0x00087521
   873a0:	00087521 	.word	0x00087521
   873a4:	00087521 	.word	0x00087521
   873a8:	00087521 	.word	0x00087521
   873ac:	00087521 	.word	0x00087521
   873b0:	000874c5 	.word	0x000874c5
   873b4:	000874c5 	.word	0x000874c5
   873b8:	00087521 	.word	0x00087521
   873bc:	00087521 	.word	0x00087521
   873c0:	00087521 	.word	0x00087521
   873c4:	00087521 	.word	0x00087521
   873c8:	00087521 	.word	0x00087521
   873cc:	000874d1 	.word	0x000874d1
   873d0:	000874d1 	.word	0x000874d1
   873d4:	000874d1 	.word	0x000874d1
		{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   873d8:	4b6b      	ldr	r3, [pc, #428]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   873da:	4798      	blx	r3
				sv_cntrl_buzzer();
   873dc:	4b6b      	ldr	r3, [pc, #428]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   873de:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   873e0:	4b6b      	ldr	r3, [pc, #428]	; (87590 <CL_DlsisAlarmActon+0x2e0>)
   873e2:	4798      	blx	r3
			break;
   873e4:	e09d      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			
			case HOLDER1STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   873e6:	4b6b      	ldr	r3, [pc, #428]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   873e8:	4798      	blx	r3
				sv_cntrl_buzzer();
   873ea:	4b68      	ldr	r3, [pc, #416]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   873ec:	4798      	blx	r3
				cl_temp_safestate();
   873ee:	4b6a      	ldr	r3, [pc, #424]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   873f0:	4798      	blx	r3
			break;
   873f2:	e096      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case HOLDER2STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   873f4:	4b67      	ldr	r3, [pc, #412]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   873f6:	4798      	blx	r3
				sv_cntrl_buzzer();
   873f8:	4b64      	ldr	r3, [pc, #400]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   873fa:	4798      	blx	r3
				cl_temp_safestate();
   873fc:	4b66      	ldr	r3, [pc, #408]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   873fe:	4798      	blx	r3
			break;
   87400:	e08f      	b.n	87522 <CL_DlsisAlarmActon+0x272>

			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   87402:	4b64      	ldr	r3, [pc, #400]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   87404:	4798      	blx	r3
				sv_cntrl_buzzer();
   87406:	4b61      	ldr	r3, [pc, #388]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87408:	4798      	blx	r3
				cl_temp_safestate();
   8740a:	4b63      	ldr	r3, [pc, #396]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   8740c:	4798      	blx	r3
			break;
   8740e:	e088      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   87410:	4b60      	ldr	r3, [pc, #384]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   87412:	4798      	blx	r3
				sv_cntrl_buzzer();
   87414:	4b5d      	ldr	r3, [pc, #372]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87416:	4798      	blx	r3
				cl_temp_safestate();
   87418:	4b5f      	ldr	r3, [pc, #380]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   8741a:	4798      	blx	r3
			break;
   8741c:	e081      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8741e:	4b5d      	ldr	r3, [pc, #372]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   87420:	4798      	blx	r3
				sv_cntrl_buzzer();
   87422:	4b5a      	ldr	r3, [pc, #360]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87424:	4798      	blx	r3
				cl_temp_safestate();
   87426:	4b5c      	ldr	r3, [pc, #368]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   87428:	4798      	blx	r3
			break;
   8742a:	e07a      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case 	PS1_HIGH_THRESHOLD:
			case    PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8742c:	4b59      	ldr	r3, [pc, #356]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   8742e:	4798      	blx	r3
				sv_cntrl_buzzer();
   87430:	4b56      	ldr	r3, [pc, #344]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87432:	4798      	blx	r3
				cl_temp_safestate();
   87434:	4b58      	ldr	r3, [pc, #352]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   87436:	4798      	blx	r3
			break;
   87438:	e073      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8743a:	4b56      	ldr	r3, [pc, #344]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   8743c:	4798      	blx	r3
				sv_cntrl_buzzer();
   8743e:	4b53      	ldr	r3, [pc, #332]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87440:	4798      	blx	r3
				cl_temp_safestate();
   87442:	4b55      	ldr	r3, [pc, #340]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   87444:	4798      	blx	r3
			break;
   87446:	e06c      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   87448:	4b52      	ldr	r3, [pc, #328]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   8744a:	4798      	blx	r3
				sv_cntrl_buzzer();
   8744c:	4b4f      	ldr	r3, [pc, #316]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   8744e:	4798      	blx	r3
				cl_temp_safestate();
   87450:	4b51      	ldr	r3, [pc, #324]	; (87598 <CL_DlsisAlarmActon+0x2e8>)
   87452:	4798      	blx	r3
			break;
   87454:	e065      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case APTSTATUS_LOW:
			case APTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   87456:	4b4c      	ldr	r3, [pc, #304]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   87458:	4798      	blx	r3
				sv_cntrl_buzzer();
   8745a:	4b4c      	ldr	r3, [pc, #304]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   8745c:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8745e:	4b4c      	ldr	r3, [pc, #304]	; (87590 <CL_DlsisAlarmActon+0x2e0>)
   87460:	4798      	blx	r3
			break;
   87462:	e05e      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   87464:	4b48      	ldr	r3, [pc, #288]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   87466:	4798      	blx	r3
				sv_cntrl_buzzer();
   87468:	4b48      	ldr	r3, [pc, #288]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   8746a:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8746c:	4b48      	ldr	r3, [pc, #288]	; (87590 <CL_DlsisAlarmActon+0x2e0>)
   8746e:	4798      	blx	r3
			break;
   87470:	e057      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case FLOW_NO_FLOW:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
			Cl_Dlsis_StopDialysis();
   87472:	4b4a      	ldr	r3, [pc, #296]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   87474:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87476:	4b4a      	ldr	r3, [pc, #296]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   87478:	220a      	movs	r2, #10
   8747a:	701a      	strb	r2, [r3, #0]
			break;
   8747c:	e051      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			case FLOW_LOW_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   8747e:	2203      	movs	r2, #3
   87480:	4948      	ldr	r1, [pc, #288]	; (875a4 <CL_DlsisAlarmActon+0x2f4>)
   87482:	2018      	movs	r0, #24
   87484:	4b48      	ldr	r3, [pc, #288]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   87486:	4798      	blx	r3
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   87488:	4b44      	ldr	r3, [pc, #272]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   8748a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8748c:	4b44      	ldr	r3, [pc, #272]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   8748e:	220a      	movs	r2, #10
   87490:	701a      	strb	r2, [r3, #0]
			break;
   87492:	e046      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			case FLOW_HIGH_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   87494:	2203      	movs	r2, #3
   87496:	4943      	ldr	r1, [pc, #268]	; (875a4 <CL_DlsisAlarmActon+0x2f4>)
   87498:	2018      	movs	r0, #24
   8749a:	4b43      	ldr	r3, [pc, #268]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   8749c:	4798      	blx	r3
			//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   8749e:	4b3f      	ldr	r3, [pc, #252]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   874a0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   874a2:	4b3f      	ldr	r3, [pc, #252]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   874a4:	220a      	movs	r2, #10
   874a6:	701a      	strb	r2, [r3, #0]
			break;
   874a8:	e03b      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   874aa:	4b3a      	ldr	r3, [pc, #232]	; (87594 <CL_DlsisAlarmActon+0x2e4>)
   874ac:	4798      	blx	r3
				sv_cntrl_buzzer();
   874ae:	4b37      	ldr	r3, [pc, #220]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   874b0:	4798      	blx	r3
				cl_cond_safestate();
   874b2:	4b3e      	ldr	r3, [pc, #248]	; (875ac <CL_DlsisAlarmActon+0x2fc>)
   874b4:	4798      	blx	r3
			break;
   874b6:	e034      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
			//		NewAlarmId = _COND_DAC_OPEN;
					Cl_Dlsis_StopDialysis();
   874b8:	4b38      	ldr	r3, [pc, #224]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   874ba:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   874bc:	4b38      	ldr	r3, [pc, #224]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   874be:	220a      	movs	r2, #10
   874c0:	701a      	strb	r2, [r3, #0]
			break;
   874c2:	e02e      	b.n	87522 <CL_DlsisAlarmActon+0x272>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
			//		NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Dlsis_StopDialysis();
   874c4:	4b35      	ldr	r3, [pc, #212]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   874c6:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   874c8:	4b35      	ldr	r3, [pc, #212]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   874ca:	220a      	movs	r2, #10
   874cc:	701a      	strb	r2, [r3, #0]
			break;
   874ce:	e028      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Dlsis_StopDialysis();
   874d0:	4b32      	ldr	r3, [pc, #200]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   874d2:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   874d4:	4b32      	ldr	r3, [pc, #200]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   874d6:	220a      	movs	r2, #10
   874d8:	701a      	strb	r2, [r3, #0]
			break;
   874da:	e022      	b.n	87522 <CL_DlsisAlarmActon+0x272>

			case WATCHDOG_TIMER: //27
			//	NewAlarmId = _WATCHDOG_TIMER;
			break;
			case BD_EVENT:
				sv_cntrl_setredalarm();
   874dc:	4b2a      	ldr	r3, [pc, #168]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   874de:	4798      	blx	r3
				sv_cntrl_buzzer();
   874e0:	4b2a      	ldr	r3, [pc, #168]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   874e2:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   874e4:	4b2d      	ldr	r3, [pc, #180]	; (8759c <CL_DlsisAlarmActon+0x2ec>)
   874e6:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BD",2);
   874e8:	2202      	movs	r2, #2
   874ea:	4931      	ldr	r1, [pc, #196]	; (875b0 <CL_DlsisAlarmActon+0x300>)
   874ec:	2018      	movs	r0, #24
   874ee:	4b2e      	ldr	r3, [pc, #184]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   874f0:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   874f2:	4b2b      	ldr	r3, [pc, #172]	; (875a0 <CL_DlsisAlarmActon+0x2f0>)
   874f4:	220a      	movs	r2, #10
   874f6:	701a      	strb	r2, [r3, #0]
			break;
   874f8:	e013      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case ABD_EVENT:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ABD",3);
   874fa:	2203      	movs	r2, #3
   874fc:	492d      	ldr	r1, [pc, #180]	; (875b4 <CL_DlsisAlarmActon+0x304>)
   874fe:	2018      	movs	r0, #24
   87500:	4b29      	ldr	r3, [pc, #164]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   87502:	4798      	blx	r3
				sv_cntrl_setredalarm();
   87504:	4b20      	ldr	r3, [pc, #128]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   87506:	4798      	blx	r3
				sv_cntrl_buzzer();
   87508:	4b20      	ldr	r3, [pc, #128]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   8750a:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8750c:	4b20      	ldr	r3, [pc, #128]	; (87590 <CL_DlsisAlarmActon+0x2e0>)
   8750e:	4798      	blx	r3
			break;
   87510:	e007      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			
			case BLD_EVENT:
				sv_cntrl_setredalarm();
   87512:	4b1d      	ldr	r3, [pc, #116]	; (87588 <CL_DlsisAlarmActon+0x2d8>)
   87514:	4798      	blx	r3
				sv_cntrl_buzzer();
   87516:	4b1d      	ldr	r3, [pc, #116]	; (8758c <CL_DlsisAlarmActon+0x2dc>)
   87518:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8751a:	4b1d      	ldr	r3, [pc, #116]	; (87590 <CL_DlsisAlarmActon+0x2e0>)
   8751c:	4798      	blx	r3
			break;
   8751e:	e000      	b.n	87522 <CL_DlsisAlarmActon+0x272>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   87520:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   87522:	79fb      	ldrb	r3, [r7, #7]
   87524:	2b00      	cmp	r3, #0
   87526:	d029      	beq.n	8757c <CL_DlsisAlarmActon+0x2cc>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   87528:	4a23      	ldr	r2, [pc, #140]	; (875b8 <CL_DlsisAlarmActon+0x308>)
   8752a:	79fb      	ldrb	r3, [r7, #7]
   8752c:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   8752e:	4b22      	ldr	r3, [pc, #136]	; (875b8 <CL_DlsisAlarmActon+0x308>)
   87530:	781a      	ldrb	r2, [r3, #0]
   87532:	4b22      	ldr	r3, [pc, #136]	; (875bc <CL_DlsisAlarmActon+0x30c>)
   87534:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   87536:	79fb      	ldrb	r3, [r7, #7]
   87538:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   8753a:	2301      	movs	r3, #1
   8753c:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   8753e:	2302      	movs	r3, #2
   87540:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   87542:	2307      	movs	r3, #7
   87544:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   87546:	200a      	movs	r0, #10
   87548:	4b1d      	ldr	r3, [pc, #116]	; (875c0 <CL_DlsisAlarmActon+0x310>)
   8754a:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   8754c:	f107 0108 	add.w	r1, r7, #8
   87550:	7bfb      	ldrb	r3, [r7, #15]
   87552:	2203      	movs	r2, #3
   87554:	4618      	mov	r0, r3
   87556:	4b14      	ldr	r3, [pc, #80]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   87558:	4798      	blx	r3
   8755a:	4603      	mov	r3, r0
   8755c:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   8755e:	232b      	movs	r3, #43	; 0x2b
   87560:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   87562:	2301      	movs	r3, #1
   87564:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   87566:	2302      	movs	r3, #2
   87568:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   8756a:	f107 0108 	add.w	r1, r7, #8
   8756e:	7bfb      	ldrb	r3, [r7, #15]
   87570:	2202      	movs	r2, #2
   87572:	4618      	mov	r0, r3
   87574:	4b0c      	ldr	r3, [pc, #48]	; (875a8 <CL_DlsisAlarmActon+0x2f8>)
   87576:	4798      	blx	r3
   87578:	4603      	mov	r3, r0
   8757a:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   8757c:	2300      	movs	r3, #0
}
   8757e:	4618      	mov	r0, r3
   87580:	3718      	adds	r7, #24
   87582:	46bd      	mov	sp, r7
   87584:	bd80      	pop	{r7, pc}
   87586:	bf00      	nop
   87588:	00096ad5 	.word	0x00096ad5
   8758c:	00096b11 	.word	0x00096b11
   87590:	00088775 	.word	0x00088775
   87594:	00096ae9 	.word	0x00096ae9
   87598:	0008881d 	.word	0x0008881d
   8759c:	000875c5 	.word	0x000875c5
   875a0:	2007208c 	.word	0x2007208c
   875a4:	000a46ec 	.word	0x000a46ec
   875a8:	00098601 	.word	0x00098601
   875ac:	000888cd 	.word	0x000888cd
   875b0:	000a46f0 	.word	0x000a46f0
   875b4:	000a46f4 	.word	0x000a46f4
   875b8:	20072d1d 	.word	0x20072d1d
   875bc:	20072d12 	.word	0x20072d12
   875c0:	00091b9d 	.word	0x00091b9d

000875c4 <Cl_Dlsis_StopDialysis>:


Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   875c4:	b580      	push	{r7, lr}
   875c6:	b082      	sub	sp, #8
   875c8:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   875ca:	2300      	movs	r3, #0
   875cc:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   875ce:	4b29      	ldr	r3, [pc, #164]	; (87674 <Cl_Dlsis_StopDialysis+0xb0>)
   875d0:	781b      	ldrb	r3, [r3, #0]
   875d2:	2b00      	cmp	r3, #0
   875d4:	d048      	beq.n	87668 <Cl_Dlsis_StopDialysis+0xa4>
   875d6:	4b27      	ldr	r3, [pc, #156]	; (87674 <Cl_Dlsis_StopDialysis+0xb0>)
   875d8:	781b      	ldrb	r3, [r3, #0]
   875da:	2b09      	cmp	r3, #9
   875dc:	d044      	beq.n	87668 <Cl_Dlsis_StopDialysis+0xa4>
   875de:	4b25      	ldr	r3, [pc, #148]	; (87674 <Cl_Dlsis_StopDialysis+0xb0>)
   875e0:	781b      	ldrb	r3, [r3, #0]
   875e2:	2b07      	cmp	r3, #7
   875e4:	d040      	beq.n	87668 <Cl_Dlsis_StopDialysis+0xa4>
   875e6:	4b23      	ldr	r3, [pc, #140]	; (87674 <Cl_Dlsis_StopDialysis+0xb0>)
   875e8:	781b      	ldrb	r3, [r3, #0]
   875ea:	2b0a      	cmp	r3, #10
   875ec:	d03c      	beq.n	87668 <Cl_Dlsis_StopDialysis+0xa4>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   875ee:	4b22      	ldr	r3, [pc, #136]	; (87678 <Cl_Dlsis_StopDialysis+0xb4>)
   875f0:	2200      	movs	r2, #0
   875f2:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   875f4:	4b20      	ldr	r3, [pc, #128]	; (87678 <Cl_Dlsis_StopDialysis+0xb4>)
   875f6:	2200      	movs	r2, #0
   875f8:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   875fa:	4b1f      	ldr	r3, [pc, #124]	; (87678 <Cl_Dlsis_StopDialysis+0xb4>)
   875fc:	2200      	movs	r2, #0
   875fe:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   87600:	4b1d      	ldr	r3, [pc, #116]	; (87678 <Cl_Dlsis_StopDialysis+0xb4>)
   87602:	2200      	movs	r2, #0
   87604:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   87606:	4b1c      	ldr	r3, [pc, #112]	; (87678 <Cl_Dlsis_StopDialysis+0xb4>)
   87608:	2200      	movs	r2, #0
   8760a:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   8760c:	4b1b      	ldr	r3, [pc, #108]	; (8767c <Cl_Dlsis_StopDialysis+0xb8>)
   8760e:	4798      	blx	r3
   87610:	4603      	mov	r3, r0
   87612:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   87614:	2004      	movs	r0, #4
   87616:	4b1a      	ldr	r3, [pc, #104]	; (87680 <Cl_Dlsis_StopDialysis+0xbc>)
   87618:	4798      	blx	r3
   8761a:	4603      	mov	r3, r0
   8761c:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8761e:	2011      	movs	r0, #17
   87620:	4b18      	ldr	r3, [pc, #96]	; (87684 <Cl_Dlsis_StopDialysis+0xc0>)
   87622:	4798      	blx	r3
   87624:	4603      	mov	r3, r0
   87626:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   87628:	4b17      	ldr	r3, [pc, #92]	; (87688 <Cl_Dlsis_StopDialysis+0xc4>)
   8762a:	4798      	blx	r3
   8762c:	4603      	mov	r3, r0
   8762e:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   87630:	2004      	movs	r0, #4
   87632:	4b16      	ldr	r3, [pc, #88]	; (8768c <Cl_Dlsis_StopDialysis+0xc8>)
   87634:	4798      	blx	r3
   87636:	4603      	mov	r3, r0
   87638:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   8763a:	2100      	movs	r1, #0
   8763c:	2004      	movs	r0, #4
   8763e:	4b14      	ldr	r3, [pc, #80]	; (87690 <Cl_Dlsis_StopDialysis+0xcc>)
   87640:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   87642:	2011      	movs	r0, #17
   87644:	4b0f      	ldr	r3, [pc, #60]	; (87684 <Cl_Dlsis_StopDialysis+0xc0>)
   87646:	4798      	blx	r3
   87648:	4603      	mov	r3, r0
   8764a:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   8764c:	4b09      	ldr	r3, [pc, #36]	; (87674 <Cl_Dlsis_StopDialysis+0xb0>)
   8764e:	2200      	movs	r2, #0
   87650:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   87652:	1dbb      	adds	r3, r7, #6
   87654:	2200      	movs	r2, #0
   87656:	4619      	mov	r1, r3
   87658:	2014      	movs	r0, #20
   8765a:	4b0e      	ldr	r3, [pc, #56]	; (87694 <Cl_Dlsis_StopDialysis+0xd0>)
   8765c:	4798      	blx	r3
   8765e:	4603      	mov	r3, r0
   87660:	71fb      	strb	r3, [r7, #7]
				bc_flag = 0;
   87662:	4b0d      	ldr	r3, [pc, #52]	; (87698 <Cl_Dlsis_StopDialysis+0xd4>)
   87664:	2200      	movs	r2, #0
   87666:	701a      	strb	r2, [r3, #0]
					
				}
				return CL_OK;
   87668:	2300      	movs	r3, #0
}
   8766a:	4618      	mov	r0, r3
   8766c:	3708      	adds	r7, #8
   8766e:	46bd      	mov	sp, r7
   87670:	bd80      	pop	{r7, pc}
   87672:	bf00      	nop
   87674:	2007208c 	.word	0x2007208c
   87678:	20072d18 	.word	0x20072d18
   8767c:	000969dd 	.word	0x000969dd
   87680:	00096819 	.word	0x00096819
   87684:	00096a6d 	.word	0x00096a6d
   87688:	00096869 	.word	0x00096869
   8768c:	00089749 	.word	0x00089749
   87690:	00091c25 	.word	0x00091c25
   87694:	00098601 	.word	0x00098601
   87698:	200720ab 	.word	0x200720ab

0008769c <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   8769c:	b580      	push	{r7, lr}
   8769e:	b082      	sub	sp, #8
   876a0:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   876a2:	2300      	movs	r3, #0
   876a4:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   876a6:	4b4e      	ldr	r3, [pc, #312]	; (877e0 <Cl_Dlsis_BypassDialysis+0x144>)
   876a8:	4798      	blx	r3
   876aa:	4603      	mov	r3, r0
   876ac:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   876ae:	2004      	movs	r0, #4
   876b0:	4b4c      	ldr	r3, [pc, #304]	; (877e4 <Cl_Dlsis_BypassDialysis+0x148>)
   876b2:	4798      	blx	r3
   876b4:	4603      	mov	r3, r0
   876b6:	71fb      	strb	r3, [r7, #7]
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   876b8:	4b4b      	ldr	r3, [pc, #300]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876ba:	781b      	ldrb	r3, [r3, #0]
   876bc:	461a      	mov	r2, r3
   876be:	4b4b      	ldr	r3, [pc, #300]	; (877ec <Cl_Dlsis_BypassDialysis+0x150>)
   876c0:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   876c2:	4b49      	ldr	r3, [pc, #292]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876c4:	789b      	ldrb	r3, [r3, #2]
   876c6:	461a      	mov	r2, r3
   876c8:	4b49      	ldr	r3, [pc, #292]	; (877f0 <Cl_Dlsis_BypassDialysis+0x154>)
   876ca:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   876cc:	4b46      	ldr	r3, [pc, #280]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876ce:	785b      	ldrb	r3, [r3, #1]
   876d0:	461a      	mov	r2, r3
   876d2:	4b48      	ldr	r3, [pc, #288]	; (877f4 <Cl_Dlsis_BypassDialysis+0x158>)
   876d4:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   876d6:	4b44      	ldr	r3, [pc, #272]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876d8:	78db      	ldrb	r3, [r3, #3]
   876da:	461a      	mov	r2, r3
   876dc:	4b46      	ldr	r3, [pc, #280]	; (877f8 <Cl_Dlsis_BypassDialysis+0x15c>)
   876de:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   876e0:	4b41      	ldr	r3, [pc, #260]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876e2:	791b      	ldrb	r3, [r3, #4]
   876e4:	461a      	mov	r2, r3
   876e6:	4b45      	ldr	r3, [pc, #276]	; (877fc <Cl_Dlsis_BypassDialysis+0x160>)
   876e8:	601a      	str	r2, [r3, #0]
			DlsisTime.Cl_dlsissecondscounter = 0;
   876ea:	4b3f      	ldr	r3, [pc, #252]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876ec:	2200      	movs	r2, #0
   876ee:	701a      	strb	r2, [r3, #0]
			DlsisTime.Cl_dlsishourscounter = 0;
   876f0:	4b3d      	ldr	r3, [pc, #244]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876f2:	2200      	movs	r2, #0
   876f4:	709a      	strb	r2, [r3, #2]
			DlsisTime.Cl_dlsisMinutescounter = 0;
   876f6:	4b3c      	ldr	r3, [pc, #240]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876f8:	2200      	movs	r2, #0
   876fa:	705a      	strb	r2, [r3, #1]
			DlsisTime.Cl_dlsisTotalhourscounter = 0;
   876fc:	4b3a      	ldr	r3, [pc, #232]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   876fe:	2200      	movs	r2, #0
   87700:	711a      	strb	r2, [r3, #4]
			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   87702:	4b39      	ldr	r3, [pc, #228]	; (877e8 <Cl_Dlsis_BypassDialysis+0x14c>)
   87704:	2200      	movs	r2, #0
   87706:	70da      	strb	r2, [r3, #3]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   87708:	2100      	movs	r1, #0
   8770a:	2001      	movs	r0, #1
   8770c:	4b3c      	ldr	r3, [pc, #240]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8770e:	4798      	blx	r3
   87710:	4603      	mov	r3, r0
   87712:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   87714:	2100      	movs	r1, #0
   87716:	203d      	movs	r0, #61	; 0x3d
   87718:	4b39      	ldr	r3, [pc, #228]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8771a:	4798      	blx	r3
   8771c:	4603      	mov	r3, r0
   8771e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
   87720:	2100      	movs	r1, #0
   87722:	203e      	movs	r0, #62	; 0x3e
   87724:	4b36      	ldr	r3, [pc, #216]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87726:	4798      	blx	r3
   87728:	4603      	mov	r3, r0
   8772a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   8772c:	2100      	movs	r1, #0
   8772e:	2005      	movs	r0, #5
   87730:	4b33      	ldr	r3, [pc, #204]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87732:	4798      	blx	r3
   87734:	4603      	mov	r3, r0
   87736:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   87738:	2100      	movs	r1, #0
   8773a:	2006      	movs	r0, #6
   8773c:	4b30      	ldr	r3, [pc, #192]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8773e:	4798      	blx	r3
   87740:	4603      	mov	r3, r0
   87742:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87744:	2100      	movs	r1, #0
   87746:	2003      	movs	r0, #3
   87748:	4b2d      	ldr	r3, [pc, #180]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8774a:	4798      	blx	r3
   8774c:	4603      	mov	r3, r0
   8774e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87750:	2100      	movs	r1, #0
   87752:	2004      	movs	r0, #4
   87754:	4b2a      	ldr	r3, [pc, #168]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87756:	4798      	blx	r3
   87758:	4603      	mov	r3, r0
   8775a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   8775c:	2100      	movs	r1, #0
   8775e:	2007      	movs	r0, #7
   87760:	4b27      	ldr	r3, [pc, #156]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87762:	4798      	blx	r3
   87764:	4603      	mov	r3, r0
   87766:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   87768:	2100      	movs	r1, #0
   8776a:	2008      	movs	r0, #8
   8776c:	4b24      	ldr	r3, [pc, #144]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8776e:	4798      	blx	r3
   87770:	4603      	mov	r3, r0
   87772:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   87774:	2100      	movs	r1, #0
   87776:	2029      	movs	r0, #41	; 0x29
   87778:	4b21      	ldr	r3, [pc, #132]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8777a:	4798      	blx	r3
   8777c:	4603      	mov	r3, r0
   8777e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   87780:	2100      	movs	r1, #0
   87782:	202b      	movs	r0, #43	; 0x2b
   87784:	4b1e      	ldr	r3, [pc, #120]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87786:	4798      	blx	r3
   87788:	4603      	mov	r3, r0
   8778a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   8778c:	2100      	movs	r1, #0
   8778e:	2021      	movs	r0, #33	; 0x21
   87790:	4b1b      	ldr	r3, [pc, #108]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   87792:	4798      	blx	r3
   87794:	4603      	mov	r3, r0
   87796:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87798:	2100      	movs	r1, #0
   8779a:	2013      	movs	r0, #19
   8779c:	4b18      	ldr	r3, [pc, #96]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   8779e:	4798      	blx	r3
   877a0:	4603      	mov	r3, r0
   877a2:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   877a4:	2100      	movs	r1, #0
   877a6:	2014      	movs	r0, #20
   877a8:	4b15      	ldr	r3, [pc, #84]	; (87800 <Cl_Dlsis_BypassDialysis+0x164>)
   877aa:	4798      	blx	r3
   877ac:	4603      	mov	r3, r0
   877ae:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   877b0:	4b14      	ldr	r3, [pc, #80]	; (87804 <Cl_Dlsis_BypassDialysis+0x168>)
   877b2:	2208      	movs	r2, #8
   877b4:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   877b6:	1dbb      	adds	r3, r7, #6
   877b8:	2200      	movs	r2, #0
   877ba:	4619      	mov	r1, r3
   877bc:	2041      	movs	r0, #65	; 0x41
   877be:	4b12      	ldr	r3, [pc, #72]	; (87808 <Cl_Dlsis_BypassDialysis+0x16c>)
   877c0:	4798      	blx	r3
   877c2:	4603      	mov	r3, r0
   877c4:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   877c6:	1dbb      	adds	r3, r7, #6
   877c8:	2200      	movs	r2, #0
   877ca:	4619      	mov	r1, r3
   877cc:	2040      	movs	r0, #64	; 0x40
   877ce:	4b0e      	ldr	r3, [pc, #56]	; (87808 <Cl_Dlsis_BypassDialysis+0x16c>)
   877d0:	4798      	blx	r3
   877d2:	4603      	mov	r3, r0
   877d4:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   877d6:	2300      	movs	r3, #0
}
   877d8:	4618      	mov	r0, r3
   877da:	3708      	adds	r7, #8
   877dc:	46bd      	mov	sp, r7
   877de:	bd80      	pop	{r7, pc}
   877e0:	00096a29 	.word	0x00096a29
   877e4:	00096819 	.word	0x00096819
   877e8:	20072d18 	.word	0x20072d18
   877ec:	20072090 	.word	0x20072090
   877f0:	20072098 	.word	0x20072098
   877f4:	20072094 	.word	0x20072094
   877f8:	2007209c 	.word	0x2007209c
   877fc:	200720a0 	.word	0x200720a0
   87800:	00082efd 	.word	0x00082efd
   87804:	2007208c 	.word	0x2007208c
   87808:	00098601 	.word	0x00098601

0008780c <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   8780c:	b580      	push	{r7, lr}
   8780e:	b082      	sub	sp, #8
   87810:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87812:	2300      	movs	r3, #0
   87814:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87816:	4b49      	ldr	r3, [pc, #292]	; (8793c <Cl_Dlsis_BypassOff+0x130>)
   87818:	4798      	blx	r3
   8781a:	4603      	mov	r3, r0
   8781c:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   8781e:	4b48      	ldr	r3, [pc, #288]	; (87940 <Cl_Dlsis_BypassOff+0x134>)
   87820:	681b      	ldr	r3, [r3, #0]
   87822:	b2da      	uxtb	r2, r3
   87824:	4b47      	ldr	r3, [pc, #284]	; (87944 <Cl_Dlsis_BypassOff+0x138>)
   87826:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   87828:	4b47      	ldr	r3, [pc, #284]	; (87948 <Cl_Dlsis_BypassOff+0x13c>)
   8782a:	681b      	ldr	r3, [r3, #0]
   8782c:	b2da      	uxtb	r2, r3
   8782e:	4b45      	ldr	r3, [pc, #276]	; (87944 <Cl_Dlsis_BypassOff+0x138>)
   87830:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   87832:	4b46      	ldr	r3, [pc, #280]	; (8794c <Cl_Dlsis_BypassOff+0x140>)
   87834:	681b      	ldr	r3, [r3, #0]
   87836:	b2da      	uxtb	r2, r3
   87838:	4b42      	ldr	r3, [pc, #264]	; (87944 <Cl_Dlsis_BypassOff+0x138>)
   8783a:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   8783c:	4b44      	ldr	r3, [pc, #272]	; (87950 <Cl_Dlsis_BypassOff+0x144>)
   8783e:	681b      	ldr	r3, [r3, #0]
   87840:	b2da      	uxtb	r2, r3
   87842:	4b40      	ldr	r3, [pc, #256]	; (87944 <Cl_Dlsis_BypassOff+0x138>)
   87844:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   87846:	4b43      	ldr	r3, [pc, #268]	; (87954 <Cl_Dlsis_BypassOff+0x148>)
   87848:	681b      	ldr	r3, [r3, #0]
   8784a:	b2da      	uxtb	r2, r3
   8784c:	4b3d      	ldr	r3, [pc, #244]	; (87944 <Cl_Dlsis_BypassOff+0x138>)
   8784e:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   87850:	2101      	movs	r1, #1
   87852:	2001      	movs	r0, #1
   87854:	4b40      	ldr	r3, [pc, #256]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   87856:	4798      	blx	r3
   87858:	4603      	mov	r3, r0
   8785a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   8785c:	2101      	movs	r1, #1
   8785e:	203d      	movs	r0, #61	; 0x3d
   87860:	4b3d      	ldr	r3, [pc, #244]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   87862:	4798      	blx	r3
   87864:	4603      	mov	r3, r0
   87866:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87868:	2101      	movs	r1, #1
   8786a:	203e      	movs	r0, #62	; 0x3e
   8786c:	4b3a      	ldr	r3, [pc, #232]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   8786e:	4798      	blx	r3
   87870:	4603      	mov	r3, r0
   87872:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87874:	2101      	movs	r1, #1
   87876:	2005      	movs	r0, #5
   87878:	4b37      	ldr	r3, [pc, #220]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   8787a:	4798      	blx	r3
   8787c:	4603      	mov	r3, r0
   8787e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   87880:	2101      	movs	r1, #1
   87882:	2006      	movs	r0, #6
   87884:	4b34      	ldr	r3, [pc, #208]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   87886:	4798      	blx	r3
   87888:	4603      	mov	r3, r0
   8788a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   8788c:	2100      	movs	r1, #0
   8788e:	2003      	movs	r0, #3
   87890:	4b31      	ldr	r3, [pc, #196]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   87892:	4798      	blx	r3
   87894:	4603      	mov	r3, r0
   87896:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87898:	2100      	movs	r1, #0
   8789a:	2004      	movs	r0, #4
   8789c:	4b2e      	ldr	r3, [pc, #184]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   8789e:	4798      	blx	r3
   878a0:	4603      	mov	r3, r0
   878a2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   878a4:	2101      	movs	r1, #1
   878a6:	2007      	movs	r0, #7
   878a8:	4b2b      	ldr	r3, [pc, #172]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878aa:	4798      	blx	r3
   878ac:	4603      	mov	r3, r0
   878ae:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   878b0:	2101      	movs	r1, #1
   878b2:	2008      	movs	r0, #8
   878b4:	4b28      	ldr	r3, [pc, #160]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878b6:	4798      	blx	r3
   878b8:	4603      	mov	r3, r0
   878ba:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   878bc:	2101      	movs	r1, #1
   878be:	2029      	movs	r0, #41	; 0x29
   878c0:	4b25      	ldr	r3, [pc, #148]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878c2:	4798      	blx	r3
   878c4:	4603      	mov	r3, r0
   878c6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   878c8:	2101      	movs	r1, #1
   878ca:	202b      	movs	r0, #43	; 0x2b
   878cc:	4b22      	ldr	r3, [pc, #136]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878ce:	4798      	blx	r3
   878d0:	4603      	mov	r3, r0
   878d2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,true );
   878d4:	2101      	movs	r1, #1
   878d6:	2021      	movs	r0, #33	; 0x21
   878d8:	4b1f      	ldr	r3, [pc, #124]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878da:	4798      	blx	r3
   878dc:	4603      	mov	r3, r0
   878de:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   878e0:	2101      	movs	r1, #1
   878e2:	2013      	movs	r0, #19
   878e4:	4b1c      	ldr	r3, [pc, #112]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878e6:	4798      	blx	r3
   878e8:	4603      	mov	r3, r0
   878ea:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   878ec:	2101      	movs	r1, #1
   878ee:	2014      	movs	r0, #20
   878f0:	4b19      	ldr	r3, [pc, #100]	; (87958 <Cl_Dlsis_BypassOff+0x14c>)
   878f2:	4798      	blx	r3
   878f4:	4603      	mov	r3, r0
   878f6:	71fb      	strb	r3, [r7, #7]
	  
	Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
   878f8:	2004      	movs	r0, #4
   878fa:	4b18      	ldr	r3, [pc, #96]	; (8795c <Cl_Dlsis_BypassOff+0x150>)
   878fc:	4798      	blx	r3
   878fe:	4603      	mov	r3, r0
   87900:	71fb      	strb	r3, [r7, #7]
	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   87902:	4b17      	ldr	r3, [pc, #92]	; (87960 <Cl_Dlsis_BypassOff+0x154>)
   87904:	2204      	movs	r2, #4
   87906:	701a      	strb	r2, [r3, #0]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   87908:	1dbb      	adds	r3, r7, #6
   8790a:	2200      	movs	r2, #0
   8790c:	4619      	mov	r1, r3
   8790e:	2042      	movs	r0, #66	; 0x42
   87910:	4b14      	ldr	r3, [pc, #80]	; (87964 <Cl_Dlsis_BypassOff+0x158>)
   87912:	4798      	blx	r3
   87914:	4603      	mov	r3, r0
   87916:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   87918:	1dbb      	adds	r3, r7, #6
   8791a:	2200      	movs	r2, #0
   8791c:	4619      	mov	r1, r3
   8791e:	2043      	movs	r0, #67	; 0x43
   87920:	4b10      	ldr	r3, [pc, #64]	; (87964 <Cl_Dlsis_BypassOff+0x158>)
   87922:	4798      	blx	r3
   87924:	4603      	mov	r3, r0
   87926:	71fb      	strb	r3, [r7, #7]
		Cl_Dlsis_UpdateTimeInfo();
   87928:	4b0f      	ldr	r3, [pc, #60]	; (87968 <Cl_Dlsis_BypassOff+0x15c>)
   8792a:	4798      	blx	r3
	bypass_flag = 1;
   8792c:	4b0f      	ldr	r3, [pc, #60]	; (8796c <Cl_Dlsis_BypassOff+0x160>)
   8792e:	2201      	movs	r2, #1
   87930:	701a      	strb	r2, [r3, #0]
return CL_OK;
   87932:	2300      	movs	r3, #0
}
   87934:	4618      	mov	r0, r3
   87936:	3708      	adds	r7, #8
   87938:	46bd      	mov	sp, r7
   8793a:	bd80      	pop	{r7, pc}
   8793c:	00096a51 	.word	0x00096a51
   87940:	20072090 	.word	0x20072090
   87944:	20072d18 	.word	0x20072d18
   87948:	20072098 	.word	0x20072098
   8794c:	20072094 	.word	0x20072094
   87950:	2007209c 	.word	0x2007209c
   87954:	200720a0 	.word	0x200720a0
   87958:	00082efd 	.word	0x00082efd
   8795c:	000967dd 	.word	0x000967dd
   87960:	2007208c 	.word	0x2007208c
   87964:	00098601 	.word	0x00098601
   87968:	00087079 	.word	0x00087079
   8796c:	200720aa 	.word	0x200720aa

00087970 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   87970:	b580      	push	{r7, lr}
   87972:	b082      	sub	sp, #8
   87974:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87976:	2300      	movs	r3, #0
   87978:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   8797a:	4b0f      	ldr	r3, [pc, #60]	; (879b8 <Cl_Dlsis_PauseDialysis+0x48>)
   8797c:	781b      	ldrb	r3, [r3, #0]
   8797e:	2b00      	cmp	r3, #0
   87980:	d015      	beq.n	879ae <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   87982:	4b0d      	ldr	r3, [pc, #52]	; (879b8 <Cl_Dlsis_PauseDialysis+0x48>)
   87984:	781b      	ldrb	r3, [r3, #0]
   87986:	3b02      	subs	r3, #2
   87988:	2b03      	cmp	r3, #3
   8798a:	d80f      	bhi.n	879ac <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   8798c:	4b0b      	ldr	r3, [pc, #44]	; (879bc <Cl_Dlsis_PauseDialysis+0x4c>)
   8798e:	4798      	blx	r3
   87990:	4603      	mov	r3, r0
   87992:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   87994:	4b08      	ldr	r3, [pc, #32]	; (879b8 <Cl_Dlsis_PauseDialysis+0x48>)
   87996:	2207      	movs	r2, #7
   87998:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   8799a:	1dbb      	adds	r3, r7, #6
   8799c:	2200      	movs	r2, #0
   8799e:	4619      	mov	r1, r3
   879a0:	2040      	movs	r0, #64	; 0x40
   879a2:	4b07      	ldr	r3, [pc, #28]	; (879c0 <Cl_Dlsis_PauseDialysis+0x50>)
   879a4:	4798      	blx	r3
   879a6:	4603      	mov	r3, r0
   879a8:	71fb      	strb	r3, [r7, #7]
			
			break;
   879aa:	e000      	b.n	879ae <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   879ac:	bf00      	nop
		}
return CL_OK;
   879ae:	2300      	movs	r3, #0
	
}
   879b0:	4618      	mov	r0, r3
   879b2:	3708      	adds	r7, #8
   879b4:	46bd      	mov	sp, r7
   879b6:	bd80      	pop	{r7, pc}
   879b8:	2007208c 	.word	0x2007208c
   879bc:	00096a29 	.word	0x00096a29
   879c0:	00098601 	.word	0x00098601

000879c4 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   879c4:	b580      	push	{r7, lr}
   879c6:	b082      	sub	sp, #8
   879c8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   879ca:	2300      	movs	r3, #0
   879cc:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   879ce:	234a      	movs	r3, #74	; 0x4a
   879d0:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   879d2:	1d7b      	adds	r3, r7, #5
   879d4:	4618      	mov	r0, r3
   879d6:	4b04      	ldr	r3, [pc, #16]	; (879e8 <Cl_Dlsis_ProcessAlarms+0x24>)
   879d8:	4798      	blx	r3
   879da:	4603      	mov	r3, r0
   879dc:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   879de:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   879e0:	4618      	mov	r0, r3
   879e2:	3708      	adds	r7, #8
   879e4:	46bd      	mov	sp, r7
   879e6:	bd80      	pop	{r7, pc}
   879e8:	00087175 	.word	0x00087175

000879ec <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   879ec:	b580      	push	{r7, lr}
   879ee:	b082      	sub	sp, #8
   879f0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   879f2:	2300      	movs	r3, #0
   879f4:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   879f6:	2001      	movs	r0, #1
   879f8:	4b03      	ldr	r3, [pc, #12]	; (87a08 <Cl_DlsisFillingFlowOff+0x1c>)
   879fa:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   879fc:	79fb      	ldrb	r3, [r7, #7]
	
}
   879fe:	4618      	mov	r0, r3
   87a00:	3708      	adds	r7, #8
   87a02:	46bd      	mov	sp, r7
   87a04:	bd80      	pop	{r7, pc}
   87a06:	bf00      	nop
   87a08:	0009689d 	.word	0x0009689d

00087a0c <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   87a0c:	b580      	push	{r7, lr}
   87a0e:	b082      	sub	sp, #8
   87a10:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   87a12:	2300      	movs	r3, #0
   87a14:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87a16:	234a      	movs	r3, #74	; 0x4a
   87a18:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   87a1a:	4b55      	ldr	r3, [pc, #340]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a1c:	2200      	movs	r2, #0
   87a1e:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   87a20:	4b53      	ldr	r3, [pc, #332]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a22:	2200      	movs	r2, #0
   87a24:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   87a26:	2005      	movs	r0, #5
   87a28:	4b52      	ldr	r3, [pc, #328]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a2a:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   87a2c:	2006      	movs	r0, #6
   87a2e:	4b51      	ldr	r3, [pc, #324]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a30:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   87a32:	4b4f      	ldr	r3, [pc, #316]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a34:	2200      	movs	r2, #0
   87a36:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   87a3a:	2001      	movs	r0, #1
   87a3c:	4b4d      	ldr	r3, [pc, #308]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a3e:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   87a40:	4b4b      	ldr	r3, [pc, #300]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a42:	2200      	movs	r2, #0
   87a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   87a48:	4b49      	ldr	r3, [pc, #292]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a4a:	2200      	movs	r2, #0
   87a4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   87a50:	2015      	movs	r0, #21
   87a52:	4b48      	ldr	r3, [pc, #288]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a54:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   87a56:	2016      	movs	r0, #22
   87a58:	4b46      	ldr	r3, [pc, #280]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a5a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   87a5c:	4b44      	ldr	r3, [pc, #272]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a5e:	2200      	movs	r2, #0
   87a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   87a64:	4b42      	ldr	r3, [pc, #264]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a66:	2200      	movs	r2, #0
   87a68:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   87a6c:	2017      	movs	r0, #23
   87a6e:	4b41      	ldr	r3, [pc, #260]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a70:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   87a72:	2018      	movs	r0, #24
   87a74:	4b3f      	ldr	r3, [pc, #252]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a76:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   87a78:	4b3d      	ldr	r3, [pc, #244]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a7a:	2200      	movs	r2, #0
   87a7c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   87a80:	4b3b      	ldr	r3, [pc, #236]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a82:	2200      	movs	r2, #0
   87a84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   87a88:	2027      	movs	r0, #39	; 0x27
   87a8a:	4b3a      	ldr	r3, [pc, #232]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a8c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   87a8e:	2028      	movs	r0, #40	; 0x28
   87a90:	4b38      	ldr	r3, [pc, #224]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87a92:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   87a94:	4b36      	ldr	r3, [pc, #216]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87a96:	2200      	movs	r2, #0
   87a98:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   87a9c:	2021      	movs	r0, #33	; 0x21
   87a9e:	4b35      	ldr	r3, [pc, #212]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87aa0:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   87aa2:	4b33      	ldr	r3, [pc, #204]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87aa4:	2200      	movs	r2, #0
   87aa6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   87aaa:	2020      	movs	r0, #32
   87aac:	4b31      	ldr	r3, [pc, #196]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87aae:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   87ab0:	4b2f      	ldr	r3, [pc, #188]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87ab2:	2200      	movs	r2, #0
   87ab4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   87ab8:	2022      	movs	r0, #34	; 0x22
   87aba:	4b2e      	ldr	r3, [pc, #184]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87abc:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   87abe:	4b2c      	ldr	r3, [pc, #176]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87ac0:	2200      	movs	r2, #0
   87ac2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   87ac6:	4b2a      	ldr	r3, [pc, #168]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87ac8:	2200      	movs	r2, #0
   87aca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   87ace:	2024      	movs	r0, #36	; 0x24
   87ad0:	4b28      	ldr	r3, [pc, #160]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87ad2:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   87ad4:	2023      	movs	r0, #35	; 0x23
   87ad6:	4b27      	ldr	r3, [pc, #156]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87ad8:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   87ada:	4b25      	ldr	r3, [pc, #148]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87adc:	2200      	movs	r2, #0
   87ade:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   87ae2:	4b23      	ldr	r3, [pc, #140]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87ae4:	2200      	movs	r2, #0
   87ae6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   87aea:	2026      	movs	r0, #38	; 0x26
   87aec:	4b21      	ldr	r3, [pc, #132]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87aee:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   87af0:	2025      	movs	r0, #37	; 0x25
   87af2:	4b20      	ldr	r3, [pc, #128]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87af4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   87af6:	4b1e      	ldr	r3, [pc, #120]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87af8:	2200      	movs	r2, #0
   87afa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   87afe:	4b1c      	ldr	r3, [pc, #112]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b00:	2200      	movs	r2, #0
   87b02:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   87b06:	2007      	movs	r0, #7
   87b08:	4b1a      	ldr	r3, [pc, #104]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b0a:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   87b0c:	2008      	movs	r0, #8
   87b0e:	4b19      	ldr	r3, [pc, #100]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b10:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   87b12:	4b17      	ldr	r3, [pc, #92]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b14:	2200      	movs	r2, #0
   87b16:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   87b1a:	4b15      	ldr	r3, [pc, #84]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b1c:	2200      	movs	r2, #0
   87b1e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   87b22:	2013      	movs	r0, #19
   87b24:	4b13      	ldr	r3, [pc, #76]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b26:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   87b28:	2014      	movs	r0, #20
   87b2a:	4b12      	ldr	r3, [pc, #72]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b2c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   87b2e:	4b10      	ldr	r3, [pc, #64]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b30:	2200      	movs	r2, #0
   87b32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   87b36:	4b0e      	ldr	r3, [pc, #56]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b38:	2200      	movs	r2, #0
   87b3a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   87b3e:	2011      	movs	r0, #17
   87b40:	4b0c      	ldr	r3, [pc, #48]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b42:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   87b44:	2012      	movs	r0, #18
   87b46:	4b0b      	ldr	r3, [pc, #44]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b48:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   87b4a:	4b09      	ldr	r3, [pc, #36]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b4c:	2200      	movs	r2, #0
   87b4e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   87b52:	4b07      	ldr	r3, [pc, #28]	; (87b70 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87b54:	2200      	movs	r2, #0
   87b56:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   87b5a:	200f      	movs	r0, #15
   87b5c:	4b05      	ldr	r3, [pc, #20]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b5e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   87b60:	2010      	movs	r0, #16
   87b62:	4b04      	ldr	r3, [pc, #16]	; (87b74 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87b64:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   87b66:	79fb      	ldrb	r3, [r7, #7]
}
   87b68:	4618      	mov	r0, r3
   87b6a:	3708      	adds	r7, #8
   87b6c:	46bd      	mov	sp, r7
   87b6e:	bd80      	pop	{r7, pc}
   87b70:	20070364 	.word	0x20070364
   87b74:	00082ffd 	.word	0x00082ffd

00087b78 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   87b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   87b7a:	b099      	sub	sp, #100	; 0x64
   87b7c:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   87b7e:	f107 0310 	add.w	r3, r7, #16
   87b82:	2228      	movs	r2, #40	; 0x28
   87b84:	2100      	movs	r1, #0
   87b86:	4618      	mov	r0, r3
   87b88:	4bad      	ldr	r3, [pc, #692]	; (87e40 <Cl_Dlsis_SenddlsisData+0x2c8>)
   87b8a:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   87b8c:	2300      	movs	r3, #0
   87b8e:	80fb      	strh	r3, [r7, #6]
   87b90:	2300      	movs	r3, #0
   87b92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87b96:	2300      	movs	r3, #0
   87b98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Cl_Uint8Type count = 0;
   87b9c:	2300      	movs	r3, #0
   87b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87ba2:	234a      	movs	r3, #74	; 0x4a
   87ba4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   87ba8:	232a      	movs	r3, #42	; 0x2a
   87baa:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	systemdataarray[0] = DIALYSIS_DATA;
   87bae:	2305      	movs	r3, #5
   87bb0:	743b      	strb	r3, [r7, #16]
	count++;
   87bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87bb6:	3301      	adds	r3, #1
   87bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   87bbc:	1dbb      	adds	r3, r7, #6
   87bbe:	4619      	mov	r1, r3
   87bc0:	2014      	movs	r0, #20
   87bc2:	4ba0      	ldr	r3, [pc, #640]	; (87e44 <Cl_Dlsis_SenddlsisData+0x2cc>)
   87bc4:	4798      	blx	r3
		{
							float sensordata,ftemp1,temp1;
							sensordata = temp;
   87bc6:	88fa      	ldrh	r2, [r7, #6]
   87bc8:	4b9f      	ldr	r3, [pc, #636]	; (87e48 <Cl_Dlsis_SenddlsisData+0x2d0>)
   87bca:	4610      	mov	r0, r2
   87bcc:	4798      	blx	r3
   87bce:	4603      	mov	r3, r0
   87bd0:	657b      	str	r3, [r7, #84]	; 0x54
							uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   87bd2:	4b9e      	ldr	r3, [pc, #632]	; (87e4c <Cl_Dlsis_SenddlsisData+0x2d4>)
   87bd4:	499e      	ldr	r1, [pc, #632]	; (87e50 <Cl_Dlsis_SenddlsisData+0x2d8>)
   87bd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   87bd8:	4798      	blx	r3
   87bda:	4603      	mov	r3, r0
   87bdc:	461a      	mov	r2, r3
   87bde:	4b9d      	ldr	r3, [pc, #628]	; (87e54 <Cl_Dlsis_SenddlsisData+0x2dc>)
   87be0:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   87be4:	4610      	mov	r0, r2
   87be6:	4798      	blx	r3
   87be8:	4603      	mov	r3, r0
   87bea:	461a      	mov	r2, r3
   87bec:	4b9a      	ldr	r3, [pc, #616]	; (87e58 <Cl_Dlsis_SenddlsisData+0x2e0>)
   87bee:	4610      	mov	r0, r2
   87bf0:	4798      	blx	r3
   87bf2:	4603      	mov	r3, r0
   87bf4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
							res_temp_lookuptable(cal_data);
   87bf8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   87bfc:	4618      	mov	r0, r3
   87bfe:	4b97      	ldr	r3, [pc, #604]	; (87e5c <Cl_Dlsis_SenddlsisData+0x2e4>)
   87c00:	4798      	blx	r3
							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
							temp1 = res_temp_value/10;
   87c02:	4b97      	ldr	r3, [pc, #604]	; (87e60 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87c04:	681a      	ldr	r2, [r3, #0]
   87c06:	4b93      	ldr	r3, [pc, #588]	; (87e54 <Cl_Dlsis_SenddlsisData+0x2dc>)
   87c08:	4996      	ldr	r1, [pc, #600]	; (87e64 <Cl_Dlsis_SenddlsisData+0x2ec>)
   87c0a:	4610      	mov	r0, r2
   87c0c:	4798      	blx	r3
   87c0e:	4603      	mov	r3, r0
   87c10:	64fb      	str	r3, [r7, #76]	; 0x4c
							temp1 = temp1 - 6;                                  // removed offset on 02.07.17
   87c12:	4b95      	ldr	r3, [pc, #596]	; (87e68 <Cl_Dlsis_SenddlsisData+0x2f0>)
   87c14:	4995      	ldr	r1, [pc, #596]	; (87e6c <Cl_Dlsis_SenddlsisData+0x2f4>)
   87c16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   87c18:	4798      	blx	r3
   87c1a:	4603      	mov	r3, r0
   87c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
							avgtmp3 =(avgtmp3*5 + temp1)/6;
   87c1e:	4b94      	ldr	r3, [pc, #592]	; (87e70 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87c20:	681a      	ldr	r2, [r3, #0]
   87c22:	4b8a      	ldr	r3, [pc, #552]	; (87e4c <Cl_Dlsis_SenddlsisData+0x2d4>)
   87c24:	4993      	ldr	r1, [pc, #588]	; (87e74 <Cl_Dlsis_SenddlsisData+0x2fc>)
   87c26:	4610      	mov	r0, r2
   87c28:	4798      	blx	r3
   87c2a:	4603      	mov	r3, r0
   87c2c:	461a      	mov	r2, r3
   87c2e:	4b92      	ldr	r3, [pc, #584]	; (87e78 <Cl_Dlsis_SenddlsisData+0x300>)
   87c30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   87c32:	4610      	mov	r0, r2
   87c34:	4798      	blx	r3
   87c36:	4603      	mov	r3, r0
   87c38:	461a      	mov	r2, r3
   87c3a:	4b86      	ldr	r3, [pc, #536]	; (87e54 <Cl_Dlsis_SenddlsisData+0x2dc>)
   87c3c:	498b      	ldr	r1, [pc, #556]	; (87e6c <Cl_Dlsis_SenddlsisData+0x2f4>)
   87c3e:	4610      	mov	r0, r2
   87c40:	4798      	blx	r3
   87c42:	4603      	mov	r3, r0
   87c44:	461a      	mov	r2, r3
   87c46:	4b8a      	ldr	r3, [pc, #552]	; (87e70 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87c48:	601a      	str	r2, [r3, #0]
							
							
		}
		
		uint16_t sensordata = 0;
   87c4a:	2300      	movs	r3, #0
   87c4c:	80bb      	strh	r3, [r7, #4]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   87c4e:	1d3b      	adds	r3, r7, #4
   87c50:	4619      	mov	r1, r3
   87c52:	2007      	movs	r0, #7
   87c54:	4b7b      	ldr	r3, [pc, #492]	; (87e44 <Cl_Dlsis_SenddlsisData+0x2cc>)
   87c56:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				float	 cond1,	cond_final, cond1x100, cond_final_X10000;
				sensordata = sensordata/10;
   87c58:	88bb      	ldrh	r3, [r7, #4]
   87c5a:	4a88      	ldr	r2, [pc, #544]	; (87e7c <Cl_Dlsis_SenddlsisData+0x304>)
   87c5c:	fba2 2303 	umull	r2, r3, r2, r3
   87c60:	08db      	lsrs	r3, r3, #3
   87c62:	b29b      	uxth	r3, r3
   87c64:	80bb      	strh	r3, [r7, #4]
				if (sensordata > 50)
   87c66:	88bb      	ldrh	r3, [r7, #4]
   87c68:	2b32      	cmp	r3, #50	; 0x32
   87c6a:	f240 8130 	bls.w	87ece <Cl_Dlsis_SenddlsisData+0x356>
				
											
											//	sensordata  = 25600;
											
											
											cond1 = sensordata/100;
   87c6e:	88bb      	ldrh	r3, [r7, #4]
   87c70:	4a83      	ldr	r2, [pc, #524]	; (87e80 <Cl_Dlsis_SenddlsisData+0x308>)
   87c72:	fba2 2303 	umull	r2, r3, r2, r3
   87c76:	095b      	lsrs	r3, r3, #5
   87c78:	b29b      	uxth	r3, r3
   87c7a:	461a      	mov	r2, r3
   87c7c:	4b81      	ldr	r3, [pc, #516]	; (87e84 <Cl_Dlsis_SenddlsisData+0x30c>)
   87c7e:	4610      	mov	r0, r2
   87c80:	4798      	blx	r3
   87c82:	4603      	mov	r3, r0
   87c84:	64bb      	str	r3, [r7, #72]	; 0x48
											cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   87c86:	4b80      	ldr	r3, [pc, #512]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87c88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   87c8a:	4798      	blx	r3
   87c8c:	4c7f      	ldr	r4, [pc, #508]	; (87e8c <Cl_Dlsis_SenddlsisData+0x314>)
   87c8e:	a360      	add	r3, pc, #384	; (adr r3, 87e10 <Cl_Dlsis_SenddlsisData+0x298>)
   87c90:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c94:	47a0      	blx	r4
   87c96:	4603      	mov	r3, r0
   87c98:	460c      	mov	r4, r1
   87c9a:	461d      	mov	r5, r3
   87c9c:	4626      	mov	r6, r4
   87c9e:	4b7a      	ldr	r3, [pc, #488]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87ca0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   87ca2:	4798      	blx	r3
   87ca4:	4602      	mov	r2, r0
   87ca6:	460b      	mov	r3, r1
   87ca8:	4c78      	ldr	r4, [pc, #480]	; (87e8c <Cl_Dlsis_SenddlsisData+0x314>)
   87caa:	4628      	mov	r0, r5
   87cac:	4631      	mov	r1, r6
   87cae:	47a0      	blx	r4
   87cb0:	4603      	mov	r3, r0
   87cb2:	460c      	mov	r4, r1
   87cb4:	461d      	mov	r5, r3
   87cb6:	4626      	mov	r6, r4
   87cb8:	4b73      	ldr	r3, [pc, #460]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87cba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   87cbc:	4798      	blx	r3
   87cbe:	4c73      	ldr	r4, [pc, #460]	; (87e8c <Cl_Dlsis_SenddlsisData+0x314>)
   87cc0:	a355      	add	r3, pc, #340	; (adr r3, 87e18 <Cl_Dlsis_SenddlsisData+0x2a0>)
   87cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   87cc6:	47a0      	blx	r4
   87cc8:	4603      	mov	r3, r0
   87cca:	460c      	mov	r4, r1
   87ccc:	461a      	mov	r2, r3
   87cce:	4623      	mov	r3, r4
   87cd0:	4c6f      	ldr	r4, [pc, #444]	; (87e90 <Cl_Dlsis_SenddlsisData+0x318>)
   87cd2:	4628      	mov	r0, r5
   87cd4:	4631      	mov	r1, r6
   87cd6:	47a0      	blx	r4
   87cd8:	4603      	mov	r3, r0
   87cda:	460c      	mov	r4, r1
   87cdc:	4618      	mov	r0, r3
   87cde:	4621      	mov	r1, r4
   87ce0:	4c6b      	ldr	r4, [pc, #428]	; (87e90 <Cl_Dlsis_SenddlsisData+0x318>)
   87ce2:	a34f      	add	r3, pc, #316	; (adr r3, 87e20 <Cl_Dlsis_SenddlsisData+0x2a8>)
   87ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   87ce8:	47a0      	blx	r4
   87cea:	4603      	mov	r3, r0
   87cec:	460c      	mov	r4, r1
   87cee:	4618      	mov	r0, r3
   87cf0:	4621      	mov	r1, r4
   87cf2:	4c67      	ldr	r4, [pc, #412]	; (87e90 <Cl_Dlsis_SenddlsisData+0x318>)
   87cf4:	a34c      	add	r3, pc, #304	; (adr r3, 87e28 <Cl_Dlsis_SenddlsisData+0x2b0>)
   87cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   87cfa:	47a0      	blx	r4
   87cfc:	4603      	mov	r3, r0
   87cfe:	460c      	mov	r4, r1
   87d00:	4619      	mov	r1, r3
   87d02:	4622      	mov	r2, r4
   87d04:	4b63      	ldr	r3, [pc, #396]	; (87e94 <Cl_Dlsis_SenddlsisData+0x31c>)
   87d06:	4608      	mov	r0, r1
   87d08:	4611      	mov	r1, r2
   87d0a:	4798      	blx	r3
   87d0c:	4603      	mov	r3, r0
   87d0e:	647b      	str	r3, [r7, #68]	; 0x44
											cond1x100 = cond_final*100; ;
   87d10:	4b4e      	ldr	r3, [pc, #312]	; (87e4c <Cl_Dlsis_SenddlsisData+0x2d4>)
   87d12:	4961      	ldr	r1, [pc, #388]	; (87e98 <Cl_Dlsis_SenddlsisData+0x320>)
   87d14:	6c78      	ldr	r0, [r7, #68]	; 0x44
   87d16:	4798      	blx	r3
   87d18:	4603      	mov	r3, r0
   87d1a:	643b      	str	r3, [r7, #64]	; 0x40
											cond_final_X10000= (cond1x100/(1+(avgtmp3/10  -25.0)*0.021));
   87d1c:	4b5a      	ldr	r3, [pc, #360]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87d1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
   87d20:	4798      	blx	r3
   87d22:	4605      	mov	r5, r0
   87d24:	460e      	mov	r6, r1
   87d26:	4b52      	ldr	r3, [pc, #328]	; (87e70 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87d28:	681a      	ldr	r2, [r3, #0]
   87d2a:	4b4a      	ldr	r3, [pc, #296]	; (87e54 <Cl_Dlsis_SenddlsisData+0x2dc>)
   87d2c:	494d      	ldr	r1, [pc, #308]	; (87e64 <Cl_Dlsis_SenddlsisData+0x2ec>)
   87d2e:	4610      	mov	r0, r2
   87d30:	4798      	blx	r3
   87d32:	4603      	mov	r3, r0
   87d34:	461a      	mov	r2, r3
   87d36:	4b54      	ldr	r3, [pc, #336]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87d38:	4610      	mov	r0, r2
   87d3a:	4798      	blx	r3
   87d3c:	4c57      	ldr	r4, [pc, #348]	; (87e9c <Cl_Dlsis_SenddlsisData+0x324>)
   87d3e:	f04f 0200 	mov.w	r2, #0
   87d42:	4b57      	ldr	r3, [pc, #348]	; (87ea0 <Cl_Dlsis_SenddlsisData+0x328>)
   87d44:	47a0      	blx	r4
   87d46:	4603      	mov	r3, r0
   87d48:	460c      	mov	r4, r1
   87d4a:	4618      	mov	r0, r3
   87d4c:	4621      	mov	r1, r4
   87d4e:	4c4f      	ldr	r4, [pc, #316]	; (87e8c <Cl_Dlsis_SenddlsisData+0x314>)
   87d50:	a337      	add	r3, pc, #220	; (adr r3, 87e30 <Cl_Dlsis_SenddlsisData+0x2b8>)
   87d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d56:	47a0      	blx	r4
   87d58:	4603      	mov	r3, r0
   87d5a:	460c      	mov	r4, r1
   87d5c:	4618      	mov	r0, r3
   87d5e:	4621      	mov	r1, r4
   87d60:	4c4b      	ldr	r4, [pc, #300]	; (87e90 <Cl_Dlsis_SenddlsisData+0x318>)
   87d62:	f04f 0200 	mov.w	r2, #0
   87d66:	4b4f      	ldr	r3, [pc, #316]	; (87ea4 <Cl_Dlsis_SenddlsisData+0x32c>)
   87d68:	47a0      	blx	r4
   87d6a:	4603      	mov	r3, r0
   87d6c:	460c      	mov	r4, r1
   87d6e:	461a      	mov	r2, r3
   87d70:	4623      	mov	r3, r4
   87d72:	4c4d      	ldr	r4, [pc, #308]	; (87ea8 <Cl_Dlsis_SenddlsisData+0x330>)
   87d74:	4628      	mov	r0, r5
   87d76:	4631      	mov	r1, r6
   87d78:	47a0      	blx	r4
   87d7a:	4603      	mov	r3, r0
   87d7c:	460c      	mov	r4, r1
   87d7e:	4619      	mov	r1, r3
   87d80:	4622      	mov	r2, r4
   87d82:	4b44      	ldr	r3, [pc, #272]	; (87e94 <Cl_Dlsis_SenddlsisData+0x31c>)
   87d84:	4608      	mov	r0, r1
   87d86:	4611      	mov	r1, r2
   87d88:	4798      	blx	r3
   87d8a:	4603      	mov	r3, r0
   87d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
											
											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
   87d8e:	4b3e      	ldr	r3, [pc, #248]	; (87e88 <Cl_Dlsis_SenddlsisData+0x310>)
   87d90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   87d92:	4798      	blx	r3
   87d94:	4c3d      	ldr	r4, [pc, #244]	; (87e8c <Cl_Dlsis_SenddlsisData+0x314>)
   87d96:	a328      	add	r3, pc, #160	; (adr r3, 87e38 <Cl_Dlsis_SenddlsisData+0x2c0>)
   87d98:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d9c:	47a0      	blx	r4
   87d9e:	4603      	mov	r3, r0
   87da0:	460c      	mov	r4, r1
   87da2:	4618      	mov	r0, r3
   87da4:	4621      	mov	r1, r4
   87da6:	4c40      	ldr	r4, [pc, #256]	; (87ea8 <Cl_Dlsis_SenddlsisData+0x330>)
   87da8:	f04f 0200 	mov.w	r2, #0
   87dac:	4b3f      	ldr	r3, [pc, #252]	; (87eac <Cl_Dlsis_SenddlsisData+0x334>)
   87dae:	47a0      	blx	r4
   87db0:	4603      	mov	r3, r0
   87db2:	460c      	mov	r4, r1
   87db4:	4619      	mov	r1, r3
   87db6:	4622      	mov	r2, r4
   87db8:	4b36      	ldr	r3, [pc, #216]	; (87e94 <Cl_Dlsis_SenddlsisData+0x31c>)
   87dba:	4608      	mov	r0, r1
   87dbc:	4611      	mov	r1, r2
   87dbe:	4798      	blx	r3
   87dc0:	4603      	mov	r3, r0
   87dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
		
					
					tempdata.word = (cond_final_X10000);
   87dc4:	4b24      	ldr	r3, [pc, #144]	; (87e58 <Cl_Dlsis_SenddlsisData+0x2e0>)
   87dc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   87dc8:	4798      	blx	r3
   87dca:	4603      	mov	r3, r0
   87dcc:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   87dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87dd2:	1c5a      	adds	r2, r3, #1
   87dd4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87dd8:	7a3a      	ldrb	r2, [r7, #8]
   87dda:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87dde:	440b      	add	r3, r1
   87de0:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   87de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87de8:	1c5a      	adds	r2, r3, #1
   87dea:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87dee:	7a7a      	ldrb	r2, [r7, #9]
   87df0:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87df4:	440b      	add	r3, r1
   87df6:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   87dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87dfe:	1c5a      	adds	r2, r3, #1
   87e00:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e04:	7aba      	ldrb	r2, [r7, #10]
   87e06:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e0a:	e051      	b.n	87eb0 <Cl_Dlsis_SenddlsisData+0x338>
   87e0c:	f3af 8000 	nop.w
   87e10:	eb1c432d 	.word	0xeb1c432d
   87e14:	3f1a36e2 	.word	0x3f1a36e2
   87e18:	d2f1a9fc 	.word	0xd2f1a9fc
   87e1c:	3fa0624d 	.word	0x3fa0624d
   87e20:	51eb851f 	.word	0x51eb851f
   87e24:	3fed1eb8 	.word	0x3fed1eb8
   87e28:	9999999a 	.word	0x9999999a
   87e2c:	3fd99999 	.word	0x3fd99999
   87e30:	24dd2f1b 	.word	0x24dd2f1b
   87e34:	3f958106 	.word	0x3f958106
   87e38:	33333333 	.word	0x33333333
   87e3c:	40153333 	.word	0x40153333
   87e40:	000a2be1 	.word	0x000a2be1
   87e44:	0008d499 	.word	0x0008d499
   87e48:	000a25dd 	.word	0x000a25dd
   87e4c:	000a268d 	.word	0x000a268d
   87e50:	471d0800 	.word	0x471d0800
   87e54:	000a27f5 	.word	0x000a27f5
   87e58:	000a2a65 	.word	0x000a2a65
   87e5c:	0008e659 	.word	0x0008e659
   87e60:	200725ec 	.word	0x200725ec
   87e64:	41200000 	.word	0x41200000
   87e68:	000a2479 	.word	0x000a2479
   87e6c:	40c00000 	.word	0x40c00000
   87e70:	200720d8 	.word	0x200720d8
   87e74:	40a00000 	.word	0x40a00000
   87e78:	000a247d 	.word	0x000a247d
   87e7c:	cccccccd 	.word	0xcccccccd
   87e80:	51eb851f 	.word	0x51eb851f
   87e84:	000a25e5 	.word	0x000a25e5
   87e88:	000a1d65 	.word	0x000a1d65
   87e8c:	000a1e0d 	.word	0x000a1e0d
   87e90:	000a1aa9 	.word	0x000a1aa9
   87e94:	000a23d1 	.word	0x000a23d1
   87e98:	42c80000 	.word	0x42c80000
   87e9c:	000a1aa5 	.word	0x000a1aa5
   87ea0:	40390000 	.word	0x40390000
   87ea4:	3ff00000 	.word	0x3ff00000
   87ea8:	000a2061 	.word	0x000a2061
   87eac:	40240000 	.word	0x40240000
   87eb0:	440b      	add	r3, r1
   87eb2:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   87eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87eba:	1c5a      	adds	r2, r3, #1
   87ebc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ec0:	7afa      	ldrb	r2, [r7, #11]
   87ec2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ec6:	440b      	add	r3, r1
   87ec8:	f803 2c50 	strb.w	r2, [r3, #-80]
   87ecc:	e02d      	b.n	87f2a <Cl_Dlsis_SenddlsisData+0x3b2>
			}
				else
				{
					tempdata.word = 0;
   87ece:	2300      	movs	r3, #0
   87ed0:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   87ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87ed6:	1c5a      	adds	r2, r3, #1
   87ed8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87edc:	7a3a      	ldrb	r2, [r7, #8]
   87ede:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ee2:	440b      	add	r3, r1
   87ee4:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   87ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87eec:	1c5a      	adds	r2, r3, #1
   87eee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ef2:	7a7a      	ldrb	r2, [r7, #9]
   87ef4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ef8:	440b      	add	r3, r1
   87efa:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   87efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f02:	1c5a      	adds	r2, r3, #1
   87f04:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f08:	7aba      	ldrb	r2, [r7, #10]
   87f0a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f0e:	440b      	add	r3, r1
   87f10:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   87f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f18:	1c5a      	adds	r2, r3, #1
   87f1a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f1e:	7afa      	ldrb	r2, [r7, #11]
   87f20:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f24:	440b      	add	r3, r1
   87f26:	f803 2c50 	strb.w	r2, [r3, #-80]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   87f2a:	4bb1      	ldr	r3, [pc, #708]	; (881f0 <Cl_Dlsis_SenddlsisData+0x678>)
   87f2c:	681a      	ldr	r2, [r3, #0]
   87f2e:	4bb1      	ldr	r3, [pc, #708]	; (881f4 <Cl_Dlsis_SenddlsisData+0x67c>)
   87f30:	4610      	mov	r0, r2
   87f32:	4798      	blx	r3
   87f34:	4603      	mov	r3, r0
   87f36:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   87f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f3c:	1c5a      	adds	r2, r3, #1
   87f3e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f42:	7a3a      	ldrb	r2, [r7, #8]
   87f44:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f48:	440b      	add	r3, r1
   87f4a:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   87f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f52:	1c5a      	adds	r2, r3, #1
   87f54:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f58:	7a7a      	ldrb	r2, [r7, #9]
   87f5a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f5e:	440b      	add	r3, r1
   87f60:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   87f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f68:	1c5a      	adds	r2, r3, #1
   87f6a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f6e:	7aba      	ldrb	r2, [r7, #10]
   87f70:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f74:	440b      	add	r3, r1
   87f76:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   87f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f7e:	1c5a      	adds	r2, r3, #1
   87f80:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f84:	7afa      	ldrb	r2, [r7, #11]
   87f86:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f8a:	440b      	add	r3, r1
   87f8c:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   87f90:	f107 0308 	add.w	r3, r7, #8
   87f94:	4619      	mov	r1, r3
   87f96:	200b      	movs	r0, #11
   87f98:	4b97      	ldr	r3, [pc, #604]	; (881f8 <Cl_Dlsis_SenddlsisData+0x680>)
   87f9a:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87f9c:	893b      	ldrh	r3, [r7, #8]
   87f9e:	461a      	mov	r2, r3
   87fa0:	4b96      	ldr	r3, [pc, #600]	; (881fc <Cl_Dlsis_SenddlsisData+0x684>)
   87fa2:	4610      	mov	r0, r2
   87fa4:	4798      	blx	r3
   87fa6:	4c96      	ldr	r4, [pc, #600]	; (88200 <Cl_Dlsis_SenddlsisData+0x688>)
   87fa8:	a38f      	add	r3, pc, #572	; (adr r3, 881e8 <Cl_Dlsis_SenddlsisData+0x670>)
   87faa:	e9d3 2300 	ldrd	r2, r3, [r3]
   87fae:	47a0      	blx	r4
   87fb0:	4603      	mov	r3, r0
   87fb2:	460c      	mov	r4, r1
   87fb4:	4619      	mov	r1, r3
   87fb6:	4622      	mov	r2, r4
   87fb8:	4b92      	ldr	r3, [pc, #584]	; (88204 <Cl_Dlsis_SenddlsisData+0x68c>)
   87fba:	4608      	mov	r0, r1
   87fbc:	4611      	mov	r1, r2
   87fbe:	4798      	blx	r3
   87fc0:	4603      	mov	r3, r0
   87fc2:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   87fc4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   87fc8:	4618      	mov	r0, r3
   87fca:	4b8f      	ldr	r3, [pc, #572]	; (88208 <Cl_Dlsis_SenddlsisData+0x690>)
   87fcc:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   87fce:	4b8f      	ldr	r3, [pc, #572]	; (8820c <Cl_Dlsis_SenddlsisData+0x694>)
   87fd0:	681a      	ldr	r2, [r3, #0]
   87fd2:	4b8f      	ldr	r3, [pc, #572]	; (88210 <Cl_Dlsis_SenddlsisData+0x698>)
   87fd4:	498f      	ldr	r1, [pc, #572]	; (88214 <Cl_Dlsis_SenddlsisData+0x69c>)
   87fd6:	4610      	mov	r0, r2
   87fd8:	4798      	blx	r3
   87fda:	4603      	mov	r3, r0
   87fdc:	4618      	mov	r0, r3
   87fde:	4b8e      	ldr	r3, [pc, #568]	; (88218 <Cl_Dlsis_SenddlsisData+0x6a0>)
   87fe0:	681a      	ldr	r2, [r3, #0]
   87fe2:	4b8e      	ldr	r3, [pc, #568]	; (8821c <Cl_Dlsis_SenddlsisData+0x6a4>)
   87fe4:	4611      	mov	r1, r2
   87fe6:	4798      	blx	r3
   87fe8:	4603      	mov	r3, r0
   87fea:	461a      	mov	r2, r3
   87fec:	4b8c      	ldr	r3, [pc, #560]	; (88220 <Cl_Dlsis_SenddlsisData+0x6a8>)
   87fee:	498d      	ldr	r1, [pc, #564]	; (88224 <Cl_Dlsis_SenddlsisData+0x6ac>)
   87ff0:	4610      	mov	r0, r2
   87ff2:	4798      	blx	r3
   87ff4:	4603      	mov	r3, r0
   87ff6:	461a      	mov	r2, r3
   87ff8:	4b84      	ldr	r3, [pc, #528]	; (8820c <Cl_Dlsis_SenddlsisData+0x694>)
   87ffa:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   87ffc:	4b83      	ldr	r3, [pc, #524]	; (8820c <Cl_Dlsis_SenddlsisData+0x694>)
   87ffe:	681a      	ldr	r2, [r3, #0]
   88000:	4b7c      	ldr	r3, [pc, #496]	; (881f4 <Cl_Dlsis_SenddlsisData+0x67c>)
   88002:	4610      	mov	r0, r2
   88004:	4798      	blx	r3
   88006:	4603      	mov	r3, r0
   88008:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   8800a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8800e:	1c5a      	adds	r2, r3, #1
   88010:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88014:	7a3a      	ldrb	r2, [r7, #8]
   88016:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8801a:	440b      	add	r3, r1
   8801c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   88020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88024:	1c5a      	adds	r2, r3, #1
   88026:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8802a:	7a7a      	ldrb	r2, [r7, #9]
   8802c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88030:	440b      	add	r3, r1
   88032:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   88036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8803a:	1c5a      	adds	r2, r3, #1
   8803c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88040:	7aba      	ldrb	r2, [r7, #10]
   88042:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88046:	440b      	add	r3, r1
   88048:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   8804c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88050:	1c5a      	adds	r2, r3, #1
   88052:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88056:	7afa      	ldrb	r2, [r7, #11]
   88058:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8805c:	440b      	add	r3, r1
   8805e:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   88062:	f107 0308 	add.w	r3, r7, #8
   88066:	4619      	mov	r1, r3
   88068:	200c      	movs	r0, #12
   8806a:	4b63      	ldr	r3, [pc, #396]	; (881f8 <Cl_Dlsis_SenddlsisData+0x680>)
   8806c:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   8806e:	893b      	ldrh	r3, [r7, #8]
   88070:	461a      	mov	r2, r3
   88072:	4b62      	ldr	r3, [pc, #392]	; (881fc <Cl_Dlsis_SenddlsisData+0x684>)
   88074:	4610      	mov	r0, r2
   88076:	4798      	blx	r3
   88078:	4c61      	ldr	r4, [pc, #388]	; (88200 <Cl_Dlsis_SenddlsisData+0x688>)
   8807a:	a35b      	add	r3, pc, #364	; (adr r3, 881e8 <Cl_Dlsis_SenddlsisData+0x670>)
   8807c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88080:	47a0      	blx	r4
   88082:	4603      	mov	r3, r0
   88084:	460c      	mov	r4, r1
   88086:	4619      	mov	r1, r3
   88088:	4622      	mov	r2, r4
   8808a:	4b5e      	ldr	r3, [pc, #376]	; (88204 <Cl_Dlsis_SenddlsisData+0x68c>)
   8808c:	4608      	mov	r0, r1
   8808e:	4611      	mov	r1, r2
   88090:	4798      	blx	r3
   88092:	4603      	mov	r3, r0
   88094:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   88096:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   8809a:	4618      	mov	r0, r3
   8809c:	4b62      	ldr	r3, [pc, #392]	; (88228 <Cl_Dlsis_SenddlsisData+0x6b0>)
   8809e:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   880a0:	4b62      	ldr	r3, [pc, #392]	; (8822c <Cl_Dlsis_SenddlsisData+0x6b4>)
   880a2:	681a      	ldr	r2, [r3, #0]
   880a4:	4b5a      	ldr	r3, [pc, #360]	; (88210 <Cl_Dlsis_SenddlsisData+0x698>)
   880a6:	495b      	ldr	r1, [pc, #364]	; (88214 <Cl_Dlsis_SenddlsisData+0x69c>)
   880a8:	4610      	mov	r0, r2
   880aa:	4798      	blx	r3
   880ac:	4603      	mov	r3, r0
   880ae:	4618      	mov	r0, r3
   880b0:	4b5f      	ldr	r3, [pc, #380]	; (88230 <Cl_Dlsis_SenddlsisData+0x6b8>)
   880b2:	681a      	ldr	r2, [r3, #0]
   880b4:	4b59      	ldr	r3, [pc, #356]	; (8821c <Cl_Dlsis_SenddlsisData+0x6a4>)
   880b6:	4611      	mov	r1, r2
   880b8:	4798      	blx	r3
   880ba:	4603      	mov	r3, r0
   880bc:	461a      	mov	r2, r3
   880be:	4b58      	ldr	r3, [pc, #352]	; (88220 <Cl_Dlsis_SenddlsisData+0x6a8>)
   880c0:	4958      	ldr	r1, [pc, #352]	; (88224 <Cl_Dlsis_SenddlsisData+0x6ac>)
   880c2:	4610      	mov	r0, r2
   880c4:	4798      	blx	r3
   880c6:	4603      	mov	r3, r0
   880c8:	461a      	mov	r2, r3
   880ca:	4b58      	ldr	r3, [pc, #352]	; (8822c <Cl_Dlsis_SenddlsisData+0x6b4>)
   880cc:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   880ce:	4b57      	ldr	r3, [pc, #348]	; (8822c <Cl_Dlsis_SenddlsisData+0x6b4>)
   880d0:	681a      	ldr	r2, [r3, #0]
   880d2:	4b48      	ldr	r3, [pc, #288]	; (881f4 <Cl_Dlsis_SenddlsisData+0x67c>)
   880d4:	4610      	mov	r0, r2
   880d6:	4798      	blx	r3
   880d8:	4603      	mov	r3, r0
   880da:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   880dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   880e0:	1c5a      	adds	r2, r3, #1
   880e2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   880e6:	7a3a      	ldrb	r2, [r7, #8]
   880e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   880ec:	440b      	add	r3, r1
   880ee:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   880f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   880f6:	1c5a      	adds	r2, r3, #1
   880f8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   880fc:	7a7a      	ldrb	r2, [r7, #9]
   880fe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88102:	440b      	add	r3, r1
   88104:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   88108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8810c:	1c5a      	adds	r2, r3, #1
   8810e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88112:	7aba      	ldrb	r2, [r7, #10]
   88114:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88118:	440b      	add	r3, r1
   8811a:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   8811e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88122:	1c5a      	adds	r2, r3, #1
   88124:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88128:	7afa      	ldrb	r2, [r7, #11]
   8812a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8812e:	440b      	add	r3, r1
   88130:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   88134:	f107 0308 	add.w	r3, r7, #8
   88138:	4619      	mov	r1, r3
   8813a:	200e      	movs	r0, #14
   8813c:	4b2e      	ldr	r3, [pc, #184]	; (881f8 <Cl_Dlsis_SenddlsisData+0x680>)
   8813e:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   88140:	893b      	ldrh	r3, [r7, #8]
   88142:	461a      	mov	r2, r3
   88144:	4b2d      	ldr	r3, [pc, #180]	; (881fc <Cl_Dlsis_SenddlsisData+0x684>)
   88146:	4610      	mov	r0, r2
   88148:	4798      	blx	r3
   8814a:	4c2d      	ldr	r4, [pc, #180]	; (88200 <Cl_Dlsis_SenddlsisData+0x688>)
   8814c:	a326      	add	r3, pc, #152	; (adr r3, 881e8 <Cl_Dlsis_SenddlsisData+0x670>)
   8814e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88152:	47a0      	blx	r4
   88154:	4603      	mov	r3, r0
   88156:	460c      	mov	r4, r1
   88158:	4619      	mov	r1, r3
   8815a:	4622      	mov	r2, r4
   8815c:	4b29      	ldr	r3, [pc, #164]	; (88204 <Cl_Dlsis_SenddlsisData+0x68c>)
   8815e:	4608      	mov	r0, r1
   88160:	4611      	mov	r1, r2
   88162:	4798      	blx	r3
   88164:	4603      	mov	r3, r0
   88166:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   88168:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   8816c:	4618      	mov	r0, r3
   8816e:	4b31      	ldr	r3, [pc, #196]	; (88234 <Cl_Dlsis_SenddlsisData+0x6bc>)
   88170:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   88172:	4b31      	ldr	r3, [pc, #196]	; (88238 <Cl_Dlsis_SenddlsisData+0x6c0>)
   88174:	681a      	ldr	r2, [r3, #0]
   88176:	4b26      	ldr	r3, [pc, #152]	; (88210 <Cl_Dlsis_SenddlsisData+0x698>)
   88178:	4926      	ldr	r1, [pc, #152]	; (88214 <Cl_Dlsis_SenddlsisData+0x69c>)
   8817a:	4610      	mov	r0, r2
   8817c:	4798      	blx	r3
   8817e:	4603      	mov	r3, r0
   88180:	4618      	mov	r0, r3
   88182:	4b2e      	ldr	r3, [pc, #184]	; (8823c <Cl_Dlsis_SenddlsisData+0x6c4>)
   88184:	681a      	ldr	r2, [r3, #0]
   88186:	4b25      	ldr	r3, [pc, #148]	; (8821c <Cl_Dlsis_SenddlsisData+0x6a4>)
   88188:	4611      	mov	r1, r2
   8818a:	4798      	blx	r3
   8818c:	4603      	mov	r3, r0
   8818e:	461a      	mov	r2, r3
   88190:	4b23      	ldr	r3, [pc, #140]	; (88220 <Cl_Dlsis_SenddlsisData+0x6a8>)
   88192:	4924      	ldr	r1, [pc, #144]	; (88224 <Cl_Dlsis_SenddlsisData+0x6ac>)
   88194:	4610      	mov	r0, r2
   88196:	4798      	blx	r3
   88198:	4603      	mov	r3, r0
   8819a:	461a      	mov	r2, r3
   8819c:	4b26      	ldr	r3, [pc, #152]	; (88238 <Cl_Dlsis_SenddlsisData+0x6c0>)
   8819e:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   881a0:	f107 0308 	add.w	r3, r7, #8
   881a4:	4619      	mov	r1, r3
   881a6:	200f      	movs	r0, #15
   881a8:	4b13      	ldr	r3, [pc, #76]	; (881f8 <Cl_Dlsis_SenddlsisData+0x680>)
   881aa:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   881ac:	893b      	ldrh	r3, [r7, #8]
   881ae:	461a      	mov	r2, r3
   881b0:	4b12      	ldr	r3, [pc, #72]	; (881fc <Cl_Dlsis_SenddlsisData+0x684>)
   881b2:	4610      	mov	r0, r2
   881b4:	4798      	blx	r3
   881b6:	4c12      	ldr	r4, [pc, #72]	; (88200 <Cl_Dlsis_SenddlsisData+0x688>)
   881b8:	a30b      	add	r3, pc, #44	; (adr r3, 881e8 <Cl_Dlsis_SenddlsisData+0x670>)
   881ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   881be:	47a0      	blx	r4
   881c0:	4603      	mov	r3, r0
   881c2:	460c      	mov	r4, r1
   881c4:	4619      	mov	r1, r3
   881c6:	4622      	mov	r2, r4
   881c8:	4b0e      	ldr	r3, [pc, #56]	; (88204 <Cl_Dlsis_SenddlsisData+0x68c>)
   881ca:	4608      	mov	r0, r1
   881cc:	4611      	mov	r1, r2
   881ce:	4798      	blx	r3
   881d0:	4603      	mov	r3, r0
   881d2:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   881d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   881d8:	4618      	mov	r0, r3
   881da:	4b19      	ldr	r3, [pc, #100]	; (88240 <Cl_Dlsis_SenddlsisData+0x6c8>)
   881dc:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   881de:	4b19      	ldr	r3, [pc, #100]	; (88244 <Cl_Dlsis_SenddlsisData+0x6cc>)
   881e0:	681a      	ldr	r2, [r3, #0]
   881e2:	e031      	b.n	88248 <Cl_Dlsis_SenddlsisData+0x6d0>
   881e4:	f3af 8000 	nop.w
   881e8:	58e21965 	.word	0x58e21965
   881ec:	3fe9b717 	.word	0x3fe9b717
   881f0:	200720d8 	.word	0x200720d8
   881f4:	000a2a65 	.word	0x000a2a65
   881f8:	0008d499 	.word	0x0008d499
   881fc:	000a1d41 	.word	0x000a1d41
   88200:	000a1e0d 	.word	0x000a1e0d
   88204:	000a2391 	.word	0x000a2391
   88208:	00083e39 	.word	0x00083e39
   8820c:	200720dc 	.word	0x200720dc
   88210:	000a268d 	.word	0x000a268d
   88214:	40a00000 	.word	0x40a00000
   88218:	20072d08 	.word	0x20072d08
   8821c:	000a247d 	.word	0x000a247d
   88220:	000a27f5 	.word	0x000a27f5
   88224:	40c00000 	.word	0x40c00000
   88228:	00083fb9 	.word	0x00083fb9
   8822c:	200720e0 	.word	0x200720e0
   88230:	20071618 	.word	0x20071618
   88234:	0008413d 	.word	0x0008413d
   88238:	200720e4 	.word	0x200720e4
   8823c:	2007161c 	.word	0x2007161c
   88240:	0008424d 	.word	0x0008424d
   88244:	200720e8 	.word	0x200720e8
   88248:	4b53      	ldr	r3, [pc, #332]	; (88398 <Cl_Dlsis_SenddlsisData+0x820>)
   8824a:	4954      	ldr	r1, [pc, #336]	; (8839c <Cl_Dlsis_SenddlsisData+0x824>)
   8824c:	4610      	mov	r0, r2
   8824e:	4798      	blx	r3
   88250:	4603      	mov	r3, r0
   88252:	4618      	mov	r0, r3
   88254:	4b52      	ldr	r3, [pc, #328]	; (883a0 <Cl_Dlsis_SenddlsisData+0x828>)
   88256:	681a      	ldr	r2, [r3, #0]
   88258:	4b52      	ldr	r3, [pc, #328]	; (883a4 <Cl_Dlsis_SenddlsisData+0x82c>)
   8825a:	4611      	mov	r1, r2
   8825c:	4798      	blx	r3
   8825e:	4603      	mov	r3, r0
   88260:	461a      	mov	r2, r3
   88262:	4b51      	ldr	r3, [pc, #324]	; (883a8 <Cl_Dlsis_SenddlsisData+0x830>)
   88264:	4951      	ldr	r1, [pc, #324]	; (883ac <Cl_Dlsis_SenddlsisData+0x834>)
   88266:	4610      	mov	r0, r2
   88268:	4798      	blx	r3
   8826a:	4603      	mov	r3, r0
   8826c:	461a      	mov	r2, r3
   8826e:	4b50      	ldr	r3, [pc, #320]	; (883b0 <Cl_Dlsis_SenddlsisData+0x838>)
   88270:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   88272:	4b50      	ldr	r3, [pc, #320]	; (883b4 <Cl_Dlsis_SenddlsisData+0x83c>)
   88274:	681a      	ldr	r2, [r3, #0]
   88276:	4b50      	ldr	r3, [pc, #320]	; (883b8 <Cl_Dlsis_SenddlsisData+0x840>)
   88278:	6819      	ldr	r1, [r3, #0]
   8827a:	4b4a      	ldr	r3, [pc, #296]	; (883a4 <Cl_Dlsis_SenddlsisData+0x82c>)
   8827c:	4610      	mov	r0, r2
   8827e:	4798      	blx	r3
   88280:	4603      	mov	r3, r0
   88282:	461c      	mov	r4, r3
   88284:	4b4d      	ldr	r3, [pc, #308]	; (883bc <Cl_Dlsis_SenddlsisData+0x844>)
   88286:	681a      	ldr	r2, [r3, #0]
   88288:	4b49      	ldr	r3, [pc, #292]	; (883b0 <Cl_Dlsis_SenddlsisData+0x838>)
   8828a:	6819      	ldr	r1, [r3, #0]
   8828c:	4b45      	ldr	r3, [pc, #276]	; (883a4 <Cl_Dlsis_SenddlsisData+0x82c>)
   8828e:	4610      	mov	r0, r2
   88290:	4798      	blx	r3
   88292:	4603      	mov	r3, r0
   88294:	461a      	mov	r2, r3
   88296:	4b4a      	ldr	r3, [pc, #296]	; (883c0 <Cl_Dlsis_SenddlsisData+0x848>)
   88298:	4611      	mov	r1, r2
   8829a:	4620      	mov	r0, r4
   8829c:	4798      	blx	r3
   8829e:	4603      	mov	r3, r0
   882a0:	461a      	mov	r2, r3
   882a2:	4b41      	ldr	r3, [pc, #260]	; (883a8 <Cl_Dlsis_SenddlsisData+0x830>)
   882a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   882a8:	4610      	mov	r0, r2
   882aa:	4798      	blx	r3
   882ac:	4603      	mov	r3, r0
   882ae:	461a      	mov	r2, r3
   882b0:	4b43      	ldr	r3, [pc, #268]	; (883c0 <Cl_Dlsis_SenddlsisData+0x848>)
   882b2:	4944      	ldr	r1, [pc, #272]	; (883c4 <Cl_Dlsis_SenddlsisData+0x84c>)
   882b4:	4610      	mov	r0, r2
   882b6:	4798      	blx	r3
   882b8:	4603      	mov	r3, r0
   882ba:	461a      	mov	r2, r3
   882bc:	4b42      	ldr	r3, [pc, #264]	; (883c8 <Cl_Dlsis_SenddlsisData+0x850>)
   882be:	4610      	mov	r0, r2
   882c0:	4798      	blx	r3
   882c2:	4603      	mov	r3, r0
   882c4:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   882c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   882ca:	1c5a      	adds	r2, r3, #1
   882cc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   882d0:	7a3a      	ldrb	r2, [r7, #8]
   882d2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   882d6:	440b      	add	r3, r1
   882d8:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   882dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   882e0:	1c5a      	adds	r2, r3, #1
   882e2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   882e6:	7a7a      	ldrb	r2, [r7, #9]
   882e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   882ec:	440b      	add	r3, r1
   882ee:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   882f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   882f6:	1c5a      	adds	r2, r3, #1
   882f8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   882fc:	7aba      	ldrb	r2, [r7, #10]
   882fe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88302:	440b      	add	r3, r1
   88304:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   88308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8830c:	1c5a      	adds	r2, r3, #1
   8830e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88312:	7afa      	ldrb	r2, [r7, #11]
   88314:	f107 0160 	add.w	r1, r7, #96	; 0x60
   88318:	440b      	add	r3, r1
   8831a:	f803 2c50 	strb.w	r2, [r3, #-80]
			
			systemdataarray[count++] = 0x0A; // tmp
   8831e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88322:	1c5a      	adds	r2, r3, #1
   88324:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88328:	f107 0260 	add.w	r2, r7, #96	; 0x60
   8832c:	4413      	add	r3, r2
   8832e:	220a      	movs	r2, #10
   88330:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x0A; // tmp
   88334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88338:	1c5a      	adds	r2, r3, #1
   8833a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8833e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   88342:	4413      	add	r3, r2
   88344:	220a      	movs	r2, #10
   88346:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x00;
   8834a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8834e:	1c5a      	adds	r2, r3, #1
   88350:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   88354:	f107 0260 	add.w	r2, r7, #96	; 0x60
   88358:	4413      	add	r3, r2
   8835a:	2200      	movs	r2, #0
   8835c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = 0x00;
   88360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   88364:	1c5a      	adds	r2, r3, #1
   88366:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8836a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   8836e:	4413      	add	r3, r2
   88370:	2200      	movs	r2, #0
   88372:	f803 2c50 	strb.w	r2, [r3, #-80]
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   88376:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
   8837a:	f107 0310 	add.w	r3, r7, #16
   8837e:	4619      	mov	r1, r3
   88380:	202a      	movs	r0, #42	; 0x2a
   88382:	4b12      	ldr	r3, [pc, #72]	; (883cc <Cl_Dlsis_SenddlsisData+0x854>)
   88384:	4798      	blx	r3
   88386:	4603      	mov	r3, r0
   88388:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   8838c:	2300      	movs	r3, #0
}
   8838e:	4618      	mov	r0, r3
   88390:	3764      	adds	r7, #100	; 0x64
   88392:	46bd      	mov	sp, r7
   88394:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88396:	bf00      	nop
   88398:	000a268d 	.word	0x000a268d
   8839c:	40a00000 	.word	0x40a00000
   883a0:	20071620 	.word	0x20071620
   883a4:	000a247d 	.word	0x000a247d
   883a8:	000a27f5 	.word	0x000a27f5
   883ac:	40c00000 	.word	0x40c00000
   883b0:	200720e8 	.word	0x200720e8
   883b4:	200720dc 	.word	0x200720dc
   883b8:	200720e0 	.word	0x200720e0
   883bc:	200720e4 	.word	0x200720e4
   883c0:	000a2479 	.word	0x000a2479
   883c4:	41c80000 	.word	0x41c80000
   883c8:	000a2a65 	.word	0x000a2a65
   883cc:	00098601 	.word	0x00098601

000883d0 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   883d0:	b580      	push	{r7, lr}
   883d2:	b082      	sub	sp, #8
   883d4:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   883d6:	4b18      	ldr	r3, [pc, #96]	; (88438 <Cl_Dlsis_StartDialysis+0x68>)
   883d8:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   883da:	2300      	movs	r3, #0
   883dc:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   883de:	234a      	movs	r3, #74	; 0x4a
   883e0:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   883e2:	2300      	movs	r3, #0
   883e4:	717b      	strb	r3, [r7, #5]
	
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   883e6:	4b15      	ldr	r3, [pc, #84]	; (8843c <Cl_Dlsis_StartDialysis+0x6c>)
   883e8:	2200      	movs	r2, #0
   883ea:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   883ec:	4b13      	ldr	r3, [pc, #76]	; (8843c <Cl_Dlsis_StartDialysis+0x6c>)
   883ee:	2200      	movs	r2, #0
   883f0:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   883f2:	4b13      	ldr	r3, [pc, #76]	; (88440 <Cl_Dlsis_StartDialysis+0x70>)
   883f4:	2200      	movs	r2, #0
   883f6:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   883f8:	2312      	movs	r3, #18
   883fa:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   883fc:	2301      	movs	r3, #1
   883fe:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   88400:	1d79      	adds	r1, r7, #5
   88402:	79bb      	ldrb	r3, [r7, #6]
   88404:	2201      	movs	r2, #1
   88406:	4618      	mov	r0, r3
   88408:	4b0e      	ldr	r3, [pc, #56]	; (88444 <Cl_Dlsis_StartDialysis+0x74>)
   8840a:	4798      	blx	r3
   8840c:	4603      	mov	r3, r0
   8840e:	71fb      	strb	r3, [r7, #7]
		command = CON_TX_COMMAND_DLSIS_STARTED;
   88410:	2313      	movs	r3, #19
   88412:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   88414:	2301      	movs	r3, #1
   88416:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   88418:	1d79      	adds	r1, r7, #5
   8841a:	79bb      	ldrb	r3, [r7, #6]
   8841c:	2201      	movs	r2, #1
   8841e:	4618      	mov	r0, r3
   88420:	4b08      	ldr	r3, [pc, #32]	; (88444 <Cl_Dlsis_StartDialysis+0x74>)
   88422:	4798      	blx	r3
   88424:	4603      	mov	r3, r0
   88426:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   88428:	4b07      	ldr	r3, [pc, #28]	; (88448 <Cl_Dlsis_StartDialysis+0x78>)
   8842a:	4798      	blx	r3
	
	return 0;
   8842c:	2300      	movs	r3, #0

}
   8842e:	4618      	mov	r0, r3
   88430:	3708      	adds	r7, #8
   88432:	46bd      	mov	sp, r7
   88434:	bd80      	pop	{r7, pc}
   88436:	bf00      	nop
   88438:	00096b4d 	.word	0x00096b4d
   8843c:	20072d18 	.word	0x20072d18
   88440:	200720a4 	.word	0x200720a4
   88444:	00098601 	.word	0x00098601
   88448:	0008844d 	.word	0x0008844d

0008844c <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   8844c:	b590      	push	{r4, r7, lr}
   8844e:	b087      	sub	sp, #28
   88450:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   88452:	2300      	movs	r3, #0
   88454:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88456:	234a      	movs	r3, #74	; 0x4a
   88458:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   8845a:	2300      	movs	r3, #0
   8845c:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   8845e:	2300      	movs	r3, #0
   88460:	9300      	str	r3, [sp, #0]
   88462:	f04f 0300 	mov.w	r3, #0
   88466:	f04f 0200 	mov.w	r2, #0
   8846a:	2101      	movs	r1, #1
   8846c:	2001      	movs	r0, #1
   8846e:	4cae      	ldr	r4, [pc, #696]	; (88728 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   88470:	47a0      	blx	r4
   88472:	4603      	mov	r3, r0
   88474:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   88476:	2300      	movs	r3, #0
   88478:	9300      	str	r3, [sp, #0]
   8847a:	f04f 0300 	mov.w	r3, #0
   8847e:	f04f 0200 	mov.w	r2, #0
   88482:	2100      	movs	r1, #0
   88484:	2029      	movs	r0, #41	; 0x29
   88486:	4ca8      	ldr	r4, [pc, #672]	; (88728 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   88488:	47a0      	blx	r4
   8848a:	4603      	mov	r3, r0
   8848c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   8848e:	2300      	movs	r3, #0
   88490:	9300      	str	r3, [sp, #0]
   88492:	f04f 0300 	mov.w	r3, #0
   88496:	f04f 0200 	mov.w	r2, #0
   8849a:	2100      	movs	r1, #0
   8849c:	202b      	movs	r0, #43	; 0x2b
   8849e:	4ca2      	ldr	r4, [pc, #648]	; (88728 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   884a0:	47a0      	blx	r4
   884a2:	4603      	mov	r3, r0
   884a4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   884a6:	2101      	movs	r1, #1
   884a8:	2001      	movs	r0, #1
   884aa:	4ba0      	ldr	r3, [pc, #640]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884ac:	4798      	blx	r3
   884ae:	4603      	mov	r3, r0
   884b0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   884b2:	2101      	movs	r1, #1
   884b4:	203d      	movs	r0, #61	; 0x3d
   884b6:	4b9d      	ldr	r3, [pc, #628]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884b8:	4798      	blx	r3
   884ba:	4603      	mov	r3, r0
   884bc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   884be:	2101      	movs	r1, #1
   884c0:	203e      	movs	r0, #62	; 0x3e
   884c2:	4b9a      	ldr	r3, [pc, #616]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884c4:	4798      	blx	r3
   884c6:	4603      	mov	r3, r0
   884c8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   884ca:	2101      	movs	r1, #1
   884cc:	2005      	movs	r0, #5
   884ce:	4b97      	ldr	r3, [pc, #604]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884d0:	4798      	blx	r3
   884d2:	4603      	mov	r3, r0
   884d4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   884d6:	2101      	movs	r1, #1
   884d8:	2006      	movs	r0, #6
   884da:	4b94      	ldr	r3, [pc, #592]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884dc:	4798      	blx	r3
   884de:	4603      	mov	r3, r0
   884e0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   884e2:	2100      	movs	r1, #0
   884e4:	2003      	movs	r0, #3
   884e6:	4b91      	ldr	r3, [pc, #580]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884e8:	4798      	blx	r3
   884ea:	4603      	mov	r3, r0
   884ec:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   884ee:	2100      	movs	r1, #0
   884f0:	2004      	movs	r0, #4
   884f2:	4b8e      	ldr	r3, [pc, #568]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   884f4:	4798      	blx	r3
   884f6:	4603      	mov	r3, r0
   884f8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   884fa:	2101      	movs	r1, #1
   884fc:	2007      	movs	r0, #7
   884fe:	4b8b      	ldr	r3, [pc, #556]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88500:	4798      	blx	r3
   88502:	4603      	mov	r3, r0
   88504:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   88506:	2101      	movs	r1, #1
   88508:	2008      	movs	r0, #8
   8850a:	4b88      	ldr	r3, [pc, #544]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   8850c:	4798      	blx	r3
   8850e:	4603      	mov	r3, r0
   88510:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
   88512:	2101      	movs	r1, #1
   88514:	2009      	movs	r0, #9
   88516:	4b85      	ldr	r3, [pc, #532]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88518:	4798      	blx	r3
   8851a:	4603      	mov	r3, r0
   8851c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
   8851e:	2101      	movs	r1, #1
   88520:	200a      	movs	r0, #10
   88522:	4b82      	ldr	r3, [pc, #520]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88524:	4798      	blx	r3
   88526:	4603      	mov	r3, r0
   88528:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
   8852a:	2101      	movs	r1, #1
   8852c:	200b      	movs	r0, #11
   8852e:	4b7f      	ldr	r3, [pc, #508]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88530:	4798      	blx	r3
   88532:	4603      	mov	r3, r0
   88534:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   88536:	2101      	movs	r1, #1
   88538:	2020      	movs	r0, #32
   8853a:	4b7c      	ldr	r3, [pc, #496]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   8853c:	4798      	blx	r3
   8853e:	4603      	mov	r3, r0
   88540:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,true );
   88542:	2101      	movs	r1, #1
   88544:	2021      	movs	r0, #33	; 0x21
   88546:	4b79      	ldr	r3, [pc, #484]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88548:	4798      	blx	r3
   8854a:	4603      	mov	r3, r0
   8854c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   8854e:	2101      	movs	r1, #1
   88550:	2024      	movs	r0, #36	; 0x24
   88552:	4b76      	ldr	r3, [pc, #472]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88554:	4798      	blx	r3
   88556:	4603      	mov	r3, r0
   88558:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   8855a:	2101      	movs	r1, #1
   8855c:	2026      	movs	r0, #38	; 0x26
   8855e:	4b73      	ldr	r3, [pc, #460]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88560:	4798      	blx	r3
   88562:	4603      	mov	r3, r0
   88564:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   88566:	2101      	movs	r1, #1
   88568:	2023      	movs	r0, #35	; 0x23
   8856a:	4b70      	ldr	r3, [pc, #448]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   8856c:	4798      	blx	r3
   8856e:	4603      	mov	r3, r0
   88570:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   88572:	2101      	movs	r1, #1
   88574:	2025      	movs	r0, #37	; 0x25
   88576:	4b6d      	ldr	r3, [pc, #436]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88578:	4798      	blx	r3
   8857a:	4603      	mov	r3, r0
   8857c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   8857e:	2101      	movs	r1, #1
   88580:	2022      	movs	r0, #34	; 0x22
   88582:	4b6a      	ldr	r3, [pc, #424]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88584:	4798      	blx	r3
   88586:	4603      	mov	r3, r0
   88588:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   8858a:	2101      	movs	r1, #1
   8858c:	2017      	movs	r0, #23
   8858e:	4b67      	ldr	r3, [pc, #412]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   88590:	4798      	blx	r3
   88592:	4603      	mov	r3, r0
   88594:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   88596:	2101      	movs	r1, #1
   88598:	2018      	movs	r0, #24
   8859a:	4b64      	ldr	r3, [pc, #400]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   8859c:	4798      	blx	r3
   8859e:	4603      	mov	r3, r0
   885a0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   885a2:	2101      	movs	r1, #1
   885a4:	2015      	movs	r0, #21
   885a6:	4b61      	ldr	r3, [pc, #388]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885a8:	4798      	blx	r3
   885aa:	4603      	mov	r3, r0
   885ac:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   885ae:	2101      	movs	r1, #1
   885b0:	2016      	movs	r0, #22
   885b2:	4b5e      	ldr	r3, [pc, #376]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885b4:	4798      	blx	r3
   885b6:	4603      	mov	r3, r0
   885b8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   885ba:	2101      	movs	r1, #1
   885bc:	2027      	movs	r0, #39	; 0x27
   885be:	4b5b      	ldr	r3, [pc, #364]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885c0:	4798      	blx	r3
   885c2:	4603      	mov	r3, r0
   885c4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   885c6:	2101      	movs	r1, #1
   885c8:	2028      	movs	r0, #40	; 0x28
   885ca:	4b58      	ldr	r3, [pc, #352]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885cc:	4798      	blx	r3
   885ce:	4603      	mov	r3, r0
   885d0:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,true );
   885d2:	2101      	movs	r1, #1
   885d4:	2014      	movs	r0, #20
   885d6:	4b55      	ldr	r3, [pc, #340]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885d8:	4798      	blx	r3
   885da:	4603      	mov	r3, r0
   885dc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,true );
   885de:	2101      	movs	r1, #1
   885e0:	2013      	movs	r0, #19
   885e2:	4b52      	ldr	r3, [pc, #328]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885e4:	4798      	blx	r3
   885e6:	4603      	mov	r3, r0
   885e8:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   885ea:	4b51      	ldr	r3, [pc, #324]	; (88730 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   885ec:	781b      	ldrb	r3, [r3, #0]
   885ee:	2b00      	cmp	r3, #0
   885f0:	d005      	beq.n	885fe <Cl_Dlsis_ResumeDialysis+0x1b2>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   885f2:	2101      	movs	r1, #1
   885f4:	203c      	movs	r0, #60	; 0x3c
   885f6:	4b4d      	ldr	r3, [pc, #308]	; (8872c <Cl_Dlsis_ResumeDialysis+0x2e0>)
   885f8:	4798      	blx	r3
   885fa:	4603      	mov	r3, r0
   885fc:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   885fe:	4b4d      	ldr	r3, [pc, #308]	; (88734 <Cl_Dlsis_ResumeDialysis+0x2e8>)
   88600:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   88602:	4b4d      	ldr	r3, [pc, #308]	; (88738 <Cl_Dlsis_ResumeDialysis+0x2ec>)
   88604:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   88606:	2001      	movs	r0, #1
   88608:	4b4c      	ldr	r3, [pc, #304]	; (8873c <Cl_Dlsis_ResumeDialysis+0x2f0>)
   8860a:	4798      	blx	r3
   8860c:	4603      	mov	r3, r0
   8860e:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   88610:	2002      	movs	r0, #2
   88612:	4b4a      	ldr	r3, [pc, #296]	; (8873c <Cl_Dlsis_ResumeDialysis+0x2f0>)
   88614:	4798      	blx	r3
   88616:	4603      	mov	r3, r0
   88618:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   8861a:	200b      	movs	r0, #11
   8861c:	4b48      	ldr	r3, [pc, #288]	; (88740 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8861e:	4798      	blx	r3
   88620:	4603      	mov	r3, r0
   88622:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   88624:	2003      	movs	r0, #3
   88626:	4b47      	ldr	r3, [pc, #284]	; (88744 <Cl_Dlsis_ResumeDialysis+0x2f8>)
   88628:	4798      	blx	r3
   8862a:	4603      	mov	r3, r0
   8862c:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   8862e:	2100      	movs	r1, #0
   88630:	2002      	movs	r0, #2
   88632:	4b45      	ldr	r3, [pc, #276]	; (88748 <Cl_Dlsis_ResumeDialysis+0x2fc>)
   88634:	4798      	blx	r3
									cl_wait(100);
   88636:	2064      	movs	r0, #100	; 0x64
   88638:	4b44      	ldr	r3, [pc, #272]	; (8874c <Cl_Dlsis_ResumeDialysis+0x300>)
   8863a:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   8863c:	4b44      	ldr	r3, [pc, #272]	; (88750 <Cl_Dlsis_ResumeDialysis+0x304>)
   8863e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   88640:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   88642:	68b9      	ldr	r1, [r7, #8]
   88644:	2001      	movs	r0, #1
   88646:	4b40      	ldr	r3, [pc, #256]	; (88748 <Cl_Dlsis_ResumeDialysis+0x2fc>)
   88648:	4798      	blx	r3
									cl_wait(100);
   8864a:	2064      	movs	r0, #100	; 0x64
   8864c:	4b3f      	ldr	r3, [pc, #252]	; (8874c <Cl_Dlsis_ResumeDialysis+0x300>)
   8864e:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   88650:	4b3f      	ldr	r3, [pc, #252]	; (88750 <Cl_Dlsis_ResumeDialysis+0x304>)
   88652:	695b      	ldr	r3, [r3, #20]
   88654:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   88656:	4a3f      	ldr	r2, [pc, #252]	; (88754 <Cl_Dlsis_ResumeDialysis+0x308>)
   88658:	687b      	ldr	r3, [r7, #4]
   8865a:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   8865c:	2300      	movs	r3, #0
   8865e:	807b      	strh	r3, [r7, #2]
									switch (temp)
   88660:	687b      	ldr	r3, [r7, #4]
   88662:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   88666:	d017      	beq.n	88698 <Cl_Dlsis_ResumeDialysis+0x24c>
   88668:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8866c:	d003      	beq.n	88676 <Cl_Dlsis_ResumeDialysis+0x22a>
   8866e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   88672:	d027      	beq.n	886c4 <Cl_Dlsis_ResumeDialysis+0x278>
   88674:	e037      	b.n	886e6 <Cl_Dlsis_ResumeDialysis+0x29a>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   88676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8867a:	2002      	movs	r0, #2
   8867c:	4b36      	ldr	r3, [pc, #216]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   8867e:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   88680:	f240 5173 	movw	r1, #1395	; 0x573
   88684:	2001      	movs	r0, #1
   88686:	4b34      	ldr	r3, [pc, #208]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   88688:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   8868a:	233e      	movs	r3, #62	; 0x3e
   8868c:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   8868e:	887b      	ldrh	r3, [r7, #2]
   88690:	4618      	mov	r0, r3
   88692:	4b32      	ldr	r3, [pc, #200]	; (8875c <Cl_Dlsis_ResumeDialysis+0x310>)
   88694:	4798      	blx	r3
										break;
   88696:	e037      	b.n	88708 <Cl_Dlsis_ResumeDialysis+0x2bc>
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   88698:	2203      	movs	r2, #3
   8869a:	4931      	ldr	r1, [pc, #196]	; (88760 <Cl_Dlsis_ResumeDialysis+0x314>)
   8869c:	2018      	movs	r0, #24
   8869e:	4b31      	ldr	r3, [pc, #196]	; (88764 <Cl_Dlsis_ResumeDialysis+0x318>)
   886a0:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   886a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   886a6:	2002      	movs	r0, #2
   886a8:	4b2b      	ldr	r3, [pc, #172]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886aa:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   886ac:	f240 414c 	movw	r1, #1100	; 0x44c
   886b0:	2001      	movs	r0, #1
   886b2:	4b29      	ldr	r3, [pc, #164]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886b4:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   886b6:	2344      	movs	r3, #68	; 0x44
   886b8:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   886ba:	887b      	ldrh	r3, [r7, #2]
   886bc:	4618      	mov	r0, r3
   886be:	4b27      	ldr	r3, [pc, #156]	; (8875c <Cl_Dlsis_ResumeDialysis+0x310>)
   886c0:	4798      	blx	r3
										break;
   886c2:	e021      	b.n	88708 <Cl_Dlsis_ResumeDialysis+0x2bc>
// 										potvalue = (2000 * 1024)/10000;
// 										sv_cs_setpotvalue(potvalue);
// 										break;
										
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   886c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   886c8:	2002      	movs	r0, #2
   886ca:	4b23      	ldr	r3, [pc, #140]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886cc:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,640);
   886ce:	f44f 7120 	mov.w	r1, #640	; 0x280
   886d2:	2001      	movs	r0, #1
   886d4:	4b20      	ldr	r3, [pc, #128]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886d6:	4798      	blx	r3
										potvalue = (920 * 1024)/10000;
   886d8:	235e      	movs	r3, #94	; 0x5e
   886da:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   886dc:	887b      	ldrh	r3, [r7, #2]
   886de:	4618      	mov	r0, r3
   886e0:	4b1e      	ldr	r3, [pc, #120]	; (8875c <Cl_Dlsis_ResumeDialysis+0x310>)
   886e2:	4798      	blx	r3
										break;
   886e4:	e010      	b.n	88708 <Cl_Dlsis_ResumeDialysis+0x2bc>
// 										potvalue = (1200 * 1024)/10000;
// 										sv_cs_setpotvalue(potvalue);
// 										break;
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   886e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   886ea:	2002      	movs	r0, #2
   886ec:	4b1a      	ldr	r3, [pc, #104]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886ee:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   886f0:	f240 414c 	movw	r1, #1100	; 0x44c
   886f4:	2001      	movs	r0, #1
   886f6:	4b18      	ldr	r3, [pc, #96]	; (88758 <Cl_Dlsis_ResumeDialysis+0x30c>)
   886f8:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   886fa:	2344      	movs	r3, #68	; 0x44
   886fc:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   886fe:	887b      	ldrh	r3, [r7, #2]
   88700:	4618      	mov	r0, r3
   88702:	4b16      	ldr	r3, [pc, #88]	; (8875c <Cl_Dlsis_ResumeDialysis+0x310>)
   88704:	4798      	blx	r3
										break;
   88706:	bf00      	nop
									}
									bc_flag = 1;
   88708:	4b17      	ldr	r3, [pc, #92]	; (88768 <Cl_Dlsis_ResumeDialysis+0x31c>)
   8870a:	2201      	movs	r2, #1
   8870c:	701a      	strb	r2, [r3, #0]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   8870e:	4b17      	ldr	r3, [pc, #92]	; (8876c <Cl_Dlsis_ResumeDialysis+0x320>)
   88710:	4798      	blx	r3
   88712:	4603      	mov	r3, r0
   88714:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   88716:	4b16      	ldr	r3, [pc, #88]	; (88770 <Cl_Dlsis_ResumeDialysis+0x324>)
   88718:	2202      	movs	r2, #2
   8871a:	701a      	strb	r2, [r3, #0]
									
									return 0;	
   8871c:	2300      	movs	r3, #0
}
   8871e:	4618      	mov	r0, r3
   88720:	3714      	adds	r7, #20
   88722:	46bd      	mov	sp, r7
   88724:	bd90      	pop	{r4, r7, pc}
   88726:	bf00      	nop
   88728:	00082ea1 	.word	0x00082ea1
   8872c:	00082efd 	.word	0x00082efd
   88730:	200709b2 	.word	0x200709b2
   88734:	00096a0d 	.word	0x00096a0d
   88738:	000969c9 	.word	0x000969c9
   8873c:	000967dd 	.word	0x000967dd
   88740:	00083325 	.word	0x00083325
   88744:	00089749 	.word	0x00089749
   88748:	00091c25 	.word	0x00091c25
   8874c:	00091b9d 	.word	0x00091b9d
   88750:	20073138 	.word	0x20073138
   88754:	200720ac 	.word	0x200720ac
   88758:	000968f5 	.word	0x000968f5
   8875c:	00096d29 	.word	0x00096d29
   88760:	000a46f8 	.word	0x000a46f8
   88764:	00098601 	.word	0x00098601
   88768:	200720ab 	.word	0x200720ab
   8876c:	00087079 	.word	0x00087079
   88770:	2007208c 	.word	0x2007208c

00088774 <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   88774:	b580      	push	{r7, lr}
   88776:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   88778:	4b09      	ldr	r3, [pc, #36]	; (887a0 <Cl_Dlsis_safesate+0x2c>)
   8877a:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   8877c:	2100      	movs	r1, #0
   8877e:	2004      	movs	r0, #4
   88780:	4b08      	ldr	r3, [pc, #32]	; (887a4 <Cl_Dlsis_safesate+0x30>)
   88782:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   88784:	2100      	movs	r1, #0
   88786:	2004      	movs	r0, #4
   88788:	4b07      	ldr	r3, [pc, #28]	; (887a8 <Cl_Dlsis_safesate+0x34>)
   8878a:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   8878c:	4b07      	ldr	r3, [pc, #28]	; (887ac <Cl_Dlsis_safesate+0x38>)
   8878e:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   88790:	4b07      	ldr	r3, [pc, #28]	; (887b0 <Cl_Dlsis_safesate+0x3c>)
   88792:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   88794:	4b07      	ldr	r3, [pc, #28]	; (887b4 <Cl_Dlsis_safesate+0x40>)
   88796:	220a      	movs	r2, #10
   88798:	701a      	strb	r2, [r3, #0]
	
	return 0;
   8879a:	2300      	movs	r3, #0
}
   8879c:	4618      	mov	r0, r3
   8879e:	bd80      	pop	{r7, pc}
   887a0:	00096a29 	.word	0x00096a29
   887a4:	00092e89 	.word	0x00092e89
   887a8:	00091c25 	.word	0x00091c25
   887ac:	000969dd 	.word	0x000969dd
   887b0:	0008769d 	.word	0x0008769d
   887b4:	2007208c 	.word	0x2007208c

000887b8 <Cl_Dlsis_recoveredsate>:
Cl_ReturnCodeType	Cl_Dlsis_recoveredsate(void)
{
   887b8:	b580      	push	{r7, lr}
   887ba:	af00      	add	r7, sp, #0
	
	sv_cntrl_disable_bypass();
   887bc:	4b13      	ldr	r3, [pc, #76]	; (8880c <Cl_Dlsis_recoveredsate+0x54>)
   887be:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   887c0:	2100      	movs	r1, #0
   887c2:	2002      	movs	r0, #2
   887c4:	4b12      	ldr	r3, [pc, #72]	; (88810 <Cl_Dlsis_recoveredsate+0x58>)
   887c6:	4798      	blx	r3
	cl_ufpumpFeedback_start();
   887c8:	4b12      	ldr	r3, [pc, #72]	; (88814 <Cl_Dlsis_recoveredsate+0x5c>)
   887ca:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   887cc:	f242 7110 	movw	r1, #10000	; 0x2710
   887d0:	2001      	movs	r0, #1
   887d2:	4b0f      	ldr	r3, [pc, #60]	; (88810 <Cl_Dlsis_recoveredsate+0x58>)
   887d4:	4798      	blx	r3
	cl_wait(100);
   887d6:	2064      	movs	r0, #100	; 0x64
   887d8:	4b0f      	ldr	r3, [pc, #60]	; (88818 <Cl_Dlsis_recoveredsate+0x60>)
   887da:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   887dc:	f241 3188 	movw	r1, #5000	; 0x1388
   887e0:	2001      	movs	r0, #1
   887e2:	4b0b      	ldr	r3, [pc, #44]	; (88810 <Cl_Dlsis_recoveredsate+0x58>)
   887e4:	4798      	blx	r3
	cl_wait(100);
   887e6:	2064      	movs	r0, #100	; 0x64
   887e8:	4b0b      	ldr	r3, [pc, #44]	; (88818 <Cl_Dlsis_recoveredsate+0x60>)
   887ea:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   887ec:	f640 51ac 	movw	r1, #3500	; 0xdac
   887f0:	2001      	movs	r0, #1
   887f2:	4b07      	ldr	r3, [pc, #28]	; (88810 <Cl_Dlsis_recoveredsate+0x58>)
   887f4:	4798      	blx	r3
	cl_wait(100);
   887f6:	2064      	movs	r0, #100	; 0x64
   887f8:	4b07      	ldr	r3, [pc, #28]	; (88818 <Cl_Dlsis_recoveredsate+0x60>)
   887fa:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   887fc:	f640 11c4 	movw	r1, #2500	; 0x9c4
   88800:	2001      	movs	r0, #1
   88802:	4b03      	ldr	r3, [pc, #12]	; (88810 <Cl_Dlsis_recoveredsate+0x58>)
   88804:	4798      	blx	r3
	//sv_cntrl_resetredalarm();
	//sv_cntrl_nobuzzer();
	
	return 0;
   88806:	2300      	movs	r3, #0
}
   88808:	4618      	mov	r0, r3
   8880a:	bd80      	pop	{r7, pc}
   8880c:	00096a51 	.word	0x00096a51
   88810:	00092e89 	.word	0x00092e89
   88814:	00092c4d 	.word	0x00092c4d
   88818:	00091b9d 	.word	0x00091b9d

0008881c <cl_temp_safestate>:
Cl_ReturnCodeType cl_temp_safestate(void)
{
   8881c:	b580      	push	{r7, lr}
   8881e:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   88820:	2206      	movs	r2, #6
   88822:	490a      	ldr	r1, [pc, #40]	; (8884c <cl_temp_safestate+0x30>)
   88824:	2018      	movs	r0, #24
   88826:	4b0a      	ldr	r3, [pc, #40]	; (88850 <cl_temp_safestate+0x34>)
   88828:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   8882a:	4b0a      	ldr	r3, [pc, #40]	; (88854 <cl_temp_safestate+0x38>)
   8882c:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   8882e:	2100      	movs	r1, #0
   88830:	2004      	movs	r0, #4
   88832:	4b09      	ldr	r3, [pc, #36]	; (88858 <cl_temp_safestate+0x3c>)
   88834:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   88836:	4b09      	ldr	r3, [pc, #36]	; (8885c <cl_temp_safestate+0x40>)
   88838:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   8883a:	4b09      	ldr	r3, [pc, #36]	; (88860 <cl_temp_safestate+0x44>)
   8883c:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8883e:	4b09      	ldr	r3, [pc, #36]	; (88864 <cl_temp_safestate+0x48>)
   88840:	220a      	movs	r2, #10
   88842:	701a      	strb	r2, [r3, #0]
	return 0;
   88844:	2300      	movs	r3, #0
}
   88846:	4618      	mov	r0, r3
   88848:	bd80      	pop	{r7, pc}
   8884a:	bf00      	nop
   8884c:	000a46fc 	.word	0x000a46fc
   88850:	00098601 	.word	0x00098601
   88854:	00096a29 	.word	0x00096a29
   88858:	00092e89 	.word	0x00092e89
   8885c:	000969dd 	.word	0x000969dd
   88860:	0008769d 	.word	0x0008769d
   88864:	2007208c 	.word	0x2007208c

00088868 <cl_temp_recoveredstate>:
Cl_ReturnCodeType cl_temp_recoveredstate(void)
{
   88868:	b580      	push	{r7, lr}
   8886a:	af00      	add	r7, sp, #0
	sv_cntrl_disable_bypass();
   8886c:	4b13      	ldr	r3, [pc, #76]	; (888bc <cl_temp_recoveredstate+0x54>)
   8886e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   88870:	2100      	movs	r1, #0
   88872:	2002      	movs	r0, #2
   88874:	4b12      	ldr	r3, [pc, #72]	; (888c0 <cl_temp_recoveredstate+0x58>)
   88876:	4798      	blx	r3
	cl_ufpumpFeedback_start();
   88878:	4b12      	ldr	r3, [pc, #72]	; (888c4 <cl_temp_recoveredstate+0x5c>)
   8887a:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   8887c:	f242 7110 	movw	r1, #10000	; 0x2710
   88880:	2001      	movs	r0, #1
   88882:	4b0f      	ldr	r3, [pc, #60]	; (888c0 <cl_temp_recoveredstate+0x58>)
   88884:	4798      	blx	r3
	cl_wait(100);
   88886:	2064      	movs	r0, #100	; 0x64
   88888:	4b0f      	ldr	r3, [pc, #60]	; (888c8 <cl_temp_recoveredstate+0x60>)
   8888a:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   8888c:	f241 3188 	movw	r1, #5000	; 0x1388
   88890:	2001      	movs	r0, #1
   88892:	4b0b      	ldr	r3, [pc, #44]	; (888c0 <cl_temp_recoveredstate+0x58>)
   88894:	4798      	blx	r3
	cl_wait(100);
   88896:	2064      	movs	r0, #100	; 0x64
   88898:	4b0b      	ldr	r3, [pc, #44]	; (888c8 <cl_temp_recoveredstate+0x60>)
   8889a:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   8889c:	f640 51ac 	movw	r1, #3500	; 0xdac
   888a0:	2001      	movs	r0, #1
   888a2:	4b07      	ldr	r3, [pc, #28]	; (888c0 <cl_temp_recoveredstate+0x58>)
   888a4:	4798      	blx	r3
	cl_wait(100);
   888a6:	2064      	movs	r0, #100	; 0x64
   888a8:	4b07      	ldr	r3, [pc, #28]	; (888c8 <cl_temp_recoveredstate+0x60>)
   888aa:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   888ac:	f640 11c4 	movw	r1, #2500	; 0x9c4
   888b0:	2001      	movs	r0, #1
   888b2:	4b03      	ldr	r3, [pc, #12]	; (888c0 <cl_temp_recoveredstate+0x58>)
   888b4:	4798      	blx	r3
	return 0;
   888b6:	2300      	movs	r3, #0
}
   888b8:	4618      	mov	r0, r3
   888ba:	bd80      	pop	{r7, pc}
   888bc:	00096a51 	.word	0x00096a51
   888c0:	00092e89 	.word	0x00092e89
   888c4:	00092c4d 	.word	0x00092c4d
   888c8:	00091b9d 	.word	0x00091b9d

000888cc <cl_cond_safestate>:

Cl_ReturnCodeType cl_cond_safestate(void)
{
   888cc:	b580      	push	{r7, lr}
   888ce:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	Cl_Dlsis_BypassDialysis();
   888d0:	4b03      	ldr	r3, [pc, #12]	; (888e0 <cl_cond_safestate+0x14>)
   888d2:	4798      	blx	r3
	//sv_cntrl_deactivatepump(DCMOTOR1);
	//sv_cntrl_deactivatepump(DCMOTOR2);
	
	//sv_cntrl_setflowpath(FLOW_PATH_BC_ALARM);
	//SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   888d4:	4b03      	ldr	r3, [pc, #12]	; (888e4 <cl_cond_safestate+0x18>)
   888d6:	220a      	movs	r2, #10
   888d8:	701a      	strb	r2, [r3, #0]
	return 0;
   888da:	2300      	movs	r3, #0
}
   888dc:	4618      	mov	r0, r3
   888de:	bd80      	pop	{r7, pc}
   888e0:	0008769d 	.word	0x0008769d
   888e4:	2007208c 	.word	0x2007208c

000888e8 <cl_cond_recoveredstate>:

Cl_ReturnCodeType cl_cond_recoveredstate(void)
{
   888e8:	b580      	push	{r7, lr}
   888ea:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	sv_cntrl_activate_valve(VALVE_ID13);
   888ec:	200d      	movs	r0, #13
   888ee:	4b08      	ldr	r3, [pc, #32]	; (88910 <cl_cond_recoveredstate+0x28>)
   888f0:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR1);
   888f2:	2001      	movs	r0, #1
   888f4:	4b07      	ldr	r3, [pc, #28]	; (88914 <cl_cond_recoveredstate+0x2c>)
   888f6:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   888f8:	2002      	movs	r0, #2
   888fa:	4b06      	ldr	r3, [pc, #24]	; (88914 <cl_cond_recoveredstate+0x2c>)
   888fc:	4798      	blx	r3
	Cl_bc_controller(BC_EVENT_RESUME);
   888fe:	200b      	movs	r0, #11
   88900:	4b05      	ldr	r3, [pc, #20]	; (88918 <cl_cond_recoveredstate+0x30>)
   88902:	4798      	blx	r3
	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
   88904:	2006      	movs	r0, #6
   88906:	4b05      	ldr	r3, [pc, #20]	; (8891c <cl_cond_recoveredstate+0x34>)
   88908:	4798      	blx	r3
	return 0;
   8890a:	2300      	movs	r3, #0
}
   8890c:	4618      	mov	r0, r3
   8890e:	bd80      	pop	{r7, pc}
   88910:	0009687d 	.word	0x0009687d
   88914:	000967dd 	.word	0x000967dd
   88918:	00083325 	.word	0x00083325
   8891c:	00089749 	.word	0x00089749

00088920 <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   88920:	b480      	push	{r7}
   88922:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   88924:	4b0b      	ldr	r3, [pc, #44]	; (88954 <cl_dprep_primeInit+0x34>)
   88926:	2200      	movs	r2, #0
   88928:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   8892a:	4b0b      	ldr	r3, [pc, #44]	; (88958 <cl_dprep_primeInit+0x38>)
   8892c:	2200      	movs	r2, #0
   8892e:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   88930:	4b0a      	ldr	r3, [pc, #40]	; (8895c <cl_dprep_primeInit+0x3c>)
   88932:	2200      	movs	r2, #0
   88934:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   88936:	4b0a      	ldr	r3, [pc, #40]	; (88960 <cl_dprep_primeInit+0x40>)
   88938:	2200      	movs	r2, #0
   8893a:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   8893c:	4b09      	ldr	r3, [pc, #36]	; (88964 <cl_dprep_primeInit+0x44>)
   8893e:	2200      	movs	r2, #0
   88940:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   88942:	4b09      	ldr	r3, [pc, #36]	; (88968 <cl_dprep_primeInit+0x48>)
   88944:	2200      	movs	r2, #0
   88946:	701a      	strb	r2, [r3, #0]
	
}
   88948:	bf00      	nop
   8894a:	4618      	mov	r0, r3
   8894c:	46bd      	mov	sp, r7
   8894e:	bc80      	pop	{r7}
   88950:	4770      	bx	lr
   88952:	bf00      	nop
   88954:	200720ec 	.word	0x200720ec
   88958:	200720ed 	.word	0x200720ed
   8895c:	200720ee 	.word	0x200720ee
   88960:	200720ef 	.word	0x200720ef
   88964:	200720f0 	.word	0x200720f0
   88968:	200720f1 	.word	0x200720f1

0008896c <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   8896c:	b580      	push	{r7, lr}
   8896e:	b084      	sub	sp, #16
   88970:	af00      	add	r7, sp, #0
   88972:	4603      	mov	r3, r0
   88974:	460a      	mov	r2, r1
   88976:	71fb      	strb	r3, [r7, #7]
   88978:	4613      	mov	r3, r2
   8897a:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   8897c:	2304      	movs	r3, #4
   8897e:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   88980:	79fb      	ldrb	r3, [r7, #7]
   88982:	2b0b      	cmp	r3, #11
   88984:	d103      	bne.n	8898e <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   88986:	4bbc      	ldr	r3, [pc, #752]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88988:	781a      	ldrb	r2, [r3, #0]
   8898a:	4bbc      	ldr	r3, [pc, #752]	; (88c7c <cl_dprep_primecontroller+0x310>)
   8898c:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   8898e:	4bba      	ldr	r3, [pc, #744]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88990:	781b      	ldrb	r3, [r3, #0]
   88992:	2b0c      	cmp	r3, #12
   88994:	f200 849d 	bhi.w	892d2 <cl_dprep_primecontroller+0x966>
   88998:	a201      	add	r2, pc, #4	; (adr r2, 889a0 <cl_dprep_primecontroller+0x34>)
   8899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8899e:	bf00      	nop
   889a0:	000889d5 	.word	0x000889d5
   889a4:	00088a39 	.word	0x00088a39
   889a8:	00088ce5 	.word	0x00088ce5
   889ac:	00088b49 	.word	0x00088b49
   889b0:	00088bf9 	.word	0x00088bf9
   889b4:	00088e07 	.word	0x00088e07
   889b8:	00088f0b 	.word	0x00088f0b
   889bc:	000892d3 	.word	0x000892d3
   889c0:	00088f79 	.word	0x00088f79
   889c4:	0008909b 	.word	0x0008909b
   889c8:	000892d3 	.word	0x000892d3
   889cc:	0008918b 	.word	0x0008918b
   889d0:	00089209 	.word	0x00089209
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   889d4:	79fb      	ldrb	r3, [r7, #7]
   889d6:	2b01      	cmp	r3, #1
   889d8:	d009      	beq.n	889ee <cl_dprep_primecontroller+0x82>
   889da:	2b0e      	cmp	r3, #14
   889dc:	d000      	beq.n	889e0 <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   889de:	e029      	b.n	88a34 <cl_dprep_primecontroller+0xc8>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   889e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   889e4:	4619      	mov	r1, r3
   889e6:	2001      	movs	r0, #1
   889e8:	4ba5      	ldr	r3, [pc, #660]	; (88c80 <cl_dprep_primecontroller+0x314>)
   889ea:	4798      	blx	r3
					break;
   889ec:	e022      	b.n	88a34 <cl_dprep_primecontroller+0xc8>
					case CL_DPREP_PRIME_PRIME_START:
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   889ee:	2206      	movs	r2, #6
   889f0:	49a4      	ldr	r1, [pc, #656]	; (88c84 <cl_dprep_primecontroller+0x318>)
   889f2:	2018      	movs	r0, #24
   889f4:	4ba4      	ldr	r3, [pc, #656]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   889f6:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   889f8:	4ba4      	ldr	r3, [pc, #656]	; (88c8c <cl_dprep_primecontroller+0x320>)
   889fa:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   889fc:	2100      	movs	r1, #0
   889fe:	2002      	movs	r0, #2
   88a00:	4b9f      	ldr	r3, [pc, #636]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88a02:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88a04:	1d3b      	adds	r3, r7, #4
   88a06:	2200      	movs	r2, #0
   88a08:	4619      	mov	r1, r3
   88a0a:	200d      	movs	r0, #13
   88a0c:	4b9e      	ldr	r3, [pc, #632]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88a0e:	4798      	blx	r3
   88a10:	4603      	mov	r3, r0
   88a12:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88a14:	1d3b      	adds	r3, r7, #4
   88a16:	2200      	movs	r2, #0
   88a18:	4619      	mov	r1, r3
   88a1a:	2024      	movs	r0, #36	; 0x24
   88a1c:	4b9a      	ldr	r3, [pc, #616]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88a1e:	4798      	blx	r3
   88a20:	4603      	mov	r3, r0
   88a22:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88a24:	4b9a      	ldr	r3, [pc, #616]	; (88c90 <cl_dprep_primecontroller+0x324>)
   88a26:	4798      	blx	r3
   88a28:	4603      	mov	r3, r0
   88a2a:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88a2c:	4b92      	ldr	r3, [pc, #584]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88a2e:	2201      	movs	r2, #1
   88a30:	701a      	strb	r2, [r3, #0]
					break;
   88a32:	bf00      	nop
					default:break;
				}
			break;
   88a34:	f000 bc4d 	b.w	892d2 <cl_dprep_primecontroller+0x966>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   88a38:	79fb      	ldrb	r3, [r7, #7]
   88a3a:	3b02      	subs	r3, #2
   88a3c:	2b0c      	cmp	r3, #12
   88a3e:	d87f      	bhi.n	88b40 <cl_dprep_primecontroller+0x1d4>
   88a40:	a201      	add	r2, pc, #4	; (adr r2, 88a48 <cl_dprep_primecontroller+0xdc>)
   88a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88a46:	bf00      	nop
   88a48:	00088aef 	.word	0x00088aef
   88a4c:	00088a7d 	.word	0x00088a7d
   88a50:	00088b0f 	.word	0x00088b0f
   88a54:	00088b41 	.word	0x00088b41
   88a58:	00088b41 	.word	0x00088b41
   88a5c:	00088b41 	.word	0x00088b41
   88a60:	00088b41 	.word	0x00088b41
   88a64:	00088b41 	.word	0x00088b41
   88a68:	00088b41 	.word	0x00088b41
   88a6c:	00088a85 	.word	0x00088a85
   88a70:	00088b1f 	.word	0x00088b1f
   88a74:	00088b29 	.word	0x00088b29
   88a78:	00088b33 	.word	0x00088b33
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88a7c:	4b7e      	ldr	r3, [pc, #504]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88a7e:	2203      	movs	r2, #3
   88a80:	701a      	strb	r2, [r3, #0]
					break;
   88a82:	e060      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   88a84:	2002      	movs	r0, #2
   88a86:	4b83      	ldr	r3, [pc, #524]	; (88c94 <cl_dprep_primecontroller+0x328>)
   88a88:	4798      	blx	r3
   88a8a:	4603      	mov	r3, r0
   88a8c:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   88a8e:	4b82      	ldr	r3, [pc, #520]	; (88c98 <cl_dprep_primecontroller+0x32c>)
   88a90:	f993 3000 	ldrsb.w	r3, [r3]
   88a94:	b2da      	uxtb	r2, r3
   88a96:	3201      	adds	r2, #1
   88a98:	b2d2      	uxtb	r2, r2
   88a9a:	b251      	sxtb	r1, r2
   88a9c:	4a7e      	ldr	r2, [pc, #504]	; (88c98 <cl_dprep_primecontroller+0x32c>)
   88a9e:	7011      	strb	r1, [r2, #0]
   88aa0:	2b3b      	cmp	r3, #59	; 0x3b
   88aa2:	dd0f      	ble.n	88ac4 <cl_dprep_primecontroller+0x158>
					{
						cl_prime_sec = 0;
   88aa4:	4b7c      	ldr	r3, [pc, #496]	; (88c98 <cl_dprep_primecontroller+0x32c>)
   88aa6:	2200      	movs	r2, #0
   88aa8:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   88aaa:	4b7c      	ldr	r3, [pc, #496]	; (88c9c <cl_dprep_primecontroller+0x330>)
   88aac:	f993 3000 	ldrsb.w	r3, [r3]
   88ab0:	b2db      	uxtb	r3, r3
   88ab2:	3301      	adds	r3, #1
   88ab4:	b2db      	uxtb	r3, r3
   88ab6:	b25a      	sxtb	r2, r3
   88ab8:	4b78      	ldr	r3, [pc, #480]	; (88c9c <cl_dprep_primecontroller+0x330>)
   88aba:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88abc:	4b74      	ldr	r3, [pc, #464]	; (88c90 <cl_dprep_primecontroller+0x324>)
   88abe:	4798      	blx	r3
   88ac0:	4603      	mov	r3, r0
   88ac2:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88ac4:	4b75      	ldr	r3, [pc, #468]	; (88c9c <cl_dprep_primecontroller+0x330>)
   88ac6:	f993 3000 	ldrsb.w	r3, [r3]
   88aca:	2b00      	cmp	r3, #0
   88acc:	dd3a      	ble.n	88b44 <cl_dprep_primecontroller+0x1d8>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88ace:	2100      	movs	r1, #0
   88ad0:	2004      	movs	r0, #4
   88ad2:	4b6b      	ldr	r3, [pc, #428]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88ad4:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   88ad6:	1d3b      	adds	r3, r7, #4
   88ad8:	2200      	movs	r2, #0
   88ada:	4619      	mov	r1, r3
   88adc:	200f      	movs	r0, #15
   88ade:	4b6a      	ldr	r3, [pc, #424]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88ae0:	4798      	blx	r3
   88ae2:	4603      	mov	r3, r0
   88ae4:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   88ae6:	4b64      	ldr	r3, [pc, #400]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88ae8:	2202      	movs	r2, #2
   88aea:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   88aec:	e02a      	b.n	88b44 <cl_dprep_primecontroller+0x1d8>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   88aee:	2100      	movs	r1, #0
   88af0:	2004      	movs	r0, #4
   88af2:	4b63      	ldr	r3, [pc, #396]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88af4:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88af6:	1d3b      	adds	r3, r7, #4
   88af8:	2200      	movs	r2, #0
   88afa:	4619      	mov	r1, r3
   88afc:	2023      	movs	r0, #35	; 0x23
   88afe:	4b62      	ldr	r3, [pc, #392]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88b00:	4798      	blx	r3
   88b02:	4603      	mov	r3, r0
   88b04:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88b06:	4b5c      	ldr	r3, [pc, #368]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88b08:	2203      	movs	r2, #3
   88b0a:	701a      	strb	r2, [r3, #0]
					break;
   88b0c:	e01b      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   88b0e:	2100      	movs	r1, #0
   88b10:	2004      	movs	r0, #4
   88b12:	4b5b      	ldr	r3, [pc, #364]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88b14:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88b16:	4b58      	ldr	r3, [pc, #352]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88b18:	2204      	movs	r2, #4
   88b1a:	701a      	strb	r2, [r3, #0]
					break;
   88b1c:	e013      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   88b1e:	2100      	movs	r1, #0
   88b20:	2002      	movs	r0, #2
   88b22:	4b57      	ldr	r3, [pc, #348]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88b24:	4798      	blx	r3
					break;
   88b26:	e00e      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88b28:	2100      	movs	r1, #0
   88b2a:	2004      	movs	r0, #4
   88b2c:	4b54      	ldr	r3, [pc, #336]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88b2e:	4798      	blx	r3
					break;
   88b30:	e009      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88b32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88b36:	4619      	mov	r1, r3
   88b38:	2001      	movs	r0, #1
   88b3a:	4b51      	ldr	r3, [pc, #324]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88b3c:	4798      	blx	r3
					break;
   88b3e:	e002      	b.n	88b46 <cl_dprep_primecontroller+0x1da>
					default:break;
   88b40:	bf00      	nop
   88b42:	e3c6      	b.n	892d2 <cl_dprep_primecontroller+0x966>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   88b44:	bf00      	nop
					break;
					default:break;
				}

			
			break;
   88b46:	e3c4      	b.n	892d2 <cl_dprep_primecontroller+0x966>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   88b48:	79fb      	ldrb	r3, [r7, #7]
   88b4a:	3b01      	subs	r3, #1
   88b4c:	2b0d      	cmp	r3, #13
   88b4e:	f200 839b 	bhi.w	89288 <cl_dprep_primecontroller+0x91c>
   88b52:	a201      	add	r2, pc, #4	; (adr r2, 88b58 <cl_dprep_primecontroller+0x1ec>)
   88b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88b58:	00088b91 	.word	0x00088b91
   88b5c:	00089289 	.word	0x00089289
   88b60:	00089289 	.word	0x00089289
   88b64:	00089289 	.word	0x00089289
   88b68:	00089289 	.word	0x00089289
   88b6c:	00089289 	.word	0x00089289
   88b70:	00089289 	.word	0x00089289
   88b74:	00089289 	.word	0x00089289
   88b78:	00089289 	.word	0x00089289
   88b7c:	00089289 	.word	0x00089289
   88b80:	00089289 	.word	0x00089289
   88b84:	00088bd5 	.word	0x00088bd5
   88b88:	00088bdf 	.word	0x00088bdf
   88b8c:	00088be9 	.word	0x00088be9
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   88b90:	2100      	movs	r1, #0
   88b92:	2002      	movs	r0, #2
   88b94:	4b3a      	ldr	r3, [pc, #232]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88b96:	4798      	blx	r3
								cl_prime_min = 0;
   88b98:	4b40      	ldr	r3, [pc, #256]	; (88c9c <cl_dprep_primecontroller+0x330>)
   88b9a:	2200      	movs	r2, #0
   88b9c:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   88b9e:	4b3e      	ldr	r3, [pc, #248]	; (88c98 <cl_dprep_primecontroller+0x32c>)
   88ba0:	2200      	movs	r2, #0
   88ba2:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88ba4:	1d3b      	adds	r3, r7, #4
   88ba6:	2200      	movs	r2, #0
   88ba8:	4619      	mov	r1, r3
   88baa:	200d      	movs	r0, #13
   88bac:	4b36      	ldr	r3, [pc, #216]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88bae:	4798      	blx	r3
   88bb0:	4603      	mov	r3, r0
   88bb2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88bb4:	1d3b      	adds	r3, r7, #4
   88bb6:	2200      	movs	r2, #0
   88bb8:	4619      	mov	r1, r3
   88bba:	2024      	movs	r0, #36	; 0x24
   88bbc:	4b32      	ldr	r3, [pc, #200]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88bbe:	4798      	blx	r3
   88bc0:	4603      	mov	r3, r0
   88bc2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88bc4:	4b32      	ldr	r3, [pc, #200]	; (88c90 <cl_dprep_primecontroller+0x324>)
   88bc6:	4798      	blx	r3
   88bc8:	4603      	mov	r3, r0
   88bca:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88bcc:	4b2a      	ldr	r3, [pc, #168]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88bce:	2201      	movs	r2, #1
   88bd0:	701a      	strb	r2, [r3, #0]
							break;
   88bd2:	e010      	b.n	88bf6 <cl_dprep_primecontroller+0x28a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88bd4:	2100      	movs	r1, #0
   88bd6:	2002      	movs	r0, #2
   88bd8:	4b29      	ldr	r3, [pc, #164]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88bda:	4798      	blx	r3
							break;
   88bdc:	e00b      	b.n	88bf6 <cl_dprep_primecontroller+0x28a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88bde:	2100      	movs	r1, #0
   88be0:	2004      	movs	r0, #4
   88be2:	4b27      	ldr	r3, [pc, #156]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88be4:	4798      	blx	r3
							break;
   88be6:	e006      	b.n	88bf6 <cl_dprep_primecontroller+0x28a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88be8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88bec:	4619      	mov	r1, r3
   88bee:	2001      	movs	r0, #1
   88bf0:	4b23      	ldr	r3, [pc, #140]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88bf2:	4798      	blx	r3
							break;
   88bf4:	bf00      	nop
						}
			break;
   88bf6:	e347      	b.n	89288 <cl_dprep_primecontroller+0x91c>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   88bf8:	79fb      	ldrb	r3, [r7, #7]
   88bfa:	3b01      	subs	r3, #1
   88bfc:	2b0d      	cmp	r3, #13
   88bfe:	f200 8345 	bhi.w	8928c <cl_dprep_primecontroller+0x920>
   88c02:	a201      	add	r2, pc, #4	; (adr r2, 88c08 <cl_dprep_primecontroller+0x29c>)
   88c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88c08:	00088c41 	.word	0x00088c41
   88c0c:	00088ca1 	.word	0x00088ca1
   88c10:	0008928d 	.word	0x0008928d
   88c14:	0008928d 	.word	0x0008928d
   88c18:	0008928d 	.word	0x0008928d
   88c1c:	0008928d 	.word	0x0008928d
   88c20:	0008928d 	.word	0x0008928d
   88c24:	0008928d 	.word	0x0008928d
   88c28:	0008928d 	.word	0x0008928d
   88c2c:	0008928d 	.word	0x0008928d
   88c30:	0008928d 	.word	0x0008928d
   88c34:	00088cc1 	.word	0x00088cc1
   88c38:	00088ccb 	.word	0x00088ccb
   88c3c:	00088cd5 	.word	0x00088cd5
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   88c40:	2100      	movs	r1, #0
   88c42:	2002      	movs	r0, #2
   88c44:	4b0e      	ldr	r3, [pc, #56]	; (88c80 <cl_dprep_primecontroller+0x314>)
   88c46:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88c48:	1d3b      	adds	r3, r7, #4
   88c4a:	2200      	movs	r2, #0
   88c4c:	4619      	mov	r1, r3
   88c4e:	200d      	movs	r0, #13
   88c50:	4b0d      	ldr	r3, [pc, #52]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88c52:	4798      	blx	r3
   88c54:	4603      	mov	r3, r0
   88c56:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88c58:	1d3b      	adds	r3, r7, #4
   88c5a:	2200      	movs	r2, #0
   88c5c:	4619      	mov	r1, r3
   88c5e:	2024      	movs	r0, #36	; 0x24
   88c60:	4b09      	ldr	r3, [pc, #36]	; (88c88 <cl_dprep_primecontroller+0x31c>)
   88c62:	4798      	blx	r3
   88c64:	4603      	mov	r3, r0
   88c66:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88c68:	4b09      	ldr	r3, [pc, #36]	; (88c90 <cl_dprep_primecontroller+0x324>)
   88c6a:	4798      	blx	r3
   88c6c:	4603      	mov	r3, r0
   88c6e:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88c70:	4b01      	ldr	r3, [pc, #4]	; (88c78 <cl_dprep_primecontroller+0x30c>)
   88c72:	2201      	movs	r2, #1
   88c74:	701a      	strb	r2, [r3, #0]
							break;
   88c76:	e034      	b.n	88ce2 <cl_dprep_primecontroller+0x376>
   88c78:	200720ec 	.word	0x200720ec
   88c7c:	20073130 	.word	0x20073130
   88c80:	00091c25 	.word	0x00091c25
   88c84:	000a4704 	.word	0x000a4704
   88c88:	00098601 	.word	0x00098601
   88c8c:	00096a51 	.word	0x00096a51
   88c90:	000892dd 	.word	0x000892dd
   88c94:	0009ce59 	.word	0x0009ce59
   88c98:	200720ee 	.word	0x200720ee
   88c9c:	200720ef 	.word	0x200720ef
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88ca0:	2100      	movs	r1, #0
   88ca2:	2004      	movs	r0, #4
   88ca4:	4bab      	ldr	r3, [pc, #684]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88ca6:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88ca8:	1d3b      	adds	r3, r7, #4
   88caa:	2200      	movs	r2, #0
   88cac:	4619      	mov	r1, r3
   88cae:	2023      	movs	r0, #35	; 0x23
   88cb0:	4ba9      	ldr	r3, [pc, #676]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88cb2:	4798      	blx	r3
   88cb4:	4603      	mov	r3, r0
   88cb6:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88cb8:	4ba8      	ldr	r3, [pc, #672]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88cba:	2203      	movs	r2, #3
   88cbc:	701a      	strb	r2, [r3, #0]
							break;
   88cbe:	e010      	b.n	88ce2 <cl_dprep_primecontroller+0x376>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88cc0:	2100      	movs	r1, #0
   88cc2:	2002      	movs	r0, #2
   88cc4:	4ba3      	ldr	r3, [pc, #652]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88cc6:	4798      	blx	r3
							break;
   88cc8:	e00b      	b.n	88ce2 <cl_dprep_primecontroller+0x376>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88cca:	2100      	movs	r1, #0
   88ccc:	2004      	movs	r0, #4
   88cce:	4ba1      	ldr	r3, [pc, #644]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88cd0:	4798      	blx	r3
							break;
   88cd2:	e006      	b.n	88ce2 <cl_dprep_primecontroller+0x376>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88cd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88cd8:	4619      	mov	r1, r3
   88cda:	2001      	movs	r0, #1
   88cdc:	4b9d      	ldr	r3, [pc, #628]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88cde:	4798      	blx	r3
							break;
   88ce0:	bf00      	nop
						}
			break;
   88ce2:	e2d3      	b.n	8928c <cl_dprep_primecontroller+0x920>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   88ce4:	79fb      	ldrb	r3, [r7, #7]
   88ce6:	3b01      	subs	r3, #1
   88ce8:	2b0d      	cmp	r3, #13
   88cea:	f200 82d1 	bhi.w	89290 <cl_dprep_primecontroller+0x924>
   88cee:	a201      	add	r2, pc, #4	; (adr r2, 88cf4 <cl_dprep_primecontroller+0x388>)
   88cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88cf4:	00088d6b 	.word	0x00088d6b
   88cf8:	00089291 	.word	0x00089291
   88cfc:	00089291 	.word	0x00089291
   88d00:	00089291 	.word	0x00089291
   88d04:	00088d2d 	.word	0x00088d2d
   88d08:	00088e03 	.word	0x00088e03
   88d0c:	00089291 	.word	0x00089291
   88d10:	00088db9 	.word	0x00088db9
   88d14:	00089291 	.word	0x00089291
   88d18:	00089291 	.word	0x00089291
   88d1c:	00089291 	.word	0x00089291
   88d20:	00088de1 	.word	0x00088de1
   88d24:	00088deb 	.word	0x00088deb
   88d28:	00088df5 	.word	0x00088df5
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88d2c:	2206      	movs	r2, #6
   88d2e:	498c      	ldr	r1, [pc, #560]	; (88f60 <cl_dprep_primecontroller+0x5f4>)
   88d30:	2018      	movs	r0, #24
   88d32:	4b89      	ldr	r3, [pc, #548]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88d34:	4798      	blx	r3
							cl_prime_min =  0;
   88d36:	4b8b      	ldr	r3, [pc, #556]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88d38:	2200      	movs	r2, #0
   88d3a:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88d3c:	4b8a      	ldr	r3, [pc, #552]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88d3e:	2200      	movs	r2, #0
   88d40:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88d42:	2100      	movs	r1, #0
   88d44:	2002      	movs	r0, #2
   88d46:	4b83      	ldr	r3, [pc, #524]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88d48:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88d4a:	1d3b      	adds	r3, r7, #4
   88d4c:	2200      	movs	r2, #0
   88d4e:	4619      	mov	r1, r3
   88d50:	202f      	movs	r0, #47	; 0x2f
   88d52:	4b81      	ldr	r3, [pc, #516]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88d54:	4798      	blx	r3
   88d56:	4603      	mov	r3, r0
   88d58:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88d5a:	4b84      	ldr	r3, [pc, #528]	; (88f6c <cl_dprep_primecontroller+0x600>)
   88d5c:	4798      	blx	r3
   88d5e:	4603      	mov	r3, r0
   88d60:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88d62:	4b7e      	ldr	r3, [pc, #504]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88d64:	2205      	movs	r2, #5
   88d66:	701a      	strb	r2, [r3, #0]
							break;
   88d68:	e04c      	b.n	88e04 <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88d6a:	2206      	movs	r2, #6
   88d6c:	4980      	ldr	r1, [pc, #512]	; (88f70 <cl_dprep_primecontroller+0x604>)
   88d6e:	2018      	movs	r0, #24
   88d70:	4b79      	ldr	r3, [pc, #484]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88d72:	4798      	blx	r3
							cl_prime_min =  0;
   88d74:	4b7b      	ldr	r3, [pc, #492]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88d76:	2200      	movs	r2, #0
   88d78:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88d7a:	4b7b      	ldr	r3, [pc, #492]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88d7c:	2200      	movs	r2, #0
   88d7e:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88d80:	2100      	movs	r1, #0
   88d82:	2002      	movs	r0, #2
   88d84:	4b73      	ldr	r3, [pc, #460]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88d86:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88d88:	1d3b      	adds	r3, r7, #4
   88d8a:	2200      	movs	r2, #0
   88d8c:	4619      	mov	r1, r3
   88d8e:	200d      	movs	r0, #13
   88d90:	4b71      	ldr	r3, [pc, #452]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88d92:	4798      	blx	r3
   88d94:	4603      	mov	r3, r0
   88d96:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88d98:	1d3b      	adds	r3, r7, #4
   88d9a:	2200      	movs	r2, #0
   88d9c:	4619      	mov	r1, r3
   88d9e:	2024      	movs	r0, #36	; 0x24
   88da0:	4b6d      	ldr	r3, [pc, #436]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88da2:	4798      	blx	r3
   88da4:	4603      	mov	r3, r0
   88da6:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88da8:	4b70      	ldr	r3, [pc, #448]	; (88f6c <cl_dprep_primecontroller+0x600>)
   88daa:	4798      	blx	r3
   88dac:	4603      	mov	r3, r0
   88dae:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88db0:	4b6a      	ldr	r3, [pc, #424]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88db2:	2201      	movs	r2, #1
   88db4:	701a      	strb	r2, [r3, #0]
							break;
   88db6:	e025      	b.n	88e04 <cl_dprep_primecontroller+0x498>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88db8:	2100      	movs	r1, #0
   88dba:	2002      	movs	r0, #2
   88dbc:	4b65      	ldr	r3, [pc, #404]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88dbe:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88dc0:	1d3b      	adds	r3, r7, #4
   88dc2:	2200      	movs	r2, #0
   88dc4:	4619      	mov	r1, r3
   88dc6:	2028      	movs	r0, #40	; 0x28
   88dc8:	4b63      	ldr	r3, [pc, #396]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88dca:	4798      	blx	r3
   88dcc:	4603      	mov	r3, r0
   88dce:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88dd0:	4b68      	ldr	r3, [pc, #416]	; (88f74 <cl_dprep_primecontroller+0x608>)
   88dd2:	4798      	blx	r3
   88dd4:	4603      	mov	r3, r0
   88dd6:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88dd8:	4b60      	ldr	r3, [pc, #384]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88dda:	2209      	movs	r2, #9
   88ddc:	701a      	strb	r2, [r3, #0]
							break;
   88dde:	e011      	b.n	88e04 <cl_dprep_primecontroller+0x498>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88de0:	2100      	movs	r1, #0
   88de2:	2002      	movs	r0, #2
   88de4:	4b5b      	ldr	r3, [pc, #364]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88de6:	4798      	blx	r3
							break;
   88de8:	e00c      	b.n	88e04 <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88dea:	2100      	movs	r1, #0
   88dec:	2004      	movs	r0, #4
   88dee:	4b59      	ldr	r3, [pc, #356]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88df0:	4798      	blx	r3
							break;
   88df2:	e007      	b.n	88e04 <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88df4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88df8:	4619      	mov	r1, r3
   88dfa:	2001      	movs	r0, #1
   88dfc:	4b55      	ldr	r3, [pc, #340]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88dfe:	4798      	blx	r3
							break;
   88e00:	e000      	b.n	88e04 <cl_dprep_primecontroller+0x498>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   88e02:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88e04:	e244      	b.n	89290 <cl_dprep_primecontroller+0x924>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   88e06:	79fb      	ldrb	r3, [r7, #7]
   88e08:	3b02      	subs	r3, #2
   88e0a:	2b0c      	cmp	r3, #12
   88e0c:	d879      	bhi.n	88f02 <cl_dprep_primecontroller+0x596>
   88e0e:	a201      	add	r2, pc, #4	; (adr r2, 88e14 <cl_dprep_primecontroller+0x4a8>)
   88e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88e14:	00088eb1 	.word	0x00088eb1
   88e18:	00088e49 	.word	0x00088e49
   88e1c:	00088ed1 	.word	0x00088ed1
   88e20:	00088f03 	.word	0x00088f03
   88e24:	00088f03 	.word	0x00088f03
   88e28:	00088f03 	.word	0x00088f03
   88e2c:	00088f03 	.word	0x00088f03
   88e30:	00088f03 	.word	0x00088f03
   88e34:	00088f03 	.word	0x00088f03
   88e38:	00088e51 	.word	0x00088e51
   88e3c:	00088ee1 	.word	0x00088ee1
   88e40:	00088eeb 	.word	0x00088eeb
   88e44:	00088ef5 	.word	0x00088ef5
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   88e48:	4b44      	ldr	r3, [pc, #272]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88e4a:	2206      	movs	r2, #6
   88e4c:	701a      	strb	r2, [r3, #0]
						break;
   88e4e:	e05b      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   88e50:	4b45      	ldr	r3, [pc, #276]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88e52:	f993 3000 	ldrsb.w	r3, [r3]
   88e56:	b2da      	uxtb	r2, r3
   88e58:	3201      	adds	r2, #1
   88e5a:	b2d2      	uxtb	r2, r2
   88e5c:	b251      	sxtb	r1, r2
   88e5e:	4a42      	ldr	r2, [pc, #264]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88e60:	7011      	strb	r1, [r2, #0]
   88e62:	2b3b      	cmp	r3, #59	; 0x3b
   88e64:	dd0f      	ble.n	88e86 <cl_dprep_primecontroller+0x51a>
						{
							cl_prime_sec = 0;
   88e66:	4b40      	ldr	r3, [pc, #256]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88e68:	2200      	movs	r2, #0
   88e6a:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   88e6c:	4b3d      	ldr	r3, [pc, #244]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88e6e:	f993 3000 	ldrsb.w	r3, [r3]
   88e72:	b2db      	uxtb	r3, r3
   88e74:	3301      	adds	r3, #1
   88e76:	b2db      	uxtb	r3, r3
   88e78:	b25a      	sxtb	r2, r3
   88e7a:	4b3a      	ldr	r3, [pc, #232]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88e7c:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88e7e:	4b3b      	ldr	r3, [pc, #236]	; (88f6c <cl_dprep_primecontroller+0x600>)
   88e80:	4798      	blx	r3
   88e82:	4603      	mov	r3, r0
   88e84:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88e86:	4b37      	ldr	r3, [pc, #220]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88e88:	f993 3000 	ldrsb.w	r3, [r3]
   88e8c:	2b00      	cmp	r3, #0
   88e8e:	dd3a      	ble.n	88f06 <cl_dprep_primecontroller+0x59a>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88e90:	2100      	movs	r1, #0
   88e92:	2004      	movs	r0, #4
   88e94:	4b2f      	ldr	r3, [pc, #188]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88e96:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   88e98:	1d3b      	adds	r3, r7, #4
   88e9a:	2200      	movs	r2, #0
   88e9c:	4619      	mov	r1, r3
   88e9e:	2031      	movs	r0, #49	; 0x31
   88ea0:	4b2d      	ldr	r3, [pc, #180]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88ea2:	4798      	blx	r3
   88ea4:	4603      	mov	r3, r0
   88ea6:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   88ea8:	4b2c      	ldr	r3, [pc, #176]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88eaa:	2208      	movs	r2, #8
   88eac:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   88eae:	e02a      	b.n	88f06 <cl_dprep_primecontroller+0x59a>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88eb0:	2100      	movs	r1, #0
   88eb2:	2004      	movs	r0, #4
   88eb4:	4b27      	ldr	r3, [pc, #156]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88eb6:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88eb8:	1d3b      	adds	r3, r7, #4
   88eba:	2200      	movs	r2, #0
   88ebc:	4619      	mov	r1, r3
   88ebe:	2023      	movs	r0, #35	; 0x23
   88ec0:	4b25      	ldr	r3, [pc, #148]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88ec2:	4798      	blx	r3
   88ec4:	4603      	mov	r3, r0
   88ec6:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88ec8:	4b24      	ldr	r3, [pc, #144]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88eca:	2203      	movs	r2, #3
   88ecc:	701a      	strb	r2, [r3, #0]
						break;
   88ece:	e01b      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88ed0:	2100      	movs	r1, #0
   88ed2:	2004      	movs	r0, #4
   88ed4:	4b1f      	ldr	r3, [pc, #124]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88ed6:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88ed8:	4b20      	ldr	r3, [pc, #128]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88eda:	2204      	movs	r2, #4
   88edc:	701a      	strb	r2, [r3, #0]
						break;
   88ede:	e013      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88ee0:	2100      	movs	r1, #0
   88ee2:	2002      	movs	r0, #2
   88ee4:	4b1b      	ldr	r3, [pc, #108]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88ee6:	4798      	blx	r3
						break;
   88ee8:	e00e      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88eea:	2100      	movs	r1, #0
   88eec:	2004      	movs	r0, #4
   88eee:	4b19      	ldr	r3, [pc, #100]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88ef0:	4798      	blx	r3
						break;
   88ef2:	e009      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88ef4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88ef8:	4619      	mov	r1, r3
   88efa:	2001      	movs	r0, #1
   88efc:	4b15      	ldr	r3, [pc, #84]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88efe:	4798      	blx	r3
						break;
   88f00:	e002      	b.n	88f08 <cl_dprep_primecontroller+0x59c>
						default:break;
   88f02:	bf00      	nop
   88f04:	e1e5      	b.n	892d2 <cl_dprep_primecontroller+0x966>
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
						
						}

						break;
   88f06:	bf00      	nop
						break;
						default:break;
					}

			
			break;
   88f08:	e1e3      	b.n	892d2 <cl_dprep_primecontroller+0x966>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   88f0a:	79fb      	ldrb	r3, [r7, #7]
   88f0c:	2b05      	cmp	r3, #5
   88f0e:	d000      	beq.n	88f12 <cl_dprep_primecontroller+0x5a6>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   88f10:	e01e      	b.n	88f50 <cl_dprep_primecontroller+0x5e4>
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88f12:	2206      	movs	r2, #6
   88f14:	4912      	ldr	r1, [pc, #72]	; (88f60 <cl_dprep_primecontroller+0x5f4>)
   88f16:	2018      	movs	r0, #24
   88f18:	4b0f      	ldr	r3, [pc, #60]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88f1a:	4798      	blx	r3
									cl_prime_min =  0;
   88f1c:	4b11      	ldr	r3, [pc, #68]	; (88f64 <cl_dprep_primecontroller+0x5f8>)
   88f1e:	2200      	movs	r2, #0
   88f20:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   88f22:	4b11      	ldr	r3, [pc, #68]	; (88f68 <cl_dprep_primecontroller+0x5fc>)
   88f24:	2200      	movs	r2, #0
   88f26:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   88f28:	2100      	movs	r1, #0
   88f2a:	2002      	movs	r0, #2
   88f2c:	4b09      	ldr	r3, [pc, #36]	; (88f54 <cl_dprep_primecontroller+0x5e8>)
   88f2e:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88f30:	1d3b      	adds	r3, r7, #4
   88f32:	2200      	movs	r2, #0
   88f34:	4619      	mov	r1, r3
   88f36:	202f      	movs	r0, #47	; 0x2f
   88f38:	4b07      	ldr	r3, [pc, #28]	; (88f58 <cl_dprep_primecontroller+0x5ec>)
   88f3a:	4798      	blx	r3
   88f3c:	4603      	mov	r3, r0
   88f3e:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88f40:	4b0a      	ldr	r3, [pc, #40]	; (88f6c <cl_dprep_primecontroller+0x600>)
   88f42:	4798      	blx	r3
   88f44:	4603      	mov	r3, r0
   88f46:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88f48:	4b04      	ldr	r3, [pc, #16]	; (88f5c <cl_dprep_primecontroller+0x5f0>)
   88f4a:	2205      	movs	r2, #5
   88f4c:	701a      	strb	r2, [r3, #0]
								break;
   88f4e:	bf00      	nop
								default:break;
									}
			break;
   88f50:	e1bf      	b.n	892d2 <cl_dprep_primecontroller+0x966>
   88f52:	bf00      	nop
   88f54:	00091c25 	.word	0x00091c25
   88f58:	00098601 	.word	0x00098601
   88f5c:	200720ec 	.word	0x200720ec
   88f60:	000a470c 	.word	0x000a470c
   88f64:	200720ef 	.word	0x200720ef
   88f68:	200720ee 	.word	0x200720ee
   88f6c:	000892dd 	.word	0x000892dd
   88f70:	000a4704 	.word	0x000a4704
   88f74:	00089355 	.word	0x00089355
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   88f78:	79fb      	ldrb	r3, [r7, #7]
   88f7a:	3b01      	subs	r3, #1
   88f7c:	2b0d      	cmp	r3, #13
   88f7e:	f200 8189 	bhi.w	89294 <cl_dprep_primecontroller+0x928>
   88f82:	a201      	add	r2, pc, #4	; (adr r2, 88f88 <cl_dprep_primecontroller+0x61c>)
   88f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88f88:	00088fff 	.word	0x00088fff
   88f8c:	00089295 	.word	0x00089295
   88f90:	00089295 	.word	0x00089295
   88f94:	00089295 	.word	0x00089295
   88f98:	00088fc1 	.word	0x00088fc1
   88f9c:	00089097 	.word	0x00089097
   88fa0:	00089295 	.word	0x00089295
   88fa4:	0008904d 	.word	0x0008904d
   88fa8:	00089295 	.word	0x00089295
   88fac:	00089295 	.word	0x00089295
   88fb0:	00089295 	.word	0x00089295
   88fb4:	00089075 	.word	0x00089075
   88fb8:	0008907f 	.word	0x0008907f
   88fbc:	00089089 	.word	0x00089089
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88fc0:	2206      	movs	r2, #6
   88fc2:	49b5      	ldr	r1, [pc, #724]	; (89298 <cl_dprep_primecontroller+0x92c>)
   88fc4:	2018      	movs	r0, #24
   88fc6:	4bb5      	ldr	r3, [pc, #724]	; (8929c <cl_dprep_primecontroller+0x930>)
   88fc8:	4798      	blx	r3
							cl_prime_min =  0;
   88fca:	4bb5      	ldr	r3, [pc, #724]	; (892a0 <cl_dprep_primecontroller+0x934>)
   88fcc:	2200      	movs	r2, #0
   88fce:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88fd0:	4bb4      	ldr	r3, [pc, #720]	; (892a4 <cl_dprep_primecontroller+0x938>)
   88fd2:	2200      	movs	r2, #0
   88fd4:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88fd6:	2100      	movs	r1, #0
   88fd8:	2002      	movs	r0, #2
   88fda:	4bb3      	ldr	r3, [pc, #716]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   88fdc:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88fde:	1d3b      	adds	r3, r7, #4
   88fe0:	2200      	movs	r2, #0
   88fe2:	4619      	mov	r1, r3
   88fe4:	202f      	movs	r0, #47	; 0x2f
   88fe6:	4bad      	ldr	r3, [pc, #692]	; (8929c <cl_dprep_primecontroller+0x930>)
   88fe8:	4798      	blx	r3
   88fea:	4603      	mov	r3, r0
   88fec:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88fee:	4baf      	ldr	r3, [pc, #700]	; (892ac <cl_dprep_primecontroller+0x940>)
   88ff0:	4798      	blx	r3
   88ff2:	4603      	mov	r3, r0
   88ff4:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88ff6:	4bae      	ldr	r3, [pc, #696]	; (892b0 <cl_dprep_primecontroller+0x944>)
   88ff8:	2205      	movs	r2, #5
   88ffa:	701a      	strb	r2, [r3, #0]
							break;
   88ffc:	e04c      	b.n	89098 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88ffe:	2206      	movs	r2, #6
   89000:	49ac      	ldr	r1, [pc, #688]	; (892b4 <cl_dprep_primecontroller+0x948>)
   89002:	2018      	movs	r0, #24
   89004:	4ba5      	ldr	r3, [pc, #660]	; (8929c <cl_dprep_primecontroller+0x930>)
   89006:	4798      	blx	r3
							cl_prime_min =  0;
   89008:	4ba5      	ldr	r3, [pc, #660]	; (892a0 <cl_dprep_primecontroller+0x934>)
   8900a:	2200      	movs	r2, #0
   8900c:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   8900e:	4ba5      	ldr	r3, [pc, #660]	; (892a4 <cl_dprep_primecontroller+0x938>)
   89010:	2200      	movs	r2, #0
   89012:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   89014:	2100      	movs	r1, #0
   89016:	2002      	movs	r0, #2
   89018:	4ba3      	ldr	r3, [pc, #652]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8901a:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8901c:	1d3b      	adds	r3, r7, #4
   8901e:	2200      	movs	r2, #0
   89020:	4619      	mov	r1, r3
   89022:	200d      	movs	r0, #13
   89024:	4b9d      	ldr	r3, [pc, #628]	; (8929c <cl_dprep_primecontroller+0x930>)
   89026:	4798      	blx	r3
   89028:	4603      	mov	r3, r0
   8902a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8902c:	1d3b      	adds	r3, r7, #4
   8902e:	2200      	movs	r2, #0
   89030:	4619      	mov	r1, r3
   89032:	2024      	movs	r0, #36	; 0x24
   89034:	4b99      	ldr	r3, [pc, #612]	; (8929c <cl_dprep_primecontroller+0x930>)
   89036:	4798      	blx	r3
   89038:	4603      	mov	r3, r0
   8903a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8903c:	4b9b      	ldr	r3, [pc, #620]	; (892ac <cl_dprep_primecontroller+0x940>)
   8903e:	4798      	blx	r3
   89040:	4603      	mov	r3, r0
   89042:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   89044:	4b9a      	ldr	r3, [pc, #616]	; (892b0 <cl_dprep_primecontroller+0x944>)
   89046:	2201      	movs	r2, #1
   89048:	701a      	strb	r2, [r3, #0]
							break;
   8904a:	e025      	b.n	89098 <cl_dprep_primecontroller+0x72c>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8904c:	2100      	movs	r1, #0
   8904e:	2002      	movs	r0, #2
   89050:	4b95      	ldr	r3, [pc, #596]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89052:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   89054:	1d3b      	adds	r3, r7, #4
   89056:	2200      	movs	r2, #0
   89058:	4619      	mov	r1, r3
   8905a:	2028      	movs	r0, #40	; 0x28
   8905c:	4b8f      	ldr	r3, [pc, #572]	; (8929c <cl_dprep_primecontroller+0x930>)
   8905e:	4798      	blx	r3
   89060:	4603      	mov	r3, r0
   89062:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   89064:	4b94      	ldr	r3, [pc, #592]	; (892b8 <cl_dprep_primecontroller+0x94c>)
   89066:	4798      	blx	r3
   89068:	4603      	mov	r3, r0
   8906a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8906c:	4b90      	ldr	r3, [pc, #576]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8906e:	2209      	movs	r2, #9
   89070:	701a      	strb	r2, [r3, #0]
							break;
   89072:	e011      	b.n	89098 <cl_dprep_primecontroller+0x72c>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   89074:	2100      	movs	r1, #0
   89076:	2002      	movs	r0, #2
   89078:	4b8b      	ldr	r3, [pc, #556]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8907a:	4798      	blx	r3
							break;
   8907c:	e00c      	b.n	89098 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8907e:	2100      	movs	r1, #0
   89080:	2004      	movs	r0, #4
   89082:	4b89      	ldr	r3, [pc, #548]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89084:	4798      	blx	r3
							break;
   89086:	e007      	b.n	89098 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   89088:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8908c:	4619      	mov	r1, r3
   8908e:	2001      	movs	r0, #1
   89090:	4b85      	ldr	r3, [pc, #532]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89092:	4798      	blx	r3
							break;
   89094:	e000      	b.n	89098 <cl_dprep_primecontroller+0x72c>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   89096:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   89098:	e0fc      	b.n	89294 <cl_dprep_primecontroller+0x928>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   8909a:	79fb      	ldrb	r3, [r7, #7]
   8909c:	3b02      	subs	r3, #2
   8909e:	2b0c      	cmp	r3, #12
   890a0:	d871      	bhi.n	89186 <cl_dprep_primecontroller+0x81a>
   890a2:	a201      	add	r2, pc, #4	; (adr r2, 890a8 <cl_dprep_primecontroller+0x73c>)
   890a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   890a8:	00089123 	.word	0x00089123
   890ac:	000890dd 	.word	0x000890dd
   890b0:	00089187 	.word	0x00089187
   890b4:	00089187 	.word	0x00089187
   890b8:	00089187 	.word	0x00089187
   890bc:	00089187 	.word	0x00089187
   890c0:	00089187 	.word	0x00089187
   890c4:	00089123 	.word	0x00089123
   890c8:	0008915d 	.word	0x0008915d
   890cc:	000890e5 	.word	0x000890e5
   890d0:	00089165 	.word	0x00089165
   890d4:	0008916f 	.word	0x0008916f
   890d8:	00089179 	.word	0x00089179
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   890dc:	4b74      	ldr	r3, [pc, #464]	; (892b0 <cl_dprep_primecontroller+0x944>)
   890de:	220b      	movs	r2, #11
   890e0:	701a      	strb	r2, [r3, #0]
							break;
   890e2:	e051      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   890e4:	4b75      	ldr	r3, [pc, #468]	; (892bc <cl_dprep_primecontroller+0x950>)
   890e6:	f993 3000 	ldrsb.w	r3, [r3]
   890ea:	b2da      	uxtb	r2, r3
   890ec:	3201      	adds	r2, #1
   890ee:	b2d2      	uxtb	r2, r2
   890f0:	b251      	sxtb	r1, r2
   890f2:	4a72      	ldr	r2, [pc, #456]	; (892bc <cl_dprep_primecontroller+0x950>)
   890f4:	7011      	strb	r1, [r2, #0]
   890f6:	2b3b      	cmp	r3, #59	; 0x3b
   890f8:	dd0b      	ble.n	89112 <cl_dprep_primecontroller+0x7a6>
							{
								cl_dialyser_prime_sec = 0;
   890fa:	4b70      	ldr	r3, [pc, #448]	; (892bc <cl_dprep_primecontroller+0x950>)
   890fc:	2200      	movs	r2, #0
   890fe:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   89100:	4b6f      	ldr	r3, [pc, #444]	; (892c0 <cl_dprep_primecontroller+0x954>)
   89102:	f993 3000 	ldrsb.w	r3, [r3]
   89106:	b2db      	uxtb	r3, r3
   89108:	3301      	adds	r3, #1
   8910a:	b2db      	uxtb	r3, r3
   8910c:	b25a      	sxtb	r2, r3
   8910e:	4b6c      	ldr	r3, [pc, #432]	; (892c0 <cl_dprep_primecontroller+0x954>)
   89110:	701a      	strb	r2, [r3, #0]
							}
				//			if(cl_dialyser_prime_min >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN )
							{
								cl_bp_controller(CL_BP_EVENT_STOP,0);
   89112:	2100      	movs	r1, #0
   89114:	2004      	movs	r0, #4
   89116:	4b64      	ldr	r3, [pc, #400]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89118:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8911a:	4b65      	ldr	r3, [pc, #404]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8911c:	220a      	movs	r2, #10
   8911e:	701a      	strb	r2, [r3, #0]
						
							}
							break;
   89120:	e032      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   89122:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   89126:	2b01      	cmp	r3, #1
   89128:	d103      	bne.n	89132 <cl_dprep_primecontroller+0x7c6>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8912a:	4b61      	ldr	r3, [pc, #388]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8912c:	220a      	movs	r2, #10
   8912e:	701a      	strb	r2, [r3, #0]
   89130:	e00e      	b.n	89150 <cl_dprep_primecontroller+0x7e4>
								}else
								{
									sv_cntrl_enable_bypass();
   89132:	4b64      	ldr	r3, [pc, #400]	; (892c4 <cl_dprep_primecontroller+0x958>)
   89134:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   89136:	2100      	movs	r1, #0
   89138:	2004      	movs	r0, #4
   8913a:	4b5b      	ldr	r3, [pc, #364]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8913c:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   8913e:	4b5f      	ldr	r3, [pc, #380]	; (892bc <cl_dprep_primecontroller+0x950>)
   89140:	2200      	movs	r2, #0
   89142:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   89144:	4b5e      	ldr	r3, [pc, #376]	; (892c0 <cl_dprep_primecontroller+0x954>)
   89146:	2200      	movs	r2, #0
   89148:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8914a:	4b59      	ldr	r3, [pc, #356]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8914c:	220b      	movs	r2, #11
   8914e:	701a      	strb	r2, [r3, #0]
								}

								Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   89150:	2200      	movs	r2, #0
   89152:	2100      	movs	r1, #0
   89154:	2029      	movs	r0, #41	; 0x29
   89156:	4b51      	ldr	r3, [pc, #324]	; (8929c <cl_dprep_primecontroller+0x930>)
   89158:	4798      	blx	r3
								
							break;
   8915a:	e015      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   8915c:	4b54      	ldr	r3, [pc, #336]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8915e:	220c      	movs	r2, #12
   89160:	701a      	strb	r2, [r3, #0]
							break;
   89162:	e011      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   89164:	2100      	movs	r1, #0
   89166:	2002      	movs	r0, #2
   89168:	4b4f      	ldr	r3, [pc, #316]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8916a:	4798      	blx	r3
							break;
   8916c:	e00c      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8916e:	2100      	movs	r1, #0
   89170:	2004      	movs	r0, #4
   89172:	4b4d      	ldr	r3, [pc, #308]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89174:	4798      	blx	r3
							break;
   89176:	e007      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   89178:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8917c:	4619      	mov	r1, r3
   8917e:	2001      	movs	r0, #1
   89180:	4b49      	ldr	r3, [pc, #292]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89182:	4798      	blx	r3
							break;
   89184:	e000      	b.n	89188 <cl_dprep_primecontroller+0x81c>
							default:break;
   89186:	bf00      	nop
						}
			break;
   89188:	e0a3      	b.n	892d2 <cl_dprep_primecontroller+0x966>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   8918a:	79fb      	ldrb	r3, [r7, #7]
   8918c:	3b08      	subs	r3, #8
   8918e:	2b06      	cmp	r3, #6
   89190:	f200 809c 	bhi.w	892cc <cl_dprep_primecontroller+0x960>
   89194:	a201      	add	r2, pc, #4	; (adr r2, 8919c <cl_dprep_primecontroller+0x830>)
   89196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8919a:	bf00      	nop
   8919c:	000891b9 	.word	0x000891b9
   891a0:	000892cd 	.word	0x000892cd
   891a4:	000892cd 	.word	0x000892cd
   891a8:	000892cd 	.word	0x000892cd
   891ac:	000891e5 	.word	0x000891e5
   891b0:	000891ef 	.word	0x000891ef
   891b4:	000891f9 	.word	0x000891f9
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   891b8:	4b43      	ldr	r3, [pc, #268]	; (892c8 <cl_dprep_primecontroller+0x95c>)
   891ba:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   891bc:	2100      	movs	r1, #0
   891be:	2002      	movs	r0, #2
   891c0:	4b39      	ldr	r3, [pc, #228]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   891c2:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   891c4:	1d3b      	adds	r3, r7, #4
   891c6:	2200      	movs	r2, #0
   891c8:	4619      	mov	r1, r3
   891ca:	2028      	movs	r0, #40	; 0x28
   891cc:	4b33      	ldr	r3, [pc, #204]	; (8929c <cl_dprep_primecontroller+0x930>)
   891ce:	4798      	blx	r3
   891d0:	4603      	mov	r3, r0
   891d2:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   891d4:	4b38      	ldr	r3, [pc, #224]	; (892b8 <cl_dprep_primecontroller+0x94c>)
   891d6:	4798      	blx	r3
   891d8:	4603      	mov	r3, r0
   891da:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   891dc:	4b34      	ldr	r3, [pc, #208]	; (892b0 <cl_dprep_primecontroller+0x944>)
   891de:	2209      	movs	r2, #9
   891e0:	701a      	strb	r2, [r3, #0]
							break;
   891e2:	e010      	b.n	89206 <cl_dprep_primecontroller+0x89a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   891e4:	2100      	movs	r1, #0
   891e6:	2002      	movs	r0, #2
   891e8:	4b2f      	ldr	r3, [pc, #188]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   891ea:	4798      	blx	r3
							break;
   891ec:	e00b      	b.n	89206 <cl_dprep_primecontroller+0x89a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   891ee:	2100      	movs	r1, #0
   891f0:	2004      	movs	r0, #4
   891f2:	4b2d      	ldr	r3, [pc, #180]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   891f4:	4798      	blx	r3
							break;
   891f6:	e006      	b.n	89206 <cl_dprep_primecontroller+0x89a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   891f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   891fc:	4619      	mov	r1, r3
   891fe:	2001      	movs	r0, #1
   89200:	4b29      	ldr	r3, [pc, #164]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89202:	4798      	blx	r3
							break;
   89204:	bf00      	nop
						}
			break;
   89206:	e061      	b.n	892cc <cl_dprep_primecontroller+0x960>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   89208:	79fb      	ldrb	r3, [r7, #7]
   8920a:	3b08      	subs	r3, #8
   8920c:	2b06      	cmp	r3, #6
   8920e:	d85f      	bhi.n	892d0 <cl_dprep_primecontroller+0x964>
   89210:	a201      	add	r2, pc, #4	; (adr r2, 89218 <cl_dprep_primecontroller+0x8ac>)
   89212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89216:	bf00      	nop
   89218:	00089235 	.word	0x00089235
   8921c:	0008925d 	.word	0x0008925d
   89220:	000892d1 	.word	0x000892d1
   89224:	000892d1 	.word	0x000892d1
   89228:	00089265 	.word	0x00089265
   8922c:	0008926f 	.word	0x0008926f
   89230:	00089279 	.word	0x00089279
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   89234:	2100      	movs	r1, #0
   89236:	2002      	movs	r0, #2
   89238:	4b1b      	ldr	r3, [pc, #108]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8923a:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   8923c:	1d3b      	adds	r3, r7, #4
   8923e:	2200      	movs	r2, #0
   89240:	4619      	mov	r1, r3
   89242:	2028      	movs	r0, #40	; 0x28
   89244:	4b15      	ldr	r3, [pc, #84]	; (8929c <cl_dprep_primecontroller+0x930>)
   89246:	4798      	blx	r3
   89248:	4603      	mov	r3, r0
   8924a:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   8924c:	4b1a      	ldr	r3, [pc, #104]	; (892b8 <cl_dprep_primecontroller+0x94c>)
   8924e:	4798      	blx	r3
   89250:	4603      	mov	r3, r0
   89252:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   89254:	4b16      	ldr	r3, [pc, #88]	; (892b0 <cl_dprep_primecontroller+0x944>)
   89256:	2209      	movs	r2, #9
   89258:	701a      	strb	r2, [r3, #0]
							break;
   8925a:	e014      	b.n	89286 <cl_dprep_primecontroller+0x91a>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8925c:	4b14      	ldr	r3, [pc, #80]	; (892b0 <cl_dprep_primecontroller+0x944>)
   8925e:	220b      	movs	r2, #11
   89260:	701a      	strb	r2, [r3, #0]
							break;
   89262:	e010      	b.n	89286 <cl_dprep_primecontroller+0x91a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   89264:	2100      	movs	r1, #0
   89266:	2002      	movs	r0, #2
   89268:	4b0f      	ldr	r3, [pc, #60]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   8926a:	4798      	blx	r3
							break;
   8926c:	e00b      	b.n	89286 <cl_dprep_primecontroller+0x91a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8926e:	2100      	movs	r1, #0
   89270:	2004      	movs	r0, #4
   89272:	4b0d      	ldr	r3, [pc, #52]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89274:	4798      	blx	r3
							break;
   89276:	e006      	b.n	89286 <cl_dprep_primecontroller+0x91a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   89278:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8927c:	4619      	mov	r1, r3
   8927e:	2001      	movs	r0, #1
   89280:	4b09      	ldr	r3, [pc, #36]	; (892a8 <cl_dprep_primecontroller+0x93c>)
   89282:	4798      	blx	r3
							break;
   89284:	bf00      	nop

						}
			break;
   89286:	e023      	b.n	892d0 <cl_dprep_primecontroller+0x964>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   89288:	bf00      	nop
   8928a:	e022      	b.n	892d2 <cl_dprep_primecontroller+0x966>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   8928c:	bf00      	nop
   8928e:	e020      	b.n	892d2 <cl_dprep_primecontroller+0x966>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   89290:	bf00      	nop
   89292:	e01e      	b.n	892d2 <cl_dprep_primecontroller+0x966>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   89294:	bf00      	nop
   89296:	e01c      	b.n	892d2 <cl_dprep_primecontroller+0x966>
   89298:	000a470c 	.word	0x000a470c
   8929c:	00098601 	.word	0x00098601
   892a0:	200720ef 	.word	0x200720ef
   892a4:	200720ee 	.word	0x200720ee
   892a8:	00091c25 	.word	0x00091c25
   892ac:	000892dd 	.word	0x000892dd
   892b0:	200720ec 	.word	0x200720ec
   892b4:	000a4704 	.word	0x000a4704
   892b8:	00089355 	.word	0x00089355
   892bc:	200720f0 	.word	0x200720f0
   892c0:	200720f1 	.word	0x200720f1
   892c4:	00096a29 	.word	0x00096a29
   892c8:	00096a51 	.word	0x00096a51
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   892cc:	bf00      	nop
   892ce:	e000      	b.n	892d2 <cl_dprep_primecontroller+0x966>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   892d0:	bf00      	nop

		}
	

	
	return 0;
   892d2:	2300      	movs	r3, #0
}
   892d4:	4618      	mov	r0, r3
   892d6:	3710      	adds	r7, #16
   892d8:	46bd      	mov	sp, r7
   892da:	bd80      	pop	{r7, pc}

000892dc <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   892dc:	b580      	push	{r7, lr}
   892de:	b084      	sub	sp, #16
   892e0:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   892e2:	2304      	movs	r3, #4
   892e4:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   892e6:	234a      	movs	r3, #74	; 0x4a
   892e8:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   892ea:	1d3b      	adds	r3, r7, #4
   892ec:	2200      	movs	r2, #0
   892ee:	601a      	str	r2, [r3, #0]
   892f0:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   892f4:	230a      	movs	r3, #10
   892f6:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   892f8:	2302      	movs	r3, #2
   892fa:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   892fc:	4b12      	ldr	r3, [pc, #72]	; (89348 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   892fe:	f993 3000 	ldrsb.w	r3, [r3]
   89302:	b2db      	uxtb	r3, r3
   89304:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   89306:	2300      	movs	r3, #0
   89308:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   8930a:	4b10      	ldr	r3, [pc, #64]	; (8934c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x70>)
   8930c:	f993 3000 	ldrsb.w	r3, [r3]
   89310:	b2db      	uxtb	r3, r3
   89312:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   89314:	4b0c      	ldr	r3, [pc, #48]	; (89348 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   89316:	f993 3000 	ldrsb.w	r3, [r3]
   8931a:	b2db      	uxtb	r3, r3
   8931c:	f1c3 0301 	rsb	r3, r3, #1
   89320:	b2db      	uxtb	r3, r3
   89322:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   89324:	2300      	movs	r3, #0
   89326:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   89328:	2300      	movs	r3, #0
   8932a:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   8932c:	1d39      	adds	r1, r7, #4
   8932e:	7bbb      	ldrb	r3, [r7, #14]
   89330:	2207      	movs	r2, #7
   89332:	4618      	mov	r0, r3
   89334:	4b06      	ldr	r3, [pc, #24]	; (89350 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x74>)
   89336:	4798      	blx	r3
   89338:	4603      	mov	r3, r0
   8933a:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   8933c:	2300      	movs	r3, #0
}
   8933e:	4618      	mov	r0, r3
   89340:	3710      	adds	r7, #16
   89342:	46bd      	mov	sp, r7
   89344:	bd80      	pop	{r7, pc}
   89346:	bf00      	nop
   89348:	200720ef 	.word	0x200720ef
   8934c:	200720ee 	.word	0x200720ee
   89350:	00098601 	.word	0x00098601

00089354 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   89354:	b580      	push	{r7, lr}
   89356:	b084      	sub	sp, #16
   89358:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   8935a:	2304      	movs	r3, #4
   8935c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8935e:	234a      	movs	r3, #74	; 0x4a
   89360:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   89362:	1d3b      	adds	r3, r7, #4
   89364:	2200      	movs	r2, #0
   89366:	601a      	str	r2, [r3, #0]
   89368:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   8936c:	230a      	movs	r3, #10
   8936e:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   89370:	2303      	movs	r3, #3
   89372:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   89374:	4b12      	ldr	r3, [pc, #72]	; (893c0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x6c>)
   89376:	f993 3000 	ldrsb.w	r3, [r3]
   8937a:	b2db      	uxtb	r3, r3
   8937c:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   8937e:	2300      	movs	r3, #0
   89380:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   89382:	4b10      	ldr	r3, [pc, #64]	; (893c4 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x70>)
   89384:	f993 3000 	ldrsb.w	r3, [r3]
   89388:	b2db      	uxtb	r3, r3
   8938a:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   8938c:	4b0e      	ldr	r3, [pc, #56]	; (893c8 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x74>)
   8938e:	f993 3000 	ldrsb.w	r3, [r3]
   89392:	b2db      	uxtb	r3, r3
   89394:	f1c3 0301 	rsb	r3, r3, #1
   89398:	b2db      	uxtb	r3, r3
   8939a:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   8939c:	2300      	movs	r3, #0
   8939e:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   893a0:	2300      	movs	r3, #0
   893a2:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   893a4:	1d39      	adds	r1, r7, #4
   893a6:	7bbb      	ldrb	r3, [r7, #14]
   893a8:	2207      	movs	r2, #7
   893aa:	4618      	mov	r0, r3
   893ac:	4b07      	ldr	r3, [pc, #28]	; (893cc <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   893ae:	4798      	blx	r3
   893b0:	4603      	mov	r3, r0
   893b2:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   893b4:	2300      	movs	r3, #0

}
   893b6:	4618      	mov	r0, r3
   893b8:	3710      	adds	r7, #16
   893ba:	46bd      	mov	sp, r7
   893bc:	bd80      	pop	{r7, pc}
   893be:	bf00      	nop
   893c0:	200720f1 	.word	0x200720f1
   893c4:	200720f0 	.word	0x200720f0
   893c8:	200720ef 	.word	0x200720ef
   893cc:	00098601 	.word	0x00098601

000893d0 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   893d0:	b480      	push	{r7}
   893d2:	b083      	sub	sp, #12
   893d4:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   893d6:	2304      	movs	r3, #4
   893d8:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
			//Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
			//Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   893da:	2300      	movs	r3, #0
}
   893dc:	4618      	mov	r0, r3
   893de:	370c      	adds	r7, #12
   893e0:	46bd      	mov	sp, r7
   893e2:	bc80      	pop	{r7}
   893e4:	4770      	bx	lr
   893e6:	bf00      	nop

000893e8 <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   893e8:	b480      	push	{r7}
   893ea:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   893ec:	2300      	movs	r3, #0
   893ee:	4618      	mov	r0, r3
   893f0:	46bd      	mov	sp, r7
   893f2:	bc80      	pop	{r7}
   893f4:	4770      	bx	lr
   893f6:	bf00      	nop

000893f8 <cl_event_handler>:
extern volatile Cl_Uint32Type g_ul_ms_ticks ;
//extern Cl_ReturnCodeType cl_bp_event_handler(cl_bp_events bp_event );

static Cl_Uint32Type test_counter =0;
Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   893f8:	b580      	push	{r7, lr}
   893fa:	b084      	sub	sp, #16
   893fc:	af00      	add	r7, sp, #0
   893fe:	4603      	mov	r3, r0
   89400:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   89402:	79fb      	ldrb	r3, [r7, #7]
   89404:	3b0d      	subs	r3, #13
   89406:	2b2f      	cmp	r3, #47	; 0x2f
   89408:	f200 80de 	bhi.w	895c8 <cl_event_handler+0x1d0>
   8940c:	a201      	add	r2, pc, #4	; (adr r2, 89414 <cl_event_handler+0x1c>)
   8940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89412:	bf00      	nop
   89414:	000895bf 	.word	0x000895bf
   89418:	000895bf 	.word	0x000895bf
   8941c:	000895c9 	.word	0x000895c9
   89420:	000895c9 	.word	0x000895c9
   89424:	000895c9 	.word	0x000895c9
   89428:	000895c9 	.word	0x000895c9
   8942c:	000895c9 	.word	0x000895c9
   89430:	000895c9 	.word	0x000895c9
   89434:	000895c9 	.word	0x000895c9
   89438:	000895c9 	.word	0x000895c9
   8943c:	000895c9 	.word	0x000895c9
   89440:	000895c9 	.word	0x000895c9
   89444:	000895c9 	.word	0x000895c9
   89448:	000895c9 	.word	0x000895c9
   8944c:	000895c9 	.word	0x000895c9
   89450:	000895c9 	.word	0x000895c9
   89454:	000895c9 	.word	0x000895c9
   89458:	000895c9 	.word	0x000895c9
   8945c:	000895c9 	.word	0x000895c9
   89460:	000895c9 	.word	0x000895c9
   89464:	000895c9 	.word	0x000895c9
   89468:	000895c9 	.word	0x000895c9
   8946c:	000895c9 	.word	0x000895c9
   89470:	000895c9 	.word	0x000895c9
   89474:	000895c9 	.word	0x000895c9
   89478:	000895c9 	.word	0x000895c9
   8947c:	000895c9 	.word	0x000895c9
   89480:	000895c9 	.word	0x000895c9
   89484:	000895c9 	.word	0x000895c9
   89488:	000895c9 	.word	0x000895c9
   8948c:	000895c9 	.word	0x000895c9
   89490:	000895c9 	.word	0x000895c9
   89494:	000895c9 	.word	0x000895c9
   89498:	000895c9 	.word	0x000895c9
   8949c:	000895b7 	.word	0x000895b7
   894a0:	000895c9 	.word	0x000895c9
   894a4:	000895c9 	.word	0x000895c9
   894a8:	000894d5 	.word	0x000894d5
   894ac:	000895c9 	.word	0x000895c9
   894b0:	000895c9 	.word	0x000895c9
   894b4:	000895c9 	.word	0x000895c9
   894b8:	000895c9 	.word	0x000895c9
   894bc:	000894e3 	.word	0x000894e3
   894c0:	000894ed 	.word	0x000894ed
   894c4:	000894f5 	.word	0x000894f5
   894c8:	00089507 	.word	0x00089507
   894cc:	0008952f 	.word	0x0008952f
   894d0:	000895af 	.word	0x000895af
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   894d4:	2004      	movs	r0, #4
   894d6:	4b3f      	ldr	r3, [pc, #252]	; (895d4 <cl_event_handler+0x1dc>)
   894d8:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   894da:	2006      	movs	r0, #6
   894dc:	4b3e      	ldr	r3, [pc, #248]	; (895d8 <cl_event_handler+0x1e0>)
   894de:	4798      	blx	r3

		//	sv_cs_setpotvalue(250);
		
		break;
   894e0:	e073      	b.n	895ca <cl_event_handler+0x1d2>

		
		break;
		case EVT_TICK_20M:
		
				cl_ufpumpFeedback_timer();
   894e2:	4b3e      	ldr	r3, [pc, #248]	; (895dc <cl_event_handler+0x1e4>)
   894e4:	4798      	blx	r3
				cl_hep_pumpFeedback_timer();
   894e6:	4b3e      	ldr	r3, [pc, #248]	; (895e0 <cl_event_handler+0x1e8>)
   894e8:	4798      	blx	r3
//	toggle = false;
}
		
	
	
		break;		
   894ea:	e06e      	b.n	895ca <cl_event_handler+0x1d2>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   894ec:	2000      	movs	r0, #0
   894ee:	4b3d      	ldr	r3, [pc, #244]	; (895e4 <cl_event_handler+0x1ec>)
   894f0:	4798      	blx	r3
		}
		break;
   894f2:	e06a      	b.n	895ca <cl_event_handler+0x1d2>
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);
   894f4:	2001      	movs	r0, #1
   894f6:	4b3c      	ldr	r3, [pc, #240]	; (895e8 <cl_event_handler+0x1f0>)
   894f8:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   894fa:	2001      	movs	r0, #1
   894fc:	4b3b      	ldr	r3, [pc, #236]	; (895ec <cl_event_handler+0x1f4>)
   894fe:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   89500:	4b3b      	ldr	r3, [pc, #236]	; (895f0 <cl_event_handler+0x1f8>)
   89502:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   89504:	e061      	b.n	895ca <cl_event_handler+0x1d2>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   89506:	f04f 0100 	mov.w	r1, #0
   8950a:	2001      	movs	r0, #1
   8950c:	4b39      	ldr	r3, [pc, #228]	; (895f4 <cl_event_handler+0x1fc>)
   8950e:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   89510:	2001      	movs	r0, #1
   89512:	4b34      	ldr	r3, [pc, #208]	; (895e4 <cl_event_handler+0x1ec>)
   89514:	4798      	blx	r3
		if(  toggle_500)
   89516:	4b38      	ldr	r3, [pc, #224]	; (895f8 <cl_event_handler+0x200>)
   89518:	781b      	ldrb	r3, [r3, #0]
   8951a:	2b00      	cmp	r3, #0
   8951c:	d003      	beq.n	89526 <cl_event_handler+0x12e>
		{
			toggle_500 = false;
   8951e:	4b36      	ldr	r3, [pc, #216]	; (895f8 <cl_event_handler+0x200>)
   89520:	2200      	movs	r2, #0
   89522:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   89524:	e051      	b.n	895ca <cl_event_handler+0x1d2>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   89526:	4b34      	ldr	r3, [pc, #208]	; (895f8 <cl_event_handler+0x200>)
   89528:	2201      	movs	r2, #1
   8952a:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   8952c:	e04d      	b.n	895ca <cl_event_handler+0x1d2>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   8952e:	2001      	movs	r0, #1
   89530:	4b28      	ldr	r3, [pc, #160]	; (895d4 <cl_event_handler+0x1dc>)
   89532:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   89534:	2003      	movs	r0, #3
   89536:	4b28      	ldr	r3, [pc, #160]	; (895d8 <cl_event_handler+0x1e0>)
   89538:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   8953a:	2100      	movs	r1, #0
   8953c:	200b      	movs	r0, #11
   8953e:	4b2f      	ldr	r3, [pc, #188]	; (895fc <cl_event_handler+0x204>)
   89540:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   89542:	2100      	movs	r1, #0
   89544:	200d      	movs	r0, #13
   89546:	4b2e      	ldr	r3, [pc, #184]	; (89600 <cl_event_handler+0x208>)
   89548:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   8954a:	2002      	movs	r0, #2
   8954c:	4b25      	ldr	r3, [pc, #148]	; (895e4 <cl_event_handler+0x1ec>)
   8954e:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   89550:	f04f 0100 	mov.w	r1, #0
   89554:	2002      	movs	r0, #2
   89556:	4b27      	ldr	r3, [pc, #156]	; (895f4 <cl_event_handler+0x1fc>)
   89558:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   8955a:	2002      	movs	r0, #2
   8955c:	4b29      	ldr	r3, [pc, #164]	; (89604 <cl_event_handler+0x20c>)
   8955e:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   89560:	4b29      	ldr	r3, [pc, #164]	; (89608 <cl_event_handler+0x210>)
   89562:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   89564:	4b29      	ldr	r3, [pc, #164]	; (8960c <cl_event_handler+0x214>)
   89566:	781b      	ldrb	r3, [r3, #0]
   89568:	3301      	adds	r3, #1
   8956a:	b2da      	uxtb	r2, r3
   8956c:	4b27      	ldr	r3, [pc, #156]	; (8960c <cl_event_handler+0x214>)
   8956e:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   89570:	4b27      	ldr	r3, [pc, #156]	; (89610 <cl_event_handler+0x218>)
   89572:	781b      	ldrb	r3, [r3, #0]
   89574:	f083 0301 	eor.w	r3, r3, #1
   89578:	b2db      	uxtb	r3, r3
   8957a:	2b00      	cmp	r3, #0
   8957c:	d005      	beq.n	8958a <cl_event_handler+0x192>
		{
		SV_CAN_READ_HEMO();
   8957e:	4b25      	ldr	r3, [pc, #148]	; (89614 <cl_event_handler+0x21c>)
   89580:	4798      	blx	r3
		
			toggle = true;
   89582:	4b23      	ldr	r3, [pc, #140]	; (89610 <cl_event_handler+0x218>)
   89584:	2201      	movs	r2, #1
   89586:	701a      	strb	r2, [r3, #0]
   89588:	e00b      	b.n	895a2 <cl_event_handler+0x1aa>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   8958a:	4b23      	ldr	r3, [pc, #140]	; (89618 <cl_event_handler+0x220>)
   8958c:	4798      	blx	r3
			toggle = false;
   8958e:	4b20      	ldr	r3, [pc, #128]	; (89610 <cl_event_handler+0x218>)
   89590:	2200      	movs	r2, #0
   89592:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   89594:	4b1d      	ldr	r3, [pc, #116]	; (8960c <cl_event_handler+0x214>)
   89596:	781b      	ldrb	r3, [r3, #0]
   89598:	2b0a      	cmp	r3, #10
   8959a:	d102      	bne.n	895a2 <cl_event_handler+0x1aa>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   8959c:	4b1b      	ldr	r3, [pc, #108]	; (8960c <cl_event_handler+0x214>)
   8959e:	2200      	movs	r2, #0
   895a0:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   895a2:	4b1e      	ldr	r3, [pc, #120]	; (8961c <cl_event_handler+0x224>)
   895a4:	681b      	ldr	r3, [r3, #0]
   895a6:	3301      	adds	r3, #1
   895a8:	4a1c      	ldr	r2, [pc, #112]	; (8961c <cl_event_handler+0x224>)
   895aa:	6013      	str	r3, [r2, #0]
		}
		
		break;
   895ac:	e00d      	b.n	895ca <cl_event_handler+0x1d2>
		case EVT_TICK_MIN:
		{
			
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   895ae:	2002      	movs	r0, #2
   895b0:	4b0d      	ldr	r3, [pc, #52]	; (895e8 <cl_event_handler+0x1f0>)
   895b2:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   895b4:	e009      	b.n	895ca <cl_event_handler+0x1d2>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   895b6:	2003      	movs	r0, #3
   895b8:	4b0a      	ldr	r3, [pc, #40]	; (895e4 <cl_event_handler+0x1ec>)
   895ba:	4798      	blx	r3
		break;
   895bc:	e005      	b.n	895ca <cl_event_handler+0x1d2>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   895be:	79fb      	ldrb	r3, [r7, #7]
   895c0:	4618      	mov	r0, r3
   895c2:	4b17      	ldr	r3, [pc, #92]	; (89620 <cl_event_handler+0x228>)
   895c4:	4798      	blx	r3
		break;
   895c6:	e000      	b.n	895ca <cl_event_handler+0x1d2>
		default:
		break;
   895c8:	bf00      	nop
	}
	
	return 0;
   895ca:	2300      	movs	r3, #0
}
   895cc:	4618      	mov	r0, r3
   895ce:	3710      	adds	r7, #16
   895d0:	46bd      	mov	sp, r7
   895d2:	bd80      	pop	{r7, pc}
   895d4:	00092b4d 	.word	0x00092b4d
   895d8:	0009211d 	.word	0x0009211d
   895dc:	00092ce9 	.word	0x00092ce9
   895e0:	00092901 	.word	0x00092901
   895e4:	00083325 	.word	0x00083325
   895e8:	0008e791 	.word	0x0008e791
   895ec:	0008e389 	.word	0x0008e389
   895f0:	00091e89 	.word	0x00091e89
   895f4:	000896e9 	.word	0x000896e9
   895f8:	200720f8 	.word	0x200720f8
   895fc:	0008896d 	.word	0x0008896d
   89600:	00092315 	.word	0x00092315
   89604:	0008e179 	.word	0x0008e179
   89608:	0008d889 	.word	0x0008d889
   8960c:	200720f9 	.word	0x200720f9
   89610:	200720fa 	.word	0x200720fa
   89614:	000966f9 	.word	0x000966f9
   89618:	00096731 	.word	0x00096731
   8961c:	200720f4 	.word	0x200720f4
   89620:	0008465d 	.word	0x0008465d
   89624:	00000000 	.word	0x00000000

00089628 <Cl_Heater_GetHeaterStableStatus>:

#define TS2_SLOPE2  0.3
#define  TS2_SLOPE1  0.03

Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   89628:	b5f0      	push	{r4, r5, r6, r7, lr}
   8962a:	b083      	sub	sp, #12
   8962c:	af00      	add	r7, sp, #0
   8962e:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   89630:	4b25      	ldr	r3, [pc, #148]	; (896c8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   89632:	681a      	ldr	r2, [r3, #0]
   89634:	4b25      	ldr	r3, [pc, #148]	; (896cc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   89636:	4610      	mov	r0, r2
   89638:	4798      	blx	r3
   8963a:	4605      	mov	r5, r0
   8963c:	460e      	mov	r6, r1
   8963e:	4b24      	ldr	r3, [pc, #144]	; (896d0 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89640:	681a      	ldr	r2, [r3, #0]
   89642:	4b22      	ldr	r3, [pc, #136]	; (896cc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   89644:	4610      	mov	r0, r2
   89646:	4798      	blx	r3
   89648:	4c22      	ldr	r4, [pc, #136]	; (896d4 <Cl_Heater_GetHeaterStableStatus+0xac>)
   8964a:	a31d      	add	r3, pc, #116	; (adr r3, 896c0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   8964c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89650:	47a0      	blx	r4
   89652:	4603      	mov	r3, r0
   89654:	460c      	mov	r4, r1
   89656:	461a      	mov	r2, r3
   89658:	4623      	mov	r3, r4
   8965a:	4c1f      	ldr	r4, [pc, #124]	; (896d8 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   8965c:	4628      	mov	r0, r5
   8965e:	4631      	mov	r1, r6
   89660:	47a0      	blx	r4
   89662:	4603      	mov	r3, r0
   89664:	2b00      	cmp	r3, #0
   89666:	d020      	beq.n	896aa <Cl_Heater_GetHeaterStableStatus+0x82>
   89668:	4b17      	ldr	r3, [pc, #92]	; (896c8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8966a:	681a      	ldr	r2, [r3, #0]
   8966c:	4b17      	ldr	r3, [pc, #92]	; (896cc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8966e:	4610      	mov	r0, r2
   89670:	4798      	blx	r3
   89672:	4605      	mov	r5, r0
   89674:	460e      	mov	r6, r1
   89676:	4b16      	ldr	r3, [pc, #88]	; (896d0 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89678:	681a      	ldr	r2, [r3, #0]
   8967a:	4b14      	ldr	r3, [pc, #80]	; (896cc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8967c:	4610      	mov	r0, r2
   8967e:	4798      	blx	r3
   89680:	4c16      	ldr	r4, [pc, #88]	; (896dc <Cl_Heater_GetHeaterStableStatus+0xb4>)
   89682:	a30f      	add	r3, pc, #60	; (adr r3, 896c0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   89684:	e9d3 2300 	ldrd	r2, r3, [r3]
   89688:	47a0      	blx	r4
   8968a:	4603      	mov	r3, r0
   8968c:	460c      	mov	r4, r1
   8968e:	461a      	mov	r2, r3
   89690:	4623      	mov	r3, r4
   89692:	4c13      	ldr	r4, [pc, #76]	; (896e0 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   89694:	4628      	mov	r0, r5
   89696:	4631      	mov	r1, r6
   89698:	47a0      	blx	r4
   8969a:	4603      	mov	r3, r0
   8969c:	2b00      	cmp	r3, #0
   8969e:	d004      	beq.n	896aa <Cl_Heater_GetHeaterStableStatus+0x82>
	{
		*Stable =  cl_temp3_stable;
   896a0:	4b10      	ldr	r3, [pc, #64]	; (896e4 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   896a2:	781a      	ldrb	r2, [r3, #0]
   896a4:	687b      	ldr	r3, [r7, #4]
   896a6:	701a      	strb	r2, [r3, #0]
   896a8:	e002      	b.n	896b0 <Cl_Heater_GetHeaterStableStatus+0x88>
	}
	else
	{
		*Stable =  false;
   896aa:	687b      	ldr	r3, [r7, #4]
   896ac:	2200      	movs	r2, #0
   896ae:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   896b0:	2300      	movs	r3, #0
}
   896b2:	4618      	mov	r0, r3
   896b4:	370c      	adds	r7, #12
   896b6:	46bd      	mov	sp, r7
   896b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   896ba:	bf00      	nop
   896bc:	f3af 8000 	nop.w
   896c0:	9999999a 	.word	0x9999999a
   896c4:	3fc99999 	.word	0x3fc99999
   896c8:	20072108 	.word	0x20072108
   896cc:	000a1d65 	.word	0x000a1d65
   896d0:	2007043c 	.word	0x2007043c
   896d4:	000a1aa5 	.word	0x000a1aa5
   896d8:	000a232d 	.word	0x000a232d
   896dc:	000a1aa9 	.word	0x000a1aa9
   896e0:	000a22f1 	.word	0x000a22f1
   896e4:	200727c9 	.word	0x200727c9

000896e8 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   896e8:	b580      	push	{r7, lr}
   896ea:	b084      	sub	sp, #16
   896ec:	af00      	add	r7, sp, #0
   896ee:	4603      	mov	r3, r0
   896f0:	6039      	str	r1, [r7, #0]
   896f2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   896f4:	2300      	movs	r3, #0
   896f6:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   896f8:	f04f 0300 	mov.w	r3, #0
   896fc:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   896fe:	79fb      	ldrb	r3, [r7, #7]
   89700:	2b03      	cmp	r3, #3
   89702:	d00f      	beq.n	89724 <Cl_Heater_Event_Handler+0x3c>
   89704:	2b05      	cmp	r3, #5
   89706:	d009      	beq.n	8971c <Cl_Heater_Event_Handler+0x34>
   89708:	2b01      	cmp	r3, #1
   8970a:	d000      	beq.n	8970e <Cl_Heater_Event_Handler+0x26>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
	break;
	default:break;
   8970c:	e00f      	b.n	8972e <Cl_Heater_Event_Handler+0x46>
{
	
	case CL_HEATER_EVENT_500MS:
										// maintaining coarse timer count, used in heater correction, for waiting temperature to stabilize.
//	UpdateHeaterControls();
		if (hotrinse_flag != 1)
   8970e:	4b0a      	ldr	r3, [pc, #40]	; (89738 <Cl_Heater_Event_Handler+0x50>)
   89710:	781b      	ldrb	r3, [r3, #0]
   89712:	2b01      	cmp	r3, #1
   89714:	d00a      	beq.n	8972c <Cl_Heater_Event_Handler+0x44>
		{
			Heat_Correction();
   89716:	4b09      	ldr	r3, [pc, #36]	; (8973c <Cl_Heater_Event_Handler+0x54>)
   89718:	4798      	blx	r3
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   8971a:	e007      	b.n	8972c <Cl_Heater_Event_Handler+0x44>
	case CL_HEATER_EVENT_TARGET_TEMP:
	prescribed_temp = data;
   8971c:	4a08      	ldr	r2, [pc, #32]	; (89740 <Cl_Heater_Event_Handler+0x58>)
   8971e:	683b      	ldr	r3, [r7, #0]
   89720:	6013      	str	r3, [r2, #0]
 
	break;
   89722:	e004      	b.n	8972e <Cl_Heater_Event_Handler+0x46>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
   89724:	4b07      	ldr	r3, [pc, #28]	; (89744 <Cl_Heater_Event_Handler+0x5c>)
   89726:	2200      	movs	r2, #0
   89728:	701a      	strb	r2, [r3, #0]
	break;
   8972a:	e000      	b.n	8972e <Cl_Heater_Event_Handler+0x46>
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   8972c:	bf00      	nop
	cl_temp3_stable = false;
	break;
	default:break;
}
	
	return (Cl_heeater_retcode);
   8972e:	7bfb      	ldrb	r3, [r7, #15]
}
   89730:	4618      	mov	r0, r3
   89732:	3710      	adds	r7, #16
   89734:	46bd      	mov	sp, r7
   89736:	bd80      	pop	{r7, pc}
   89738:	20072821 	.word	0x20072821
   8973c:	00089a91 	.word	0x00089a91
   89740:	2007043c 	.word	0x2007043c
   89744:	200727c9 	.word	0x200727c9

00089748 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   89748:	b590      	push	{r4, r7, lr}
   8974a:	b087      	sub	sp, #28
   8974c:	af00      	add	r7, sp, #0
   8974e:	4603      	mov	r3, r0
   89750:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   89752:	2300      	movs	r3, #0
   89754:	75fb      	strb	r3, [r7, #23]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   89756:	4ba6      	ldr	r3, [pc, #664]	; (899f0 <SetHeaterState+0x2a8>)
   89758:	781a      	ldrb	r2, [r3, #0]
   8975a:	4ba6      	ldr	r3, [pc, #664]	; (899f4 <SetHeaterState+0x2ac>)
   8975c:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   8975e:	4aa4      	ldr	r2, [pc, #656]	; (899f0 <SetHeaterState+0x2a8>)
   89760:	79fb      	ldrb	r3, [r7, #7]
   89762:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   89764:	79fb      	ldrb	r3, [r7, #7]
   89766:	2b04      	cmp	r3, #4
   89768:	d104      	bne.n	89774 <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   8976a:	4ba3      	ldr	r3, [pc, #652]	; (899f8 <SetHeaterState+0x2b0>)
   8976c:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   8976e:	4ba3      	ldr	r3, [pc, #652]	; (899fc <SetHeaterState+0x2b4>)
   89770:	2200      	movs	r2, #0
   89772:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   89774:	79fb      	ldrb	r3, [r7, #7]
   89776:	2b01      	cmp	r3, #1
   89778:	d105      	bne.n	89786 <SetHeaterState+0x3e>
	{
// 				sec_clock  = 0;
// 				sec_clock_total = 0;
				cl_temp3_stable = false;
   8977a:	4ba1      	ldr	r3, [pc, #644]	; (89a00 <SetHeaterState+0x2b8>)
   8977c:	2200      	movs	r2, #0
   8977e:	701a      	strb	r2, [r3, #0]
				heater_substate = CL_HEATER_SUBSTATE_OFF;
   89780:	4b9e      	ldr	r3, [pc, #632]	; (899fc <SetHeaterState+0x2b4>)
   89782:	2200      	movs	r2, #0
   89784:	701a      	strb	r2, [r3, #0]
	}	

		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89786:	f107 0308 	add.w	r3, r7, #8
   8978a:	4619      	mov	r1, r3
   8978c:	2012      	movs	r0, #18
   8978e:	4b9d      	ldr	r3, [pc, #628]	; (89a04 <SetHeaterState+0x2bc>)
   89790:	4798      	blx	r3

		if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   89792:	79fb      	ldrb	r3, [r7, #7]
   89794:	2b02      	cmp	r3, #2
   89796:	d056      	beq.n	89846 <SetHeaterState+0xfe>
   89798:	79fb      	ldrb	r3, [r7, #7]
   8979a:	2b03      	cmp	r3, #3
   8979c:	d053      	beq.n	89846 <SetHeaterState+0xfe>
		{
					
		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   8979e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   897a2:	461a      	mov	r2, r3
   897a4:	f649 5308 	movw	r3, #40200	; 0x9d08
   897a8:	fb03 f302 	mul.w	r3, r3, r2
   897ac:	2b00      	cmp	r3, #0
   897ae:	da02      	bge.n	897b6 <SetHeaterState+0x6e>
   897b0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   897b4:	33ff      	adds	r3, #255	; 0xff
   897b6:	141b      	asrs	r3, r3, #16
   897b8:	82bb      	strh	r3, [r7, #20]
		res_temp_lookuptable(cal_data);
   897ba:	8abb      	ldrh	r3, [r7, #20]
   897bc:	4618      	mov	r0, r3
   897be:	4b92      	ldr	r3, [pc, #584]	; (89a08 <SetHeaterState+0x2c0>)
   897c0:	4798      	blx	r3
		Tmp1Val = res_temp_value;
   897c2:	4b92      	ldr	r3, [pc, #584]	; (89a0c <SetHeaterState+0x2c4>)
   897c4:	681b      	ldr	r3, [r3, #0]
   897c6:	4a92      	ldr	r2, [pc, #584]	; (89a10 <SetHeaterState+0x2c8>)
   897c8:	6013      	str	r3, [r2, #0]
		 Tmp1Val = Tmp1Val - 2.5 + 1.2;
   897ca:	4b91      	ldr	r3, [pc, #580]	; (89a10 <SetHeaterState+0x2c8>)
   897cc:	681a      	ldr	r2, [r3, #0]
   897ce:	4b91      	ldr	r3, [pc, #580]	; (89a14 <SetHeaterState+0x2cc>)
   897d0:	4610      	mov	r0, r2
   897d2:	4798      	blx	r3
   897d4:	4c90      	ldr	r4, [pc, #576]	; (89a18 <SetHeaterState+0x2d0>)
   897d6:	f04f 0200 	mov.w	r2, #0
   897da:	4b90      	ldr	r3, [pc, #576]	; (89a1c <SetHeaterState+0x2d4>)
   897dc:	47a0      	blx	r4
   897de:	4603      	mov	r3, r0
   897e0:	460c      	mov	r4, r1
   897e2:	4618      	mov	r0, r3
   897e4:	4621      	mov	r1, r4
   897e6:	4c8e      	ldr	r4, [pc, #568]	; (89a20 <SetHeaterState+0x2d8>)
   897e8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   897ec:	4b8d      	ldr	r3, [pc, #564]	; (89a24 <SetHeaterState+0x2dc>)
   897ee:	47a0      	blx	r4
   897f0:	4603      	mov	r3, r0
   897f2:	460c      	mov	r4, r1
   897f4:	4619      	mov	r1, r3
   897f6:	4622      	mov	r2, r4
   897f8:	4b8b      	ldr	r3, [pc, #556]	; (89a28 <SetHeaterState+0x2e0>)
   897fa:	4608      	mov	r0, r1
   897fc:	4611      	mov	r1, r2
   897fe:	4798      	blx	r3
   89800:	4602      	mov	r2, r0
   89802:	4b83      	ldr	r3, [pc, #524]	; (89a10 <SetHeaterState+0x2c8>)
   89804:	601a      	str	r2, [r3, #0]
		 
	//	 avg_duty  = -84.24 * initial_temp1 + 5298;

 	//	 avg_duty = 2500;
	 
	 Cl_Uint32Type SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   89806:	4b89      	ldr	r3, [pc, #548]	; (89a2c <SetHeaterState+0x2e4>)
   89808:	695b      	ldr	r3, [r3, #20]
   8980a:	613b      	str	r3, [r7, #16]
		  SYSTEM_FLOW = 300;											// Gopal: this shouldnot be hard coded... Flow rate from UI should be loaded to SYSTEM FLOW
   8980c:	f44f 7396 	mov.w	r3, #300	; 0x12c
   89810:	613b      	str	r3, [r7, #16]
		  
		  avg_duty = 2200;
   89812:	4b87      	ldr	r3, [pc, #540]	; (89a30 <SetHeaterState+0x2e8>)
   89814:	f640 0298 	movw	r2, #2200	; 0x898
   89818:	801a      	strh	r2, [r3, #0]
		  if (Tmp1Val <= 26 || SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   8981a:	4b7d      	ldr	r3, [pc, #500]	; (89a10 <SetHeaterState+0x2c8>)
   8981c:	681a      	ldr	r2, [r3, #0]
   8981e:	4b85      	ldr	r3, [pc, #532]	; (89a34 <SetHeaterState+0x2ec>)
   89820:	4985      	ldr	r1, [pc, #532]	; (89a38 <SetHeaterState+0x2f0>)
   89822:	4610      	mov	r0, r2
   89824:	4798      	blx	r3
   89826:	4603      	mov	r3, r0
   89828:	2b00      	cmp	r3, #0
   8982a:	d103      	bne.n	89834 <SetHeaterState+0xec>
   8982c:	693b      	ldr	r3, [r7, #16]
   8982e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89832:	d103      	bne.n	8983c <SetHeaterState+0xf4>
		  {
			  avg_duty = 2400;
   89834:	4b7e      	ldr	r3, [pc, #504]	; (89a30 <SetHeaterState+0x2e8>)
   89836:	f44f 6216 	mov.w	r2, #2400	; 0x960
   8983a:	801a      	strh	r2, [r3, #0]
		  }
		 //avg_duty_bak = avg_duty;
		 
		 avg_duty = avg_duty ;
   8983c:	4b7c      	ldr	r3, [pc, #496]	; (89a30 <SetHeaterState+0x2e8>)
   8983e:	f9b3 2000 	ldrsh.w	r2, [r3]
   89842:	4b7b      	ldr	r3, [pc, #492]	; (89a30 <SetHeaterState+0x2e8>)
   89844:	801a      	strh	r2, [r3, #0]
		 
		}

		 
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89846:	f107 0308 	add.w	r3, r7, #8
   8984a:	4619      	mov	r1, r3
   8984c:	2012      	movs	r0, #18
   8984e:	4b6d      	ldr	r3, [pc, #436]	; (89a04 <SetHeaterState+0x2bc>)
   89850:	4798      	blx	r3
			 {
		 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   89852:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   89856:	461a      	mov	r2, r3
   89858:	f649 5308 	movw	r3, #40200	; 0x9d08
   8985c:	fb03 f302 	mul.w	r3, r3, r2
   89860:	2b00      	cmp	r3, #0
   89862:	da02      	bge.n	8986a <SetHeaterState+0x122>
   89864:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   89868:	33ff      	adds	r3, #255	; 0xff
   8986a:	141b      	asrs	r3, r3, #16
   8986c:	81fb      	strh	r3, [r7, #14]
		 			res_temp_lookuptable(cal_data);
   8986e:	89fb      	ldrh	r3, [r7, #14]
   89870:	4618      	mov	r0, r3
   89872:	4b65      	ldr	r3, [pc, #404]	; (89a08 <SetHeaterState+0x2c0>)
   89874:	4798      	blx	r3
		 			 Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   89876:	4b65      	ldr	r3, [pc, #404]	; (89a0c <SetHeaterState+0x2c4>)
   89878:	681a      	ldr	r2, [r3, #0]
   8987a:	4b70      	ldr	r3, [pc, #448]	; (89a3c <SetHeaterState+0x2f4>)
   8987c:	4970      	ldr	r1, [pc, #448]	; (89a40 <SetHeaterState+0x2f8>)
   8987e:	4610      	mov	r0, r2
   89880:	4798      	blx	r3
   89882:	4603      	mov	r3, r0
   89884:	461a      	mov	r2, r3
   89886:	4b62      	ldr	r3, [pc, #392]	; (89a10 <SetHeaterState+0x2c8>)
   89888:	601a      	str	r2, [r3, #0]
					 Tmp1Val = Tmp1Val - 2.5 + 1.2;
   8988a:	4b61      	ldr	r3, [pc, #388]	; (89a10 <SetHeaterState+0x2c8>)
   8988c:	681a      	ldr	r2, [r3, #0]
   8988e:	4b61      	ldr	r3, [pc, #388]	; (89a14 <SetHeaterState+0x2cc>)
   89890:	4610      	mov	r0, r2
   89892:	4798      	blx	r3
   89894:	4c60      	ldr	r4, [pc, #384]	; (89a18 <SetHeaterState+0x2d0>)
   89896:	f04f 0200 	mov.w	r2, #0
   8989a:	4b60      	ldr	r3, [pc, #384]	; (89a1c <SetHeaterState+0x2d4>)
   8989c:	47a0      	blx	r4
   8989e:	4603      	mov	r3, r0
   898a0:	460c      	mov	r4, r1
   898a2:	4618      	mov	r0, r3
   898a4:	4621      	mov	r1, r4
   898a6:	4c5e      	ldr	r4, [pc, #376]	; (89a20 <SetHeaterState+0x2d8>)
   898a8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   898ac:	4b5d      	ldr	r3, [pc, #372]	; (89a24 <SetHeaterState+0x2dc>)
   898ae:	47a0      	blx	r4
   898b0:	4603      	mov	r3, r0
   898b2:	460c      	mov	r4, r1
   898b4:	4619      	mov	r1, r3
   898b6:	4622      	mov	r2, r4
   898b8:	4b5b      	ldr	r3, [pc, #364]	; (89a28 <SetHeaterState+0x2e0>)
   898ba:	4608      	mov	r0, r1
   898bc:	4611      	mov	r1, r2
   898be:	4798      	blx	r3
   898c0:	4602      	mov	r2, r0
   898c2:	4b53      	ldr	r3, [pc, #332]	; (89a10 <SetHeaterState+0x2c8>)
   898c4:	601a      	str	r2, [r3, #0]
			//		initial_temp1 = Tmp1Val;
			 }
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   898c6:	f107 0308 	add.w	r3, r7, #8
   898ca:	4619      	mov	r1, r3
   898cc:	2013      	movs	r0, #19
   898ce:	4b4d      	ldr	r3, [pc, #308]	; (89a04 <SetHeaterState+0x2bc>)
   898d0:	4798      	blx	r3
			 {
				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   898d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   898d6:	461a      	mov	r2, r3
   898d8:	f649 5308 	movw	r3, #40200	; 0x9d08
   898dc:	fb03 f302 	mul.w	r3, r3, r2
   898e0:	2b00      	cmp	r3, #0
   898e2:	da02      	bge.n	898ea <SetHeaterState+0x1a2>
   898e4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   898e8:	33ff      	adds	r3, #255	; 0xff
   898ea:	141b      	asrs	r3, r3, #16
   898ec:	81bb      	strh	r3, [r7, #12]
				 res_temp_lookuptable(cal_data);
   898ee:	89bb      	ldrh	r3, [r7, #12]
   898f0:	4618      	mov	r0, r3
   898f2:	4b45      	ldr	r3, [pc, #276]	; (89a08 <SetHeaterState+0x2c0>)
   898f4:	4798      	blx	r3
				  Tmp2Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   898f6:	4b45      	ldr	r3, [pc, #276]	; (89a0c <SetHeaterState+0x2c4>)
   898f8:	681a      	ldr	r2, [r3, #0]
   898fa:	4b50      	ldr	r3, [pc, #320]	; (89a3c <SetHeaterState+0x2f4>)
   898fc:	4950      	ldr	r1, [pc, #320]	; (89a40 <SetHeaterState+0x2f8>)
   898fe:	4610      	mov	r0, r2
   89900:	4798      	blx	r3
   89902:	4603      	mov	r3, r0
   89904:	461a      	mov	r2, r3
   89906:	4b4f      	ldr	r3, [pc, #316]	; (89a44 <SetHeaterState+0x2fc>)
   89908:	601a      	str	r2, [r3, #0]
				  Tmp2Val = Tmp2Val - 2.5 + 1.2;
   8990a:	4b4e      	ldr	r3, [pc, #312]	; (89a44 <SetHeaterState+0x2fc>)
   8990c:	681a      	ldr	r2, [r3, #0]
   8990e:	4b41      	ldr	r3, [pc, #260]	; (89a14 <SetHeaterState+0x2cc>)
   89910:	4610      	mov	r0, r2
   89912:	4798      	blx	r3
   89914:	4c40      	ldr	r4, [pc, #256]	; (89a18 <SetHeaterState+0x2d0>)
   89916:	f04f 0200 	mov.w	r2, #0
   8991a:	4b40      	ldr	r3, [pc, #256]	; (89a1c <SetHeaterState+0x2d4>)
   8991c:	47a0      	blx	r4
   8991e:	4603      	mov	r3, r0
   89920:	460c      	mov	r4, r1
   89922:	4618      	mov	r0, r3
   89924:	4621      	mov	r1, r4
   89926:	4c3e      	ldr	r4, [pc, #248]	; (89a20 <SetHeaterState+0x2d8>)
   89928:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8992c:	4b3d      	ldr	r3, [pc, #244]	; (89a24 <SetHeaterState+0x2dc>)
   8992e:	47a0      	blx	r4
   89930:	4603      	mov	r3, r0
   89932:	460c      	mov	r4, r1
   89934:	4619      	mov	r1, r3
   89936:	4622      	mov	r2, r4
   89938:	4b3b      	ldr	r3, [pc, #236]	; (89a28 <SetHeaterState+0x2e0>)
   8993a:	4608      	mov	r0, r1
   8993c:	4611      	mov	r1, r2
   8993e:	4798      	blx	r3
   89940:	4602      	mov	r2, r0
   89942:	4b40      	ldr	r3, [pc, #256]	; (89a44 <SetHeaterState+0x2fc>)
   89944:	601a      	str	r2, [r3, #0]
				 prev_temp2val = Tmp2Val;
   89946:	4b3f      	ldr	r3, [pc, #252]	; (89a44 <SetHeaterState+0x2fc>)
   89948:	681a      	ldr	r2, [r3, #0]
   8994a:	4b3f      	ldr	r3, [pc, #252]	; (89a48 <SetHeaterState+0x300>)
   8994c:	4610      	mov	r0, r2
   8994e:	4798      	blx	r3
   89950:	4603      	mov	r3, r0
   89952:	b21a      	sxth	r2, r3
   89954:	4b3d      	ldr	r3, [pc, #244]	; (89a4c <SetHeaterState+0x304>)
   89956:	801a      	strh	r2, [r3, #0]
			 }
		 	
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   89958:	f107 0308 	add.w	r3, r7, #8
   8995c:	4619      	mov	r1, r3
   8995e:	2014      	movs	r0, #20
   89960:	4b28      	ldr	r3, [pc, #160]	; (89a04 <SetHeaterState+0x2bc>)
   89962:	4798      	blx	r3
			 {
				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   89964:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
   89968:	461a      	mov	r2, r3
   8996a:	f649 5308 	movw	r3, #40200	; 0x9d08
   8996e:	fb03 f302 	mul.w	r3, r3, r2
   89972:	2b00      	cmp	r3, #0
   89974:	da02      	bge.n	8997c <SetHeaterState+0x234>
   89976:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8997a:	33ff      	adds	r3, #255	; 0xff
   8997c:	141b      	asrs	r3, r3, #16
   8997e:	817b      	strh	r3, [r7, #10]
				 res_temp_lookuptable(cal_data);
   89980:	897b      	ldrh	r3, [r7, #10]
   89982:	4618      	mov	r0, r3
   89984:	4b20      	ldr	r3, [pc, #128]	; (89a08 <SetHeaterState+0x2c0>)
   89986:	4798      	blx	r3
				 Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
   89988:	4b20      	ldr	r3, [pc, #128]	; (89a0c <SetHeaterState+0x2c4>)
   8998a:	681a      	ldr	r2, [r3, #0]
   8998c:	4b2b      	ldr	r3, [pc, #172]	; (89a3c <SetHeaterState+0x2f4>)
   8998e:	492c      	ldr	r1, [pc, #176]	; (89a40 <SetHeaterState+0x2f8>)
   89990:	4610      	mov	r0, r2
   89992:	4798      	blx	r3
   89994:	4603      	mov	r3, r0
   89996:	461a      	mov	r2, r3
   89998:	4b2d      	ldr	r3, [pc, #180]	; (89a50 <SetHeaterState+0x308>)
   8999a:	601a      	str	r2, [r3, #0]
				 Tmp3Val = Tmp3Val - 3.1 + 1.4;
   8999c:	4b2c      	ldr	r3, [pc, #176]	; (89a50 <SetHeaterState+0x308>)
   8999e:	681a      	ldr	r2, [r3, #0]
   899a0:	4b1c      	ldr	r3, [pc, #112]	; (89a14 <SetHeaterState+0x2cc>)
   899a2:	4610      	mov	r0, r2
   899a4:	4798      	blx	r3
   899a6:	4c1c      	ldr	r4, [pc, #112]	; (89a18 <SetHeaterState+0x2d0>)
   899a8:	a30d      	add	r3, pc, #52	; (adr r3, 899e0 <SetHeaterState+0x298>)
   899aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   899ae:	47a0      	blx	r4
   899b0:	4603      	mov	r3, r0
   899b2:	460c      	mov	r4, r1
   899b4:	4618      	mov	r0, r3
   899b6:	4621      	mov	r1, r4
   899b8:	4c19      	ldr	r4, [pc, #100]	; (89a20 <SetHeaterState+0x2d8>)
   899ba:	a30b      	add	r3, pc, #44	; (adr r3, 899e8 <SetHeaterState+0x2a0>)
   899bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   899c0:	47a0      	blx	r4
   899c2:	4603      	mov	r3, r0
   899c4:	460c      	mov	r4, r1
   899c6:	4619      	mov	r1, r3
   899c8:	4622      	mov	r2, r4
   899ca:	4b17      	ldr	r3, [pc, #92]	; (89a28 <SetHeaterState+0x2e0>)
   899cc:	4608      	mov	r0, r1
   899ce:	4611      	mov	r1, r2
   899d0:	4798      	blx	r3
   899d2:	4602      	mov	r2, r0
   899d4:	4b1e      	ldr	r3, [pc, #120]	; (89a50 <SetHeaterState+0x308>)
   899d6:	601a      	str	r2, [r3, #0]
				 prev_temp3val = Tmp3Val;
   899d8:	4b1d      	ldr	r3, [pc, #116]	; (89a50 <SetHeaterState+0x308>)
   899da:	681a      	ldr	r2, [r3, #0]
   899dc:	e03a      	b.n	89a54 <SetHeaterState+0x30c>
   899de:	bf00      	nop
   899e0:	cccccccd 	.word	0xcccccccd
   899e4:	4008cccc 	.word	0x4008cccc
   899e8:	66666666 	.word	0x66666666
   899ec:	3ff66666 	.word	0x3ff66666
   899f0:	200720fb 	.word	0x200720fb
   899f4:	200720fc 	.word	0x200720fc
   899f8:	00096869 	.word	0x00096869
   899fc:	20072100 	.word	0x20072100
   89a00:	200727c9 	.word	0x200727c9
   89a04:	0008d499 	.word	0x0008d499
   89a08:	0008e659 	.word	0x0008e659
   89a0c:	200725ec 	.word	0x200725ec
   89a10:	2007210c 	.word	0x2007210c
   89a14:	000a1d65 	.word	0x000a1d65
   89a18:	000a1aa5 	.word	0x000a1aa5
   89a1c:	40040000 	.word	0x40040000
   89a20:	000a1aa9 	.word	0x000a1aa9
   89a24:	3ff33333 	.word	0x3ff33333
   89a28:	000a23d1 	.word	0x000a23d1
   89a2c:	20073138 	.word	0x20073138
   89a30:	200720fe 	.word	0x200720fe
   89a34:	000a29dd 	.word	0x000a29dd
   89a38:	41d00000 	.word	0x41d00000
   89a3c:	000a27f5 	.word	0x000a27f5
   89a40:	42c80000 	.word	0x42c80000
   89a44:	20072110 	.word	0x20072110
   89a48:	000a2a19 	.word	0x000a2a19
   89a4c:	20072102 	.word	0x20072102
   89a50:	20072114 	.word	0x20072114
   89a54:	4b09      	ldr	r3, [pc, #36]	; (89a7c <SetHeaterState+0x334>)
   89a56:	4610      	mov	r0, r2
   89a58:	4798      	blx	r3
   89a5a:	4603      	mov	r3, r0
   89a5c:	b21a      	sxth	r2, r3
   89a5e:	4b08      	ldr	r3, [pc, #32]	; (89a80 <SetHeaterState+0x338>)
   89a60:	801a      	strh	r2, [r3, #0]
			 }
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   89a62:	4b08      	ldr	r3, [pc, #32]	; (89a84 <SetHeaterState+0x33c>)
   89a64:	781b      	ldrb	r3, [r3, #0]
   89a66:	2b06      	cmp	r3, #6
   89a68:	d102      	bne.n	89a70 <SetHeaterState+0x328>
	{
		//stable_avg_dty = avg_duty;
		avg_duty = 100;
   89a6a:	4b07      	ldr	r3, [pc, #28]	; (89a88 <SetHeaterState+0x340>)
   89a6c:	2264      	movs	r2, #100	; 0x64
   89a6e:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   89a70:	7dfb      	ldrb	r3, [r7, #23]
}
   89a72:	4618      	mov	r0, r3
   89a74:	371c      	adds	r7, #28
   89a76:	46bd      	mov	sp, r7
   89a78:	bd90      	pop	{r4, r7, pc}
   89a7a:	bf00      	nop
   89a7c:	000a2a19 	.word	0x000a2a19
   89a80:	20072104 	.word	0x20072104
   89a84:	200720fb 	.word	0x200720fb
   89a88:	200720fe 	.word	0x200720fe
   89a8c:	00000000 	.word	0x00000000

00089a90 <Heat_Correction>:

int16_t Heat_Correction()
{
   89a90:	b590      	push	{r4, r7, lr}
   89a92:	b083      	sub	sp, #12
   89a94:	af00      	add	r7, sp, #0
	count_500ms ++;
   89a96:	4b17      	ldr	r3, [pc, #92]	; (89af4 <Heat_Correction+0x64>)
   89a98:	881b      	ldrh	r3, [r3, #0]
   89a9a:	3301      	adds	r3, #1
   89a9c:	b29a      	uxth	r2, r3
   89a9e:	4b15      	ldr	r3, [pc, #84]	; (89af4 <Heat_Correction+0x64>)
   89aa0:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   89aa2:	4b15      	ldr	r3, [pc, #84]	; (89af8 <Heat_Correction+0x68>)
   89aa4:	881b      	ldrh	r3, [r3, #0]
   89aa6:	3301      	adds	r3, #1
   89aa8:	b29a      	uxth	r2, r3
   89aaa:	4b13      	ldr	r3, [pc, #76]	; (89af8 <Heat_Correction+0x68>)
   89aac:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   89aae:	4b13      	ldr	r3, [pc, #76]	; (89afc <Heat_Correction+0x6c>)
   89ab0:	881b      	ldrh	r3, [r3, #0]
   89ab2:	3301      	adds	r3, #1
   89ab4:	b29a      	uxth	r2, r3
   89ab6:	4b11      	ldr	r3, [pc, #68]	; (89afc <Heat_Correction+0x6c>)
   89ab8:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   89aba:	4b0e      	ldr	r3, [pc, #56]	; (89af4 <Heat_Correction+0x64>)
   89abc:	881b      	ldrh	r3, [r3, #0]
   89abe:	4a10      	ldr	r2, [pc, #64]	; (89b00 <Heat_Correction+0x70>)
   89ac0:	fba2 1203 	umull	r1, r2, r2, r3
   89ac4:	0992      	lsrs	r2, r2, #6
   89ac6:	f44f 7116 	mov.w	r1, #600	; 0x258
   89aca:	fb01 f202 	mul.w	r2, r1, r2
   89ace:	1a9b      	subs	r3, r3, r2
   89ad0:	b29b      	uxth	r3, r3
   89ad2:	2b00      	cmp	r3, #0
   89ad4:	d107      	bne.n	89ae6 <Heat_Correction+0x56>
	{
		Past_TS2 = Tmp2Val;
   89ad6:	4b0b      	ldr	r3, [pc, #44]	; (89b04 <Heat_Correction+0x74>)
   89ad8:	681b      	ldr	r3, [r3, #0]
   89ada:	4a0b      	ldr	r2, [pc, #44]	; (89b08 <Heat_Correction+0x78>)
   89adc:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   89ade:	4b05      	ldr	r3, [pc, #20]	; (89af4 <Heat_Correction+0x64>)
   89ae0:	881a      	ldrh	r2, [r3, #0]
   89ae2:	4b0a      	ldr	r3, [pc, #40]	; (89b0c <Heat_Correction+0x7c>)
   89ae4:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   89ae6:	4b0a      	ldr	r3, [pc, #40]	; (89b10 <Heat_Correction+0x80>)
   89ae8:	781b      	ldrb	r3, [r3, #0]
   89aea:	2b04      	cmp	r3, #4
   89aec:	d114      	bne.n	89b18 <Heat_Correction+0x88>
	{
		sv_cntrl_poweroffheater();
   89aee:	4b09      	ldr	r3, [pc, #36]	; (89b14 <Heat_Correction+0x84>)
   89af0:	4798      	blx	r3
		return;
   89af2:	e1e7      	b.n	89ec4 <Heat_Correction+0x434>
   89af4:	20072118 	.word	0x20072118
   89af8:	2007211a 	.word	0x2007211a
   89afc:	2007211c 	.word	0x2007211c
   89b00:	1b4e81b5 	.word	0x1b4e81b5
   89b04:	20072110 	.word	0x20072110
   89b08:	20072124 	.word	0x20072124
   89b0c:	2007211e 	.word	0x2007211e
   89b10:	200720fb 	.word	0x200720fb
   89b14:	00096869 	.word	0x00096869
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   89b18:	4ba5      	ldr	r3, [pc, #660]	; (89db0 <Heat_Correction+0x320>)
   89b1a:	781b      	ldrb	r3, [r3, #0]
   89b1c:	2b00      	cmp	r3, #0
   89b1e:	f000 81d0 	beq.w	89ec2 <Heat_Correction+0x432>
   89b22:	4ba3      	ldr	r3, [pc, #652]	; (89db0 <Heat_Correction+0x320>)
   89b24:	781b      	ldrb	r3, [r3, #0]
   89b26:	2b00      	cmp	r3, #0
   89b28:	f000 81cb 	beq.w	89ec2 <Heat_Correction+0x432>
	}
//avg_duty is set to value 2240 for TS3 = 37.4 at global level
    
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if(HeaterState == CL_HEATER_STATE_ON)
   89b2c:	4ba0      	ldr	r3, [pc, #640]	; (89db0 <Heat_Correction+0x320>)
   89b2e:	781b      	ldrb	r3, [r3, #0]
   89b30:	2b01      	cmp	r3, #1
   89b32:	d107      	bne.n	89b44 <Heat_Correction+0xb4>
	{
	 		sv_cntrl_poweronheater();
   89b34:	4b9f      	ldr	r3, [pc, #636]	; (89db4 <Heat_Correction+0x324>)
   89b36:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   89b38:	4b9f      	ldr	r3, [pc, #636]	; (89db8 <Heat_Correction+0x328>)
   89b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
   89b3e:	4618      	mov	r0, r3
   89b40:	4b9e      	ldr	r3, [pc, #632]	; (89dbc <Heat_Correction+0x32c>)
   89b42:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   89b44:	463b      	mov	r3, r7
   89b46:	4619      	mov	r1, r3
   89b48:	2012      	movs	r0, #18
   89b4a:	4b9d      	ldr	r3, [pc, #628]	; (89dc0 <Heat_Correction+0x330>)
   89b4c:	4798      	blx	r3
	{
	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);             // resistance of PT100
   89b4e:	f9b7 3000 	ldrsh.w	r3, [r7]
   89b52:	461a      	mov	r2, r3
   89b54:	f649 5308 	movw	r3, #40200	; 0x9d08
   89b58:	fb03 f302 	mul.w	r3, r3, r2
   89b5c:	2b00      	cmp	r3, #0
   89b5e:	da02      	bge.n	89b66 <Heat_Correction+0xd6>
   89b60:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   89b64:	33ff      	adds	r3, #255	; 0xff
   89b66:	141b      	asrs	r3, r3, #16
   89b68:	80fb      	strh	r3, [r7, #6]
	 	res_temp_lookuptable(cal_data);                                    // temperature from look up table in 4 digits
   89b6a:	88fb      	ldrh	r3, [r7, #6]
   89b6c:	4618      	mov	r0, r3
   89b6e:	4b95      	ldr	r3, [pc, #596]	; (89dc4 <Heat_Correction+0x334>)
   89b70:	4798      	blx	r3
	 	Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
   89b72:	4b95      	ldr	r3, [pc, #596]	; (89dc8 <Heat_Correction+0x338>)
   89b74:	681a      	ldr	r2, [r3, #0]
   89b76:	4b95      	ldr	r3, [pc, #596]	; (89dcc <Heat_Correction+0x33c>)
   89b78:	4995      	ldr	r1, [pc, #596]	; (89dd0 <Heat_Correction+0x340>)
   89b7a:	4610      	mov	r0, r2
   89b7c:	4798      	blx	r3
   89b7e:	4603      	mov	r3, r0
   89b80:	461a      	mov	r2, r3
   89b82:	4b94      	ldr	r3, [pc, #592]	; (89dd4 <Heat_Correction+0x344>)
   89b84:	601a      	str	r2, [r3, #0]
		Tmp1Val = Tmp1Val - 2.5 + 1.2; 
   89b86:	4b93      	ldr	r3, [pc, #588]	; (89dd4 <Heat_Correction+0x344>)
   89b88:	681a      	ldr	r2, [r3, #0]
   89b8a:	4b93      	ldr	r3, [pc, #588]	; (89dd8 <Heat_Correction+0x348>)
   89b8c:	4610      	mov	r0, r2
   89b8e:	4798      	blx	r3
   89b90:	4c92      	ldr	r4, [pc, #584]	; (89ddc <Heat_Correction+0x34c>)
   89b92:	f04f 0200 	mov.w	r2, #0
   89b96:	4b92      	ldr	r3, [pc, #584]	; (89de0 <Heat_Correction+0x350>)
   89b98:	47a0      	blx	r4
   89b9a:	4603      	mov	r3, r0
   89b9c:	460c      	mov	r4, r1
   89b9e:	4618      	mov	r0, r3
   89ba0:	4621      	mov	r1, r4
   89ba2:	4c90      	ldr	r4, [pc, #576]	; (89de4 <Heat_Correction+0x354>)
   89ba4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   89ba8:	4b8f      	ldr	r3, [pc, #572]	; (89de8 <Heat_Correction+0x358>)
   89baa:	47a0      	blx	r4
   89bac:	4603      	mov	r3, r0
   89bae:	460c      	mov	r4, r1
   89bb0:	4619      	mov	r1, r3
   89bb2:	4622      	mov	r2, r4
   89bb4:	4b8d      	ldr	r3, [pc, #564]	; (89dec <Heat_Correction+0x35c>)
   89bb6:	4608      	mov	r0, r1
   89bb8:	4611      	mov	r1, r2
   89bba:	4798      	blx	r3
   89bbc:	4602      	mov	r2, r0
   89bbe:	4b85      	ldr	r3, [pc, #532]	; (89dd4 <Heat_Correction+0x344>)
   89bc0:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))
   89bc2:	4b8b      	ldr	r3, [pc, #556]	; (89df0 <Heat_Correction+0x360>)
   89bc4:	881a      	ldrh	r2, [r3, #0]
   89bc6:	4b8b      	ldr	r3, [pc, #556]	; (89df4 <Heat_Correction+0x364>)
   89bc8:	fba3 1302 	umull	r1, r3, r3, r2
   89bcc:	0959      	lsrs	r1, r3, #5
   89bce:	460b      	mov	r3, r1
   89bd0:	009b      	lsls	r3, r3, #2
   89bd2:	440b      	add	r3, r1
   89bd4:	00db      	lsls	r3, r3, #3
   89bd6:	1ad3      	subs	r3, r2, r3
   89bd8:	b29b      	uxth	r3, r3
   89bda:	2b00      	cmp	r3, #0
   89bdc:	d103      	bne.n	89be6 <Heat_Correction+0x156>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   89bde:	4b86      	ldr	r3, [pc, #536]	; (89df8 <Heat_Correction+0x368>)
   89be0:	681b      	ldr	r3, [r3, #0]
   89be2:	4a86      	ldr	r2, [pc, #536]	; (89dfc <Heat_Correction+0x36c>)
   89be4:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   89be6:	463b      	mov	r3, r7
   89be8:	4619      	mov	r1, r3
   89bea:	2013      	movs	r0, #19
   89bec:	4b74      	ldr	r3, [pc, #464]	; (89dc0 <Heat_Correction+0x330>)
   89bee:	4798      	blx	r3
	{
		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
   89bf0:	f9b7 3000 	ldrsh.w	r3, [r7]
   89bf4:	461a      	mov	r2, r3
   89bf6:	f649 5308 	movw	r3, #40200	; 0x9d08
   89bfa:	fb03 f302 	mul.w	r3, r3, r2
   89bfe:	2b00      	cmp	r3, #0
   89c00:	da02      	bge.n	89c08 <Heat_Correction+0x178>
   89c02:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   89c06:	33ff      	adds	r3, #255	; 0xff
   89c08:	141b      	asrs	r3, r3, #16
   89c0a:	80bb      	strh	r3, [r7, #4]
		res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
   89c0c:	88bb      	ldrh	r3, [r7, #4]
   89c0e:	4618      	mov	r0, r3
   89c10:	4b6c      	ldr	r3, [pc, #432]	; (89dc4 <Heat_Correction+0x334>)
   89c12:	4798      	blx	r3
		Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
   89c14:	4b6c      	ldr	r3, [pc, #432]	; (89dc8 <Heat_Correction+0x338>)
   89c16:	681a      	ldr	r2, [r3, #0]
   89c18:	4b6c      	ldr	r3, [pc, #432]	; (89dcc <Heat_Correction+0x33c>)
   89c1a:	496d      	ldr	r1, [pc, #436]	; (89dd0 <Heat_Correction+0x340>)
   89c1c:	4610      	mov	r0, r2
   89c1e:	4798      	blx	r3
   89c20:	4603      	mov	r3, r0
   89c22:	461a      	mov	r2, r3
   89c24:	4b74      	ldr	r3, [pc, #464]	; (89df8 <Heat_Correction+0x368>)
   89c26:	601a      	str	r2, [r3, #0]
		Tmp2Val = Tmp2Val - 2.5 + 1.2;                                     // sensor offset
   89c28:	4b73      	ldr	r3, [pc, #460]	; (89df8 <Heat_Correction+0x368>)
   89c2a:	681a      	ldr	r2, [r3, #0]
   89c2c:	4b6a      	ldr	r3, [pc, #424]	; (89dd8 <Heat_Correction+0x348>)
   89c2e:	4610      	mov	r0, r2
   89c30:	4798      	blx	r3
   89c32:	4c6a      	ldr	r4, [pc, #424]	; (89ddc <Heat_Correction+0x34c>)
   89c34:	f04f 0200 	mov.w	r2, #0
   89c38:	4b69      	ldr	r3, [pc, #420]	; (89de0 <Heat_Correction+0x350>)
   89c3a:	47a0      	blx	r4
   89c3c:	4603      	mov	r3, r0
   89c3e:	460c      	mov	r4, r1
   89c40:	4618      	mov	r0, r3
   89c42:	4621      	mov	r1, r4
   89c44:	4c67      	ldr	r4, [pc, #412]	; (89de4 <Heat_Correction+0x354>)
   89c46:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   89c4a:	4b67      	ldr	r3, [pc, #412]	; (89de8 <Heat_Correction+0x358>)
   89c4c:	47a0      	blx	r4
   89c4e:	4603      	mov	r3, r0
   89c50:	460c      	mov	r4, r1
   89c52:	4619      	mov	r1, r3
   89c54:	4622      	mov	r2, r4
   89c56:	4b65      	ldr	r3, [pc, #404]	; (89dec <Heat_Correction+0x35c>)
   89c58:	4608      	mov	r0, r1
   89c5a:	4611      	mov	r1, r2
   89c5c:	4798      	blx	r3
   89c5e:	4602      	mov	r2, r0
   89c60:	4b65      	ldr	r3, [pc, #404]	; (89df8 <Heat_Correction+0x368>)
   89c62:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   89c64:	4b62      	ldr	r3, [pc, #392]	; (89df0 <Heat_Correction+0x360>)
   89c66:	881a      	ldrh	r2, [r3, #0]
   89c68:	4b62      	ldr	r3, [pc, #392]	; (89df4 <Heat_Correction+0x364>)
   89c6a:	fba3 1302 	umull	r1, r3, r3, r2
   89c6e:	0919      	lsrs	r1, r3, #4
   89c70:	460b      	mov	r3, r1
   89c72:	009b      	lsls	r3, r3, #2
   89c74:	440b      	add	r3, r1
   89c76:	009b      	lsls	r3, r3, #2
   89c78:	1ad3      	subs	r3, r2, r3
   89c7a:	b29b      	uxth	r3, r3
   89c7c:	2b00      	cmp	r3, #0
   89c7e:	d103      	bne.n	89c88 <Heat_Correction+0x1f8>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   89c80:	4b5f      	ldr	r3, [pc, #380]	; (89e00 <Heat_Correction+0x370>)
   89c82:	681b      	ldr	r3, [r3, #0]
   89c84:	4a5f      	ldr	r2, [pc, #380]	; (89e04 <Heat_Correction+0x374>)
   89c86:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   89c88:	463b      	mov	r3, r7
   89c8a:	4619      	mov	r1, r3
   89c8c:	2014      	movs	r0, #20
   89c8e:	4b4c      	ldr	r3, [pc, #304]	; (89dc0 <Heat_Correction+0x330>)
   89c90:	4798      	blx	r3
	{
	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
   89c92:	f9b7 3000 	ldrsh.w	r3, [r7]
   89c96:	461a      	mov	r2, r3
   89c98:	f649 5308 	movw	r3, #40200	; 0x9d08
   89c9c:	fb03 f302 	mul.w	r3, r3, r2
   89ca0:	2b00      	cmp	r3, #0
   89ca2:	da02      	bge.n	89caa <Heat_Correction+0x21a>
   89ca4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   89ca8:	33ff      	adds	r3, #255	; 0xff
   89caa:	141b      	asrs	r3, r3, #16
   89cac:	807b      	strh	r3, [r7, #2]
	 	res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   89cae:	887b      	ldrh	r3, [r7, #2]
   89cb0:	4618      	mov	r0, r3
   89cb2:	4b44      	ldr	r3, [pc, #272]	; (89dc4 <Heat_Correction+0x334>)
   89cb4:	4798      	blx	r3
	 	Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
   89cb6:	4b44      	ldr	r3, [pc, #272]	; (89dc8 <Heat_Correction+0x338>)
   89cb8:	681a      	ldr	r2, [r3, #0]
   89cba:	4b44      	ldr	r3, [pc, #272]	; (89dcc <Heat_Correction+0x33c>)
   89cbc:	4944      	ldr	r1, [pc, #272]	; (89dd0 <Heat_Correction+0x340>)
   89cbe:	4610      	mov	r0, r2
   89cc0:	4798      	blx	r3
   89cc2:	4603      	mov	r3, r0
   89cc4:	461a      	mov	r2, r3
   89cc6:	4b4e      	ldr	r3, [pc, #312]	; (89e00 <Heat_Correction+0x370>)
   89cc8:	601a      	str	r2, [r3, #0]
	 	Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
   89cca:	4b4d      	ldr	r3, [pc, #308]	; (89e00 <Heat_Correction+0x370>)
   89ccc:	681a      	ldr	r2, [r3, #0]
   89cce:	4b42      	ldr	r3, [pc, #264]	; (89dd8 <Heat_Correction+0x348>)
   89cd0:	4610      	mov	r0, r2
   89cd2:	4798      	blx	r3
   89cd4:	4c41      	ldr	r4, [pc, #260]	; (89ddc <Heat_Correction+0x34c>)
   89cd6:	a332      	add	r3, pc, #200	; (adr r3, 89da0 <Heat_Correction+0x310>)
   89cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   89cdc:	47a0      	blx	r4
   89cde:	4603      	mov	r3, r0
   89ce0:	460c      	mov	r4, r1
   89ce2:	4618      	mov	r0, r3
   89ce4:	4621      	mov	r1, r4
   89ce6:	4c3f      	ldr	r4, [pc, #252]	; (89de4 <Heat_Correction+0x354>)
   89ce8:	a32f      	add	r3, pc, #188	; (adr r3, 89da8 <Heat_Correction+0x318>)
   89cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   89cee:	47a0      	blx	r4
   89cf0:	4603      	mov	r3, r0
   89cf2:	460c      	mov	r4, r1
   89cf4:	4619      	mov	r1, r3
   89cf6:	4622      	mov	r2, r4
   89cf8:	4b3c      	ldr	r3, [pc, #240]	; (89dec <Heat_Correction+0x35c>)
   89cfa:	4608      	mov	r0, r1
   89cfc:	4611      	mov	r1, r2
   89cfe:	4798      	blx	r3
   89d00:	4602      	mov	r2, r0
   89d02:	4b3f      	ldr	r3, [pc, #252]	; (89e00 <Heat_Correction+0x370>)
   89d04:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   89d06:	4b40      	ldr	r3, [pc, #256]	; (89e08 <Heat_Correction+0x378>)
   89d08:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   89d0a:	4b40      	ldr	r3, [pc, #256]	; (89e0c <Heat_Correction+0x37c>)
   89d0c:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   89d0e:	4b40      	ldr	r3, [pc, #256]	; (89e10 <Heat_Correction+0x380>)
   89d10:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   89d12:	4b40      	ldr	r3, [pc, #256]	; (89e14 <Heat_Correction+0x384>)
   89d14:	4798      	blx	r3
   89d16:	4603      	mov	r3, r0
   89d18:	461a      	mov	r2, r3
   89d1a:	4b3f      	ldr	r3, [pc, #252]	; (89e18 <Heat_Correction+0x388>)
   89d1c:	701a      	strb	r2, [r3, #0]
	if ((Tmp2Val >=37.5)  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89d1e:	4b36      	ldr	r3, [pc, #216]	; (89df8 <Heat_Correction+0x368>)
   89d20:	681a      	ldr	r2, [r3, #0]
   89d22:	4b3e      	ldr	r3, [pc, #248]	; (89e1c <Heat_Correction+0x38c>)
   89d24:	493e      	ldr	r1, [pc, #248]	; (89e20 <Heat_Correction+0x390>)
   89d26:	4610      	mov	r0, r2
   89d28:	4798      	blx	r3
   89d2a:	4603      	mov	r3, r0
   89d2c:	2b00      	cmp	r3, #0
   89d2e:	d019      	beq.n	89d64 <Heat_Correction+0x2d4>
   89d30:	4b33      	ldr	r3, [pc, #204]	; (89e00 <Heat_Correction+0x370>)
   89d32:	681a      	ldr	r2, [r3, #0]
   89d34:	4b3b      	ldr	r3, [pc, #236]	; (89e24 <Heat_Correction+0x394>)
   89d36:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89d3a:	4610      	mov	r0, r2
   89d3c:	4798      	blx	r3
   89d3e:	4603      	mov	r3, r0
   89d40:	2b00      	cmp	r3, #0
   89d42:	d00f      	beq.n	89d64 <Heat_Correction+0x2d4>
	{
		if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89d44:	4b2a      	ldr	r3, [pc, #168]	; (89df0 <Heat_Correction+0x360>)
   89d46:	881a      	ldrh	r2, [r3, #0]
   89d48:	4b2a      	ldr	r3, [pc, #168]	; (89df4 <Heat_Correction+0x364>)
   89d4a:	fba3 1302 	umull	r1, r3, r3, r2
   89d4e:	0919      	lsrs	r1, r3, #4
   89d50:	460b      	mov	r3, r1
   89d52:	009b      	lsls	r3, r3, #2
   89d54:	440b      	add	r3, r1
   89d56:	009b      	lsls	r3, r3, #2
   89d58:	1ad3      	subs	r3, r2, r3
   89d5a:	b29b      	uxth	r3, r3
   89d5c:	2b00      	cmp	r3, #0
   89d5e:	d101      	bne.n	89d64 <Heat_Correction+0x2d4>
		{
			Coarse_DutyCorrection(); 
   89d60:	4b31      	ldr	r3, [pc, #196]	; (89e28 <Heat_Correction+0x398>)
   89d62:	4798      	blx	r3
		}
		
	}
	if(TS2_Stable)
   89d64:	4b2c      	ldr	r3, [pc, #176]	; (89e18 <Heat_Correction+0x388>)
   89d66:	781b      	ldrb	r3, [r3, #0]
   89d68:	2b00      	cmp	r3, #0
   89d6a:	f000 80ab 	beq.w	89ec4 <Heat_Correction+0x434>
	{
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89d6e:	4b22      	ldr	r3, [pc, #136]	; (89df8 <Heat_Correction+0x368>)
   89d70:	681a      	ldr	r2, [r3, #0]
   89d72:	4b2e      	ldr	r3, [pc, #184]	; (89e2c <Heat_Correction+0x39c>)
   89d74:	6819      	ldr	r1, [r3, #0]
   89d76:	4b2e      	ldr	r3, [pc, #184]	; (89e30 <Heat_Correction+0x3a0>)
   89d78:	4610      	mov	r0, r2
   89d7a:	4798      	blx	r3
   89d7c:	4603      	mov	r3, r0
   89d7e:	461a      	mov	r2, r3
   89d80:	4b2c      	ldr	r3, [pc, #176]	; (89e34 <Heat_Correction+0x3a4>)
   89d82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d86:	4610      	mov	r0, r2
   89d88:	4798      	blx	r3
   89d8a:	4603      	mov	r3, r0
   89d8c:	2b00      	cmp	r3, #0
   89d8e:	d160      	bne.n	89e52 <Heat_Correction+0x3c2>
   89d90:	4b26      	ldr	r3, [pc, #152]	; (89e2c <Heat_Correction+0x39c>)
   89d92:	681a      	ldr	r2, [r3, #0]
   89d94:	4b18      	ldr	r3, [pc, #96]	; (89df8 <Heat_Correction+0x368>)
   89d96:	6819      	ldr	r1, [r3, #0]
   89d98:	e04e      	b.n	89e38 <Heat_Correction+0x3a8>
   89d9a:	bf00      	nop
   89d9c:	f3af 8000 	nop.w
   89da0:	cccccccd 	.word	0xcccccccd
   89da4:	4008cccc 	.word	0x4008cccc
   89da8:	66666666 	.word	0x66666666
   89dac:	3ff66666 	.word	0x3ff66666
   89db0:	200720fb 	.word	0x200720fb
   89db4:	00096855 	.word	0x00096855
   89db8:	200720fe 	.word	0x200720fe
   89dbc:	0009695d 	.word	0x0009695d
   89dc0:	0008d499 	.word	0x0008d499
   89dc4:	0008e659 	.word	0x0008e659
   89dc8:	200725ec 	.word	0x200725ec
   89dcc:	000a27f5 	.word	0x000a27f5
   89dd0:	42c80000 	.word	0x42c80000
   89dd4:	2007210c 	.word	0x2007210c
   89dd8:	000a1d65 	.word	0x000a1d65
   89ddc:	000a1aa5 	.word	0x000a1aa5
   89de0:	40040000 	.word	0x40040000
   89de4:	000a1aa9 	.word	0x000a1aa9
   89de8:	3ff33333 	.word	0x3ff33333
   89dec:	000a23d1 	.word	0x000a23d1
   89df0:	20072118 	.word	0x20072118
   89df4:	cccccccd 	.word	0xcccccccd
   89df8:	20072110 	.word	0x20072110
   89dfc:	20072120 	.word	0x20072120
   89e00:	20072114 	.word	0x20072114
   89e04:	20072d20 	.word	0x20072d20
   89e08:	0008a515 	.word	0x0008a515
   89e0c:	0008a059 	.word	0x0008a059
   89e10:	0008a0c1 	.word	0x0008a0c1
   89e14:	00089f01 	.word	0x00089f01
   89e18:	20072d24 	.word	0x20072d24
   89e1c:	000a29f1 	.word	0x000a29f1
   89e20:	42160000 	.word	0x42160000
   89e24:	000a29dd 	.word	0x000a29dd
   89e28:	0008a161 	.word	0x0008a161
   89e2c:	20070444 	.word	0x20070444
   89e30:	000a2479 	.word	0x000a2479
   89e34:	000a2a05 	.word	0x000a2a05
   89e38:	4b27      	ldr	r3, [pc, #156]	; (89ed8 <Heat_Correction+0x448>)
   89e3a:	4610      	mov	r0, r2
   89e3c:	4798      	blx	r3
   89e3e:	4603      	mov	r3, r0
   89e40:	461a      	mov	r2, r3
   89e42:	4b26      	ldr	r3, [pc, #152]	; (89edc <Heat_Correction+0x44c>)
   89e44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89e48:	4610      	mov	r0, r2
   89e4a:	4798      	blx	r3
   89e4c:	4603      	mov	r3, r0
   89e4e:	2b00      	cmp	r3, #0
   89e50:	d002      	beq.n	89e58 <Heat_Correction+0x3c8>
		{
			Coarse_DutyCorrection(); 
   89e52:	4b23      	ldr	r3, [pc, #140]	; (89ee0 <Heat_Correction+0x450>)
   89e54:	4798      	blx	r3
   89e56:	e035      	b.n	89ec4 <Heat_Correction+0x434>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89e58:	4b22      	ldr	r3, [pc, #136]	; (89ee4 <Heat_Correction+0x454>)
   89e5a:	4798      	blx	r3
   89e5c:	4603      	mov	r3, r0
   89e5e:	461a      	mov	r2, r3
   89e60:	4b21      	ldr	r3, [pc, #132]	; (89ee8 <Heat_Correction+0x458>)
   89e62:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89e64:	4b20      	ldr	r3, [pc, #128]	; (89ee8 <Heat_Correction+0x458>)
   89e66:	781b      	ldrb	r3, [r3, #0]
   89e68:	2b00      	cmp	r3, #0
   89e6a:	d02b      	beq.n	89ec4 <Heat_Correction+0x434>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89e6c:	4b1f      	ldr	r3, [pc, #124]	; (89eec <Heat_Correction+0x45c>)
   89e6e:	681a      	ldr	r2, [r3, #0]
   89e70:	4b1f      	ldr	r3, [pc, #124]	; (89ef0 <Heat_Correction+0x460>)
   89e72:	6819      	ldr	r1, [r3, #0]
   89e74:	4b18      	ldr	r3, [pc, #96]	; (89ed8 <Heat_Correction+0x448>)
   89e76:	4610      	mov	r0, r2
   89e78:	4798      	blx	r3
   89e7a:	4603      	mov	r3, r0
   89e7c:	461a      	mov	r2, r3
   89e7e:	4b1d      	ldr	r3, [pc, #116]	; (89ef4 <Heat_Correction+0x464>)
   89e80:	4610      	mov	r0, r2
   89e82:	4798      	blx	r3
   89e84:	4c1c      	ldr	r4, [pc, #112]	; (89ef8 <Heat_Correction+0x468>)
   89e86:	a312      	add	r3, pc, #72	; (adr r3, 89ed0 <Heat_Correction+0x440>)
   89e88:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e8c:	47a0      	blx	r4
   89e8e:	4603      	mov	r3, r0
   89e90:	2b00      	cmp	r3, #0
   89e92:	d113      	bne.n	89ebc <Heat_Correction+0x42c>
   89e94:	4b16      	ldr	r3, [pc, #88]	; (89ef0 <Heat_Correction+0x460>)
   89e96:	681a      	ldr	r2, [r3, #0]
   89e98:	4b14      	ldr	r3, [pc, #80]	; (89eec <Heat_Correction+0x45c>)
   89e9a:	6819      	ldr	r1, [r3, #0]
   89e9c:	4b0e      	ldr	r3, [pc, #56]	; (89ed8 <Heat_Correction+0x448>)
   89e9e:	4610      	mov	r0, r2
   89ea0:	4798      	blx	r3
   89ea2:	4603      	mov	r3, r0
   89ea4:	461a      	mov	r2, r3
   89ea6:	4b13      	ldr	r3, [pc, #76]	; (89ef4 <Heat_Correction+0x464>)
   89ea8:	4610      	mov	r0, r2
   89eaa:	4798      	blx	r3
   89eac:	4c12      	ldr	r4, [pc, #72]	; (89ef8 <Heat_Correction+0x468>)
   89eae:	a308      	add	r3, pc, #32	; (adr r3, 89ed0 <Heat_Correction+0x440>)
   89eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   89eb4:	47a0      	blx	r4
   89eb6:	4603      	mov	r3, r0
   89eb8:	2b00      	cmp	r3, #0
   89eba:	d003      	beq.n	89ec4 <Heat_Correction+0x434>
			      Fine_DutyCorrection();
   89ebc:	4b0f      	ldr	r3, [pc, #60]	; (89efc <Heat_Correction+0x46c>)
   89ebe:	4798      	blx	r3
   89ec0:	e000      	b.n	89ec4 <Heat_Correction+0x434>
		sv_cntrl_poweroffheater();
		return;
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
	{
		return;
   89ec2:	bf00      	nop
	else
	{
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	}	
}
   89ec4:	4618      	mov	r0, r3
   89ec6:	370c      	adds	r7, #12
   89ec8:	46bd      	mov	sp, r7
   89eca:	bd90      	pop	{r4, r7, pc}
   89ecc:	f3af 8000 	nop.w
   89ed0:	9999999a 	.word	0x9999999a
   89ed4:	3fb99999 	.word	0x3fb99999
   89ed8:	000a2479 	.word	0x000a2479
   89edc:	000a2a05 	.word	0x000a2a05
   89ee0:	0008a161 	.word	0x0008a161
   89ee4:	00089fad 	.word	0x00089fad
   89ee8:	20072d2d 	.word	0x20072d2d
   89eec:	20072114 	.word	0x20072114
   89ef0:	20070448 	.word	0x20070448
   89ef4:	000a1d65 	.word	0x000a1d65
   89ef8:	000a232d 	.word	0x000a232d
   89efc:	0008a329 	.word	0x0008a329

00089f00 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89f00:	b580      	push	{r7, lr}
   89f02:	b082      	sub	sp, #8
   89f04:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89f06:	2300      	movs	r3, #0
   89f08:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89f0a:	4b21      	ldr	r3, [pc, #132]	; (89f90 <Check_4_TS2_Stable+0x90>)
   89f0c:	881a      	ldrh	r2, [r3, #0]
   89f0e:	4b21      	ldr	r3, [pc, #132]	; (89f94 <Check_4_TS2_Stable+0x94>)
   89f10:	881b      	ldrh	r3, [r3, #0]
   89f12:	429a      	cmp	r2, r3
   89f14:	d336      	bcc.n	89f84 <Check_4_TS2_Stable+0x84>
	// TS2 is not increasing sharply
	{
		if (Tmp2Val_prev == Tmp2Val)
   89f16:	4b20      	ldr	r3, [pc, #128]	; (89f98 <Check_4_TS2_Stable+0x98>)
   89f18:	681a      	ldr	r2, [r3, #0]
   89f1a:	4b20      	ldr	r3, [pc, #128]	; (89f9c <Check_4_TS2_Stable+0x9c>)
   89f1c:	6819      	ldr	r1, [r3, #0]
   89f1e:	4b20      	ldr	r3, [pc, #128]	; (89fa0 <Check_4_TS2_Stable+0xa0>)
   89f20:	4610      	mov	r0, r2
   89f22:	4798      	blx	r3
   89f24:	4603      	mov	r3, r0
   89f26:	2b00      	cmp	r3, #0
   89f28:	d002      	beq.n	89f30 <Check_4_TS2_Stable+0x30>
		{
			ts2_stable = true;
   89f2a:	2301      	movs	r3, #1
   89f2c:	71fb      	strb	r3, [r7, #7]
   89f2e:	e023      	b.n	89f78 <Check_4_TS2_Stable+0x78>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   89f30:	4b1a      	ldr	r3, [pc, #104]	; (89f9c <Check_4_TS2_Stable+0x9c>)
   89f32:	681a      	ldr	r2, [r3, #0]
   89f34:	4b18      	ldr	r3, [pc, #96]	; (89f98 <Check_4_TS2_Stable+0x98>)
   89f36:	6819      	ldr	r1, [r3, #0]
   89f38:	4b1a      	ldr	r3, [pc, #104]	; (89fa4 <Check_4_TS2_Stable+0xa4>)
   89f3a:	4610      	mov	r0, r2
   89f3c:	4798      	blx	r3
   89f3e:	4603      	mov	r3, r0
   89f40:	461a      	mov	r2, r3
   89f42:	4b19      	ldr	r3, [pc, #100]	; (89fa8 <Check_4_TS2_Stable+0xa8>)
   89f44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f48:	4610      	mov	r0, r2
   89f4a:	4798      	blx	r3
   89f4c:	4603      	mov	r3, r0
   89f4e:	2b00      	cmp	r3, #0
   89f50:	d110      	bne.n	89f74 <Check_4_TS2_Stable+0x74>
   89f52:	4b11      	ldr	r3, [pc, #68]	; (89f98 <Check_4_TS2_Stable+0x98>)
   89f54:	681a      	ldr	r2, [r3, #0]
   89f56:	4b11      	ldr	r3, [pc, #68]	; (89f9c <Check_4_TS2_Stable+0x9c>)
   89f58:	6819      	ldr	r1, [r3, #0]
   89f5a:	4b12      	ldr	r3, [pc, #72]	; (89fa4 <Check_4_TS2_Stable+0xa4>)
   89f5c:	4610      	mov	r0, r2
   89f5e:	4798      	blx	r3
   89f60:	4603      	mov	r3, r0
   89f62:	461a      	mov	r2, r3
   89f64:	4b10      	ldr	r3, [pc, #64]	; (89fa8 <Check_4_TS2_Stable+0xa8>)
   89f66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f6a:	4610      	mov	r0, r2
   89f6c:	4798      	blx	r3
   89f6e:	4603      	mov	r3, r0
   89f70:	2b00      	cmp	r3, #0
   89f72:	d001      	beq.n	89f78 <Check_4_TS2_Stable+0x78>
		{
			ts2_stable = true;
   89f74:	2301      	movs	r3, #1
   89f76:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = 30;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89f78:	4b06      	ldr	r3, [pc, #24]	; (89f94 <Check_4_TS2_Stable+0x94>)
   89f7a:	221e      	movs	r2, #30
   89f7c:	801a      	strh	r2, [r3, #0]
								 // Count 240 = 2 mins, Count 120 = 1 min
		TS2_stability_count = 0;
   89f7e:	4b04      	ldr	r3, [pc, #16]	; (89f90 <Check_4_TS2_Stable+0x90>)
   89f80:	2200      	movs	r2, #0
   89f82:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   89f84:	79fb      	ldrb	r3, [r7, #7]
}
   89f86:	4618      	mov	r0, r3
   89f88:	3708      	adds	r7, #8
   89f8a:	46bd      	mov	sp, r7
   89f8c:	bd80      	pop	{r7, pc}
   89f8e:	bf00      	nop
   89f90:	2007211c 	.word	0x2007211c
   89f94:	20070440 	.word	0x20070440
   89f98:	20072120 	.word	0x20072120
   89f9c:	20072110 	.word	0x20072110
   89fa0:	000a29b5 	.word	0x000a29b5
   89fa4:	000a2479 	.word	0x000a2479
   89fa8:	000a29dd 	.word	0x000a29dd

00089fac <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   89fac:	b580      	push	{r7, lr}
   89fae:	b082      	sub	sp, #8
   89fb0:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89fb2:	2300      	movs	r3, #0
   89fb4:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   89fb6:	4b21      	ldr	r3, [pc, #132]	; (8a03c <Check_4_TS3_Stable+0x90>)
   89fb8:	881a      	ldrh	r2, [r3, #0]
   89fba:	4b21      	ldr	r3, [pc, #132]	; (8a040 <Check_4_TS3_Stable+0x94>)
   89fbc:	881b      	ldrh	r3, [r3, #0]
   89fbe:	429a      	cmp	r2, r3
   89fc0:	d336      	bcc.n	8a030 <Check_4_TS3_Stable+0x84>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89fc2:	4b20      	ldr	r3, [pc, #128]	; (8a044 <Check_4_TS3_Stable+0x98>)
   89fc4:	681a      	ldr	r2, [r3, #0]
   89fc6:	4b20      	ldr	r3, [pc, #128]	; (8a048 <Check_4_TS3_Stable+0x9c>)
   89fc8:	6819      	ldr	r1, [r3, #0]
   89fca:	4b20      	ldr	r3, [pc, #128]	; (8a04c <Check_4_TS3_Stable+0xa0>)
   89fcc:	4610      	mov	r0, r2
   89fce:	4798      	blx	r3
   89fd0:	4603      	mov	r3, r0
   89fd2:	2b00      	cmp	r3, #0
   89fd4:	d002      	beq.n	89fdc <Check_4_TS3_Stable+0x30>
		{
			ts3_stable = true;
   89fd6:	2301      	movs	r3, #1
   89fd8:	71fb      	strb	r3, [r7, #7]
   89fda:	e023      	b.n	8a024 <Check_4_TS3_Stable+0x78>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   89fdc:	4b1a      	ldr	r3, [pc, #104]	; (8a048 <Check_4_TS3_Stable+0x9c>)
   89fde:	681a      	ldr	r2, [r3, #0]
   89fe0:	4b18      	ldr	r3, [pc, #96]	; (8a044 <Check_4_TS3_Stable+0x98>)
   89fe2:	6819      	ldr	r1, [r3, #0]
   89fe4:	4b1a      	ldr	r3, [pc, #104]	; (8a050 <Check_4_TS3_Stable+0xa4>)
   89fe6:	4610      	mov	r0, r2
   89fe8:	4798      	blx	r3
   89fea:	4603      	mov	r3, r0
   89fec:	461a      	mov	r2, r3
   89fee:	4b19      	ldr	r3, [pc, #100]	; (8a054 <Check_4_TS3_Stable+0xa8>)
   89ff0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89ff4:	4610      	mov	r0, r2
   89ff6:	4798      	blx	r3
   89ff8:	4603      	mov	r3, r0
   89ffa:	2b00      	cmp	r3, #0
   89ffc:	d110      	bne.n	8a020 <Check_4_TS3_Stable+0x74>
   89ffe:	4b11      	ldr	r3, [pc, #68]	; (8a044 <Check_4_TS3_Stable+0x98>)
   8a000:	681a      	ldr	r2, [r3, #0]
   8a002:	4b11      	ldr	r3, [pc, #68]	; (8a048 <Check_4_TS3_Stable+0x9c>)
   8a004:	6819      	ldr	r1, [r3, #0]
   8a006:	4b12      	ldr	r3, [pc, #72]	; (8a050 <Check_4_TS3_Stable+0xa4>)
   8a008:	4610      	mov	r0, r2
   8a00a:	4798      	blx	r3
   8a00c:	4603      	mov	r3, r0
   8a00e:	461a      	mov	r2, r3
   8a010:	4b10      	ldr	r3, [pc, #64]	; (8a054 <Check_4_TS3_Stable+0xa8>)
   8a012:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a016:	4610      	mov	r0, r2
   8a018:	4798      	blx	r3
   8a01a:	4603      	mov	r3, r0
   8a01c:	2b00      	cmp	r3, #0
   8a01e:	d001      	beq.n	8a024 <Check_4_TS3_Stable+0x78>
		{
			ts3_stable = true;
   8a020:	2301      	movs	r3, #1
   8a022:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = 60;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   8a024:	4b06      	ldr	r3, [pc, #24]	; (8a040 <Check_4_TS3_Stable+0x94>)
   8a026:	223c      	movs	r2, #60	; 0x3c
   8a028:	801a      	strh	r2, [r3, #0]
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   8a02a:	4b04      	ldr	r3, [pc, #16]	; (8a03c <Check_4_TS3_Stable+0x90>)
   8a02c:	2200      	movs	r2, #0
   8a02e:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   8a030:	79fb      	ldrb	r3, [r7, #7]
}
   8a032:	4618      	mov	r0, r3
   8a034:	3708      	adds	r7, #8
   8a036:	46bd      	mov	sp, r7
   8a038:	bd80      	pop	{r7, pc}
   8a03a:	bf00      	nop
   8a03c:	2007211a 	.word	0x2007211a
   8a040:	20070442 	.word	0x20070442
   8a044:	20072d20 	.word	0x20072d20
   8a048:	20072114 	.word	0x20072114
   8a04c:	000a29b5 	.word	0x000a29b5
   8a050:	000a2479 	.word	0x000a2479
   8a054:	000a29dd 	.word	0x000a29dd

0008a058 <Calculate_slope>:

void Calculate_slope ()
{
   8a058:	b598      	push	{r3, r4, r7, lr}
   8a05a:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   8a05c:	4b10      	ldr	r3, [pc, #64]	; (8a0a0 <Calculate_slope+0x48>)
   8a05e:	f04f 0200 	mov.w	r2, #0
   8a062:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   8a064:	4b0f      	ldr	r3, [pc, #60]	; (8a0a4 <Calculate_slope+0x4c>)
   8a066:	681a      	ldr	r2, [r3, #0]
   8a068:	4b0f      	ldr	r3, [pc, #60]	; (8a0a8 <Calculate_slope+0x50>)
   8a06a:	6819      	ldr	r1, [r3, #0]
   8a06c:	4b0f      	ldr	r3, [pc, #60]	; (8a0ac <Calculate_slope+0x54>)
   8a06e:	4610      	mov	r0, r2
   8a070:	4798      	blx	r3
   8a072:	4603      	mov	r3, r0
   8a074:	461c      	mov	r4, r3
   8a076:	4b0e      	ldr	r3, [pc, #56]	; (8a0b0 <Calculate_slope+0x58>)
   8a078:	881b      	ldrh	r3, [r3, #0]
   8a07a:	461a      	mov	r2, r3
   8a07c:	4b0d      	ldr	r3, [pc, #52]	; (8a0b4 <Calculate_slope+0x5c>)
   8a07e:	881b      	ldrh	r3, [r3, #0]
   8a080:	1ad2      	subs	r2, r2, r3
   8a082:	4b0d      	ldr	r3, [pc, #52]	; (8a0b8 <Calculate_slope+0x60>)
   8a084:	4610      	mov	r0, r2
   8a086:	4798      	blx	r3
   8a088:	4602      	mov	r2, r0
   8a08a:	4b0c      	ldr	r3, [pc, #48]	; (8a0bc <Calculate_slope+0x64>)
   8a08c:	4611      	mov	r1, r2
   8a08e:	4620      	mov	r0, r4
   8a090:	4798      	blx	r3
   8a092:	4603      	mov	r3, r0
   8a094:	461a      	mov	r2, r3
   8a096:	4b02      	ldr	r3, [pc, #8]	; (8a0a0 <Calculate_slope+0x48>)
   8a098:	601a      	str	r2, [r3, #0]
}
   8a09a:	bf00      	nop
   8a09c:	bd98      	pop	{r3, r4, r7, pc}
   8a09e:	bf00      	nop
   8a0a0:	20072128 	.word	0x20072128
   8a0a4:	20072110 	.word	0x20072110
   8a0a8:	20072124 	.word	0x20072124
   8a0ac:	000a2479 	.word	0x000a2479
   8a0b0:	20072118 	.word	0x20072118
   8a0b4:	2007211e 	.word	0x2007211e
   8a0b8:	000a25e5 	.word	0x000a25e5
   8a0bc:	000a27f5 	.word	0x000a27f5

0008a0c0 <Calculate_direction>:

Calculate_direction()
{
   8a0c0:	b580      	push	{r7, lr}
   8a0c2:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   8a0c4:	4b20      	ldr	r3, [pc, #128]	; (8a148 <Calculate_direction+0x88>)
   8a0c6:	681a      	ldr	r2, [r3, #0]
   8a0c8:	4b20      	ldr	r3, [pc, #128]	; (8a14c <Calculate_direction+0x8c>)
   8a0ca:	6819      	ldr	r1, [r3, #0]
   8a0cc:	4b20      	ldr	r3, [pc, #128]	; (8a150 <Calculate_direction+0x90>)
   8a0ce:	4610      	mov	r0, r2
   8a0d0:	4798      	blx	r3
   8a0d2:	4603      	mov	r3, r0
   8a0d4:	461a      	mov	r2, r3
   8a0d6:	4b1f      	ldr	r3, [pc, #124]	; (8a154 <Calculate_direction+0x94>)
   8a0d8:	f04f 0100 	mov.w	r1, #0
   8a0dc:	4610      	mov	r0, r2
   8a0de:	4798      	blx	r3
   8a0e0:	4603      	mov	r3, r0
   8a0e2:	2b00      	cmp	r3, #0
   8a0e4:	d003      	beq.n	8a0ee <Calculate_direction+0x2e>
	    TS2_Direction = UP;
   8a0e6:	4b1c      	ldr	r3, [pc, #112]	; (8a158 <Calculate_direction+0x98>)
   8a0e8:	2200      	movs	r2, #0
   8a0ea:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
}
   8a0ec:	e029      	b.n	8a142 <Calculate_direction+0x82>

Calculate_direction()
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   8a0ee:	4b17      	ldr	r3, [pc, #92]	; (8a14c <Calculate_direction+0x8c>)
   8a0f0:	681a      	ldr	r2, [r3, #0]
   8a0f2:	4b15      	ldr	r3, [pc, #84]	; (8a148 <Calculate_direction+0x88>)
   8a0f4:	6819      	ldr	r1, [r3, #0]
   8a0f6:	4b16      	ldr	r3, [pc, #88]	; (8a150 <Calculate_direction+0x90>)
   8a0f8:	4610      	mov	r0, r2
   8a0fa:	4798      	blx	r3
   8a0fc:	4603      	mov	r3, r0
   8a0fe:	461a      	mov	r2, r3
   8a100:	4b14      	ldr	r3, [pc, #80]	; (8a154 <Calculate_direction+0x94>)
   8a102:	f04f 0100 	mov.w	r1, #0
   8a106:	4610      	mov	r0, r2
   8a108:	4798      	blx	r3
   8a10a:	4603      	mov	r3, r0
   8a10c:	2b00      	cmp	r3, #0
   8a10e:	d003      	beq.n	8a118 <Calculate_direction+0x58>
	    TS2_Direction = DOWN;
   8a110:	4b11      	ldr	r3, [pc, #68]	; (8a158 <Calculate_direction+0x98>)
   8a112:	2201      	movs	r2, #1
   8a114:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
}
   8a116:	e014      	b.n	8a142 <Calculate_direction+0x82>
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   8a118:	4b0c      	ldr	r3, [pc, #48]	; (8a14c <Calculate_direction+0x8c>)
   8a11a:	681a      	ldr	r2, [r3, #0]
   8a11c:	4b0a      	ldr	r3, [pc, #40]	; (8a148 <Calculate_direction+0x88>)
   8a11e:	6819      	ldr	r1, [r3, #0]
   8a120:	4b0b      	ldr	r3, [pc, #44]	; (8a150 <Calculate_direction+0x90>)
   8a122:	4610      	mov	r0, r2
   8a124:	4798      	blx	r3
   8a126:	4603      	mov	r3, r0
   8a128:	461a      	mov	r2, r3
   8a12a:	4b0c      	ldr	r3, [pc, #48]	; (8a15c <Calculate_direction+0x9c>)
   8a12c:	f04f 0100 	mov.w	r1, #0
   8a130:	4610      	mov	r0, r2
   8a132:	4798      	blx	r3
   8a134:	4603      	mov	r3, r0
   8a136:	2b00      	cmp	r3, #0
   8a138:	d100      	bne.n	8a13c <Calculate_direction+0x7c>
		TS2_Direction = NUETRAL;
}
   8a13a:	e002      	b.n	8a142 <Calculate_direction+0x82>
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
   8a13c:	4b06      	ldr	r3, [pc, #24]	; (8a158 <Calculate_direction+0x98>)
   8a13e:	2202      	movs	r2, #2
   8a140:	701a      	strb	r2, [r3, #0]
}
   8a142:	bf00      	nop
   8a144:	bd80      	pop	{r7, pc}
   8a146:	bf00      	nop
   8a148:	20072110 	.word	0x20072110
   8a14c:	20072120 	.word	0x20072120
   8a150:	000a2479 	.word	0x000a2479
   8a154:	000a2a05 	.word	0x000a2a05
   8a158:	20072d2e 	.word	0x20072d2e
   8a15c:	000a29b5 	.word	0x000a29b5

0008a160 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a160:	b598      	push	{r3, r4, r7, lr}
   8a162:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a164:	4b60      	ldr	r3, [pc, #384]	; (8a2e8 <Coarse_DutyCorrection+0x188>)
   8a166:	681a      	ldr	r2, [r3, #0]
   8a168:	4b60      	ldr	r3, [pc, #384]	; (8a2ec <Coarse_DutyCorrection+0x18c>)
   8a16a:	4610      	mov	r0, r2
   8a16c:	4798      	blx	r3
   8a16e:	4c60      	ldr	r4, [pc, #384]	; (8a2f0 <Coarse_DutyCorrection+0x190>)
   8a170:	a359      	add	r3, pc, #356	; (adr r3, 8a2d8 <Coarse_DutyCorrection+0x178>)
   8a172:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a176:	47a0      	blx	r4
   8a178:	4603      	mov	r3, r0
   8a17a:	2b00      	cmp	r3, #0
   8a17c:	d002      	beq.n	8a184 <Coarse_DutyCorrection+0x24>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   8a17e:	4b5d      	ldr	r3, [pc, #372]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a180:	223c      	movs	r2, #60	; 0x3c
   8a182:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a184:	4b58      	ldr	r3, [pc, #352]	; (8a2e8 <Coarse_DutyCorrection+0x188>)
   8a186:	681a      	ldr	r2, [r3, #0]
   8a188:	4b58      	ldr	r3, [pc, #352]	; (8a2ec <Coarse_DutyCorrection+0x18c>)
   8a18a:	4610      	mov	r0, r2
   8a18c:	4798      	blx	r3
   8a18e:	4c58      	ldr	r4, [pc, #352]	; (8a2f0 <Coarse_DutyCorrection+0x190>)
   8a190:	a353      	add	r3, pc, #332	; (adr r3, 8a2e0 <Coarse_DutyCorrection+0x180>)
   8a192:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a196:	47a0      	blx	r4
   8a198:	4603      	mov	r3, r0
   8a19a:	2b00      	cmp	r3, #0
   8a19c:	d00f      	beq.n	8a1be <Coarse_DutyCorrection+0x5e>
   8a19e:	4b52      	ldr	r3, [pc, #328]	; (8a2e8 <Coarse_DutyCorrection+0x188>)
   8a1a0:	681a      	ldr	r2, [r3, #0]
   8a1a2:	4b52      	ldr	r3, [pc, #328]	; (8a2ec <Coarse_DutyCorrection+0x18c>)
   8a1a4:	4610      	mov	r0, r2
   8a1a6:	4798      	blx	r3
   8a1a8:	4c53      	ldr	r4, [pc, #332]	; (8a2f8 <Coarse_DutyCorrection+0x198>)
   8a1aa:	a34b      	add	r3, pc, #300	; (adr r3, 8a2d8 <Coarse_DutyCorrection+0x178>)
   8a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1b0:	47a0      	blx	r4
   8a1b2:	4603      	mov	r3, r0
   8a1b4:	2b00      	cmp	r3, #0
   8a1b6:	d002      	beq.n	8a1be <Coarse_DutyCorrection+0x5e>
	{
		duty_count = 40;
   8a1b8:	4b4e      	ldr	r3, [pc, #312]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a1ba:	2228      	movs	r2, #40	; 0x28
   8a1bc:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   8a1be:	4b4a      	ldr	r3, [pc, #296]	; (8a2e8 <Coarse_DutyCorrection+0x188>)
   8a1c0:	681a      	ldr	r2, [r3, #0]
   8a1c2:	4b4a      	ldr	r3, [pc, #296]	; (8a2ec <Coarse_DutyCorrection+0x18c>)
   8a1c4:	4610      	mov	r0, r2
   8a1c6:	4798      	blx	r3
   8a1c8:	4c4c      	ldr	r4, [pc, #304]	; (8a2fc <Coarse_DutyCorrection+0x19c>)
   8a1ca:	a345      	add	r3, pc, #276	; (adr r3, 8a2e0 <Coarse_DutyCorrection+0x180>)
   8a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1d0:	47a0      	blx	r4
   8a1d2:	4603      	mov	r3, r0
   8a1d4:	2b00      	cmp	r3, #0
   8a1d6:	d002      	beq.n	8a1de <Coarse_DutyCorrection+0x7e>
	{
		duty_count = 8;
   8a1d8:	4b46      	ldr	r3, [pc, #280]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a1da:	2208      	movs	r2, #8
   8a1dc:	701a      	strb	r2, [r3, #0]
	
	}
	
	
	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) )   // if direction is upward restrict correction if TS2 not yet 39
   8a1de:	4b48      	ldr	r3, [pc, #288]	; (8a300 <Coarse_DutyCorrection+0x1a0>)
   8a1e0:	781b      	ldrb	r3, [r3, #0]
   8a1e2:	2b00      	cmp	r3, #0
   8a1e4:	d11f      	bne.n	8a226 <Coarse_DutyCorrection+0xc6>
   8a1e6:	4b47      	ldr	r3, [pc, #284]	; (8a304 <Coarse_DutyCorrection+0x1a4>)
   8a1e8:	681a      	ldr	r2, [r3, #0]
   8a1ea:	4b47      	ldr	r3, [pc, #284]	; (8a308 <Coarse_DutyCorrection+0x1a8>)
   8a1ec:	4947      	ldr	r1, [pc, #284]	; (8a30c <Coarse_DutyCorrection+0x1ac>)
   8a1ee:	4610      	mov	r0, r2
   8a1f0:	4798      	blx	r3
   8a1f2:	4603      	mov	r3, r0
   8a1f4:	2b00      	cmp	r3, #0
   8a1f6:	d016      	beq.n	8a226 <Coarse_DutyCorrection+0xc6>
	{
	
		avg_duty = avg_duty - duty_count;
   8a1f8:	4b45      	ldr	r3, [pc, #276]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a1fe:	b29a      	uxth	r2, r3
   8a200:	4b3c      	ldr	r3, [pc, #240]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a202:	781b      	ldrb	r3, [r3, #0]
   8a204:	b29b      	uxth	r3, r3
   8a206:	1ad3      	subs	r3, r2, r3
   8a208:	b29b      	uxth	r3, r3
   8a20a:	b21a      	sxth	r2, r3
   8a20c:	4b40      	ldr	r3, [pc, #256]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a20e:	801a      	strh	r2, [r3, #0]
		
		if (avg_duty <= 1000)  
   8a210:	4b3f      	ldr	r3, [pc, #252]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a212:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a21a:	dc58      	bgt.n	8a2ce <Coarse_DutyCorrection+0x16e>
		 {
			 avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a21c:	4b3c      	ldr	r3, [pc, #240]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a21e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a222:	801a      	strh	r2, [r3, #0]
	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) )   // if direction is upward restrict correction if TS2 not yet 39
	{
	
		avg_duty = avg_duty - duty_count;
		
		if (avg_duty <= 1000)  
   8a224:	e053      	b.n	8a2ce <Coarse_DutyCorrection+0x16e>
		 {
			 avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
		 }		
	}
	else if ((TS2_Direction == UP)  && ((Tmp2Val >= 36) && (Tmp2Val <= 37)))
   8a226:	4b36      	ldr	r3, [pc, #216]	; (8a300 <Coarse_DutyCorrection+0x1a0>)
   8a228:	781b      	ldrb	r3, [r3, #0]
   8a22a:	2b00      	cmp	r3, #0
   8a22c:	d11e      	bne.n	8a26c <Coarse_DutyCorrection+0x10c>
   8a22e:	4b35      	ldr	r3, [pc, #212]	; (8a304 <Coarse_DutyCorrection+0x1a4>)
   8a230:	681a      	ldr	r2, [r3, #0]
   8a232:	4b35      	ldr	r3, [pc, #212]	; (8a308 <Coarse_DutyCorrection+0x1a8>)
   8a234:	4937      	ldr	r1, [pc, #220]	; (8a314 <Coarse_DutyCorrection+0x1b4>)
   8a236:	4610      	mov	r0, r2
   8a238:	4798      	blx	r3
   8a23a:	4603      	mov	r3, r0
   8a23c:	2b00      	cmp	r3, #0
   8a23e:	d015      	beq.n	8a26c <Coarse_DutyCorrection+0x10c>
   8a240:	4b30      	ldr	r3, [pc, #192]	; (8a304 <Coarse_DutyCorrection+0x1a4>)
   8a242:	681a      	ldr	r2, [r3, #0]
   8a244:	4b34      	ldr	r3, [pc, #208]	; (8a318 <Coarse_DutyCorrection+0x1b8>)
   8a246:	4935      	ldr	r1, [pc, #212]	; (8a31c <Coarse_DutyCorrection+0x1bc>)
   8a248:	4610      	mov	r0, r2
   8a24a:	4798      	blx	r3
   8a24c:	4603      	mov	r3, r0
   8a24e:	2b00      	cmp	r3, #0
   8a250:	d00c      	beq.n	8a26c <Coarse_DutyCorrection+0x10c>
	{
		avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a252:	4b28      	ldr	r3, [pc, #160]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a254:	781b      	ldrb	r3, [r3, #0]
   8a256:	b29a      	uxth	r2, r3
   8a258:	4b2d      	ldr	r3, [pc, #180]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a25a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a25e:	b29b      	uxth	r3, r3
   8a260:	4413      	add	r3, r2
   8a262:	b29b      	uxth	r3, r3
   8a264:	b21a      	sxth	r2, r3
   8a266:	4b2a      	ldr	r3, [pc, #168]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a268:	801a      	strh	r2, [r3, #0]
   8a26a:	e030      	b.n	8a2ce <Coarse_DutyCorrection+0x16e>
	}
	else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
   8a26c:	4b24      	ldr	r3, [pc, #144]	; (8a300 <Coarse_DutyCorrection+0x1a0>)
   8a26e:	781b      	ldrb	r3, [r3, #0]
   8a270:	2b01      	cmp	r3, #1
   8a272:	d122      	bne.n	8a2ba <Coarse_DutyCorrection+0x15a>
   8a274:	4b23      	ldr	r3, [pc, #140]	; (8a304 <Coarse_DutyCorrection+0x1a4>)
   8a276:	681a      	ldr	r2, [r3, #0]
   8a278:	4b27      	ldr	r3, [pc, #156]	; (8a318 <Coarse_DutyCorrection+0x1b8>)
   8a27a:	4928      	ldr	r1, [pc, #160]	; (8a31c <Coarse_DutyCorrection+0x1bc>)
   8a27c:	4610      	mov	r0, r2
   8a27e:	4798      	blx	r3
   8a280:	4603      	mov	r3, r0
   8a282:	2b00      	cmp	r3, #0
   8a284:	d019      	beq.n	8a2ba <Coarse_DutyCorrection+0x15a>
	{
	  avg_duty = avg_duty + duty_count;
   8a286:	4b1b      	ldr	r3, [pc, #108]	; (8a2f4 <Coarse_DutyCorrection+0x194>)
   8a288:	781b      	ldrb	r3, [r3, #0]
   8a28a:	b29a      	uxth	r2, r3
   8a28c:	4b20      	ldr	r3, [pc, #128]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a28e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a292:	b29b      	uxth	r3, r3
   8a294:	4413      	add	r3, r2
   8a296:	b29b      	uxth	r3, r3
   8a298:	b21a      	sxth	r2, r3
   8a29a:	4b1d      	ldr	r3, [pc, #116]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a29c:	801a      	strh	r2, [r3, #0]
	  
	  if (avg_duty > 2300)  //Sunil limiting to 2300
   8a29e:	4b1c      	ldr	r3, [pc, #112]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a2a0:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a2a4:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a2a8:	4293      	cmp	r3, r2
   8a2aa:	dd10      	ble.n	8a2ce <Coarse_DutyCorrection+0x16e>
		  {
			  avg_duty = 2300;
   8a2ac:	4b18      	ldr	r3, [pc, #96]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a2ae:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a2b2:	801a      	strh	r2, [r3, #0]
			  sv_cntrl_poweroffheater();
   8a2b4:	4b1a      	ldr	r3, [pc, #104]	; (8a320 <Coarse_DutyCorrection+0x1c0>)
   8a2b6:	4798      	blx	r3
	}
	else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
	{
	  avg_duty = avg_duty + duty_count;
	  
	  if (avg_duty > 2300)  //Sunil limiting to 2300
   8a2b8:	e009      	b.n	8a2ce <Coarse_DutyCorrection+0x16e>
			  avg_duty = 2300;
			  sv_cntrl_poweroffheater();
//			  HeaterState = CL_HEATER_STATE_OFF;
		  }
    }
	else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a2ba:	4b11      	ldr	r3, [pc, #68]	; (8a300 <Coarse_DutyCorrection+0x1a0>)
   8a2bc:	781b      	ldrb	r3, [r3, #0]
   8a2be:	2b02      	cmp	r3, #2
   8a2c0:	d105      	bne.n	8a2ce <Coarse_DutyCorrection+0x16e>
	    avg_duty = avg_duty;
   8a2c2:	4b13      	ldr	r3, [pc, #76]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a2c4:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a2c8:	4b11      	ldr	r3, [pc, #68]	; (8a310 <Coarse_DutyCorrection+0x1b0>)
   8a2ca:	801a      	strh	r2, [r3, #0]
}
   8a2cc:	e7ff      	b.n	8a2ce <Coarse_DutyCorrection+0x16e>
   8a2ce:	bf00      	nop
   8a2d0:	bd98      	pop	{r3, r4, r7, pc}
   8a2d2:	bf00      	nop
   8a2d4:	f3af 8000 	nop.w
   8a2d8:	eb851eb8 	.word	0xeb851eb8
   8a2dc:	3f9eb851 	.word	0x3f9eb851
   8a2e0:	33333333 	.word	0x33333333
   8a2e4:	3fd33333 	.word	0x3fd33333
   8a2e8:	20072128 	.word	0x20072128
   8a2ec:	000a1d65 	.word	0x000a1d65
   8a2f0:	000a2305 	.word	0x000a2305
   8a2f4:	2007212c 	.word	0x2007212c
   8a2f8:	000a232d 	.word	0x000a232d
   8a2fc:	000a2319 	.word	0x000a2319
   8a300:	20072d2e 	.word	0x20072d2e
   8a304:	20072110 	.word	0x20072110
   8a308:	000a29f1 	.word	0x000a29f1
   8a30c:	421c0000 	.word	0x421c0000
   8a310:	200720fe 	.word	0x200720fe
   8a314:	42100000 	.word	0x42100000
   8a318:	000a29dd 	.word	0x000a29dd
   8a31c:	42140000 	.word	0x42140000
   8a320:	00096869 	.word	0x00096869
   8a324:	00000000 	.word	0x00000000

0008a328 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a328:	b598      	push	{r3, r4, r7, lr}
   8a32a:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a32c:	4b68      	ldr	r3, [pc, #416]	; (8a4d0 <Fine_DutyCorrection+0x1a8>)
   8a32e:	681a      	ldr	r2, [r3, #0]
   8a330:	4b68      	ldr	r3, [pc, #416]	; (8a4d4 <Fine_DutyCorrection+0x1ac>)
   8a332:	4610      	mov	r0, r2
   8a334:	4798      	blx	r3
   8a336:	4c68      	ldr	r4, [pc, #416]	; (8a4d8 <Fine_DutyCorrection+0x1b0>)
   8a338:	a361      	add	r3, pc, #388	; (adr r3, 8a4c0 <Fine_DutyCorrection+0x198>)
   8a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a33e:	47a0      	blx	r4
   8a340:	4603      	mov	r3, r0
   8a342:	2b00      	cmp	r3, #0
   8a344:	d002      	beq.n	8a34c <Fine_DutyCorrection+0x24>
	{
		duty_count = 40;												
   8a346:	4b65      	ldr	r3, [pc, #404]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a348:	2228      	movs	r2, #40	; 0x28
   8a34a:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a34c:	4b60      	ldr	r3, [pc, #384]	; (8a4d0 <Fine_DutyCorrection+0x1a8>)
   8a34e:	681a      	ldr	r2, [r3, #0]
   8a350:	4b60      	ldr	r3, [pc, #384]	; (8a4d4 <Fine_DutyCorrection+0x1ac>)
   8a352:	4610      	mov	r0, r2
   8a354:	4798      	blx	r3
   8a356:	4c60      	ldr	r4, [pc, #384]	; (8a4d8 <Fine_DutyCorrection+0x1b0>)
   8a358:	a35b      	add	r3, pc, #364	; (adr r3, 8a4c8 <Fine_DutyCorrection+0x1a0>)
   8a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a35e:	47a0      	blx	r4
   8a360:	4603      	mov	r3, r0
   8a362:	2b00      	cmp	r3, #0
   8a364:	d00f      	beq.n	8a386 <Fine_DutyCorrection+0x5e>
   8a366:	4b5a      	ldr	r3, [pc, #360]	; (8a4d0 <Fine_DutyCorrection+0x1a8>)
   8a368:	681a      	ldr	r2, [r3, #0]
   8a36a:	4b5a      	ldr	r3, [pc, #360]	; (8a4d4 <Fine_DutyCorrection+0x1ac>)
   8a36c:	4610      	mov	r0, r2
   8a36e:	4798      	blx	r3
   8a370:	4c5b      	ldr	r4, [pc, #364]	; (8a4e0 <Fine_DutyCorrection+0x1b8>)
   8a372:	a353      	add	r3, pc, #332	; (adr r3, 8a4c0 <Fine_DutyCorrection+0x198>)
   8a374:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a378:	47a0      	blx	r4
   8a37a:	4603      	mov	r3, r0
   8a37c:	2b00      	cmp	r3, #0
   8a37e:	d002      	beq.n	8a386 <Fine_DutyCorrection+0x5e>
	{
		duty_count = 20;
   8a380:	4b56      	ldr	r3, [pc, #344]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a382:	2214      	movs	r2, #20
   8a384:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   8a386:	4b52      	ldr	r3, [pc, #328]	; (8a4d0 <Fine_DutyCorrection+0x1a8>)
   8a388:	681a      	ldr	r2, [r3, #0]
   8a38a:	4b52      	ldr	r3, [pc, #328]	; (8a4d4 <Fine_DutyCorrection+0x1ac>)
   8a38c:	4610      	mov	r0, r2
   8a38e:	4798      	blx	r3
   8a390:	4c54      	ldr	r4, [pc, #336]	; (8a4e4 <Fine_DutyCorrection+0x1bc>)
   8a392:	a34d      	add	r3, pc, #308	; (adr r3, 8a4c8 <Fine_DutyCorrection+0x1a0>)
   8a394:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a398:	47a0      	blx	r4
   8a39a:	4603      	mov	r3, r0
   8a39c:	2b00      	cmp	r3, #0
   8a39e:	d002      	beq.n	8a3a6 <Fine_DutyCorrection+0x7e>
	{
		duty_count = 4;
   8a3a0:	4b4e      	ldr	r3, [pc, #312]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a3a2:	2204      	movs	r2, #4
   8a3a4:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8a3a6:	4b50      	ldr	r3, [pc, #320]	; (8a4e8 <Fine_DutyCorrection+0x1c0>)
   8a3a8:	781b      	ldrb	r3, [r3, #0]
   8a3aa:	2b00      	cmp	r3, #0
   8a3ac:	d128      	bne.n	8a400 <Fine_DutyCorrection+0xd8>
   8a3ae:	4b4f      	ldr	r3, [pc, #316]	; (8a4ec <Fine_DutyCorrection+0x1c4>)
   8a3b0:	681a      	ldr	r2, [r3, #0]
   8a3b2:	4b4f      	ldr	r3, [pc, #316]	; (8a4f0 <Fine_DutyCorrection+0x1c8>)
   8a3b4:	494f      	ldr	r1, [pc, #316]	; (8a4f4 <Fine_DutyCorrection+0x1cc>)
   8a3b6:	4610      	mov	r0, r2
   8a3b8:	4798      	blx	r3
   8a3ba:	4603      	mov	r3, r0
   8a3bc:	2b00      	cmp	r3, #0
   8a3be:	d01f      	beq.n	8a400 <Fine_DutyCorrection+0xd8>
   8a3c0:	4b4d      	ldr	r3, [pc, #308]	; (8a4f8 <Fine_DutyCorrection+0x1d0>)
   8a3c2:	681a      	ldr	r2, [r3, #0]
   8a3c4:	4b4a      	ldr	r3, [pc, #296]	; (8a4f0 <Fine_DutyCorrection+0x1c8>)
   8a3c6:	494b      	ldr	r1, [pc, #300]	; (8a4f4 <Fine_DutyCorrection+0x1cc>)
   8a3c8:	4610      	mov	r0, r2
   8a3ca:	4798      	blx	r3
   8a3cc:	4603      	mov	r3, r0
   8a3ce:	2b00      	cmp	r3, #0
   8a3d0:	d016      	beq.n	8a400 <Fine_DutyCorrection+0xd8>
	{
		avg_duty = avg_duty - duty_count;
   8a3d2:	4b4a      	ldr	r3, [pc, #296]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a3d4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a3d8:	b29a      	uxth	r2, r3
   8a3da:	4b40      	ldr	r3, [pc, #256]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a3dc:	781b      	ldrb	r3, [r3, #0]
   8a3de:	b29b      	uxth	r3, r3
   8a3e0:	1ad3      	subs	r3, r2, r3
   8a3e2:	b29b      	uxth	r3, r3
   8a3e4:	b21a      	sxth	r2, r3
   8a3e6:	4b45      	ldr	r3, [pc, #276]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a3e8:	801a      	strh	r2, [r3, #0]
		
		if (avg_duty <= 1000)
   8a3ea:	4b44      	ldr	r3, [pc, #272]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a3ec:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a3f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a3f4:	dc61      	bgt.n	8a4ba <Fine_DutyCorrection+0x192>
		{
			avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8a3f6:	4b41      	ldr	r3, [pc, #260]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a3f8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a3fc:	801a      	strh	r2, [r3, #0]
	}
	if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
	{
		avg_duty = avg_duty - duty_count;
		
		if (avg_duty <= 1000)
   8a3fe:	e05c      	b.n	8a4ba <Fine_DutyCorrection+0x192>
		{
			avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
		}
	}
	else if ((TS2_Direction == UP)  && ((Tmp2Val >= 35) && (Tmp2Val <= 38.5)) && (Tmp3Val <= 38) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   8a400:	4b39      	ldr	r3, [pc, #228]	; (8a4e8 <Fine_DutyCorrection+0x1c0>)
   8a402:	781b      	ldrb	r3, [r3, #0]
   8a404:	2b00      	cmp	r3, #0
   8a406:	d127      	bne.n	8a458 <Fine_DutyCorrection+0x130>
   8a408:	4b38      	ldr	r3, [pc, #224]	; (8a4ec <Fine_DutyCorrection+0x1c4>)
   8a40a:	681a      	ldr	r2, [r3, #0]
   8a40c:	4b38      	ldr	r3, [pc, #224]	; (8a4f0 <Fine_DutyCorrection+0x1c8>)
   8a40e:	493c      	ldr	r1, [pc, #240]	; (8a500 <Fine_DutyCorrection+0x1d8>)
   8a410:	4610      	mov	r0, r2
   8a412:	4798      	blx	r3
   8a414:	4603      	mov	r3, r0
   8a416:	2b00      	cmp	r3, #0
   8a418:	d01e      	beq.n	8a458 <Fine_DutyCorrection+0x130>
   8a41a:	4b34      	ldr	r3, [pc, #208]	; (8a4ec <Fine_DutyCorrection+0x1c4>)
   8a41c:	681a      	ldr	r2, [r3, #0]
   8a41e:	4b39      	ldr	r3, [pc, #228]	; (8a504 <Fine_DutyCorrection+0x1dc>)
   8a420:	4939      	ldr	r1, [pc, #228]	; (8a508 <Fine_DutyCorrection+0x1e0>)
   8a422:	4610      	mov	r0, r2
   8a424:	4798      	blx	r3
   8a426:	4603      	mov	r3, r0
   8a428:	2b00      	cmp	r3, #0
   8a42a:	d015      	beq.n	8a458 <Fine_DutyCorrection+0x130>
   8a42c:	4b32      	ldr	r3, [pc, #200]	; (8a4f8 <Fine_DutyCorrection+0x1d0>)
   8a42e:	681a      	ldr	r2, [r3, #0]
   8a430:	4b34      	ldr	r3, [pc, #208]	; (8a504 <Fine_DutyCorrection+0x1dc>)
   8a432:	4936      	ldr	r1, [pc, #216]	; (8a50c <Fine_DutyCorrection+0x1e4>)
   8a434:	4610      	mov	r0, r2
   8a436:	4798      	blx	r3
   8a438:	4603      	mov	r3, r0
   8a43a:	2b00      	cmp	r3, #0
   8a43c:	d00c      	beq.n	8a458 <Fine_DutyCorrection+0x130>
	{
		avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a43e:	4b27      	ldr	r3, [pc, #156]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a440:	781b      	ldrb	r3, [r3, #0]
   8a442:	b29a      	uxth	r2, r3
   8a444:	4b2d      	ldr	r3, [pc, #180]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a446:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a44a:	b29b      	uxth	r3, r3
   8a44c:	4413      	add	r3, r2
   8a44e:	b29b      	uxth	r3, r3
   8a450:	b21a      	sxth	r2, r3
   8a452:	4b2a      	ldr	r3, [pc, #168]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a454:	801a      	strh	r2, [r3, #0]
   8a456:	e030      	b.n	8a4ba <Fine_DutyCorrection+0x192>
	}
	else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
   8a458:	4b23      	ldr	r3, [pc, #140]	; (8a4e8 <Fine_DutyCorrection+0x1c0>)
   8a45a:	781b      	ldrb	r3, [r3, #0]
   8a45c:	2b01      	cmp	r3, #1
   8a45e:	d122      	bne.n	8a4a6 <Fine_DutyCorrection+0x17e>
   8a460:	4b22      	ldr	r3, [pc, #136]	; (8a4ec <Fine_DutyCorrection+0x1c4>)
   8a462:	681a      	ldr	r2, [r3, #0]
   8a464:	4b27      	ldr	r3, [pc, #156]	; (8a504 <Fine_DutyCorrection+0x1dc>)
   8a466:	4923      	ldr	r1, [pc, #140]	; (8a4f4 <Fine_DutyCorrection+0x1cc>)
   8a468:	4610      	mov	r0, r2
   8a46a:	4798      	blx	r3
   8a46c:	4603      	mov	r3, r0
   8a46e:	2b00      	cmp	r3, #0
   8a470:	d019      	beq.n	8a4a6 <Fine_DutyCorrection+0x17e>
	{
		avg_duty = avg_duty + duty_count;
   8a472:	4b1a      	ldr	r3, [pc, #104]	; (8a4dc <Fine_DutyCorrection+0x1b4>)
   8a474:	781b      	ldrb	r3, [r3, #0]
   8a476:	b29a      	uxth	r2, r3
   8a478:	4b20      	ldr	r3, [pc, #128]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a47a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a47e:	b29b      	uxth	r3, r3
   8a480:	4413      	add	r3, r2
   8a482:	b29b      	uxth	r3, r3
   8a484:	b21a      	sxth	r2, r3
   8a486:	4b1d      	ldr	r3, [pc, #116]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a488:	801a      	strh	r2, [r3, #0]
		
		if (avg_duty > 2300)  //Sunil limiting to 2300
   8a48a:	4b1c      	ldr	r3, [pc, #112]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a48c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a490:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a494:	4293      	cmp	r3, r2
   8a496:	dd10      	ble.n	8a4ba <Fine_DutyCorrection+0x192>
		{
			avg_duty = 2300;
   8a498:	4b18      	ldr	r3, [pc, #96]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a49a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a49e:	801a      	strh	r2, [r3, #0]
			sv_cntrl_poweroffheater();
   8a4a0:	4b1b      	ldr	r3, [pc, #108]	; (8a510 <Fine_DutyCorrection+0x1e8>)
   8a4a2:	4798      	blx	r3
	}
	else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
	{
		avg_duty = avg_duty + duty_count;
		
		if (avg_duty > 2300)  //Sunil limiting to 2300
   8a4a4:	e009      	b.n	8a4ba <Fine_DutyCorrection+0x192>
			avg_duty = 2300;
			sv_cntrl_poweroffheater();
//			HeaterState = CL_HEATER_STATE_OFF;
		}
	}
	else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing 
   8a4a6:	4b10      	ldr	r3, [pc, #64]	; (8a4e8 <Fine_DutyCorrection+0x1c0>)
   8a4a8:	781b      	ldrb	r3, [r3, #0]
   8a4aa:	2b02      	cmp	r3, #2
   8a4ac:	d105      	bne.n	8a4ba <Fine_DutyCorrection+0x192>
	avg_duty = avg_duty;
   8a4ae:	4b13      	ldr	r3, [pc, #76]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a4b0:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a4b4:	4b11      	ldr	r3, [pc, #68]	; (8a4fc <Fine_DutyCorrection+0x1d4>)
   8a4b6:	801a      	strh	r2, [r3, #0]
}
   8a4b8:	e7ff      	b.n	8a4ba <Fine_DutyCorrection+0x192>
   8a4ba:	bf00      	nop
   8a4bc:	bd98      	pop	{r3, r4, r7, pc}
   8a4be:	bf00      	nop
   8a4c0:	eb851eb8 	.word	0xeb851eb8
   8a4c4:	3f9eb851 	.word	0x3f9eb851
   8a4c8:	33333333 	.word	0x33333333
   8a4cc:	3fd33333 	.word	0x3fd33333
   8a4d0:	20072128 	.word	0x20072128
   8a4d4:	000a1d65 	.word	0x000a1d65
   8a4d8:	000a2305 	.word	0x000a2305
   8a4dc:	2007212c 	.word	0x2007212c
   8a4e0:	000a232d 	.word	0x000a232d
   8a4e4:	000a2319 	.word	0x000a2319
   8a4e8:	20072d2e 	.word	0x20072d2e
   8a4ec:	20072110 	.word	0x20072110
   8a4f0:	000a29f1 	.word	0x000a29f1
   8a4f4:	42160000 	.word	0x42160000
   8a4f8:	20072114 	.word	0x20072114
   8a4fc:	200720fe 	.word	0x200720fe
   8a500:	420c0000 	.word	0x420c0000
   8a504:	000a29dd 	.word	0x000a29dd
   8a508:	421a0000 	.word	0x421a0000
   8a50c:	42180000 	.word	0x42180000
   8a510:	00096869 	.word	0x00096869

0008a514 <DataDisplay>:

DataDisplay()
{
   8a514:	b580      	push	{r7, lr}
   8a516:	b082      	sub	sp, #8
   8a518:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   8a51a:	2300      	movs	r3, #0
   8a51c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   8a51e:	4b36      	ldr	r3, [pc, #216]	; (8a5f8 <DataDisplay+0xe4>)
   8a520:	681a      	ldr	r2, [r3, #0]
   8a522:	4b36      	ldr	r3, [pc, #216]	; (8a5fc <DataDisplay+0xe8>)
   8a524:	4610      	mov	r0, r2
   8a526:	4798      	blx	r3
   8a528:	4603      	mov	r3, r0
   8a52a:	b29b      	uxth	r3, r3
   8a52c:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   8a52e:	2304      	movs	r3, #4
   8a530:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a532:	1d3b      	adds	r3, r7, #4
   8a534:	2204      	movs	r2, #4
   8a536:	4619      	mov	r1, r3
   8a538:	2037      	movs	r0, #55	; 0x37
   8a53a:	4b31      	ldr	r3, [pc, #196]	; (8a600 <DataDisplay+0xec>)
   8a53c:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a53e:	2300      	movs	r3, #0
   8a540:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   8a542:	4b30      	ldr	r3, [pc, #192]	; (8a604 <DataDisplay+0xf0>)
   8a544:	681a      	ldr	r2, [r3, #0]
   8a546:	4b2d      	ldr	r3, [pc, #180]	; (8a5fc <DataDisplay+0xe8>)
   8a548:	4610      	mov	r0, r2
   8a54a:	4798      	blx	r3
   8a54c:	4603      	mov	r3, r0
   8a54e:	b29b      	uxth	r3, r3
   8a550:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   8a552:	2305      	movs	r3, #5
   8a554:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a556:	1d3b      	adds	r3, r7, #4
   8a558:	2204      	movs	r2, #4
   8a55a:	4619      	mov	r1, r3
   8a55c:	2037      	movs	r0, #55	; 0x37
   8a55e:	4b28      	ldr	r3, [pc, #160]	; (8a600 <DataDisplay+0xec>)
   8a560:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a562:	2300      	movs	r3, #0
   8a564:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   8a566:	4b28      	ldr	r3, [pc, #160]	; (8a608 <DataDisplay+0xf4>)
   8a568:	681a      	ldr	r2, [r3, #0]
   8a56a:	4b24      	ldr	r3, [pc, #144]	; (8a5fc <DataDisplay+0xe8>)
   8a56c:	4610      	mov	r0, r2
   8a56e:	4798      	blx	r3
   8a570:	4603      	mov	r3, r0
   8a572:	b29b      	uxth	r3, r3
   8a574:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   8a576:	2306      	movs	r3, #6
   8a578:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a57a:	1d3b      	adds	r3, r7, #4
   8a57c:	2204      	movs	r2, #4
   8a57e:	4619      	mov	r1, r3
   8a580:	2037      	movs	r0, #55	; 0x37
   8a582:	4b1f      	ldr	r3, [pc, #124]	; (8a600 <DataDisplay+0xec>)
   8a584:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a586:	2300      	movs	r3, #0
   8a588:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8a58a:	4b20      	ldr	r3, [pc, #128]	; (8a60c <DataDisplay+0xf8>)
   8a58c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a590:	b29b      	uxth	r3, r3
   8a592:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8a594:	2307      	movs	r3, #7
   8a596:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a598:	1d3b      	adds	r3, r7, #4
   8a59a:	2204      	movs	r2, #4
   8a59c:	4619      	mov	r1, r3
   8a59e:	2037      	movs	r0, #55	; 0x37
   8a5a0:	4b17      	ldr	r3, [pc, #92]	; (8a600 <DataDisplay+0xec>)
   8a5a2:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a5a4:	2300      	movs	r3, #0
   8a5a6:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = TS2_Direction;
   8a5a8:	4b19      	ldr	r3, [pc, #100]	; (8a610 <DataDisplay+0xfc>)
   8a5aa:	781b      	ldrb	r3, [r3, #0]
   8a5ac:	b29b      	uxth	r3, r3
   8a5ae:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 14;
   8a5b0:	230e      	movs	r3, #14
   8a5b2:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a5b4:	1d3b      	adds	r3, r7, #4
   8a5b6:	2204      	movs	r2, #4
   8a5b8:	4619      	mov	r1, r3
   8a5ba:	2037      	movs	r0, #55	; 0x37
   8a5bc:	4b10      	ldr	r3, [pc, #64]	; (8a600 <DataDisplay+0xec>)
   8a5be:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8a5c0:	2300      	movs	r3, #0
   8a5c2:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = TS2_slope * 100;
   8a5c4:	4b13      	ldr	r3, [pc, #76]	; (8a614 <DataDisplay+0x100>)
   8a5c6:	681a      	ldr	r2, [r3, #0]
   8a5c8:	4b13      	ldr	r3, [pc, #76]	; (8a618 <DataDisplay+0x104>)
   8a5ca:	4914      	ldr	r1, [pc, #80]	; (8a61c <DataDisplay+0x108>)
   8a5cc:	4610      	mov	r0, r2
   8a5ce:	4798      	blx	r3
   8a5d0:	4603      	mov	r3, r0
   8a5d2:	461a      	mov	r2, r3
   8a5d4:	4b09      	ldr	r3, [pc, #36]	; (8a5fc <DataDisplay+0xe8>)
   8a5d6:	4610      	mov	r0, r2
   8a5d8:	4798      	blx	r3
   8a5da:	4603      	mov	r3, r0
   8a5dc:	b29b      	uxth	r3, r3
   8a5de:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 15;
   8a5e0:	230f      	movs	r3, #15
   8a5e2:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a5e4:	1d3b      	adds	r3, r7, #4
   8a5e6:	2204      	movs	r2, #4
   8a5e8:	4619      	mov	r1, r3
   8a5ea:	2037      	movs	r0, #55	; 0x37
   8a5ec:	4b04      	ldr	r3, [pc, #16]	; (8a600 <DataDisplay+0xec>)
   8a5ee:	4798      	blx	r3
	
//****************************************
}
   8a5f0:	bf00      	nop
   8a5f2:	3708      	adds	r7, #8
   8a5f4:	46bd      	mov	sp, r7
   8a5f6:	bd80      	pop	{r7, pc}
   8a5f8:	2007210c 	.word	0x2007210c
   8a5fc:	000a2a65 	.word	0x000a2a65
   8a600:	00098601 	.word	0x00098601
   8a604:	20072110 	.word	0x20072110
   8a608:	20072114 	.word	0x20072114
   8a60c:	200720fe 	.word	0x200720fe
   8a610:	20072d2e 	.word	0x20072d2e
   8a614:	20072128 	.word	0x20072128
   8a618:	000a268d 	.word	0x000a268d
   8a61c:	42c80000 	.word	0x42c80000

0008a620 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8a620:	b580      	push	{r7, lr}
   8a622:	b090      	sub	sp, #64	; 0x40
   8a624:	af00      	add	r7, sp, #0
   8a626:	4603      	mov	r3, r0
   8a628:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8a62a:	2300      	movs	r3, #0
   8a62c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8a630:	2300      	movs	r3, #0
   8a632:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8a636:	2300      	movs	r3, #0
   8a638:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8a63a:	f107 0239 	add.w	r2, r7, #57	; 0x39
   8a63e:	79fb      	ldrb	r3, [r7, #7]
   8a640:	4611      	mov	r1, r2
   8a642:	4618      	mov	r0, r3
   8a644:	4b82      	ldr	r3, [pc, #520]	; (8a850 <Cl_Init_Controller+0x230>)
   8a646:	4798      	blx	r3
	switch (Cl_Init_States)
   8a648:	4b82      	ldr	r3, [pc, #520]	; (8a854 <Cl_Init_Controller+0x234>)
   8a64a:	781b      	ldrb	r3, [r3, #0]
   8a64c:	2b08      	cmp	r3, #8
   8a64e:	f200 80f8 	bhi.w	8a842 <Cl_Init_Controller+0x222>
   8a652:	a201      	add	r2, pc, #4	; (adr r2, 8a658 <Cl_Init_Controller+0x38>)
   8a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a658:	0008a67d 	.word	0x0008a67d
   8a65c:	0008a78b 	.word	0x0008a78b
   8a660:	0008a7b5 	.word	0x0008a7b5
   8a664:	0008a843 	.word	0x0008a843
   8a668:	0008a843 	.word	0x0008a843
   8a66c:	0008a7dd 	.word	0x0008a7dd
   8a670:	0008a843 	.word	0x0008a843
   8a674:	0008a843 	.word	0x0008a843
   8a678:	0008a80d 	.word	0x0008a80d
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8a67c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a680:	2b01      	cmp	r3, #1
   8a682:	d000      	beq.n	8a686 <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8a684:	e080      	b.n	8a788 <Cl_Init_Controller+0x168>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8a686:	4b73      	ldr	r3, [pc, #460]	; (8a854 <Cl_Init_Controller+0x234>)
   8a688:	2201      	movs	r2, #1
   8a68a:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8a68c:	2302      	movs	r3, #2
   8a68e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a692:	231a      	movs	r3, #26
   8a694:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a698:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a69c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a6a0:	2201      	movs	r2, #1
   8a6a2:	4618      	mov	r0, r3
   8a6a4:	4b6c      	ldr	r3, [pc, #432]	; (8a858 <Cl_Init_Controller+0x238>)
   8a6a6:	4798      	blx	r3
   8a6a8:	4603      	mov	r3, r0
   8a6aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8a6ae:	4b69      	ldr	r3, [pc, #420]	; (8a854 <Cl_Init_Controller+0x234>)
   8a6b0:	2205      	movs	r2, #5
   8a6b2:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8a6b4:	2305      	movs	r3, #5
   8a6b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a6ba:	231a      	movs	r3, #26
   8a6bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a6c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a6c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a6c8:	2201      	movs	r2, #1
   8a6ca:	4618      	mov	r0, r3
   8a6cc:	4b62      	ldr	r3, [pc, #392]	; (8a858 <Cl_Init_Controller+0x238>)
   8a6ce:	4798      	blx	r3
   8a6d0:	4603      	mov	r3, r0
   8a6d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8a6d6:	e00d      	b.n	8a6f4 <Cl_Init_Controller+0xd4>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8a6d8:	4a60      	ldr	r2, [pc, #384]	; (8a85c <Cl_Init_Controller+0x23c>)
   8a6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a6dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a6e2:	009b      	lsls	r3, r3, #2
   8a6e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8a6e8:	440b      	add	r3, r1
   8a6ea:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a6f0:	3301      	adds	r3, #1
   8a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a6f6:	2b09      	cmp	r3, #9
   8a6f8:	ddee      	ble.n	8a6d8 <Cl_Init_Controller+0xb8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8a6fa:	2300      	movs	r3, #0
   8a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8a6fe:	e00f      	b.n	8a720 <Cl_Init_Controller+0x100>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8a700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a702:	009b      	lsls	r3, r3, #2
   8a704:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8a708:	4413      	add	r3, r2
   8a70a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8a70e:	4953      	ldr	r1, [pc, #332]	; (8a85c <Cl_Init_Controller+0x23c>)
   8a710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a712:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8a716:	429a      	cmp	r2, r3
   8a718:	d106      	bne.n	8a728 <Cl_Init_Controller+0x108>
							{
								// test FAILed
								break;
							}
							count++;
   8a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a71c:	3301      	adds	r3, #1
   8a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8a720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a722:	2b09      	cmp	r3, #9
   8a724:	ddec      	ble.n	8a700 <Cl_Init_Controller+0xe0>
   8a726:	e000      	b.n	8a72a <Cl_Init_Controller+0x10a>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
							{
								// test FAILed
								break;
   8a728:	bf00      	nop
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8a72a:	4b4a      	ldr	r3, [pc, #296]	; (8a854 <Cl_Init_Controller+0x234>)
   8a72c:	2207      	movs	r2, #7
   8a72e:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8a730:	2307      	movs	r3, #7
   8a732:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a736:	231a      	movs	r3, #26
   8a738:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a73c:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a740:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a744:	2201      	movs	r2, #1
   8a746:	4618      	mov	r0, r3
   8a748:	4b43      	ldr	r3, [pc, #268]	; (8a858 <Cl_Init_Controller+0x238>)
   8a74a:	4798      	blx	r3
   8a74c:	4603      	mov	r3, r0
   8a74e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8a752:	4b40      	ldr	r3, [pc, #256]	; (8a854 <Cl_Init_Controller+0x234>)
   8a754:	2208      	movs	r2, #8
   8a756:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8a758:	2308      	movs	r3, #8
   8a75a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8a75e:	231b      	movs	r3, #27
   8a760:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8a764:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a768:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a76c:	2200      	movs	r2, #0
   8a76e:	4618      	mov	r0, r3
   8a770:	4b39      	ldr	r3, [pc, #228]	; (8a858 <Cl_Init_Controller+0x238>)
   8a772:	4798      	blx	r3
   8a774:	4603      	mov	r3, r0
   8a776:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8a77a:	2000      	movs	r0, #0
   8a77c:	4b38      	ldr	r3, [pc, #224]	; (8a860 <Cl_Init_Controller+0x240>)
   8a77e:	4798      	blx	r3
   8a780:	4603      	mov	r3, r0
   8a782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8a786:	bf00      	nop
						default:break;
					}
		break;
   8a788:	e05c      	b.n	8a844 <Cl_Init_Controller+0x224>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8a78a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a78e:	3b02      	subs	r3, #2
   8a790:	2b04      	cmp	r3, #4
   8a792:	d80d      	bhi.n	8a7b0 <Cl_Init_Controller+0x190>
   8a794:	a201      	add	r2, pc, #4	; (adr r2, 8a79c <Cl_Init_Controller+0x17c>)
   8a796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a79a:	bf00      	nop
   8a79c:	0008a7b1 	.word	0x0008a7b1
   8a7a0:	0008a7b1 	.word	0x0008a7b1
   8a7a4:	0008a7b1 	.word	0x0008a7b1
   8a7a8:	0008a7b1 	.word	0x0008a7b1
   8a7ac:	0008a7b1 	.word	0x0008a7b1
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a7b0:	bf00      	nop
					}
		break;
   8a7b2:	e047      	b.n	8a844 <Cl_Init_Controller+0x224>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8a7b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a7b8:	3b02      	subs	r3, #2
   8a7ba:	2b04      	cmp	r3, #4
   8a7bc:	d80c      	bhi.n	8a7d8 <Cl_Init_Controller+0x1b8>
   8a7be:	a201      	add	r2, pc, #4	; (adr r2, 8a7c4 <Cl_Init_Controller+0x1a4>)
   8a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a7c4:	0008a7d9 	.word	0x0008a7d9
   8a7c8:	0008a7d9 	.word	0x0008a7d9
   8a7cc:	0008a7d9 	.word	0x0008a7d9
   8a7d0:	0008a7d9 	.word	0x0008a7d9
   8a7d4:	0008a7d9 	.word	0x0008a7d9
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a7d8:	bf00      	nop
					}
		break;
   8a7da:	e033      	b.n	8a844 <Cl_Init_Controller+0x224>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8a7dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a7e0:	3b02      	subs	r3, #2
   8a7e2:	2b04      	cmp	r3, #4
   8a7e4:	d810      	bhi.n	8a808 <Cl_Init_Controller+0x1e8>
   8a7e6:	a201      	add	r2, pc, #4	; (adr r2, 8a7ec <Cl_Init_Controller+0x1cc>)
   8a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a7ec:	0008a809 	.word	0x0008a809
   8a7f0:	0008a809 	.word	0x0008a809
   8a7f4:	0008a801 	.word	0x0008a801
   8a7f8:	0008a809 	.word	0x0008a809
   8a7fc:	0008a809 	.word	0x0008a809
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8a800:	4b14      	ldr	r3, [pc, #80]	; (8a854 <Cl_Init_Controller+0x234>)
   8a802:	2208      	movs	r2, #8
   8a804:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8a806:	e000      	b.n	8a80a <Cl_Init_Controller+0x1ea>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a808:	bf00      	nop
					}
		break;
   8a80a:	e01b      	b.n	8a844 <Cl_Init_Controller+0x224>
		case CL_INIT_READY:
							switch(cl_initevent)
   8a80c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a810:	3b02      	subs	r3, #2
   8a812:	2b04      	cmp	r3, #4
   8a814:	d813      	bhi.n	8a83e <Cl_Init_Controller+0x21e>
   8a816:	a201      	add	r2, pc, #4	; (adr r2, 8a81c <Cl_Init_Controller+0x1fc>)
   8a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a81c:	0008a83f 	.word	0x0008a83f
   8a820:	0008a83f 	.word	0x0008a83f
   8a824:	0008a831 	.word	0x0008a831
   8a828:	0008a83f 	.word	0x0008a83f
   8a82c:	0008a83f 	.word	0x0008a83f
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8a830:	2043      	movs	r0, #67	; 0x43
   8a832:	4b0c      	ldr	r3, [pc, #48]	; (8a864 <Cl_Init_Controller+0x244>)
   8a834:	4798      	blx	r3
   8a836:	4603      	mov	r3, r0
   8a838:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8a83c:	e000      	b.n	8a840 <Cl_Init_Controller+0x220>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8a83e:	bf00      	nop
							}
					

		break;
   8a840:	e000      	b.n	8a844 <Cl_Init_Controller+0x224>

			
			default: break;
   8a842:	bf00      	nop
	}
return CL_OK;	
   8a844:	2300      	movs	r3, #0
}
   8a846:	4618      	mov	r0, r3
   8a848:	3740      	adds	r7, #64	; 0x40
   8a84a:	46bd      	mov	sp, r7
   8a84c:	bd80      	pop	{r7, pc}
   8a84e:	bf00      	nop
   8a850:	0008a869 	.word	0x0008a869
   8a854:	2007212d 	.word	0x2007212d
   8a858:	00098601 	.word	0x00098601
   8a85c:	2007044c 	.word	0x2007044c
   8a860:	0008e179 	.word	0x0008e179
   8a864:	0008a915 	.word	0x0008a915

0008a868 <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8a868:	b480      	push	{r7}
   8a86a:	b083      	sub	sp, #12
   8a86c:	af00      	add	r7, sp, #0
   8a86e:	4603      	mov	r3, r0
   8a870:	6039      	str	r1, [r7, #0]
   8a872:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8a874:	79fb      	ldrb	r3, [r7, #7]
   8a876:	3b2a      	subs	r3, #42	; 0x2a
   8a878:	2b13      	cmp	r3, #19
   8a87a:	d843      	bhi.n	8a904 <cl_init_translatemacevent+0x9c>
   8a87c:	a201      	add	r2, pc, #4	; (adr r2, 8a884 <cl_init_translatemacevent+0x1c>)
   8a87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a882:	bf00      	nop
   8a884:	0008a8d5 	.word	0x0008a8d5
   8a888:	0008a905 	.word	0x0008a905
   8a88c:	0008a905 	.word	0x0008a905
   8a890:	0008a905 	.word	0x0008a905
   8a894:	0008a905 	.word	0x0008a905
   8a898:	0008a905 	.word	0x0008a905
   8a89c:	0008a905 	.word	0x0008a905
   8a8a0:	0008a905 	.word	0x0008a905
   8a8a4:	0008a905 	.word	0x0008a905
   8a8a8:	0008a905 	.word	0x0008a905
   8a8ac:	0008a905 	.word	0x0008a905
   8a8b0:	0008a905 	.word	0x0008a905
   8a8b4:	0008a905 	.word	0x0008a905
   8a8b8:	0008a905 	.word	0x0008a905
   8a8bc:	0008a905 	.word	0x0008a905
   8a8c0:	0008a8dd 	.word	0x0008a8dd
   8a8c4:	0008a8e5 	.word	0x0008a8e5
   8a8c8:	0008a8ed 	.word	0x0008a8ed
   8a8cc:	0008a8f5 	.word	0x0008a8f5
   8a8d0:	0008a8fd 	.word	0x0008a8fd
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8a8d4:	683b      	ldr	r3, [r7, #0]
   8a8d6:	2201      	movs	r2, #1
   8a8d8:	701a      	strb	r2, [r3, #0]
		break;
   8a8da:	e014      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8a8dc:	683b      	ldr	r3, [r7, #0]
   8a8de:	2202      	movs	r2, #2
   8a8e0:	701a      	strb	r2, [r3, #0]
		break;
   8a8e2:	e010      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8a8e4:	683b      	ldr	r3, [r7, #0]
   8a8e6:	2203      	movs	r2, #3
   8a8e8:	701a      	strb	r2, [r3, #0]
		break;
   8a8ea:	e00c      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8a8ec:	683b      	ldr	r3, [r7, #0]
   8a8ee:	2204      	movs	r2, #4
   8a8f0:	701a      	strb	r2, [r3, #0]
		break;		
   8a8f2:	e008      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8a8f4:	683b      	ldr	r3, [r7, #0]
   8a8f6:	2205      	movs	r2, #5
   8a8f8:	701a      	strb	r2, [r3, #0]
		break;	
   8a8fa:	e004      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8a8fc:	683b      	ldr	r3, [r7, #0]
   8a8fe:	2206      	movs	r2, #6
   8a900:	701a      	strb	r2, [r3, #0]
		break;
   8a902:	e000      	b.n	8a906 <cl_init_translatemacevent+0x9e>
		default:
		break;
   8a904:	bf00      	nop
	}
	return CL_OK;
   8a906:	2300      	movs	r3, #0
}
   8a908:	4618      	mov	r0, r3
   8a90a:	370c      	adds	r7, #12
   8a90c:	46bd      	mov	sp, r7
   8a90e:	bc80      	pop	{r7}
   8a910:	4770      	bx	lr
   8a912:	bf00      	nop

0008a914 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8a914:	b480      	push	{r7}
   8a916:	b085      	sub	sp, #20
   8a918:	af00      	add	r7, sp, #0
   8a91a:	4603      	mov	r3, r0
   8a91c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8a91e:	2300      	movs	r3, #0
   8a920:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8a922:	4b0d      	ldr	r3, [pc, #52]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a924:	781b      	ldrb	r3, [r3, #0]
   8a926:	2b0a      	cmp	r3, #10
   8a928:	d80f      	bhi.n	8a94a <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8a92a:	4b0b      	ldr	r3, [pc, #44]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a92c:	781b      	ldrb	r3, [r3, #0]
   8a92e:	461a      	mov	r2, r3
   8a930:	4b09      	ldr	r3, [pc, #36]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a932:	4413      	add	r3, r2
   8a934:	79fa      	ldrb	r2, [r7, #7]
   8a936:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8a938:	4b07      	ldr	r3, [pc, #28]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a93a:	2201      	movs	r2, #1
   8a93c:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8a93e:	4b06      	ldr	r3, [pc, #24]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a940:	781b      	ldrb	r3, [r3, #0]
   8a942:	3301      	adds	r3, #1
   8a944:	b2da      	uxtb	r2, r3
   8a946:	4b04      	ldr	r3, [pc, #16]	; (8a958 <Cl_mac_apprequesthandler+0x44>)
   8a948:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8a94a:	7bfb      	ldrb	r3, [r7, #15]
   8a94c:	4618      	mov	r0, r3
   8a94e:	3714      	adds	r7, #20
   8a950:	46bd      	mov	sp, r7
   8a952:	bc80      	pop	{r7}
   8a954:	4770      	bx	lr
   8a956:	bf00      	nop
   8a958:	20072e58 	.word	0x20072e58

0008a95c <main>:

extern uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri);
extern uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri);
Sys_statusType temp_sensor_struct;
int main(void)
    {
   8a95c:	b580      	push	{r7, lr}
   8a95e:	b082      	sub	sp, #8
   8a960:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8a962:	2304      	movs	r3, #4
   8a964:	71fb      	strb	r3, [r7, #7]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8a966:	2300      	movs	r3, #0
   8a968:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type Cl_MacEventData = 0;
   8a96a:	2300      	movs	r3, #0
   8a96c:	70bb      	strb	r3, [r7, #2]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   
	board_init();
   8a96e:	4baa      	ldr	r3, [pc, #680]	; (8ac18 <main+0x2bc>)
   8a970:	4798      	blx	r3
	sysclk_init();	
   8a972:	4baa      	ldr	r3, [pc, #680]	; (8ac1c <main+0x2c0>)
   8a974:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8a976:	4baa      	ldr	r3, [pc, #680]	; (8ac20 <main+0x2c4>)
   8a978:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8a97a:	200b      	movs	r0, #11
   8a97c:	4ba9      	ldr	r3, [pc, #676]	; (8ac24 <main+0x2c8>)
   8a97e:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8a980:	2016      	movs	r0, #22
   8a982:	4ba8      	ldr	r3, [pc, #672]	; (8ac24 <main+0x2c8>)
   8a984:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8a986:	2001      	movs	r0, #1
   8a988:	4ba7      	ldr	r3, [pc, #668]	; (8ac28 <main+0x2cc>)
   8a98a:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8a98c:	2002      	movs	r0, #2
   8a98e:	4ba6      	ldr	r3, [pc, #664]	; (8ac28 <main+0x2cc>)
   8a990:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8a992:	2004      	movs	r0, #4
   8a994:	4ba4      	ldr	r3, [pc, #656]	; (8ac28 <main+0x2cc>)
   8a996:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8a998:	2005      	movs	r0, #5
   8a99a:	4ba3      	ldr	r3, [pc, #652]	; (8ac28 <main+0x2cc>)
   8a99c:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8a99e:	2001      	movs	r0, #1
   8a9a0:	4ba2      	ldr	r3, [pc, #648]	; (8ac2c <main+0x2d0>)
   8a9a2:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8a9a4:	2002      	movs	r0, #2
   8a9a6:	4ba1      	ldr	r3, [pc, #644]	; (8ac2c <main+0x2d0>)
   8a9a8:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8a9aa:	2004      	movs	r0, #4
   8a9ac:	4b9f      	ldr	r3, [pc, #636]	; (8ac2c <main+0x2d0>)
   8a9ae:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8a9b0:	2005      	movs	r0, #5
   8a9b2:	4b9e      	ldr	r3, [pc, #632]	; (8ac2c <main+0x2d0>)
   8a9b4:	4798      	blx	r3
	
   
	Cl_MacRetval = Cl_MacInit(); 	
   8a9b6:	4b9e      	ldr	r3, [pc, #632]	; (8ac30 <main+0x2d4>)
   8a9b8:	4798      	blx	r3
   8a9ba:	4603      	mov	r3, r0
   8a9bc:	71fb      	strb	r3, [r7, #7]
	for(temp100 = 1;temp100<=20; temp100++)
   8a9be:	2301      	movs	r3, #1
   8a9c0:	80bb      	strh	r3, [r7, #4]
   8a9c2:	e00a      	b.n	8a9da <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8a9c4:	88bb      	ldrh	r3, [r7, #4]
   8a9c6:	b2db      	uxtb	r3, r3
   8a9c8:	4618      	mov	r0, r3
   8a9ca:	4b9a      	ldr	r3, [pc, #616]	; (8ac34 <main+0x2d8>)
   8a9cc:	4798      	blx	r3
		cl_wait(10);
   8a9ce:	200a      	movs	r0, #10
   8a9d0:	4b99      	ldr	r3, [pc, #612]	; (8ac38 <main+0x2dc>)
   8a9d2:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
	sv_cntrl_deactivatepump(HEPARINPUMP);
	
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8a9d4:	88bb      	ldrh	r3, [r7, #4]
   8a9d6:	3301      	adds	r3, #1
   8a9d8:	80bb      	strh	r3, [r7, #4]
   8a9da:	88bb      	ldrh	r3, [r7, #4]
   8a9dc:	2b14      	cmp	r3, #20
   8a9de:	d9f1      	bls.n	8a9c4 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8a9e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8a9e4:	201d      	movs	r0, #29
   8a9e6:	4b95      	ldr	r3, [pc, #596]	; (8ac3c <main+0x2e0>)
   8a9e8:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8a9ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8a9ee:	200a      	movs	r0, #10
   8a9f0:	4b93      	ldr	r3, [pc, #588]	; (8ac40 <main+0x2e4>)
   8a9f2:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8a9f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8a9f8:	201b      	movs	r0, #27
   8a9fa:	4b90      	ldr	r3, [pc, #576]	; (8ac3c <main+0x2e0>)
   8a9fc:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8a9fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8aa02:	200e      	movs	r0, #14
   8aa04:	4b8e      	ldr	r3, [pc, #568]	; (8ac40 <main+0x2e4>)
   8aa06:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8aa08:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8aa0c:	2002      	movs	r0, #2
   8aa0e:	4b8c      	ldr	r3, [pc, #560]	; (8ac40 <main+0x2e4>)
   8aa10:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	Cl_MacRetval = Cl_App_init(); 
   8aa12:	4b8c      	ldr	r3, [pc, #560]	; (8ac44 <main+0x2e8>)
   8aa14:	4798      	blx	r3
   8aa16:	4603      	mov	r3, r0
   8aa18:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_MacRetval);
   8aa1a:	79fb      	ldrb	r3, [r7, #7]
   8aa1c:	2b00      	cmp	r3, #0
   8aa1e:	d001      	beq.n	8aa24 <main+0xc8>
   8aa20:	4b89      	ldr	r3, [pc, #548]	; (8ac48 <main+0x2ec>)
   8aa22:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8aa24:	4b89      	ldr	r3, [pc, #548]	; (8ac4c <main+0x2f0>)
   8aa26:	4798      	blx	r3
   8aa28:	4603      	mov	r3, r0
   8aa2a:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_MacRetval);
   8aa2c:	79fb      	ldrb	r3, [r7, #7]
   8aa2e:	2b00      	cmp	r3, #0
   8aa30:	d001      	beq.n	8aa36 <main+0xda>
   8aa32:	4b85      	ldr	r3, [pc, #532]	; (8ac48 <main+0x2ec>)
   8aa34:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8aa36:	4b86      	ldr	r3, [pc, #536]	; (8ac50 <main+0x2f4>)
   8aa38:	2204      	movs	r2, #4
   8aa3a:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8aa3c:	2304      	movs	r3, #4
   8aa3e:	71fb      	strb	r3, [r7, #7]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8aa40:	4b84      	ldr	r3, [pc, #528]	; (8ac54 <main+0x2f8>)
   8aa42:	4798      	blx	r3
   8aa44:	4603      	mov	r3, r0
   8aa46:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval);
   8aa48:	79fb      	ldrb	r3, [r7, #7]
   8aa4a:	2b00      	cmp	r3, #0
   8aa4c:	d001      	beq.n	8aa52 <main+0xf6>
   8aa4e:	4b7e      	ldr	r3, [pc, #504]	; (8ac48 <main+0x2ec>)
   8aa50:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8aa52:	79fb      	ldrb	r3, [r7, #7]
   8aa54:	2b00      	cmp	r3, #0
   8aa56:	d105      	bne.n	8aa64 <main+0x108>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8aa58:	4b7f      	ldr	r3, [pc, #508]	; (8ac58 <main+0x2fc>)
   8aa5a:	2201      	movs	r2, #1
   8aa5c:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8aa5e:	4b7c      	ldr	r3, [pc, #496]	; (8ac50 <main+0x2f4>)
   8aa60:	2202      	movs	r2, #2
   8aa62:	701a      	strb	r2, [r3, #0]
#endif
	while (FOREVER)  // LOOP MAIN
	{


	Cl_Mac_StateDummy = Cl_MacState;
   8aa64:	4b7a      	ldr	r3, [pc, #488]	; (8ac50 <main+0x2f4>)
   8aa66:	781a      	ldrb	r2, [r3, #0]
   8aa68:	4b7c      	ldr	r3, [pc, #496]	; (8ac5c <main+0x300>)
   8aa6a:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8aa6c:	4b7c      	ldr	r3, [pc, #496]	; (8ac60 <main+0x304>)
   8aa6e:	681b      	ldr	r3, [r3, #0]
   8aa70:	4a7c      	ldr	r2, [pc, #496]	; (8ac64 <main+0x308>)
   8aa72:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8aa74:	4b7c      	ldr	r3, [pc, #496]	; (8ac68 <main+0x30c>)
   8aa76:	4798      	blx	r3
   8aa78:	4603      	mov	r3, r0
   8aa7a:	71fb      	strb	r3, [r7, #7]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8aa7c:	4b7b      	ldr	r3, [pc, #492]	; (8ac6c <main+0x310>)
   8aa7e:	4798      	blx	r3
   8aa80:	4603      	mov	r3, r0
   8aa82:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8aa84:	79fb      	ldrb	r3, [r7, #7]
   8aa86:	2b00      	cmp	r3, #0
   8aa88:	d001      	beq.n	8aa8e <main+0x132>
   8aa8a:	4b6f      	ldr	r3, [pc, #444]	; (8ac48 <main+0x2ec>)
   8aa8c:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8aa8e:	4b78      	ldr	r3, [pc, #480]	; (8ac70 <main+0x314>)
   8aa90:	4798      	blx	r3
   8aa92:	4603      	mov	r3, r0
   8aa94:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8aa96:	79fb      	ldrb	r3, [r7, #7]
   8aa98:	2b00      	cmp	r3, #0
   8aa9a:	d001      	beq.n	8aaa0 <main+0x144>
   8aa9c:	4b6a      	ldr	r3, [pc, #424]	; (8ac48 <main+0x2ec>)
   8aa9e:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8aaa0:	4b6f      	ldr	r3, [pc, #444]	; (8ac60 <main+0x304>)
   8aaa2:	681a      	ldr	r2, [r3, #0]
   8aaa4:	4b6f      	ldr	r3, [pc, #444]	; (8ac64 <main+0x308>)
   8aaa6:	681b      	ldr	r3, [r3, #0]
   8aaa8:	1ad3      	subs	r3, r2, r3
   8aaaa:	4a72      	ldr	r2, [pc, #456]	; (8ac74 <main+0x318>)
   8aaac:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8aaae:	2032      	movs	r0, #50	; 0x32
   8aab0:	4b71      	ldr	r3, [pc, #452]	; (8ac78 <main+0x31c>)
   8aab2:	4798      	blx	r3
   8aab4:	4603      	mov	r3, r0
   8aab6:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8aab8:	79fb      	ldrb	r3, [r7, #7]
   8aaba:	2b00      	cmp	r3, #0
   8aabc:	f001 8513 	beq.w	8c4e6 <main+0x1b8a>
   8aac0:	4b61      	ldr	r3, [pc, #388]	; (8ac48 <main+0x2ec>)
   8aac2:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueue1.Cl_MacNewEventcount > 0) ||(Cl_MacEventQueue2.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8aac4:	f001 bd0f 	b.w	8c4e6 <main+0x1b8a>
		
		{
		Cl_MacEvent = EVT_NULL;
   8aac8:	4b6c      	ldr	r3, [pc, #432]	; (8ac7c <main+0x320>)
   8aaca:	2200      	movs	r2, #0
   8aacc:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8aace:	4b6c      	ldr	r3, [pc, #432]	; (8ac80 <main+0x324>)
   8aad0:	4798      	blx	r3
   8aad2:	4603      	mov	r3, r0
   8aad4:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8aad6:	79fb      	ldrb	r3, [r7, #7]
   8aad8:	2b00      	cmp	r3, #0
   8aada:	d001      	beq.n	8aae0 <main+0x184>
   8aadc:	4b5a      	ldr	r3, [pc, #360]	; (8ac48 <main+0x2ec>)
   8aade:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8aae0:	4b68      	ldr	r3, [pc, #416]	; (8ac84 <main+0x328>)
   8aae2:	781b      	ldrb	r3, [r3, #0]
   8aae4:	2b00      	cmp	r3, #0
   8aae6:	f001 84fe 	beq.w	8c4e6 <main+0x1b8a>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8aaea:	4b64      	ldr	r3, [pc, #400]	; (8ac7c <main+0x320>)
   8aaec:	781b      	ldrb	r3, [r3, #0]
   8aaee:	4618      	mov	r0, r3
   8aaf0:	4b61      	ldr	r3, [pc, #388]	; (8ac78 <main+0x31c>)
   8aaf2:	4798      	blx	r3
   8aaf4:	4603      	mov	r3, r0
   8aaf6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval);
   8aaf8:	79fb      	ldrb	r3, [r7, #7]
   8aafa:	2b00      	cmp	r3, #0
   8aafc:	d001      	beq.n	8ab02 <main+0x1a6>
   8aafe:	4b52      	ldr	r3, [pc, #328]	; (8ac48 <main+0x2ec>)
   8ab00:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8ab02:	4b5e      	ldr	r3, [pc, #376]	; (8ac7c <main+0x320>)
   8ab04:	781b      	ldrb	r3, [r3, #0]
   8ab06:	2b02      	cmp	r3, #2
   8ab08:	d102      	bne.n	8ab10 <main+0x1b4>
			{
				//send sync
				ConsoleSync = true;
   8ab0a:	4b5f      	ldr	r3, [pc, #380]	; (8ac88 <main+0x32c>)
   8ab0c:	2201      	movs	r2, #1
   8ab0e:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8ab10:	4b5a      	ldr	r3, [pc, #360]	; (8ac7c <main+0x320>)
   8ab12:	781b      	ldrb	r3, [r3, #0]
   8ab14:	2b01      	cmp	r3, #1
   8ab16:	d111      	bne.n	8ab3c <main+0x1e0>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8ab18:	2303      	movs	r3, #3
   8ab1a:	703b      	strb	r3, [r7, #0]
				ConsoleSync = true;
   8ab1c:	4b5a      	ldr	r3, [pc, #360]	; (8ac88 <main+0x32c>)
   8ab1e:	2201      	movs	r2, #1
   8ab20:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8ab22:	463b      	mov	r3, r7
   8ab24:	2201      	movs	r2, #1
   8ab26:	4619      	mov	r1, r3
   8ab28:	2004      	movs	r0, #4
   8ab2a:	4b58      	ldr	r3, [pc, #352]	; (8ac8c <main+0x330>)
   8ab2c:	4798      	blx	r3
   8ab2e:	4603      	mov	r3, r0
   8ab30:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval);
   8ab32:	79fb      	ldrb	r3, [r7, #7]
   8ab34:	2b00      	cmp	r3, #0
   8ab36:	d001      	beq.n	8ab3c <main+0x1e0>
   8ab38:	4b43      	ldr	r3, [pc, #268]	; (8ac48 <main+0x2ec>)
   8ab3a:	4798      	blx	r3
				
			}			
			
			

				switch (Cl_MacState)
   8ab3c:	4b44      	ldr	r3, [pc, #272]	; (8ac50 <main+0x2f4>)
   8ab3e:	781b      	ldrb	r3, [r3, #0]
   8ab40:	3b01      	subs	r3, #1
   8ab42:	2b12      	cmp	r3, #18
   8ab44:	f201 84c5 	bhi.w	8c4d2 <main+0x1b76>
   8ab48:	a201      	add	r2, pc, #4	; (adr r2, 8ab50 <main+0x1f4>)
   8ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ab4e:	bf00      	nop
   8ab50:	0008c4d3 	.word	0x0008c4d3
   8ab54:	0008ab9d 	.word	0x0008ab9d
   8ab58:	0008c4d3 	.word	0x0008c4d3
   8ab5c:	0008c4d3 	.word	0x0008c4d3
   8ab60:	0008ad37 	.word	0x0008ad37
   8ab64:	0008b219 	.word	0x0008b219
   8ab68:	0008b2cf 	.word	0x0008b2cf
   8ab6c:	0008afeb 	.word	0x0008afeb
   8ab70:	0008c4d3 	.word	0x0008c4d3
   8ab74:	0008b585 	.word	0x0008b585
   8ab78:	0008b895 	.word	0x0008b895
   8ab7c:	0008bb01 	.word	0x0008bb01
   8ab80:	0008bce1 	.word	0x0008bce1
   8ab84:	0008bcf7 	.word	0x0008bcf7
   8ab88:	0008bf1b 	.word	0x0008bf1b
   8ab8c:	0008c1b1 	.word	0x0008c1b1
   8ab90:	0008c2ed 	.word	0x0008c2ed
   8ab94:	0008c4cb 	.word	0x0008c4cb
   8ab98:	0008c4cf 	.word	0x0008c4cf
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8ab9c:	4b37      	ldr	r3, [pc, #220]	; (8ac7c <main+0x320>)
   8ab9e:	781b      	ldrb	r3, [r3, #0]
   8aba0:	3b2a      	subs	r3, #42	; 0x2a
   8aba2:	2b19      	cmp	r3, #25
   8aba4:	f200 80c1 	bhi.w	8ad2a <main+0x3ce>
   8aba8:	a201      	add	r2, pc, #4	; (adr r2, 8abb0 <main+0x254>)
   8abaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8abae:	bf00      	nop
   8abb0:	0008ac91 	.word	0x0008ac91
   8abb4:	0008ad2b 	.word	0x0008ad2b
   8abb8:	0008ad2b 	.word	0x0008ad2b
   8abbc:	0008ad2b 	.word	0x0008ad2b
   8abc0:	0008ad2b 	.word	0x0008ad2b
   8abc4:	0008ad2b 	.word	0x0008ad2b
   8abc8:	0008ad2b 	.word	0x0008ad2b
   8abcc:	0008ad2b 	.word	0x0008ad2b
   8abd0:	0008ad2b 	.word	0x0008ad2b
   8abd4:	0008ad2b 	.word	0x0008ad2b
   8abd8:	0008ad2b 	.word	0x0008ad2b
   8abdc:	0008ad2b 	.word	0x0008ad2b
   8abe0:	0008ad2b 	.word	0x0008ad2b
   8abe4:	0008ad2b 	.word	0x0008ad2b
   8abe8:	0008ad2b 	.word	0x0008ad2b
   8abec:	0008ad0b 	.word	0x0008ad0b
   8abf0:	0008ad2b 	.word	0x0008ad2b
   8abf4:	0008ad0b 	.word	0x0008ad0b
   8abf8:	0008ad0b 	.word	0x0008ad0b
   8abfc:	0008ad0b 	.word	0x0008ad0b
   8ac00:	0008ad2b 	.word	0x0008ad2b
   8ac04:	0008ad2b 	.word	0x0008ad2b
   8ac08:	0008ad2b 	.word	0x0008ad2b
   8ac0c:	0008ad2b 	.word	0x0008ad2b
   8ac10:	0008ad2b 	.word	0x0008ad2b
   8ac14:	0008acb1 	.word	0x0008acb1
   8ac18:	0009723d 	.word	0x0009723d
   8ac1c:	0008044d 	.word	0x0008044d
   8ac20:	00097041 	.word	0x00097041
   8ac24:	000979c5 	.word	0x000979c5
   8ac28:	000967dd 	.word	0x000967dd
   8ac2c:	00096819 	.word	0x00096819
   8ac30:	0008c525 	.word	0x0008c525
   8ac34:	0009689d 	.word	0x0009689d
   8ac38:	00091b9d 	.word	0x00091b9d
   8ac3c:	00096b95 	.word	0x00096b95
   8ac40:	00096b75 	.word	0x00096b75
   8ac44:	0008c5c1 	.word	0x0008c5c1
   8ac48:	000893e9 	.word	0x000893e9
   8ac4c:	0008c689 	.word	0x0008c689
   8ac50:	20070474 	.word	0x20070474
   8ac54:	00098975 	.word	0x00098975
   8ac58:	2007212f 	.word	0x2007212f
   8ac5c:	2007309d 	.word	0x2007309d
   8ac60:	2007263c 	.word	0x2007263c
   8ac64:	20072eb4 	.word	0x20072eb4
   8ac68:	0008c6ad 	.word	0x0008c6ad
   8ac6c:	0008c919 	.word	0x0008c919
   8ac70:	0008c6dd 	.word	0x0008c6dd
   8ac74:	20073018 	.word	0x20073018
   8ac78:	000893f9 	.word	0x000893f9
   8ac7c:	2007212e 	.word	0x2007212e
   8ac80:	0008c75d 	.word	0x0008c75d
   8ac84:	20072130 	.word	0x20072130
   8ac88:	20070475 	.word	0x20070475
   8ac8c:	00098601 	.word	0x00098601
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8ac90:	4ba8      	ldr	r3, [pc, #672]	; (8af34 <main+0x5d8>)
   8ac92:	781b      	ldrb	r3, [r3, #0]
   8ac94:	4618      	mov	r0, r3
   8ac96:	4ba8      	ldr	r3, [pc, #672]	; (8af38 <main+0x5dc>)
   8ac98:	4798      	blx	r3
   8ac9a:	4603      	mov	r3, r0
   8ac9c:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ac9e:	79fb      	ldrb	r3, [r7, #7]
   8aca0:	2b00      	cmp	r3, #0
   8aca2:	d001      	beq.n	8aca8 <main+0x34c>
   8aca4:	4ba5      	ldr	r3, [pc, #660]	; (8af3c <main+0x5e0>)
   8aca6:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8aca8:	4ba2      	ldr	r3, [pc, #648]	; (8af34 <main+0x5d8>)
   8acaa:	2200      	movs	r2, #0
   8acac:	701a      	strb	r2, [r3, #0]
						break;
   8acae:	e040      	b.n	8ad32 <main+0x3d6>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8acb0:	202b      	movs	r0, #43	; 0x2b
   8acb2:	4ba1      	ldr	r3, [pc, #644]	; (8af38 <main+0x5dc>)
   8acb4:	4798      	blx	r3
   8acb6:	4603      	mov	r3, r0
   8acb8:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8acba:	79fb      	ldrb	r3, [r7, #7]
   8acbc:	2b00      	cmp	r3, #0
   8acbe:	d001      	beq.n	8acc4 <main+0x368>
   8acc0:	4b9e      	ldr	r3, [pc, #632]	; (8af3c <main+0x5e0>)
   8acc2:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8acc4:	79fb      	ldrb	r3, [r7, #7]
   8acc6:	2b00      	cmp	r3, #0
   8acc8:	d109      	bne.n	8acde <main+0x382>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8acca:	202b      	movs	r0, #43	; 0x2b
   8accc:	4b9c      	ldr	r3, [pc, #624]	; (8af40 <main+0x5e4>)
   8acce:	4798      	blx	r3
   8acd0:	4603      	mov	r3, r0
   8acd2:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8acd4:	79fb      	ldrb	r3, [r7, #7]
   8acd6:	2b00      	cmp	r3, #0
   8acd8:	d001      	beq.n	8acde <main+0x382>
   8acda:	4b98      	ldr	r3, [pc, #608]	; (8af3c <main+0x5e0>)
   8acdc:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8acde:	79fb      	ldrb	r3, [r7, #7]
   8ace0:	2b00      	cmp	r3, #0
   8ace2:	d125      	bne.n	8ad30 <main+0x3d4>
								{
									Cl_MacEvent = EVT_NULL;
   8ace4:	4b93      	ldr	r3, [pc, #588]	; (8af34 <main+0x5d8>)
   8ace6:	2200      	movs	r2, #0
   8ace8:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8acea:	4b96      	ldr	r3, [pc, #600]	; (8af44 <main+0x5e8>)
   8acec:	2205      	movs	r2, #5
   8acee:	701a      	strb	r2, [r3, #0]
									Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
   8acf0:	2201      	movs	r2, #1
   8acf2:	2105      	movs	r1, #5
   8acf4:	2045      	movs	r0, #69	; 0x45
   8acf6:	4b94      	ldr	r3, [pc, #592]	; (8af48 <main+0x5ec>)
   8acf8:	4798      	blx	r3
   8acfa:	4603      	mov	r3, r0
   8acfc:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8acfe:	79fb      	ldrb	r3, [r7, #7]
   8ad00:	2b00      	cmp	r3, #0
   8ad02:	d015      	beq.n	8ad30 <main+0x3d4>
   8ad04:	4b8d      	ldr	r3, [pc, #564]	; (8af3c <main+0x5e0>)
   8ad06:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8ad08:	e012      	b.n	8ad30 <main+0x3d4>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8ad0a:	4b8a      	ldr	r3, [pc, #552]	; (8af34 <main+0x5d8>)
   8ad0c:	781b      	ldrb	r3, [r3, #0]
   8ad0e:	4618      	mov	r0, r3
   8ad10:	4b89      	ldr	r3, [pc, #548]	; (8af38 <main+0x5dc>)
   8ad12:	4798      	blx	r3
   8ad14:	4603      	mov	r3, r0
   8ad16:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ad18:	79fb      	ldrb	r3, [r7, #7]
   8ad1a:	2b00      	cmp	r3, #0
   8ad1c:	d001      	beq.n	8ad22 <main+0x3c6>
   8ad1e:	4b87      	ldr	r3, [pc, #540]	; (8af3c <main+0x5e0>)
   8ad20:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8ad22:	4b84      	ldr	r3, [pc, #528]	; (8af34 <main+0x5d8>)
   8ad24:	2200      	movs	r2, #0
   8ad26:	701a      	strb	r2, [r3, #0]

						break;
   8ad28:	e003      	b.n	8ad32 <main+0x3d6>
						default: break;
   8ad2a:	bf00      	nop
   8ad2c:	f001 bbd2 	b.w	8c4d4 <main+0x1b78>

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8ad30:	bf00      	nop
							Cl_MacEvent = EVT_NULL;

						break;
						default: break;
					}
					break;
   8ad32:	f001 bbcf 	b.w	8c4d4 <main+0x1b78>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8ad36:	4b7f      	ldr	r3, [pc, #508]	; (8af34 <main+0x5d8>)
   8ad38:	781b      	ldrb	r3, [r3, #0]
   8ad3a:	3b07      	subs	r3, #7
   8ad3c:	2b38      	cmp	r3, #56	; 0x38
   8ad3e:	f200 814b 	bhi.w	8afd8 <main+0x67c>
   8ad42:	a201      	add	r2, pc, #4	; (adr r2, 8ad48 <main+0x3ec>)
   8ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ad48:	0008ae4d 	.word	0x0008ae4d
   8ad4c:	0008afd9 	.word	0x0008afd9
   8ad50:	0008af5d 	.word	0x0008af5d
   8ad54:	0008ae2d 	.word	0x0008ae2d
   8ad58:	0008ae2d 	.word	0x0008ae2d
   8ad5c:	0008ae2d 	.word	0x0008ae2d
   8ad60:	0008afd9 	.word	0x0008afd9
   8ad64:	0008afd9 	.word	0x0008afd9
   8ad68:	0008aebb 	.word	0x0008aebb
   8ad6c:	0008afd9 	.word	0x0008afd9
   8ad70:	0008afd9 	.word	0x0008afd9
   8ad74:	0008afd9 	.word	0x0008afd9
   8ad78:	0008afd9 	.word	0x0008afd9
   8ad7c:	0008afd9 	.word	0x0008afd9
   8ad80:	0008afd9 	.word	0x0008afd9
   8ad84:	0008afd9 	.word	0x0008afd9
   8ad88:	0008afd9 	.word	0x0008afd9
   8ad8c:	0008afd9 	.word	0x0008afd9
   8ad90:	0008afd9 	.word	0x0008afd9
   8ad94:	0008afd9 	.word	0x0008afd9
   8ad98:	0008afd9 	.word	0x0008afd9
   8ad9c:	0008afd9 	.word	0x0008afd9
   8ada0:	0008afd9 	.word	0x0008afd9
   8ada4:	0008afd9 	.word	0x0008afd9
   8ada8:	0008afd9 	.word	0x0008afd9
   8adac:	0008afd9 	.word	0x0008afd9
   8adb0:	0008afd9 	.word	0x0008afd9
   8adb4:	0008afd9 	.word	0x0008afd9
   8adb8:	0008afd9 	.word	0x0008afd9
   8adbc:	0008afd9 	.word	0x0008afd9
   8adc0:	0008afd9 	.word	0x0008afd9
   8adc4:	0008afd9 	.word	0x0008afd9
   8adc8:	0008afd9 	.word	0x0008afd9
   8adcc:	0008afd9 	.word	0x0008afd9
   8add0:	0008afd9 	.word	0x0008afd9
   8add4:	0008afd9 	.word	0x0008afd9
   8add8:	0008ae2d 	.word	0x0008ae2d
   8addc:	0008afd9 	.word	0x0008afd9
   8ade0:	0008ae2d 	.word	0x0008ae2d
   8ade4:	0008ae2d 	.word	0x0008ae2d
   8ade8:	0008afd9 	.word	0x0008afd9
   8adec:	0008afd9 	.word	0x0008afd9
   8adf0:	0008afd9 	.word	0x0008afd9
   8adf4:	0008afd9 	.word	0x0008afd9
   8adf8:	0008afd9 	.word	0x0008afd9
   8adfc:	0008afd9 	.word	0x0008afd9
   8ae00:	0008afd9 	.word	0x0008afd9
   8ae04:	0008afd9 	.word	0x0008afd9
   8ae08:	0008afd9 	.word	0x0008afd9
   8ae0c:	0008afd9 	.word	0x0008afd9
   8ae10:	0008ae2d 	.word	0x0008ae2d
   8ae14:	0008afd9 	.word	0x0008afd9
   8ae18:	0008ae2d 	.word	0x0008ae2d
   8ae1c:	0008ae2d 	.word	0x0008ae2d
   8ae20:	0008ae2d 	.word	0x0008ae2d
   8ae24:	0008afd9 	.word	0x0008afd9
   8ae28:	0008aee3 	.word	0x0008aee3
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8ae2c:	4b41      	ldr	r3, [pc, #260]	; (8af34 <main+0x5d8>)
   8ae2e:	781b      	ldrb	r3, [r3, #0]
   8ae30:	4618      	mov	r0, r3
   8ae32:	4b43      	ldr	r3, [pc, #268]	; (8af40 <main+0x5e4>)
   8ae34:	4798      	blx	r3
   8ae36:	4603      	mov	r3, r0
   8ae38:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8ae3a:	79fb      	ldrb	r3, [r7, #7]
   8ae3c:	2b00      	cmp	r3, #0
   8ae3e:	d001      	beq.n	8ae44 <main+0x4e8>
   8ae40:	4b3e      	ldr	r3, [pc, #248]	; (8af3c <main+0x5e0>)
   8ae42:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8ae44:	4b3b      	ldr	r3, [pc, #236]	; (8af34 <main+0x5d8>)
   8ae46:	2200      	movs	r2, #0
   8ae48:	701a      	strb	r2, [r3, #0]
							break;
   8ae4a:	e0cc      	b.n	8afe6 <main+0x68a>

						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8ae4c:	4b3f      	ldr	r3, [pc, #252]	; (8af4c <main+0x5f0>)
   8ae4e:	2200      	movs	r2, #0
   8ae50:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8ae52:	4b38      	ldr	r3, [pc, #224]	; (8af34 <main+0x5d8>)
   8ae54:	781b      	ldrb	r3, [r3, #0]
   8ae56:	4618      	mov	r0, r3
   8ae58:	4b39      	ldr	r3, [pc, #228]	; (8af40 <main+0x5e4>)
   8ae5a:	4798      	blx	r3
   8ae5c:	4603      	mov	r3, r0
   8ae5e:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8ae60:	79fb      	ldrb	r3, [r7, #7]
   8ae62:	2b00      	cmp	r3, #0
   8ae64:	d001      	beq.n	8ae6a <main+0x50e>
   8ae66:	4b35      	ldr	r3, [pc, #212]	; (8af3c <main+0x5e0>)
   8ae68:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8ae6a:	79fb      	ldrb	r3, [r7, #7]
   8ae6c:	2b00      	cmp	r3, #0
   8ae6e:	d10e      	bne.n	8ae8e <main+0x532>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ae70:	4b30      	ldr	r3, [pc, #192]	; (8af34 <main+0x5d8>)
   8ae72:	781b      	ldrb	r3, [r3, #0]
   8ae74:	4618      	mov	r0, r3
   8ae76:	4b36      	ldr	r3, [pc, #216]	; (8af50 <main+0x5f4>)
   8ae78:	4798      	blx	r3
   8ae7a:	4603      	mov	r3, r0
   8ae7c:	71fb      	strb	r3, [r7, #7]
								if(Cl_MacRetval != CL_REJECTED)
   8ae7e:	79fb      	ldrb	r3, [r7, #7]
   8ae80:	2b03      	cmp	r3, #3
   8ae82:	d004      	beq.n	8ae8e <main+0x532>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8ae84:	79fb      	ldrb	r3, [r7, #7]
   8ae86:	2b00      	cmp	r3, #0
   8ae88:	d001      	beq.n	8ae8e <main+0x532>
   8ae8a:	4b2c      	ldr	r3, [pc, #176]	; (8af3c <main+0x5e0>)
   8ae8c:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8ae8e:	79fb      	ldrb	r3, [r7, #7]
   8ae90:	2b00      	cmp	r3, #0
   8ae92:	d10e      	bne.n	8aeb2 <main+0x556>
							{
								Cl_MacState = MAC_RINSE;
   8ae94:	4b2b      	ldr	r3, [pc, #172]	; (8af44 <main+0x5e8>)
   8ae96:	2207      	movs	r2, #7
   8ae98:	701a      	strb	r2, [r3, #0]
								Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8ae9a:	2201      	movs	r2, #1
   8ae9c:	2107      	movs	r1, #7
   8ae9e:	2045      	movs	r0, #69	; 0x45
   8aea0:	4b29      	ldr	r3, [pc, #164]	; (8af48 <main+0x5ec>)
   8aea2:	4798      	blx	r3
   8aea4:	4603      	mov	r3, r0
   8aea6:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);			
   8aea8:	79fb      	ldrb	r3, [r7, #7]
   8aeaa:	2b00      	cmp	r3, #0
   8aeac:	d001      	beq.n	8aeb2 <main+0x556>
   8aeae:	4b23      	ldr	r3, [pc, #140]	; (8af3c <main+0x5e0>)
   8aeb0:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8aeb2:	4b20      	ldr	r3, [pc, #128]	; (8af34 <main+0x5d8>)
   8aeb4:	2200      	movs	r2, #0
   8aeb6:	701a      	strb	r2, [r3, #0]
						break;
   8aeb8:	e095      	b.n	8afe6 <main+0x68a>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8aeba:	4b1e      	ldr	r3, [pc, #120]	; (8af34 <main+0x5d8>)
   8aebc:	781b      	ldrb	r3, [r3, #0]
   8aebe:	4618      	mov	r0, r3
   8aec0:	4b23      	ldr	r3, [pc, #140]	; (8af50 <main+0x5f4>)
   8aec2:	4798      	blx	r3
   8aec4:	4603      	mov	r3, r0
   8aec6:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8aec8:	79fb      	ldrb	r3, [r7, #7]
   8aeca:	2b00      	cmp	r3, #0
   8aecc:	d001      	beq.n	8aed2 <main+0x576>
   8aece:	4b1b      	ldr	r3, [pc, #108]	; (8af3c <main+0x5e0>)
   8aed0:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8aed2:	79fb      	ldrb	r3, [r7, #7]
   8aed4:	2b00      	cmp	r3, #0
   8aed6:	f040 8082 	bne.w	8afde <main+0x682>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8aeda:	4b1a      	ldr	r3, [pc, #104]	; (8af44 <main+0x5e8>)
   8aedc:	220a      	movs	r2, #10
   8aede:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8aee0:	e07d      	b.n	8afde <main+0x682>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8aee2:	4b14      	ldr	r3, [pc, #80]	; (8af34 <main+0x5d8>)
   8aee4:	781b      	ldrb	r3, [r3, #0]
   8aee6:	4618      	mov	r0, r3
   8aee8:	4b1a      	ldr	r3, [pc, #104]	; (8af54 <main+0x5f8>)
   8aeea:	4798      	blx	r3
   8aeec:	4603      	mov	r3, r0
   8aeee:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8aef0:	79fb      	ldrb	r3, [r7, #7]
   8aef2:	2b00      	cmp	r3, #0
   8aef4:	d001      	beq.n	8aefa <main+0x59e>
   8aef6:	4b11      	ldr	r3, [pc, #68]	; (8af3c <main+0x5e0>)
   8aef8:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8aefa:	79fb      	ldrb	r3, [r7, #7]
   8aefc:	2b00      	cmp	r3, #0
   8aefe:	d171      	bne.n	8afe4 <main+0x688>
							{
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8af00:	4b0c      	ldr	r3, [pc, #48]	; (8af34 <main+0x5d8>)
   8af02:	781b      	ldrb	r3, [r3, #0]
   8af04:	4618      	mov	r0, r3
   8af06:	4b14      	ldr	r3, [pc, #80]	; (8af58 <main+0x5fc>)
   8af08:	4798      	blx	r3
   8af0a:	4603      	mov	r3, r0
   8af0c:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8af0e:	79fb      	ldrb	r3, [r7, #7]
   8af10:	2b00      	cmp	r3, #0
   8af12:	d001      	beq.n	8af18 <main+0x5bc>
   8af14:	4b09      	ldr	r3, [pc, #36]	; (8af3c <main+0x5e0>)
   8af16:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8af18:	4b0a      	ldr	r3, [pc, #40]	; (8af44 <main+0x5e8>)
   8af1a:	2208      	movs	r2, #8
   8af1c:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
   8af1e:	2201      	movs	r2, #1
   8af20:	2108      	movs	r1, #8
   8af22:	2045      	movs	r0, #69	; 0x45
   8af24:	4b08      	ldr	r3, [pc, #32]	; (8af48 <main+0x5ec>)
   8af26:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8af28:	79fb      	ldrb	r3, [r7, #7]
   8af2a:	2b00      	cmp	r3, #0
   8af2c:	d05a      	beq.n	8afe4 <main+0x688>
   8af2e:	4b03      	ldr	r3, [pc, #12]	; (8af3c <main+0x5e0>)
   8af30:	4798      	blx	r3
							{
								// Handle error
							}
							

						break;
   8af32:	e057      	b.n	8afe4 <main+0x688>
   8af34:	2007212e 	.word	0x2007212e
   8af38:	0008a621 	.word	0x0008a621
   8af3c:	000893e9 	.word	0x000893e9
   8af40:	000a0dcd 	.word	0x000a0dcd
   8af44:	20070474 	.word	0x20070474
   8af48:	00098601 	.word	0x00098601
   8af4c:	20072134 	.word	0x20072134
   8af50:	0009e571 	.word	0x0009e571
   8af54:	00085039 	.word	0x00085039
   8af58:	00098d59 	.word	0x00098d59
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8af5c:	4ba6      	ldr	r3, [pc, #664]	; (8b1f8 <main+0x89c>)
   8af5e:	781b      	ldrb	r3, [r3, #0]
   8af60:	4618      	mov	r0, r3
   8af62:	4ba6      	ldr	r3, [pc, #664]	; (8b1fc <main+0x8a0>)
   8af64:	4798      	blx	r3
   8af66:	4603      	mov	r3, r0
   8af68:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8af6a:	79fb      	ldrb	r3, [r7, #7]
   8af6c:	2b00      	cmp	r3, #0
   8af6e:	d001      	beq.n	8af74 <main+0x618>
   8af70:	4ba3      	ldr	r3, [pc, #652]	; (8b200 <main+0x8a4>)
   8af72:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8af74:	79fb      	ldrb	r3, [r7, #7]
   8af76:	2b02      	cmp	r3, #2
   8af78:	d10b      	bne.n	8af92 <main+0x636>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8af7a:	4b9f      	ldr	r3, [pc, #636]	; (8b1f8 <main+0x89c>)
   8af7c:	781b      	ldrb	r3, [r3, #0]
   8af7e:	4618      	mov	r0, r3
   8af80:	4ba0      	ldr	r3, [pc, #640]	; (8b204 <main+0x8a8>)
   8af82:	4798      	blx	r3
   8af84:	4603      	mov	r3, r0
   8af86:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8af88:	79fb      	ldrb	r3, [r7, #7]
   8af8a:	2b00      	cmp	r3, #0
   8af8c:	d001      	beq.n	8af92 <main+0x636>
   8af8e:	4b9c      	ldr	r3, [pc, #624]	; (8b200 <main+0x8a4>)
   8af90:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8af92:	79fb      	ldrb	r3, [r7, #7]
   8af94:	2b02      	cmp	r3, #2
   8af96:	d10b      	bne.n	8afb0 <main+0x654>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8af98:	4b97      	ldr	r3, [pc, #604]	; (8b1f8 <main+0x89c>)
   8af9a:	781b      	ldrb	r3, [r3, #0]
   8af9c:	4618      	mov	r0, r3
   8af9e:	4b9a      	ldr	r3, [pc, #616]	; (8b208 <main+0x8ac>)
   8afa0:	4798      	blx	r3
   8afa2:	4603      	mov	r3, r0
   8afa4:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8afa6:	79fb      	ldrb	r3, [r7, #7]
   8afa8:	2b00      	cmp	r3, #0
   8afaa:	d001      	beq.n	8afb0 <main+0x654>
   8afac:	4b94      	ldr	r3, [pc, #592]	; (8b200 <main+0x8a4>)
   8afae:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8afb0:	79fb      	ldrb	r3, [r7, #7]
   8afb2:	2b00      	cmp	r3, #0
   8afb4:	d10c      	bne.n	8afd0 <main+0x674>
							{
								Cl_MacState = MAC_DPREP;
   8afb6:	4b95      	ldr	r3, [pc, #596]	; (8b20c <main+0x8b0>)
   8afb8:	220b      	movs	r2, #11
   8afba:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8afbc:	2201      	movs	r2, #1
   8afbe:	210b      	movs	r1, #11
   8afc0:	2045      	movs	r0, #69	; 0x45
   8afc2:	4b93      	ldr	r3, [pc, #588]	; (8b210 <main+0x8b4>)
   8afc4:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8afc6:	79fb      	ldrb	r3, [r7, #7]
   8afc8:	2b00      	cmp	r3, #0
   8afca:	d001      	beq.n	8afd0 <main+0x674>
   8afcc:	4b8c      	ldr	r3, [pc, #560]	; (8b200 <main+0x8a4>)
   8afce:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8afd0:	4b89      	ldr	r3, [pc, #548]	; (8b1f8 <main+0x89c>)
   8afd2:	2200      	movs	r2, #0
   8afd4:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8afd6:	e006      	b.n	8afe6 <main+0x68a>

						
						default: break;
   8afd8:	bf00      	nop
   8afda:	f001 ba7b 	b.w	8c4d4 <main+0x1b78>
							else
							{
									// Handle error
							}
							
						break;
   8afde:	bf00      	nop
   8afe0:	f001 ba78 	b.w	8c4d4 <main+0x1b78>
							{
								// Handle error
							}
							

						break;
   8afe4:	bf00      	nop
						break;

						
						default: break;
					}
					break;
   8afe6:	f001 ba75 	b.w	8c4d4 <main+0x1b78>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8afea:	4b83      	ldr	r3, [pc, #524]	; (8b1f8 <main+0x89c>)
   8afec:	781b      	ldrb	r3, [r3, #0]
   8afee:	3b07      	subs	r3, #7
   8aff0:	2b4d      	cmp	r3, #77	; 0x4d
   8aff2:	f200 80f3 	bhi.w	8b1dc <main+0x880>
   8aff6:	a201      	add	r2, pc, #4	; (adr r2, 8affc <main+0x6a0>)
   8aff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8affc:	0008b16d 	.word	0x0008b16d
   8b000:	0008b1dd 	.word	0x0008b1dd
   8b004:	0008b1dd 	.word	0x0008b1dd
   8b008:	0008b16d 	.word	0x0008b16d
   8b00c:	0008b16d 	.word	0x0008b16d
   8b010:	0008b16d 	.word	0x0008b16d
   8b014:	0008b1dd 	.word	0x0008b1dd
   8b018:	0008b1dd 	.word	0x0008b1dd
   8b01c:	0008b1dd 	.word	0x0008b1dd
   8b020:	0008b1dd 	.word	0x0008b1dd
   8b024:	0008b1dd 	.word	0x0008b1dd
   8b028:	0008b1dd 	.word	0x0008b1dd
   8b02c:	0008b1dd 	.word	0x0008b1dd
   8b030:	0008b1dd 	.word	0x0008b1dd
   8b034:	0008b1dd 	.word	0x0008b1dd
   8b038:	0008b1dd 	.word	0x0008b1dd
   8b03c:	0008b1dd 	.word	0x0008b1dd
   8b040:	0008b1dd 	.word	0x0008b1dd
   8b044:	0008b1dd 	.word	0x0008b1dd
   8b048:	0008b1dd 	.word	0x0008b1dd
   8b04c:	0008b1dd 	.word	0x0008b1dd
   8b050:	0008b1dd 	.word	0x0008b1dd
   8b054:	0008b1dd 	.word	0x0008b1dd
   8b058:	0008b1dd 	.word	0x0008b1dd
   8b05c:	0008b1dd 	.word	0x0008b1dd
   8b060:	0008b1dd 	.word	0x0008b1dd
   8b064:	0008b1dd 	.word	0x0008b1dd
   8b068:	0008b1dd 	.word	0x0008b1dd
   8b06c:	0008b1dd 	.word	0x0008b1dd
   8b070:	0008b1dd 	.word	0x0008b1dd
   8b074:	0008b1dd 	.word	0x0008b1dd
   8b078:	0008b1dd 	.word	0x0008b1dd
   8b07c:	0008b1dd 	.word	0x0008b1dd
   8b080:	0008b1dd 	.word	0x0008b1dd
   8b084:	0008b135 	.word	0x0008b135
   8b088:	0008b1dd 	.word	0x0008b1dd
   8b08c:	0008b1dd 	.word	0x0008b1dd
   8b090:	0008b1dd 	.word	0x0008b1dd
   8b094:	0008b1dd 	.word	0x0008b1dd
   8b098:	0008b135 	.word	0x0008b135
   8b09c:	0008b1dd 	.word	0x0008b1dd
   8b0a0:	0008b1dd 	.word	0x0008b1dd
   8b0a4:	0008b1dd 	.word	0x0008b1dd
   8b0a8:	0008b1dd 	.word	0x0008b1dd
   8b0ac:	0008b1dd 	.word	0x0008b1dd
   8b0b0:	0008b1dd 	.word	0x0008b1dd
   8b0b4:	0008b1dd 	.word	0x0008b1dd
   8b0b8:	0008b1dd 	.word	0x0008b1dd
   8b0bc:	0008b1dd 	.word	0x0008b1dd
   8b0c0:	0008b135 	.word	0x0008b135
   8b0c4:	0008b135 	.word	0x0008b135
   8b0c8:	0008b135 	.word	0x0008b135
   8b0cc:	0008b135 	.word	0x0008b135
   8b0d0:	0008b135 	.word	0x0008b135
   8b0d4:	0008b1dd 	.word	0x0008b1dd
   8b0d8:	0008b1dd 	.word	0x0008b1dd
   8b0dc:	0008b16d 	.word	0x0008b16d
   8b0e0:	0008b16d 	.word	0x0008b16d
   8b0e4:	0008b16d 	.word	0x0008b16d
   8b0e8:	0008b1dd 	.word	0x0008b1dd
   8b0ec:	0008b1dd 	.word	0x0008b1dd
   8b0f0:	0008b187 	.word	0x0008b187
   8b0f4:	0008b187 	.word	0x0008b187
   8b0f8:	0008b1dd 	.word	0x0008b1dd
   8b0fc:	0008b1dd 	.word	0x0008b1dd
   8b100:	0008b1dd 	.word	0x0008b1dd
   8b104:	0008b1dd 	.word	0x0008b1dd
   8b108:	0008b1dd 	.word	0x0008b1dd
   8b10c:	0008b1dd 	.word	0x0008b1dd
   8b110:	0008b1dd 	.word	0x0008b1dd
   8b114:	0008b1dd 	.word	0x0008b1dd
   8b118:	0008b1dd 	.word	0x0008b1dd
   8b11c:	0008b1dd 	.word	0x0008b1dd
   8b120:	0008b1dd 	.word	0x0008b1dd
   8b124:	0008b16d 	.word	0x0008b16d
   8b128:	0008b1a1 	.word	0x0008b1a1
   8b12c:	0008b1a1 	.word	0x0008b1a1
   8b130:	0008b1bb 	.word	0x0008b1bb
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b134:	4b30      	ldr	r3, [pc, #192]	; (8b1f8 <main+0x89c>)
   8b136:	781b      	ldrb	r3, [r3, #0]
   8b138:	4618      	mov	r0, r3
   8b13a:	4b36      	ldr	r3, [pc, #216]	; (8b214 <main+0x8b8>)
   8b13c:	4798      	blx	r3
   8b13e:	4603      	mov	r3, r0
   8b140:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b142:	79fb      	ldrb	r3, [r7, #7]
   8b144:	2b00      	cmp	r3, #0
   8b146:	d001      	beq.n	8b14c <main+0x7f0>
   8b148:	4b2d      	ldr	r3, [pc, #180]	; (8b200 <main+0x8a4>)
   8b14a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8b14c:	79fb      	ldrb	r3, [r7, #7]
   8b14e:	2b00      	cmp	r3, #0
   8b150:	d146      	bne.n	8b1e0 <main+0x884>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b152:	4b29      	ldr	r3, [pc, #164]	; (8b1f8 <main+0x89c>)
   8b154:	781b      	ldrb	r3, [r3, #0]
   8b156:	4618      	mov	r0, r3
   8b158:	4b2a      	ldr	r3, [pc, #168]	; (8b204 <main+0x8a8>)
   8b15a:	4798      	blx	r3
   8b15c:	4603      	mov	r3, r0
   8b15e:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b160:	79fb      	ldrb	r3, [r7, #7]
   8b162:	2b00      	cmp	r3, #0
   8b164:	d03c      	beq.n	8b1e0 <main+0x884>
   8b166:	4b26      	ldr	r3, [pc, #152]	; (8b200 <main+0x8a4>)
   8b168:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b16a:	e039      	b.n	8b1e0 <main+0x884>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b16c:	4b22      	ldr	r3, [pc, #136]	; (8b1f8 <main+0x89c>)
   8b16e:	781b      	ldrb	r3, [r3, #0]
   8b170:	4618      	mov	r0, r3
   8b172:	4b28      	ldr	r3, [pc, #160]	; (8b214 <main+0x8b8>)
   8b174:	4798      	blx	r3
   8b176:	4603      	mov	r3, r0
   8b178:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b17a:	79fb      	ldrb	r3, [r7, #7]
   8b17c:	2b00      	cmp	r3, #0
   8b17e:	d031      	beq.n	8b1e4 <main+0x888>
   8b180:	4b1f      	ldr	r3, [pc, #124]	; (8b200 <main+0x8a4>)
   8b182:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b184:	e02e      	b.n	8b1e4 <main+0x888>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b186:	4b1c      	ldr	r3, [pc, #112]	; (8b1f8 <main+0x89c>)
   8b188:	781b      	ldrb	r3, [r3, #0]
   8b18a:	4618      	mov	r0, r3
   8b18c:	4b1d      	ldr	r3, [pc, #116]	; (8b204 <main+0x8a8>)
   8b18e:	4798      	blx	r3
   8b190:	4603      	mov	r3, r0
   8b192:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b194:	79fb      	ldrb	r3, [r7, #7]
   8b196:	2b00      	cmp	r3, #0
   8b198:	d026      	beq.n	8b1e8 <main+0x88c>
   8b19a:	4b19      	ldr	r3, [pc, #100]	; (8b200 <main+0x8a4>)
   8b19c:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b19e:	e023      	b.n	8b1e8 <main+0x88c>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b1a0:	4b15      	ldr	r3, [pc, #84]	; (8b1f8 <main+0x89c>)
   8b1a2:	781b      	ldrb	r3, [r3, #0]
   8b1a4:	4618      	mov	r0, r3
   8b1a6:	4b1b      	ldr	r3, [pc, #108]	; (8b214 <main+0x8b8>)
   8b1a8:	4798      	blx	r3
   8b1aa:	4603      	mov	r3, r0
   8b1ac:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b1ae:	79fb      	ldrb	r3, [r7, #7]
   8b1b0:	2b00      	cmp	r3, #0
   8b1b2:	d01b      	beq.n	8b1ec <main+0x890>
   8b1b4:	4b12      	ldr	r3, [pc, #72]	; (8b200 <main+0x8a4>)
   8b1b6:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b1b8:	e018      	b.n	8b1ec <main+0x890>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8b1ba:	202b      	movs	r0, #43	; 0x2b
   8b1bc:	4b0f      	ldr	r3, [pc, #60]	; (8b1fc <main+0x8a0>)
   8b1be:	4798      	blx	r3
   8b1c0:	4603      	mov	r3, r0
   8b1c2:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b1c4:	79fb      	ldrb	r3, [r7, #7]
   8b1c6:	2b00      	cmp	r3, #0
   8b1c8:	d001      	beq.n	8b1ce <main+0x872>
   8b1ca:	4b0d      	ldr	r3, [pc, #52]	; (8b200 <main+0x8a4>)
   8b1cc:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8b1ce:	4b0f      	ldr	r3, [pc, #60]	; (8b20c <main+0x8b0>)
   8b1d0:	2205      	movs	r2, #5
   8b1d2:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8b1d4:	4b08      	ldr	r3, [pc, #32]	; (8b1f8 <main+0x89c>)
   8b1d6:	2200      	movs	r2, #0
   8b1d8:	701a      	strb	r2, [r3, #0]
						break;
   8b1da:	e008      	b.n	8b1ee <main+0x892>
						default:break;
   8b1dc:	bf00      	nop
   8b1de:	e006      	b.n	8b1ee <main+0x892>
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b1e0:	bf00      	nop
   8b1e2:	e004      	b.n	8b1ee <main+0x892>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b1e4:	bf00      	nop
   8b1e6:	e002      	b.n	8b1ee <main+0x892>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b1e8:	bf00      	nop
   8b1ea:	e000      	b.n	8b1ee <main+0x892>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8b1ec:	bf00      	nop
						Cl_MacEvent = EVT_NULL;
						break;
						default:break;
					}
	
					Cl_MacEvent = EVT_NULL;
   8b1ee:	4b02      	ldr	r3, [pc, #8]	; (8b1f8 <main+0x89c>)
   8b1f0:	2200      	movs	r2, #0
   8b1f2:	701a      	strb	r2, [r3, #0]
					break;
   8b1f4:	f001 b96e 	b.w	8c4d4 <main+0x1b78>
   8b1f8:	2007212e 	.word	0x2007212e
   8b1fc:	000a0dcd 	.word	0x000a0dcd
   8b200:	000893e9 	.word	0x000893e9
   8b204:	0009e571 	.word	0x0009e571
   8b208:	0009aa31 	.word	0x0009aa31
   8b20c:	20070474 	.word	0x20070474
   8b210:	00098601 	.word	0x00098601
   8b214:	00098d59 	.word	0x00098d59
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8b218:	4bc7      	ldr	r3, [pc, #796]	; (8b538 <main+0xbdc>)
   8b21a:	781b      	ldrb	r3, [r3, #0]
   8b21c:	3b07      	subs	r3, #7
   8b21e:	2b27      	cmp	r3, #39	; 0x27
   8b220:	d852      	bhi.n	8b2c8 <main+0x96c>
   8b222:	a201      	add	r2, pc, #4	; (adr r2, 8b228 <main+0x8cc>)
   8b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b228:	0008b2c9 	.word	0x0008b2c9
   8b22c:	0008b2c9 	.word	0x0008b2c9
   8b230:	0008b2c9 	.word	0x0008b2c9
   8b234:	0008b2c9 	.word	0x0008b2c9
   8b238:	0008b2c9 	.word	0x0008b2c9
   8b23c:	0008b2c9 	.word	0x0008b2c9
   8b240:	0008b2c9 	.word	0x0008b2c9
   8b244:	0008b2c9 	.word	0x0008b2c9
   8b248:	0008b2c9 	.word	0x0008b2c9
   8b24c:	0008b2c9 	.word	0x0008b2c9
   8b250:	0008b2c9 	.word	0x0008b2c9
   8b254:	0008b2c9 	.word	0x0008b2c9
   8b258:	0008b2c9 	.word	0x0008b2c9
   8b25c:	0008b2c9 	.word	0x0008b2c9
   8b260:	0008b2c9 	.word	0x0008b2c9
   8b264:	0008b2c9 	.word	0x0008b2c9
   8b268:	0008b2c9 	.word	0x0008b2c9
   8b26c:	0008b2c9 	.word	0x0008b2c9
   8b270:	0008b2c9 	.word	0x0008b2c9
   8b274:	0008b2c9 	.word	0x0008b2c9
   8b278:	0008b2c9 	.word	0x0008b2c9
   8b27c:	0008b2c9 	.word	0x0008b2c9
   8b280:	0008b2c9 	.word	0x0008b2c9
   8b284:	0008b2c9 	.word	0x0008b2c9
   8b288:	0008b2c9 	.word	0x0008b2c9
   8b28c:	0008b2c9 	.word	0x0008b2c9
   8b290:	0008b2c9 	.word	0x0008b2c9
   8b294:	0008b2c9 	.word	0x0008b2c9
   8b298:	0008b2c9 	.word	0x0008b2c9
   8b29c:	0008b2c9 	.word	0x0008b2c9
   8b2a0:	0008b2c9 	.word	0x0008b2c9
   8b2a4:	0008b2c9 	.word	0x0008b2c9
   8b2a8:	0008b2c9 	.word	0x0008b2c9
   8b2ac:	0008b2c9 	.word	0x0008b2c9
   8b2b0:	0008b2c9 	.word	0x0008b2c9
   8b2b4:	0008b2c9 	.word	0x0008b2c9
   8b2b8:	0008b2c9 	.word	0x0008b2c9
   8b2bc:	0008b2c9 	.word	0x0008b2c9
   8b2c0:	0008b2c9 	.word	0x0008b2c9
   8b2c4:	0008b2c9 	.word	0x0008b2c9
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8b2c8:	bf00      	nop
					}
					break;
   8b2ca:	f001 b903 	b.w	8c4d4 <main+0x1b78>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8b2ce:	4b9a      	ldr	r3, [pc, #616]	; (8b538 <main+0xbdc>)
   8b2d0:	781b      	ldrb	r3, [r3, #0]
   8b2d2:	3b07      	subs	r3, #7
   8b2d4:	2b4a      	cmp	r3, #74	; 0x4a
   8b2d6:	f200 814c 	bhi.w	8b572 <main+0xc16>
   8b2da:	a201      	add	r2, pc, #4	; (adr r2, 8b2e0 <main+0x984>)
   8b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b2e0:	0008b40d 	.word	0x0008b40d
   8b2e4:	0008b4ff 	.word	0x0008b4ff
   8b2e8:	0008b491 	.word	0x0008b491
   8b2ec:	0008b559 	.word	0x0008b559
   8b2f0:	0008b559 	.word	0x0008b559
   8b2f4:	0008b559 	.word	0x0008b559
   8b2f8:	0008b573 	.word	0x0008b573
   8b2fc:	0008b573 	.word	0x0008b573
   8b300:	0008b51f 	.word	0x0008b51f
   8b304:	0008b51f 	.word	0x0008b51f
   8b308:	0008b573 	.word	0x0008b573
   8b30c:	0008b573 	.word	0x0008b573
   8b310:	0008b573 	.word	0x0008b573
   8b314:	0008b573 	.word	0x0008b573
   8b318:	0008b573 	.word	0x0008b573
   8b31c:	0008b573 	.word	0x0008b573
   8b320:	0008b573 	.word	0x0008b573
   8b324:	0008b573 	.word	0x0008b573
   8b328:	0008b573 	.word	0x0008b573
   8b32c:	0008b573 	.word	0x0008b573
   8b330:	0008b573 	.word	0x0008b573
   8b334:	0008b573 	.word	0x0008b573
   8b338:	0008b573 	.word	0x0008b573
   8b33c:	0008b573 	.word	0x0008b573
   8b340:	0008b51f 	.word	0x0008b51f
   8b344:	0008b51f 	.word	0x0008b51f
   8b348:	0008b573 	.word	0x0008b573
   8b34c:	0008b573 	.word	0x0008b573
   8b350:	0008b573 	.word	0x0008b573
   8b354:	0008b573 	.word	0x0008b573
   8b358:	0008b573 	.word	0x0008b573
   8b35c:	0008b559 	.word	0x0008b559
   8b360:	0008b559 	.word	0x0008b559
   8b364:	0008b559 	.word	0x0008b559
   8b368:	0008b491 	.word	0x0008b491
   8b36c:	0008b573 	.word	0x0008b573
   8b370:	0008b573 	.word	0x0008b573
   8b374:	0008b573 	.word	0x0008b573
   8b378:	0008b491 	.word	0x0008b491
   8b37c:	0008b491 	.word	0x0008b491
   8b380:	0008b573 	.word	0x0008b573
   8b384:	0008b573 	.word	0x0008b573
   8b388:	0008b471 	.word	0x0008b471
   8b38c:	0008b573 	.word	0x0008b573
   8b390:	0008b573 	.word	0x0008b573
   8b394:	0008b573 	.word	0x0008b573
   8b398:	0008b573 	.word	0x0008b573
   8b39c:	0008b573 	.word	0x0008b573
   8b3a0:	0008b573 	.word	0x0008b573
   8b3a4:	0008b491 	.word	0x0008b491
   8b3a8:	0008b491 	.word	0x0008b491
   8b3ac:	0008b491 	.word	0x0008b491
   8b3b0:	0008b491 	.word	0x0008b491
   8b3b4:	0008b491 	.word	0x0008b491
   8b3b8:	0008b491 	.word	0x0008b491
   8b3bc:	0008b573 	.word	0x0008b573
   8b3c0:	0008b573 	.word	0x0008b573
   8b3c4:	0008b573 	.word	0x0008b573
   8b3c8:	0008b573 	.word	0x0008b573
   8b3cc:	0008b573 	.word	0x0008b573
   8b3d0:	0008b573 	.word	0x0008b573
   8b3d4:	0008b573 	.word	0x0008b573
   8b3d8:	0008b573 	.word	0x0008b573
   8b3dc:	0008b573 	.word	0x0008b573
   8b3e0:	0008b573 	.word	0x0008b573
   8b3e4:	0008b4b1 	.word	0x0008b4b1
   8b3e8:	0008b573 	.word	0x0008b573
   8b3ec:	0008b573 	.word	0x0008b573
   8b3f0:	0008b573 	.word	0x0008b573
   8b3f4:	0008b573 	.word	0x0008b573
   8b3f8:	0008b573 	.word	0x0008b573
   8b3fc:	0008b573 	.word	0x0008b573
   8b400:	0008b573 	.word	0x0008b573
   8b404:	0008b573 	.word	0x0008b573
   8b408:	0008b491 	.word	0x0008b491
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8b40c:	4b4b      	ldr	r3, [pc, #300]	; (8b53c <main+0xbe0>)
   8b40e:	2200      	movs	r2, #0
   8b410:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b412:	4b49      	ldr	r3, [pc, #292]	; (8b538 <main+0xbdc>)
   8b414:	781b      	ldrb	r3, [r3, #0]
   8b416:	4618      	mov	r0, r3
   8b418:	4b49      	ldr	r3, [pc, #292]	; (8b540 <main+0xbe4>)
   8b41a:	4798      	blx	r3
   8b41c:	4603      	mov	r3, r0
   8b41e:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b420:	79fb      	ldrb	r3, [r7, #7]
   8b422:	2b00      	cmp	r3, #0
   8b424:	d001      	beq.n	8b42a <main+0xace>
   8b426:	4b47      	ldr	r3, [pc, #284]	; (8b544 <main+0xbe8>)
   8b428:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b42a:	79fb      	ldrb	r3, [r7, #7]
   8b42c:	2b00      	cmp	r3, #0
   8b42e:	d10c      	bne.n	8b44a <main+0xaee>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b430:	4b41      	ldr	r3, [pc, #260]	; (8b538 <main+0xbdc>)
   8b432:	781b      	ldrb	r3, [r3, #0]
   8b434:	4618      	mov	r0, r3
   8b436:	4b44      	ldr	r3, [pc, #272]	; (8b548 <main+0xbec>)
   8b438:	4798      	blx	r3
   8b43a:	4603      	mov	r3, r0
   8b43c:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);	
   8b43e:	79fb      	ldrb	r3, [r7, #7]
   8b440:	2b00      	cmp	r3, #0
   8b442:	d011      	beq.n	8b468 <main+0xb0c>
   8b444:	4b3f      	ldr	r3, [pc, #252]	; (8b544 <main+0xbe8>)
   8b446:	4798      	blx	r3
   8b448:	e00e      	b.n	8b468 <main+0xb0c>
							}
							else if(Cl_MacRetval == CL_OK)
   8b44a:	79fb      	ldrb	r3, [r7, #7]
   8b44c:	2b00      	cmp	r3, #0
   8b44e:	d10b      	bne.n	8b468 <main+0xb0c>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b450:	4b39      	ldr	r3, [pc, #228]	; (8b538 <main+0xbdc>)
   8b452:	781b      	ldrb	r3, [r3, #0]
   8b454:	4618      	mov	r0, r3
   8b456:	4b3c      	ldr	r3, [pc, #240]	; (8b548 <main+0xbec>)
   8b458:	4798      	blx	r3
   8b45a:	4603      	mov	r3, r0
   8b45c:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b45e:	79fb      	ldrb	r3, [r7, #7]
   8b460:	2b00      	cmp	r3, #0
   8b462:	d001      	beq.n	8b468 <main+0xb0c>
   8b464:	4b37      	ldr	r3, [pc, #220]	; (8b544 <main+0xbe8>)
   8b466:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8b468:	4b33      	ldr	r3, [pc, #204]	; (8b538 <main+0xbdc>)
   8b46a:	2200      	movs	r2, #0
   8b46c:	701a      	strb	r2, [r3, #0]
						break;
   8b46e:	e087      	b.n	8b580 <main+0xc24>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b470:	4b31      	ldr	r3, [pc, #196]	; (8b538 <main+0xbdc>)
   8b472:	781b      	ldrb	r3, [r3, #0]
   8b474:	4618      	mov	r0, r3
   8b476:	4b34      	ldr	r3, [pc, #208]	; (8b548 <main+0xbec>)
   8b478:	4798      	blx	r3
   8b47a:	4603      	mov	r3, r0
   8b47c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b47e:	79fb      	ldrb	r3, [r7, #7]
   8b480:	2b00      	cmp	r3, #0
   8b482:	d001      	beq.n	8b488 <main+0xb2c>
   8b484:	4b2f      	ldr	r3, [pc, #188]	; (8b544 <main+0xbe8>)
   8b486:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8b488:	4b2b      	ldr	r3, [pc, #172]	; (8b538 <main+0xbdc>)
   8b48a:	2200      	movs	r2, #0
   8b48c:	701a      	strb	r2, [r3, #0]
						break;
   8b48e:	e077      	b.n	8b580 <main+0xc24>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b490:	4b29      	ldr	r3, [pc, #164]	; (8b538 <main+0xbdc>)
   8b492:	781b      	ldrb	r3, [r3, #0]
   8b494:	4618      	mov	r0, r3
   8b496:	4b2c      	ldr	r3, [pc, #176]	; (8b548 <main+0xbec>)
   8b498:	4798      	blx	r3
   8b49a:	4603      	mov	r3, r0
   8b49c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b49e:	79fb      	ldrb	r3, [r7, #7]
   8b4a0:	2b00      	cmp	r3, #0
   8b4a2:	d001      	beq.n	8b4a8 <main+0xb4c>
   8b4a4:	4b27      	ldr	r3, [pc, #156]	; (8b544 <main+0xbe8>)
   8b4a6:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8b4a8:	4b23      	ldr	r3, [pc, #140]	; (8b538 <main+0xbdc>)
   8b4aa:	2200      	movs	r2, #0
   8b4ac:	701a      	strb	r2, [r3, #0]
						break;
   8b4ae:	e067      	b.n	8b580 <main+0xc24>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b4b0:	4b21      	ldr	r3, [pc, #132]	; (8b538 <main+0xbdc>)
   8b4b2:	781b      	ldrb	r3, [r3, #0]
   8b4b4:	4618      	mov	r0, r3
   8b4b6:	4b24      	ldr	r3, [pc, #144]	; (8b548 <main+0xbec>)
   8b4b8:	4798      	blx	r3
   8b4ba:	4603      	mov	r3, r0
   8b4bc:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b4be:	79fb      	ldrb	r3, [r7, #7]
   8b4c0:	2b00      	cmp	r3, #0
   8b4c2:	d001      	beq.n	8b4c8 <main+0xb6c>
   8b4c4:	4b1f      	ldr	r3, [pc, #124]	; (8b544 <main+0xbe8>)
   8b4c6:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8b4c8:	79fb      	ldrb	r3, [r7, #7]
   8b4ca:	2b00      	cmp	r3, #0
   8b4cc:	d10f      	bne.n	8b4ee <main+0xb92>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8b4ce:	4b1f      	ldr	r3, [pc, #124]	; (8b54c <main+0xbf0>)
   8b4d0:	220a      	movs	r2, #10
   8b4d2:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8b4d4:	230a      	movs	r3, #10
   8b4d6:	707b      	strb	r3, [r7, #1]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
   8b4d8:	787b      	ldrb	r3, [r7, #1]
   8b4da:	2201      	movs	r2, #1
   8b4dc:	4619      	mov	r1, r3
   8b4de:	2045      	movs	r0, #69	; 0x45
   8b4e0:	4b1b      	ldr	r3, [pc, #108]	; (8b550 <main+0xbf4>)
   8b4e2:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8b4e4:	79fb      	ldrb	r3, [r7, #7]
   8b4e6:	2b00      	cmp	r3, #0
   8b4e8:	d001      	beq.n	8b4ee <main+0xb92>
   8b4ea:	4b16      	ldr	r3, [pc, #88]	; (8b544 <main+0xbe8>)
   8b4ec:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8b4ee:	4b19      	ldr	r3, [pc, #100]	; (8b554 <main+0xbf8>)
   8b4f0:	4798      	blx	r3
   8b4f2:	4603      	mov	r3, r0
   8b4f4:	71fb      	strb	r3, [r7, #7]
							
							Cl_MacEvent = EVT_NULL;
   8b4f6:	4b10      	ldr	r3, [pc, #64]	; (8b538 <main+0xbdc>)
   8b4f8:	2200      	movs	r2, #0
   8b4fa:	701a      	strb	r2, [r3, #0]
						break;
   8b4fc:	e040      	b.n	8b580 <main+0xc24>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b4fe:	4b0e      	ldr	r3, [pc, #56]	; (8b538 <main+0xbdc>)
   8b500:	781b      	ldrb	r3, [r3, #0]
   8b502:	4618      	mov	r0, r3
   8b504:	4b10      	ldr	r3, [pc, #64]	; (8b548 <main+0xbec>)
   8b506:	4798      	blx	r3
   8b508:	4603      	mov	r3, r0
   8b50a:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b50c:	79fb      	ldrb	r3, [r7, #7]
   8b50e:	2b00      	cmp	r3, #0
   8b510:	d001      	beq.n	8b516 <main+0xbba>
   8b512:	4b0c      	ldr	r3, [pc, #48]	; (8b544 <main+0xbe8>)
   8b514:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8b516:	4b08      	ldr	r3, [pc, #32]	; (8b538 <main+0xbdc>)
   8b518:	2200      	movs	r2, #0
   8b51a:	701a      	strb	r2, [r3, #0]
						break;
   8b51c:	e030      	b.n	8b580 <main+0xc24>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b51e:	4b06      	ldr	r3, [pc, #24]	; (8b538 <main+0xbdc>)
   8b520:	781b      	ldrb	r3, [r3, #0]
   8b522:	4618      	mov	r0, r3
   8b524:	4b08      	ldr	r3, [pc, #32]	; (8b548 <main+0xbec>)
   8b526:	4798      	blx	r3
   8b528:	4603      	mov	r3, r0
   8b52a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b52c:	79fb      	ldrb	r3, [r7, #7]
   8b52e:	2b00      	cmp	r3, #0
   8b530:	d022      	beq.n	8b578 <main+0xc1c>
   8b532:	4b04      	ldr	r3, [pc, #16]	; (8b544 <main+0xbe8>)
   8b534:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8b536:	e01f      	b.n	8b578 <main+0xc1c>
   8b538:	2007212e 	.word	0x2007212e
   8b53c:	20072134 	.word	0x20072134
   8b540:	000a0dcd 	.word	0x000a0dcd
   8b544:	000893e9 	.word	0x000893e9
   8b548:	0009e571 	.word	0x0009e571
   8b54c:	20070474 	.word	0x20070474
   8b550:	00098601 	.word	0x00098601
   8b554:	00084f29 	.word	0x00084f29
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b558:	4bb1      	ldr	r3, [pc, #708]	; (8b820 <main+0xec4>)
   8b55a:	781b      	ldrb	r3, [r3, #0]
   8b55c:	4618      	mov	r0, r3
   8b55e:	4bb1      	ldr	r3, [pc, #708]	; (8b824 <main+0xec8>)
   8b560:	4798      	blx	r3
   8b562:	4603      	mov	r3, r0
   8b564:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b566:	79fb      	ldrb	r3, [r7, #7]
   8b568:	2b00      	cmp	r3, #0
   8b56a:	d008      	beq.n	8b57e <main+0xc22>
   8b56c:	4bae      	ldr	r3, [pc, #696]	; (8b828 <main+0xecc>)
   8b56e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8b570:	e005      	b.n	8b57e <main+0xc22>
						default: break;
   8b572:	bf00      	nop
   8b574:	f000 bfae 	b.w	8c4d4 <main+0x1b78>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8b578:	bf00      	nop
   8b57a:	f000 bfab 	b.w	8c4d4 <main+0x1b78>
						ASSERT_ERROR(Cl_MacRetval);
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8b57e:	bf00      	nop
						default: break;
					}
					break;
   8b580:	f000 bfa8 	b.w	8c4d4 <main+0x1b78>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8b584:	4ba6      	ldr	r3, [pc, #664]	; (8b820 <main+0xec4>)
   8b586:	781b      	ldrb	r3, [r3, #0]
   8b588:	3b07      	subs	r3, #7
   8b58a:	2b38      	cmp	r3, #56	; 0x38
   8b58c:	f200 816d 	bhi.w	8b86a <main+0xf0e>
   8b590:	a201      	add	r2, pc, #4	; (adr r2, 8b598 <main+0xc3c>)
   8b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b596:	bf00      	nop
   8b598:	0008b6d3 	.word	0x0008b6d3
   8b59c:	0008b86b 	.word	0x0008b86b
   8b5a0:	0008b73b 	.word	0x0008b73b
   8b5a4:	0008b845 	.word	0x0008b845
   8b5a8:	0008b845 	.word	0x0008b845
   8b5ac:	0008b845 	.word	0x0008b845
   8b5b0:	0008b86b 	.word	0x0008b86b
   8b5b4:	0008b86b 	.word	0x0008b86b
   8b5b8:	0008b807 	.word	0x0008b807
   8b5bc:	0008b807 	.word	0x0008b807
   8b5c0:	0008b86b 	.word	0x0008b86b
   8b5c4:	0008b86b 	.word	0x0008b86b
   8b5c8:	0008b86b 	.word	0x0008b86b
   8b5cc:	0008b86b 	.word	0x0008b86b
   8b5d0:	0008b86b 	.word	0x0008b86b
   8b5d4:	0008b86b 	.word	0x0008b86b
   8b5d8:	0008b86b 	.word	0x0008b86b
   8b5dc:	0008b86b 	.word	0x0008b86b
   8b5e0:	0008b86b 	.word	0x0008b86b
   8b5e4:	0008b86b 	.word	0x0008b86b
   8b5e8:	0008b86b 	.word	0x0008b86b
   8b5ec:	0008b86b 	.word	0x0008b86b
   8b5f0:	0008b7bb 	.word	0x0008b7bb
   8b5f4:	0008b86b 	.word	0x0008b86b
   8b5f8:	0008b7e1 	.word	0x0008b7e1
   8b5fc:	0008b7e1 	.word	0x0008b7e1
   8b600:	0008b86b 	.word	0x0008b86b
   8b604:	0008b86b 	.word	0x0008b86b
   8b608:	0008b86b 	.word	0x0008b86b
   8b60c:	0008b86b 	.word	0x0008b86b
   8b610:	0008b86b 	.word	0x0008b86b
   8b614:	0008b845 	.word	0x0008b845
   8b618:	0008b845 	.word	0x0008b845
   8b61c:	0008b845 	.word	0x0008b845
   8b620:	0008b86b 	.word	0x0008b86b
   8b624:	0008b86b 	.word	0x0008b86b
   8b628:	0008b86b 	.word	0x0008b86b
   8b62c:	0008b86b 	.word	0x0008b86b
   8b630:	0008b67d 	.word	0x0008b67d
   8b634:	0008b67d 	.word	0x0008b67d
   8b638:	0008b86b 	.word	0x0008b86b
   8b63c:	0008b86b 	.word	0x0008b86b
   8b640:	0008b86b 	.word	0x0008b86b
   8b644:	0008b86b 	.word	0x0008b86b
   8b648:	0008b86b 	.word	0x0008b86b
   8b64c:	0008b86b 	.word	0x0008b86b
   8b650:	0008b86b 	.word	0x0008b86b
   8b654:	0008b86b 	.word	0x0008b86b
   8b658:	0008b86b 	.word	0x0008b86b
   8b65c:	0008b86b 	.word	0x0008b86b
   8b660:	0008b86b 	.word	0x0008b86b
   8b664:	0008b86b 	.word	0x0008b86b
   8b668:	0008b86b 	.word	0x0008b86b
   8b66c:	0008b86b 	.word	0x0008b86b
   8b670:	0008b86b 	.word	0x0008b86b
   8b674:	0008b86b 	.word	0x0008b86b
   8b678:	0008b68d 	.word	0x0008b68d
				
					{
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b67c:	4b68      	ldr	r3, [pc, #416]	; (8b820 <main+0xec4>)
   8b67e:	781b      	ldrb	r3, [r3, #0]
   8b680:	4618      	mov	r0, r3
   8b682:	4b68      	ldr	r3, [pc, #416]	; (8b824 <main+0xec8>)
   8b684:	4798      	blx	r3
   8b686:	4603      	mov	r3, r0
   8b688:	71fb      	strb	r3, [r7, #7]
						break;
   8b68a:	e101      	b.n	8b890 <main+0xf34>

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8b68c:	4b64      	ldr	r3, [pc, #400]	; (8b820 <main+0xec4>)
   8b68e:	781b      	ldrb	r3, [r3, #0]
   8b690:	4618      	mov	r0, r3
   8b692:	4b66      	ldr	r3, [pc, #408]	; (8b82c <main+0xed0>)
   8b694:	4798      	blx	r3
   8b696:	4603      	mov	r3, r0
   8b698:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b69a:	79fb      	ldrb	r3, [r7, #7]
   8b69c:	2b00      	cmp	r3, #0
   8b69e:	d001      	beq.n	8b6a4 <main+0xd48>
   8b6a0:	4b61      	ldr	r3, [pc, #388]	; (8b828 <main+0xecc>)
   8b6a2:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b6a4:	79fb      	ldrb	r3, [r7, #7]
   8b6a6:	2b00      	cmp	r3, #0
   8b6a8:	d10b      	bne.n	8b6c2 <main+0xd66>
							{
							Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b6aa:	4b5d      	ldr	r3, [pc, #372]	; (8b820 <main+0xec4>)
   8b6ac:	781b      	ldrb	r3, [r3, #0]
   8b6ae:	4618      	mov	r0, r3
   8b6b0:	4b5f      	ldr	r3, [pc, #380]	; (8b830 <main+0xed4>)
   8b6b2:	4798      	blx	r3
   8b6b4:	4603      	mov	r3, r0
   8b6b6:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b6b8:	79fb      	ldrb	r3, [r7, #7]
   8b6ba:	2b00      	cmp	r3, #0
   8b6bc:	d001      	beq.n	8b6c2 <main+0xd66>
   8b6be:	4b5a      	ldr	r3, [pc, #360]	; (8b828 <main+0xecc>)
   8b6c0:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b6c2:	79fb      	ldrb	r3, [r7, #7]
   8b6c4:	2b00      	cmp	r3, #0
   8b6c6:	f040 80d3 	bne.w	8b870 <main+0xf14>
							{
								Cl_MacState = MAC_DISINFECT;
   8b6ca:	4b5a      	ldr	r3, [pc, #360]	; (8b834 <main+0xed8>)
   8b6cc:	2208      	movs	r2, #8
   8b6ce:	701a      	strb	r2, [r3, #0]
							else
							{
								// handdle error
							}
						
						break;
   8b6d0:	e0ce      	b.n	8b870 <main+0xf14>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b6d2:	4b53      	ldr	r3, [pc, #332]	; (8b820 <main+0xec4>)
   8b6d4:	781b      	ldrb	r3, [r3, #0]
   8b6d6:	4618      	mov	r0, r3
   8b6d8:	4b57      	ldr	r3, [pc, #348]	; (8b838 <main+0xedc>)
   8b6da:	4798      	blx	r3
   8b6dc:	4603      	mov	r3, r0
   8b6de:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b6e0:	79fb      	ldrb	r3, [r7, #7]
   8b6e2:	2b00      	cmp	r3, #0
   8b6e4:	d001      	beq.n	8b6ea <main+0xd8e>
   8b6e6:	4b50      	ldr	r3, [pc, #320]	; (8b828 <main+0xecc>)
   8b6e8:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8b6ea:	79fb      	ldrb	r3, [r7, #7]
   8b6ec:	2b00      	cmp	r3, #0
   8b6ee:	d10b      	bne.n	8b708 <main+0xdac>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b6f0:	4b4b      	ldr	r3, [pc, #300]	; (8b820 <main+0xec4>)
   8b6f2:	781b      	ldrb	r3, [r3, #0]
   8b6f4:	4618      	mov	r0, r3
   8b6f6:	4b4b      	ldr	r3, [pc, #300]	; (8b824 <main+0xec8>)
   8b6f8:	4798      	blx	r3
   8b6fa:	4603      	mov	r3, r0
   8b6fc:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8b6fe:	79fb      	ldrb	r3, [r7, #7]
   8b700:	2b00      	cmp	r3, #0
   8b702:	d001      	beq.n	8b708 <main+0xdac>
   8b704:	4b48      	ldr	r3, [pc, #288]	; (8b828 <main+0xecc>)
   8b706:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8b708:	79fb      	ldrb	r3, [r7, #7]
   8b70a:	2b00      	cmp	r3, #0
   8b70c:	d102      	bne.n	8b714 <main+0xdb8>
								{
									Cl_MacState = MAC_RINSE;
   8b70e:	4b49      	ldr	r3, [pc, #292]	; (8b834 <main+0xed8>)
   8b710:	2207      	movs	r2, #7
   8b712:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8b714:	79fb      	ldrb	r3, [r7, #7]
   8b716:	2b00      	cmp	r3, #0
   8b718:	d10b      	bne.n	8b732 <main+0xdd6>
								{
									Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8b71a:	2201      	movs	r2, #1
   8b71c:	2107      	movs	r1, #7
   8b71e:	2045      	movs	r0, #69	; 0x45
   8b720:	4b46      	ldr	r3, [pc, #280]	; (8b83c <main+0xee0>)
   8b722:	4798      	blx	r3
   8b724:	4603      	mov	r3, r0
   8b726:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8b728:	79fb      	ldrb	r3, [r7, #7]
   8b72a:	2b00      	cmp	r3, #0
   8b72c:	d001      	beq.n	8b732 <main+0xdd6>
   8b72e:	4b3e      	ldr	r3, [pc, #248]	; (8b828 <main+0xecc>)
   8b730:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8b732:	4b3b      	ldr	r3, [pc, #236]	; (8b820 <main+0xec4>)
   8b734:	2200      	movs	r2, #0
   8b736:	701a      	strb	r2, [r3, #0]
						break;
   8b738:	e0aa      	b.n	8b890 <main+0xf34>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b73a:	4b39      	ldr	r3, [pc, #228]	; (8b820 <main+0xec4>)
   8b73c:	781b      	ldrb	r3, [r3, #0]
   8b73e:	4618      	mov	r0, r3
   8b740:	4b3d      	ldr	r3, [pc, #244]	; (8b838 <main+0xedc>)
   8b742:	4798      	blx	r3
   8b744:	4603      	mov	r3, r0
   8b746:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b748:	79fb      	ldrb	r3, [r7, #7]
   8b74a:	2b00      	cmp	r3, #0
   8b74c:	d001      	beq.n	8b752 <main+0xdf6>
   8b74e:	4b36      	ldr	r3, [pc, #216]	; (8b828 <main+0xecc>)
   8b750:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b752:	79fb      	ldrb	r3, [r7, #7]
   8b754:	2b00      	cmp	r3, #0
   8b756:	d10b      	bne.n	8b770 <main+0xe14>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b758:	4b31      	ldr	r3, [pc, #196]	; (8b820 <main+0xec4>)
   8b75a:	781b      	ldrb	r3, [r3, #0]
   8b75c:	4618      	mov	r0, r3
   8b75e:	4b31      	ldr	r3, [pc, #196]	; (8b824 <main+0xec8>)
   8b760:	4798      	blx	r3
   8b762:	4603      	mov	r3, r0
   8b764:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b766:	79fb      	ldrb	r3, [r7, #7]
   8b768:	2b00      	cmp	r3, #0
   8b76a:	d001      	beq.n	8b770 <main+0xe14>
   8b76c:	4b2e      	ldr	r3, [pc, #184]	; (8b828 <main+0xecc>)
   8b76e:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b770:	79fb      	ldrb	r3, [r7, #7]
   8b772:	2b00      	cmp	r3, #0
   8b774:	d10b      	bne.n	8b78e <main+0xe32>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b776:	4b2a      	ldr	r3, [pc, #168]	; (8b820 <main+0xec4>)
   8b778:	781b      	ldrb	r3, [r3, #0]
   8b77a:	4618      	mov	r0, r3
   8b77c:	4b30      	ldr	r3, [pc, #192]	; (8b840 <main+0xee4>)
   8b77e:	4798      	blx	r3
   8b780:	4603      	mov	r3, r0
   8b782:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b784:	79fb      	ldrb	r3, [r7, #7]
   8b786:	2b00      	cmp	r3, #0
   8b788:	d001      	beq.n	8b78e <main+0xe32>
   8b78a:	4b27      	ldr	r3, [pc, #156]	; (8b828 <main+0xecc>)
   8b78c:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b78e:	79fb      	ldrb	r3, [r7, #7]
   8b790:	2b00      	cmp	r3, #0
   8b792:	d102      	bne.n	8b79a <main+0xe3e>
							{
									Cl_MacState = MAC_DPREP;
   8b794:	4b27      	ldr	r3, [pc, #156]	; (8b834 <main+0xed8>)
   8b796:	220b      	movs	r2, #11
   8b798:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8b79a:	79fb      	ldrb	r3, [r7, #7]
   8b79c:	2b00      	cmp	r3, #0
   8b79e:	d16a      	bne.n	8b876 <main+0xf1a>
							{
							Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8b7a0:	2201      	movs	r2, #1
   8b7a2:	210b      	movs	r1, #11
   8b7a4:	2045      	movs	r0, #69	; 0x45
   8b7a6:	4b25      	ldr	r3, [pc, #148]	; (8b83c <main+0xee0>)
   8b7a8:	4798      	blx	r3
   8b7aa:	4603      	mov	r3, r0
   8b7ac:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b7ae:	79fb      	ldrb	r3, [r7, #7]
   8b7b0:	2b00      	cmp	r3, #0
   8b7b2:	d060      	beq.n	8b876 <main+0xf1a>
   8b7b4:	4b1c      	ldr	r3, [pc, #112]	; (8b828 <main+0xecc>)
   8b7b6:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8b7b8:	e05d      	b.n	8b876 <main+0xf1a>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b7ba:	4b19      	ldr	r3, [pc, #100]	; (8b820 <main+0xec4>)
   8b7bc:	781b      	ldrb	r3, [r3, #0]
   8b7be:	4618      	mov	r0, r3
   8b7c0:	4b1f      	ldr	r3, [pc, #124]	; (8b840 <main+0xee4>)
   8b7c2:	4798      	blx	r3
   8b7c4:	4603      	mov	r3, r0
   8b7c6:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b7c8:	79fb      	ldrb	r3, [r7, #7]
   8b7ca:	2b00      	cmp	r3, #0
   8b7cc:	d001      	beq.n	8b7d2 <main+0xe76>
   8b7ce:	4b16      	ldr	r3, [pc, #88]	; (8b828 <main+0xecc>)
   8b7d0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b7d2:	79fb      	ldrb	r3, [r7, #7]
   8b7d4:	2b00      	cmp	r3, #0
   8b7d6:	d151      	bne.n	8b87c <main+0xf20>
							{
									Cl_MacState = MAC_DPREP;
   8b7d8:	4b16      	ldr	r3, [pc, #88]	; (8b834 <main+0xed8>)
   8b7da:	220b      	movs	r2, #11
   8b7dc:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8b7de:	e04d      	b.n	8b87c <main+0xf20>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b7e0:	4b0f      	ldr	r3, [pc, #60]	; (8b820 <main+0xec4>)
   8b7e2:	781b      	ldrb	r3, [r3, #0]
   8b7e4:	4618      	mov	r0, r3
   8b7e6:	4b0f      	ldr	r3, [pc, #60]	; (8b824 <main+0xec8>)
   8b7e8:	4798      	blx	r3
   8b7ea:	4603      	mov	r3, r0
   8b7ec:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b7ee:	79fb      	ldrb	r3, [r7, #7]
   8b7f0:	2b00      	cmp	r3, #0
   8b7f2:	d001      	beq.n	8b7f8 <main+0xe9c>
   8b7f4:	4b0c      	ldr	r3, [pc, #48]	; (8b828 <main+0xecc>)
   8b7f6:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b7f8:	79fb      	ldrb	r3, [r7, #7]
   8b7fa:	2b00      	cmp	r3, #0
   8b7fc:	d141      	bne.n	8b882 <main+0xf26>
							{
								Cl_MacState = MAC_DPREP;
   8b7fe:	4b0d      	ldr	r3, [pc, #52]	; (8b834 <main+0xed8>)
   8b800:	220b      	movs	r2, #11
   8b802:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8b804:	e03d      	b.n	8b882 <main+0xf26>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b806:	4b06      	ldr	r3, [pc, #24]	; (8b820 <main+0xec4>)
   8b808:	781b      	ldrb	r3, [r3, #0]
   8b80a:	4618      	mov	r0, r3
   8b80c:	4b05      	ldr	r3, [pc, #20]	; (8b824 <main+0xec8>)
   8b80e:	4798      	blx	r3
   8b810:	4603      	mov	r3, r0
   8b812:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b814:	79fb      	ldrb	r3, [r7, #7]
   8b816:	2b00      	cmp	r3, #0
   8b818:	d036      	beq.n	8b888 <main+0xf2c>
   8b81a:	4b03      	ldr	r3, [pc, #12]	; (8b828 <main+0xecc>)
   8b81c:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8b81e:	e033      	b.n	8b888 <main+0xf2c>
   8b820:	2007212e 	.word	0x2007212e
   8b824:	0009e571 	.word	0x0009e571
   8b828:	000893e9 	.word	0x000893e9
   8b82c:	00085039 	.word	0x00085039
   8b830:	00098d59 	.word	0x00098d59
   8b834:	20070474 	.word	0x20070474
   8b838:	000a0dcd 	.word	0x000a0dcd
   8b83c:	00098601 	.word	0x00098601
   8b840:	0009aa31 	.word	0x0009aa31
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8b844:	4ba8      	ldr	r3, [pc, #672]	; (8bae8 <main+0x118c>)
   8b846:	781b      	ldrb	r3, [r3, #0]
   8b848:	4618      	mov	r0, r3
   8b84a:	4ba8      	ldr	r3, [pc, #672]	; (8baec <main+0x1190>)
   8b84c:	4798      	blx	r3
   8b84e:	4603      	mov	r3, r0
   8b850:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b852:	79fb      	ldrb	r3, [r7, #7]
   8b854:	2b00      	cmp	r3, #0
   8b856:	d001      	beq.n	8b85c <main+0xf00>
   8b858:	4ba5      	ldr	r3, [pc, #660]	; (8baf0 <main+0x1194>)
   8b85a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b85c:	79fb      	ldrb	r3, [r7, #7]
   8b85e:	2b00      	cmp	r3, #0
   8b860:	d115      	bne.n	8b88e <main+0xf32>
							{
								Cl_MacState = MAC_DPREP;
   8b862:	4ba4      	ldr	r3, [pc, #656]	; (8baf4 <main+0x1198>)
   8b864:	220b      	movs	r2, #11
   8b866:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
																		
						break;
   8b868:	e011      	b.n	8b88e <main+0xf32>
						default: break;
   8b86a:	bf00      	nop
   8b86c:	f000 be32 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handdle error
							}
						
						break;
   8b870:	bf00      	nop
   8b872:	f000 be2f 	b.w	8c4d4 <main+0x1b78>
							}
							else
							{
								// handle error
							}
						break;
   8b876:	bf00      	nop
   8b878:	f000 be2c 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}
						
						break;
   8b87c:	bf00      	nop
   8b87e:	f000 be29 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}
													
						break;
   8b882:	bf00      	nop
   8b884:	f000 be26 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}
													
						break;
   8b888:	bf00      	nop
   8b88a:	f000 be23 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}
																		
						break;
   8b88e:	bf00      	nop
						default: break;
					}
					break;
   8b890:	f000 be20 	b.w	8c4d4 <main+0x1b78>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8b894:	4b94      	ldr	r3, [pc, #592]	; (8bae8 <main+0x118c>)
   8b896:	781b      	ldrb	r3, [r3, #0]
   8b898:	3b09      	subs	r3, #9
   8b89a:	2b43      	cmp	r3, #67	; 0x43
   8b89c:	f200 810f 	bhi.w	8babe <main+0x1162>
   8b8a0:	a201      	add	r2, pc, #4	; (adr r2, 8b8a8 <main+0xf4c>)
   8b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b8a6:	bf00      	nop
   8b8a8:	0008b9b9 	.word	0x0008b9b9
   8b8ac:	0008b9b9 	.word	0x0008b9b9
   8b8b0:	0008b9b9 	.word	0x0008b9b9
   8b8b4:	0008b9b9 	.word	0x0008b9b9
   8b8b8:	0008babf 	.word	0x0008babf
   8b8bc:	0008babf 	.word	0x0008babf
   8b8c0:	0008b9df 	.word	0x0008b9df
   8b8c4:	0008b9b9 	.word	0x0008b9b9
   8b8c8:	0008b9b9 	.word	0x0008b9b9
   8b8cc:	0008baa5 	.word	0x0008baa5
   8b8d0:	0008b9b9 	.word	0x0008b9b9
   8b8d4:	0008b9b9 	.word	0x0008b9b9
   8b8d8:	0008b9b9 	.word	0x0008b9b9
   8b8dc:	0008ba2b 	.word	0x0008ba2b
   8b8e0:	0008babf 	.word	0x0008babf
   8b8e4:	0008babf 	.word	0x0008babf
   8b8e8:	0008babf 	.word	0x0008babf
   8b8ec:	0008babf 	.word	0x0008babf
   8b8f0:	0008babf 	.word	0x0008babf
   8b8f4:	0008babf 	.word	0x0008babf
   8b8f8:	0008b9b9 	.word	0x0008b9b9
   8b8fc:	0008b9b9 	.word	0x0008b9b9
   8b900:	0008ba05 	.word	0x0008ba05
   8b904:	0008babf 	.word	0x0008babf
   8b908:	0008babf 	.word	0x0008babf
   8b90c:	0008babf 	.word	0x0008babf
   8b910:	0008babf 	.word	0x0008babf
   8b914:	0008babf 	.word	0x0008babf
   8b918:	0008babf 	.word	0x0008babf
   8b91c:	0008b9b9 	.word	0x0008b9b9
   8b920:	0008b9b9 	.word	0x0008b9b9
   8b924:	0008b9b9 	.word	0x0008b9b9
   8b928:	0008b9b9 	.word	0x0008b9b9
   8b92c:	0008babf 	.word	0x0008babf
   8b930:	0008babf 	.word	0x0008babf
   8b934:	0008babf 	.word	0x0008babf
   8b938:	0008b9b9 	.word	0x0008b9b9
   8b93c:	0008b9b9 	.word	0x0008b9b9
   8b940:	0008babf 	.word	0x0008babf
   8b944:	0008babf 	.word	0x0008babf
   8b948:	0008babf 	.word	0x0008babf
   8b94c:	0008babf 	.word	0x0008babf
   8b950:	0008babf 	.word	0x0008babf
   8b954:	0008babf 	.word	0x0008babf
   8b958:	0008babf 	.word	0x0008babf
   8b95c:	0008babf 	.word	0x0008babf
   8b960:	0008babf 	.word	0x0008babf
   8b964:	0008b9b9 	.word	0x0008b9b9
   8b968:	0008b9b9 	.word	0x0008b9b9
   8b96c:	0008b9b9 	.word	0x0008b9b9
   8b970:	0008b9b9 	.word	0x0008b9b9
   8b974:	0008b9b9 	.word	0x0008b9b9
   8b978:	0008b9b9 	.word	0x0008b9b9
   8b97c:	0008babf 	.word	0x0008babf
   8b980:	0008babf 	.word	0x0008babf
   8b984:	0008babf 	.word	0x0008babf
   8b988:	0008babf 	.word	0x0008babf
   8b98c:	0008babf 	.word	0x0008babf
   8b990:	0008babf 	.word	0x0008babf
   8b994:	0008babf 	.word	0x0008babf
   8b998:	0008babf 	.word	0x0008babf
   8b99c:	0008babf 	.word	0x0008babf
   8b9a0:	0008babf 	.word	0x0008babf
   8b9a4:	0008babf 	.word	0x0008babf
   8b9a8:	0008babf 	.word	0x0008babf
   8b9ac:	0008babf 	.word	0x0008babf
   8b9b0:	0008babf 	.word	0x0008babf
   8b9b4:	0008ba6b 	.word	0x0008ba6b
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b9b8:	4b4b      	ldr	r3, [pc, #300]	; (8bae8 <main+0x118c>)
   8b9ba:	781b      	ldrb	r3, [r3, #0]
   8b9bc:	4618      	mov	r0, r3
   8b9be:	4b4e      	ldr	r3, [pc, #312]	; (8baf8 <main+0x119c>)
   8b9c0:	4798      	blx	r3
   8b9c2:	4603      	mov	r3, r0
   8b9c4:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b9c6:	79fb      	ldrb	r3, [r7, #7]
   8b9c8:	2b00      	cmp	r3, #0
   8b9ca:	d001      	beq.n	8b9d0 <main+0x1074>
   8b9cc:	4b48      	ldr	r3, [pc, #288]	; (8baf0 <main+0x1194>)
   8b9ce:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b9d0:	79fb      	ldrb	r3, [r7, #7]
   8b9d2:	2b00      	cmp	r3, #0
   8b9d4:	d176      	bne.n	8bac4 <main+0x1168>
							{
								Cl_MacState = MAC_DPREP;
   8b9d6:	4b47      	ldr	r3, [pc, #284]	; (8baf4 <main+0x1198>)
   8b9d8:	220b      	movs	r2, #11
   8b9da:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8b9dc:	e072      	b.n	8bac4 <main+0x1168>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b9de:	4b42      	ldr	r3, [pc, #264]	; (8bae8 <main+0x118c>)
   8b9e0:	781b      	ldrb	r3, [r3, #0]
   8b9e2:	4618      	mov	r0, r3
   8b9e4:	4b44      	ldr	r3, [pc, #272]	; (8baf8 <main+0x119c>)
   8b9e6:	4798      	blx	r3
   8b9e8:	4603      	mov	r3, r0
   8b9ea:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b9ec:	79fb      	ldrb	r3, [r7, #7]
   8b9ee:	2b00      	cmp	r3, #0
   8b9f0:	d001      	beq.n	8b9f6 <main+0x109a>
   8b9f2:	4b3f      	ldr	r3, [pc, #252]	; (8baf0 <main+0x1194>)
   8b9f4:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b9f6:	79fb      	ldrb	r3, [r7, #7]
   8b9f8:	2b00      	cmp	r3, #0
   8b9fa:	d166      	bne.n	8baca <main+0x116e>
							{
								Cl_MacState = MAC_DPREP;
   8b9fc:	4b3d      	ldr	r3, [pc, #244]	; (8baf4 <main+0x1198>)
   8b9fe:	220b      	movs	r2, #11
   8ba00:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8ba02:	e062      	b.n	8baca <main+0x116e>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ba04:	4b38      	ldr	r3, [pc, #224]	; (8bae8 <main+0x118c>)
   8ba06:	781b      	ldrb	r3, [r3, #0]
   8ba08:	4618      	mov	r0, r3
   8ba0a:	4b3b      	ldr	r3, [pc, #236]	; (8baf8 <main+0x119c>)
   8ba0c:	4798      	blx	r3
   8ba0e:	4603      	mov	r3, r0
   8ba10:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ba12:	79fb      	ldrb	r3, [r7, #7]
   8ba14:	2b00      	cmp	r3, #0
   8ba16:	d001      	beq.n	8ba1c <main+0x10c0>
   8ba18:	4b35      	ldr	r3, [pc, #212]	; (8baf0 <main+0x1194>)
   8ba1a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ba1c:	79fb      	ldrb	r3, [r7, #7]
   8ba1e:	2b00      	cmp	r3, #0
   8ba20:	d156      	bne.n	8bad0 <main+0x1174>
							{
								Cl_MacState = MAC_DPREP;
   8ba22:	4b34      	ldr	r3, [pc, #208]	; (8baf4 <main+0x1198>)
   8ba24:	220b      	movs	r2, #11
   8ba26:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8ba28:	e052      	b.n	8bad0 <main+0x1174>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ba2a:	4b2f      	ldr	r3, [pc, #188]	; (8bae8 <main+0x118c>)
   8ba2c:	781b      	ldrb	r3, [r3, #0]
   8ba2e:	4618      	mov	r0, r3
   8ba30:	4b31      	ldr	r3, [pc, #196]	; (8baf8 <main+0x119c>)
   8ba32:	4798      	blx	r3
   8ba34:	4603      	mov	r3, r0
   8ba36:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ba38:	79fb      	ldrb	r3, [r7, #7]
   8ba3a:	2b00      	cmp	r3, #0
   8ba3c:	d001      	beq.n	8ba42 <main+0x10e6>
   8ba3e:	4b2c      	ldr	r3, [pc, #176]	; (8baf0 <main+0x1194>)
   8ba40:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ba42:	79fb      	ldrb	r3, [r7, #7]
   8ba44:	2b00      	cmp	r3, #0
   8ba46:	d102      	bne.n	8ba4e <main+0x10f2>
							{
								Cl_MacState = MAC_DPREP;
   8ba48:	4b2a      	ldr	r3, [pc, #168]	; (8baf4 <main+0x1198>)
   8ba4a:	220b      	movs	r2, #11
   8ba4c:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8ba4e:	4b29      	ldr	r3, [pc, #164]	; (8baf4 <main+0x1198>)
   8ba50:	220c      	movs	r2, #12
   8ba52:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8ba54:	2201      	movs	r2, #1
   8ba56:	210c      	movs	r1, #12
   8ba58:	2045      	movs	r0, #69	; 0x45
   8ba5a:	4b28      	ldr	r3, [pc, #160]	; (8bafc <main+0x11a0>)
   8ba5c:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8ba5e:	79fb      	ldrb	r3, [r7, #7]
   8ba60:	2b00      	cmp	r3, #0
   8ba62:	d038      	beq.n	8bad6 <main+0x117a>
   8ba64:	4b22      	ldr	r3, [pc, #136]	; (8baf0 <main+0x1194>)
   8ba66:	4798      	blx	r3
						
						break;
   8ba68:	e035      	b.n	8bad6 <main+0x117a>
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ba6a:	4b1f      	ldr	r3, [pc, #124]	; (8bae8 <main+0x118c>)
   8ba6c:	781b      	ldrb	r3, [r3, #0]
   8ba6e:	4618      	mov	r0, r3
   8ba70:	4b21      	ldr	r3, [pc, #132]	; (8baf8 <main+0x119c>)
   8ba72:	4798      	blx	r3
   8ba74:	4603      	mov	r3, r0
   8ba76:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ba78:	79fb      	ldrb	r3, [r7, #7]
   8ba7a:	2b00      	cmp	r3, #0
   8ba7c:	d001      	beq.n	8ba82 <main+0x1126>
   8ba7e:	4b1c      	ldr	r3, [pc, #112]	; (8baf0 <main+0x1194>)
   8ba80:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8ba82:	79fb      	ldrb	r3, [r7, #7]
   8ba84:	2b00      	cmp	r3, #0
   8ba86:	d129      	bne.n	8badc <main+0x1180>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8ba88:	4b1a      	ldr	r3, [pc, #104]	; (8baf4 <main+0x1198>)
   8ba8a:	220e      	movs	r2, #14
   8ba8c:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8ba8e:	2201      	movs	r2, #1
   8ba90:	210e      	movs	r1, #14
   8ba92:	2045      	movs	r0, #69	; 0x45
   8ba94:	4b19      	ldr	r3, [pc, #100]	; (8bafc <main+0x11a0>)
   8ba96:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8ba98:	79fb      	ldrb	r3, [r7, #7]
   8ba9a:	2b00      	cmp	r3, #0
   8ba9c:	d01e      	beq.n	8badc <main+0x1180>
   8ba9e:	4b14      	ldr	r3, [pc, #80]	; (8baf0 <main+0x1194>)
   8baa0:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8baa2:	e01b      	b.n	8badc <main+0x1180>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8baa4:	4b10      	ldr	r3, [pc, #64]	; (8bae8 <main+0x118c>)
   8baa6:	781b      	ldrb	r3, [r3, #0]
   8baa8:	4618      	mov	r0, r3
   8baaa:	4b13      	ldr	r3, [pc, #76]	; (8baf8 <main+0x119c>)
   8baac:	4798      	blx	r3
   8baae:	4603      	mov	r3, r0
   8bab0:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bab2:	79fb      	ldrb	r3, [r7, #7]
   8bab4:	2b00      	cmp	r3, #0
   8bab6:	d014      	beq.n	8bae2 <main+0x1186>
   8bab8:	4b0d      	ldr	r3, [pc, #52]	; (8baf0 <main+0x1194>)
   8baba:	4798      	blx	r3



						break;
   8babc:	e011      	b.n	8bae2 <main+0x1186>

						default: break;
   8babe:	bf00      	nop
   8bac0:	f000 bd08 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}
							
						break;
   8bac4:	bf00      	nop
   8bac6:	f000 bd05 	b.w	8c4d4 <main+0x1b78>
							}
							else
							{
								// handle error
							}
						break;
   8baca:	bf00      	nop
   8bacc:	f000 bd02 	b.w	8c4d4 <main+0x1b78>
							}
							else
							{
								// handle error
							}
						break;
   8bad0:	bf00      	nop
   8bad2:	f000 bcff 	b.w	8c4d4 <main+0x1b78>
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
						
						break;
   8bad6:	bf00      	nop
   8bad8:	f000 bcfc 	b.w	8c4d4 <main+0x1b78>
						}
						else
						{
							// handle error
						}
						break;
   8badc:	bf00      	nop
   8bade:	f000 bcf9 	b.w	8c4d4 <main+0x1b78>
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);



						break;
   8bae2:	bf00      	nop

						default: break;
					}
					break;
   8bae4:	f000 bcf6 	b.w	8c4d4 <main+0x1b78>
   8bae8:	2007212e 	.word	0x2007212e
   8baec:	0009e571 	.word	0x0009e571
   8baf0:	000893e9 	.word	0x000893e9
   8baf4:	20070474 	.word	0x20070474
   8baf8:	0009aa31 	.word	0x0009aa31
   8bafc:	00098601 	.word	0x00098601
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8bb00:	4bd4      	ldr	r3, [pc, #848]	; (8be54 <main+0x14f8>)
   8bb02:	781b      	ldrb	r3, [r3, #0]
   8bb04:	3b0a      	subs	r3, #10
   8bb06:	2b42      	cmp	r3, #66	; 0x42
   8bb08:	f200 80de 	bhi.w	8bcc8 <main+0x136c>
   8bb0c:	a201      	add	r2, pc, #4	; (adr r2, 8bb14 <main+0x11b8>)
   8bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb12:	bf00      	nop
   8bb14:	0008bc21 	.word	0x0008bc21
   8bb18:	0008bc21 	.word	0x0008bc21
   8bb1c:	0008bc21 	.word	0x0008bc21
   8bb20:	0008bcc9 	.word	0x0008bcc9
   8bb24:	0008bcc9 	.word	0x0008bcc9
   8bb28:	0008bc3b 	.word	0x0008bc3b
   8bb2c:	0008bcc9 	.word	0x0008bcc9
   8bb30:	0008bc21 	.word	0x0008bc21
   8bb34:	0008bc21 	.word	0x0008bc21
   8bb38:	0008bc21 	.word	0x0008bc21
   8bb3c:	0008bc21 	.word	0x0008bc21
   8bb40:	0008bcc9 	.word	0x0008bcc9
   8bb44:	0008bc21 	.word	0x0008bc21
   8bb48:	0008bcc9 	.word	0x0008bcc9
   8bb4c:	0008bcc9 	.word	0x0008bcc9
   8bb50:	0008bcc9 	.word	0x0008bcc9
   8bb54:	0008bcc9 	.word	0x0008bcc9
   8bb58:	0008bcc9 	.word	0x0008bcc9
   8bb5c:	0008bcc9 	.word	0x0008bcc9
   8bb60:	0008bcc9 	.word	0x0008bcc9
   8bb64:	0008bcc9 	.word	0x0008bcc9
   8bb68:	0008bcc9 	.word	0x0008bcc9
   8bb6c:	0008bcc9 	.word	0x0008bcc9
   8bb70:	0008bcc9 	.word	0x0008bcc9
   8bb74:	0008bcc9 	.word	0x0008bcc9
   8bb78:	0008bcc9 	.word	0x0008bcc9
   8bb7c:	0008bcc9 	.word	0x0008bcc9
   8bb80:	0008bcc9 	.word	0x0008bcc9
   8bb84:	0008bc21 	.word	0x0008bc21
   8bb88:	0008bc21 	.word	0x0008bc21
   8bb8c:	0008bc21 	.word	0x0008bc21
   8bb90:	0008bcc9 	.word	0x0008bcc9
   8bb94:	0008bcc9 	.word	0x0008bcc9
   8bb98:	0008bcc9 	.word	0x0008bcc9
   8bb9c:	0008bcc9 	.word	0x0008bcc9
   8bba0:	0008bc21 	.word	0x0008bc21
   8bba4:	0008bc21 	.word	0x0008bc21
   8bba8:	0008bcc9 	.word	0x0008bcc9
   8bbac:	0008bcc9 	.word	0x0008bcc9
   8bbb0:	0008bcc9 	.word	0x0008bcc9
   8bbb4:	0008bcc9 	.word	0x0008bcc9
   8bbb8:	0008bcc9 	.word	0x0008bcc9
   8bbbc:	0008bcc9 	.word	0x0008bcc9
   8bbc0:	0008bcc9 	.word	0x0008bcc9
   8bbc4:	0008bcc9 	.word	0x0008bcc9
   8bbc8:	0008bcc9 	.word	0x0008bcc9
   8bbcc:	0008bcc9 	.word	0x0008bcc9
   8bbd0:	0008bcc9 	.word	0x0008bcc9
   8bbd4:	0008bc21 	.word	0x0008bc21
   8bbd8:	0008bc21 	.word	0x0008bc21
   8bbdc:	0008bc21 	.word	0x0008bc21
   8bbe0:	0008bc21 	.word	0x0008bc21
   8bbe4:	0008bcc9 	.word	0x0008bcc9
   8bbe8:	0008bcc9 	.word	0x0008bcc9
   8bbec:	0008bcc9 	.word	0x0008bcc9
   8bbf0:	0008bcc9 	.word	0x0008bcc9
   8bbf4:	0008bcc9 	.word	0x0008bcc9
   8bbf8:	0008bcc9 	.word	0x0008bcc9
   8bbfc:	0008bcc9 	.word	0x0008bcc9
   8bc00:	0008bcc9 	.word	0x0008bcc9
   8bc04:	0008bcc9 	.word	0x0008bcc9
   8bc08:	0008bcc9 	.word	0x0008bcc9
   8bc0c:	0008bcc9 	.word	0x0008bcc9
   8bc10:	0008bc75 	.word	0x0008bc75
   8bc14:	0008bcc9 	.word	0x0008bcc9
   8bc18:	0008bcc9 	.word	0x0008bcc9
   8bc1c:	0008bc8f 	.word	0x0008bc8f
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc20:	4b8c      	ldr	r3, [pc, #560]	; (8be54 <main+0x14f8>)
   8bc22:	781b      	ldrb	r3, [r3, #0]
   8bc24:	4618      	mov	r0, r3
   8bc26:	4b8c      	ldr	r3, [pc, #560]	; (8be58 <main+0x14fc>)
   8bc28:	4798      	blx	r3
   8bc2a:	4603      	mov	r3, r0
   8bc2c:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc2e:	79fb      	ldrb	r3, [r7, #7]
   8bc30:	2b00      	cmp	r3, #0
   8bc32:	d04c      	beq.n	8bcce <main+0x1372>
   8bc34:	4b89      	ldr	r3, [pc, #548]	; (8be5c <main+0x1500>)
   8bc36:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8bc38:	e049      	b.n	8bcce <main+0x1372>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc3a:	4b86      	ldr	r3, [pc, #536]	; (8be54 <main+0x14f8>)
   8bc3c:	781b      	ldrb	r3, [r3, #0]
   8bc3e:	4618      	mov	r0, r3
   8bc40:	4b85      	ldr	r3, [pc, #532]	; (8be58 <main+0x14fc>)
   8bc42:	4798      	blx	r3
   8bc44:	4603      	mov	r3, r0
   8bc46:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc48:	79fb      	ldrb	r3, [r7, #7]
   8bc4a:	2b00      	cmp	r3, #0
   8bc4c:	d001      	beq.n	8bc52 <main+0x12f6>
   8bc4e:	4b83      	ldr	r3, [pc, #524]	; (8be5c <main+0x1500>)
   8bc50:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8bc52:	79fb      	ldrb	r3, [r7, #7]
   8bc54:	2b00      	cmp	r3, #0
   8bc56:	d13d      	bne.n	8bcd4 <main+0x1378>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8bc58:	4b81      	ldr	r3, [pc, #516]	; (8be60 <main+0x1504>)
   8bc5a:	220c      	movs	r2, #12
   8bc5c:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8bc5e:	2201      	movs	r2, #1
   8bc60:	210c      	movs	r1, #12
   8bc62:	2045      	movs	r0, #69	; 0x45
   8bc64:	4b7f      	ldr	r3, [pc, #508]	; (8be64 <main+0x1508>)
   8bc66:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8bc68:	79fb      	ldrb	r3, [r7, #7]
   8bc6a:	2b00      	cmp	r3, #0
   8bc6c:	d032      	beq.n	8bcd4 <main+0x1378>
   8bc6e:	4b7b      	ldr	r3, [pc, #492]	; (8be5c <main+0x1500>)
   8bc70:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8bc72:	e02f      	b.n	8bcd4 <main+0x1378>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc74:	4b77      	ldr	r3, [pc, #476]	; (8be54 <main+0x14f8>)
   8bc76:	781b      	ldrb	r3, [r3, #0]
   8bc78:	4618      	mov	r0, r3
   8bc7a:	4b77      	ldr	r3, [pc, #476]	; (8be58 <main+0x14fc>)
   8bc7c:	4798      	blx	r3
   8bc7e:	4603      	mov	r3, r0
   8bc80:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc82:	79fb      	ldrb	r3, [r7, #7]
   8bc84:	2b00      	cmp	r3, #0
   8bc86:	d027      	beq.n	8bcd8 <main+0x137c>
   8bc88:	4b74      	ldr	r3, [pc, #464]	; (8be5c <main+0x1500>)
   8bc8a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8bc8c:	e024      	b.n	8bcd8 <main+0x137c>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc8e:	4b71      	ldr	r3, [pc, #452]	; (8be54 <main+0x14f8>)
   8bc90:	781b      	ldrb	r3, [r3, #0]
   8bc92:	4618      	mov	r0, r3
   8bc94:	4b70      	ldr	r3, [pc, #448]	; (8be58 <main+0x14fc>)
   8bc96:	4798      	blx	r3
   8bc98:	4603      	mov	r3, r0
   8bc9a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc9c:	79fb      	ldrb	r3, [r7, #7]
   8bc9e:	2b00      	cmp	r3, #0
   8bca0:	d001      	beq.n	8bca6 <main+0x134a>
   8bca2:	4b6e      	ldr	r3, [pc, #440]	; (8be5c <main+0x1500>)
   8bca4:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8bca6:	79fb      	ldrb	r3, [r7, #7]
   8bca8:	2b00      	cmp	r3, #0
   8bcaa:	d117      	bne.n	8bcdc <main+0x1380>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8bcac:	4b6c      	ldr	r3, [pc, #432]	; (8be60 <main+0x1504>)
   8bcae:	220e      	movs	r2, #14
   8bcb0:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8bcb2:	2201      	movs	r2, #1
   8bcb4:	210e      	movs	r1, #14
   8bcb6:	2045      	movs	r0, #69	; 0x45
   8bcb8:	4b6a      	ldr	r3, [pc, #424]	; (8be64 <main+0x1508>)
   8bcba:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bcbc:	79fb      	ldrb	r3, [r7, #7]
   8bcbe:	2b00      	cmp	r3, #0
   8bcc0:	d00c      	beq.n	8bcdc <main+0x1380>
   8bcc2:	4b66      	ldr	r3, [pc, #408]	; (8be5c <main+0x1500>)
   8bcc4:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8bcc6:	e009      	b.n	8bcdc <main+0x1380>
					

						default: break;
   8bcc8:	bf00      	nop
   8bcca:	f000 bc03 	b.w	8c4d4 <main+0x1b78>
						ASSERT_ERROR(Cl_MacRetval);
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8bcce:	bf00      	nop
   8bcd0:	f000 bc00 	b.w	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}

						break;
   8bcd4:	bf00      	nop
   8bcd6:	e3fd      	b.n	8c4d4 <main+0x1b78>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8bcd8:	bf00      	nop
   8bcda:	e3fb      	b.n	8c4d4 <main+0x1b78>
							else
							{
								// handle error
							}

						break;
   8bcdc:	bf00      	nop
					

						default: break;
					}
					break;
   8bcde:	e3f9      	b.n	8c4d4 <main+0x1b78>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8bce0:	4b5c      	ldr	r3, [pc, #368]	; (8be54 <main+0x14f8>)
   8bce2:	781b      	ldrb	r3, [r3, #0]
   8bce4:	2b07      	cmp	r3, #7
   8bce6:	d002      	beq.n	8bcee <main+0x1392>
   8bce8:	2b09      	cmp	r3, #9
   8bcea:	d002      	beq.n	8bcf2 <main+0x1396>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8bcec:	e002      	b.n	8bcf4 <main+0x1398>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8bcee:	bf00      	nop
   8bcf0:	e3f0      	b.n	8c4d4 <main+0x1b78>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8bcf2:	bf00      	nop
						default: break;
					}
					break;
   8bcf4:	e3ee      	b.n	8c4d4 <main+0x1b78>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8bcf6:	4b57      	ldr	r3, [pc, #348]	; (8be54 <main+0x14f8>)
   8bcf8:	781b      	ldrb	r3, [r3, #0]
   8bcfa:	3b0a      	subs	r3, #10
   8bcfc:	2b4b      	cmp	r3, #75	; 0x4b
   8bcfe:	f200 8106 	bhi.w	8bf0e <main+0x15b2>
   8bd02:	a201      	add	r2, pc, #4	; (adr r2, 8bd08 <main+0x13ac>)
   8bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bd08:	0008be39 	.word	0x0008be39
   8bd0c:	0008be39 	.word	0x0008be39
   8bd10:	0008be39 	.word	0x0008be39
   8bd14:	0008bf0f 	.word	0x0008bf0f
   8bd18:	0008bf0f 	.word	0x0008bf0f
   8bd1c:	0008bf0f 	.word	0x0008bf0f
   8bd20:	0008bf0f 	.word	0x0008bf0f
   8bd24:	0008bf0f 	.word	0x0008bf0f
   8bd28:	0008bf0f 	.word	0x0008bf0f
   8bd2c:	0008bf0f 	.word	0x0008bf0f
   8bd30:	0008bf0f 	.word	0x0008bf0f
   8bd34:	0008be39 	.word	0x0008be39
   8bd38:	0008bf0f 	.word	0x0008bf0f
   8bd3c:	0008be69 	.word	0x0008be69
   8bd40:	0008bf0f 	.word	0x0008bf0f
   8bd44:	0008bf0f 	.word	0x0008bf0f
   8bd48:	0008be39 	.word	0x0008be39
   8bd4c:	0008be39 	.word	0x0008be39
   8bd50:	0008be39 	.word	0x0008be39
   8bd54:	0008bf0f 	.word	0x0008bf0f
   8bd58:	0008bf0f 	.word	0x0008bf0f
   8bd5c:	0008bf0f 	.word	0x0008bf0f
   8bd60:	0008bf0f 	.word	0x0008bf0f
   8bd64:	0008be39 	.word	0x0008be39
   8bd68:	0008bf0f 	.word	0x0008bf0f
   8bd6c:	0008bf0f 	.word	0x0008bf0f
   8bd70:	0008bf0f 	.word	0x0008bf0f
   8bd74:	0008bf0f 	.word	0x0008bf0f
   8bd78:	0008bf0f 	.word	0x0008bf0f
   8bd7c:	0008be39 	.word	0x0008be39
   8bd80:	0008be39 	.word	0x0008be39
   8bd84:	0008bf0f 	.word	0x0008bf0f
   8bd88:	0008bf0f 	.word	0x0008bf0f
   8bd8c:	0008bf0f 	.word	0x0008bf0f
   8bd90:	0008bf0f 	.word	0x0008bf0f
   8bd94:	0008be39 	.word	0x0008be39
   8bd98:	0008be39 	.word	0x0008be39
   8bd9c:	0008bf0f 	.word	0x0008bf0f
   8bda0:	0008bf0f 	.word	0x0008bf0f
   8bda4:	0008bf0f 	.word	0x0008bf0f
   8bda8:	0008bf0f 	.word	0x0008bf0f
   8bdac:	0008bf0f 	.word	0x0008bf0f
   8bdb0:	0008bf0f 	.word	0x0008bf0f
   8bdb4:	0008bf0f 	.word	0x0008bf0f
   8bdb8:	0008bf0f 	.word	0x0008bf0f
   8bdbc:	0008bf0f 	.word	0x0008bf0f
   8bdc0:	0008be39 	.word	0x0008be39
   8bdc4:	0008bf0f 	.word	0x0008bf0f
   8bdc8:	0008be39 	.word	0x0008be39
   8bdcc:	0008be39 	.word	0x0008be39
   8bdd0:	0008bf0f 	.word	0x0008bf0f
   8bdd4:	0008bf0f 	.word	0x0008bf0f
   8bdd8:	0008bf0f 	.word	0x0008bf0f
   8bddc:	0008bf0f 	.word	0x0008bf0f
   8bde0:	0008bf0f 	.word	0x0008bf0f
   8bde4:	0008bf0f 	.word	0x0008bf0f
   8bde8:	0008bf0f 	.word	0x0008bf0f
   8bdec:	0008bf0f 	.word	0x0008bf0f
   8bdf0:	0008bf0f 	.word	0x0008bf0f
   8bdf4:	0008bf0f 	.word	0x0008bf0f
   8bdf8:	0008bf0f 	.word	0x0008bf0f
   8bdfc:	0008bf0f 	.word	0x0008bf0f
   8be00:	0008bf0f 	.word	0x0008bf0f
   8be04:	0008bf0f 	.word	0x0008bf0f
   8be08:	0008bf0f 	.word	0x0008bf0f
   8be0c:	0008bf0f 	.word	0x0008bf0f
   8be10:	0008bf0f 	.word	0x0008bf0f
   8be14:	0008bf0f 	.word	0x0008bf0f
   8be18:	0008bf0f 	.word	0x0008bf0f
   8be1c:	0008bf0f 	.word	0x0008bf0f
   8be20:	0008bf0f 	.word	0x0008bf0f
   8be24:	0008bf0f 	.word	0x0008bf0f
   8be28:	0008bf0f 	.word	0x0008bf0f
   8be2c:	0008bf0f 	.word	0x0008bf0f
   8be30:	0008bf0f 	.word	0x0008bf0f
   8be34:	0008be39 	.word	0x0008be39
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8be38:	4b06      	ldrne	r3, [pc, #24]	; (8be54 <main+0x14f8>)
   8be3a:	781b      	ldrb	r3, [r3, #0]
   8be3c:	4618      	mov	r0, r3
   8be3e:	4b06      	ldr	r3, [pc, #24]	; (8be58 <main+0x14fc>)
   8be40:	4798      	blx	r3
   8be42:	4603      	mov	r3, r0
   8be44:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8be46:	79fb      	ldrb	r3, [r7, #7]
   8be48:	2b00      	cmp	r3, #0
   8be4a:	d062      	beq.n	8bf12 <main+0x15b6>
   8be4c:	4b03      	ldr	r3, [pc, #12]	; (8be5c <main+0x1500>)
   8be4e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8be50:	e05f      	b.n	8bf12 <main+0x15b6>
   8be52:	bf00      	nop
   8be54:	2007212e 	.word	0x2007212e
   8be58:	0009aa31 	.word	0x0009aa31
   8be5c:	000893e9 	.word	0x000893e9
   8be60:	20070474 	.word	0x20070474
   8be64:	00098601 	.word	0x00098601
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8be68:	4bae      	ldr	r3, [pc, #696]	; (8c124 <main+0x17c8>)
   8be6a:	781b      	ldrb	r3, [r3, #0]
   8be6c:	4618      	mov	r0, r3
   8be6e:	4bae      	ldr	r3, [pc, #696]	; (8c128 <main+0x17cc>)
   8be70:	4798      	blx	r3
   8be72:	4603      	mov	r3, r0
   8be74:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8be76:	79fb      	ldrb	r3, [r7, #7]
   8be78:	2b00      	cmp	r3, #0
   8be7a:	d001      	beq.n	8be80 <main+0x1524>
   8be7c:	4bab      	ldr	r3, [pc, #684]	; (8c12c <main+0x17d0>)
   8be7e:	4798      	blx	r3
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8be80:	79fb      	ldrb	r3, [r7, #7]
   8be82:	2b00      	cmp	r3, #0
   8be84:	d002      	beq.n	8be8c <main+0x1530>
   8be86:	79fb      	ldrb	r3, [r7, #7]
   8be88:	2b03      	cmp	r3, #3
   8be8a:	d10b      	bne.n	8bea4 <main+0x1548>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8be8c:	4ba5      	ldr	r3, [pc, #660]	; (8c124 <main+0x17c8>)
   8be8e:	781b      	ldrb	r3, [r3, #0]
   8be90:	4618      	mov	r0, r3
   8be92:	4ba7      	ldr	r3, [pc, #668]	; (8c130 <main+0x17d4>)
   8be94:	4798      	blx	r3
   8be96:	4603      	mov	r3, r0
   8be98:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8be9a:	79fb      	ldrb	r3, [r7, #7]
   8be9c:	2b00      	cmp	r3, #0
   8be9e:	d001      	beq.n	8bea4 <main+0x1548>
   8bea0:	4ba2      	ldr	r3, [pc, #648]	; (8c12c <main+0x17d0>)
   8bea2:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8bea4:	79fb      	ldrb	r3, [r7, #7]
   8bea6:	2b00      	cmp	r3, #0
   8bea8:	d002      	beq.n	8beb0 <main+0x1554>
   8beaa:	79fb      	ldrb	r3, [r7, #7]
   8beac:	2b03      	cmp	r3, #3
   8beae:	d10b      	bne.n	8bec8 <main+0x156c>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8beb0:	4b9c      	ldr	r3, [pc, #624]	; (8c124 <main+0x17c8>)
   8beb2:	781b      	ldrb	r3, [r3, #0]
   8beb4:	4618      	mov	r0, r3
   8beb6:	4b9f      	ldr	r3, [pc, #636]	; (8c134 <main+0x17d8>)
   8beb8:	4798      	blx	r3
   8beba:	4603      	mov	r3, r0
   8bebc:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8bebe:	79fb      	ldrb	r3, [r7, #7]
   8bec0:	2b00      	cmp	r3, #0
   8bec2:	d001      	beq.n	8bec8 <main+0x156c>
   8bec4:	4b99      	ldr	r3, [pc, #612]	; (8c12c <main+0x17d0>)
   8bec6:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8bec8:	79fb      	ldrb	r3, [r7, #7]
   8beca:	2b00      	cmp	r3, #0
   8becc:	d002      	beq.n	8bed4 <main+0x1578>
   8bece:	79fb      	ldrb	r3, [r7, #7]
   8bed0:	2b03      	cmp	r3, #3
   8bed2:	d10b      	bne.n	8beec <main+0x1590>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8bed4:	4b93      	ldr	r3, [pc, #588]	; (8c124 <main+0x17c8>)
   8bed6:	781b      	ldrb	r3, [r3, #0]
   8bed8:	4618      	mov	r0, r3
   8beda:	4b97      	ldr	r3, [pc, #604]	; (8c138 <main+0x17dc>)
   8bedc:	4798      	blx	r3
   8bede:	4603      	mov	r3, r0
   8bee0:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8bee2:	79fb      	ldrb	r3, [r7, #7]
   8bee4:	2b00      	cmp	r3, #0
   8bee6:	d001      	beq.n	8beec <main+0x1590>
   8bee8:	4b90      	ldr	r3, [pc, #576]	; (8c12c <main+0x17d0>)
   8beea:	4798      	blx	r3
							else
							{
								//handle error
							}

						if(Cl_MacRetval == CL_OK)
   8beec:	79fb      	ldrb	r3, [r7, #7]
   8beee:	2b00      	cmp	r3, #0
   8bef0:	d111      	bne.n	8bf16 <main+0x15ba>
						{
							Cl_MacState = MAC_DIALYSIS;
   8bef2:	4b92      	ldr	r3, [pc, #584]	; (8c13c <main+0x17e0>)
   8bef4:	220f      	movs	r2, #15
   8bef6:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8bef8:	2201      	movs	r2, #1
   8befa:	210f      	movs	r1, #15
   8befc:	2045      	movs	r0, #69	; 0x45
   8befe:	4b90      	ldr	r3, [pc, #576]	; (8c140 <main+0x17e4>)
   8bf00:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bf02:	79fb      	ldrb	r3, [r7, #7]
   8bf04:	2b00      	cmp	r3, #0
   8bf06:	d006      	beq.n	8bf16 <main+0x15ba>
   8bf08:	4b88      	ldr	r3, [pc, #544]	; (8c12c <main+0x17d0>)
   8bf0a:	4798      	blx	r3
						}
						break;
   8bf0c:	e003      	b.n	8bf16 <main+0x15ba>
						default: break;
   8bf0e:	bf00      	nop
   8bf10:	e2e0      	b.n	8c4d4 <main+0x1b78>
						ASSERT_ERROR(Cl_MacRetval);
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8bf12:	bf00      	nop
   8bf14:	e2de      	b.n	8c4d4 <main+0x1b78>
						{
							Cl_MacState = MAC_DIALYSIS;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8bf16:	bf00      	nop
						default: break;
					}
					break;
   8bf18:	e2dc      	b.n	8c4d4 <main+0x1b78>
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8bf1a:	4b82      	ldr	r3, [pc, #520]	; (8c124 <main+0x17c8>)
   8bf1c:	781b      	ldrb	r3, [r3, #0]
   8bf1e:	3b07      	subs	r3, #7
   8bf20:	2b49      	cmp	r3, #73	; 0x49
   8bf22:	f200 813d 	bhi.w	8c1a0 <main+0x1844>
   8bf26:	a201      	add	r2, pc, #4	; (adr r2, 8bf2c <main+0x15d0>)
   8bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bf2c:	0008c0cb 	.word	0x0008c0cb
   8bf30:	0008c1a1 	.word	0x0008c1a1
   8bf34:	0008c1a1 	.word	0x0008c1a1
   8bf38:	0008c055 	.word	0x0008c055
   8bf3c:	0008c055 	.word	0x0008c055
   8bf40:	0008c055 	.word	0x0008c055
   8bf44:	0008c1a1 	.word	0x0008c1a1
   8bf48:	0008c1a1 	.word	0x0008c1a1
   8bf4c:	0008c1a1 	.word	0x0008c1a1
   8bf50:	0008c1a1 	.word	0x0008c1a1
   8bf54:	0008c1a1 	.word	0x0008c1a1
   8bf58:	0008c1a1 	.word	0x0008c1a1
   8bf5c:	0008c1a1 	.word	0x0008c1a1
   8bf60:	0008c1a1 	.word	0x0008c1a1
   8bf64:	0008c055 	.word	0x0008c055
   8bf68:	0008c1a1 	.word	0x0008c1a1
   8bf6c:	0008c1a1 	.word	0x0008c1a1
   8bf70:	0008c0b1 	.word	0x0008c0b1
   8bf74:	0008c075 	.word	0x0008c075
   8bf78:	0008c075 	.word	0x0008c075
   8bf7c:	0008c075 	.word	0x0008c075
   8bf80:	0008c1a1 	.word	0x0008c1a1
   8bf84:	0008c1a1 	.word	0x0008c1a1
   8bf88:	0008c1a1 	.word	0x0008c1a1
   8bf8c:	0008c1a1 	.word	0x0008c1a1
   8bf90:	0008c1a1 	.word	0x0008c1a1
   8bf94:	0008c1a1 	.word	0x0008c1a1
   8bf98:	0008c1a1 	.word	0x0008c1a1
   8bf9c:	0008c1a1 	.word	0x0008c1a1
   8bfa0:	0008c1a1 	.word	0x0008c1a1
   8bfa4:	0008c1a1 	.word	0x0008c1a1
   8bfa8:	0008c1a1 	.word	0x0008c1a1
   8bfac:	0008c055 	.word	0x0008c055
   8bfb0:	0008c055 	.word	0x0008c055
   8bfb4:	0008c055 	.word	0x0008c055
   8bfb8:	0008c1a1 	.word	0x0008c1a1
   8bfbc:	0008c1a1 	.word	0x0008c1a1
   8bfc0:	0008c1a1 	.word	0x0008c1a1
   8bfc4:	0008c055 	.word	0x0008c055
   8bfc8:	0008c055 	.word	0x0008c055
   8bfcc:	0008c1a1 	.word	0x0008c1a1
   8bfd0:	0008c1a1 	.word	0x0008c1a1
   8bfd4:	0008c1a1 	.word	0x0008c1a1
   8bfd8:	0008c1a1 	.word	0x0008c1a1
   8bfdc:	0008c1a1 	.word	0x0008c1a1
   8bfe0:	0008c1a1 	.word	0x0008c1a1
   8bfe4:	0008c1a1 	.word	0x0008c1a1
   8bfe8:	0008c1a1 	.word	0x0008c1a1
   8bfec:	0008c1a1 	.word	0x0008c1a1
   8bff0:	0008c055 	.word	0x0008c055
   8bff4:	0008c1a1 	.word	0x0008c1a1
   8bff8:	0008c055 	.word	0x0008c055
   8bffc:	0008c055 	.word	0x0008c055
   8c000:	0008c055 	.word	0x0008c055
   8c004:	0008c055 	.word	0x0008c055
   8c008:	0008c1a1 	.word	0x0008c1a1
   8c00c:	0008c1a1 	.word	0x0008c1a1
   8c010:	0008c1a1 	.word	0x0008c1a1
   8c014:	0008c1a1 	.word	0x0008c1a1
   8c018:	0008c1a1 	.word	0x0008c1a1
   8c01c:	0008c1a1 	.word	0x0008c1a1
   8c020:	0008c1a1 	.word	0x0008c1a1
   8c024:	0008c1a1 	.word	0x0008c1a1
   8c028:	0008c1a1 	.word	0x0008c1a1
   8c02c:	0008c1a1 	.word	0x0008c1a1
   8c030:	0008c1a1 	.word	0x0008c1a1
   8c034:	0008c1a1 	.word	0x0008c1a1
   8c038:	0008c1a1 	.word	0x0008c1a1
   8c03c:	0008c1a1 	.word	0x0008c1a1
   8c040:	0008c1a1 	.word	0x0008c1a1
   8c044:	0008c1a1 	.word	0x0008c1a1
   8c048:	0008c1a1 	.word	0x0008c1a1
   8c04c:	0008c1a1 	.word	0x0008c1a1
   8c050:	0008c145 	.word	0x0008c145
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c054:	4b33      	ldr	r3, [pc, #204]	; (8c124 <main+0x17c8>)
   8c056:	781b      	ldrb	r3, [r3, #0]
   8c058:	4618      	mov	r0, r3
   8c05a:	4b37      	ldr	r3, [pc, #220]	; (8c138 <main+0x17dc>)
   8c05c:	4798      	blx	r3
   8c05e:	4603      	mov	r3, r0
   8c060:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c062:	79fb      	ldrb	r3, [r7, #7]
   8c064:	2b00      	cmp	r3, #0
   8c066:	d001      	beq.n	8c06c <main+0x1710>
   8c068:	4b30      	ldr	r3, [pc, #192]	; (8c12c <main+0x17d0>)
   8c06a:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8c06c:	4b2d      	ldr	r3, [pc, #180]	; (8c124 <main+0x17c8>)
   8c06e:	2200      	movs	r2, #0
   8c070:	701a      	strb	r2, [r3, #0]
						break;
   8c072:	e09c      	b.n	8c1ae <main+0x1852>
						//case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c074:	4b2b      	ldr	r3, [pc, #172]	; (8c124 <main+0x17c8>)
   8c076:	781b      	ldrb	r3, [r3, #0]
   8c078:	4618      	mov	r0, r3
   8c07a:	4b2f      	ldr	r3, [pc, #188]	; (8c138 <main+0x17dc>)
   8c07c:	4798      	blx	r3
   8c07e:	4603      	mov	r3, r0
   8c080:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c082:	79fb      	ldrb	r3, [r7, #7]
   8c084:	2b00      	cmp	r3, #0
   8c086:	d001      	beq.n	8c08c <main+0x1730>
   8c088:	4b28      	ldr	r3, [pc, #160]	; (8c12c <main+0x17d0>)
   8c08a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c08c:	79fb      	ldrb	r3, [r7, #7]
   8c08e:	2b00      	cmp	r3, #0
   8c090:	f040 8088 	bne.w	8c1a4 <main+0x1848>
							{
								Cl_MacState = MAC_SAFE_DIALYSIS;
   8c094:	4b29      	ldr	r3, [pc, #164]	; (8c13c <main+0x17e0>)
   8c096:	2210      	movs	r2, #16
   8c098:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_SAFE_DIALYSIS,1);
   8c09a:	2201      	movs	r2, #1
   8c09c:	2110      	movs	r1, #16
   8c09e:	2045      	movs	r0, #69	; 0x45
   8c0a0:	4b27      	ldr	r3, [pc, #156]	; (8c140 <main+0x17e4>)
   8c0a2:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8c0a4:	79fb      	ldrb	r3, [r7, #7]
   8c0a6:	2b00      	cmp	r3, #0
   8c0a8:	d07c      	beq.n	8c1a4 <main+0x1848>
   8c0aa:	4b20      	ldr	r3, [pc, #128]	; (8c12c <main+0x17d0>)
   8c0ac:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8c0ae:	e079      	b.n	8c1a4 <main+0x1848>
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c0b0:	4b1c      	ldr	r3, [pc, #112]	; (8c124 <main+0x17c8>)
   8c0b2:	781b      	ldrb	r3, [r3, #0]
   8c0b4:	4618      	mov	r0, r3
   8c0b6:	4b20      	ldr	r3, [pc, #128]	; (8c138 <main+0x17dc>)
   8c0b8:	4798      	blx	r3
   8c0ba:	4603      	mov	r3, r0
   8c0bc:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c0be:	79fb      	ldrb	r3, [r7, #7]
   8c0c0:	2b00      	cmp	r3, #0
   8c0c2:	d071      	beq.n	8c1a8 <main+0x184c>
   8c0c4:	4b19      	ldr	r3, [pc, #100]	; (8c12c <main+0x17d0>)
   8c0c6:	4798      	blx	r3
						break;
   8c0c8:	e06e      	b.n	8c1a8 <main+0x184c>
							// handle error
						}
						break;
						#endif
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c0ca:	4b16      	ldr	r3, [pc, #88]	; (8c124 <main+0x17c8>)
   8c0cc:	781b      	ldrb	r3, [r3, #0]
   8c0ce:	4618      	mov	r0, r3
   8c0d0:	4b15      	ldr	r3, [pc, #84]	; (8c128 <main+0x17cc>)
   8c0d2:	4798      	blx	r3
   8c0d4:	4603      	mov	r3, r0
   8c0d6:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c0d8:	79fb      	ldrb	r3, [r7, #7]
   8c0da:	2b00      	cmp	r3, #0
   8c0dc:	d001      	beq.n	8c0e2 <main+0x1786>
   8c0de:	4b13      	ldr	r3, [pc, #76]	; (8c12c <main+0x17d0>)
   8c0e0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c0e2:	79fb      	ldrb	r3, [r7, #7]
   8c0e4:	2b00      	cmp	r3, #0
   8c0e6:	d10b      	bne.n	8c100 <main+0x17a4>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c0e8:	4b0e      	ldr	r3, [pc, #56]	; (8c124 <main+0x17c8>)
   8c0ea:	781b      	ldrb	r3, [r3, #0]
   8c0ec:	4618      	mov	r0, r3
   8c0ee:	4b10      	ldr	r3, [pc, #64]	; (8c130 <main+0x17d4>)
   8c0f0:	4798      	blx	r3
   8c0f2:	4603      	mov	r3, r0
   8c0f4:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8c0f6:	79fb      	ldrb	r3, [r7, #7]
   8c0f8:	2b00      	cmp	r3, #0
   8c0fa:	d001      	beq.n	8c100 <main+0x17a4>
   8c0fc:	4b0b      	ldr	r3, [pc, #44]	; (8c12c <main+0x17d0>)
   8c0fe:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8c100:	79fb      	ldrb	r3, [r7, #7]
   8c102:	2b00      	cmp	r3, #0
   8c104:	d152      	bne.n	8c1ac <main+0x1850>
							{
								Cl_MacState = MAC_RINSE;
   8c106:	4b0d      	ldr	r3, [pc, #52]	; (8c13c <main+0x17e0>)
   8c108:	2207      	movs	r2, #7
   8c10a:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c10c:	2201      	movs	r2, #1
   8c10e:	2107      	movs	r1, #7
   8c110:	2045      	movs	r0, #69	; 0x45
   8c112:	4b0b      	ldr	r3, [pc, #44]	; (8c140 <main+0x17e4>)
   8c114:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8c116:	79fb      	ldrb	r3, [r7, #7]
   8c118:	2b00      	cmp	r3, #0
   8c11a:	d047      	beq.n	8c1ac <main+0x1850>
   8c11c:	4b03      	ldr	r3, [pc, #12]	; (8c12c <main+0x17d0>)
   8c11e:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8c120:	e044      	b.n	8c1ac <main+0x1850>
   8c122:	bf00      	nop
   8c124:	2007212e 	.word	0x2007212e
   8c128:	000a0dcd 	.word	0x000a0dcd
   8c12c:	000893e9 	.word	0x000893e9
   8c130:	0009e571 	.word	0x0009e571
   8c134:	0009aa31 	.word	0x0009aa31
   8c138:	00085039 	.word	0x00085039
   8c13c:	20070474 	.word	0x20070474
   8c140:	00098601 	.word	0x00098601
		
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c144:	4bbc      	ldr	r3, [pc, #752]	; (8c438 <main+0x1adc>)
   8c146:	781b      	ldrb	r3, [r3, #0]
   8c148:	4618      	mov	r0, r3
   8c14a:	4bbc      	ldr	r3, [pc, #752]	; (8c43c <main+0x1ae0>)
   8c14c:	4798      	blx	r3
   8c14e:	4603      	mov	r3, r0
   8c150:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c152:	79fb      	ldrb	r3, [r7, #7]
   8c154:	2b00      	cmp	r3, #0
   8c156:	d001      	beq.n	8c15c <main+0x1800>
   8c158:	4bb9      	ldr	r3, [pc, #740]	; (8c440 <main+0x1ae4>)
   8c15a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c15c:	79fb      	ldrb	r3, [r7, #7]
   8c15e:	2b00      	cmp	r3, #0
   8c160:	d11a      	bne.n	8c198 <main+0x183c>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8c162:	4bb8      	ldr	r3, [pc, #736]	; (8c444 <main+0x1ae8>)
   8c164:	4798      	blx	r3
   8c166:	4603      	mov	r3, r0
   8c168:	71fb      	strb	r3, [r7, #7]
								Cl_MacRetval = Cl_stby_init();
   8c16a:	4bb7      	ldr	r3, [pc, #732]	; (8c448 <main+0x1aec>)
   8c16c:	4798      	blx	r3
   8c16e:	4603      	mov	r3, r0
   8c170:	71fb      	strb	r3, [r7, #7]
								Cl_MacRetval = Cl_dprep_init();
   8c172:	4bb6      	ldr	r3, [pc, #728]	; (8c44c <main+0x1af0>)
   8c174:	4798      	blx	r3
   8c176:	4603      	mov	r3, r0
   8c178:	71fb      	strb	r3, [r7, #7]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8c17a:	4bb5      	ldr	r3, [pc, #724]	; (8c450 <main+0x1af4>)
   8c17c:	2211      	movs	r2, #17
   8c17e:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
   8c180:	4bb3      	ldr	r3, [pc, #716]	; (8c450 <main+0x1af4>)
   8c182:	781b      	ldrb	r3, [r3, #0]
   8c184:	2201      	movs	r2, #1
   8c186:	4619      	mov	r1, r3
   8c188:	2045      	movs	r0, #69	; 0x45
   8c18a:	4bb2      	ldr	r3, [pc, #712]	; (8c454 <main+0x1af8>)
   8c18c:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c18e:	79fb      	ldrb	r3, [r7, #7]
   8c190:	2b00      	cmp	r3, #0
   8c192:	d001      	beq.n	8c198 <main+0x183c>
   8c194:	4baa      	ldr	r3, [pc, #680]	; (8c440 <main+0x1ae4>)
   8c196:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c198:	4ba7      	ldr	r3, [pc, #668]	; (8c438 <main+0x1adc>)
   8c19a:	2200      	movs	r2, #0
   8c19c:	701a      	strb	r2, [r3, #0]
						break;
   8c19e:	e006      	b.n	8c1ae <main+0x1852>
						default: break;
   8c1a0:	bf00      	nop
   8c1a2:	e197      	b.n	8c4d4 <main+0x1b78>
							}
							else
							{
								// handle error
							}
						break;
   8c1a4:	bf00      	nop
   8c1a6:	e195      	b.n	8c4d4 <main+0x1b78>
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8c1a8:	bf00      	nop
   8c1aa:	e193      	b.n	8c4d4 <main+0x1b78>
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8c1ac:	bf00      	nop
							}
							Cl_MacEvent = EVT_NULL;
						break;
						default: break;
					}
					break;
   8c1ae:	e191      	b.n	8c4d4 <main+0x1b78>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8c1b0:	4ba1      	ldr	r3, [pc, #644]	; (8c438 <main+0x1adc>)
   8c1b2:	781b      	ldrb	r3, [r3, #0]
   8c1b4:	3b07      	subs	r3, #7
   8c1b6:	2b21      	cmp	r3, #33	; 0x21
   8c1b8:	f200 8094 	bhi.w	8c2e4 <main+0x1988>
   8c1bc:	a201      	add	r2, pc, #4	; (adr r2, 8c1c4 <main+0x1868>)
   8c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c1c2:	bf00      	nop
   8c1c4:	0008c25d 	.word	0x0008c25d
   8c1c8:	0008c2e5 	.word	0x0008c2e5
   8c1cc:	0008c2e5 	.word	0x0008c2e5
   8c1d0:	0008c24d 	.word	0x0008c24d
   8c1d4:	0008c24d 	.word	0x0008c24d
   8c1d8:	0008c24d 	.word	0x0008c24d
   8c1dc:	0008c2e5 	.word	0x0008c2e5
   8c1e0:	0008c2e5 	.word	0x0008c2e5
   8c1e4:	0008c2e5 	.word	0x0008c2e5
   8c1e8:	0008c2e5 	.word	0x0008c2e5
   8c1ec:	0008c2e5 	.word	0x0008c2e5
   8c1f0:	0008c2e5 	.word	0x0008c2e5
   8c1f4:	0008c2e5 	.word	0x0008c2e5
   8c1f8:	0008c2e5 	.word	0x0008c2e5
   8c1fc:	0008c2e5 	.word	0x0008c2e5
   8c200:	0008c2e5 	.word	0x0008c2e5
   8c204:	0008c2e5 	.word	0x0008c2e5
   8c208:	0008c2e5 	.word	0x0008c2e5
   8c20c:	0008c2e5 	.word	0x0008c2e5
   8c210:	0008c2bf 	.word	0x0008c2bf
   8c214:	0008c2bf 	.word	0x0008c2bf
   8c218:	0008c2e5 	.word	0x0008c2e5
   8c21c:	0008c2e5 	.word	0x0008c2e5
   8c220:	0008c2e5 	.word	0x0008c2e5
   8c224:	0008c2e5 	.word	0x0008c2e5
   8c228:	0008c2e5 	.word	0x0008c2e5
   8c22c:	0008c2e5 	.word	0x0008c2e5
   8c230:	0008c2e5 	.word	0x0008c2e5
   8c234:	0008c2e5 	.word	0x0008c2e5
   8c238:	0008c2e5 	.word	0x0008c2e5
   8c23c:	0008c2e5 	.word	0x0008c2e5
   8c240:	0008c2e5 	.word	0x0008c2e5
   8c244:	0008c24d 	.word	0x0008c24d
   8c248:	0008c24d 	.word	0x0008c24d
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c24c:	4b7a      	ldr	r3, [pc, #488]	; (8c438 <main+0x1adc>)
   8c24e:	781b      	ldrb	r3, [r3, #0]
   8c250:	4618      	mov	r0, r3
   8c252:	4b81      	ldr	r3, [pc, #516]	; (8c458 <main+0x1afc>)
   8c254:	4798      	blx	r3
   8c256:	4603      	mov	r3, r0
   8c258:	71fb      	strb	r3, [r7, #7]
						break;
   8c25a:	e046      	b.n	8c2ea <main+0x198e>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c25c:	4b76      	ldr	r3, [pc, #472]	; (8c438 <main+0x1adc>)
   8c25e:	781b      	ldrb	r3, [r3, #0]
   8c260:	4618      	mov	r0, r3
   8c262:	4b7d      	ldr	r3, [pc, #500]	; (8c458 <main+0x1afc>)
   8c264:	4798      	blx	r3
   8c266:	4603      	mov	r3, r0
   8c268:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c26a:	79fb      	ldrb	r3, [r7, #7]
   8c26c:	2b00      	cmp	r3, #0
   8c26e:	d001      	beq.n	8c274 <main+0x1918>
   8c270:	4b73      	ldr	r3, [pc, #460]	; (8c440 <main+0x1ae4>)
   8c272:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c274:	79fb      	ldrb	r3, [r7, #7]
   8c276:	2b00      	cmp	r3, #0
   8c278:	d10b      	bne.n	8c292 <main+0x1936>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8c27a:	4b6f      	ldr	r3, [pc, #444]	; (8c438 <main+0x1adc>)
   8c27c:	781b      	ldrb	r3, [r3, #0]
   8c27e:	4618      	mov	r0, r3
   8c280:	4b76      	ldr	r3, [pc, #472]	; (8c45c <main+0x1b00>)
   8c282:	4798      	blx	r3
   8c284:	4603      	mov	r3, r0
   8c286:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8c288:	79fb      	ldrb	r3, [r7, #7]
   8c28a:	2b00      	cmp	r3, #0
   8c28c:	d001      	beq.n	8c292 <main+0x1936>
   8c28e:	4b6c      	ldr	r3, [pc, #432]	; (8c440 <main+0x1ae4>)
   8c290:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8c292:	79fb      	ldrb	r3, [r7, #7]
   8c294:	2b00      	cmp	r3, #0
   8c296:	d10e      	bne.n	8c2b6 <main+0x195a>
							{
								Cl_MacState = MAC_RINSE;
   8c298:	4b6d      	ldr	r3, [pc, #436]	; (8c450 <main+0x1af4>)
   8c29a:	2207      	movs	r2, #7
   8c29c:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
   8c29e:	4b6c      	ldr	r3, [pc, #432]	; (8c450 <main+0x1af4>)
   8c2a0:	781b      	ldrb	r3, [r3, #0]
   8c2a2:	2201      	movs	r2, #1
   8c2a4:	4619      	mov	r1, r3
   8c2a6:	2045      	movs	r0, #69	; 0x45
   8c2a8:	4b6a      	ldr	r3, [pc, #424]	; (8c454 <main+0x1af8>)
   8c2aa:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c2ac:	79fb      	ldrb	r3, [r7, #7]
   8c2ae:	2b00      	cmp	r3, #0
   8c2b0:	d001      	beq.n	8c2b6 <main+0x195a>
   8c2b2:	4b63      	ldr	r3, [pc, #396]	; (8c440 <main+0x1ae4>)
   8c2b4:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c2b6:	4b60      	ldr	r3, [pc, #384]	; (8c438 <main+0x1adc>)
   8c2b8:	2200      	movs	r2, #0
   8c2ba:	701a      	strb	r2, [r3, #0]
						break;
   8c2bc:	e015      	b.n	8c2ea <main+0x198e>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c2be:	4b5e      	ldr	r3, [pc, #376]	; (8c438 <main+0x1adc>)
   8c2c0:	781b      	ldrb	r3, [r3, #0]
   8c2c2:	4618      	mov	r0, r3
   8c2c4:	4b5d      	ldr	r3, [pc, #372]	; (8c43c <main+0x1ae0>)
   8c2c6:	4798      	blx	r3
   8c2c8:	4603      	mov	r3, r0
   8c2ca:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c2cc:	79fb      	ldrb	r3, [r7, #7]
   8c2ce:	2b00      	cmp	r3, #0
   8c2d0:	d001      	beq.n	8c2d6 <main+0x197a>
   8c2d2:	4b5b      	ldr	r3, [pc, #364]	; (8c440 <main+0x1ae4>)
   8c2d4:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8c2d6:	79fb      	ldrb	r3, [r7, #7]
   8c2d8:	2b00      	cmp	r3, #0
   8c2da:	d105      	bne.n	8c2e8 <main+0x198c>
								{
									Cl_MacState = MAC_DIALYSIS;
   8c2dc:	4b5c      	ldr	r3, [pc, #368]	; (8c450 <main+0x1af4>)
   8c2de:	220f      	movs	r2, #15
   8c2e0:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8c2e2:	e001      	b.n	8c2e8 <main+0x198c>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8c2e4:	bf00      	nop
   8c2e6:	e0f5      	b.n	8c4d4 <main+0x1b78>
								else
								{
									//handle error
								}
						
						break;
   8c2e8:	bf00      	nop
						}
						break;
						#endif
						default: break;
					}
					break;
   8c2ea:	e0f3      	b.n	8c4d4 <main+0x1b78>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8c2ec:	4b52      	ldr	r3, [pc, #328]	; (8c438 <main+0x1adc>)
   8c2ee:	781b      	ldrb	r3, [r3, #0]
   8c2f0:	3b07      	subs	r3, #7
   8c2f2:	2b38      	cmp	r3, #56	; 0x38
   8c2f4:	f200 80e5 	bhi.w	8c4c2 <main+0x1b66>
   8c2f8:	a201      	add	r2, pc, #4	; (adr r2, 8c300 <main+0x19a4>)
   8c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c2fe:	bf00      	nop
   8c300:	0008c465 	.word	0x0008c465
   8c304:	0008c4c3 	.word	0x0008c4c3
   8c308:	0008c4c3 	.word	0x0008c4c3
   8c30c:	0008c3e5 	.word	0x0008c3e5
   8c310:	0008c3e5 	.word	0x0008c3e5
   8c314:	0008c3e5 	.word	0x0008c3e5
   8c318:	0008c4c3 	.word	0x0008c4c3
   8c31c:	0008c4c3 	.word	0x0008c4c3
   8c320:	0008c4c3 	.word	0x0008c4c3
   8c324:	0008c4c3 	.word	0x0008c4c3
   8c328:	0008c4c3 	.word	0x0008c4c3
   8c32c:	0008c4c3 	.word	0x0008c4c3
   8c330:	0008c4c3 	.word	0x0008c4c3
   8c334:	0008c4c3 	.word	0x0008c4c3
   8c338:	0008c4c3 	.word	0x0008c4c3
   8c33c:	0008c4c3 	.word	0x0008c4c3
   8c340:	0008c4c3 	.word	0x0008c4c3
   8c344:	0008c4c3 	.word	0x0008c4c3
   8c348:	0008c4c3 	.word	0x0008c4c3
   8c34c:	0008c3e5 	.word	0x0008c3e5
   8c350:	0008c3e5 	.word	0x0008c3e5
   8c354:	0008c4c3 	.word	0x0008c4c3
   8c358:	0008c4c3 	.word	0x0008c4c3
   8c35c:	0008c4c3 	.word	0x0008c4c3
   8c360:	0008c4c3 	.word	0x0008c4c3
   8c364:	0008c4c3 	.word	0x0008c4c3
   8c368:	0008c4c3 	.word	0x0008c4c3
   8c36c:	0008c4c3 	.word	0x0008c4c3
   8c370:	0008c4c3 	.word	0x0008c4c3
   8c374:	0008c4c3 	.word	0x0008c4c3
   8c378:	0008c4c3 	.word	0x0008c4c3
   8c37c:	0008c4c3 	.word	0x0008c4c3
   8c380:	0008c3e5 	.word	0x0008c3e5
   8c384:	0008c3e5 	.word	0x0008c3e5
   8c388:	0008c4c3 	.word	0x0008c4c3
   8c38c:	0008c4c3 	.word	0x0008c4c3
   8c390:	0008c4c3 	.word	0x0008c4c3
   8c394:	0008c4c3 	.word	0x0008c4c3
   8c398:	0008c4c3 	.word	0x0008c4c3
   8c39c:	0008c4c3 	.word	0x0008c4c3
   8c3a0:	0008c4c3 	.word	0x0008c4c3
   8c3a4:	0008c4c3 	.word	0x0008c4c3
   8c3a8:	0008c4c3 	.word	0x0008c4c3
   8c3ac:	0008c4c3 	.word	0x0008c4c3
   8c3b0:	0008c4c3 	.word	0x0008c4c3
   8c3b4:	0008c4c3 	.word	0x0008c4c3
   8c3b8:	0008c4c3 	.word	0x0008c4c3
   8c3bc:	0008c4c3 	.word	0x0008c4c3
   8c3c0:	0008c4c3 	.word	0x0008c4c3
   8c3c4:	0008c4c3 	.word	0x0008c4c3
   8c3c8:	0008c4c3 	.word	0x0008c4c3
   8c3cc:	0008c4c3 	.word	0x0008c4c3
   8c3d0:	0008c4c3 	.word	0x0008c4c3
   8c3d4:	0008c4c3 	.word	0x0008c4c3
   8c3d8:	0008c4c3 	.word	0x0008c4c3
   8c3dc:	0008c4c3 	.word	0x0008c4c3
   8c3e0:	0008c3ff 	.word	0x0008c3ff
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c3e4:	4b14      	ldr	r3, [pc, #80]	; (8c438 <main+0x1adc>)
   8c3e6:	781b      	ldrb	r3, [r3, #0]
   8c3e8:	4618      	mov	r0, r3
   8c3ea:	4b14      	ldr	r3, [pc, #80]	; (8c43c <main+0x1ae0>)
   8c3ec:	4798      	blx	r3
   8c3ee:	4603      	mov	r3, r0
   8c3f0:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c3f2:	79fb      	ldrb	r3, [r7, #7]
   8c3f4:	2b00      	cmp	r3, #0
   8c3f6:	d066      	beq.n	8c4c6 <main+0x1b6a>
   8c3f8:	4b11      	ldr	r3, [pc, #68]	; (8c440 <main+0x1ae4>)
   8c3fa:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8c3fc:	e063      	b.n	8c4c6 <main+0x1b6a>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c3fe:	4b0e      	ldr	r3, [pc, #56]	; (8c438 <main+0x1adc>)
   8c400:	781b      	ldrb	r3, [r3, #0]
   8c402:	4618      	mov	r0, r3
   8c404:	4b0d      	ldr	r3, [pc, #52]	; (8c43c <main+0x1ae0>)
   8c406:	4798      	blx	r3
   8c408:	4603      	mov	r3, r0
   8c40a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c40c:	79fb      	ldrb	r3, [r7, #7]
   8c40e:	2b00      	cmp	r3, #0
   8c410:	d001      	beq.n	8c416 <main+0x1aba>
   8c412:	4b0b      	ldr	r3, [pc, #44]	; (8c440 <main+0x1ae4>)
   8c414:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c416:	4b08      	ldr	r3, [pc, #32]	; (8c438 <main+0x1adc>)
   8c418:	781b      	ldrb	r3, [r3, #0]
   8c41a:	4618      	mov	r0, r3
   8c41c:	4b10      	ldr	r3, [pc, #64]	; (8c460 <main+0x1b04>)
   8c41e:	4798      	blx	r3
   8c420:	4603      	mov	r3, r0
   8c422:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c424:	79fb      	ldrb	r3, [r7, #7]
   8c426:	2b00      	cmp	r3, #0
   8c428:	d001      	beq.n	8c42e <main+0x1ad2>
   8c42a:	4b05      	ldr	r3, [pc, #20]	; (8c440 <main+0x1ae4>)
   8c42c:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8c42e:	4b08      	ldr	r3, [pc, #32]	; (8c450 <main+0x1af4>)
   8c430:	2208      	movs	r2, #8
   8c432:	701a      	strb	r2, [r3, #0]
						
						break;
   8c434:	e048      	b.n	8c4c8 <main+0x1b6c>
   8c436:	bf00      	nop
   8c438:	2007212e 	.word	0x2007212e
   8c43c:	00085039 	.word	0x00085039
   8c440:	000893e9 	.word	0x000893e9
   8c444:	0009fcfd 	.word	0x0009fcfd
   8c448:	000a1755 	.word	0x000a1755
   8c44c:	0009a919 	.word	0x0009a919
   8c450:	20070474 	.word	0x20070474
   8c454:	00098601 	.word	0x00098601
   8c458:	000a0dcd 	.word	0x000a0dcd
   8c45c:	0009e571 	.word	0x0009e571
   8c460:	00098d59 	.word	0x00098d59
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c464:	4b26      	ldr	r3, [pc, #152]	; (8c500 <main+0x1ba4>)
   8c466:	781b      	ldrb	r3, [r3, #0]
   8c468:	4618      	mov	r0, r3
   8c46a:	4b26      	ldr	r3, [pc, #152]	; (8c504 <main+0x1ba8>)
   8c46c:	4798      	blx	r3
   8c46e:	4603      	mov	r3, r0
   8c470:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c472:	79fb      	ldrb	r3, [r7, #7]
   8c474:	2b00      	cmp	r3, #0
   8c476:	d001      	beq.n	8c47c <main+0x1b20>
   8c478:	4b23      	ldr	r3, [pc, #140]	; (8c508 <main+0x1bac>)
   8c47a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c47c:	79fb      	ldrb	r3, [r7, #7]
   8c47e:	2b00      	cmp	r3, #0
   8c480:	d10b      	bne.n	8c49a <main+0x1b3e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c482:	4b1f      	ldr	r3, [pc, #124]	; (8c500 <main+0x1ba4>)
   8c484:	781b      	ldrb	r3, [r3, #0]
   8c486:	4618      	mov	r0, r3
   8c488:	4b20      	ldr	r3, [pc, #128]	; (8c50c <main+0x1bb0>)
   8c48a:	4798      	blx	r3
   8c48c:	4603      	mov	r3, r0
   8c48e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);	
   8c490:	79fb      	ldrb	r3, [r7, #7]
   8c492:	2b00      	cmp	r3, #0
   8c494:	d001      	beq.n	8c49a <main+0x1b3e>
   8c496:	4b1c      	ldr	r3, [pc, #112]	; (8c508 <main+0x1bac>)
   8c498:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8c49a:	79fb      	ldrb	r3, [r7, #7]
   8c49c:	2b00      	cmp	r3, #0
   8c49e:	d10c      	bne.n	8c4ba <main+0x1b5e>
							{
								Cl_MacState = MAC_RINSE;
   8c4a0:	4b1b      	ldr	r3, [pc, #108]	; (8c510 <main+0x1bb4>)
   8c4a2:	2207      	movs	r2, #7
   8c4a4:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c4a6:	2201      	movs	r2, #1
   8c4a8:	2107      	movs	r1, #7
   8c4aa:	2045      	movs	r0, #69	; 0x45
   8c4ac:	4b19      	ldr	r3, [pc, #100]	; (8c514 <main+0x1bb8>)
   8c4ae:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c4b0:	79fb      	ldrb	r3, [r7, #7]
   8c4b2:	2b00      	cmp	r3, #0
   8c4b4:	d001      	beq.n	8c4ba <main+0x1b5e>
   8c4b6:	4b14      	ldr	r3, [pc, #80]	; (8c508 <main+0x1bac>)
   8c4b8:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c4ba:	4b11      	ldr	r3, [pc, #68]	; (8c500 <main+0x1ba4>)
   8c4bc:	2200      	movs	r2, #0
   8c4be:	701a      	strb	r2, [r3, #0]
						break;
   8c4c0:	e002      	b.n	8c4c8 <main+0x1b6c>
						

						default: break;
   8c4c2:	bf00      	nop
   8c4c4:	e006      	b.n	8c4d4 <main+0x1b78>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8c4c6:	bf00      	nop
						break;
						

						default: break;
					}
					break;
   8c4c8:	e004      	b.n	8c4d4 <main+0x1b78>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c4ca:	bf00      	nop
					}
					break;
   8c4cc:	e002      	b.n	8c4d4 <main+0x1b78>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c4ce:	bf00      	nop
					}
					break;
   8c4d0:	e000      	b.n	8c4d4 <main+0x1b78>
					default :
					break;
   8c4d2:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8c4d4:	4b10      	ldr	r3, [pc, #64]	; (8c518 <main+0x1bbc>)
   8c4d6:	4798      	blx	r3
   8c4d8:	4603      	mov	r3, r0
   8c4da:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval);
   8c4dc:	79fb      	ldrb	r3, [r7, #7]
   8c4de:	2b00      	cmp	r3, #0
   8c4e0:	d001      	beq.n	8c4e6 <main+0x1b8a>
   8c4e2:	4b09      	ldr	r3, [pc, #36]	; (8c508 <main+0x1bac>)
   8c4e4:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueue1.Cl_MacNewEventcount > 0) ||(Cl_MacEventQueue2.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8c4e6:	4b0d      	ldr	r3, [pc, #52]	; (8c51c <main+0x1bc0>)
   8c4e8:	781b      	ldrb	r3, [r3, #0]
   8c4ea:	2b00      	cmp	r3, #0
   8c4ec:	f47e aaec 	bne.w	8aac8 <main+0x16c>
   8c4f0:	4b0b      	ldr	r3, [pc, #44]	; (8c520 <main+0x1bc4>)
   8c4f2:	781b      	ldrb	r3, [r3, #0]
   8c4f4:	2b00      	cmp	r3, #0
   8c4f6:	f47e aae7 	bne.w	8aac8 <main+0x16c>
			
		}
		
		}

	}
   8c4fa:	f7fe bab3 	b.w	8aa64 <main+0x108>
   8c4fe:	bf00      	nop
   8c500:	2007212e 	.word	0x2007212e
   8c504:	000a0dcd 	.word	0x000a0dcd
   8c508:	000893e9 	.word	0x000893e9
   8c50c:	0009e571 	.word	0x0009e571
   8c510:	20070474 	.word	0x20070474
   8c514:	00098601 	.word	0x00098601
   8c518:	0008c909 	.word	0x0008c909
   8c51c:	20072e58 	.word	0x20072e58
   8c520:	20072d30 	.word	0x20072d30

0008c524 <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8c524:	b580      	push	{r7, lr}
   8c526:	b082      	sub	sp, #8
   8c528:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8c52a:	2300      	movs	r3, #0
   8c52c:	71fb      	strb	r3, [r7, #7]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8c52e:	4b1d      	ldr	r3, [pc, #116]	; (8c5a4 <Cl_MacInit+0x80>)
   8c530:	2200      	movs	r2, #0
   8c532:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8c534:	4b1b      	ldr	r3, [pc, #108]	; (8c5a4 <Cl_MacInit+0x80>)
   8c536:	2200      	movs	r2, #0
   8c538:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8c53a:	4b1a      	ldr	r3, [pc, #104]	; (8c5a4 <Cl_MacInit+0x80>)
   8c53c:	2200      	movs	r2, #0
   8c53e:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8c540:	4b19      	ldr	r3, [pc, #100]	; (8c5a8 <Cl_MacInit+0x84>)
   8c542:	2214      	movs	r2, #20
   8c544:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8c546:	4b19      	ldr	r3, [pc, #100]	; (8c5ac <Cl_MacInit+0x88>)
   8c548:	2228      	movs	r2, #40	; 0x28
   8c54a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8c54e:	4b18      	ldr	r3, [pc, #96]	; (8c5b0 <Cl_MacInit+0x8c>)
   8c550:	2201      	movs	r2, #1
   8c552:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8c554:	4b16      	ldr	r3, [pc, #88]	; (8c5b0 <Cl_MacInit+0x8c>)
   8c556:	2200      	movs	r2, #0
   8c558:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8c55a:	4b15      	ldr	r3, [pc, #84]	; (8c5b0 <Cl_MacInit+0x8c>)
   8c55c:	2200      	movs	r2, #0
   8c55e:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8c560:	4b13      	ldr	r3, [pc, #76]	; (8c5b0 <Cl_MacInit+0x8c>)
   8c562:	2201      	movs	r2, #1
   8c564:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8c566:	4b12      	ldr	r3, [pc, #72]	; (8c5b0 <Cl_MacInit+0x8c>)
   8c568:	2200      	movs	r2, #0
   8c56a:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8c56c:	4b11      	ldr	r3, [pc, #68]	; (8c5b4 <Cl_MacInit+0x90>)
   8c56e:	2201      	movs	r2, #1
   8c570:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8c572:	4b10      	ldr	r3, [pc, #64]	; (8c5b4 <Cl_MacInit+0x90>)
   8c574:	2200      	movs	r2, #0
   8c576:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8c578:	4b0e      	ldr	r3, [pc, #56]	; (8c5b4 <Cl_MacInit+0x90>)
   8c57a:	2200      	movs	r2, #0
   8c57c:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8c57e:	4b0d      	ldr	r3, [pc, #52]	; (8c5b4 <Cl_MacInit+0x90>)
   8c580:	2200      	movs	r2, #0
   8c582:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8c584:	4b0b      	ldr	r3, [pc, #44]	; (8c5b4 <Cl_MacInit+0x90>)
   8c586:	2200      	movs	r2, #0
   8c588:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8c58a:	4b0b      	ldr	r3, [pc, #44]	; (8c5b8 <Cl_MacInit+0x94>)
   8c58c:	2202      	movs	r2, #2
   8c58e:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8c590:	79fb      	ldrb	r3, [r7, #7]
   8c592:	2b00      	cmp	r3, #0
   8c594:	d001      	beq.n	8c59a <Cl_MacInit+0x76>
   8c596:	4b09      	ldr	r3, [pc, #36]	; (8c5bc <Cl_MacInit+0x98>)
   8c598:	4798      	blx	r3
		return Cl_MacRetval;
   8c59a:	79fb      	ldrb	r3, [r7, #7]
}
   8c59c:	4618      	mov	r0, r3
   8c59e:	3708      	adds	r7, #8
   8c5a0:	46bd      	mov	sp, r7
   8c5a2:	bd80      	pop	{r7, pc}
   8c5a4:	20072e58 	.word	0x20072e58
   8c5a8:	20072f0c 	.word	0x20072f0c
   8c5ac:	20072d8c 	.word	0x20072d8c
   8c5b0:	20072f48 	.word	0x20072f48
   8c5b4:	20072e10 	.word	0x20072e10
   8c5b8:	20070474 	.word	0x20070474
   8c5bc:	000893e9 	.word	0x000893e9

0008c5c0 <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8c5c0:	b580      	push	{r7, lr}
   8c5c2:	b082      	sub	sp, #8
   8c5c4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8c5c6:	2304      	movs	r3, #4
   8c5c8:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8c5ca:	4b26      	ldr	r3, [pc, #152]	; (8c664 <Cl_App_init+0xa4>)
   8c5cc:	4798      	blx	r3
   8c5ce:	4603      	mov	r3, r0
   8c5d0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c5d2:	79fb      	ldrb	r3, [r7, #7]
   8c5d4:	2b00      	cmp	r3, #0
   8c5d6:	d001      	beq.n	8c5dc <Cl_App_init+0x1c>
   8c5d8:	4b23      	ldr	r3, [pc, #140]	; (8c668 <Cl_App_init+0xa8>)
   8c5da:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8c5dc:	4b23      	ldr	r3, [pc, #140]	; (8c66c <Cl_App_init+0xac>)
   8c5de:	4798      	blx	r3
   8c5e0:	4603      	mov	r3, r0
   8c5e2:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c5e4:	79fb      	ldrb	r3, [r7, #7]
   8c5e6:	2b00      	cmp	r3, #0
   8c5e8:	d001      	beq.n	8c5ee <Cl_App_init+0x2e>
   8c5ea:	4b1f      	ldr	r3, [pc, #124]	; (8c668 <Cl_App_init+0xa8>)
   8c5ec:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8c5ee:	4b20      	ldr	r3, [pc, #128]	; (8c670 <Cl_App_init+0xb0>)
   8c5f0:	4798      	blx	r3
   8c5f2:	4603      	mov	r3, r0
   8c5f4:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c5f6:	79fb      	ldrb	r3, [r7, #7]
   8c5f8:	2b00      	cmp	r3, #0
   8c5fa:	d001      	beq.n	8c600 <Cl_App_init+0x40>
   8c5fc:	4b1a      	ldr	r3, [pc, #104]	; (8c668 <Cl_App_init+0xa8>)
   8c5fe:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8c600:	4b1c      	ldr	r3, [pc, #112]	; (8c674 <Cl_App_init+0xb4>)
   8c602:	4798      	blx	r3
   8c604:	4603      	mov	r3, r0
   8c606:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c608:	79fb      	ldrb	r3, [r7, #7]
   8c60a:	2b00      	cmp	r3, #0
   8c60c:	d001      	beq.n	8c612 <Cl_App_init+0x52>
   8c60e:	4b16      	ldr	r3, [pc, #88]	; (8c668 <Cl_App_init+0xa8>)
   8c610:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8c612:	4b19      	ldr	r3, [pc, #100]	; (8c678 <Cl_App_init+0xb8>)
   8c614:	4798      	blx	r3
   8c616:	4603      	mov	r3, r0
   8c618:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c61a:	79fb      	ldrb	r3, [r7, #7]
   8c61c:	2b00      	cmp	r3, #0
   8c61e:	d001      	beq.n	8c624 <Cl_App_init+0x64>
   8c620:	4b11      	ldr	r3, [pc, #68]	; (8c668 <Cl_App_init+0xa8>)
   8c622:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8c624:	4b15      	ldr	r3, [pc, #84]	; (8c67c <Cl_App_init+0xbc>)
   8c626:	4798      	blx	r3
   8c628:	4603      	mov	r3, r0
   8c62a:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c62c:	79fb      	ldrb	r3, [r7, #7]
   8c62e:	2b00      	cmp	r3, #0
   8c630:	d001      	beq.n	8c636 <Cl_App_init+0x76>
   8c632:	4b0d      	ldr	r3, [pc, #52]	; (8c668 <Cl_App_init+0xa8>)
   8c634:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8c636:	4b12      	ldr	r3, [pc, #72]	; (8c680 <Cl_App_init+0xc0>)
   8c638:	4798      	blx	r3
   8c63a:	4603      	mov	r3, r0
   8c63c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c63e:	79fb      	ldrb	r3, [r7, #7]
   8c640:	2b00      	cmp	r3, #0
   8c642:	d001      	beq.n	8c648 <Cl_App_init+0x88>
   8c644:	4b08      	ldr	r3, [pc, #32]	; (8c668 <Cl_App_init+0xa8>)
   8c646:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8c648:	4b0e      	ldr	r3, [pc, #56]	; (8c684 <Cl_App_init+0xc4>)
   8c64a:	4798      	blx	r3
   8c64c:	4603      	mov	r3, r0
   8c64e:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c650:	79fb      	ldrb	r3, [r7, #7]
   8c652:	2b00      	cmp	r3, #0
   8c654:	d001      	beq.n	8c65a <Cl_App_init+0x9a>
   8c656:	4b04      	ldr	r3, [pc, #16]	; (8c668 <Cl_App_init+0xa8>)
   8c658:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8c65a:	2300      	movs	r3, #0
	
}
   8c65c:	4618      	mov	r0, r3
   8c65e:	3708      	adds	r7, #8
   8c660:	46bd      	mov	sp, r7
   8c662:	bd80      	pop	{r7, pc}
   8c664:	00080ce1 	.word	0x00080ce1
   8c668:	000893e9 	.word	0x000893e9
   8c66c:	00098ac5 	.word	0x00098ac5
   8c670:	00098d49 	.word	0x00098d49
   8c674:	00084f29 	.word	0x00084f29
   8c678:	0009a919 	.word	0x0009a919
   8c67c:	0009fcfd 	.word	0x0009fcfd
   8c680:	000a1755 	.word	0x000a1755
   8c684:	000845e9 	.word	0x000845e9

0008c688 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8c688:	b580      	push	{r7, lr}
   8c68a:	b082      	sub	sp, #8
   8c68c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8c68e:	2304      	movs	r3, #4
   8c690:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8c692:	79fb      	ldrb	r3, [r7, #7]
   8c694:	2b00      	cmp	r3, #0
   8c696:	d001      	beq.n	8c69c <Cl_Mac_Configure+0x14>
   8c698:	4b03      	ldr	r3, [pc, #12]	; (8c6a8 <Cl_Mac_Configure+0x20>)
   8c69a:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8c69c:	2300      	movs	r3, #0
}
   8c69e:	4618      	mov	r0, r3
   8c6a0:	3708      	adds	r7, #8
   8c6a2:	46bd      	mov	sp, r7
   8c6a4:	bd80      	pop	{r7, pc}
   8c6a6:	bf00      	nop
   8c6a8:	000893e9 	.word	0x000893e9

0008c6ac <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8c6ac:	b580      	push	{r7, lr}
   8c6ae:	b082      	sub	sp, #8
   8c6b0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8c6b2:	2304      	movs	r3, #4
   8c6b4:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8c6b6:	4b07      	ldr	r3, [pc, #28]	; (8c6d4 <Cl_Mac_GetSystem_Status_Query+0x28>)
   8c6b8:	4798      	blx	r3
   8c6ba:	4603      	mov	r3, r0
   8c6bc:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8c6be:	79fb      	ldrb	r3, [r7, #7]
   8c6c0:	2b00      	cmp	r3, #0
   8c6c2:	d001      	beq.n	8c6c8 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8c6c4:	4b04      	ldr	r3, [pc, #16]	; (8c6d8 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8c6c6:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8c6c8:	2300      	movs	r3, #0
}
   8c6ca:	4618      	mov	r0, r3
   8c6cc:	3708      	adds	r7, #8
   8c6ce:	46bd      	mov	sp, r7
   8c6d0:	bd80      	pop	{r7, pc}
   8c6d2:	bf00      	nop
   8c6d4:	0008d2ed 	.word	0x0008d2ed
   8c6d8:	000893e9 	.word	0x000893e9

0008c6dc <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8c6dc:	b580      	push	{r7, lr}
   8c6de:	b082      	sub	sp, #8
   8c6e0:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c6e2:	4b19      	ldr	r3, [pc, #100]	; (8c748 <Cl_MacCheckforConsoleMessage+0x6c>)
   8c6e4:	4798      	blx	r3
   8c6e6:	4603      	mov	r3, r0
   8c6e8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8c6ea:	79fb      	ldrb	r3, [r7, #7]
   8c6ec:	2b00      	cmp	r3, #0
   8c6ee:	d001      	beq.n	8c6f4 <Cl_MacCheckforConsoleMessage+0x18>
   8c6f0:	4b16      	ldr	r3, [pc, #88]	; (8c74c <Cl_MacCheckforConsoleMessage+0x70>)
   8c6f2:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8c6f4:	79fb      	ldrb	r3, [r7, #7]
   8c6f6:	2b00      	cmp	r3, #0
   8c6f8:	d108      	bne.n	8c70c <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8c6fa:	4b15      	ldr	r3, [pc, #84]	; (8c750 <Cl_MacCheckforConsoleMessage+0x74>)
   8c6fc:	4798      	blx	r3
   8c6fe:	4603      	mov	r3, r0
   8c700:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8c702:	79fb      	ldrb	r3, [r7, #7]
   8c704:	2b00      	cmp	r3, #0
   8c706:	d001      	beq.n	8c70c <Cl_MacCheckforConsoleMessage+0x30>
   8c708:	4b10      	ldr	r3, [pc, #64]	; (8c74c <Cl_MacCheckforConsoleMessage+0x70>)
   8c70a:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8c70c:	79fb      	ldrb	r3, [r7, #7]
   8c70e:	2b00      	cmp	r3, #0
   8c710:	d108      	bne.n	8c724 <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c712:	4b10      	ldr	r3, [pc, #64]	; (8c754 <Cl_MacCheckforConsoleMessage+0x78>)
   8c714:	4798      	blx	r3
   8c716:	4603      	mov	r3, r0
   8c718:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8c71a:	79fb      	ldrb	r3, [r7, #7]
   8c71c:	2b00      	cmp	r3, #0
   8c71e:	d001      	beq.n	8c724 <Cl_MacCheckforConsoleMessage+0x48>
   8c720:	4b0a      	ldr	r3, [pc, #40]	; (8c74c <Cl_MacCheckforConsoleMessage+0x70>)
   8c722:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8c724:	79fb      	ldrb	r3, [r7, #7]
   8c726:	2b00      	cmp	r3, #0
   8c728:	d108      	bne.n	8c73c <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8c72a:	4b0b      	ldr	r3, [pc, #44]	; (8c758 <Cl_MacCheckforConsoleMessage+0x7c>)
   8c72c:	4798      	blx	r3
   8c72e:	4603      	mov	r3, r0
   8c730:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8c732:	79fb      	ldrb	r3, [r7, #7]
   8c734:	2b00      	cmp	r3, #0
   8c736:	d001      	beq.n	8c73c <Cl_MacCheckforConsoleMessage+0x60>
   8c738:	4b04      	ldr	r3, [pc, #16]	; (8c74c <Cl_MacCheckforConsoleMessage+0x70>)
   8c73a:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8c73c:	2300      	movs	r3, #0
}
   8c73e:	4618      	mov	r0, r3
   8c740:	3708      	adds	r7, #8
   8c742:	46bd      	mov	sp, r7
   8c744:	bd80      	pop	{r7, pc}
   8c746:	bf00      	nop
   8c748:	00098251 	.word	0x00098251
   8c74c:	000893e9 	.word	0x000893e9
   8c750:	000982b1 	.word	0x000982b1
   8c754:	00098291 	.word	0x00098291
   8c758:	00098419 	.word	0x00098419

0008c75c <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8c75c:	b480      	push	{r7}
   8c75e:	b083      	sub	sp, #12
   8c760:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8c762:	2300      	movs	r3, #0
   8c764:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8c766:	4b63      	ldr	r3, [pc, #396]	; (8c8f4 <Cl_MacCreate_Macevent+0x198>)
   8c768:	2200      	movs	r2, #0
   8c76a:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8c76c:	4b62      	ldr	r3, [pc, #392]	; (8c8f8 <Cl_MacCreate_Macevent+0x19c>)
   8c76e:	2200      	movs	r2, #0
   8c770:	701a      	strb	r2, [r3, #0]
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c772:	4b62      	ldr	r3, [pc, #392]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c774:	785b      	ldrb	r3, [r3, #1]
   8c776:	2b00      	cmp	r3, #0
   8c778:	d035      	beq.n	8c7e6 <Cl_MacCreate_Macevent+0x8a>
   8c77a:	4b60      	ldr	r3, [pc, #384]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c77c:	781b      	ldrb	r3, [r3, #0]
   8c77e:	2b00      	cmp	r3, #0
   8c780:	d031      	beq.n	8c7e6 <Cl_MacCreate_Macevent+0x8a>
		{
	

			Cl_MacNewEvent = true;
   8c782:	4b5c      	ldr	r3, [pc, #368]	; (8c8f4 <Cl_MacCreate_Macevent+0x198>)
   8c784:	2201      	movs	r2, #1
   8c786:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8c788:	4b5c      	ldr	r3, [pc, #368]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c78a:	789a      	ldrb	r2, [r3, #2]
   8c78c:	4b5a      	ldr	r3, [pc, #360]	; (8c8f8 <Cl_MacCreate_Macevent+0x19c>)
   8c78e:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8c790:	4b5a      	ldr	r3, [pc, #360]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c792:	781b      	ldrb	r3, [r3, #0]
   8c794:	3b01      	subs	r3, #1
   8c796:	b2da      	uxtb	r2, r3
   8c798:	4b58      	ldr	r3, [pc, #352]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c79a:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8c79c:	2300      	movs	r3, #0
   8c79e:	71fb      	strb	r3, [r7, #7]
   8c7a0:	e019      	b.n	8c7d6 <Cl_MacCreate_Macevent+0x7a>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c7a2:	79fb      	ldrb	r3, [r7, #7]
   8c7a4:	2b09      	cmp	r3, #9
   8c7a6:	d80a      	bhi.n	8c7be <Cl_MacCreate_Macevent+0x62>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8c7a8:	79fb      	ldrb	r3, [r7, #7]
   8c7aa:	79fa      	ldrb	r2, [r7, #7]
   8c7ac:	3201      	adds	r2, #1
   8c7ae:	4953      	ldr	r1, [pc, #332]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c7b0:	440a      	add	r2, r1
   8c7b2:	7891      	ldrb	r1, [r2, #2]
   8c7b4:	4a51      	ldr	r2, [pc, #324]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c7b6:	4413      	add	r3, r2
   8c7b8:	460a      	mov	r2, r1
   8c7ba:	709a      	strb	r2, [r3, #2]
   8c7bc:	e008      	b.n	8c7d0 <Cl_MacCreate_Macevent+0x74>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c7be:	79fb      	ldrb	r3, [r7, #7]
   8c7c0:	2b09      	cmp	r3, #9
   8c7c2:	d90e      	bls.n	8c7e2 <Cl_MacCreate_Macevent+0x86>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8c7c4:	79fb      	ldrb	r3, [r7, #7]
   8c7c6:	4a4d      	ldr	r2, [pc, #308]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c7c8:	4413      	add	r3, r2
   8c7ca:	2200      	movs	r2, #0
   8c7cc:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c7ce:	e008      	b.n	8c7e2 <Cl_MacCreate_Macevent+0x86>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8c7d0:	79fb      	ldrb	r3, [r7, #7]
   8c7d2:	3301      	adds	r3, #1
   8c7d4:	71fb      	strb	r3, [r7, #7]
   8c7d6:	4b49      	ldr	r3, [pc, #292]	; (8c8fc <Cl_MacCreate_Macevent+0x1a0>)
   8c7d8:	781b      	ldrb	r3, [r3, #0]
   8c7da:	79fa      	ldrb	r2, [r7, #7]
   8c7dc:	429a      	cmp	r2, r3
   8c7de:	d3e0      	bcc.n	8c7a2 <Cl_MacCreate_Macevent+0x46>
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c7e0:	e082      	b.n	8c8e8 <Cl_MacCreate_Macevent+0x18c>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c7e2:	bf00      	nop
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c7e4:	e080      	b.n	8c8e8 <Cl_MacCreate_Macevent+0x18c>
				}
			}
	
	
		}
		else if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8c7e6:	4b46      	ldr	r3, [pc, #280]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c7e8:	785b      	ldrb	r3, [r3, #1]
   8c7ea:	2b00      	cmp	r3, #0
   8c7ec:	d03c      	beq.n	8c868 <Cl_MacCreate_Macevent+0x10c>
   8c7ee:	4b44      	ldr	r3, [pc, #272]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c7f0:	781b      	ldrb	r3, [r3, #0]
   8c7f2:	2b00      	cmp	r3, #0
   8c7f4:	d038      	beq.n	8c868 <Cl_MacCreate_Macevent+0x10c>
		{
			

			Cl_MacNewEvent = true;
   8c7f6:	4b3f      	ldr	r3, [pc, #252]	; (8c8f4 <Cl_MacCreate_Macevent+0x198>)
   8c7f8:	2201      	movs	r2, #1
   8c7fa:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8c7fc:	4b40      	ldr	r3, [pc, #256]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c7fe:	789a      	ldrb	r2, [r3, #2]
   8c800:	4b3d      	ldr	r3, [pc, #244]	; (8c8f8 <Cl_MacCreate_Macevent+0x19c>)
   8c802:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8c804:	4b3e      	ldr	r3, [pc, #248]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c806:	781b      	ldrb	r3, [r3, #0]
   8c808:	3b01      	subs	r3, #1
   8c80a:	b2da      	uxtb	r2, r3
   8c80c:	4b3c      	ldr	r3, [pc, #240]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c80e:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8c810:	2300      	movs	r3, #0
   8c812:	71fb      	strb	r3, [r7, #7]
   8c814:	e019      	b.n	8c84a <Cl_MacCreate_Macevent+0xee>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c816:	79fb      	ldrb	r3, [r7, #7]
   8c818:	2b09      	cmp	r3, #9
   8c81a:	d80a      	bhi.n	8c832 <Cl_MacCreate_Macevent+0xd6>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8c81c:	79fb      	ldrb	r3, [r7, #7]
   8c81e:	79fa      	ldrb	r2, [r7, #7]
   8c820:	3201      	adds	r2, #1
   8c822:	4937      	ldr	r1, [pc, #220]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c824:	440a      	add	r2, r1
   8c826:	7891      	ldrb	r1, [r2, #2]
   8c828:	4a35      	ldr	r2, [pc, #212]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c82a:	4413      	add	r3, r2
   8c82c:	460a      	mov	r2, r1
   8c82e:	709a      	strb	r2, [r3, #2]
   8c830:	e008      	b.n	8c844 <Cl_MacCreate_Macevent+0xe8>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c832:	79fb      	ldrb	r3, [r7, #7]
   8c834:	2b09      	cmp	r3, #9
   8c836:	d90e      	bls.n	8c856 <Cl_MacCreate_Macevent+0xfa>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8c838:	79fb      	ldrb	r3, [r7, #7]
   8c83a:	4a31      	ldr	r2, [pc, #196]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c83c:	4413      	add	r3, r2
   8c83e:	2200      	movs	r2, #0
   8c840:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c842:	e008      	b.n	8c856 <Cl_MacCreate_Macevent+0xfa>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8c844:	79fb      	ldrb	r3, [r7, #7]
   8c846:	3301      	adds	r3, #1
   8c848:	71fb      	strb	r3, [r7, #7]
   8c84a:	4b2d      	ldr	r3, [pc, #180]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c84c:	781b      	ldrb	r3, [r3, #0]
   8c84e:	79fa      	ldrb	r2, [r7, #7]
   8c850:	429a      	cmp	r2, r3
   8c852:	d3e0      	bcc.n	8c816 <Cl_MacCreate_Macevent+0xba>
   8c854:	e000      	b.n	8c858 <Cl_MacCreate_Macevent+0xfc>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c856:	bf00      	nop
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8c858:	4b29      	ldr	r3, [pc, #164]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c85a:	781b      	ldrb	r3, [r3, #0]
   8c85c:	461a      	mov	r2, r3
   8c85e:	4b28      	ldr	r3, [pc, #160]	; (8c900 <Cl_MacCreate_Macevent+0x1a4>)
   8c860:	4413      	add	r3, r2
   8c862:	2200      	movs	r2, #0
   8c864:	709a      	strb	r2, [r3, #2]
   8c866:	e03f      	b.n	8c8e8 <Cl_MacCreate_Macevent+0x18c>
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c868:	4b26      	ldr	r3, [pc, #152]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c86a:	785b      	ldrb	r3, [r3, #1]
   8c86c:	2b00      	cmp	r3, #0
   8c86e:	d035      	beq.n	8c8dc <Cl_MacCreate_Macevent+0x180>
   8c870:	4b24      	ldr	r3, [pc, #144]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c872:	781b      	ldrb	r3, [r3, #0]
   8c874:	2b00      	cmp	r3, #0
   8c876:	d031      	beq.n	8c8dc <Cl_MacCreate_Macevent+0x180>
		{
			

			Cl_MacNewEvent = true;
   8c878:	4b1e      	ldr	r3, [pc, #120]	; (8c8f4 <Cl_MacCreate_Macevent+0x198>)
   8c87a:	2201      	movs	r2, #1
   8c87c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8c87e:	4b21      	ldr	r3, [pc, #132]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c880:	789a      	ldrb	r2, [r3, #2]
   8c882:	4b1d      	ldr	r3, [pc, #116]	; (8c8f8 <Cl_MacCreate_Macevent+0x19c>)
   8c884:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8c886:	4b1f      	ldr	r3, [pc, #124]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c888:	781b      	ldrb	r3, [r3, #0]
   8c88a:	3b01      	subs	r3, #1
   8c88c:	b2da      	uxtb	r2, r3
   8c88e:	4b1d      	ldr	r3, [pc, #116]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c890:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8c892:	2300      	movs	r3, #0
   8c894:	71fb      	strb	r3, [r7, #7]
   8c896:	e019      	b.n	8c8cc <Cl_MacCreate_Macevent+0x170>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c898:	79fb      	ldrb	r3, [r7, #7]
   8c89a:	2b09      	cmp	r3, #9
   8c89c:	d80a      	bhi.n	8c8b4 <Cl_MacCreate_Macevent+0x158>
				{
					Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8c89e:	79fb      	ldrb	r3, [r7, #7]
   8c8a0:	79fa      	ldrb	r2, [r7, #7]
   8c8a2:	3201      	adds	r2, #1
   8c8a4:	4917      	ldr	r1, [pc, #92]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c8a6:	440a      	add	r2, r1
   8c8a8:	7891      	ldrb	r1, [r2, #2]
   8c8aa:	4a16      	ldr	r2, [pc, #88]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c8ac:	4413      	add	r3, r2
   8c8ae:	460a      	mov	r2, r1
   8c8b0:	709a      	strb	r2, [r3, #2]
   8c8b2:	e008      	b.n	8c8c6 <Cl_MacCreate_Macevent+0x16a>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c8b4:	79fb      	ldrb	r3, [r7, #7]
   8c8b6:	2b09      	cmp	r3, #9
   8c8b8:	d90e      	bls.n	8c8d8 <Cl_MacCreate_Macevent+0x17c>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;	
   8c8ba:	79fb      	ldrb	r3, [r7, #7]
   8c8bc:	4a11      	ldr	r2, [pc, #68]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c8be:	4413      	add	r3, r2
   8c8c0:	2200      	movs	r2, #0
   8c8c2:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c8c4:	e008      	b.n	8c8d8 <Cl_MacCreate_Macevent+0x17c>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
			Cl_MacEventQueue1.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8c8c6:	79fb      	ldrb	r3, [r7, #7]
   8c8c8:	3301      	adds	r3, #1
   8c8ca:	71fb      	strb	r3, [r7, #7]
   8c8cc:	4b0d      	ldr	r3, [pc, #52]	; (8c904 <Cl_MacCreate_Macevent+0x1a8>)
   8c8ce:	781b      	ldrb	r3, [r3, #0]
   8c8d0:	79fa      	ldrb	r2, [r7, #7]
   8c8d2:	429a      	cmp	r2, r3
   8c8d4:	d3e0      	bcc.n	8c898 <Cl_MacCreate_Macevent+0x13c>
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c8d6:	e007      	b.n	8c8e8 <Cl_MacCreate_Macevent+0x18c>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;	
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c8d8:	bf00      	nop
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c8da:	e005      	b.n	8c8e8 <Cl_MacCreate_Macevent+0x18c>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8c8dc:	4b05      	ldr	r3, [pc, #20]	; (8c8f4 <Cl_MacCreate_Macevent+0x198>)
   8c8de:	2200      	movs	r2, #0
   8c8e0:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8c8e2:	4b05      	ldr	r3, [pc, #20]	; (8c8f8 <Cl_MacCreate_Macevent+0x19c>)
   8c8e4:	2200      	movs	r2, #0
   8c8e6:	701a      	strb	r2, [r3, #0]
			
			
		}
	

	return CL_OK;
   8c8e8:	2300      	movs	r3, #0
}
   8c8ea:	4618      	mov	r0, r3
   8c8ec:	370c      	adds	r7, #12
   8c8ee:	46bd      	mov	sp, r7
   8c8f0:	bc80      	pop	{r7}
   8c8f2:	4770      	bx	lr
   8c8f4:	20072130 	.word	0x20072130
   8c8f8:	2007212e 	.word	0x2007212e
   8c8fc:	20072f68 	.word	0x20072f68
   8c900:	20072d30 	.word	0x20072d30
   8c904:	20072e58 	.word	0x20072e58

0008c908 <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8c908:	b480      	push	{r7}
   8c90a:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8c90c:	2300      	movs	r3, #0
	
}
   8c90e:	4618      	mov	r0, r3
   8c910:	46bd      	mov	sp, r7
   8c912:	bc80      	pop	{r7}
   8c914:	4770      	bx	lr
   8c916:	bf00      	nop

0008c918 <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8c918:	b580      	push	{r7, lr}
   8c91a:	b082      	sub	sp, #8
   8c91c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8c91e:	4b07      	ldr	r3, [pc, #28]	; (8c93c <Cl_Mac_CheckforAlarms+0x24>)
   8c920:	4798      	blx	r3
   8c922:	4603      	mov	r3, r0
   8c924:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8c926:	79fb      	ldrb	r3, [r7, #7]
   8c928:	2b00      	cmp	r3, #0
   8c92a:	d001      	beq.n	8c930 <Cl_Mac_CheckforAlarms+0x18>
   8c92c:	4b04      	ldr	r3, [pc, #16]	; (8c940 <Cl_Mac_CheckforAlarms+0x28>)
   8c92e:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8c930:	2300      	movs	r3, #0
}
   8c932:	4618      	mov	r0, r3
   8c934:	3708      	adds	r7, #8
   8c936:	46bd      	mov	sp, r7
   8c938:	bd80      	pop	{r7, pc}
   8c93a:	bf00      	nop
   8c93c:	00081621 	.word	0x00081621
   8c940:	000893e9 	.word	0x000893e9

0008c944 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8c944:	b480      	push	{r7}
   8c946:	b083      	sub	sp, #12
   8c948:	af00      	add	r7, sp, #0
   8c94a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8c94c:	687b      	ldr	r3, [r7, #4]
   8c94e:	2b07      	cmp	r3, #7
   8c950:	d825      	bhi.n	8c99e <osc_get_rate+0x5a>
   8c952:	a201      	add	r2, pc, #4	; (adr r2, 8c958 <osc_get_rate+0x14>)
   8c954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c958:	0008c979 	.word	0x0008c979
   8c95c:	0008c97f 	.word	0x0008c97f
   8c960:	0008c985 	.word	0x0008c985
   8c964:	0008c98b 	.word	0x0008c98b
   8c968:	0008c98f 	.word	0x0008c98f
   8c96c:	0008c993 	.word	0x0008c993
   8c970:	0008c997 	.word	0x0008c997
   8c974:	0008c99b 	.word	0x0008c99b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8c978:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8c97c:	e010      	b.n	8c9a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8c97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8c982:	e00d      	b.n	8c9a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8c984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8c988:	e00a      	b.n	8c9a0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8c98a:	4b08      	ldr	r3, [pc, #32]	; (8c9ac <osc_get_rate+0x68>)
   8c98c:	e008      	b.n	8c9a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8c98e:	4b08      	ldr	r3, [pc, #32]	; (8c9b0 <osc_get_rate+0x6c>)
   8c990:	e006      	b.n	8c9a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8c992:	4b08      	ldr	r3, [pc, #32]	; (8c9b4 <osc_get_rate+0x70>)
   8c994:	e004      	b.n	8c9a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8c996:	4b07      	ldr	r3, [pc, #28]	; (8c9b4 <osc_get_rate+0x70>)
   8c998:	e002      	b.n	8c9a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8c99a:	4b06      	ldr	r3, [pc, #24]	; (8c9b4 <osc_get_rate+0x70>)
   8c99c:	e000      	b.n	8c9a0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8c99e:	2300      	movs	r3, #0
}
   8c9a0:	4618      	mov	r0, r3
   8c9a2:	370c      	adds	r7, #12
   8c9a4:	46bd      	mov	sp, r7
   8c9a6:	bc80      	pop	{r7}
   8c9a8:	4770      	bx	lr
   8c9aa:	bf00      	nop
   8c9ac:	003d0900 	.word	0x003d0900
   8c9b0:	007a1200 	.word	0x007a1200
   8c9b4:	00b71b00 	.word	0x00b71b00

0008c9b8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8c9b8:	b580      	push	{r7, lr}
   8c9ba:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8c9bc:	2006      	movs	r0, #6
   8c9be:	4b04      	ldr	r3, [pc, #16]	; (8c9d0 <sysclk_get_main_hz+0x18>)
   8c9c0:	4798      	blx	r3
   8c9c2:	4602      	mov	r2, r0
   8c9c4:	4613      	mov	r3, r2
   8c9c6:	00db      	lsls	r3, r3, #3
   8c9c8:	1a9b      	subs	r3, r3, r2
   8c9ca:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8c9cc:	4618      	mov	r0, r3
   8c9ce:	bd80      	pop	{r7, pc}
   8c9d0:	0008c945 	.word	0x0008c945

0008c9d4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8c9d4:	b580      	push	{r7, lr}
   8c9d6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8c9d8:	4b02      	ldr	r3, [pc, #8]	; (8c9e4 <sysclk_get_cpu_hz+0x10>)
   8c9da:	4798      	blx	r3
   8c9dc:	4603      	mov	r3, r0
   8c9de:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8c9e0:	4618      	mov	r0, r3
   8c9e2:	bd80      	pop	{r7, pc}
   8c9e4:	0008c9b9 	.word	0x0008c9b9

0008c9e8 <nvram_read>:
uint8_t sum[11]={0};
uint8_t checksum_all[11]={0};
extern Cl_ReturnCodeType cl_wait(uint32_t );
void checksum_cal(uint32_t val);
void nvram_read(ID_NAME module_id)
{
   8c9e8:	b580      	push	{r7, lr}
   8c9ea:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
   8c9ee:	af00      	add	r7, sp, #0
   8c9f0:	4602      	mov	r2, r0
   8c9f2:	1dfb      	adds	r3, r7, #7
   8c9f4:	701a      	strb	r2, [r3, #0]
	static lut ps_1_1[40]={0,0};
	static lut ps_2_1[40]={0,0};
	static lut ps_3_1[40]={0,0};
	static hep hp_1[40]={0,0};
	static conduc cond_1[40]={0,0};
	size_var = 0;
   8c9f6:	4bb8      	ldr	r3, [pc, #736]	; (8ccd8 <nvram_read+0x2f0>)
   8c9f8:	2200      	movs	r2, #0
   8c9fa:	601a      	str	r2, [r3, #0]
	addr_var = 0;
   8c9fc:	4bb7      	ldr	r3, [pc, #732]	; (8ccdc <nvram_read+0x2f4>)
   8c9fe:	2200      	movs	r2, #0
   8ca00:	601a      	str	r2, [r3, #0]
	uint32_t i=0;
   8ca02:	2300      	movs	r3, #0
   8ca04:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
	//static uint32_t j =0;
	int16_t data_received[400] = {0};
   8ca08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8ca0c:	4618      	mov	r0, r3
   8ca0e:	f44f 7348 	mov.w	r3, #800	; 0x320
   8ca12:	461a      	mov	r2, r3
   8ca14:	2100      	movs	r1, #0
   8ca16:	4bb2      	ldr	r3, [pc, #712]	; (8cce0 <nvram_read+0x2f8>)
   8ca18:	4798      	blx	r3
	for (i=0;i<400;i++)
   8ca1a:	2300      	movs	r3, #0
   8ca1c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ca20:	e00b      	b.n	8ca3a <nvram_read+0x52>
	{
		data_received[i]=0;
   8ca22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8ca26:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8ca2a:	2100      	movs	r1, #0
   8ca2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	size_var = 0;
	addr_var = 0;
	uint32_t i=0;
	//static uint32_t j =0;
	int16_t data_received[400] = {0};
	for (i=0;i<400;i++)
   8ca30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ca34:	3301      	adds	r3, #1
   8ca36:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ca3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ca3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8ca42:	d3ee      	bcc.n	8ca22 <nvram_read+0x3a>
	{
		data_received[i]=0;
	}
	//printf("read\n");
	addr_var = array[module_id].addr;
   8ca44:	1dfb      	adds	r3, r7, #7
   8ca46:	781a      	ldrb	r2, [r3, #0]
   8ca48:	49a6      	ldr	r1, [pc, #664]	; (8cce4 <nvram_read+0x2fc>)
   8ca4a:	4613      	mov	r3, r2
   8ca4c:	005b      	lsls	r3, r3, #1
   8ca4e:	4413      	add	r3, r2
   8ca50:	009b      	lsls	r3, r3, #2
   8ca52:	440b      	add	r3, r1
   8ca54:	3304      	adds	r3, #4
   8ca56:	681b      	ldr	r3, [r3, #0]
   8ca58:	4aa0      	ldr	r2, [pc, #640]	; (8ccdc <nvram_read+0x2f4>)
   8ca5a:	6013      	str	r3, [r2, #0]
	size_var = array[module_id].size;
   8ca5c:	1dfb      	adds	r3, r7, #7
   8ca5e:	781a      	ldrb	r2, [r3, #0]
   8ca60:	49a0      	ldr	r1, [pc, #640]	; (8cce4 <nvram_read+0x2fc>)
   8ca62:	4613      	mov	r3, r2
   8ca64:	005b      	lsls	r3, r3, #1
   8ca66:	4413      	add	r3, r2
   8ca68:	009b      	lsls	r3, r3, #2
   8ca6a:	440b      	add	r3, r1
   8ca6c:	3308      	adds	r3, #8
   8ca6e:	681b      	ldr	r3, [r3, #0]
   8ca70:	4a99      	ldr	r2, [pc, #612]	; (8ccd8 <nvram_read+0x2f0>)
   8ca72:	6013      	str	r3, [r2, #0]
	
	twi_options_t opt = {
   8ca74:	f107 0320 	add.w	r3, r7, #32
   8ca78:	461a      	mov	r2, r3
   8ca7a:	2300      	movs	r3, #0
   8ca7c:	6013      	str	r3, [r2, #0]
   8ca7e:	6053      	str	r3, [r2, #4]
   8ca80:	6093      	str	r3, [r2, #8]
		.master_clk = sysclk_get_cpu_hz(),
   8ca82:	4b99      	ldr	r3, [pc, #612]	; (8cce8 <nvram_read+0x300>)
   8ca84:	4798      	blx	r3
   8ca86:	4602      	mov	r2, r0
	}
	//printf("read\n");
	addr_var = array[module_id].addr;
	size_var = array[module_id].size;
	
	twi_options_t opt = {
   8ca88:	f107 0320 	add.w	r3, r7, #32
   8ca8c:	601a      	str	r2, [r3, #0]
   8ca8e:	f107 0320 	add.w	r3, r7, #32
   8ca92:	4a96      	ldr	r2, [pc, #600]	; (8ccec <nvram_read+0x304>)
   8ca94:	605a      	str	r2, [r3, #4]
   8ca96:	f107 0320 	add.w	r3, r7, #32
   8ca9a:	2251      	movs	r2, #81	; 0x51
   8ca9c:	721a      	strb	r2, [r3, #8]
		.master_clk = sysclk_get_cpu_hz(),
		.speed = TWI_SPEED,
		.chip  = NVRAM_BUS_ADDR
	};

	twi_master_init(TWI_EXAMPLE, &opt);
   8ca9e:	f107 0320 	add.w	r3, r7, #32
   8caa2:	4619      	mov	r1, r3
   8caa4:	4892      	ldr	r0, [pc, #584]	; (8ccf0 <nvram_read+0x308>)
   8caa6:	4b93      	ldr	r3, [pc, #588]	; (8ccf4 <nvram_read+0x30c>)
   8caa8:	4798      	blx	r3
	
	twi_packet_t packet_received = {
   8caaa:	f107 030c 	add.w	r3, r7, #12
   8caae:	461a      	mov	r2, r3
   8cab0:	2300      	movs	r3, #0
   8cab2:	6013      	str	r3, [r2, #0]
   8cab4:	6053      	str	r3, [r2, #4]
   8cab6:	6093      	str	r3, [r2, #8]
   8cab8:	60d3      	str	r3, [r2, #12]
   8caba:	6113      	str	r3, [r2, #16]
		#if SAM
		.addr[0]      = addr_var >> 8, // TWI slave memory address data MSB
   8cabc:	4b87      	ldr	r3, [pc, #540]	; (8ccdc <nvram_read+0x2f4>)
   8cabe:	681b      	ldr	r3, [r3, #0]
   8cac0:	0a1b      	lsrs	r3, r3, #8
		.chip  = NVRAM_BUS_ADDR
	};

	twi_master_init(TWI_EXAMPLE, &opt);
	
	twi_packet_t packet_received = {
   8cac2:	b2da      	uxtb	r2, r3
   8cac4:	f107 030c 	add.w	r3, r7, #12
   8cac8:	701a      	strb	r2, [r3, #0]
   8caca:	4b84      	ldr	r3, [pc, #528]	; (8ccdc <nvram_read+0x2f4>)
   8cacc:	681b      	ldr	r3, [r3, #0]
   8cace:	b2da      	uxtb	r2, r3
   8cad0:	f107 030c 	add.w	r3, r7, #12
   8cad4:	705a      	strb	r2, [r3, #1]
   8cad6:	f107 030c 	add.w	r3, r7, #12
   8cada:	2202      	movs	r2, #2
   8cadc:	605a      	str	r2, [r3, #4]
   8cade:	f107 030c 	add.w	r3, r7, #12
   8cae2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   8cae6:	609a      	str	r2, [r3, #8]
   8cae8:	4b7b      	ldr	r3, [pc, #492]	; (8ccd8 <nvram_read+0x2f0>)
   8caea:	681a      	ldr	r2, [r3, #0]
   8caec:	f107 030c 	add.w	r3, r7, #12
   8caf0:	60da      	str	r2, [r3, #12]
   8caf2:	f107 030c 	add.w	r3, r7, #12
   8caf6:	2251      	movs	r2, #81	; 0x51
   8caf8:	741a      	strb	r2, [r3, #16]
		// TWI slave bus address
		.buffer       = data_received,        // transfer data destination buffer
		.length       = size_var   // transfer data size (bytes)
	};
	// Perform a multi-byte read access then check the result.
	while (twi_master_read(TWI_EXAMPLE, &packet_received) != TWI_SUCCESS);
   8cafa:	bf00      	nop
   8cafc:	f107 030c 	add.w	r3, r7, #12
   8cb00:	4619      	mov	r1, r3
   8cb02:	487b      	ldr	r0, [pc, #492]	; (8ccf0 <nvram_read+0x308>)
   8cb04:	4b7c      	ldr	r3, [pc, #496]	; (8ccf8 <nvram_read+0x310>)
   8cb06:	4798      	blx	r3
   8cb08:	4603      	mov	r3, r0
   8cb0a:	2b00      	cmp	r3, #0
   8cb0c:	d1f6      	bne.n	8cafc <nvram_read+0x114>

	// Verify that the received data matches the sent data.
	switch (module_id)
   8cb0e:	1dfb      	adds	r3, r7, #7
   8cb10:	781b      	ldrb	r3, [r3, #0]
   8cb12:	2b0a      	cmp	r3, #10
   8cb14:	f200 8397 	bhi.w	8d246 <nvram_read+0x85e>
   8cb18:	a201      	add	r2, pc, #4	; (adr r2, 8cb20 <nvram_read+0x138>)
   8cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cb1e:	bf00      	nop
   8cb20:	0008cb4d 	.word	0x0008cb4d
   8cb24:	0008d247 	.word	0x0008d247
   8cb28:	0008d247 	.word	0x0008d247
   8cb2c:	0008ccd1 	.word	0x0008ccd1
   8cb30:	0008d247 	.word	0x0008d247
   8cb34:	0008d247 	.word	0x0008d247
   8cb38:	0008ce89 	.word	0x0008ce89
   8cb3c:	0008d247 	.word	0x0008d247
   8cb40:	0008cfd3 	.word	0x0008cfd3
   8cb44:	0008d105 	.word	0x0008d105
   8cb48:	0008d20b 	.word	0x0008d20b
	{
		case CAL_TEMP_TS1:
		
		for (i=0;i<size_var/2;i++)
   8cb4c:	2300      	movs	r3, #0
   8cb4e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cb52:	e021      	b.n	8cb98 <nvram_read+0x1b0>
		{
			Temp1_1[i].volts = data_received[i*2];
   8cb54:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cb58:	005a      	lsls	r2, r3, #1
   8cb5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cb5e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cb62:	b299      	uxth	r1, r3
   8cb64:	4a65      	ldr	r2, [pc, #404]	; (8ccfc <nvram_read+0x314>)
   8cb66:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cb6a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp1_1[i].temperature = data_received[(i*2)+1];
   8cb6e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cb72:	005b      	lsls	r3, r3, #1
   8cb74:	1c5a      	adds	r2, r3, #1
   8cb76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cb7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cb7e:	b299      	uxth	r1, r3
   8cb80:	4a5e      	ldr	r2, [pc, #376]	; (8ccfc <nvram_read+0x314>)
   8cb82:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cb86:	009b      	lsls	r3, r3, #2
   8cb88:	4413      	add	r3, r2
   8cb8a:	460a      	mov	r2, r1
   8cb8c:	805a      	strh	r2, [r3, #2]
	// Verify that the received data matches the sent data.
	switch (module_id)
	{
		case CAL_TEMP_TS1:
		
		for (i=0;i<size_var/2;i++)
   8cb8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cb92:	3301      	adds	r3, #1
   8cb94:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cb98:	4b4f      	ldr	r3, [pc, #316]	; (8ccd8 <nvram_read+0x2f0>)
   8cb9a:	681b      	ldr	r3, [r3, #0]
   8cb9c:	085a      	lsrs	r2, r3, #1
   8cb9e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cba2:	429a      	cmp	r2, r3
   8cba4:	d8d6      	bhi.n	8cb54 <nvram_read+0x16c>
		{
			Temp1_1[i].volts = data_received[i*2];
			Temp1_1[i].temperature = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8cba6:	2300      	movs	r3, #0
   8cba8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cbac:	e01b      	b.n	8cbe6 <nvram_read+0x1fe>
		{
			Temp1[i].volts = Temp1_1[i].volts;
   8cbae:	4a53      	ldr	r2, [pc, #332]	; (8ccfc <nvram_read+0x314>)
   8cbb0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbb4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8cbb8:	4a51      	ldr	r2, [pc, #324]	; (8cd00 <nvram_read+0x318>)
   8cbba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbbe:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp1[i].temperature = Temp1_1[i].temperature;
   8cbc2:	4a4e      	ldr	r2, [pc, #312]	; (8ccfc <nvram_read+0x314>)
   8cbc4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbc8:	009b      	lsls	r3, r3, #2
   8cbca:	4413      	add	r3, r2
   8cbcc:	8859      	ldrh	r1, [r3, #2]
   8cbce:	4a4c      	ldr	r2, [pc, #304]	; (8cd00 <nvram_read+0x318>)
   8cbd0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbd4:	009b      	lsls	r3, r3, #2
   8cbd6:	4413      	add	r3, r2
   8cbd8:	460a      	mov	r2, r1
   8cbda:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			Temp1_1[i].volts = data_received[i*2];
			Temp1_1[i].temperature = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8cbdc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbe0:	3301      	adds	r3, #1
   8cbe2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cbe6:	4b3c      	ldr	r3, [pc, #240]	; (8ccd8 <nvram_read+0x2f0>)
   8cbe8:	681b      	ldr	r3, [r3, #0]
   8cbea:	085a      	lsrs	r2, r3, #1
   8cbec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbf0:	429a      	cmp	r2, r3
   8cbf2:	d8dc      	bhi.n	8cbae <nvram_read+0x1c6>
		{
			Temp1[i].volts = Temp1_1[i].volts;
			Temp1[i].temperature = Temp1_1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cbf4:	2300      	movs	r3, #0
   8cbf6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cbfa:	e036      	b.n	8cc6a <nvram_read+0x282>
		{
			Temp2[i].volts = Temp1[i].volts;
   8cbfc:	4a40      	ldr	r2, [pc, #256]	; (8cd00 <nvram_read+0x318>)
   8cbfe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc02:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cc06:	b299      	uxth	r1, r3
   8cc08:	4a3e      	ldr	r2, [pc, #248]	; (8cd04 <nvram_read+0x31c>)
   8cc0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc0e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp2[i].temperature = Temp1[i].temperature;
   8cc12:	4a3b      	ldr	r2, [pc, #236]	; (8cd00 <nvram_read+0x318>)
   8cc14:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc18:	009b      	lsls	r3, r3, #2
   8cc1a:	4413      	add	r3, r2
   8cc1c:	885b      	ldrh	r3, [r3, #2]
   8cc1e:	b299      	uxth	r1, r3
   8cc20:	4a38      	ldr	r2, [pc, #224]	; (8cd04 <nvram_read+0x31c>)
   8cc22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc26:	009b      	lsls	r3, r3, #2
   8cc28:	4413      	add	r3, r2
   8cc2a:	460a      	mov	r2, r1
   8cc2c:	805a      	strh	r2, [r3, #2]
			Temp3[i].volts = Temp1[i].volts;
   8cc2e:	4a34      	ldr	r2, [pc, #208]	; (8cd00 <nvram_read+0x318>)
   8cc30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc34:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cc38:	b299      	uxth	r1, r3
   8cc3a:	4a33      	ldr	r2, [pc, #204]	; (8cd08 <nvram_read+0x320>)
   8cc3c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc40:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp3[i].temperature = Temp1[i].temperature;
   8cc44:	4a2e      	ldr	r2, [pc, #184]	; (8cd00 <nvram_read+0x318>)
   8cc46:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc4a:	009b      	lsls	r3, r3, #2
   8cc4c:	4413      	add	r3, r2
   8cc4e:	885b      	ldrh	r3, [r3, #2]
   8cc50:	b299      	uxth	r1, r3
   8cc52:	4a2d      	ldr	r2, [pc, #180]	; (8cd08 <nvram_read+0x320>)
   8cc54:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc58:	009b      	lsls	r3, r3, #2
   8cc5a:	4413      	add	r3, r2
   8cc5c:	460a      	mov	r2, r1
   8cc5e:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			Temp1[i].volts = Temp1_1[i].volts;
			Temp1[i].temperature = Temp1_1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cc60:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc64:	3301      	adds	r3, #1
   8cc66:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc6e:	2b74      	cmp	r3, #116	; 0x74
   8cc70:	d9c4      	bls.n	8cbfc <nvram_read+0x214>
			Temp2[i].volts = Temp1[i].volts;
			Temp2[i].temperature = Temp1[i].temperature;
			Temp3[i].volts = Temp1[i].volts;
			Temp3[i].temperature = Temp1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cc72:	2300      	movs	r3, #0
   8cc74:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc78:	e01d      	b.n	8ccb6 <nvram_read+0x2ce>
		{
			checksum = checksum+Temp1[i].volts;
   8cc7a:	4a21      	ldr	r2, [pc, #132]	; (8cd00 <nvram_read+0x318>)
   8cc7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc80:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cc84:	b29b      	uxth	r3, r3
   8cc86:	461a      	mov	r2, r3
   8cc88:	4b20      	ldr	r3, [pc, #128]	; (8cd0c <nvram_read+0x324>)
   8cc8a:	681b      	ldr	r3, [r3, #0]
   8cc8c:	4413      	add	r3, r2
   8cc8e:	4a1f      	ldr	r2, [pc, #124]	; (8cd0c <nvram_read+0x324>)
   8cc90:	6013      	str	r3, [r2, #0]
			checksum = checksum+Temp1[i].temperature;
   8cc92:	4a1b      	ldr	r2, [pc, #108]	; (8cd00 <nvram_read+0x318>)
   8cc94:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc98:	009b      	lsls	r3, r3, #2
   8cc9a:	4413      	add	r3, r2
   8cc9c:	885b      	ldrh	r3, [r3, #2]
   8cc9e:	b29b      	uxth	r3, r3
   8cca0:	461a      	mov	r2, r3
   8cca2:	4b1a      	ldr	r3, [pc, #104]	; (8cd0c <nvram_read+0x324>)
   8cca4:	681b      	ldr	r3, [r3, #0]
   8cca6:	4413      	add	r3, r2
   8cca8:	4a18      	ldr	r2, [pc, #96]	; (8cd0c <nvram_read+0x324>)
   8ccaa:	6013      	str	r3, [r2, #0]
			Temp2[i].volts = Temp1[i].volts;
			Temp2[i].temperature = Temp1[i].temperature;
			Temp3[i].volts = Temp1[i].volts;
			Temp3[i].temperature = Temp1[i].temperature;
		}
		for (i=0;i<117;i++)
   8ccac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccb0:	3301      	adds	r3, #1
   8ccb2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ccb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccba:	2b74      	cmp	r3, #116	; 0x74
   8ccbc:	d9dd      	bls.n	8cc7a <nvram_read+0x292>
		{
			checksum = checksum+Temp1[i].volts;
			checksum = checksum+Temp1[i].temperature;
		}
		checksum_cal(checksum);
   8ccbe:	4b13      	ldr	r3, [pc, #76]	; (8cd0c <nvram_read+0x324>)
   8ccc0:	681b      	ldr	r3, [r3, #0]
   8ccc2:	4618      	mov	r0, r3
   8ccc4:	4b12      	ldr	r3, [pc, #72]	; (8cd10 <nvram_read+0x328>)
   8ccc6:	4798      	blx	r3
		checksum = 0;
   8ccc8:	4b10      	ldr	r3, [pc, #64]	; (8cd0c <nvram_read+0x324>)
   8ccca:	2200      	movs	r2, #0
   8cccc:	601a      	str	r2, [r3, #0]
		break;
   8ccce:	e2bb      	b.n	8d248 <nvram_read+0x860>
		case CAL_PS1:
		
		for (i=0;i<size_var/2;i++)
   8ccd0:	2300      	movs	r3, #0
   8ccd2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ccd6:	e03d      	b.n	8cd54 <nvram_read+0x36c>
   8ccd8:	20072138 	.word	0x20072138
   8ccdc:	20073044 	.word	0x20073044
   8cce0:	000a2be1 	.word	0x000a2be1
   8cce4:	20070478 	.word	0x20070478
   8cce8:	0008c9d5 	.word	0x0008c9d5
   8ccec:	000186a0 	.word	0x000186a0
   8ccf0:	4008c000 	.word	0x4008c000
   8ccf4:	00080629 	.word	0x00080629
   8ccf8:	00080761 	.word	0x00080761
   8ccfc:	20072158 	.word	0x20072158
   8cd00:	20071638 	.word	0x20071638
   8cd04:	2007180c 	.word	0x2007180c
   8cd08:	200719e0 	.word	0x200719e0
   8cd0c:	2007213c 	.word	0x2007213c
   8cd10:	0008d275 	.word	0x0008d275
		{
			ps_1_1[i].pressure = data_received[i*2];
   8cd14:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd18:	005a      	lsls	r2, r3, #1
   8cd1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cd1e:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cd22:	4ac4      	ldr	r2, [pc, #784]	; (8d034 <nvram_read+0x64c>)
   8cd24:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd28:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_1_1[i].millivolt = data_received[(i*2)+1];
   8cd2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd30:	005b      	lsls	r3, r3, #1
   8cd32:	1c5a      	adds	r2, r3, #1
   8cd34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cd38:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cd3c:	4abd      	ldr	r2, [pc, #756]	; (8d034 <nvram_read+0x64c>)
   8cd3e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd42:	009b      	lsls	r3, r3, #2
   8cd44:	4413      	add	r3, r2
   8cd46:	460a      	mov	r2, r1
   8cd48:	805a      	strh	r2, [r3, #2]
		checksum_cal(checksum);
		checksum = 0;
		break;
		case CAL_PS1:
		
		for (i=0;i<size_var/2;i++)
   8cd4a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd4e:	3301      	adds	r3, #1
   8cd50:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cd54:	4bb8      	ldr	r3, [pc, #736]	; (8d038 <nvram_read+0x650>)
   8cd56:	681b      	ldr	r3, [r3, #0]
   8cd58:	085a      	lsrs	r2, r3, #1
   8cd5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd5e:	429a      	cmp	r2, r3
   8cd60:	d8d8      	bhi.n	8cd14 <nvram_read+0x32c>
		{
			ps_1_1[i].pressure = data_received[i*2];
			ps_1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<40;i++)
   8cd62:	2300      	movs	r3, #0
   8cd64:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cd68:	e01c      	b.n	8cda4 <nvram_read+0x3bc>
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
   8cd6a:	4ab2      	ldr	r2, [pc, #712]	; (8d034 <nvram_read+0x64c>)
   8cd6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd70:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8cd74:	4ab1      	ldr	r2, [pc, #708]	; (8d03c <nvram_read+0x654>)
   8cd76:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd7a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_1[i].millivolt = ps_1_1[i].millivolt;
   8cd7e:	4aad      	ldr	r2, [pc, #692]	; (8d034 <nvram_read+0x64c>)
   8cd80:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd84:	009b      	lsls	r3, r3, #2
   8cd86:	4413      	add	r3, r2
   8cd88:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8cd8c:	4aab      	ldr	r2, [pc, #684]	; (8d03c <nvram_read+0x654>)
   8cd8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd92:	009b      	lsls	r3, r3, #2
   8cd94:	4413      	add	r3, r2
   8cd96:	460a      	mov	r2, r1
   8cd98:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			ps_1_1[i].pressure = data_received[i*2];
			ps_1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<40;i++)
   8cd9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd9e:	3301      	adds	r3, #1
   8cda0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cda4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cda8:	2b27      	cmp	r3, #39	; 0x27
   8cdaa:	d9de      	bls.n	8cd6a <nvram_read+0x382>
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
			ps_1[i].millivolt = ps_1_1[i].millivolt;
		}
		for (i=0;i<40;i++)
   8cdac:	2300      	movs	r3, #0
   8cdae:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cdb2:	e036      	b.n	8ce22 <nvram_read+0x43a>
		{
			ps_2[i].pressure = ps_1[i].pressure;
   8cdb4:	4aa1      	ldr	r2, [pc, #644]	; (8d03c <nvram_read+0x654>)
   8cdb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdba:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cdbe:	b219      	sxth	r1, r3
   8cdc0:	4a9f      	ldr	r2, [pc, #636]	; (8d040 <nvram_read+0x658>)
   8cdc2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdc6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_2[i].millivolt = ps_1[i].millivolt;
   8cdca:	4a9c      	ldr	r2, [pc, #624]	; (8d03c <nvram_read+0x654>)
   8cdcc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdd0:	009b      	lsls	r3, r3, #2
   8cdd2:	4413      	add	r3, r2
   8cdd4:	885b      	ldrh	r3, [r3, #2]
   8cdd6:	b219      	sxth	r1, r3
   8cdd8:	4a99      	ldr	r2, [pc, #612]	; (8d040 <nvram_read+0x658>)
   8cdda:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdde:	009b      	lsls	r3, r3, #2
   8cde0:	4413      	add	r3, r2
   8cde2:	460a      	mov	r2, r1
   8cde4:	805a      	strh	r2, [r3, #2]
			ps_3[i].pressure = ps_1[i].pressure;
   8cde6:	4a95      	ldr	r2, [pc, #596]	; (8d03c <nvram_read+0x654>)
   8cde8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdec:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cdf0:	b219      	sxth	r1, r3
   8cdf2:	4a94      	ldr	r2, [pc, #592]	; (8d044 <nvram_read+0x65c>)
   8cdf4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdf8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_3[i].millivolt = ps_1[i].millivolt;
   8cdfc:	4a8f      	ldr	r2, [pc, #572]	; (8d03c <nvram_read+0x654>)
   8cdfe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce02:	009b      	lsls	r3, r3, #2
   8ce04:	4413      	add	r3, r2
   8ce06:	885b      	ldrh	r3, [r3, #2]
   8ce08:	b219      	sxth	r1, r3
   8ce0a:	4a8e      	ldr	r2, [pc, #568]	; (8d044 <nvram_read+0x65c>)
   8ce0c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce10:	009b      	lsls	r3, r3, #2
   8ce12:	4413      	add	r3, r2
   8ce14:	460a      	mov	r2, r1
   8ce16:	805a      	strh	r2, [r3, #2]
		for (i=0;i<40;i++)
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
			ps_1[i].millivolt = ps_1_1[i].millivolt;
		}
		for (i=0;i<40;i++)
   8ce18:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce1c:	3301      	adds	r3, #1
   8ce1e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce26:	2b27      	cmp	r3, #39	; 0x27
   8ce28:	d9c4      	bls.n	8cdb4 <nvram_read+0x3cc>
			ps_2[i].millivolt = ps_1[i].millivolt;
			ps_3[i].pressure = ps_1[i].pressure;
			ps_3[i].millivolt = ps_1[i].millivolt;
			
		}
		for (i=0;i<40;i++)
   8ce2a:	2300      	movs	r3, #0
   8ce2c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce30:	e01d      	b.n	8ce6e <nvram_read+0x486>
		{
			checksum = checksum+ps_1[i].pressure;
   8ce32:	4a82      	ldr	r2, [pc, #520]	; (8d03c <nvram_read+0x654>)
   8ce34:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce38:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce3c:	b21b      	sxth	r3, r3
   8ce3e:	461a      	mov	r2, r3
   8ce40:	4b81      	ldr	r3, [pc, #516]	; (8d048 <nvram_read+0x660>)
   8ce42:	681b      	ldr	r3, [r3, #0]
   8ce44:	4413      	add	r3, r2
   8ce46:	4a80      	ldr	r2, [pc, #512]	; (8d048 <nvram_read+0x660>)
   8ce48:	6013      	str	r3, [r2, #0]
			checksum = checksum+ps_1[i].millivolt;
   8ce4a:	4a7c      	ldr	r2, [pc, #496]	; (8d03c <nvram_read+0x654>)
   8ce4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce50:	009b      	lsls	r3, r3, #2
   8ce52:	4413      	add	r3, r2
   8ce54:	885b      	ldrh	r3, [r3, #2]
   8ce56:	b21b      	sxth	r3, r3
   8ce58:	461a      	mov	r2, r3
   8ce5a:	4b7b      	ldr	r3, [pc, #492]	; (8d048 <nvram_read+0x660>)
   8ce5c:	681b      	ldr	r3, [r3, #0]
   8ce5e:	4413      	add	r3, r2
   8ce60:	4a79      	ldr	r2, [pc, #484]	; (8d048 <nvram_read+0x660>)
   8ce62:	6013      	str	r3, [r2, #0]
			ps_2[i].millivolt = ps_1[i].millivolt;
			ps_3[i].pressure = ps_1[i].pressure;
			ps_3[i].millivolt = ps_1[i].millivolt;
			
		}
		for (i=0;i<40;i++)
   8ce64:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce68:	3301      	adds	r3, #1
   8ce6a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce6e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce72:	2b27      	cmp	r3, #39	; 0x27
   8ce74:	d9dd      	bls.n	8ce32 <nvram_read+0x44a>
		{
			checksum = checksum+ps_1[i].pressure;
			checksum = checksum+ps_1[i].millivolt;
		}
		checksum_cal(checksum);
   8ce76:	4b74      	ldr	r3, [pc, #464]	; (8d048 <nvram_read+0x660>)
   8ce78:	681b      	ldr	r3, [r3, #0]
   8ce7a:	4618      	mov	r0, r3
   8ce7c:	4b73      	ldr	r3, [pc, #460]	; (8d04c <nvram_read+0x664>)
   8ce7e:	4798      	blx	r3
		checksum=0;
   8ce80:	4b71      	ldr	r3, [pc, #452]	; (8d048 <nvram_read+0x660>)
   8ce82:	2200      	movs	r2, #0
   8ce84:	601a      	str	r2, [r3, #0]
		break;
   8ce86:	e1df      	b.n	8d248 <nvram_read+0x860>
		case CAL_APT:
		for (i=0;i<size_var/2;i++)
   8ce88:	2300      	movs	r3, #0
   8ce8a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce8e:	e01f      	b.n	8ced0 <nvram_read+0x4e8>
		{
			apt1_1[i].pressure = data_received[i*2];
   8ce90:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce94:	005a      	lsls	r2, r3, #1
   8ce96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8ce9a:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8ce9e:	4a6c      	ldr	r2, [pc, #432]	; (8d050 <nvram_read+0x668>)
   8cea0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cea4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			apt1_1[i].millivolt = data_received[(i*2)+1];
   8cea8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceac:	005b      	lsls	r3, r3, #1
   8ceae:	1c5a      	adds	r2, r3, #1
   8ceb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8ceb4:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8ceb8:	4a65      	ldr	r2, [pc, #404]	; (8d050 <nvram_read+0x668>)
   8ceba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cebe:	009b      	lsls	r3, r3, #2
   8cec0:	4413      	add	r3, r2
   8cec2:	460a      	mov	r2, r1
   8cec4:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_APT:
		for (i=0;i<size_var/2;i++)
   8cec6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceca:	3301      	adds	r3, #1
   8cecc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ced0:	4b59      	ldr	r3, [pc, #356]	; (8d038 <nvram_read+0x650>)
   8ced2:	681b      	ldr	r3, [r3, #0]
   8ced4:	085a      	lsrs	r2, r3, #1
   8ced6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceda:	429a      	cmp	r2, r3
   8cedc:	d8d8      	bhi.n	8ce90 <nvram_read+0x4a8>
		{
			apt1_1[i].pressure = data_received[i*2];
			apt1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<30;i++)
   8cede:	2300      	movs	r3, #0
   8cee0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cee4:	e01c      	b.n	8cf20 <nvram_read+0x538>
		{
			apt1[i].pressure = apt1_1[i].pressure;
   8cee6:	4a5a      	ldr	r2, [pc, #360]	; (8d050 <nvram_read+0x668>)
   8cee8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceec:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8cef0:	4a58      	ldr	r2, [pc, #352]	; (8d054 <nvram_read+0x66c>)
   8cef2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cef6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			apt1[i].millivolt = apt1_1[i].millivolt;
   8cefa:	4a55      	ldr	r2, [pc, #340]	; (8d050 <nvram_read+0x668>)
   8cefc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf00:	009b      	lsls	r3, r3, #2
   8cf02:	4413      	add	r3, r2
   8cf04:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8cf08:	4a52      	ldr	r2, [pc, #328]	; (8d054 <nvram_read+0x66c>)
   8cf0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf0e:	009b      	lsls	r3, r3, #2
   8cf10:	4413      	add	r3, r2
   8cf12:	460a      	mov	r2, r1
   8cf14:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			apt1_1[i].pressure = data_received[i*2];
			apt1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<30;i++)
   8cf16:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf1a:	3301      	adds	r3, #1
   8cf1c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf20:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf24:	2b1d      	cmp	r3, #29
   8cf26:	d9de      	bls.n	8cee6 <nvram_read+0x4fe>
		{
			apt1[i].pressure = apt1_1[i].pressure;
			apt1[i].millivolt = apt1_1[i].millivolt;
		}
		for (i=0;i<30;i++)
   8cf28:	2300      	movs	r3, #0
   8cf2a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf2e:	e01d      	b.n	8cf6c <nvram_read+0x584>
		{
			vpt1[i].pressure = apt1[i].pressure;
   8cf30:	4a48      	ldr	r2, [pc, #288]	; (8d054 <nvram_read+0x66c>)
   8cf32:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf36:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cf3a:	b219      	sxth	r1, r3
   8cf3c:	4a46      	ldr	r2, [pc, #280]	; (8d058 <nvram_read+0x670>)
   8cf3e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf42:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			vpt1[i].millivolt = apt1[i].millivolt;
   8cf46:	4a43      	ldr	r2, [pc, #268]	; (8d054 <nvram_read+0x66c>)
   8cf48:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf4c:	009b      	lsls	r3, r3, #2
   8cf4e:	4413      	add	r3, r2
   8cf50:	885b      	ldrh	r3, [r3, #2]
   8cf52:	b219      	sxth	r1, r3
   8cf54:	4a40      	ldr	r2, [pc, #256]	; (8d058 <nvram_read+0x670>)
   8cf56:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf5a:	009b      	lsls	r3, r3, #2
   8cf5c:	4413      	add	r3, r2
   8cf5e:	460a      	mov	r2, r1
   8cf60:	805a      	strh	r2, [r3, #2]
		for (i=0;i<30;i++)
		{
			apt1[i].pressure = apt1_1[i].pressure;
			apt1[i].millivolt = apt1_1[i].millivolt;
		}
		for (i=0;i<30;i++)
   8cf62:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf66:	3301      	adds	r3, #1
   8cf68:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf70:	2b1d      	cmp	r3, #29
   8cf72:	d9dd      	bls.n	8cf30 <nvram_read+0x548>
		{
			vpt1[i].pressure = apt1[i].pressure;
			vpt1[i].millivolt = apt1[i].millivolt;
		}
		for (i=0;i<20;i++)
   8cf74:	2300      	movs	r3, #0
   8cf76:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf7a:	e01d      	b.n	8cfb8 <nvram_read+0x5d0>
		{
			checksum = checksum+apt1[i].pressure;
   8cf7c:	4a35      	ldr	r2, [pc, #212]	; (8d054 <nvram_read+0x66c>)
   8cf7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf82:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cf86:	b21b      	sxth	r3, r3
   8cf88:	461a      	mov	r2, r3
   8cf8a:	4b2f      	ldr	r3, [pc, #188]	; (8d048 <nvram_read+0x660>)
   8cf8c:	681b      	ldr	r3, [r3, #0]
   8cf8e:	4413      	add	r3, r2
   8cf90:	4a2d      	ldr	r2, [pc, #180]	; (8d048 <nvram_read+0x660>)
   8cf92:	6013      	str	r3, [r2, #0]
			checksum = checksum+apt1[i].millivolt;
   8cf94:	4a2f      	ldr	r2, [pc, #188]	; (8d054 <nvram_read+0x66c>)
   8cf96:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf9a:	009b      	lsls	r3, r3, #2
   8cf9c:	4413      	add	r3, r2
   8cf9e:	885b      	ldrh	r3, [r3, #2]
   8cfa0:	b21b      	sxth	r3, r3
   8cfa2:	461a      	mov	r2, r3
   8cfa4:	4b28      	ldr	r3, [pc, #160]	; (8d048 <nvram_read+0x660>)
   8cfa6:	681b      	ldr	r3, [r3, #0]
   8cfa8:	4413      	add	r3, r2
   8cfaa:	4a27      	ldr	r2, [pc, #156]	; (8d048 <nvram_read+0x660>)
   8cfac:	6013      	str	r3, [r2, #0]
		for (i=0;i<30;i++)
		{
			vpt1[i].pressure = apt1[i].pressure;
			vpt1[i].millivolt = apt1[i].millivolt;
		}
		for (i=0;i<20;i++)
   8cfae:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfb2:	3301      	adds	r3, #1
   8cfb4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfb8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfbc:	2b13      	cmp	r3, #19
   8cfbe:	d9dd      	bls.n	8cf7c <nvram_read+0x594>
		{
			checksum = checksum+apt1[i].pressure;
			checksum = checksum+apt1[i].millivolt;
		}
		checksum_cal(checksum);
   8cfc0:	4b21      	ldr	r3, [pc, #132]	; (8d048 <nvram_read+0x660>)
   8cfc2:	681b      	ldr	r3, [r3, #0]
   8cfc4:	4618      	mov	r0, r3
   8cfc6:	4b21      	ldr	r3, [pc, #132]	; (8d04c <nvram_read+0x664>)
   8cfc8:	4798      	blx	r3
		checksum=0;
   8cfca:	4b1f      	ldr	r3, [pc, #124]	; (8d048 <nvram_read+0x660>)
   8cfcc:	2200      	movs	r2, #0
   8cfce:	601a      	str	r2, [r3, #0]
		break;
   8cfd0:	e13a      	b.n	8d248 <nvram_read+0x860>
		case CAL_COND:
		for (i=0;i<size_var/2;i++)
   8cfd2:	2300      	movs	r3, #0
   8cfd4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfd8:	e021      	b.n	8d01e <nvram_read+0x636>
		{
			cond_1[i].volts = data_received[i*2];
   8cfda:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfde:	005a      	lsls	r2, r3, #1
   8cfe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cfe4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cfe8:	b299      	uxth	r1, r3
   8cfea:	4a1c      	ldr	r2, [pc, #112]	; (8d05c <nvram_read+0x674>)
   8cfec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cff0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			cond_1[i].conductivity = data_received[(i*2)+1];
   8cff4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cff8:	005b      	lsls	r3, r3, #1
   8cffa:	1c5a      	adds	r2, r3, #1
   8cffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d000:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d004:	b299      	uxth	r1, r3
   8d006:	4a15      	ldr	r2, [pc, #84]	; (8d05c <nvram_read+0x674>)
   8d008:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d00c:	009b      	lsls	r3, r3, #2
   8d00e:	4413      	add	r3, r2
   8d010:	460a      	mov	r2, r1
   8d012:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_COND:
		for (i=0;i<size_var/2;i++)
   8d014:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d018:	3301      	adds	r3, #1
   8d01a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d01e:	4b06      	ldr	r3, [pc, #24]	; (8d038 <nvram_read+0x650>)
   8d020:	681b      	ldr	r3, [r3, #0]
   8d022:	085a      	lsrs	r2, r3, #1
   8d024:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d028:	429a      	cmp	r2, r3
   8d02a:	d8d6      	bhi.n	8cfda <nvram_read+0x5f2>
		{
			cond_1[i].volts = data_received[i*2];
			cond_1[i].conductivity = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d02c:	2300      	movs	r3, #0
   8d02e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d032:	e031      	b.n	8d098 <nvram_read+0x6b0>
   8d034:	2007232c 	.word	0x2007232c
   8d038:	20072138 	.word	0x20072138
   8d03c:	20071ca4 	.word	0x20071ca4
   8d040:	20071d6c 	.word	0x20071d6c
   8d044:	20071e34 	.word	0x20071e34
   8d048:	2007213c 	.word	0x2007213c
   8d04c:	0008d275 	.word	0x0008d275
   8d050:	200723cc 	.word	0x200723cc
   8d054:	20071bb4 	.word	0x20071bb4
   8d058:	20071c2c 	.word	0x20071c2c
   8d05c:	20072444 	.word	0x20072444
		{
			cond[i].volts = cond_1[i].volts;
   8d060:	4a7c      	ldr	r2, [pc, #496]	; (8d254 <nvram_read+0x86c>)
   8d062:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d066:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d06a:	4a7b      	ldr	r2, [pc, #492]	; (8d258 <nvram_read+0x870>)
   8d06c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d070:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			cond[i].conductivity = cond_1[i].conductivity;
   8d074:	4a77      	ldr	r2, [pc, #476]	; (8d254 <nvram_read+0x86c>)
   8d076:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d07a:	009b      	lsls	r3, r3, #2
   8d07c:	4413      	add	r3, r2
   8d07e:	8859      	ldrh	r1, [r3, #2]
   8d080:	4a75      	ldr	r2, [pc, #468]	; (8d258 <nvram_read+0x870>)
   8d082:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d086:	009b      	lsls	r3, r3, #2
   8d088:	4413      	add	r3, r2
   8d08a:	460a      	mov	r2, r1
   8d08c:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			cond_1[i].volts = data_received[i*2];
			cond_1[i].conductivity = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d08e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d092:	3301      	adds	r3, #1
   8d094:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d098:	4b70      	ldr	r3, [pc, #448]	; (8d25c <nvram_read+0x874>)
   8d09a:	681b      	ldr	r3, [r3, #0]
   8d09c:	085a      	lsrs	r2, r3, #1
   8d09e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0a2:	429a      	cmp	r2, r3
   8d0a4:	d8dc      	bhi.n	8d060 <nvram_read+0x678>
		{
			cond[i].volts = cond_1[i].volts;
			cond[i].conductivity = cond_1[i].conductivity;
		}
		for (i=0;i<50;i++)
   8d0a6:	2300      	movs	r3, #0
   8d0a8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0ac:	e01d      	b.n	8d0ea <nvram_read+0x702>
		{
			checksum = checksum + cond[i].volts;
   8d0ae:	4a6a      	ldr	r2, [pc, #424]	; (8d258 <nvram_read+0x870>)
   8d0b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0b4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d0b8:	b29b      	uxth	r3, r3
   8d0ba:	461a      	mov	r2, r3
   8d0bc:	4b68      	ldr	r3, [pc, #416]	; (8d260 <nvram_read+0x878>)
   8d0be:	681b      	ldr	r3, [r3, #0]
   8d0c0:	4413      	add	r3, r2
   8d0c2:	4a67      	ldr	r2, [pc, #412]	; (8d260 <nvram_read+0x878>)
   8d0c4:	6013      	str	r3, [r2, #0]
			checksum = checksum + cond[i].conductivity;
   8d0c6:	4a64      	ldr	r2, [pc, #400]	; (8d258 <nvram_read+0x870>)
   8d0c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0cc:	009b      	lsls	r3, r3, #2
   8d0ce:	4413      	add	r3, r2
   8d0d0:	885b      	ldrh	r3, [r3, #2]
   8d0d2:	b29b      	uxth	r3, r3
   8d0d4:	461a      	mov	r2, r3
   8d0d6:	4b62      	ldr	r3, [pc, #392]	; (8d260 <nvram_read+0x878>)
   8d0d8:	681b      	ldr	r3, [r3, #0]
   8d0da:	4413      	add	r3, r2
   8d0dc:	4a60      	ldr	r2, [pc, #384]	; (8d260 <nvram_read+0x878>)
   8d0de:	6013      	str	r3, [r2, #0]
		for (i=0;i<size_var/2;i++)
		{
			cond[i].volts = cond_1[i].volts;
			cond[i].conductivity = cond_1[i].conductivity;
		}
		for (i=0;i<50;i++)
   8d0e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0e4:	3301      	adds	r3, #1
   8d0e6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0ea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0ee:	2b31      	cmp	r3, #49	; 0x31
   8d0f0:	d9dd      	bls.n	8d0ae <nvram_read+0x6c6>
		{
			checksum = checksum + cond[i].volts;
			checksum = checksum + cond[i].conductivity;
		}
		checksum_cal(checksum);
   8d0f2:	4b5b      	ldr	r3, [pc, #364]	; (8d260 <nvram_read+0x878>)
   8d0f4:	681b      	ldr	r3, [r3, #0]
   8d0f6:	4618      	mov	r0, r3
   8d0f8:	4b5a      	ldr	r3, [pc, #360]	; (8d264 <nvram_read+0x87c>)
   8d0fa:	4798      	blx	r3
		checksum=0;
   8d0fc:	4b58      	ldr	r3, [pc, #352]	; (8d260 <nvram_read+0x878>)
   8d0fe:	2200      	movs	r2, #0
   8d100:	601a      	str	r2, [r3, #0]
		break;
   8d102:	e0a1      	b.n	8d248 <nvram_read+0x860>
		case CAL_HEP:
		for (i=0;i<size_var/2;i++)
   8d104:	2300      	movs	r3, #0
   8d106:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d10a:	e021      	b.n	8d150 <nvram_read+0x768>
		{
			hp_1[i].ml = data_received[i*2];
   8d10c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d110:	005a      	lsls	r2, r3, #1
   8d112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d116:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d11a:	b299      	uxth	r1, r3
   8d11c:	4a52      	ldr	r2, [pc, #328]	; (8d268 <nvram_read+0x880>)
   8d11e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d122:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			hp_1[i].speed = data_received[(i*2)+1];
   8d126:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d12a:	005b      	lsls	r3, r3, #1
   8d12c:	1c5a      	adds	r2, r3, #1
   8d12e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d132:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d136:	b299      	uxth	r1, r3
   8d138:	4a4b      	ldr	r2, [pc, #300]	; (8d268 <nvram_read+0x880>)
   8d13a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d13e:	009b      	lsls	r3, r3, #2
   8d140:	4413      	add	r3, r2
   8d142:	460a      	mov	r2, r1
   8d144:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_HEP:
		for (i=0;i<size_var/2;i++)
   8d146:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d14a:	3301      	adds	r3, #1
   8d14c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d150:	4b42      	ldr	r3, [pc, #264]	; (8d25c <nvram_read+0x874>)
   8d152:	681b      	ldr	r3, [r3, #0]
   8d154:	085a      	lsrs	r2, r3, #1
   8d156:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d15a:	429a      	cmp	r2, r3
   8d15c:	d8d6      	bhi.n	8d10c <nvram_read+0x724>
		{
			hp_1[i].ml = data_received[i*2];
			hp_1[i].speed = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d15e:	2300      	movs	r3, #0
   8d160:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d164:	e01b      	b.n	8d19e <nvram_read+0x7b6>
		{
			hp[i].ml = hp_1[i].ml;
   8d166:	4a40      	ldr	r2, [pc, #256]	; (8d268 <nvram_read+0x880>)
   8d168:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d16c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d170:	4a3e      	ldr	r2, [pc, #248]	; (8d26c <nvram_read+0x884>)
   8d172:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d176:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			hp[i].speed = hp_1[i].speed;
   8d17a:	4a3b      	ldr	r2, [pc, #236]	; (8d268 <nvram_read+0x880>)
   8d17c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d180:	009b      	lsls	r3, r3, #2
   8d182:	4413      	add	r3, r2
   8d184:	8859      	ldrh	r1, [r3, #2]
   8d186:	4a39      	ldr	r2, [pc, #228]	; (8d26c <nvram_read+0x884>)
   8d188:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d18c:	009b      	lsls	r3, r3, #2
   8d18e:	4413      	add	r3, r2
   8d190:	460a      	mov	r2, r1
   8d192:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			hp_1[i].ml = data_received[i*2];
			hp_1[i].speed = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d194:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d198:	3301      	adds	r3, #1
   8d19a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d19e:	4b2f      	ldr	r3, [pc, #188]	; (8d25c <nvram_read+0x874>)
   8d1a0:	681b      	ldr	r3, [r3, #0]
   8d1a2:	085a      	lsrs	r2, r3, #1
   8d1a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1a8:	429a      	cmp	r2, r3
   8d1aa:	d8dc      	bhi.n	8d166 <nvram_read+0x77e>
		{
			hp[i].ml = hp_1[i].ml;
			hp[i].speed = hp_1[i].speed;
		}
		for (i=0;i<20;i++)
   8d1ac:	2300      	movs	r3, #0
   8d1ae:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1b2:	e01d      	b.n	8d1f0 <nvram_read+0x808>
		{
			checksum = checksum + hp[i].ml;
   8d1b4:	4a2d      	ldr	r2, [pc, #180]	; (8d26c <nvram_read+0x884>)
   8d1b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1ba:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d1be:	b29b      	uxth	r3, r3
   8d1c0:	461a      	mov	r2, r3
   8d1c2:	4b27      	ldr	r3, [pc, #156]	; (8d260 <nvram_read+0x878>)
   8d1c4:	681b      	ldr	r3, [r3, #0]
   8d1c6:	4413      	add	r3, r2
   8d1c8:	4a25      	ldr	r2, [pc, #148]	; (8d260 <nvram_read+0x878>)
   8d1ca:	6013      	str	r3, [r2, #0]
			checksum = checksum + hp[i].speed;
   8d1cc:	4a27      	ldr	r2, [pc, #156]	; (8d26c <nvram_read+0x884>)
   8d1ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1d2:	009b      	lsls	r3, r3, #2
   8d1d4:	4413      	add	r3, r2
   8d1d6:	885b      	ldrh	r3, [r3, #2]
   8d1d8:	b29b      	uxth	r3, r3
   8d1da:	461a      	mov	r2, r3
   8d1dc:	4b20      	ldr	r3, [pc, #128]	; (8d260 <nvram_read+0x878>)
   8d1de:	681b      	ldr	r3, [r3, #0]
   8d1e0:	4413      	add	r3, r2
   8d1e2:	4a1f      	ldr	r2, [pc, #124]	; (8d260 <nvram_read+0x878>)
   8d1e4:	6013      	str	r3, [r2, #0]
		for (i=0;i<size_var/2;i++)
		{
			hp[i].ml = hp_1[i].ml;
			hp[i].speed = hp_1[i].speed;
		}
		for (i=0;i<20;i++)
   8d1e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1ea:	3301      	adds	r3, #1
   8d1ec:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1f4:	2b13      	cmp	r3, #19
   8d1f6:	d9dd      	bls.n	8d1b4 <nvram_read+0x7cc>
		{
			checksum = checksum + hp[i].ml;
			checksum = checksum + hp[i].speed;
		}
		checksum_cal(checksum);
   8d1f8:	4b19      	ldr	r3, [pc, #100]	; (8d260 <nvram_read+0x878>)
   8d1fa:	681b      	ldr	r3, [r3, #0]
   8d1fc:	4618      	mov	r0, r3
   8d1fe:	4b19      	ldr	r3, [pc, #100]	; (8d264 <nvram_read+0x87c>)
   8d200:	4798      	blx	r3
		checksum=0;
   8d202:	4b17      	ldr	r3, [pc, #92]	; (8d260 <nvram_read+0x878>)
   8d204:	2200      	movs	r2, #0
   8d206:	601a      	str	r2, [r3, #0]
		break;
   8d208:	e01e      	b.n	8d248 <nvram_read+0x860>
		case CAL_CHECKSUM:
		for (i=0;i<size_var/2;i++)
   8d20a:	2300      	movs	r3, #0
   8d20c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d210:	e011      	b.n	8d236 <nvram_read+0x84e>
		{
			checksum_all[i] = data_received[i];
   8d212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d216:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8d21a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d21e:	b2d9      	uxtb	r1, r3
   8d220:	4a13      	ldr	r2, [pc, #76]	; (8d270 <nvram_read+0x888>)
   8d222:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d226:	4413      	add	r3, r2
   8d228:	460a      	mov	r2, r1
   8d22a:	701a      	strb	r2, [r3, #0]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_CHECKSUM:
		for (i=0;i<size_var/2;i++)
   8d22c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d230:	3301      	adds	r3, #1
   8d232:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d236:	4b09      	ldr	r3, [pc, #36]	; (8d25c <nvram_read+0x874>)
   8d238:	681b      	ldr	r3, [r3, #0]
   8d23a:	085a      	lsrs	r2, r3, #1
   8d23c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d240:	429a      	cmp	r2, r3
   8d242:	d8e6      	bhi.n	8d212 <nvram_read+0x82a>
		{
			checksum_all[i] = data_received[i];
		}
		break;
   8d244:	e000      	b.n	8d248 <nvram_read+0x860>
		default:
		break;
   8d246:	bf00      	nop
	}
	
}
   8d248:	bf00      	nop
   8d24a:	f507 7754 	add.w	r7, r7, #848	; 0x350
   8d24e:	46bd      	mov	sp, r7
   8d250:	bd80      	pop	{r7, pc}
   8d252:	bf00      	nop
   8d254:	20072444 	.word	0x20072444
   8d258:	20071fc4 	.word	0x20071fc4
   8d25c:	20072138 	.word	0x20072138
   8d260:	2007213c 	.word	0x2007213c
   8d264:	0008d275 	.word	0x0008d275
   8d268:	200724e4 	.word	0x200724e4
   8d26c:	20071efc 	.word	0x20071efc
   8d270:	2007214c 	.word	0x2007214c

0008d274 <checksum_cal>:

void checksum_cal(uint32_t val)
{
   8d274:	b480      	push	{r7}
   8d276:	b085      	sub	sp, #20
   8d278:	af00      	add	r7, sp, #0
   8d27a:	6078      	str	r0, [r7, #4]
	static uint8_t i=0;
	uint32_t val1, rem=0;
   8d27c:	2300      	movs	r3, #0
   8d27e:	60bb      	str	r3, [r7, #8]
	val1=val;
   8d280:	687b      	ldr	r3, [r7, #4]
   8d282:	60fb      	str	r3, [r7, #12]
	
	while (val1>10)
   8d284:	e01e      	b.n	8d2c4 <checksum_cal+0x50>
	{
		val1 = val1/10;
   8d286:	68fb      	ldr	r3, [r7, #12]
   8d288:	4a15      	ldr	r2, [pc, #84]	; (8d2e0 <checksum_cal+0x6c>)
   8d28a:	fba2 2303 	umull	r2, r3, r2, r3
   8d28e:	08db      	lsrs	r3, r3, #3
   8d290:	60fb      	str	r3, [r7, #12]
		rem = val1%10;
   8d292:	68fa      	ldr	r2, [r7, #12]
   8d294:	4b12      	ldr	r3, [pc, #72]	; (8d2e0 <checksum_cal+0x6c>)
   8d296:	fba3 1302 	umull	r1, r3, r3, r2
   8d29a:	08d9      	lsrs	r1, r3, #3
   8d29c:	460b      	mov	r3, r1
   8d29e:	009b      	lsls	r3, r3, #2
   8d2a0:	440b      	add	r3, r1
   8d2a2:	005b      	lsls	r3, r3, #1
   8d2a4:	1ad3      	subs	r3, r2, r3
   8d2a6:	60bb      	str	r3, [r7, #8]
		sum[i]=sum[i]+rem;
   8d2a8:	4b0e      	ldr	r3, [pc, #56]	; (8d2e4 <checksum_cal+0x70>)
   8d2aa:	781b      	ldrb	r3, [r3, #0]
   8d2ac:	4619      	mov	r1, r3
   8d2ae:	4b0d      	ldr	r3, [pc, #52]	; (8d2e4 <checksum_cal+0x70>)
   8d2b0:	781b      	ldrb	r3, [r3, #0]
   8d2b2:	461a      	mov	r2, r3
   8d2b4:	4b0c      	ldr	r3, [pc, #48]	; (8d2e8 <checksum_cal+0x74>)
   8d2b6:	5c9a      	ldrb	r2, [r3, r2]
   8d2b8:	68bb      	ldr	r3, [r7, #8]
   8d2ba:	b2db      	uxtb	r3, r3
   8d2bc:	4413      	add	r3, r2
   8d2be:	b2da      	uxtb	r2, r3
   8d2c0:	4b09      	ldr	r3, [pc, #36]	; (8d2e8 <checksum_cal+0x74>)
   8d2c2:	545a      	strb	r2, [r3, r1]
{
	static uint8_t i=0;
	uint32_t val1, rem=0;
	val1=val;
	
	while (val1>10)
   8d2c4:	68fb      	ldr	r3, [r7, #12]
   8d2c6:	2b0a      	cmp	r3, #10
   8d2c8:	d8dd      	bhi.n	8d286 <checksum_cal+0x12>
	{
		val1 = val1/10;
		rem = val1%10;
		sum[i]=sum[i]+rem;
	}
	i++;
   8d2ca:	4b06      	ldr	r3, [pc, #24]	; (8d2e4 <checksum_cal+0x70>)
   8d2cc:	781b      	ldrb	r3, [r3, #0]
   8d2ce:	3301      	adds	r3, #1
   8d2d0:	b2da      	uxtb	r2, r3
   8d2d2:	4b04      	ldr	r3, [pc, #16]	; (8d2e4 <checksum_cal+0x70>)
   8d2d4:	701a      	strb	r2, [r3, #0]
	//printf("%d\n",sum);
}
   8d2d6:	bf00      	nop
   8d2d8:	3714      	adds	r7, #20
   8d2da:	46bd      	mov	sp, r7
   8d2dc:	bc80      	pop	{r7}
   8d2de:	4770      	bx	lr
   8d2e0:	cccccccd 	.word	0xcccccccd
   8d2e4:	20072584 	.word	0x20072584
   8d2e8:	20072140 	.word	0x20072140

0008d2ec <Cl_SysStat_System_Status_Query>:

extern float slope;
volatile float avgtemp2_dummy=0,avgtemp3_dummy=0,cond_dummy=0;

Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8d2ec:	b580      	push	{r7, lr}
   8d2ee:	b096      	sub	sp, #88	; 0x58
   8d2f0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1;
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8d2f2:	463b      	mov	r3, r7
   8d2f4:	2154      	movs	r1, #84	; 0x54
   8d2f6:	4618      	mov	r0, r3
   8d2f8:	4b63      	ldr	r3, [pc, #396]	; (8d488 <Cl_SysStat_System_Status_Query+0x19c>)
   8d2fa:	4798      	blx	r3
   8d2fc:	4603      	mov	r3, r0
   8d2fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8d302:	4b62      	ldr	r3, [pc, #392]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d304:	2201      	movs	r2, #1
   8d306:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8d308:	4b60      	ldr	r3, [pc, #384]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d30a:	2201      	movs	r2, #1
   8d30c:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8d30e:	463b      	mov	r3, r7
   8d310:	4618      	mov	r0, r3
   8d312:	4b5f      	ldr	r3, [pc, #380]	; (8d490 <Cl_SysStat_System_Status_Query+0x1a4>)
   8d314:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8d316:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   8d318:	4b5c      	ldr	r3, [pc, #368]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d31a:	869a      	strh	r2, [r3, #52]	; 0x34
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8d31c:	8b7a      	ldrh	r2, [r7, #26]
   8d31e:	4b5b      	ldr	r3, [pc, #364]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d320:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8d322:	8a3b      	ldrh	r3, [r7, #16]
   8d324:	2b00      	cmp	r3, #0
   8d326:	d007      	beq.n	8d338 <Cl_SysStat_System_Status_Query+0x4c>
   8d328:	8a3b      	ldrh	r3, [r7, #16]
   8d32a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d32e:	4293      	cmp	r3, r2
   8d330:	d002      	beq.n	8d338 <Cl_SysStat_System_Status_Query+0x4c>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8d332:	8a3a      	ldrh	r2, [r7, #16]
   8d334:	4b55      	ldr	r3, [pc, #340]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d336:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8d338:	8a7b      	ldrh	r3, [r7, #18]
   8d33a:	2b00      	cmp	r3, #0
   8d33c:	d007      	beq.n	8d34e <Cl_SysStat_System_Status_Query+0x62>
   8d33e:	8a7b      	ldrh	r3, [r7, #18]
   8d340:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d344:	4293      	cmp	r3, r2
   8d346:	d002      	beq.n	8d34e <Cl_SysStat_System_Status_Query+0x62>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8d348:	8a7a      	ldrh	r2, [r7, #18]
   8d34a:	4b50      	ldr	r3, [pc, #320]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d34c:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8d34e:	8b3a      	ldrh	r2, [r7, #24]
   8d350:	4b4e      	ldr	r3, [pc, #312]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d352:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8d354:	893a      	ldrh	r2, [r7, #8]
   8d356:	4b4d      	ldr	r3, [pc, #308]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d358:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8d35a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   8d35c:	4b4b      	ldr	r3, [pc, #300]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d35e:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8d360:	887a      	ldrh	r2, [r7, #2]
   8d362:	4b4a      	ldr	r3, [pc, #296]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d364:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8d366:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   8d368:	4b48      	ldr	r3, [pc, #288]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d36a:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8d36c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   8d36e:	4b47      	ldr	r3, [pc, #284]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d370:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8d372:	4b46      	ldr	r3, [pc, #280]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d374:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   8d376:	4b45      	ldr	r3, [pc, #276]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d378:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8d37a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8d37c:	4b43      	ldr	r3, [pc, #268]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d37e:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8d380:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8d382:	4b42      	ldr	r3, [pc, #264]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d384:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8d386:	8bba      	ldrh	r2, [r7, #28]
   8d388:	4b40      	ldr	r3, [pc, #256]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d38a:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8d38c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
   8d390:	4b3e      	ldr	r3, [pc, #248]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d392:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8d394:	8bfa      	ldrh	r2, [r7, #30]
   8d396:	4b3d      	ldr	r3, [pc, #244]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d398:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8d39a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   8d39e:	2b00      	cmp	r3, #0
   8d3a0:	bf14      	ite	ne
   8d3a2:	2301      	movne	r3, #1
   8d3a4:	2300      	moveq	r3, #0
   8d3a6:	b2da      	uxtb	r2, r3
   8d3a8:	4b38      	ldr	r3, [pc, #224]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8d3ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   8d3b2:	2b00      	cmp	r3, #0
   8d3b4:	bf14      	ite	ne
   8d3b6:	2301      	movne	r3, #1
   8d3b8:	2300      	moveq	r3, #0
   8d3ba:	b2da      	uxtb	r2, r3
   8d3bc:	4b33      	ldr	r3, [pc, #204]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8d3c2:	783b      	ldrb	r3, [r7, #0]
   8d3c4:	2b00      	cmp	r3, #0
   8d3c6:	bf14      	ite	ne
   8d3c8:	2301      	movne	r3, #1
   8d3ca:	2300      	moveq	r3, #0
   8d3cc:	b2da      	uxtb	r2, r3
   8d3ce:	4b2f      	ldr	r3, [pc, #188]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3d0:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8d3d2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   8d3d6:	2b00      	cmp	r3, #0
   8d3d8:	bf14      	ite	ne
   8d3da:	2301      	movne	r3, #1
   8d3dc:	2300      	moveq	r3, #0
   8d3de:	b2da      	uxtb	r2, r3
   8d3e0:	4b2a      	ldr	r3, [pc, #168]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8d3e6:	8c3a      	ldrh	r2, [r7, #32]
   8d3e8:	4b28      	ldr	r3, [pc, #160]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3ea:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8d3ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8d3ee:	4b27      	ldr	r3, [pc, #156]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3f0:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8d3f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8d3f4:	4b25      	ldr	r3, [pc, #148]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3f6:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8d3f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   8d3fc:	4b23      	ldr	r3, [pc, #140]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d3fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8d402:	8bfa      	ldrh	r2, [r7, #30]
   8d404:	4b21      	ldr	r3, [pc, #132]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d406:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
   8d408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8d40a:	4b20      	ldr	r3, [pc, #128]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d40c:	851a      	strh	r2, [r3, #40]	; 0x28
	
				uint16_t cal_data  = (402 *100* sv_sys_statbuffer.Temp1status)/(2*32768); 
   8d40e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8d410:	461a      	mov	r2, r3
   8d412:	f649 5308 	movw	r3, #40200	; 0x9d08
   8d416:	fb03 f302 	mul.w	r3, r3, r2
   8d41a:	2b00      	cmp	r3, #0
   8d41c:	da02      	bge.n	8d424 <Cl_SysStat_System_Status_Query+0x138>
   8d41e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d422:	33ff      	adds	r3, #255	; 0xff
   8d424:	141b      	asrs	r3, r3, #16
   8d426:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				//cal_data = cal_data*100;
				res_temp_lookuptable(cal_data);
   8d42a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d42e:	4618      	mov	r0, r3
   8d430:	4b18      	ldr	r3, [pc, #96]	; (8d494 <Cl_SysStat_System_Status_Query+0x1a8>)
   8d432:	4798      	blx	r3
				
				
	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
   8d434:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8d436:	4b15      	ldr	r3, [pc, #84]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d438:	855a      	strh	r2, [r3, #42]	; 0x2a
	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
   8d43a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   8d43c:	4b13      	ldr	r3, [pc, #76]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d43e:	859a      	strh	r2, [r3, #44]	; 0x2c
	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
   8d440:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   8d442:	4b12      	ldr	r3, [pc, #72]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d444:	85da      	strh	r2, [r3, #46]	; 0x2e
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8d446:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8d448:	4b10      	ldr	r3, [pc, #64]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d44a:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8d44c:	89ba      	ldrh	r2, [r7, #12]
   8d44e:	4b0f      	ldr	r3, [pc, #60]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d450:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8d452:	89fa      	ldrh	r2, [r7, #14]
   8d454:	4b0d      	ldr	r3, [pc, #52]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d456:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8d458:	897a      	ldrh	r2, [r7, #10]
   8d45a:	4b0c      	ldr	r3, [pc, #48]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d45c:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8d45e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   8d462:	4b0a      	ldr	r3, [pc, #40]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8d468:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
   8d46c:	4b07      	ldr	r3, [pc, #28]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d46e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8d472:	88fa      	ldrh	r2, [r7, #6]
   8d474:	4b05      	ldr	r3, [pc, #20]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d476:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8d478:	88ba      	ldrh	r2, [r7, #4]
   8d47a:	4b04      	ldr	r3, [pc, #16]	; (8d48c <Cl_SysStat_System_Status_Query+0x1a0>)
   8d47c:	809a      	strh	r2, [r3, #4]
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8d47e:	2300      	movs	r3, #0
}
   8d480:	4618      	mov	r0, r3
   8d482:	3758      	adds	r7, #88	; 0x58
   8d484:	46bd      	mov	sp, r7
   8d486:	bd80      	pop	{r7, pc}
   8d488:	00091be5 	.word	0x00091be5
   8d48c:	20072dbc 	.word	0x20072dbc
   8d490:	00096dad 	.word	0x00096dad
   8d494:	0008e659 	.word	0x0008e659

0008d498 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8d498:	b480      	push	{r7}
   8d49a:	b085      	sub	sp, #20
   8d49c:	af00      	add	r7, sp, #0
   8d49e:	4603      	mov	r3, r0
   8d4a0:	6039      	str	r1, [r7, #0]
   8d4a2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8d4a4:	2300      	movs	r3, #0
   8d4a6:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8d4a8:	79fb      	ldrb	r3, [r7, #7]
   8d4aa:	3b01      	subs	r3, #1
   8d4ac:	2b2f      	cmp	r3, #47	; 0x2f
   8d4ae:	f200 81dd 	bhi.w	8d86c <Cl_SysStat_GetSensor_Status_Query+0x3d4>
   8d4b2:	a201      	add	r2, pc, #4	; (adr r2, 8d4b8 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8d4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d4b8:	0008d85f 	.word	0x0008d85f
   8d4bc:	0008d86d 	.word	0x0008d86d
   8d4c0:	0008d5df 	.word	0x0008d5df
   8d4c4:	0008d5ef 	.word	0x0008d5ef
   8d4c8:	0008d5ff 	.word	0x0008d5ff
   8d4cc:	0008d63b 	.word	0x0008d63b
   8d4d0:	0008d60f 	.word	0x0008d60f
   8d4d4:	0008d649 	.word	0x0008d649
   8d4d8:	0008d673 	.word	0x0008d673
   8d4dc:	0008d681 	.word	0x0008d681
   8d4e0:	0008d68f 	.word	0x0008d68f
   8d4e4:	0008d6bd 	.word	0x0008d6bd
   8d4e8:	0008d6eb 	.word	0x0008d6eb
   8d4ec:	0008d6f9 	.word	0x0008d6f9
   8d4f0:	0008d727 	.word	0x0008d727
   8d4f4:	0008d755 	.word	0x0008d755
   8d4f8:	0008d86d 	.word	0x0008d86d
   8d4fc:	0008d783 	.word	0x0008d783
   8d500:	0008d7b9 	.word	0x0008d7b9
   8d504:	0008d7e7 	.word	0x0008d7e7
   8d508:	0008d657 	.word	0x0008d657
   8d50c:	0008d86d 	.word	0x0008d86d
   8d510:	0008d819 	.word	0x0008d819
   8d514:	0008d827 	.word	0x0008d827
   8d518:	0008d851 	.word	0x0008d851
   8d51c:	0008d665 	.word	0x0008d665
   8d520:	0008d835 	.word	0x0008d835
   8d524:	0008d843 	.word	0x0008d843
   8d528:	0008d5b5 	.word	0x0008d5b5
   8d52c:	0008d5c3 	.word	0x0008d5c3
   8d530:	0008d5d1 	.word	0x0008d5d1
   8d534:	0008d595 	.word	0x0008d595
   8d538:	0008d5a5 	.word	0x0008d5a5
   8d53c:	0008d579 	.word	0x0008d579
   8d540:	0008d587 	.word	0x0008d587
   8d544:	0008d86d 	.word	0x0008d86d
   8d548:	0008d86d 	.word	0x0008d86d
   8d54c:	0008d86d 	.word	0x0008d86d
   8d550:	0008d86d 	.word	0x0008d86d
   8d554:	0008d86d 	.word	0x0008d86d
   8d558:	0008d86d 	.word	0x0008d86d
   8d55c:	0008d86d 	.word	0x0008d86d
   8d560:	0008d86d 	.word	0x0008d86d
   8d564:	0008d86d 	.word	0x0008d86d
   8d568:	0008d86d 	.word	0x0008d86d
   8d56c:	0008d86d 	.word	0x0008d86d
   8d570:	0008d86d 	.word	0x0008d86d
   8d574:	0008d80b 	.word	0x0008d80b
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8d578:	4b89      	ldr	r3, [pc, #548]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d57a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8d57c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d57e:	683b      	ldr	r3, [r7, #0]
   8d580:	89fa      	ldrh	r2, [r7, #14]
   8d582:	801a      	strh	r2, [r3, #0]
			break;
   8d584:	e173      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8d586:	4b86      	ldr	r3, [pc, #536]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d588:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8d58a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d58c:	683b      	ldr	r3, [r7, #0]
   8d58e:	89fa      	ldrh	r2, [r7, #14]
   8d590:	801a      	strh	r2, [r3, #0]
			break;
   8d592:	e16c      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8d594:	4b82      	ldr	r3, [pc, #520]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8d59a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d59c:	683b      	ldr	r3, [r7, #0]
   8d59e:	89fa      	ldrh	r2, [r7, #14]
   8d5a0:	801a      	strh	r2, [r3, #0]
			break;
   8d5a2:	e164      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8d5a4:	4b7e      	ldr	r3, [pc, #504]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8d5aa:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5ac:	683b      	ldr	r3, [r7, #0]
   8d5ae:	89fa      	ldrh	r2, [r7, #14]
   8d5b0:	801a      	strh	r2, [r3, #0]
			
			break;
   8d5b2:	e15c      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8d5b4:	4b7a      	ldr	r3, [pc, #488]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5b6:	889b      	ldrh	r3, [r3, #4]
   8d5b8:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5ba:	683b      	ldr	r3, [r7, #0]
   8d5bc:	89fa      	ldrh	r2, [r7, #14]
   8d5be:	801a      	strh	r2, [r3, #0]
			break;
   8d5c0:	e155      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8d5c2:	4b77      	ldr	r3, [pc, #476]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5c4:	88db      	ldrh	r3, [r3, #6]
   8d5c6:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5c8:	683b      	ldr	r3, [r7, #0]
   8d5ca:	89fa      	ldrh	r2, [r7, #14]
   8d5cc:	801a      	strh	r2, [r3, #0]
			break;
   8d5ce:	e14e      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8d5d0:	4b73      	ldr	r3, [pc, #460]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5d2:	891b      	ldrh	r3, [r3, #8]
   8d5d4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5d6:	683b      	ldr	r3, [r7, #0]
   8d5d8:	89fa      	ldrh	r2, [r7, #14]
   8d5da:	801a      	strh	r2, [r3, #0]
			break;
   8d5dc:	e147      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8d5de:	4b70      	ldr	r3, [pc, #448]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8d5e4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5e6:	683b      	ldr	r3, [r7, #0]
   8d5e8:	89fa      	ldrh	r2, [r7, #14]
   8d5ea:	801a      	strh	r2, [r3, #0]
			break;
   8d5ec:	e13f      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8d5ee:	4b6c      	ldr	r3, [pc, #432]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   8d5f4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d5f6:	683b      	ldr	r3, [r7, #0]
   8d5f8:	89fa      	ldrh	r2, [r7, #14]
   8d5fa:	801a      	strh	r2, [r3, #0]
			break;
   8d5fc:	e137      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8d5fe:	4b68      	ldr	r3, [pc, #416]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d600:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d604:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d606:	683b      	ldr	r3, [r7, #0]
   8d608:	89fa      	ldrh	r2, [r7, #14]
   8d60a:	801a      	strh	r2, [r3, #0]
			break;
   8d60c:	e12f      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8d60e:	4b65      	ldr	r3, [pc, #404]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d610:	7f9b      	ldrb	r3, [r3, #30]
   8d612:	f083 0301 	eor.w	r3, r3, #1
   8d616:	b2db      	uxtb	r3, r3
   8d618:	2b00      	cmp	r3, #0
   8d61a:	d006      	beq.n	8d62a <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8d61c:	4b60      	ldr	r3, [pc, #384]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d61e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8d620:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d622:	683b      	ldr	r3, [r7, #0]
   8d624:	89fa      	ldrh	r2, [r7, #14]
   8d626:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d628:	e121      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8d62a:	4b5e      	ldr	r3, [pc, #376]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d62c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
   8d630:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d632:	683b      	ldr	r3, [r7, #0]
   8d634:	89fa      	ldrh	r2, [r7, #14]
   8d636:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d638:	e119      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8d63a:	4b59      	ldr	r3, [pc, #356]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d63c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   8d63e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d640:	683b      	ldr	r3, [r7, #0]
   8d642:	89fa      	ldrh	r2, [r7, #14]
   8d644:	801a      	strh	r2, [r3, #0]
			break;
   8d646:	e112      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8d648:	4b55      	ldr	r3, [pc, #340]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d64a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8d64c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d64e:	683b      	ldr	r3, [r7, #0]
   8d650:	89fa      	ldrh	r2, [r7, #14]
   8d652:	801a      	strh	r2, [r3, #0]
			break;
   8d654:	e10b      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8d656:	4b52      	ldr	r3, [pc, #328]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d658:	8b9b      	ldrh	r3, [r3, #28]
   8d65a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d65c:	683b      	ldr	r3, [r7, #0]
   8d65e:	89fa      	ldrh	r2, [r7, #14]
   8d660:	801a      	strh	r2, [r3, #0]
			break;
   8d662:	e104      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8d664:	4b4e      	ldr	r3, [pc, #312]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d666:	8c1b      	ldrh	r3, [r3, #32]
   8d668:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d66a:	683b      	ldr	r3, [r7, #0]
   8d66c:	89fa      	ldrh	r2, [r7, #14]
   8d66e:	801a      	strh	r2, [r3, #0]
			break;
   8d670:	e0fd      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8d672:	4b4b      	ldr	r3, [pc, #300]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d674:	8b1b      	ldrh	r3, [r3, #24]
   8d676:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d678:	683b      	ldr	r3, [r7, #0]
   8d67a:	89fa      	ldrh	r2, [r7, #14]
   8d67c:	801a      	strh	r2, [r3, #0]
			break;
   8d67e:	e0f6      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8d680:	4b47      	ldr	r3, [pc, #284]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d682:	8b5b      	ldrh	r3, [r3, #26]
   8d684:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d686:	683b      	ldr	r3, [r7, #0]
   8d688:	89fa      	ldrh	r2, [r7, #14]
   8d68a:	801a      	strh	r2, [r3, #0]
			break;
   8d68c:	e0ef      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8d68e:	4b45      	ldr	r3, [pc, #276]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d690:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8d694:	f083 0301 	eor.w	r3, r3, #1
   8d698:	b2db      	uxtb	r3, r3
   8d69a:	2b00      	cmp	r3, #0
   8d69c:	d006      	beq.n	8d6ac <Cl_SysStat_GetSensor_Status_Query+0x214>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8d69e:	4b40      	ldr	r3, [pc, #256]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d6a0:	8a1b      	ldrh	r3, [r3, #16]
   8d6a2:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d6a4:	683b      	ldr	r3, [r7, #0]
   8d6a6:	89fa      	ldrh	r2, [r7, #14]
   8d6a8:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8d6aa:	e0e0      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8d6ac:	4b3d      	ldr	r3, [pc, #244]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d6ae:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
   8d6b2:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d6b4:	683b      	ldr	r3, [r7, #0]
   8d6b6:	89fa      	ldrh	r2, [r7, #14]
   8d6b8:	801a      	strh	r2, [r3, #0]
			}

			break;
   8d6ba:	e0d8      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8d6bc:	4b39      	ldr	r3, [pc, #228]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d6be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8d6c2:	f083 0301 	eor.w	r3, r3, #1
   8d6c6:	b2db      	uxtb	r3, r3
   8d6c8:	2b00      	cmp	r3, #0
   8d6ca:	d006      	beq.n	8d6da <Cl_SysStat_GetSensor_Status_Query+0x242>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8d6cc:	4b34      	ldr	r3, [pc, #208]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d6ce:	8a5b      	ldrh	r3, [r3, #18]
   8d6d0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d6d2:	683b      	ldr	r3, [r7, #0]
   8d6d4:	89fa      	ldrh	r2, [r7, #14]
   8d6d6:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d6d8:	e0c9      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8d6da:	4b32      	ldr	r3, [pc, #200]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d6dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   8d6e0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d6e2:	683b      	ldr	r3, [r7, #0]
   8d6e4:	89fa      	ldrh	r2, [r7, #14]
   8d6e6:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d6e8:	e0c1      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8d6ea:	4b2d      	ldr	r3, [pc, #180]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d6ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8d6ee:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d6f0:	683b      	ldr	r3, [r7, #0]
   8d6f2:	89fa      	ldrh	r2, [r7, #14]
   8d6f4:	801a      	strh	r2, [r3, #0]
			break;
   8d6f6:	e0ba      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8d6f8:	4b2a      	ldr	r3, [pc, #168]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d6fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d6fe:	f083 0301 	eor.w	r3, r3, #1
   8d702:	b2db      	uxtb	r3, r3
   8d704:	2b00      	cmp	r3, #0
   8d706:	d006      	beq.n	8d716 <Cl_SysStat_GetSensor_Status_Query+0x27e>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8d708:	4b25      	ldr	r3, [pc, #148]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d70a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8d70c:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d70e:	683b      	ldr	r3, [r7, #0]
   8d710:	89fa      	ldrh	r2, [r7, #14]
   8d712:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8d714:	e0ab      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8d716:	4b23      	ldr	r3, [pc, #140]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d718:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
   8d71c:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d71e:	683b      	ldr	r3, [r7, #0]
   8d720:	89fa      	ldrh	r2, [r7, #14]
   8d722:	801a      	strh	r2, [r3, #0]
					}
			break;
   8d724:	e0a3      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8d726:	4b1f      	ldr	r3, [pc, #124]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8d72c:	f083 0301 	eor.w	r3, r3, #1
   8d730:	b2db      	uxtb	r3, r3
   8d732:	2b00      	cmp	r3, #0
   8d734:	d006      	beq.n	8d744 <Cl_SysStat_GetSensor_Status_Query+0x2ac>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8d736:	4b1a      	ldr	r3, [pc, #104]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8d73a:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d73c:	683b      	ldr	r3, [r7, #0]
   8d73e:	89fa      	ldrh	r2, [r7, #14]
   8d740:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8d742:	e094      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8d744:	4b17      	ldr	r3, [pc, #92]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d746:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
   8d74a:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d74c:	683b      	ldr	r3, [r7, #0]
   8d74e:	89fa      	ldrh	r2, [r7, #14]
   8d750:	801a      	strh	r2, [r3, #0]
					}
			break;
   8d752:	e08c      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8d754:	4b13      	ldr	r3, [pc, #76]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8d75a:	f083 0301 	eor.w	r3, r3, #1
   8d75e:	b2db      	uxtb	r3, r3
   8d760:	2b00      	cmp	r3, #0
   8d762:	d006      	beq.n	8d772 <Cl_SysStat_GetSensor_Status_Query+0x2da>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8d764:	4b0e      	ldr	r3, [pc, #56]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8d768:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8d76a:	683b      	ldr	r3, [r7, #0]
   8d76c:	89fa      	ldrh	r2, [r7, #14]
   8d76e:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8d770:	e07d      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8d772:	4b0c      	ldr	r3, [pc, #48]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d774:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
   8d778:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8d77a:	683b      	ldr	r3, [r7, #0]
   8d77c:	89fa      	ldrh	r2, [r7, #14]
   8d77e:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8d780:	e075      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8d782:	4b08      	ldr	r3, [pc, #32]	; (8d7a4 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d784:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8d788:	f083 0301 	eor.w	r3, r3, #1
   8d78c:	b2db      	uxtb	r3, r3
   8d78e:	2b00      	cmp	r3, #0
   8d790:	d00a      	beq.n	8d7a8 <Cl_SysStat_GetSensor_Status_Query+0x310>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8d792:	4b03      	ldr	r3, [pc, #12]	; (8d7a0 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8d796:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d798:	683b      	ldr	r3, [r7, #0]
   8d79a:	89fa      	ldrh	r2, [r7, #14]
   8d79c:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8d79e:	e066      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d7a0:	20072dbc 	.word	0x20072dbc
   8d7a4:	200730a0 	.word	0x200730a0
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8d7a8:	4b34      	ldr	r3, [pc, #208]	; (8d87c <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d7aa:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
   8d7ae:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d7b0:	683b      	ldr	r3, [r7, #0]
   8d7b2:	89fa      	ldrh	r2, [r7, #14]
   8d7b4:	801a      	strh	r2, [r3, #0]
						}


			break;
   8d7b6:	e05a      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8d7b8:	4b30      	ldr	r3, [pc, #192]	; (8d87c <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d7ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8d7be:	f083 0301 	eor.w	r3, r3, #1
   8d7c2:	b2db      	uxtb	r3, r3
   8d7c4:	2b00      	cmp	r3, #0
   8d7c6:	d006      	beq.n	8d7d6 <Cl_SysStat_GetSensor_Status_Query+0x33e>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8d7c8:	4b2d      	ldr	r3, [pc, #180]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8d7cc:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d7ce:	683b      	ldr	r3, [r7, #0]
   8d7d0:	89fa      	ldrh	r2, [r7, #14]
   8d7d2:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d7d4:	e04b      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8d7d6:	4b29      	ldr	r3, [pc, #164]	; (8d87c <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d7d8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
   8d7dc:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d7de:	683b      	ldr	r3, [r7, #0]
   8d7e0:	89fa      	ldrh	r2, [r7, #14]
   8d7e2:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d7e4:	e043      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   8d7e6:	4b27      	ldr	r3, [pc, #156]	; (8d884 <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8d7e8:	781b      	ldrb	r3, [r3, #0]
   8d7ea:	2b00      	cmp	r3, #0
   8d7ec:	d106      	bne.n	8d7fc <Cl_SysStat_GetSensor_Status_Query+0x364>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8d7ee:	4b24      	ldr	r3, [pc, #144]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d7f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8d7f2:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   8d7f4:	683b      	ldr	r3, [r7, #0]
   8d7f6:	89fa      	ldrh	r2, [r7, #14]
   8d7f8:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   8d7fa:	e038      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   8d7fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8d800:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d802:	683b      	ldr	r3, [r7, #0]
   8d804:	89fa      	ldrh	r2, [r7, #14]
   8d806:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d808:	e031      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8d80a:	4b1d      	ldr	r3, [pc, #116]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d80c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8d80e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d810:	683b      	ldr	r3, [r7, #0]
   8d812:	89fa      	ldrh	r2, [r7, #14]
   8d814:	801a      	strh	r2, [r3, #0]
			break;
   8d816:	e02a      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8d818:	4b19      	ldr	r3, [pc, #100]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d81a:	899b      	ldrh	r3, [r3, #12]
   8d81c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d81e:	683b      	ldr	r3, [r7, #0]
   8d820:	89fa      	ldrh	r2, [r7, #14]
   8d822:	801a      	strh	r2, [r3, #0]
			break;
   8d824:	e023      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8d826:	4b16      	ldr	r3, [pc, #88]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d828:	89db      	ldrh	r3, [r3, #14]
   8d82a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d82c:	683b      	ldr	r3, [r7, #0]
   8d82e:	89fa      	ldrh	r2, [r7, #14]
   8d830:	801a      	strh	r2, [r3, #0]
			break;
   8d832:	e01c      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8d834:	4b12      	ldr	r3, [pc, #72]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d836:	895b      	ldrh	r3, [r3, #10]
   8d838:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d83a:	683b      	ldr	r3, [r7, #0]
   8d83c:	89fa      	ldrh	r2, [r7, #14]
   8d83e:	801a      	strh	r2, [r3, #0]
			break;
   8d840:	e015      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8d842:	4b0f      	ldr	r3, [pc, #60]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d844:	885b      	ldrh	r3, [r3, #2]
   8d846:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d848:	683b      	ldr	r3, [r7, #0]
   8d84a:	89fa      	ldrh	r2, [r7, #14]
   8d84c:	801a      	strh	r2, [r3, #0]
			break;
   8d84e:	e00e      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8d850:	4b0b      	ldr	r3, [pc, #44]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d852:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8d854:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d856:	683b      	ldr	r3, [r7, #0]
   8d858:	89fa      	ldrh	r2, [r7, #14]
   8d85a:	801a      	strh	r2, [r3, #0]
			break;
   8d85c:	e007      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8d85e:	4b08      	ldr	r3, [pc, #32]	; (8d880 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d860:	781b      	ldrb	r3, [r3, #0]
   8d862:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d864:	683b      	ldr	r3, [r7, #0]
   8d866:	89fa      	ldrh	r2, [r7, #14]
   8d868:	801a      	strh	r2, [r3, #0]
			break;
   8d86a:	e000      	b.n	8d86e <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			default:
			break;
   8d86c:	bf00      	nop
		}
	return CL_OK;
   8d86e:	2300      	movs	r3, #0
}
   8d870:	4618      	mov	r0, r3
   8d872:	3714      	adds	r7, #20
   8d874:	46bd      	mov	sp, r7
   8d876:	bc80      	pop	{r7}
   8d878:	4770      	bx	lr
   8d87a:	bf00      	nop
   8d87c:	200730a0 	.word	0x200730a0
   8d880:	20072dbc 	.word	0x20072dbc
   8d884:	2007208d 	.word	0x2007208d

0008d888 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8d888:	b5f0      	push	{r4, r5, r6, r7, lr}
   8d88a:	b099      	sub	sp, #100	; 0x64
   8d88c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8d88e:	2304      	movs	r3, #4
   8d890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8d894:	2300      	movs	r3, #0
   8d896:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	int16_t sensordata=0,temp2=0;
   8d89a:	2300      	movs	r3, #0
   8d89c:	853b      	strh	r3, [r7, #40]	; 0x28
   8d89e:	2300      	movs	r3, #0
   8d8a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8d8a4:	2300      	movs	r3, #0
   8d8a6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	int16_t sensordatamillivolts =0;
   8d8aa:	2300      	movs	r3, #0
   8d8ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t tempdata =0,count1;
   8d8b0:	2300      	movs	r3, #0
   8d8b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t Pressuredatainmillibars =0;
   8d8b6:	2300      	movs	r3, #0
   8d8b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8d8bc:	4ba6      	ldr	r3, [pc, #664]	; (8db58 <Cl_SysStat_mean_status_update+0x2d0>)
   8d8be:	781b      	ldrb	r3, [r3, #0]
   8d8c0:	2b00      	cmp	r3, #0
   8d8c2:	f000 8445 	beq.w	8e150 <Cl_SysStat_mean_status_update+0x8c8>
	{
	
		if(syncdone)
   8d8c6:	4ba4      	ldr	r3, [pc, #656]	; (8db58 <Cl_SysStat_mean_status_update+0x2d0>)
   8d8c8:	781b      	ldrb	r3, [r3, #0]
   8d8ca:	2b00      	cmp	r3, #0
   8d8cc:	f000 8440 	beq.w	8e150 <Cl_SysStat_mean_status_update+0x8c8>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8d8d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8d8d4:	4619      	mov	r1, r3
   8d8d6:	2012      	movs	r0, #18
   8d8d8:	4ba0      	ldr	r3, [pc, #640]	; (8db5c <Cl_SysStat_mean_status_update+0x2d4>)
   8d8da:	4798      	blx	r3
			{
							
				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
   8d8dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8d8e0:	461a      	mov	r2, r3
   8d8e2:	f649 5308 	movw	r3, #40200	; 0x9d08
   8d8e6:	fb03 f302 	mul.w	r3, r3, r2
   8d8ea:	2b00      	cmp	r3, #0
   8d8ec:	da02      	bge.n	8d8f4 <Cl_SysStat_mean_status_update+0x6c>
   8d8ee:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d8f2:	33ff      	adds	r3, #255	; 0xff
   8d8f4:	141b      	asrs	r3, r3, #16
   8d8f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				res_temp_lookuptable(cal_data);
   8d8fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8d8fe:	4618      	mov	r0, r3
   8d900:	4b97      	ldr	r3, [pc, #604]	; (8db60 <Cl_SysStat_mean_status_update+0x2d8>)
   8d902:	4798      	blx	r3
				avgtmp1 =	(avgtmp1*5 + res_temp_value)/6;
   8d904:	4b97      	ldr	r3, [pc, #604]	; (8db64 <Cl_SysStat_mean_status_update+0x2dc>)
   8d906:	681a      	ldr	r2, [r3, #0]
   8d908:	4b97      	ldr	r3, [pc, #604]	; (8db68 <Cl_SysStat_mean_status_update+0x2e0>)
   8d90a:	4998      	ldr	r1, [pc, #608]	; (8db6c <Cl_SysStat_mean_status_update+0x2e4>)
   8d90c:	4610      	mov	r0, r2
   8d90e:	4798      	blx	r3
   8d910:	4603      	mov	r3, r0
   8d912:	4618      	mov	r0, r3
   8d914:	4b96      	ldr	r3, [pc, #600]	; (8db70 <Cl_SysStat_mean_status_update+0x2e8>)
   8d916:	681a      	ldr	r2, [r3, #0]
   8d918:	4b96      	ldr	r3, [pc, #600]	; (8db74 <Cl_SysStat_mean_status_update+0x2ec>)
   8d91a:	4611      	mov	r1, r2
   8d91c:	4798      	blx	r3
   8d91e:	4603      	mov	r3, r0
   8d920:	461a      	mov	r2, r3
   8d922:	4b95      	ldr	r3, [pc, #596]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8d924:	4995      	ldr	r1, [pc, #596]	; (8db7c <Cl_SysStat_mean_status_update+0x2f4>)
   8d926:	4610      	mov	r0, r2
   8d928:	4798      	blx	r3
   8d92a:	4603      	mov	r3, r0
   8d92c:	461a      	mov	r2, r3
   8d92e:	4b8d      	ldr	r3, [pc, #564]	; (8db64 <Cl_SysStat_mean_status_update+0x2dc>)
   8d930:	601a      	str	r2, [r3, #0]
				uint16_t temp = avgtmp1/10;
   8d932:	4b8c      	ldr	r3, [pc, #560]	; (8db64 <Cl_SysStat_mean_status_update+0x2dc>)
   8d934:	681a      	ldr	r2, [r3, #0]
   8d936:	4b90      	ldr	r3, [pc, #576]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8d938:	4991      	ldr	r1, [pc, #580]	; (8db80 <Cl_SysStat_mean_status_update+0x2f8>)
   8d93a:	4610      	mov	r0, r2
   8d93c:	4798      	blx	r3
   8d93e:	4603      	mov	r3, r0
   8d940:	461a      	mov	r2, r3
   8d942:	4b90      	ldr	r3, [pc, #576]	; (8db84 <Cl_SysStat_mean_status_update+0x2fc>)
   8d944:	4610      	mov	r0, r2
   8d946:	4798      	blx	r3
   8d948:	4603      	mov	r3, r0
   8d94a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				temp = temp - 25 +12;
   8d94e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   8d952:	3b0d      	subs	r3, #13
   8d954:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				bulk_data[0] = temp;
   8d958:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
   8d95c:	813b      	strh	r3, [r7, #8]
				//bulk_data[0] = toggle_count_flow;
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8d95e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8d962:	4619      	mov	r1, r3
   8d964:	2013      	movs	r0, #19
   8d966:	4b7d      	ldr	r3, [pc, #500]	; (8db5c <Cl_SysStat_mean_status_update+0x2d4>)
   8d968:	4798      	blx	r3
			{
					
				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
   8d96a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8d96e:	461a      	mov	r2, r3
   8d970:	f649 5308 	movw	r3, #40200	; 0x9d08
   8d974:	fb03 f302 	mul.w	r3, r3, r2
   8d978:	2b00      	cmp	r3, #0
   8d97a:	da02      	bge.n	8d982 <Cl_SysStat_mean_status_update+0xfa>
   8d97c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d980:	33ff      	adds	r3, #255	; 0xff
   8d982:	141b      	asrs	r3, r3, #16
   8d984:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				res_temp_lookuptable(cal_data);
   8d988:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d98c:	4618      	mov	r0, r3
   8d98e:	4b74      	ldr	r3, [pc, #464]	; (8db60 <Cl_SysStat_mean_status_update+0x2d8>)
   8d990:	4798      	blx	r3
				avgtmp2 =	((avgtmp2*5 + res_temp_value)/6 );
   8d992:	4b7d      	ldr	r3, [pc, #500]	; (8db88 <Cl_SysStat_mean_status_update+0x300>)
   8d994:	681a      	ldr	r2, [r3, #0]
   8d996:	4b74      	ldr	r3, [pc, #464]	; (8db68 <Cl_SysStat_mean_status_update+0x2e0>)
   8d998:	4974      	ldr	r1, [pc, #464]	; (8db6c <Cl_SysStat_mean_status_update+0x2e4>)
   8d99a:	4610      	mov	r0, r2
   8d99c:	4798      	blx	r3
   8d99e:	4603      	mov	r3, r0
   8d9a0:	4618      	mov	r0, r3
   8d9a2:	4b73      	ldr	r3, [pc, #460]	; (8db70 <Cl_SysStat_mean_status_update+0x2e8>)
   8d9a4:	681a      	ldr	r2, [r3, #0]
   8d9a6:	4b73      	ldr	r3, [pc, #460]	; (8db74 <Cl_SysStat_mean_status_update+0x2ec>)
   8d9a8:	4611      	mov	r1, r2
   8d9aa:	4798      	blx	r3
   8d9ac:	4603      	mov	r3, r0
   8d9ae:	461a      	mov	r2, r3
   8d9b0:	4b71      	ldr	r3, [pc, #452]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8d9b2:	4972      	ldr	r1, [pc, #456]	; (8db7c <Cl_SysStat_mean_status_update+0x2f4>)
   8d9b4:	4610      	mov	r0, r2
   8d9b6:	4798      	blx	r3
   8d9b8:	4603      	mov	r3, r0
   8d9ba:	461a      	mov	r2, r3
   8d9bc:	4b72      	ldr	r3, [pc, #456]	; (8db88 <Cl_SysStat_mean_status_update+0x300>)
   8d9be:	601a      	str	r2, [r3, #0]
				uint16_t temp = avgtmp2/10;
   8d9c0:	4b71      	ldr	r3, [pc, #452]	; (8db88 <Cl_SysStat_mean_status_update+0x300>)
   8d9c2:	681a      	ldr	r2, [r3, #0]
   8d9c4:	4b6c      	ldr	r3, [pc, #432]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8d9c6:	496e      	ldr	r1, [pc, #440]	; (8db80 <Cl_SysStat_mean_status_update+0x2f8>)
   8d9c8:	4610      	mov	r0, r2
   8d9ca:	4798      	blx	r3
   8d9cc:	4603      	mov	r3, r0
   8d9ce:	461a      	mov	r2, r3
   8d9d0:	4b6c      	ldr	r3, [pc, #432]	; (8db84 <Cl_SysStat_mean_status_update+0x2fc>)
   8d9d2:	4610      	mov	r0, r2
   8d9d4:	4798      	blx	r3
   8d9d6:	4603      	mov	r3, r0
   8d9d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//	temp = temp -45;                                      // commented for machine 2
				temp = temp - 25 +12;
   8d9dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
   8d9e0:	3b0d      	subs	r3, #13
   8d9e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				bulk_data[1] = temp;
   8d9e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
   8d9ea:	817b      	strh	r3, [r7, #10]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8d9ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8d9f0:	4619      	mov	r1, r3
   8d9f2:	2014      	movs	r0, #20
   8d9f4:	4b59      	ldr	r3, [pc, #356]	; (8db5c <Cl_SysStat_mean_status_update+0x2d4>)
   8d9f6:	4798      	blx	r3
			{
				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
   8d9f8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8d9fc:	461a      	mov	r2, r3
   8d9fe:	f649 5308 	movw	r3, #40200	; 0x9d08
   8da02:	fb03 f302 	mul.w	r3, r3, r2
   8da06:	2b00      	cmp	r3, #0
   8da08:	da02      	bge.n	8da10 <Cl_SysStat_mean_status_update+0x188>
   8da0a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8da0e:	33ff      	adds	r3, #255	; 0xff
   8da10:	141b      	asrs	r3, r3, #16
   8da12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				res_temp_lookuptable(cal_data);
   8da16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   8da1a:	4618      	mov	r0, r3
   8da1c:	4b50      	ldr	r3, [pc, #320]	; (8db60 <Cl_SysStat_mean_status_update+0x2d8>)
   8da1e:	4798      	blx	r3
				avgtmp3 =	(avgtmp3*5 + res_temp_value)/6;
   8da20:	4b5a      	ldr	r3, [pc, #360]	; (8db8c <Cl_SysStat_mean_status_update+0x304>)
   8da22:	681a      	ldr	r2, [r3, #0]
   8da24:	4b50      	ldr	r3, [pc, #320]	; (8db68 <Cl_SysStat_mean_status_update+0x2e0>)
   8da26:	4951      	ldr	r1, [pc, #324]	; (8db6c <Cl_SysStat_mean_status_update+0x2e4>)
   8da28:	4610      	mov	r0, r2
   8da2a:	4798      	blx	r3
   8da2c:	4603      	mov	r3, r0
   8da2e:	4618      	mov	r0, r3
   8da30:	4b4f      	ldr	r3, [pc, #316]	; (8db70 <Cl_SysStat_mean_status_update+0x2e8>)
   8da32:	681a      	ldr	r2, [r3, #0]
   8da34:	4b4f      	ldr	r3, [pc, #316]	; (8db74 <Cl_SysStat_mean_status_update+0x2ec>)
   8da36:	4611      	mov	r1, r2
   8da38:	4798      	blx	r3
   8da3a:	4603      	mov	r3, r0
   8da3c:	461a      	mov	r2, r3
   8da3e:	4b4e      	ldr	r3, [pc, #312]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8da40:	494e      	ldr	r1, [pc, #312]	; (8db7c <Cl_SysStat_mean_status_update+0x2f4>)
   8da42:	4610      	mov	r0, r2
   8da44:	4798      	blx	r3
   8da46:	4603      	mov	r3, r0
   8da48:	461a      	mov	r2, r3
   8da4a:	4b50      	ldr	r3, [pc, #320]	; (8db8c <Cl_SysStat_mean_status_update+0x304>)
   8da4c:	601a      	str	r2, [r3, #0]
				float temp = avgtmp3/10;
   8da4e:	4b4f      	ldr	r3, [pc, #316]	; (8db8c <Cl_SysStat_mean_status_update+0x304>)
   8da50:	681a      	ldr	r2, [r3, #0]
   8da52:	4b49      	ldr	r3, [pc, #292]	; (8db78 <Cl_SysStat_mean_status_update+0x2f0>)
   8da54:	494a      	ldr	r1, [pc, #296]	; (8db80 <Cl_SysStat_mean_status_update+0x2f8>)
   8da56:	4610      	mov	r0, r2
   8da58:	4798      	blx	r3
   8da5a:	4603      	mov	r3, r0
   8da5c:	647b      	str	r3, [r7, #68]	; 0x44
				temp = temp - 31 + 14;
   8da5e:	4b4c      	ldr	r3, [pc, #304]	; (8db90 <Cl_SysStat_mean_status_update+0x308>)
   8da60:	494c      	ldr	r1, [pc, #304]	; (8db94 <Cl_SysStat_mean_status_update+0x30c>)
   8da62:	6c78      	ldr	r0, [r7, #68]	; 0x44
   8da64:	4798      	blx	r3
   8da66:	4603      	mov	r3, r0
   8da68:	461a      	mov	r2, r3
   8da6a:	4b42      	ldr	r3, [pc, #264]	; (8db74 <Cl_SysStat_mean_status_update+0x2ec>)
   8da6c:	494a      	ldr	r1, [pc, #296]	; (8db98 <Cl_SysStat_mean_status_update+0x310>)
   8da6e:	4610      	mov	r0, r2
   8da70:	4798      	blx	r3
   8da72:	4603      	mov	r3, r0
   8da74:	647b      	str	r3, [r7, #68]	; 0x44
				bulk_data[2] = temp;
   8da76:	4b49      	ldr	r3, [pc, #292]	; (8db9c <Cl_SysStat_mean_status_update+0x314>)
   8da78:	6c78      	ldr	r0, [r7, #68]	; 0x44
   8da7a:	4798      	blx	r3
   8da7c:	4603      	mov	r3, r0
   8da7e:	b21b      	sxth	r3, r3
   8da80:	81bb      	strh	r3, [r7, #12]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   8da82:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8da86:	4619      	mov	r1, r3
   8da88:	2007      	movs	r0, #7
   8da8a:	4b34      	ldr	r3, [pc, #208]	; (8db5c <Cl_SysStat_mean_status_update+0x2d4>)
   8da8c:	4798      	blx	r3
			{
			float	 cond1,	cond_final, cond1x100, cond_final_X10000;
	
			
			cond1 = sensordata/100;
   8da8e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8da92:	4a43      	ldr	r2, [pc, #268]	; (8dba0 <Cl_SysStat_mean_status_update+0x318>)
   8da94:	fb82 1203 	smull	r1, r2, r2, r3
   8da98:	1152      	asrs	r2, r2, #5
   8da9a:	17db      	asrs	r3, r3, #31
   8da9c:	1ad3      	subs	r3, r2, r3
   8da9e:	b21a      	sxth	r2, r3
   8daa0:	4b40      	ldr	r3, [pc, #256]	; (8dba4 <Cl_SysStat_mean_status_update+0x31c>)
   8daa2:	4610      	mov	r0, r2
   8daa4:	4798      	blx	r3
   8daa6:	4603      	mov	r3, r0
   8daa8:	643b      	str	r3, [r7, #64]	; 0x40
			cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   8daaa:	4b3f      	ldr	r3, [pc, #252]	; (8dba8 <Cl_SysStat_mean_status_update+0x320>)
   8daac:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8daae:	4798      	blx	r3
   8dab0:	4c3e      	ldr	r4, [pc, #248]	; (8dbac <Cl_SysStat_mean_status_update+0x324>)
   8dab2:	a321      	add	r3, pc, #132	; (adr r3, 8db38 <Cl_SysStat_mean_status_update+0x2b0>)
   8dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dab8:	47a0      	blx	r4
   8daba:	4603      	mov	r3, r0
   8dabc:	460c      	mov	r4, r1
   8dabe:	461d      	mov	r5, r3
   8dac0:	4626      	mov	r6, r4
   8dac2:	4b39      	ldr	r3, [pc, #228]	; (8dba8 <Cl_SysStat_mean_status_update+0x320>)
   8dac4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8dac6:	4798      	blx	r3
   8dac8:	4602      	mov	r2, r0
   8daca:	460b      	mov	r3, r1
   8dacc:	4c37      	ldr	r4, [pc, #220]	; (8dbac <Cl_SysStat_mean_status_update+0x324>)
   8dace:	4628      	mov	r0, r5
   8dad0:	4631      	mov	r1, r6
   8dad2:	47a0      	blx	r4
   8dad4:	4603      	mov	r3, r0
   8dad6:	460c      	mov	r4, r1
   8dad8:	461d      	mov	r5, r3
   8dada:	4626      	mov	r6, r4
   8dadc:	4b32      	ldr	r3, [pc, #200]	; (8dba8 <Cl_SysStat_mean_status_update+0x320>)
   8dade:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8dae0:	4798      	blx	r3
   8dae2:	4c32      	ldr	r4, [pc, #200]	; (8dbac <Cl_SysStat_mean_status_update+0x324>)
   8dae4:	a316      	add	r3, pc, #88	; (adr r3, 8db40 <Cl_SysStat_mean_status_update+0x2b8>)
   8dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8daea:	47a0      	blx	r4
   8daec:	4603      	mov	r3, r0
   8daee:	460c      	mov	r4, r1
   8daf0:	461a      	mov	r2, r3
   8daf2:	4623      	mov	r3, r4
   8daf4:	4c2e      	ldr	r4, [pc, #184]	; (8dbb0 <Cl_SysStat_mean_status_update+0x328>)
   8daf6:	4628      	mov	r0, r5
   8daf8:	4631      	mov	r1, r6
   8dafa:	47a0      	blx	r4
   8dafc:	4603      	mov	r3, r0
   8dafe:	460c      	mov	r4, r1
   8db00:	4618      	mov	r0, r3
   8db02:	4621      	mov	r1, r4
   8db04:	4c2a      	ldr	r4, [pc, #168]	; (8dbb0 <Cl_SysStat_mean_status_update+0x328>)
   8db06:	a310      	add	r3, pc, #64	; (adr r3, 8db48 <Cl_SysStat_mean_status_update+0x2c0>)
   8db08:	e9d3 2300 	ldrd	r2, r3, [r3]
   8db0c:	47a0      	blx	r4
   8db0e:	4603      	mov	r3, r0
   8db10:	460c      	mov	r4, r1
   8db12:	4618      	mov	r0, r3
   8db14:	4621      	mov	r1, r4
   8db16:	4c26      	ldr	r4, [pc, #152]	; (8dbb0 <Cl_SysStat_mean_status_update+0x328>)
   8db18:	a30d      	add	r3, pc, #52	; (adr r3, 8db50 <Cl_SysStat_mean_status_update+0x2c8>)
   8db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8db1e:	47a0      	blx	r4
   8db20:	4603      	mov	r3, r0
   8db22:	460c      	mov	r4, r1
   8db24:	4619      	mov	r1, r3
   8db26:	4622      	mov	r2, r4
   8db28:	4b22      	ldr	r3, [pc, #136]	; (8dbb4 <Cl_SysStat_mean_status_update+0x32c>)
   8db2a:	4608      	mov	r0, r1
   8db2c:	4611      	mov	r1, r2
   8db2e:	4798      	blx	r3
   8db30:	4603      	mov	r3, r0
   8db32:	63fb      	str	r3, [r7, #60]	; 0x3c
   8db34:	e040      	b.n	8dbb8 <Cl_SysStat_mean_status_update+0x330>
   8db36:	bf00      	nop
   8db38:	eb1c432d 	.word	0xeb1c432d
   8db3c:	3f1a36e2 	.word	0x3f1a36e2
   8db40:	d2f1a9fc 	.word	0xd2f1a9fc
   8db44:	3fa0624d 	.word	0x3fa0624d
   8db48:	51eb851f 	.word	0x51eb851f
   8db4c:	3fed1eb8 	.word	0x3fed1eb8
   8db50:	9999999a 	.word	0x9999999a
   8db54:	3fd99999 	.word	0x3fd99999
   8db58:	2007274c 	.word	0x2007274c
   8db5c:	0008d499 	.word	0x0008d499
   8db60:	0008e659 	.word	0x0008e659
   8db64:	200725ac 	.word	0x200725ac
   8db68:	000a268d 	.word	0x000a268d
   8db6c:	40a00000 	.word	0x40a00000
   8db70:	200725ec 	.word	0x200725ec
   8db74:	000a247d 	.word	0x000a247d
   8db78:	000a27f5 	.word	0x000a27f5
   8db7c:	40c00000 	.word	0x40c00000
   8db80:	41200000 	.word	0x41200000
   8db84:	000a2a65 	.word	0x000a2a65
   8db88:	200725a8 	.word	0x200725a8
   8db8c:	200725a4 	.word	0x200725a4
   8db90:	000a2479 	.word	0x000a2479
   8db94:	41f80000 	.word	0x41f80000
   8db98:	41600000 	.word	0x41600000
   8db9c:	000a2a19 	.word	0x000a2a19
   8dba0:	51eb851f 	.word	0x51eb851f
   8dba4:	000a25e5 	.word	0x000a25e5
   8dba8:	000a1d65 	.word	0x000a1d65
   8dbac:	000a1e0d 	.word	0x000a1e0d
   8dbb0:	000a1aa9 	.word	0x000a1aa9
   8dbb4:	000a23d1 	.word	0x000a23d1
			cond1x100 = cond_final*100; ;
   8dbb8:	4b7f      	ldr	r3, [pc, #508]	; (8ddb8 <Cl_SysStat_mean_status_update+0x530>)
   8dbba:	4980      	ldr	r1, [pc, #512]	; (8ddbc <Cl_SysStat_mean_status_update+0x534>)
   8dbbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   8dbbe:	4798      	blx	r3
   8dbc0:	4603      	mov	r3, r0
   8dbc2:	63bb      	str	r3, [r7, #56]	; 0x38
			cond_final_X10000= (cond1x100/(1+(avgtmp3/100  -25.0)*0.021));
   8dbc4:	4b7e      	ldr	r3, [pc, #504]	; (8ddc0 <Cl_SysStat_mean_status_update+0x538>)
   8dbc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   8dbc8:	4798      	blx	r3
   8dbca:	4605      	mov	r5, r0
   8dbcc:	460e      	mov	r6, r1
   8dbce:	4b7d      	ldr	r3, [pc, #500]	; (8ddc4 <Cl_SysStat_mean_status_update+0x53c>)
   8dbd0:	681a      	ldr	r2, [r3, #0]
   8dbd2:	4b7d      	ldr	r3, [pc, #500]	; (8ddc8 <Cl_SysStat_mean_status_update+0x540>)
   8dbd4:	4979      	ldr	r1, [pc, #484]	; (8ddbc <Cl_SysStat_mean_status_update+0x534>)
   8dbd6:	4610      	mov	r0, r2
   8dbd8:	4798      	blx	r3
   8dbda:	4603      	mov	r3, r0
   8dbdc:	461a      	mov	r2, r3
   8dbde:	4b78      	ldr	r3, [pc, #480]	; (8ddc0 <Cl_SysStat_mean_status_update+0x538>)
   8dbe0:	4610      	mov	r0, r2
   8dbe2:	4798      	blx	r3
   8dbe4:	4c79      	ldr	r4, [pc, #484]	; (8ddcc <Cl_SysStat_mean_status_update+0x544>)
   8dbe6:	f04f 0200 	mov.w	r2, #0
   8dbea:	4b79      	ldr	r3, [pc, #484]	; (8ddd0 <Cl_SysStat_mean_status_update+0x548>)
   8dbec:	47a0      	blx	r4
   8dbee:	4603      	mov	r3, r0
   8dbf0:	460c      	mov	r4, r1
   8dbf2:	4618      	mov	r0, r3
   8dbf4:	4621      	mov	r1, r4
   8dbf6:	4c77      	ldr	r4, [pc, #476]	; (8ddd4 <Cl_SysStat_mean_status_update+0x54c>)
   8dbf8:	a36d      	add	r3, pc, #436	; (adr r3, 8ddb0 <Cl_SysStat_mean_status_update+0x528>)
   8dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dbfe:	47a0      	blx	r4
   8dc00:	4603      	mov	r3, r0
   8dc02:	460c      	mov	r4, r1
   8dc04:	4618      	mov	r0, r3
   8dc06:	4621      	mov	r1, r4
   8dc08:	4c73      	ldr	r4, [pc, #460]	; (8ddd8 <Cl_SysStat_mean_status_update+0x550>)
   8dc0a:	f04f 0200 	mov.w	r2, #0
   8dc0e:	4b73      	ldr	r3, [pc, #460]	; (8dddc <Cl_SysStat_mean_status_update+0x554>)
   8dc10:	47a0      	blx	r4
   8dc12:	4603      	mov	r3, r0
   8dc14:	460c      	mov	r4, r1
   8dc16:	461a      	mov	r2, r3
   8dc18:	4623      	mov	r3, r4
   8dc1a:	4c71      	ldr	r4, [pc, #452]	; (8dde0 <Cl_SysStat_mean_status_update+0x558>)
   8dc1c:	4628      	mov	r0, r5
   8dc1e:	4631      	mov	r1, r6
   8dc20:	47a0      	blx	r4
   8dc22:	4603      	mov	r3, r0
   8dc24:	460c      	mov	r4, r1
   8dc26:	4619      	mov	r1, r3
   8dc28:	4622      	mov	r2, r4
   8dc2a:	4b6e      	ldr	r3, [pc, #440]	; (8dde4 <Cl_SysStat_mean_status_update+0x55c>)
   8dc2c:	4608      	mov	r0, r1
   8dc2e:	4611      	mov	r1, r2
   8dc30:	4798      	blx	r3
   8dc32:	4603      	mov	r3, r0
   8dc34:	637b      	str	r3, [r7, #52]	; 0x34
		//	cond_final_X10000=  cond_final_X10000 * 2 + 100;
	//		cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
			avgcond = (avgcond * 5 + cond_final_X10000)/6;
   8dc36:	4b6c      	ldr	r3, [pc, #432]	; (8dde8 <Cl_SysStat_mean_status_update+0x560>)
   8dc38:	681a      	ldr	r2, [r3, #0]
   8dc3a:	4b5f      	ldr	r3, [pc, #380]	; (8ddb8 <Cl_SysStat_mean_status_update+0x530>)
   8dc3c:	496b      	ldr	r1, [pc, #428]	; (8ddec <Cl_SysStat_mean_status_update+0x564>)
   8dc3e:	4610      	mov	r0, r2
   8dc40:	4798      	blx	r3
   8dc42:	4603      	mov	r3, r0
   8dc44:	461a      	mov	r2, r3
   8dc46:	4b6a      	ldr	r3, [pc, #424]	; (8ddf0 <Cl_SysStat_mean_status_update+0x568>)
   8dc48:	6b79      	ldr	r1, [r7, #52]	; 0x34
   8dc4a:	4610      	mov	r0, r2
   8dc4c:	4798      	blx	r3
   8dc4e:	4603      	mov	r3, r0
   8dc50:	461a      	mov	r2, r3
   8dc52:	4b5d      	ldr	r3, [pc, #372]	; (8ddc8 <Cl_SysStat_mean_status_update+0x540>)
   8dc54:	4967      	ldr	r1, [pc, #412]	; (8ddf4 <Cl_SysStat_mean_status_update+0x56c>)
   8dc56:	4610      	mov	r0, r2
   8dc58:	4798      	blx	r3
   8dc5a:	4603      	mov	r3, r0
   8dc5c:	461a      	mov	r2, r3
   8dc5e:	4b62      	ldr	r3, [pc, #392]	; (8dde8 <Cl_SysStat_mean_status_update+0x560>)
   8dc60:	601a      	str	r2, [r3, #0]
				else
				{
			//		avgcond =cond_final * 10 ;
				}
	//			bulk_data[0] = cond1x100;
				bulk_data[3] = avgcond;					//   chnaged on 01072017
   8dc62:	4b61      	ldr	r3, [pc, #388]	; (8dde8 <Cl_SysStat_mean_status_update+0x560>)
   8dc64:	681a      	ldr	r2, [r3, #0]
   8dc66:	4b64      	ldr	r3, [pc, #400]	; (8ddf8 <Cl_SysStat_mean_status_update+0x570>)
   8dc68:	4610      	mov	r0, r2
   8dc6a:	4798      	blx	r3
   8dc6c:	4603      	mov	r3, r0
   8dc6e:	b21b      	sxth	r3, r3
   8dc70:	81fb      	strh	r3, [r7, #14]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
			}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   8dc72:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8dc76:	4619      	mov	r1, r3
   8dc78:	2022      	movs	r0, #34	; 0x22
   8dc7a:	4b60      	ldr	r3, [pc, #384]	; (8ddfc <Cl_SysStat_mean_status_update+0x574>)
   8dc7c:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   8dc7e:	4b5a      	ldr	r3, [pc, #360]	; (8dde8 <Cl_SysStat_mean_status_update+0x560>)
   8dc80:	681a      	ldr	r2, [r3, #0]
   8dc82:	4b5f      	ldr	r3, [pc, #380]	; (8de00 <Cl_SysStat_mean_status_update+0x578>)
   8dc84:	f04f 0100 	mov.w	r1, #0
   8dc88:	4610      	mov	r0, r2
   8dc8a:	4798      	blx	r3
   8dc8c:	4603      	mov	r3, r0
   8dc8e:	2b00      	cmp	r3, #0
   8dc90:	d008      	beq.n	8dca4 <Cl_SysStat_mean_status_update+0x41c>
				{
					avgcond_acid = sensordata;
   8dc92:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
   8dc96:	4b5b      	ldr	r3, [pc, #364]	; (8de04 <Cl_SysStat_mean_status_update+0x57c>)
   8dc98:	4610      	mov	r0, r2
   8dc9a:	4798      	blx	r3
   8dc9c:	4602      	mov	r2, r0
   8dc9e:	4b5a      	ldr	r3, [pc, #360]	; (8de08 <Cl_SysStat_mean_status_update+0x580>)
   8dca0:	601a      	str	r2, [r3, #0]
   8dca2:	e01b      	b.n	8dcdc <Cl_SysStat_mean_status_update+0x454>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   8dca4:	4b58      	ldr	r3, [pc, #352]	; (8de08 <Cl_SysStat_mean_status_update+0x580>)
   8dca6:	681a      	ldr	r2, [r3, #0]
   8dca8:	4b43      	ldr	r3, [pc, #268]	; (8ddb8 <Cl_SysStat_mean_status_update+0x530>)
   8dcaa:	4950      	ldr	r1, [pc, #320]	; (8ddec <Cl_SysStat_mean_status_update+0x564>)
   8dcac:	4610      	mov	r0, r2
   8dcae:	4798      	blx	r3
   8dcb0:	4603      	mov	r3, r0
   8dcb2:	461c      	mov	r4, r3
   8dcb4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
   8dcb8:	4b52      	ldr	r3, [pc, #328]	; (8de04 <Cl_SysStat_mean_status_update+0x57c>)
   8dcba:	4610      	mov	r0, r2
   8dcbc:	4798      	blx	r3
   8dcbe:	4602      	mov	r2, r0
   8dcc0:	4b4b      	ldr	r3, [pc, #300]	; (8ddf0 <Cl_SysStat_mean_status_update+0x568>)
   8dcc2:	4611      	mov	r1, r2
   8dcc4:	4620      	mov	r0, r4
   8dcc6:	4798      	blx	r3
   8dcc8:	4603      	mov	r3, r0
   8dcca:	461a      	mov	r2, r3
   8dccc:	4b3e      	ldr	r3, [pc, #248]	; (8ddc8 <Cl_SysStat_mean_status_update+0x540>)
   8dcce:	4949      	ldr	r1, [pc, #292]	; (8ddf4 <Cl_SysStat_mean_status_update+0x56c>)
   8dcd0:	4610      	mov	r0, r2
   8dcd2:	4798      	blx	r3
   8dcd4:	4603      	mov	r3, r0
   8dcd6:	461a      	mov	r2, r3
   8dcd8:	4b4b      	ldr	r3, [pc, #300]	; (8de08 <Cl_SysStat_mean_status_update+0x580>)
   8dcda:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8dcdc:	2300      	movs	r3, #0
   8dcde:	607b      	str	r3, [r7, #4]
				cl_tdata.Twobyte = avgcond_acid;
   8dce0:	4b49      	ldr	r3, [pc, #292]	; (8de08 <Cl_SysStat_mean_status_update+0x580>)
   8dce2:	681a      	ldr	r2, [r3, #0]
   8dce4:	4b49      	ldr	r3, [pc, #292]	; (8de0c <Cl_SysStat_mean_status_update+0x584>)
   8dce6:	4610      	mov	r0, r2
   8dce8:	4798      	blx	r3
   8dcea:	4603      	mov	r3, r0
   8dcec:	b29b      	uxth	r3, r3
   8dcee:	80bb      	strh	r3, [r7, #4]
				cl_tdata.bytearray[2] = 4;
   8dcf0:	2304      	movs	r3, #4
   8dcf2:	71bb      	strb	r3, [r7, #6]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8dcf4:	1d3b      	adds	r3, r7, #4
   8dcf6:	2204      	movs	r2, #4
   8dcf8:	4619      	mov	r1, r3
   8dcfa:	2037      	movs	r0, #55	; 0x37
   8dcfc:	4b44      	ldr	r3, [pc, #272]	; (8de10 <Cl_SysStat_mean_status_update+0x588>)
   8dcfe:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&sensordata);
   8dd00:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8dd04:	4619      	mov	r1, r3
   8dd06:	2023      	movs	r0, #35	; 0x23
   8dd08:	4b3c      	ldr	r3, [pc, #240]	; (8ddfc <Cl_SysStat_mean_status_update+0x574>)
   8dd0a:	4798      	blx	r3
				
			}
			#endif
		//	bulk_data[1] = sensordata;
		
					if(avgcond == 0)
   8dd0c:	4b36      	ldr	r3, [pc, #216]	; (8dde8 <Cl_SysStat_mean_status_update+0x560>)
   8dd0e:	681a      	ldr	r2, [r3, #0]
   8dd10:	4b3b      	ldr	r3, [pc, #236]	; (8de00 <Cl_SysStat_mean_status_update+0x578>)
   8dd12:	f04f 0100 	mov.w	r1, #0
   8dd16:	4610      	mov	r0, r2
   8dd18:	4798      	blx	r3
   8dd1a:	4603      	mov	r3, r0
   8dd1c:	2b00      	cmp	r3, #0
   8dd1e:	d008      	beq.n	8dd32 <Cl_SysStat_mean_status_update+0x4aa>
				{
					avgcond_bicarb = sensordata;
   8dd20:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
   8dd24:	4b37      	ldr	r3, [pc, #220]	; (8de04 <Cl_SysStat_mean_status_update+0x57c>)
   8dd26:	4610      	mov	r0, r2
   8dd28:	4798      	blx	r3
   8dd2a:	4602      	mov	r2, r0
   8dd2c:	4b39      	ldr	r3, [pc, #228]	; (8de14 <Cl_SysStat_mean_status_update+0x58c>)
   8dd2e:	601a      	str	r2, [r3, #0]
   8dd30:	e01b      	b.n	8dd6a <Cl_SysStat_mean_status_update+0x4e2>
				}
				else
				{
					avgcond_bicarb =(avgcond_bicarb*5 + sensordata)/6;
   8dd32:	4b38      	ldr	r3, [pc, #224]	; (8de14 <Cl_SysStat_mean_status_update+0x58c>)
   8dd34:	681a      	ldr	r2, [r3, #0]
   8dd36:	4b20      	ldr	r3, [pc, #128]	; (8ddb8 <Cl_SysStat_mean_status_update+0x530>)
   8dd38:	492c      	ldr	r1, [pc, #176]	; (8ddec <Cl_SysStat_mean_status_update+0x564>)
   8dd3a:	4610      	mov	r0, r2
   8dd3c:	4798      	blx	r3
   8dd3e:	4603      	mov	r3, r0
   8dd40:	461c      	mov	r4, r3
   8dd42:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
   8dd46:	4b2f      	ldr	r3, [pc, #188]	; (8de04 <Cl_SysStat_mean_status_update+0x57c>)
   8dd48:	4610      	mov	r0, r2
   8dd4a:	4798      	blx	r3
   8dd4c:	4602      	mov	r2, r0
   8dd4e:	4b28      	ldr	r3, [pc, #160]	; (8ddf0 <Cl_SysStat_mean_status_update+0x568>)
   8dd50:	4611      	mov	r1, r2
   8dd52:	4620      	mov	r0, r4
   8dd54:	4798      	blx	r3
   8dd56:	4603      	mov	r3, r0
   8dd58:	461a      	mov	r2, r3
   8dd5a:	4b1b      	ldr	r3, [pc, #108]	; (8ddc8 <Cl_SysStat_mean_status_update+0x540>)
   8dd5c:	4925      	ldr	r1, [pc, #148]	; (8ddf4 <Cl_SysStat_mean_status_update+0x56c>)
   8dd5e:	4610      	mov	r0, r2
   8dd60:	4798      	blx	r3
   8dd62:	4603      	mov	r3, r0
   8dd64:	461a      	mov	r2, r3
   8dd66:	4b2b      	ldr	r3, [pc, #172]	; (8de14 <Cl_SysStat_mean_status_update+0x58c>)
   8dd68:	601a      	str	r2, [r3, #0]
// 				cl_tdata.word =0;
// 				cl_tdata.Twobyte = avgcond_bicarb;
// 				cl_tdata.bytearray[2] = 6;
// 				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8dd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8dd6e:	4619      	mov	r1, r3
   8dd70:	2019      	movs	r0, #25
   8dd72:	4b22      	ldr	r3, [pc, #136]	; (8ddfc <Cl_SysStat_mean_status_update+0x574>)
   8dd74:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8dd76:	2300      	movs	r3, #0
   8dd78:	627b      	str	r3, [r7, #36]	; 0x24
				cl_tdata.Twobyte = sensordata;
   8dd7a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8dd7e:	b29b      	uxth	r3, r3
   8dd80:	84bb      	strh	r3, [r7, #36]	; 0x24
				cl_tdata.bytearray[2] = 3;
   8dd82:	2303      	movs	r3, #3
   8dd84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bulk_data[4] = sensordata;
   8dd88:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8dd8c:	823b      	strh	r3, [r7, #16]
				if(prev_flow_status == sensordata)
   8dd8e:	4b22      	ldr	r3, [pc, #136]	; (8de18 <Cl_SysStat_mean_status_update+0x590>)
   8dd90:	f9b3 2000 	ldrsh.w	r2, [r3]
   8dd94:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   8dd98:	429a      	cmp	r2, r3
   8dd9a:	d141      	bne.n	8de20 <Cl_SysStat_mean_status_update+0x598>
				{
					if(flow_counter++ > 10)
   8dd9c:	4b1f      	ldr	r3, [pc, #124]	; (8de1c <Cl_SysStat_mean_status_update+0x594>)
   8dd9e:	781b      	ldrb	r3, [r3, #0]
   8dda0:	3301      	adds	r3, #1
   8dda2:	b2da      	uxtb	r2, r3
   8dda4:	4b1d      	ldr	r3, [pc, #116]	; (8de1c <Cl_SysStat_mean_status_update+0x594>)
   8dda6:	701a      	strb	r2, [r3, #0]
   8dda8:	e03d      	b.n	8de26 <Cl_SysStat_mean_status_update+0x59e>
   8ddaa:	bf00      	nop
   8ddac:	f3af 8000 	nop.w
   8ddb0:	24dd2f1b 	.word	0x24dd2f1b
   8ddb4:	3f958106 	.word	0x3f958106
   8ddb8:	000a268d 	.word	0x000a268d
   8ddbc:	42c80000 	.word	0x42c80000
   8ddc0:	000a1d65 	.word	0x000a1d65
   8ddc4:	200725a4 	.word	0x200725a4
   8ddc8:	000a27f5 	.word	0x000a27f5
   8ddcc:	000a1aa5 	.word	0x000a1aa5
   8ddd0:	40390000 	.word	0x40390000
   8ddd4:	000a1e0d 	.word	0x000a1e0d
   8ddd8:	000a1aa9 	.word	0x000a1aa9
   8dddc:	3ff00000 	.word	0x3ff00000
   8dde0:	000a2061 	.word	0x000a2061
   8dde4:	000a23d1 	.word	0x000a23d1
   8dde8:	200725b0 	.word	0x200725b0
   8ddec:	40a00000 	.word	0x40a00000
   8ddf0:	000a247d 	.word	0x000a247d
   8ddf4:	40c00000 	.word	0x40c00000
   8ddf8:	000a2a19 	.word	0x000a2a19
   8ddfc:	0008d499 	.word	0x0008d499
   8de00:	000a29b5 	.word	0x000a29b5
   8de04:	000a25e5 	.word	0x000a25e5
   8de08:	200725b4 	.word	0x200725b4
   8de0c:	000a2a65 	.word	0x000a2a65
   8de10:	00098601 	.word	0x00098601
   8de14:	200725b8 	.word	0x200725b8
   8de18:	200725c4 	.word	0x200725c4
   8de1c:	200725c6 	.word	0x200725c6
					}
					
				}
				else
				{
					flow_counter = 0;
   8de20:	4b8d      	ldr	r3, [pc, #564]	; (8e058 <Cl_SysStat_mean_status_update+0x7d0>)
   8de22:	2200      	movs	r2, #0
   8de24:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8de26:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
   8de2a:	4b8c      	ldr	r3, [pc, #560]	; (8e05c <Cl_SysStat_mean_status_update+0x7d4>)
   8de2c:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   8de2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8de32:	4619      	mov	r1, r3
   8de34:	200b      	movs	r0, #11
   8de36:	4b8a      	ldr	r3, [pc, #552]	; (8e060 <Cl_SysStat_mean_status_update+0x7d8>)
   8de38:	4798      	blx	r3
			

				calibration_apt(Atp);
   8de3a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8de3e:	4618      	mov	r0, r3
   8de40:	4b88      	ldr	r3, [pc, #544]	; (8e064 <Cl_SysStat_mean_status_update+0x7dc>)
   8de42:	4798      	blx	r3
				aptavg = ((aptavg* 2) + pressure_final_apt)/3;
   8de44:	4b88      	ldr	r3, [pc, #544]	; (8e068 <Cl_SysStat_mean_status_update+0x7e0>)
   8de46:	681a      	ldr	r2, [r3, #0]
   8de48:	4b88      	ldr	r3, [pc, #544]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8de4a:	4611      	mov	r1, r2
   8de4c:	4610      	mov	r0, r2
   8de4e:	4798      	blx	r3
   8de50:	4603      	mov	r3, r0
   8de52:	4618      	mov	r0, r3
   8de54:	4b86      	ldr	r3, [pc, #536]	; (8e070 <Cl_SysStat_mean_status_update+0x7e8>)
   8de56:	681a      	ldr	r2, [r3, #0]
   8de58:	4b84      	ldr	r3, [pc, #528]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8de5a:	4611      	mov	r1, r2
   8de5c:	4798      	blx	r3
   8de5e:	4603      	mov	r3, r0
   8de60:	461a      	mov	r2, r3
   8de62:	4b84      	ldr	r3, [pc, #528]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8de64:	4984      	ldr	r1, [pc, #528]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8de66:	4610      	mov	r0, r2
   8de68:	4798      	blx	r3
   8de6a:	4603      	mov	r3, r0
   8de6c:	461a      	mov	r2, r3
   8de6e:	4b7e      	ldr	r3, [pc, #504]	; (8e068 <Cl_SysStat_mean_status_update+0x7e0>)
   8de70:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8de72:	2300      	movs	r3, #0
   8de74:	627b      	str	r3, [r7, #36]	; 0x24
// 				cl_tdata.Twobyte = aptavg + 1000;
// 				cl_tdata.bytearray[2] = 14;
// 				bulk_data[5] = cl_tdata.Twobyte;
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   8de76:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   8de7a:	4619      	mov	r1, r3
   8de7c:	200c      	movs	r0, #12
   8de7e:	4b78      	ldr	r3, [pc, #480]	; (8e060 <Cl_SysStat_mean_status_update+0x7d8>)
   8de80:	4798      	blx	r3
			
			calibration_vpt(Vtp);
   8de82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
   8de86:	4618      	mov	r0, r3
   8de88:	4b7c      	ldr	r3, [pc, #496]	; (8e07c <Cl_SysStat_mean_status_update+0x7f4>)
   8de8a:	4798      	blx	r3
			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
   8de8c:	4b7c      	ldr	r3, [pc, #496]	; (8e080 <Cl_SysStat_mean_status_update+0x7f8>)
   8de8e:	681a      	ldr	r2, [r3, #0]
   8de90:	4b76      	ldr	r3, [pc, #472]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8de92:	4611      	mov	r1, r2
   8de94:	4610      	mov	r0, r2
   8de96:	4798      	blx	r3
   8de98:	4603      	mov	r3, r0
   8de9a:	4618      	mov	r0, r3
   8de9c:	4b79      	ldr	r3, [pc, #484]	; (8e084 <Cl_SysStat_mean_status_update+0x7fc>)
   8de9e:	681a      	ldr	r2, [r3, #0]
   8dea0:	4b72      	ldr	r3, [pc, #456]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8dea2:	4611      	mov	r1, r2
   8dea4:	4798      	blx	r3
   8dea6:	4603      	mov	r3, r0
   8dea8:	461a      	mov	r2, r3
   8deaa:	4b72      	ldr	r3, [pc, #456]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8deac:	4972      	ldr	r1, [pc, #456]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8deae:	4610      	mov	r0, r2
   8deb0:	4798      	blx	r3
   8deb2:	4603      	mov	r3, r0
   8deb4:	461a      	mov	r2, r3
   8deb6:	4b72      	ldr	r3, [pc, #456]	; (8e080 <Cl_SysStat_mean_status_update+0x7f8>)
   8deb8:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8deba:	2300      	movs	r3, #0
   8debc:	627b      	str	r3, [r7, #36]	; 0x24
// 			cl_tdata.Twobyte = vptavg + 1000;
// 			cl_tdata.bytearray[2] = 15;
// 			bulk_data[6] = cl_tdata.Twobyte;
	
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8debe:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   8dec2:	4619      	mov	r1, r3
   8dec4:	2010      	movs	r0, #16
   8dec6:	4b66      	ldr	r3, [pc, #408]	; (8e060 <Cl_SysStat_mean_status_update+0x7d8>)
   8dec8:	4798      	blx	r3
	
			calibration_ps3(Ps3);
   8deca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
   8dece:	4618      	mov	r0, r3
   8ded0:	4b6d      	ldr	r3, [pc, #436]	; (8e088 <Cl_SysStat_mean_status_update+0x800>)
   8ded2:	4798      	blx	r3
			ps3avg = ((ps3avg* 2) + pressure_final_ps3)/3;
   8ded4:	4b6d      	ldr	r3, [pc, #436]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8ded6:	681a      	ldr	r2, [r3, #0]
   8ded8:	4b64      	ldr	r3, [pc, #400]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8deda:	4611      	mov	r1, r2
   8dedc:	4610      	mov	r0, r2
   8dede:	4798      	blx	r3
   8dee0:	4603      	mov	r3, r0
   8dee2:	4618      	mov	r0, r3
   8dee4:	4b6a      	ldr	r3, [pc, #424]	; (8e090 <Cl_SysStat_mean_status_update+0x808>)
   8dee6:	681a      	ldr	r2, [r3, #0]
   8dee8:	4b60      	ldr	r3, [pc, #384]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8deea:	4611      	mov	r1, r2
   8deec:	4798      	blx	r3
   8deee:	4603      	mov	r3, r0
   8def0:	461a      	mov	r2, r3
   8def2:	4b60      	ldr	r3, [pc, #384]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8def4:	4960      	ldr	r1, [pc, #384]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8def6:	4610      	mov	r0, r2
   8def8:	4798      	blx	r3
   8defa:	4603      	mov	r3, r0
   8defc:	461a      	mov	r2, r3
   8defe:	4b63      	ldr	r3, [pc, #396]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df00:	601a      	str	r2, [r3, #0]
			ps3avg_1sec = ((ps3avg_1sec* 2) + Pressuredatainmillibars) /3;
   8df02:	4b64      	ldr	r3, [pc, #400]	; (8e094 <Cl_SysStat_mean_status_update+0x80c>)
   8df04:	681a      	ldr	r2, [r3, #0]
   8df06:	4b59      	ldr	r3, [pc, #356]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8df08:	4611      	mov	r1, r2
   8df0a:	4610      	mov	r0, r2
   8df0c:	4798      	blx	r3
   8df0e:	4603      	mov	r3, r0
   8df10:	461c      	mov	r4, r3
   8df12:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
   8df16:	4b60      	ldr	r3, [pc, #384]	; (8e098 <Cl_SysStat_mean_status_update+0x810>)
   8df18:	4610      	mov	r0, r2
   8df1a:	4798      	blx	r3
   8df1c:	4602      	mov	r2, r0
   8df1e:	4b53      	ldr	r3, [pc, #332]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8df20:	4611      	mov	r1, r2
   8df22:	4620      	mov	r0, r4
   8df24:	4798      	blx	r3
   8df26:	4603      	mov	r3, r0
   8df28:	461a      	mov	r2, r3
   8df2a:	4b52      	ldr	r3, [pc, #328]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8df2c:	4952      	ldr	r1, [pc, #328]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8df2e:	4610      	mov	r0, r2
   8df30:	4798      	blx	r3
   8df32:	4603      	mov	r3, r0
   8df34:	461a      	mov	r2, r3
   8df36:	4b57      	ldr	r3, [pc, #348]	; (8e094 <Cl_SysStat_mean_status_update+0x80c>)
   8df38:	601a      	str	r2, [r3, #0]
			if ( ps3avg_1sec < (ps3avg ))
   8df3a:	4b56      	ldr	r3, [pc, #344]	; (8e094 <Cl_SysStat_mean_status_update+0x80c>)
   8df3c:	681a      	ldr	r2, [r3, #0]
   8df3e:	4b53      	ldr	r3, [pc, #332]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df40:	6819      	ldr	r1, [r3, #0]
   8df42:	4b56      	ldr	r3, [pc, #344]	; (8e09c <Cl_SysStat_mean_status_update+0x814>)
   8df44:	4610      	mov	r0, r2
   8df46:	4798      	blx	r3
   8df48:	4603      	mov	r3, r0
   8df4a:	2b00      	cmp	r3, #0
   8df4c:	d009      	beq.n	8df62 <Cl_SysStat_mean_status_update+0x6da>
			{
				
				if(ps3avg_1sec < (ps3avg - 5) )
   8df4e:	4b4f      	ldr	r3, [pc, #316]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df50:	681a      	ldr	r2, [r3, #0]
   8df52:	4b53      	ldr	r3, [pc, #332]	; (8e0a0 <Cl_SysStat_mean_status_update+0x818>)
   8df54:	4953      	ldr	r1, [pc, #332]	; (8e0a4 <Cl_SysStat_mean_status_update+0x81c>)
   8df56:	4610      	mov	r0, r2
   8df58:	4798      	blx	r3
				{
					//switch chamber
				//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
					
				}
				ps3avg_max = ps3avg;
   8df5a:	4b4c      	ldr	r3, [pc, #304]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df5c:	681b      	ldr	r3, [r3, #0]
   8df5e:	4a52      	ldr	r2, [pc, #328]	; (8e0a8 <Cl_SysStat_mean_status_update+0x820>)
   8df60:	6013      	str	r3, [r2, #0]
			}
			if ( ps3avg < ps3avg_max)
   8df62:	4b4a      	ldr	r3, [pc, #296]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df64:	681a      	ldr	r2, [r3, #0]
   8df66:	4b50      	ldr	r3, [pc, #320]	; (8e0a8 <Cl_SysStat_mean_status_update+0x820>)
   8df68:	6819      	ldr	r1, [r3, #0]
   8df6a:	4b4c      	ldr	r3, [pc, #304]	; (8e09c <Cl_SysStat_mean_status_update+0x814>)
   8df6c:	4610      	mov	r0, r2
   8df6e:	4798      	blx	r3
   8df70:	4603      	mov	r3, r0
   8df72:	2b00      	cmp	r3, #0
   8df74:	d003      	beq.n	8df7e <Cl_SysStat_mean_status_update+0x6f6>
			{
				

				ps3avg_max = ps3avg;
   8df76:	4b45      	ldr	r3, [pc, #276]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df78:	681b      	ldr	r3, [r3, #0]
   8df7a:	4a4b      	ldr	r2, [pc, #300]	; (8e0a8 <Cl_SysStat_mean_status_update+0x820>)
   8df7c:	6013      	str	r3, [r2, #0]
			}			
			cl_tdata.word = 0;
   8df7e:	2300      	movs	r3, #0
   8df80:	627b      	str	r3, [r7, #36]	; 0x24
			cl_tdata.Twobyte = 1000 + ps3avg;
   8df82:	4b42      	ldr	r3, [pc, #264]	; (8e08c <Cl_SysStat_mean_status_update+0x804>)
   8df84:	681a      	ldr	r2, [r3, #0]
   8df86:	4b39      	ldr	r3, [pc, #228]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8df88:	4948      	ldr	r1, [pc, #288]	; (8e0ac <Cl_SysStat_mean_status_update+0x824>)
   8df8a:	4610      	mov	r0, r2
   8df8c:	4798      	blx	r3
   8df8e:	4603      	mov	r3, r0
   8df90:	461a      	mov	r2, r3
   8df92:	4b47      	ldr	r3, [pc, #284]	; (8e0b0 <Cl_SysStat_mean_status_update+0x828>)
   8df94:	4610      	mov	r0, r2
   8df96:	4798      	blx	r3
   8df98:	4603      	mov	r3, r0
   8df9a:	b29b      	uxth	r3, r3
   8df9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			cl_tdata.bytearray[2] = 20;
   8df9e:	2314      	movs	r3, #20
   8dfa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			bulk_data[7] = cl_tdata.Twobyte;
   8dfa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8dfa6:	b21b      	sxth	r3, r3
   8dfa8:	82fb      	strh	r3, [r7, #22]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8dfaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8dfae:	4619      	mov	r1, r3
   8dfb0:	200f      	movs	r0, #15
   8dfb2:	4b2b      	ldr	r3, [pc, #172]	; (8e060 <Cl_SysStat_mean_status_update+0x7d8>)
   8dfb4:	4798      	blx	r3
	
		calibration_ps2(Ps2);
   8dfb6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dfba:	4618      	mov	r0, r3
   8dfbc:	4b3d      	ldr	r3, [pc, #244]	; (8e0b4 <Cl_SysStat_mean_status_update+0x82c>)
   8dfbe:	4798      	blx	r3
		ps2avg = ((ps2avg* 2) + pressure_final_ps2)/3;
   8dfc0:	4b3d      	ldr	r3, [pc, #244]	; (8e0b8 <Cl_SysStat_mean_status_update+0x830>)
   8dfc2:	681a      	ldr	r2, [r3, #0]
   8dfc4:	4b29      	ldr	r3, [pc, #164]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8dfc6:	4611      	mov	r1, r2
   8dfc8:	4610      	mov	r0, r2
   8dfca:	4798      	blx	r3
   8dfcc:	4603      	mov	r3, r0
   8dfce:	4618      	mov	r0, r3
   8dfd0:	4b3a      	ldr	r3, [pc, #232]	; (8e0bc <Cl_SysStat_mean_status_update+0x834>)
   8dfd2:	681a      	ldr	r2, [r3, #0]
   8dfd4:	4b25      	ldr	r3, [pc, #148]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8dfd6:	4611      	mov	r1, r2
   8dfd8:	4798      	blx	r3
   8dfda:	4603      	mov	r3, r0
   8dfdc:	461a      	mov	r2, r3
   8dfde:	4b25      	ldr	r3, [pc, #148]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8dfe0:	4925      	ldr	r1, [pc, #148]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8dfe2:	4610      	mov	r0, r2
   8dfe4:	4798      	blx	r3
   8dfe6:	4603      	mov	r3, r0
   8dfe8:	461a      	mov	r2, r3
   8dfea:	4b33      	ldr	r3, [pc, #204]	; (8e0b8 <Cl_SysStat_mean_status_update+0x830>)
   8dfec:	601a      	str	r2, [r3, #0]
			

			cl_tdata.word = 0;
   8dfee:	2300      	movs	r3, #0
   8dff0:	627b      	str	r3, [r7, #36]	; 0x24
			cl_tdata.Twobyte = 1000 + ps2avg;
   8dff2:	4b31      	ldr	r3, [pc, #196]	; (8e0b8 <Cl_SysStat_mean_status_update+0x830>)
   8dff4:	681a      	ldr	r2, [r3, #0]
   8dff6:	4b1d      	ldr	r3, [pc, #116]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8dff8:	492c      	ldr	r1, [pc, #176]	; (8e0ac <Cl_SysStat_mean_status_update+0x824>)
   8dffa:	4610      	mov	r0, r2
   8dffc:	4798      	blx	r3
   8dffe:	4603      	mov	r3, r0
   8e000:	461a      	mov	r2, r3
   8e002:	4b2b      	ldr	r3, [pc, #172]	; (8e0b0 <Cl_SysStat_mean_status_update+0x828>)
   8e004:	4610      	mov	r0, r2
   8e006:	4798      	blx	r3
   8e008:	4603      	mov	r3, r0
   8e00a:	b29b      	uxth	r3, r3
   8e00c:	84bb      	strh	r3, [r7, #36]	; 0x24
			cl_tdata.bytearray[2] = 19;
   8e00e:	2313      	movs	r3, #19
   8e010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
			bulk_data[8] = cl_tdata.Twobyte;
   8e014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8e016:	b21b      	sxth	r3, r3
   8e018:	833b      	strh	r3, [r7, #24]

		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8e01a:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8e01e:	4619      	mov	r1, r3
   8e020:	200e      	movs	r0, #14
   8e022:	4b0f      	ldr	r3, [pc, #60]	; (8e060 <Cl_SysStat_mean_status_update+0x7d8>)
   8e024:	4798      	blx	r3

			calibration_ps1(Ps1);
   8e026:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
   8e02a:	4618      	mov	r0, r3
   8e02c:	4b24      	ldr	r3, [pc, #144]	; (8e0c0 <Cl_SysStat_mean_status_update+0x838>)
   8e02e:	4798      	blx	r3
			ps1avg = ((ps1avg* 2) + pressure_final_ps1)/3;
   8e030:	4b24      	ldr	r3, [pc, #144]	; (8e0c4 <Cl_SysStat_mean_status_update+0x83c>)
   8e032:	681a      	ldr	r2, [r3, #0]
   8e034:	4b0d      	ldr	r3, [pc, #52]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8e036:	4611      	mov	r1, r2
   8e038:	4610      	mov	r0, r2
   8e03a:	4798      	blx	r3
   8e03c:	4603      	mov	r3, r0
   8e03e:	4618      	mov	r0, r3
   8e040:	4b21      	ldr	r3, [pc, #132]	; (8e0c8 <Cl_SysStat_mean_status_update+0x840>)
   8e042:	681a      	ldr	r2, [r3, #0]
   8e044:	4b09      	ldr	r3, [pc, #36]	; (8e06c <Cl_SysStat_mean_status_update+0x7e4>)
   8e046:	4611      	mov	r1, r2
   8e048:	4798      	blx	r3
   8e04a:	4603      	mov	r3, r0
   8e04c:	461a      	mov	r2, r3
   8e04e:	4b09      	ldr	r3, [pc, #36]	; (8e074 <Cl_SysStat_mean_status_update+0x7ec>)
   8e050:	4909      	ldr	r1, [pc, #36]	; (8e078 <Cl_SysStat_mean_status_update+0x7f0>)
   8e052:	4610      	mov	r0, r2
   8e054:	e03a      	b.n	8e0cc <Cl_SysStat_mean_status_update+0x844>
   8e056:	bf00      	nop
   8e058:	200725c6 	.word	0x200725c6
   8e05c:	200725c4 	.word	0x200725c4
   8e060:	0008d499 	.word	0x0008d499
   8e064:	00083e39 	.word	0x00083e39
   8e068:	20072598 	.word	0x20072598
   8e06c:	000a247d 	.word	0x000a247d
   8e070:	20072d08 	.word	0x20072d08
   8e074:	000a27f5 	.word	0x000a27f5
   8e078:	40400000 	.word	0x40400000
   8e07c:	00083fb9 	.word	0x00083fb9
   8e080:	2007259c 	.word	0x2007259c
   8e084:	20071618 	.word	0x20071618
   8e088:	0008435d 	.word	0x0008435d
   8e08c:	20072590 	.word	0x20072590
   8e090:	20071624 	.word	0x20071624
   8e094:	20072594 	.word	0x20072594
   8e098:	000a25e5 	.word	0x000a25e5
   8e09c:	000a29c9 	.word	0x000a29c9
   8e0a0:	000a2479 	.word	0x000a2479
   8e0a4:	40a00000 	.word	0x40a00000
   8e0a8:	200725a0 	.word	0x200725a0
   8e0ac:	447a0000 	.word	0x447a0000
   8e0b0:	000a2a65 	.word	0x000a2a65
   8e0b4:	0008424d 	.word	0x0008424d
   8e0b8:	2007258c 	.word	0x2007258c
   8e0bc:	20071620 	.word	0x20071620
   8e0c0:	0008413d 	.word	0x0008413d
   8e0c4:	20072588 	.word	0x20072588
   8e0c8:	2007161c 	.word	0x2007161c
   8e0cc:	4798      	blx	r3
   8e0ce:	4603      	mov	r3, r0
   8e0d0:	461a      	mov	r2, r3
   8e0d2:	4b21      	ldr	r3, [pc, #132]	; (8e158 <Cl_SysStat_mean_status_update+0x8d0>)
   8e0d4:	601a      	str	r2, [r3, #0]
			
			cl_tdata.word = 0;
   8e0d6:	2300      	movs	r3, #0
   8e0d8:	627b      	str	r3, [r7, #36]	; 0x24
			cl_tdata.Twobyte = 1000 + ps1avg;
   8e0da:	4b1f      	ldr	r3, [pc, #124]	; (8e158 <Cl_SysStat_mean_status_update+0x8d0>)
   8e0dc:	681a      	ldr	r2, [r3, #0]
   8e0de:	4b1f      	ldr	r3, [pc, #124]	; (8e15c <Cl_SysStat_mean_status_update+0x8d4>)
   8e0e0:	491f      	ldr	r1, [pc, #124]	; (8e160 <Cl_SysStat_mean_status_update+0x8d8>)
   8e0e2:	4610      	mov	r0, r2
   8e0e4:	4798      	blx	r3
   8e0e6:	4603      	mov	r3, r0
   8e0e8:	461a      	mov	r2, r3
   8e0ea:	4b1e      	ldr	r3, [pc, #120]	; (8e164 <Cl_SysStat_mean_status_update+0x8dc>)
   8e0ec:	4610      	mov	r0, r2
   8e0ee:	4798      	blx	r3
   8e0f0:	4603      	mov	r3, r0
   8e0f2:	b29b      	uxth	r3, r3
   8e0f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			cl_tdata.bytearray[2] = 18;
   8e0f6:	2312      	movs	r3, #18
   8e0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			bulk_data[9] = cl_tdata.Twobyte;
   8e0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8e0fe:	b21b      	sxth	r3, r3
   8e100:	837b      	strh	r3, [r7, #26]
	
			if(ps1avg > 300)
   8e102:	4b15      	ldr	r3, [pc, #84]	; (8e158 <Cl_SysStat_mean_status_update+0x8d0>)
   8e104:	681a      	ldr	r2, [r3, #0]
   8e106:	4b18      	ldr	r3, [pc, #96]	; (8e168 <Cl_SysStat_mean_status_update+0x8e0>)
   8e108:	4918      	ldr	r1, [pc, #96]	; (8e16c <Cl_SysStat_mean_status_update+0x8e4>)
   8e10a:	4610      	mov	r0, r2
   8e10c:	4798      	blx	r3
   8e10e:	4603      	mov	r3, r0
   8e110:	2b00      	cmp	r3, #0
   8e112:	d006      	beq.n	8e122 <Cl_SysStat_mean_status_update+0x89a>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8e114:	4b16      	ldr	r3, [pc, #88]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e116:	881b      	ldrh	r3, [r3, #0]
   8e118:	3301      	adds	r3, #1
   8e11a:	b29a      	uxth	r2, r3
   8e11c:	4b14      	ldr	r3, [pc, #80]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e11e:	801a      	strh	r2, [r3, #0]
   8e120:	e00c      	b.n	8e13c <Cl_SysStat_mean_status_update+0x8b4>
			}
			else
			{
				 valve_4_count++;
   8e122:	4b13      	ldr	r3, [pc, #76]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e124:	881b      	ldrh	r3, [r3, #0]
   8e126:	3301      	adds	r3, #1
   8e128:	b29a      	uxth	r2, r3
   8e12a:	4b11      	ldr	r3, [pc, #68]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e12c:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8e12e:	4b10      	ldr	r3, [pc, #64]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e130:	881b      	ldrh	r3, [r3, #0]
   8e132:	2b00      	cmp	r3, #0
   8e134:	d002      	beq.n	8e13c <Cl_SysStat_mean_status_update+0x8b4>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8e136:	4b0e      	ldr	r3, [pc, #56]	; (8e170 <Cl_SysStat_mean_status_update+0x8e8>)
   8e138:	2200      	movs	r2, #0
   8e13a:	801a      	strh	r2, [r3, #0]
				}
			}
	
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
   8e13c:	f107 0308 	add.w	r3, r7, #8
   8e140:	221e      	movs	r2, #30
   8e142:	4619      	mov	r1, r3
   8e144:	203e      	movs	r0, #62	; 0x3e
   8e146:	4b0b      	ldr	r3, [pc, #44]	; (8e174 <Cl_SysStat_mean_status_update+0x8ec>)
   8e148:	4798      	blx	r3
   8e14a:	4603      	mov	r3, r0
   8e14c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
		
	}
}
   8e150:	bf00      	nop
   8e152:	3764      	adds	r7, #100	; 0x64
   8e154:	46bd      	mov	sp, r7
   8e156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8e158:	20072588 	.word	0x20072588
   8e15c:	000a247d 	.word	0x000a247d
   8e160:	447a0000 	.word	0x447a0000
   8e164:	000a2a65 	.word	0x000a2a65
   8e168:	000a2a05 	.word	0x000a2a05
   8e16c:	43960000 	.word	0x43960000
   8e170:	200725bc 	.word	0x200725bc
   8e174:	00098601 	.word	0x00098601

0008e178 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8e178:	b590      	push	{r4, r7, lr}
   8e17a:	b085      	sub	sp, #20
   8e17c:	af00      	add	r7, sp, #0
   8e17e:	4603      	mov	r3, r0
   8e180:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   8e182:	2300      	movs	r3, #0
   8e184:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   8e186:	2300      	movs	r3, #0
   8e188:	817b      	strh	r3, [r7, #10]
   8e18a:	2300      	movs	r3, #0
   8e18c:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   8e18e:	4b72      	ldr	r3, [pc, #456]	; (8e358 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e190:	781b      	ldrb	r3, [r3, #0]
   8e192:	2b00      	cmp	r3, #0
   8e194:	d002      	beq.n	8e19c <Cl_Conductivity_Sensor_Controller+0x24>
   8e196:	2b02      	cmp	r3, #2
   8e198:	d060      	beq.n	8e25c <Cl_Conductivity_Sensor_Controller+0xe4>
					break;
					default:break;
				}
				
			break;
			default:break;
   8e19a:	e0d1      	b.n	8e340 <Cl_Conductivity_Sensor_Controller+0x1c8>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8e19c:	79fb      	ldrb	r3, [r7, #7]
   8e19e:	2b00      	cmp	r3, #0
   8e1a0:	d003      	beq.n	8e1aa <Cl_Conductivity_Sensor_Controller+0x32>
   8e1a2:	2b02      	cmp	r3, #2
   8e1a4:	d023      	beq.n	8e1ee <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   8e1a6:	bf00      	nop
					}
			break;
   8e1a8:	e0ca      	b.n	8e340 <Cl_Conductivity_Sensor_Controller+0x1c8>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8e1aa:	4b6c      	ldr	r3, [pc, #432]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e1ac:	881b      	ldrh	r3, [r3, #0]
   8e1ae:	4618      	mov	r0, r3
   8e1b0:	4b6b      	ldr	r3, [pc, #428]	; (8e360 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e1b2:	4798      	blx	r3
						cl_wait(100);
   8e1b4:	2064      	movs	r0, #100	; 0x64
   8e1b6:	4b6b      	ldr	r3, [pc, #428]	; (8e364 <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8e1b8:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e1ba:	f107 030a 	add.w	r3, r7, #10
   8e1be:	4619      	mov	r1, r3
   8e1c0:	2006      	movs	r0, #6
   8e1c2:	4b69      	ldr	r3, [pc, #420]	; (8e368 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e1c4:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8e1c6:	897b      	ldrh	r3, [r7, #10]
   8e1c8:	461a      	mov	r2, r3
   8e1ca:	0092      	lsls	r2, r2, #2
   8e1cc:	4413      	add	r3, r2
   8e1ce:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e1d0:	4b66      	ldr	r3, [pc, #408]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e1d2:	881b      	ldrh	r3, [r3, #0]
   8e1d4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e1d8:	d907      	bls.n	8e1ea <Cl_Conductivity_Sensor_Controller+0x72>
   8e1da:	4b64      	ldr	r3, [pc, #400]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e1dc:	881b      	ldrh	r3, [r3, #0]
   8e1de:	f640 0297 	movw	r2, #2199	; 0x897
   8e1e2:	4293      	cmp	r3, r2
   8e1e4:	d801      	bhi.n	8e1ea <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   8e1e6:	2300      	movs	r3, #0
   8e1e8:	e0ab      	b.n	8e342 <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							return CL_ERROR;
   8e1ea:	2304      	movs	r3, #4
   8e1ec:	e0a9      	b.n	8e342 <Cl_Conductivity_Sensor_Controller+0x1ca>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e1ee:	f107 030a 	add.w	r3, r7, #10
   8e1f2:	4619      	mov	r1, r3
   8e1f4:	2006      	movs	r0, #6
   8e1f6:	4b5c      	ldr	r3, [pc, #368]	; (8e368 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e1f8:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   8e1fa:	897b      	ldrh	r3, [r7, #10]
   8e1fc:	461a      	mov	r2, r3
   8e1fe:	4b5c      	ldr	r3, [pc, #368]	; (8e370 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e200:	4610      	mov	r0, r2
   8e202:	4798      	blx	r3
   8e204:	4c5b      	ldr	r4, [pc, #364]	; (8e374 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e206:	a352      	add	r3, pc, #328	; (adr r3, 8e350 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e208:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e20c:	47a0      	blx	r4
   8e20e:	4603      	mov	r3, r0
   8e210:	460c      	mov	r4, r1
   8e212:	4619      	mov	r1, r3
   8e214:	4622      	mov	r2, r4
   8e216:	4b58      	ldr	r3, [pc, #352]	; (8e378 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e218:	4608      	mov	r0, r1
   8e21a:	4611      	mov	r1, r2
   8e21c:	4798      	blx	r3
   8e21e:	4603      	mov	r3, r0
   8e220:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8e222:	4a52      	ldr	r2, [pc, #328]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e224:	89bb      	ldrh	r3, [r7, #12]
   8e226:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   8e228:	4a54      	ldr	r2, [pc, #336]	; (8e37c <Cl_Conductivity_Sensor_Controller+0x204>)
   8e22a:	89bb      	ldrh	r3, [r7, #12]
   8e22c:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   8e22e:	4b4a      	ldr	r3, [pc, #296]	; (8e358 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e230:	2202      	movs	r2, #2
   8e232:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e234:	4b4d      	ldr	r3, [pc, #308]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e236:	881b      	ldrh	r3, [r3, #0]
   8e238:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e23c:	d907      	bls.n	8e24e <Cl_Conductivity_Sensor_Controller+0xd6>
   8e23e:	4b4b      	ldr	r3, [pc, #300]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e240:	881b      	ldrh	r3, [r3, #0]
   8e242:	f640 0297 	movw	r2, #2199	; 0x897
   8e246:	4293      	cmp	r3, r2
   8e248:	d801      	bhi.n	8e24e <Cl_Conductivity_Sensor_Controller+0xd6>
						{
							return CL_OK;
   8e24a:	2300      	movs	r3, #0
   8e24c:	e079      	b.n	8e342 <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8e24e:	4b43      	ldr	r3, [pc, #268]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e250:	881b      	ldrh	r3, [r3, #0]
   8e252:	4618      	mov	r0, r3
   8e254:	4b42      	ldr	r3, [pc, #264]	; (8e360 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e256:	4798      	blx	r3
							return CL_OK;
   8e258:	2300      	movs	r3, #0
   8e25a:	e072      	b.n	8e342 <Cl_Conductivity_Sensor_Controller+0x1ca>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8e25c:	79fb      	ldrb	r3, [r7, #7]
   8e25e:	2b02      	cmp	r3, #2
   8e260:	d000      	beq.n	8e264 <Cl_Conductivity_Sensor_Controller+0xec>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8e262:	e06c      	b.n	8e33e <Cl_Conductivity_Sensor_Controller+0x1c6>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e264:	f107 030a 	add.w	r3, r7, #10
   8e268:	4619      	mov	r1, r3
   8e26a:	2006      	movs	r0, #6
   8e26c:	4b3e      	ldr	r3, [pc, #248]	; (8e368 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e26e:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   8e270:	897b      	ldrh	r3, [r7, #10]
   8e272:	461a      	mov	r2, r3
   8e274:	4b3e      	ldr	r3, [pc, #248]	; (8e370 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e276:	4610      	mov	r0, r2
   8e278:	4798      	blx	r3
   8e27a:	4c3e      	ldr	r4, [pc, #248]	; (8e374 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e27c:	a334      	add	r3, pc, #208	; (adr r3, 8e350 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e282:	47a0      	blx	r4
   8e284:	4603      	mov	r3, r0
   8e286:	460c      	mov	r4, r1
   8e288:	4619      	mov	r1, r3
   8e28a:	4622      	mov	r2, r4
   8e28c:	4b3a      	ldr	r3, [pc, #232]	; (8e378 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e28e:	4608      	mov	r0, r1
   8e290:	4611      	mov	r1, r2
   8e292:	4798      	blx	r3
   8e294:	4603      	mov	r3, r0
   8e296:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e298:	4b34      	ldr	r3, [pc, #208]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e29a:	881b      	ldrh	r3, [r3, #0]
   8e29c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e2a0:	d949      	bls.n	8e336 <Cl_Conductivity_Sensor_Controller+0x1be>
   8e2a2:	4b32      	ldr	r3, [pc, #200]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e2a4:	881b      	ldrh	r3, [r3, #0]
   8e2a6:	f640 0297 	movw	r2, #2199	; 0x897
   8e2aa:	4293      	cmp	r3, r2
   8e2ac:	d843      	bhi.n	8e336 <Cl_Conductivity_Sensor_Controller+0x1be>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8e2ae:	4b2f      	ldr	r3, [pc, #188]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e2b0:	881b      	ldrh	r3, [r3, #0]
   8e2b2:	461a      	mov	r2, r3
   8e2b4:	4613      	mov	r3, r2
   8e2b6:	00db      	lsls	r3, r3, #3
   8e2b8:	4413      	add	r3, r2
   8e2ba:	005b      	lsls	r3, r3, #1
   8e2bc:	441a      	add	r2, r3
   8e2be:	89bb      	ldrh	r3, [r7, #12]
   8e2c0:	4413      	add	r3, r2
   8e2c2:	4a2f      	ldr	r2, [pc, #188]	; (8e380 <Cl_Conductivity_Sensor_Controller+0x208>)
   8e2c4:	fb82 1203 	smull	r1, r2, r2, r3
   8e2c8:	10d2      	asrs	r2, r2, #3
   8e2ca:	17db      	asrs	r3, r3, #31
   8e2cc:	1ad3      	subs	r3, r2, r3
   8e2ce:	b29a      	uxth	r2, r3
   8e2d0:	4b26      	ldr	r3, [pc, #152]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e2d2:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   8e2d4:	4b25      	ldr	r3, [pc, #148]	; (8e36c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e2d6:	881b      	ldrh	r3, [r3, #0]
   8e2d8:	005a      	lsls	r2, r3, #1
   8e2da:	89bb      	ldrh	r3, [r7, #12]
   8e2dc:	4413      	add	r3, r2
   8e2de:	4a29      	ldr	r2, [pc, #164]	; (8e384 <Cl_Conductivity_Sensor_Controller+0x20c>)
   8e2e0:	fb82 1203 	smull	r1, r2, r2, r3
   8e2e4:	17db      	asrs	r3, r3, #31
   8e2e6:	1ad3      	subs	r3, r2, r3
   8e2e8:	b29a      	uxth	r2, r3
   8e2ea:	4b24      	ldr	r3, [pc, #144]	; (8e37c <Cl_Conductivity_Sensor_Controller+0x204>)
   8e2ec:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e2ee:	4b23      	ldr	r3, [pc, #140]	; (8e37c <Cl_Conductivity_Sensor_Controller+0x204>)
   8e2f0:	881b      	ldrh	r3, [r3, #0]
   8e2f2:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8e2f6:	4293      	cmp	r3, r2
   8e2f8:	d90b      	bls.n	8e312 <Cl_Conductivity_Sensor_Controller+0x19a>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8e2fa:	4b18      	ldr	r3, [pc, #96]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e2fc:	881b      	ldrh	r3, [r3, #0]
   8e2fe:	3b01      	subs	r3, #1
   8e300:	b29a      	uxth	r2, r3
   8e302:	4b16      	ldr	r3, [pc, #88]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e304:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8e306:	4b15      	ldr	r3, [pc, #84]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e308:	881b      	ldrh	r3, [r3, #0]
   8e30a:	4618      	mov	r0, r3
   8e30c:	4b14      	ldr	r3, [pc, #80]	; (8e360 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e30e:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e310:	e013      	b.n	8e33a <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
						}
						else if (cond_3sec_avg < 1995 )
   8e312:	4b1a      	ldr	r3, [pc, #104]	; (8e37c <Cl_Conductivity_Sensor_Controller+0x204>)
   8e314:	881b      	ldrh	r3, [r3, #0]
   8e316:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8e31a:	4293      	cmp	r3, r2
   8e31c:	d80d      	bhi.n	8e33a <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8e31e:	4b0f      	ldr	r3, [pc, #60]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e320:	881b      	ldrh	r3, [r3, #0]
   8e322:	3301      	adds	r3, #1
   8e324:	b29a      	uxth	r2, r3
   8e326:	4b0d      	ldr	r3, [pc, #52]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e328:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8e32a:	4b0c      	ldr	r3, [pc, #48]	; (8e35c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e32c:	881b      	ldrh	r3, [r3, #0]
   8e32e:	4618      	mov	r0, r3
   8e330:	4b0b      	ldr	r3, [pc, #44]	; (8e360 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e332:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e334:	e001      	b.n	8e33a <Cl_Conductivity_Sensor_Controller+0x1c2>
			
						}
					}
					else
					{
						return CL_ERROR;
   8e336:	2304      	movs	r3, #4
   8e338:	e003      	b.n	8e342 <Cl_Conductivity_Sensor_Controller+0x1ca>
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e33a:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8e33c:	bf00      	nop
					default:break;
				}
				
			break;
   8e33e:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   8e340:	2300      	movs	r3, #0
   8e342:	4618      	mov	r0, r3
   8e344:	3714      	adds	r7, #20
   8e346:	46bd      	mov	sp, r7
   8e348:	bd90      	pop	{r4, r7, pc}
   8e34a:	bf00      	nop
   8e34c:	f3af 8000 	nop.w
   8e350:	58e21965 	.word	0x58e21965
   8e354:	3fe9b717 	.word	0x3fe9b717
   8e358:	200725c7 	.word	0x200725c7
   8e35c:	200704fc 	.word	0x200704fc
   8e360:	00096d49 	.word	0x00096d49
   8e364:	00091b9d 	.word	0x00091b9d
   8e368:	0008d499 	.word	0x0008d499
   8e36c:	200725c8 	.word	0x200725c8
   8e370:	000a1d41 	.word	0x000a1d41
   8e374:	000a1e0d 	.word	0x000a1e0d
   8e378:	000a2391 	.word	0x000a2391
   8e37c:	200725ca 	.word	0x200725ca
   8e380:	66666667 	.word	0x66666667
   8e384:	55555556 	.word	0x55555556

0008e388 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8e388:	b580      	push	{r7, lr}
   8e38a:	b084      	sub	sp, #16
   8e38c:	af00      	add	r7, sp, #0
   8e38e:	4603      	mov	r3, r0
   8e390:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8e392:	2300      	movs	r3, #0
   8e394:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   8e396:	2300      	movs	r3, #0
   8e398:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8e39a:	4b91      	ldr	r3, [pc, #580]	; (8e5e0 <Cl_Pressure_Controller_Handler+0x258>)
   8e39c:	781b      	ldrb	r3, [r3, #0]
   8e39e:	2b01      	cmp	r3, #1
   8e3a0:	f040 8096 	bne.w	8e4d0 <Cl_Pressure_Controller_Handler+0x148>
	{
		switch(Cl_Ps_Event)
   8e3a4:	79fb      	ldrb	r3, [r7, #7]
   8e3a6:	2b00      	cmp	r3, #0
   8e3a8:	f000 8110 	beq.w	8e5cc <Cl_Pressure_Controller_Handler+0x244>
   8e3ac:	2b01      	cmp	r3, #1
   8e3ae:	d000      	beq.n	8e3b2 <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8e3b0:	e111      	b.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8e3b2:	4b8c      	ldr	r3, [pc, #560]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e3b4:	881b      	ldrh	r3, [r3, #0]
   8e3b6:	2b00      	cmp	r3, #0
   8e3b8:	d114      	bne.n	8e3e4 <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8e3ba:	498b      	ldr	r1, [pc, #556]	; (8e5e8 <Cl_Pressure_Controller_Handler+0x260>)
   8e3bc:	200e      	movs	r0, #14
   8e3be:	4b8b      	ldr	r3, [pc, #556]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3c0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8e3c2:	498b      	ldr	r1, [pc, #556]	; (8e5f0 <Cl_Pressure_Controller_Handler+0x268>)
   8e3c4:	200f      	movs	r0, #15
   8e3c6:	4b89      	ldr	r3, [pc, #548]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3c8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8e3ca:	498a      	ldr	r1, [pc, #552]	; (8e5f4 <Cl_Pressure_Controller_Handler+0x26c>)
   8e3cc:	2010      	movs	r0, #16
   8e3ce:	4b87      	ldr	r3, [pc, #540]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3d0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8e3d2:	4989      	ldr	r1, [pc, #548]	; (8e5f8 <Cl_Pressure_Controller_Handler+0x270>)
   8e3d4:	200b      	movs	r0, #11
   8e3d6:	4b85      	ldr	r3, [pc, #532]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3d8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8e3da:	4988      	ldr	r1, [pc, #544]	; (8e5fc <Cl_Pressure_Controller_Handler+0x274>)
   8e3dc:	200b      	movs	r0, #11
   8e3de:	4b83      	ldr	r3, [pc, #524]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3e0:	4798      	blx	r3
   8e3e2:	e063      	b.n	8e4ac <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e3e4:	f107 030c 	add.w	r3, r7, #12
   8e3e8:	4619      	mov	r1, r3
   8e3ea:	200e      	movs	r0, #14
   8e3ec:	4b7f      	ldr	r3, [pc, #508]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e3ee:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8e3f0:	4b7d      	ldr	r3, [pc, #500]	; (8e5e8 <Cl_Pressure_Controller_Handler+0x260>)
   8e3f2:	881b      	ldrh	r3, [r3, #0]
   8e3f4:	461a      	mov	r2, r3
   8e3f6:	89bb      	ldrh	r3, [r7, #12]
   8e3f8:	4413      	add	r3, r2
   8e3fa:	4a7a      	ldr	r2, [pc, #488]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e3fc:	8812      	ldrh	r2, [r2, #0]
   8e3fe:	fb93 f3f2 	sdiv	r3, r3, r2
   8e402:	b29b      	uxth	r3, r3
   8e404:	3301      	adds	r3, #1
   8e406:	b29a      	uxth	r2, r3
   8e408:	4b77      	ldr	r3, [pc, #476]	; (8e5e8 <Cl_Pressure_Controller_Handler+0x260>)
   8e40a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e40c:	f107 030c 	add.w	r3, r7, #12
   8e410:	4619      	mov	r1, r3
   8e412:	200f      	movs	r0, #15
   8e414:	4b75      	ldr	r3, [pc, #468]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e416:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8e418:	4b75      	ldr	r3, [pc, #468]	; (8e5f0 <Cl_Pressure_Controller_Handler+0x268>)
   8e41a:	881b      	ldrh	r3, [r3, #0]
   8e41c:	461a      	mov	r2, r3
   8e41e:	89bb      	ldrh	r3, [r7, #12]
   8e420:	4413      	add	r3, r2
   8e422:	4a70      	ldr	r2, [pc, #448]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e424:	8812      	ldrh	r2, [r2, #0]
   8e426:	fb93 f3f2 	sdiv	r3, r3, r2
   8e42a:	b29b      	uxth	r3, r3
   8e42c:	3301      	adds	r3, #1
   8e42e:	b29a      	uxth	r2, r3
   8e430:	4b6f      	ldr	r3, [pc, #444]	; (8e5f0 <Cl_Pressure_Controller_Handler+0x268>)
   8e432:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e434:	f107 030c 	add.w	r3, r7, #12
   8e438:	4619      	mov	r1, r3
   8e43a:	2010      	movs	r0, #16
   8e43c:	4b6b      	ldr	r3, [pc, #428]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e43e:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8e440:	4b6c      	ldr	r3, [pc, #432]	; (8e5f4 <Cl_Pressure_Controller_Handler+0x26c>)
   8e442:	881b      	ldrh	r3, [r3, #0]
   8e444:	461a      	mov	r2, r3
   8e446:	89bb      	ldrh	r3, [r7, #12]
   8e448:	4413      	add	r3, r2
   8e44a:	4a66      	ldr	r2, [pc, #408]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e44c:	8812      	ldrh	r2, [r2, #0]
   8e44e:	fb93 f3f2 	sdiv	r3, r3, r2
   8e452:	b29b      	uxth	r3, r3
   8e454:	3301      	adds	r3, #1
   8e456:	b29a      	uxth	r2, r3
   8e458:	4b66      	ldr	r3, [pc, #408]	; (8e5f4 <Cl_Pressure_Controller_Handler+0x26c>)
   8e45a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e45c:	f107 030c 	add.w	r3, r7, #12
   8e460:	4619      	mov	r1, r3
   8e462:	200b      	movs	r0, #11
   8e464:	4b61      	ldr	r3, [pc, #388]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e466:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8e468:	4b63      	ldr	r3, [pc, #396]	; (8e5f8 <Cl_Pressure_Controller_Handler+0x270>)
   8e46a:	881b      	ldrh	r3, [r3, #0]
   8e46c:	461a      	mov	r2, r3
   8e46e:	89bb      	ldrh	r3, [r7, #12]
   8e470:	4413      	add	r3, r2
   8e472:	4a5c      	ldr	r2, [pc, #368]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e474:	8812      	ldrh	r2, [r2, #0]
   8e476:	fb93 f3f2 	sdiv	r3, r3, r2
   8e47a:	b29b      	uxth	r3, r3
   8e47c:	3301      	adds	r3, #1
   8e47e:	b29a      	uxth	r2, r3
   8e480:	4b5d      	ldr	r3, [pc, #372]	; (8e5f8 <Cl_Pressure_Controller_Handler+0x270>)
   8e482:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e484:	f107 030c 	add.w	r3, r7, #12
   8e488:	4619      	mov	r1, r3
   8e48a:	200b      	movs	r0, #11
   8e48c:	4b57      	ldr	r3, [pc, #348]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e48e:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8e490:	4b5a      	ldr	r3, [pc, #360]	; (8e5fc <Cl_Pressure_Controller_Handler+0x274>)
   8e492:	881b      	ldrh	r3, [r3, #0]
   8e494:	461a      	mov	r2, r3
   8e496:	89bb      	ldrh	r3, [r7, #12]
   8e498:	4413      	add	r3, r2
   8e49a:	4a52      	ldr	r2, [pc, #328]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e49c:	8812      	ldrh	r2, [r2, #0]
   8e49e:	fb93 f3f2 	sdiv	r3, r3, r2
   8e4a2:	b29b      	uxth	r3, r3
   8e4a4:	3301      	adds	r3, #1
   8e4a6:	b29a      	uxth	r2, r3
   8e4a8:	4b54      	ldr	r3, [pc, #336]	; (8e5fc <Cl_Pressure_Controller_Handler+0x274>)
   8e4aa:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8e4ac:	4b4d      	ldr	r3, [pc, #308]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e4ae:	881b      	ldrh	r3, [r3, #0]
   8e4b0:	3301      	adds	r3, #1
   8e4b2:	b29a      	uxth	r2, r3
   8e4b4:	4b4b      	ldr	r3, [pc, #300]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e4b6:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8e4b8:	4b4a      	ldr	r3, [pc, #296]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e4ba:	881b      	ldrh	r3, [r3, #0]
   8e4bc:	2b0a      	cmp	r3, #10
   8e4be:	f240 8087 	bls.w	8e5d0 <Cl_Pressure_Controller_Handler+0x248>
			{
				counter = 0;
   8e4c2:	4b48      	ldr	r3, [pc, #288]	; (8e5e4 <Cl_Pressure_Controller_Handler+0x25c>)
   8e4c4:	2200      	movs	r2, #0
   8e4c6:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8e4c8:	4b45      	ldr	r3, [pc, #276]	; (8e5e0 <Cl_Pressure_Controller_Handler+0x258>)
   8e4ca:	2202      	movs	r2, #2
   8e4cc:	701a      	strb	r2, [r3, #0]
			}
			break;
   8e4ce:	e07f      	b.n	8e5d0 <Cl_Pressure_Controller_Handler+0x248>
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8e4d0:	4b43      	ldr	r3, [pc, #268]	; (8e5e0 <Cl_Pressure_Controller_Handler+0x258>)
   8e4d2:	781b      	ldrb	r3, [r3, #0]
   8e4d4:	2b02      	cmp	r3, #2
   8e4d6:	d17e      	bne.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
   8e4d8:	79fb      	ldrb	r3, [r7, #7]
   8e4da:	2b00      	cmp	r3, #0
   8e4dc:	d07a      	beq.n	8e5d4 <Cl_Pressure_Controller_Handler+0x24c>
   8e4de:	2b01      	cmp	r3, #1
   8e4e0:	d000      	beq.n	8e4e4 <Cl_Pressure_Controller_Handler+0x15c>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8e4e2:	e078      	b.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e4e4:	f107 030c 	add.w	r3, r7, #12
   8e4e8:	4619      	mov	r1, r3
   8e4ea:	200e      	movs	r0, #14
   8e4ec:	4b3f      	ldr	r3, [pc, #252]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e4ee:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8e4f0:	4b3d      	ldr	r3, [pc, #244]	; (8e5e8 <Cl_Pressure_Controller_Handler+0x260>)
   8e4f2:	881b      	ldrh	r3, [r3, #0]
   8e4f4:	461a      	mov	r2, r3
   8e4f6:	4613      	mov	r3, r2
   8e4f8:	00db      	lsls	r3, r3, #3
   8e4fa:	4413      	add	r3, r2
   8e4fc:	89ba      	ldrh	r2, [r7, #12]
   8e4fe:	4413      	add	r3, r2
   8e500:	4a3f      	ldr	r2, [pc, #252]	; (8e600 <Cl_Pressure_Controller_Handler+0x278>)
   8e502:	fb82 1203 	smull	r1, r2, r2, r3
   8e506:	1092      	asrs	r2, r2, #2
   8e508:	17db      	asrs	r3, r3, #31
   8e50a:	1ad3      	subs	r3, r2, r3
   8e50c:	b29a      	uxth	r2, r3
   8e50e:	4b36      	ldr	r3, [pc, #216]	; (8e5e8 <Cl_Pressure_Controller_Handler+0x260>)
   8e510:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e512:	f107 030c 	add.w	r3, r7, #12
   8e516:	4619      	mov	r1, r3
   8e518:	200f      	movs	r0, #15
   8e51a:	4b34      	ldr	r3, [pc, #208]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e51c:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8e51e:	4b34      	ldr	r3, [pc, #208]	; (8e5f0 <Cl_Pressure_Controller_Handler+0x268>)
   8e520:	881b      	ldrh	r3, [r3, #0]
   8e522:	461a      	mov	r2, r3
   8e524:	4613      	mov	r3, r2
   8e526:	00db      	lsls	r3, r3, #3
   8e528:	4413      	add	r3, r2
   8e52a:	89ba      	ldrh	r2, [r7, #12]
   8e52c:	4413      	add	r3, r2
   8e52e:	4a34      	ldr	r2, [pc, #208]	; (8e600 <Cl_Pressure_Controller_Handler+0x278>)
   8e530:	fb82 1203 	smull	r1, r2, r2, r3
   8e534:	1092      	asrs	r2, r2, #2
   8e536:	17db      	asrs	r3, r3, #31
   8e538:	1ad3      	subs	r3, r2, r3
   8e53a:	b29a      	uxth	r2, r3
   8e53c:	4b2c      	ldr	r3, [pc, #176]	; (8e5f0 <Cl_Pressure_Controller_Handler+0x268>)
   8e53e:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e540:	f107 030c 	add.w	r3, r7, #12
   8e544:	4619      	mov	r1, r3
   8e546:	2010      	movs	r0, #16
   8e548:	4b28      	ldr	r3, [pc, #160]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e54a:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8e54c:	4b29      	ldr	r3, [pc, #164]	; (8e5f4 <Cl_Pressure_Controller_Handler+0x26c>)
   8e54e:	881b      	ldrh	r3, [r3, #0]
   8e550:	461a      	mov	r2, r3
   8e552:	4613      	mov	r3, r2
   8e554:	00db      	lsls	r3, r3, #3
   8e556:	4413      	add	r3, r2
   8e558:	89ba      	ldrh	r2, [r7, #12]
   8e55a:	4413      	add	r3, r2
   8e55c:	4a28      	ldr	r2, [pc, #160]	; (8e600 <Cl_Pressure_Controller_Handler+0x278>)
   8e55e:	fb82 1203 	smull	r1, r2, r2, r3
   8e562:	1092      	asrs	r2, r2, #2
   8e564:	17db      	asrs	r3, r3, #31
   8e566:	1ad3      	subs	r3, r2, r3
   8e568:	b29a      	uxth	r2, r3
   8e56a:	4b22      	ldr	r3, [pc, #136]	; (8e5f4 <Cl_Pressure_Controller_Handler+0x26c>)
   8e56c:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e56e:	f107 030c 	add.w	r3, r7, #12
   8e572:	4619      	mov	r1, r3
   8e574:	200b      	movs	r0, #11
   8e576:	4b1d      	ldr	r3, [pc, #116]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e578:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8e57a:	4b1f      	ldr	r3, [pc, #124]	; (8e5f8 <Cl_Pressure_Controller_Handler+0x270>)
   8e57c:	881b      	ldrh	r3, [r3, #0]
   8e57e:	461a      	mov	r2, r3
   8e580:	4613      	mov	r3, r2
   8e582:	00db      	lsls	r3, r3, #3
   8e584:	4413      	add	r3, r2
   8e586:	89ba      	ldrh	r2, [r7, #12]
   8e588:	4413      	add	r3, r2
   8e58a:	4a1d      	ldr	r2, [pc, #116]	; (8e600 <Cl_Pressure_Controller_Handler+0x278>)
   8e58c:	fb82 1203 	smull	r1, r2, r2, r3
   8e590:	1092      	asrs	r2, r2, #2
   8e592:	17db      	asrs	r3, r3, #31
   8e594:	1ad3      	subs	r3, r2, r3
   8e596:	b29a      	uxth	r2, r3
   8e598:	4b17      	ldr	r3, [pc, #92]	; (8e5f8 <Cl_Pressure_Controller_Handler+0x270>)
   8e59a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8e59c:	f107 030c 	add.w	r3, r7, #12
   8e5a0:	4619      	mov	r1, r3
   8e5a2:	200c      	movs	r0, #12
   8e5a4:	4b11      	ldr	r3, [pc, #68]	; (8e5ec <Cl_Pressure_Controller_Handler+0x264>)
   8e5a6:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8e5a8:	4b14      	ldr	r3, [pc, #80]	; (8e5fc <Cl_Pressure_Controller_Handler+0x274>)
   8e5aa:	881b      	ldrh	r3, [r3, #0]
   8e5ac:	461a      	mov	r2, r3
   8e5ae:	4613      	mov	r3, r2
   8e5b0:	00db      	lsls	r3, r3, #3
   8e5b2:	4413      	add	r3, r2
   8e5b4:	89ba      	ldrh	r2, [r7, #12]
   8e5b6:	4413      	add	r3, r2
   8e5b8:	4a11      	ldr	r2, [pc, #68]	; (8e600 <Cl_Pressure_Controller_Handler+0x278>)
   8e5ba:	fb82 1203 	smull	r1, r2, r2, r3
   8e5be:	1092      	asrs	r2, r2, #2
   8e5c0:	17db      	asrs	r3, r3, #31
   8e5c2:	1ad3      	subs	r3, r2, r3
   8e5c4:	b29a      	uxth	r2, r3
   8e5c6:	4b0d      	ldr	r3, [pc, #52]	; (8e5fc <Cl_Pressure_Controller_Handler+0x274>)
   8e5c8:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8e5ca:	e004      	b.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e5cc:	bf00      	nop
   8e5ce:	e002      	b.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
			if(counter > 10)
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
   8e5d0:	bf00      	nop
   8e5d2:	e000      	b.n	8e5d6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e5d4:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8e5d6:	7bfb      	ldrb	r3, [r7, #15]
}
   8e5d8:	4618      	mov	r0, r3
   8e5da:	3710      	adds	r7, #16
   8e5dc:	46bd      	mov	sp, r7
   8e5de:	bd80      	pop	{r7, pc}
   8e5e0:	200725d8 	.word	0x200725d8
   8e5e4:	200725d6 	.word	0x200725d6
   8e5e8:	200725cc 	.word	0x200725cc
   8e5ec:	0008d499 	.word	0x0008d499
   8e5f0:	200725ce 	.word	0x200725ce
   8e5f4:	200725d0 	.word	0x200725d0
   8e5f8:	200725d2 	.word	0x200725d2
   8e5fc:	200725d4 	.word	0x200725d4
   8e600:	66666667 	.word	0x66666667

0008e604 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   8e604:	b480      	push	{r7}
   8e606:	b083      	sub	sp, #12
   8e608:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8e60a:	2300      	movs	r3, #0
   8e60c:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8e60e:	4b0c      	ldr	r3, [pc, #48]	; (8e640 <Cl_Pressure_Controller_Init+0x3c>)
   8e610:	2200      	movs	r2, #0
   8e612:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8e614:	4b0b      	ldr	r3, [pc, #44]	; (8e644 <Cl_Pressure_Controller_Init+0x40>)
   8e616:	2200      	movs	r2, #0
   8e618:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8e61a:	4b0b      	ldr	r3, [pc, #44]	; (8e648 <Cl_Pressure_Controller_Init+0x44>)
   8e61c:	2200      	movs	r2, #0
   8e61e:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8e620:	4b0a      	ldr	r3, [pc, #40]	; (8e64c <Cl_Pressure_Controller_Init+0x48>)
   8e622:	2200      	movs	r2, #0
   8e624:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8e626:	4b0a      	ldr	r3, [pc, #40]	; (8e650 <Cl_Pressure_Controller_Init+0x4c>)
   8e628:	2200      	movs	r2, #0
   8e62a:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8e62c:	4b09      	ldr	r3, [pc, #36]	; (8e654 <Cl_Pressure_Controller_Init+0x50>)
   8e62e:	2201      	movs	r2, #1
   8e630:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8e632:	79fb      	ldrb	r3, [r7, #7]
   8e634:	4618      	mov	r0, r3
   8e636:	370c      	adds	r7, #12
   8e638:	46bd      	mov	sp, r7
   8e63a:	bc80      	pop	{r7}
   8e63c:	4770      	bx	lr
   8e63e:	bf00      	nop
   8e640:	200725cc 	.word	0x200725cc
   8e644:	200725ce 	.word	0x200725ce
   8e648:	200725d0 	.word	0x200725d0
   8e64c:	200725d2 	.word	0x200725d2
   8e650:	200725d4 	.word	0x200725d4
   8e654:	200725d8 	.word	0x200725d8

0008e658 <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   8e658:	b590      	push	{r4, r7, lr}
   8e65a:	b085      	sub	sp, #20
   8e65c:	af00      	add	r7, sp, #0
   8e65e:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   8e660:	f04f 0300 	mov.w	r3, #0
   8e664:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8e666:	2300      	movs	r3, #0
   8e668:	60fb      	str	r3, [r7, #12]
   8e66a:	e075      	b.n	8e758 <res_temp_lookuptable+0x100>
	{
		if (res == res_temp[i].resistance)
   8e66c:	4b3e      	ldr	r3, [pc, #248]	; (8e768 <res_temp_lookuptable+0x110>)
   8e66e:	6878      	ldr	r0, [r7, #4]
   8e670:	4798      	blx	r3
   8e672:	4a3e      	ldr	r2, [pc, #248]	; (8e76c <res_temp_lookuptable+0x114>)
   8e674:	68fb      	ldr	r3, [r7, #12]
   8e676:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e67a:	4b3d      	ldr	r3, [pc, #244]	; (8e770 <res_temp_lookuptable+0x118>)
   8e67c:	4611      	mov	r1, r2
   8e67e:	4798      	blx	r3
   8e680:	4603      	mov	r3, r0
   8e682:	2b00      	cmp	r3, #0
   8e684:	d007      	beq.n	8e696 <res_temp_lookuptable+0x3e>
		{
			res_temp_value=res_temp[i].temperature;
   8e686:	4a39      	ldr	r2, [pc, #228]	; (8e76c <res_temp_lookuptable+0x114>)
   8e688:	68fb      	ldr	r3, [r7, #12]
   8e68a:	00db      	lsls	r3, r3, #3
   8e68c:	4413      	add	r3, r2
   8e68e:	685b      	ldr	r3, [r3, #4]
   8e690:	4a38      	ldr	r2, [pc, #224]	; (8e774 <res_temp_lookuptable+0x11c>)
   8e692:	6013      	str	r3, [r2, #0]
			break;
   8e694:	e063      	b.n	8e75e <res_temp_lookuptable+0x106>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   8e696:	4b34      	ldr	r3, [pc, #208]	; (8e768 <res_temp_lookuptable+0x110>)
   8e698:	6878      	ldr	r0, [r7, #4]
   8e69a:	4798      	blx	r3
   8e69c:	4a33      	ldr	r2, [pc, #204]	; (8e76c <res_temp_lookuptable+0x114>)
   8e69e:	68fb      	ldr	r3, [r7, #12]
   8e6a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e6a4:	4b34      	ldr	r3, [pc, #208]	; (8e778 <res_temp_lookuptable+0x120>)
   8e6a6:	4611      	mov	r1, r2
   8e6a8:	4798      	blx	r3
   8e6aa:	4603      	mov	r3, r0
   8e6ac:	2b00      	cmp	r3, #0
   8e6ae:	d050      	beq.n	8e752 <res_temp_lookuptable+0xfa>
   8e6b0:	4b2d      	ldr	r3, [pc, #180]	; (8e768 <res_temp_lookuptable+0x110>)
   8e6b2:	6878      	ldr	r0, [r7, #4]
   8e6b4:	4798      	blx	r3
   8e6b6:	68fb      	ldr	r3, [r7, #12]
   8e6b8:	3301      	adds	r3, #1
   8e6ba:	4a2c      	ldr	r2, [pc, #176]	; (8e76c <res_temp_lookuptable+0x114>)
   8e6bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e6c0:	4b2e      	ldr	r3, [pc, #184]	; (8e77c <res_temp_lookuptable+0x124>)
   8e6c2:	4611      	mov	r1, r2
   8e6c4:	4798      	blx	r3
   8e6c6:	4603      	mov	r3, r0
   8e6c8:	2b00      	cmp	r3, #0
   8e6ca:	d042      	beq.n	8e752 <res_temp_lookuptable+0xfa>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   8e6cc:	68fb      	ldr	r3, [r7, #12]
   8e6ce:	3301      	adds	r3, #1
   8e6d0:	4a26      	ldr	r2, [pc, #152]	; (8e76c <res_temp_lookuptable+0x114>)
   8e6d2:	00db      	lsls	r3, r3, #3
   8e6d4:	4413      	add	r3, r2
   8e6d6:	6858      	ldr	r0, [r3, #4]
   8e6d8:	4a24      	ldr	r2, [pc, #144]	; (8e76c <res_temp_lookuptable+0x114>)
   8e6da:	68fb      	ldr	r3, [r7, #12]
   8e6dc:	00db      	lsls	r3, r3, #3
   8e6de:	4413      	add	r3, r2
   8e6e0:	685a      	ldr	r2, [r3, #4]
   8e6e2:	4b27      	ldr	r3, [pc, #156]	; (8e780 <res_temp_lookuptable+0x128>)
   8e6e4:	4611      	mov	r1, r2
   8e6e6:	4798      	blx	r3
   8e6e8:	4603      	mov	r3, r0
   8e6ea:	461c      	mov	r4, r3
   8e6ec:	68fb      	ldr	r3, [r7, #12]
   8e6ee:	3301      	adds	r3, #1
   8e6f0:	4a1e      	ldr	r2, [pc, #120]	; (8e76c <res_temp_lookuptable+0x114>)
   8e6f2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   8e6f6:	4a1d      	ldr	r2, [pc, #116]	; (8e76c <res_temp_lookuptable+0x114>)
   8e6f8:	68fb      	ldr	r3, [r7, #12]
   8e6fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e6fe:	4b20      	ldr	r3, [pc, #128]	; (8e780 <res_temp_lookuptable+0x128>)
   8e700:	4611      	mov	r1, r2
   8e702:	4798      	blx	r3
   8e704:	4603      	mov	r3, r0
   8e706:	461a      	mov	r2, r3
   8e708:	4b1e      	ldr	r3, [pc, #120]	; (8e784 <res_temp_lookuptable+0x12c>)
   8e70a:	4611      	mov	r1, r2
   8e70c:	4620      	mov	r0, r4
   8e70e:	4798      	blx	r3
   8e710:	4603      	mov	r3, r0
   8e712:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   8e714:	4b14      	ldr	r3, [pc, #80]	; (8e768 <res_temp_lookuptable+0x110>)
   8e716:	6878      	ldr	r0, [r7, #4]
   8e718:	4798      	blx	r3
   8e71a:	4a14      	ldr	r2, [pc, #80]	; (8e76c <res_temp_lookuptable+0x114>)
   8e71c:	68fb      	ldr	r3, [r7, #12]
   8e71e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e722:	4b17      	ldr	r3, [pc, #92]	; (8e780 <res_temp_lookuptable+0x128>)
   8e724:	4611      	mov	r1, r2
   8e726:	4798      	blx	r3
   8e728:	4603      	mov	r3, r0
   8e72a:	461a      	mov	r2, r3
   8e72c:	4b16      	ldr	r3, [pc, #88]	; (8e788 <res_temp_lookuptable+0x130>)
   8e72e:	68b9      	ldr	r1, [r7, #8]
   8e730:	4610      	mov	r0, r2
   8e732:	4798      	blx	r3
   8e734:	4603      	mov	r3, r0
   8e736:	4618      	mov	r0, r3
   8e738:	4a0c      	ldr	r2, [pc, #48]	; (8e76c <res_temp_lookuptable+0x114>)
   8e73a:	68fb      	ldr	r3, [r7, #12]
   8e73c:	00db      	lsls	r3, r3, #3
   8e73e:	4413      	add	r3, r2
   8e740:	685a      	ldr	r2, [r3, #4]
   8e742:	4b12      	ldr	r3, [pc, #72]	; (8e78c <res_temp_lookuptable+0x134>)
   8e744:	4611      	mov	r1, r2
   8e746:	4798      	blx	r3
   8e748:	4603      	mov	r3, r0
   8e74a:	461a      	mov	r2, r3
   8e74c:	4b09      	ldr	r3, [pc, #36]	; (8e774 <res_temp_lookuptable+0x11c>)
   8e74e:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   8e750:	e005      	b.n	8e75e <res_temp_lookuptable+0x106>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8e752:	68fb      	ldr	r3, [r7, #12]
   8e754:	3301      	adds	r3, #1
   8e756:	60fb      	str	r3, [r7, #12]
   8e758:	68fb      	ldr	r3, [r7, #12]
   8e75a:	2b95      	cmp	r3, #149	; 0x95
   8e75c:	dd86      	ble.n	8e66c <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   8e75e:	bf00      	nop
   8e760:	3714      	adds	r7, #20
   8e762:	46bd      	mov	sp, r7
   8e764:	bd90      	pop	{r4, r7, pc}
   8e766:	bf00      	nop
   8e768:	000a25dd 	.word	0x000a25dd
   8e76c:	20070500 	.word	0x20070500
   8e770:	000a29b5 	.word	0x000a29b5
   8e774:	200725ec 	.word	0x200725ec
   8e778:	000a2a05 	.word	0x000a2a05
   8e77c:	000a29c9 	.word	0x000a29c9
   8e780:	000a2479 	.word	0x000a2479
   8e784:	000a27f5 	.word	0x000a27f5
   8e788:	000a268d 	.word	0x000a268d
   8e78c:	000a247d 	.word	0x000a247d

0008e790 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8e790:	b590      	push	{r4, r7, lr}
   8e792:	b08b      	sub	sp, #44	; 0x2c
   8e794:	af00      	add	r7, sp, #0
   8e796:	4603      	mov	r3, r0
   8e798:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   8e79a:	f04f 0300 	mov.w	r3, #0
   8e79e:	627b      	str	r3, [r7, #36]	; 0x24
   8e7a0:	f04f 0300 	mov.w	r3, #0
   8e7a4:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8e7a6:	2300      	movs	r3, #0
   8e7a8:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   8e7aa:	2300      	movs	r3, #0
   8e7ac:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   8e7ae:	2300      	movs	r3, #0
   8e7b0:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8e7b2:	4b52      	ldr	r3, [pc, #328]	; (8e8fc <Cl_Temperature_Controller_Handler+0x16c>)
   8e7b4:	781b      	ldrb	r3, [r3, #0]
   8e7b6:	2b01      	cmp	r3, #1
   8e7b8:	f040 8090 	bne.w	8e8dc <Cl_Temperature_Controller_Handler+0x14c>
	{
			switch(Cl_Tc_Event)
   8e7bc:	79fb      	ldrb	r3, [r7, #7]
   8e7be:	2b01      	cmp	r3, #1
   8e7c0:	d005      	beq.n	8e7ce <Cl_Temperature_Controller_Handler+0x3e>
   8e7c2:	2b03      	cmp	r3, #3
   8e7c4:	d076      	beq.n	8e8b4 <Cl_Temperature_Controller_Handler+0x124>
   8e7c6:	2b00      	cmp	r3, #0
   8e7c8:	f000 81f1 	beq.w	8ebae <Cl_Temperature_Controller_Handler+0x41e>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   8e7cc:	e235      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8e7ce:	4b4c      	ldr	r3, [pc, #304]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e7d0:	881b      	ldrh	r3, [r3, #0]
   8e7d2:	2b00      	cmp	r3, #0
   8e7d4:	d10c      	bne.n	8e7f0 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8e7d6:	494b      	ldr	r1, [pc, #300]	; (8e904 <Cl_Temperature_Controller_Handler+0x174>)
   8e7d8:	2012      	movs	r0, #18
   8e7da:	4b4b      	ldr	r3, [pc, #300]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e7dc:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8e7de:	494b      	ldr	r1, [pc, #300]	; (8e90c <Cl_Temperature_Controller_Handler+0x17c>)
   8e7e0:	2013      	movs	r0, #19
   8e7e2:	4b49      	ldr	r3, [pc, #292]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e7e4:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8e7e6:	494a      	ldr	r1, [pc, #296]	; (8e910 <Cl_Temperature_Controller_Handler+0x180>)
   8e7e8:	2014      	movs	r0, #20
   8e7ea:	4b47      	ldr	r3, [pc, #284]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e7ec:	4798      	blx	r3
   8e7ee:	e04f      	b.n	8e890 <Cl_Temperature_Controller_Handler+0x100>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8e7f0:	f107 0314 	add.w	r3, r7, #20
   8e7f4:	4619      	mov	r1, r3
   8e7f6:	2012      	movs	r0, #18
   8e7f8:	4b43      	ldr	r3, [pc, #268]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e7fa:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8e7fc:	4b41      	ldr	r3, [pc, #260]	; (8e904 <Cl_Temperature_Controller_Handler+0x174>)
   8e7fe:	881b      	ldrh	r3, [r3, #0]
   8e800:	461a      	mov	r2, r3
   8e802:	8abb      	ldrh	r3, [r7, #20]
   8e804:	4413      	add	r3, r2
   8e806:	4a3e      	ldr	r2, [pc, #248]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e808:	8812      	ldrh	r2, [r2, #0]
   8e80a:	fb93 f3f2 	sdiv	r3, r3, r2
   8e80e:	b29b      	uxth	r3, r3
   8e810:	3301      	adds	r3, #1
   8e812:	b29a      	uxth	r2, r3
   8e814:	4b3b      	ldr	r3, [pc, #236]	; (8e904 <Cl_Temperature_Controller_Handler+0x174>)
   8e816:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8e818:	f107 0314 	add.w	r3, r7, #20
   8e81c:	4619      	mov	r1, r3
   8e81e:	2013      	movs	r0, #19
   8e820:	4b39      	ldr	r3, [pc, #228]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e822:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8e824:	4b39      	ldr	r3, [pc, #228]	; (8e90c <Cl_Temperature_Controller_Handler+0x17c>)
   8e826:	881b      	ldrh	r3, [r3, #0]
   8e828:	461a      	mov	r2, r3
   8e82a:	8abb      	ldrh	r3, [r7, #20]
   8e82c:	4413      	add	r3, r2
   8e82e:	4a34      	ldr	r2, [pc, #208]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e830:	8812      	ldrh	r2, [r2, #0]
   8e832:	fb93 f3f2 	sdiv	r3, r3, r2
   8e836:	b29b      	uxth	r3, r3
   8e838:	3301      	adds	r3, #1
   8e83a:	b29a      	uxth	r2, r3
   8e83c:	4b33      	ldr	r3, [pc, #204]	; (8e90c <Cl_Temperature_Controller_Handler+0x17c>)
   8e83e:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8e840:	f107 0314 	add.w	r3, r7, #20
   8e844:	4619      	mov	r1, r3
   8e846:	2014      	movs	r0, #20
   8e848:	4b2f      	ldr	r3, [pc, #188]	; (8e908 <Cl_Temperature_Controller_Handler+0x178>)
   8e84a:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8e84c:	8abb      	ldrh	r3, [r7, #20]
   8e84e:	461a      	mov	r2, r3
   8e850:	4b30      	ldr	r3, [pc, #192]	; (8e914 <Cl_Temperature_Controller_Handler+0x184>)
   8e852:	4610      	mov	r0, r2
   8e854:	4798      	blx	r3
   8e856:	4b2e      	ldr	r3, [pc, #184]	; (8e910 <Cl_Temperature_Controller_Handler+0x180>)
   8e858:	681a      	ldr	r2, [r3, #0]
   8e85a:	4b2f      	ldr	r3, [pc, #188]	; (8e918 <Cl_Temperature_Controller_Handler+0x188>)
   8e85c:	4611      	mov	r1, r2
   8e85e:	4798      	blx	r3
   8e860:	4603      	mov	r3, r0
   8e862:	461c      	mov	r4, r3
   8e864:	4b26      	ldr	r3, [pc, #152]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e866:	881b      	ldrh	r3, [r3, #0]
   8e868:	461a      	mov	r2, r3
   8e86a:	4b2a      	ldr	r3, [pc, #168]	; (8e914 <Cl_Temperature_Controller_Handler+0x184>)
   8e86c:	4610      	mov	r0, r2
   8e86e:	4798      	blx	r3
   8e870:	4602      	mov	r2, r0
   8e872:	4b2a      	ldr	r3, [pc, #168]	; (8e91c <Cl_Temperature_Controller_Handler+0x18c>)
   8e874:	4611      	mov	r1, r2
   8e876:	4620      	mov	r0, r4
   8e878:	4798      	blx	r3
   8e87a:	4603      	mov	r3, r0
   8e87c:	461a      	mov	r2, r3
   8e87e:	4b26      	ldr	r3, [pc, #152]	; (8e918 <Cl_Temperature_Controller_Handler+0x188>)
   8e880:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8e884:	4610      	mov	r0, r2
   8e886:	4798      	blx	r3
   8e888:	4603      	mov	r3, r0
   8e88a:	461a      	mov	r2, r3
   8e88c:	4b20      	ldr	r3, [pc, #128]	; (8e910 <Cl_Temperature_Controller_Handler+0x180>)
   8e88e:	601a      	str	r2, [r3, #0]
				}

				counter++;
   8e890:	4b1b      	ldr	r3, [pc, #108]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e892:	881b      	ldrh	r3, [r3, #0]
   8e894:	3301      	adds	r3, #1
   8e896:	b29a      	uxth	r2, r3
   8e898:	4b19      	ldr	r3, [pc, #100]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e89a:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   8e89c:	4b18      	ldr	r3, [pc, #96]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e89e:	881b      	ldrh	r3, [r3, #0]
   8e8a0:	2b0a      	cmp	r3, #10
   8e8a2:	f240 81c7 	bls.w	8ec34 <Cl_Temperature_Controller_Handler+0x4a4>
				{
					counter = 0;
   8e8a6:	4b16      	ldr	r3, [pc, #88]	; (8e900 <Cl_Temperature_Controller_Handler+0x170>)
   8e8a8:	2200      	movs	r2, #0
   8e8aa:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   8e8ac:	4b13      	ldr	r3, [pc, #76]	; (8e8fc <Cl_Temperature_Controller_Handler+0x16c>)
   8e8ae:	2202      	movs	r2, #2
   8e8b0:	701a      	strb	r2, [r3, #0]
				}
				break;
   8e8b2:	e1bf      	b.n	8ec34 <Cl_Temperature_Controller_Handler+0x4a4>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   8e8b4:	f107 0312 	add.w	r3, r7, #18
   8e8b8:	4618      	mov	r0, r3
   8e8ba:	4b19      	ldr	r3, [pc, #100]	; (8e920 <Cl_Temperature_Controller_Handler+0x190>)
   8e8bc:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   8e8be:	8a7b      	ldrh	r3, [r7, #18]
   8e8c0:	461a      	mov	r2, r3
   8e8c2:	4b14      	ldr	r3, [pc, #80]	; (8e914 <Cl_Temperature_Controller_Handler+0x184>)
   8e8c4:	4610      	mov	r0, r2
   8e8c6:	4798      	blx	r3
   8e8c8:	4b11      	ldr	r3, [pc, #68]	; (8e910 <Cl_Temperature_Controller_Handler+0x180>)
   8e8ca:	681a      	ldr	r2, [r3, #0]
   8e8cc:	4b15      	ldr	r3, [pc, #84]	; (8e924 <Cl_Temperature_Controller_Handler+0x194>)
   8e8ce:	4611      	mov	r1, r2
   8e8d0:	4798      	blx	r3
   8e8d2:	4603      	mov	r3, r0
   8e8d4:	461a      	mov	r2, r3
   8e8d6:	4b14      	ldr	r3, [pc, #80]	; (8e928 <Cl_Temperature_Controller_Handler+0x198>)
   8e8d8:	601a      	str	r2, [r3, #0]
				break;
   8e8da:	e1ae      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   8e8dc:	4b07      	ldr	r3, [pc, #28]	; (8e8fc <Cl_Temperature_Controller_Handler+0x16c>)
   8e8de:	781b      	ldrb	r3, [r3, #0]
   8e8e0:	2b02      	cmp	r3, #2
   8e8e2:	f040 81aa 	bne.w	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
	{
			switch(Cl_Tc_Event)
   8e8e6:	79fb      	ldrb	r3, [r7, #7]
   8e8e8:	2b01      	cmp	r3, #1
   8e8ea:	d01f      	beq.n	8e92c <Cl_Temperature_Controller_Handler+0x19c>
   8e8ec:	2b03      	cmp	r3, #3
   8e8ee:	f000 811c 	beq.w	8eb2a <Cl_Temperature_Controller_Handler+0x39a>
   8e8f2:	2b00      	cmp	r3, #0
   8e8f4:	f000 81a0 	beq.w	8ec38 <Cl_Temperature_Controller_Handler+0x4a8>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   8e8f8:	e19f      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
   8e8fa:	bf00      	nop
   8e8fc:	200725e8 	.word	0x200725e8
   8e900:	200725de 	.word	0x200725de
   8e904:	200725da 	.word	0x200725da
   8e908:	0008d499 	.word	0x0008d499
   8e90c:	200725dc 	.word	0x200725dc
   8e910:	200725e0 	.word	0x200725e0
   8e914:	000a25e5 	.word	0x000a25e5
   8e918:	000a247d 	.word	0x000a247d
   8e91c:	000a27f5 	.word	0x000a27f5
   8e920:	00096949 	.word	0x00096949
   8e924:	000a2479 	.word	0x000a2479
   8e928:	200725e4 	.word	0x200725e4
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8e92c:	f107 0314 	add.w	r3, r7, #20
   8e930:	4619      	mov	r1, r3
   8e932:	2012      	movs	r0, #18
   8e934:	4ba4      	ldr	r3, [pc, #656]	; (8ebc8 <Cl_Temperature_Controller_Handler+0x438>)
   8e936:	4798      	blx	r3
				
//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
   8e938:	8abb      	ldrh	r3, [r7, #20]
   8e93a:	461a      	mov	r2, r3
   8e93c:	f649 5308 	movw	r3, #40200	; 0x9d08
   8e940:	fb03 f302 	mul.w	r3, r3, r2
   8e944:	2b00      	cmp	r3, #0
   8e946:	da02      	bge.n	8e94e <Cl_Temperature_Controller_Handler+0x1be>
   8e948:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e94c:	33ff      	adds	r3, #255	; 0xff
   8e94e:	141b      	asrs	r3, r3, #16
   8e950:	4618      	mov	r0, r3
   8e952:	4b9e      	ldr	r3, [pc, #632]	; (8ebcc <Cl_Temperature_Controller_Handler+0x43c>)
   8e954:	4798      	blx	r3
				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   8e956:	4b9e      	ldr	r3, [pc, #632]	; (8ebd0 <Cl_Temperature_Controller_Handler+0x440>)
   8e958:	681a      	ldr	r2, [r3, #0]
   8e95a:	4b9e      	ldr	r3, [pc, #632]	; (8ebd4 <Cl_Temperature_Controller_Handler+0x444>)
   8e95c:	499e      	ldr	r1, [pc, #632]	; (8ebd8 <Cl_Temperature_Controller_Handler+0x448>)
   8e95e:	4610      	mov	r0, r2
   8e960:	4798      	blx	r3
   8e962:	4603      	mov	r3, r0
   8e964:	461a      	mov	r2, r3
   8e966:	4b9d      	ldr	r3, [pc, #628]	; (8ebdc <Cl_Temperature_Controller_Handler+0x44c>)
   8e968:	4610      	mov	r0, r2
   8e96a:	4798      	blx	r3
   8e96c:	4603      	mov	r3, r0
   8e96e:	b29a      	uxth	r2, r3
   8e970:	4b9b      	ldr	r3, [pc, #620]	; (8ebe0 <Cl_Temperature_Controller_Handler+0x450>)
   8e972:	801a      	strh	r2, [r3, #0]
				Temp1 = Temp1 - 3.1 + 1.4;										// sensor offset 
   8e974:	4b9a      	ldr	r3, [pc, #616]	; (8ebe0 <Cl_Temperature_Controller_Handler+0x450>)
   8e976:	881b      	ldrh	r3, [r3, #0]
   8e978:	461a      	mov	r2, r3
   8e97a:	4b9a      	ldr	r3, [pc, #616]	; (8ebe4 <Cl_Temperature_Controller_Handler+0x454>)
   8e97c:	4610      	mov	r0, r2
   8e97e:	4798      	blx	r3
   8e980:	4c99      	ldr	r4, [pc, #612]	; (8ebe8 <Cl_Temperature_Controller_Handler+0x458>)
   8e982:	a38d      	add	r3, pc, #564	; (adr r3, 8ebb8 <Cl_Temperature_Controller_Handler+0x428>)
   8e984:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e988:	47a0      	blx	r4
   8e98a:	4603      	mov	r3, r0
   8e98c:	460c      	mov	r4, r1
   8e98e:	4618      	mov	r0, r3
   8e990:	4621      	mov	r1, r4
   8e992:	4c96      	ldr	r4, [pc, #600]	; (8ebec <Cl_Temperature_Controller_Handler+0x45c>)
   8e994:	a38a      	add	r3, pc, #552	; (adr r3, 8ebc0 <Cl_Temperature_Controller_Handler+0x430>)
   8e996:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e99a:	47a0      	blx	r4
   8e99c:	4603      	mov	r3, r0
   8e99e:	460c      	mov	r4, r1
   8e9a0:	4619      	mov	r1, r3
   8e9a2:	4622      	mov	r2, r4
   8e9a4:	4b92      	ldr	r3, [pc, #584]	; (8ebf0 <Cl_Temperature_Controller_Handler+0x460>)
   8e9a6:	4608      	mov	r0, r1
   8e9a8:	4611      	mov	r1, r2
   8e9aa:	4798      	blx	r3
   8e9ac:	4603      	mov	r3, r0
   8e9ae:	b29a      	uxth	r2, r3
   8e9b0:	4b8b      	ldr	r3, [pc, #556]	; (8ebe0 <Cl_Temperature_Controller_Handler+0x450>)
   8e9b2:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   8e9b4:	4b8a      	ldr	r3, [pc, #552]	; (8ebe0 <Cl_Temperature_Controller_Handler+0x450>)
   8e9b6:	881b      	ldrh	r3, [r3, #0]
   8e9b8:	461a      	mov	r2, r3
   8e9ba:	4613      	mov	r3, r2
   8e9bc:	00db      	lsls	r3, r3, #3
   8e9be:	4413      	add	r3, r2
   8e9c0:	8aba      	ldrh	r2, [r7, #20]
   8e9c2:	4413      	add	r3, r2
   8e9c4:	4a8b      	ldr	r2, [pc, #556]	; (8ebf4 <Cl_Temperature_Controller_Handler+0x464>)
   8e9c6:	fb82 1203 	smull	r1, r2, r2, r3
   8e9ca:	1092      	asrs	r2, r2, #2
   8e9cc:	17db      	asrs	r3, r3, #31
   8e9ce:	1ad3      	subs	r3, r2, r3
   8e9d0:	b29a      	uxth	r2, r3
   8e9d2:	4b83      	ldr	r3, [pc, #524]	; (8ebe0 <Cl_Temperature_Controller_Handler+0x450>)
   8e9d4:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8e9d6:	f107 0314 	add.w	r3, r7, #20
   8e9da:	4619      	mov	r1, r3
   8e9dc:	2013      	movs	r0, #19
   8e9de:	4b7a      	ldr	r3, [pc, #488]	; (8ebc8 <Cl_Temperature_Controller_Handler+0x438>)
   8e9e0:	4798      	blx	r3
				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
   8e9e2:	8abb      	ldrh	r3, [r7, #20]
   8e9e4:	461a      	mov	r2, r3
   8e9e6:	f649 5308 	movw	r3, #40200	; 0x9d08
   8e9ea:	fb03 f302 	mul.w	r3, r3, r2
   8e9ee:	2b00      	cmp	r3, #0
   8e9f0:	da02      	bge.n	8e9f8 <Cl_Temperature_Controller_Handler+0x268>
   8e9f2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e9f6:	33ff      	adds	r3, #255	; 0xff
   8e9f8:	141b      	asrs	r3, r3, #16
   8e9fa:	4618      	mov	r0, r3
   8e9fc:	4b73      	ldr	r3, [pc, #460]	; (8ebcc <Cl_Temperature_Controller_Handler+0x43c>)
   8e9fe:	4798      	blx	r3
				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
   8ea00:	4b73      	ldr	r3, [pc, #460]	; (8ebd0 <Cl_Temperature_Controller_Handler+0x440>)
   8ea02:	681a      	ldr	r2, [r3, #0]
   8ea04:	4b73      	ldr	r3, [pc, #460]	; (8ebd4 <Cl_Temperature_Controller_Handler+0x444>)
   8ea06:	4974      	ldr	r1, [pc, #464]	; (8ebd8 <Cl_Temperature_Controller_Handler+0x448>)
   8ea08:	4610      	mov	r0, r2
   8ea0a:	4798      	blx	r3
   8ea0c:	4603      	mov	r3, r0
   8ea0e:	461a      	mov	r2, r3
   8ea10:	4b72      	ldr	r3, [pc, #456]	; (8ebdc <Cl_Temperature_Controller_Handler+0x44c>)
   8ea12:	4610      	mov	r0, r2
   8ea14:	4798      	blx	r3
   8ea16:	4603      	mov	r3, r0
   8ea18:	b29a      	uxth	r2, r3
   8ea1a:	4b77      	ldr	r3, [pc, #476]	; (8ebf8 <Cl_Temperature_Controller_Handler+0x468>)
   8ea1c:	801a      	strh	r2, [r3, #0]
				Temp2 = Temp2 - 2.5 + 1.2;                                            // sensor offset
   8ea1e:	4b76      	ldr	r3, [pc, #472]	; (8ebf8 <Cl_Temperature_Controller_Handler+0x468>)
   8ea20:	881b      	ldrh	r3, [r3, #0]
   8ea22:	461a      	mov	r2, r3
   8ea24:	4b6f      	ldr	r3, [pc, #444]	; (8ebe4 <Cl_Temperature_Controller_Handler+0x454>)
   8ea26:	4610      	mov	r0, r2
   8ea28:	4798      	blx	r3
   8ea2a:	4c6f      	ldr	r4, [pc, #444]	; (8ebe8 <Cl_Temperature_Controller_Handler+0x458>)
   8ea2c:	f04f 0200 	mov.w	r2, #0
   8ea30:	4b72      	ldr	r3, [pc, #456]	; (8ebfc <Cl_Temperature_Controller_Handler+0x46c>)
   8ea32:	47a0      	blx	r4
   8ea34:	4603      	mov	r3, r0
   8ea36:	460c      	mov	r4, r1
   8ea38:	4618      	mov	r0, r3
   8ea3a:	4621      	mov	r1, r4
   8ea3c:	4c6b      	ldr	r4, [pc, #428]	; (8ebec <Cl_Temperature_Controller_Handler+0x45c>)
   8ea3e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8ea42:	4b6f      	ldr	r3, [pc, #444]	; (8ec00 <Cl_Temperature_Controller_Handler+0x470>)
   8ea44:	47a0      	blx	r4
   8ea46:	4603      	mov	r3, r0
   8ea48:	460c      	mov	r4, r1
   8ea4a:	4619      	mov	r1, r3
   8ea4c:	4622      	mov	r2, r4
   8ea4e:	4b68      	ldr	r3, [pc, #416]	; (8ebf0 <Cl_Temperature_Controller_Handler+0x460>)
   8ea50:	4608      	mov	r0, r1
   8ea52:	4611      	mov	r1, r2
   8ea54:	4798      	blx	r3
   8ea56:	4603      	mov	r3, r0
   8ea58:	b29a      	uxth	r2, r3
   8ea5a:	4b67      	ldr	r3, [pc, #412]	; (8ebf8 <Cl_Temperature_Controller_Handler+0x468>)
   8ea5c:	801a      	strh	r2, [r3, #0]
				
				Temp2 = (Temp2 *9 + temp_val)/10;
   8ea5e:	4b66      	ldr	r3, [pc, #408]	; (8ebf8 <Cl_Temperature_Controller_Handler+0x468>)
   8ea60:	881b      	ldrh	r3, [r3, #0]
   8ea62:	461a      	mov	r2, r3
   8ea64:	4613      	mov	r3, r2
   8ea66:	00db      	lsls	r3, r3, #3
   8ea68:	4413      	add	r3, r2
   8ea6a:	8aba      	ldrh	r2, [r7, #20]
   8ea6c:	4413      	add	r3, r2
   8ea6e:	4a61      	ldr	r2, [pc, #388]	; (8ebf4 <Cl_Temperature_Controller_Handler+0x464>)
   8ea70:	fb82 1203 	smull	r1, r2, r2, r3
   8ea74:	1092      	asrs	r2, r2, #2
   8ea76:	17db      	asrs	r3, r3, #31
   8ea78:	1ad3      	subs	r3, r2, r3
   8ea7a:	b29a      	uxth	r2, r3
   8ea7c:	4b5e      	ldr	r3, [pc, #376]	; (8ebf8 <Cl_Temperature_Controller_Handler+0x468>)
   8ea7e:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8ea80:	f107 0314 	add.w	r3, r7, #20
   8ea84:	4619      	mov	r1, r3
   8ea86:	2014      	movs	r0, #20
   8ea88:	4b4f      	ldr	r3, [pc, #316]	; (8ebc8 <Cl_Temperature_Controller_Handler+0x438>)
   8ea8a:	4798      	blx	r3
																					// resistance of PT100
				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
   8ea8c:	8abb      	ldrh	r3, [r7, #20]
   8ea8e:	461a      	mov	r2, r3
   8ea90:	f649 5308 	movw	r3, #40200	; 0x9d08
   8ea94:	fb03 f302 	mul.w	r3, r3, r2
   8ea98:	2b00      	cmp	r3, #0
   8ea9a:	da02      	bge.n	8eaa2 <Cl_Temperature_Controller_Handler+0x312>
   8ea9c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8eaa0:	33ff      	adds	r3, #255	; 0xff
   8eaa2:	141b      	asrs	r3, r3, #16
   8eaa4:	4618      	mov	r0, r3
   8eaa6:	4b49      	ldr	r3, [pc, #292]	; (8ebcc <Cl_Temperature_Controller_Handler+0x43c>)
   8eaa8:	4798      	blx	r3
				Temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   8eaaa:	4b49      	ldr	r3, [pc, #292]	; (8ebd0 <Cl_Temperature_Controller_Handler+0x440>)
   8eaac:	681a      	ldr	r2, [r3, #0]
   8eaae:	4b49      	ldr	r3, [pc, #292]	; (8ebd4 <Cl_Temperature_Controller_Handler+0x444>)
   8eab0:	4949      	ldr	r1, [pc, #292]	; (8ebd8 <Cl_Temperature_Controller_Handler+0x448>)
   8eab2:	4610      	mov	r0, r2
   8eab4:	4798      	blx	r3
   8eab6:	4603      	mov	r3, r0
   8eab8:	461a      	mov	r2, r3
   8eaba:	4b52      	ldr	r3, [pc, #328]	; (8ec04 <Cl_Temperature_Controller_Handler+0x474>)
   8eabc:	601a      	str	r2, [r3, #0]
				Temp3 = Temp3 - 3.1 + 1.4;										// sensor offset 
   8eabe:	4b51      	ldr	r3, [pc, #324]	; (8ec04 <Cl_Temperature_Controller_Handler+0x474>)
   8eac0:	681a      	ldr	r2, [r3, #0]
   8eac2:	4b51      	ldr	r3, [pc, #324]	; (8ec08 <Cl_Temperature_Controller_Handler+0x478>)
   8eac4:	4610      	mov	r0, r2
   8eac6:	4798      	blx	r3
   8eac8:	4c47      	ldr	r4, [pc, #284]	; (8ebe8 <Cl_Temperature_Controller_Handler+0x458>)
   8eaca:	a33b      	add	r3, pc, #236	; (adr r3, 8ebb8 <Cl_Temperature_Controller_Handler+0x428>)
   8eacc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ead0:	47a0      	blx	r4
   8ead2:	4603      	mov	r3, r0
   8ead4:	460c      	mov	r4, r1
   8ead6:	4618      	mov	r0, r3
   8ead8:	4621      	mov	r1, r4
   8eada:	4c44      	ldr	r4, [pc, #272]	; (8ebec <Cl_Temperature_Controller_Handler+0x45c>)
   8eadc:	a338      	add	r3, pc, #224	; (adr r3, 8ebc0 <Cl_Temperature_Controller_Handler+0x430>)
   8eade:	e9d3 2300 	ldrd	r2, r3, [r3]
   8eae2:	47a0      	blx	r4
   8eae4:	4603      	mov	r3, r0
   8eae6:	460c      	mov	r4, r1
   8eae8:	4619      	mov	r1, r3
   8eaea:	4622      	mov	r2, r4
   8eaec:	4b47      	ldr	r3, [pc, #284]	; (8ec0c <Cl_Temperature_Controller_Handler+0x47c>)
   8eaee:	4608      	mov	r0, r1
   8eaf0:	4611      	mov	r1, r2
   8eaf2:	4798      	blx	r3
   8eaf4:	4602      	mov	r2, r0
   8eaf6:	4b43      	ldr	r3, [pc, #268]	; (8ec04 <Cl_Temperature_Controller_Handler+0x474>)
   8eaf8:	601a      	str	r2, [r3, #0]
				
				
// 				temp = temp_val * 0.8036;
// 				calibration_tmp(temp,TS3);
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   8eafa:	4b42      	ldr	r3, [pc, #264]	; (8ec04 <Cl_Temperature_Controller_Handler+0x474>)
   8eafc:	681a      	ldr	r2, [r3, #0]
   8eafe:	4b44      	ldr	r3, [pc, #272]	; (8ec10 <Cl_Temperature_Controller_Handler+0x480>)
   8eb00:	4944      	ldr	r1, [pc, #272]	; (8ec14 <Cl_Temperature_Controller_Handler+0x484>)
   8eb02:	4610      	mov	r0, r2
   8eb04:	4798      	blx	r3
   8eb06:	4603      	mov	r3, r0
   8eb08:	4618      	mov	r0, r3
   8eb0a:	4b43      	ldr	r3, [pc, #268]	; (8ec18 <Cl_Temperature_Controller_Handler+0x488>)
   8eb0c:	681a      	ldr	r2, [r3, #0]
   8eb0e:	4b43      	ldr	r3, [pc, #268]	; (8ec1c <Cl_Temperature_Controller_Handler+0x48c>)
   8eb10:	4611      	mov	r1, r2
   8eb12:	4798      	blx	r3
   8eb14:	4603      	mov	r3, r0
   8eb16:	461a      	mov	r2, r3
   8eb18:	4b2e      	ldr	r3, [pc, #184]	; (8ebd4 <Cl_Temperature_Controller_Handler+0x444>)
   8eb1a:	4941      	ldr	r1, [pc, #260]	; (8ec20 <Cl_Temperature_Controller_Handler+0x490>)
   8eb1c:	4610      	mov	r0, r2
   8eb1e:	4798      	blx	r3
   8eb20:	4603      	mov	r3, r0
   8eb22:	461a      	mov	r2, r3
   8eb24:	4b37      	ldr	r3, [pc, #220]	; (8ec04 <Cl_Temperature_Controller_Handler+0x474>)
   8eb26:	601a      	str	r2, [r3, #0]
				break;
   8eb28:	e087      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
				case TS_EVENT_5SEC:
				data = 0;
   8eb2a:	2300      	movs	r3, #0
   8eb2c:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   8eb2e:	f04f 0300 	mov.w	r3, #0
   8eb32:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   8eb34:	2300      	movs	r3, #0
   8eb36:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   8eb38:	f107 0312 	add.w	r3, r7, #18
   8eb3c:	4619      	mov	r1, r3
   8eb3e:	2014      	movs	r0, #20
   8eb40:	4b21      	ldr	r3, [pc, #132]	; (8ebc8 <Cl_Temperature_Controller_Handler+0x438>)
   8eb42:	4798      	blx	r3
				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
   8eb44:	8abb      	ldrh	r3, [r7, #20]
   8eb46:	461a      	mov	r2, r3
   8eb48:	f649 5308 	movw	r3, #40200	; 0x9d08
   8eb4c:	fb03 f302 	mul.w	r3, r3, r2
   8eb50:	2b00      	cmp	r3, #0
   8eb52:	da02      	bge.n	8eb5a <Cl_Temperature_Controller_Handler+0x3ca>
   8eb54:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8eb58:	33ff      	adds	r3, #255	; 0xff
   8eb5a:	141b      	asrs	r3, r3, #16
   8eb5c:	4618      	mov	r0, r3
   8eb5e:	4b1b      	ldr	r3, [pc, #108]	; (8ebcc <Cl_Temperature_Controller_Handler+0x43c>)
   8eb60:	4798      	blx	r3
				temp = res_temp_value/100;									// Temp3 value in XX.yy format
   8eb62:	4b1b      	ldr	r3, [pc, #108]	; (8ebd0 <Cl_Temperature_Controller_Handler+0x440>)
   8eb64:	681a      	ldr	r2, [r3, #0]
   8eb66:	4b1b      	ldr	r3, [pc, #108]	; (8ebd4 <Cl_Temperature_Controller_Handler+0x444>)
   8eb68:	491b      	ldr	r1, [pc, #108]	; (8ebd8 <Cl_Temperature_Controller_Handler+0x448>)
   8eb6a:	4610      	mov	r0, r2
   8eb6c:	4798      	blx	r3
   8eb6e:	4603      	mov	r3, r0
   8eb70:	61bb      	str	r3, [r7, #24]
				temp = temp - 31 + 14;										// sensor offset
   8eb72:	4b2c      	ldr	r3, [pc, #176]	; (8ec24 <Cl_Temperature_Controller_Handler+0x494>)
   8eb74:	492c      	ldr	r1, [pc, #176]	; (8ec28 <Cl_Temperature_Controller_Handler+0x498>)
   8eb76:	69b8      	ldr	r0, [r7, #24]
   8eb78:	4798      	blx	r3
   8eb7a:	4603      	mov	r3, r0
   8eb7c:	461a      	mov	r2, r3
   8eb7e:	4b27      	ldr	r3, [pc, #156]	; (8ec1c <Cl_Temperature_Controller_Handler+0x48c>)
   8eb80:	492a      	ldr	r1, [pc, #168]	; (8ec2c <Cl_Temperature_Controller_Handler+0x49c>)
   8eb82:	4610      	mov	r0, r2
   8eb84:	4798      	blx	r3
   8eb86:	4603      	mov	r3, r0
   8eb88:	61bb      	str	r3, [r7, #24]
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8eb8a:	2300      	movs	r3, #0
   8eb8c:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   8eb8e:	4b13      	ldr	r3, [pc, #76]	; (8ebdc <Cl_Temperature_Controller_Handler+0x44c>)
   8eb90:	69b8      	ldr	r0, [r7, #24]
   8eb92:	4798      	blx	r3
   8eb94:	4603      	mov	r3, r0
   8eb96:	b29b      	uxth	r3, r3
   8eb98:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   8eb9a:	231f      	movs	r3, #31
   8eb9c:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8eb9e:	f107 030c 	add.w	r3, r7, #12
   8eba2:	2204      	movs	r2, #4
   8eba4:	4619      	mov	r1, r3
   8eba6:	2037      	movs	r0, #55	; 0x37
   8eba8:	4b21      	ldr	r3, [pc, #132]	; (8ec30 <Cl_Temperature_Controller_Handler+0x4a0>)
   8ebaa:	4798      	blx	r3
				
				}
				
				break;
   8ebac:	e045      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8ebae:	bf00      	nop
   8ebb0:	e043      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
   8ebb2:	bf00      	nop
   8ebb4:	f3af 8000 	nop.w
   8ebb8:	cccccccd 	.word	0xcccccccd
   8ebbc:	4008cccc 	.word	0x4008cccc
   8ebc0:	66666666 	.word	0x66666666
   8ebc4:	3ff66666 	.word	0x3ff66666
   8ebc8:	0008d499 	.word	0x0008d499
   8ebcc:	0008e659 	.word	0x0008e659
   8ebd0:	200725ec 	.word	0x200725ec
   8ebd4:	000a27f5 	.word	0x000a27f5
   8ebd8:	42c80000 	.word	0x42c80000
   8ebdc:	000a2a65 	.word	0x000a2a65
   8ebe0:	200725da 	.word	0x200725da
   8ebe4:	000a1d41 	.word	0x000a1d41
   8ebe8:	000a1aa5 	.word	0x000a1aa5
   8ebec:	000a1aa9 	.word	0x000a1aa9
   8ebf0:	000a2391 	.word	0x000a2391
   8ebf4:	66666667 	.word	0x66666667
   8ebf8:	200725dc 	.word	0x200725dc
   8ebfc:	40040000 	.word	0x40040000
   8ec00:	3ff33333 	.word	0x3ff33333
   8ec04:	200725e0 	.word	0x200725e0
   8ec08:	000a1d65 	.word	0x000a1d65
   8ec0c:	000a23d1 	.word	0x000a23d1
   8ec10:	000a268d 	.word	0x000a268d
   8ec14:	40a00000 	.word	0x40a00000
   8ec18:	20071630 	.word	0x20071630
   8ec1c:	000a247d 	.word	0x000a247d
   8ec20:	40c00000 	.word	0x40c00000
   8ec24:	000a2479 	.word	0x000a2479
   8ec28:	41f80000 	.word	0x41f80000
   8ec2c:	41600000 	.word	0x41600000
   8ec30:	00098601 	.word	0x00098601
				if(counter > 10)
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
   8ec34:	bf00      	nop
   8ec36:	e000      	b.n	8ec3a <Cl_Temperature_Controller_Handler+0x4aa>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8ec38:	bf00      	nop
			
	}

	
	
	return cl_retval;
   8ec3a:	7ffb      	ldrb	r3, [r7, #31]
}
   8ec3c:	4618      	mov	r0, r3
   8ec3e:	372c      	adds	r7, #44	; 0x2c
   8ec40:	46bd      	mov	sp, r7
   8ec42:	bd90      	pop	{r4, r7, pc}

0008ec44 <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   8ec44:	b480      	push	{r7}
   8ec46:	b083      	sub	sp, #12
   8ec48:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8ec4a:	2300      	movs	r3, #0
   8ec4c:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   8ec4e:	4b09      	ldr	r3, [pc, #36]	; (8ec74 <Cl_Temperature_Controller_Init+0x30>)
   8ec50:	2200      	movs	r2, #0
   8ec52:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   8ec54:	4b08      	ldr	r3, [pc, #32]	; (8ec78 <Cl_Temperature_Controller_Init+0x34>)
   8ec56:	2200      	movs	r2, #0
   8ec58:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   8ec5a:	4b08      	ldr	r3, [pc, #32]	; (8ec7c <Cl_Temperature_Controller_Init+0x38>)
   8ec5c:	f04f 0200 	mov.w	r2, #0
   8ec60:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   8ec62:	4b07      	ldr	r3, [pc, #28]	; (8ec80 <Cl_Temperature_Controller_Init+0x3c>)
   8ec64:	2201      	movs	r2, #1
   8ec66:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   8ec68:	79fb      	ldrb	r3, [r7, #7]
}
   8ec6a:	4618      	mov	r0, r3
   8ec6c:	370c      	adds	r7, #12
   8ec6e:	46bd      	mov	sp, r7
   8ec70:	bc80      	pop	{r7}
   8ec72:	4770      	bx	lr
   8ec74:	200725da 	.word	0x200725da
   8ec78:	200725dc 	.word	0x200725dc
   8ec7c:	200725e0 	.word	0x200725e0
   8ec80:	200725e8 	.word	0x200725e8
   8ec84:	00000000 	.word	0x00000000

0008ec88 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   8ec88:	b590      	push	{r4, r7, lr}
   8ec8a:	b0c9      	sub	sp, #292	; 0x124
   8ec8c:	af00      	add	r7, sp, #0
   8ec8e:	1d3b      	adds	r3, r7, #4
   8ec90:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8ec92:	2304      	movs	r3, #4
   8ec94:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   8ec98:	2300      	movs	r3, #0
   8ec9a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   8ec9e:	2300      	movs	r3, #0
   8eca0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   8eca4:	2300      	movs	r3, #0
   8eca6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   8ecaa:	2300      	movs	r3, #0
   8ecac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   8ecb0:	2300      	movs	r3, #0
   8ecb2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   8ecb6:	2300      	movs	r3, #0
   8ecb8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   8ecbc:	2300      	movs	r3, #0
   8ecbe:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   8ecc2:	2300      	movs	r3, #0
   8ecc4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   8ecc8:	2300      	movs	r3, #0
   8ecca:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   8ecce:	2300      	movs	r3, #0
   8ecd0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   8ecd4:	2300      	movs	r3, #0
   8ecd6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   8ecda:	2300      	movs	r3, #0
   8ecdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8ece0:	2300      	movs	r3, #0
   8ece2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ece6:	e01c      	b.n	8ed22 <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   8ece8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ecec:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ecf0:	4413      	add	r3, r2
   8ecf2:	2200      	movs	r2, #0
   8ecf4:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   8ecf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ecfc:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ed00:	4413      	add	r3, r2
   8ed02:	2200      	movs	r2, #0
   8ed04:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   8ed08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed0c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ed10:	4413      	add	r3, r2
   8ed12:	2200      	movs	r2, #0
   8ed14:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8ed18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed1c:	3301      	adds	r3, #1
   8ed1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ed22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed26:	2b13      	cmp	r3, #19
   8ed28:	d9de      	bls.n	8ece8 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   8ed2a:	1d3b      	adds	r3, r7, #4
   8ed2c:	681b      	ldr	r3, [r3, #0]
   8ed2e:	78db      	ldrb	r3, [r3, #3]
   8ed30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8ed34:	2300      	movs	r3, #0
   8ed36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ed3a:	e01e      	b.n	8ed7a <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   8ed3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed40:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8ed44:	1d39      	adds	r1, r7, #4
   8ed46:	6809      	ldr	r1, [r1, #0]
   8ed48:	440a      	add	r2, r1
   8ed4a:	7912      	ldrb	r2, [r2, #4]
   8ed4c:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8ed50:	440b      	add	r3, r1
   8ed52:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   8ed56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed5a:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8ed5e:	1d39      	adds	r1, r7, #4
   8ed60:	6809      	ldr	r1, [r1, #0]
   8ed62:	440a      	add	r2, r1
   8ed64:	7912      	ldrb	r2, [r2, #4]
   8ed66:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8ed6a:	440b      	add	r3, r1
   8ed6c:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8ed70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed74:	3301      	adds	r3, #1
   8ed76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ed7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ed7e:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8ed82:	429a      	cmp	r2, r3
   8ed84:	d3da      	bcc.n	8ed3c <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   8ed86:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   8ed8a:	2b6e      	cmp	r3, #110	; 0x6e
   8ed8c:	f202 83f2 	bhi.w	91574 <cl_testharnesscommandhandler+0x28ec>
   8ed90:	a201      	add	r2, pc, #4	; (adr r2, 8ed98 <cl_testharnesscommandhandler+0x110>)
   8ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ed96:	bf00      	nop
   8ed98:	0008f09f 	.word	0x0008f09f
   8ed9c:	0008f0b3 	.word	0x0008f0b3
   8eda0:	0008f0c9 	.word	0x0008f0c9
   8eda4:	00091575 	.word	0x00091575
   8eda8:	00091575 	.word	0x00091575
   8edac:	00091575 	.word	0x00091575
   8edb0:	00091575 	.word	0x00091575
   8edb4:	0008f0df 	.word	0x0008f0df
   8edb8:	0008f0ff 	.word	0x0008f0ff
   8edbc:	0008f11f 	.word	0x0008f11f
   8edc0:	0008f13f 	.word	0x0008f13f
   8edc4:	0008f15f 	.word	0x0008f15f
   8edc8:	0008f16d 	.word	0x0008f16d
   8edcc:	0008f17b 	.word	0x0008f17b
   8edd0:	0008f225 	.word	0x0008f225
   8edd4:	0008f233 	.word	0x0008f233
   8edd8:	0008f247 	.word	0x0008f247
   8eddc:	0008f28d 	.word	0x0008f28d
   8ede0:	0008f29b 	.word	0x0008f29b
   8ede4:	0008f19d 	.word	0x0008f19d
   8ede8:	0008f1d1 	.word	0x0008f1d1
   8edec:	0008f2eb 	.word	0x0008f2eb
   8edf0:	0008f339 	.word	0x0008f339
   8edf4:	0008f567 	.word	0x0008f567
   8edf8:	0008f669 	.word	0x0008f669
   8edfc:	0008f68b 	.word	0x0008f68b
   8ee00:	0008f6ad 	.word	0x0008f6ad
   8ee04:	0008f7ab 	.word	0x0008f7ab
   8ee08:	0008f7ef 	.word	0x0008f7ef
   8ee0c:	0008f811 	.word	0x0008f811
   8ee10:	0008f863 	.word	0x0008f863
   8ee14:	0008f8bb 	.word	0x0008f8bb
   8ee18:	0008f93d 	.word	0x0008f93d
   8ee1c:	0008f95f 	.word	0x0008f95f
   8ee20:	0008fa23 	.word	0x0008fa23
   8ee24:	0008fa37 	.word	0x0008fa37
   8ee28:	0008fa51 	.word	0x0008fa51
   8ee2c:	0008fa6b 	.word	0x0008fa6b
   8ee30:	0008fa81 	.word	0x0008fa81
   8ee34:	0008fb6b 	.word	0x0008fb6b
   8ee38:	00091575 	.word	0x00091575
   8ee3c:	0008fb27 	.word	0x0008fb27
   8ee40:	0008fb4b 	.word	0x0008fb4b
   8ee44:	0008fbab 	.word	0x0008fbab
   8ee48:	0008fbcd 	.word	0x0008fbcd
   8ee4c:	0008fbef 	.word	0x0008fbef
   8ee50:	0008fcad 	.word	0x0008fcad
   8ee54:	0008f61d 	.word	0x0008f61d
   8ee58:	0008f6ff 	.word	0x0008f6ff
   8ee5c:	00091575 	.word	0x00091575
   8ee60:	00091575 	.word	0x00091575
   8ee64:	0008fd11 	.word	0x0008fd11
   8ee68:	0008fd4b 	.word	0x0008fd4b
   8ee6c:	0008fea9 	.word	0x0008fea9
   8ee70:	0008fd85 	.word	0x0008fd85
   8ee74:	0008fdcb 	.word	0x0008fdcb
   8ee78:	0008fe11 	.word	0x0008fe11
   8ee7c:	0008fe5d 	.word	0x0008fe5d
   8ee80:	0008ff39 	.word	0x0008ff39
   8ee84:	0008ff91 	.word	0x0008ff91
   8ee88:	00090017 	.word	0x00090017
   8ee8c:	0008ffbf 	.word	0x0008ffbf
   8ee90:	00090f33 	.word	0x00090f33
   8ee94:	0008f2a9 	.word	0x0008f2a9
   8ee98:	0008f2c5 	.word	0x0008f2c5
   8ee9c:	0009002d 	.word	0x0009002d
   8eea0:	00090039 	.word	0x00090039
   8eea4:	0009008b 	.word	0x0009008b
   8eea8:	000900ad 	.word	0x000900ad
   8eeac:	000900bb 	.word	0x000900bb
   8eeb0:	000900e1 	.word	0x000900e1
   8eeb4:	000900eb 	.word	0x000900eb
   8eeb8:	0008f74b 	.word	0x0008f74b
   8eebc:	00090113 	.word	0x00090113
   8eec0:	00091575 	.word	0x00091575
   8eec4:	0009012f 	.word	0x0009012f
   8eec8:	00090145 	.word	0x00090145
   8eecc:	0008f189 	.word	0x0008f189
   8eed0:	0008f193 	.word	0x0008f193
   8eed4:	00090045 	.word	0x00090045
   8eed8:	0009014d 	.word	0x0009014d
   8eedc:	0008f877 	.word	0x0008f877
   8eee0:	0008f899 	.word	0x0008f899
   8eee4:	0008fc95 	.word	0x0008fc95
   8eee8:	0008f30d 	.word	0x0008f30d
   8eeec:	0008f35b 	.word	0x0008f35b
   8eef0:	0008f9b3 	.word	0x0008f9b3
   8eef4:	0008f9eb 	.word	0x0008f9eb
   8eef8:	00091575 	.word	0x00091575
   8eefc:	0008f011 	.word	0x0008f011
   8ef00:	0008ef69 	.word	0x0008ef69
   8ef04:	0008ef97 	.word	0x0008ef97
   8ef08:	0008efc5 	.word	0x0008efc5
   8ef0c:	0009018b 	.word	0x0009018b
   8ef10:	0009019f 	.word	0x0009019f
   8ef14:	00090175 	.word	0x00090175
   8ef18:	0009017d 	.word	0x0009017d
   8ef1c:	0008ef55 	.word	0x0008ef55
   8ef20:	0008ef5f 	.word	0x0008ef5f
   8ef24:	0008fa97 	.word	0x0008fa97
   8ef28:	0008fab9 	.word	0x0008fab9
   8ef2c:	000901ad 	.word	0x000901ad
   8ef30:	000901b5 	.word	0x000901b5
   8ef34:	000901bd 	.word	0x000901bd
   8ef38:	000901c9 	.word	0x000901c9
   8ef3c:	000901d5 	.word	0x000901d5
   8ef40:	0008f3d7 	.word	0x0008f3d7
   8ef44:	0008f4a3 	.word	0x0008f4a3
   8ef48:	0008f453 	.word	0x0008f453
   8ef4c:	00091575 	.word	0x00091575
   8ef50:	00091575 	.word	0x00091575
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   8ef54:	4bbf      	ldr	r3, [pc, #764]	; (8f254 <cl_testharnesscommandhandler+0x5cc>)
   8ef56:	2201      	movs	r2, #1
   8ef58:	701a      	strb	r2, [r3, #0]
		break;
   8ef5a:	f002 bb12 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   8ef5e:	4bbd      	ldr	r3, [pc, #756]	; (8f254 <cl_testharnesscommandhandler+0x5cc>)
   8ef60:	2200      	movs	r2, #0
   8ef62:	701a      	strb	r2, [r3, #0]
		break;
   8ef64:	f002 bb0d 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8ef68:	4bbb      	ldr	r3, [pc, #748]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8ef6a:	781a      	ldrb	r2, [r3, #0]
   8ef6c:	4bbb      	ldr	r3, [pc, #748]	; (8f25c <cl_testharnesscommandhandler+0x5d4>)
   8ef6e:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8ef70:	4bb9      	ldr	r3, [pc, #740]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8ef72:	2201      	movs	r2, #1
   8ef74:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   8ef76:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8ef7a:	4bb9      	ldr	r3, [pc, #740]	; (8f260 <cl_testharnesscommandhandler+0x5d8>)
   8ef7c:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   8ef7e:	4bb8      	ldr	r3, [pc, #736]	; (8f260 <cl_testharnesscommandhandler+0x5d8>)
   8ef80:	781b      	ldrb	r3, [r3, #0]
   8ef82:	2101      	movs	r1, #1
   8ef84:	4618      	mov	r0, r3
   8ef86:	4bb7      	ldr	r3, [pc, #732]	; (8f264 <cl_testharnesscommandhandler+0x5dc>)
   8ef88:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8ef8a:	4bb4      	ldr	r3, [pc, #720]	; (8f25c <cl_testharnesscommandhandler+0x5d4>)
   8ef8c:	781a      	ldrb	r2, [r3, #0]
   8ef8e:	4bb2      	ldr	r3, [pc, #712]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8ef90:	701a      	strb	r2, [r3, #0]
		break;
   8ef92:	f002 baf6 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8ef96:	4bb0      	ldr	r3, [pc, #704]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8ef98:	781a      	ldrb	r2, [r3, #0]
   8ef9a:	4bb0      	ldr	r3, [pc, #704]	; (8f25c <cl_testharnesscommandhandler+0x5d4>)
   8ef9c:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8ef9e:	4bae      	ldr	r3, [pc, #696]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8efa0:	2201      	movs	r2, #1
   8efa2:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   8efa4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8efa8:	4bad      	ldr	r3, [pc, #692]	; (8f260 <cl_testharnesscommandhandler+0x5d8>)
   8efaa:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   8efac:	4bac      	ldr	r3, [pc, #688]	; (8f260 <cl_testharnesscommandhandler+0x5d8>)
   8efae:	781b      	ldrb	r3, [r3, #0]
   8efb0:	2100      	movs	r1, #0
   8efb2:	4618      	mov	r0, r3
   8efb4:	4bab      	ldr	r3, [pc, #684]	; (8f264 <cl_testharnesscommandhandler+0x5dc>)
   8efb6:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8efb8:	4ba8      	ldr	r3, [pc, #672]	; (8f25c <cl_testharnesscommandhandler+0x5d4>)
   8efba:	781a      	ldrb	r2, [r3, #0]
   8efbc:	4ba6      	ldr	r3, [pc, #664]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8efbe:	701a      	strb	r2, [r3, #0]
		
		break;
   8efc0:	f002 badf 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8efc4:	4ba4      	ldr	r3, [pc, #656]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8efc6:	781a      	ldrb	r2, [r3, #0]
   8efc8:	4ba4      	ldr	r3, [pc, #656]	; (8f25c <cl_testharnesscommandhandler+0x5d4>)
   8efca:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8efcc:	4ba2      	ldr	r3, [pc, #648]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8efce:	2201      	movs	r2, #1
   8efd0:	701a      	strb	r2, [r3, #0]
		temp = 0;
   8efd2:	2300      	movs	r3, #0
   8efd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   8efd8:	e008      	b.n	8efec <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   8efda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8efde:	1c5a      	adds	r2, r3, #1
   8efe0:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   8efe4:	2100      	movs	r1, #0
   8efe6:	4618      	mov	r0, r3
   8efe8:	4b9e      	ldr	r3, [pc, #632]	; (8f264 <cl_testharnesscommandhandler+0x5dc>)
   8efea:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   8efec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8eff0:	2b41      	cmp	r3, #65	; 0x41
   8eff2:	d9f2      	bls.n	8efda <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   8eff4:	4b98      	ldr	r3, [pc, #608]	; (8f258 <cl_testharnesscommandhandler+0x5d0>)
   8eff6:	2200      	movs	r2, #0
   8eff8:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   8effa:	4b9b      	ldr	r3, [pc, #620]	; (8f268 <cl_testharnesscommandhandler+0x5e0>)
   8effc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8f000:	b29b      	uxth	r3, r3
   8f002:	3301      	adds	r3, #1
   8f004:	b29b      	uxth	r3, r3
   8f006:	b21a      	sxth	r2, r3
   8f008:	4b97      	ldr	r3, [pc, #604]	; (8f268 <cl_testharnesscommandhandler+0x5e0>)
   8f00a:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   8f00c:	f002 bab9 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f010:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f014:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f018:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f01c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   8f020:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f024:	f003 0301 	and.w	r3, r3, #1
   8f028:	2b00      	cmp	r3, #0
   8f02a:	d004      	beq.n	8f036 <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   8f02c:	4b8f      	ldr	r3, [pc, #572]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8f032:	631a      	str	r2, [r3, #48]	; 0x30
   8f034:	e003      	b.n	8f03e <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   8f036:	4b8d      	ldr	r3, [pc, #564]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8f03c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   8f03e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f042:	f003 0302 	and.w	r3, r3, #2
   8f046:	2b00      	cmp	r3, #0
   8f048:	d004      	beq.n	8f054 <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   8f04a:	4b88      	ldr	r3, [pc, #544]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f04c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8f050:	631a      	str	r2, [r3, #48]	; 0x30
   8f052:	e003      	b.n	8f05c <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   8f054:	4b85      	ldr	r3, [pc, #532]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f056:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8f05a:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   8f05c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f060:	f003 0304 	and.w	r3, r3, #4
   8f064:	2b00      	cmp	r3, #0
   8f066:	d004      	beq.n	8f072 <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   8f068:	4b80      	ldr	r3, [pc, #512]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f06a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8f06e:	631a      	str	r2, [r3, #48]	; 0x30
   8f070:	e003      	b.n	8f07a <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   8f072:	4b7e      	ldr	r3, [pc, #504]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8f078:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   8f07a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8f07e:	f003 0308 	and.w	r3, r3, #8
   8f082:	2b00      	cmp	r3, #0
   8f084:	d005      	beq.n	8f092 <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   8f086:	4b79      	ldr	r3, [pc, #484]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f088:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8f08c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   8f08e:	f002 ba78 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   8f092:	4b76      	ldr	r3, [pc, #472]	; (8f26c <cl_testharnesscommandhandler+0x5e4>)
   8f094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8f098:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   8f09a:	f002 ba72 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   8f09e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f0a2:	b29a      	uxth	r2, r3
   8f0a4:	4b72      	ldr	r3, [pc, #456]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f0a6:	861a      	strh	r2, [r3, #48]	; 0x30
		
		cl_thretval = CL_OK;
   8f0a8:	2300      	movs	r3, #0
   8f0aa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8f0ae:	f002 ba68 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   8f0b2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f0b6:	b29a      	uxth	r2, r3
   8f0b8:	4b6d      	ldr	r3, [pc, #436]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f0ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				cl_thretval = CL_OK;
   8f0be:	2300      	movs	r3, #0
   8f0c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8f0c4:	f002 ba5d 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   8f0c8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f0cc:	b29a      	uxth	r2, r3
   8f0ce:	4b68      	ldr	r3, [pc, #416]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f0d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				cl_thretval = CL_OK;
   8f0d4:	2300      	movs	r3, #0
   8f0d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8f0da:	f002 ba52 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   8f0de:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f0e2:	2b00      	cmp	r3, #0
   8f0e4:	d105      	bne.n	8f0f2 <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   8f0e6:	4b62      	ldr	r3, [pc, #392]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f0e8:	2200      	movs	r2, #0
   8f0ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   8f0ee:	f002 ba48 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   8f0f2:	4b5f      	ldr	r3, [pc, #380]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f0f4:	2201      	movs	r2, #1
   8f0f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   8f0fa:	f002 ba42 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   8f0fe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f102:	2b00      	cmp	r3, #0
   8f104:	d105      	bne.n	8f112 <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   8f106:	4b5a      	ldr	r3, [pc, #360]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f108:	2200      	movs	r2, #0
   8f10a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   8f10e:	f002 ba38 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   8f112:	4b57      	ldr	r3, [pc, #348]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f114:	2201      	movs	r2, #1
   8f116:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   8f11a:	f002 ba32 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   8f11e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f122:	2b00      	cmp	r3, #0
   8f124:	d105      	bne.n	8f132 <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   8f126:	4b52      	ldr	r3, [pc, #328]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f128:	2200      	movs	r2, #0
   8f12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   8f12e:	f002 ba28 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   8f132:	4b4f      	ldr	r3, [pc, #316]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f134:	2201      	movs	r2, #1
   8f136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   8f13a:	f002 ba22 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   8f13e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f142:	2b00      	cmp	r3, #0
   8f144:	d105      	bne.n	8f152 <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   8f146:	4b4a      	ldr	r3, [pc, #296]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f148:	2200      	movs	r2, #0
   8f14a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   8f14e:	f002 ba18 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   8f152:	4b47      	ldr	r3, [pc, #284]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f154:	2201      	movs	r2, #1
   8f156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   8f15a:	f002 ba12 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   8f15e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f162:	b29a      	uxth	r2, r3
   8f164:	4b42      	ldr	r3, [pc, #264]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f166:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   8f168:	f002 ba0b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   8f16c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f170:	b29a      	uxth	r2, r3
   8f172:	4b3f      	ldr	r3, [pc, #252]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f174:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   8f176:	f002 ba04 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   8f17a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f17e:	b29a      	uxth	r2, r3
   8f180:	4b3b      	ldr	r3, [pc, #236]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f182:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   8f184:	f002 b9fd 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   8f188:	4b3a      	ldr	r3, [pc, #232]	; (8f274 <cl_testharnesscommandhandler+0x5ec>)
   8f18a:	2201      	movs	r2, #1
   8f18c:	701a      	strb	r2, [r3, #0]
		break;
   8f18e:	f002 b9f8 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   8f192:	4b38      	ldr	r3, [pc, #224]	; (8f274 <cl_testharnesscommandhandler+0x5ec>)
   8f194:	2200      	movs	r2, #0
   8f196:	701a      	strb	r2, [r3, #0]
		break;
   8f198:	f002 b9f3 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   8f19c:	f897 0099 	ldrb.w	r0, [r7, #153]	; 0x99
   8f1a0:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   8f1a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
   8f1a8:	3302      	adds	r3, #2
   8f1aa:	4619      	mov	r1, r3
   8f1ac:	4b32      	ldr	r3, [pc, #200]	; (8f278 <cl_testharnesscommandhandler+0x5f0>)
   8f1ae:	4798      	blx	r3
   8f1b0:	4603      	mov	r3, r0
   8f1b2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8f1b6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f1be:	4611      	mov	r1, r2
   8f1c0:	4618      	mov	r0, r3
   8f1c2:	4b2e      	ldr	r3, [pc, #184]	; (8f27c <cl_testharnesscommandhandler+0x5f4>)
   8f1c4:	4798      	blx	r3
   8f1c6:	4603      	mov	r3, r0
   8f1c8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   8f1cc:	f002 b9d9 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   8f1d0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1d4:	2b06      	cmp	r3, #6
   8f1d6:	d00b      	beq.n	8f1f0 <cl_testharnesscommandhandler+0x568>
   8f1d8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1dc:	2b07      	cmp	r3, #7
   8f1de:	d007      	beq.n	8f1f0 <cl_testharnesscommandhandler+0x568>
   8f1e0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1e4:	2b08      	cmp	r3, #8
   8f1e6:	d003      	beq.n	8f1f0 <cl_testharnesscommandhandler+0x568>
   8f1e8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1ec:	2b0a      	cmp	r3, #10
   8f1ee:	d10c      	bne.n	8f20a <cl_testharnesscommandhandler+0x582>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   8f1f0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f1f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f1f8:	4611      	mov	r1, r2
   8f1fa:	4618      	mov	r0, r3
   8f1fc:	4b20      	ldr	r3, [pc, #128]	; (8f280 <cl_testharnesscommandhandler+0x5f8>)
   8f1fe:	4798      	blx	r3
   8f200:	4603      	mov	r3, r0
   8f202:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8f206:	f002 b9bc 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8f20a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8f20e:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8f212:	4611      	mov	r1, r2
   8f214:	4618      	mov	r0, r3
   8f216:	4b19      	ldr	r3, [pc, #100]	; (8f27c <cl_testharnesscommandhandler+0x5f4>)
   8f218:	4798      	blx	r3
   8f21a:	4603      	mov	r3, r0
   8f21c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8f220:	f002 b9af 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   8f224:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f228:	b29a      	uxth	r2, r3
   8f22a:	4b11      	ldr	r3, [pc, #68]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f22c:	831a      	strh	r2, [r3, #24]
		break;
   8f22e:	f002 b9a8 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   8f232:	4b14      	ldr	r3, [pc, #80]	; (8f284 <cl_testharnesscommandhandler+0x5fc>)
   8f234:	2200      	movs	r2, #0
   8f236:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   8f238:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f23c:	b29a      	uxth	r2, r3
   8f23e:	4b12      	ldr	r3, [pc, #72]	; (8f288 <cl_testharnesscommandhandler+0x600>)
   8f240:	835a      	strh	r2, [r3, #26]
		break;
   8f242:	f002 b99e 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   8f246:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f24a:	b29a      	uxth	r2, r3
   8f24c:	4b08      	ldr	r3, [pc, #32]	; (8f270 <cl_testharnesscommandhandler+0x5e8>)
   8f24e:	821a      	strh	r2, [r3, #16]
		break;
   8f250:	f002 b997 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
   8f254:	200725f2 	.word	0x200725f2
   8f258:	200709b0 	.word	0x200709b0
   8f25c:	200709b1 	.word	0x200709b1
   8f260:	2007309a 	.word	0x2007309a
   8f264:	00082efd 	.word	0x00082efd
   8f268:	20072608 	.word	0x20072608
   8f26c:	400e1200 	.word	0x400e1200
   8f270:	20072dbc 	.word	0x20072dbc
   8f274:	200725fa 	.word	0x200725fa
   8f278:	00097145 	.word	0x00097145
   8f27c:	0009710d 	.word	0x0009710d
   8f280:	000915e1 	.word	0x000915e1
   8f284:	200725f1 	.word	0x200725f1
   8f288:	20073048 	.word	0x20073048
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   8f28c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f290:	b29a      	uxth	r2, r3
   8f292:	4bbc      	ldr	r3, [pc, #752]	; (8f584 <cl_testharnesscommandhandler+0x8fc>)
   8f294:	825a      	strh	r2, [r3, #18]
		break;
   8f296:	f002 b974 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   8f29a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f29e:	b29a      	uxth	r2, r3
   8f2a0:	4bb8      	ldr	r3, [pc, #736]	; (8f584 <cl_testharnesscommandhandler+0x8fc>)
   8f2a2:	87da      	strh	r2, [r3, #62]	; 0x3e
		break;
   8f2a4:	f002 b96d 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   8f2a8:	2064      	movs	r0, #100	; 0x64
   8f2aa:	4bb7      	ldr	r3, [pc, #732]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f2ac:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   8f2ae:	4bb7      	ldr	r3, [pc, #732]	; (8f58c <cl_testharnesscommandhandler+0x904>)
   8f2b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   8f2b4:	2001      	movs	r0, #1
   8f2b6:	4bb6      	ldr	r3, [pc, #728]	; (8f590 <cl_testharnesscommandhandler+0x908>)
   8f2b8:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f2ba:	2064      	movs	r0, #100	; 0x64
   8f2bc:	4bb2      	ldr	r3, [pc, #712]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f2be:	4798      	blx	r3
		break;
   8f2c0:	f002 b95f 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   8f2c4:	2064      	movs	r0, #100	; 0x64
   8f2c6:	4bb0      	ldr	r3, [pc, #704]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f2c8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   8f2ca:	4bb2      	ldr	r3, [pc, #712]	; (8f594 <cl_testharnesscommandhandler+0x90c>)
   8f2cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   8f2d0:	4bb1      	ldr	r3, [pc, #708]	; (8f598 <cl_testharnesscommandhandler+0x910>)
   8f2d2:	4798      	blx	r3
   8f2d4:	4603      	mov	r3, r0
   8f2d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   8f2da:	2004      	movs	r0, #4
   8f2dc:	4bac      	ldr	r3, [pc, #688]	; (8f590 <cl_testharnesscommandhandler+0x908>)
   8f2de:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f2e0:	2064      	movs	r0, #100	; 0x64
   8f2e2:	4ba9      	ldr	r3, [pc, #676]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f2e4:	4798      	blx	r3
		break;
   8f2e6:	f002 b94c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   8f2ea:	2064      	movs	r0, #100	; 0x64
   8f2ec:	4ba6      	ldr	r3, [pc, #664]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f2ee:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   8f2f0:	4baa      	ldr	r3, [pc, #680]	; (8f59c <cl_testharnesscommandhandler+0x914>)
   8f2f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   8f2f6:	2001      	movs	r0, #1
   8f2f8:	4ba9      	ldr	r3, [pc, #676]	; (8f5a0 <cl_testharnesscommandhandler+0x918>)
   8f2fa:	4798      	blx	r3
   8f2fc:	4603      	mov	r3, r0
   8f2fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f302:	2064      	movs	r0, #100	; 0x64
   8f304:	4ba0      	ldr	r3, [pc, #640]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f306:	4798      	blx	r3
		break;
   8f308:	f002 b93b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   8f30c:	2064      	movs	r0, #100	; 0x64
   8f30e:	4b9e      	ldr	r3, [pc, #632]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f310:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   8f312:	4ba2      	ldr	r3, [pc, #648]	; (8f59c <cl_testharnesscommandhandler+0x914>)
   8f314:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   8f318:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8f31c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   8f320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8f324:	4b98      	ldr	r3, [pc, #608]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f326:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   8f328:	2001      	movs	r0, #1
   8f32a:	4b9e      	ldr	r3, [pc, #632]	; (8f5a4 <cl_testharnesscommandhandler+0x91c>)
   8f32c:	4798      	blx	r3
   8f32e:	4603      	mov	r3, r0
   8f330:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   8f334:	f002 b925 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   8f338:	2064      	movs	r0, #100	; 0x64
   8f33a:	4b93      	ldr	r3, [pc, #588]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f33c:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   8f33e:	4b9a      	ldr	r3, [pc, #616]	; (8f5a8 <cl_testharnesscommandhandler+0x920>)
   8f340:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8f344:	2001      	movs	r0, #1
   8f346:	4b97      	ldr	r3, [pc, #604]	; (8f5a4 <cl_testharnesscommandhandler+0x91c>)
   8f348:	4798      	blx	r3
   8f34a:	4603      	mov	r3, r0
   8f34c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   8f350:	2064      	movs	r0, #100	; 0x64
   8f352:	4b8d      	ldr	r3, [pc, #564]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f354:	4798      	blx	r3
	break;	
   8f356:	f002 b914 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   8f35a:	200a      	movs	r0, #10
   8f35c:	4b8a      	ldr	r3, [pc, #552]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f35e:	4798      	blx	r3
			if(iic_nack)
   8f360:	4b92      	ldr	r3, [pc, #584]	; (8f5ac <cl_testharnesscommandhandler+0x924>)
   8f362:	781b      	ldrb	r3, [r3, #0]
   8f364:	2b00      	cmp	r3, #0
   8f366:	d002      	beq.n	8f36e <cl_testharnesscommandhandler+0x6e6>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   8f368:	4b90      	ldr	r3, [pc, #576]	; (8f5ac <cl_testharnesscommandhandler+0x924>)
   8f36a:	2200      	movs	r2, #0
   8f36c:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   8f36e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f372:	2b03      	cmp	r3, #3
   8f374:	d104      	bne.n	8f380 <cl_testharnesscommandhandler+0x6f8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f376:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f37a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f37e:	e00b      	b.n	8f398 <cl_testharnesscommandhandler+0x710>
		
			
		}
		else if(TestMsg.datasize == 4)
   8f380:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f384:	2b04      	cmp	r3, #4
   8f386:	d107      	bne.n	8f398 <cl_testharnesscommandhandler+0x710>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8f388:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f38c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8f390:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f394:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8f398:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f39c:	2b02      	cmp	r3, #2
   8f39e:	d115      	bne.n	8f3cc <cl_testharnesscommandhandler+0x744>
		{
			Cl_Uint16Type potvalue = 0;
   8f3a0:	2300      	movs	r3, #0
   8f3a2:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   8f3a6:	4b82      	ldr	r3, [pc, #520]	; (8f5b0 <cl_testharnesscommandhandler+0x928>)
   8f3a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   8f3ac:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f3b0:	029b      	lsls	r3, r3, #10
   8f3b2:	4a80      	ldr	r2, [pc, #512]	; (8f5b4 <cl_testharnesscommandhandler+0x92c>)
   8f3b4:	fb82 1203 	smull	r1, r2, r2, r3
   8f3b8:	1312      	asrs	r2, r2, #12
   8f3ba:	17db      	asrs	r3, r3, #31
   8f3bc:	1ad3      	subs	r3, r2, r3
   8f3be:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   8f3c2:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   8f3c6:	4618      	mov	r0, r3
   8f3c8:	4b7b      	ldr	r3, [pc, #492]	; (8f5b8 <cl_testharnesscommandhandler+0x930>)
   8f3ca:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   8f3cc:	2300      	movs	r3, #0
   8f3ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   8f3d2:	f002 b8d6 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   8f3d6:	200a      	movs	r0, #10
   8f3d8:	4b6b      	ldr	r3, [pc, #428]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f3da:	4798      	blx	r3
		if(iic_nack)
   8f3dc:	4b73      	ldr	r3, [pc, #460]	; (8f5ac <cl_testharnesscommandhandler+0x924>)
   8f3de:	781b      	ldrb	r3, [r3, #0]
   8f3e0:	2b00      	cmp	r3, #0
   8f3e2:	d002      	beq.n	8f3ea <cl_testharnesscommandhandler+0x762>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   8f3e4:	4b71      	ldr	r3, [pc, #452]	; (8f5ac <cl_testharnesscommandhandler+0x924>)
   8f3e6:	2200      	movs	r2, #0
   8f3e8:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   8f3ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f3ee:	2b03      	cmp	r3, #3
   8f3f0:	d104      	bne.n	8f3fc <cl_testharnesscommandhandler+0x774>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f3f2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f3f6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f3fa:	e00b      	b.n	8f414 <cl_testharnesscommandhandler+0x78c>
			
			
		}
		else if(TestMsg.datasize == 4)
   8f3fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f400:	2b04      	cmp	r3, #4
   8f402:	d107      	bne.n	8f414 <cl_testharnesscommandhandler+0x78c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8f404:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f408:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8f40c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f410:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8f414:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f418:	2b02      	cmp	r3, #2
   8f41a:	d115      	bne.n	8f448 <cl_testharnesscommandhandler+0x7c0>
		{
			Cl_Uint16Type potvalue = 0;
   8f41c:	2300      	movs	r3, #0
   8f41e:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   8f422:	4b63      	ldr	r3, [pc, #396]	; (8f5b0 <cl_testharnesscommandhandler+0x928>)
   8f424:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   8f428:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f42c:	029b      	lsls	r3, r3, #10
   8f42e:	4a61      	ldr	r2, [pc, #388]	; (8f5b4 <cl_testharnesscommandhandler+0x92c>)
   8f430:	fb82 1203 	smull	r1, r2, r2, r3
   8f434:	1312      	asrs	r2, r2, #12
   8f436:	17db      	asrs	r3, r3, #31
   8f438:	1ad3      	subs	r3, r2, r3
   8f43a:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   8f43e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   8f442:	4618      	mov	r0, r3
   8f444:	4b5d      	ldr	r3, [pc, #372]	; (8f5bc <cl_testharnesscommandhandler+0x934>)
   8f446:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   8f448:	2300      	movs	r3, #0
   8f44a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   8f44e:	f002 b898 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   8f452:	4b5b      	ldr	r3, [pc, #364]	; (8f5c0 <cl_testharnesscommandhandler+0x938>)
   8f454:	781b      	ldrb	r3, [r3, #0]
   8f456:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   8f45a:	4b5a      	ldr	r3, [pc, #360]	; (8f5c4 <cl_testharnesscommandhandler+0x93c>)
   8f45c:	781b      	ldrb	r3, [r3, #0]
   8f45e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   8f462:	4b59      	ldr	r3, [pc, #356]	; (8f5c8 <cl_testharnesscommandhandler+0x940>)
   8f464:	781b      	ldrb	r3, [r3, #0]
   8f466:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   8f46a:	4b58      	ldr	r3, [pc, #352]	; (8f5cc <cl_testharnesscommandhandler+0x944>)
   8f46c:	781b      	ldrb	r3, [r3, #0]
   8f46e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   8f472:	4b57      	ldr	r3, [pc, #348]	; (8f5d0 <cl_testharnesscommandhandler+0x948>)
   8f474:	781b      	ldrb	r3, [r3, #0]
   8f476:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   8f47a:	4b56      	ldr	r3, [pc, #344]	; (8f5d4 <cl_testharnesscommandhandler+0x94c>)
   8f47c:	781b      	ldrb	r3, [r3, #0]
   8f47e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   8f482:	4b55      	ldr	r3, [pc, #340]	; (8f5d8 <cl_testharnesscommandhandler+0x950>)
   8f484:	781b      	ldrb	r3, [r3, #0]
   8f486:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   8f48a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f48e:	2207      	movs	r2, #7
   8f490:	4619      	mov	r1, r3
   8f492:	2047      	movs	r0, #71	; 0x47
   8f494:	4b51      	ldr	r3, [pc, #324]	; (8f5dc <cl_testharnesscommandhandler+0x954>)
   8f496:	4798      	blx	r3
   8f498:	4603      	mov	r3, r0
   8f49a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   8f49e:	f002 b870 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   8f4a2:	2300      	movs	r3, #0
   8f4a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f4a8:	2300      	movs	r3, #0
   8f4aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8f4ae:	2300      	movs	r3, #0
   8f4b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f4b4:	e051      	b.n	8f55a <cl_testharnesscommandhandler+0x8d2>
		{
				temparray[cntr_1++] = cntr;
   8f4b6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f4ba:	1c5a      	adds	r2, r3, #1
   8f4bc:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f4c0:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8f4c4:	4413      	add	r3, r2
   8f4c6:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f4ca:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   8f4ce:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f4d2:	1c5a      	adds	r2, r3, #1
   8f4d4:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f4d8:	4619      	mov	r1, r3
   8f4da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f4de:	4a40      	ldr	r2, [pc, #256]	; (8f5e0 <cl_testharnesscommandhandler+0x958>)
   8f4e0:	011b      	lsls	r3, r3, #4
   8f4e2:	4413      	add	r3, r2
   8f4e4:	330e      	adds	r3, #14
   8f4e6:	781b      	ldrb	r3, [r3, #0]
   8f4e8:	461a      	mov	r2, r3
   8f4ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f4ee:	440b      	add	r3, r1
   8f4f0:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   8f4f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f4f8:	1c5a      	adds	r2, r3, #1
   8f4fa:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f4fe:	4619      	mov	r1, r3
   8f500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f504:	4a36      	ldr	r2, [pc, #216]	; (8f5e0 <cl_testharnesscommandhandler+0x958>)
   8f506:	011b      	lsls	r3, r3, #4
   8f508:	4413      	add	r3, r2
   8f50a:	330f      	adds	r3, #15
   8f50c:	781b      	ldrb	r3, [r3, #0]
   8f50e:	461a      	mov	r2, r3
   8f510:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f514:	440b      	add	r3, r1
   8f516:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   8f51a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f51e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f522:	492f      	ldr	r1, [pc, #188]	; (8f5e0 <cl_testharnesscommandhandler+0x958>)
   8f524:	0112      	lsls	r2, r2, #4
   8f526:	440a      	add	r2, r1
   8f528:	3202      	adds	r2, #2
   8f52a:	7812      	ldrb	r2, [r2, #0]
   8f52c:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8f530:	440b      	add	r3, r1
   8f532:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   8f536:	2300      	movs	r3, #0
   8f538:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   8f53c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8f540:	2204      	movs	r2, #4
   8f542:	4619      	mov	r1, r3
   8f544:	2048      	movs	r0, #72	; 0x48
   8f546:	4b25      	ldr	r3, [pc, #148]	; (8f5dc <cl_testharnesscommandhandler+0x954>)
   8f548:	4798      	blx	r3
   8f54a:	4603      	mov	r3, r0
   8f54c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8f550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f554:	3301      	adds	r3, #1
   8f556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f55a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f55e:	2b41      	cmp	r3, #65	; 0x41
   8f560:	d9a9      	bls.n	8f4b6 <cl_testharnesscommandhandler+0x82e>
		
		}
			
	}
	
	break;
   8f562:	f002 b80e 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   8f566:	2064      	movs	r0, #100	; 0x64
   8f568:	4b07      	ldr	r3, [pc, #28]	; (8f588 <cl_testharnesscommandhandler+0x900>)
   8f56a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   8f56c:	4b1d      	ldr	r3, [pc, #116]	; (8f5e4 <cl_testharnesscommandhandler+0x95c>)
   8f56e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f572:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f576:	2b02      	cmp	r3, #2
   8f578:	d136      	bne.n	8f5e8 <cl_testharnesscommandhandler+0x960>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f57a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f57e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f582:	e03d      	b.n	8f600 <cl_testharnesscommandhandler+0x978>
   8f584:	20072dbc 	.word	0x20072dbc
   8f588:	00091b9d 	.word	0x00091b9d
   8f58c:	000a4714 	.word	0x000a4714
   8f590:	00089749 	.word	0x00089749
   8f594:	000a471c 	.word	0x000a471c
   8f598:	00096869 	.word	0x00096869
   8f59c:	000a4724 	.word	0x000a4724
   8f5a0:	000967dd 	.word	0x000967dd
   8f5a4:	00096819 	.word	0x00096819
   8f5a8:	000a472c 	.word	0x000a472c
   8f5ac:	20072605 	.word	0x20072605
   8f5b0:	000a4734 	.word	0x000a4734
   8f5b4:	68db8bad 	.word	0x68db8bad
   8f5b8:	00096d29 	.word	0x00096d29
   8f5bc:	00096d49 	.word	0x00096d49
   8f5c0:	2007309d 	.word	0x2007309d
   8f5c4:	2007309c 	.word	0x2007309c
   8f5c8:	20073130 	.word	0x20073130
   8f5cc:	20073133 	.word	0x20073133
   8f5d0:	20073132 	.word	0x20073132
   8f5d4:	2007309b 	.word	0x2007309b
   8f5d8:	20073131 	.word	0x20073131
   8f5dc:	00098601 	.word	0x00098601
   8f5e0:	20072874 	.word	0x20072874
   8f5e4:	000a4740 	.word	0x000a4740
		}
		else if(TestMsg.datasize == 3)
   8f5e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f5ec:	2b03      	cmp	r3, #3
   8f5ee:	d107      	bne.n	8f600 <cl_testharnesscommandhandler+0x978>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f5f0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f5f4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f5f8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f5fc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   8f600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f604:	4619      	mov	r1, r3
   8f606:	2001      	movs	r0, #1
   8f608:	4bb5      	ldr	r3, [pc, #724]	; (8f8e0 <cl_testharnesscommandhandler+0xc58>)
   8f60a:	4798      	blx	r3
   8f60c:	4603      	mov	r3, r0
   8f60e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8f612:	2064      	movs	r0, #100	; 0x64
   8f614:	4bb3      	ldr	r3, [pc, #716]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f616:	4798      	blx	r3
		break;
   8f618:	f001 bfb3 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   8f61c:	2064      	movs	r0, #100	; 0x64
   8f61e:	4bb1      	ldr	r3, [pc, #708]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f620:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   8f622:	4bb1      	ldr	r3, [pc, #708]	; (8f8e8 <cl_testharnesscommandhandler+0xc60>)
   8f624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f628:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f62c:	2b02      	cmp	r3, #2
   8f62e:	d104      	bne.n	8f63a <cl_testharnesscommandhandler+0x9b2>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f630:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f634:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f638:	e00b      	b.n	8f652 <cl_testharnesscommandhandler+0x9ca>
		}
		else if(TestMsg.datasize == 3)
   8f63a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f63e:	2b03      	cmp	r3, #3
   8f640:	d107      	bne.n	8f652 <cl_testharnesscommandhandler+0x9ca>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f642:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f646:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f64a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f64e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   8f652:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f656:	4619      	mov	r1, r3
   8f658:	2001      	movs	r0, #1
   8f65a:	4ba4      	ldr	r3, [pc, #656]	; (8f8ec <cl_testharnesscommandhandler+0xc64>)
   8f65c:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f65e:	2064      	movs	r0, #100	; 0x64
   8f660:	4ba0      	ldr	r3, [pc, #640]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f662:	4798      	blx	r3
		break;
   8f664:	f001 bf8d 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   8f668:	2064      	movs	r0, #100	; 0x64
   8f66a:	4b9e      	ldr	r3, [pc, #632]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f66c:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   8f66e:	2002      	movs	r0, #2
   8f670:	4b9f      	ldr	r3, [pc, #636]	; (8f8f0 <cl_testharnesscommandhandler+0xc68>)
   8f672:	4798      	blx	r3
   8f674:	4603      	mov	r3, r0
   8f676:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   8f67a:	4b9e      	ldr	r3, [pc, #632]	; (8f8f4 <cl_testharnesscommandhandler+0xc6c>)
   8f67c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f680:	2064      	movs	r0, #100	; 0x64
   8f682:	4b98      	ldr	r3, [pc, #608]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f684:	4798      	blx	r3
		break;
   8f686:	f001 bf7c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   8f68a:	2064      	movs	r0, #100	; 0x64
   8f68c:	4b95      	ldr	r3, [pc, #596]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f68e:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8f690:	2002      	movs	r0, #2
   8f692:	4b99      	ldr	r3, [pc, #612]	; (8f8f8 <cl_testharnesscommandhandler+0xc70>)
   8f694:	4798      	blx	r3
   8f696:	4603      	mov	r3, r0
   8f698:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   8f69c:	4b97      	ldr	r3, [pc, #604]	; (8f8fc <cl_testharnesscommandhandler+0xc74>)
   8f69e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f6a2:	2064      	movs	r0, #100	; 0x64
   8f6a4:	4b8f      	ldr	r3, [pc, #572]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f6a6:	4798      	blx	r3
		break;
   8f6a8:	f001 bf6b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   8f6ac:	2064      	movs	r0, #100	; 0x64
   8f6ae:	4b8d      	ldr	r3, [pc, #564]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f6b0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   8f6b2:	4b93      	ldr	r3, [pc, #588]	; (8f900 <cl_testharnesscommandhandler+0xc78>)
   8f6b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f6b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f6bc:	2b02      	cmp	r3, #2
   8f6be:	d104      	bne.n	8f6ca <cl_testharnesscommandhandler+0xa42>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f6c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f6c4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f6c8:	e00b      	b.n	8f6e2 <cl_testharnesscommandhandler+0xa5a>
		}
		else if(TestMsg.datasize == 3)
   8f6ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f6ce:	2b03      	cmp	r3, #3
   8f6d0:	d107      	bne.n	8f6e2 <cl_testharnesscommandhandler+0xa5a>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f6d2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f6d6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f6da:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f6de:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   8f6e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f6e6:	4619      	mov	r1, r3
   8f6e8:	2002      	movs	r0, #2
   8f6ea:	4b7d      	ldr	r3, [pc, #500]	; (8f8e0 <cl_testharnesscommandhandler+0xc58>)
   8f6ec:	4798      	blx	r3
   8f6ee:	4603      	mov	r3, r0
   8f6f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8f6f4:	2064      	movs	r0, #100	; 0x64
   8f6f6:	4b7b      	ldr	r3, [pc, #492]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f6f8:	4798      	blx	r3
		break;
   8f6fa:	f001 bf42 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   8f6fe:	2064      	movs	r0, #100	; 0x64
   8f700:	4b78      	ldr	r3, [pc, #480]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f702:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   8f704:	4b7f      	ldr	r3, [pc, #508]	; (8f904 <cl_testharnesscommandhandler+0xc7c>)
   8f706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f70a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f70e:	2b02      	cmp	r3, #2
   8f710:	d104      	bne.n	8f71c <cl_testharnesscommandhandler+0xa94>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f712:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f716:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f71a:	e00b      	b.n	8f734 <cl_testharnesscommandhandler+0xaac>
		}
		else if(TestMsg.datasize == 3)
   8f71c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f720:	2b03      	cmp	r3, #3
   8f722:	d107      	bne.n	8f734 <cl_testharnesscommandhandler+0xaac>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f724:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f728:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f72c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f730:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   8f734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f738:	4619      	mov	r1, r3
   8f73a:	2002      	movs	r0, #2
   8f73c:	4b6b      	ldr	r3, [pc, #428]	; (8f8ec <cl_testharnesscommandhandler+0xc64>)
   8f73e:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f740:	2064      	movs	r0, #100	; 0x64
   8f742:	4b68      	ldr	r3, [pc, #416]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f744:	4798      	blx	r3
		break;
   8f746:	f001 bf1c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   8f74a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f74e:	2b02      	cmp	r3, #2
   8f750:	d104      	bne.n	8f75c <cl_testharnesscommandhandler+0xad4>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f752:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f756:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f75a:	e00b      	b.n	8f774 <cl_testharnesscommandhandler+0xaec>
		}
		else if(TestMsg.datasize == 3)
   8f75c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f760:	2b03      	cmp	r3, #3
   8f762:	d107      	bne.n	8f774 <cl_testharnesscommandhandler+0xaec>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f764:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f768:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f76c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f770:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   8f774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   8f778:	4b63      	ldr	r3, [pc, #396]	; (8f908 <cl_testharnesscommandhandler+0xc80>)
   8f77a:	4610      	mov	r0, r2
   8f77c:	4798      	blx	r3
   8f77e:	4c63      	ldr	r4, [pc, #396]	; (8f90c <cl_testharnesscommandhandler+0xc84>)
   8f780:	a355      	add	r3, pc, #340	; (adr r3, 8f8d8 <cl_testharnesscommandhandler+0xc50>)
   8f782:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f786:	47a0      	blx	r4
   8f788:	4603      	mov	r3, r0
   8f78a:	460c      	mov	r4, r1
   8f78c:	4619      	mov	r1, r3
   8f78e:	4622      	mov	r2, r4
   8f790:	4b5f      	ldr	r3, [pc, #380]	; (8f910 <cl_testharnesscommandhandler+0xc88>)
   8f792:	4608      	mov	r0, r1
   8f794:	4611      	mov	r1, r2
   8f796:	4798      	blx	r3
   8f798:	4603      	mov	r3, r0
   8f79a:	b21a      	sxth	r2, r3
   8f79c:	4b5d      	ldr	r3, [pc, #372]	; (8f914 <cl_testharnesscommandhandler+0xc8c>)
   8f79e:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   8f7a0:	4b5d      	ldr	r3, [pc, #372]	; (8f918 <cl_testharnesscommandhandler+0xc90>)
   8f7a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   8f7a6:	f001 beec 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   8f7aa:	2064      	movs	r0, #100	; 0x64
   8f7ac:	4b4d      	ldr	r3, [pc, #308]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f7ae:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   8f7b0:	2100      	movs	r1, #0
   8f7b2:	2002      	movs	r0, #2
   8f7b4:	4b59      	ldr	r3, [pc, #356]	; (8f91c <cl_testharnesscommandhandler+0xc94>)
   8f7b6:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   8f7b8:	4b59      	ldr	r3, [pc, #356]	; (8f920 <cl_testharnesscommandhandler+0xc98>)
   8f7ba:	4798      	blx	r3
				cl_wait(100);
   8f7bc:	2064      	movs	r0, #100	; 0x64
   8f7be:	4b49      	ldr	r3, [pc, #292]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f7c0:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   8f7c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   8f7c6:	2001      	movs	r0, #1
   8f7c8:	4b54      	ldr	r3, [pc, #336]	; (8f91c <cl_testharnesscommandhandler+0xc94>)
   8f7ca:	4798      	blx	r3
				cl_wait(100);
   8f7cc:	2064      	movs	r0, #100	; 0x64
   8f7ce:	4b45      	ldr	r3, [pc, #276]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f7d0:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   8f7d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8f7d6:	2001      	movs	r0, #1
   8f7d8:	4b50      	ldr	r3, [pc, #320]	; (8f91c <cl_testharnesscommandhandler+0xc94>)
   8f7da:	4798      	blx	r3
				cl_wait(100);
   8f7dc:	2064      	movs	r0, #100	; 0x64
   8f7de:	4b41      	ldr	r3, [pc, #260]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f7e0:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   8f7e2:	2196      	movs	r1, #150	; 0x96
   8f7e4:	2001      	movs	r0, #1
   8f7e6:	4b4d      	ldr	r3, [pc, #308]	; (8f91c <cl_testharnesscommandhandler+0xc94>)
   8f7e8:	4798      	blx	r3
				
		break;
   8f7ea:	f001 beca 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   8f7ee:	2064      	movs	r0, #100	; 0x64
   8f7f0:	4b3c      	ldr	r3, [pc, #240]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f7f2:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8f7f4:	2004      	movs	r0, #4
   8f7f6:	4b40      	ldr	r3, [pc, #256]	; (8f8f8 <cl_testharnesscommandhandler+0xc70>)
   8f7f8:	4798      	blx	r3
   8f7fa:	4603      	mov	r3, r0
   8f7fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   8f800:	4b48      	ldr	r3, [pc, #288]	; (8f924 <cl_testharnesscommandhandler+0xc9c>)
   8f802:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f806:	2064      	movs	r0, #100	; 0x64
   8f808:	4b36      	ldr	r3, [pc, #216]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f80a:	4798      	blx	r3
		break;
   8f80c:	f001 beb9 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   8f810:	2064      	movs	r0, #100	; 0x64
   8f812:	4b34      	ldr	r3, [pc, #208]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f814:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f816:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f81a:	2b02      	cmp	r3, #2
   8f81c:	d104      	bne.n	8f828 <cl_testharnesscommandhandler+0xba0>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f81e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f822:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f826:	e00b      	b.n	8f840 <cl_testharnesscommandhandler+0xbb8>
		}
		else if(TestMsg.datasize == 3)
   8f828:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f82c:	2b03      	cmp	r3, #3
   8f82e:	d107      	bne.n	8f840 <cl_testharnesscommandhandler+0xbb8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f830:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f834:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f838:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f83c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   8f840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f844:	4619      	mov	r1, r3
   8f846:	2004      	movs	r0, #4
   8f848:	4b25      	ldr	r3, [pc, #148]	; (8f8e0 <cl_testharnesscommandhandler+0xc58>)
   8f84a:	4798      	blx	r3
		uf_rotation_counter = 0;
   8f84c:	4b36      	ldr	r3, [pc, #216]	; (8f928 <cl_testharnesscommandhandler+0xca0>)
   8f84e:	2200      	movs	r2, #0
   8f850:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   8f852:	4b36      	ldr	r3, [pc, #216]	; (8f92c <cl_testharnesscommandhandler+0xca4>)
   8f854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f858:	2064      	movs	r0, #100	; 0x64
   8f85a:	4b22      	ldr	r3, [pc, #136]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f85c:	4798      	blx	r3
		break;
   8f85e:	f001 be90 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   8f862:	2064      	movs	r0, #100	; 0x64
   8f864:	4b1f      	ldr	r3, [pc, #124]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f866:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   8f868:	4b31      	ldr	r3, [pc, #196]	; (8f930 <cl_testharnesscommandhandler+0xca8>)
   8f86a:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   8f86c:	2064      	movs	r0, #100	; 0x64
   8f86e:	4b1d      	ldr	r3, [pc, #116]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f870:	4798      	blx	r3
		break;
   8f872:	f001 be86 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   8f876:	2064      	movs	r0, #100	; 0x64
   8f878:	4b1a      	ldr	r3, [pc, #104]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f87a:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   8f87c:	2006      	movs	r0, #6
   8f87e:	4b1c      	ldr	r3, [pc, #112]	; (8f8f0 <cl_testharnesscommandhandler+0xc68>)
   8f880:	4798      	blx	r3
   8f882:	4603      	mov	r3, r0
   8f884:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   8f888:	4b2a      	ldr	r3, [pc, #168]	; (8f934 <cl_testharnesscommandhandler+0xcac>)
   8f88a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f88e:	2064      	movs	r0, #100	; 0x64
   8f890:	4b14      	ldr	r3, [pc, #80]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f892:	4798      	blx	r3
		break;
   8f894:	f001 be75 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   8f898:	2064      	movs	r0, #100	; 0x64
   8f89a:	4b12      	ldr	r3, [pc, #72]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f89c:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   8f89e:	2006      	movs	r0, #6
   8f8a0:	4b15      	ldr	r3, [pc, #84]	; (8f8f8 <cl_testharnesscommandhandler+0xc70>)
   8f8a2:	4798      	blx	r3
   8f8a4:	4603      	mov	r3, r0
   8f8a6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   8f8aa:	4b23      	ldr	r3, [pc, #140]	; (8f938 <cl_testharnesscommandhandler+0xcb0>)
   8f8ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f8b0:	2064      	movs	r0, #100	; 0x64
   8f8b2:	4b0c      	ldr	r3, [pc, #48]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f8b4:	4798      	blx	r3
		break;
   8f8b6:	f001 be64 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   8f8ba:	2064      	movs	r0, #100	; 0x64
   8f8bc:	4b09      	ldr	r3, [pc, #36]	; (8f8e4 <cl_testharnesscommandhandler+0xc5c>)
   8f8be:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   8f8c0:	2300      	movs	r3, #0
   8f8c2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   8f8c6:	2003      	movs	r0, #3
   8f8c8:	4b09      	ldr	r3, [pc, #36]	; (8f8f0 <cl_testharnesscommandhandler+0xc68>)
   8f8ca:	4798      	blx	r3
   8f8cc:	4603      	mov	r3, r0
   8f8ce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   8f8d2:	f001 be56 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
   8f8d6:	bf00      	nop
   8f8d8:	487fcb92 	.word	0x487fcb92
   8f8dc:	3ffd7dbf 	.word	0x3ffd7dbf
   8f8e0:	000968f5 	.word	0x000968f5
   8f8e4:	00091b9d 	.word	0x00091b9d
   8f8e8:	000a4748 	.word	0x000a4748
   8f8ec:	00096ab1 	.word	0x00096ab1
   8f8f0:	000967dd 	.word	0x000967dd
   8f8f4:	000a4750 	.word	0x000a4750
   8f8f8:	00096819 	.word	0x00096819
   8f8fc:	000a4758 	.word	0x000a4758
   8f900:	000a4760 	.word	0x000a4760
   8f904:	000a476c 	.word	0x000a476c
   8f908:	000a1d21 	.word	0x000a1d21
   8f90c:	000a1e0d 	.word	0x000a1e0d
   8f910:	000a2341 	.word	0x000a2341
   8f914:	20070102 	.word	0x20070102
   8f918:	000a4774 	.word	0x000a4774
   8f91c:	00092e89 	.word	0x00092e89
   8f920:	00092c4d 	.word	0x00092c4d
   8f924:	000a477c 	.word	0x000a477c
   8f928:	20072606 	.word	0x20072606
   8f92c:	000a4784 	.word	0x000a4784
   8f930:	000969c9 	.word	0x000969c9
   8f934:	000a4790 	.word	0x000a4790
   8f938:	000a479c 	.word	0x000a479c

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   8f93c:	2064      	movs	r0, #100	; 0x64
   8f93e:	4bb2      	ldr	r3, [pc, #712]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f940:	4798      	blx	r3
		Cl_Uint8Type data =0;
   8f942:	2300      	movs	r3, #0
   8f944:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8f948:	2003      	movs	r0, #3
   8f94a:	4bb0      	ldr	r3, [pc, #704]	; (8fc0c <cl_testharnesscommandhandler+0xf84>)
   8f94c:	4798      	blx	r3
   8f94e:	4603      	mov	r3, r0
   8f950:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f954:	2064      	movs	r0, #100	; 0x64
   8f956:	4bac      	ldr	r3, [pc, #688]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f958:	4798      	blx	r3
		break;
   8f95a:	f001 be12 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   8f95e:	2064      	movs	r0, #100	; 0x64
   8f960:	4ba9      	ldr	r3, [pc, #676]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f962:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8f964:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f968:	2b02      	cmp	r3, #2
   8f96a:	d104      	bne.n	8f976 <cl_testharnesscommandhandler+0xcee>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f96c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f970:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f974:	e00b      	b.n	8f98e <cl_testharnesscommandhandler+0xd06>
		}
		else if(TestMsg.datasize == 3)
   8f976:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f97a:	2b03      	cmp	r3, #3
   8f97c:	d107      	bne.n	8f98e <cl_testharnesscommandhandler+0xd06>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f97e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f982:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f986:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f98a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   8f98e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f992:	4a9f      	ldr	r2, [pc, #636]	; (8fc10 <cl_testharnesscommandhandler+0xf88>)
   8f994:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   8f996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f99a:	4619      	mov	r1, r3
   8f99c:	2003      	movs	r0, #3
   8f99e:	4b9d      	ldr	r3, [pc, #628]	; (8fc14 <cl_testharnesscommandhandler+0xf8c>)
   8f9a0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   8f9a2:	4b9d      	ldr	r3, [pc, #628]	; (8fc18 <cl_testharnesscommandhandler+0xf90>)
   8f9a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f9a8:	2064      	movs	r0, #100	; 0x64
   8f9aa:	4b97      	ldr	r3, [pc, #604]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f9ac:	4798      	blx	r3
		break;
   8f9ae:	f001 bde8 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   8f9b2:	2064      	movs	r0, #100	; 0x64
   8f9b4:	4b94      	ldr	r3, [pc, #592]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f9b6:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f9b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9bc:	2b02      	cmp	r3, #2
   8f9be:	d105      	bne.n	8f9cc <cl_testharnesscommandhandler+0xd44>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f9c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9c4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   8f9c8:	f001 bdd6 	b.w	91578 <cl_testharnesscommandhandler+0x28f0>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   8f9cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9d0:	2b03      	cmp	r3, #3
   8f9d2:	f041 85d1 	bne.w	91578 <cl_testharnesscommandhandler+0x28f0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f9d6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9da:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f9de:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f9e2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   8f9e6:	f001 bdc7 	b.w	91578 <cl_testharnesscommandhandler+0x28f0>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   8f9ea:	2064      	movs	r0, #100	; 0x64
   8f9ec:	4b86      	ldr	r3, [pc, #536]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8f9ee:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f9f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9f4:	2b02      	cmp	r3, #2
   8f9f6:	d105      	bne.n	8fa04 <cl_testharnesscommandhandler+0xd7c>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f9f8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9fc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   8fa00:	f001 bdbc 	b.w	9157c <cl_testharnesscommandhandler+0x28f4>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   8fa04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fa08:	2b03      	cmp	r3, #3
   8fa0a:	f041 85b7 	bne.w	9157c <cl_testharnesscommandhandler+0x28f4>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8fa0e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fa12:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8fa16:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fa1a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   8fa1e:	f001 bdad 	b.w	9157c <cl_testharnesscommandhandler+0x28f4>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   8fa22:	2064      	movs	r0, #100	; 0x64
   8fa24:	4b78      	ldr	r3, [pc, #480]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa26:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   8fa28:	4b7c      	ldr	r3, [pc, #496]	; (8fc1c <cl_testharnesscommandhandler+0xf94>)
   8fa2a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   8fa2c:	4b7c      	ldr	r3, [pc, #496]	; (8fc20 <cl_testharnesscommandhandler+0xf98>)
   8fa2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   8fa32:	f001 bda6 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   8fa36:	2064      	movs	r0, #100	; 0x64
   8fa38:	4b73      	ldr	r3, [pc, #460]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa3a:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   8fa3c:	4b79      	ldr	r3, [pc, #484]	; (8fc24 <cl_testharnesscommandhandler+0xf9c>)
   8fa3e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   8fa40:	4b79      	ldr	r3, [pc, #484]	; (8fc28 <cl_testharnesscommandhandler+0xfa0>)
   8fa42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fa46:	2064      	movs	r0, #100	; 0x64
   8fa48:	4b6f      	ldr	r3, [pc, #444]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa4a:	4798      	blx	r3
		break;
   8fa4c:	f001 bd99 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   8fa50:	2064      	movs	r0, #100	; 0x64
   8fa52:	4b6d      	ldr	r3, [pc, #436]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa54:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   8fa56:	4b75      	ldr	r3, [pc, #468]	; (8fc2c <cl_testharnesscommandhandler+0xfa4>)
   8fa58:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   8fa5a:	4b75      	ldr	r3, [pc, #468]	; (8fc30 <cl_testharnesscommandhandler+0xfa8>)
   8fa5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fa60:	2064      	movs	r0, #100	; 0x64
   8fa62:	4b69      	ldr	r3, [pc, #420]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa64:	4798      	blx	r3
		break;
   8fa66:	f001 bd8c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   8fa6a:	2064      	movs	r0, #100	; 0x64
   8fa6c:	4b66      	ldr	r3, [pc, #408]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa6e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   8fa70:	4b70      	ldr	r3, [pc, #448]	; (8fc34 <cl_testharnesscommandhandler+0xfac>)
   8fa72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fa76:	2064      	movs	r0, #100	; 0x64
   8fa78:	4b63      	ldr	r3, [pc, #396]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa7a:	4798      	blx	r3
		break;
   8fa7c:	f001 bd81 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   8fa80:	2064      	movs	r0, #100	; 0x64
   8fa82:	4b61      	ldr	r3, [pc, #388]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa84:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   8fa86:	4b6c      	ldr	r3, [pc, #432]	; (8fc38 <cl_testharnesscommandhandler+0xfb0>)
   8fa88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fa8c:	2064      	movs	r0, #100	; 0x64
   8fa8e:	4b5e      	ldr	r3, [pc, #376]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fa90:	4798      	blx	r3
		break;
   8fa92:	f001 bd76 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   8fa96:	4b69      	ldr	r3, [pc, #420]	; (8fc3c <cl_testharnesscommandhandler+0xfb4>)
   8fa98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   8fa9c:	2004      	movs	r0, #4
   8fa9e:	4b68      	ldr	r3, [pc, #416]	; (8fc40 <cl_testharnesscommandhandler+0xfb8>)
   8faa0:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8faa2:	2064      	movs	r0, #100	; 0x64
   8faa4:	4b58      	ldr	r3, [pc, #352]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8faa6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   8faa8:	2004      	movs	r0, #4
   8faaa:	4b66      	ldr	r3, [pc, #408]	; (8fc44 <cl_testharnesscommandhandler+0xfbc>)
   8faac:	4798      	blx	r3
		cl_wait(100);
   8faae:	2064      	movs	r0, #100	; 0x64
   8fab0:	4b55      	ldr	r3, [pc, #340]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fab2:	4798      	blx	r3
		break;
   8fab4:	f001 bd65 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   8fab8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fabc:	2b00      	cmp	r3, #0
   8fabe:	d10d      	bne.n	8fadc <cl_testharnesscommandhandler+0xe54>
		{
			sv_cs_setpotvalue(3800);
   8fac0:	f640 60d8 	movw	r0, #3800	; 0xed8
   8fac4:	4b60      	ldr	r3, [pc, #384]	; (8fc48 <cl_testharnesscommandhandler+0xfc0>)
   8fac6:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   8fac8:	f240 411a 	movw	r1, #1050	; 0x41a
   8facc:	2001      	movs	r0, #1
   8face:	4b51      	ldr	r3, [pc, #324]	; (8fc14 <cl_testharnesscommandhandler+0xf8c>)
   8fad0:	4798      	blx	r3
   8fad2:	4603      	mov	r3, r0
   8fad4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   8fad8:	f001 bd52 	b.w	91580 <cl_testharnesscommandhandler+0x28f8>
		{
			sv_cs_setpotvalue(3800);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
			
		}
		else if(TestMsg.data.byte[1] == 1)
   8fadc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fae0:	2b01      	cmp	r3, #1
   8fae2:	d10d      	bne.n	8fb00 <cl_testharnesscommandhandler+0xe78>
		{
						sv_cs_setpotvalue(2450);
   8fae4:	f640 1092 	movw	r0, #2450	; 0x992
   8fae8:	4b57      	ldr	r3, [pc, #348]	; (8fc48 <cl_testharnesscommandhandler+0xfc0>)
   8faea:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   8faec:	f240 21e9 	movw	r1, #745	; 0x2e9
   8faf0:	2001      	movs	r0, #1
   8faf2:	4b48      	ldr	r3, [pc, #288]	; (8fc14 <cl_testharnesscommandhandler+0xf8c>)
   8faf4:	4798      	blx	r3
   8faf6:	4603      	mov	r3, r0
   8faf8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   8fafc:	f001 bd40 	b.w	91580 <cl_testharnesscommandhandler+0x28f8>
		else if(TestMsg.data.byte[1] == 1)
		{
						sv_cs_setpotvalue(2450);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
		}
		else if(TestMsg.data.byte[1] == 2)
   8fb00:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fb04:	2b02      	cmp	r3, #2
   8fb06:	f041 853b 	bne.w	91580 <cl_testharnesscommandhandler+0x28f8>
		{
						sv_cs_setpotvalue(1090);
   8fb0a:	f240 4042 	movw	r0, #1090	; 0x442
   8fb0e:	4b4e      	ldr	r3, [pc, #312]	; (8fc48 <cl_testharnesscommandhandler+0xfc0>)
   8fb10:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   8fb12:	f44f 71b9 	mov.w	r1, #370	; 0x172
   8fb16:	2001      	movs	r0, #1
   8fb18:	4b3e      	ldr	r3, [pc, #248]	; (8fc14 <cl_testharnesscommandhandler+0xf8c>)
   8fb1a:	4798      	blx	r3
   8fb1c:	4603      	mov	r3, r0
   8fb1e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   8fb22:	f001 bd2d 	b.w	91580 <cl_testharnesscommandhandler+0x28f8>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   8fb26:	2300      	movs	r3, #0
   8fb28:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   8fb2a:	2064      	movs	r0, #100	; 0x64
   8fb2c:	4b36      	ldr	r3, [pc, #216]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb2e:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   8fb30:	4b42      	ldr	r3, [pc, #264]	; (8fc3c <cl_testharnesscommandhandler+0xfb4>)
   8fb32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8fb36:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fb3a:	4618      	mov	r0, r3
   8fb3c:	4b40      	ldr	r3, [pc, #256]	; (8fc40 <cl_testharnesscommandhandler+0xfb8>)
   8fb3e:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   8fb40:	2064      	movs	r0, #100	; 0x64
   8fb42:	4b31      	ldr	r3, [pc, #196]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb44:	4798      	blx	r3
					
		}
		}
		break;
   8fb46:	f001 bd1c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   8fb4a:	2064      	movs	r0, #100	; 0x64
   8fb4c:	4b2e      	ldr	r3, [pc, #184]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb4e:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8fb50:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fb54:	4618      	mov	r0, r3
   8fb56:	4b3b      	ldr	r3, [pc, #236]	; (8fc44 <cl_testharnesscommandhandler+0xfbc>)
   8fb58:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   8fb5a:	4b3c      	ldr	r3, [pc, #240]	; (8fc4c <cl_testharnesscommandhandler+0xfc4>)
   8fb5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fb60:	2064      	movs	r0, #100	; 0x64
   8fb62:	4b29      	ldr	r3, [pc, #164]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb64:	4798      	blx	r3
		break;
   8fb66:	f001 bd0c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   8fb6a:	2064      	movs	r0, #100	; 0x64
   8fb6c:	4b26      	ldr	r3, [pc, #152]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb6e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   8fb70:	4b37      	ldr	r3, [pc, #220]	; (8fc50 <cl_testharnesscommandhandler+0xfc8>)
   8fb72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   8fb76:	2301      	movs	r3, #1
   8fb78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8fb7c:	e00c      	b.n	8fb98 <cl_testharnesscommandhandler+0xf10>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   8fb7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fb82:	4618      	mov	r0, r3
   8fb84:	4b2e      	ldr	r3, [pc, #184]	; (8fc40 <cl_testharnesscommandhandler+0xfb8>)
   8fb86:	4798      	blx	r3
				cl_wait(10);
   8fb88:	200a      	movs	r0, #10
   8fb8a:	4b1f      	ldr	r3, [pc, #124]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fb8c:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   8fb8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fb92:	3301      	adds	r3, #1
   8fb94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8fb98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8fb9c:	2b14      	cmp	r3, #20
   8fb9e:	d9ee      	bls.n	8fb7e <cl_testharnesscommandhandler+0xef6>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   8fba0:	2064      	movs	r0, #100	; 0x64
   8fba2:	4b19      	ldr	r3, [pc, #100]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fba4:	4798      	blx	r3
		break;
   8fba6:	f001 bcec 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   8fbaa:	2064      	movs	r0, #100	; 0x64
   8fbac:	4b16      	ldr	r3, [pc, #88]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fbae:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   8fbb0:	2005      	movs	r0, #5
   8fbb2:	4b28      	ldr	r3, [pc, #160]	; (8fc54 <cl_testharnesscommandhandler+0xfcc>)
   8fbb4:	4798      	blx	r3
   8fbb6:	4603      	mov	r3, r0
   8fbb8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   8fbbc:	4b26      	ldr	r3, [pc, #152]	; (8fc58 <cl_testharnesscommandhandler+0xfd0>)
   8fbbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fbc2:	2064      	movs	r0, #100	; 0x64
   8fbc4:	4b10      	ldr	r3, [pc, #64]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fbc6:	4798      	blx	r3
		break;
   8fbc8:	f001 bcdb 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   8fbcc:	2064      	movs	r0, #100	; 0x64
   8fbce:	4b0e      	ldr	r3, [pc, #56]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fbd0:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8fbd2:	2005      	movs	r0, #5
   8fbd4:	4b0d      	ldr	r3, [pc, #52]	; (8fc0c <cl_testharnesscommandhandler+0xf84>)
   8fbd6:	4798      	blx	r3
   8fbd8:	4603      	mov	r3, r0
   8fbda:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   8fbde:	4b1f      	ldr	r3, [pc, #124]	; (8fc5c <cl_testharnesscommandhandler+0xfd4>)
   8fbe0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fbe4:	2064      	movs	r0, #100	; 0x64
   8fbe6:	4b08      	ldr	r3, [pc, #32]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fbe8:	4798      	blx	r3
		break;
   8fbea:	f001 bcca 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   8fbee:	2064      	movs	r0, #100	; 0x64
   8fbf0:	4b05      	ldr	r3, [pc, #20]	; (8fc08 <cl_testharnesscommandhandler+0xf80>)
   8fbf2:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   8fbf4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fbf8:	2b02      	cmp	r3, #2
   8fbfa:	d131      	bne.n	8fc60 <cl_testharnesscommandhandler+0xfd8>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8fbfc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc00:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fc04:	e038      	b.n	8fc78 <cl_testharnesscommandhandler+0xff0>
   8fc06:	bf00      	nop
   8fc08:	00091b9d 	.word	0x00091b9d
   8fc0c:	00096819 	.word	0x00096819
   8fc10:	20073138 	.word	0x20073138
   8fc14:	000968f5 	.word	0x000968f5
   8fc18:	000a47ac 	.word	0x000a47ac
   8fc1c:	000969dd 	.word	0x000969dd
   8fc20:	000a47b4 	.word	0x000a47b4
   8fc24:	000968cd 	.word	0x000968cd
   8fc28:	000a47bc 	.word	0x000a47bc
   8fc2c:	000968e1 	.word	0x000968e1
   8fc30:	000a47c4 	.word	0x000a47c4
   8fc34:	000a47cc 	.word	0x000a47cc
   8fc38:	000a47d8 	.word	0x000a47d8
   8fc3c:	000a47e4 	.word	0x000a47e4
   8fc40:	0009687d 	.word	0x0009687d
   8fc44:	0009689d 	.word	0x0009689d
   8fc48:	00096d29 	.word	0x00096d29
   8fc4c:	000a47ec 	.word	0x000a47ec
   8fc50:	000a47f4 	.word	0x000a47f4
   8fc54:	000967dd 	.word	0x000967dd
   8fc58:	000a4800 	.word	0x000a4800
   8fc5c:	000a4808 	.word	0x000a4808
						}
						else if(TestMsg.datasize == 3)
   8fc60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fc64:	2b03      	cmp	r3, #3
   8fc66:	d107      	bne.n	8fc78 <cl_testharnesscommandhandler+0xff0>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8fc68:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc6c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8fc70:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fc74:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   8fc78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8fc7c:	4619      	mov	r1, r3
   8fc7e:	2005      	movs	r0, #5
   8fc80:	4b9e      	ldr	r3, [pc, #632]	; (8fefc <cl_testharnesscommandhandler+0x1274>)
   8fc82:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   8fc84:	4b9e      	ldr	r3, [pc, #632]	; (8ff00 <cl_testharnesscommandhandler+0x1278>)
   8fc86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8fc8a:	2064      	movs	r0, #100	; 0x64
   8fc8c:	4b9d      	ldr	r3, [pc, #628]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fc8e:	4798      	blx	r3
		break;
   8fc90:	f001 bc77 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   8fc94:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fc98:	2b00      	cmp	r3, #0
   8fc9a:	d003      	beq.n	8fca4 <cl_testharnesscommandhandler+0x101c>
		{
			sv_cntrl_setHepa_dir();
   8fc9c:	4b9a      	ldr	r3, [pc, #616]	; (8ff08 <cl_testharnesscommandhandler+0x1280>)
   8fc9e:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   8fca0:	f001 bc6f 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   8fca4:	4b99      	ldr	r3, [pc, #612]	; (8ff0c <cl_testharnesscommandhandler+0x1284>)
   8fca6:	4798      	blx	r3
		}
		break;
   8fca8:	f001 bc6b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   8fcac:	2032      	movs	r0, #50	; 0x32
   8fcae:	4b95      	ldr	r3, [pc, #596]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fcb0:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8fcb2:	2001      	movs	r0, #1
   8fcb4:	4b96      	ldr	r3, [pc, #600]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fcb6:	4798      	blx	r3
   8fcb8:	4603      	mov	r3, r0
   8fcba:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fcbe:	200a      	movs	r0, #10
   8fcc0:	4b90      	ldr	r3, [pc, #576]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fcc2:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8fcc4:	2002      	movs	r0, #2
   8fcc6:	4b92      	ldr	r3, [pc, #584]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fcc8:	4798      	blx	r3
   8fcca:	4603      	mov	r3, r0
   8fccc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fcd0:	200a      	movs	r0, #10
   8fcd2:	4b8c      	ldr	r3, [pc, #560]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fcd4:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8fcd6:	2003      	movs	r0, #3
   8fcd8:	4b8d      	ldr	r3, [pc, #564]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fcda:	4798      	blx	r3
   8fcdc:	4603      	mov	r3, r0
   8fcde:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fce2:	200a      	movs	r0, #10
   8fce4:	4b87      	ldr	r3, [pc, #540]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fce6:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8fce8:	2004      	movs	r0, #4
   8fcea:	4b89      	ldr	r3, [pc, #548]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fcec:	4798      	blx	r3
   8fcee:	4603      	mov	r3, r0
   8fcf0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fcf4:	200a      	movs	r0, #10
   8fcf6:	4b83      	ldr	r3, [pc, #524]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fcf8:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8fcfa:	2005      	movs	r0, #5
   8fcfc:	4b84      	ldr	r3, [pc, #528]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fcfe:	4798      	blx	r3
   8fd00:	4603      	mov	r3, r0
   8fd02:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   8fd06:	2032      	movs	r0, #50	; 0x32
   8fd08:	4b7e      	ldr	r3, [pc, #504]	; (8ff04 <cl_testharnesscommandhandler+0x127c>)
   8fd0a:	4798      	blx	r3
		break;
   8fd0c:	f001 bc39 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   8fd10:	2006      	movs	r0, #6
   8fd12:	4b80      	ldr	r3, [pc, #512]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd14:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fd16:	2007      	movs	r0, #7
   8fd18:	4b7e      	ldr	r3, [pc, #504]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd1a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fd1c:	200c      	movs	r0, #12
   8fd1e:	4b7d      	ldr	r3, [pc, #500]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd20:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8fd22:	2009      	movs	r0, #9
   8fd24:	4b7b      	ldr	r3, [pc, #492]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd26:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8fd28:	2005      	movs	r0, #5
   8fd2a:	4b7b      	ldr	r3, [pc, #492]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd2c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fd2e:	2008      	movs	r0, #8
   8fd30:	4b79      	ldr	r3, [pc, #484]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd32:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fd34:	200a      	movs	r0, #10
   8fd36:	4b78      	ldr	r3, [pc, #480]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd38:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fd3a:	200b      	movs	r0, #11
   8fd3c:	4b76      	ldr	r3, [pc, #472]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd3e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   8fd40:	4b76      	ldr	r3, [pc, #472]	; (8ff1c <cl_testharnesscommandhandler+0x1294>)
   8fd42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8fd46:	f001 bc1c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   8fd4a:	2005      	movs	r0, #5
   8fd4c:	4b71      	ldr	r3, [pc, #452]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd4e:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8fd50:	2008      	movs	r0, #8
   8fd52:	4b70      	ldr	r3, [pc, #448]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd54:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8fd56:	200a      	movs	r0, #10
   8fd58:	4b6e      	ldr	r3, [pc, #440]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd5a:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fd5c:	200b      	movs	r0, #11
   8fd5e:	4b6d      	ldr	r3, [pc, #436]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd60:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fd62:	200c      	movs	r0, #12
   8fd64:	4b6c      	ldr	r3, [pc, #432]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd66:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fd68:	2009      	movs	r0, #9
   8fd6a:	4b6b      	ldr	r3, [pc, #428]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd6c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fd6e:	2006      	movs	r0, #6
   8fd70:	4b69      	ldr	r3, [pc, #420]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd72:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fd74:	2007      	movs	r0, #7
   8fd76:	4b68      	ldr	r3, [pc, #416]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fd78:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   8fd7a:	4b69      	ldr	r3, [pc, #420]	; (8ff20 <cl_testharnesscommandhandler+0x1298>)
   8fd7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8fd80:	f001 bbff 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   8fd84:	2006      	movs	r0, #6
   8fd86:	4b63      	ldr	r3, [pc, #396]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd88:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fd8a:	2007      	movs	r0, #7
   8fd8c:	4b61      	ldr	r3, [pc, #388]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd8e:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fd90:	200c      	movs	r0, #12
   8fd92:	4b60      	ldr	r3, [pc, #384]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd94:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8fd96:	2009      	movs	r0, #9
   8fd98:	4b5e      	ldr	r3, [pc, #376]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fd9a:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8fd9c:	2005      	movs	r0, #5
   8fd9e:	4b5e      	ldr	r3, [pc, #376]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fda0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fda2:	2008      	movs	r0, #8
   8fda4:	4b5c      	ldr	r3, [pc, #368]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fda6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fda8:	200a      	movs	r0, #10
   8fdaa:	4b5b      	ldr	r3, [pc, #364]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fdac:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fdae:	200b      	movs	r0, #11
   8fdb0:	4b59      	ldr	r3, [pc, #356]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fdb2:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8fdb4:	200d      	movs	r0, #13
   8fdb6:	4b57      	ldr	r3, [pc, #348]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdb8:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8fdba:	200e      	movs	r0, #14
   8fdbc:	4b55      	ldr	r3, [pc, #340]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdbe:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   8fdc0:	4b58      	ldr	r3, [pc, #352]	; (8ff24 <cl_testharnesscommandhandler+0x129c>)
   8fdc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8fdc6:	f001 bbdc 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   8fdca:	2005      	movs	r0, #5
   8fdcc:	4b51      	ldr	r3, [pc, #324]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdce:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8fdd0:	2008      	movs	r0, #8
   8fdd2:	4b50      	ldr	r3, [pc, #320]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdd4:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8fdd6:	200a      	movs	r0, #10
   8fdd8:	4b4e      	ldr	r3, [pc, #312]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdda:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fddc:	200b      	movs	r0, #11
   8fdde:	4b4d      	ldr	r3, [pc, #308]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fde0:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fde2:	200c      	movs	r0, #12
   8fde4:	4b4c      	ldr	r3, [pc, #304]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fde6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fde8:	2009      	movs	r0, #9
   8fdea:	4b4b      	ldr	r3, [pc, #300]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fdec:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fdee:	2006      	movs	r0, #6
   8fdf0:	4b49      	ldr	r3, [pc, #292]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fdf2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fdf4:	2007      	movs	r0, #7
   8fdf6:	4b48      	ldr	r3, [pc, #288]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fdf8:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8fdfa:	200d      	movs	r0, #13
   8fdfc:	4b45      	ldr	r3, [pc, #276]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fdfe:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8fe00:	200e      	movs	r0, #14
   8fe02:	4b44      	ldr	r3, [pc, #272]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe04:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   8fe06:	4b48      	ldr	r3, [pc, #288]	; (8ff28 <cl_testharnesscommandhandler+0x12a0>)
   8fe08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8fe0c:	f001 bbb9 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   8fe10:	2006      	movs	r0, #6
   8fe12:	4b40      	ldr	r3, [pc, #256]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe14:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fe16:	2007      	movs	r0, #7
   8fe18:	4b3e      	ldr	r3, [pc, #248]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe1a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fe1c:	200c      	movs	r0, #12
   8fe1e:	4b3d      	ldr	r3, [pc, #244]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe20:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8fe22:	2009      	movs	r0, #9
   8fe24:	4b3b      	ldr	r3, [pc, #236]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe26:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8fe28:	2005      	movs	r0, #5
   8fe2a:	4b3b      	ldr	r3, [pc, #236]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe2c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fe2e:	2008      	movs	r0, #8
   8fe30:	4b39      	ldr	r3, [pc, #228]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe32:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fe34:	200a      	movs	r0, #10
   8fe36:	4b38      	ldr	r3, [pc, #224]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe38:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fe3a:	200b      	movs	r0, #11
   8fe3c:	4b36      	ldr	r3, [pc, #216]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe3e:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8fe40:	2004      	movs	r0, #4
   8fe42:	4b34      	ldr	r3, [pc, #208]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe44:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8fe46:	200d      	movs	r0, #13
   8fe48:	4b33      	ldr	r3, [pc, #204]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe4a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8fe4c:	200e      	movs	r0, #14
   8fe4e:	4b32      	ldr	r3, [pc, #200]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe50:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   8fe52:	4b36      	ldr	r3, [pc, #216]	; (8ff2c <cl_testharnesscommandhandler+0x12a4>)
   8fe54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8fe58:	f001 bb93 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   8fe5c:	2005      	movs	r0, #5
   8fe5e:	4b2d      	ldr	r3, [pc, #180]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe60:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8fe62:	2008      	movs	r0, #8
   8fe64:	4b2b      	ldr	r3, [pc, #172]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe66:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8fe68:	200a      	movs	r0, #10
   8fe6a:	4b2a      	ldr	r3, [pc, #168]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe6c:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fe6e:	200b      	movs	r0, #11
   8fe70:	4b28      	ldr	r3, [pc, #160]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe72:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fe74:	200c      	movs	r0, #12
   8fe76:	4b28      	ldr	r3, [pc, #160]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe78:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fe7a:	2009      	movs	r0, #9
   8fe7c:	4b26      	ldr	r3, [pc, #152]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe7e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fe80:	2006      	movs	r0, #6
   8fe82:	4b25      	ldr	r3, [pc, #148]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe84:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fe86:	2007      	movs	r0, #7
   8fe88:	4b23      	ldr	r3, [pc, #140]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe8a:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8fe8c:	2004      	movs	r0, #4
   8fe8e:	4b21      	ldr	r3, [pc, #132]	; (8ff14 <cl_testharnesscommandhandler+0x128c>)
   8fe90:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8fe92:	200d      	movs	r0, #13
   8fe94:	4b20      	ldr	r3, [pc, #128]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe96:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8fe98:	200e      	movs	r0, #14
   8fe9a:	4b1f      	ldr	r3, [pc, #124]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fe9c:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   8fe9e:	4b24      	ldr	r3, [pc, #144]	; (8ff30 <cl_testharnesscommandhandler+0x12a8>)
   8fea0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8fea4:	f001 bb6d 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   8fea8:	2005      	movs	r0, #5
   8feaa:	4b1b      	ldr	r3, [pc, #108]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8feac:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8feae:	2008      	movs	r0, #8
   8feb0:	4b19      	ldr	r3, [pc, #100]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8feb2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8feb4:	200a      	movs	r0, #10
   8feb6:	4b18      	ldr	r3, [pc, #96]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8feb8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8feba:	200b      	movs	r0, #11
   8febc:	4b16      	ldr	r3, [pc, #88]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8febe:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fec0:	200c      	movs	r0, #12
   8fec2:	4b15      	ldr	r3, [pc, #84]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fec4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fec6:	2009      	movs	r0, #9
   8fec8:	4b13      	ldr	r3, [pc, #76]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8feca:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fecc:	2006      	movs	r0, #6
   8fece:	4b12      	ldr	r3, [pc, #72]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fed0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fed2:	2007      	movs	r0, #7
   8fed4:	4b10      	ldr	r3, [pc, #64]	; (8ff18 <cl_testharnesscommandhandler+0x1290>)
   8fed6:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8fed8:	2001      	movs	r0, #1
   8feda:	4b0d      	ldr	r3, [pc, #52]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fedc:	4798      	blx	r3
   8fede:	4603      	mov	r3, r0
   8fee0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8fee4:	2002      	movs	r0, #2
   8fee6:	4b0a      	ldr	r3, [pc, #40]	; (8ff10 <cl_testharnesscommandhandler+0x1288>)
   8fee8:	4798      	blx	r3
   8feea:	4603      	mov	r3, r0
   8feec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   8fef0:	4b10      	ldr	r3, [pc, #64]	; (8ff34 <cl_testharnesscommandhandler+0x12ac>)
   8fef2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   8fef6:	f001 bb44 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
   8fefa:	bf00      	nop
   8fefc:	000968f5 	.word	0x000968f5
   8ff00:	000a4810 	.word	0x000a4810
   8ff04:	00091b9d 	.word	0x00091b9d
   8ff08:	000968cd 	.word	0x000968cd
   8ff0c:	000968e1 	.word	0x000968e1
   8ff10:	00096819 	.word	0x00096819
   8ff14:	0009687d 	.word	0x0009687d
   8ff18:	0009689d 	.word	0x0009689d
   8ff1c:	000a4818 	.word	0x000a4818
   8ff20:	000a4824 	.word	0x000a4824
   8ff24:	000a4830 	.word	0x000a4830
   8ff28:	000a4840 	.word	0x000a4840
   8ff2c:	000a4850 	.word	0x000a4850
   8ff30:	000a485c 	.word	0x000a485c
   8ff34:	000a4868 	.word	0x000a4868
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   8ff38:	4bb1      	ldr	r3, [pc, #708]	; (90200 <cl_testharnesscommandhandler+0x1578>)
   8ff3a:	2201      	movs	r2, #1
   8ff3c:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   8ff3e:	2005      	movs	r0, #5
   8ff40:	4bb0      	ldr	r3, [pc, #704]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff42:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   8ff44:	2008      	movs	r0, #8
   8ff46:	4baf      	ldr	r3, [pc, #700]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff48:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   8ff4a:	200a      	movs	r0, #10
   8ff4c:	4bad      	ldr	r3, [pc, #692]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff4e:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   8ff50:	200b      	movs	r0, #11
   8ff52:	4bac      	ldr	r3, [pc, #688]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff54:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   8ff56:	200c      	movs	r0, #12
   8ff58:	4baa      	ldr	r3, [pc, #680]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff5a:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   8ff5c:	2009      	movs	r0, #9
   8ff5e:	4ba9      	ldr	r3, [pc, #676]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff60:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   8ff62:	2006      	movs	r0, #6
   8ff64:	4ba7      	ldr	r3, [pc, #668]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff66:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   8ff68:	2007      	movs	r0, #7
   8ff6a:	4ba6      	ldr	r3, [pc, #664]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   8ff6c:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8ff6e:	2001      	movs	r0, #1
   8ff70:	4ba5      	ldr	r3, [pc, #660]	; (90208 <cl_testharnesscommandhandler+0x1580>)
   8ff72:	4798      	blx	r3
   8ff74:	4603      	mov	r3, r0
   8ff76:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8ff7a:	2002      	movs	r0, #2
   8ff7c:	4ba2      	ldr	r3, [pc, #648]	; (90208 <cl_testharnesscommandhandler+0x1580>)
   8ff7e:	4798      	blx	r3
   8ff80:	4603      	mov	r3, r0
   8ff82:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   8ff86:	4ba1      	ldr	r3, [pc, #644]	; (9020c <cl_testharnesscommandhandler+0x1584>)
   8ff88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8ff8c:	f001 baf9 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   8ff90:	4b9b      	ldr	r3, [pc, #620]	; (90200 <cl_testharnesscommandhandler+0x1578>)
   8ff92:	2200      	movs	r2, #0
   8ff94:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   8ff96:	4b9e      	ldr	r3, [pc, #632]	; (90210 <cl_testharnesscommandhandler+0x1588>)
   8ff98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8ff9c:	2001      	movs	r0, #1
   8ff9e:	4b9d      	ldr	r3, [pc, #628]	; (90214 <cl_testharnesscommandhandler+0x158c>)
   8ffa0:	4798      	blx	r3
   8ffa2:	4603      	mov	r3, r0
   8ffa4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8ffa8:	2002      	movs	r0, #2
   8ffaa:	4b9a      	ldr	r3, [pc, #616]	; (90214 <cl_testharnesscommandhandler+0x158c>)
   8ffac:	4798      	blx	r3
   8ffae:	4603      	mov	r3, r0
   8ffb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   8ffb4:	4b92      	ldr	r3, [pc, #584]	; (90200 <cl_testharnesscommandhandler+0x1578>)
   8ffb6:	2200      	movs	r2, #0
   8ffb8:	701a      	strb	r2, [r3, #0]
		break;
   8ffba:	f001 bae2 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   8ffbe:	4b96      	ldr	r3, [pc, #600]	; (90218 <cl_testharnesscommandhandler+0x1590>)
   8ffc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   8ffc4:	2005      	movs	r0, #5
   8ffc6:	4b95      	ldr	r3, [pc, #596]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffc8:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   8ffca:	2008      	movs	r0, #8
   8ffcc:	4b93      	ldr	r3, [pc, #588]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffce:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   8ffd0:	200a      	movs	r0, #10
   8ffd2:	4b92      	ldr	r3, [pc, #584]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffd4:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   8ffd6:	200b      	movs	r0, #11
   8ffd8:	4b90      	ldr	r3, [pc, #576]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffda:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   8ffdc:	200c      	movs	r0, #12
   8ffde:	4b8f      	ldr	r3, [pc, #572]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffe0:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   8ffe2:	2009      	movs	r0, #9
   8ffe4:	4b8d      	ldr	r3, [pc, #564]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffe6:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   8ffe8:	2006      	movs	r0, #6
   8ffea:	4b8c      	ldr	r3, [pc, #560]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8ffec:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   8ffee:	2007      	movs	r0, #7
   8fff0:	4b8a      	ldr	r3, [pc, #552]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   8fff2:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8fff4:	2001      	movs	r0, #1
   8fff6:	4b87      	ldr	r3, [pc, #540]	; (90214 <cl_testharnesscommandhandler+0x158c>)
   8fff8:	4798      	blx	r3
   8fffa:	4603      	mov	r3, r0
   8fffc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   90000:	2002      	movs	r0, #2
   90002:	4b84      	ldr	r3, [pc, #528]	; (90214 <cl_testharnesscommandhandler+0x158c>)
   90004:	4798      	blx	r3
   90006:	4603      	mov	r3, r0
   90008:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   9000c:	4b7c      	ldr	r3, [pc, #496]	; (90200 <cl_testharnesscommandhandler+0x1578>)
   9000e:	2200      	movs	r2, #0
   90010:	701a      	strb	r2, [r3, #0]
					break;
   90012:	f001 bab6 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   90016:	4b82      	ldr	r3, [pc, #520]	; (90220 <cl_testharnesscommandhandler+0x1598>)
   90018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   9001c:	4b81      	ldr	r3, [pc, #516]	; (90224 <cl_testharnesscommandhandler+0x159c>)
   9001e:	2205      	movs	r2, #5
   90020:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   90022:	4b77      	ldr	r3, [pc, #476]	; (90200 <cl_testharnesscommandhandler+0x1578>)
   90024:	2200      	movs	r2, #0
   90026:	701a      	strb	r2, [r3, #0]
			break;
   90028:	f001 baab 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   9002c:	f44f 6010 	mov.w	r0, #2304	; 0x900
   90030:	4b7d      	ldr	r3, [pc, #500]	; (90228 <cl_testharnesscommandhandler+0x15a0>)
   90032:	4798      	blx	r3
			
			break;
   90034:	f001 baa5 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   90038:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   9003c:	4b7a      	ldr	r3, [pc, #488]	; (90228 <cl_testharnesscommandhandler+0x15a0>)
   9003e:	4798      	blx	r3
			break;
   90040:	f001 ba9f 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   90044:	2064      	movs	r0, #100	; 0x64
   90046:	4b79      	ldr	r3, [pc, #484]	; (9022c <cl_testharnesscommandhandler+0x15a4>)
   90048:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   9004a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9004e:	2b02      	cmp	r3, #2
   90050:	d104      	bne.n	9005c <cl_testharnesscommandhandler+0x13d4>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90052:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90056:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9005a:	e00b      	b.n	90074 <cl_testharnesscommandhandler+0x13ec>
				}
				else if(TestMsg.datasize == 3)
   9005c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90060:	2b03      	cmp	r3, #3
   90062:	d107      	bne.n	90074 <cl_testharnesscommandhandler+0x13ec>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90064:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90068:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   9006c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90070:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   90074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90078:	4a6d      	ldr	r2, [pc, #436]	; (90230 <cl_testharnesscommandhandler+0x15a8>)
   9007a:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   9007c:	4b6c      	ldr	r3, [pc, #432]	; (90230 <cl_testharnesscommandhandler+0x15a8>)
   9007e:	681b      	ldr	r3, [r3, #0]
   90080:	4618      	mov	r0, r3
   90082:	4b69      	ldr	r3, [pc, #420]	; (90228 <cl_testharnesscommandhandler+0x15a0>)
   90084:	4798      	blx	r3
			break;
   90086:	f001 ba7c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   9008a:	4b6a      	ldr	r3, [pc, #424]	; (90234 <cl_testharnesscommandhandler+0x15ac>)
   9008c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   90090:	2004      	movs	r0, #4
   90092:	4b62      	ldr	r3, [pc, #392]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   90094:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   90096:	2032      	movs	r0, #50	; 0x32
   90098:	4b64      	ldr	r3, [pc, #400]	; (9022c <cl_testharnesscommandhandler+0x15a4>)
   9009a:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   9009c:	2004      	movs	r0, #4
   9009e:	4b59      	ldr	r3, [pc, #356]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   900a0:	4798      	blx	r3
						cl_wait(50);
   900a2:	2032      	movs	r0, #50	; 0x32
   900a4:	4b61      	ldr	r3, [pc, #388]	; (9022c <cl_testharnesscommandhandler+0x15a4>)
   900a6:	4798      	blx	r3
			break;
   900a8:	f001 ba6b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   900ac:	4b62      	ldr	r3, [pc, #392]	; (90238 <cl_testharnesscommandhandler+0x15b0>)
   900ae:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   900b0:	4b62      	ldr	r3, [pc, #392]	; (9023c <cl_testharnesscommandhandler+0x15b4>)
   900b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   900b6:	f001 ba64 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   900ba:	2300      	movs	r3, #0
   900bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   900c0:	e008      	b.n	900d4 <cl_testharnesscommandhandler+0x144c>
			{
							cl_indata.word = count1;
   900c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   900c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   900ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   900ce:	3301      	adds	r3, #1
   900d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   900d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   900d8:	2b0f      	cmp	r3, #15
   900da:	d9f2      	bls.n	900c2 <cl_testharnesscommandhandler+0x143a>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   900dc:	f001 ba51 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   900e0:	4b57      	ldr	r3, [pc, #348]	; (90240 <cl_testharnesscommandhandler+0x15b8>)
   900e2:	2201      	movs	r2, #1
   900e4:	701a      	strb	r2, [r3, #0]
			break;
   900e6:	f001 ba4c 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   900ea:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   900ee:	2b01      	cmp	r3, #1
   900f0:	d107      	bne.n	90102 <cl_testharnesscommandhandler+0x147a>
				{
					Current_sense_trigger = true;
   900f2:	4b54      	ldr	r3, [pc, #336]	; (90244 <cl_testharnesscommandhandler+0x15bc>)
   900f4:	2201      	movs	r2, #1
   900f6:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   900f8:	4b53      	ldr	r3, [pc, #332]	; (90248 <cl_testharnesscommandhandler+0x15c0>)
   900fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   900fe:	f001 ba40 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   90102:	4b50      	ldr	r3, [pc, #320]	; (90244 <cl_testharnesscommandhandler+0x15bc>)
   90104:	2200      	movs	r2, #0
   90106:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   90108:	4b50      	ldr	r3, [pc, #320]	; (9024c <cl_testharnesscommandhandler+0x15c4>)
   9010a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9010e:	f001 ba38 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   90112:	4b4f      	ldr	r3, [pc, #316]	; (90250 <cl_testharnesscommandhandler+0x15c8>)
   90114:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   90118:	2207      	movs	r2, #7
   9011a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9011e:	2018      	movs	r0, #24
   90120:	4b4c      	ldr	r3, [pc, #304]	; (90254 <cl_testharnesscommandhandler+0x15cc>)
   90122:	4798      	blx	r3
   90124:	4603      	mov	r3, r0
   90126:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   9012a:	f001 ba2a 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   9012e:	2004      	movs	r0, #4
   90130:	4b3a      	ldr	r3, [pc, #232]	; (9021c <cl_testharnesscommandhandler+0x1594>)
   90132:	4798      	blx	r3
							cl_wait(50);
   90134:	2032      	movs	r0, #50	; 0x32
   90136:	4b3d      	ldr	r3, [pc, #244]	; (9022c <cl_testharnesscommandhandler+0x15a4>)
   90138:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   9013a:	2004      	movs	r0, #4
   9013c:	4b31      	ldr	r3, [pc, #196]	; (90204 <cl_testharnesscommandhandler+0x157c>)
   9013e:	4798      	blx	r3
						break;
   90140:	f001 ba1f 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   90144:	4b44      	ldr	r3, [pc, #272]	; (90258 <cl_testharnesscommandhandler+0x15d0>)
   90146:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   90148:	f001 ba1b 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   9014c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90150:	2b01      	cmp	r3, #1
   90152:	d107      	bne.n	90164 <cl_testharnesscommandhandler+0x14dc>
				{
						gflow_en = true;
   90154:	4b41      	ldr	r3, [pc, #260]	; (9025c <cl_testharnesscommandhandler+0x15d4>)
   90156:	2201      	movs	r2, #1
   90158:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   9015a:	4b41      	ldr	r3, [pc, #260]	; (90260 <cl_testharnesscommandhandler+0x15d8>)
   9015c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   90160:	f001 ba0f 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   90164:	4b3d      	ldr	r3, [pc, #244]	; (9025c <cl_testharnesscommandhandler+0x15d4>)
   90166:	2200      	movs	r2, #0
   90168:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   9016a:	4b3e      	ldr	r3, [pc, #248]	; (90264 <cl_testharnesscommandhandler+0x15dc>)
   9016c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   90170:	f001 ba07 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   90174:	4b3c      	ldr	r3, [pc, #240]	; (90268 <cl_testharnesscommandhandler+0x15e0>)
   90176:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   90178:	f001 ba03 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propro_rc( TestMsg.data.byte[1]);
   9017c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90180:	4618      	mov	r0, r3
   90182:	4b3a      	ldr	r3, [pc, #232]	; (9026c <cl_testharnesscommandhandler+0x15e4>)
   90184:	4798      	blx	r3
		break;
   90186:	f001 b9fc 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   9018a:	4b39      	ldr	r3, [pc, #228]	; (90270 <cl_testharnesscommandhandler+0x15e8>)
   9018c:	2200      	movs	r2, #0
   9018e:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   90190:	2300      	movs	r3, #0
   90192:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   90196:	4b37      	ldr	r3, [pc, #220]	; (90274 <cl_testharnesscommandhandler+0x15ec>)
   90198:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   9019a:	f001 b9f2 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_STOP_PROPO:
			cl_wait(100);
   9019e:	2064      	movs	r0, #100	; 0x64
   901a0:	4b22      	ldr	r3, [pc, #136]	; (9022c <cl_testharnesscommandhandler+0x15a4>)
   901a2:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   901a4:	4b34      	ldr	r3, [pc, #208]	; (90278 <cl_testharnesscommandhandler+0x15f0>)
   901a6:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   901a8:	f001 b9eb 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   901ac:	4b33      	ldr	r3, [pc, #204]	; (9027c <cl_testharnesscommandhandler+0x15f4>)
   901ae:	4798      	blx	r3
		break;
   901b0:	f001 b9e7 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   901b4:	4b32      	ldr	r3, [pc, #200]	; (90280 <cl_testharnesscommandhandler+0x15f8>)
   901b6:	4798      	blx	r3
		break;
   901b8:	f001 b9e3 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   901bc:	4b31      	ldr	r3, [pc, #196]	; (90284 <cl_testharnesscommandhandler+0x15fc>)
   901be:	4798      	blx	r3
		 sv_prop_stopmixing();
   901c0:	4b2d      	ldr	r3, [pc, #180]	; (90278 <cl_testharnesscommandhandler+0x15f0>)
   901c2:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   901c4:	f001 b9dd 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   901c8:	4b2f      	ldr	r3, [pc, #188]	; (90288 <cl_testharnesscommandhandler+0x1600>)
   901ca:	4798      	blx	r3
		 sv_prop_stopmixing();
   901cc:	4b2a      	ldr	r3, [pc, #168]	; (90278 <cl_testharnesscommandhandler+0x15f0>)
   901ce:	4798      	blx	r3
		break;
   901d0:	f001 b9d7 	b.w	91582 <cl_testharnesscommandhandler+0x28fa>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   901d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   901d8:	2b02      	cmp	r3, #2
   901da:	d104      	bne.n	901e6 <cl_testharnesscommandhandler+0x155e>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   901dc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   901e0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   901e4:	e077      	b.n	902d6 <cl_testharnesscommandhandler+0x164e>
						}
						else if(TestMsg.datasize == 3)
   901e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   901ea:	2b03      	cmp	r3, #3
   901ec:	d14e      	bne.n	9028c <cl_testharnesscommandhandler+0x1604>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   901ee:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   901f2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   901f6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   901fa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   901fe:	e06a      	b.n	902d6 <cl_testharnesscommandhandler+0x164e>
   90200:	200725f9 	.word	0x200725f9
   90204:	0009689d 	.word	0x0009689d
   90208:	00096819 	.word	0x00096819
   9020c:	000a4874 	.word	0x000a4874
   90210:	000a4880 	.word	0x000a4880
   90214:	000967dd 	.word	0x000967dd
   90218:	000a488c 	.word	0x000a488c
   9021c:	0009687d 	.word	0x0009687d
   90220:	000a4898 	.word	0x000a4898
   90224:	20072804 	.word	0x20072804
   90228:	0009695d 	.word	0x0009695d
   9022c:	00091b9d 	.word	0x00091b9d
   90230:	20070438 	.word	0x20070438
   90234:	000a489c 	.word	0x000a489c
   90238:	000969dd 	.word	0x000969dd
   9023c:	000a47b4 	.word	0x000a47b4
   90240:	200725f8 	.word	0x200725f8
   90244:	200709b2 	.word	0x200709b2
   90248:	000a48a4 	.word	0x000a48a4
   9024c:	000a48b0 	.word	0x000a48b0
   90250:	000a48bc 	.word	0x000a48bc
   90254:	00098601 	.word	0x00098601
   90258:	00096c39 	.word	0x00096c39
   9025c:	200725fb 	.word	0x200725fb
   90260:	000a48c4 	.word	0x000a48c4
   90264:	000a48cc 	.word	0x000a48cc
   90268:	00096c25 	.word	0x00096c25
   9026c:	00096c4d 	.word	0x00096c4d
   90270:	200725f6 	.word	0x200725f6
   90274:	00096bf9 	.word	0x00096bf9
   90278:	00096c75 	.word	0x00096c75
   9027c:	00096a29 	.word	0x00096a29
   90280:	00096a51 	.word	0x00096a51
   90284:	000969f1 	.word	0x000969f1
   90288:	00096a0d 	.word	0x00096a0d
							
						}
							else if(TestMsg.datasize == 4)
   9028c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90290:	2b04      	cmp	r3, #4
   90292:	d10c      	bne.n	902ae <cl_testharnesscommandhandler+0x1626>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   90294:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90298:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   9029c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   902a0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   902a4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   902a8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   902ac:	e013      	b.n	902d6 <cl_testharnesscommandhandler+0x164e>
							
						}
							else if(TestMsg.datasize == 5)
   902ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   902b2:	2b05      	cmp	r3, #5
   902b4:	d10f      	bne.n	902d6 <cl_testharnesscommandhandler+0x164e>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   902b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   902ba:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   902be:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   902c2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   902c6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   902ca:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   902ce:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   902d2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   902d6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   902da:	2b0c      	cmp	r3, #12
   902dc:	d028      	beq.n	90330 <cl_testharnesscommandhandler+0x16a8>
   902de:	2b0c      	cmp	r3, #12
   902e0:	dc11      	bgt.n	90306 <cl_testharnesscommandhandler+0x167e>
   902e2:	2b05      	cmp	r3, #5
   902e4:	f000 83fe 	beq.w	90ae4 <cl_testharnesscommandhandler+0x1e5c>
   902e8:	2b05      	cmp	r3, #5
   902ea:	dc04      	bgt.n	902f6 <cl_testharnesscommandhandler+0x166e>
   902ec:	2b01      	cmp	r3, #1
   902ee:	f000 8365 	beq.w	909bc <cl_testharnesscommandhandler+0x1d34>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   902f2:	f000 be1d 	b.w	90f30 <cl_testharnesscommandhandler+0x22a8>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   902f6:	2b06      	cmp	r3, #6
   902f8:	f000 8497 	beq.w	90c2a <cl_testharnesscommandhandler+0x1fa2>
   902fc:	2b07      	cmp	r3, #7
   902fe:	f000 8553 	beq.w	90da8 <cl_testharnesscommandhandler+0x2120>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   90302:	f000 be15 	b.w	90f30 <cl_testharnesscommandhandler+0x22a8>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   90306:	2b11      	cmp	r3, #17
   90308:	f000 820c 	beq.w	90724 <cl_testharnesscommandhandler+0x1a9c>
   9030c:	2b11      	cmp	r3, #17
   9030e:	dc07      	bgt.n	90320 <cl_testharnesscommandhandler+0x1698>
   90310:	2b0d      	cmp	r3, #13
   90312:	f000 80b1 	beq.w	90478 <cl_testharnesscommandhandler+0x17f0>
   90316:	2b0e      	cmp	r3, #14
   90318:	f000 814e 	beq.w	905b8 <cl_testharnesscommandhandler+0x1930>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9031c:	f000 be08 	b.w	90f30 <cl_testharnesscommandhandler+0x22a8>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   90320:	2b12      	cmp	r3, #18
   90322:	f000 8298 	beq.w	90856 <cl_testharnesscommandhandler+0x1bce>
   90326:	2bff      	cmp	r3, #255	; 0xff
   90328:	f000 85e1 	beq.w	90eee <cl_testharnesscommandhandler+0x2266>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9032c:	f000 be00 	b.w	90f30 <cl_testharnesscommandhandler+0x22a8>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   90330:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90334:	2b01      	cmp	r3, #1
   90336:	d11f      	bne.n	90378 <cl_testharnesscommandhandler+0x16f0>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   90338:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9033c:	4bc4      	ldr	r3, [pc, #784]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   9033e:	4610      	mov	r0, r2
   90340:	4798      	blx	r3
   90342:	4602      	mov	r2, r0
   90344:	4bc3      	ldr	r3, [pc, #780]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   90346:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90348:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9034c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   90350:	220a      	movs	r2, #10
   90352:	49c1      	ldr	r1, [pc, #772]	; (90658 <cl_testharnesscommandhandler+0x19d0>)
   90354:	2018      	movs	r0, #24
   90356:	4bc1      	ldr	r3, [pc, #772]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90358:	4798      	blx	r3
   9035a:	4603      	mov	r3, r0
   9035c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90360:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   90364:	2202      	movs	r2, #2
   90366:	4619      	mov	r1, r3
   90368:	2019      	movs	r0, #25
   9036a:	4bbc      	ldr	r3, [pc, #752]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   9036c:	4798      	blx	r3
   9036e:	4603      	mov	r3, r0
   90370:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90374:	f000 bdcb 	b.w	90f0e <cl_testharnesscommandhandler+0x2286>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   90378:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9037c:	2b00      	cmp	r3, #0
   9037e:	d126      	bne.n	903ce <cl_testharnesscommandhandler+0x1746>
							{
								int16_t temp=0,temp1=0;
   90380:	2300      	movs	r3, #0
   90382:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   90386:	2300      	movs	r3, #0
   90388:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   9038c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90390:	4baf      	ldr	r3, [pc, #700]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   90392:	4610      	mov	r0, r2
   90394:	4798      	blx	r3
   90396:	4602      	mov	r2, r0
   90398:	4bae      	ldr	r3, [pc, #696]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   9039a:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9039c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   903a0:	b21b      	sxth	r3, r3
   903a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   903a6:	2209      	movs	r2, #9
   903a8:	49ad      	ldr	r1, [pc, #692]	; (90660 <cl_testharnesscommandhandler+0x19d8>)
   903aa:	2018      	movs	r0, #24
   903ac:	4bab      	ldr	r3, [pc, #684]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   903ae:	4798      	blx	r3
   903b0:	4603      	mov	r3, r0
   903b2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   903b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
   903ba:	2202      	movs	r2, #2
   903bc:	4619      	mov	r1, r3
   903be:	2019      	movs	r0, #25
   903c0:	4ba6      	ldr	r3, [pc, #664]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   903c2:	4798      	blx	r3
   903c4:	4603      	mov	r3, r0
   903c6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   903ca:	f000 bda0 	b.w	90f0e <cl_testharnesscommandhandler+0x2286>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   903ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   903d2:	2b02      	cmp	r3, #2
   903d4:	d128      	bne.n	90428 <cl_testharnesscommandhandler+0x17a0>
							{
								int16_t temp=0,temp1=0;
   903d6:	2300      	movs	r3, #0
   903d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   903dc:	2300      	movs	r3, #0
   903de:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   903e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   903e6:	b21a      	sxth	r2, r3
   903e8:	4b9e      	ldr	r3, [pc, #632]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   903ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   903ee:	4b9d      	ldr	r3, [pc, #628]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   903f0:	2201      	movs	r2, #1
   903f2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   903f6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   903fa:	b21b      	sxth	r3, r3
   903fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   90400:	2209      	movs	r2, #9
   90402:	4997      	ldr	r1, [pc, #604]	; (90660 <cl_testharnesscommandhandler+0x19d8>)
   90404:	2018      	movs	r0, #24
   90406:	4b95      	ldr	r3, [pc, #596]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90408:	4798      	blx	r3
   9040a:	4603      	mov	r3, r0
   9040c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90410:	f107 0346 	add.w	r3, r7, #70	; 0x46
   90414:	2202      	movs	r2, #2
   90416:	4619      	mov	r1, r3
   90418:	2019      	movs	r0, #25
   9041a:	4b90      	ldr	r3, [pc, #576]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   9041c:	4798      	blx	r3
   9041e:	4603      	mov	r3, r0
   90420:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90424:	f000 bd73 	b.w	90f0e <cl_testharnesscommandhandler+0x2286>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90428:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9042c:	2b03      	cmp	r3, #3
   9042e:	f040 856e 	bne.w	90f0e <cl_testharnesscommandhandler+0x2286>
							{
								int16_t temp=0,temp1=0;
   90432:	2300      	movs	r3, #0
   90434:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   90438:	2300      	movs	r3, #0
   9043a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   9043e:	4b89      	ldr	r3, [pc, #548]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   90440:	2200      	movs	r2, #0
   90442:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90446:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9044a:	b21b      	sxth	r3, r3
   9044c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   90450:	2205      	movs	r2, #5
   90452:	4985      	ldr	r1, [pc, #532]	; (90668 <cl_testharnesscommandhandler+0x19e0>)
   90454:	2018      	movs	r0, #24
   90456:	4b81      	ldr	r3, [pc, #516]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90458:	4798      	blx	r3
   9045a:	4603      	mov	r3, r0
   9045c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90460:	f107 0344 	add.w	r3, r7, #68	; 0x44
   90464:	2202      	movs	r2, #2
   90466:	4619      	mov	r1, r3
   90468:	2019      	movs	r0, #25
   9046a:	4b7c      	ldr	r3, [pc, #496]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   9046c:	4798      	blx	r3
   9046e:	4603      	mov	r3, r0
   90470:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90474:	f000 bd4b 	b.w	90f0e <cl_testharnesscommandhandler+0x2286>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   90478:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9047c:	2b01      	cmp	r3, #1
   9047e:	d11f      	bne.n	904c0 <cl_testharnesscommandhandler+0x1838>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   90480:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90484:	4b72      	ldr	r3, [pc, #456]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   90486:	4610      	mov	r0, r2
   90488:	4798      	blx	r3
   9048a:	4602      	mov	r2, r0
   9048c:	4b71      	ldr	r3, [pc, #452]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   9048e:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90490:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90494:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   90498:	220a      	movs	r2, #10
   9049a:	4974      	ldr	r1, [pc, #464]	; (9066c <cl_testharnesscommandhandler+0x19e4>)
   9049c:	2018      	movs	r0, #24
   9049e:	4b6f      	ldr	r3, [pc, #444]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   904a0:	4798      	blx	r3
   904a2:	4603      	mov	r3, r0
   904a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   904a8:	f107 0342 	add.w	r3, r7, #66	; 0x42
   904ac:	2202      	movs	r2, #2
   904ae:	4619      	mov	r1, r3
   904b0:	2019      	movs	r0, #25
   904b2:	4b6a      	ldr	r3, [pc, #424]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   904b4:	4798      	blx	r3
   904b6:	4603      	mov	r3, r0
   904b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   904bc:	f000 bd29 	b.w	90f12 <cl_testharnesscommandhandler+0x228a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   904c0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   904c4:	2b00      	cmp	r3, #0
   904c6:	d126      	bne.n	90516 <cl_testharnesscommandhandler+0x188e>
							{
								int16_t temp=0,temp1=0;
   904c8:	2300      	movs	r3, #0
   904ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   904ce:	2300      	movs	r3, #0
   904d0:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   904d4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   904d8:	4b5d      	ldr	r3, [pc, #372]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   904da:	4610      	mov	r0, r2
   904dc:	4798      	blx	r3
   904de:	4602      	mov	r2, r0
   904e0:	4b5c      	ldr	r3, [pc, #368]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   904e2:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   904e4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   904e8:	b21b      	sxth	r3, r3
   904ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   904ee:	2209      	movs	r2, #9
   904f0:	495f      	ldr	r1, [pc, #380]	; (90670 <cl_testharnesscommandhandler+0x19e8>)
   904f2:	2018      	movs	r0, #24
   904f4:	4b59      	ldr	r3, [pc, #356]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   904f6:	4798      	blx	r3
   904f8:	4603      	mov	r3, r0
   904fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   904fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
   90502:	2202      	movs	r2, #2
   90504:	4619      	mov	r1, r3
   90506:	2019      	movs	r0, #25
   90508:	4b54      	ldr	r3, [pc, #336]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   9050a:	4798      	blx	r3
   9050c:	4603      	mov	r3, r0
   9050e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90512:	f000 bcfe 	b.w	90f12 <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   90516:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9051a:	2b02      	cmp	r3, #2
   9051c:	d126      	bne.n	9056c <cl_testharnesscommandhandler+0x18e4>
							{
								int16_t temp=0,temp1=0;
   9051e:	2300      	movs	r3, #0
   90520:	87fb      	strh	r3, [r7, #62]	; 0x3e
   90522:	2300      	movs	r3, #0
   90524:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   90528:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9052c:	b21a      	sxth	r2, r3
   9052e:	4b4d      	ldr	r3, [pc, #308]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   90530:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   90534:	4b4b      	ldr	r3, [pc, #300]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   90536:	2201      	movs	r2, #1
   90538:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9053c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90540:	b21b      	sxth	r3, r3
   90542:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90544:	2209      	movs	r2, #9
   90546:	494b      	ldr	r1, [pc, #300]	; (90674 <cl_testharnesscommandhandler+0x19ec>)
   90548:	2018      	movs	r0, #24
   9054a:	4b44      	ldr	r3, [pc, #272]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   9054c:	4798      	blx	r3
   9054e:	4603      	mov	r3, r0
   90550:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90554:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   90558:	2202      	movs	r2, #2
   9055a:	4619      	mov	r1, r3
   9055c:	2019      	movs	r0, #25
   9055e:	4b3f      	ldr	r3, [pc, #252]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90560:	4798      	blx	r3
   90562:	4603      	mov	r3, r0
   90564:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90568:	f000 bcd3 	b.w	90f12 <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9056c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90570:	2b03      	cmp	r3, #3
   90572:	f040 84ce 	bne.w	90f12 <cl_testharnesscommandhandler+0x228a>
							{
								int16_t temp=0,temp1=0;
   90576:	2300      	movs	r3, #0
   90578:	87bb      	strh	r3, [r7, #60]	; 0x3c
   9057a:	2300      	movs	r3, #0
   9057c:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   90580:	4b38      	ldr	r3, [pc, #224]	; (90664 <cl_testharnesscommandhandler+0x19dc>)
   90582:	2200      	movs	r2, #0
   90584:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90588:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9058c:	b21b      	sxth	r3, r3
   9058e:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   90590:	2205      	movs	r2, #5
   90592:	4939      	ldr	r1, [pc, #228]	; (90678 <cl_testharnesscommandhandler+0x19f0>)
   90594:	2018      	movs	r0, #24
   90596:	4b31      	ldr	r3, [pc, #196]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90598:	4798      	blx	r3
   9059a:	4603      	mov	r3, r0
   9059c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   905a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   905a4:	2202      	movs	r2, #2
   905a6:	4619      	mov	r1, r3
   905a8:	2019      	movs	r0, #25
   905aa:	4b2c      	ldr	r3, [pc, #176]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   905ac:	4798      	blx	r3
   905ae:	4603      	mov	r3, r0
   905b0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   905b4:	f000 bcad 	b.w	90f12 <cl_testharnesscommandhandler+0x228a>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   905b8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   905bc:	2b01      	cmp	r3, #1
   905be:	d11e      	bne.n	905fe <cl_testharnesscommandhandler+0x1976>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   905c0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   905c4:	4b22      	ldr	r3, [pc, #136]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   905c6:	4610      	mov	r0, r2
   905c8:	4798      	blx	r3
   905ca:	4602      	mov	r2, r0
   905cc:	4b21      	ldr	r3, [pc, #132]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   905ce:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   905d0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   905d4:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   905d6:	2208      	movs	r2, #8
   905d8:	4928      	ldr	r1, [pc, #160]	; (9067c <cl_testharnesscommandhandler+0x19f4>)
   905da:	2018      	movs	r0, #24
   905dc:	4b1f      	ldr	r3, [pc, #124]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   905de:	4798      	blx	r3
   905e0:	4603      	mov	r3, r0
   905e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   905e6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   905ea:	2202      	movs	r2, #2
   905ec:	4619      	mov	r1, r3
   905ee:	2019      	movs	r0, #25
   905f0:	4b1a      	ldr	r3, [pc, #104]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   905f2:	4798      	blx	r3
   905f4:	4603      	mov	r3, r0
   905f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   905fa:	f000 bc8c 	b.w	90f16 <cl_testharnesscommandhandler+0x228e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
							}
							else if (cl_indata.bytearray[2]== 0)
   905fe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90602:	2b00      	cmp	r3, #0
   90604:	d13e      	bne.n	90684 <cl_testharnesscommandhandler+0x19fc>
							{
								int16_t temp=0,temp1=0;
   90606:	2300      	movs	r3, #0
   90608:	873b      	strh	r3, [r7, #56]	; 0x38
   9060a:	2300      	movs	r3, #0
   9060c:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   90610:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90614:	4b0e      	ldr	r3, [pc, #56]	; (90650 <cl_testharnesscommandhandler+0x19c8>)
   90616:	4610      	mov	r0, r2
   90618:	4798      	blx	r3
   9061a:	4602      	mov	r2, r0
   9061c:	4b0d      	ldr	r3, [pc, #52]	; (90654 <cl_testharnesscommandhandler+0x19cc>)
   9061e:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90620:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90624:	b21b      	sxth	r3, r3
   90626:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   90628:	2207      	movs	r2, #7
   9062a:	4915      	ldr	r1, [pc, #84]	; (90680 <cl_testharnesscommandhandler+0x19f8>)
   9062c:	2018      	movs	r0, #24
   9062e:	4b0b      	ldr	r3, [pc, #44]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90630:	4798      	blx	r3
   90632:	4603      	mov	r3, r0
   90634:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90638:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9063c:	2202      	movs	r2, #2
   9063e:	4619      	mov	r1, r3
   90640:	2019      	movs	r0, #25
   90642:	4b06      	ldr	r3, [pc, #24]	; (9065c <cl_testharnesscommandhandler+0x19d4>)
   90644:	4798      	blx	r3
   90646:	4603      	mov	r3, r0
   90648:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9064c:	f000 bc63 	b.w	90f16 <cl_testharnesscommandhandler+0x228e>
   90650:	000a25dd 	.word	0x000a25dd
   90654:	20072c9c 	.word	0x20072c9c
   90658:	000a48d8 	.word	0x000a48d8
   9065c:	00098601 	.word	0x00098601
   90660:	000a48e4 	.word	0x000a48e4
   90664:	200730a0 	.word	0x200730a0
   90668:	000a48f0 	.word	0x000a48f0
   9066c:	000a48f8 	.word	0x000a48f8
   90670:	000a4904 	.word	0x000a4904
   90674:	000a4910 	.word	0x000a4910
   90678:	000a4918 	.word	0x000a4918
   9067c:	000a4920 	.word	0x000a4920
   90680:	000a492c 	.word	0x000a492c
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   90684:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90688:	2b02      	cmp	r3, #2
   9068a:	d126      	bne.n	906da <cl_testharnesscommandhandler+0x1a52>
							{
								int16_t temp=0,temp1=0;
   9068c:	2300      	movs	r3, #0
   9068e:	86fb      	strh	r3, [r7, #54]	; 0x36
   90690:	2300      	movs	r3, #0
   90692:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   90696:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9069a:	b21a      	sxth	r2, r3
   9069c:	4bba      	ldr	r3, [pc, #744]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   9069e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   906a2:	4bb9      	ldr	r3, [pc, #740]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   906a4:	2201      	movs	r2, #1
   906a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   906aa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   906ae:	b21b      	sxth	r3, r3
   906b0:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   906b2:	2209      	movs	r2, #9
   906b4:	49b5      	ldr	r1, [pc, #724]	; (9098c <cl_testharnesscommandhandler+0x1d04>)
   906b6:	2018      	movs	r0, #24
   906b8:	4bb5      	ldr	r3, [pc, #724]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   906ba:	4798      	blx	r3
   906bc:	4603      	mov	r3, r0
   906be:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   906c2:	f107 0336 	add.w	r3, r7, #54	; 0x36
   906c6:	2202      	movs	r2, #2
   906c8:	4619      	mov	r1, r3
   906ca:	2019      	movs	r0, #25
   906cc:	4bb0      	ldr	r3, [pc, #704]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   906ce:	4798      	blx	r3
   906d0:	4603      	mov	r3, r0
   906d2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   906d6:	f000 bc1e 	b.w	90f16 <cl_testharnesscommandhandler+0x228e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   906da:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   906de:	2b03      	cmp	r3, #3
   906e0:	f040 8419 	bne.w	90f16 <cl_testharnesscommandhandler+0x228e>
							{
								int16_t temp=0,temp1=0;
   906e4:	2300      	movs	r3, #0
   906e6:	86bb      	strh	r3, [r7, #52]	; 0x34
   906e8:	2300      	movs	r3, #0
   906ea:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   906ee:	4ba6      	ldr	r3, [pc, #664]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   906f0:	2200      	movs	r2, #0
   906f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   906f6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   906fa:	b21b      	sxth	r3, r3
   906fc:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   906fe:	2205      	movs	r2, #5
   90700:	49a4      	ldr	r1, [pc, #656]	; (90994 <cl_testharnesscommandhandler+0x1d0c>)
   90702:	2018      	movs	r0, #24
   90704:	4ba2      	ldr	r3, [pc, #648]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90706:	4798      	blx	r3
   90708:	4603      	mov	r3, r0
   9070a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9070e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   90712:	2202      	movs	r2, #2
   90714:	4619      	mov	r1, r3
   90716:	2019      	movs	r0, #25
   90718:	4b9d      	ldr	r3, [pc, #628]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9071a:	4798      	blx	r3
   9071c:	4603      	mov	r3, r0
   9071e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90722:	e3f8      	b.n	90f16 <cl_testharnesscommandhandler+0x228e>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   90724:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90728:	2b01      	cmp	r3, #1
   9072a:	d11d      	bne.n	90768 <cl_testharnesscommandhandler+0x1ae0>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   9072c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90730:	4b99      	ldr	r3, [pc, #612]	; (90998 <cl_testharnesscommandhandler+0x1d10>)
   90732:	4610      	mov	r0, r2
   90734:	4798      	blx	r3
   90736:	4602      	mov	r2, r0
   90738:	4b98      	ldr	r3, [pc, #608]	; (9099c <cl_testharnesscommandhandler+0x1d14>)
   9073a:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9073c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90740:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   90742:	2208      	movs	r2, #8
   90744:	4996      	ldr	r1, [pc, #600]	; (909a0 <cl_testharnesscommandhandler+0x1d18>)
   90746:	2018      	movs	r0, #24
   90748:	4b91      	ldr	r3, [pc, #580]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9074a:	4798      	blx	r3
   9074c:	4603      	mov	r3, r0
   9074e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90752:	f107 0332 	add.w	r3, r7, #50	; 0x32
   90756:	2202      	movs	r2, #2
   90758:	4619      	mov	r1, r3
   9075a:	2019      	movs	r0, #25
   9075c:	4b8c      	ldr	r3, [pc, #560]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9075e:	4798      	blx	r3
   90760:	4603      	mov	r3, r0
   90762:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90766:	e3d8      	b.n	90f1a <cl_testharnesscommandhandler+0x2292>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								}
								else if (cl_indata.bytearray[2]== 0)
   90768:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9076c:	2b00      	cmp	r3, #0
   9076e:	d124      	bne.n	907ba <cl_testharnesscommandhandler+0x1b32>
								{
									int16_t temp=0,temp1=0;
   90770:	2300      	movs	r3, #0
   90772:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   90776:	2300      	movs	r3, #0
   90778:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   9077c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90780:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90784:	b29b      	uxth	r3, r3
   90786:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   9078a:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   9078e:	4b85      	ldr	r3, [pc, #532]	; (909a4 <cl_testharnesscommandhandler+0x1d1c>)
   90790:	4610      	mov	r0, r2
   90792:	4798      	blx	r3
   90794:	4602      	mov	r2, r0
   90796:	4b81      	ldr	r3, [pc, #516]	; (9099c <cl_testharnesscommandhandler+0x1d14>)
   90798:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   9079a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   9079e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   907a2:	b29b      	uxth	r3, r3
   907a4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   907a8:	220c      	movs	r2, #12
   907aa:	497f      	ldr	r1, [pc, #508]	; (909a8 <cl_testharnesscommandhandler+0x1d20>)
   907ac:	2018      	movs	r0, #24
   907ae:	4b78      	ldr	r3, [pc, #480]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   907b0:	4798      	blx	r3
   907b2:	4603      	mov	r3, r0
   907b4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   907b8:	e3af      	b.n	90f1a <cl_testharnesscommandhandler+0x2292>
									temp1=temp+1000;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   907ba:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   907be:	2b02      	cmp	r3, #2
   907c0:	d124      	bne.n	9080c <cl_testharnesscommandhandler+0x1b84>
								{
									int16_t temp=0,temp1=0;
   907c2:	2300      	movs	r3, #0
   907c4:	863b      	strh	r3, [r7, #48]	; 0x30
   907c6:	2300      	movs	r3, #0
   907c8:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   907cc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907d0:	b21a      	sxth	r2, r3
   907d2:	4b6d      	ldr	r3, [pc, #436]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   907d4:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   907d6:	4b6c      	ldr	r3, [pc, #432]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   907d8:	2201      	movs	r2, #1
   907da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   907de:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907e2:	b21b      	sxth	r3, r3
   907e4:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   907e6:	2209      	movs	r2, #9
   907e8:	4968      	ldr	r1, [pc, #416]	; (9098c <cl_testharnesscommandhandler+0x1d04>)
   907ea:	2018      	movs	r0, #24
   907ec:	4b68      	ldr	r3, [pc, #416]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   907ee:	4798      	blx	r3
   907f0:	4603      	mov	r3, r0
   907f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   907f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
   907fa:	2202      	movs	r2, #2
   907fc:	4619      	mov	r1, r3
   907fe:	2019      	movs	r0, #25
   90800:	4b63      	ldr	r3, [pc, #396]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90802:	4798      	blx	r3
   90804:	4603      	mov	r3, r0
   90806:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   9080a:	e386      	b.n	90f1a <cl_testharnesscommandhandler+0x2292>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   9080c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90810:	2b03      	cmp	r3, #3
   90812:	f040 8382 	bne.w	90f1a <cl_testharnesscommandhandler+0x2292>
								{
									int16_t temp=0,temp1=0;
   90816:	2300      	movs	r3, #0
   90818:	85fb      	strh	r3, [r7, #46]	; 0x2e
   9081a:	2300      	movs	r3, #0
   9081c:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   90820:	4b59      	ldr	r3, [pc, #356]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   90822:	2200      	movs	r2, #0
   90824:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   90828:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9082c:	b21b      	sxth	r3, r3
   9082e:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   90830:	2209      	movs	r2, #9
   90832:	495e      	ldr	r1, [pc, #376]	; (909ac <cl_testharnesscommandhandler+0x1d24>)
   90834:	2018      	movs	r0, #24
   90836:	4b56      	ldr	r3, [pc, #344]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90838:	4798      	blx	r3
   9083a:	4603      	mov	r3, r0
   9083c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90840:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   90844:	2202      	movs	r2, #2
   90846:	4619      	mov	r1, r3
   90848:	2019      	movs	r0, #25
   9084a:	4b51      	ldr	r3, [pc, #324]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9084c:	4798      	blx	r3
   9084e:	4603      	mov	r3, r0
   90850:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90854:	e361      	b.n	90f1a <cl_testharnesscommandhandler+0x2292>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   90856:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9085a:	2b01      	cmp	r3, #1
   9085c:	d11d      	bne.n	9089a <cl_testharnesscommandhandler+0x1c12>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   9085e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90862:	4b4d      	ldr	r3, [pc, #308]	; (90998 <cl_testharnesscommandhandler+0x1d10>)
   90864:	4610      	mov	r0, r2
   90866:	4798      	blx	r3
   90868:	4602      	mov	r2, r0
   9086a:	4b4c      	ldr	r3, [pc, #304]	; (9099c <cl_testharnesscommandhandler+0x1d14>)
   9086c:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9086e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90872:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   90874:	2208      	movs	r2, #8
   90876:	494e      	ldr	r1, [pc, #312]	; (909b0 <cl_testharnesscommandhandler+0x1d28>)
   90878:	2018      	movs	r0, #24
   9087a:	4b45      	ldr	r3, [pc, #276]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9087c:	4798      	blx	r3
   9087e:	4603      	mov	r3, r0
   90880:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   90888:	2202      	movs	r2, #2
   9088a:	4619      	mov	r1, r3
   9088c:	2019      	movs	r0, #25
   9088e:	4b40      	ldr	r3, [pc, #256]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90890:	4798      	blx	r3
   90892:	4603      	mov	r3, r0
   90894:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90898:	e341      	b.n	90f1e <cl_testharnesscommandhandler+0x2296>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   9089a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9089e:	2b00      	cmp	r3, #0
   908a0:	d124      	bne.n	908ec <cl_testharnesscommandhandler+0x1c64>
							{
								int16_t temp=0,temp1=0;
   908a2:	2300      	movs	r3, #0
   908a4:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   908a8:	2300      	movs	r3, #0
   908aa:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   908ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   908b2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   908b6:	b29b      	uxth	r3, r3
   908b8:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   908bc:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   908c0:	4b38      	ldr	r3, [pc, #224]	; (909a4 <cl_testharnesscommandhandler+0x1d1c>)
   908c2:	4610      	mov	r0, r2
   908c4:	4798      	blx	r3
   908c6:	4602      	mov	r2, r0
   908c8:	4b34      	ldr	r3, [pc, #208]	; (9099c <cl_testharnesscommandhandler+0x1d14>)
   908ca:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   908cc:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   908d0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   908d4:	b29b      	uxth	r3, r3
   908d6:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   908da:	220c      	movs	r2, #12
   908dc:	4935      	ldr	r1, [pc, #212]	; (909b4 <cl_testharnesscommandhandler+0x1d2c>)
   908de:	2018      	movs	r0, #24
   908e0:	4b2b      	ldr	r3, [pc, #172]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   908e2:	4798      	blx	r3
   908e4:	4603      	mov	r3, r0
   908e6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   908ea:	e318      	b.n	90f1e <cl_testharnesscommandhandler+0x2296>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   908ec:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   908f0:	2b02      	cmp	r3, #2
   908f2:	d124      	bne.n	9093e <cl_testharnesscommandhandler+0x1cb6>
							{
								int16_t temp=0,temp1=0;
   908f4:	2300      	movs	r3, #0
   908f6:	857b      	strh	r3, [r7, #42]	; 0x2a
   908f8:	2300      	movs	r3, #0
   908fa:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   908fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90902:	b21a      	sxth	r2, r3
   90904:	4b20      	ldr	r3, [pc, #128]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   90906:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   90908:	4b1f      	ldr	r3, [pc, #124]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   9090a:	2201      	movs	r2, #1
   9090c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90910:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90914:	b21b      	sxth	r3, r3
   90916:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90918:	2209      	movs	r2, #9
   9091a:	491c      	ldr	r1, [pc, #112]	; (9098c <cl_testharnesscommandhandler+0x1d04>)
   9091c:	2018      	movs	r0, #24
   9091e:	4b1c      	ldr	r3, [pc, #112]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90920:	4798      	blx	r3
   90922:	4603      	mov	r3, r0
   90924:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90928:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   9092c:	2202      	movs	r2, #2
   9092e:	4619      	mov	r1, r3
   90930:	2019      	movs	r0, #25
   90932:	4b17      	ldr	r3, [pc, #92]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   90934:	4798      	blx	r3
   90936:	4603      	mov	r3, r0
   90938:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9093c:	e2ef      	b.n	90f1e <cl_testharnesscommandhandler+0x2296>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9093e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90942:	2b03      	cmp	r3, #3
   90944:	f040 82eb 	bne.w	90f1e <cl_testharnesscommandhandler+0x2296>
							{
								int16_t temp=0,temp1=0;
   90948:	2300      	movs	r3, #0
   9094a:	853b      	strh	r3, [r7, #40]	; 0x28
   9094c:	2300      	movs	r3, #0
   9094e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   90952:	4b0d      	ldr	r3, [pc, #52]	; (90988 <cl_testharnesscommandhandler+0x1d00>)
   90954:	2200      	movs	r2, #0
   90956:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9095a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9095e:	b21b      	sxth	r3, r3
   90960:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   90962:	2209      	movs	r2, #9
   90964:	4914      	ldr	r1, [pc, #80]	; (909b8 <cl_testharnesscommandhandler+0x1d30>)
   90966:	2018      	movs	r0, #24
   90968:	4b09      	ldr	r3, [pc, #36]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9096a:	4798      	blx	r3
   9096c:	4603      	mov	r3, r0
   9096e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90972:	f107 0328 	add.w	r3, r7, #40	; 0x28
   90976:	2202      	movs	r2, #2
   90978:	4619      	mov	r1, r3
   9097a:	2019      	movs	r0, #25
   9097c:	4b04      	ldr	r3, [pc, #16]	; (90990 <cl_testharnesscommandhandler+0x1d08>)
   9097e:	4798      	blx	r3
   90980:	4603      	mov	r3, r0
   90982:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90986:	e2ca      	b.n	90f1e <cl_testharnesscommandhandler+0x2296>
   90988:	200730a0 	.word	0x200730a0
   9098c:	000a4910 	.word	0x000a4910
   90990:	00098601 	.word	0x00098601
   90994:	000a4938 	.word	0x000a4938
   90998:	000a25dd 	.word	0x000a25dd
   9099c:	20072c9c 	.word	0x20072c9c
   909a0:	000a4940 	.word	0x000a4940
   909a4:	000a25e5 	.word	0x000a25e5
   909a8:	000a494c 	.word	0x000a494c
   909ac:	000a495c 	.word	0x000a495c
   909b0:	000a4964 	.word	0x000a4964
   909b4:	000a4970 	.word	0x000a4970
   909b8:	000a4980 	.word	0x000a4980
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   909bc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   909c0:	2b01      	cmp	r3, #1
   909c2:	d11a      	bne.n	909fa <cl_testharnesscommandhandler+0x1d72>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   909c4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   909c8:	b21a      	sxth	r2, r3
   909ca:	4bbe      	ldr	r3, [pc, #760]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   909cc:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   909ce:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   909d2:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   909d4:	2208      	movs	r2, #8
   909d6:	49bc      	ldr	r1, [pc, #752]	; (90cc8 <cl_testharnesscommandhandler+0x2040>)
   909d8:	2018      	movs	r0, #24
   909da:	4bbc      	ldr	r3, [pc, #752]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   909dc:	4798      	blx	r3
   909de:	4603      	mov	r3, r0
   909e0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   909e4:	f107 0326 	add.w	r3, r7, #38	; 0x26
   909e8:	2202      	movs	r2, #2
   909ea:	4619      	mov	r1, r3
   909ec:	2019      	movs	r0, #25
   909ee:	4bb7      	ldr	r3, [pc, #732]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   909f0:	4798      	blx	r3
   909f2:	4603      	mov	r3, r0
   909f4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   909f8:	e293      	b.n	90f22 <cl_testharnesscommandhandler+0x229a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   909fa:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   909fe:	2b00      	cmp	r3, #0
   90a00:	d120      	bne.n	90a44 <cl_testharnesscommandhandler+0x1dbc>
							{
								
								int16_t temp=0,temp1=0;
   90a02:	2300      	movs	r3, #0
   90a04:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   90a08:	2300      	movs	r3, #0
   90a0a:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   90a0c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a10:	b21a      	sxth	r2, r3
   90a12:	4bac      	ldr	r3, [pc, #688]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   90a14:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   90a16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a1a:	b21b      	sxth	r3, r3
   90a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   90a1e:	2208      	movs	r2, #8
   90a20:	49ab      	ldr	r1, [pc, #684]	; (90cd0 <cl_testharnesscommandhandler+0x2048>)
   90a22:	2018      	movs	r0, #24
   90a24:	4ba9      	ldr	r3, [pc, #676]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90a26:	4798      	blx	r3
   90a28:	4603      	mov	r3, r0
   90a2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   90a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   90a32:	2202      	movs	r2, #2
   90a34:	4619      	mov	r1, r3
   90a36:	2019      	movs	r0, #25
   90a38:	4ba4      	ldr	r3, [pc, #656]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90a3a:	4798      	blx	r3
   90a3c:	4603      	mov	r3, r0
   90a3e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90a42:	e26e      	b.n	90f22 <cl_testharnesscommandhandler+0x229a>
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
								temp1=cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   90a44:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90a48:	2b02      	cmp	r3, #2
   90a4a:	d123      	bne.n	90a94 <cl_testharnesscommandhandler+0x1e0c>
							{
								int16_t temp=0,temp1=0;
   90a4c:	2300      	movs	r3, #0
   90a4e:	847b      	strh	r3, [r7, #34]	; 0x22
   90a50:	2300      	movs	r3, #0
   90a52:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   90a56:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a5a:	b21a      	sxth	r2, r3
   90a5c:	4b9d      	ldr	r3, [pc, #628]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90a5e:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   90a60:	4b9c      	ldr	r3, [pc, #624]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90a62:	2201      	movs	r2, #1
   90a64:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90a66:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a6a:	b21b      	sxth	r3, r3
   90a6c:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90a6e:	2209      	movs	r2, #9
   90a70:	4999      	ldr	r1, [pc, #612]	; (90cd8 <cl_testharnesscommandhandler+0x2050>)
   90a72:	2018      	movs	r0, #24
   90a74:	4b95      	ldr	r3, [pc, #596]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90a76:	4798      	blx	r3
   90a78:	4603      	mov	r3, r0
   90a7a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90a7e:	f107 0322 	add.w	r3, r7, #34	; 0x22
   90a82:	2202      	movs	r2, #2
   90a84:	4619      	mov	r1, r3
   90a86:	2019      	movs	r0, #25
   90a88:	4b90      	ldr	r3, [pc, #576]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90a8a:	4798      	blx	r3
   90a8c:	4603      	mov	r3, r0
   90a8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90a92:	e246      	b.n	90f22 <cl_testharnesscommandhandler+0x229a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90a94:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90a98:	2b03      	cmp	r3, #3
   90a9a:	f040 8242 	bne.w	90f22 <cl_testharnesscommandhandler+0x229a>
							{
								int16_t temp=0,temp1=0;
   90a9e:	f107 0320 	add.w	r3, r7, #32
   90aa2:	2200      	movs	r2, #0
   90aa4:	801a      	strh	r2, [r3, #0]
   90aa6:	2300      	movs	r3, #0
   90aa8:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   90aac:	4b89      	ldr	r3, [pc, #548]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90aae:	2200      	movs	r2, #0
   90ab0:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90ab2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ab6:	b21a      	sxth	r2, r3
   90ab8:	f107 0320 	add.w	r3, r7, #32
   90abc:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   90abe:	2207      	movs	r2, #7
   90ac0:	4986      	ldr	r1, [pc, #536]	; (90cdc <cl_testharnesscommandhandler+0x2054>)
   90ac2:	2018      	movs	r0, #24
   90ac4:	4b81      	ldr	r3, [pc, #516]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90ac6:	4798      	blx	r3
   90ac8:	4603      	mov	r3, r0
   90aca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90ace:	f107 0320 	add.w	r3, r7, #32
   90ad2:	2202      	movs	r2, #2
   90ad4:	4619      	mov	r1, r3
   90ad6:	2019      	movs	r0, #25
   90ad8:	4b7c      	ldr	r3, [pc, #496]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90ada:	4798      	blx	r3
   90adc:	4603      	mov	r3, r0
   90ade:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90ae2:	e21e      	b.n	90f22 <cl_testharnesscommandhandler+0x229a>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   90ae4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ae8:	2b01      	cmp	r3, #1
   90aea:	d11f      	bne.n	90b2c <cl_testharnesscommandhandler+0x1ea4>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   90aec:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90af0:	4b7b      	ldr	r3, [pc, #492]	; (90ce0 <cl_testharnesscommandhandler+0x2058>)
   90af2:	4610      	mov	r0, r2
   90af4:	4798      	blx	r3
   90af6:	4602      	mov	r2, r0
   90af8:	4b72      	ldr	r3, [pc, #456]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   90afa:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90afc:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90b00:	f107 031e 	add.w	r3, r7, #30
   90b04:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   90b06:	2208      	movs	r2, #8
   90b08:	4976      	ldr	r1, [pc, #472]	; (90ce4 <cl_testharnesscommandhandler+0x205c>)
   90b0a:	2018      	movs	r0, #24
   90b0c:	4b6f      	ldr	r3, [pc, #444]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90b0e:	4798      	blx	r3
   90b10:	4603      	mov	r3, r0
   90b12:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90b16:	f107 031e 	add.w	r3, r7, #30
   90b1a:	2202      	movs	r2, #2
   90b1c:	4619      	mov	r1, r3
   90b1e:	2019      	movs	r0, #25
   90b20:	4b6a      	ldr	r3, [pc, #424]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90b22:	4798      	blx	r3
   90b24:	4603      	mov	r3, r0
   90b26:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90b2a:	e1fc      	b.n	90f26 <cl_testharnesscommandhandler+0x229e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   90b2c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b30:	2b00      	cmp	r3, #0
   90b32:	d124      	bne.n	90b7e <cl_testharnesscommandhandler+0x1ef6>
							{
								int16_t temp=0,temp1=0;
   90b34:	2300      	movs	r3, #0
   90b36:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   90b3a:	2300      	movs	r3, #0
   90b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   90b40:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90b44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90b48:	b29b      	uxth	r3, r3
   90b4a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   90b4e:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   90b52:	4b65      	ldr	r3, [pc, #404]	; (90ce8 <cl_testharnesscommandhandler+0x2060>)
   90b54:	4610      	mov	r0, r2
   90b56:	4798      	blx	r3
   90b58:	4602      	mov	r2, r0
   90b5a:	4b5a      	ldr	r3, [pc, #360]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   90b5c:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   90b5e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   90b62:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90b66:	b29b      	uxth	r3, r3
   90b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   90b6c:	220c      	movs	r2, #12
   90b6e:	495f      	ldr	r1, [pc, #380]	; (90cec <cl_testharnesscommandhandler+0x2064>)
   90b70:	2018      	movs	r0, #24
   90b72:	4b56      	ldr	r3, [pc, #344]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90b74:	4798      	blx	r3
   90b76:	4603      	mov	r3, r0
   90b78:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90b7c:	e1d3      	b.n	90f26 <cl_testharnesscommandhandler+0x229e>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   90b7e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b82:	2b02      	cmp	r3, #2
   90b84:	d128      	bne.n	90bd8 <cl_testharnesscommandhandler+0x1f50>
							{
								int16_t temp=0,temp1=0;
   90b86:	f107 031c 	add.w	r3, r7, #28
   90b8a:	2200      	movs	r2, #0
   90b8c:	801a      	strh	r2, [r3, #0]
   90b8e:	2300      	movs	r3, #0
   90b90:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   90b94:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90b98:	b21a      	sxth	r2, r3
   90b9a:	4b4e      	ldr	r3, [pc, #312]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90b9c:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   90b9e:	4b4d      	ldr	r3, [pc, #308]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90ba0:	2201      	movs	r2, #1
   90ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90ba6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90baa:	b21a      	sxth	r2, r3
   90bac:	f107 031c 	add.w	r3, r7, #28
   90bb0:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90bb2:	2209      	movs	r2, #9
   90bb4:	4948      	ldr	r1, [pc, #288]	; (90cd8 <cl_testharnesscommandhandler+0x2050>)
   90bb6:	2018      	movs	r0, #24
   90bb8:	4b44      	ldr	r3, [pc, #272]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90bba:	4798      	blx	r3
   90bbc:	4603      	mov	r3, r0
   90bbe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90bc2:	f107 031c 	add.w	r3, r7, #28
   90bc6:	2202      	movs	r2, #2
   90bc8:	4619      	mov	r1, r3
   90bca:	2019      	movs	r0, #25
   90bcc:	4b3f      	ldr	r3, [pc, #252]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90bce:	4798      	blx	r3
   90bd0:	4603      	mov	r3, r0
   90bd2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90bd6:	e1a6      	b.n	90f26 <cl_testharnesscommandhandler+0x229e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90bd8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90bdc:	2b03      	cmp	r3, #3
   90bde:	f040 81a2 	bne.w	90f26 <cl_testharnesscommandhandler+0x229e>
							{
								int16_t temp=0,temp1=0;
   90be2:	f107 031a 	add.w	r3, r7, #26
   90be6:	2200      	movs	r2, #0
   90be8:	801a      	strh	r2, [r3, #0]
   90bea:	2300      	movs	r3, #0
   90bec:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   90bf0:	4b38      	ldr	r3, [pc, #224]	; (90cd4 <cl_testharnesscommandhandler+0x204c>)
   90bf2:	2200      	movs	r2, #0
   90bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90bf8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90bfc:	b21a      	sxth	r2, r3
   90bfe:	f107 031a 	add.w	r3, r7, #26
   90c02:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   90c04:	2209      	movs	r2, #9
   90c06:	493a      	ldr	r1, [pc, #232]	; (90cf0 <cl_testharnesscommandhandler+0x2068>)
   90c08:	2018      	movs	r0, #24
   90c0a:	4b30      	ldr	r3, [pc, #192]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90c0c:	4798      	blx	r3
   90c0e:	4603      	mov	r3, r0
   90c10:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90c14:	f107 031a 	add.w	r3, r7, #26
   90c18:	2202      	movs	r2, #2
   90c1a:	4619      	mov	r1, r3
   90c1c:	2019      	movs	r0, #25
   90c1e:	4b2b      	ldr	r3, [pc, #172]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90c20:	4798      	blx	r3
   90c22:	4603      	mov	r3, r0
   90c24:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c28:	e17d      	b.n	90f26 <cl_testharnesscommandhandler+0x229e>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   90c2a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90c2e:	2b01      	cmp	r3, #1
   90c30:	d11f      	bne.n	90c72 <cl_testharnesscommandhandler+0x1fea>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   90c32:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90c36:	4b2a      	ldr	r3, [pc, #168]	; (90ce0 <cl_testharnesscommandhandler+0x2058>)
   90c38:	4610      	mov	r0, r2
   90c3a:	4798      	blx	r3
   90c3c:	4602      	mov	r2, r0
   90c3e:	4b21      	ldr	r3, [pc, #132]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   90c40:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90c42:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90c46:	f107 0318 	add.w	r3, r7, #24
   90c4a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   90c4c:	2203      	movs	r2, #3
   90c4e:	4929      	ldr	r1, [pc, #164]	; (90cf4 <cl_testharnesscommandhandler+0x206c>)
   90c50:	2018      	movs	r0, #24
   90c52:	4b1e      	ldr	r3, [pc, #120]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90c54:	4798      	blx	r3
   90c56:	4603      	mov	r3, r0
   90c58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90c5c:	f107 0318 	add.w	r3, r7, #24
   90c60:	2202      	movs	r2, #2
   90c62:	4619      	mov	r1, r3
   90c64:	2019      	movs	r0, #25
   90c66:	4b19      	ldr	r3, [pc, #100]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90c68:	4798      	blx	r3
   90c6a:	4603      	mov	r3, r0
   90c6c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c70:	e15b      	b.n	90f2a <cl_testharnesscommandhandler+0x22a2>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   90c72:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90c76:	2b00      	cmp	r3, #0
   90c78:	d140      	bne.n	90cfc <cl_testharnesscommandhandler+0x2074>
							{
								int16_t temp=0,temp1=0;
   90c7a:	2300      	movs	r3, #0
   90c7c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   90c80:	2300      	movs	r3, #0
   90c82:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   90c86:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c8a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90c8e:	b29b      	uxth	r3, r3
   90c90:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   90c94:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   90c98:	4b13      	ldr	r3, [pc, #76]	; (90ce8 <cl_testharnesscommandhandler+0x2060>)
   90c9a:	4610      	mov	r0, r2
   90c9c:	4798      	blx	r3
   90c9e:	4602      	mov	r2, r0
   90ca0:	4b08      	ldr	r3, [pc, #32]	; (90cc4 <cl_testharnesscommandhandler+0x203c>)
   90ca2:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   90ca4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   90ca8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90cac:	b29b      	uxth	r3, r3
   90cae:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   90cb2:	220c      	movs	r2, #12
   90cb4:	4910      	ldr	r1, [pc, #64]	; (90cf8 <cl_testharnesscommandhandler+0x2070>)
   90cb6:	2018      	movs	r0, #24
   90cb8:	4b04      	ldr	r3, [pc, #16]	; (90ccc <cl_testharnesscommandhandler+0x2044>)
   90cba:	4798      	blx	r3
   90cbc:	4603      	mov	r3, r0
   90cbe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90cc2:	e132      	b.n	90f2a <cl_testharnesscommandhandler+0x22a2>
   90cc4:	20072c9c 	.word	0x20072c9c
   90cc8:	000a4988 	.word	0x000a4988
   90ccc:	00098601 	.word	0x00098601
   90cd0:	000a4994 	.word	0x000a4994
   90cd4:	200730a0 	.word	0x200730a0
   90cd8:	000a4910 	.word	0x000a4910
   90cdc:	000a49a0 	.word	0x000a49a0
   90ce0:	000a25dd 	.word	0x000a25dd
   90ce4:	000a49a8 	.word	0x000a49a8
   90ce8:	000a25e5 	.word	0x000a25e5
   90cec:	000a49b4 	.word	0x000a49b4
   90cf0:	000a4980 	.word	0x000a4980
   90cf4:	000a49c4 	.word	0x000a49c4
   90cf8:	000a49c8 	.word	0x000a49c8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   90cfc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90d00:	2b02      	cmp	r3, #2
   90d02:	d128      	bne.n	90d56 <cl_testharnesscommandhandler+0x20ce>
							{
								int16_t temp=0,temp1=0;
   90d04:	f107 0316 	add.w	r3, r7, #22
   90d08:	2200      	movs	r2, #0
   90d0a:	801a      	strh	r2, [r3, #0]
   90d0c:	2300      	movs	r3, #0
   90d0e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   90d12:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90d16:	b21a      	sxth	r2, r3
   90d18:	4ba6      	ldr	r3, [pc, #664]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90d1a:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   90d1c:	4ba5      	ldr	r3, [pc, #660]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90d1e:	2201      	movs	r2, #1
   90d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90d24:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90d28:	b21a      	sxth	r2, r3
   90d2a:	f107 0316 	add.w	r3, r7, #22
   90d2e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90d30:	2209      	movs	r2, #9
   90d32:	49a1      	ldr	r1, [pc, #644]	; (90fb8 <cl_testharnesscommandhandler+0x2330>)
   90d34:	2018      	movs	r0, #24
   90d36:	4ba1      	ldr	r3, [pc, #644]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90d38:	4798      	blx	r3
   90d3a:	4603      	mov	r3, r0
   90d3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90d40:	f107 0316 	add.w	r3, r7, #22
   90d44:	2202      	movs	r2, #2
   90d46:	4619      	mov	r1, r3
   90d48:	2019      	movs	r0, #25
   90d4a:	4b9c      	ldr	r3, [pc, #624]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90d4c:	4798      	blx	r3
   90d4e:	4603      	mov	r3, r0
   90d50:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90d54:	e0e9      	b.n	90f2a <cl_testharnesscommandhandler+0x22a2>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90d56:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90d5a:	2b03      	cmp	r3, #3
   90d5c:	f040 80e5 	bne.w	90f2a <cl_testharnesscommandhandler+0x22a2>
							{
								int16_t temp=0,temp1=0;
   90d60:	f107 0314 	add.w	r3, r7, #20
   90d64:	2200      	movs	r2, #0
   90d66:	801a      	strh	r2, [r3, #0]
   90d68:	2300      	movs	r3, #0
   90d6a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   90d6e:	4b91      	ldr	r3, [pc, #580]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90d70:	2200      	movs	r2, #0
   90d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90d76:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90d7a:	b21a      	sxth	r2, r3
   90d7c:	f107 0314 	add.w	r3, r7, #20
   90d80:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   90d82:	2209      	movs	r2, #9
   90d84:	498e      	ldr	r1, [pc, #568]	; (90fc0 <cl_testharnesscommandhandler+0x2338>)
   90d86:	2018      	movs	r0, #24
   90d88:	4b8c      	ldr	r3, [pc, #560]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90d8a:	4798      	blx	r3
   90d8c:	4603      	mov	r3, r0
   90d8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90d92:	f107 0314 	add.w	r3, r7, #20
   90d96:	2202      	movs	r2, #2
   90d98:	4619      	mov	r1, r3
   90d9a:	2019      	movs	r0, #25
   90d9c:	4b87      	ldr	r3, [pc, #540]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90d9e:	4798      	blx	r3
   90da0:	4603      	mov	r3, r0
   90da2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90da6:	e0c0      	b.n	90f2a <cl_testharnesscommandhandler+0x22a2>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   90da8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90dac:	2b01      	cmp	r3, #1
   90dae:	d11f      	bne.n	90df0 <cl_testharnesscommandhandler+0x2168>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   90db0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90db4:	4b83      	ldr	r3, [pc, #524]	; (90fc4 <cl_testharnesscommandhandler+0x233c>)
   90db6:	4610      	mov	r0, r2
   90db8:	4798      	blx	r3
   90dba:	4602      	mov	r2, r0
   90dbc:	4b82      	ldr	r3, [pc, #520]	; (90fc8 <cl_testharnesscommandhandler+0x2340>)
   90dbe:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90dc0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90dc4:	f107 0312 	add.w	r3, r7, #18
   90dc8:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   90dca:	2203      	movs	r2, #3
   90dcc:	497f      	ldr	r1, [pc, #508]	; (90fcc <cl_testharnesscommandhandler+0x2344>)
   90dce:	2018      	movs	r0, #24
   90dd0:	4b7a      	ldr	r3, [pc, #488]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90dd2:	4798      	blx	r3
   90dd4:	4603      	mov	r3, r0
   90dd6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90dda:	f107 0312 	add.w	r3, r7, #18
   90dde:	2202      	movs	r2, #2
   90de0:	4619      	mov	r1, r3
   90de2:	2019      	movs	r0, #25
   90de4:	4b75      	ldr	r3, [pc, #468]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90de6:	4798      	blx	r3
   90de8:	4603      	mov	r3, r0
   90dea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90dee:	e09e      	b.n	90f2e <cl_testharnesscommandhandler+0x22a6>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   90df0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90df4:	2b00      	cmp	r3, #0
   90df6:	d124      	bne.n	90e42 <cl_testharnesscommandhandler+0x21ba>
							{
								int16_t temp=0,temp1=0;
   90df8:	2300      	movs	r3, #0
   90dfa:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   90dfe:	2300      	movs	r3, #0
   90e00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   90e04:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90e0c:	b29b      	uxth	r3, r3
   90e0e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   90e12:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   90e16:	4b6e      	ldr	r3, [pc, #440]	; (90fd0 <cl_testharnesscommandhandler+0x2348>)
   90e18:	4610      	mov	r0, r2
   90e1a:	4798      	blx	r3
   90e1c:	4602      	mov	r2, r0
   90e1e:	4b6a      	ldr	r3, [pc, #424]	; (90fc8 <cl_testharnesscommandhandler+0x2340>)
   90e20:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   90e22:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   90e26:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90e2a:	b29b      	uxth	r3, r3
   90e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   90e30:	220c      	movs	r2, #12
   90e32:	4968      	ldr	r1, [pc, #416]	; (90fd4 <cl_testharnesscommandhandler+0x234c>)
   90e34:	2018      	movs	r0, #24
   90e36:	4b61      	ldr	r3, [pc, #388]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90e38:	4798      	blx	r3
   90e3a:	4603      	mov	r3, r0
   90e3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90e40:	e075      	b.n	90f2e <cl_testharnesscommandhandler+0x22a6>
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   90e42:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90e46:	2b02      	cmp	r3, #2
   90e48:	d129      	bne.n	90e9e <cl_testharnesscommandhandler+0x2216>
							{
								int16_t temp=0,temp1=0;
   90e4a:	f107 0310 	add.w	r3, r7, #16
   90e4e:	2200      	movs	r2, #0
   90e50:	801a      	strh	r2, [r3, #0]
   90e52:	2300      	movs	r3, #0
   90e54:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   90e58:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e5c:	b21a      	sxth	r2, r3
   90e5e:	4b55      	ldr	r3, [pc, #340]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   90e64:	4b53      	ldr	r3, [pc, #332]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90e66:	2201      	movs	r2, #1
   90e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90e6c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90e70:	b21a      	sxth	r2, r3
   90e72:	f107 0310 	add.w	r3, r7, #16
   90e76:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90e78:	2209      	movs	r2, #9
   90e7a:	494f      	ldr	r1, [pc, #316]	; (90fb8 <cl_testharnesscommandhandler+0x2330>)
   90e7c:	2018      	movs	r0, #24
   90e7e:	4b4f      	ldr	r3, [pc, #316]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90e80:	4798      	blx	r3
   90e82:	4603      	mov	r3, r0
   90e84:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90e88:	f107 0310 	add.w	r3, r7, #16
   90e8c:	2202      	movs	r2, #2
   90e8e:	4619      	mov	r1, r3
   90e90:	2019      	movs	r0, #25
   90e92:	4b4a      	ldr	r3, [pc, #296]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90e94:	4798      	blx	r3
   90e96:	4603      	mov	r3, r0
   90e98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90e9c:	e047      	b.n	90f2e <cl_testharnesscommandhandler+0x22a6>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90e9e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ea2:	2b03      	cmp	r3, #3
   90ea4:	d143      	bne.n	90f2e <cl_testharnesscommandhandler+0x22a6>
							{
								int16_t temp=0,temp1=0;
   90ea6:	f107 030e 	add.w	r3, r7, #14
   90eaa:	2200      	movs	r2, #0
   90eac:	801a      	strh	r2, [r3, #0]
   90eae:	2300      	movs	r3, #0
   90eb0:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   90eb4:	4b3f      	ldr	r3, [pc, #252]	; (90fb4 <cl_testharnesscommandhandler+0x232c>)
   90eb6:	2200      	movs	r2, #0
   90eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90ebc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ec0:	b21a      	sxth	r2, r3
   90ec2:	f107 030e 	add.w	r3, r7, #14
   90ec6:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   90ec8:	2209      	movs	r2, #9
   90eca:	4943      	ldr	r1, [pc, #268]	; (90fd8 <cl_testharnesscommandhandler+0x2350>)
   90ecc:	2018      	movs	r0, #24
   90ece:	4b3b      	ldr	r3, [pc, #236]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90ed0:	4798      	blx	r3
   90ed2:	4603      	mov	r3, r0
   90ed4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90ed8:	f107 030e 	add.w	r3, r7, #14
   90edc:	2202      	movs	r2, #2
   90ede:	4619      	mov	r1, r3
   90ee0:	2019      	movs	r0, #25
   90ee2:	4b36      	ldr	r3, [pc, #216]	; (90fbc <cl_testharnesscommandhandler+0x2334>)
   90ee4:	4798      	blx	r3
   90ee6:	4603      	mov	r3, r0
   90ee8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90eec:	e01f      	b.n	90f2e <cl_testharnesscommandhandler+0x22a6>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   90eee:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ef2:	2b01      	cmp	r3, #1
   90ef4:	d105      	bne.n	90f02 <cl_testharnesscommandhandler+0x227a>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   90ef6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90efa:	b21a      	sxth	r2, r3
   90efc:	4b32      	ldr	r3, [pc, #200]	; (90fc8 <cl_testharnesscommandhandler+0x2340>)
   90efe:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f00:	e016      	b.n	90f30 <cl_testharnesscommandhandler+0x22a8>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   90f02:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90f06:	b21a      	sxth	r2, r3
   90f08:	4b2f      	ldr	r3, [pc, #188]	; (90fc8 <cl_testharnesscommandhandler+0x2340>)
   90f0a:	801a      	strh	r2, [r3, #0]
							}
							break;
   90f0c:	e010      	b.n	90f30 <cl_testharnesscommandhandler+0x22a8>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f0e:	bf00      	nop
   90f10:	e337      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f12:	bf00      	nop
   90f14:	e335      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f16:	bf00      	nop
   90f18:	e333      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90f1a:	bf00      	nop
   90f1c:	e331      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f1e:	bf00      	nop
   90f20:	e32f      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f22:	bf00      	nop
   90f24:	e32d      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f26:	bf00      	nop
   90f28:	e32b      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f2a:	bf00      	nop
   90f2c:	e329      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90f2e:	bf00      	nop
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
						}
		break;
   90f30:	e327      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   90f32:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f36:	3b05      	subs	r3, #5
   90f38:	2b11      	cmp	r3, #17
   90f3a:	f200 8315 	bhi.w	91568 <cl_testharnesscommandhandler+0x28e0>
   90f3e:	a201      	add	r2, pc, #4	; (adr r2, 90f44 <cl_testharnesscommandhandler+0x22bc>)
   90f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   90f44:	00090fe9 	.word	0x00090fe9
   90f48:	00091083 	.word	0x00091083
   90f4c:	0009111d 	.word	0x0009111d
   90f50:	00091569 	.word	0x00091569
   90f54:	00091569 	.word	0x00091569
   90f58:	00091569 	.word	0x00091569
   90f5c:	00091569 	.word	0x00091569
   90f60:	0009138f 	.word	0x0009138f
   90f64:	0009142d 	.word	0x0009142d
   90f68:	000914cb 	.word	0x000914cb
   90f6c:	00091569 	.word	0x00091569
   90f70:	00091569 	.word	0x00091569
   90f74:	00091195 	.word	0x00091195
   90f78:	000911f5 	.word	0x000911f5
   90f7c:	00091569 	.word	0x00091569
   90f80:	000912bd 	.word	0x000912bd
   90f84:	00090f8d 	.word	0x00090f8d
   90f88:	00090fa1 	.word	0x00090fa1
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   90f8c:	4b13      	ldr	r3, [pc, #76]	; (90fdc <cl_testharnesscommandhandler+0x2354>)
   90f8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   90f92:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90f96:	4619      	mov	r1, r3
   90f98:	2017      	movs	r0, #23
   90f9a:	4b11      	ldr	r3, [pc, #68]	; (90fe0 <cl_testharnesscommandhandler+0x2358>)
   90f9c:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   90f9e:	e2e8      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   90fa0:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90fa4:	4619      	mov	r1, r3
   90fa6:	2018      	movs	r0, #24
   90fa8:	4b0d      	ldr	r3, [pc, #52]	; (90fe0 <cl_testharnesscommandhandler+0x2358>)
   90faa:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   90fac:	4b0d      	ldr	r3, [pc, #52]	; (90fe4 <cl_testharnesscommandhandler+0x235c>)
   90fae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   90fb2:	e2de      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
   90fb4:	200730a0 	.word	0x200730a0
   90fb8:	000a4910 	.word	0x000a4910
   90fbc:	00098601 	.word	0x00098601
   90fc0:	000a4980 	.word	0x000a4980
   90fc4:	000a25dd 	.word	0x000a25dd
   90fc8:	20072c9c 	.word	0x20072c9c
   90fcc:	000a49d8 	.word	0x000a49d8
   90fd0:	000a25e5 	.word	0x000a25e5
   90fd4:	000a49dc 	.word	0x000a49dc
   90fd8:	000a49ec 	.word	0x000a49ec
   90fdc:	000a49f4 	.word	0x000a49f4
   90fe0:	000915e1 	.word	0x000915e1
   90fe4:	000a4a00 	.word	0x000a4a00
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   90fe8:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90fec:	4619      	mov	r1, r3
   90fee:	200e      	movs	r0, #14
   90ff0:	4ba7      	ldr	r3, [pc, #668]	; (91290 <cl_testharnesscommandhandler+0x2608>)
   90ff2:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   90ff4:	4ba7      	ldr	r3, [pc, #668]	; (91294 <cl_testharnesscommandhandler+0x260c>)
   90ff6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90ffa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90ffe:	461a      	mov	r2, r3
   91000:	f640 43e4 	movw	r3, #3300	; 0xce4
   91004:	fb03 f302 	mul.w	r3, r3, r2
   91008:	2b00      	cmp	r3, #0
   9100a:	da01      	bge.n	91010 <cl_testharnesscommandhandler+0x2388>
   9100c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   91010:	131b      	asrs	r3, r3, #12
   91012:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   91016:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9101a:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   9101e:	4b9e      	ldr	r3, [pc, #632]	; (91298 <cl_testharnesscommandhandler+0x2610>)
   91020:	4610      	mov	r0, r2
   91022:	4798      	blx	r3
   91024:	4c9d      	ldr	r4, [pc, #628]	; (9129c <cl_testharnesscommandhandler+0x2614>)
   91026:	a396      	add	r3, pc, #600	; (adr r3, 91280 <cl_testharnesscommandhandler+0x25f8>)
   91028:	e9d3 2300 	ldrd	r2, r3, [r3]
   9102c:	47a0      	blx	r4
   9102e:	4603      	mov	r3, r0
   91030:	460c      	mov	r4, r1
   91032:	4619      	mov	r1, r3
   91034:	4622      	mov	r2, r4
   91036:	4b9a      	ldr	r3, [pc, #616]	; (912a0 <cl_testharnesscommandhandler+0x2618>)
   91038:	4608      	mov	r0, r1
   9103a:	4611      	mov	r1, r2
   9103c:	4798      	blx	r3
   9103e:	4603      	mov	r3, r0
   91040:	b21b      	sxth	r3, r3
   91042:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   91046:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9104a:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   9104e:	da08      	bge.n	91062 <cl_testharnesscommandhandler+0x23da>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   91050:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   91054:	b29b      	uxth	r3, r3
   91056:	3b32      	subs	r3, #50	; 0x32
   91058:	b29b      	uxth	r3, r3
   9105a:	b21b      	sxth	r3, r3
   9105c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   91060:	e284      	b.n	9156c <cl_testharnesscommandhandler+0x28e4>
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
				if (  sensordatamillivolts < 1360 )
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
				}
				else if(  sensordatamillivolts < 1650 )
   91062:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   91066:	f240 6271 	movw	r2, #1649	; 0x671
   9106a:	4293      	cmp	r3, r2
   9106c:	f300 827e 	bgt.w	9156c <cl_testharnesscommandhandler+0x28e4>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   91070:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   91074:	b29b      	uxth	r3, r3
   91076:	3b19      	subs	r3, #25
   91078:	b29b      	uxth	r3, r3
   9107a:	b21b      	sxth	r3, r3
   9107c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   91080:	e274      	b.n	9156c <cl_testharnesscommandhandler+0x28e4>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   91082:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91086:	4619      	mov	r1, r3
   91088:	200f      	movs	r0, #15
   9108a:	4b81      	ldr	r3, [pc, #516]	; (91290 <cl_testharnesscommandhandler+0x2608>)
   9108c:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   9108e:	4b85      	ldr	r3, [pc, #532]	; (912a4 <cl_testharnesscommandhandler+0x261c>)
   91090:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   91094:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   91098:	461a      	mov	r2, r3
   9109a:	f640 43e4 	movw	r3, #3300	; 0xce4
   9109e:	fb03 f302 	mul.w	r3, r3, r2
   910a2:	2b00      	cmp	r3, #0
   910a4:	da01      	bge.n	910aa <cl_testharnesscommandhandler+0x2422>
   910a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   910aa:	131b      	asrs	r3, r3, #12
   910ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   910b0:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   910b4:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   910b8:	4b77      	ldr	r3, [pc, #476]	; (91298 <cl_testharnesscommandhandler+0x2610>)
   910ba:	4610      	mov	r0, r2
   910bc:	4798      	blx	r3
   910be:	4c77      	ldr	r4, [pc, #476]	; (9129c <cl_testharnesscommandhandler+0x2614>)
   910c0:	a36f      	add	r3, pc, #444	; (adr r3, 91280 <cl_testharnesscommandhandler+0x25f8>)
   910c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   910c6:	47a0      	blx	r4
   910c8:	4603      	mov	r3, r0
   910ca:	460c      	mov	r4, r1
   910cc:	4619      	mov	r1, r3
   910ce:	4622      	mov	r2, r4
   910d0:	4b73      	ldr	r3, [pc, #460]	; (912a0 <cl_testharnesscommandhandler+0x2618>)
   910d2:	4608      	mov	r0, r1
   910d4:	4611      	mov	r1, r2
   910d6:	4798      	blx	r3
   910d8:	4603      	mov	r3, r0
   910da:	b21b      	sxth	r3, r3
   910dc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   910e0:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   910e4:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   910e8:	da08      	bge.n	910fc <cl_testharnesscommandhandler+0x2474>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   910ea:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   910ee:	b29b      	uxth	r3, r3
   910f0:	3b32      	subs	r3, #50	; 0x32
   910f2:	b29b      	uxth	r3, r3
   910f4:	b21b      	sxth	r3, r3
   910f6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   910fa:	e239      	b.n	91570 <cl_testharnesscommandhandler+0x28e8>
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
			if (  sensordatamillivolts < 1360 )
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
			}
			else if(  sensordatamillivolts < 1650 )
   910fc:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   91100:	f240 6271 	movw	r2, #1649	; 0x671
   91104:	4293      	cmp	r3, r2
   91106:	f300 8233 	bgt.w	91570 <cl_testharnesscommandhandler+0x28e8>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   9110a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9110e:	b29b      	uxth	r3, r3
   91110:	3b19      	subs	r3, #25
   91112:	b29b      	uxth	r3, r3
   91114:	b21b      	sxth	r3, r3
   91116:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9111a:	e229      	b.n	91570 <cl_testharnesscommandhandler+0x28e8>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   9111c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91120:	4619      	mov	r1, r3
   91122:	2027      	movs	r0, #39	; 0x27
   91124:	4b5a      	ldr	r3, [pc, #360]	; (91290 <cl_testharnesscommandhandler+0x2608>)
   91126:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   91128:	4b5f      	ldr	r3, [pc, #380]	; (912a8 <cl_testharnesscommandhandler+0x2620>)
   9112a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9112e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   91132:	461a      	mov	r2, r3
   91134:	f640 43e4 	movw	r3, #3300	; 0xce4
   91138:	fb03 f302 	mul.w	r3, r3, r2
   9113c:	2b00      	cmp	r3, #0
   9113e:	da01      	bge.n	91144 <cl_testharnesscommandhandler+0x24bc>
   91140:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   91144:	131b      	asrs	r3, r3, #12
   91146:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   9114a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9114e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   91152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   91156:	fb02 f303 	mul.w	r3, r2, r3
   9115a:	4a54      	ldr	r2, [pc, #336]	; (912ac <cl_testharnesscommandhandler+0x2624>)
   9115c:	fb82 1203 	smull	r1, r2, r2, r3
   91160:	1252      	asrs	r2, r2, #9
   91162:	17db      	asrs	r3, r3, #31
   91164:	1ad3      	subs	r3, r2, r3
   91166:	b21b      	sxth	r3, r3
   91168:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9116c:	2204      	movs	r2, #4
   9116e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91172:	2018      	movs	r0, #24
   91174:	4b4e      	ldr	r3, [pc, #312]	; (912b0 <cl_testharnesscommandhandler+0x2628>)
   91176:	4798      	blx	r3
   91178:	4603      	mov	r3, r0
   9117a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   9117e:	f107 0390 	add.w	r3, r7, #144	; 0x90
   91182:	2202      	movs	r2, #2
   91184:	4619      	mov	r1, r3
   91186:	2019      	movs	r0, #25
   91188:	4b49      	ldr	r3, [pc, #292]	; (912b0 <cl_testharnesscommandhandler+0x2628>)
   9118a:	4798      	blx	r3
   9118c:	4603      	mov	r3, r0
   9118e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   91192:	e1ee      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   91194:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91198:	4619      	mov	r1, r3
   9119a:	2024      	movs	r0, #36	; 0x24
   9119c:	4b3c      	ldr	r3, [pc, #240]	; (91290 <cl_testharnesscommandhandler+0x2608>)
   9119e:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   911a0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   911a4:	461a      	mov	r2, r3
   911a6:	f640 43e4 	movw	r3, #3300	; 0xce4
   911aa:	fb03 f302 	mul.w	r3, r3, r2
   911ae:	2b00      	cmp	r3, #0
   911b0:	da01      	bge.n	911b6 <cl_testharnesscommandhandler+0x252e>
   911b2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   911b6:	131b      	asrs	r3, r3, #12
   911b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   911bc:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   911c0:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   911c4:	4b34      	ldr	r3, [pc, #208]	; (91298 <cl_testharnesscommandhandler+0x2610>)
   911c6:	4610      	mov	r0, r2
   911c8:	4798      	blx	r3
   911ca:	4c34      	ldr	r4, [pc, #208]	; (9129c <cl_testharnesscommandhandler+0x2614>)
   911cc:	a32e      	add	r3, pc, #184	; (adr r3, 91288 <cl_testharnesscommandhandler+0x2600>)
   911ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   911d2:	47a0      	blx	r4
   911d4:	4603      	mov	r3, r0
   911d6:	460c      	mov	r4, r1
   911d8:	4619      	mov	r1, r3
   911da:	4622      	mov	r2, r4
   911dc:	4b30      	ldr	r3, [pc, #192]	; (912a0 <cl_testharnesscommandhandler+0x2618>)
   911de:	4608      	mov	r0, r1
   911e0:	4611      	mov	r1, r2
   911e2:	4798      	blx	r3
   911e4:	4603      	mov	r3, r0
   911e6:	b21b      	sxth	r3, r3
   911e8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   911ec:	4b31      	ldr	r3, [pc, #196]	; (912b4 <cl_testharnesscommandhandler+0x262c>)
   911ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   911f2:	e1be      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   911f4:	f107 0392 	add.w	r3, r7, #146	; 0x92
   911f8:	4619      	mov	r1, r3
   911fa:	2026      	movs	r0, #38	; 0x26
   911fc:	4b24      	ldr	r3, [pc, #144]	; (91290 <cl_testharnesscommandhandler+0x2608>)
   911fe:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   91200:	4b2d      	ldr	r3, [pc, #180]	; (912b8 <cl_testharnesscommandhandler+0x2630>)
   91202:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   91206:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   9120a:	461a      	mov	r2, r3
   9120c:	f640 43e4 	movw	r3, #3300	; 0xce4
   91210:	fb03 f302 	mul.w	r3, r3, r2
   91214:	2b00      	cmp	r3, #0
   91216:	da01      	bge.n	9121c <cl_testharnesscommandhandler+0x2594>
   91218:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9121c:	131b      	asrs	r3, r3, #12
   9121e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   91222:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   91226:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   9122a:	4b1b      	ldr	r3, [pc, #108]	; (91298 <cl_testharnesscommandhandler+0x2610>)
   9122c:	4610      	mov	r0, r2
   9122e:	4798      	blx	r3
   91230:	4c1a      	ldr	r4, [pc, #104]	; (9129c <cl_testharnesscommandhandler+0x2614>)
   91232:	a315      	add	r3, pc, #84	; (adr r3, 91288 <cl_testharnesscommandhandler+0x2600>)
   91234:	e9d3 2300 	ldrd	r2, r3, [r3]
   91238:	47a0      	blx	r4
   9123a:	4603      	mov	r3, r0
   9123c:	460c      	mov	r4, r1
   9123e:	4619      	mov	r1, r3
   91240:	4622      	mov	r2, r4
   91242:	4b17      	ldr	r3, [pc, #92]	; (912a0 <cl_testharnesscommandhandler+0x2618>)
   91244:	4608      	mov	r0, r1
   91246:	4611      	mov	r1, r2
   91248:	4798      	blx	r3
   9124a:	4603      	mov	r3, r0
   9124c:	b21b      	sxth	r3, r3
   9124e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   91252:	4b19      	ldr	r3, [pc, #100]	; (912b8 <cl_testharnesscommandhandler+0x2630>)
   91254:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   91258:	2204      	movs	r2, #4
   9125a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9125e:	2018      	movs	r0, #24
   91260:	4b13      	ldr	r3, [pc, #76]	; (912b0 <cl_testharnesscommandhandler+0x2628>)
   91262:	4798      	blx	r3
   91264:	4603      	mov	r3, r0
   91266:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   9126a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   9126e:	2202      	movs	r2, #2
   91270:	4619      	mov	r1, r3
   91272:	2019      	movs	r0, #25
   91274:	4b0e      	ldr	r3, [pc, #56]	; (912b0 <cl_testharnesscommandhandler+0x2628>)
   91276:	4798      	blx	r3
   91278:	4603      	mov	r3, r0
   9127a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   9127e:	e178      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
   91280:	8f5c28f6 	.word	0x8f5c28f6
   91284:	3fe8f5c2 	.word	0x3fe8f5c2
   91288:	33333333 	.word	0x33333333
   9128c:	3fe33333 	.word	0x3fe33333
   91290:	000915e1 	.word	0x000915e1
   91294:	000a4a08 	.word	0x000a4a08
   91298:	000a1d41 	.word	0x000a1d41
   9129c:	000a2061 	.word	0x000a2061
   912a0:	000a2341 	.word	0x000a2341
   912a4:	000a4a10 	.word	0x000a4a10
   912a8:	000a4a18 	.word	0x000a4a18
   912ac:	77280773 	.word	0x77280773
   912b0:	00098601 	.word	0x00098601
   912b4:	000a4a20 	.word	0x000a4a20
   912b8:	000a4a28 	.word	0x000a4a28
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   912bc:	4bb8      	ldr	r3, [pc, #736]	; (915a0 <cl_testharnesscommandhandler+0x2918>)
   912be:	f9b3 3000 	ldrsh.w	r3, [r3]
   912c2:	b29a      	uxth	r2, r3
   912c4:	4bb7      	ldr	r3, [pc, #732]	; (915a4 <cl_testharnesscommandhandler+0x291c>)
   912c6:	f9b3 3000 	ldrsh.w	r3, [r3]
   912ca:	b29b      	uxth	r3, r3
   912cc:	1ad3      	subs	r3, r2, r3
   912ce:	b29b      	uxth	r3, r3
   912d0:	b21b      	sxth	r3, r3
   912d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   912d6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   912da:	b29b      	uxth	r3, r3
   912dc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   912e0:	b29b      	uxth	r3, r3
   912e2:	b21b      	sxth	r3, r3
   912e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   912e8:	4baf      	ldr	r3, [pc, #700]	; (915a8 <cl_testharnesscommandhandler+0x2920>)
   912ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   912ee:	2204      	movs	r2, #4
   912f0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   912f4:	2018      	movs	r0, #24
   912f6:	4bad      	ldr	r3, [pc, #692]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   912f8:	4798      	blx	r3
   912fa:	4603      	mov	r3, r0
   912fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   91300:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   91304:	2202      	movs	r2, #2
   91306:	4619      	mov	r1, r3
   91308:	2019      	movs	r0, #25
   9130a:	4ba8      	ldr	r3, [pc, #672]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   9130c:	4798      	blx	r3
   9130e:	4603      	mov	r3, r0
   91310:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   91314:	4ba2      	ldr	r3, [pc, #648]	; (915a0 <cl_testharnesscommandhandler+0x2918>)
   91316:	f9b3 3000 	ldrsh.w	r3, [r3]
   9131a:	461a      	mov	r2, r3
   9131c:	4ba4      	ldr	r3, [pc, #656]	; (915b0 <cl_testharnesscommandhandler+0x2928>)
   9131e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91322:	4413      	add	r3, r2
   91324:	0fda      	lsrs	r2, r3, #31
   91326:	4413      	add	r3, r2
   91328:	105b      	asrs	r3, r3, #1
   9132a:	b29a      	uxth	r2, r3
   9132c:	4b9d      	ldr	r3, [pc, #628]	; (915a4 <cl_testharnesscommandhandler+0x291c>)
   9132e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91332:	4619      	mov	r1, r3
   91334:	4b9f      	ldr	r3, [pc, #636]	; (915b4 <cl_testharnesscommandhandler+0x292c>)
   91336:	f9b3 3000 	ldrsh.w	r3, [r3]
   9133a:	440b      	add	r3, r1
   9133c:	0fd9      	lsrs	r1, r3, #31
   9133e:	440b      	add	r3, r1
   91340:	105b      	asrs	r3, r3, #1
   91342:	b29b      	uxth	r3, r3
   91344:	1ad3      	subs	r3, r2, r3
   91346:	b29b      	uxth	r3, r3
   91348:	b21b      	sxth	r3, r3
   9134a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   9134e:	4b9a      	ldr	r3, [pc, #616]	; (915b8 <cl_testharnesscommandhandler+0x2930>)
   91350:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   91354:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   91358:	b29b      	uxth	r3, r3
   9135a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   9135e:	b29b      	uxth	r3, r3
   91360:	b21b      	sxth	r3, r3
   91362:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   91366:	2204      	movs	r2, #4
   91368:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9136c:	2018      	movs	r0, #24
   9136e:	4b8f      	ldr	r3, [pc, #572]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   91370:	4798      	blx	r3
   91372:	4603      	mov	r3, r0
   91374:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   91378:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   9137c:	2202      	movs	r2, #2
   9137e:	4619      	mov	r1, r3
   91380:	2019      	movs	r0, #25
   91382:	4b8a      	ldr	r3, [pc, #552]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   91384:	4798      	blx	r3
   91386:	4603      	mov	r3, r0
   91388:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   9138c:	e0f1      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   9138e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91392:	4619      	mov	r1, r3
   91394:	2012      	movs	r0, #18
   91396:	4b89      	ldr	r3, [pc, #548]	; (915bc <cl_testharnesscommandhandler+0x2934>)
   91398:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   9139a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9139e:	4b88      	ldr	r3, [pc, #544]	; (915c0 <cl_testharnesscommandhandler+0x2938>)
   913a0:	4610      	mov	r0, r2
   913a2:	4798      	blx	r3
   913a4:	4c87      	ldr	r4, [pc, #540]	; (915c4 <cl_testharnesscommandhandler+0x293c>)
   913a6:	a37a      	add	r3, pc, #488	; (adr r3, 91590 <cl_testharnesscommandhandler+0x2908>)
   913a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   913ac:	47a0      	blx	r4
   913ae:	4603      	mov	r3, r0
   913b0:	460c      	mov	r4, r1
   913b2:	4618      	mov	r0, r3
   913b4:	4621      	mov	r1, r4
   913b6:	4c84      	ldr	r4, [pc, #528]	; (915c8 <cl_testharnesscommandhandler+0x2940>)
   913b8:	a377      	add	r3, pc, #476	; (adr r3, 91598 <cl_testharnesscommandhandler+0x2910>)
   913ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   913be:	47a0      	blx	r4
   913c0:	4603      	mov	r3, r0
   913c2:	460c      	mov	r4, r1
   913c4:	4619      	mov	r1, r3
   913c6:	4622      	mov	r2, r4
   913c8:	4b80      	ldr	r3, [pc, #512]	; (915cc <cl_testharnesscommandhandler+0x2944>)
   913ca:	4608      	mov	r0, r1
   913cc:	4611      	mov	r1, r2
   913ce:	4798      	blx	r3
   913d0:	4603      	mov	r3, r0
   913d2:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   913d6:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   913da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   913de:	fb02 f303 	mul.w	r3, r2, r3
   913e2:	4a7b      	ldr	r2, [pc, #492]	; (915d0 <cl_testharnesscommandhandler+0x2948>)
   913e4:	fb82 1203 	smull	r1, r2, r2, r3
   913e8:	11d2      	asrs	r2, r2, #7
   913ea:	17db      	asrs	r3, r3, #31
   913ec:	1ad3      	subs	r3, r2, r3
   913ee:	b29b      	uxth	r3, r3
   913f0:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   913f4:	b29b      	uxth	r3, r3
   913f6:	b21a      	sxth	r2, r3
   913f8:	f107 030c 	add.w	r3, r7, #12
   913fc:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   913fe:	4b75      	ldr	r3, [pc, #468]	; (915d4 <cl_testharnesscommandhandler+0x294c>)
   91400:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   91404:	2206      	movs	r2, #6
   91406:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9140a:	2018      	movs	r0, #24
   9140c:	4b67      	ldr	r3, [pc, #412]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   9140e:	4798      	blx	r3
   91410:	4603      	mov	r3, r0
   91412:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   91416:	f107 030c 	add.w	r3, r7, #12
   9141a:	2202      	movs	r2, #2
   9141c:	4619      	mov	r1, r3
   9141e:	2019      	movs	r0, #25
   91420:	4b62      	ldr	r3, [pc, #392]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   91422:	4798      	blx	r3
   91424:	4603      	mov	r3, r0
   91426:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   9142a:	e0a2      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   9142c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91430:	4619      	mov	r1, r3
   91432:	2013      	movs	r0, #19
   91434:	4b61      	ldr	r3, [pc, #388]	; (915bc <cl_testharnesscommandhandler+0x2934>)
   91436:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   91438:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9143c:	4b60      	ldr	r3, [pc, #384]	; (915c0 <cl_testharnesscommandhandler+0x2938>)
   9143e:	4610      	mov	r0, r2
   91440:	4798      	blx	r3
   91442:	4c60      	ldr	r4, [pc, #384]	; (915c4 <cl_testharnesscommandhandler+0x293c>)
   91444:	a352      	add	r3, pc, #328	; (adr r3, 91590 <cl_testharnesscommandhandler+0x2908>)
   91446:	e9d3 2300 	ldrd	r2, r3, [r3]
   9144a:	47a0      	blx	r4
   9144c:	4603      	mov	r3, r0
   9144e:	460c      	mov	r4, r1
   91450:	4618      	mov	r0, r3
   91452:	4621      	mov	r1, r4
   91454:	4c5c      	ldr	r4, [pc, #368]	; (915c8 <cl_testharnesscommandhandler+0x2940>)
   91456:	a350      	add	r3, pc, #320	; (adr r3, 91598 <cl_testharnesscommandhandler+0x2910>)
   91458:	e9d3 2300 	ldrd	r2, r3, [r3]
   9145c:	47a0      	blx	r4
   9145e:	4603      	mov	r3, r0
   91460:	460c      	mov	r4, r1
   91462:	4619      	mov	r1, r3
   91464:	4622      	mov	r2, r4
   91466:	4b59      	ldr	r3, [pc, #356]	; (915cc <cl_testharnesscommandhandler+0x2944>)
   91468:	4608      	mov	r0, r1
   9146a:	4611      	mov	r1, r2
   9146c:	4798      	blx	r3
   9146e:	4603      	mov	r3, r0
   91470:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   91474:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   91478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9147c:	fb02 f303 	mul.w	r3, r2, r3
   91480:	4a53      	ldr	r2, [pc, #332]	; (915d0 <cl_testharnesscommandhandler+0x2948>)
   91482:	fb82 1203 	smull	r1, r2, r2, r3
   91486:	11d2      	asrs	r2, r2, #7
   91488:	17db      	asrs	r3, r3, #31
   9148a:	1ad3      	subs	r3, r2, r3
   9148c:	b29b      	uxth	r3, r3
   9148e:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91492:	b29b      	uxth	r3, r3
   91494:	b21a      	sxth	r2, r3
   91496:	f107 030a 	add.w	r3, r7, #10
   9149a:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   9149c:	4b4e      	ldr	r3, [pc, #312]	; (915d8 <cl_testharnesscommandhandler+0x2950>)
   9149e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   914a2:	2206      	movs	r2, #6
   914a4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   914a8:	2018      	movs	r0, #24
   914aa:	4b40      	ldr	r3, [pc, #256]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   914ac:	4798      	blx	r3
   914ae:	4603      	mov	r3, r0
   914b0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   914b4:	f107 030a 	add.w	r3, r7, #10
   914b8:	2202      	movs	r2, #2
   914ba:	4619      	mov	r1, r3
   914bc:	2019      	movs	r0, #25
   914be:	4b3b      	ldr	r3, [pc, #236]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   914c0:	4798      	blx	r3
   914c2:	4603      	mov	r3, r0
   914c4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   914c8:	e053      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   914ca:	f107 0392 	add.w	r3, r7, #146	; 0x92
   914ce:	4619      	mov	r1, r3
   914d0:	2014      	movs	r0, #20
   914d2:	4b3a      	ldr	r3, [pc, #232]	; (915bc <cl_testharnesscommandhandler+0x2934>)
   914d4:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   914d6:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   914da:	4b39      	ldr	r3, [pc, #228]	; (915c0 <cl_testharnesscommandhandler+0x2938>)
   914dc:	4610      	mov	r0, r2
   914de:	4798      	blx	r3
   914e0:	4c38      	ldr	r4, [pc, #224]	; (915c4 <cl_testharnesscommandhandler+0x293c>)
   914e2:	a32b      	add	r3, pc, #172	; (adr r3, 91590 <cl_testharnesscommandhandler+0x2908>)
   914e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   914e8:	47a0      	blx	r4
   914ea:	4603      	mov	r3, r0
   914ec:	460c      	mov	r4, r1
   914ee:	4618      	mov	r0, r3
   914f0:	4621      	mov	r1, r4
   914f2:	4c35      	ldr	r4, [pc, #212]	; (915c8 <cl_testharnesscommandhandler+0x2940>)
   914f4:	a328      	add	r3, pc, #160	; (adr r3, 91598 <cl_testharnesscommandhandler+0x2910>)
   914f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   914fa:	47a0      	blx	r4
   914fc:	4603      	mov	r3, r0
   914fe:	460c      	mov	r4, r1
   91500:	4619      	mov	r1, r3
   91502:	4622      	mov	r2, r4
   91504:	4b31      	ldr	r3, [pc, #196]	; (915cc <cl_testharnesscommandhandler+0x2944>)
   91506:	4608      	mov	r0, r1
   91508:	4611      	mov	r1, r2
   9150a:	4798      	blx	r3
   9150c:	4603      	mov	r3, r0
   9150e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   91512:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   91516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9151a:	fb02 f303 	mul.w	r3, r2, r3
   9151e:	4a2c      	ldr	r2, [pc, #176]	; (915d0 <cl_testharnesscommandhandler+0x2948>)
   91520:	fb82 1203 	smull	r1, r2, r2, r3
   91524:	11d2      	asrs	r2, r2, #7
   91526:	17db      	asrs	r3, r3, #31
   91528:	1ad3      	subs	r3, r2, r3
   9152a:	b29b      	uxth	r3, r3
   9152c:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91530:	b29b      	uxth	r3, r3
   91532:	b21a      	sxth	r2, r3
   91534:	f107 0308 	add.w	r3, r7, #8
   91538:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   9153a:	4b28      	ldr	r3, [pc, #160]	; (915dc <cl_testharnesscommandhandler+0x2954>)
   9153c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   91540:	2206      	movs	r2, #6
   91542:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91546:	2018      	movs	r0, #24
   91548:	4b18      	ldr	r3, [pc, #96]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   9154a:	4798      	blx	r3
   9154c:	4603      	mov	r3, r0
   9154e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   91552:	f107 0308 	add.w	r3, r7, #8
   91556:	2202      	movs	r2, #2
   91558:	4619      	mov	r1, r3
   9155a:	2019      	movs	r0, #25
   9155c:	4b13      	ldr	r3, [pc, #76]	; (915ac <cl_testharnesscommandhandler+0x2924>)
   9155e:	4798      	blx	r3
   91560:	4603      	mov	r3, r0
   91562:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   91566:	e004      	b.n	91572 <cl_testharnesscommandhandler+0x28ea>


			
			default: break;
   91568:	bf00      	nop
   9156a:	e00a      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
				
			}
			#endif

			
			break;
   9156c:	bf00      	nop
   9156e:	e008      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   91570:	bf00      	nop

			
			default: break;
		}

		break;
   91572:	e006      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
		default:
		
		break;
   91574:	bf00      	nop
   91576:	e004      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   91578:	bf00      	nop
   9157a:	e002      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   9157c:	bf00      	nop
   9157e:	e000      	b.n	91582 <cl_testharnesscommandhandler+0x28fa>
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   91580:	bf00      	nop
		break;
	}
	
	
	
	return CL_OK;
   91582:	2300      	movs	r3, #0
	
}
   91584:	4618      	mov	r0, r3
   91586:	f507 7792 	add.w	r7, r7, #292	; 0x124
   9158a:	46bd      	mov	sp, r7
   9158c:	bd90      	pop	{r4, r7, pc}
   9158e:	bf00      	nop
   91590:	a6b50b0f 	.word	0xa6b50b0f
   91594:	3fe9c779 	.word	0x3fe9c779
   91598:	00000000 	.word	0x00000000
   9159c:	4096a800 	.word	0x4096a800
   915a0:	20072602 	.word	0x20072602
   915a4:	200725fc 	.word	0x200725fc
   915a8:	000a4a30 	.word	0x000a4a30
   915ac:	00098601 	.word	0x00098601
   915b0:	20072600 	.word	0x20072600
   915b4:	200725fe 	.word	0x200725fe
   915b8:	000a4a38 	.word	0x000a4a38
   915bc:	000915e1 	.word	0x000915e1
   915c0:	000a1d41 	.word	0x000a1d41
   915c4:	000a1e0d 	.word	0x000a1e0d
   915c8:	000a1aa5 	.word	0x000a1aa5
   915cc:	000a2341 	.word	0x000a2341
   915d0:	60606061 	.word	0x60606061
   915d4:	000a4a40 	.word	0x000a4a40
   915d8:	000a4a48 	.word	0x000a4a48
   915dc:	000a4a50 	.word	0x000a4a50

000915e0 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   915e0:	b580      	push	{r7, lr}
   915e2:	b086      	sub	sp, #24
   915e4:	af00      	add	r7, sp, #0
   915e6:	4603      	mov	r3, r0
   915e8:	6039      	str	r1, [r7, #0]
   915ea:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   915ec:	2304      	movs	r3, #4
   915ee:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   915f0:	2300      	movs	r3, #0
   915f2:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   915f4:	2300      	movs	r3, #0
   915f6:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   915f8:	2300      	movs	r3, #0
   915fa:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   915fc:	f107 030f 	add.w	r3, r7, #15
   91600:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   91602:	f107 030c 	add.w	r3, r7, #12
   91606:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   91608:	f107 0308 	add.w	r3, r7, #8
   9160c:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   9160e:	79fb      	ldrb	r3, [r7, #7]
   91610:	6839      	ldr	r1, [r7, #0]
   91612:	4618      	mov	r0, r3
   91614:	4b03      	ldr	r3, [pc, #12]	; (91624 <cl_testgetsensordata+0x44>)
   91616:	4798      	blx	r3
	
return CL_OK;	
   91618:	2300      	movs	r3, #0
}
   9161a:	4618      	mov	r0, r3
   9161c:	3718      	adds	r7, #24
   9161e:	46bd      	mov	sp, r7
   91620:	bd80      	pop	{r7, pc}
   91622:	bf00      	nop
   91624:	0008d499 	.word	0x0008d499

00091628 <pinclock>:
	#endif

}

void pinclock(void)
{
   91628:	b480      	push	{r7}
   9162a:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   9162c:	bf00      	nop
   9162e:	46bd      	mov	sp, r7
   91630:	bc80      	pop	{r7}
   91632:	4770      	bx	lr

00091634 <tg_timer_minute>:
				
				}

}
void tg_timer_minute(void)
{
   91634:	b480      	push	{r7}
   91636:	b085      	sub	sp, #20
   91638:	af00      	add	r7, sp, #0
	
//	if(!(minute_count % 5 ))
//	{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_R_COUNT",10);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_rotation_counter,2);
		temp3 = uf_rotation_counter * 1000;
   9163a:	4b0e      	ldr	r3, [pc, #56]	; (91674 <tg_timer_minute+0x40>)
   9163c:	881b      	ldrh	r3, [r3, #0]
   9163e:	461a      	mov	r2, r3
   91640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   91644:	fb03 f302 	mul.w	r3, r3, r2
   91648:	60fb      	str	r3, [r7, #12]
	//	dataarray[1] = cl_data.bytearray[0];
	//	dataarray[2] = cl_data.bytearray[1];
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_SYSDATA,&dataarray,3);

//	}
	if(minute_count == 180)
   9164a:	4b0b      	ldr	r3, [pc, #44]	; (91678 <tg_timer_minute+0x44>)
   9164c:	681b      	ldr	r3, [r3, #0]
   9164e:	2bb4      	cmp	r3, #180	; 0xb4
   91650:	d105      	bne.n	9165e <tg_timer_minute+0x2a>
	{
		uf_rotation_counter =0;
   91652:	4b08      	ldr	r3, [pc, #32]	; (91674 <tg_timer_minute+0x40>)
   91654:	2200      	movs	r2, #0
   91656:	801a      	strh	r2, [r3, #0]
		minute_count = 0;
   91658:	4b07      	ldr	r3, [pc, #28]	; (91678 <tg_timer_minute+0x44>)
   9165a:	2200      	movs	r2, #0
   9165c:	601a      	str	r2, [r3, #0]
	}
	
	minute_count++;
   9165e:	4b06      	ldr	r3, [pc, #24]	; (91678 <tg_timer_minute+0x44>)
   91660:	681b      	ldr	r3, [r3, #0]
   91662:	3301      	adds	r3, #1
   91664:	4a04      	ldr	r2, [pc, #16]	; (91678 <tg_timer_minute+0x44>)
   91666:	6013      	str	r3, [r2, #0]
}
   91668:	bf00      	nop
   9166a:	3714      	adds	r7, #20
   9166c:	46bd      	mov	sp, r7
   9166e:	bc80      	pop	{r7}
   91670:	4770      	bx	lr
   91672:	bf00      	nop
   91674:	20072606 	.word	0x20072606
   91678:	2007260c 	.word	0x2007260c

0009167c <testsectclock>:


void testsectclock(void)
{
   9167c:	b580      	push	{r7, lr}
   9167e:	b086      	sub	sp, #24
   91680:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   91682:	2300      	movs	r3, #0
   91684:	82fb      	strh	r3, [r7, #22]
   91686:	2300      	movs	r3, #0
   91688:	82bb      	strh	r3, [r7, #20]
   9168a:	2300      	movs	r3, #0
   9168c:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   9168e:	2300      	movs	r3, #0
   91690:	823b      	strh	r3, [r7, #16]
   91692:	2300      	movs	r3, #0
   91694:	81fb      	strh	r3, [r7, #14]
   91696:	2300      	movs	r3, #0
   91698:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   9169a:	f04f 0300 	mov.w	r3, #0
   9169e:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   916a0:	1dbb      	adds	r3, r7, #6
   916a2:	4619      	mov	r1, r3
   916a4:	2013      	movs	r0, #19
   916a6:	4b0f      	ldr	r3, [pc, #60]	; (916e4 <testsectclock+0x68>)
   916a8:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   916aa:	4b0f      	ldr	r3, [pc, #60]	; (916e8 <testsectclock+0x6c>)
   916ac:	681a      	ldr	r2, [r3, #0]
   916ae:	4b0f      	ldr	r3, [pc, #60]	; (916ec <testsectclock+0x70>)
   916b0:	490f      	ldr	r1, [pc, #60]	; (916f0 <testsectclock+0x74>)
   916b2:	4610      	mov	r0, r2
   916b4:	4798      	blx	r3
   916b6:	4603      	mov	r3, r0
   916b8:	2b00      	cmp	r3, #0
   916ba:	d100      	bne.n	916be <testsectclock+0x42>
	}
		
	}
		
	
}
   916bc:	e00d      	b.n	916da <testsectclock+0x5e>
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   916be:	4b0d      	ldr	r3, [pc, #52]	; (916f4 <testsectclock+0x78>)
   916c0:	781b      	ldrb	r3, [r3, #0]
   916c2:	b2db      	uxtb	r3, r3
   916c4:	2b01      	cmp	r3, #1
   916c6:	d008      	beq.n	916da <testsectclock+0x5e>
   916c8:	4b0b      	ldr	r3, [pc, #44]	; (916f8 <testsectclock+0x7c>)
   916ca:	781b      	ldrb	r3, [r3, #0]
   916cc:	2b01      	cmp	r3, #1
   916ce:	d004      	beq.n	916da <testsectclock+0x5e>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   916d0:	4b0a      	ldr	r3, [pc, #40]	; (916fc <testsectclock+0x80>)
   916d2:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   916d4:	2004      	movs	r0, #4
   916d6:	4b0a      	ldr	r3, [pc, #40]	; (91700 <testsectclock+0x84>)
   916d8:	4798      	blx	r3
	}
		
	}
		
	
}
   916da:	bf00      	nop
   916dc:	3718      	adds	r7, #24
   916de:	46bd      	mov	sp, r7
   916e0:	bd80      	pop	{r7, pc}
   916e2:	bf00      	nop
   916e4:	0008d499 	.word	0x0008d499
   916e8:	2007162c 	.word	0x2007162c
   916ec:	000a2a05 	.word	0x000a2a05
   916f0:	471c4000 	.word	0x471c4000
   916f4:	200725f3 	.word	0x200725f3
   916f8:	20072821 	.word	0x20072821
   916fc:	00096869 	.word	0x00096869
   91700:	00089749 	.word	0x00089749

00091704 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   91704:	b580      	push	{r7, lr}
   91706:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   91708:	4b1c      	ldr	r3, [pc, #112]	; (9177c <Cl_TimerTickCallback+0x78>)
   9170a:	681b      	ldr	r3, [r3, #0]
   9170c:	3301      	adds	r3, #1
   9170e:	4a1b      	ldr	r2, [pc, #108]	; (9177c <Cl_TimerTickCallback+0x78>)
   91710:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   91712:	4b1a      	ldr	r3, [pc, #104]	; (9177c <Cl_TimerTickCallback+0x78>)
   91714:	681b      	ldr	r3, [r3, #0]
   91716:	2b00      	cmp	r3, #0
   91718:	dd07      	ble.n	9172a <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   9171a:	4b18      	ldr	r3, [pc, #96]	; (9177c <Cl_TimerTickCallback+0x78>)
   9171c:	2200      	movs	r2, #0
   9171e:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   91720:	4b17      	ldr	r3, [pc, #92]	; (91780 <Cl_TimerTickCallback+0x7c>)
   91722:	681b      	ldr	r3, [r3, #0]
   91724:	3301      	adds	r3, #1
   91726:	4a16      	ldr	r2, [pc, #88]	; (91780 <Cl_TimerTickCallback+0x7c>)
   91728:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   9172a:	4b15      	ldr	r3, [pc, #84]	; (91780 <Cl_TimerTickCallback+0x7c>)
   9172c:	681b      	ldr	r3, [r3, #0]
   9172e:	2b3b      	cmp	r3, #59	; 0x3b
   91730:	dd07      	ble.n	91742 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   91732:	4b13      	ldr	r3, [pc, #76]	; (91780 <Cl_TimerTickCallback+0x7c>)
   91734:	2200      	movs	r2, #0
   91736:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   91738:	4b12      	ldr	r3, [pc, #72]	; (91784 <Cl_TimerTickCallback+0x80>)
   9173a:	681b      	ldr	r3, [r3, #0]
   9173c:	3301      	adds	r3, #1
   9173e:	4a11      	ldr	r2, [pc, #68]	; (91784 <Cl_TimerTickCallback+0x80>)
   91740:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   91742:	4b10      	ldr	r3, [pc, #64]	; (91784 <Cl_TimerTickCallback+0x80>)
   91744:	681b      	ldr	r3, [r3, #0]
   91746:	2b3b      	cmp	r3, #59	; 0x3b
   91748:	dd0d      	ble.n	91766 <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   9174a:	4b0e      	ldr	r3, [pc, #56]	; (91784 <Cl_TimerTickCallback+0x80>)
   9174c:	2200      	movs	r2, #0
   9174e:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   91750:	4b0d      	ldr	r3, [pc, #52]	; (91788 <Cl_TimerTickCallback+0x84>)
   91752:	681b      	ldr	r3, [r3, #0]
   91754:	3301      	adds	r3, #1
   91756:	4a0c      	ldr	r2, [pc, #48]	; (91788 <Cl_TimerTickCallback+0x84>)
   91758:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   9175a:	4b0c      	ldr	r3, [pc, #48]	; (9178c <Cl_TimerTickCallback+0x88>)
   9175c:	4798      	blx	r3
   9175e:	4603      	mov	r3, r0
   91760:	461a      	mov	r2, r3
   91762:	4b0b      	ldr	r3, [pc, #44]	; (91790 <Cl_TimerTickCallback+0x8c>)
   91764:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   91766:	4b08      	ldr	r3, [pc, #32]	; (91788 <Cl_TimerTickCallback+0x84>)
   91768:	681b      	ldr	r3, [r3, #0]
   9176a:	2b17      	cmp	r3, #23
   9176c:	dd02      	ble.n	91774 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   9176e:	4b06      	ldr	r3, [pc, #24]	; (91788 <Cl_TimerTickCallback+0x84>)
   91770:	2200      	movs	r2, #0
   91772:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   91774:	2300      	movs	r3, #0
}
   91776:	4618      	mov	r0, r3
   91778:	bd80      	pop	{r7, pc}
   9177a:	bf00      	nop
   9177c:	20072618 	.word	0x20072618
   91780:	2007261c 	.word	0x2007261c
   91784:	20072620 	.word	0x20072620
   91788:	20072624 	.word	0x20072624
   9178c:	00091b35 	.word	0x00091b35
   91790:	20073134 	.word	0x20073134

00091794 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   91794:	b580      	push	{r7, lr}
   91796:	b082      	sub	sp, #8
   91798:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   9179a:	4b5e      	ldr	r3, [pc, #376]	; (91914 <Cl_MilliTickcallBack+0x180>)
   9179c:	681b      	ldr	r3, [r3, #0]
   9179e:	2b01      	cmp	r3, #1
   917a0:	d10d      	bne.n	917be <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   917a2:	4b5d      	ldr	r3, [pc, #372]	; (91918 <Cl_MilliTickcallBack+0x184>)
   917a4:	681b      	ldr	r3, [r3, #0]
   917a6:	3301      	adds	r3, #1
   917a8:	4a5b      	ldr	r2, [pc, #364]	; (91918 <Cl_MilliTickcallBack+0x184>)
   917aa:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   917ac:	4b5a      	ldr	r3, [pc, #360]	; (91918 <Cl_MilliTickcallBack+0x184>)
   917ae:	681b      	ldr	r3, [r3, #0]
   917b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   917b4:	dd06      	ble.n	917c4 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   917b6:	4b58      	ldr	r3, [pc, #352]	; (91918 <Cl_MilliTickcallBack+0x184>)
   917b8:	2200      	movs	r2, #0
   917ba:	601a      	str	r2, [r3, #0]
   917bc:	e002      	b.n	917c4 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   917be:	4b56      	ldr	r3, [pc, #344]	; (91918 <Cl_MilliTickcallBack+0x184>)
   917c0:	2200      	movs	r2, #0
   917c2:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   917c4:	4b55      	ldr	r3, [pc, #340]	; (9191c <Cl_MilliTickcallBack+0x188>)
   917c6:	681b      	ldr	r3, [r3, #0]
   917c8:	3301      	adds	r3, #1
   917ca:	4a54      	ldr	r2, [pc, #336]	; (9191c <Cl_MilliTickcallBack+0x188>)
   917cc:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   917ce:	4b53      	ldr	r3, [pc, #332]	; (9191c <Cl_MilliTickcallBack+0x188>)
   917d0:	681b      	ldr	r3, [r3, #0]
   917d2:	2b32      	cmp	r3, #50	; 0x32
   917d4:	dd02      	ble.n	917dc <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   917d6:	4b51      	ldr	r3, [pc, #324]	; (9191c <Cl_MilliTickcallBack+0x188>)
   917d8:	2200      	movs	r2, #0
   917da:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   917dc:	4b50      	ldr	r3, [pc, #320]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   917de:	681b      	ldr	r3, [r3, #0]
   917e0:	3301      	adds	r3, #1
   917e2:	4a4f      	ldr	r2, [pc, #316]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   917e4:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   917e6:	4b4e      	ldr	r3, [pc, #312]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   917e8:	6819      	ldr	r1, [r3, #0]
   917ea:	4b4e      	ldr	r3, [pc, #312]	; (91924 <Cl_MilliTickcallBack+0x190>)
   917ec:	fb83 2301 	smull	r2, r3, r3, r1
   917f0:	10da      	asrs	r2, r3, #3
   917f2:	17cb      	asrs	r3, r1, #31
   917f4:	1ad2      	subs	r2, r2, r3
   917f6:	4613      	mov	r3, r2
   917f8:	009b      	lsls	r3, r3, #2
   917fa:	4413      	add	r3, r2
   917fc:	009b      	lsls	r3, r3, #2
   917fe:	1aca      	subs	r2, r1, r3
   91800:	2a00      	cmp	r2, #0
   91802:	d103      	bne.n	9180c <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   91804:	4b48      	ldr	r3, [pc, #288]	; (91928 <Cl_MilliTickcallBack+0x194>)
   91806:	4798      	blx	r3
   91808:	4603      	mov	r3, r0
   9180a:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   9180c:	4b44      	ldr	r3, [pc, #272]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   9180e:	681b      	ldr	r3, [r3, #0]
   91810:	f003 0301 	and.w	r3, r3, #1
   91814:	2b00      	cmp	r3, #0
   91816:	d105      	bne.n	91824 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   91818:	4b44      	ldr	r3, [pc, #272]	; (9192c <Cl_MilliTickcallBack+0x198>)
   9181a:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   9181c:	4b44      	ldr	r3, [pc, #272]	; (91930 <Cl_MilliTickcallBack+0x19c>)
   9181e:	4798      	blx	r3
   91820:	4603      	mov	r3, r0
   91822:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   91824:	4b3e      	ldr	r3, [pc, #248]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   91826:	6819      	ldr	r1, [r3, #0]
   91828:	4b3e      	ldr	r3, [pc, #248]	; (91924 <Cl_MilliTickcallBack+0x190>)
   9182a:	fb83 2301 	smull	r2, r3, r3, r1
   9182e:	105a      	asrs	r2, r3, #1
   91830:	17cb      	asrs	r3, r1, #31
   91832:	1ad2      	subs	r2, r2, r3
   91834:	4613      	mov	r3, r2
   91836:	009b      	lsls	r3, r3, #2
   91838:	4413      	add	r3, r2
   9183a:	1aca      	subs	r2, r1, r3
   9183c:	2a00      	cmp	r2, #0
   9183e:	d103      	bne.n	91848 <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   91840:	4b3c      	ldr	r3, [pc, #240]	; (91934 <Cl_MilliTickcallBack+0x1a0>)
   91842:	4798      	blx	r3
   91844:	4603      	mov	r3, r0
   91846:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   91848:	4b35      	ldr	r3, [pc, #212]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   9184a:	6819      	ldr	r1, [r3, #0]
   9184c:	4b35      	ldr	r3, [pc, #212]	; (91924 <Cl_MilliTickcallBack+0x190>)
   9184e:	fb83 2301 	smull	r2, r3, r3, r1
   91852:	109a      	asrs	r2, r3, #2
   91854:	17cb      	asrs	r3, r1, #31
   91856:	1ad2      	subs	r2, r2, r3
   91858:	4613      	mov	r3, r2
   9185a:	009b      	lsls	r3, r3, #2
   9185c:	4413      	add	r3, r2
   9185e:	005b      	lsls	r3, r3, #1
   91860:	1aca      	subs	r2, r1, r3
   91862:	2a00      	cmp	r2, #0
   91864:	d103      	bne.n	9186e <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   91866:	4b34      	ldr	r3, [pc, #208]	; (91938 <Cl_MilliTickcallBack+0x1a4>)
   91868:	4798      	blx	r3
   9186a:	4603      	mov	r3, r0
   9186c:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   9186e:	4b2c      	ldr	r3, [pc, #176]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   91870:	681a      	ldr	r2, [r3, #0]
   91872:	4b32      	ldr	r3, [pc, #200]	; (9193c <Cl_MilliTickcallBack+0x1a8>)
   91874:	fb83 1302 	smull	r1, r3, r3, r2
   91878:	1119      	asrs	r1, r3, #4
   9187a:	17d3      	asrs	r3, r2, #31
   9187c:	1acb      	subs	r3, r1, r3
   9187e:	2132      	movs	r1, #50	; 0x32
   91880:	fb01 f303 	mul.w	r3, r1, r3
   91884:	1ad3      	subs	r3, r2, r3
   91886:	2b00      	cmp	r3, #0
   91888:	d103      	bne.n	91892 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   9188a:	4b2d      	ldr	r3, [pc, #180]	; (91940 <Cl_MilliTickcallBack+0x1ac>)
   9188c:	4798      	blx	r3
   9188e:	4603      	mov	r3, r0
   91890:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   91892:	4b23      	ldr	r3, [pc, #140]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   91894:	681b      	ldr	r3, [r3, #0]
   91896:	2b64      	cmp	r3, #100	; 0x64
   91898:	d10d      	bne.n	918b6 <Cl_MilliTickcallBack+0x122>
		{
			Cl_msticks = 0;
   9189a:	4b21      	ldr	r3, [pc, #132]	; (91920 <Cl_MilliTickcallBack+0x18c>)
   9189c:	2200      	movs	r2, #0
   9189e:	601a      	str	r2, [r3, #0]
			Cl_ms100ticks++;
   918a0:	4b28      	ldr	r3, [pc, #160]	; (91944 <Cl_MilliTickcallBack+0x1b0>)
   918a2:	681b      	ldr	r3, [r3, #0]
   918a4:	3301      	adds	r3, #1
   918a6:	4a27      	ldr	r2, [pc, #156]	; (91944 <Cl_MilliTickcallBack+0x1b0>)
   918a8:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   918aa:	4b27      	ldr	r3, [pc, #156]	; (91948 <Cl_MilliTickcallBack+0x1b4>)
   918ac:	4798      	blx	r3
   918ae:	4603      	mov	r3, r0
   918b0:	71fb      	strb	r3, [r7, #7]

				cl_hep_pump_enddetction_timer();
   918b2:	4b26      	ldr	r3, [pc, #152]	; (9194c <Cl_MilliTickcallBack+0x1b8>)
   918b4:	4798      	blx	r3


		}


		if(Cl_ms100ticks == 5 )
   918b6:	4b23      	ldr	r3, [pc, #140]	; (91944 <Cl_MilliTickcallBack+0x1b0>)
   918b8:	681b      	ldr	r3, [r3, #0]
   918ba:	2b05      	cmp	r3, #5
   918bc:	d11d      	bne.n	918fa <Cl_MilliTickcallBack+0x166>
		{
			Cl_ms100ticks = 0;
   918be:	4b21      	ldr	r3, [pc, #132]	; (91944 <Cl_MilliTickcallBack+0x1b0>)
   918c0:	2200      	movs	r2, #0
   918c2:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   918c4:	4b22      	ldr	r3, [pc, #136]	; (91950 <Cl_MilliTickcallBack+0x1bc>)
   918c6:	681b      	ldr	r3, [r3, #0]
   918c8:	3301      	adds	r3, #1
   918ca:	4a21      	ldr	r2, [pc, #132]	; (91950 <Cl_MilliTickcallBack+0x1bc>)
   918cc:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   918ce:	4b20      	ldr	r3, [pc, #128]	; (91950 <Cl_MilliTickcallBack+0x1bc>)
   918d0:	681b      	ldr	r3, [r3, #0]
   918d2:	2b02      	cmp	r3, #2
   918d4:	d10d      	bne.n	918f2 <Cl_MilliTickcallBack+0x15e>
			{
				Cl_ms500ticks = 0;
   918d6:	4b1e      	ldr	r3, [pc, #120]	; (91950 <Cl_MilliTickcallBack+0x1bc>)
   918d8:	2200      	movs	r2, #0
   918da:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   918dc:	4b1d      	ldr	r3, [pc, #116]	; (91954 <Cl_MilliTickcallBack+0x1c0>)
   918de:	4798      	blx	r3
   918e0:	4603      	mov	r3, r0
   918e2:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   918e4:	4b1c      	ldr	r3, [pc, #112]	; (91958 <Cl_MilliTickcallBack+0x1c4>)
   918e6:	681b      	ldr	r3, [r3, #0]
   918e8:	3301      	adds	r3, #1
   918ea:	4a1b      	ldr	r2, [pc, #108]	; (91958 <Cl_MilliTickcallBack+0x1c4>)
   918ec:	6013      	str	r3, [r2, #0]
				testsectclock();
   918ee:	4b1b      	ldr	r3, [pc, #108]	; (9195c <Cl_MilliTickcallBack+0x1c8>)
   918f0:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   918f2:	4b1b      	ldr	r3, [pc, #108]	; (91960 <Cl_MilliTickcallBack+0x1cc>)
   918f4:	4798      	blx	r3
   918f6:	4603      	mov	r3, r0
   918f8:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   918fa:	4b17      	ldr	r3, [pc, #92]	; (91958 <Cl_MilliTickcallBack+0x1c4>)
   918fc:	681b      	ldr	r3, [r3, #0]
   918fe:	2b02      	cmp	r3, #2
   91900:	d102      	bne.n	91908 <Cl_MilliTickcallBack+0x174>
		{
			Cl_ms1000ticks =0;
   91902:	4b15      	ldr	r3, [pc, #84]	; (91958 <Cl_MilliTickcallBack+0x1c4>)
   91904:	2200      	movs	r2, #0
   91906:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   91908:	2300      	movs	r3, #0
}
   9190a:	4618      	mov	r0, r3
   9190c:	3708      	adds	r7, #8
   9190e:	46bd      	mov	sp, r7
   91910:	bd80      	pop	{r7, pc}
   91912:	bf00      	nop
   91914:	200726ac 	.word	0x200726ac
   91918:	20072614 	.word	0x20072614
   9191c:	20072610 	.word	0x20072610
   91920:	20072628 	.word	0x20072628
   91924:	66666667 	.word	0x66666667
   91928:	00091995 	.word	0x00091995
   9192c:	00091629 	.word	0x00091629
   91930:	00091965 	.word	0x00091965
   91934:	00091975 	.word	0x00091975
   91938:	00091985 	.word	0x00091985
   9193c:	51eb851f 	.word	0x51eb851f
   91940:	000919d1 	.word	0x000919d1
   91944:	2007262c 	.word	0x2007262c
   91948:	00091a11 	.word	0x00091a11
   9194c:	00092ad5 	.word	0x00092ad5
   91950:	20072630 	.word	0x20072630
   91954:	00091a89 	.word	0x00091a89
   91958:	20072634 	.word	0x20072634
   9195c:	0009167d 	.word	0x0009167d
   91960:	00091a4d 	.word	0x00091a4d

00091964 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   91964:	b480      	push	{r7}
   91966:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   91968:	2300      	movs	r3, #0
	 
 }
   9196a:	4618      	mov	r0, r3
   9196c:	46bd      	mov	sp, r7
   9196e:	bc80      	pop	{r7}
   91970:	4770      	bx	lr
   91972:	bf00      	nop

00091974 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   91974:	b480      	push	{r7}
   91976:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   91978:	2300      	movs	r3, #0
	 
 }
   9197a:	4618      	mov	r0, r3
   9197c:	46bd      	mov	sp, r7
   9197e:	bc80      	pop	{r7}
   91980:	4770      	bx	lr
   91982:	bf00      	nop

00091984 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   91984:	b480      	push	{r7}
   91986:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   91988:	2300      	movs	r3, #0
	 
 }
   9198a:	4618      	mov	r0, r3
   9198c:	46bd      	mov	sp, r7
   9198e:	bc80      	pop	{r7}
   91990:	4770      	bx	lr
   91992:	bf00      	nop

00091994 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   91994:	b480      	push	{r7}
   91996:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91998:	4b0c      	ldr	r3, [pc, #48]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   9199a:	781b      	ldrb	r3, [r3, #0]
   9199c:	2b09      	cmp	r3, #9
   9199e:	d80f      	bhi.n	919c0 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
	 	 
	 	 
	 	 {
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   919a0:	4b0a      	ldr	r3, [pc, #40]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   919a2:	781b      	ldrb	r3, [r3, #0]
   919a4:	461a      	mov	r2, r3
   919a6:	4b09      	ldr	r3, [pc, #36]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   919a8:	4413      	add	r3, r2
   919aa:	2237      	movs	r2, #55	; 0x37
   919ac:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   919ae:	4b07      	ldr	r3, [pc, #28]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   919b0:	2201      	movs	r2, #1
   919b2:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   919b4:	4b05      	ldr	r3, [pc, #20]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   919b6:	781b      	ldrb	r3, [r3, #0]
   919b8:	3301      	adds	r3, #1
   919ba:	b2da      	uxtb	r2, r3
   919bc:	4b03      	ldr	r3, [pc, #12]	; (919cc <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   919be:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   919c0:	2300      	movs	r3, #0
	 	 
 }
   919c2:	4618      	mov	r0, r3
   919c4:	46bd      	mov	sp, r7
   919c6:	bc80      	pop	{r7}
   919c8:	4770      	bx	lr
   919ca:	bf00      	nop
   919cc:	20072d30 	.word	0x20072d30

000919d0 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   919d0:	b580      	push	{r7, lr}
   919d2:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   919d4:	4b0c      	ldr	r3, [pc, #48]	; (91a08 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   919d6:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   919d8:	4b0c      	ldr	r3, [pc, #48]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919da:	781b      	ldrb	r3, [r3, #0]
   919dc:	2b09      	cmp	r3, #9
   919de:	d80f      	bhi.n	91a00 <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   919e0:	4b0a      	ldr	r3, [pc, #40]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919e2:	781b      	ldrb	r3, [r3, #0]
   919e4:	461a      	mov	r2, r3
   919e6:	4b09      	ldr	r3, [pc, #36]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919e8:	4413      	add	r3, r2
   919ea:	2238      	movs	r2, #56	; 0x38
   919ec:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   919ee:	4b07      	ldr	r3, [pc, #28]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919f0:	2201      	movs	r2, #1
   919f2:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   919f4:	4b05      	ldr	r3, [pc, #20]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919f6:	781b      	ldrb	r3, [r3, #0]
   919f8:	3301      	adds	r3, #1
   919fa:	b2da      	uxtb	r2, r3
   919fc:	4b03      	ldr	r3, [pc, #12]	; (91a0c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   919fe:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   91a00:	2300      	movs	r3, #0
	 
	 
 }
   91a02:	4618      	mov	r0, r3
   91a04:	bd80      	pop	{r7, pc}
   91a06:	bf00      	nop
   91a08:	000831c5 	.word	0x000831c5
   91a0c:	20072d30 	.word	0x20072d30

00091a10 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   91a10:	b480      	push	{r7}
   91a12:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91a14:	4b0c      	ldr	r3, [pc, #48]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a16:	781b      	ldrb	r3, [r3, #0]
   91a18:	2b09      	cmp	r3, #9
   91a1a:	d80f      	bhi.n	91a3c <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   91a1c:	4b0a      	ldr	r3, [pc, #40]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a1e:	781b      	ldrb	r3, [r3, #0]
   91a20:	461a      	mov	r2, r3
   91a22:	4b09      	ldr	r3, [pc, #36]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a24:	4413      	add	r3, r2
   91a26:	2239      	movs	r2, #57	; 0x39
   91a28:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91a2a:	4b07      	ldr	r3, [pc, #28]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a2c:	2201      	movs	r2, #1
   91a2e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91a30:	4b05      	ldr	r3, [pc, #20]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a32:	781b      	ldrb	r3, [r3, #0]
   91a34:	3301      	adds	r3, #1
   91a36:	b2da      	uxtb	r2, r3
   91a38:	4b03      	ldr	r3, [pc, #12]	; (91a48 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91a3a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   91a3c:	2300      	movs	r3, #0
		 
		 
	 }
   91a3e:	4618      	mov	r0, r3
   91a40:	46bd      	mov	sp, r7
   91a42:	bc80      	pop	{r7}
   91a44:	4770      	bx	lr
   91a46:	bf00      	nop
   91a48:	20072d30 	.word	0x20072d30

00091a4c <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   91a4c:	b480      	push	{r7}
   91a4e:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91a50:	4b0c      	ldr	r3, [pc, #48]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a52:	781b      	ldrb	r3, [r3, #0]
   91a54:	2b09      	cmp	r3, #9
   91a56:	d80f      	bhi.n	91a78 <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   91a58:	4b0a      	ldr	r3, [pc, #40]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a5a:	781b      	ldrb	r3, [r3, #0]
   91a5c:	461a      	mov	r2, r3
   91a5e:	4b09      	ldr	r3, [pc, #36]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a60:	4413      	add	r3, r2
   91a62:	223a      	movs	r2, #58	; 0x3a
   91a64:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91a66:	4b07      	ldr	r3, [pc, #28]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a68:	2201      	movs	r2, #1
   91a6a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91a6c:	4b05      	ldr	r3, [pc, #20]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a6e:	781b      	ldrb	r3, [r3, #0]
   91a70:	3301      	adds	r3, #1
   91a72:	b2da      	uxtb	r2, r3
   91a74:	4b03      	ldr	r3, [pc, #12]	; (91a84 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   91a76:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   91a78:	2300      	movs	r3, #0
		 
		 
	 }
   91a7a:	4618      	mov	r0, r3
   91a7c:	46bd      	mov	sp, r7
   91a7e:	bc80      	pop	{r7}
   91a80:	4770      	bx	lr
   91a82:	bf00      	nop
   91a84:	20072d30 	.word	0x20072d30

00091a88 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   91a88:	b580      	push	{r7, lr}
   91a8a:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   91a8c:	4b15      	ldr	r3, [pc, #84]	; (91ae4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91a8e:	781b      	ldrb	r3, [r3, #0]
   91a90:	3301      	adds	r3, #1
   91a92:	b2da      	uxtb	r2, r3
   91a94:	4b13      	ldr	r3, [pc, #76]	; (91ae4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91a96:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91a98:	4b13      	ldr	r3, [pc, #76]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91a9a:	781b      	ldrb	r3, [r3, #0]
   91a9c:	2b09      	cmp	r3, #9
   91a9e:	d80f      	bhi.n	91ac0 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   91aa0:	4b11      	ldr	r3, [pc, #68]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91aa2:	781b      	ldrb	r3, [r3, #0]
   91aa4:	461a      	mov	r2, r3
   91aa6:	4b10      	ldr	r3, [pc, #64]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91aa8:	4413      	add	r3, r2
   91aaa:	223b      	movs	r2, #59	; 0x3b
   91aac:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91aae:	4b0e      	ldr	r3, [pc, #56]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91ab0:	2201      	movs	r2, #1
   91ab2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91ab4:	4b0c      	ldr	r3, [pc, #48]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91ab6:	781b      	ldrb	r3, [r3, #0]
   91ab8:	3301      	adds	r3, #1
   91aba:	b2da      	uxtb	r2, r3
   91abc:	4b0a      	ldr	r3, [pc, #40]	; (91ae8 <Cl_Timer_Create_TickSec_Event+0x60>)
   91abe:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= SIXTY)
   91ac0:	4b08      	ldr	r3, [pc, #32]	; (91ae4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91ac2:	781b      	ldrb	r3, [r3, #0]
   91ac4:	2b3b      	cmp	r3, #59	; 0x3b
   91ac6:	d90a      	bls.n	91ade <Cl_Timer_Create_TickSec_Event+0x56>
		 {
			 Cl_Secondscnt = 0;
   91ac8:	4b06      	ldr	r3, [pc, #24]	; (91ae4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91aca:	2200      	movs	r2, #0
   91acc:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   91ace:	4b07      	ldr	r3, [pc, #28]	; (91aec <Cl_Timer_Create_TickSec_Event+0x64>)
   91ad0:	4798      	blx	r3
   91ad2:	4603      	mov	r3, r0
   91ad4:	461a      	mov	r2, r3
   91ad6:	4b06      	ldr	r3, [pc, #24]	; (91af0 <Cl_Timer_Create_TickSec_Event+0x68>)
   91ad8:	701a      	strb	r2, [r3, #0]
			 tg_timer_minute();
   91ada:	4b06      	ldr	r3, [pc, #24]	; (91af4 <Cl_Timer_Create_TickSec_Event+0x6c>)
   91adc:	4798      	blx	r3
		 }
			 return CL_OK;
   91ade:	2300      	movs	r3, #0
		 
		
		 }
   91ae0:	4618      	mov	r0, r3
   91ae2:	bd80      	pop	{r7, pc}
   91ae4:	20072638 	.word	0x20072638
   91ae8:	20072d30 	.word	0x20072d30
   91aec:	00091af9 	.word	0x00091af9
   91af0:	20073134 	.word	0x20073134
   91af4:	00091635 	.word	0x00091635

00091af8 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   91af8:	b480      	push	{r7}
   91afa:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   91afc:	4b0c      	ldr	r3, [pc, #48]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91afe:	781b      	ldrb	r3, [r3, #0]
   91b00:	2b09      	cmp	r3, #9
   91b02:	d80f      	bhi.n	91b24 <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   91b04:	4b0a      	ldr	r3, [pc, #40]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91b06:	781b      	ldrb	r3, [r3, #0]
   91b08:	461a      	mov	r2, r3
   91b0a:	4b09      	ldr	r3, [pc, #36]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91b0c:	4413      	add	r3, r2
   91b0e:	223c      	movs	r2, #60	; 0x3c
   91b10:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91b12:	4b07      	ldr	r3, [pc, #28]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91b14:	2201      	movs	r2, #1
   91b16:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91b18:	4b05      	ldr	r3, [pc, #20]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91b1a:	781b      	ldrb	r3, [r3, #0]
   91b1c:	3301      	adds	r3, #1
   91b1e:	b2da      	uxtb	r2, r3
   91b20:	4b03      	ldr	r3, [pc, #12]	; (91b30 <Cl_Timer_Create_TickMin_Event+0x38>)
   91b22:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   91b24:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   91b26:	4618      	mov	r0, r3
   91b28:	46bd      	mov	sp, r7
   91b2a:	bc80      	pop	{r7}
   91b2c:	4770      	bx	lr
   91b2e:	bf00      	nop
   91b30:	20072d30 	.word	0x20072d30

00091b34 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   91b34:	b480      	push	{r7}
   91b36:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   91b38:	4b0c      	ldr	r3, [pc, #48]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b3a:	781b      	ldrb	r3, [r3, #0]
   91b3c:	2b0a      	cmp	r3, #10
   91b3e:	d80f      	bhi.n	91b60 <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   91b40:	4b0a      	ldr	r3, [pc, #40]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b42:	781b      	ldrb	r3, [r3, #0]
   91b44:	461a      	mov	r2, r3
   91b46:	4b09      	ldr	r3, [pc, #36]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b48:	4413      	add	r3, r2
   91b4a:	223d      	movs	r2, #61	; 0x3d
   91b4c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91b4e:	4b07      	ldr	r3, [pc, #28]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b50:	2201      	movs	r2, #1
   91b52:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91b54:	4b05      	ldr	r3, [pc, #20]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b56:	781b      	ldrb	r3, [r3, #0]
   91b58:	3301      	adds	r3, #1
   91b5a:	b2da      	uxtb	r2, r3
   91b5c:	4b03      	ldr	r3, [pc, #12]	; (91b6c <Cl_Timer_Create_TickHour_Event+0x38>)
   91b5e:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   91b60:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   91b62:	4618      	mov	r0, r3
   91b64:	46bd      	mov	sp, r7
   91b66:	bc80      	pop	{r7}
   91b68:	4770      	bx	lr
   91b6a:	bf00      	nop
   91b6c:	20072d30 	.word	0x20072d30

00091b70 <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   91b70:	b480      	push	{r7}
   91b72:	b085      	sub	sp, #20
   91b74:	af00      	add	r7, sp, #0
   91b76:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   91b78:	4b07      	ldr	r3, [pc, #28]	; (91b98 <mdelay+0x28>)
   91b7a:	681b      	ldr	r3, [r3, #0]
   91b7c:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   91b7e:	bf00      	nop
   91b80:	4b05      	ldr	r3, [pc, #20]	; (91b98 <mdelay+0x28>)
   91b82:	681a      	ldr	r2, [r3, #0]
   91b84:	68fb      	ldr	r3, [r7, #12]
   91b86:	1ad2      	subs	r2, r2, r3
   91b88:	687b      	ldr	r3, [r7, #4]
   91b8a:	429a      	cmp	r2, r3
   91b8c:	d3f8      	bcc.n	91b80 <mdelay+0x10>
}
   91b8e:	bf00      	nop
   91b90:	3714      	adds	r7, #20
   91b92:	46bd      	mov	sp, r7
   91b94:	bc80      	pop	{r7}
   91b96:	4770      	bx	lr
   91b98:	2007263c 	.word	0x2007263c

00091b9c <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   91b9c:	b580      	push	{r7, lr}
   91b9e:	b082      	sub	sp, #8
   91ba0:	af00      	add	r7, sp, #0
   91ba2:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   91ba4:	6878      	ldr	r0, [r7, #4]
   91ba6:	4b03      	ldr	r3, [pc, #12]	; (91bb4 <cl_wait+0x18>)
   91ba8:	4798      	blx	r3
	return CL_OK;
   91baa:	2300      	movs	r3, #0
}
   91bac:	4618      	mov	r0, r3
   91bae:	3708      	adds	r7, #8
   91bb0:	46bd      	mov	sp, r7
   91bb2:	bd80      	pop	{r7, pc}
   91bb4:	00091b71 	.word	0x00091b71

00091bb8 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   91bb8:	b580      	push	{r7, lr}
   91bba:	b082      	sub	sp, #8
   91bbc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   91bbe:	4b07      	ldr	r3, [pc, #28]	; (91bdc <cl_systemtickcallback+0x24>)
   91bc0:	4798      	blx	r3
   91bc2:	4603      	mov	r3, r0
   91bc4:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   91bc6:	4b06      	ldr	r3, [pc, #24]	; (91be0 <cl_systemtickcallback+0x28>)
   91bc8:	681b      	ldr	r3, [r3, #0]
   91bca:	3301      	adds	r3, #1
   91bcc:	4a04      	ldr	r2, [pc, #16]	; (91be0 <cl_systemtickcallback+0x28>)
   91bce:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   91bd0:	2300      	movs	r3, #0
}
   91bd2:	4618      	mov	r0, r3
   91bd4:	3708      	adds	r7, #8
   91bd6:	46bd      	mov	sp, r7
   91bd8:	bd80      	pop	{r7, pc}
   91bda:	bf00      	nop
   91bdc:	00091795 	.word	0x00091795
   91be0:	2007263c 	.word	0x2007263c

00091be4 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   91be4:	b480      	push	{r7}
   91be6:	b085      	sub	sp, #20
   91be8:	af00      	add	r7, sp, #0
   91bea:	6078      	str	r0, [r7, #4]
   91bec:	460b      	mov	r3, r1
   91bee:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   91bf0:	2300      	movs	r3, #0
   91bf2:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   91bf4:	687b      	ldr	r3, [r7, #4]
   91bf6:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91bf8:	2300      	movs	r3, #0
   91bfa:	73fb      	strb	r3, [r7, #15]
   91bfc:	e007      	b.n	91c0e <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   91bfe:	7bfb      	ldrb	r3, [r7, #15]
   91c00:	687a      	ldr	r2, [r7, #4]
   91c02:	4413      	add	r3, r2
   91c04:	2200      	movs	r2, #0
   91c06:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91c08:	7bfb      	ldrb	r3, [r7, #15]
   91c0a:	3301      	adds	r3, #1
   91c0c:	73fb      	strb	r3, [r7, #15]
   91c0e:	7bfa      	ldrb	r2, [r7, #15]
   91c10:	78fb      	ldrb	r3, [r7, #3]
   91c12:	429a      	cmp	r2, r3
   91c14:	d3f3      	bcc.n	91bfe <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   91c16:	2300      	movs	r3, #0
   91c18:	4618      	mov	r0, r3
   91c1a:	3714      	adds	r7, #20
   91c1c:	46bd      	mov	sp, r7
   91c1e:	bc80      	pop	{r7}
   91c20:	4770      	bx	lr
   91c22:	bf00      	nop

00091c24 <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   91c24:	b580      	push	{r7, lr}
   91c26:	b084      	sub	sp, #16
   91c28:	af00      	add	r7, sp, #0
   91c2a:	4603      	mov	r3, r0
   91c2c:	6039      	str	r1, [r7, #0]
   91c2e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   91c30:	2300      	movs	r3, #0
   91c32:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   91c34:	2300      	movs	r3, #0
   91c36:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   91c38:	2300      	movs	r3, #0
   91c3a:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   91c3c:	4b7e      	ldr	r3, [pc, #504]	; (91e38 <cl_bp_controller+0x214>)
   91c3e:	781b      	ldrb	r3, [r3, #0]
   91c40:	2b04      	cmp	r3, #4
   91c42:	f200 80f2 	bhi.w	91e2a <cl_bp_controller+0x206>
   91c46:	a201      	add	r2, pc, #4	; (adr r2, 91c4c <cl_bp_controller+0x28>)
   91c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91c4c:	00091c61 	.word	0x00091c61
   91c50:	00091cbd 	.word	0x00091cbd
   91c54:	00091d67 	.word	0x00091d67
   91c58:	00091db9 	.word	0x00091db9
   91c5c:	00091e2b 	.word	0x00091e2b
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   91c60:	79fb      	ldrb	r3, [r7, #7]
   91c62:	2b01      	cmp	r3, #1
   91c64:	d002      	beq.n	91c6c <cl_bp_controller+0x48>
   91c66:	2b02      	cmp	r3, #2
   91c68:	d00e      	beq.n	91c88 <cl_bp_controller+0x64>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   91c6a:	e026      	b.n	91cba <cl_bp_controller+0x96>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91c6c:	683b      	ldr	r3, [r7, #0]
   91c6e:	4a73      	ldr	r2, [pc, #460]	; (91e3c <cl_bp_controller+0x218>)
   91c70:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   91c72:	4b72      	ldr	r3, [pc, #456]	; (91e3c <cl_bp_controller+0x218>)
   91c74:	681b      	ldr	r3, [r3, #0]
   91c76:	4a72      	ldr	r2, [pc, #456]	; (91e40 <cl_bp_controller+0x21c>)
   91c78:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   91c7a:	4b71      	ldr	r3, [pc, #452]	; (91e40 <cl_bp_controller+0x21c>)
   91c7c:	681b      	ldr	r3, [r3, #0]
   91c7e:	4619      	mov	r1, r3
   91c80:	2003      	movs	r0, #3
   91c82:	4b70      	ldr	r3, [pc, #448]	; (91e44 <cl_bp_controller+0x220>)
   91c84:	4798      	blx	r3
			break;
   91c86:	e018      	b.n	91cba <cl_bp_controller+0x96>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91c88:	2101      	movs	r1, #1
   91c8a:	2001      	movs	r0, #1
   91c8c:	4b6e      	ldr	r3, [pc, #440]	; (91e48 <cl_bp_controller+0x224>)
   91c8e:	4798      	blx	r3
   91c90:	4603      	mov	r3, r0
   91c92:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91c94:	2003      	movs	r0, #3
   91c96:	4b6d      	ldr	r3, [pc, #436]	; (91e4c <cl_bp_controller+0x228>)
   91c98:	4798      	blx	r3
   91c9a:	4603      	mov	r3, r0
   91c9c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91c9e:	4b6c      	ldr	r3, [pc, #432]	; (91e50 <cl_bp_controller+0x22c>)
   91ca0:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91ca2:	463b      	mov	r3, r7
   91ca4:	2200      	movs	r2, #0
   91ca6:	4619      	mov	r1, r3
   91ca8:	2035      	movs	r0, #53	; 0x35
   91caa:	4b6a      	ldr	r3, [pc, #424]	; (91e54 <cl_bp_controller+0x230>)
   91cac:	4798      	blx	r3
   91cae:	4603      	mov	r3, r0
   91cb0:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91cb2:	4b61      	ldr	r3, [pc, #388]	; (91e38 <cl_bp_controller+0x214>)
   91cb4:	2201      	movs	r2, #1
   91cb6:	701a      	strb	r2, [r3, #0]
			break;
   91cb8:	bf00      	nop
			
			default:break;
			
		}
		break;
   91cba:	e0b7      	b.n	91e2c <cl_bp_controller+0x208>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   91cbc:	79fb      	ldrb	r3, [r7, #7]
   91cbe:	3b01      	subs	r3, #1
   91cc0:	2b06      	cmp	r3, #6
   91cc2:	d84e      	bhi.n	91d62 <cl_bp_controller+0x13e>
   91cc4:	a201      	add	r2, pc, #4	; (adr r2, 91ccc <cl_bp_controller+0xa8>)
   91cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91cca:	bf00      	nop
   91ccc:	00091d1b 	.word	0x00091d1b
   91cd0:	00091ce9 	.word	0x00091ce9
   91cd4:	00091d63 	.word	0x00091d63
   91cd8:	00091d2d 	.word	0x00091d2d
   91cdc:	00091d5b 	.word	0x00091d5b
   91ce0:	00091d63 	.word	0x00091d63
   91ce4:	00091d63 	.word	0x00091d63
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91ce8:	2003      	movs	r0, #3
   91cea:	4b58      	ldr	r3, [pc, #352]	; (91e4c <cl_bp_controller+0x228>)
   91cec:	4798      	blx	r3
   91cee:	4603      	mov	r3, r0
   91cf0:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91cf2:	2101      	movs	r1, #1
   91cf4:	2001      	movs	r0, #1
   91cf6:	4b54      	ldr	r3, [pc, #336]	; (91e48 <cl_bp_controller+0x224>)
   91cf8:	4798      	blx	r3
   91cfa:	4603      	mov	r3, r0
   91cfc:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91cfe:	4b54      	ldr	r3, [pc, #336]	; (91e50 <cl_bp_controller+0x22c>)
   91d00:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91d02:	463b      	mov	r3, r7
   91d04:	2200      	movs	r2, #0
   91d06:	4619      	mov	r1, r3
   91d08:	2035      	movs	r0, #53	; 0x35
   91d0a:	4b52      	ldr	r3, [pc, #328]	; (91e54 <cl_bp_controller+0x230>)
   91d0c:	4798      	blx	r3
   91d0e:	4603      	mov	r3, r0
   91d10:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91d12:	4b49      	ldr	r3, [pc, #292]	; (91e38 <cl_bp_controller+0x214>)
   91d14:	2201      	movs	r2, #1
   91d16:	701a      	strb	r2, [r3, #0]
			
			break;
   91d18:	e024      	b.n	91d64 <cl_bp_controller+0x140>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   91d1a:	683b      	ldr	r3, [r7, #0]
   91d1c:	4619      	mov	r1, r3
   91d1e:	2003      	movs	r0, #3
   91d20:	4b48      	ldr	r3, [pc, #288]	; (91e44 <cl_bp_controller+0x220>)
   91d22:	4798      	blx	r3
			bp_state =  CL_BP_STATE_STARTED;
   91d24:	4b44      	ldr	r3, [pc, #272]	; (91e38 <cl_bp_controller+0x214>)
   91d26:	2201      	movs	r2, #1
   91d28:	701a      	strb	r2, [r3, #0]
			break;
   91d2a:	e01b      	b.n	91d64 <cl_bp_controller+0x140>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   91d2c:	2003      	movs	r0, #3
   91d2e:	4b4a      	ldr	r3, [pc, #296]	; (91e58 <cl_bp_controller+0x234>)
   91d30:	4798      	blx	r3
   91d32:	4603      	mov	r3, r0
   91d34:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91d36:	4b46      	ldr	r3, [pc, #280]	; (91e50 <cl_bp_controller+0x22c>)
   91d38:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   91d3a:	463b      	mov	r3, r7
   91d3c:	2200      	movs	r2, #0
   91d3e:	4619      	mov	r1, r3
   91d40:	2036      	movs	r0, #54	; 0x36
   91d42:	4b44      	ldr	r3, [pc, #272]	; (91e54 <cl_bp_controller+0x230>)
   91d44:	4798      	blx	r3
   91d46:	4603      	mov	r3, r0
   91d48:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   91d4a:	4b44      	ldr	r3, [pc, #272]	; (91e5c <cl_bp_controller+0x238>)
   91d4c:	4798      	blx	r3
   91d4e:	4603      	mov	r3, r0
   91d50:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   91d52:	4b39      	ldr	r3, [pc, #228]	; (91e38 <cl_bp_controller+0x214>)
   91d54:	2202      	movs	r2, #2
   91d56:	701a      	strb	r2, [r3, #0]
			break;
   91d58:	e004      	b.n	91d64 <cl_bp_controller+0x140>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   91d5a:	4b37      	ldr	r3, [pc, #220]	; (91e38 <cl_bp_controller+0x214>)
   91d5c:	2200      	movs	r2, #0
   91d5e:	701a      	strb	r2, [r3, #0]
			break;
   91d60:	e000      	b.n	91d64 <cl_bp_controller+0x140>
			default:break;
   91d62:	bf00      	nop
			
		}
		break;
   91d64:	e062      	b.n	91e2c <cl_bp_controller+0x208>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   91d66:	79fb      	ldrb	r3, [r7, #7]
   91d68:	2b01      	cmp	r3, #1
   91d6a:	d002      	beq.n	91d72 <cl_bp_controller+0x14e>
   91d6c:	2b02      	cmp	r3, #2
   91d6e:	d009      	beq.n	91d84 <cl_bp_controller+0x160>
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   91d70:	e021      	b.n	91db6 <cl_bp_controller+0x192>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91d72:	683b      	ldr	r3, [r7, #0]
   91d74:	4a31      	ldr	r2, [pc, #196]	; (91e3c <cl_bp_controller+0x218>)
   91d76:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   91d78:	683b      	ldr	r3, [r7, #0]
   91d7a:	4619      	mov	r1, r3
   91d7c:	2003      	movs	r0, #3
   91d7e:	4b31      	ldr	r3, [pc, #196]	; (91e44 <cl_bp_controller+0x220>)
   91d80:	4798      	blx	r3
			break;
   91d82:	e018      	b.n	91db6 <cl_bp_controller+0x192>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91d84:	2003      	movs	r0, #3
   91d86:	4b31      	ldr	r3, [pc, #196]	; (91e4c <cl_bp_controller+0x228>)
   91d88:	4798      	blx	r3
   91d8a:	4603      	mov	r3, r0
   91d8c:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91d8e:	2101      	movs	r1, #1
   91d90:	2001      	movs	r0, #1
   91d92:	4b2d      	ldr	r3, [pc, #180]	; (91e48 <cl_bp_controller+0x224>)
   91d94:	4798      	blx	r3
   91d96:	4603      	mov	r3, r0
   91d98:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91d9a:	4b2d      	ldr	r3, [pc, #180]	; (91e50 <cl_bp_controller+0x22c>)
   91d9c:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91d9e:	463b      	mov	r3, r7
   91da0:	2200      	movs	r2, #0
   91da2:	4619      	mov	r1, r3
   91da4:	2035      	movs	r0, #53	; 0x35
   91da6:	4b2b      	ldr	r3, [pc, #172]	; (91e54 <cl_bp_controller+0x230>)
   91da8:	4798      	blx	r3
   91daa:	4603      	mov	r3, r0
   91dac:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91dae:	4b22      	ldr	r3, [pc, #136]	; (91e38 <cl_bp_controller+0x214>)
   91db0:	2201      	movs	r2, #1
   91db2:	701a      	strb	r2, [r3, #0]
			break;
   91db4:	bf00      	nop
			default:break;
			
		}
		break;
   91db6:	e039      	b.n	91e2c <cl_bp_controller+0x208>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   91db8:	79fb      	ldrb	r3, [r7, #7]
   91dba:	2b02      	cmp	r3, #2
   91dbc:	d008      	beq.n	91dd0 <cl_bp_controller+0x1ac>
   91dbe:	2b04      	cmp	r3, #4
   91dc0:	d01f      	beq.n	91e02 <cl_bp_controller+0x1de>
   91dc2:	2b01      	cmp	r3, #1
   91dc4:	d000      	beq.n	91dc8 <cl_bp_controller+0x1a4>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   91dc6:	e02f      	b.n	91e28 <cl_bp_controller+0x204>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91dc8:	683b      	ldr	r3, [r7, #0]
   91dca:	4a1c      	ldr	r2, [pc, #112]	; (91e3c <cl_bp_controller+0x218>)
   91dcc:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   91dce:	e02b      	b.n	91e28 <cl_bp_controller+0x204>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91dd0:	2003      	movs	r0, #3
   91dd2:	4b1e      	ldr	r3, [pc, #120]	; (91e4c <cl_bp_controller+0x228>)
   91dd4:	4798      	blx	r3
   91dd6:	4603      	mov	r3, r0
   91dd8:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91dda:	2101      	movs	r1, #1
   91ddc:	2001      	movs	r0, #1
   91dde:	4b1a      	ldr	r3, [pc, #104]	; (91e48 <cl_bp_controller+0x224>)
   91de0:	4798      	blx	r3
   91de2:	4603      	mov	r3, r0
   91de4:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91de6:	4b1a      	ldr	r3, [pc, #104]	; (91e50 <cl_bp_controller+0x22c>)
   91de8:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91dea:	463b      	mov	r3, r7
   91dec:	2200      	movs	r2, #0
   91dee:	4619      	mov	r1, r3
   91df0:	2035      	movs	r0, #53	; 0x35
   91df2:	4b18      	ldr	r3, [pc, #96]	; (91e54 <cl_bp_controller+0x230>)
   91df4:	4798      	blx	r3
   91df6:	4603      	mov	r3, r0
   91df8:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91dfa:	4b0f      	ldr	r3, [pc, #60]	; (91e38 <cl_bp_controller+0x214>)
   91dfc:	2201      	movs	r2, #1
   91dfe:	701a      	strb	r2, [r3, #0]
			break;
   91e00:	e012      	b.n	91e28 <cl_bp_controller+0x204>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   91e02:	2003      	movs	r0, #3
   91e04:	4b14      	ldr	r3, [pc, #80]	; (91e58 <cl_bp_controller+0x234>)
   91e06:	4798      	blx	r3
   91e08:	4603      	mov	r3, r0
   91e0a:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91e0c:	4b10      	ldr	r3, [pc, #64]	; (91e50 <cl_bp_controller+0x22c>)
   91e0e:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   91e10:	4b09      	ldr	r3, [pc, #36]	; (91e38 <cl_bp_controller+0x214>)
   91e12:	2202      	movs	r2, #2
   91e14:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   91e16:	463b      	mov	r3, r7
   91e18:	2200      	movs	r2, #0
   91e1a:	4619      	mov	r1, r3
   91e1c:	2036      	movs	r0, #54	; 0x36
   91e1e:	4b0d      	ldr	r3, [pc, #52]	; (91e54 <cl_bp_controller+0x230>)
   91e20:	4798      	blx	r3
   91e22:	4603      	mov	r3, r0
   91e24:	73fb      	strb	r3, [r7, #15]
			break;
   91e26:	bf00      	nop
			default:break;
			
		}
		break;
   91e28:	e000      	b.n	91e2c <cl_bp_controller+0x208>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   91e2a:	bf00      	nop
		
		
	}
	return CL_OK;
   91e2c:	2300      	movs	r3, #0
   91e2e:	4618      	mov	r0, r3
   91e30:	3710      	adds	r7, #16
   91e32:	46bd      	mov	sp, r7
   91e34:	bd80      	pop	{r7, pc}
   91e36:	bf00      	nop
   91e38:	20072640 	.word	0x20072640
   91e3c:	20072644 	.word	0x20072644
   91e40:	200709b4 	.word	0x200709b4
   91e44:	000968f5 	.word	0x000968f5
   91e48:	00082efd 	.word	0x00082efd
   91e4c:	000967dd 	.word	0x000967dd
   91e50:	00091e61 	.word	0x00091e61
   91e54:	00098601 	.word	0x00098601
   91e58:	00096819 	.word	0x00096819
   91e5c:	00091e79 	.word	0x00091e79

00091e60 <cl_bp_pumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,bp_period = 0,bp_avg_period = 0, bp_freq_in_min = 0;
static Cl_Uint16Type bp_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   91e60:	b480      	push	{r7}
   91e62:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   91e64:	4b03      	ldr	r3, [pc, #12]	; (91e74 <cl_bp_pumpFeedback_start+0x14>)
   91e66:	2201      	movs	r2, #1
   91e68:	701a      	strb	r2, [r3, #0]
	return 0;
   91e6a:	2300      	movs	r3, #0
}
   91e6c:	4618      	mov	r0, r3
   91e6e:	46bd      	mov	sp, r7
   91e70:	bc80      	pop	{r7}
   91e72:	4770      	bx	lr
   91e74:	2007264a 	.word	0x2007264a

00091e78 <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   91e78:	b480      	push	{r7}
   91e7a:	af00      	add	r7, sp, #0
	
	return 0;
   91e7c:	2300      	movs	r3, #0
}
   91e7e:	4618      	mov	r0, r3
   91e80:	46bd      	mov	sp, r7
   91e82:	bc80      	pop	{r7}
   91e84:	4770      	bx	lr
   91e86:	bf00      	nop

00091e88 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   91e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   91e8a:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   91e8c:	4b64      	ldr	r3, [pc, #400]	; (92020 <cl_bp_pumpFeedback_timer+0x198>)
   91e8e:	781b      	ldrb	r3, [r3, #0]
   91e90:	2b00      	cmp	r3, #0
   91e92:	f000 80b9 	beq.w	92008 <cl_bp_pumpFeedback_timer+0x180>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   91e96:	4963      	ldr	r1, [pc, #396]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   91e98:	201c      	movs	r0, #28
   91e9a:	4b63      	ldr	r3, [pc, #396]	; (92028 <cl_bp_pumpFeedback_timer+0x1a0>)
   91e9c:	4798      	blx	r3

	fivemscounter++;
   91e9e:	4b63      	ldr	r3, [pc, #396]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91ea0:	881b      	ldrh	r3, [r3, #0]
   91ea2:	3301      	adds	r3, #1
   91ea4:	b29a      	uxth	r2, r3
   91ea6:	4b61      	ldr	r3, [pc, #388]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91ea8:	801a      	strh	r2, [r3, #0]
			if(fivemscounter > 1000)
   91eaa:	4b60      	ldr	r3, [pc, #384]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91eac:	881b      	ldrh	r3, [r3, #0]
   91eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   91eb2:	d903      	bls.n	91ebc <cl_bp_pumpFeedback_timer+0x34>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   91eb4:	2101      	movs	r1, #1
   91eb6:	2037      	movs	r0, #55	; 0x37
   91eb8:	4b5d      	ldr	r3, [pc, #372]	; (92030 <cl_bp_pumpFeedback_timer+0x1a8>)
   91eba:	4798      	blx	r3
			}
			if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   91ebc:	4b58      	ldr	r3, [pc, #352]	; (92020 <cl_bp_pumpFeedback_timer+0x198>)
   91ebe:	781b      	ldrb	r3, [r3, #0]
   91ec0:	2b01      	cmp	r3, #1
   91ec2:	d106      	bne.n	91ed2 <cl_bp_pumpFeedback_timer+0x4a>
   91ec4:	4b5b      	ldr	r3, [pc, #364]	; (92034 <cl_bp_pumpFeedback_timer+0x1ac>)
   91ec6:	881b      	ldrh	r3, [r3, #0]
   91ec8:	2b02      	cmp	r3, #2
   91eca:	d902      	bls.n	91ed2 <cl_bp_pumpFeedback_timer+0x4a>
			{
				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   91ecc:	4b54      	ldr	r3, [pc, #336]	; (92020 <cl_bp_pumpFeedback_timer+0x198>)
   91ece:	2202      	movs	r2, #2
   91ed0:	701a      	strb	r2, [r3, #0]
			}
	
			//#if 0
			if(count_state == false)
   91ed2:	4b59      	ldr	r3, [pc, #356]	; (92038 <cl_bp_pumpFeedback_timer+0x1b0>)
   91ed4:	781b      	ldrb	r3, [r3, #0]
   91ed6:	f083 0301 	eor.w	r3, r3, #1
   91eda:	b2db      	uxtb	r3, r3
   91edc:	2b00      	cmp	r3, #0
   91ede:	d012      	beq.n	91f06 <cl_bp_pumpFeedback_timer+0x7e>
			{
				if(bp_rotataion_marker == 0 )
   91ee0:	4b50      	ldr	r3, [pc, #320]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   91ee2:	881b      	ldrh	r3, [r3, #0]
   91ee4:	2b00      	cmp	r3, #0
   91ee6:	f040 808b 	bne.w	92000 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   91eea:	4b54      	ldr	r3, [pc, #336]	; (9203c <cl_bp_pumpFeedback_timer+0x1b4>)
   91eec:	881a      	ldrh	r2, [r3, #0]
   91eee:	4b4d      	ldr	r3, [pc, #308]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   91ef0:	881b      	ldrh	r3, [r3, #0]
   91ef2:	429a      	cmp	r2, r3
   91ef4:	f000 8084 	beq.w	92000 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   91ef8:	4b4f      	ldr	r3, [pc, #316]	; (92038 <cl_bp_pumpFeedback_timer+0x1b0>)
   91efa:	2201      	movs	r2, #1
   91efc:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						fivemscounter = 0;
   91efe:	4b4b      	ldr	r3, [pc, #300]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91f00:	2200      	movs	r2, #0
   91f02:	801a      	strh	r2, [r3, #0]
   91f04:	e07c      	b.n	92000 <cl_bp_pumpFeedback_timer+0x178>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   91f06:	4b47      	ldr	r3, [pc, #284]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   91f08:	881b      	ldrh	r3, [r3, #0]
   91f0a:	2b00      	cmp	r3, #0
   91f0c:	d178      	bne.n	92000 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   91f0e:	4b4b      	ldr	r3, [pc, #300]	; (9203c <cl_bp_pumpFeedback_timer+0x1b4>)
   91f10:	881a      	ldrh	r2, [r3, #0]
   91f12:	4b44      	ldr	r3, [pc, #272]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   91f14:	881b      	ldrh	r3, [r3, #0]
   91f16:	429a      	cmp	r2, r3
   91f18:	d072      	beq.n	92000 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   91f1a:	4b47      	ldr	r3, [pc, #284]	; (92038 <cl_bp_pumpFeedback_timer+0x1b0>)
   91f1c:	2201      	movs	r2, #1
   91f1e:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   91f20:	4b44      	ldr	r3, [pc, #272]	; (92034 <cl_bp_pumpFeedback_timer+0x1ac>)
   91f22:	881b      	ldrh	r3, [r3, #0]
   91f24:	3301      	adds	r3, #1
   91f26:	b29a      	uxth	r2, r3
   91f28:	4b42      	ldr	r3, [pc, #264]	; (92034 <cl_bp_pumpFeedback_timer+0x1ac>)
   91f2a:	801a      	strh	r2, [r3, #0]
						bp_period = fivemscounter*100;
   91f2c:	4b3f      	ldr	r3, [pc, #252]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91f2e:	881b      	ldrh	r3, [r3, #0]
   91f30:	461a      	mov	r2, r3
   91f32:	0092      	lsls	r2, r2, #2
   91f34:	4413      	add	r3, r2
   91f36:	461a      	mov	r2, r3
   91f38:	0091      	lsls	r1, r2, #2
   91f3a:	461a      	mov	r2, r3
   91f3c:	460b      	mov	r3, r1
   91f3e:	4413      	add	r3, r2
   91f40:	009b      	lsls	r3, r3, #2
   91f42:	b29a      	uxth	r2, r3
   91f44:	4b3e      	ldr	r3, [pc, #248]	; (92040 <cl_bp_pumpFeedback_timer+0x1b8>)
   91f46:	801a      	strh	r2, [r3, #0]
				
						if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   91f48:	4b35      	ldr	r3, [pc, #212]	; (92020 <cl_bp_pumpFeedback_timer+0x198>)
   91f4a:	781b      	ldrb	r3, [r3, #0]
   91f4c:	2b01      	cmp	r3, #1
   91f4e:	d04a      	beq.n	91fe6 <cl_bp_pumpFeedback_timer+0x15e>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   91f50:	4b3b      	ldr	r3, [pc, #236]	; (92040 <cl_bp_pumpFeedback_timer+0x1b8>)
   91f52:	881b      	ldrh	r3, [r3, #0]
   91f54:	461a      	mov	r2, r3
   91f56:	4b3b      	ldr	r3, [pc, #236]	; (92044 <cl_bp_pumpFeedback_timer+0x1bc>)
   91f58:	4610      	mov	r0, r2
   91f5a:	4798      	blx	r3
   91f5c:	4605      	mov	r5, r0
   91f5e:	460e      	mov	r6, r1
   91f60:	4b39      	ldr	r3, [pc, #228]	; (92048 <cl_bp_pumpFeedback_timer+0x1c0>)
   91f62:	881b      	ldrh	r3, [r3, #0]
   91f64:	461a      	mov	r2, r3
   91f66:	4b37      	ldr	r3, [pc, #220]	; (92044 <cl_bp_pumpFeedback_timer+0x1bc>)
   91f68:	4610      	mov	r0, r2
   91f6a:	4798      	blx	r3
   91f6c:	4c37      	ldr	r4, [pc, #220]	; (9204c <cl_bp_pumpFeedback_timer+0x1c4>)
   91f6e:	a328      	add	r3, pc, #160	; (adr r3, 92010 <cl_bp_pumpFeedback_timer+0x188>)
   91f70:	e9d3 2300 	ldrd	r2, r3, [r3]
   91f74:	47a0      	blx	r4
   91f76:	4603      	mov	r3, r0
   91f78:	460c      	mov	r4, r1
   91f7a:	461a      	mov	r2, r3
   91f7c:	4623      	mov	r3, r4
   91f7e:	4c34      	ldr	r4, [pc, #208]	; (92050 <cl_bp_pumpFeedback_timer+0x1c8>)
   91f80:	4628      	mov	r0, r5
   91f82:	4631      	mov	r1, r6
   91f84:	47a0      	blx	r4
   91f86:	4603      	mov	r3, r0
   91f88:	2b00      	cmp	r3, #0
   91f8a:	d105      	bne.n	91f98 <cl_bp_pumpFeedback_timer+0x110>
   91f8c:	4b2c      	ldr	r3, [pc, #176]	; (92040 <cl_bp_pumpFeedback_timer+0x1b8>)
   91f8e:	881b      	ldrh	r3, [r3, #0]
   91f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
   91f94:	4293      	cmp	r3, r2
   91f96:	d904      	bls.n	91fa2 <cl_bp_pumpFeedback_timer+0x11a>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
							Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   91f98:	2101      	movs	r1, #1
   91f9a:	2037      	movs	r0, #55	; 0x37
   91f9c:	4b24      	ldr	r3, [pc, #144]	; (92030 <cl_bp_pumpFeedback_timer+0x1a8>)
   91f9e:	4798      	blx	r3
   91fa0:	e021      	b.n	91fe6 <cl_bp_pumpFeedback_timer+0x15e>
							}
							else if(bp_period < (0.99 *bp_expected_period))
   91fa2:	4b27      	ldr	r3, [pc, #156]	; (92040 <cl_bp_pumpFeedback_timer+0x1b8>)
   91fa4:	881b      	ldrh	r3, [r3, #0]
   91fa6:	461a      	mov	r2, r3
   91fa8:	4b26      	ldr	r3, [pc, #152]	; (92044 <cl_bp_pumpFeedback_timer+0x1bc>)
   91faa:	4610      	mov	r0, r2
   91fac:	4798      	blx	r3
   91fae:	4605      	mov	r5, r0
   91fb0:	460e      	mov	r6, r1
   91fb2:	4b25      	ldr	r3, [pc, #148]	; (92048 <cl_bp_pumpFeedback_timer+0x1c0>)
   91fb4:	881b      	ldrh	r3, [r3, #0]
   91fb6:	461a      	mov	r2, r3
   91fb8:	4b22      	ldr	r3, [pc, #136]	; (92044 <cl_bp_pumpFeedback_timer+0x1bc>)
   91fba:	4610      	mov	r0, r2
   91fbc:	4798      	blx	r3
   91fbe:	4c23      	ldr	r4, [pc, #140]	; (9204c <cl_bp_pumpFeedback_timer+0x1c4>)
   91fc0:	a315      	add	r3, pc, #84	; (adr r3, 92018 <cl_bp_pumpFeedback_timer+0x190>)
   91fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   91fc6:	47a0      	blx	r4
   91fc8:	4603      	mov	r3, r0
   91fca:	460c      	mov	r4, r1
   91fcc:	461a      	mov	r2, r3
   91fce:	4623      	mov	r3, r4
   91fd0:	4c20      	ldr	r4, [pc, #128]	; (92054 <cl_bp_pumpFeedback_timer+0x1cc>)
   91fd2:	4628      	mov	r0, r5
   91fd4:	4631      	mov	r1, r6
   91fd6:	47a0      	blx	r4
   91fd8:	4603      	mov	r3, r0
   91fda:	2b00      	cmp	r3, #0
   91fdc:	d003      	beq.n	91fe6 <cl_bp_pumpFeedback_timer+0x15e>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_FAST;
							Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   91fde:	2101      	movs	r1, #1
   91fe0:	2036      	movs	r0, #54	; 0x36
   91fe2:	4b13      	ldr	r3, [pc, #76]	; (92030 <cl_bp_pumpFeedback_timer+0x1a8>)
   91fe4:	4798      	blx	r3
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   91fe6:	4b16      	ldr	r3, [pc, #88]	; (92040 <cl_bp_pumpFeedback_timer+0x1b8>)
   91fe8:	881b      	ldrh	r3, [r3, #0]
   91fea:	461a      	mov	r2, r3
   91fec:	f64e 2360 	movw	r3, #60000	; 0xea60
   91ff0:	fb93 f3f2 	sdiv	r3, r3, r2
   91ff4:	b29a      	uxth	r2, r3
   91ff6:	4b18      	ldr	r3, [pc, #96]	; (92058 <cl_bp_pumpFeedback_timer+0x1d0>)
   91ff8:	801a      	strh	r2, [r3, #0]
						fivemscounter = 0;
   91ffa:	4b0c      	ldr	r3, [pc, #48]	; (9202c <cl_bp_pumpFeedback_timer+0x1a4>)
   91ffc:	2200      	movs	r2, #0
   91ffe:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   92000:	4b08      	ldr	r3, [pc, #32]	; (92024 <cl_bp_pumpFeedback_timer+0x19c>)
   92002:	881a      	ldrh	r2, [r3, #0]
   92004:	4b0d      	ldr	r3, [pc, #52]	; (9203c <cl_bp_pumpFeedback_timer+0x1b4>)
   92006:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   92008:	2300      	movs	r3, #0
}
   9200a:	4618      	mov	r0, r3
   9200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   9200e:	bf00      	nop
   92010:	c28f5c29 	.word	0xc28f5c29
   92014:	3ff028f5 	.word	0x3ff028f5
   92018:	7ae147ae 	.word	0x7ae147ae
   9201c:	3fefae14 	.word	0x3fefae14
   92020:	2007264a 	.word	0x2007264a
   92024:	200709b8 	.word	0x200709b8
   92028:	0008d499 	.word	0x0008d499
   9202c:	2007264c 	.word	0x2007264c
   92030:	000830b1 	.word	0x000830b1
   92034:	20072652 	.word	0x20072652
   92038:	20072654 	.word	0x20072654
   9203c:	200709ba 	.word	0x200709ba
   92040:	2007264e 	.word	0x2007264e
   92044:	000a1d41 	.word	0x000a1d41
   92048:	20072648 	.word	0x20072648
   9204c:	000a1e0d 	.word	0x000a1e0d
   92050:	000a232d 	.word	0x000a232d
   92054:	000a22f1 	.word	0x000a22f1
   92058:	20072650 	.word	0x20072650

0009205c <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   9205c:	b580      	push	{r7, lr}
   9205e:	b084      	sub	sp, #16
   92060:	af00      	add	r7, sp, #0
   92062:	4603      	mov	r3, r0
   92064:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   92066:	2300      	movs	r3, #0
   92068:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   9206a:	4b28      	ldr	r3, [pc, #160]	; (9210c <cl_deaeration_controller+0xb0>)
   9206c:	781b      	ldrb	r3, [r3, #0]
   9206e:	2b01      	cmp	r3, #1
   92070:	d00d      	beq.n	9208e <cl_deaeration_controller+0x32>
   92072:	2b02      	cmp	r3, #2
   92074:	d02a      	beq.n	920cc <cl_deaeration_controller+0x70>
   92076:	2b00      	cmp	r3, #0
   92078:	d000      	beq.n	9207c <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   9207a:	e042      	b.n	92102 <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   9207c:	79fb      	ldrb	r3, [r7, #7]
   9207e:	2b00      	cmp	r3, #0
   92080:	d000      	beq.n	92084 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   92082:	e003      	b.n	9208c <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   92084:	4b21      	ldr	r3, [pc, #132]	; (9210c <cl_deaeration_controller+0xb0>)
   92086:	2201      	movs	r2, #1
   92088:	701a      	strb	r2, [r3, #0]
					break;
   9208a:	bf00      	nop
					default:break;
				}
		break;
   9208c:	e039      	b.n	92102 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   9208e:	79fb      	ldrb	r3, [r7, #7]
   92090:	2b01      	cmp	r3, #1
   92092:	d002      	beq.n	9209a <cl_deaeration_controller+0x3e>
   92094:	2b02      	cmp	r3, #2
   92096:	d004      	beq.n	920a2 <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   92098:	e017      	b.n	920ca <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   9209a:	4b1c      	ldr	r3, [pc, #112]	; (9210c <cl_deaeration_controller+0xb0>)
   9209c:	2200      	movs	r2, #0
   9209e:	701a      	strb	r2, [r3, #0]
				break;
   920a0:	e013      	b.n	920ca <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   920a2:	f107 030c 	add.w	r3, r7, #12
   920a6:	4619      	mov	r1, r3
   920a8:	200a      	movs	r0, #10
   920aa:	4b19      	ldr	r3, [pc, #100]	; (92110 <cl_deaeration_controller+0xb4>)
   920ac:	4798      	blx	r3
				if (dac2_status < 10)
   920ae:	89bb      	ldrh	r3, [r7, #12]
   920b0:	2b09      	cmp	r3, #9
   920b2:	d806      	bhi.n	920c2 <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   920b4:	2013      	movs	r0, #19
   920b6:	4b17      	ldr	r3, [pc, #92]	; (92114 <cl_deaeration_controller+0xb8>)
   920b8:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   920ba:	4b14      	ldr	r3, [pc, #80]	; (9210c <cl_deaeration_controller+0xb0>)
   920bc:	2202      	movs	r2, #2
   920be:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   920c0:	e002      	b.n	920c8 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   920c2:	2013      	movs	r0, #19
   920c4:	4b14      	ldr	r3, [pc, #80]	; (92118 <cl_deaeration_controller+0xbc>)
   920c6:	4798      	blx	r3
				}
				break;
   920c8:	bf00      	nop
				default:
				break;
			}
		break;
   920ca:	e01a      	b.n	92102 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   920cc:	79fb      	ldrb	r3, [r7, #7]
   920ce:	2b01      	cmp	r3, #1
   920d0:	d002      	beq.n	920d8 <cl_deaeration_controller+0x7c>
   920d2:	2b03      	cmp	r3, #3
   920d4:	d005      	beq.n	920e2 <cl_deaeration_controller+0x86>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   920d6:	e013      	b.n	92100 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   920d8:	4b0c      	ldr	r3, [pc, #48]	; (9210c <cl_deaeration_controller+0xb0>)
   920da:	2200      	movs	r2, #0
   920dc:	701a      	strb	r2, [r3, #0]
						break;
   920de:	bf00      	nop
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   920e0:	e00e      	b.n	92100 <cl_deaeration_controller+0xa4>
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
						break;
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   920e2:	f107 030c 	add.w	r3, r7, #12
   920e6:	4619      	mov	r1, r3
   920e8:	200a      	movs	r0, #10
   920ea:	4b09      	ldr	r3, [pc, #36]	; (92110 <cl_deaeration_controller+0xb4>)
   920ec:	4798      	blx	r3
						if (dac2_status > 5)
   920ee:	89bb      	ldrh	r3, [r7, #12]
   920f0:	2b05      	cmp	r3, #5
   920f2:	d905      	bls.n	92100 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   920f4:	2013      	movs	r0, #19
   920f6:	4b08      	ldr	r3, [pc, #32]	; (92118 <cl_deaeration_controller+0xbc>)
   920f8:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   920fa:	4b04      	ldr	r3, [pc, #16]	; (9210c <cl_deaeration_controller+0xb0>)
   920fc:	2201      	movs	r2, #1
   920fe:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   92100:	bf00      	nop
		default:break;
	}

	return CL_OK;
   92102:	2300      	movs	r3, #0
   92104:	4618      	mov	r0, r3
   92106:	3710      	adds	r7, #16
   92108:	46bd      	mov	sp, r7
   9210a:	bd80      	pop	{r7, pc}
   9210c:	20072655 	.word	0x20072655
   92110:	0008d499 	.word	0x0008d499
   92114:	0009687d 	.word	0x0009687d
   92118:	0009689d 	.word	0x0009689d

0009211c <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static Cl_Uint16Type toggle_count_flow = 0;
	
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   9211c:	b580      	push	{r7, lr}
   9211e:	b084      	sub	sp, #16
   92120:	af00      	add	r7, sp, #0
   92122:	4603      	mov	r3, r0
   92124:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   92126:	4b73      	ldr	r3, [pc, #460]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   92128:	781b      	ldrb	r3, [r3, #0]
   9212a:	2b03      	cmp	r3, #3
   9212c:	f200 80dc 	bhi.w	922e8 <cl_flow_switchcontroller+0x1cc>
   92130:	a201      	add	r2, pc, #4	; (adr r2, 92138 <cl_flow_switchcontroller+0x1c>)
   92132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92136:	bf00      	nop
   92138:	00092257 	.word	0x00092257
   9213c:	0009226b 	.word	0x0009226b
   92140:	00092149 	.word	0x00092149
   92144:	000922d5 	.word	0x000922d5
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   92148:	79fb      	ldrb	r3, [r7, #7]
   9214a:	3b01      	subs	r3, #1
   9214c:	2b05      	cmp	r3, #5
   9214e:	d87c      	bhi.n	9224a <cl_flow_switchcontroller+0x12e>
   92150:	a201      	add	r2, pc, #4	; (adr r2, 92158 <cl_flow_switchcontroller+0x3c>)
   92152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92156:	bf00      	nop
   92158:	00092171 	.word	0x00092171
   9215c:	00092179 	.word	0x00092179
   92160:	00092191 	.word	0x00092191
   92164:	0009224b 	.word	0x0009224b
   92168:	000921f7 	.word	0x000921f7
   9216c:	000921f7 	.word	0x000921f7
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   92170:	4b60      	ldr	r3, [pc, #384]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   92172:	2201      	movs	r2, #1
   92174:	701a      	strb	r2, [r3, #0]
			
						break;
   92176:	e06d      	b.n	92254 <cl_flow_switchcontroller+0x138>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   92178:	2100      	movs	r1, #0
   9217a:	200d      	movs	r0, #13
   9217c:	4b5e      	ldr	r3, [pc, #376]	; (922f8 <cl_flow_switchcontroller+0x1dc>)
   9217e:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   92180:	2100      	movs	r1, #0
   92182:	200e      	movs	r0, #14
   92184:	4b5c      	ldr	r3, [pc, #368]	; (922f8 <cl_flow_switchcontroller+0x1dc>)
   92186:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   92188:	4b5a      	ldr	r3, [pc, #360]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   9218a:	2200      	movs	r2, #0
   9218c:	701a      	strb	r2, [r3, #0]
						break;
   9218e:	e061      	b.n	92254 <cl_flow_switchcontroller+0x138>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   92190:	4b5a      	ldr	r3, [pc, #360]	; (922fc <cl_flow_switchcontroller+0x1e0>)
   92192:	781b      	ldrb	r3, [r3, #0]
   92194:	3301      	adds	r3, #1
   92196:	b2da      	uxtb	r2, r3
   92198:	4b58      	ldr	r3, [pc, #352]	; (922fc <cl_flow_switchcontroller+0x1e0>)
   9219a:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   9219c:	4b57      	ldr	r3, [pc, #348]	; (922fc <cl_flow_switchcontroller+0x1e0>)
   9219e:	781b      	ldrb	r3, [r3, #0]
   921a0:	2b03      	cmp	r3, #3
   921a2:	d954      	bls.n	9224e <cl_flow_switchcontroller+0x132>
						{
							three_sec_count = 0;
   921a4:	4b55      	ldr	r3, [pc, #340]	; (922fc <cl_flow_switchcontroller+0x1e0>)
   921a6:	2200      	movs	r2, #0
   921a8:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   921aa:	200c      	movs	r0, #12
   921ac:	4b54      	ldr	r3, [pc, #336]	; (92300 <cl_flow_switchcontroller+0x1e4>)
   921ae:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   921b0:	200d      	movs	r0, #13
   921b2:	4b53      	ldr	r3, [pc, #332]	; (92300 <cl_flow_switchcontroller+0x1e4>)
   921b4:	4798      	blx	r3
						
										cl_tdata.word = 0;
   921b6:	2300      	movs	r3, #0
   921b8:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   921ba:	4b52      	ldr	r3, [pc, #328]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   921bc:	881b      	ldrh	r3, [r3, #0]
   921be:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   921c0:	2315      	movs	r3, #21
   921c2:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count_flow < 2 )
   921c4:	4b4f      	ldr	r3, [pc, #316]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   921c6:	881b      	ldrh	r3, [r3, #0]
   921c8:	2b01      	cmp	r3, #1
   921ca:	d803      	bhi.n	921d4 <cl_flow_switchcontroller+0xb8>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   921cc:	2101      	movs	r1, #1
   921ce:	200d      	movs	r0, #13
   921d0:	4b49      	ldr	r3, [pc, #292]	; (922f8 <cl_flow_switchcontroller+0x1dc>)
   921d2:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						if(toggle_count_flow > 50 )
   921d4:	4b4b      	ldr	r3, [pc, #300]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   921d6:	881b      	ldrh	r3, [r3, #0]
   921d8:	2b32      	cmp	r3, #50	; 0x32
   921da:	d903      	bls.n	921e4 <cl_flow_switchcontroller+0xc8>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   921dc:	2101      	movs	r1, #1
   921de:	200e      	movs	r0, #14
   921e0:	4b45      	ldr	r3, [pc, #276]	; (922f8 <cl_flow_switchcontroller+0x1dc>)
   921e2:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   921e4:	2202      	movs	r2, #2
   921e6:	4947      	ldr	r1, [pc, #284]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   921e8:	2019      	movs	r0, #25
   921ea:	4b47      	ldr	r3, [pc, #284]	; (92308 <cl_flow_switchcontroller+0x1ec>)
   921ec:	4798      	blx	r3
						toggle_count_flow = 0;
   921ee:	4b45      	ldr	r3, [pc, #276]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   921f0:	2200      	movs	r2, #0
   921f2:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   921f4:	e02b      	b.n	9224e <cl_flow_switchcontroller+0x132>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   921f6:	4b45      	ldr	r3, [pc, #276]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   921f8:	781b      	ldrb	r3, [r3, #0]
   921fa:	2b01      	cmp	r3, #1
   921fc:	d110      	bne.n	92220 <cl_flow_switchcontroller+0x104>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   921fe:	4b43      	ldr	r3, [pc, #268]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   92200:	2200      	movs	r2, #0
   92202:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   92204:	4b42      	ldr	r3, [pc, #264]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   92206:	781b      	ldrb	r3, [r3, #0]
   92208:	2b01      	cmp	r3, #1
   9220a:	d022      	beq.n	92252 <cl_flow_switchcontroller+0x136>
								{
									
									toggle_count_flow++;
   9220c:	4b3d      	ldr	r3, [pc, #244]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   9220e:	881b      	ldrh	r3, [r3, #0]
   92210:	3301      	adds	r3, #1
   92212:	b29a      	uxth	r2, r3
   92214:	4b3b      	ldr	r3, [pc, #236]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   92216:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   92218:	4b3d      	ldr	r3, [pc, #244]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   9221a:	2201      	movs	r2, #1
   9221c:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   9221e:	e018      	b.n	92252 <cl_flow_switchcontroller+0x136>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   92220:	4b3a      	ldr	r3, [pc, #232]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   92222:	781b      	ldrb	r3, [r3, #0]
   92224:	2b02      	cmp	r3, #2
   92226:	d114      	bne.n	92252 <cl_flow_switchcontroller+0x136>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   92228:	4b38      	ldr	r3, [pc, #224]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   9222a:	2200      	movs	r2, #0
   9222c:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   9222e:	4b38      	ldr	r3, [pc, #224]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   92230:	781b      	ldrb	r3, [r3, #0]
   92232:	2b02      	cmp	r3, #2
   92234:	d00d      	beq.n	92252 <cl_flow_switchcontroller+0x136>
								{
									toggle_count_flow++;
   92236:	4b33      	ldr	r3, [pc, #204]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   92238:	881b      	ldrh	r3, [r3, #0]
   9223a:	3301      	adds	r3, #1
   9223c:	b29a      	uxth	r2, r3
   9223e:	4b31      	ldr	r3, [pc, #196]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   92240:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   92242:	4b33      	ldr	r3, [pc, #204]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   92244:	2202      	movs	r2, #2
   92246:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   92248:	e003      	b.n	92252 <cl_flow_switchcontroller+0x136>
						
						default:break;
   9224a:	bf00      	nop
   9224c:	e04c      	b.n	922e8 <cl_flow_switchcontroller+0x1cc>
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
						toggle_count_flow = 0;
						}
						
						break;
   9224e:	bf00      	nop
   92250:	e04a      	b.n	922e8 <cl_flow_switchcontroller+0x1cc>
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   92252:	bf00      	nop
						
						default:break;
					}
			break;
   92254:	e048      	b.n	922e8 <cl_flow_switchcontroller+0x1cc>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   92256:	79fb      	ldrb	r3, [r7, #7]
   92258:	2b01      	cmp	r3, #1
   9225a:	d001      	beq.n	92260 <cl_flow_switchcontroller+0x144>
   9225c:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   9225e:	e003      	b.n	92268 <cl_flow_switchcontroller+0x14c>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   92260:	4b24      	ldr	r3, [pc, #144]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   92262:	2201      	movs	r2, #1
   92264:	701a      	strb	r2, [r3, #0]
									break;
   92266:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   92268:	e03e      	b.n	922e8 <cl_flow_switchcontroller+0x1cc>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   9226a:	79fb      	ldrb	r3, [r7, #7]
   9226c:	2b03      	cmp	r3, #3
   9226e:	d002      	beq.n	92276 <cl_flow_switchcontroller+0x15a>
   92270:	2b06      	cmp	r3, #6
   92272:	d004      	beq.n	9227e <cl_flow_switchcontroller+0x162>
										}

					
									}
								break;
									default:break;
   92274:	e02d      	b.n	922d2 <cl_flow_switchcontroller+0x1b6>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   92276:	4b1f      	ldr	r3, [pc, #124]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   92278:	2202      	movs	r2, #2
   9227a:	701a      	strb	r2, [r3, #0]
									break;
   9227c:	e029      	b.n	922d2 <cl_flow_switchcontroller+0x1b6>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   9227e:	4b23      	ldr	r3, [pc, #140]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   92280:	781b      	ldrb	r3, [r3, #0]
   92282:	2b01      	cmp	r3, #1
   92284:	d110      	bne.n	922a8 <cl_flow_switchcontroller+0x18c>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   92286:	4b21      	ldr	r3, [pc, #132]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   92288:	2200      	movs	r2, #0
   9228a:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   9228c:	4b20      	ldr	r3, [pc, #128]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   9228e:	781b      	ldrb	r3, [r3, #0]
   92290:	2b01      	cmp	r3, #1
   92292:	d01d      	beq.n	922d0 <cl_flow_switchcontroller+0x1b4>
										{
									
											toggle_count_flow++;
   92294:	4b1b      	ldr	r3, [pc, #108]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   92296:	881b      	ldrh	r3, [r3, #0]
   92298:	3301      	adds	r3, #1
   9229a:	b29a      	uxth	r2, r3
   9229c:	4b19      	ldr	r3, [pc, #100]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   9229e:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   922a0:	4b1b      	ldr	r3, [pc, #108]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   922a2:	2201      	movs	r2, #1
   922a4:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   922a6:	e013      	b.n	922d0 <cl_flow_switchcontroller+0x1b4>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   922a8:	4b18      	ldr	r3, [pc, #96]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   922aa:	781b      	ldrb	r3, [r3, #0]
   922ac:	2b02      	cmp	r3, #2
   922ae:	d10f      	bne.n	922d0 <cl_flow_switchcontroller+0x1b4>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   922b0:	4b16      	ldr	r3, [pc, #88]	; (9230c <cl_flow_switchcontroller+0x1f0>)
   922b2:	2200      	movs	r2, #0
   922b4:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   922b6:	4b16      	ldr	r3, [pc, #88]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   922b8:	781b      	ldrb	r3, [r3, #0]
   922ba:	2b02      	cmp	r3, #2
   922bc:	d008      	beq.n	922d0 <cl_flow_switchcontroller+0x1b4>
										{
											toggle_count_flow++;
   922be:	4b11      	ldr	r3, [pc, #68]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   922c0:	881b      	ldrh	r3, [r3, #0]
   922c2:	3301      	adds	r3, #1
   922c4:	b29a      	uxth	r2, r3
   922c6:	4b0f      	ldr	r3, [pc, #60]	; (92304 <cl_flow_switchcontroller+0x1e8>)
   922c8:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   922ca:	4b11      	ldr	r3, [pc, #68]	; (92310 <cl_flow_switchcontroller+0x1f4>)
   922cc:	2202      	movs	r2, #2
   922ce:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   922d0:	bf00      	nop
									default:break;
								}
			break;
   922d2:	e009      	b.n	922e8 <cl_flow_switchcontroller+0x1cc>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   922d4:	79fb      	ldrb	r3, [r7, #7]
   922d6:	2b01      	cmp	r3, #1
   922d8:	d001      	beq.n	922de <cl_flow_switchcontroller+0x1c2>
   922da:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   922dc:	e003      	b.n	922e6 <cl_flow_switchcontroller+0x1ca>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   922de:	4b05      	ldr	r3, [pc, #20]	; (922f4 <cl_flow_switchcontroller+0x1d8>)
   922e0:	2202      	movs	r2, #2
   922e2:	701a      	strb	r2, [r3, #0]
									
									break;
   922e4:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   922e6:	bf00      	nop
		}
		return CL_OK;
   922e8:	2300      	movs	r3, #0
   922ea:	4618      	mov	r0, r3
   922ec:	3710      	adds	r7, #16
   922ee:	46bd      	mov	sp, r7
   922f0:	bd80      	pop	{r7, pc}
   922f2:	bf00      	nop
   922f4:	2007265b 	.word	0x2007265b
   922f8:	000830b1 	.word	0x000830b1
   922fc:	2007265e 	.word	0x2007265e
   92300:	00082ffd 	.word	0x00082ffd
   92304:	2007265c 	.word	0x2007265c
   92308:	00098601 	.word	0x00098601
   9230c:	20072658 	.word	0x20072658
   92310:	2007265a 	.word	0x2007265a

00092314 <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   92314:	b580      	push	{r7, lr}
   92316:	b084      	sub	sp, #16
   92318:	af00      	add	r7, sp, #0
   9231a:	4603      	mov	r3, r0
   9231c:	6039      	str	r1, [r7, #0]
   9231e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   92320:	2300      	movs	r3, #0
   92322:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   92324:	2300      	movs	r3, #0
   92326:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   92328:	2300      	movs	r3, #0
   9232a:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	
	switch(hp_State)
   9232c:	4bab      	ldr	r3, [pc, #684]	; (925dc <cl_hep_controller+0x2c8>)
   9232e:	781b      	ldrb	r3, [r3, #0]
   92330:	2b10      	cmp	r3, #16
   92332:	f200 828d 	bhi.w	92850 <cl_hep_controller+0x53c>
   92336:	a201      	add	r2, pc, #4	; (adr r2, 9233c <cl_hep_controller+0x28>)
   92338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9233c:	00092381 	.word	0x00092381
   92340:	000924cb 	.word	0x000924cb
   92344:	00092563 	.word	0x00092563
   92348:	00092641 	.word	0x00092641
   9234c:	00092625 	.word	0x00092625
   92350:	00092673 	.word	0x00092673
   92354:	000926dd 	.word	0x000926dd
   92358:	00092851 	.word	0x00092851
   9235c:	00092799 	.word	0x00092799
   92360:	00092851 	.word	0x00092851
   92364:	00092851 	.word	0x00092851
   92368:	00092851 	.word	0x00092851
   9236c:	00092851 	.word	0x00092851
   92370:	00092851 	.word	0x00092851
   92374:	00092851 	.word	0x00092851
   92378:	00092851 	.word	0x00092851
   9237c:	00092851 	.word	0x00092851
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   92380:	79fb      	ldrb	r3, [r7, #7]
   92382:	3b01      	subs	r3, #1
   92384:	2b0b      	cmp	r3, #11
   92386:	f200 8265 	bhi.w	92854 <cl_hep_controller+0x540>
   9238a:	a201      	add	r2, pc, #4	; (adr r2, 92390 <cl_hep_controller+0x7c>)
   9238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92390:	00092439 	.word	0x00092439
   92394:	00092495 	.word	0x00092495
   92398:	0009249d 	.word	0x0009249d
   9239c:	00092467 	.word	0x00092467
   923a0:	000924a5 	.word	0x000924a5
   923a4:	000924b9 	.word	0x000924b9
   923a8:	000923c1 	.word	0x000923c1
   923ac:	00092855 	.word	0x00092855
   923b0:	000923f7 	.word	0x000923f7
   923b4:	00092409 	.word	0x00092409
   923b8:	00092855 	.word	0x00092855
   923bc:	00092431 	.word	0x00092431
			{
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   923c0:	4b87      	ldr	r3, [pc, #540]	; (925e0 <cl_hep_controller+0x2cc>)
   923c2:	681b      	ldr	r3, [r3, #0]
   923c4:	4a87      	ldr	r2, [pc, #540]	; (925e4 <cl_hep_controller+0x2d0>)
   923c6:	6013      	str	r3, [r2, #0]
					pwm_period = 5;
   923c8:	4b86      	ldr	r3, [pc, #536]	; (925e4 <cl_hep_controller+0x2d0>)
   923ca:	2205      	movs	r2, #5
   923cc:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   923ce:	2005      	movs	r0, #5
   923d0:	4b85      	ldr	r3, [pc, #532]	; (925e8 <cl_hep_controller+0x2d4>)
   923d2:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   923d4:	4b85      	ldr	r3, [pc, #532]	; (925ec <cl_hep_controller+0x2d8>)
   923d6:	4798      	blx	r3
					cl_wait(100);
   923d8:	2064      	movs	r0, #100	; 0x64
   923da:	4b85      	ldr	r3, [pc, #532]	; (925f0 <cl_hep_controller+0x2dc>)
   923dc:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   923de:	4b81      	ldr	r3, [pc, #516]	; (925e4 <cl_hep_controller+0x2d0>)
   923e0:	681b      	ldr	r3, [r3, #0]
   923e2:	4619      	mov	r1, r3
   923e4:	2005      	movs	r0, #5
   923e6:	4b83      	ldr	r3, [pc, #524]	; (925f4 <cl_hep_controller+0x2e0>)
   923e8:	4798      	blx	r3
					cl_hep_pumpFeedback_start();
   923ea:	4b83      	ldr	r3, [pc, #524]	; (925f8 <cl_hep_controller+0x2e4>)
   923ec:	4798      	blx	r3
				hp_State = CL_HEP_STATE_BOLUS_ON;
   923ee:	4b7b      	ldr	r3, [pc, #492]	; (925dc <cl_hep_controller+0x2c8>)
   923f0:	2206      	movs	r2, #6
   923f2:	701a      	strb	r2, [r3, #0]
				break;
   923f4:	e068      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   923f6:	2005      	movs	r0, #5
   923f8:	4b80      	ldr	r3, [pc, #512]	; (925fc <cl_hep_controller+0x2e8>)
   923fa:	4798      	blx	r3
   923fc:	4603      	mov	r3, r0
   923fe:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   92400:	4b76      	ldr	r3, [pc, #472]	; (925dc <cl_hep_controller+0x2c8>)
   92402:	2200      	movs	r2, #0
   92404:	701a      	strb	r2, [r3, #0]
				break;
   92406:	e05f      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
						sv_cntrl_setHepa_dir();
   92408:	4b78      	ldr	r3, [pc, #480]	; (925ec <cl_hep_controller+0x2d8>)
   9240a:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   9240c:	2005      	movs	r0, #5
   9240e:	4b76      	ldr	r3, [pc, #472]	; (925e8 <cl_hep_controller+0x2d4>)
   92410:	4798      	blx	r3
						pwm_period = 10 ;
   92412:	4b74      	ldr	r3, [pc, #464]	; (925e4 <cl_hep_controller+0x2d0>)
   92414:	220a      	movs	r2, #10
   92416:	601a      	str	r2, [r3, #0]
						cl_wait(100);
   92418:	2064      	movs	r0, #100	; 0x64
   9241a:	4b75      	ldr	r3, [pc, #468]	; (925f0 <cl_hep_controller+0x2dc>)
   9241c:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9241e:	4b71      	ldr	r3, [pc, #452]	; (925e4 <cl_hep_controller+0x2d0>)
   92420:	681b      	ldr	r3, [r3, #0]
   92422:	4619      	mov	r1, r3
   92424:	2005      	movs	r0, #5
   92426:	4b73      	ldr	r3, [pc, #460]	; (925f4 <cl_hep_controller+0x2e0>)
   92428:	4798      	blx	r3
						cl_hep_pumpFeedback_start();
   9242a:	4b73      	ldr	r3, [pc, #460]	; (925f8 <cl_hep_controller+0x2e4>)
   9242c:	4798      	blx	r3
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;

				break;
   9242e:	e04b      	b.n	924c8 <cl_hep_controller+0x1b4>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   92430:	2005      	movs	r0, #5
   92432:	4b72      	ldr	r3, [pc, #456]	; (925fc <cl_hep_controller+0x2e8>)
   92434:	4798      	blx	r3
				break;
   92436:	e047      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 5 ;
   92438:	4b6a      	ldr	r3, [pc, #424]	; (925e4 <cl_hep_controller+0x2d0>)
   9243a:	2205      	movs	r2, #5
   9243c:	601a      	str	r2, [r3, #0]
				;
				sv_cntrl_setHepa_dir();
   9243e:	4b6b      	ldr	r3, [pc, #428]	; (925ec <cl_hep_controller+0x2d8>)
   92440:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   92442:	2005      	movs	r0, #5
   92444:	4b68      	ldr	r3, [pc, #416]	; (925e8 <cl_hep_controller+0x2d4>)
   92446:	4798      	blx	r3
				cl_hep_pumpFeedback_start();
   92448:	4b6b      	ldr	r3, [pc, #428]	; (925f8 <cl_hep_controller+0x2e4>)
   9244a:	4798      	blx	r3
				cl_wait(100);
   9244c:	2064      	movs	r0, #100	; 0x64
   9244e:	4b68      	ldr	r3, [pc, #416]	; (925f0 <cl_hep_controller+0x2dc>)
   92450:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   92452:	4b64      	ldr	r3, [pc, #400]	; (925e4 <cl_hep_controller+0x2d0>)
   92454:	681b      	ldr	r3, [r3, #0]
   92456:	4619      	mov	r1, r3
   92458:	2005      	movs	r0, #5
   9245a:	4b66      	ldr	r3, [pc, #408]	; (925f4 <cl_hep_controller+0x2e0>)
   9245c:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   9245e:	4b5f      	ldr	r3, [pc, #380]	; (925dc <cl_hep_controller+0x2c8>)
   92460:	2203      	movs	r2, #3
   92462:	701a      	strb	r2, [r3, #0]
				break;
   92464:	e030      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 5 ;
   92466:	4b5f      	ldr	r3, [pc, #380]	; (925e4 <cl_hep_controller+0x2d0>)
   92468:	2205      	movs	r2, #5
   9246a:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   9246c:	4b64      	ldr	r3, [pc, #400]	; (92600 <cl_hep_controller+0x2ec>)
   9246e:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   92470:	2005      	movs	r0, #5
   92472:	4b5d      	ldr	r3, [pc, #372]	; (925e8 <cl_hep_controller+0x2d4>)
   92474:	4798      	blx	r3
					cl_hep_pumpFeedback_start();
   92476:	4b60      	ldr	r3, [pc, #384]	; (925f8 <cl_hep_controller+0x2e4>)
   92478:	4798      	blx	r3
					cl_wait(100);
   9247a:	2064      	movs	r0, #100	; 0x64
   9247c:	4b5c      	ldr	r3, [pc, #368]	; (925f0 <cl_hep_controller+0x2dc>)
   9247e:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   92480:	4b58      	ldr	r3, [pc, #352]	; (925e4 <cl_hep_controller+0x2d0>)
   92482:	681b      	ldr	r3, [r3, #0]
   92484:	4619      	mov	r1, r3
   92486:	2005      	movs	r0, #5
   92488:	4b5a      	ldr	r3, [pc, #360]	; (925f4 <cl_hep_controller+0x2e0>)
   9248a:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   9248c:	4b53      	ldr	r3, [pc, #332]	; (925dc <cl_hep_controller+0x2c8>)
   9248e:	2204      	movs	r2, #4
   92490:	701a      	strb	r2, [r3, #0]
				break;
   92492:	e019      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92494:	4b51      	ldr	r3, [pc, #324]	; (925dc <cl_hep_controller+0x2c8>)
   92496:	2201      	movs	r2, #1
   92498:	701a      	strb	r2, [r3, #0]
				break;
   9249a:	e015      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9249c:	4b4f      	ldr	r3, [pc, #316]	; (925dc <cl_hep_controller+0x2c8>)
   9249e:	2202      	movs	r2, #2
   924a0:	701a      	strb	r2, [r3, #0]
				break;
   924a2:	e011      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				
				cl_hep_bolusrate = data;
   924a4:	683b      	ldr	r3, [r7, #0]
   924a6:	b29a      	uxth	r2, r3
   924a8:	4b56      	ldr	r3, [pc, #344]	; (92604 <cl_hep_controller+0x2f0>)
   924aa:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_bolusrate ;
   924ac:	4b55      	ldr	r3, [pc, #340]	; (92604 <cl_hep_controller+0x2f0>)
   924ae:	881b      	ldrh	r3, [r3, #0]
   924b0:	461a      	mov	r2, r3
   924b2:	4b4c      	ldr	r3, [pc, #304]	; (925e4 <cl_hep_controller+0x2d0>)
   924b4:	601a      	str	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				break;
   924b6:	e007      	b.n	924c8 <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   924b8:	683b      	ldr	r3, [r7, #0]
   924ba:	4a49      	ldr	r2, [pc, #292]	; (925e0 <cl_hep_controller+0x2cc>)
   924bc:	6013      	str	r3, [r2, #0]
				pwm_period =  cl_hep_deliveryrate ;
   924be:	4b48      	ldr	r3, [pc, #288]	; (925e0 <cl_hep_controller+0x2cc>)
   924c0:	681b      	ldr	r3, [r3, #0]
   924c2:	4a48      	ldr	r2, [pc, #288]	; (925e4 <cl_hep_controller+0x2d0>)
   924c4:	6013      	str	r3, [r2, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
   924c6:	bf00      	nop
			}
		break;
   924c8:	e1c4      	b.n	92854 <cl_hep_controller+0x540>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   924ca:	79fb      	ldrb	r3, [r7, #7]
   924cc:	3b02      	subs	r3, #2
   924ce:	2b08      	cmp	r3, #8
   924d0:	f200 81c2 	bhi.w	92858 <cl_hep_controller+0x544>
   924d4:	a201      	add	r2, pc, #4	; (adr r2, 924dc <cl_hep_controller+0x1c8>)
   924d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   924da:	bf00      	nop
   924dc:	0009253f 	.word	0x0009253f
   924e0:	00092547 	.word	0x00092547
   924e4:	00092511 	.word	0x00092511
   924e8:	0009254f 	.word	0x0009254f
   924ec:	00092559 	.word	0x00092559
   924f0:	00092501 	.word	0x00092501
   924f4:	00092859 	.word	0x00092859
   924f8:	00092859 	.word	0x00092859
   924fc:	00092509 	.word	0x00092509
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   92500:	4b36      	ldr	r3, [pc, #216]	; (925dc <cl_hep_controller+0x2c8>)
   92502:	2206      	movs	r2, #6
   92504:	701a      	strb	r2, [r3, #0]
			break;
   92506:	e02b      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   92508:	4b34      	ldr	r3, [pc, #208]	; (925dc <cl_hep_controller+0x2c8>)
   9250a:	2208      	movs	r2, #8
   9250c:	701a      	strb	r2, [r3, #0]
			break;
   9250e:	e027      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_setHepa_dir();
   92510:	4b36      	ldr	r3, [pc, #216]	; (925ec <cl_hep_controller+0x2d8>)
   92512:	4798      	blx	r3
			pwm_period = 5;
   92514:	4b33      	ldr	r3, [pc, #204]	; (925e4 <cl_hep_controller+0x2d0>)
   92516:	2205      	movs	r2, #5
   92518:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   9251a:	2005      	movs	r0, #5
   9251c:	4b32      	ldr	r3, [pc, #200]	; (925e8 <cl_hep_controller+0x2d4>)
   9251e:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   92520:	4b35      	ldr	r3, [pc, #212]	; (925f8 <cl_hep_controller+0x2e4>)
   92522:	4798      	blx	r3
			cl_wait(100);
   92524:	2064      	movs	r0, #100	; 0x64
   92526:	4b32      	ldr	r3, [pc, #200]	; (925f0 <cl_hep_controller+0x2dc>)
   92528:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9252a:	4b2e      	ldr	r3, [pc, #184]	; (925e4 <cl_hep_controller+0x2d0>)
   9252c:	681b      	ldr	r3, [r3, #0]
   9252e:	4619      	mov	r1, r3
   92530:	2005      	movs	r0, #5
   92532:	4b30      	ldr	r3, [pc, #192]	; (925f4 <cl_hep_controller+0x2e0>)
   92534:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   92536:	4b29      	ldr	r3, [pc, #164]	; (925dc <cl_hep_controller+0x2c8>)
   92538:	2204      	movs	r2, #4
   9253a:	701a      	strb	r2, [r3, #0]
			break;
   9253c:	e010      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   9253e:	4b27      	ldr	r3, [pc, #156]	; (925dc <cl_hep_controller+0x2c8>)
   92540:	2201      	movs	r2, #1
   92542:	701a      	strb	r2, [r3, #0]
			break;
   92544:	e00c      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92546:	4b25      	ldr	r3, [pc, #148]	; (925dc <cl_hep_controller+0x2c8>)
   92548:	2202      	movs	r2, #2
   9254a:	701a      	strb	r2, [r3, #0]
			break;
   9254c:	e008      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   9254e:	683b      	ldr	r3, [r7, #0]
   92550:	b29a      	uxth	r2, r3
   92552:	4b2c      	ldr	r3, [pc, #176]	; (92604 <cl_hep_controller+0x2f0>)
   92554:	801a      	strh	r2, [r3, #0]
			break;
   92556:	e003      	b.n	92560 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   92558:	683b      	ldr	r3, [r7, #0]
   9255a:	4a21      	ldr	r2, [pc, #132]	; (925e0 <cl_hep_controller+0x2cc>)
   9255c:	6013      	str	r3, [r2, #0]
			break;
   9255e:	bf00      	nop
		}
		break;
   92560:	e17a      	b.n	92858 <cl_hep_controller+0x544>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   92562:	79fb      	ldrb	r3, [r7, #7]
   92564:	3b01      	subs	r3, #1
   92566:	2b09      	cmp	r3, #9
   92568:	f200 8178 	bhi.w	9285c <cl_hep_controller+0x548>
   9256c:	a201      	add	r2, pc, #4	; (adr r2, 92574 <cl_hep_controller+0x260>)
   9256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92572:	bf00      	nop
   92574:	000925ad 	.word	0x000925ad
   92578:	000925d5 	.word	0x000925d5
   9257c:	00092609 	.word	0x00092609
   92580:	0009285d 	.word	0x0009285d
   92584:	00092611 	.word	0x00092611
   92588:	0009261b 	.word	0x0009261b
   9258c:	0009259d 	.word	0x0009259d
   92590:	0009285d 	.word	0x0009285d
   92594:	0009285d 	.word	0x0009285d
   92598:	000925a5 	.word	0x000925a5
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   9259c:	4b0f      	ldr	r3, [pc, #60]	; (925dc <cl_hep_controller+0x2c8>)
   9259e:	2206      	movs	r2, #6
   925a0:	701a      	strb	r2, [r3, #0]
			break;
   925a2:	e03e      	b.n	92622 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   925a4:	4b0d      	ldr	r3, [pc, #52]	; (925dc <cl_hep_controller+0x2c8>)
   925a6:	2208      	movs	r2, #8
   925a8:	701a      	strb	r2, [r3, #0]
			break;
   925aa:	e03a      	b.n	92622 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_resetHepa_dir();
   925ac:	4b14      	ldr	r3, [pc, #80]	; (92600 <cl_hep_controller+0x2ec>)
   925ae:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   925b0:	2005      	movs	r0, #5
   925b2:	4b0d      	ldr	r3, [pc, #52]	; (925e8 <cl_hep_controller+0x2d4>)
   925b4:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   925b6:	4b10      	ldr	r3, [pc, #64]	; (925f8 <cl_hep_controller+0x2e4>)
   925b8:	4798      	blx	r3
			cl_wait(100);
   925ba:	2064      	movs	r0, #100	; 0x64
   925bc:	4b0c      	ldr	r3, [pc, #48]	; (925f0 <cl_hep_controller+0x2dc>)
   925be:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   925c0:	4b08      	ldr	r3, [pc, #32]	; (925e4 <cl_hep_controller+0x2d0>)
   925c2:	681b      	ldr	r3, [r3, #0]
   925c4:	4619      	mov	r1, r3
   925c6:	2005      	movs	r0, #5
   925c8:	4b0a      	ldr	r3, [pc, #40]	; (925f4 <cl_hep_controller+0x2e0>)
   925ca:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   925cc:	4b03      	ldr	r3, [pc, #12]	; (925dc <cl_hep_controller+0x2c8>)
   925ce:	2203      	movs	r2, #3
   925d0:	701a      	strb	r2, [r3, #0]
			break;
   925d2:	e026      	b.n	92622 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   925d4:	4b01      	ldr	r3, [pc, #4]	; (925dc <cl_hep_controller+0x2c8>)
   925d6:	2201      	movs	r2, #1
   925d8:	701a      	strb	r2, [r3, #0]
			break;
   925da:	e022      	b.n	92622 <cl_hep_controller+0x30e>
   925dc:	2007265f 	.word	0x2007265f
   925e0:	200709bc 	.word	0x200709bc
   925e4:	20072668 	.word	0x20072668
   925e8:	000967dd 	.word	0x000967dd
   925ec:	000968cd 	.word	0x000968cd
   925f0:	00091b9d 	.word	0x00091b9d
   925f4:	000968f5 	.word	0x000968f5
   925f8:	00092895 	.word	0x00092895
   925fc:	00096819 	.word	0x00096819
   92600:	000968e1 	.word	0x000968e1
   92604:	20072660 	.word	0x20072660
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92608:	4b9a      	ldr	r3, [pc, #616]	; (92874 <cl_hep_controller+0x560>)
   9260a:	2202      	movs	r2, #2
   9260c:	701a      	strb	r2, [r3, #0]
			break;
   9260e:	e008      	b.n	92622 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   92610:	683b      	ldr	r3, [r7, #0]
   92612:	b29a      	uxth	r2, r3
   92614:	4b98      	ldr	r3, [pc, #608]	; (92878 <cl_hep_controller+0x564>)
   92616:	801a      	strh	r2, [r3, #0]
			break;
   92618:	e003      	b.n	92622 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   9261a:	683b      	ldr	r3, [r7, #0]
   9261c:	4a97      	ldr	r2, [pc, #604]	; (9287c <cl_hep_controller+0x568>)
   9261e:	6013      	str	r3, [r2, #0]
			break;
   92620:	bf00      	nop
		}
		break;
   92622:	e11b      	b.n	9285c <cl_hep_controller+0x548>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   92624:	79fb      	ldrb	r3, [r7, #7]
   92626:	2b0c      	cmp	r3, #12
   92628:	d000      	beq.n	9262c <cl_hep_controller+0x318>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
			default:break;
   9262a:	e008      	b.n	9263e <cl_hep_controller+0x32a>
		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
		{

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9262c:	2005      	movs	r0, #5
   9262e:	4b94      	ldr	r3, [pc, #592]	; (92880 <cl_hep_controller+0x56c>)
   92630:	4798      	blx	r3
   92632:	4603      	mov	r3, r0
   92634:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   92636:	4b8f      	ldr	r3, [pc, #572]	; (92874 <cl_hep_controller+0x560>)
   92638:	2200      	movs	r2, #0
   9263a:	701a      	strb	r2, [r3, #0]
			break;
   9263c:	bf00      	nop
			default:break;

		}
		break;
   9263e:	e114      	b.n	9286a <cl_hep_controller+0x556>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   92640:	79fb      	ldrb	r3, [r7, #7]
   92642:	2b0c      	cmp	r3, #12
   92644:	d00b      	beq.n	9265e <cl_hep_controller+0x34a>
   92646:	2b0d      	cmp	r3, #13
   92648:	d000      	beq.n	9264c <cl_hep_controller+0x338>
			break;
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
			default:break;
   9264a:	e011      	b.n	92670 <cl_hep_controller+0x35c>
		break;
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
		{
			case CL_HEP_EVENT_SEC_TICK:
			cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   9264c:	f107 030e 	add.w	r3, r7, #14
   92650:	4618      	mov	r0, r3
   92652:	4b8c      	ldr	r3, [pc, #560]	; (92884 <cl_hep_controller+0x570>)
   92654:	4798      	blx	r3
			switch(hep_pumpstate)
   92656:	7bbb      	ldrb	r3, [r7, #14]
   92658:	2b01      	cmp	r3, #1
			{
				case CL_HEP_P_STATE_READY_AT_START:
		////		sv_cntrl_setHepa_dir();
			//	sv_cntrl_deactivatepump(HEPARINPUMP);
			//	hp_State = CL_HEP_STATE_REACHED_LEFTEND;
				break;
   9265a:	bf00      	nop
			}
			break;
   9265c:	e008      	b.n	92670 <cl_hep_controller+0x35c>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9265e:	2005      	movs	r0, #5
   92660:	4b87      	ldr	r3, [pc, #540]	; (92880 <cl_hep_controller+0x56c>)
   92662:	4798      	blx	r3
   92664:	4603      	mov	r3, r0
   92666:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   92668:	4b82      	ldr	r3, [pc, #520]	; (92874 <cl_hep_controller+0x560>)
   9266a:	2200      	movs	r2, #0
   9266c:	701a      	strb	r2, [r3, #0]
			break;
   9266e:	bf00      	nop
			default:break;

		}
		break;
   92670:	e0fb      	b.n	9286a <cl_hep_controller+0x556>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   92672:	79fb      	ldrb	r3, [r7, #7]
   92674:	3b01      	subs	r3, #1
   92676:	2b06      	cmp	r3, #6
   92678:	f200 80f2 	bhi.w	92860 <cl_hep_controller+0x54c>
   9267c:	a201      	add	r2, pc, #4	; (adr r2, 92684 <cl_hep_controller+0x370>)
   9267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92682:	bf00      	nop
   92684:	000926a9 	.word	0x000926a9
   92688:	000926b9 	.word	0x000926b9
   9268c:	000926c1 	.word	0x000926c1
   92690:	000926b1 	.word	0x000926b1
   92694:	000926c9 	.word	0x000926c9
   92698:	000926d3 	.word	0x000926d3
   9269c:	000926a1 	.word	0x000926a1
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   926a0:	4b74      	ldr	r3, [pc, #464]	; (92874 <cl_hep_controller+0x560>)
   926a2:	2206      	movs	r2, #6
   926a4:	701a      	strb	r2, [r3, #0]
			break;
   926a6:	e018      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   926a8:	4b72      	ldr	r3, [pc, #456]	; (92874 <cl_hep_controller+0x560>)
   926aa:	2203      	movs	r2, #3
   926ac:	701a      	strb	r2, [r3, #0]
			break;
   926ae:	e014      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   926b0:	4b70      	ldr	r3, [pc, #448]	; (92874 <cl_hep_controller+0x560>)
   926b2:	2204      	movs	r2, #4
   926b4:	701a      	strb	r2, [r3, #0]
			break;
   926b6:	e010      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   926b8:	4b6e      	ldr	r3, [pc, #440]	; (92874 <cl_hep_controller+0x560>)
   926ba:	2201      	movs	r2, #1
   926bc:	701a      	strb	r2, [r3, #0]
			break;
   926be:	e00c      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   926c0:	4b6c      	ldr	r3, [pc, #432]	; (92874 <cl_hep_controller+0x560>)
   926c2:	2202      	movs	r2, #2
   926c4:	701a      	strb	r2, [r3, #0]
			break;
   926c6:	e008      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   926c8:	683b      	ldr	r3, [r7, #0]
   926ca:	b29a      	uxth	r2, r3
   926cc:	4b6a      	ldr	r3, [pc, #424]	; (92878 <cl_hep_controller+0x564>)
   926ce:	801a      	strh	r2, [r3, #0]
			break;
   926d0:	e003      	b.n	926da <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   926d2:	683b      	ldr	r3, [r7, #0]
   926d4:	4a69      	ldr	r2, [pc, #420]	; (9287c <cl_hep_controller+0x568>)
   926d6:	6013      	str	r3, [r2, #0]
			break;
   926d8:	bf00      	nop
		}
		break;
   926da:	e0c1      	b.n	92860 <cl_hep_controller+0x54c>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   926dc:	79fb      	ldrb	r3, [r7, #7]
   926de:	3b02      	subs	r3, #2
   926e0:	2b0b      	cmp	r3, #11
   926e2:	f200 80bf 	bhi.w	92864 <cl_hep_controller+0x550>
   926e6:	a201      	add	r2, pc, #4	; (adr r2, 926ec <cl_hep_controller+0x3d8>)
   926e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   926ec:	00092759 	.word	0x00092759
   926f0:	00092761 	.word	0x00092761
   926f4:	00092865 	.word	0x00092865
   926f8:	00092769 	.word	0x00092769
   926fc:	00092773 	.word	0x00092773
   92700:	00092865 	.word	0x00092865
   92704:	0009277b 	.word	0x0009277b
   92708:	00092783 	.word	0x00092783
   9270c:	00092865 	.word	0x00092865
   92710:	00092865 	.word	0x00092865
   92714:	00092783 	.word	0x00092783
   92718:	0009271d 	.word	0x0009271d
		{
			case CL_HEP_EVENT_SEC_TICK:
			if(++cl_hep_seconds > 60)
   9271c:	4b5a      	ldr	r3, [pc, #360]	; (92888 <cl_hep_controller+0x574>)
   9271e:	881b      	ldrh	r3, [r3, #0]
   92720:	3301      	adds	r3, #1
   92722:	b29a      	uxth	r2, r3
   92724:	4b58      	ldr	r3, [pc, #352]	; (92888 <cl_hep_controller+0x574>)
   92726:	801a      	strh	r2, [r3, #0]
   92728:	4b57      	ldr	r3, [pc, #348]	; (92888 <cl_hep_controller+0x574>)
   9272a:	881b      	ldrh	r3, [r3, #0]
   9272c:	2b3c      	cmp	r3, #60	; 0x3c
   9272e:	d931      	bls.n	92794 <cl_hep_controller+0x480>
			{
				cl_hep_seconds = 0;
   92730:	4b55      	ldr	r3, [pc, #340]	; (92888 <cl_hep_controller+0x574>)
   92732:	2200      	movs	r2, #0
   92734:	801a      	strh	r2, [r3, #0]
				if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
   92736:	4b55      	ldr	r3, [pc, #340]	; (9288c <cl_hep_controller+0x578>)
   92738:	881b      	ldrh	r3, [r3, #0]
   9273a:	3301      	adds	r3, #1
   9273c:	b29a      	uxth	r2, r3
   9273e:	4b53      	ldr	r3, [pc, #332]	; (9288c <cl_hep_controller+0x578>)
   92740:	801a      	strh	r2, [r3, #0]
   92742:	4b52      	ldr	r3, [pc, #328]	; (9288c <cl_hep_controller+0x578>)
   92744:	881b      	ldrh	r3, [r3, #0]
   92746:	2b01      	cmp	r3, #1
   92748:	d924      	bls.n	92794 <cl_hep_controller+0x480>
				{
					hp_State = CL_HEP_STATE_IDLE;
   9274a:	4b4a      	ldr	r3, [pc, #296]	; (92874 <cl_hep_controller+0x560>)
   9274c:	2200      	movs	r2, #0
   9274e:	701a      	strb	r2, [r3, #0]
					cl_hep_minutes = 0;
   92750:	4b4e      	ldr	r3, [pc, #312]	; (9288c <cl_hep_controller+0x578>)
   92752:	2200      	movs	r2, #0
   92754:	801a      	strh	r2, [r3, #0]
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
				}
			}

			break;
   92756:	e01d      	b.n	92794 <cl_hep_controller+0x480>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92758:	4b46      	ldr	r3, [pc, #280]	; (92874 <cl_hep_controller+0x560>)
   9275a:	2201      	movs	r2, #1
   9275c:	701a      	strb	r2, [r3, #0]
			break;
   9275e:	e01a      	b.n	92796 <cl_hep_controller+0x482>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92760:	4b44      	ldr	r3, [pc, #272]	; (92874 <cl_hep_controller+0x560>)
   92762:	2202      	movs	r2, #2
   92764:	701a      	strb	r2, [r3, #0]
			break;
   92766:	e016      	b.n	92796 <cl_hep_controller+0x482>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   92768:	683b      	ldr	r3, [r7, #0]
   9276a:	b29a      	uxth	r2, r3
   9276c:	4b42      	ldr	r3, [pc, #264]	; (92878 <cl_hep_controller+0x564>)
   9276e:	801a      	strh	r2, [r3, #0]
			break;
   92770:	e011      	b.n	92796 <cl_hep_controller+0x482>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   92772:	683b      	ldr	r3, [r7, #0]
   92774:	4a41      	ldr	r2, [pc, #260]	; (9287c <cl_hep_controller+0x568>)
   92776:	6013      	str	r3, [r2, #0]
			break;
   92778:	e00d      	b.n	92796 <cl_hep_controller+0x482>
			case 	CL_HEP_EVENT_PAUSEBOLUS:
			hp_State = CL_HEP_STATE_PAUSED;
   9277a:	4b3e      	ldr	r3, [pc, #248]	; (92874 <cl_hep_controller+0x560>)
   9277c:	220e      	movs	r2, #14
   9277e:	701a      	strb	r2, [r3, #0]
			break;
   92780:	e009      	b.n	92796 <cl_hep_controller+0x482>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   92782:	2005      	movs	r0, #5
   92784:	4b3e      	ldr	r3, [pc, #248]	; (92880 <cl_hep_controller+0x56c>)
   92786:	4798      	blx	r3
   92788:	4603      	mov	r3, r0
   9278a:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   9278c:	4b39      	ldr	r3, [pc, #228]	; (92874 <cl_hep_controller+0x560>)
   9278e:	2200      	movs	r2, #0
   92790:	701a      	strb	r2, [r3, #0]
			break;
   92792:	e000      	b.n	92796 <cl_hep_controller+0x482>
					cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
				}
			}

			break;
   92794:	bf00      	nop
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   92796:	e065      	b.n	92864 <cl_hep_controller+0x550>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   92798:	79fb      	ldrb	r3, [r7, #7]
   9279a:	3b02      	subs	r3, #2
   9279c:	2b0b      	cmp	r3, #11
   9279e:	d863      	bhi.n	92868 <cl_hep_controller+0x554>
   927a0:	a201      	add	r2, pc, #4	; (adr r2, 927a8 <cl_hep_controller+0x494>)
   927a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   927a6:	bf00      	nop
   927a8:	00092809 	.word	0x00092809
   927ac:	0009281b 	.word	0x0009281b
   927b0:	00092869 	.word	0x00092869
   927b4:	0009282d 	.word	0x0009282d
   927b8:	00092837 	.word	0x00092837
   927bc:	00092869 	.word	0x00092869
   927c0:	0009283f 	.word	0x0009283f
   927c4:	00092847 	.word	0x00092847
   927c8:	00092869 	.word	0x00092869
   927cc:	00092869 	.word	0x00092869
   927d0:	00092869 	.word	0x00092869
   927d4:	000927d9 	.word	0x000927d9
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   927d8:	f107 030e 	add.w	r3, r7, #14
   927dc:	4618      	mov	r0, r3
   927de:	4b29      	ldr	r3, [pc, #164]	; (92884 <cl_hep_controller+0x570>)
   927e0:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   927e2:	f107 030c 	add.w	r3, r7, #12
   927e6:	4618      	mov	r0, r3
   927e8:	4b29      	ldr	r3, [pc, #164]	; (92890 <cl_hep_controller+0x57c>)
   927ea:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   927ec:	7bbb      	ldrb	r3, [r7, #14]
   927ee:	2b06      	cmp	r3, #6
   927f0:	d004      	beq.n	927fc <cl_hep_controller+0x4e8>
   927f2:	2b07      	cmp	r3, #7
   927f4:	d004      	beq.n	92800 <cl_hep_controller+0x4ec>
   927f6:	2b02      	cmp	r3, #2
   927f8:	d004      	beq.n	92804 <cl_hep_controller+0x4f0>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   927fa:	e004      	b.n	92806 <cl_hep_controller+0x4f2>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   927fc:	bf00      	nop
   927fe:	e026      	b.n	9284e <cl_hep_controller+0x53a>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   92800:	bf00      	nop
   92802:	e024      	b.n	9284e <cl_hep_controller+0x53a>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   92804:	bf00      	nop
						default:break;
					}


				break;
   92806:	e022      	b.n	9284e <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   92808:	2005      	movs	r0, #5
   9280a:	4b1d      	ldr	r3, [pc, #116]	; (92880 <cl_hep_controller+0x56c>)
   9280c:	4798      	blx	r3
   9280e:	4603      	mov	r3, r0
   92810:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92812:	4b18      	ldr	r3, [pc, #96]	; (92874 <cl_hep_controller+0x560>)
   92814:	2201      	movs	r2, #1
   92816:	701a      	strb	r2, [r3, #0]
				break;
   92818:	e019      	b.n	9284e <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9281a:	2005      	movs	r0, #5
   9281c:	4b18      	ldr	r3, [pc, #96]	; (92880 <cl_hep_controller+0x56c>)
   9281e:	4798      	blx	r3
   92820:	4603      	mov	r3, r0
   92822:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92824:	4b13      	ldr	r3, [pc, #76]	; (92874 <cl_hep_controller+0x560>)
   92826:	2202      	movs	r2, #2
   92828:	701a      	strb	r2, [r3, #0]
				break;
   9282a:	e010      	b.n	9284e <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				cl_hep_bolusrate = data ;
   9282c:	683b      	ldr	r3, [r7, #0]
   9282e:	b29a      	uxth	r2, r3
   92830:	4b11      	ldr	r3, [pc, #68]	; (92878 <cl_hep_controller+0x564>)
   92832:	801a      	strh	r2, [r3, #0]
				break;
   92834:	e00b      	b.n	9284e <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   92836:	683b      	ldr	r3, [r7, #0]
   92838:	4a10      	ldr	r2, [pc, #64]	; (9287c <cl_hep_controller+0x568>)
   9283a:	6013      	str	r3, [r2, #0]
				break;
   9283c:	e007      	b.n	9284e <cl_hep_controller+0x53a>
				case 	CL_HEP_EVENT_PAUSEBOLUS:
				hp_State = CL_HEP_STATE_PAUSED;
   9283e:	4b0d      	ldr	r3, [pc, #52]	; (92874 <cl_hep_controller+0x560>)
   92840:	220e      	movs	r2, #14
   92842:	701a      	strb	r2, [r3, #0]
				break;
   92844:	e003      	b.n	9284e <cl_hep_controller+0x53a>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
   92846:	4b0b      	ldr	r3, [pc, #44]	; (92874 <cl_hep_controller+0x560>)
   92848:	220f      	movs	r2, #15
   9284a:	701a      	strb	r2, [r3, #0]
				break;
   9284c:	bf00      	nop
			}
		
		break;
   9284e:	e00b      	b.n	92868 <cl_hep_controller+0x554>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   92850:	bf00      	nop
   92852:	e00a      	b.n	9286a <cl_hep_controller+0x556>
				pwm_period =  cl_hep_deliveryrate ;
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
			}
		break;
   92854:	bf00      	nop
   92856:	e008      	b.n	9286a <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   92858:	bf00      	nop
   9285a:	e006      	b.n	9286a <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   9285c:	bf00      	nop
   9285e:	e004      	b.n	9286a <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   92860:	bf00      	nop
   92862:	e002      	b.n	9286a <cl_hep_controller+0x556>
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   92864:	bf00      	nop
   92866:	e000      	b.n	9286a <cl_hep_controller+0x556>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
				break;
			}
		
		break;
   92868:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   9286a:	2300      	movs	r3, #0
   9286c:	4618      	mov	r0, r3
   9286e:	3710      	adds	r7, #16
   92870:	46bd      	mov	sp, r7
   92872:	bd80      	pop	{r7, pc}
   92874:	2007265f 	.word	0x2007265f
   92878:	20072660 	.word	0x20072660
   9287c:	200709bc 	.word	0x200709bc
   92880:	00096819 	.word	0x00096819
   92884:	000928ad 	.word	0x000928ad
   92888:	20072662 	.word	0x20072662
   9288c:	20072664 	.word	0x20072664
   92890:	000928cd 	.word	0x000928cd

00092894 <cl_hep_pumpFeedback_start>:

static Cl_Uint16Type pin_status = 1,hp_start_status = 0,prev_hp_start_status = 0,hp_end_status = 0,prev_hp_end_status = 0;
//static Cl_Uint16Type counter = 0;

Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   92894:	b480      	push	{r7}
   92896:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   92898:	4b03      	ldr	r3, [pc, #12]	; (928a8 <cl_hep_pumpFeedback_start+0x14>)
   9289a:	2203      	movs	r2, #3
   9289c:	701a      	strb	r2, [r3, #0]
	return 0;
   9289e:	2300      	movs	r3, #0
}
   928a0:	4618      	mov	r0, r3
   928a2:	46bd      	mov	sp, r7
   928a4:	bc80      	pop	{r7}
   928a6:	4770      	bx	lr
   928a8:	2007266e 	.word	0x2007266e

000928ac <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   928ac:	b480      	push	{r7}
   928ae:	b083      	sub	sp, #12
   928b0:	af00      	add	r7, sp, #0
   928b2:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   928b4:	4b04      	ldr	r3, [pc, #16]	; (928c8 <cl_hep_pumpFeedback_get_state+0x1c>)
   928b6:	781a      	ldrb	r2, [r3, #0]
   928b8:	687b      	ldr	r3, [r7, #4]
   928ba:	701a      	strb	r2, [r3, #0]
	return 0;
   928bc:	2300      	movs	r3, #0
}
   928be:	4618      	mov	r0, r3
   928c0:	370c      	adds	r7, #12
   928c2:	46bd      	mov	sp, r7
   928c4:	bc80      	pop	{r7}
   928c6:	4770      	bx	lr
   928c8:	2007266e 	.word	0x2007266e

000928cc <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   928cc:	b480      	push	{r7}
   928ce:	b083      	sub	sp, #12
   928d0:	af00      	add	r7, sp, #0
   928d2:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   928d4:	4b07      	ldr	r3, [pc, #28]	; (928f4 <cl_hep_pumpFeedback_get_delta+0x28>)
   928d6:	881a      	ldrh	r2, [r3, #0]
   928d8:	4b07      	ldr	r3, [pc, #28]	; (928f8 <cl_hep_pumpFeedback_get_delta+0x2c>)
   928da:	881b      	ldrh	r3, [r3, #0]
   928dc:	1ad3      	subs	r3, r2, r3
   928de:	b29b      	uxth	r3, r3
   928e0:	b21a      	sxth	r2, r3
   928e2:	687b      	ldr	r3, [r7, #4]
   928e4:	801a      	strh	r2, [r3, #0]
	return 0;
   928e6:	2300      	movs	r3, #0
}
   928e8:	4618      	mov	r0, r3
   928ea:	370c      	adds	r7, #12
   928ec:	46bd      	mov	sp, r7
   928ee:	bc80      	pop	{r7}
   928f0:	4770      	bx	lr
   928f2:	bf00      	nop
   928f4:	20072672 	.word	0x20072672
   928f8:	2007266c 	.word	0x2007266c
   928fc:	00000000 	.word	0x00000000

00092900 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 5 ms clock
{
   92900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   92902:	af00      	add	r7, sp, #0
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   92904:	4b64      	ldr	r3, [pc, #400]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   92906:	781b      	ldrb	r3, [r3, #0]
   92908:	2b00      	cmp	r3, #0
   9290a:	f000 80b8 	beq.w	92a7e <cl_hep_pumpFeedback_timer+0x17e>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   9290e:	4963      	ldr	r1, [pc, #396]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   92910:	201b      	movs	r0, #27
   92912:	4b63      	ldr	r3, [pc, #396]	; (92aa0 <cl_hep_pumpFeedback_timer+0x1a0>)
   92914:	4798      	blx	r3

		fivemscounter++;
   92916:	4b63      	ldr	r3, [pc, #396]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92918:	881b      	ldrh	r3, [r3, #0]
   9291a:	3301      	adds	r3, #1
   9291c:	b29a      	uxth	r2, r3
   9291e:	4b61      	ldr	r3, [pc, #388]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92920:	801a      	strh	r2, [r3, #0]
		if(fivemscounter > 10000)
   92922:	4b60      	ldr	r3, [pc, #384]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92924:	881b      	ldrh	r3, [r3, #0]
   92926:	f242 7210 	movw	r2, #10000	; 0x2710
   9292a:	4293      	cmp	r3, r2
   9292c:	d903      	bls.n	92936 <cl_hep_pumpFeedback_timer+0x36>
		{
			Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   9292e:	2101      	movs	r1, #1
   92930:	2035      	movs	r0, #53	; 0x35
   92932:	4b5d      	ldr	r3, [pc, #372]	; (92aa8 <cl_hep_pumpFeedback_timer+0x1a8>)
   92934:	4798      	blx	r3
		}
		if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   92936:	4b58      	ldr	r3, [pc, #352]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   92938:	781b      	ldrb	r3, [r3, #0]
   9293a:	2b03      	cmp	r3, #3
   9293c:	d106      	bne.n	9294c <cl_hep_pumpFeedback_timer+0x4c>
   9293e:	4b5b      	ldr	r3, [pc, #364]	; (92aac <cl_hep_pumpFeedback_timer+0x1ac>)
   92940:	881b      	ldrh	r3, [r3, #0]
   92942:	2b02      	cmp	r3, #2
   92944:	d902      	bls.n	9294c <cl_hep_pumpFeedback_timer+0x4c>
		{
			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   92946:	4b54      	ldr	r3, [pc, #336]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   92948:	2204      	movs	r2, #4
   9294a:	701a      	strb	r2, [r3, #0]
		}

		if(count_state == false)
   9294c:	4b58      	ldr	r3, [pc, #352]	; (92ab0 <cl_hep_pumpFeedback_timer+0x1b0>)
   9294e:	781b      	ldrb	r3, [r3, #0]
   92950:	f083 0301 	eor.w	r3, r3, #1
   92954:	b2db      	uxtb	r3, r3
   92956:	2b00      	cmp	r3, #0
   92958:	d012      	beq.n	92980 <cl_hep_pumpFeedback_timer+0x80>
		{
			if(hep_rotataion_marker == 0 )
   9295a:	4b50      	ldr	r3, [pc, #320]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   9295c:	881b      	ldrh	r3, [r3, #0]
   9295e:	2b00      	cmp	r3, #0
   92960:	f040 8089 	bne.w	92a76 <cl_hep_pumpFeedback_timer+0x176>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   92964:	4b53      	ldr	r3, [pc, #332]	; (92ab4 <cl_hep_pumpFeedback_timer+0x1b4>)
   92966:	881a      	ldrh	r2, [r3, #0]
   92968:	4b4c      	ldr	r3, [pc, #304]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   9296a:	881b      	ldrh	r3, [r3, #0]
   9296c:	429a      	cmp	r2, r3
   9296e:	f000 8082 	beq.w	92a76 <cl_hep_pumpFeedback_timer+0x176>
				{
					count_state = true;
   92972:	4b4f      	ldr	r3, [pc, #316]	; (92ab0 <cl_hep_pumpFeedback_timer+0x1b0>)
   92974:	2201      	movs	r2, #1
   92976:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					fivemscounter = 0;
   92978:	4b4a      	ldr	r3, [pc, #296]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   9297a:	2200      	movs	r2, #0
   9297c:	801a      	strh	r2, [r3, #0]
   9297e:	e07a      	b.n	92a76 <cl_hep_pumpFeedback_timer+0x176>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   92980:	4b46      	ldr	r3, [pc, #280]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   92982:	881b      	ldrh	r3, [r3, #0]
   92984:	2b00      	cmp	r3, #0
   92986:	d176      	bne.n	92a76 <cl_hep_pumpFeedback_timer+0x176>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   92988:	4b4a      	ldr	r3, [pc, #296]	; (92ab4 <cl_hep_pumpFeedback_timer+0x1b4>)
   9298a:	881a      	ldrh	r2, [r3, #0]
   9298c:	4b43      	ldr	r3, [pc, #268]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   9298e:	881b      	ldrh	r3, [r3, #0]
   92990:	429a      	cmp	r2, r3
   92992:	d070      	beq.n	92a76 <cl_hep_pumpFeedback_timer+0x176>
				{
					count_state = true;
   92994:	4b46      	ldr	r3, [pc, #280]	; (92ab0 <cl_hep_pumpFeedback_timer+0x1b0>)
   92996:	2201      	movs	r2, #1
   92998:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   9299a:	4b44      	ldr	r3, [pc, #272]	; (92aac <cl_hep_pumpFeedback_timer+0x1ac>)
   9299c:	881b      	ldrh	r3, [r3, #0]
   9299e:	3301      	adds	r3, #1
   929a0:	b29a      	uxth	r2, r3
   929a2:	4b42      	ldr	r3, [pc, #264]	; (92aac <cl_hep_pumpFeedback_timer+0x1ac>)
   929a4:	801a      	strh	r2, [r3, #0]
					hep_period = fivemscounter*5;
   929a6:	4b3f      	ldr	r3, [pc, #252]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   929a8:	881b      	ldrh	r3, [r3, #0]
   929aa:	461a      	mov	r2, r3
   929ac:	0092      	lsls	r2, r2, #2
   929ae:	4413      	add	r3, r2
   929b0:	b29a      	uxth	r2, r3
   929b2:	4b41      	ldr	r3, [pc, #260]	; (92ab8 <cl_hep_pumpFeedback_timer+0x1b8>)
   929b4:	801a      	strh	r2, [r3, #0]
				
					
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
					if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   929b6:	4b38      	ldr	r3, [pc, #224]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   929b8:	781b      	ldrb	r3, [r3, #0]
   929ba:	2b03      	cmp	r3, #3
   929bc:	d04e      	beq.n	92a5c <cl_hep_pumpFeedback_timer+0x15c>
					{
						if(hep_period > (1.01 *hep_expected_period))
   929be:	4b3e      	ldr	r3, [pc, #248]	; (92ab8 <cl_hep_pumpFeedback_timer+0x1b8>)
   929c0:	881b      	ldrh	r3, [r3, #0]
   929c2:	461a      	mov	r2, r3
   929c4:	4b3d      	ldr	r3, [pc, #244]	; (92abc <cl_hep_pumpFeedback_timer+0x1bc>)
   929c6:	4610      	mov	r0, r2
   929c8:	4798      	blx	r3
   929ca:	4605      	mov	r5, r0
   929cc:	460e      	mov	r6, r1
   929ce:	4b3c      	ldr	r3, [pc, #240]	; (92ac0 <cl_hep_pumpFeedback_timer+0x1c0>)
   929d0:	881b      	ldrh	r3, [r3, #0]
   929d2:	461a      	mov	r2, r3
   929d4:	4b39      	ldr	r3, [pc, #228]	; (92abc <cl_hep_pumpFeedback_timer+0x1bc>)
   929d6:	4610      	mov	r0, r2
   929d8:	4798      	blx	r3
   929da:	4c3a      	ldr	r4, [pc, #232]	; (92ac4 <cl_hep_pumpFeedback_timer+0x1c4>)
   929dc:	a32a      	add	r3, pc, #168	; (adr r3, 92a88 <cl_hep_pumpFeedback_timer+0x188>)
   929de:	e9d3 2300 	ldrd	r2, r3, [r3]
   929e2:	47a0      	blx	r4
   929e4:	4603      	mov	r3, r0
   929e6:	460c      	mov	r4, r1
   929e8:	461a      	mov	r2, r3
   929ea:	4623      	mov	r3, r4
   929ec:	4c36      	ldr	r4, [pc, #216]	; (92ac8 <cl_hep_pumpFeedback_timer+0x1c8>)
   929ee:	4628      	mov	r0, r5
   929f0:	4631      	mov	r1, r6
   929f2:	47a0      	blx	r4
   929f4:	4603      	mov	r3, r0
   929f6:	2b00      	cmp	r3, #0
   929f8:	d007      	beq.n	92a0a <cl_hep_pumpFeedback_timer+0x10a>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   929fa:	4b27      	ldr	r3, [pc, #156]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   929fc:	2206      	movs	r2, #6
   929fe:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   92a00:	2101      	movs	r1, #1
   92a02:	2035      	movs	r0, #53	; 0x35
   92a04:	4b28      	ldr	r3, [pc, #160]	; (92aa8 <cl_hep_pumpFeedback_timer+0x1a8>)
   92a06:	4798      	blx	r3
   92a08:	e028      	b.n	92a5c <cl_hep_pumpFeedback_timer+0x15c>
						}
						else if(hep_period < (0.99 *hep_expected_period))
   92a0a:	4b2b      	ldr	r3, [pc, #172]	; (92ab8 <cl_hep_pumpFeedback_timer+0x1b8>)
   92a0c:	881b      	ldrh	r3, [r3, #0]
   92a0e:	461a      	mov	r2, r3
   92a10:	4b2a      	ldr	r3, [pc, #168]	; (92abc <cl_hep_pumpFeedback_timer+0x1bc>)
   92a12:	4610      	mov	r0, r2
   92a14:	4798      	blx	r3
   92a16:	4605      	mov	r5, r0
   92a18:	460e      	mov	r6, r1
   92a1a:	4b29      	ldr	r3, [pc, #164]	; (92ac0 <cl_hep_pumpFeedback_timer+0x1c0>)
   92a1c:	881b      	ldrh	r3, [r3, #0]
   92a1e:	461a      	mov	r2, r3
   92a20:	4b26      	ldr	r3, [pc, #152]	; (92abc <cl_hep_pumpFeedback_timer+0x1bc>)
   92a22:	4610      	mov	r0, r2
   92a24:	4798      	blx	r3
   92a26:	4c27      	ldr	r4, [pc, #156]	; (92ac4 <cl_hep_pumpFeedback_timer+0x1c4>)
   92a28:	a319      	add	r3, pc, #100	; (adr r3, 92a90 <cl_hep_pumpFeedback_timer+0x190>)
   92a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   92a2e:	47a0      	blx	r4
   92a30:	4603      	mov	r3, r0
   92a32:	460c      	mov	r4, r1
   92a34:	461a      	mov	r2, r3
   92a36:	4623      	mov	r3, r4
   92a38:	4c24      	ldr	r4, [pc, #144]	; (92acc <cl_hep_pumpFeedback_timer+0x1cc>)
   92a3a:	4628      	mov	r0, r5
   92a3c:	4631      	mov	r1, r6
   92a3e:	47a0      	blx	r4
   92a40:	4603      	mov	r3, r0
   92a42:	2b00      	cmp	r3, #0
   92a44:	d007      	beq.n	92a56 <cl_hep_pumpFeedback_timer+0x156>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   92a46:	4b14      	ldr	r3, [pc, #80]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   92a48:	2207      	movs	r2, #7
   92a4a:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   92a4c:	2101      	movs	r1, #1
   92a4e:	2034      	movs	r0, #52	; 0x34
   92a50:	4b15      	ldr	r3, [pc, #84]	; (92aa8 <cl_hep_pumpFeedback_timer+0x1a8>)
   92a52:	4798      	blx	r3
   92a54:	e002      	b.n	92a5c <cl_hep_pumpFeedback_timer+0x15c>
						}
						else
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   92a56:	4b10      	ldr	r3, [pc, #64]	; (92a98 <cl_hep_pumpFeedback_timer+0x198>)
   92a58:	2205      	movs	r2, #5
   92a5a:	701a      	strb	r2, [r3, #0]
						}
					}

				
					hep_freq_in_min  = ( 60000) / hep_period;
   92a5c:	4b16      	ldr	r3, [pc, #88]	; (92ab8 <cl_hep_pumpFeedback_timer+0x1b8>)
   92a5e:	881b      	ldrh	r3, [r3, #0]
   92a60:	461a      	mov	r2, r3
   92a62:	f64e 2360 	movw	r3, #60000	; 0xea60
   92a66:	fb93 f3f2 	sdiv	r3, r3, r2
   92a6a:	b29a      	uxth	r2, r3
   92a6c:	4b18      	ldr	r3, [pc, #96]	; (92ad0 <cl_hep_pumpFeedback_timer+0x1d0>)
   92a6e:	801a      	strh	r2, [r3, #0]
					fivemscounter = 0;
   92a70:	4b0c      	ldr	r3, [pc, #48]	; (92aa4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92a72:	2200      	movs	r2, #0
   92a74:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   92a76:	4b09      	ldr	r3, [pc, #36]	; (92a9c <cl_hep_pumpFeedback_timer+0x19c>)
   92a78:	881a      	ldrh	r2, [r3, #0]
   92a7a:	4b0e      	ldr	r3, [pc, #56]	; (92ab4 <cl_hep_pumpFeedback_timer+0x1b4>)
   92a7c:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   92a7e:	2300      	movs	r3, #0
}
   92a80:	4618      	mov	r0, r3
   92a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   92a84:	f3af 8000 	nop.w
   92a88:	c28f5c29 	.word	0xc28f5c29
   92a8c:	3ff028f5 	.word	0x3ff028f5
   92a90:	7ae147ae 	.word	0x7ae147ae
   92a94:	3fefae14 	.word	0x3fefae14
   92a98:	2007266e 	.word	0x2007266e
   92a9c:	200709c0 	.word	0x200709c0
   92aa0:	0008d499 	.word	0x0008d499
   92aa4:	20072670 	.word	0x20072670
   92aa8:	000830b1 	.word	0x000830b1
   92aac:	20072676 	.word	0x20072676
   92ab0:	20072678 	.word	0x20072678
   92ab4:	200709c2 	.word	0x200709c2
   92ab8:	20072672 	.word	0x20072672
   92abc:	000a1d41 	.word	0x000a1d41
   92ac0:	2007266c 	.word	0x2007266c
   92ac4:	000a1e0d 	.word	0x000a1e0d
   92ac8:	000a232d 	.word	0x000a232d
   92acc:	000a22f1 	.word	0x000a22f1
   92ad0:	20072674 	.word	0x20072674

00092ad4 <cl_hep_pump_enddetction_timer>:

Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
{
   92ad4:	b580      	push	{r7, lr}
   92ad6:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   92ad8:	4915      	ldr	r1, [pc, #84]	; (92b30 <cl_hep_pump_enddetction_timer+0x5c>)
   92ada:	2017      	movs	r0, #23
   92adc:	4b15      	ldr	r3, [pc, #84]	; (92b34 <cl_hep_pump_enddetction_timer+0x60>)
   92ade:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   92ae0:	4b15      	ldr	r3, [pc, #84]	; (92b38 <cl_hep_pump_enddetction_timer+0x64>)
   92ae2:	881a      	ldrh	r2, [r3, #0]
   92ae4:	4b12      	ldr	r3, [pc, #72]	; (92b30 <cl_hep_pump_enddetction_timer+0x5c>)
   92ae6:	881b      	ldrh	r3, [r3, #0]
   92ae8:	429a      	cmp	r2, r3
   92aea:	d009      	beq.n	92b00 <cl_hep_pump_enddetction_timer+0x2c>
			{
				prev_hp_start_status = hp_start_status;
   92aec:	4b10      	ldr	r3, [pc, #64]	; (92b30 <cl_hep_pump_enddetction_timer+0x5c>)
   92aee:	881a      	ldrh	r2, [r3, #0]
   92af0:	4b11      	ldr	r3, [pc, #68]	; (92b38 <cl_hep_pump_enddetction_timer+0x64>)
   92af2:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   92af4:	4b0e      	ldr	r3, [pc, #56]	; (92b30 <cl_hep_pump_enddetction_timer+0x5c>)
   92af6:	881b      	ldrh	r3, [r3, #0]
   92af8:	2b00      	cmp	r3, #0
   92afa:	d101      	bne.n	92b00 <cl_hep_pump_enddetction_timer+0x2c>
				{
					sv_cntrl_resetHepa_dir();
   92afc:	4b0f      	ldr	r3, [pc, #60]	; (92b3c <cl_hep_pump_enddetction_timer+0x68>)
   92afe:	4798      	blx	r3
			}
			



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   92b00:	490f      	ldr	r1, [pc, #60]	; (92b40 <cl_hep_pump_enddetction_timer+0x6c>)
   92b02:	2018      	movs	r0, #24
   92b04:	4b0b      	ldr	r3, [pc, #44]	; (92b34 <cl_hep_pump_enddetction_timer+0x60>)
   92b06:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   92b08:	4b0e      	ldr	r3, [pc, #56]	; (92b44 <cl_hep_pump_enddetction_timer+0x70>)
   92b0a:	881a      	ldrh	r2, [r3, #0]
   92b0c:	4b0c      	ldr	r3, [pc, #48]	; (92b40 <cl_hep_pump_enddetction_timer+0x6c>)
   92b0e:	881b      	ldrh	r3, [r3, #0]
   92b10:	429a      	cmp	r2, r3
   92b12:	d009      	beq.n	92b28 <cl_hep_pump_enddetction_timer+0x54>
			{
				prev_hp_end_status = hp_end_status;
   92b14:	4b0a      	ldr	r3, [pc, #40]	; (92b40 <cl_hep_pump_enddetction_timer+0x6c>)
   92b16:	881a      	ldrh	r2, [r3, #0]
   92b18:	4b0a      	ldr	r3, [pc, #40]	; (92b44 <cl_hep_pump_enddetction_timer+0x70>)
   92b1a:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 1)
   92b1c:	4b08      	ldr	r3, [pc, #32]	; (92b40 <cl_hep_pump_enddetction_timer+0x6c>)
   92b1e:	881b      	ldrh	r3, [r3, #0]
   92b20:	2b01      	cmp	r3, #1
   92b22:	d101      	bne.n	92b28 <cl_hep_pump_enddetction_timer+0x54>
				{
						sv_cntrl_setHepa_dir();
   92b24:	4b08      	ldr	r3, [pc, #32]	; (92b48 <cl_hep_pump_enddetction_timer+0x74>)
   92b26:	4798      	blx	r3
				}
			}
			
		}
		
		return 0;
   92b28:	2300      	movs	r3, #0
   92b2a:	4618      	mov	r0, r3
   92b2c:	bd80      	pop	{r7, pc}
   92b2e:	bf00      	nop
   92b30:	2007267a 	.word	0x2007267a
   92b34:	0008d499 	.word	0x0008d499
   92b38:	2007267c 	.word	0x2007267c
   92b3c:	000968e1 	.word	0x000968e1
   92b40:	2007267e 	.word	0x2007267e
   92b44:	20072680 	.word	0x20072680
   92b48:	000968cd 	.word	0x000968cd

00092b4c <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   92b4c:	b580      	push	{r7, lr}
   92b4e:	b084      	sub	sp, #16
   92b50:	af00      	add	r7, sp, #0
   92b52:	4603      	mov	r3, r0
   92b54:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   92b56:	79fb      	ldrb	r3, [r7, #7]
   92b58:	3b01      	subs	r3, #1
   92b5a:	2b03      	cmp	r3, #3
   92b5c:	d859      	bhi.n	92c12 <cl_level_switchcontroller+0xc6>
   92b5e:	a201      	add	r2, pc, #4	; (adr r2, 92b64 <cl_level_switchcontroller+0x18>)
   92b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92b64:	00092b75 	.word	0x00092b75
   92b68:	00092c13 	.word	0x00092c13
   92b6c:	00092c13 	.word	0x00092c13
   92b70:	00092bb3 	.word	0x00092bb3
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   92b74:	203e      	movs	r0, #62	; 0x3e
   92b76:	4b2c      	ldr	r3, [pc, #176]	; (92c28 <cl_level_switchcontroller+0xdc>)
   92b78:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   92b7a:	203d      	movs	r0, #61	; 0x3d
   92b7c:	4b2a      	ldr	r3, [pc, #168]	; (92c28 <cl_level_switchcontroller+0xdc>)
   92b7e:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   92b80:	202d      	movs	r0, #45	; 0x2d
   92b82:	4b29      	ldr	r3, [pc, #164]	; (92c28 <cl_level_switchcontroller+0xdc>)
   92b84:	4798      	blx	r3
		
		toggle_count++;
   92b86:	4b29      	ldr	r3, [pc, #164]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92b88:	881b      	ldrh	r3, [r3, #0]
   92b8a:	3301      	adds	r3, #1
   92b8c:	b29a      	uxth	r2, r3
   92b8e:	4b27      	ldr	r3, [pc, #156]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92b90:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   92b92:	2300      	movs	r3, #0
   92b94:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   92b96:	4b25      	ldr	r3, [pc, #148]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92b98:	881b      	ldrh	r3, [r3, #0]
   92b9a:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   92b9c:	2315      	movs	r3, #21
   92b9e:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
		if(toggle_count > 20 )
   92ba0:	4b22      	ldr	r3, [pc, #136]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92ba2:	881b      	ldrh	r3, [r3, #0]
   92ba4:	2b14      	cmp	r3, #20
   92ba6:	d936      	bls.n	92c16 <cl_level_switchcontroller+0xca>
		{
			// low inlet flow alarm or level switch  malfunction
			Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);
   92ba8:	2101      	movs	r1, #1
   92baa:	202d      	movs	r0, #45	; 0x2d
   92bac:	4b20      	ldr	r3, [pc, #128]	; (92c30 <cl_level_switchcontroller+0xe4>)
   92bae:	4798      	blx	r3
		}

	
		break;
   92bb0:	e031      	b.n	92c16 <cl_level_switchcontroller+0xca>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   92bb2:	4b20      	ldr	r3, [pc, #128]	; (92c34 <cl_level_switchcontroller+0xe8>)
   92bb4:	781b      	ldrb	r3, [r3, #0]
   92bb6:	2b01      	cmp	r3, #1
   92bb8:	d113      	bne.n	92be2 <cl_level_switchcontroller+0x96>
		{
			//stop flow
			sv_cntrl_deactivate_valve(VALVE_ID1);
   92bba:	2001      	movs	r0, #1
   92bbc:	4b1e      	ldr	r3, [pc, #120]	; (92c38 <cl_level_switchcontroller+0xec>)
   92bbe:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   92bc0:	4b1c      	ldr	r3, [pc, #112]	; (92c34 <cl_level_switchcontroller+0xe8>)
   92bc2:	2200      	movs	r2, #0
   92bc4:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   92bc6:	4b1d      	ldr	r3, [pc, #116]	; (92c3c <cl_level_switchcontroller+0xf0>)
   92bc8:	2200      	movs	r2, #0
   92bca:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   92bcc:	4b1c      	ldr	r3, [pc, #112]	; (92c40 <cl_level_switchcontroller+0xf4>)
   92bce:	781b      	ldrb	r3, [r3, #0]
   92bd0:	2b02      	cmp	r3, #2
   92bd2:	d022      	beq.n	92c1a <cl_level_switchcontroller+0xce>
			{
				toggle_count = 0;
   92bd4:	4b15      	ldr	r3, [pc, #84]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92bd6:	2200      	movs	r2, #0
   92bd8:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   92bda:	4b19      	ldr	r3, [pc, #100]	; (92c40 <cl_level_switchcontroller+0xf4>)
   92bdc:	2202      	movs	r2, #2
   92bde:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   92be0:	e01b      	b.n	92c1a <cl_level_switchcontroller+0xce>
				toggle_count = 0;
				v1_status = V1_OFF;
			}

		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   92be2:	4b14      	ldr	r3, [pc, #80]	; (92c34 <cl_level_switchcontroller+0xe8>)
   92be4:	781b      	ldrb	r3, [r3, #0]
   92be6:	2b02      	cmp	r3, #2
   92be8:	d117      	bne.n	92c1a <cl_level_switchcontroller+0xce>
		{
			//start flow
			sv_cntrl_activate_valve(VALVE_ID1);
   92bea:	2001      	movs	r0, #1
   92bec:	4b15      	ldr	r3, [pc, #84]	; (92c44 <cl_level_switchcontroller+0xf8>)
   92bee:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   92bf0:	4b10      	ldr	r3, [pc, #64]	; (92c34 <cl_level_switchcontroller+0xe8>)
   92bf2:	2200      	movs	r2, #0
   92bf4:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   92bf6:	4b14      	ldr	r3, [pc, #80]	; (92c48 <cl_level_switchcontroller+0xfc>)
   92bf8:	2200      	movs	r2, #0
   92bfa:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   92bfc:	4b10      	ldr	r3, [pc, #64]	; (92c40 <cl_level_switchcontroller+0xf4>)
   92bfe:	781b      	ldrb	r3, [r3, #0]
   92c00:	2b01      	cmp	r3, #1
   92c02:	d00a      	beq.n	92c1a <cl_level_switchcontroller+0xce>
			{
				toggle_count = 0;
   92c04:	4b09      	ldr	r3, [pc, #36]	; (92c2c <cl_level_switchcontroller+0xe0>)
   92c06:	2200      	movs	r2, #0
   92c08:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   92c0a:	4b0d      	ldr	r3, [pc, #52]	; (92c40 <cl_level_switchcontroller+0xf4>)
   92c0c:	2201      	movs	r2, #1
   92c0e:	701a      	strb	r2, [r3, #0]
			}
			
		}
		break;
   92c10:	e003      	b.n	92c1a <cl_level_switchcontroller+0xce>
		default:break;
   92c12:	bf00      	nop
   92c14:	e002      	b.n	92c1c <cl_level_switchcontroller+0xd0>
			// low inlet flow alarm or level switch  malfunction
			Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);
		}

	
		break;
   92c16:	bf00      	nop
   92c18:	e000      	b.n	92c1c <cl_level_switchcontroller+0xd0>
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   92c1a:	bf00      	nop
		default:break;
		
	}
	return CL_OK;
   92c1c:	2300      	movs	r3, #0
   92c1e:	4618      	mov	r0, r3
   92c20:	3710      	adds	r7, #16
   92c22:	46bd      	mov	sp, r7
   92c24:	bd80      	pop	{r7, pc}
   92c26:	bf00      	nop
   92c28:	00082ffd 	.word	0x00082ffd
   92c2c:	2007268a 	.word	0x2007268a
   92c30:	000830b1 	.word	0x000830b1
   92c34:	20072684 	.word	0x20072684
   92c38:	0009689d 	.word	0x0009689d
   92c3c:	20072688 	.word	0x20072688
   92c40:	2007268c 	.word	0x2007268c
   92c44:	0009687d 	.word	0x0009687d
   92c48:	20072686 	.word	0x20072686

00092c4c <cl_ufpumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   92c4c:	b480      	push	{r7}
   92c4e:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   92c50:	4b03      	ldr	r3, [pc, #12]	; (92c60 <cl_ufpumpFeedback_start+0x14>)
   92c52:	2201      	movs	r2, #1
   92c54:	701a      	strb	r2, [r3, #0]
	return 0;
   92c56:	2300      	movs	r3, #0
}
   92c58:	4618      	mov	r0, r3
   92c5a:	46bd      	mov	sp, r7
   92c5c:	bc80      	pop	{r7}
   92c5e:	4770      	bx	lr
   92c60:	20072690 	.word	0x20072690

00092c64 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   92c64:	b480      	push	{r7}
   92c66:	af00      	add	r7, sp, #0
	
	return 0;
   92c68:	2300      	movs	r3, #0
}
   92c6a:	4618      	mov	r0, r3
   92c6c:	46bd      	mov	sp, r7
   92c6e:	bc80      	pop	{r7}
   92c70:	4770      	bx	lr
   92c72:	bf00      	nop

00092c74 <cl_ufpumpFeedback_get_state>:
Cl_ReturnCodeType cl_ufpumpFeedback_get_state(cl_ufpump_states* pstate)
{
   92c74:	b480      	push	{r7}
   92c76:	b083      	sub	sp, #12
   92c78:	af00      	add	r7, sp, #0
   92c7a:	6078      	str	r0, [r7, #4]
	*pstate = cl_ufpump_state;
   92c7c:	4b04      	ldr	r3, [pc, #16]	; (92c90 <cl_ufpumpFeedback_get_state+0x1c>)
   92c7e:	781a      	ldrb	r2, [r3, #0]
   92c80:	687b      	ldr	r3, [r7, #4]
   92c82:	701a      	strb	r2, [r3, #0]
	return 0;
   92c84:	2300      	movs	r3, #0
}
   92c86:	4618      	mov	r0, r3
   92c88:	370c      	adds	r7, #12
   92c8a:	46bd      	mov	sp, r7
   92c8c:	bc80      	pop	{r7}
   92c8e:	4770      	bx	lr
   92c90:	20072690 	.word	0x20072690

00092c94 <cl_ufpumpFeedback_get_delta>:
Cl_ReturnCodeType cl_ufpumpFeedback_get_delta(int16_t* pdelta)
{
   92c94:	b480      	push	{r7}
   92c96:	b083      	sub	sp, #12
   92c98:	af00      	add	r7, sp, #0
   92c9a:	6078      	str	r0, [r7, #4]
	*pdelta = uf_period - uf_expected_period;
   92c9c:	4b07      	ldr	r3, [pc, #28]	; (92cbc <cl_ufpumpFeedback_get_delta+0x28>)
   92c9e:	881a      	ldrh	r2, [r3, #0]
   92ca0:	4b07      	ldr	r3, [pc, #28]	; (92cc0 <cl_ufpumpFeedback_get_delta+0x2c>)
   92ca2:	881b      	ldrh	r3, [r3, #0]
   92ca4:	1ad3      	subs	r3, r2, r3
   92ca6:	b29b      	uxth	r3, r3
   92ca8:	b21a      	sxth	r2, r3
   92caa:	687b      	ldr	r3, [r7, #4]
   92cac:	801a      	strh	r2, [r3, #0]
	return 0;
   92cae:	2300      	movs	r3, #0
}
   92cb0:	4618      	mov	r0, r3
   92cb2:	370c      	adds	r7, #12
   92cb4:	46bd      	mov	sp, r7
   92cb6:	bc80      	pop	{r7}
   92cb8:	4770      	bx	lr
   92cba:	bf00      	nop
   92cbc:	20072694 	.word	0x20072694
   92cc0:	2007268e 	.word	0x2007268e

00092cc4 <cl_ufpumpFeedback_set_expected_period>:
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   92cc4:	b480      	push	{r7}
   92cc6:	b083      	sub	sp, #12
   92cc8:	af00      	add	r7, sp, #0
   92cca:	4603      	mov	r3, r0
   92ccc:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   92cce:	88fa      	ldrh	r2, [r7, #6]
   92cd0:	4b03      	ldr	r3, [pc, #12]	; (92ce0 <cl_ufpumpFeedback_set_expected_period+0x1c>)
   92cd2:	801a      	strh	r2, [r3, #0]
	return 0;
   92cd4:	2300      	movs	r3, #0
}
   92cd6:	4618      	mov	r0, r3
   92cd8:	370c      	adds	r7, #12
   92cda:	46bd      	mov	sp, r7
   92cdc:	bc80      	pop	{r7}
   92cde:	4770      	bx	lr
   92ce0:	2007268e 	.word	0x2007268e
   92ce4:	00000000 	.word	0x00000000

00092ce8 <cl_ufpumpFeedback_timer>:

Cl_ReturnCodeType cl_ufpumpFeedback_timer(void) // 5 ms clock
{
   92ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   92cea:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;	
	//cl_testgetsensordata(UF_ROTATION_MARKER,&uf_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_UFP_FB, &uf_rotataion_marker);
   92cec:	4958      	ldr	r1, [pc, #352]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92cee:	201a      	movs	r0, #26
   92cf0:	4b58      	ldr	r3, [pc, #352]	; (92e54 <cl_ufpumpFeedback_timer+0x16c>)
   92cf2:	4798      	blx	r3

	fivemscounter++;
   92cf4:	4b58      	ldr	r3, [pc, #352]	; (92e58 <cl_ufpumpFeedback_timer+0x170>)
   92cf6:	881b      	ldrh	r3, [r3, #0]
   92cf8:	3301      	adds	r3, #1
   92cfa:	b29a      	uxth	r2, r3
   92cfc:	4b56      	ldr	r3, [pc, #344]	; (92e58 <cl_ufpumpFeedback_timer+0x170>)
   92cfe:	801a      	strh	r2, [r3, #0]
	if((cl_ufpump_state ==  CL_UFP_STATE_STARTED) && (uf_rotation_counter > 2))
   92d00:	4b56      	ldr	r3, [pc, #344]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92d02:	781b      	ldrb	r3, [r3, #0]
   92d04:	2b01      	cmp	r3, #1
   92d06:	d106      	bne.n	92d16 <cl_ufpumpFeedback_timer+0x2e>
   92d08:	4b55      	ldr	r3, [pc, #340]	; (92e60 <cl_ufpumpFeedback_timer+0x178>)
   92d0a:	881b      	ldrh	r3, [r3, #0]
   92d0c:	2b02      	cmp	r3, #2
   92d0e:	d902      	bls.n	92d16 <cl_ufpumpFeedback_timer+0x2e>
	{
		cl_ufpump_state = CL_UFP_STATE_RUNNING;
   92d10:	4b52      	ldr	r3, [pc, #328]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92d12:	2202      	movs	r2, #2
   92d14:	701a      	strb	r2, [r3, #0]
	}
	
	//#if 0
	if(count_state == false)
   92d16:	4b53      	ldr	r3, [pc, #332]	; (92e64 <cl_ufpumpFeedback_timer+0x17c>)
   92d18:	781b      	ldrb	r3, [r3, #0]
   92d1a:	f083 0301 	eor.w	r3, r3, #1
   92d1e:	b2db      	uxtb	r3, r3
   92d20:	2b00      	cmp	r3, #0
   92d22:	d010      	beq.n	92d46 <cl_ufpumpFeedback_timer+0x5e>
	{
		if(uf_rotataion_marker == 0 )
   92d24:	4b4a      	ldr	r3, [pc, #296]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92d26:	881b      	ldrh	r3, [r3, #0]
   92d28:	2b00      	cmp	r3, #0
   92d2a:	d17f      	bne.n	92e2c <cl_ufpumpFeedback_timer+0x144>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   92d2c:	4b4e      	ldr	r3, [pc, #312]	; (92e68 <cl_ufpumpFeedback_timer+0x180>)
   92d2e:	881a      	ldrh	r2, [r3, #0]
   92d30:	4b47      	ldr	r3, [pc, #284]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92d32:	881b      	ldrh	r3, [r3, #0]
   92d34:	429a      	cmp	r2, r3
   92d36:	d079      	beq.n	92e2c <cl_ufpumpFeedback_timer+0x144>
			{
				count_state = true;
   92d38:	4b4a      	ldr	r3, [pc, #296]	; (92e64 <cl_ufpumpFeedback_timer+0x17c>)
   92d3a:	2201      	movs	r2, #1
   92d3c:	701a      	strb	r2, [r3, #0]
				//uf_rotation_counter++;
				fivemscounter = 0;
   92d3e:	4b46      	ldr	r3, [pc, #280]	; (92e58 <cl_ufpumpFeedback_timer+0x170>)
   92d40:	2200      	movs	r2, #0
   92d42:	801a      	strh	r2, [r3, #0]
   92d44:	e072      	b.n	92e2c <cl_ufpumpFeedback_timer+0x144>
			}
		}
	}
	else
	{
		if(uf_rotataion_marker == 0 )
   92d46:	4b42      	ldr	r3, [pc, #264]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92d48:	881b      	ldrh	r3, [r3, #0]
   92d4a:	2b00      	cmp	r3, #0
   92d4c:	d16e      	bne.n	92e2c <cl_ufpumpFeedback_timer+0x144>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   92d4e:	4b46      	ldr	r3, [pc, #280]	; (92e68 <cl_ufpumpFeedback_timer+0x180>)
   92d50:	881a      	ldrh	r2, [r3, #0]
   92d52:	4b3f      	ldr	r3, [pc, #252]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92d54:	881b      	ldrh	r3, [r3, #0]
   92d56:	429a      	cmp	r2, r3
   92d58:	d068      	beq.n	92e2c <cl_ufpumpFeedback_timer+0x144>
			{
				count_state = true;
   92d5a:	4b42      	ldr	r3, [pc, #264]	; (92e64 <cl_ufpumpFeedback_timer+0x17c>)
   92d5c:	2201      	movs	r2, #1
   92d5e:	701a      	strb	r2, [r3, #0]
				uf_rotation_counter++;
   92d60:	4b3f      	ldr	r3, [pc, #252]	; (92e60 <cl_ufpumpFeedback_timer+0x178>)
   92d62:	881b      	ldrh	r3, [r3, #0]
   92d64:	3301      	adds	r3, #1
   92d66:	b29a      	uxth	r2, r3
   92d68:	4b3d      	ldr	r3, [pc, #244]	; (92e60 <cl_ufpumpFeedback_timer+0x178>)
   92d6a:	801a      	strh	r2, [r3, #0]
				uf_period = fivemscounter*5;
   92d6c:	4b3a      	ldr	r3, [pc, #232]	; (92e58 <cl_ufpumpFeedback_timer+0x170>)
   92d6e:	881b      	ldrh	r3, [r3, #0]
   92d70:	461a      	mov	r2, r3
   92d72:	0092      	lsls	r2, r2, #2
   92d74:	4413      	add	r3, r2
   92d76:	b29a      	uxth	r2, r3
   92d78:	4b3c      	ldr	r3, [pc, #240]	; (92e6c <cl_ufpumpFeedback_timer+0x184>)
   92d7a:	801a      	strh	r2, [r3, #0]
				
				if(cl_ufpump_state != CL_UFP_STATE_STARTED)
   92d7c:	4b37      	ldr	r3, [pc, #220]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92d7e:	781b      	ldrb	r3, [r3, #0]
   92d80:	2b01      	cmp	r3, #1
   92d82:	d046      	beq.n	92e12 <cl_ufpumpFeedback_timer+0x12a>
				{
					if(uf_period > (1.01 *uf_expected_period))
   92d84:	4b39      	ldr	r3, [pc, #228]	; (92e6c <cl_ufpumpFeedback_timer+0x184>)
   92d86:	881b      	ldrh	r3, [r3, #0]
   92d88:	461a      	mov	r2, r3
   92d8a:	4b39      	ldr	r3, [pc, #228]	; (92e70 <cl_ufpumpFeedback_timer+0x188>)
   92d8c:	4610      	mov	r0, r2
   92d8e:	4798      	blx	r3
   92d90:	4605      	mov	r5, r0
   92d92:	460e      	mov	r6, r1
   92d94:	4b37      	ldr	r3, [pc, #220]	; (92e74 <cl_ufpumpFeedback_timer+0x18c>)
   92d96:	881b      	ldrh	r3, [r3, #0]
   92d98:	461a      	mov	r2, r3
   92d9a:	4b35      	ldr	r3, [pc, #212]	; (92e70 <cl_ufpumpFeedback_timer+0x188>)
   92d9c:	4610      	mov	r0, r2
   92d9e:	4798      	blx	r3
   92da0:	4c35      	ldr	r4, [pc, #212]	; (92e78 <cl_ufpumpFeedback_timer+0x190>)
   92da2:	a327      	add	r3, pc, #156	; (adr r3, 92e40 <cl_ufpumpFeedback_timer+0x158>)
   92da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   92da8:	47a0      	blx	r4
   92daa:	4603      	mov	r3, r0
   92dac:	460c      	mov	r4, r1
   92dae:	461a      	mov	r2, r3
   92db0:	4623      	mov	r3, r4
   92db2:	4c32      	ldr	r4, [pc, #200]	; (92e7c <cl_ufpumpFeedback_timer+0x194>)
   92db4:	4628      	mov	r0, r5
   92db6:	4631      	mov	r1, r6
   92db8:	47a0      	blx	r4
   92dba:	4603      	mov	r3, r0
   92dbc:	2b00      	cmp	r3, #0
   92dbe:	d003      	beq.n	92dc8 <cl_ufpumpFeedback_timer+0xe0>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_SLOW;
   92dc0:	4b26      	ldr	r3, [pc, #152]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92dc2:	2204      	movs	r2, #4
   92dc4:	701a      	strb	r2, [r3, #0]
   92dc6:	e024      	b.n	92e12 <cl_ufpumpFeedback_timer+0x12a>
					}
					else if(uf_period < (0.99 *uf_expected_period))
   92dc8:	4b28      	ldr	r3, [pc, #160]	; (92e6c <cl_ufpumpFeedback_timer+0x184>)
   92dca:	881b      	ldrh	r3, [r3, #0]
   92dcc:	461a      	mov	r2, r3
   92dce:	4b28      	ldr	r3, [pc, #160]	; (92e70 <cl_ufpumpFeedback_timer+0x188>)
   92dd0:	4610      	mov	r0, r2
   92dd2:	4798      	blx	r3
   92dd4:	4605      	mov	r5, r0
   92dd6:	460e      	mov	r6, r1
   92dd8:	4b26      	ldr	r3, [pc, #152]	; (92e74 <cl_ufpumpFeedback_timer+0x18c>)
   92dda:	881b      	ldrh	r3, [r3, #0]
   92ddc:	461a      	mov	r2, r3
   92dde:	4b24      	ldr	r3, [pc, #144]	; (92e70 <cl_ufpumpFeedback_timer+0x188>)
   92de0:	4610      	mov	r0, r2
   92de2:	4798      	blx	r3
   92de4:	4c24      	ldr	r4, [pc, #144]	; (92e78 <cl_ufpumpFeedback_timer+0x190>)
   92de6:	a318      	add	r3, pc, #96	; (adr r3, 92e48 <cl_ufpumpFeedback_timer+0x160>)
   92de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   92dec:	47a0      	blx	r4
   92dee:	4603      	mov	r3, r0
   92df0:	460c      	mov	r4, r1
   92df2:	461a      	mov	r2, r3
   92df4:	4623      	mov	r3, r4
   92df6:	4c22      	ldr	r4, [pc, #136]	; (92e80 <cl_ufpumpFeedback_timer+0x198>)
   92df8:	4628      	mov	r0, r5
   92dfa:	4631      	mov	r1, r6
   92dfc:	47a0      	blx	r4
   92dfe:	4603      	mov	r3, r0
   92e00:	2b00      	cmp	r3, #0
   92e02:	d003      	beq.n	92e0c <cl_ufpumpFeedback_timer+0x124>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_FAST;
   92e04:	4b15      	ldr	r3, [pc, #84]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92e06:	2205      	movs	r2, #5
   92e08:	701a      	strb	r2, [r3, #0]
   92e0a:	e002      	b.n	92e12 <cl_ufpumpFeedback_timer+0x12a>
					}
					else
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_NORMAL;
   92e0c:	4b13      	ldr	r3, [pc, #76]	; (92e5c <cl_ufpumpFeedback_timer+0x174>)
   92e0e:	2203      	movs	r2, #3
   92e10:	701a      	strb	r2, [r3, #0]
					}
				}

				
				uf_freq_in_min  = ( 60000) / uf_period;
   92e12:	4b16      	ldr	r3, [pc, #88]	; (92e6c <cl_ufpumpFeedback_timer+0x184>)
   92e14:	881b      	ldrh	r3, [r3, #0]
   92e16:	461a      	mov	r2, r3
   92e18:	f64e 2360 	movw	r3, #60000	; 0xea60
   92e1c:	fb93 f3f2 	sdiv	r3, r3, r2
   92e20:	b29a      	uxth	r2, r3
   92e22:	4b18      	ldr	r3, [pc, #96]	; (92e84 <cl_ufpumpFeedback_timer+0x19c>)
   92e24:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   92e26:	4b0c      	ldr	r3, [pc, #48]	; (92e58 <cl_ufpumpFeedback_timer+0x170>)
   92e28:	2200      	movs	r2, #0
   92e2a:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_uf_rotataion_marker = uf_rotataion_marker;
   92e2c:	4b08      	ldr	r3, [pc, #32]	; (92e50 <cl_ufpumpFeedback_timer+0x168>)
   92e2e:	881a      	ldrh	r2, [r3, #0]
   92e30:	4b0d      	ldr	r3, [pc, #52]	; (92e68 <cl_ufpumpFeedback_timer+0x180>)
   92e32:	801a      	strh	r2, [r3, #0]
	
	return 0;
   92e34:	2300      	movs	r3, #0
}
   92e36:	4618      	mov	r0, r3
   92e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   92e3a:	bf00      	nop
   92e3c:	f3af 8000 	nop.w
   92e40:	c28f5c29 	.word	0xc28f5c29
   92e44:	3ff028f5 	.word	0x3ff028f5
   92e48:	7ae147ae 	.word	0x7ae147ae
   92e4c:	3fefae14 	.word	0x3fefae14
   92e50:	200709c4 	.word	0x200709c4
   92e54:	0008d499 	.word	0x0008d499
   92e58:	20072692 	.word	0x20072692
   92e5c:	20072690 	.word	0x20072690
   92e60:	20072698 	.word	0x20072698
   92e64:	2007269a 	.word	0x2007269a
   92e68:	200709c6 	.word	0x200709c6
   92e6c:	20072694 	.word	0x20072694
   92e70:	000a1d41 	.word	0x000a1d41
   92e74:	2007268e 	.word	0x2007268e
   92e78:	000a1e0d 	.word	0x000a1e0d
   92e7c:	000a232d 	.word	0x000a232d
   92e80:	000a22f1 	.word	0x000a22f1
   92e84:	20072696 	.word	0x20072696

00092e88 <cl_uf_controller>:
extern Cl_ReturnCodeType cl_ufpumpFeedback_start(void);
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , Cl_Uint8Type* ,Cl_Uint8Type );
extern Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period);

Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data)
{
   92e88:	b580      	push	{r7, lr}
   92e8a:	b084      	sub	sp, #16
   92e8c:	af00      	add	r7, sp, #0
   92e8e:	4603      	mov	r3, r0
   92e90:	6039      	str	r1, [r7, #0]
   92e92:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   92e94:	2300      	movs	r3, #0
   92e96:	73fb      	strb	r3, [r7, #15]
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   92e98:	2300      	movs	r3, #0
   92e9a:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type uf_delta_value = 0 ;
   92e9c:	2300      	movs	r3, #0
   92e9e:	81bb      	strh	r3, [r7, #12]
	static Cl_Uint16Type pwm_period = 0;
	
	switch(uf_state)
   92ea0:	4b5a      	ldr	r3, [pc, #360]	; (9300c <cl_uf_controller+0x184>)
   92ea2:	781b      	ldrb	r3, [r3, #0]
   92ea4:	2b04      	cmp	r3, #4
   92ea6:	f200 80ab 	bhi.w	93000 <cl_uf_controller+0x178>
   92eaa:	a201      	add	r2, pc, #4	; (adr r2, 92eb0 <cl_uf_controller+0x28>)
   92eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92eb0:	00092ec5 	.word	0x00092ec5
   92eb4:	00092f0f 	.word	0x00092f0f
   92eb8:	00092f87 	.word	0x00092f87
   92ebc:	00092fb9 	.word	0x00092fb9
   92ec0:	00093001 	.word	0x00093001
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   92ec4:	79fb      	ldrb	r3, [r7, #7]
   92ec6:	2b01      	cmp	r3, #1
   92ec8:	d002      	beq.n	92ed0 <cl_uf_controller+0x48>
   92eca:	2b02      	cmp	r3, #2
   92ecc:	d00f      	beq.n	92eee <cl_uf_controller+0x66>
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
					//cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
					break;
					default:break;
   92ece:	e01d      	b.n	92f0c <cl_uf_controller+0x84>
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   92ed0:	683b      	ldr	r3, [r7, #0]
   92ed2:	4a4f      	ldr	r2, [pc, #316]	; (93010 <cl_uf_controller+0x188>)
   92ed4:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   92ed6:	4b4e      	ldr	r3, [pc, #312]	; (93010 <cl_uf_controller+0x188>)
   92ed8:	681b      	ldr	r3, [r3, #0]
   92eda:	b29a      	uxth	r2, r3
   92edc:	4b4d      	ldr	r3, [pc, #308]	; (93014 <cl_uf_controller+0x18c>)
   92ede:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   92ee0:	4b4c      	ldr	r3, [pc, #304]	; (93014 <cl_uf_controller+0x18c>)
   92ee2:	881b      	ldrh	r3, [r3, #0]
   92ee4:	4619      	mov	r1, r3
   92ee6:	2004      	movs	r0, #4
   92ee8:	4b4b      	ldr	r3, [pc, #300]	; (93018 <cl_uf_controller+0x190>)
   92eea:	4798      	blx	r3
					break;
   92eec:	e00e      	b.n	92f0c <cl_uf_controller+0x84>
					case CL_UF_EVENT_START:
					
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
   92eee:	4b48      	ldr	r3, [pc, #288]	; (93010 <cl_uf_controller+0x188>)
   92ef0:	681b      	ldr	r3, [r3, #0]
   92ef2:	b21b      	sxth	r3, r3
   92ef4:	4618      	mov	r0, r3
   92ef6:	4b49      	ldr	r3, [pc, #292]	; (9301c <cl_uf_controller+0x194>)
   92ef8:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   92efa:	2004      	movs	r0, #4
   92efc:	4b48      	ldr	r3, [pc, #288]	; (93020 <cl_uf_controller+0x198>)
   92efe:	4798      	blx	r3
   92f00:	4603      	mov	r3, r0
   92f02:	73fb      	strb	r3, [r7, #15]
					//cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   92f04:	4b41      	ldr	r3, [pc, #260]	; (9300c <cl_uf_controller+0x184>)
   92f06:	2201      	movs	r2, #1
   92f08:	701a      	strb	r2, [r3, #0]
					break;
   92f0a:	bf00      	nop
					default:break;
					
				}
			break;
   92f0c:	e079      	b.n	93002 <cl_uf_controller+0x17a>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   92f0e:	79fb      	ldrb	r3, [r7, #7]
   92f10:	3b01      	subs	r3, #1
   92f12:	2b05      	cmp	r3, #5
   92f14:	d835      	bhi.n	92f82 <cl_uf_controller+0xfa>
   92f16:	a201      	add	r2, pc, #4	; (adr r2, 92f1c <cl_uf_controller+0x94>)
   92f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92f1c:	00092f4f 	.word	0x00092f4f
   92f20:	00092f83 	.word	0x00092f83
   92f24:	00092f83 	.word	0x00092f83
   92f28:	00092f61 	.word	0x00092f61
   92f2c:	00092f7b 	.word	0x00092f7b
   92f30:	00092f35 	.word	0x00092f35
			{
				case CL_UF_EVENT_SECOND:
				cl_ufpumpFeedback_get_state(&uf_pumpstate);
   92f34:	f107 030e 	add.w	r3, r7, #14
   92f38:	4618      	mov	r0, r3
   92f3a:	4b3a      	ldr	r3, [pc, #232]	; (93024 <cl_uf_controller+0x19c>)
   92f3c:	4798      	blx	r3
				cl_ufpumpFeedback_get_delta(&uf_delta_value);
   92f3e:	f107 030c 	add.w	r3, r7, #12
   92f42:	4618      	mov	r0, r3
   92f44:	4b38      	ldr	r3, [pc, #224]	; (93028 <cl_uf_controller+0x1a0>)
   92f46:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_RPM",6);
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_delta_value,2);

				if(uf_pumpstate == CL_UFP_STATE_RUNNING_FAST )
   92f48:	7bbb      	ldrb	r3, [r7, #14]
   92f4a:	2b05      	cmp	r3, #5
				}
				else
				{
					
				}
				break;
   92f4c:	e01a      	b.n	92f84 <cl_uf_controller+0xfc>
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   92f4e:	683b      	ldr	r3, [r7, #0]
   92f50:	4a2f      	ldr	r2, [pc, #188]	; (93010 <cl_uf_controller+0x188>)
   92f52:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   92f54:	683b      	ldr	r3, [r7, #0]
   92f56:	4619      	mov	r1, r3
   92f58:	2004      	movs	r0, #4
   92f5a:	4b2f      	ldr	r3, [pc, #188]	; (93018 <cl_uf_controller+0x190>)
   92f5c:	4798      	blx	r3
				break;
   92f5e:	e011      	b.n	92f84 <cl_uf_controller+0xfc>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   92f60:	2004      	movs	r0, #4
   92f62:	4b32      	ldr	r3, [pc, #200]	; (9302c <cl_uf_controller+0x1a4>)
   92f64:	4798      	blx	r3
   92f66:	4603      	mov	r3, r0
   92f68:	73fb      	strb	r3, [r7, #15]
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   92f6a:	4b31      	ldr	r3, [pc, #196]	; (93030 <cl_uf_controller+0x1a8>)
   92f6c:	4798      	blx	r3
   92f6e:	4603      	mov	r3, r0
   92f70:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   92f72:	4b26      	ldr	r3, [pc, #152]	; (9300c <cl_uf_controller+0x184>)
   92f74:	2202      	movs	r2, #2
   92f76:	701a      	strb	r2, [r3, #0]
				break;
   92f78:	e004      	b.n	92f84 <cl_uf_controller+0xfc>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   92f7a:	4b24      	ldr	r3, [pc, #144]	; (9300c <cl_uf_controller+0x184>)
   92f7c:	2200      	movs	r2, #0
   92f7e:	701a      	strb	r2, [r3, #0]
				break;
   92f80:	e000      	b.n	92f84 <cl_uf_controller+0xfc>
				default:break;
   92f82:	bf00      	nop
				
			}
			break;
   92f84:	e03d      	b.n	93002 <cl_uf_controller+0x17a>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   92f86:	79fb      	ldrb	r3, [r7, #7]
   92f88:	2b01      	cmp	r3, #1
   92f8a:	d002      	beq.n	92f92 <cl_uf_controller+0x10a>
   92f8c:	2b02      	cmp	r3, #2
   92f8e:	d009      	beq.n	92fa4 <cl_uf_controller+0x11c>
				break;
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				uf_state = CL_UF_STATE_STARTED;
				break;
				default:break;
   92f90:	e011      	b.n	92fb6 <cl_uf_controller+0x12e>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   92f92:	683b      	ldr	r3, [r7, #0]
   92f94:	4a1e      	ldr	r2, [pc, #120]	; (93010 <cl_uf_controller+0x188>)
   92f96:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   92f98:	683b      	ldr	r3, [r7, #0]
   92f9a:	4619      	mov	r1, r3
   92f9c:	2004      	movs	r0, #4
   92f9e:	4b1e      	ldr	r3, [pc, #120]	; (93018 <cl_uf_controller+0x190>)
   92fa0:	4798      	blx	r3
				break;
   92fa2:	e008      	b.n	92fb6 <cl_uf_controller+0x12e>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   92fa4:	2004      	movs	r0, #4
   92fa6:	4b1e      	ldr	r3, [pc, #120]	; (93020 <cl_uf_controller+0x198>)
   92fa8:	4798      	blx	r3
   92faa:	4603      	mov	r3, r0
   92fac:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   92fae:	4b17      	ldr	r3, [pc, #92]	; (9300c <cl_uf_controller+0x184>)
   92fb0:	2201      	movs	r2, #1
   92fb2:	701a      	strb	r2, [r3, #0]
				break;
   92fb4:	bf00      	nop
				default:break;
				
			}
			break;
   92fb6:	e024      	b.n	93002 <cl_uf_controller+0x17a>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   92fb8:	79fb      	ldrb	r3, [r7, #7]
   92fba:	2b02      	cmp	r3, #2
   92fbc:	d00d      	beq.n	92fda <cl_uf_controller+0x152>
   92fbe:	2b04      	cmp	r3, #4
   92fc0:	d014      	beq.n	92fec <cl_uf_controller+0x164>
   92fc2:	2b01      	cmp	r3, #1
   92fc4:	d000      	beq.n	92fc8 <cl_uf_controller+0x140>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   92fc6:	e01a      	b.n	92ffe <cl_uf_controller+0x176>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   92fc8:	683b      	ldr	r3, [r7, #0]
   92fca:	4a11      	ldr	r2, [pc, #68]	; (93010 <cl_uf_controller+0x188>)
   92fcc:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   92fce:	683b      	ldr	r3, [r7, #0]
   92fd0:	4619      	mov	r1, r3
   92fd2:	2004      	movs	r0, #4
   92fd4:	4b10      	ldr	r3, [pc, #64]	; (93018 <cl_uf_controller+0x190>)
   92fd6:	4798      	blx	r3
				break;
   92fd8:	e011      	b.n	92ffe <cl_uf_controller+0x176>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   92fda:	2004      	movs	r0, #4
   92fdc:	4b10      	ldr	r3, [pc, #64]	; (93020 <cl_uf_controller+0x198>)
   92fde:	4798      	blx	r3
   92fe0:	4603      	mov	r3, r0
   92fe2:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   92fe4:	4b09      	ldr	r3, [pc, #36]	; (9300c <cl_uf_controller+0x184>)
   92fe6:	2201      	movs	r2, #1
   92fe8:	701a      	strb	r2, [r3, #0]
				break;
   92fea:	e008      	b.n	92ffe <cl_uf_controller+0x176>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   92fec:	2004      	movs	r0, #4
   92fee:	4b0f      	ldr	r3, [pc, #60]	; (9302c <cl_uf_controller+0x1a4>)
   92ff0:	4798      	blx	r3
   92ff2:	4603      	mov	r3, r0
   92ff4:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   92ff6:	4b05      	ldr	r3, [pc, #20]	; (9300c <cl_uf_controller+0x184>)
   92ff8:	2202      	movs	r2, #2
   92ffa:	701a      	strb	r2, [r3, #0]
				break;
   92ffc:	bf00      	nop
				default:break;
				
			}
			break;
   92ffe:	e000      	b.n	93002 <cl_uf_controller+0x17a>
			case CL_UF_STATE_COMPLETED:
			break;
			default:break;
   93000:	bf00      	nop
			
			
	}
	return CL_OK;
   93002:	2300      	movs	r3, #0
   93004:	4618      	mov	r0, r3
   93006:	3710      	adds	r7, #16
   93008:	46bd      	mov	sp, r7
   9300a:	bd80      	pop	{r7, pc}
   9300c:	2007269b 	.word	0x2007269b
   93010:	2007269c 	.word	0x2007269c
   93014:	200726a0 	.word	0x200726a0
   93018:	000968f5 	.word	0x000968f5
   9301c:	00092cc5 	.word	0x00092cc5
   93020:	000967dd 	.word	0x000967dd
   93024:	00092c75 	.word	0x00092c75
   93028:	00092c95 	.word	0x00092c95
   9302c:	00096819 	.word	0x00096819
   93030:	00092c65 	.word	0x00092c65

00093034 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   93034:	b480      	push	{r7}
   93036:	b083      	sub	sp, #12
   93038:	af00      	add	r7, sp, #0
   9303a:	4603      	mov	r3, r0
   9303c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   9303e:	4908      	ldr	r1, [pc, #32]	; (93060 <NVIC_EnableIRQ+0x2c>)
   93040:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93044:	095b      	lsrs	r3, r3, #5
   93046:	79fa      	ldrb	r2, [r7, #7]
   93048:	f002 021f 	and.w	r2, r2, #31
   9304c:	2001      	movs	r0, #1
   9304e:	fa00 f202 	lsl.w	r2, r0, r2
   93052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   93056:	bf00      	nop
   93058:	370c      	adds	r7, #12
   9305a:	46bd      	mov	sp, r7
   9305c:	bc80      	pop	{r7}
   9305e:	4770      	bx	lr
   93060:	e000e100 	.word	0xe000e100

00093064 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   93064:	b480      	push	{r7}
   93066:	b08b      	sub	sp, #44	; 0x2c
   93068:	af00      	add	r7, sp, #0
   9306a:	6078      	str	r0, [r7, #4]
   9306c:	460b      	mov	r3, r1
   9306e:	70fb      	strb	r3, [r7, #3]
   93070:	687b      	ldr	r3, [r7, #4]
   93072:	627b      	str	r3, [r7, #36]	; 0x24
   93074:	78fb      	ldrb	r3, [r7, #3]
   93076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9307c:	61fb      	str	r3, [r7, #28]
   9307e:	69fb      	ldr	r3, [r7, #28]
   93080:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   93082:	69bb      	ldr	r3, [r7, #24]
   93084:	095b      	lsrs	r3, r3, #5
   93086:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   93088:	697b      	ldr	r3, [r7, #20]
   9308a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9308e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   93092:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   93094:	613b      	str	r3, [r7, #16]

	if (level) {
   93096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   9309a:	2b00      	cmp	r3, #0
   9309c:	d009      	beq.n	930b2 <ioport_set_pin_level+0x4e>
   9309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   930a0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   930a2:	68fb      	ldr	r3, [r7, #12]
   930a4:	f003 031f 	and.w	r3, r3, #31
   930a8:	2201      	movs	r2, #1
   930aa:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   930ac:	693b      	ldr	r3, [r7, #16]
   930ae:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   930b0:	e008      	b.n	930c4 <ioport_set_pin_level+0x60>
   930b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   930b4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   930b6:	68bb      	ldr	r3, [r7, #8]
   930b8:	f003 031f 	and.w	r3, r3, #31
   930bc:	2201      	movs	r2, #1
   930be:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   930c0:	693b      	ldr	r3, [r7, #16]
   930c2:	635a      	str	r2, [r3, #52]	; 0x34
   930c4:	bf00      	nop
   930c6:	372c      	adds	r7, #44	; 0x2c
   930c8:	46bd      	mov	sp, r7
   930ca:	bc80      	pop	{r7}
   930cc:	4770      	bx	lr
   930ce:	bf00      	nop

000930d0 <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   930d0:	b480      	push	{r7}
   930d2:	b083      	sub	sp, #12
   930d4:	af00      	add	r7, sp, #0
   930d6:	6078      	str	r0, [r7, #4]
   930d8:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   930da:	687b      	ldr	r3, [r7, #4]
   930dc:	683a      	ldr	r2, [r7, #0]
   930de:	601a      	str	r2, [r3, #0]
}
   930e0:	bf00      	nop
   930e2:	370c      	adds	r7, #12
   930e4:	46bd      	mov	sp, r7
   930e6:	bc80      	pop	{r7}
   930e8:	4770      	bx	lr
   930ea:	bf00      	nop

000930ec <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   930ec:	b580      	push	{r7, lr}
   930ee:	b082      	sub	sp, #8
   930f0:	af00      	add	r7, sp, #0
   930f2:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   930f4:	687b      	ldr	r3, [r7, #4]
   930f6:	681b      	ldr	r3, [r3, #0]
   930f8:	2100      	movs	r1, #0
   930fa:	4618      	mov	r0, r3
   930fc:	4b02      	ldr	r3, [pc, #8]	; (93108 <sn65hvda540_normal_mode+0x1c>)
   930fe:	4798      	blx	r3
}
   93100:	bf00      	nop
   93102:	3708      	adds	r7, #8
   93104:	46bd      	mov	sp, r7
   93106:	bd80      	pop	{r7, pc}
   93108:	00093065 	.word	0x00093065

0009310c <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   9310c:	b580      	push	{r7, lr}
   9310e:	b082      	sub	sp, #8
   93110:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   93112:	4b13      	ldr	r3, [pc, #76]	; (93160 <CAN0_Handler+0x54>)
   93114:	691b      	ldr	r3, [r3, #16]
   93116:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   93118:	687b      	ldr	r3, [r7, #4]
   9311a:	b2db      	uxtb	r3, r3
   9311c:	2b00      	cmp	r3, #0
   9311e:	d01b      	beq.n	93158 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   93120:	4b0f      	ldr	r3, [pc, #60]	; (93160 <CAN0_Handler+0x54>)
   93122:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   93126:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   93128:	687b      	ldr	r3, [r7, #4]
   9312a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9312e:	2b00      	cmp	r3, #0
   93130:	d012      	beq.n	93158 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   93132:	4b0c      	ldr	r3, [pc, #48]	; (93164 <CAN0_Handler+0x58>)
   93134:	2201      	movs	r2, #1
   93136:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   93138:	4a0a      	ldr	r2, [pc, #40]	; (93164 <CAN0_Handler+0x58>)
   9313a:	687b      	ldr	r3, [r7, #4]
   9313c:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   9313e:	4809      	ldr	r0, [pc, #36]	; (93164 <CAN0_Handler+0x58>)
   93140:	4b09      	ldr	r3, [pc, #36]	; (93168 <CAN0_Handler+0x5c>)
   93142:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   93144:	4807      	ldr	r0, [pc, #28]	; (93164 <CAN0_Handler+0x58>)
   93146:	4b09      	ldr	r3, [pc, #36]	; (9316c <CAN0_Handler+0x60>)
   93148:	4798      	blx	r3
			g_ul_recv_status = 1;
   9314a:	4b09      	ldr	r3, [pc, #36]	; (93170 <CAN0_Handler+0x64>)
   9314c:	2201      	movs	r2, #1
   9314e:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   93150:	4b07      	ldr	r3, [pc, #28]	; (93170 <CAN0_Handler+0x64>)
   93152:	681b      	ldr	r3, [r3, #0]
   93154:	4a07      	ldr	r2, [pc, #28]	; (93174 <CAN0_Handler+0x68>)
   93156:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   93158:	bf00      	nop
   9315a:	3708      	adds	r7, #8
   9315c:	46bd      	mov	sp, r7
   9315e:	bd80      	pop	{r7, pc}
   93160:	400b4000 	.word	0x400b4000
   93164:	200732b0 	.word	0x200732b0
   93168:	00093405 	.word	0x00093405
   9316c:	0009321d 	.word	0x0009321d
   93170:	200726a4 	.word	0x200726a4
   93174:	200726a8 	.word	0x200726a8

00093178 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   93178:	b580      	push	{r7, lr}
   9317a:	b084      	sub	sp, #16
   9317c:	af00      	add	r7, sp, #0
   9317e:	4603      	mov	r3, r0
   93180:	71fb      	strb	r3, [r7, #7]
   93182:	460b      	mov	r3, r1
   93184:	71bb      	strb	r3, [r7, #6]
   93186:	4613      	mov	r3, r2
   93188:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   9318a:	230a      	movs	r3, #10
   9318c:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   9318e:	79bb      	ldrb	r3, [r7, #6]
   93190:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   93192:	79fb      	ldrb	r3, [r7, #7]
   93194:	049b      	lsls	r3, r3, #18
   93196:	461a      	mov	r2, r3
   93198:	4b1b      	ldr	r3, [pc, #108]	; (93208 <dd_master_command+0x90>)
   9319a:	4013      	ands	r3, r2
   9319c:	4a1b      	ldr	r2, [pc, #108]	; (9320c <dd_master_command+0x94>)
   9319e:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   931a0:	88bb      	ldrh	r3, [r7, #4]
   931a2:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   931a4:	68fb      	ldr	r3, [r7, #12]
   931a6:	4a19      	ldr	r2, [pc, #100]	; (9320c <dd_master_command+0x94>)
   931a8:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   931aa:	4b18      	ldr	r3, [pc, #96]	; (9320c <dd_master_command+0x94>)
   931ac:	2200      	movs	r2, #0
   931ae:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   931b0:	4b17      	ldr	r3, [pc, #92]	; (93210 <dd_master_command+0x98>)
   931b2:	f04f 32ff 	mov.w	r2, #4294967295
   931b6:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   931b8:	202b      	movs	r0, #43	; 0x2b
   931ba:	4b16      	ldr	r3, [pc, #88]	; (93214 <dd_master_command+0x9c>)
   931bc:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   931be:	4b13      	ldr	r3, [pc, #76]	; (9320c <dd_master_command+0x94>)
   931c0:	2200      	movs	r2, #0
   931c2:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   931c4:	4b11      	ldr	r3, [pc, #68]	; (9320c <dd_master_command+0x94>)
   931c6:	2203      	movs	r2, #3
   931c8:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   931ca:	4b10      	ldr	r3, [pc, #64]	; (9320c <dd_master_command+0x94>)
   931cc:	2200      	movs	r2, #0
   931ce:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   931d0:	4b0e      	ldr	r3, [pc, #56]	; (9320c <dd_master_command+0x94>)
   931d2:	2204      	movs	r2, #4
   931d4:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   931d6:	4b0d      	ldr	r3, [pc, #52]	; (9320c <dd_master_command+0x94>)
   931d8:	2200      	movs	r2, #0
   931da:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   931dc:	4b0b      	ldr	r3, [pc, #44]	; (9320c <dd_master_command+0x94>)
   931de:	f240 72fc 	movw	r2, #2044	; 0x7fc
   931e2:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   931e4:	bf00      	nop
   931e6:	4809      	ldr	r0, [pc, #36]	; (9320c <dd_master_command+0x94>)
   931e8:	4b0b      	ldr	r3, [pc, #44]	; (93218 <dd_master_command+0xa0>)
   931ea:	4798      	blx	r3
   931ec:	4603      	mov	r3, r0
   931ee:	2b01      	cmp	r3, #1
   931f0:	d0f9      	beq.n	931e6 <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   931f2:	202b      	movs	r0, #43	; 0x2b
   931f4:	4b07      	ldr	r3, [pc, #28]	; (93214 <dd_master_command+0x9c>)
   931f6:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   931f8:	4b05      	ldr	r3, [pc, #20]	; (93210 <dd_master_command+0x98>)
   931fa:	2202      	movs	r2, #2
   931fc:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   931fe:	2300      	movs	r3, #0
}
   93200:	4618      	mov	r0, r3
   93202:	3710      	adds	r7, #16
   93204:	46bd      	mov	sp, r7
   93206:	bd80      	pop	{r7, pc}
   93208:	1ffc0000 	.word	0x1ffc0000
   9320c:	200732b0 	.word	0x200732b0
   93210:	400b4000 	.word	0x400b4000
   93214:	00093035 	.word	0x00093035
   93218:	000934d5 	.word	0x000934d5

0009321c <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   9321c:	b480      	push	{r7}
   9321e:	b083      	sub	sp, #12
   93220:	af00      	add	r7, sp, #0
   93222:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   93224:	687b      	ldr	r3, [r7, #4]
   93226:	699b      	ldr	r3, [r3, #24]
   93228:	4a70      	ldr	r2, [pc, #448]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   9322a:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   9322c:	4b6f      	ldr	r3, [pc, #444]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   9322e:	781b      	ldrb	r3, [r3, #0]
   93230:	b2da      	uxtb	r2, r3
   93232:	4b6f      	ldr	r3, [pc, #444]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93234:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   93236:	4b6d      	ldr	r3, [pc, #436]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93238:	785b      	ldrb	r3, [r3, #1]
   9323a:	b2da      	uxtb	r2, r3
   9323c:	4b6c      	ldr	r3, [pc, #432]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9323e:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   93240:	4b6b      	ldr	r3, [pc, #428]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93242:	781b      	ldrb	r3, [r3, #0]
   93244:	b2db      	uxtb	r3, r3
   93246:	2b02      	cmp	r3, #2
   93248:	f000 80c9 	beq.w	933de <dd_can_dump_mailbox_data+0x1c2>
   9324c:	2b03      	cmp	r3, #3
   9324e:	d01d      	beq.n	9328c <dd_can_dump_mailbox_data+0x70>
   93250:	2b01      	cmp	r3, #1
   93252:	d000      	beq.n	93256 <dd_can_dump_mailbox_data+0x3a>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   93254:	e0c4      	b.n	933e0 <dd_can_dump_mailbox_data+0x1c4>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   93256:	4b66      	ldr	r3, [pc, #408]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93258:	785b      	ldrb	r3, [r3, #1]
   9325a:	b2db      	uxtb	r3, r3
   9325c:	2b07      	cmp	r3, #7
   9325e:	d000      	beq.n	93262 <dd_can_dump_mailbox_data+0x46>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   93260:	e013      	b.n	9328a <dd_can_dump_mailbox_data+0x6e>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   93262:	4b62      	ldr	r3, [pc, #392]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93264:	885b      	ldrh	r3, [r3, #2]
   93266:	b29a      	uxth	r2, r3
   93268:	4b61      	ldr	r3, [pc, #388]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9326a:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9326c:	687b      	ldr	r3, [r7, #4]
   9326e:	69db      	ldr	r3, [r3, #28]
   93270:	4a5e      	ldr	r2, [pc, #376]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93272:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   93274:	4b5d      	ldr	r3, [pc, #372]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93276:	881b      	ldrh	r3, [r3, #0]
   93278:	b29a      	uxth	r2, r3
   9327a:	4b5d      	ldr	r3, [pc, #372]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9327c:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   9327e:	4b5b      	ldr	r3, [pc, #364]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93280:	885b      	ldrh	r3, [r3, #2]
   93282:	b29a      	uxth	r2, r3
   93284:	4b5a      	ldr	r3, [pc, #360]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93286:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   93288:	bf00      	nop
			
			default :
			break;
		}
		break;
   9328a:	e0a9      	b.n	933e0 <dd_can_dump_mailbox_data+0x1c4>
		case PROPORTIONING_CPU_id :
		break;
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   9328c:	4b58      	ldr	r3, [pc, #352]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9328e:	785b      	ldrb	r3, [r3, #1]
   93290:	b2db      	uxtb	r3, r3
   93292:	3b01      	subs	r3, #1
   93294:	2b05      	cmp	r3, #5
   93296:	f200 80a0 	bhi.w	933da <dd_can_dump_mailbox_data+0x1be>
   9329a:	a201      	add	r2, pc, #4	; (adr r2, 932a0 <dd_can_dump_mailbox_data+0x84>)
   9329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   932a0:	000932b9 	.word	0x000932b9
   932a4:	000932f5 	.word	0x000932f5
   932a8:	00093323 	.word	0x00093323
   932ac:	00093351 	.word	0x00093351
   932b0:	0009337f 	.word	0x0009337f
   932b4:	000933ad 	.word	0x000933ad
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   932b8:	4b4c      	ldr	r3, [pc, #304]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   932ba:	885b      	ldrh	r3, [r3, #2]
   932bc:	b29a      	uxth	r2, r3
   932be:	4b4c      	ldr	r3, [pc, #304]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   932c0:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   932c2:	687b      	ldr	r3, [r7, #4]
   932c4:	69db      	ldr	r3, [r3, #28]
   932c6:	4a49      	ldr	r2, [pc, #292]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   932c8:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   932ca:	4b48      	ldr	r3, [pc, #288]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   932cc:	881b      	ldrh	r3, [r3, #0]
   932ce:	b29a      	uxth	r2, r3
   932d0:	4b47      	ldr	r3, [pc, #284]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   932d2:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   932d4:	4b45      	ldr	r3, [pc, #276]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   932d6:	885b      	ldrh	r3, [r3, #2]
   932d8:	b29a      	uxth	r2, r3
   932da:	4b45      	ldr	r3, [pc, #276]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   932dc:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   932de:	4b45      	ldr	r3, [pc, #276]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   932e0:	2201      	movs	r2, #1
   932e2:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   932e4:	4b44      	ldr	r3, [pc, #272]	; (933f8 <dd_can_dump_mailbox_data+0x1dc>)
   932e6:	681a      	ldr	r2, [r3, #0]
   932e8:	4b44      	ldr	r3, [pc, #272]	; (933fc <dd_can_dump_mailbox_data+0x1e0>)
   932ea:	681b      	ldr	r3, [r3, #0]
   932ec:	1ad3      	subs	r3, r2, r3
   932ee:	4a44      	ldr	r2, [pc, #272]	; (93400 <dd_can_dump_mailbox_data+0x1e4>)
   932f0:	6013      	str	r3, [r2, #0]
			break;
   932f2:	e073      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   932f4:	4b3d      	ldr	r3, [pc, #244]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   932f6:	885b      	ldrh	r3, [r3, #2]
   932f8:	b29a      	uxth	r2, r3
   932fa:	4b3d      	ldr	r3, [pc, #244]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   932fc:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   932fe:	687b      	ldr	r3, [r7, #4]
   93300:	69db      	ldr	r3, [r3, #28]
   93302:	4a3a      	ldr	r2, [pc, #232]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93304:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   93306:	4b39      	ldr	r3, [pc, #228]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93308:	881b      	ldrh	r3, [r3, #0]
   9330a:	b29a      	uxth	r2, r3
   9330c:	4b38      	ldr	r3, [pc, #224]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9330e:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   93310:	4b36      	ldr	r3, [pc, #216]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93312:	885b      	ldrh	r3, [r3, #2]
   93314:	b29a      	uxth	r2, r3
   93316:	4b36      	ldr	r3, [pc, #216]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93318:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   9331a:	4b36      	ldr	r3, [pc, #216]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   9331c:	2201      	movs	r2, #1
   9331e:	709a      	strb	r2, [r3, #2]
			break;
   93320:	e05c      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.Temp3status = temp_struct.temp_reg_16[1];			
   93322:	4b32      	ldr	r3, [pc, #200]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93324:	885b      	ldrh	r3, [r3, #2]
   93326:	b29a      	uxth	r2, r3
   93328:	4b31      	ldr	r3, [pc, #196]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9332a:	81da      	strh	r2, [r3, #14]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9332c:	687b      	ldr	r3, [r7, #4]
   9332e:	69db      	ldr	r3, [r3, #28]
   93330:	4a2e      	ldr	r2, [pc, #184]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93332:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1_Tempstatus =  temp_struct.temp_reg_16[0] ;
   93334:	4b2d      	ldr	r3, [pc, #180]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93336:	881b      	ldrh	r3, [r3, #0]
   93338:	b29a      	uxth	r2, r3
   9333a:	4b2d      	ldr	r3, [pc, #180]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9333c:	821a      	strh	r2, [r3, #16]
			DD_Sensor_status.CS2_Tempstatus=   temp_struct.temp_reg_16[1] ;			
   9333e:	4b2b      	ldr	r3, [pc, #172]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93340:	885b      	ldrh	r3, [r3, #2]
   93342:	b29a      	uxth	r2, r3
   93344:	4b2a      	ldr	r3, [pc, #168]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93346:	825a      	strh	r2, [r3, #18]
			array1[3]	= 1;
   93348:	4b2a      	ldr	r3, [pc, #168]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   9334a:	2201      	movs	r2, #1
   9334c:	70da      	strb	r2, [r3, #3]
			break;
   9334e:	e045      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   93350:	4b26      	ldr	r3, [pc, #152]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93352:	885b      	ldrh	r3, [r3, #2]
   93354:	b29a      	uxth	r2, r3
   93356:	4b26      	ldr	r3, [pc, #152]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93358:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9335a:	687b      	ldr	r3, [r7, #4]
   9335c:	69db      	ldr	r3, [r3, #28]
   9335e:	4a23      	ldr	r2, [pc, #140]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93360:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   93362:	4b22      	ldr	r3, [pc, #136]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93364:	881b      	ldrh	r3, [r3, #0]
   93366:	b29a      	uxth	r2, r3
   93368:	4b21      	ldr	r3, [pc, #132]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   9336a:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   9336c:	4b1f      	ldr	r3, [pc, #124]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   9336e:	885b      	ldrh	r3, [r3, #2]
   93370:	b29a      	uxth	r2, r3
   93372:	4b1f      	ldr	r3, [pc, #124]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93374:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   93376:	4b1f      	ldr	r3, [pc, #124]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   93378:	2201      	movs	r2, #1
   9337a:	711a      	strb	r2, [r3, #4]
			break;
   9337c:	e02e      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   9337e:	4b1b      	ldr	r3, [pc, #108]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93380:	885b      	ldrh	r3, [r3, #2]
   93382:	b29a      	uxth	r2, r3
   93384:	4b1a      	ldr	r3, [pc, #104]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93386:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93388:	687b      	ldr	r3, [r7, #4]
   9338a:	69db      	ldr	r3, [r3, #28]
   9338c:	4a17      	ldr	r2, [pc, #92]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   9338e:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   93390:	4b16      	ldr	r3, [pc, #88]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   93392:	881b      	ldrh	r3, [r3, #0]
   93394:	b29a      	uxth	r2, r3
   93396:	4b16      	ldr	r3, [pc, #88]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   93398:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   9339a:	4b14      	ldr	r3, [pc, #80]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   9339c:	885b      	ldrh	r3, [r3, #2]
   9339e:	b29a      	uxth	r2, r3
   933a0:	4b13      	ldr	r3, [pc, #76]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   933a2:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   933a4:	4b13      	ldr	r3, [pc, #76]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   933a6:	2201      	movs	r2, #1
   933a8:	715a      	strb	r2, [r3, #5]
			break;
   933aa:	e017      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   933ac:	4b0f      	ldr	r3, [pc, #60]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   933ae:	885b      	ldrh	r3, [r3, #2]
   933b0:	b29a      	uxth	r2, r3
   933b2:	4b0f      	ldr	r3, [pc, #60]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   933b4:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   933b6:	687b      	ldr	r3, [r7, #4]
   933b8:	69db      	ldr	r3, [r3, #28]
   933ba:	4a0c      	ldr	r2, [pc, #48]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   933bc:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   933be:	4b0b      	ldr	r3, [pc, #44]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   933c0:	881b      	ldrh	r3, [r3, #0]
   933c2:	b29a      	uxth	r2, r3
   933c4:	4b0a      	ldr	r3, [pc, #40]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   933c6:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   933c8:	4b08      	ldr	r3, [pc, #32]	; (933ec <dd_can_dump_mailbox_data+0x1d0>)
   933ca:	885b      	ldrh	r3, [r3, #2]
   933cc:	b29a      	uxth	r2, r3
   933ce:	4b08      	ldr	r3, [pc, #32]	; (933f0 <dd_can_dump_mailbox_data+0x1d4>)
   933d0:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   933d2:	4b08      	ldr	r3, [pc, #32]	; (933f4 <dd_can_dump_mailbox_data+0x1d8>)
   933d4:	2201      	movs	r2, #1
   933d6:	719a      	strb	r2, [r3, #6]
			
			break;
   933d8:	e000      	b.n	933dc <dd_can_dump_mailbox_data+0x1c0>
			
			default :
			break;
   933da:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   933dc:	e000      	b.n	933e0 <dd_can_dump_mailbox_data+0x1c4>
			break;
		}
		break;
		
		case PROPORTIONING_CPU_id :
		break;
   933de:	bf00      	nop
		break;
		
		default:
		break;
	}
}
   933e0:	bf00      	nop
   933e2:	370c      	adds	r7, #12
   933e4:	46bd      	mov	sp, r7
   933e6:	bc80      	pop	{r7}
   933e8:	4770      	bx	lr
   933ea:	bf00      	nop
   933ec:	20073280 	.word	0x20073280
   933f0:	20073284 	.word	0x20073284
   933f4:	200726c0 	.word	0x200726c0
   933f8:	2007263c 	.word	0x2007263c
   933fc:	200726cc 	.word	0x200726cc
   93400:	200726d0 	.word	0x200726d0

00093404 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   93404:	b480      	push	{r7}
   93406:	b087      	sub	sp, #28
   93408:	af00      	add	r7, sp, #0
   9340a:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   9340c:	2300      	movs	r3, #0
   9340e:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   93410:	687b      	ldr	r3, [r7, #4]
   93412:	681b      	ldr	r3, [r3, #0]
   93414:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   93416:	687b      	ldr	r3, [r7, #4]
   93418:	689b      	ldr	r3, [r3, #8]
   9341a:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   9341c:	68fb      	ldr	r3, [r7, #12]
   9341e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   93422:	2b00      	cmp	r3, #0
   93424:	d006      	beq.n	93434 <dd_can_mailbox_read+0x30>
   93426:	68fb      	ldr	r3, [r7, #12]
   93428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9342c:	2b00      	cmp	r3, #0
   9342e:	d001      	beq.n	93434 <dd_can_mailbox_read+0x30>
   93430:	2302      	movs	r3, #2
   93432:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   93434:	4a26      	ldr	r2, [pc, #152]	; (934d0 <dd_can_mailbox_read+0xcc>)
   93436:	7cfb      	ldrb	r3, [r7, #19]
   93438:	015b      	lsls	r3, r3, #5
   9343a:	4413      	add	r3, r2
   9343c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   93440:	681b      	ldr	r3, [r3, #0]
   93442:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   93446:	687b      	ldr	r3, [r7, #4]
   93448:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   9344a:	68fb      	ldr	r3, [r7, #12]
   9344c:	0c1b      	lsrs	r3, r3, #16
   9344e:	b2db      	uxtb	r3, r3
   93450:	f003 030f 	and.w	r3, r3, #15
   93454:	b2da      	uxtb	r2, r3
   93456:	687b      	ldr	r3, [r7, #4]
   93458:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   9345a:	4a1d      	ldr	r2, [pc, #116]	; (934d0 <dd_can_mailbox_read+0xcc>)
   9345c:	7cfb      	ldrb	r3, [r7, #19]
   9345e:	015b      	lsls	r3, r3, #5
   93460:	4413      	add	r3, r2
   93462:	f503 7305 	add.w	r3, r3, #532	; 0x214
   93466:	681a      	ldr	r2, [r3, #0]
   93468:	687b      	ldr	r3, [r7, #4]
   9346a:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   9346c:	4a18      	ldr	r2, [pc, #96]	; (934d0 <dd_can_mailbox_read+0xcc>)
   9346e:	7cfb      	ldrb	r3, [r7, #19]
   93470:	015b      	lsls	r3, r3, #5
   93472:	4413      	add	r3, r2
   93474:	f503 7306 	add.w	r3, r3, #536	; 0x218
   93478:	681a      	ldr	r2, [r3, #0]
   9347a:	687b      	ldr	r3, [r7, #4]
   9347c:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9347e:	4a14      	ldr	r2, [pc, #80]	; (934d0 <dd_can_mailbox_read+0xcc>)
   93480:	7cfb      	ldrb	r3, [r7, #19]
   93482:	015b      	lsls	r3, r3, #5
   93484:	4413      	add	r3, r2
   93486:	f503 7304 	add.w	r3, r3, #528	; 0x210
   9348a:	681a      	ldr	r2, [r3, #0]
   9348c:	687b      	ldr	r3, [r7, #4]
   9348e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   93490:	687b      	ldr	r3, [r7, #4]
   93492:	689b      	ldr	r3, [r3, #8]
   93494:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   93496:	68fb      	ldr	r3, [r7, #12]
   93498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9349c:	2b00      	cmp	r3, #0
   9349e:	d003      	beq.n	934a8 <dd_can_mailbox_read+0xa4>
   934a0:	697b      	ldr	r3, [r7, #20]
   934a2:	f043 0304 	orr.w	r3, r3, #4
   934a6:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   934a8:	4909      	ldr	r1, [pc, #36]	; (934d0 <dd_can_mailbox_read+0xcc>)
   934aa:	7cfb      	ldrb	r3, [r7, #19]
   934ac:	687a      	ldr	r2, [r7, #4]
   934ae:	7992      	ldrb	r2, [r2, #6]
   934b0:	0412      	lsls	r2, r2, #16
   934b2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   934b6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   934ba:	015b      	lsls	r3, r3, #5
   934bc:	440b      	add	r3, r1
   934be:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   934c2:	601a      	str	r2, [r3, #0]
	return ul_retval;
   934c4:	697b      	ldr	r3, [r7, #20]
}
   934c6:	4618      	mov	r0, r3
   934c8:	371c      	adds	r7, #28
   934ca:	46bd      	mov	sp, r7
   934cc:	bc80      	pop	{r7}
   934ce:	4770      	bx	lr
   934d0:	400b4000 	.word	0x400b4000

000934d4 <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   934d4:	b480      	push	{r7}
   934d6:	b085      	sub	sp, #20
   934d8:	af00      	add	r7, sp, #0
   934da:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   934dc:	687b      	ldr	r3, [r7, #4]
   934de:	681b      	ldr	r3, [r3, #0]
   934e0:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   934e2:	4a2a      	ldr	r2, [pc, #168]	; (9358c <dd_can_mailbox_write+0xb8>)
   934e4:	7bfb      	ldrb	r3, [r7, #15]
   934e6:	015b      	lsls	r3, r3, #5
   934e8:	4413      	add	r3, r2
   934ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
   934ee:	681a      	ldr	r2, [r3, #0]
   934f0:	687b      	ldr	r3, [r7, #4]
   934f2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   934f4:	687b      	ldr	r3, [r7, #4]
   934f6:	689b      	ldr	r3, [r3, #8]
   934f8:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   934fa:	68bb      	ldr	r3, [r7, #8]
   934fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   93500:	2b00      	cmp	r3, #0
   93502:	d101      	bne.n	93508 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   93504:	2301      	movs	r3, #1
   93506:	e03b      	b.n	93580 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   93508:	687b      	ldr	r3, [r7, #4]
   9350a:	795b      	ldrb	r3, [r3, #5]
   9350c:	2b00      	cmp	r3, #0
   9350e:	d00b      	beq.n	93528 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   93510:	491e      	ldr	r1, [pc, #120]	; (9358c <dd_can_mailbox_write+0xb8>)
   93512:	7bfb      	ldrb	r3, [r7, #15]
   93514:	687a      	ldr	r2, [r7, #4]
   93516:	6912      	ldr	r2, [r2, #16]
   93518:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   9351c:	015b      	lsls	r3, r3, #5
   9351e:	440b      	add	r3, r1
   93520:	f503 7302 	add.w	r3, r3, #520	; 0x208
   93524:	601a      	str	r2, [r3, #0]
   93526:	e008      	b.n	9353a <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   93528:	4918      	ldr	r1, [pc, #96]	; (9358c <dd_can_mailbox_write+0xb8>)
   9352a:	7bfb      	ldrb	r3, [r7, #15]
   9352c:	687a      	ldr	r2, [r7, #4]
   9352e:	6912      	ldr	r2, [r2, #16]
   93530:	015b      	lsls	r3, r3, #5
   93532:	440b      	add	r3, r1
   93534:	f503 7302 	add.w	r3, r3, #520	; 0x208
   93538:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   9353a:	4914      	ldr	r1, [pc, #80]	; (9358c <dd_can_mailbox_write+0xb8>)
   9353c:	7bfb      	ldrb	r3, [r7, #15]
   9353e:	687a      	ldr	r2, [r7, #4]
   93540:	6992      	ldr	r2, [r2, #24]
   93542:	015b      	lsls	r3, r3, #5
   93544:	440b      	add	r3, r1
   93546:	f503 7305 	add.w	r3, r3, #532	; 0x214
   9354a:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   9354c:	687b      	ldr	r3, [r7, #4]
   9354e:	799b      	ldrb	r3, [r3, #6]
   93550:	2b04      	cmp	r3, #4
   93552:	d908      	bls.n	93566 <dd_can_mailbox_write+0x92>
   93554:	490d      	ldr	r1, [pc, #52]	; (9358c <dd_can_mailbox_write+0xb8>)
   93556:	7bfb      	ldrb	r3, [r7, #15]
   93558:	687a      	ldr	r2, [r7, #4]
   9355a:	69d2      	ldr	r2, [r2, #28]
   9355c:	015b      	lsls	r3, r3, #5
   9355e:	440b      	add	r3, r1
   93560:	f503 7306 	add.w	r3, r3, #536	; 0x218
   93564:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   93566:	4909      	ldr	r1, [pc, #36]	; (9358c <dd_can_mailbox_write+0xb8>)
   93568:	7bfb      	ldrb	r3, [r7, #15]
   9356a:	687a      	ldr	r2, [r7, #4]
   9356c:	7992      	ldrb	r2, [r2, #6]
   9356e:	0412      	lsls	r2, r2, #16
   93570:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   93574:	015b      	lsls	r3, r3, #5
   93576:	440b      	add	r3, r1
   93578:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9357c:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   9357e:	2300      	movs	r3, #0
}
   93580:	4618      	mov	r0, r3
   93582:	3714      	adds	r7, #20
   93584:	46bd      	mov	sp, r7
   93586:	bc80      	pop	{r7}
   93588:	4770      	bx	lr
   9358a:	bf00      	nop
   9358c:	400b4000 	.word	0x400b4000

00093590 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   93590:	b480      	push	{r7}
   93592:	b085      	sub	sp, #20
   93594:	af00      	add	r7, sp, #0
   93596:	4603      	mov	r3, r0
   93598:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   9359a:	4b07      	ldr	r3, [pc, #28]	; (935b8 <dd_can_global_send_transfer_cmd+0x28>)
   9359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   9359e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   935a2:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   935a4:	4904      	ldr	r1, [pc, #16]	; (935b8 <dd_can_global_send_transfer_cmd+0x28>)
   935a6:	79fa      	ldrb	r2, [r7, #7]
   935a8:	68fb      	ldr	r3, [r7, #12]
   935aa:	4313      	orrs	r3, r2
   935ac:	624b      	str	r3, [r1, #36]	; 0x24
}
   935ae:	bf00      	nop
   935b0:	3714      	adds	r7, #20
   935b2:	46bd      	mov	sp, r7
   935b4:	bc80      	pop	{r7}
   935b6:	4770      	bx	lr
   935b8:	400b4000 	.word	0x400b4000

000935bc <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   935bc:	b480      	push	{r7}
   935be:	b085      	sub	sp, #20
   935c0:	af00      	add	r7, sp, #0
   935c2:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   935c4:	687b      	ldr	r3, [r7, #4]
   935c6:	681b      	ldr	r3, [r3, #0]
   935c8:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   935ca:	687b      	ldr	r3, [r7, #4]
   935cc:	791b      	ldrb	r3, [r3, #4]
   935ce:	2b00      	cmp	r3, #0
   935d0:	d12f      	bne.n	93632 <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   935d2:	4a35      	ldr	r2, [pc, #212]	; (936a8 <dd_can_mailbox_conf+0xec>)
   935d4:	7bfb      	ldrb	r3, [r7, #15]
   935d6:	3310      	adds	r3, #16
   935d8:	015b      	lsls	r3, r3, #5
   935da:	4413      	add	r3, r2
   935dc:	2200      	movs	r2, #0
   935de:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   935e0:	4a31      	ldr	r2, [pc, #196]	; (936a8 <dd_can_mailbox_conf+0xec>)
   935e2:	7bfb      	ldrb	r3, [r7, #15]
   935e4:	3310      	adds	r3, #16
   935e6:	015b      	lsls	r3, r3, #5
   935e8:	4413      	add	r3, r2
   935ea:	3304      	adds	r3, #4
   935ec:	2200      	movs	r2, #0
   935ee:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   935f0:	4a2d      	ldr	r2, [pc, #180]	; (936a8 <dd_can_mailbox_conf+0xec>)
   935f2:	7bfb      	ldrb	r3, [r7, #15]
   935f4:	015b      	lsls	r3, r3, #5
   935f6:	4413      	add	r3, r2
   935f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   935fc:	2200      	movs	r2, #0
   935fe:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   93600:	4a29      	ldr	r2, [pc, #164]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93602:	7bfb      	ldrb	r3, [r7, #15]
   93604:	015b      	lsls	r3, r3, #5
   93606:	4413      	add	r3, r2
   93608:	f503 7305 	add.w	r3, r3, #532	; 0x214
   9360c:	2200      	movs	r2, #0
   9360e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   93610:	4a25      	ldr	r2, [pc, #148]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93612:	7bfb      	ldrb	r3, [r7, #15]
   93614:	015b      	lsls	r3, r3, #5
   93616:	4413      	add	r3, r2
   93618:	f503 7306 	add.w	r3, r3, #536	; 0x218
   9361c:	2200      	movs	r2, #0
   9361e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   93620:	4a21      	ldr	r2, [pc, #132]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93622:	7bfb      	ldrb	r3, [r7, #15]
   93624:	015b      	lsls	r3, r3, #5
   93626:	4413      	add	r3, r2
   93628:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9362c:	2200      	movs	r2, #0
   9362e:	601a      	str	r2, [r3, #0]
		return;
   93630:	e035      	b.n	9369e <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   93632:	481d      	ldr	r0, [pc, #116]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93634:	7bfb      	ldrb	r3, [r7, #15]
   93636:	491c      	ldr	r1, [pc, #112]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93638:	7bfa      	ldrb	r2, [r7, #15]
   9363a:	3210      	adds	r2, #16
   9363c:	0152      	lsls	r2, r2, #5
   9363e:	440a      	add	r2, r1
   93640:	6812      	ldr	r2, [r2, #0]
   93642:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   93646:	6879      	ldr	r1, [r7, #4]
   93648:	79c9      	ldrb	r1, [r1, #7]
   9364a:	0409      	lsls	r1, r1, #16
   9364c:	430a      	orrs	r2, r1
   9364e:	3310      	adds	r3, #16
   93650:	015b      	lsls	r3, r3, #5
   93652:	4403      	add	r3, r0
   93654:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   93656:	4914      	ldr	r1, [pc, #80]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93658:	7bfb      	ldrb	r3, [r7, #15]
   9365a:	687a      	ldr	r2, [r7, #4]
   9365c:	68d2      	ldr	r2, [r2, #12]
   9365e:	3310      	adds	r3, #16
   93660:	015b      	lsls	r3, r3, #5
   93662:	440b      	add	r3, r1
   93664:	3304      	adds	r3, #4
   93666:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   93668:	490f      	ldr	r1, [pc, #60]	; (936a8 <dd_can_mailbox_conf+0xec>)
   9366a:	7bfb      	ldrb	r3, [r7, #15]
   9366c:	687a      	ldr	r2, [r7, #4]
   9366e:	6912      	ldr	r2, [r2, #16]
   93670:	015b      	lsls	r3, r3, #5
   93672:	440b      	add	r3, r1
   93674:	f503 7302 	add.w	r3, r3, #520	; 0x208
   93678:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   9367a:	480b      	ldr	r0, [pc, #44]	; (936a8 <dd_can_mailbox_conf+0xec>)
   9367c:	7bfb      	ldrb	r3, [r7, #15]
   9367e:	490a      	ldr	r1, [pc, #40]	; (936a8 <dd_can_mailbox_conf+0xec>)
   93680:	7bfa      	ldrb	r2, [r7, #15]
   93682:	3210      	adds	r2, #16
   93684:	0152      	lsls	r2, r2, #5
   93686:	440a      	add	r2, r1
   93688:	6812      	ldr	r2, [r2, #0]
   9368a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   9368e:	6879      	ldr	r1, [r7, #4]
   93690:	7909      	ldrb	r1, [r1, #4]
   93692:	0609      	lsls	r1, r1, #24
   93694:	430a      	orrs	r2, r1
   93696:	3310      	adds	r3, #16
   93698:	015b      	lsls	r3, r3, #5
   9369a:	4403      	add	r3, r0
   9369c:	601a      	str	r2, [r3, #0]
}
   9369e:	3714      	adds	r7, #20
   936a0:	46bd      	mov	sp, r7
   936a2:	bc80      	pop	{r7}
   936a4:	4770      	bx	lr
   936a6:	bf00      	nop
   936a8:	400b4000 	.word	0x400b4000

000936ac <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint32_t rc_count)
{
   936ac:	b580      	push	{r7, lr}
   936ae:	b084      	sub	sp, #16
   936b0:	af00      	add	r7, sp, #0
   936b2:	4603      	mov	r3, r0
   936b4:	6039      	str	r1, [r7, #0]
   936b6:	80fb      	strh	r3, [r7, #6]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   936b8:	88fb      	ldrh	r3, [r7, #6]
   936ba:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   936bc:	683b      	ldr	r3, [r7, #0]
   936be:	b29a      	uxth	r2, r3
   936c0:	7bfb      	ldrb	r3, [r7, #15]
   936c2:	4619      	mov	r1, r3
   936c4:	2002      	movs	r0, #2
   936c6:	4b04      	ldr	r3, [pc, #16]	; (936d8 <DD_CAN_WRITE_PROPO+0x2c>)
   936c8:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   936ca:	2001      	movs	r0, #1
   936cc:	4b03      	ldr	r3, [pc, #12]	; (936dc <DD_CAN_WRITE_PROPO+0x30>)
   936ce:	4798      	blx	r3

}
   936d0:	bf00      	nop
   936d2:	3710      	adds	r7, #16
   936d4:	46bd      	mov	sp, r7
   936d6:	bd80      	pop	{r7, pc}
   936d8:	00093179 	.word	0x00093179
   936dc:	00093591 	.word	0x00093591

000936e0 <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   936e0:	b580      	push	{r7, lr}
   936e2:	b084      	sub	sp, #16
   936e4:	af00      	add	r7, sp, #0
   936e6:	4603      	mov	r3, r0
   936e8:	460a      	mov	r2, r1
   936ea:	80fb      	strh	r3, [r7, #6]
   936ec:	4613      	mov	r3, r2
   936ee:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   936f0:	88fb      	ldrh	r3, [r7, #6]
   936f2:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   936f4:	4b09      	ldr	r3, [pc, #36]	; (9371c <DD_CAN_WRITE_HEMO+0x3c>)
   936f6:	f04f 32ff 	mov.w	r2, #4294967295
   936fa:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   936fc:	88ba      	ldrh	r2, [r7, #4]
   936fe:	7bfb      	ldrb	r3, [r7, #15]
   93700:	4619      	mov	r1, r3
   93702:	2001      	movs	r0, #1
   93704:	4b06      	ldr	r3, [pc, #24]	; (93720 <DD_CAN_WRITE_HEMO+0x40>)
   93706:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   93708:	2001      	movs	r0, #1
   9370a:	4b06      	ldr	r3, [pc, #24]	; (93724 <DD_CAN_WRITE_HEMO+0x44>)
   9370c:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   9370e:	4b03      	ldr	r3, [pc, #12]	; (9371c <DD_CAN_WRITE_HEMO+0x3c>)
   93710:	2202      	movs	r2, #2
   93712:	605a      	str	r2, [r3, #4]
}
   93714:	bf00      	nop
   93716:	3710      	adds	r7, #16
   93718:	46bd      	mov	sp, r7
   9371a:	bd80      	pop	{r7, pc}
   9371c:	400b4000 	.word	0x400b4000
   93720:	00093179 	.word	0x00093179
   93724:	00093591 	.word	0x00093591

00093728 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   93728:	b580      	push	{r7, lr}
   9372a:	b084      	sub	sp, #16
   9372c:	af00      	add	r7, sp, #0
   9372e:	4603      	mov	r3, r0
   93730:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   93732:	88fb      	ldrh	r3, [r7, #6]
   93734:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   93736:	4b0a      	ldr	r3, [pc, #40]	; (93760 <DD_CAN_WRITE_SENSOR+0x38>)
   93738:	f04f 32ff 	mov.w	r2, #4294967295
   9373c:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   9373e:	7bfb      	ldrb	r3, [r7, #15]
   93740:	2200      	movs	r2, #0
   93742:	4619      	mov	r1, r3
   93744:	2003      	movs	r0, #3
   93746:	4b07      	ldr	r3, [pc, #28]	; (93764 <DD_CAN_WRITE_SENSOR+0x3c>)
   93748:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   9374a:	2001      	movs	r0, #1
   9374c:	4b06      	ldr	r3, [pc, #24]	; (93768 <DD_CAN_WRITE_SENSOR+0x40>)
   9374e:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   93750:	4b03      	ldr	r3, [pc, #12]	; (93760 <DD_CAN_WRITE_SENSOR+0x38>)
   93752:	2202      	movs	r2, #2
   93754:	605a      	str	r2, [r3, #4]
}
   93756:	bf00      	nop
   93758:	3710      	adds	r7, #16
   9375a:	46bd      	mov	sp, r7
   9375c:	bd80      	pop	{r7, pc}
   9375e:	bf00      	nop
   93760:	400b4000 	.word	0x400b4000
   93764:	00093179 	.word	0x00093179
   93768:	00093591 	.word	0x00093591

0009376c <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   9376c:	b580      	push	{r7, lr}
   9376e:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   93770:	2100      	movs	r1, #0
   93772:	2027      	movs	r0, #39	; 0x27
   93774:	4b01      	ldr	r3, [pc, #4]	; (9377c <DD_CAN_READ_APTVPT+0x10>)
   93776:	4798      	blx	r3
	
}
   93778:	bf00      	nop
   9377a:	bd80      	pop	{r7, pc}
   9377c:	000936e1 	.word	0x000936e1

00093780 <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   93780:	b580      	push	{r7, lr}
   93782:	b08e      	sub	sp, #56	; 0x38
   93784:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   93786:	4b4f      	ldr	r3, [pc, #316]	; (938c4 <DD_INIT_CAN+0x144>)
   93788:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   9378a:	2378      	movs	r3, #120	; 0x78
   9378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   93790:	4b4d      	ldr	r3, [pc, #308]	; (938c8 <DD_INIT_CAN+0x148>)
   93792:	4a4e      	ldr	r2, [pc, #312]	; (938cc <DD_INIT_CAN+0x14c>)
   93794:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   93798:	4a4b      	ldr	r2, [pc, #300]	; (938c8 <DD_INIT_CAN+0x148>)
   9379a:	4b4b      	ldr	r3, [pc, #300]	; (938c8 <DD_INIT_CAN+0x148>)
   9379c:	681b      	ldr	r3, [r3, #0]
   9379e:	f023 0301 	bic.w	r3, r3, #1
   937a2:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   937a4:	4948      	ldr	r1, [pc, #288]	; (938c8 <DD_INIT_CAN+0x148>)
   937a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   937a8:	78db      	ldrb	r3, [r3, #3]
   937aa:	3b01      	subs	r3, #1
   937ac:	f003 0207 	and.w	r2, r3, #7
   937b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   937b2:	789b      	ldrb	r3, [r3, #2]
   937b4:	3b01      	subs	r3, #1
   937b6:	011b      	lsls	r3, r3, #4
   937b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   937bc:	431a      	orrs	r2, r3
   937be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   937c0:	785b      	ldrb	r3, [r3, #1]
   937c2:	3b01      	subs	r3, #1
   937c4:	021b      	lsls	r3, r3, #8
   937c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   937ca:	431a      	orrs	r2, r3
   937cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   937ce:	791b      	ldrb	r3, [r3, #4]
   937d0:	3b01      	subs	r3, #1
   937d2:	031b      	lsls	r3, r3, #12
   937d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   937d8:	431a      	orrs	r2, r3
   937da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   937de:	3b01      	subs	r3, #1
   937e0:	041b      	lsls	r3, r3, #16
   937e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   937e6:	4313      	orrs	r3, r2
   937e8:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   937ea:	2300      	movs	r3, #0
   937ec:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   937ee:	2300      	movs	r3, #0
   937f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   937f4:	e00b      	b.n	9380e <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   937f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   937fa:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   937fc:	1d3b      	adds	r3, r7, #4
   937fe:	4618      	mov	r0, r3
   93800:	4b33      	ldr	r3, [pc, #204]	; (938d0 <DD_INIT_CAN+0x150>)
   93802:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   93804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93808:	3301      	adds	r3, #1
   9380a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9380e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93812:	2b07      	cmp	r3, #7
   93814:	d9ef      	bls.n	937f6 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   93816:	4a2c      	ldr	r2, [pc, #176]	; (938c8 <DD_INIT_CAN+0x148>)
   93818:	4b2b      	ldr	r3, [pc, #172]	; (938c8 <DD_INIT_CAN+0x148>)
   9381a:	681b      	ldr	r3, [r3, #0]
   9381c:	f043 0301 	orr.w	r3, r3, #1
   93820:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   93822:	2300      	movs	r3, #0
   93824:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   93826:	2300      	movs	r3, #0
   93828:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   9382a:	e005      	b.n	93838 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   9382c:	4b26      	ldr	r3, [pc, #152]	; (938c8 <DD_INIT_CAN+0x148>)
   9382e:	691b      	ldr	r3, [r3, #16]
   93830:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   93832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93834:	3301      	adds	r3, #1
   93836:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   93838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   9383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   9383e:	2b00      	cmp	r3, #0
   93840:	d103      	bne.n	9384a <DD_INIT_CAN+0xca>
   93842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93844:	4a23      	ldr	r2, [pc, #140]	; (938d4 <DD_INIT_CAN+0x154>)
   93846:	4293      	cmp	r3, r2
   93848:	d9f0      	bls.n	9382c <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   9384a:	4b23      	ldr	r3, [pc, #140]	; (938d8 <DD_INIT_CAN+0x158>)
   9384c:	2201      	movs	r2, #1
   9384e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   93850:	4b21      	ldr	r3, [pc, #132]	; (938d8 <DD_INIT_CAN+0x158>)
   93852:	2201      	movs	r2, #1
   93854:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   93856:	4b20      	ldr	r3, [pc, #128]	; (938d8 <DD_INIT_CAN+0x158>)
   93858:	2200      	movs	r2, #0
   9385a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   9385c:	4b1e      	ldr	r3, [pc, #120]	; (938d8 <DD_INIT_CAN+0x158>)
   9385e:	2200      	movs	r2, #0
   93860:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   93862:	4b1d      	ldr	r3, [pc, #116]	; (938d8 <DD_INIT_CAN+0x158>)
   93864:	4a1d      	ldr	r2, [pc, #116]	; (938dc <DD_INIT_CAN+0x15c>)
   93866:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   93868:	4b1b      	ldr	r3, [pc, #108]	; (938d8 <DD_INIT_CAN+0x158>)
   9386a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   9386e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   93870:	4819      	ldr	r0, [pc, #100]	; (938d8 <DD_INIT_CAN+0x158>)
   93872:	4b17      	ldr	r3, [pc, #92]	; (938d0 <DD_INIT_CAN+0x150>)
   93874:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   93876:	4b18      	ldr	r3, [pc, #96]	; (938d8 <DD_INIT_CAN+0x158>)
   93878:	2200      	movs	r2, #0
   9387a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   9387c:	4b16      	ldr	r3, [pc, #88]	; (938d8 <DD_INIT_CAN+0x158>)
   9387e:	2203      	movs	r2, #3
   93880:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   93882:	4b15      	ldr	r3, [pc, #84]	; (938d8 <DD_INIT_CAN+0x158>)
   93884:	2201      	movs	r2, #1
   93886:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   93888:	4b13      	ldr	r3, [pc, #76]	; (938d8 <DD_INIT_CAN+0x158>)
   9388a:	2200      	movs	r2, #0
   9388c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   9388e:	4b12      	ldr	r3, [pc, #72]	; (938d8 <DD_INIT_CAN+0x158>)
   93890:	4a12      	ldr	r2, [pc, #72]	; (938dc <DD_INIT_CAN+0x15c>)
   93892:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   93894:	4b10      	ldr	r3, [pc, #64]	; (938d8 <DD_INIT_CAN+0x158>)
   93896:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9389a:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   9389c:	480e      	ldr	r0, [pc, #56]	; (938d8 <DD_INIT_CAN+0x158>)
   9389e:	4b0c      	ldr	r3, [pc, #48]	; (938d0 <DD_INIT_CAN+0x150>)
   938a0:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   938a2:	202b      	movs	r0, #43	; 0x2b
   938a4:	4b0e      	ldr	r3, [pc, #56]	; (938e0 <DD_INIT_CAN+0x160>)
   938a6:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   938a8:	4b07      	ldr	r3, [pc, #28]	; (938c8 <DD_INIT_CAN+0x148>)
   938aa:	2202      	movs	r2, #2
   938ac:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   938ae:	2103      	movs	r1, #3
   938b0:	480c      	ldr	r0, [pc, #48]	; (938e4 <DD_INIT_CAN+0x164>)
   938b2:	4b0d      	ldr	r3, [pc, #52]	; (938e8 <DD_INIT_CAN+0x168>)
   938b4:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   938b6:	480b      	ldr	r0, [pc, #44]	; (938e4 <DD_INIT_CAN+0x164>)
   938b8:	4b0c      	ldr	r3, [pc, #48]	; (938ec <DD_INIT_CAN+0x16c>)
   938ba:	4798      	blx	r3
		
		
	}
   938bc:	bf00      	nop
   938be:	3738      	adds	r7, #56	; 0x38
   938c0:	46bd      	mov	sp, r7
   938c2:	bd80      	pop	{r7, pc}
   938c4:	000a4a84 	.word	0x000a4a84
   938c8:	400b4000 	.word	0x400b4000
   938cc:	43414e00 	.word	0x43414e00
   938d0:	000935bd 	.word	0x000935bd
   938d4:	0001869f 	.word	0x0001869f
   938d8:	200732b0 	.word	0x200732b0
   938dc:	1ffc0000 	.word	0x1ffc0000
   938e0:	00093035 	.word	0x00093035
   938e4:	200732d0 	.word	0x200732d0
   938e8:	000930d1 	.word	0x000930d1
   938ec:	000930ed 	.word	0x000930ed

000938f0 <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   938f0:	b480      	push	{r7}
   938f2:	b085      	sub	sp, #20
   938f4:	af00      	add	r7, sp, #0
   938f6:	4603      	mov	r3, r0
   938f8:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	uint8_t channel = 0;
   938fa:	2300      	movs	r3, #0
   938fc:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   938fe:	79fb      	ldrb	r3, [r7, #7]
   93900:	3b01      	subs	r3, #1
   93902:	2b13      	cmp	r3, #19
   93904:	f200 8090 	bhi.w	93a28 <DD_CAN_READ_SENSORS+0x138>
   93908:	a201      	add	r2, pc, #4	; (adr r2, 93910 <DD_CAN_READ_SENSORS+0x20>)
   9390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9390e:	bf00      	nop
   93910:	00093961 	.word	0x00093961
   93914:	0009396b 	.word	0x0009396b
   93918:	00093975 	.word	0x00093975
   9391c:	0009397f 	.word	0x0009397f
   93920:	00093989 	.word	0x00093989
   93924:	00093993 	.word	0x00093993
   93928:	0009399d 	.word	0x0009399d
   9392c:	000939a7 	.word	0x000939a7
   93930:	000939b1 	.word	0x000939b1
   93934:	000939bb 	.word	0x000939bb
   93938:	000939c5 	.word	0x000939c5
   9393c:	000939cf 	.word	0x000939cf
   93940:	000939d9 	.word	0x000939d9
   93944:	000939e3 	.word	0x000939e3
   93948:	000939ed 	.word	0x000939ed
   9394c:	000939f7 	.word	0x000939f7
   93950:	00093a01 	.word	0x00093a01
   93954:	00093a0b 	.word	0x00093a0b
   93958:	00093a15 	.word	0x00093a15
   9395c:	00093a1f 	.word	0x00093a1f
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   93960:	4b34      	ldr	r3, [pc, #208]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93962:	885b      	ldrh	r3, [r3, #2]
   93964:	b29b      	uxth	r3, r3
   93966:	81fb      	strh	r3, [r7, #14]
		break;
   93968:	e05e      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   9396a:	4b32      	ldr	r3, [pc, #200]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   9396c:	889b      	ldrh	r3, [r3, #4]
   9396e:	b29b      	uxth	r3, r3
   93970:	81fb      	strh	r3, [r7, #14]
		break;
   93972:	e059      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   93974:	4b2f      	ldr	r3, [pc, #188]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93976:	88db      	ldrh	r3, [r3, #6]
   93978:	b29b      	uxth	r3, r3
   9397a:	81fb      	strh	r3, [r7, #14]
		break;
   9397c:	e054      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   9397e:	4b2d      	ldr	r3, [pc, #180]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93980:	891b      	ldrh	r3, [r3, #8]
   93982:	b29b      	uxth	r3, r3
   93984:	81fb      	strh	r3, [r7, #14]
		break;
   93986:	e04f      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   93988:	4b2a      	ldr	r3, [pc, #168]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   9398a:	895b      	ldrh	r3, [r3, #10]
   9398c:	b29b      	uxth	r3, r3
   9398e:	81fb      	strh	r3, [r7, #14]
		
		break;
   93990:	e04a      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   93992:	4b28      	ldr	r3, [pc, #160]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93994:	899b      	ldrh	r3, [r3, #12]
   93996:	b29b      	uxth	r3, r3
   93998:	81fb      	strh	r3, [r7, #14]
		break;
   9399a:	e045      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   9399c:	4b25      	ldr	r3, [pc, #148]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   9399e:	8a9b      	ldrh	r3, [r3, #20]
   939a0:	b29b      	uxth	r3, r3
   939a2:	81fb      	strh	r3, [r7, #14]
		break;
   939a4:	e040      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   939a6:	4b23      	ldr	r3, [pc, #140]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939a8:	8a1b      	ldrh	r3, [r3, #16]
   939aa:	b29b      	uxth	r3, r3
   939ac:	81fb      	strh	r3, [r7, #14]
		break;
   939ae:	e03b      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   939b0:	4b20      	ldr	r3, [pc, #128]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939b2:	8a5b      	ldrh	r3, [r3, #18]
   939b4:	b29b      	uxth	r3, r3
   939b6:	81fb      	strh	r3, [r7, #14]
		break;
   939b8:	e036      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   939ba:	4b1e      	ldr	r3, [pc, #120]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939bc:	8a9b      	ldrh	r3, [r3, #20]
   939be:	b29b      	uxth	r3, r3
   939c0:	81fb      	strh	r3, [r7, #14]
		break;
   939c2:	e031      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   939c4:	4b1b      	ldr	r3, [pc, #108]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939c6:	8adb      	ldrh	r3, [r3, #22]
   939c8:	b29b      	uxth	r3, r3
   939ca:	81fb      	strh	r3, [r7, #14]
		break;
   939cc:	e02c      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   939ce:	4b19      	ldr	r3, [pc, #100]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939d0:	8b1b      	ldrh	r3, [r3, #24]
   939d2:	b29b      	uxth	r3, r3
   939d4:	81fb      	strh	r3, [r7, #14]
		break;
   939d6:	e027      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   939d8:	4b16      	ldr	r3, [pc, #88]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939da:	8b5b      	ldrh	r3, [r3, #26]
   939dc:	b29b      	uxth	r3, r3
   939de:	81fb      	strh	r3, [r7, #14]
		break;
   939e0:	e022      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   939e2:	4b14      	ldr	r3, [pc, #80]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939e4:	8b9b      	ldrh	r3, [r3, #28]
   939e6:	b29b      	uxth	r3, r3
   939e8:	81fb      	strh	r3, [r7, #14]
		break;
   939ea:	e01d      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   939ec:	4b11      	ldr	r3, [pc, #68]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939ee:	8bdb      	ldrh	r3, [r3, #30]
   939f0:	b29b      	uxth	r3, r3
   939f2:	81fb      	strh	r3, [r7, #14]
		break;
   939f4:	e018      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   939f6:	4b0f      	ldr	r3, [pc, #60]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   939f8:	8c1b      	ldrh	r3, [r3, #32]
   939fa:	b29b      	uxth	r3, r3
   939fc:	81fb      	strh	r3, [r7, #14]
		break;
   939fe:	e013      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   93a00:	4b0c      	ldr	r3, [pc, #48]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93a02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   93a04:	b29b      	uxth	r3, r3
   93a06:	81fb      	strh	r3, [r7, #14]
		break;
   93a08:	e00e      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   93a0a:	4b0a      	ldr	r3, [pc, #40]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93a0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   93a0e:	b29b      	uxth	r3, r3
   93a10:	81fb      	strh	r3, [r7, #14]
		break;
   93a12:	e009      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   93a14:	4b07      	ldr	r3, [pc, #28]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   93a18:	b29b      	uxth	r3, r3
   93a1a:	81fb      	strh	r3, [r7, #14]
		break;
   93a1c:	e004      	b.n	93a28 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   93a1e:	4b05      	ldr	r3, [pc, #20]	; (93a34 <DD_CAN_READ_SENSORS+0x144>)
   93a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   93a22:	b29b      	uxth	r3, r3
   93a24:	81fb      	strh	r3, [r7, #14]
		break;
   93a26:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   93a28:	89fb      	ldrh	r3, [r7, #14]
	
}
   93a2a:	4618      	mov	r0, r3
   93a2c:	3714      	adds	r7, #20
   93a2e:	46bd      	mov	sp, r7
   93a30:	bc80      	pop	{r7}
   93a32:	4770      	bx	lr
   93a34:	20073284 	.word	0x20073284

00093a38 <DD_INIT_CLOCK>:
 *  Author: Gopalkrishna Kalibhat
 */ 
#include "DD_CLOCK.h"

void DD_INIT_CLOCK()
{
   93a38:	b580      	push	{r7, lr}
   93a3a:	af00      	add	r7, sp, #0
	
	sysclk_init();
   93a3c:	4b07      	ldr	r3, [pc, #28]	; (93a5c <DD_INIT_CLOCK+0x24>)
   93a3e:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   93a40:	4b07      	ldr	r3, [pc, #28]	; (93a60 <DD_INIT_CLOCK+0x28>)
   93a42:	4a08      	ldr	r2, [pc, #32]	; (93a64 <DD_INIT_CLOCK+0x2c>)
   93a44:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   93a48:	4b05      	ldr	r3, [pc, #20]	; (93a60 <DD_INIT_CLOCK+0x28>)
   93a4a:	4a07      	ldr	r2, [pc, #28]	; (93a68 <DD_INIT_CLOCK+0x30>)
   93a4c:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   93a4e:	4b04      	ldr	r3, [pc, #16]	; (93a60 <DD_INIT_CLOCK+0x28>)
   93a50:	f640 023f 	movw	r2, #2111	; 0x83f
   93a54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
   93a58:	bf00      	nop
   93a5a:	bd80      	pop	{r7, pc}
   93a5c:	0008044d 	.word	0x0008044d
   93a60:	400e0600 	.word	0x400e0600
   93a64:	504d4300 	.word	0x504d4300
   93a68:	f8007900 	.word	0xf8007900

00093a6c <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   93a6c:	b580      	push	{r7, lr}
   93a6e:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   93a70:	4b38      	ldr	r3, [pc, #224]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a72:	4a39      	ldr	r2, [pc, #228]	; (93b58 <DD_INIT_PIO+0xec>)
   93a74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOA->PIO_PER =  0x21C9ECF8;			//PIOA->PIO_PER  = 0x01C9ECF0;
   93a78:	4b36      	ldr	r3, [pc, #216]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a7a:	4a38      	ldr	r2, [pc, #224]	; (93b5c <DD_INIT_PIO+0xf0>)
   93a7c:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B868;			//PIOA->PIO_OER  = 0x00C0AC70;
   93a7e:	4b35      	ldr	r3, [pc, #212]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a80:	4a37      	ldr	r2, [pc, #220]	; (93b60 <DD_INIT_PIO+0xf4>)
   93a82:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   93a84:	4b33      	ldr	r3, [pc, #204]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a86:	4a37      	ldr	r2, [pc, #220]	; (93b64 <DD_INIT_PIO+0xf8>)
   93a88:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   93a8a:	4b32      	ldr	r3, [pc, #200]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a8c:	4a36      	ldr	r2, [pc, #216]	; (93b68 <DD_INIT_PIO+0xfc>)
   93a8e:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   93a90:	4b30      	ldr	r3, [pc, #192]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a92:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   93a96:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   93a98:	4b2e      	ldr	r3, [pc, #184]	; (93b54 <DD_INIT_PIO+0xe8>)
   93a9a:	4a34      	ldr	r2, [pc, #208]	; (93b6c <DD_INIT_PIO+0x100>)
   93a9c:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   93a9e:	4b2d      	ldr	r3, [pc, #180]	; (93b54 <DD_INIT_PIO+0xe8>)
   93aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   93aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   93aa8:	4b31      	ldr	r3, [pc, #196]	; (93b70 <DD_INIT_PIO+0x104>)
   93aaa:	4a2b      	ldr	r2, [pc, #172]	; (93b58 <DD_INIT_PIO+0xec>)
   93aac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE5F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   93ab0:	4b2f      	ldr	r3, [pc, #188]	; (93b70 <DD_INIT_PIO+0x104>)
   93ab2:	4a30      	ldr	r2, [pc, #192]	; (93b74 <DD_INIT_PIO+0x108>)
   93ab4:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00006400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   93ab6:	4b2e      	ldr	r3, [pc, #184]	; (93b70 <DD_INIT_PIO+0x104>)
   93ab8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
   93abc:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300;			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   93abe:	4b2c      	ldr	r3, [pc, #176]	; (93b70 <DD_INIT_PIO+0x104>)
   93ac0:	4a2d      	ldr	r2, [pc, #180]	; (93b78 <DD_INIT_PIO+0x10c>)
   93ac2:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   93ac4:	4b2a      	ldr	r3, [pc, #168]	; (93b70 <DD_INIT_PIO+0x104>)
   93ac6:	4a2d      	ldr	r2, [pc, #180]	; (93b7c <DD_INIT_PIO+0x110>)
   93ac8:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   93aca:	4b2d      	ldr	r3, [pc, #180]	; (93b80 <DD_INIT_PIO+0x114>)
   93acc:	4a22      	ldr	r2, [pc, #136]	; (93b58 <DD_INIT_PIO+0xec>)
   93ace:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   93ad2:	4b2b      	ldr	r3, [pc, #172]	; (93b80 <DD_INIT_PIO+0x114>)
   93ad4:	4a2b      	ldr	r2, [pc, #172]	; (93b84 <DD_INIT_PIO+0x118>)
   93ad6:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   93ad8:	4b29      	ldr	r3, [pc, #164]	; (93b80 <DD_INIT_PIO+0x114>)
   93ada:	4a2b      	ldr	r2, [pc, #172]	; (93b88 <DD_INIT_PIO+0x11c>)
   93adc:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   93ade:	4b28      	ldr	r3, [pc, #160]	; (93b80 <DD_INIT_PIO+0x114>)
   93ae0:	4a2a      	ldr	r2, [pc, #168]	; (93b8c <DD_INIT_PIO+0x120>)
   93ae2:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   93ae4:	4b26      	ldr	r3, [pc, #152]	; (93b80 <DD_INIT_PIO+0x114>)
   93ae6:	4a2a      	ldr	r2, [pc, #168]	; (93b90 <DD_INIT_PIO+0x124>)
   93ae8:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   93aea:	4b25      	ldr	r3, [pc, #148]	; (93b80 <DD_INIT_PIO+0x114>)
   93aec:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   93af0:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   93af2:	4b28      	ldr	r3, [pc, #160]	; (93b94 <DD_INIT_PIO+0x128>)
   93af4:	4a18      	ldr	r2, [pc, #96]	; (93b58 <DD_INIT_PIO+0xec>)
   93af6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   93afa:	4b26      	ldr	r3, [pc, #152]	; (93b94 <DD_INIT_PIO+0x128>)
   93afc:	f240 72ff 	movw	r2, #2047	; 0x7ff
   93b00:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   93b02:	4b24      	ldr	r3, [pc, #144]	; (93b94 <DD_INIT_PIO+0x128>)
   93b04:	f44f 72c3 	mov.w	r2, #390	; 0x186
   93b08:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   93b0a:	4b22      	ldr	r3, [pc, #136]	; (93b94 <DD_INIT_PIO+0x128>)
   93b0c:	f240 6279 	movw	r2, #1657	; 0x679
   93b10:	615a      	str	r2, [r3, #20]


//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
 PIOC->PIO_CODR = 1<<21;               
   93b12:	4b1b      	ldr	r3, [pc, #108]	; (93b80 <DD_INIT_PIO+0x114>)
   93b14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   93b18:	635a      	str	r2, [r3, #52]	; 0x34
 PIOD->PIO_SODR = 1<2;
   93b1a:	4b1e      	ldr	r3, [pc, #120]	; (93b94 <DD_INIT_PIO+0x128>)
   93b1c:	2201      	movs	r2, #1
   93b1e:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   93b20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93b24:	2055      	movs	r0, #85	; 0x55
   93b26:	4b1c      	ldr	r3, [pc, #112]	; (93b98 <DD_INIT_PIO+0x12c>)
   93b28:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   93b2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93b2e:	2055      	movs	r0, #85	; 0x55
   93b30:	4b19      	ldr	r3, [pc, #100]	; (93b98 <DD_INIT_PIO+0x12c>)
   93b32:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   93b34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   93b38:	2001      	movs	r0, #1
   93b3a:	4b17      	ldr	r3, [pc, #92]	; (93b98 <DD_INIT_PIO+0x12c>)
   93b3c:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   93b3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   93b42:	2000      	movs	r0, #0
   93b44:	4b14      	ldr	r3, [pc, #80]	; (93b98 <DD_INIT_PIO+0x12c>)
   93b46:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   93b48:	4914      	ldr	r1, [pc, #80]	; (93b9c <DD_INIT_PIO+0x130>)
   93b4a:	2003      	movs	r0, #3
   93b4c:	4b12      	ldr	r3, [pc, #72]	; (93b98 <DD_INIT_PIO+0x12c>)
   93b4e:	4798      	blx	r3


}
   93b50:	bf00      	nop
   93b52:	bd80      	pop	{r7, pc}
   93b54:	400e0e00 	.word	0x400e0e00
   93b58:	50494f00 	.word	0x50494f00
   93b5c:	21c9ecf8 	.word	0x21c9ecf8
   93b60:	20f0b868 	.word	0x20f0b868
   93b64:	01094494 	.word	0x01094494
   93b68:	1e361303 	.word	0x1e361303
   93b6c:	00391000 	.word	0x00391000
   93b70:	400e1000 	.word	0x400e1000
   93b74:	0fe5f700 	.word	0x0fe5f700
   93b78:	0fe59300 	.word	0x0fe59300
   93b7c:	f01800ff 	.word	0xf01800ff
   93b80:	400e1200 	.word	0x400e1200
   93b84:	7f9ffffe 	.word	0x7f9ffffe
   93b88:	18e1fffe 	.word	0x18e1fffe
   93b8c:	671e0000 	.word	0x671e0000
   93b90:	80600001 	.word	0x80600001
   93b94:	400e1400 	.word	0x400e1400
   93b98:	00097445 	.word	0x00097445
   93b9c:	30000001 	.word	0x30000001

00093ba0 <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   93ba0:	b480      	push	{r7}
   93ba2:	b083      	sub	sp, #12
   93ba4:	af00      	add	r7, sp, #0
   93ba6:	6078      	str	r0, [r7, #4]
   93ba8:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   93baa:	687b      	ldr	r3, [r7, #4]
   93bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93bb0:	d01a      	beq.n	93be8 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   93bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93bb6:	d803      	bhi.n	93bc0 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   93bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93bbc:	d007      	beq.n	93bce <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   93bbe:	e03a      	b.n	93c36 <DD_DIS_PERI_AND_RESET_PIO+0x96>
   93bc0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   93bc4:	d01d      	beq.n	93c02 <DD_DIS_PERI_AND_RESET_PIO+0x62>
   93bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   93bca:	d027      	beq.n	93c1c <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   93bcc:	e033      	b.n	93c36 <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   93bce:	4a1d      	ldr	r2, [pc, #116]	; (93c44 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   93bd0:	2101      	movs	r1, #1
   93bd2:	683b      	ldr	r3, [r7, #0]
   93bd4:	fa01 f303 	lsl.w	r3, r1, r3
   93bd8:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   93bda:	4a1a      	ldr	r2, [pc, #104]	; (93c44 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   93bdc:	2101      	movs	r1, #1
   93bde:	683b      	ldr	r3, [r7, #0]
   93be0:	fa01 f303 	lsl.w	r3, r1, r3
   93be4:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   93be6:	e026      	b.n	93c36 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   93be8:	4a17      	ldr	r2, [pc, #92]	; (93c48 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   93bea:	2101      	movs	r1, #1
   93bec:	683b      	ldr	r3, [r7, #0]
   93bee:	fa01 f303 	lsl.w	r3, r1, r3
   93bf2:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   93bf4:	4a14      	ldr	r2, [pc, #80]	; (93c48 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   93bf6:	2101      	movs	r1, #1
   93bf8:	683b      	ldr	r3, [r7, #0]
   93bfa:	fa01 f303 	lsl.w	r3, r1, r3
   93bfe:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   93c00:	e019      	b.n	93c36 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   93c02:	4a12      	ldr	r2, [pc, #72]	; (93c4c <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   93c04:	2101      	movs	r1, #1
   93c06:	683b      	ldr	r3, [r7, #0]
   93c08:	fa01 f303 	lsl.w	r3, r1, r3
   93c0c:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   93c0e:	4a0f      	ldr	r2, [pc, #60]	; (93c4c <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   93c10:	2101      	movs	r1, #1
   93c12:	683b      	ldr	r3, [r7, #0]
   93c14:	fa01 f303 	lsl.w	r3, r1, r3
   93c18:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   93c1a:	e00c      	b.n	93c36 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   93c1c:	4a0c      	ldr	r2, [pc, #48]	; (93c50 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   93c1e:	2101      	movs	r1, #1
   93c20:	683b      	ldr	r3, [r7, #0]
   93c22:	fa01 f303 	lsl.w	r3, r1, r3
   93c26:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   93c28:	4a09      	ldr	r2, [pc, #36]	; (93c50 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   93c2a:	2101      	movs	r1, #1
   93c2c:	683b      	ldr	r3, [r7, #0]
   93c2e:	fa01 f303 	lsl.w	r3, r1, r3
   93c32:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   93c34:	bf00      	nop
			
	}
}
   93c36:	bf00      	nop
   93c38:	4618      	mov	r0, r3
   93c3a:	370c      	adds	r7, #12
   93c3c:	46bd      	mov	sp, r7
   93c3e:	bc80      	pop	{r7}
   93c40:	4770      	bx	lr
   93c42:	bf00      	nop
   93c44:	400e0e00 	.word	0x400e0e00
   93c48:	400e1000 	.word	0x400e1000
   93c4c:	400e1200 	.word	0x400e1200
   93c50:	400e1400 	.word	0x400e1400

00093c54 <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   93c54:	b480      	push	{r7}
   93c56:	b083      	sub	sp, #12
   93c58:	af00      	add	r7, sp, #0
   93c5a:	6078      	str	r0, [r7, #4]
   93c5c:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   93c5e:	687b      	ldr	r3, [r7, #4]
   93c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93c64:	d014      	beq.n	93c90 <DD_EN_PERI_AND_SET_PIO+0x3c>
   93c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93c6a:	d803      	bhi.n	93c74 <DD_EN_PERI_AND_SET_PIO+0x20>
   93c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93c70:	d007      	beq.n	93c82 <DD_EN_PERI_AND_SET_PIO+0x2e>
   93c72:	e022      	b.n	93cba <DD_EN_PERI_AND_SET_PIO+0x66>
   93c74:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   93c78:	d011      	beq.n	93c9e <DD_EN_PERI_AND_SET_PIO+0x4a>
   93c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   93c7e:	d015      	beq.n	93cac <DD_EN_PERI_AND_SET_PIO+0x58>
   93c80:	e01b      	b.n	93cba <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   93c82:	4a11      	ldr	r2, [pc, #68]	; (93cc8 <DD_EN_PERI_AND_SET_PIO+0x74>)
   93c84:	2101      	movs	r1, #1
   93c86:	683b      	ldr	r3, [r7, #0]
   93c88:	fa01 f303 	lsl.w	r3, r1, r3
   93c8c:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   93c8e:	e014      	b.n	93cba <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   93c90:	4a0e      	ldr	r2, [pc, #56]	; (93ccc <DD_EN_PERI_AND_SET_PIO+0x78>)
   93c92:	2101      	movs	r1, #1
   93c94:	683b      	ldr	r3, [r7, #0]
   93c96:	fa01 f303 	lsl.w	r3, r1, r3
   93c9a:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   93c9c:	e00d      	b.n	93cba <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   93c9e:	4a0c      	ldr	r2, [pc, #48]	; (93cd0 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   93ca0:	2101      	movs	r1, #1
   93ca2:	683b      	ldr	r3, [r7, #0]
   93ca4:	fa01 f303 	lsl.w	r3, r1, r3
   93ca8:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   93caa:	e006      	b.n	93cba <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   93cac:	4a09      	ldr	r2, [pc, #36]	; (93cd4 <DD_EN_PERI_AND_SET_PIO+0x80>)
   93cae:	2101      	movs	r1, #1
   93cb0:	683b      	ldr	r3, [r7, #0]
   93cb2:	fa01 f303 	lsl.w	r3, r1, r3
   93cb6:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   93cb8:	bf00      	nop
		

		
	}
}
   93cba:	bf00      	nop
   93cbc:	4618      	mov	r0, r3
   93cbe:	370c      	adds	r7, #12
   93cc0:	46bd      	mov	sp, r7
   93cc2:	bc80      	pop	{r7}
   93cc4:	4770      	bx	lr
   93cc6:	bf00      	nop
   93cc8:	400e0e00 	.word	0x400e0e00
   93ccc:	400e1000 	.word	0x400e1000
   93cd0:	400e1200 	.word	0x400e1200
   93cd4:	400e1400 	.word	0x400e1400

00093cd8 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   93cd8:	b480      	push	{r7}
   93cda:	b083      	sub	sp, #12
   93cdc:	af00      	add	r7, sp, #0
   93cde:	6078      	str	r0, [r7, #4]
   93ce0:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   93ce2:	687b      	ldr	r3, [r7, #4]
   93ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93ce8:	d014      	beq.n	93d14 <DD_SET_PIO+0x3c>
   93cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93cee:	d803      	bhi.n	93cf8 <DD_SET_PIO+0x20>
   93cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93cf4:	d007      	beq.n	93d06 <DD_SET_PIO+0x2e>
   93cf6:	e022      	b.n	93d3e <DD_SET_PIO+0x66>
   93cf8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   93cfc:	d011      	beq.n	93d22 <DD_SET_PIO+0x4a>
   93cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   93d02:	d015      	beq.n	93d30 <DD_SET_PIO+0x58>
   93d04:	e01b      	b.n	93d3e <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   93d06:	4a11      	ldr	r2, [pc, #68]	; (93d4c <DD_SET_PIO+0x74>)
   93d08:	2101      	movs	r1, #1
   93d0a:	683b      	ldr	r3, [r7, #0]
   93d0c:	fa01 f303 	lsl.w	r3, r1, r3
   93d10:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   93d12:	e014      	b.n	93d3e <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   93d14:	4a0e      	ldr	r2, [pc, #56]	; (93d50 <DD_SET_PIO+0x78>)
   93d16:	2101      	movs	r1, #1
   93d18:	683b      	ldr	r3, [r7, #0]
   93d1a:	fa01 f303 	lsl.w	r3, r1, r3
   93d1e:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   93d20:	e00d      	b.n	93d3e <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   93d22:	4a0c      	ldr	r2, [pc, #48]	; (93d54 <DD_SET_PIO+0x7c>)
   93d24:	2101      	movs	r1, #1
   93d26:	683b      	ldr	r3, [r7, #0]
   93d28:	fa01 f303 	lsl.w	r3, r1, r3
   93d2c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   93d2e:	e006      	b.n	93d3e <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   93d30:	4a09      	ldr	r2, [pc, #36]	; (93d58 <DD_SET_PIO+0x80>)
   93d32:	2101      	movs	r1, #1
   93d34:	683b      	ldr	r3, [r7, #0]
   93d36:	fa01 f303 	lsl.w	r3, r1, r3
   93d3a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   93d3c:	bf00      	nop
				

	}
	
	return 0;
   93d3e:	2300      	movs	r3, #0
}
   93d40:	4618      	mov	r0, r3
   93d42:	370c      	adds	r7, #12
   93d44:	46bd      	mov	sp, r7
   93d46:	bc80      	pop	{r7}
   93d48:	4770      	bx	lr
   93d4a:	bf00      	nop
   93d4c:	400e0e00 	.word	0x400e0e00
   93d50:	400e1000 	.word	0x400e1000
   93d54:	400e1200 	.word	0x400e1200
   93d58:	400e1400 	.word	0x400e1400

00093d5c <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   93d5c:	b480      	push	{r7}
   93d5e:	b083      	sub	sp, #12
   93d60:	af00      	add	r7, sp, #0
   93d62:	6078      	str	r0, [r7, #4]
   93d64:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   93d66:	687b      	ldr	r3, [r7, #4]
   93d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93d6c:	d014      	beq.n	93d98 <DD_RESET_PIO+0x3c>
   93d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93d72:	d803      	bhi.n	93d7c <DD_RESET_PIO+0x20>
   93d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93d78:	d007      	beq.n	93d8a <DD_RESET_PIO+0x2e>
   93d7a:	e022      	b.n	93dc2 <DD_RESET_PIO+0x66>
   93d7c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   93d80:	d011      	beq.n	93da6 <DD_RESET_PIO+0x4a>
   93d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   93d86:	d015      	beq.n	93db4 <DD_RESET_PIO+0x58>
   93d88:	e01b      	b.n	93dc2 <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   93d8a:	4a11      	ldr	r2, [pc, #68]	; (93dd0 <DD_RESET_PIO+0x74>)
   93d8c:	2101      	movs	r1, #1
   93d8e:	683b      	ldr	r3, [r7, #0]
   93d90:	fa01 f303 	lsl.w	r3, r1, r3
   93d94:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   93d96:	e014      	b.n	93dc2 <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   93d98:	4a0e      	ldr	r2, [pc, #56]	; (93dd4 <DD_RESET_PIO+0x78>)
   93d9a:	2101      	movs	r1, #1
   93d9c:	683b      	ldr	r3, [r7, #0]
   93d9e:	fa01 f303 	lsl.w	r3, r1, r3
   93da2:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   93da4:	e00d      	b.n	93dc2 <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   93da6:	4a0c      	ldr	r2, [pc, #48]	; (93dd8 <DD_RESET_PIO+0x7c>)
   93da8:	2101      	movs	r1, #1
   93daa:	683b      	ldr	r3, [r7, #0]
   93dac:	fa01 f303 	lsl.w	r3, r1, r3
   93db0:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   93db2:	e006      	b.n	93dc2 <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   93db4:	4a09      	ldr	r2, [pc, #36]	; (93ddc <DD_RESET_PIO+0x80>)
   93db6:	2101      	movs	r1, #1
   93db8:	683b      	ldr	r3, [r7, #0]
   93dba:	fa01 f303 	lsl.w	r3, r1, r3
   93dbe:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   93dc0:	bf00      	nop
		  		

	  }
	  
	  return 0;
   93dc2:	2300      	movs	r3, #0
  }
   93dc4:	4618      	mov	r0, r3
   93dc6:	370c      	adds	r7, #12
   93dc8:	46bd      	mov	sp, r7
   93dca:	bc80      	pop	{r7}
   93dcc:	4770      	bx	lr
   93dce:	bf00      	nop
   93dd0:	400e0e00 	.word	0x400e0e00
   93dd4:	400e1000 	.word	0x400e1000
   93dd8:	400e1200 	.word	0x400e1200
   93ddc:	400e1400 	.word	0x400e1400

00093de0 <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   93de0:	b480      	push	{r7}
   93de2:	b085      	sub	sp, #20
   93de4:	af00      	add	r7, sp, #0
   93de6:	6078      	str	r0, [r7, #4]
   93de8:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   93dea:	2300      	movs	r3, #0
   93dec:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   93dee:	2300      	movs	r3, #0
   93df0:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   93df2:	687b      	ldr	r3, [r7, #4]
   93df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93df8:	d01a      	beq.n	93e30 <DD_READ_PIO+0x50>
   93dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93dfe:	d803      	bhi.n	93e08 <DD_READ_PIO+0x28>
   93e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93e04:	d007      	beq.n	93e16 <DD_READ_PIO+0x36>
   93e06:	e03c      	b.n	93e82 <DD_READ_PIO+0xa2>
   93e08:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   93e0c:	d01d      	beq.n	93e4a <DD_READ_PIO+0x6a>
   93e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   93e12:	d029      	beq.n	93e68 <DD_READ_PIO+0x88>
   93e14:	e035      	b.n	93e82 <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   93e16:	4b1d      	ldr	r3, [pc, #116]	; (93e8c <DD_READ_PIO+0xac>)
   93e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   93e1a:	2101      	movs	r1, #1
   93e1c:	683a      	ldr	r2, [r7, #0]
   93e1e:	fa01 f202 	lsl.w	r2, r1, r2
   93e22:	4013      	ands	r3, r2
   93e24:	2b00      	cmp	r3, #0
   93e26:	d101      	bne.n	93e2c <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   93e28:	2300      	movs	r3, #0
   93e2a:	e02a      	b.n	93e82 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   93e2c:	2301      	movs	r3, #1
   93e2e:	e028      	b.n	93e82 <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   93e30:	4b17      	ldr	r3, [pc, #92]	; (93e90 <DD_READ_PIO+0xb0>)
   93e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   93e34:	2101      	movs	r1, #1
   93e36:	683a      	ldr	r2, [r7, #0]
   93e38:	fa01 f202 	lsl.w	r2, r1, r2
   93e3c:	4013      	ands	r3, r2
   93e3e:	2b00      	cmp	r3, #0
   93e40:	d101      	bne.n	93e46 <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   93e42:	2300      	movs	r3, #0
   93e44:	e01d      	b.n	93e82 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   93e46:	2301      	movs	r3, #1
   93e48:	e01b      	b.n	93e82 <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   93e4a:	4b12      	ldr	r3, [pc, #72]	; (93e94 <DD_READ_PIO+0xb4>)
   93e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   93e4e:	2101      	movs	r1, #1
   93e50:	683a      	ldr	r2, [r7, #0]
   93e52:	fa01 f202 	lsl.w	r2, r1, r2
   93e56:	4013      	ands	r3, r2
   93e58:	2b00      	cmp	r3, #0
   93e5a:	d101      	bne.n	93e60 <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   93e5c:	2300      	movs	r3, #0
   93e5e:	e010      	b.n	93e82 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   93e60:	2301      	movs	r3, #1
   93e62:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   93e64:	897b      	ldrh	r3, [r7, #10]
   93e66:	e00c      	b.n	93e82 <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   93e68:	4b0b      	ldr	r3, [pc, #44]	; (93e98 <DD_READ_PIO+0xb8>)
   93e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   93e6c:	2101      	movs	r1, #1
   93e6e:	683a      	ldr	r2, [r7, #0]
   93e70:	fa01 f202 	lsl.w	r2, r1, r2
   93e74:	4013      	ands	r3, r2
   93e76:	2b00      	cmp	r3, #0
   93e78:	d101      	bne.n	93e7e <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   93e7a:	2300      	movs	r3, #0
   93e7c:	e001      	b.n	93e82 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   93e7e:	2301      	movs	r3, #1
   93e80:	e7ff      	b.n	93e82 <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   93e82:	4618      	mov	r0, r3
   93e84:	3714      	adds	r7, #20
   93e86:	46bd      	mov	sp, r7
   93e88:	bc80      	pop	{r7}
   93e8a:	4770      	bx	lr
   93e8c:	400e0e00 	.word	0x400e0e00
   93e90:	400e1000 	.word	0x400e1000
   93e94:	400e1200 	.word	0x400e1200
   93e98:	400e1400 	.word	0x400e1400

00093e9c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   93e9c:	b480      	push	{r7}
   93e9e:	b083      	sub	sp, #12
   93ea0:	af00      	add	r7, sp, #0
   93ea2:	4603      	mov	r3, r0
   93ea4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   93ea6:	4909      	ldr	r1, [pc, #36]	; (93ecc <NVIC_ClearPendingIRQ+0x30>)
   93ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93eac:	095b      	lsrs	r3, r3, #5
   93eae:	79fa      	ldrb	r2, [r7, #7]
   93eb0:	f002 021f 	and.w	r2, r2, #31
   93eb4:	2001      	movs	r0, #1
   93eb6:	fa00 f202 	lsl.w	r2, r0, r2
   93eba:	3360      	adds	r3, #96	; 0x60
   93ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   93ec0:	bf00      	nop
   93ec2:	370c      	adds	r7, #12
   93ec4:	46bd      	mov	sp, r7
   93ec6:	bc80      	pop	{r7}
   93ec8:	4770      	bx	lr
   93eca:	bf00      	nop
   93ecc:	e000e100 	.word	0xe000e100

00093ed0 <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   93ed0:	b580      	push	{r7, lr}
   93ed2:	b084      	sub	sp, #16
   93ed4:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   93ed6:	4b0b      	ldr	r3, [pc, #44]	; (93f04 <UART_Handler+0x34>)
   93ed8:	695b      	ldr	r3, [r3, #20]
   93eda:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   93edc:	4b09      	ldr	r3, [pc, #36]	; (93f04 <UART_Handler+0x34>)
   93ede:	699b      	ldr	r3, [r3, #24]
   93ee0:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   93ee2:	79fb      	ldrb	r3, [r7, #7]
   93ee4:	4618      	mov	r0, r3
   93ee6:	4b08      	ldr	r3, [pc, #32]	; (93f08 <UART_Handler+0x38>)
   93ee8:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   93eea:	2300      	movs	r3, #0
   93eec:	60fb      	str	r3, [r7, #12]
   93eee:	e002      	b.n	93ef6 <UART_Handler+0x26>
   93ef0:	68fb      	ldr	r3, [r7, #12]
   93ef2:	3301      	adds	r3, #1
   93ef4:	60fb      	str	r3, [r7, #12]
   93ef6:	68fb      	ldr	r3, [r7, #12]
   93ef8:	2bfe      	cmp	r3, #254	; 0xfe
   93efa:	d9f9      	bls.n	93ef0 <UART_Handler+0x20>
		{
			;
		}
	}

}
   93efc:	bf00      	nop
   93efe:	3710      	adds	r7, #16
   93f00:	46bd      	mov	sp, r7
   93f02:	bd80      	pop	{r7, pc}
   93f04:	400e0800 	.word	0x400e0800
   93f08:	00095901 	.word	0x00095901

00093f0c <TC0_Handler>:


void TC0_Handler()
{
   93f0c:	b580      	push	{r7, lr}
   93f0e:	b082      	sub	sp, #8
   93f10:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   93f12:	2100      	movs	r1, #0
   93f14:	4807      	ldr	r0, [pc, #28]	; (93f34 <TC0_Handler+0x28>)
   93f16:	4b08      	ldr	r3, [pc, #32]	; (93f38 <TC0_Handler+0x2c>)
   93f18:	4798      	blx	r3
   93f1a:	4603      	mov	r3, r0
   93f1c:	f003 0310 	and.w	r3, r3, #16
   93f20:	2b00      	cmp	r3, #0
   93f22:	d003      	beq.n	93f2c <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   93f24:	4b05      	ldr	r3, [pc, #20]	; (93f3c <TC0_Handler+0x30>)
   93f26:	4798      	blx	r3
   93f28:	4603      	mov	r3, r0
   93f2a:	71fb      	strb	r3, [r7, #7]
	}
}
   93f2c:	bf00      	nop
   93f2e:	3708      	adds	r7, #8
   93f30:	46bd      	mov	sp, r7
   93f32:	bd80      	pop	{r7, pc}
   93f34:	40080000 	.word	0x40080000
   93f38:	00097ae9 	.word	0x00097ae9
   93f3c:	00091705 	.word	0x00091705

00093f40 <TC6_Handler>:

void TC6_Handler()
{
   93f40:	b580      	push	{r7, lr}
   93f42:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   93f44:	2021      	movs	r0, #33	; 0x21
   93f46:	4b04      	ldr	r3, [pc, #16]	; (93f58 <TC6_Handler+0x18>)
   93f48:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   93f4a:	2100      	movs	r1, #0
   93f4c:	4803      	ldr	r0, [pc, #12]	; (93f5c <TC6_Handler+0x1c>)
   93f4e:	4b04      	ldr	r3, [pc, #16]	; (93f60 <TC6_Handler+0x20>)
   93f50:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   93f52:	bf00      	nop
   93f54:	bd80      	pop	{r7, pc}
   93f56:	bf00      	nop
   93f58:	00093e9d 	.word	0x00093e9d
   93f5c:	40088000 	.word	0x40088000
   93f60:	00097ae9 	.word	0x00097ae9

00093f64 <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   93f64:	b580      	push	{r7, lr}
   93f66:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   93f68:	201e      	movs	r0, #30
   93f6a:	4b04      	ldr	r3, [pc, #16]	; (93f7c <TC3_Handler+0x18>)
   93f6c:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   93f6e:	2100      	movs	r1, #0
   93f70:	4803      	ldr	r0, [pc, #12]	; (93f80 <TC3_Handler+0x1c>)
   93f72:	4b04      	ldr	r3, [pc, #16]	; (93f84 <TC3_Handler+0x20>)
   93f74:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   93f76:	bf00      	nop
   93f78:	bd80      	pop	{r7, pc}
   93f7a:	bf00      	nop
   93f7c:	00093e9d 	.word	0x00093e9d
   93f80:	40084000 	.word	0x40084000
   93f84:	00097ae9 	.word	0x00097ae9

00093f88 <SysTick_Handler>:

void SysTick_Handler(void)
{
   93f88:	b580      	push	{r7, lr}
   93f8a:	b082      	sub	sp, #8
   93f8c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   93f8e:	4b04      	ldr	r3, [pc, #16]	; (93fa0 <SysTick_Handler+0x18>)
   93f90:	4798      	blx	r3
   93f92:	4603      	mov	r3, r0
   93f94:	71fb      	strb	r3, [r7, #7]
   93f96:	bf00      	nop
   93f98:	3708      	adds	r7, #8
   93f9a:	46bd      	mov	sp, r7
   93f9c:	bd80      	pop	{r7, pc}
   93f9e:	bf00      	nop
   93fa0:	00091bb9 	.word	0x00091bb9

00093fa4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   93fa4:	b480      	push	{r7}
   93fa6:	b083      	sub	sp, #12
   93fa8:	af00      	add	r7, sp, #0
   93faa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   93fac:	687b      	ldr	r3, [r7, #4]
   93fae:	2b07      	cmp	r3, #7
   93fb0:	d825      	bhi.n	93ffe <osc_get_rate+0x5a>
   93fb2:	a201      	add	r2, pc, #4	; (adr r2, 93fb8 <osc_get_rate+0x14>)
   93fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93fb8:	00093fd9 	.word	0x00093fd9
   93fbc:	00093fdf 	.word	0x00093fdf
   93fc0:	00093fe5 	.word	0x00093fe5
   93fc4:	00093feb 	.word	0x00093feb
   93fc8:	00093fef 	.word	0x00093fef
   93fcc:	00093ff3 	.word	0x00093ff3
   93fd0:	00093ff7 	.word	0x00093ff7
   93fd4:	00093ffb 	.word	0x00093ffb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   93fd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   93fdc:	e010      	b.n	94000 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   93fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   93fe2:	e00d      	b.n	94000 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   93fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   93fe8:	e00a      	b.n	94000 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   93fea:	4b08      	ldr	r3, [pc, #32]	; (9400c <osc_get_rate+0x68>)
   93fec:	e008      	b.n	94000 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   93fee:	4b08      	ldr	r3, [pc, #32]	; (94010 <osc_get_rate+0x6c>)
   93ff0:	e006      	b.n	94000 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   93ff2:	4b08      	ldr	r3, [pc, #32]	; (94014 <osc_get_rate+0x70>)
   93ff4:	e004      	b.n	94000 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   93ff6:	4b07      	ldr	r3, [pc, #28]	; (94014 <osc_get_rate+0x70>)
   93ff8:	e002      	b.n	94000 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   93ffa:	4b06      	ldr	r3, [pc, #24]	; (94014 <osc_get_rate+0x70>)
   93ffc:	e000      	b.n	94000 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   93ffe:	2300      	movs	r3, #0
}
   94000:	4618      	mov	r0, r3
   94002:	370c      	adds	r7, #12
   94004:	46bd      	mov	sp, r7
   94006:	bc80      	pop	{r7}
   94008:	4770      	bx	lr
   9400a:	bf00      	nop
   9400c:	003d0900 	.word	0x003d0900
   94010:	007a1200 	.word	0x007a1200
   94014:	00b71b00 	.word	0x00b71b00

00094018 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   94018:	b580      	push	{r7, lr}
   9401a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9401c:	2006      	movs	r0, #6
   9401e:	4b04      	ldr	r3, [pc, #16]	; (94030 <sysclk_get_main_hz+0x18>)
   94020:	4798      	blx	r3
   94022:	4602      	mov	r2, r0
   94024:	4613      	mov	r3, r2
   94026:	00db      	lsls	r3, r3, #3
   94028:	1a9b      	subs	r3, r3, r2
   9402a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9402c:	4618      	mov	r0, r3
   9402e:	bd80      	pop	{r7, pc}
   94030:	00093fa5 	.word	0x00093fa5

00094034 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   94034:	b580      	push	{r7, lr}
   94036:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   94038:	4b02      	ldr	r3, [pc, #8]	; (94044 <sysclk_get_cpu_hz+0x10>)
   9403a:	4798      	blx	r3
   9403c:	4603      	mov	r3, r0
   9403e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   94040:	4618      	mov	r0, r3
   94042:	bd80      	pop	{r7, pc}
   94044:	00094019 	.word	0x00094019

00094048 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   94048:	b580      	push	{r7, lr}
   9404a:	b082      	sub	sp, #8
   9404c:	af00      	add	r7, sp, #0
   9404e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   94050:	6878      	ldr	r0, [r7, #4]
   94052:	4b03      	ldr	r3, [pc, #12]	; (94060 <sysclk_enable_peripheral_clock+0x18>)
   94054:	4798      	blx	r3
}
   94056:	bf00      	nop
   94058:	3708      	adds	r7, #8
   9405a:	46bd      	mov	sp, r7
   9405c:	bd80      	pop	{r7, pc}
   9405e:	bf00      	nop
   94060:	000979c5 	.word	0x000979c5

00094064 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   94064:	b580      	push	{r7, lr}
   94066:	b082      	sub	sp, #8
   94068:	af00      	add	r7, sp, #0
   9406a:	6078      	str	r0, [r7, #4]
   9406c:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   9406e:	4b10      	ldr	r3, [pc, #64]	; (940b0 <twi_master_setup+0x4c>)
   94070:	4798      	blx	r3
   94072:	4602      	mov	r2, r0
   94074:	683b      	ldr	r3, [r7, #0]
   94076:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   94078:	683b      	ldr	r3, [r7, #0]
   9407a:	2200      	movs	r2, #0
   9407c:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   9407e:	687b      	ldr	r3, [r7, #4]
   94080:	4a0c      	ldr	r2, [pc, #48]	; (940b4 <twi_master_setup+0x50>)
   94082:	4293      	cmp	r3, r2
   94084:	d103      	bne.n	9408e <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   94086:	2016      	movs	r0, #22
   94088:	4b0b      	ldr	r3, [pc, #44]	; (940b8 <twi_master_setup+0x54>)
   9408a:	4798      	blx	r3
   9408c:	e006      	b.n	9409c <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   9408e:	687b      	ldr	r3, [r7, #4]
   94090:	4a0a      	ldr	r2, [pc, #40]	; (940bc <twi_master_setup+0x58>)
   94092:	4293      	cmp	r3, r2
   94094:	d102      	bne.n	9409c <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   94096:	2017      	movs	r0, #23
   94098:	4b07      	ldr	r3, [pc, #28]	; (940b8 <twi_master_setup+0x54>)
   9409a:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   9409c:	6839      	ldr	r1, [r7, #0]
   9409e:	6878      	ldr	r0, [r7, #4]
   940a0:	4b07      	ldr	r3, [pc, #28]	; (940c0 <twi_master_setup+0x5c>)
   940a2:	4798      	blx	r3
   940a4:	4603      	mov	r3, r0
}
   940a6:	4618      	mov	r0, r3
   940a8:	3708      	adds	r7, #8
   940aa:	46bd      	mov	sp, r7
   940ac:	bd80      	pop	{r7, pc}
   940ae:	bf00      	nop
   940b0:	00094035 	.word	0x00094035
   940b4:	4008c000 	.word	0x4008c000
   940b8:	00094049 	.word	0x00094049
   940bc:	40090000 	.word	0x40090000
   940c0:	00080629 	.word	0x00080629

000940c4 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   940c4:	b580      	push	{r7, lr}
   940c6:	b086      	sub	sp, #24
   940c8:	af00      	add	r7, sp, #0
   940ca:	6078      	str	r0, [r7, #4]
   940cc:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   940ce:	4b63      	ldr	r3, [pc, #396]	; (9425c <twi_master_write1+0x198>)
   940d0:	2200      	movs	r2, #0
   940d2:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   940d4:	4b62      	ldr	r3, [pc, #392]	; (94260 <twi_master_write1+0x19c>)
   940d6:	681b      	ldr	r3, [r3, #0]
   940d8:	3301      	adds	r3, #1
   940da:	4a61      	ldr	r2, [pc, #388]	; (94260 <twi_master_write1+0x19c>)
   940dc:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   940de:	4b60      	ldr	r3, [pc, #384]	; (94260 <twi_master_write1+0x19c>)
   940e0:	681b      	ldr	r3, [r3, #0]
   940e2:	2b01      	cmp	r3, #1
   940e4:	dd04      	ble.n	940f0 <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   940e6:	2200      	movs	r2, #0
   940e8:	2100      	movs	r1, #0
   940ea:	203d      	movs	r0, #61	; 0x3d
   940ec:	4b5d      	ldr	r3, [pc, #372]	; (94264 <twi_master_write1+0x1a0>)
   940ee:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   940f0:	495d      	ldr	r1, [pc, #372]	; (94268 <twi_master_write1+0x1a4>)
   940f2:	485e      	ldr	r0, [pc, #376]	; (9426c <twi_master_write1+0x1a8>)
   940f4:	4b5e      	ldr	r3, [pc, #376]	; (94270 <twi_master_write1+0x1ac>)
   940f6:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   940f8:	683b      	ldr	r3, [r7, #0]
   940fa:	68db      	ldr	r3, [r3, #12]
   940fc:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   940fe:	683b      	ldr	r3, [r7, #0]
   94100:	689b      	ldr	r3, [r3, #8]
   94102:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   94104:	4b5b      	ldr	r3, [pc, #364]	; (94274 <twi_master_write1+0x1b0>)
   94106:	2200      	movs	r2, #0
   94108:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   9410a:	697b      	ldr	r3, [r7, #20]
   9410c:	2b00      	cmp	r3, #0
   9410e:	d104      	bne.n	9411a <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   94110:	4b53      	ldr	r3, [pc, #332]	; (94260 <twi_master_write1+0x19c>)
   94112:	2200      	movs	r2, #0
   94114:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   94116:	2301      	movs	r3, #1
   94118:	e09c      	b.n	94254 <twi_master_write1+0x190>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   9411a:	687b      	ldr	r3, [r7, #4]
   9411c:	2200      	movs	r2, #0
   9411e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   94120:	683b      	ldr	r3, [r7, #0]
   94122:	7c1b      	ldrb	r3, [r3, #16]
   94124:	041b      	lsls	r3, r3, #16
   94126:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   9412a:	683b      	ldr	r3, [r7, #0]
   9412c:	685b      	ldr	r3, [r3, #4]
   9412e:	021b      	lsls	r3, r3, #8
   94130:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   94134:	431a      	orrs	r2, r3
   94136:	687b      	ldr	r3, [r7, #4]
   94138:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   9413a:	687b      	ldr	r3, [r7, #4]
   9413c:	2200      	movs	r2, #0
   9413e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   94140:	683a      	ldr	r2, [r7, #0]
   94142:	683b      	ldr	r3, [r7, #0]
   94144:	685b      	ldr	r3, [r3, #4]
   94146:	4619      	mov	r1, r3
   94148:	4610      	mov	r0, r2
   9414a:	4b4b      	ldr	r3, [pc, #300]	; (94278 <twi_master_write1+0x1b4>)
   9414c:	4798      	blx	r3
   9414e:	4602      	mov	r2, r0
   94150:	687b      	ldr	r3, [r7, #4]
   94152:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   94154:	e033      	b.n	941be <twi_master_write1+0xfa>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   94156:	687b      	ldr	r3, [r7, #4]
   94158:	6a1b      	ldr	r3, [r3, #32]
   9415a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   9415c:	68fb      	ldr	r3, [r7, #12]
   9415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   94162:	2b00      	cmp	r3, #0
   94164:	d007      	beq.n	94176 <twi_master_write1+0xb2>
			iic_nack = true;
   94166:	4b43      	ldr	r3, [pc, #268]	; (94274 <twi_master_write1+0x1b0>)
   94168:	2201      	movs	r2, #1
   9416a:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   9416c:	4b3c      	ldr	r3, [pc, #240]	; (94260 <twi_master_write1+0x19c>)
   9416e:	2200      	movs	r2, #0
   94170:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   94172:	2305      	movs	r3, #5
   94174:	e06e      	b.n	94254 <twi_master_write1+0x190>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   94176:	68fb      	ldr	r3, [r7, #12]
   94178:	f003 0304 	and.w	r3, r3, #4
   9417c:	2b00      	cmp	r3, #0
   9417e:	d114      	bne.n	941aa <twi_master_write1+0xe6>
			if(func_timer > 3)
   94180:	4b36      	ldr	r3, [pc, #216]	; (9425c <twi_master_write1+0x198>)
   94182:	681b      	ldr	r3, [r3, #0]
   94184:	2b03      	cmp	r3, #3
   94186:	dd1a      	ble.n	941be <twi_master_write1+0xfa>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   94188:	4b34      	ldr	r3, [pc, #208]	; (9425c <twi_master_write1+0x198>)
   9418a:	2200      	movs	r2, #0
   9418c:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   9418e:	687b      	ldr	r3, [r7, #4]
   94190:	2280      	movs	r2, #128	; 0x80
   94192:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   94194:	4b39      	ldr	r3, [pc, #228]	; (9427c <twi_master_write1+0x1b8>)
   94196:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   94198:	4933      	ldr	r1, [pc, #204]	; (94268 <twi_master_write1+0x1a4>)
   9419a:	4834      	ldr	r0, [pc, #208]	; (9426c <twi_master_write1+0x1a8>)
   9419c:	4b34      	ldr	r3, [pc, #208]	; (94270 <twi_master_write1+0x1ac>)
   9419e:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   941a0:	4b2f      	ldr	r3, [pc, #188]	; (94260 <twi_master_write1+0x19c>)
   941a2:	2200      	movs	r2, #0
   941a4:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   941a6:	2308      	movs	r3, #8
   941a8:	e054      	b.n	94254 <twi_master_write1+0x190>
			{
				continue;
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   941aa:	693b      	ldr	r3, [r7, #16]
   941ac:	1c5a      	adds	r2, r3, #1
   941ae:	613a      	str	r2, [r7, #16]
   941b0:	781b      	ldrb	r3, [r3, #0]
   941b2:	461a      	mov	r2, r3
   941b4:	687b      	ldr	r3, [r7, #4]
   941b6:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   941b8:	697b      	ldr	r3, [r7, #20]
   941ba:	3b01      	subs	r3, #1
   941bc:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   941be:	697b      	ldr	r3, [r7, #20]
   941c0:	2b00      	cmp	r3, #0
   941c2:	d1c8      	bne.n	94156 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   941c4:	687b      	ldr	r3, [r7, #4]
   941c6:	6a1b      	ldr	r3, [r3, #32]
   941c8:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   941ca:	68fb      	ldr	r3, [r7, #12]
   941cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
   941d0:	2b00      	cmp	r3, #0
   941d2:	d004      	beq.n	941de <twi_master_write1+0x11a>
			FUNC_ENTRY = 0;
   941d4:	4b22      	ldr	r3, [pc, #136]	; (94260 <twi_master_write1+0x19c>)
   941d6:	2200      	movs	r2, #0
   941d8:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   941da:	2305      	movs	r3, #5
   941dc:	e03a      	b.n	94254 <twi_master_write1+0x190>
		}

		if (status & TWI_SR_TXRDY) {
   941de:	68fb      	ldr	r3, [r7, #12]
   941e0:	f003 0304 	and.w	r3, r3, #4
   941e4:	2b00      	cmp	r3, #0
   941e6:	d111      	bne.n	9420c <twi_master_write1+0x148>
			break;
		}
		
		if(func_timer > 3)
   941e8:	4b1c      	ldr	r3, [pc, #112]	; (9425c <twi_master_write1+0x198>)
   941ea:	681b      	ldr	r3, [r3, #0]
   941ec:	2b03      	cmp	r3, #3
   941ee:	dde9      	ble.n	941c4 <twi_master_write1+0x100>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   941f0:	687b      	ldr	r3, [r7, #4]
   941f2:	2280      	movs	r2, #128	; 0x80
   941f4:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   941f6:	4b21      	ldr	r3, [pc, #132]	; (9427c <twi_master_write1+0x1b8>)
   941f8:	4798      	blx	r3
			FUNC_ENTRY = 0;
   941fa:	4b19      	ldr	r3, [pc, #100]	; (94260 <twi_master_write1+0x19c>)
   941fc:	2200      	movs	r2, #0
   941fe:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   94200:	4919      	ldr	r1, [pc, #100]	; (94268 <twi_master_write1+0x1a4>)
   94202:	481a      	ldr	r0, [pc, #104]	; (9426c <twi_master_write1+0x1a8>)
   94204:	4b1a      	ldr	r3, [pc, #104]	; (94270 <twi_master_write1+0x1ac>)
   94206:	4798      	blx	r3
			return(TWI_BUSY);
   94208:	2308      	movs	r3, #8
   9420a:	e023      	b.n	94254 <twi_master_write1+0x190>
			FUNC_ENTRY = 0;
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
   9420c:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   9420e:	687b      	ldr	r3, [r7, #4]
   94210:	2202      	movs	r2, #2
   94212:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   94214:	e014      	b.n	94240 <twi_master_write1+0x17c>
					if(func_timer > 3)
   94216:	4b11      	ldr	r3, [pc, #68]	; (9425c <twi_master_write1+0x198>)
   94218:	681b      	ldr	r3, [r3, #0]
   9421a:	2b03      	cmp	r3, #3
   9421c:	dd10      	ble.n	94240 <twi_master_write1+0x17c>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   9421e:	4b0f      	ldr	r3, [pc, #60]	; (9425c <twi_master_write1+0x198>)
   94220:	2200      	movs	r2, #0
   94222:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   94224:	4b15      	ldr	r3, [pc, #84]	; (9427c <twi_master_write1+0x1b8>)
   94226:	4798      	blx	r3
			FUNC_ENTRY = 0;
   94228:	4b0d      	ldr	r3, [pc, #52]	; (94260 <twi_master_write1+0x19c>)
   9422a:	2200      	movs	r2, #0
   9422c:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   9422e:	490e      	ldr	r1, [pc, #56]	; (94268 <twi_master_write1+0x1a4>)
   94230:	480e      	ldr	r0, [pc, #56]	; (9426c <twi_master_write1+0x1a8>)
   94232:	4b0f      	ldr	r3, [pc, #60]	; (94270 <twi_master_write1+0x1ac>)
   94234:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   94236:	687b      	ldr	r3, [r7, #4]
   94238:	2280      	movs	r2, #128	; 0x80
   9423a:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   9423c:	2308      	movs	r3, #8
   9423e:	e009      	b.n	94254 <twi_master_write1+0x190>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   94240:	687b      	ldr	r3, [r7, #4]
   94242:	6a1b      	ldr	r3, [r3, #32]
   94244:	f003 0301 	and.w	r3, r3, #1
   94248:	2b00      	cmp	r3, #0
   9424a:	d0e4      	beq.n	94216 <twi_master_write1+0x152>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   9424c:	4b04      	ldr	r3, [pc, #16]	; (94260 <twi_master_write1+0x19c>)
   9424e:	2200      	movs	r2, #0
   94250:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   94252:	2300      	movs	r3, #0
}
   94254:	4618      	mov	r0, r3
   94256:	3718      	adds	r7, #24
   94258:	46bd      	mov	sp, r7
   9425a:	bd80      	pop	{r7, pc}
   9425c:	20072614 	.word	0x20072614
   94260:	200726ac 	.word	0x200726ac
   94264:	00098601 	.word	0x00098601
   94268:	200709c8 	.word	0x200709c8
   9426c:	4008c000 	.word	0x4008c000
   94270:	00094065 	.word	0x00094065
   94274:	20072605 	.word	0x20072605
   94278:	00094281 	.word	0x00094281
   9427c:	00094399 	.word	0x00094399

00094280 <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   94280:	b480      	push	{r7}
   94282:	b085      	sub	sp, #20
   94284:	af00      	add	r7, sp, #0
   94286:	6078      	str	r0, [r7, #4]
   94288:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   9428a:	683b      	ldr	r3, [r7, #0]
   9428c:	2b00      	cmp	r3, #0
   9428e:	d101      	bne.n	94294 <twi_mk_addr+0x14>
	return 0;
   94290:	2300      	movs	r3, #0
   94292:	e01d      	b.n	942d0 <twi_mk_addr+0x50>

	val = addr[0];
   94294:	687b      	ldr	r3, [r7, #4]
   94296:	781b      	ldrb	r3, [r3, #0]
   94298:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   9429a:	683b      	ldr	r3, [r7, #0]
   9429c:	2b01      	cmp	r3, #1
   9429e:	dd09      	ble.n	942b4 <twi_mk_addr+0x34>
		val <<= 8;
   942a0:	68fb      	ldr	r3, [r7, #12]
   942a2:	021b      	lsls	r3, r3, #8
   942a4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   942a6:	687b      	ldr	r3, [r7, #4]
   942a8:	3301      	adds	r3, #1
   942aa:	781b      	ldrb	r3, [r3, #0]
   942ac:	461a      	mov	r2, r3
   942ae:	68fb      	ldr	r3, [r7, #12]
   942b0:	4313      	orrs	r3, r2
   942b2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   942b4:	683b      	ldr	r3, [r7, #0]
   942b6:	2b02      	cmp	r3, #2
   942b8:	dd09      	ble.n	942ce <twi_mk_addr+0x4e>
		val <<= 8;
   942ba:	68fb      	ldr	r3, [r7, #12]
   942bc:	021b      	lsls	r3, r3, #8
   942be:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   942c0:	687b      	ldr	r3, [r7, #4]
   942c2:	3302      	adds	r3, #2
   942c4:	781b      	ldrb	r3, [r3, #0]
   942c6:	461a      	mov	r2, r3
   942c8:	68fb      	ldr	r3, [r7, #12]
   942ca:	4313      	orrs	r3, r2
   942cc:	60fb      	str	r3, [r7, #12]
	}
	return val;
   942ce:	68fb      	ldr	r3, [r7, #12]
}
   942d0:	4618      	mov	r0, r3
   942d2:	3714      	adds	r7, #20
   942d4:	46bd      	mov	sp, r7
   942d6:	bc80      	pop	{r7}
   942d8:	4770      	bx	lr
   942da:	bf00      	nop

000942dc <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   942dc:	b580      	push	{r7, lr}
   942de:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   942e0:	4b06      	ldr	r3, [pc, #24]	; (942fc <DD_INIT_IIC+0x20>)
   942e2:	4a07      	ldr	r2, [pc, #28]	; (94300 <DD_INIT_IIC+0x24>)
   942e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   942e8:	4b04      	ldr	r3, [pc, #16]	; (942fc <DD_INIT_IIC+0x20>)
   942ea:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   942ee:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   942f0:	4904      	ldr	r1, [pc, #16]	; (94304 <DD_INIT_IIC+0x28>)
   942f2:	4805      	ldr	r0, [pc, #20]	; (94308 <DD_INIT_IIC+0x2c>)
   942f4:	4b05      	ldr	r3, [pc, #20]	; (9430c <DD_INIT_IIC+0x30>)
   942f6:	4798      	blx	r3
		
			
	
}
   942f8:	bf00      	nop
   942fa:	bd80      	pop	{r7, pc}
   942fc:	400e0e00 	.word	0x400e0e00
   94300:	50494f00 	.word	0x50494f00
   94304:	200709c8 	.word	0x200709c8
   94308:	4008c000 	.word	0x4008c000
   9430c:	00094065 	.word	0x00094065

00094310 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   94310:	b580      	push	{r7, lr}
   94312:	b088      	sub	sp, #32
   94314:	af00      	add	r7, sp, #0
   94316:	4603      	mov	r3, r0
   94318:	460a      	mov	r2, r1
   9431a:	71fb      	strb	r3, [r7, #7]
   9431c:	4613      	mov	r3, r2
   9431e:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   94320:	4a1a      	ldr	r2, [pc, #104]	; (9438c <DD_IIC_SET_POT+0x7c>)
   94322:	f107 031c 	add.w	r3, r7, #28
   94326:	6810      	ldr	r0, [r2, #0]
   94328:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   9432a:	f107 0308 	add.w	r3, r7, #8
   9432e:	2200      	movs	r2, #0
   94330:	601a      	str	r2, [r3, #0]
   94332:	605a      	str	r2, [r3, #4]
   94334:	609a      	str	r2, [r3, #8]
   94336:	60da      	str	r2, [r3, #12]
   94338:	611a      	str	r2, [r3, #16]
   9433a:	f107 031c 	add.w	r3, r7, #28
   9433e:	613b      	str	r3, [r7, #16]
   94340:	2304      	movs	r3, #4
   94342:	617b      	str	r3, [r7, #20]
   94344:	79fb      	ldrb	r3, [r7, #7]
   94346:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   94348:	88bb      	ldrh	r3, [r7, #4]
   9434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   9434e:	d818      	bhi.n	94382 <DD_IIC_SET_POT+0x72>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   94350:	88bb      	ldrh	r3, [r7, #4]
   94352:	b2db      	uxtb	r3, r3
   94354:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   94356:	88bb      	ldrh	r3, [r7, #4]
   94358:	0a1b      	lsrs	r3, r3, #8
   9435a:	b29b      	uxth	r3, r3
   9435c:	b25b      	sxtb	r3, r3
   9435e:	f003 0303 	and.w	r3, r3, #3
   94362:	b25b      	sxtb	r3, r3
   94364:	f043 0304 	orr.w	r3, r3, #4
   94368:	b25b      	sxtb	r3, r3
   9436a:	b2db      	uxtb	r3, r3
   9436c:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   9436e:	f107 031c 	add.w	r3, r7, #28
   94372:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   94374:	f107 0308 	add.w	r3, r7, #8
   94378:	4619      	mov	r1, r3
   9437a:	4805      	ldr	r0, [pc, #20]	; (94390 <DD_IIC_SET_POT+0x80>)
   9437c:	4b05      	ldr	r3, [pc, #20]	; (94394 <DD_IIC_SET_POT+0x84>)
   9437e:	4798      	blx	r3
   94380:	e000      	b.n	94384 <DD_IIC_SET_POT+0x74>
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
		 {
			 return;
   94382:	bf00      	nop

			 iic_packet.buffer =  (void *)test_pattern_inc;
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
		 }

}
   94384:	3720      	adds	r7, #32
   94386:	46bd      	mov	sp, r7
   94388:	bd80      	pop	{r7, pc}
   9438a:	bf00      	nop
   9438c:	000a4ad0 	.word	0x000a4ad0
   94390:	4008c000 	.word	0x4008c000
   94394:	000940c5 	.word	0x000940c5

00094398 <clock_it>:
			
}


void clock_it(void)
{
   94398:	b480      	push	{r7}
   9439a:	af00      	add	r7, sp, #0
	return;
   9439c:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   9439e:	46bd      	mov	sp, r7
   943a0:	bc80      	pop	{r7}
   943a2:	4770      	bx	lr

000943a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   943a4:	b480      	push	{r7}
   943a6:	b083      	sub	sp, #12
   943a8:	af00      	add	r7, sp, #0
   943aa:	4603      	mov	r3, r0
   943ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   943ae:	4908      	ldr	r1, [pc, #32]	; (943d0 <NVIC_EnableIRQ+0x2c>)
   943b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   943b4:	095b      	lsrs	r3, r3, #5
   943b6:	79fa      	ldrb	r2, [r7, #7]
   943b8:	f002 021f 	and.w	r2, r2, #31
   943bc:	2001      	movs	r0, #1
   943be:	fa00 f202 	lsl.w	r2, r0, r2
   943c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   943c6:	bf00      	nop
   943c8:	370c      	adds	r7, #12
   943ca:	46bd      	mov	sp, r7
   943cc:	bc80      	pop	{r7}
   943ce:	4770      	bx	lr
   943d0:	e000e100 	.word	0xe000e100

000943d4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   943d4:	b480      	push	{r7}
   943d6:	b083      	sub	sp, #12
   943d8:	af00      	add	r7, sp, #0
   943da:	4603      	mov	r3, r0
   943dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   943de:	4909      	ldr	r1, [pc, #36]	; (94404 <NVIC_DisableIRQ+0x30>)
   943e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   943e4:	095b      	lsrs	r3, r3, #5
   943e6:	79fa      	ldrb	r2, [r7, #7]
   943e8:	f002 021f 	and.w	r2, r2, #31
   943ec:	2001      	movs	r0, #1
   943ee:	fa00 f202 	lsl.w	r2, r0, r2
   943f2:	3320      	adds	r3, #32
   943f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   943f8:	bf00      	nop
   943fa:	370c      	adds	r7, #12
   943fc:	46bd      	mov	sp, r7
   943fe:	bc80      	pop	{r7}
   94400:	4770      	bx	lr
   94402:	bf00      	nop
   94404:	e000e100 	.word	0xe000e100

00094408 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   94408:	b480      	push	{r7}
   9440a:	b083      	sub	sp, #12
   9440c:	af00      	add	r7, sp, #0
   9440e:	4603      	mov	r3, r0
   94410:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   94412:	4909      	ldr	r1, [pc, #36]	; (94438 <NVIC_ClearPendingIRQ+0x30>)
   94414:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94418:	095b      	lsrs	r3, r3, #5
   9441a:	79fa      	ldrb	r2, [r7, #7]
   9441c:	f002 021f 	and.w	r2, r2, #31
   94420:	2001      	movs	r0, #1
   94422:	fa00 f202 	lsl.w	r2, r0, r2
   94426:	3360      	adds	r3, #96	; 0x60
   94428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9442c:	bf00      	nop
   9442e:	370c      	adds	r7, #12
   94430:	46bd      	mov	sp, r7
   94432:	bc80      	pop	{r7}
   94434:	4770      	bx	lr
   94436:	bf00      	nop
   94438:	e000e100 	.word	0xe000e100

0009443c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   9443c:	b480      	push	{r7}
   9443e:	b083      	sub	sp, #12
   94440:	af00      	add	r7, sp, #0
   94442:	4603      	mov	r3, r0
   94444:	6039      	str	r1, [r7, #0]
   94446:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   94448:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9444c:	2b00      	cmp	r3, #0
   9444e:	da0b      	bge.n	94468 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   94450:	490d      	ldr	r1, [pc, #52]	; (94488 <NVIC_SetPriority+0x4c>)
   94452:	79fb      	ldrb	r3, [r7, #7]
   94454:	f003 030f 	and.w	r3, r3, #15
   94458:	3b04      	subs	r3, #4
   9445a:	683a      	ldr	r2, [r7, #0]
   9445c:	b2d2      	uxtb	r2, r2
   9445e:	0112      	lsls	r2, r2, #4
   94460:	b2d2      	uxtb	r2, r2
   94462:	440b      	add	r3, r1
   94464:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   94466:	e009      	b.n	9447c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   94468:	4908      	ldr	r1, [pc, #32]	; (9448c <NVIC_SetPriority+0x50>)
   9446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9446e:	683a      	ldr	r2, [r7, #0]
   94470:	b2d2      	uxtb	r2, r2
   94472:	0112      	lsls	r2, r2, #4
   94474:	b2d2      	uxtb	r2, r2
   94476:	440b      	add	r3, r1
   94478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   9447c:	bf00      	nop
   9447e:	370c      	adds	r7, #12
   94480:	46bd      	mov	sp, r7
   94482:	bc80      	pop	{r7}
   94484:	4770      	bx	lr
   94486:	bf00      	nop
   94488:	e000ed00 	.word	0xe000ed00
   9448c:	e000e100 	.word	0xe000e100

00094490 <DD_INIT_INT>:
 */ 

#include "DD_INT.h"

void DD_INIT_INT()
{
   94490:	b580      	push	{r7, lr}
   94492:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   94494:	2008      	movs	r0, #8
   94496:	4b2e      	ldr	r3, [pc, #184]	; (94550 <DD_INIT_INT+0xc0>)
   94498:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   9449a:	2008      	movs	r0, #8
   9449c:	4b2d      	ldr	r3, [pc, #180]	; (94554 <DD_INIT_INT+0xc4>)
   9449e:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   944a0:	2100      	movs	r1, #0
   944a2:	2008      	movs	r0, #8
   944a4:	4b2c      	ldr	r3, [pc, #176]	; (94558 <DD_INIT_INT+0xc8>)
   944a6:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   944a8:	2008      	movs	r0, #8
   944aa:	4b2c      	ldr	r3, [pc, #176]	; (9455c <DD_INIT_INT+0xcc>)
   944ac:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   944ae:	2101      	movs	r1, #1
   944b0:	482b      	ldr	r0, [pc, #172]	; (94560 <DD_INIT_INT+0xd0>)
   944b2:	4b2c      	ldr	r3, [pc, #176]	; (94564 <DD_INIT_INT+0xd4>)
   944b4:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   944b6:	201b      	movs	r0, #27
   944b8:	4b25      	ldr	r3, [pc, #148]	; (94550 <DD_INIT_INT+0xc0>)
   944ba:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   944bc:	201b      	movs	r0, #27
   944be:	4b25      	ldr	r3, [pc, #148]	; (94554 <DD_INIT_INT+0xc4>)
   944c0:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   944c2:	2100      	movs	r1, #0
   944c4:	201b      	movs	r0, #27
   944c6:	4b24      	ldr	r3, [pc, #144]	; (94558 <DD_INIT_INT+0xc8>)
   944c8:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   944ca:	201b      	movs	r0, #27
   944cc:	4b23      	ldr	r3, [pc, #140]	; (9455c <DD_INIT_INT+0xcc>)
   944ce:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   944d0:	201e      	movs	r0, #30
   944d2:	4b1f      	ldr	r3, [pc, #124]	; (94550 <DD_INIT_INT+0xc0>)
   944d4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   944d6:	201e      	movs	r0, #30
   944d8:	4b1e      	ldr	r3, [pc, #120]	; (94554 <DD_INIT_INT+0xc4>)
   944da:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   944dc:	2100      	movs	r1, #0
   944de:	201e      	movs	r0, #30
   944e0:	4b1d      	ldr	r3, [pc, #116]	; (94558 <DD_INIT_INT+0xc8>)
   944e2:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   944e4:	201e      	movs	r0, #30
   944e6:	4b1d      	ldr	r3, [pc, #116]	; (9455c <DD_INIT_INT+0xcc>)
   944e8:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   944ea:	2021      	movs	r0, #33	; 0x21
   944ec:	4b18      	ldr	r3, [pc, #96]	; (94550 <DD_INIT_INT+0xc0>)
   944ee:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   944f0:	2021      	movs	r0, #33	; 0x21
   944f2:	4b18      	ldr	r3, [pc, #96]	; (94554 <DD_INIT_INT+0xc4>)
   944f4:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   944f6:	2100      	movs	r1, #0
   944f8:	2021      	movs	r0, #33	; 0x21
   944fa:	4b17      	ldr	r3, [pc, #92]	; (94558 <DD_INIT_INT+0xc8>)
   944fc:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   944fe:	2021      	movs	r0, #33	; 0x21
   94500:	4b16      	ldr	r3, [pc, #88]	; (9455c <DD_INIT_INT+0xcc>)
   94502:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   94504:	4b18      	ldr	r3, [pc, #96]	; (94568 <DD_INIT_INT+0xd8>)
   94506:	f04f 32ff 	mov.w	r2, #4294967295
   9450a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   9450e:	4b16      	ldr	r3, [pc, #88]	; (94568 <DD_INIT_INT+0xd8>)
   94510:	f04f 32ff 	mov.w	r2, #4294967295
   94514:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   94518:	2100      	movs	r1, #0
   9451a:	2021      	movs	r0, #33	; 0x21
   9451c:	4b0e      	ldr	r3, [pc, #56]	; (94558 <DD_INIT_INT+0xc8>)
   9451e:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   94520:	4b11      	ldr	r3, [pc, #68]	; (94568 <DD_INIT_INT+0xd8>)
   94522:	f04f 32ff 	mov.w	r2, #4294967295
   94526:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   94528:	4b0f      	ldr	r3, [pc, #60]	; (94568 <DD_INIT_INT+0xd8>)
   9452a:	f04f 32ff 	mov.w	r2, #4294967295
   9452e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   94532:	4b0d      	ldr	r3, [pc, #52]	; (94568 <DD_INIT_INT+0xd8>)
   94534:	f04f 32ff 	mov.w	r2, #4294967295
   94538:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   9453c:	2100      	movs	r1, #0
   9453e:	201e      	movs	r0, #30
   94540:	4b05      	ldr	r3, [pc, #20]	; (94558 <DD_INIT_INT+0xc8>)
   94542:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   94544:	4b08      	ldr	r3, [pc, #32]	; (94568 <DD_INIT_INT+0xd8>)
   94546:	f04f 32ff 	mov.w	r2, #4294967295
   9454a:	60da      	str	r2, [r3, #12]
   9454c:	bf00      	nop
   9454e:	bd80      	pop	{r7, pc}
   94550:	000943d5 	.word	0x000943d5
   94554:	00094409 	.word	0x00094409
   94558:	0009443d 	.word	0x0009443d
   9455c:	000943a5 	.word	0x000943a5
   94560:	400e0800 	.word	0x400e0800
   94564:	00097bb5 	.word	0x00097bb5
   94568:	e000e100 	.word	0xe000e100

0009456c <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   9456c:	b590      	push	{r4, r7, lr}
   9456e:	b0c7      	sub	sp, #284	; 0x11c
   94570:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   94572:	4b4b      	ldr	r3, [pc, #300]	; (946a0 <DD_INIT_NVM+0x134>)
   94574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   94578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   9457c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   94580:	2300      	movs	r3, #0
   94582:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   94586:	2106      	movs	r1, #6
   94588:	2000      	movs	r0, #0
   9458a:	4b46      	ldr	r3, [pc, #280]	; (946a4 <DD_INIT_NVM+0x138>)
   9458c:	4798      	blx	r3
   9458e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   94592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   94596:	2b00      	cmp	r3, #0
   94598:	d176      	bne.n	94688 <DD_INIT_NVM+0x11c>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   9459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   9459e:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   945a2:	2300      	movs	r3, #0
   945a4:	2200      	movs	r2, #0
   945a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   945aa:	4c3f      	ldr	r4, [pc, #252]	; (946a8 <DD_INIT_NVM+0x13c>)
   945ac:	47a0      	blx	r4
   945ae:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   945b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   945b6:	2b00      	cmp	r3, #0
   945b8:	d168      	bne.n	9468c <DD_INIT_NVM+0x120>
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   945ba:	2300      	movs	r3, #0
   945bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   945c0:	e010      	b.n	945e4 <DD_INIT_NVM+0x78>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   945c2:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   945c6:	463b      	mov	r3, r7
   945c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   945cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   945d0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   945d4:	3301      	adds	r3, #1
   945d6:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   945da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   945de:	3301      	adds	r3, #1
   945e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   945e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   945e8:	2b3f      	cmp	r3, #63	; 0x3f
   945ea:	d9ea      	bls.n	945c2 <DD_INIT_NVM+0x56>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   945ec:	2300      	movs	r3, #0
   945ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   945f2:	e012      	b.n	9461a <DD_INIT_NVM+0xae>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   945f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   945f8:	009b      	lsls	r3, r3, #2
   945fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   945fe:	4413      	add	r3, r2
   94600:	681a      	ldr	r2, [r3, #0]
   94602:	463b      	mov	r3, r7
   94604:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   94608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   9460c:	429a      	cmp	r2, r3
   9460e:	d13f      	bne.n	94690 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   94610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   94614:	3301      	adds	r3, #1
   94616:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9461e:	2b3f      	cmp	r3, #63	; 0x3f
   94620:	d9e8      	bls.n	945f4 <DD_INIT_NVM+0x88>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   94622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   94626:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   9462a:	2300      	movs	r3, #0
   9462c:	2200      	movs	r2, #0
   9462e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   94632:	4c1e      	ldr	r4, [pc, #120]	; (946ac <DD_INIT_NVM+0x140>)
   94634:	47a0      	blx	r4
   94636:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   9463a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9463e:	2b00      	cmp	r3, #0
   94640:	d128      	bne.n	94694 <DD_INIT_NVM+0x128>
			return 0;
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   94642:	4639      	mov	r1, r7
   94644:	2301      	movs	r3, #1
   94646:	f44f 7280 	mov.w	r2, #256	; 0x100
   9464a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   9464e:	4c18      	ldr	r4, [pc, #96]	; (946b0 <DD_INIT_NVM+0x144>)
   94650:	47a0      	blx	r4
   94652:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   94656:	bf00      	nop
   94658:	f207 1303 	addw	r3, r7, #259	; 0x103
   9465c:	4619      	mov	r1, r3
   9465e:	4815      	ldr	r0, [pc, #84]	; (946b4 <DD_INIT_NVM+0x148>)
   94660:	4b15      	ldr	r3, [pc, #84]	; (946b8 <DD_INIT_NVM+0x14c>)
   94662:	4798      	blx	r3
   94664:	4603      	mov	r3, r0
   94666:	2b00      	cmp	r3, #0
   94668:	d1f6      	bne.n	94658 <DD_INIT_NVM+0xec>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   9466a:	bf00      	nop
   9466c:	f207 1303 	addw	r3, r7, #259	; 0x103
   94670:	4619      	mov	r1, r3
   94672:	4810      	ldr	r0, [pc, #64]	; (946b4 <DD_INIT_NVM+0x148>)
   94674:	4b10      	ldr	r3, [pc, #64]	; (946b8 <DD_INIT_NVM+0x14c>)
   94676:	4798      	blx	r3
   94678:	4603      	mov	r3, r0
   9467a:	2b00      	cmp	r3, #0
   9467c:	d1f6      	bne.n	9466c <DD_INIT_NVM+0x100>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   9467e:	4b0f      	ldr	r3, [pc, #60]	; (946bc <DD_INIT_NVM+0x150>)
   94680:	4798      	blx	r3
   94682:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   94686:	e006      	b.n	94696 <DD_INIT_NVM+0x12a>
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
	if (ul_rc != FLASH_RC_OK)
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   94688:	bf00      	nop
   9468a:	e004      	b.n	94696 <DD_INIT_NVM+0x12a>
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   9468c:	bf00      	nop
   9468e:	e002      	b.n	94696 <DD_INIT_NVM+0x12a>
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			//printf("\n\r-F- data error\n\r");
			return 0;
   94690:	bf00      	nop
   94692:	e000      	b.n	94696 <DD_INIT_NVM+0x12a>
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   94694:	bf00      	nop

		//printf("-I- All tests done\n\r");



}
   94696:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   9469a:	46bd      	mov	sp, r7
   9469c:	bd90      	pop	{r4, r7, pc}
   9469e:	bf00      	nop
   946a0:	000fff00 	.word	0x000fff00
   946a4:	00080965 	.word	0x00080965
   946a8:	00080b89 	.word	0x00080b89
   946ac:	00080aed 	.word	0x00080aed
   946b0:	00080999 	.word	0x00080999
   946b4:	400e0800 	.word	0x400e0800
   946b8:	00097c15 	.word	0x00097c15
   946bc:	00080ccd 	.word	0x00080ccd

000946c0 <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   946c0:	b480      	push	{r7}
   946c2:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   946c4:	4b2b      	ldr	r3, [pc, #172]	; (94774 <DD_INIT_PWM+0xb4>)
   946c6:	4a2c      	ldr	r2, [pc, #176]	; (94778 <DD_INIT_PWM+0xb8>)
   946c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   946cc:	4b29      	ldr	r3, [pc, #164]	; (94774 <DD_INIT_PWM+0xb4>)
   946ce:	4a2b      	ldr	r2, [pc, #172]	; (9477c <DD_INIT_PWM+0xbc>)
   946d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   946d4:	4b27      	ldr	r3, [pc, #156]	; (94774 <DD_INIT_PWM+0xb4>)
   946d6:	4a29      	ldr	r2, [pc, #164]	; (9477c <DD_INIT_PWM+0xbc>)
   946d8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   946dc:	4b25      	ldr	r3, [pc, #148]	; (94774 <DD_INIT_PWM+0xb4>)
   946de:	4a27      	ldr	r2, [pc, #156]	; (9477c <DD_INIT_PWM+0xbc>)
   946e0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   946e4:	4b23      	ldr	r3, [pc, #140]	; (94774 <DD_INIT_PWM+0xb4>)
   946e6:	4a25      	ldr	r2, [pc, #148]	; (9477c <DD_INIT_PWM+0xbc>)
   946e8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   946ec:	4b21      	ldr	r3, [pc, #132]	; (94774 <DD_INIT_PWM+0xb4>)
   946ee:	22ff      	movs	r2, #255	; 0xff
   946f0:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   946f2:	4b20      	ldr	r3, [pc, #128]	; (94774 <DD_INIT_PWM+0xb4>)
   946f4:	f640 2206 	movw	r2, #2566	; 0xa06
   946f8:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   946fa:	4b1e      	ldr	r3, [pc, #120]	; (94774 <DD_INIT_PWM+0xb4>)
   946fc:	220b      	movs	r2, #11
   946fe:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   94702:	4b1c      	ldr	r3, [pc, #112]	; (94774 <DD_INIT_PWM+0xb4>)
   94704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   94708:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   9470c:	4b19      	ldr	r3, [pc, #100]	; (94774 <DD_INIT_PWM+0xb4>)
   9470e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   94712:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   94716:	4b17      	ldr	r3, [pc, #92]	; (94774 <DD_INIT_PWM+0xb4>)
   94718:	f646 5260 	movw	r2, #28000	; 0x6d60
   9471c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   94720:	4b14      	ldr	r3, [pc, #80]	; (94774 <DD_INIT_PWM+0xb4>)
   94722:	f640 325a 	movw	r2, #2906	; 0xb5a
   94726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   9472a:	4b12      	ldr	r3, [pc, #72]	; (94774 <DD_INIT_PWM+0xb4>)
   9472c:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   94730:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   94734:	4b0f      	ldr	r3, [pc, #60]	; (94774 <DD_INIT_PWM+0xb4>)
   94736:	f44f 7248 	mov.w	r2, #800	; 0x320
   9473a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   9473e:	4b0d      	ldr	r3, [pc, #52]	; (94774 <DD_INIT_PWM+0xb4>)
   94740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   94744:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   94748:	4b0a      	ldr	r3, [pc, #40]	; (94774 <DD_INIT_PWM+0xb4>)
   9474a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9474e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   94752:	4b08      	ldr	r3, [pc, #32]	; (94774 <DD_INIT_PWM+0xb4>)
   94754:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   94758:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   9475c:	4b05      	ldr	r3, [pc, #20]	; (94774 <DD_INIT_PWM+0xb4>)
   9475e:	f44f 7248 	mov.w	r2, #800	; 0x320
   94762:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   94766:	4b03      	ldr	r3, [pc, #12]	; (94774 <DD_INIT_PWM+0xb4>)
   94768:	2237      	movs	r2, #55	; 0x37
   9476a:	605a      	str	r2, [r3, #4]


	
	
}
   9476c:	bf00      	nop
   9476e:	46bd      	mov	sp, r7
   94770:	bc80      	pop	{r7}
   94772:	4770      	bx	lr
   94774:	40094000 	.word	0x40094000
   94778:	50574d00 	.word	0x50574d00
   9477c:	00070605 	.word	0x00070605

00094780 <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   94780:	b480      	push	{r7}
   94782:	b083      	sub	sp, #12
   94784:	af00      	add	r7, sp, #0
   94786:	4603      	mov	r3, r0
   94788:	6039      	str	r1, [r7, #0]
   9478a:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   9478c:	4a06      	ldr	r2, [pc, #24]	; (947a8 <DD_SET_DUTY+0x28>)
   9478e:	79fb      	ldrb	r3, [r7, #7]
   94790:	3310      	adds	r3, #16
   94792:	015b      	lsls	r3, r3, #5
   94794:	4413      	add	r3, r2
   94796:	3304      	adds	r3, #4
   94798:	683a      	ldr	r2, [r7, #0]
   9479a:	601a      	str	r2, [r3, #0]
	 
	 return 0;
   9479c:	2300      	movs	r3, #0
 }
   9479e:	4618      	mov	r0, r3
   947a0:	370c      	adds	r7, #12
   947a2:	46bd      	mov	sp, r7
   947a4:	bc80      	pop	{r7}
   947a6:	4770      	bx	lr
   947a8:	40094000 	.word	0x40094000

000947ac <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   947ac:	b480      	push	{r7}
   947ae:	b083      	sub	sp, #12
   947b0:	af00      	add	r7, sp, #0
   947b2:	4603      	mov	r3, r0
   947b4:	6039      	str	r1, [r7, #0]
   947b6:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   947b8:	4a06      	ldr	r2, [pc, #24]	; (947d4 <DD_SET_PRDY+0x28>)
   947ba:	79fb      	ldrb	r3, [r7, #7]
   947bc:	015b      	lsls	r3, r3, #5
   947be:	4413      	add	r3, r2
   947c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   947c4:	683a      	ldr	r2, [r7, #0]
   947c6:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   947c8:	2300      	movs	r3, #0
 }
   947ca:	4618      	mov	r0, r3
   947cc:	370c      	adds	r7, #12
   947ce:	46bd      	mov	sp, r7
   947d0:	bc80      	pop	{r7}
   947d2:	4770      	bx	lr
   947d4:	40094000 	.word	0x40094000

000947d8 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   947d8:	b490      	push	{r4, r7}
   947da:	b082      	sub	sp, #8
   947dc:	af00      	add	r7, sp, #0
   947de:	4603      	mov	r3, r0
   947e0:	80fb      	strh	r3, [r7, #6]
   947e2:	460b      	mov	r3, r1
   947e4:	717b      	strb	r3, [r7, #5]
   947e6:	4613      	mov	r3, r2
   947e8:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   947ea:	4911      	ldr	r1, [pc, #68]	; (94830 <dd_spi_set_transfer_delay+0x58>)
   947ec:	88fb      	ldrh	r3, [r7, #6]
   947ee:	4810      	ldr	r0, [pc, #64]	; (94830 <dd_spi_set_transfer_delay+0x58>)
   947f0:	88fa      	ldrh	r2, [r7, #6]
   947f2:	320c      	adds	r2, #12
   947f4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   947f8:	b292      	uxth	r2, r2
   947fa:	330c      	adds	r3, #12
   947fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   94800:	4c0b      	ldr	r4, [pc, #44]	; (94830 <dd_spi_set_transfer_delay+0x58>)
   94802:	88fb      	ldrh	r3, [r7, #6]
   94804:	490a      	ldr	r1, [pc, #40]	; (94830 <dd_spi_set_transfer_delay+0x58>)
   94806:	88fa      	ldrh	r2, [r7, #6]
   94808:	320c      	adds	r2, #12
   9480a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   9480e:	797a      	ldrb	r2, [r7, #5]
   94810:	0412      	lsls	r2, r2, #16
   94812:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   94816:	7938      	ldrb	r0, [r7, #4]
   94818:	0600      	lsls	r0, r0, #24
   9481a:	4302      	orrs	r2, r0
   9481c:	430a      	orrs	r2, r1
   9481e:	330c      	adds	r3, #12
   94820:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   94824:	bf00      	nop
   94826:	3708      	adds	r7, #8
   94828:	46bd      	mov	sp, r7
   9482a:	bc90      	pop	{r4, r7}
   9482c:	4770      	bx	lr
   9482e:	bf00      	nop
   94830:	40008000 	.word	0x40008000

00094834 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   94834:	b480      	push	{r7}
   94836:	b083      	sub	sp, #12
   94838:	af00      	add	r7, sp, #0
   9483a:	4603      	mov	r3, r0
   9483c:	6039      	str	r1, [r7, #0]
   9483e:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   94840:	490e      	ldr	r1, [pc, #56]	; (9487c <dd_spi_set_bits_per_transfer+0x48>)
   94842:	88fb      	ldrh	r3, [r7, #6]
   94844:	480d      	ldr	r0, [pc, #52]	; (9487c <dd_spi_set_bits_per_transfer+0x48>)
   94846:	88fa      	ldrh	r2, [r7, #6]
   94848:	320c      	adds	r2, #12
   9484a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9484e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   94852:	330c      	adds	r3, #12
   94854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   94858:	4808      	ldr	r0, [pc, #32]	; (9487c <dd_spi_set_bits_per_transfer+0x48>)
   9485a:	88fb      	ldrh	r3, [r7, #6]
   9485c:	4907      	ldr	r1, [pc, #28]	; (9487c <dd_spi_set_bits_per_transfer+0x48>)
   9485e:	88fa      	ldrh	r2, [r7, #6]
   94860:	320c      	adds	r2, #12
   94862:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   94866:	683a      	ldr	r2, [r7, #0]
   94868:	430a      	orrs	r2, r1
   9486a:	330c      	adds	r3, #12
   9486c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   94870:	bf00      	nop
   94872:	370c      	adds	r7, #12
   94874:	46bd      	mov	sp, r7
   94876:	bc80      	pop	{r7}
   94878:	4770      	bx	lr
   9487a:	bf00      	nop
   9487c:	40008000 	.word	0x40008000

00094880 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   94880:	b480      	push	{r7}
   94882:	b083      	sub	sp, #12
   94884:	af00      	add	r7, sp, #0
   94886:	4603      	mov	r3, r0
   94888:	6039      	str	r1, [r7, #0]
   9488a:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   9488c:	683b      	ldr	r3, [r7, #0]
   9488e:	2b00      	cmp	r3, #0
   94890:	d00c      	beq.n	948ac <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   94892:	490f      	ldr	r1, [pc, #60]	; (948d0 <dd_spi_set_clock_polarity+0x50>)
   94894:	88fb      	ldrh	r3, [r7, #6]
   94896:	480e      	ldr	r0, [pc, #56]	; (948d0 <dd_spi_set_clock_polarity+0x50>)
   94898:	88fa      	ldrh	r2, [r7, #6]
   9489a:	320c      	adds	r2, #12
   9489c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   948a0:	f042 0201 	orr.w	r2, r2, #1
   948a4:	330c      	adds	r3, #12
   948a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   948aa:	e00b      	b.n	948c4 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   948ac:	4908      	ldr	r1, [pc, #32]	; (948d0 <dd_spi_set_clock_polarity+0x50>)
   948ae:	88fb      	ldrh	r3, [r7, #6]
   948b0:	4807      	ldr	r0, [pc, #28]	; (948d0 <dd_spi_set_clock_polarity+0x50>)
   948b2:	88fa      	ldrh	r2, [r7, #6]
   948b4:	320c      	adds	r2, #12
   948b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   948ba:	f022 0201 	bic.w	r2, r2, #1
   948be:	330c      	adds	r3, #12
   948c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   948c4:	bf00      	nop
   948c6:	370c      	adds	r7, #12
   948c8:	46bd      	mov	sp, r7
   948ca:	bc80      	pop	{r7}
   948cc:	4770      	bx	lr
   948ce:	bf00      	nop
   948d0:	40008000 	.word	0x40008000

000948d4 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   948d4:	b480      	push	{r7}
   948d6:	b083      	sub	sp, #12
   948d8:	af00      	add	r7, sp, #0
   948da:	4603      	mov	r3, r0
   948dc:	6039      	str	r1, [r7, #0]
   948de:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   948e0:	683b      	ldr	r3, [r7, #0]
   948e2:	2b00      	cmp	r3, #0
   948e4:	d00c      	beq.n	94900 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   948e6:	490f      	ldr	r1, [pc, #60]	; (94924 <dd_spi_set_clock_phase+0x50>)
   948e8:	88fb      	ldrh	r3, [r7, #6]
   948ea:	480e      	ldr	r0, [pc, #56]	; (94924 <dd_spi_set_clock_phase+0x50>)
   948ec:	88fa      	ldrh	r2, [r7, #6]
   948ee:	320c      	adds	r2, #12
   948f0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   948f4:	f042 0202 	orr.w	r2, r2, #2
   948f8:	330c      	adds	r3, #12
   948fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   948fe:	e00b      	b.n	94918 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   94900:	4908      	ldr	r1, [pc, #32]	; (94924 <dd_spi_set_clock_phase+0x50>)
   94902:	88fb      	ldrh	r3, [r7, #6]
   94904:	4807      	ldr	r0, [pc, #28]	; (94924 <dd_spi_set_clock_phase+0x50>)
   94906:	88fa      	ldrh	r2, [r7, #6]
   94908:	320c      	adds	r2, #12
   9490a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9490e:	f022 0202 	bic.w	r2, r2, #2
   94912:	330c      	adds	r3, #12
   94914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   94918:	bf00      	nop
   9491a:	370c      	adds	r7, #12
   9491c:	46bd      	mov	sp, r7
   9491e:	bc80      	pop	{r7}
   94920:	4770      	bx	lr
   94922:	bf00      	nop
   94924:	40008000 	.word	0x40008000

00094928 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   94928:	b480      	push	{r7}
   9492a:	b083      	sub	sp, #12
   9492c:	af00      	add	r7, sp, #0
   9492e:	4603      	mov	r3, r0
   94930:	460a      	mov	r2, r1
   94932:	80fb      	strh	r3, [r7, #6]
   94934:	4613      	mov	r3, r2
   94936:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   94938:	797b      	ldrb	r3, [r7, #5]
   9493a:	2b00      	cmp	r3, #0
   9493c:	d102      	bne.n	94944 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   9493e:	f04f 33ff 	mov.w	r3, #4294967295
   94942:	e01a      	b.n	9497a <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   94944:	490f      	ldr	r1, [pc, #60]	; (94984 <dd_spi_set_baudrate_div+0x5c>)
   94946:	88fb      	ldrh	r3, [r7, #6]
   94948:	480e      	ldr	r0, [pc, #56]	; (94984 <dd_spi_set_baudrate_div+0x5c>)
   9494a:	88fa      	ldrh	r2, [r7, #6]
   9494c:	320c      	adds	r2, #12
   9494e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   94952:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   94956:	330c      	adds	r3, #12
   94958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   9495c:	4809      	ldr	r0, [pc, #36]	; (94984 <dd_spi_set_baudrate_div+0x5c>)
   9495e:	88fb      	ldrh	r3, [r7, #6]
   94960:	4908      	ldr	r1, [pc, #32]	; (94984 <dd_spi_set_baudrate_div+0x5c>)
   94962:	88fa      	ldrh	r2, [r7, #6]
   94964:	320c      	adds	r2, #12
   94966:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   9496a:	797a      	ldrb	r2, [r7, #5]
   9496c:	0212      	lsls	r2, r2, #8
   9496e:	b292      	uxth	r2, r2
   94970:	430a      	orrs	r2, r1
   94972:	330c      	adds	r3, #12
   94974:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   94978:	2300      	movs	r3, #0
}
   9497a:	4618      	mov	r0, r3
   9497c:	370c      	adds	r7, #12
   9497e:	46bd      	mov	sp, r7
   94980:	bc80      	pop	{r7}
   94982:	4770      	bx	lr
   94984:	40008000 	.word	0x40008000

00094988 <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   94988:	b580      	push	{r7, lr}
   9498a:	b086      	sub	sp, #24
   9498c:	af00      	add	r7, sp, #0
   9498e:	6078      	str	r0, [r7, #4]
   94990:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   94992:	687b      	ldr	r3, [r7, #4]
   94994:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   94996:	2300      	movs	r3, #0
   94998:	617b      	str	r3, [r7, #20]
   9499a:	e029      	b.n	949f0 <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   9499c:	697b      	ldr	r3, [r7, #20]
   9499e:	005b      	lsls	r3, r3, #1
   949a0:	68fa      	ldr	r2, [r7, #12]
   949a2:	4413      	add	r3, r2
   949a4:	881b      	ldrh	r3, [r3, #0]
   949a6:	4618      	mov	r0, r3
   949a8:	4b15      	ldr	r3, [pc, #84]	; (94a00 <DD_SPI_SET_POT+0x78>)
   949aa:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   949ac:	2300      	movs	r3, #0
   949ae:	613b      	str	r3, [r7, #16]
   949b0:	e002      	b.n	949b8 <DD_SPI_SET_POT+0x30>
   949b2:	693b      	ldr	r3, [r7, #16]
   949b4:	3301      	adds	r3, #1
   949b6:	613b      	str	r3, [r7, #16]
   949b8:	693b      	ldr	r3, [r7, #16]
   949ba:	f242 720f 	movw	r2, #9999	; 0x270f
   949be:	4293      	cmp	r3, r2
   949c0:	d9f7      	bls.n	949b2 <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   949c2:	bf00      	nop
   949c4:	4b0f      	ldr	r3, [pc, #60]	; (94a04 <DD_SPI_SET_POT+0x7c>)
   949c6:	691b      	ldr	r3, [r3, #16]
   949c8:	f003 0301 	and.w	r3, r3, #1
   949cc:	2b00      	cmp	r3, #0
   949ce:	d0f9      	beq.n	949c4 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   949d0:	f107 030b 	add.w	r3, r7, #11
   949d4:	4619      	mov	r1, r3
   949d6:	480c      	ldr	r0, [pc, #48]	; (94a08 <DD_SPI_SET_POT+0x80>)
   949d8:	4b0c      	ldr	r3, [pc, #48]	; (94a0c <DD_SPI_SET_POT+0x84>)
   949da:	4798      	blx	r3
		p_buffer[i] = data;
   949dc:	697b      	ldr	r3, [r7, #20]
   949de:	005b      	lsls	r3, r3, #1
   949e0:	68fa      	ldr	r2, [r7, #12]
   949e2:	4413      	add	r3, r2
   949e4:	4a08      	ldr	r2, [pc, #32]	; (94a08 <DD_SPI_SET_POT+0x80>)
   949e6:	8812      	ldrh	r2, [r2, #0]
   949e8:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   949ea:	697b      	ldr	r3, [r7, #20]
   949ec:	3301      	adds	r3, #1
   949ee:	617b      	str	r3, [r7, #20]
   949f0:	697a      	ldr	r2, [r7, #20]
   949f2:	683b      	ldr	r3, [r7, #0]
   949f4:	429a      	cmp	r2, r3
   949f6:	d3d1      	bcc.n	9499c <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   949f8:	bf00      	nop
   949fa:	3718      	adds	r7, #24
   949fc:	46bd      	mov	sp, r7
   949fe:	bd80      	pop	{r7, pc}
   94a00:	00094a81 	.word	0x00094a81
   94a04:	40008000 	.word	0x40008000
   94a08:	200726b2 	.word	0x200726b2
   94a0c:	00094a11 	.word	0x00094a11

00094a10 <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   94a10:	b480      	push	{r7}
   94a12:	b085      	sub	sp, #20
   94a14:	af00      	add	r7, sp, #0
   94a16:	6078      	str	r0, [r7, #4]
   94a18:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   94a1a:	f643 2398 	movw	r3, #15000	; 0x3a98
   94a1e:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   94a20:	e006      	b.n	94a30 <dd_spi_read+0x20>
		if (!timeout--) {
   94a22:	68fb      	ldr	r3, [r7, #12]
   94a24:	1e5a      	subs	r2, r3, #1
   94a26:	60fa      	str	r2, [r7, #12]
   94a28:	2b00      	cmp	r3, #0
   94a2a:	d101      	bne.n	94a30 <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   94a2c:	2301      	movs	r3, #1
   94a2e:	e01e      	b.n	94a6e <dd_spi_read+0x5e>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   94a30:	4b11      	ldr	r3, [pc, #68]	; (94a78 <dd_spi_read+0x68>)
   94a32:	691b      	ldr	r3, [r3, #16]
   94a34:	f003 0301 	and.w	r3, r3, #1
   94a38:	2b00      	cmp	r3, #0
   94a3a:	d0f2      	beq.n	94a22 <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   94a3c:	4b0e      	ldr	r3, [pc, #56]	; (94a78 <dd_spi_read+0x68>)
   94a3e:	689b      	ldr	r3, [r3, #8]
   94a40:	4a0e      	ldr	r2, [pc, #56]	; (94a7c <dd_spi_read+0x6c>)
   94a42:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   94a44:	4b0c      	ldr	r3, [pc, #48]	; (94a78 <dd_spi_read+0x68>)
   94a46:	685b      	ldr	r3, [r3, #4]
   94a48:	f003 0302 	and.w	r3, r3, #2
   94a4c:	2b00      	cmp	r3, #0
   94a4e:	d008      	beq.n	94a62 <dd_spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   94a50:	4b0a      	ldr	r3, [pc, #40]	; (94a7c <dd_spi_read+0x6c>)
   94a52:	681b      	ldr	r3, [r3, #0]
   94a54:	0c1b      	lsrs	r3, r3, #16
   94a56:	b2db      	uxtb	r3, r3
   94a58:	f003 030f 	and.w	r3, r3, #15
   94a5c:	b2da      	uxtb	r2, r3
   94a5e:	683b      	ldr	r3, [r7, #0]
   94a60:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   94a62:	4b06      	ldr	r3, [pc, #24]	; (94a7c <dd_spi_read+0x6c>)
   94a64:	681b      	ldr	r3, [r3, #0]
   94a66:	b29a      	uxth	r2, r3
   94a68:	687b      	ldr	r3, [r7, #4]
   94a6a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   94a6c:	2300      	movs	r3, #0
}
   94a6e:	4618      	mov	r0, r3
   94a70:	3714      	adds	r7, #20
   94a72:	46bd      	mov	sp, r7
   94a74:	bc80      	pop	{r7}
   94a76:	4770      	bx	lr
   94a78:	40008000 	.word	0x40008000
   94a7c:	200726b4 	.word	0x200726b4

00094a80 <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   94a80:	b480      	push	{r7}
   94a82:	b085      	sub	sp, #20
   94a84:	af00      	add	r7, sp, #0
   94a86:	4603      	mov	r3, r0
   94a88:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   94a8a:	f643 2398 	movw	r3, #15000	; 0x3a98
   94a8e:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   94a90:	e006      	b.n	94aa0 <dd_spi_write+0x20>
		if (!timeout--) {
   94a92:	68fb      	ldr	r3, [r7, #12]
   94a94:	1e5a      	subs	r2, r3, #1
   94a96:	60fa      	str	r2, [r7, #12]
   94a98:	2b00      	cmp	r3, #0
   94a9a:	d101      	bne.n	94aa0 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   94a9c:	2301      	movs	r3, #1
   94a9e:	e00b      	b.n	94ab8 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   94aa0:	4b08      	ldr	r3, [pc, #32]	; (94ac4 <dd_spi_write+0x44>)
   94aa2:	691b      	ldr	r3, [r3, #16]
   94aa4:	f003 0302 	and.w	r3, r3, #2
   94aa8:	2b00      	cmp	r3, #0
   94aaa:	d0f2      	beq.n	94a92 <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   94aac:	88fb      	ldrh	r3, [r7, #6]
   94aae:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   94ab0:	4a04      	ldr	r2, [pc, #16]	; (94ac4 <dd_spi_write+0x44>)
   94ab2:	68bb      	ldr	r3, [r7, #8]
   94ab4:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   94ab6:	2300      	movs	r3, #0
}
   94ab8:	4618      	mov	r0, r3
   94aba:	3714      	adds	r7, #20
   94abc:	46bd      	mov	sp, r7
   94abe:	bc80      	pop	{r7}
   94ac0:	4770      	bx	lr
   94ac2:	bf00      	nop
   94ac4:	40008000 	.word	0x40008000

00094ac8 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   94ac8:	b580      	push	{r7, lr}
   94aca:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   94acc:	4b38      	ldr	r3, [pc, #224]	; (94bb0 <DD_INIT_SPI+0xe8>)
   94ace:	4a39      	ldr	r2, [pc, #228]	; (94bb4 <DD_INIT_SPI+0xec>)
   94ad0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   94ad4:	4b36      	ldr	r3, [pc, #216]	; (94bb0 <DD_INIT_SPI+0xe8>)
   94ad6:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   94ada:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   94adc:	4b36      	ldr	r3, [pc, #216]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94ade:	4a37      	ldr	r2, [pc, #220]	; (94bbc <DD_INIT_SPI+0xf4>)
   94ae0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   94ae4:	4b36      	ldr	r3, [pc, #216]	; (94bc0 <DD_INIT_SPI+0xf8>)
   94ae6:	4a37      	ldr	r2, [pc, #220]	; (94bc4 <DD_INIT_SPI+0xfc>)
   94ae8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   94aec:	4832      	ldr	r0, [pc, #200]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94aee:	4b36      	ldr	r3, [pc, #216]	; (94bc8 <DD_INIT_SPI+0x100>)
   94af0:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   94af2:	4b31      	ldr	r3, [pc, #196]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94af4:	2202      	movs	r2, #2
   94af6:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   94af8:	4b2f      	ldr	r3, [pc, #188]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94afa:	2280      	movs	r2, #128	; 0x80
   94afc:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   94afe:	4b2e      	ldr	r3, [pc, #184]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   94b04:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   94b06:	4a2c      	ldr	r2, [pc, #176]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b08:	4b2b      	ldr	r3, [pc, #172]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b0a:	685b      	ldr	r3, [r3, #4]
   94b0c:	f043 0301 	orr.w	r3, r3, #1
   94b10:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   94b12:	4a29      	ldr	r2, [pc, #164]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b14:	4b28      	ldr	r3, [pc, #160]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b16:	685b      	ldr	r3, [r3, #4]
   94b18:	f043 0310 	orr.w	r3, r3, #16
   94b1c:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   94b1e:	4a26      	ldr	r2, [pc, #152]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b20:	4b25      	ldr	r3, [pc, #148]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b22:	685b      	ldr	r3, [r3, #4]
   94b24:	f023 0302 	bic.w	r3, r3, #2
   94b28:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   94b2a:	4a23      	ldr	r2, [pc, #140]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b2c:	4b22      	ldr	r3, [pc, #136]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b2e:	685b      	ldr	r3, [r3, #4]
   94b30:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   94b34:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   94b36:	4a20      	ldr	r2, [pc, #128]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b38:	4b1f      	ldr	r3, [pc, #124]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b3a:	685b      	ldr	r3, [r3, #4]
   94b3c:	f023 0304 	bic.w	r3, r3, #4
   94b40:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   94b42:	491d      	ldr	r1, [pc, #116]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b44:	4b1c      	ldr	r3, [pc, #112]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94b46:	685a      	ldr	r2, [r3, #4]
   94b48:	4b20      	ldr	r3, [pc, #128]	; (94bcc <DD_INIT_SPI+0x104>)
   94b4a:	781b      	ldrb	r3, [r3, #0]
   94b4c:	4618      	mov	r0, r3
   94b4e:	2301      	movs	r3, #1
   94b50:	4083      	lsls	r3, r0
   94b52:	43db      	mvns	r3, r3
   94b54:	041b      	lsls	r3, r3, #16
   94b56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   94b5a:	4313      	orrs	r3, r2
   94b5c:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   94b5e:	4b1b      	ldr	r3, [pc, #108]	; (94bcc <DD_INIT_SPI+0x104>)
   94b60:	781b      	ldrb	r3, [r3, #0]
   94b62:	b29b      	uxth	r3, r3
   94b64:	2100      	movs	r1, #0
   94b66:	4618      	mov	r0, r3
   94b68:	4b19      	ldr	r3, [pc, #100]	; (94bd0 <DD_INIT_SPI+0x108>)
   94b6a:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   94b6c:	4b17      	ldr	r3, [pc, #92]	; (94bcc <DD_INIT_SPI+0x104>)
   94b6e:	781b      	ldrb	r3, [r3, #0]
   94b70:	b29b      	uxth	r3, r3
   94b72:	2100      	movs	r1, #0
   94b74:	4618      	mov	r0, r3
   94b76:	4b17      	ldr	r3, [pc, #92]	; (94bd4 <DD_INIT_SPI+0x10c>)
   94b78:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   94b7a:	4b14      	ldr	r3, [pc, #80]	; (94bcc <DD_INIT_SPI+0x104>)
   94b7c:	781b      	ldrb	r3, [r3, #0]
   94b7e:	b29b      	uxth	r3, r3
   94b80:	2180      	movs	r1, #128	; 0x80
   94b82:	4618      	mov	r0, r3
   94b84:	4b14      	ldr	r3, [pc, #80]	; (94bd8 <DD_INIT_SPI+0x110>)
   94b86:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   94b88:	4b10      	ldr	r3, [pc, #64]	; (94bcc <DD_INIT_SPI+0x104>)
   94b8a:	781b      	ldrb	r3, [r3, #0]
   94b8c:	b29b      	uxth	r3, r3
   94b8e:	21ff      	movs	r1, #255	; 0xff
   94b90:	4618      	mov	r0, r3
   94b92:	4b12      	ldr	r3, [pc, #72]	; (94bdc <DD_INIT_SPI+0x114>)
   94b94:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   94b96:	4b0d      	ldr	r3, [pc, #52]	; (94bcc <DD_INIT_SPI+0x104>)
   94b98:	781b      	ldrb	r3, [r3, #0]
   94b9a:	b29b      	uxth	r3, r3
   94b9c:	2210      	movs	r2, #16
   94b9e:	2180      	movs	r1, #128	; 0x80
   94ba0:	4618      	mov	r0, r3
   94ba2:	4b0f      	ldr	r3, [pc, #60]	; (94be0 <DD_INIT_SPI+0x118>)
   94ba4:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   94ba6:	4b04      	ldr	r3, [pc, #16]	; (94bb8 <DD_INIT_SPI+0xf0>)
   94ba8:	2201      	movs	r2, #1
   94baa:	601a      	str	r2, [r3, #0]
}
   94bac:	bf00      	nop
   94bae:	bd80      	pop	{r7, pc}
   94bb0:	400e0e00 	.word	0x400e0e00
   94bb4:	50494f00 	.word	0x50494f00
   94bb8:	40008000 	.word	0x40008000
   94bbc:	53504900 	.word	0x53504900
   94bc0:	400e0600 	.word	0x400e0600
   94bc4:	504d4300 	.word	0x504d4300
   94bc8:	000805dd 	.word	0x000805dd
   94bcc:	200726b0 	.word	0x200726b0
   94bd0:	00094881 	.word	0x00094881
   94bd4:	000948d5 	.word	0x000948d5
   94bd8:	00094835 	.word	0x00094835
   94bdc:	00094929 	.word	0x00094929
   94be0:	000947d9 	.word	0x000947d9

00094be4 <DD_ENABLE_BYPASS>:

static bool ByPass = 0 , LoopBack = 0;


uint8_t DD_ENABLE_BYPASS()
{
   94be4:	b580      	push	{r7, lr}
   94be6:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   94be8:	200f      	movs	r0, #15
   94bea:	4b07      	ldr	r3, [pc, #28]	; (94c08 <DD_ENABLE_BYPASS+0x24>)
   94bec:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   94bee:	200d      	movs	r0, #13
   94bf0:	4b06      	ldr	r3, [pc, #24]	; (94c0c <DD_ENABLE_BYPASS+0x28>)
   94bf2:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   94bf4:	200e      	movs	r0, #14
   94bf6:	4b05      	ldr	r3, [pc, #20]	; (94c0c <DD_ENABLE_BYPASS+0x28>)
   94bf8:	4798      	blx	r3
				ByPass = true;
   94bfa:	4b05      	ldr	r3, [pc, #20]	; (94c10 <DD_ENABLE_BYPASS+0x2c>)
   94bfc:	2201      	movs	r2, #1
   94bfe:	701a      	strb	r2, [r3, #0]
	
	return 0;
   94c00:	2300      	movs	r3, #0
}
   94c02:	4618      	mov	r0, r3
   94c04:	bd80      	pop	{r7, pc}
   94c06:	bf00      	nop
   94c08:	000951ad 	.word	0x000951ad
   94c0c:	0009526d 	.word	0x0009526d
   94c10:	200726bc 	.word	0x200726bc

00094c14 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   94c14:	b580      	push	{r7, lr}
   94c16:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   94c18:	200f      	movs	r0, #15
   94c1a:	4b07      	ldr	r3, [pc, #28]	; (94c38 <DD_DISABLE_BYPASS+0x24>)
   94c1c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   94c1e:	200d      	movs	r0, #13
   94c20:	4b06      	ldr	r3, [pc, #24]	; (94c3c <DD_DISABLE_BYPASS+0x28>)
   94c22:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   94c24:	200e      	movs	r0, #14
   94c26:	4b05      	ldr	r3, [pc, #20]	; (94c3c <DD_DISABLE_BYPASS+0x28>)
   94c28:	4798      	blx	r3
				ByPass = false;
   94c2a:	4b05      	ldr	r3, [pc, #20]	; (94c40 <DD_DISABLE_BYPASS+0x2c>)
   94c2c:	2200      	movs	r2, #0
   94c2e:	701a      	strb	r2, [r3, #0]
	
	return 0;
   94c30:	2300      	movs	r3, #0
}
   94c32:	4618      	mov	r0, r3
   94c34:	bd80      	pop	{r7, pc}
   94c36:	bf00      	nop
   94c38:	0009526d 	.word	0x0009526d
   94c3c:	000951ad 	.word	0x000951ad
   94c40:	200726bc 	.word	0x200726bc

00094c44 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   94c44:	b580      	push	{r7, lr}
   94c46:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   94c48:	4b05      	ldr	r3, [pc, #20]	; (94c60 <DD_ENABLE_LOOPBACK+0x1c>)
   94c4a:	2201      	movs	r2, #1
   94c4c:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   94c4e:	2010      	movs	r0, #16
   94c50:	4b04      	ldr	r3, [pc, #16]	; (94c64 <DD_ENABLE_LOOPBACK+0x20>)
   94c52:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   94c54:	2012      	movs	r0, #18
   94c56:	4b04      	ldr	r3, [pc, #16]	; (94c68 <DD_ENABLE_LOOPBACK+0x24>)
   94c58:	4798      	blx	r3
				
	return 0;
   94c5a:	2300      	movs	r3, #0
}
   94c5c:	4618      	mov	r0, r3
   94c5e:	bd80      	pop	{r7, pc}
   94c60:	200726bd 	.word	0x200726bd
   94c64:	000951ad 	.word	0x000951ad
   94c68:	0009526d 	.word	0x0009526d

00094c6c <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   94c6c:	b580      	push	{r7, lr}
   94c6e:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   94c70:	4b05      	ldr	r3, [pc, #20]	; (94c88 <DD_DISABLE_LOOPBACK+0x1c>)
   94c72:	2200      	movs	r2, #0
   94c74:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   94c76:	2010      	movs	r0, #16
   94c78:	4b04      	ldr	r3, [pc, #16]	; (94c8c <DD_DISABLE_LOOPBACK+0x20>)
   94c7a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   94c7c:	2012      	movs	r0, #18
   94c7e:	4b04      	ldr	r3, [pc, #16]	; (94c90 <DD_DISABLE_LOOPBACK+0x24>)
   94c80:	4798      	blx	r3
	return 0;
   94c82:	2300      	movs	r3, #0
}
   94c84:	4618      	mov	r0, r3
   94c86:	bd80      	pop	{r7, pc}
   94c88:	200726bd 	.word	0x200726bd
   94c8c:	0009526d 	.word	0x0009526d
   94c90:	000951ad 	.word	0x000951ad

00094c94 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   94c94:	b580      	push	{r7, lr}
   94c96:	b084      	sub	sp, #16
   94c98:	af00      	add	r7, sp, #0
   94c9a:	4603      	mov	r3, r0
   94c9c:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   94c9e:	79fb      	ldrb	r3, [r7, #7]
   94ca0:	3b01      	subs	r3, #1
   94ca2:	2b04      	cmp	r3, #4
   94ca4:	d858      	bhi.n	94d58 <DD_SET_PUMP+0xc4>
   94ca6:	a201      	add	r2, pc, #4	; (adr r2, 94cac <DD_SET_PUMP+0x18>)
   94ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94cac:	00094cc1 	.word	0x00094cc1
   94cb0:	00094ce5 	.word	0x00094ce5
   94cb4:	00094d59 	.word	0x00094d59
   94cb8:	00094d09 	.word	0x00094d09
   94cbc:	00094d3f 	.word	0x00094d3f
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   94cc0:	2314      	movs	r3, #20
   94cc2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94cc8:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   94cca:	4b26      	ldr	r3, [pc, #152]	; (94d64 <DD_SET_PUMP+0xd0>)
   94ccc:	2204      	movs	r2, #4
   94cce:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   94cd0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   94cd4:	2014      	movs	r0, #20
   94cd6:	4b24      	ldr	r3, [pc, #144]	; (94d68 <DD_SET_PUMP+0xd4>)
   94cd8:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   94cda:	68f9      	ldr	r1, [r7, #12]
   94cdc:	68b8      	ldr	r0, [r7, #8]
   94cde:	4b23      	ldr	r3, [pc, #140]	; (94d6c <DD_SET_PUMP+0xd8>)
   94ce0:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   94ce2:	e039      	b.n	94d58 <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   94ce4:	2315      	movs	r3, #21
   94ce6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94cec:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   94cee:	4b1d      	ldr	r3, [pc, #116]	; (94d64 <DD_SET_PUMP+0xd0>)
   94cf0:	2201      	movs	r2, #1
   94cf2:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   94cf4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   94cf8:	2015      	movs	r0, #21
   94cfa:	4b1b      	ldr	r3, [pc, #108]	; (94d68 <DD_SET_PUMP+0xd4>)
   94cfc:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   94cfe:	68f9      	ldr	r1, [r7, #12]
   94d00:	68b8      	ldr	r0, [r7, #8]
   94d02:	4b1a      	ldr	r3, [pc, #104]	; (94d6c <DD_SET_PUMP+0xd8>)
   94d04:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   94d06:	e027      	b.n	94d58 <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   94d08:	2316      	movs	r3, #22
   94d0a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   94d0c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94d10:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   94d12:	68f9      	ldr	r1, [r7, #12]
   94d14:	68b8      	ldr	r0, [r7, #8]
   94d16:	4b16      	ldr	r3, [pc, #88]	; (94d70 <DD_SET_PUMP+0xdc>)
   94d18:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   94d1a:	4b12      	ldr	r3, [pc, #72]	; (94d64 <DD_SET_PUMP+0xd0>)
   94d1c:	2220      	movs	r2, #32
   94d1e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   94d20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   94d24:	2056      	movs	r0, #86	; 0x56
   94d26:	4b10      	ldr	r3, [pc, #64]	; (94d68 <DD_SET_PUMP+0xd4>)
   94d28:	4798      	blx	r3
		
		p_io = 15;
   94d2a:	230f      	movs	r3, #15
   94d2c:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94d2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94d32:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   94d34:	68f9      	ldr	r1, [r7, #12]
   94d36:	68b8      	ldr	r0, [r7, #8]
   94d38:	4b0d      	ldr	r3, [pc, #52]	; (94d70 <DD_SET_PUMP+0xdc>)
   94d3a:	4798      	blx	r3
		break;
   94d3c:	e00c      	b.n	94d58 <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   94d3e:	4b09      	ldr	r3, [pc, #36]	; (94d64 <DD_SET_PUMP+0xd0>)
   94d40:	2210      	movs	r2, #16
   94d42:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   94d44:	2302      	movs	r3, #2
   94d46:	60fb      	str	r3, [r7, #12]
		peri = PD;
   94d48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94d4c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   94d4e:	68f9      	ldr	r1, [r7, #12]
   94d50:	68b8      	ldr	r0, [r7, #8]
   94d52:	4b07      	ldr	r3, [pc, #28]	; (94d70 <DD_SET_PUMP+0xdc>)
   94d54:	4798      	blx	r3

		break;
   94d56:	bf00      	nop
				
	}
	
	
	
	return 0;
   94d58:	2300      	movs	r3, #0
}
   94d5a:	4618      	mov	r0, r3
   94d5c:	3710      	adds	r7, #16
   94d5e:	46bd      	mov	sp, r7
   94d60:	bd80      	pop	{r7, pc}
   94d62:	bf00      	nop
   94d64:	40094000 	.word	0x40094000
   94d68:	00097445 	.word	0x00097445
   94d6c:	00093c55 	.word	0x00093c55
   94d70:	00093d5d 	.word	0x00093d5d

00094d74 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   94d74:	b580      	push	{r7, lr}
   94d76:	b082      	sub	sp, #8
   94d78:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   94d7a:	231c      	movs	r3, #28
   94d7c:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   94d7e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94d82:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   94d84:	6879      	ldr	r1, [r7, #4]
   94d86:	6838      	ldr	r0, [r7, #0]
   94d88:	4b0d      	ldr	r3, [pc, #52]	; (94dc0 <DD_SET_HEATER+0x4c>)
   94d8a:	4798      	blx	r3
	cl_wait(100);
   94d8c:	2064      	movs	r0, #100	; 0x64
   94d8e:	4b0d      	ldr	r3, [pc, #52]	; (94dc4 <DD_SET_HEATER+0x50>)
   94d90:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   94d92:	4b0d      	ldr	r3, [pc, #52]	; (94dc8 <DD_SET_HEATER+0x54>)
   94d94:	2202      	movs	r2, #2
   94d96:	605a      	str	r2, [r3, #4]
	p_io = 12;
   94d98:	230c      	movs	r3, #12
   94d9a:	607b      	str	r3, [r7, #4]
	peri = PA;
   94d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94da0:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   94da2:	4a0a      	ldr	r2, [pc, #40]	; (94dcc <DD_SET_HEATER+0x58>)
   94da4:	2101      	movs	r1, #1
   94da6:	687b      	ldr	r3, [r7, #4]
   94da8:	fa01 f303 	lsl.w	r3, r1, r3
   94dac:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   94dae:	6879      	ldr	r1, [r7, #4]
   94db0:	6838      	ldr	r0, [r7, #0]
   94db2:	4b07      	ldr	r3, [pc, #28]	; (94dd0 <DD_SET_HEATER+0x5c>)
   94db4:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   94db6:	2300      	movs	r3, #0
}
   94db8:	4618      	mov	r0, r3
   94dba:	3708      	adds	r7, #8
   94dbc:	46bd      	mov	sp, r7
   94dbe:	bd80      	pop	{r7, pc}
   94dc0:	00093cd9 	.word	0x00093cd9
   94dc4:	00091b9d 	.word	0x00091b9d
   94dc8:	40094000 	.word	0x40094000
   94dcc:	400e0e00 	.word	0x400e0e00
   94dd0:	00093c55 	.word	0x00093c55

00094dd4 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   94dd4:	b580      	push	{r7, lr}
   94dd6:	b082      	sub	sp, #8
   94dd8:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   94dda:	4b11      	ldr	r3, [pc, #68]	; (94e20 <DD_RESET_HEATER+0x4c>)
   94ddc:	2202      	movs	r2, #2
   94dde:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   94de0:	230c      	movs	r3, #12
   94de2:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   94de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94de8:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   94dea:	4a0e      	ldr	r2, [pc, #56]	; (94e24 <DD_RESET_HEATER+0x50>)
   94dec:	2101      	movs	r1, #1
   94dee:	687b      	ldr	r3, [r7, #4]
   94df0:	fa01 f303 	lsl.w	r3, r1, r3
   94df4:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   94df6:	6879      	ldr	r1, [r7, #4]
   94df8:	6838      	ldr	r0, [r7, #0]
   94dfa:	4b0b      	ldr	r3, [pc, #44]	; (94e28 <DD_RESET_HEATER+0x54>)
   94dfc:	4798      	blx	r3
	
	cl_wait(100);
   94dfe:	2064      	movs	r0, #100	; 0x64
   94e00:	4b0a      	ldr	r3, [pc, #40]	; (94e2c <DD_RESET_HEATER+0x58>)
   94e02:	4798      	blx	r3
	p_io = 28;
   94e04:	231c      	movs	r3, #28
   94e06:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   94e08:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94e0c:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   94e0e:	6879      	ldr	r1, [r7, #4]
   94e10:	6838      	ldr	r0, [r7, #0]
   94e12:	4b07      	ldr	r3, [pc, #28]	; (94e30 <DD_RESET_HEATER+0x5c>)
   94e14:	4798      	blx	r3
	return 0;
   94e16:	2300      	movs	r3, #0
}
   94e18:	4618      	mov	r0, r3
   94e1a:	3708      	adds	r7, #8
   94e1c:	46bd      	mov	sp, r7
   94e1e:	bd80      	pop	{r7, pc}
   94e20:	40094000 	.word	0x40094000
   94e24:	400e0e00 	.word	0x400e0e00
   94e28:	00093ba1 	.word	0x00093ba1
   94e2c:	00091b9d 	.word	0x00091b9d
   94e30:	00093d5d 	.word	0x00093d5d

00094e34 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   94e34:	b580      	push	{r7, lr}
   94e36:	b084      	sub	sp, #16
   94e38:	af00      	add	r7, sp, #0
   94e3a:	4603      	mov	r3, r0
   94e3c:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   94e3e:	79fb      	ldrb	r3, [r7, #7]
   94e40:	3b01      	subs	r3, #1
   94e42:	2b04      	cmp	r3, #4
   94e44:	d85b      	bhi.n	94efe <DD_RESET_PUMP+0xca>
   94e46:	a201      	add	r2, pc, #4	; (adr r2, 94e4c <DD_RESET_PUMP+0x18>)
   94e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94e4c:	00094e61 	.word	0x00094e61
   94e50:	00094e8d 	.word	0x00094e8d
   94e54:	00094eff 	.word	0x00094eff
   94e58:	00094eb9 	.word	0x00094eb9
   94e5c:	00094ee5 	.word	0x00094ee5
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   94e60:	2314      	movs	r3, #20
   94e62:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94e68:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   94e6a:	4b27      	ldr	r3, [pc, #156]	; (94f08 <DD_RESET_PUMP+0xd4>)
   94e6c:	2204      	movs	r2, #4
   94e6e:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   94e70:	4b26      	ldr	r3, [pc, #152]	; (94f0c <DD_RESET_PUMP+0xd8>)
   94e72:	4a27      	ldr	r2, [pc, #156]	; (94f10 <DD_RESET_PUMP+0xdc>)
   94e74:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   94e76:	4a25      	ldr	r2, [pc, #148]	; (94f0c <DD_RESET_PUMP+0xd8>)
   94e78:	2101      	movs	r1, #1
   94e7a:	68fb      	ldr	r3, [r7, #12]
   94e7c:	fa01 f303 	lsl.w	r3, r1, r3
   94e80:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   94e82:	68f9      	ldr	r1, [r7, #12]
   94e84:	68b8      	ldr	r0, [r7, #8]
   94e86:	4b23      	ldr	r3, [pc, #140]	; (94f14 <DD_RESET_PUMP+0xe0>)
   94e88:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   94e8a:	e038      	b.n	94efe <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   94e8c:	2315      	movs	r3, #21
   94e8e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94e90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94e94:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   94e96:	4b1c      	ldr	r3, [pc, #112]	; (94f08 <DD_RESET_PUMP+0xd4>)
   94e98:	2201      	movs	r2, #1
   94e9a:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   94e9c:	4b1b      	ldr	r3, [pc, #108]	; (94f0c <DD_RESET_PUMP+0xd8>)
   94e9e:	4a1c      	ldr	r2, [pc, #112]	; (94f10 <DD_RESET_PUMP+0xdc>)
   94ea0:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   94ea2:	4a1a      	ldr	r2, [pc, #104]	; (94f0c <DD_RESET_PUMP+0xd8>)
   94ea4:	2101      	movs	r1, #1
   94ea6:	68fb      	ldr	r3, [r7, #12]
   94ea8:	fa01 f303 	lsl.w	r3, r1, r3
   94eac:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   94eae:	68f9      	ldr	r1, [r7, #12]
   94eb0:	68b8      	ldr	r0, [r7, #8]
   94eb2:	4b18      	ldr	r3, [pc, #96]	; (94f14 <DD_RESET_PUMP+0xe0>)
   94eb4:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   94eb6:	e022      	b.n	94efe <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   94eb8:	2316      	movs	r3, #22
   94eba:	60fb      	str	r3, [r7, #12]
		peri = PC;
   94ebc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94ec0:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   94ec2:	68f9      	ldr	r1, [r7, #12]
   94ec4:	68b8      	ldr	r0, [r7, #8]
   94ec6:	4b13      	ldr	r3, [pc, #76]	; (94f14 <DD_RESET_PUMP+0xe0>)
   94ec8:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   94eca:	4b0f      	ldr	r3, [pc, #60]	; (94f08 <DD_RESET_PUMP+0xd4>)
   94ecc:	2220      	movs	r2, #32
   94ece:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   94ed0:	230f      	movs	r3, #15
   94ed2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   94ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94ed8:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   94eda:	68f9      	ldr	r1, [r7, #12]
   94edc:	68b8      	ldr	r0, [r7, #8]
   94ede:	4b0e      	ldr	r3, [pc, #56]	; (94f18 <DD_RESET_PUMP+0xe4>)
   94ee0:	4798      	blx	r3
		break;
   94ee2:	e00c      	b.n	94efe <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   94ee4:	2302      	movs	r3, #2
   94ee6:	60fb      	str	r3, [r7, #12]
		peri = PD;
   94ee8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94eec:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   94eee:	68f9      	ldr	r1, [r7, #12]
   94ef0:	68b8      	ldr	r0, [r7, #8]
   94ef2:	4b09      	ldr	r3, [pc, #36]	; (94f18 <DD_RESET_PUMP+0xe4>)
   94ef4:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   94ef6:	4b04      	ldr	r3, [pc, #16]	; (94f08 <DD_RESET_PUMP+0xd4>)
   94ef8:	2210      	movs	r2, #16
   94efa:	609a      	str	r2, [r3, #8]
		break;
   94efc:	bf00      	nop
	
	}
	
	
	
	return 0;
   94efe:	2300      	movs	r3, #0
	
}
   94f00:	4618      	mov	r0, r3
   94f02:	3710      	adds	r7, #16
   94f04:	46bd      	mov	sp, r7
   94f06:	bd80      	pop	{r7, pc}
   94f08:	40094000 	.word	0x40094000
   94f0c:	400e0e00 	.word	0x400e0e00
   94f10:	00391000 	.word	0x00391000
   94f14:	00093ba1 	.word	0x00093ba1
   94f18:	00093cd9 	.word	0x00093cd9

00094f1c <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   94f1c:	b580      	push	{r7, lr}
   94f1e:	b086      	sub	sp, #24
   94f20:	af00      	add	r7, sp, #0
   94f22:	4603      	mov	r3, r0
   94f24:	6039      	str	r1, [r7, #0]
   94f26:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   94f28:	79fb      	ldrb	r3, [r7, #7]
   94f2a:	3b01      	subs	r3, #1
   94f2c:	2b04      	cmp	r3, #4
   94f2e:	f200 8082 	bhi.w	95036 <DD_SET_SPEED+0x11a>
   94f32:	a201      	add	r2, pc, #4	; (adr r2, 94f38 <DD_SET_SPEED+0x1c>)
   94f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94f38:	00094f4d 	.word	0x00094f4d
   94f3c:	00094f61 	.word	0x00094f61
   94f40:	00094f75 	.word	0x00094f75
   94f44:	00094ff7 	.word	0x00094ff7
   94f48:	00095017 	.word	0x00095017
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   94f4c:	2302      	movs	r3, #2
   94f4e:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   94f50:	683b      	ldr	r3, [r7, #0]
   94f52:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   94f54:	7bfb      	ldrb	r3, [r7, #15]
   94f56:	6939      	ldr	r1, [r7, #16]
   94f58:	4618      	mov	r0, r3
   94f5a:	4b39      	ldr	r3, [pc, #228]	; (95040 <DD_SET_SPEED+0x124>)
   94f5c:	4798      	blx	r3
		break;
   94f5e:	e06a      	b.n	95036 <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   94f60:	2300      	movs	r3, #0
   94f62:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   94f64:	683b      	ldr	r3, [r7, #0]
   94f66:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   94f68:	7bfb      	ldrb	r3, [r7, #15]
   94f6a:	6939      	ldr	r1, [r7, #16]
   94f6c:	4618      	mov	r0, r3
   94f6e:	4b34      	ldr	r3, [pc, #208]	; (95040 <DD_SET_SPEED+0x124>)
   94f70:	4798      	blx	r3
		break;
   94f72:	e060      	b.n	95036 <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   94f74:	683b      	ldr	r3, [r7, #0]
   94f76:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   94f7a:	d01c      	beq.n	94fb6 <DD_SET_SPEED+0x9a>
   94f7c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   94f80:	d804      	bhi.n	94f8c <DD_SET_SPEED+0x70>
   94f82:	2bc8      	cmp	r3, #200	; 0xc8
   94f84:	d009      	beq.n	94f9a <DD_SET_SPEED+0x7e>
   94f86:	2bf0      	cmp	r3, #240	; 0xf0
   94f88:	d00e      	beq.n	94fa8 <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   94f8a:	e029      	b.n	94fe0 <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   94f8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   94f90:	d018      	beq.n	94fc4 <DD_SET_SPEED+0xa8>
   94f92:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   94f96:	d01c      	beq.n	94fd2 <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   94f98:	e022      	b.n	94fe0 <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   94f9a:	f44f 73b8 	mov.w	r3, #368	; 0x170
   94f9e:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   94fa0:	f240 3375 	movw	r3, #885	; 0x375
   94fa4:	617b      	str	r3, [r7, #20]
			break;
   94fa6:	e01b      	b.n	94fe0 <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   94fa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
   94fac:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   94fae:	f44f 7340 	mov.w	r3, #768	; 0x300
   94fb2:	617b      	str	r3, [r7, #20]
			break;
   94fb4:	e014      	b.n	94fe0 <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   94fb6:	f44f 7398 	mov.w	r3, #304	; 0x130
   94fba:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   94fbc:	f44f 7320 	mov.w	r3, #640	; 0x280
   94fc0:	617b      	str	r3, [r7, #20]
			break;
   94fc2:	e00d      	b.n	94fe0 <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   94fc4:	f44f 7390 	mov.w	r3, #288	; 0x120
   94fc8:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   94fca:	f44f 7314 	mov.w	r3, #592	; 0x250
   94fce:	617b      	str	r3, [r7, #20]
			break;
   94fd0:	e006      	b.n	94fe0 <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   94fd2:	f44f 7388 	mov.w	r3, #272	; 0x110
   94fd6:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   94fd8:	f44f 7304 	mov.w	r3, #528	; 0x210
   94fdc:	617b      	str	r3, [r7, #20]
			break;
   94fde:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   94fe0:	7bfb      	ldrb	r3, [r7, #15]
   94fe2:	6939      	ldr	r1, [r7, #16]
   94fe4:	4618      	mov	r0, r3
   94fe6:	4b16      	ldr	r3, [pc, #88]	; (95040 <DD_SET_SPEED+0x124>)
   94fe8:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   94fea:	7bfb      	ldrb	r3, [r7, #15]
   94fec:	6979      	ldr	r1, [r7, #20]
   94fee:	4618      	mov	r0, r3
   94ff0:	4b14      	ldr	r3, [pc, #80]	; (95044 <DD_SET_SPEED+0x128>)
   94ff2:	4798      	blx	r3
		break;
   94ff4:	e01f      	b.n	95036 <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   94ff6:	2305      	movs	r3, #5
   94ff8:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   94ffa:	683b      	ldr	r3, [r7, #0]
   94ffc:	085b      	lsrs	r3, r3, #1
   94ffe:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95000:	7bfb      	ldrb	r3, [r7, #15]
   95002:	6939      	ldr	r1, [r7, #16]
   95004:	4618      	mov	r0, r3
   95006:	4b0e      	ldr	r3, [pc, #56]	; (95040 <DD_SET_SPEED+0x124>)
   95008:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   9500a:	7bfb      	ldrb	r3, [r7, #15]
   9500c:	6839      	ldr	r1, [r7, #0]
   9500e:	4618      	mov	r0, r3
   95010:	4b0c      	ldr	r3, [pc, #48]	; (95044 <DD_SET_SPEED+0x128>)
   95012:	4798      	blx	r3
		break;
   95014:	e00f      	b.n	95036 <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   95016:	2304      	movs	r3, #4
   95018:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   9501a:	683b      	ldr	r3, [r7, #0]
   9501c:	085b      	lsrs	r3, r3, #1
   9501e:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95020:	7bfb      	ldrb	r3, [r7, #15]
   95022:	6939      	ldr	r1, [r7, #16]
   95024:	4618      	mov	r0, r3
   95026:	4b06      	ldr	r3, [pc, #24]	; (95040 <DD_SET_SPEED+0x124>)
   95028:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   9502a:	7bfb      	ldrb	r3, [r7, #15]
   9502c:	6839      	ldr	r1, [r7, #0]
   9502e:	4618      	mov	r0, r3
   95030:	4b04      	ldr	r3, [pc, #16]	; (95044 <DD_SET_SPEED+0x128>)
   95032:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   95034:	bf00      	nop
	}
	
	return 0;
   95036:	2300      	movs	r3, #0
}
   95038:	4618      	mov	r0, r3
   9503a:	3718      	adds	r7, #24
   9503c:	46bd      	mov	sp, r7
   9503e:	bd80      	pop	{r7, pc}
   95040:	00094781 	.word	0x00094781
   95044:	000947ad 	.word	0x000947ad

00095048 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   95048:	b580      	push	{r7, lr}
   9504a:	b084      	sub	sp, #16
   9504c:	af00      	add	r7, sp, #0
   9504e:	4603      	mov	r3, r0
   95050:	6039      	str	r1, [r7, #0]
   95052:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   95054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   95058:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   9505a:	683b      	ldr	r3, [r7, #0]
   9505c:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   9505e:	79fb      	ldrb	r3, [r7, #7]
   95060:	2b01      	cmp	r3, #1
   95062:	d002      	beq.n	9506a <DD_SET_PUMPFREQ+0x22>
   95064:	2b02      	cmp	r3, #2
   95066:	d008      	beq.n	9507a <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   95068:	e00f      	b.n	9508a <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   9506a:	2302      	movs	r3, #2
   9506c:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   9506e:	7afb      	ldrb	r3, [r7, #11]
   95070:	68f9      	ldr	r1, [r7, #12]
   95072:	4618      	mov	r0, r3
   95074:	4b07      	ldr	r3, [pc, #28]	; (95094 <DD_SET_PUMPFREQ+0x4c>)
   95076:	4798      	blx	r3
								
				break;
   95078:	e007      	b.n	9508a <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   9507a:	2300      	movs	r3, #0
   9507c:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   9507e:	7afb      	ldrb	r3, [r7, #11]
   95080:	68f9      	ldr	r1, [r7, #12]
   95082:	4618      	mov	r0, r3
   95084:	4b03      	ldr	r3, [pc, #12]	; (95094 <DD_SET_PUMPFREQ+0x4c>)
   95086:	4798      	blx	r3
							
				
				break;
   95088:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   9508a:	2300      	movs	r3, #0
}
   9508c:	4618      	mov	r0, r3
   9508e:	3710      	adds	r7, #16
   95090:	46bd      	mov	sp, r7
   95092:	bd80      	pop	{r7, pc}
   95094:	000947ad 	.word	0x000947ad

00095098 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   95098:	b580      	push	{r7, lr}
   9509a:	b084      	sub	sp, #16
   9509c:	af00      	add	r7, sp, #0
   9509e:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   950a0:	2301      	movs	r3, #1
   950a2:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   950a4:	7bfb      	ldrb	r3, [r7, #15]
   950a6:	6879      	ldr	r1, [r7, #4]
   950a8:	4618      	mov	r0, r3
   950aa:	4b03      	ldr	r3, [pc, #12]	; (950b8 <DD_CHNG_HTR+0x20>)
   950ac:	4798      	blx	r3
	
	return 0;
   950ae:	2300      	movs	r3, #0
}
   950b0:	4618      	mov	r0, r3
   950b2:	3710      	adds	r7, #16
   950b4:	46bd      	mov	sp, r7
   950b6:	bd80      	pop	{r7, pc}
   950b8:	00094781 	.word	0x00094781

000950bc <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   950bc:	b580      	push	{r7, lr}
   950be:	b082      	sub	sp, #8
   950c0:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   950c2:	2301      	movs	r3, #1
   950c4:	607b      	str	r3, [r7, #4]
	peri = PD;
   950c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   950ca:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   950cc:	6879      	ldr	r1, [r7, #4]
   950ce:	6838      	ldr	r0, [r7, #0]
   950d0:	4b03      	ldr	r3, [pc, #12]	; (950e0 <DD_SET_DIR+0x24>)
   950d2:	4798      	blx	r3
	
	return 0;
   950d4:	2300      	movs	r3, #0
}
   950d6:	4618      	mov	r0, r3
   950d8:	3708      	adds	r7, #8
   950da:	46bd      	mov	sp, r7
   950dc:	bd80      	pop	{r7, pc}
   950de:	bf00      	nop
   950e0:	00093cd9 	.word	0x00093cd9

000950e4 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   950e4:	b580      	push	{r7, lr}
   950e6:	b082      	sub	sp, #8
   950e8:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   950ea:	2301      	movs	r3, #1
   950ec:	607b      	str	r3, [r7, #4]
	peri = PD;
   950ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   950f2:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   950f4:	6879      	ldr	r1, [r7, #4]
   950f6:	6838      	ldr	r0, [r7, #0]
   950f8:	4b03      	ldr	r3, [pc, #12]	; (95108 <DD_RESET_DIR+0x24>)
   950fa:	4798      	blx	r3
	
	return 0;
   950fc:	2300      	movs	r3, #0
}
   950fe:	4618      	mov	r0, r3
   95100:	3708      	adds	r7, #8
   95102:	46bd      	mov	sp, r7
   95104:	bd80      	pop	{r7, pc}
   95106:	bf00      	nop
   95108:	00093d5d 	.word	0x00093d5d

0009510c <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   9510c:	b580      	push	{r7, lr}
   9510e:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   95110:	201e      	movs	r0, #30
   95112:	4b02      	ldr	r3, [pc, #8]	; (9511c <DD_SET_RED+0x10>)
   95114:	4798      	blx	r3
	return 0;
   95116:	2300      	movs	r3, #0
}
   95118:	4618      	mov	r0, r3
   9511a:	bd80      	pop	{r7, pc}
   9511c:	000951ad 	.word	0x000951ad

00095120 <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   95120:	b580      	push	{r7, lr}
   95122:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   95124:	2020      	movs	r0, #32
   95126:	4b02      	ldr	r3, [pc, #8]	; (95130 <DD_SET_GREEN+0x10>)
   95128:	4798      	blx	r3
	return 0;
   9512a:	2300      	movs	r3, #0
}
   9512c:	4618      	mov	r0, r3
   9512e:	bd80      	pop	{r7, pc}
   95130:	000951ad 	.word	0x000951ad

00095134 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   95134:	b580      	push	{r7, lr}
   95136:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   95138:	201f      	movs	r0, #31
   9513a:	4b02      	ldr	r3, [pc, #8]	; (95144 <DD_SET_YELLOW+0x10>)
   9513c:	4798      	blx	r3
	return 0;
   9513e:	2300      	movs	r3, #0
}
   95140:	4618      	mov	r0, r3
   95142:	bd80      	pop	{r7, pc}
   95144:	000951ad 	.word	0x000951ad

00095148 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   95148:	b580      	push	{r7, lr}
   9514a:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   9514c:	201d      	movs	r0, #29
   9514e:	4b02      	ldr	r3, [pc, #8]	; (95158 <DD_SET_BUZZER+0x10>)
   95150:	4798      	blx	r3
	return 0;
   95152:	2300      	movs	r3, #0
}
   95154:	4618      	mov	r0, r3
   95156:	bd80      	pop	{r7, pc}
   95158:	000951ad 	.word	0x000951ad

0009515c <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   9515c:	b580      	push	{r7, lr}
   9515e:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   95160:	201e      	movs	r0, #30
   95162:	4b02      	ldr	r3, [pc, #8]	; (9516c <DD_RESET_RED+0x10>)
   95164:	4798      	blx	r3
	return 0;
   95166:	2300      	movs	r3, #0
}
   95168:	4618      	mov	r0, r3
   9516a:	bd80      	pop	{r7, pc}
   9516c:	0009526d 	.word	0x0009526d

00095170 <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   95170:	b580      	push	{r7, lr}
   95172:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   95174:	2020      	movs	r0, #32
   95176:	4b02      	ldr	r3, [pc, #8]	; (95180 <DD_RESET_GREEN+0x10>)
   95178:	4798      	blx	r3
	return 0;
   9517a:	2300      	movs	r3, #0
}
   9517c:	4618      	mov	r0, r3
   9517e:	bd80      	pop	{r7, pc}
   95180:	0009526d 	.word	0x0009526d

00095184 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   95184:	b580      	push	{r7, lr}
   95186:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   95188:	201f      	movs	r0, #31
   9518a:	4b02      	ldr	r3, [pc, #8]	; (95194 <DD_RESET_YELLOW+0x10>)
   9518c:	4798      	blx	r3
	return 0;
   9518e:	2300      	movs	r3, #0
}
   95190:	4618      	mov	r0, r3
   95192:	bd80      	pop	{r7, pc}
   95194:	0009526d 	.word	0x0009526d

00095198 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   95198:	b580      	push	{r7, lr}
   9519a:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   9519c:	201d      	movs	r0, #29
   9519e:	4b02      	ldr	r3, [pc, #8]	; (951a8 <DD_RESET_BUZZER+0x10>)
   951a0:	4798      	blx	r3
	return 0;
   951a2:	2300      	movs	r3, #0
}
   951a4:	4618      	mov	r0, r3
   951a6:	bd80      	pop	{r7, pc}
   951a8:	0009526d 	.word	0x0009526d

000951ac <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   951ac:	b580      	push	{r7, lr}
   951ae:	b082      	sub	sp, #8
   951b0:	af00      	add	r7, sp, #0
   951b2:	4603      	mov	r3, r0
   951b4:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   951b6:	79fb      	ldrb	r3, [r7, #7]
   951b8:	2b00      	cmp	r3, #0
   951ba:	d015      	beq.n	951e8 <DD_SET_VALVE+0x3c>
   951bc:	79fb      	ldrb	r3, [r7, #7]
   951be:	2b10      	cmp	r3, #16
   951c0:	d812      	bhi.n	951e8 <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   951c2:	79fb      	ldrb	r3, [r7, #7]
   951c4:	3b01      	subs	r3, #1
   951c6:	2201      	movs	r2, #1
   951c8:	fa02 f303 	lsl.w	r3, r2, r3
   951cc:	b21a      	sxth	r2, r3
   951ce:	4b21      	ldr	r3, [pc, #132]	; (95254 <DD_SET_VALVE+0xa8>)
   951d0:	881b      	ldrh	r3, [r3, #0]
   951d2:	b21b      	sxth	r3, r3
   951d4:	4313      	orrs	r3, r2
   951d6:	b21b      	sxth	r3, r3
   951d8:	b29a      	uxth	r2, r3
   951da:	4b1e      	ldr	r3, [pc, #120]	; (95254 <DD_SET_VALVE+0xa8>)
   951dc:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   951de:	4b1e      	ldr	r3, [pc, #120]	; (95258 <DD_SET_VALVE+0xac>)
   951e0:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   951e2:	4b1e      	ldr	r3, [pc, #120]	; (9525c <DD_SET_VALVE+0xb0>)
   951e4:	4798      	blx	r3
   951e6:	e030      	b.n	9524a <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   951e8:	79fb      	ldrb	r3, [r7, #7]
   951ea:	2b10      	cmp	r3, #16
   951ec:	d915      	bls.n	9521a <DD_SET_VALVE+0x6e>
   951ee:	79fb      	ldrb	r3, [r7, #7]
   951f0:	2b16      	cmp	r3, #22
   951f2:	d812      	bhi.n	9521a <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_32 |= 1 << id_valve - 17;         // Earlier 6
   951f4:	79fb      	ldrb	r3, [r7, #7]
   951f6:	3b11      	subs	r3, #17
   951f8:	2201      	movs	r2, #1
   951fa:	fa02 f303 	lsl.w	r3, r2, r3
   951fe:	b21a      	sxth	r2, r3
   95200:	4b17      	ldr	r3, [pc, #92]	; (95260 <DD_SET_VALVE+0xb4>)
   95202:	881b      	ldrh	r3, [r3, #0]
   95204:	b21b      	sxth	r3, r3
   95206:	4313      	orrs	r3, r2
   95208:	b21b      	sxth	r3, r3
   9520a:	b29a      	uxth	r2, r3
   9520c:	4b14      	ldr	r3, [pc, #80]	; (95260 <DD_SET_VALVE+0xb4>)
   9520e:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   95210:	4b14      	ldr	r3, [pc, #80]	; (95264 <DD_SET_VALVE+0xb8>)
   95212:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   95214:	4b14      	ldr	r3, [pc, #80]	; (95268 <DD_SET_VALVE+0xbc>)
   95216:	4798      	blx	r3
   95218:	e017      	b.n	9524a <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   9521a:	79fb      	ldrb	r3, [r7, #7]
   9521c:	2b1c      	cmp	r3, #28
   9521e:	d914      	bls.n	9524a <DD_SET_VALVE+0x9e>
   95220:	79fb      	ldrb	r3, [r7, #7]
   95222:	2b20      	cmp	r3, #32
   95224:	d811      	bhi.n	9524a <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_17_32 |= 1 << id_valve - 17;
   95226:	79fb      	ldrb	r3, [r7, #7]
   95228:	3b11      	subs	r3, #17
   9522a:	2201      	movs	r2, #1
   9522c:	fa02 f303 	lsl.w	r3, r2, r3
   95230:	b21a      	sxth	r2, r3
   95232:	4b0b      	ldr	r3, [pc, #44]	; (95260 <DD_SET_VALVE+0xb4>)
   95234:	881b      	ldrh	r3, [r3, #0]
   95236:	b21b      	sxth	r3, r3
   95238:	4313      	orrs	r3, r2
   9523a:	b21b      	sxth	r3, r3
   9523c:	b29a      	uxth	r2, r3
   9523e:	4b08      	ldr	r3, [pc, #32]	; (95260 <DD_SET_VALVE+0xb4>)
   95240:	801a      	strh	r2, [r3, #0]
			DD_SET_VALVE_17_20_IO();
   95242:	4b08      	ldr	r3, [pc, #32]	; (95264 <DD_SET_VALVE+0xb8>)
   95244:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   95246:	4b08      	ldr	r3, [pc, #32]	; (95268 <DD_SET_VALVE+0xbc>)
   95248:	4798      	blx	r3
		}
				
	

	return 0;
   9524a:	2300      	movs	r3, #0
}
   9524c:	4618      	mov	r0, r3
   9524e:	3708      	adds	r7, #8
   95250:	46bd      	mov	sp, r7
   95252:	bd80      	pop	{r7, pc}
   95254:	200726b8 	.word	0x200726b8
   95258:	00095369 	.word	0x00095369
   9525c:	00095f65 	.word	0x00095f65
   95260:	200726ba 	.word	0x200726ba
   95264:	000954f5 	.word	0x000954f5
   95268:	00095fad 	.word	0x00095fad

0009526c <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   9526c:	b580      	push	{r7, lr}
   9526e:	b082      	sub	sp, #8
   95270:	af00      	add	r7, sp, #0
   95272:	4603      	mov	r3, r0
   95274:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   95276:	79fb      	ldrb	r3, [r7, #7]
   95278:	2b01      	cmp	r3, #1
   9527a:	d104      	bne.n	95286 <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   9527c:	2206      	movs	r2, #6
   9527e:	4932      	ldr	r1, [pc, #200]	; (95348 <DD_RESET_VALVE+0xdc>)
   95280:	2018      	movs	r0, #24
   95282:	4b32      	ldr	r3, [pc, #200]	; (9534c <DD_RESET_VALVE+0xe0>)
   95284:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   95286:	79fb      	ldrb	r3, [r7, #7]
   95288:	2b00      	cmp	r3, #0
   9528a:	d01b      	beq.n	952c4 <DD_RESET_VALVE+0x58>
   9528c:	79fb      	ldrb	r3, [r7, #7]
   9528e:	2b10      	cmp	r3, #16
   95290:	d818      	bhi.n	952c4 <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   95292:	79fb      	ldrb	r3, [r7, #7]
   95294:	3b01      	subs	r3, #1
   95296:	2201      	movs	r2, #1
   95298:	fa02 f303 	lsl.w	r3, r2, r3
   9529c:	b21b      	sxth	r3, r3
   9529e:	43db      	mvns	r3, r3
   952a0:	b21a      	sxth	r2, r3
   952a2:	4b2b      	ldr	r3, [pc, #172]	; (95350 <DD_RESET_VALVE+0xe4>)
   952a4:	881b      	ldrh	r3, [r3, #0]
   952a6:	b21b      	sxth	r3, r3
   952a8:	4013      	ands	r3, r2
   952aa:	b21b      	sxth	r3, r3
   952ac:	b29a      	uxth	r2, r3
   952ae:	4b28      	ldr	r3, [pc, #160]	; (95350 <DD_RESET_VALVE+0xe4>)
   952b0:	801a      	strh	r2, [r3, #0]
   952b2:	4b27      	ldr	r3, [pc, #156]	; (95350 <DD_RESET_VALVE+0xe4>)
   952b4:	881a      	ldrh	r2, [r3, #0]
   952b6:	4b26      	ldr	r3, [pc, #152]	; (95350 <DD_RESET_VALVE+0xe4>)
   952b8:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   952ba:	4b26      	ldr	r3, [pc, #152]	; (95354 <DD_RESET_VALVE+0xe8>)
   952bc:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   952be:	4b26      	ldr	r3, [pc, #152]	; (95358 <DD_RESET_VALVE+0xec>)
   952c0:	4798      	blx	r3
   952c2:	e03c      	b.n	9533e <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   952c4:	79fb      	ldrb	r3, [r7, #7]
   952c6:	2b10      	cmp	r3, #16
   952c8:	d91b      	bls.n	95302 <DD_RESET_VALVE+0x96>
   952ca:	79fb      	ldrb	r3, [r7, #7]
   952cc:	2b16      	cmp	r3, #22
   952ce:	d818      	bhi.n	95302 <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_32 = dd_valve_port_17_32 &= ~(1 << id_valve - 17);
   952d0:	79fb      	ldrb	r3, [r7, #7]
   952d2:	3b11      	subs	r3, #17
   952d4:	2201      	movs	r2, #1
   952d6:	fa02 f303 	lsl.w	r3, r2, r3
   952da:	b21b      	sxth	r3, r3
   952dc:	43db      	mvns	r3, r3
   952de:	b21a      	sxth	r2, r3
   952e0:	4b1e      	ldr	r3, [pc, #120]	; (9535c <DD_RESET_VALVE+0xf0>)
   952e2:	881b      	ldrh	r3, [r3, #0]
   952e4:	b21b      	sxth	r3, r3
   952e6:	4013      	ands	r3, r2
   952e8:	b21b      	sxth	r3, r3
   952ea:	b29a      	uxth	r2, r3
   952ec:	4b1b      	ldr	r3, [pc, #108]	; (9535c <DD_RESET_VALVE+0xf0>)
   952ee:	801a      	strh	r2, [r3, #0]
   952f0:	4b1a      	ldr	r3, [pc, #104]	; (9535c <DD_RESET_VALVE+0xf0>)
   952f2:	881a      	ldrh	r2, [r3, #0]
   952f4:	4b19      	ldr	r3, [pc, #100]	; (9535c <DD_RESET_VALVE+0xf0>)
   952f6:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   952f8:	4b19      	ldr	r3, [pc, #100]	; (95360 <DD_RESET_VALVE+0xf4>)
   952fa:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   952fc:	4b19      	ldr	r3, [pc, #100]	; (95364 <DD_RESET_VALVE+0xf8>)
   952fe:	4798      	blx	r3
   95300:	e01d      	b.n	9533e <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   95302:	79fb      	ldrb	r3, [r7, #7]
   95304:	2b1c      	cmp	r3, #28
   95306:	d91a      	bls.n	9533e <DD_RESET_VALVE+0xd2>
   95308:	79fb      	ldrb	r3, [r7, #7]
   9530a:	2b20      	cmp	r3, #32
   9530c:	d817      	bhi.n	9533e <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_17_32 = dd_valve_port_17_32 &= ~(1 << id_valve - 17);
   9530e:	79fb      	ldrb	r3, [r7, #7]
   95310:	3b11      	subs	r3, #17
   95312:	2201      	movs	r2, #1
   95314:	fa02 f303 	lsl.w	r3, r2, r3
   95318:	b21b      	sxth	r3, r3
   9531a:	43db      	mvns	r3, r3
   9531c:	b21a      	sxth	r2, r3
   9531e:	4b0f      	ldr	r3, [pc, #60]	; (9535c <DD_RESET_VALVE+0xf0>)
   95320:	881b      	ldrh	r3, [r3, #0]
   95322:	b21b      	sxth	r3, r3
   95324:	4013      	ands	r3, r2
   95326:	b21b      	sxth	r3, r3
   95328:	b29a      	uxth	r2, r3
   9532a:	4b0c      	ldr	r3, [pc, #48]	; (9535c <DD_RESET_VALVE+0xf0>)
   9532c:	801a      	strh	r2, [r3, #0]
   9532e:	4b0b      	ldr	r3, [pc, #44]	; (9535c <DD_RESET_VALVE+0xf0>)
   95330:	881a      	ldrh	r2, [r3, #0]
   95332:	4b0a      	ldr	r3, [pc, #40]	; (9535c <DD_RESET_VALVE+0xf0>)
   95334:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   95336:	4b0a      	ldr	r3, [pc, #40]	; (95360 <DD_RESET_VALVE+0xf4>)
   95338:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   9533a:	4b0a      	ldr	r3, [pc, #40]	; (95364 <DD_RESET_VALVE+0xf8>)
   9533c:	4798      	blx	r3
	}

	
	return 0;
   9533e:	2300      	movs	r3, #0
}
   95340:	4618      	mov	r0, r3
   95342:	3708      	adds	r7, #8
   95344:	46bd      	mov	sp, r7
   95346:	bd80      	pop	{r7, pc}
   95348:	000a4ad4 	.word	0x000a4ad4
   9534c:	00098601 	.word	0x00098601
   95350:	200726b8 	.word	0x200726b8
   95354:	00095369 	.word	0x00095369
   95358:	00095f65 	.word	0x00095f65
   9535c:	200726ba 	.word	0x200726ba
   95360:	000954f5 	.word	0x000954f5
   95364:	00095fad 	.word	0x00095fad

00095368 <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   95368:	b580      	push	{r7, lr}
   9536a:	b084      	sub	sp, #16
   9536c:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   9536e:	2301      	movs	r3, #1
   95370:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   95372:	e0af      	b.n	954d4 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   95374:	7bfb      	ldrb	r3, [r7, #15]
   95376:	3b01      	subs	r3, #1
   95378:	2b0f      	cmp	r3, #15
   9537a:	f200 8083 	bhi.w	95484 <DD_SET_VALVE_1_16_IO+0x11c>
   9537e:	a201      	add	r2, pc, #4	; (adr r2, 95384 <DD_SET_VALVE_1_16_IO+0x1c>)
   95380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95384:	000953c5 	.word	0x000953c5
   95388:	000953d1 	.word	0x000953d1
   9538c:	000953dd 	.word	0x000953dd
   95390:	000953e9 	.word	0x000953e9
   95394:	000953f5 	.word	0x000953f5
   95398:	00095401 	.word	0x00095401
   9539c:	0009540d 	.word	0x0009540d
   953a0:	00095419 	.word	0x00095419
   953a4:	00095425 	.word	0x00095425
   953a8:	00095431 	.word	0x00095431
   953ac:	0009543d 	.word	0x0009543d
   953b0:	00095449 	.word	0x00095449
   953b4:	00095455 	.word	0x00095455
   953b8:	00095461 	.word	0x00095461
   953bc:	0009546d 	.word	0x0009546d
   953c0:	00095479 	.word	0x00095479
			{	
			
			case VALVE_ID1:
			p_io = 10;
   953c4:	230a      	movs	r3, #10
   953c6:	60bb      	str	r3, [r7, #8]
			peri = PB;
   953c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   953cc:	607b      	str	r3, [r7, #4]
			break;
   953ce:	e05a      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   953d0:	2302      	movs	r3, #2
   953d2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   953d4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   953d8:	607b      	str	r3, [r7, #4]
			break;
   953da:	e054      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   953dc:	2303      	movs	r3, #3
   953de:	60bb      	str	r3, [r7, #8]
			peri = PC;
   953e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   953e4:	607b      	str	r3, [r7, #4]
			break;
   953e6:	e04e      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   953e8:	2304      	movs	r3, #4
   953ea:	60bb      	str	r3, [r7, #8]
			peri = PC;
   953ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   953f0:	607b      	str	r3, [r7, #4]
			break;
   953f2:	e048      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   953f4:	2305      	movs	r3, #5
   953f6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   953f8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   953fc:	607b      	str	r3, [r7, #4]
			break;
   953fe:	e042      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   95400:	2306      	movs	r3, #6
   95402:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95404:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95408:	607b      	str	r3, [r7, #4]
			break;
   9540a:	e03c      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   9540c:	2307      	movs	r3, #7
   9540e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95410:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95414:	607b      	str	r3, [r7, #4]
			break;
   95416:	e036      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   95418:	2308      	movs	r3, #8
   9541a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9541c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95420:	607b      	str	r3, [r7, #4]
			break;
   95422:	e030      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   95424:	2309      	movs	r3, #9
   95426:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95428:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9542c:	607b      	str	r3, [r7, #4]
			break;
   9542e:	e02a      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   95430:	230a      	movs	r3, #10
   95432:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95434:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95438:	607b      	str	r3, [r7, #4]
			break;
   9543a:	e024      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   9543c:	230b      	movs	r3, #11
   9543e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95440:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95444:	607b      	str	r3, [r7, #4]
			break;
   95446:	e01e      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   95448:	230c      	movs	r3, #12
   9544a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9544c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95450:	607b      	str	r3, [r7, #4]
						break;
   95452:	e018      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   95454:	230d      	movs	r3, #13
   95456:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95458:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9545c:	607b      	str	r3, [r7, #4]
			break;
   9545e:	e012      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   95460:	230e      	movs	r3, #14
   95462:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95464:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95468:	607b      	str	r3, [r7, #4]
			break;
   9546a:	e00c      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   9546c:	230f      	movs	r3, #15
   9546e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95470:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95474:	607b      	str	r3, [r7, #4]
			break;
   95476:	e006      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   95478:	2310      	movs	r3, #16
   9547a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9547c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95480:	607b      	str	r3, [r7, #4]
			break;
   95482:	e000      	b.n	95486 <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   95484:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   95486:	4b18      	ldr	r3, [pc, #96]	; (954e8 <DD_SET_VALVE_1_16_IO+0x180>)
   95488:	881b      	ldrh	r3, [r3, #0]
   9548a:	461a      	mov	r2, r3
   9548c:	7bfb      	ldrb	r3, [r7, #15]
   9548e:	3b01      	subs	r3, #1
   95490:	fa42 f303 	asr.w	r3, r2, r3
   95494:	f003 0301 	and.w	r3, r3, #1
   95498:	2b00      	cmp	r3, #0
   9549a:	d00c      	beq.n	954b6 <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   9549c:	7bfb      	ldrb	r3, [r7, #15]
   9549e:	2b01      	cmp	r3, #1
   954a0:	d104      	bne.n	954ac <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   954a2:	68b9      	ldr	r1, [r7, #8]
   954a4:	6878      	ldr	r0, [r7, #4]
   954a6:	4b11      	ldr	r3, [pc, #68]	; (954ec <DD_SET_VALVE_1_16_IO+0x184>)
   954a8:	4798      	blx	r3
   954aa:	e010      	b.n	954ce <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   954ac:	68b9      	ldr	r1, [r7, #8]
   954ae:	6878      	ldr	r0, [r7, #4]
   954b0:	4b0f      	ldr	r3, [pc, #60]	; (954f0 <DD_SET_VALVE_1_16_IO+0x188>)
   954b2:	4798      	blx	r3
   954b4:	e00b      	b.n	954ce <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   954b6:	7bfb      	ldrb	r3, [r7, #15]
   954b8:	2b01      	cmp	r3, #1
   954ba:	d104      	bne.n	954c6 <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   954bc:	68b9      	ldr	r1, [r7, #8]
   954be:	6878      	ldr	r0, [r7, #4]
   954c0:	4b0b      	ldr	r3, [pc, #44]	; (954f0 <DD_SET_VALVE_1_16_IO+0x188>)
   954c2:	4798      	blx	r3
   954c4:	e003      	b.n	954ce <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   954c6:	68b9      	ldr	r1, [r7, #8]
   954c8:	6878      	ldr	r0, [r7, #4]
   954ca:	4b08      	ldr	r3, [pc, #32]	; (954ec <DD_SET_VALVE_1_16_IO+0x184>)
   954cc:	4798      	blx	r3
						}
			count++;
   954ce:	7bfb      	ldrb	r3, [r7, #15]
   954d0:	3301      	adds	r3, #1
   954d2:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   954d4:	7bfb      	ldrb	r3, [r7, #15]
   954d6:	2b10      	cmp	r3, #16
   954d8:	f67f af4c 	bls.w	95374 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   954dc:	2300      	movs	r3, #0
}
   954de:	4618      	mov	r0, r3
   954e0:	3710      	adds	r7, #16
   954e2:	46bd      	mov	sp, r7
   954e4:	bd80      	pop	{r7, pc}
   954e6:	bf00      	nop
   954e8:	200726b8 	.word	0x200726b8
   954ec:	00093cd9 	.word	0x00093cd9
   954f0:	00093d5d 	.word	0x00093d5d

000954f4 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   954f4:	b580      	push	{r7, lr}
   954f6:	b084      	sub	sp, #16
   954f8:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   954fa:	2311      	movs	r3, #17
   954fc:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
		while (count <= 32)
   954fe:	e06f      	b.n	955e0 <DD_SET_VALVE_17_20_IO+0xec>
		{
			switch (count)
   95500:	7bfb      	ldrb	r3, [r7, #15]
   95502:	3b11      	subs	r3, #17
   95504:	2b0f      	cmp	r3, #15
   95506:	d853      	bhi.n	955b0 <DD_SET_VALVE_17_20_IO+0xbc>
   95508:	a201      	add	r2, pc, #4	; (adr r2, 95510 <DD_SET_VALVE_17_20_IO+0x1c>)
   9550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9550e:	bf00      	nop
   95510:	00095551 	.word	0x00095551
   95514:	0009555d 	.word	0x0009555d
   95518:	00095569 	.word	0x00095569
   9551c:	00095575 	.word	0x00095575
   95520:	000955b1 	.word	0x000955b1
   95524:	000955b1 	.word	0x000955b1
   95528:	000955b1 	.word	0x000955b1
   9552c:	000955b1 	.word	0x000955b1
   95530:	000955b1 	.word	0x000955b1
   95534:	000955b1 	.word	0x000955b1
   95538:	000955b1 	.word	0x000955b1
   9553c:	000955b1 	.word	0x000955b1
   95540:	00095581 	.word	0x00095581
   95544:	0009558d 	.word	0x0009558d
   95548:	00095599 	.word	0x00095599
   9554c:	000955a5 	.word	0x000955a5
			{
				
					case VALVE_ID17:
					p_io = 1;
   95550:	2301      	movs	r3, #1
   95552:	60bb      	str	r3, [r7, #8]
					peri = PC;
   95554:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95558:	607b      	str	r3, [r7, #4]
					break;
   9555a:	e02a      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID18:
					p_io = 2;
   9555c:	2302      	movs	r3, #2
   9555e:	60bb      	str	r3, [r7, #8]
					peri = PC;
   95560:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95564:	607b      	str	r3, [r7, #4]
					break;
   95566:	e024      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID19:
					p_io = 3;
   95568:	2303      	movs	r3, #3
   9556a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9556c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95570:	607b      	str	r3, [r7, #4]
					break;
   95572:	e01e      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID20:
					p_io = 4;
   95574:	2304      	movs	r3, #4
   95576:	60bb      	str	r3, [r7, #8]
					peri = PC;
   95578:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9557c:	607b      	str	r3, [r7, #4]
					break;
   9557e:	e018      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_BUZZER:
					p_io = 13;
   95580:	230d      	movs	r3, #13
   95582:	60bb      	str	r3, [r7, #8]
					peri = PC;
   95584:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95588:	607b      	str	r3, [r7, #4]
					break;
   9558a:	e012      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_RED:
					p_io = 14;
   9558c:	230e      	movs	r3, #14
   9558e:	60bb      	str	r3, [r7, #8]
					peri = PC;
   95590:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95594:	607b      	str	r3, [r7, #4]
					break;
   95596:	e00c      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_AMBER:
					p_io = 15;
   95598:	230f      	movs	r3, #15
   9559a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9559c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   955a0:	607b      	str	r3, [r7, #4]
					break;
   955a2:	e006      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_GREEN:
					p_io = 16;
   955a4:	2310      	movs	r3, #16
   955a6:	60bb      	str	r3, [r7, #8]
					peri = PC;
   955a8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   955ac:	607b      	str	r3, [r7, #4]
					break;
   955ae:	e000      	b.n	955b2 <DD_SET_VALVE_17_20_IO+0xbe>
				
					default:
					break;
   955b0:	bf00      	nop
			}
					if (dd_valve_port_17_32 & 1<< count-17 )
   955b2:	4b0f      	ldr	r3, [pc, #60]	; (955f0 <DD_SET_VALVE_17_20_IO+0xfc>)
   955b4:	881b      	ldrh	r3, [r3, #0]
   955b6:	461a      	mov	r2, r3
   955b8:	7bfb      	ldrb	r3, [r7, #15]
   955ba:	3b11      	subs	r3, #17
   955bc:	fa42 f303 	asr.w	r3, r2, r3
   955c0:	f003 0301 	and.w	r3, r3, #1
   955c4:	2b00      	cmp	r3, #0
   955c6:	d004      	beq.n	955d2 <DD_SET_VALVE_17_20_IO+0xde>
	
					{

						DD_RESET_PIO(peri,p_io);
   955c8:	68b9      	ldr	r1, [r7, #8]
   955ca:	6878      	ldr	r0, [r7, #4]
   955cc:	4b09      	ldr	r3, [pc, #36]	; (955f4 <DD_SET_VALVE_17_20_IO+0x100>)
   955ce:	4798      	blx	r3
   955d0:	e003      	b.n	955da <DD_SET_VALVE_17_20_IO+0xe6>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   955d2:	68b9      	ldr	r1, [r7, #8]
   955d4:	6878      	ldr	r0, [r7, #4]
   955d6:	4b08      	ldr	r3, [pc, #32]	; (955f8 <DD_SET_VALVE_17_20_IO+0x104>)
   955d8:	4798      	blx	r3
			}
				
		count++;
   955da:	7bfb      	ldrb	r3, [r7, #15]
   955dc:	3301      	adds	r3, #1
   955de:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
	uint32_t p_io, peri;
		while (count <= 32)
   955e0:	7bfb      	ldrb	r3, [r7, #15]
   955e2:	2b20      	cmp	r3, #32
   955e4:	d98c      	bls.n	95500 <DD_SET_VALVE_17_20_IO+0xc>
			}
				
		count++;
	}
	
	return 0;
   955e6:	2300      	movs	r3, #0
}
   955e8:	4618      	mov	r0, r3
   955ea:	3710      	adds	r7, #16
   955ec:	46bd      	mov	sp, r7
   955ee:	bd80      	pop	{r7, pc}
   955f0:	200726ba 	.word	0x200726ba
   955f4:	00093d5d 	.word	0x00093d5d
   955f8:	00093cd9 	.word	0x00093cd9

000955fc <DD_SET_CLAMP>:


uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   955fc:	b580      	push	{r7, lr}
   955fe:	b082      	sub	sp, #8
   95600:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   95602:	231b      	movs	r3, #27
   95604:	607b      	str	r3, [r7, #4]
	peri = PC;
   95606:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9560a:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   9560c:	6879      	ldr	r1, [r7, #4]
   9560e:	6838      	ldr	r0, [r7, #0]
   95610:	4b03      	ldr	r3, [pc, #12]	; (95620 <DD_SET_CLAMP+0x24>)
   95612:	4798      	blx	r3
	
	return 0;
   95614:	2300      	movs	r3, #0
}
   95616:	4618      	mov	r0, r3
   95618:	3708      	adds	r7, #8
   9561a:	46bd      	mov	sp, r7
   9561c:	bd80      	pop	{r7, pc}
   9561e:	bf00      	nop
   95620:	00093cd9 	.word	0x00093cd9

00095624 <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   95624:	b580      	push	{r7, lr}
   95626:	b082      	sub	sp, #8
   95628:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9562a:	231b      	movs	r3, #27
   9562c:	607b      	str	r3, [r7, #4]
	peri = PC;
   9562e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95632:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   95634:	6879      	ldr	r1, [r7, #4]
   95636:	6838      	ldr	r0, [r7, #0]
   95638:	4b03      	ldr	r3, [pc, #12]	; (95648 <DD_RESET_CLAMP+0x24>)
   9563a:	4798      	blx	r3
	
	return 0;
   9563c:	2300      	movs	r3, #0
}
   9563e:	4618      	mov	r0, r3
   95640:	3708      	adds	r7, #8
   95642:	46bd      	mov	sp, r7
   95644:	bd80      	pop	{r7, pc}
   95646:	bf00      	nop
   95648:	00093d5d 	.word	0x00093d5d

0009564c <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   9564c:	b580      	push	{r7, lr}
   9564e:	b086      	sub	sp, #24
   95650:	af00      	add	r7, sp, #0
   95652:	4603      	mov	r3, r0
   95654:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   95656:	2300      	movs	r3, #0
   95658:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   9565a:	79fb      	ldrb	r3, [r7, #7]
   9565c:	3b01      	subs	r3, #1
   9565e:	2b24      	cmp	r3, #36	; 0x24
   95660:	f200 812c 	bhi.w	958bc <DD_RD_SENSIN+0x270>
   95664:	a201      	add	r2, pc, #4	; (adr r2, 9566c <DD_RD_SENSIN+0x20>)
   95666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9566a:	bf00      	nop
   9566c:	00095701 	.word	0x00095701
   95670:	0009570d 	.word	0x0009570d
   95674:	00095719 	.word	0x00095719
   95678:	00095725 	.word	0x00095725
   9567c:	00095731 	.word	0x00095731
   95680:	0009573d 	.word	0x0009573d
   95684:	00095749 	.word	0x00095749
   95688:	00095755 	.word	0x00095755
   9568c:	00095761 	.word	0x00095761
   95690:	0009576d 	.word	0x0009576d
   95694:	00095779 	.word	0x00095779
   95698:	00095785 	.word	0x00095785
   9569c:	00095791 	.word	0x00095791
   956a0:	0009579d 	.word	0x0009579d
   956a4:	000957a9 	.word	0x000957a9
   956a8:	000957b5 	.word	0x000957b5
   956ac:	000957c1 	.word	0x000957c1
   956b0:	000957cd 	.word	0x000957cd
   956b4:	000957d9 	.word	0x000957d9
   956b8:	000957e5 	.word	0x000957e5
   956bc:	000957f1 	.word	0x000957f1
   956c0:	000957fd 	.word	0x000957fd
   956c4:	00095809 	.word	0x00095809
   956c8:	00095815 	.word	0x00095815
   956cc:	00095821 	.word	0x00095821
   956d0:	0009582d 	.word	0x0009582d
   956d4:	00095839 	.word	0x00095839
   956d8:	00095845 	.word	0x00095845
   956dc:	00095851 	.word	0x00095851
   956e0:	0009585d 	.word	0x0009585d
   956e4:	00095869 	.word	0x00095869
   956e8:	00095875 	.word	0x00095875
   956ec:	00095881 	.word	0x00095881
   956f0:	0009588d 	.word	0x0009588d
   956f4:	00095899 	.word	0x00095899
   956f8:	000958a5 	.word	0x000958a5
   956fc:	000958b1 	.word	0x000958b1
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   95700:	2307      	movs	r3, #7
   95702:	617b      	str	r3, [r7, #20]
		peri = PA;
   95704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95708:	613b      	str	r3, [r7, #16]
		break;
   9570a:	e0d8      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   9570c:	2319      	movs	r3, #25
   9570e:	617b      	str	r3, [r7, #20]
		peri = PC;
   95710:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95714:	613b      	str	r3, [r7, #16]
		break;
   95716:	e0d2      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   95718:	230c      	movs	r3, #12
   9571a:	617b      	str	r3, [r7, #20]
		peri = PB;
   9571c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95720:	613b      	str	r3, [r7, #16]
		break;
   95722:	e0cc      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   95724:	2300      	movs	r3, #0
   95726:	617b      	str	r3, [r7, #20]
		peri = PD;
   95728:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9572c:	613b      	str	r3, [r7, #16]
		break;
   9572e:	e0c6      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   95730:	231e      	movs	r3, #30
   95732:	617b      	str	r3, [r7, #20]
		peri = PC;
   95734:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95738:	613b      	str	r3, [r7, #16]
		break;
   9573a:	e0c0      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   9573c:	2306      	movs	r3, #6
   9573e:	617b      	str	r3, [r7, #20]
		peri = PD;
   95740:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95744:	613b      	str	r3, [r7, #16]
		break;
   95746:	e0ba      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   95748:	2309      	movs	r3, #9
   9574a:	617b      	str	r3, [r7, #20]
		peri = PD;
   9574c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95750:	613b      	str	r3, [r7, #16]
		break;
   95752:	e0b4      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   95754:	2305      	movs	r3, #5
   95756:	617b      	str	r3, [r7, #20]
		peri = PD;
   95758:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9575c:	613b      	str	r3, [r7, #16]
		break;
   9575e:	e0ae      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   95760:	2308      	movs	r3, #8
   95762:	617b      	str	r3, [r7, #20]
		peri = PB;
   95764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95768:	613b      	str	r3, [r7, #16]
		break;
   9576a:	e0a8      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   9576c:	2312      	movs	r3, #18
   9576e:	617b      	str	r3, [r7, #20]
		peri = PB;
   95770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95774:	613b      	str	r3, [r7, #16]
		break;
   95776:	e0a2      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   95778:	231a      	movs	r3, #26
   9577a:	617b      	str	r3, [r7, #20]
		peri = PC;
   9577c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95780:	613b      	str	r3, [r7, #16]
		break;
   95782:	e09c      	b.n	958be <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   95784:	2313      	movs	r3, #19
   95786:	617b      	str	r3, [r7, #20]
		peri =PA;
   95788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9578c:	613b      	str	r3, [r7, #16]
		break;
   9578e:	e096      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   95790:	2303      	movs	r3, #3
   95792:	617b      	str	r3, [r7, #20]
		peri =PD;
   95794:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95798:	613b      	str	r3, [r7, #16]
		break;
   9579a:	e090      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   9579c:	2310      	movs	r3, #16
   9579e:	617b      	str	r3, [r7, #20]
		peri =PB;
   957a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   957a4:	613b      	str	r3, [r7, #16]
		break;
   957a6:	e08a      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   957a8:	2312      	movs	r3, #18
   957aa:	617b      	str	r3, [r7, #20]
		peri =PC;
   957ac:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   957b0:	613b      	str	r3, [r7, #16]
		break;
   957b2:	e084      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   957b4:	2304      	movs	r3, #4
   957b6:	617b      	str	r3, [r7, #20]
		peri =PD;
   957b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   957bc:	613b      	str	r3, [r7, #16]
		break;
   957be:	e07e      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   957c0:	2316      	movs	r3, #22
   957c2:	617b      	str	r3, [r7, #20]
		peri =PB;
   957c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   957c8:	613b      	str	r3, [r7, #16]
		break;
   957ca:	e078      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   957cc:	230a      	movs	r3, #10
   957ce:	617b      	str	r3, [r7, #20]
		peri =PD;
   957d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   957d4:	613b      	str	r3, [r7, #16]
		break;
   957d6:	e072      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   957d8:	2317      	movs	r3, #23
   957da:	617b      	str	r3, [r7, #20]
 		peri =PB;
   957dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   957e0:	613b      	str	r3, [r7, #16]
		break;
   957e2:	e06c      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   957e4:	2309      	movs	r3, #9
   957e6:	617b      	str	r3, [r7, #20]
		peri =PB;
   957e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   957ec:	613b      	str	r3, [r7, #16]
		
		break;
   957ee:	e066      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   957f0:	2319      	movs	r3, #25
   957f2:	617b      	str	r3, [r7, #20]
		peri =PB;
   957f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   957f8:	613b      	str	r3, [r7, #16]
		break;
   957fa:	e060      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   957fc:	2318      	movs	r3, #24
   957fe:	617b      	str	r3, [r7, #20]
		peri =PB;
   95800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95804:	613b      	str	r3, [r7, #16]
		break;
   95806:	e05a      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   95808:	231b      	movs	r3, #27
   9580a:	617b      	str	r3, [r7, #20]
			peri =PB;
   9580c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95810:	613b      	str	r3, [r7, #16]
		break;
   95812:	e054      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   95814:	2318      	movs	r3, #24
   95816:	617b      	str	r3, [r7, #20]
			peri =PC;
   95818:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9581c:	613b      	str	r3, [r7, #16]
		break;
   9581e:	e04e      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   95820:	230e      	movs	r3, #14
   95822:	617b      	str	r3, [r7, #20]
		peri =PA;
   95824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95828:	613b      	str	r3, [r7, #16]
		break;
   9582a:	e048      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   9582c:	230f      	movs	r3, #15
   9582e:	617b      	str	r3, [r7, #20]
			peri =PB;
   95830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95834:	613b      	str	r3, [r7, #16]
		break;
   95836:	e042      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   95838:	231d      	movs	r3, #29
   9583a:	617b      	str	r3, [r7, #20]
		peri =PC;
   9583c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95840:	613b      	str	r3, [r7, #16]
		break;
   95842:	e03c      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   95844:	2314      	movs	r3, #20
   95846:	617b      	str	r3, [r7, #20]
		peri =PC;
   95848:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9584c:	613b      	str	r3, [r7, #16]
		break;
   9584e:	e036      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   95850:	2311      	movs	r3, #17
   95852:	617b      	str	r3, [r7, #20]
		peri =PC;
   95854:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95858:	613b      	str	r3, [r7, #16]
		break;
   9585a:	e030      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   9585c:	2313      	movs	r3, #19
   9585e:	617b      	str	r3, [r7, #20]
		peri =PC;
   95860:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95864:	613b      	str	r3, [r7, #16]
		break;
   95866:	e02a      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   95868:	2310      	movs	r3, #16
   9586a:	617b      	str	r3, [r7, #20]
		peri =PA;
   9586c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95870:	613b      	str	r3, [r7, #16]
		break;
   95872:	e024      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   95874:	2318      	movs	r3, #24
   95876:	617b      	str	r3, [r7, #20]
		peri =PA;
   95878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9587c:	613b      	str	r3, [r7, #16]
		break;
   9587e:	e01e      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   95880:	2315      	movs	r3, #21
   95882:	617b      	str	r3, [r7, #20]
		peri =PB;
   95884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95888:	613b      	str	r3, [r7, #16]
		break;
   9588a:	e018      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   9588c:	230a      	movs	r3, #10
   9588e:	617b      	str	r3, [r7, #20]
		peri =PA;
   95890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95894:	613b      	str	r3, [r7, #16]
		break;
   95896:	e012      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   95898:	2302      	movs	r3, #2
   9589a:	617b      	str	r3, [r7, #20]
		peri =PA;
   9589c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   958a0:	613b      	str	r3, [r7, #16]
		break;
   958a2:	e00c      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   958a4:	231a      	movs	r3, #26
   958a6:	617b      	str	r3, [r7, #20]
		peri =PB;
   958a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   958ac:	613b      	str	r3, [r7, #16]
		break;
   958ae:	e006      	b.n	958be <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   958b0:	2304      	movs	r3, #4
   958b2:	617b      	str	r3, [r7, #20]
			peri =PA;
   958b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   958b8:	613b      	str	r3, [r7, #16]
		break;
   958ba:	e000      	b.n	958be <DD_RD_SENSIN+0x272>
		default:
		break;
   958bc:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   958be:	6979      	ldr	r1, [r7, #20]
   958c0:	6938      	ldr	r0, [r7, #16]
   958c2:	4b04      	ldr	r3, [pc, #16]	; (958d4 <DD_RD_SENSIN+0x288>)
   958c4:	4798      	blx	r3
   958c6:	4603      	mov	r3, r0
   958c8:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   958ca:	7bfb      	ldrb	r3, [r7, #15]
	
}
   958cc:	4618      	mov	r0, r3
   958ce:	3718      	adds	r7, #24
   958d0:	46bd      	mov	sp, r7
   958d2:	bd80      	pop	{r7, pc}
   958d4:	00093de1 	.word	0x00093de1

000958d8 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   958d8:	b580      	push	{r7, lr}
   958da:	b084      	sub	sp, #16
   958dc:	af00      	add	r7, sp, #0
   958de:	4603      	mov	r3, r0
   958e0:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   958e2:	2301      	movs	r3, #1
   958e4:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   958e6:	79fb      	ldrb	r3, [r7, #7]
   958e8:	4618      	mov	r0, r3
   958ea:	4b04      	ldr	r3, [pc, #16]	; (958fc <DD_CONSOLE_TX+0x24>)
   958ec:	4798      	blx	r3
   958ee:	4603      	mov	r3, r0
   958f0:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   958f2:	7bfb      	ldrb	r3, [r7, #15]
}
   958f4:	4618      	mov	r0, r3
   958f6:	3710      	adds	r7, #16
   958f8:	46bd      	mov	sp, r7
   958fa:	bd80      	pop	{r7, pc}
   958fc:	000966a9 	.word	0x000966a9

00095900 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   95900:	b580      	push	{r7, lr}
   95902:	b084      	sub	sp, #16
   95904:	af00      	add	r7, sp, #0
   95906:	4603      	mov	r3, r0
   95908:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   9590a:	79fb      	ldrb	r3, [r7, #7]
   9590c:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   9590e:	7bfb      	ldrb	r3, [r7, #15]
   95910:	4618      	mov	r0, r3
   95912:	4b03      	ldr	r3, [pc, #12]	; (95920 <DD_CONSOLE_RX+0x20>)
   95914:	4798      	blx	r3
	
	
	return 1;
   95916:	2301      	movs	r3, #1
}
   95918:	4618      	mov	r0, r3
   9591a:	3710      	adds	r7, #16
   9591c:	46bd      	mov	sp, r7
   9591e:	bd80      	pop	{r7, pc}
   95920:	00096bd9 	.word	0x00096bd9

00095924 <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   95924:	b590      	push	{r4, r7, lr}
   95926:	b089      	sub	sp, #36	; 0x24
   95928:	af00      	add	r7, sp, #0
   9592a:	4603      	mov	r3, r0
   9592c:	460a      	mov	r2, r1
   9592e:	71fb      	strb	r3, [r7, #7]
   95930:	4613      	mov	r3, r2
   95932:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   95934:	2300      	movs	r3, #0
   95936:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   95938:	79bb      	ldrb	r3, [r7, #6]
   9593a:	2201      	movs	r2, #1
   9593c:	fb92 f3f3 	sdiv	r3, r2, r3
   95940:	01db      	lsls	r3, r3, #7
   95942:	4a1b      	ldr	r2, [pc, #108]	; (959b0 <DD_CONFIG_TIMER+0x8c>)
   95944:	fb92 f3f3 	sdiv	r3, r2, r3
   95948:	1e5a      	subs	r2, r3, #1
   9594a:	4b1a      	ldr	r3, [pc, #104]	; (959b4 <DD_CONFIG_TIMER+0x90>)
   9594c:	4610      	mov	r0, r2
   9594e:	4798      	blx	r3
   95950:	4603      	mov	r3, r0
   95952:	460c      	mov	r4, r1
   95954:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   95958:	4b17      	ldr	r3, [pc, #92]	; (959b8 <DD_CONFIG_TIMER+0x94>)
   9595a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   9595e:	4798      	blx	r3
   95960:	4603      	mov	r3, r0
   95962:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   95964:	79fb      	ldrb	r3, [r7, #7]
   95966:	2b01      	cmp	r3, #1
   95968:	d00a      	beq.n	95980 <DD_CONFIG_TIMER+0x5c>
   9596a:	2b02      	cmp	r3, #2
   9596c:	d011      	beq.n	95992 <DD_CONFIG_TIMER+0x6e>
   9596e:	2b00      	cmp	r3, #0
   95970:	d118      	bne.n	959a4 <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   95972:	68fb      	ldr	r3, [r7, #12]
   95974:	221b      	movs	r2, #27
   95976:	69f9      	ldr	r1, [r7, #28]
   95978:	4810      	ldr	r0, [pc, #64]	; (959bc <DD_CONFIG_TIMER+0x98>)
   9597a:	4c11      	ldr	r4, [pc, #68]	; (959c0 <DD_CONFIG_TIMER+0x9c>)
   9597c:	47a0      	blx	r4
		break;
   9597e:	e011      	b.n	959a4 <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   95980:	4b10      	ldr	r3, [pc, #64]	; (959c4 <DD_CONFIG_TIMER+0xa0>)
   95982:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   95984:	68fb      	ldr	r3, [r7, #12]
   95986:	221e      	movs	r2, #30
   95988:	69f9      	ldr	r1, [r7, #28]
   9598a:	480f      	ldr	r0, [pc, #60]	; (959c8 <DD_CONFIG_TIMER+0xa4>)
   9598c:	4c0c      	ldr	r4, [pc, #48]	; (959c0 <DD_CONFIG_TIMER+0x9c>)
   9598e:	47a0      	blx	r4
		break;
   95990:	e008      	b.n	959a4 <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   95992:	4b0e      	ldr	r3, [pc, #56]	; (959cc <DD_CONFIG_TIMER+0xa8>)
   95994:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   95996:	68fb      	ldr	r3, [r7, #12]
   95998:	2221      	movs	r2, #33	; 0x21
   9599a:	69f9      	ldr	r1, [r7, #28]
   9599c:	480c      	ldr	r0, [pc, #48]	; (959d0 <DD_CONFIG_TIMER+0xac>)
   9599e:	4c08      	ldr	r4, [pc, #32]	; (959c0 <DD_CONFIG_TIMER+0x9c>)
   959a0:	47a0      	blx	r4
		
		break;
   959a2:	bf00      	nop
		
	}
}
   959a4:	bf00      	nop
   959a6:	4618      	mov	r0, r3
   959a8:	3724      	adds	r7, #36	; 0x24
   959aa:	46bd      	mov	sp, r7
   959ac:	bd90      	pop	{r4, r7, pc}
   959ae:	bf00      	nop
   959b0:	0501bd00 	.word	0x0501bd00
   959b4:	000a1d41 	.word	0x000a1d41
   959b8:	000a2391 	.word	0x000a2391
   959bc:	40080000 	.word	0x40080000
   959c0:	000961a5 	.word	0x000961a5
   959c4:	00321161 	.word	0x00321161
   959c8:	40084000 	.word	0x40084000
   959cc:	001e0a6d 	.word	0x001e0a6d
   959d0:	40088000 	.word	0x40088000

000959d4 <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   959d4:	b580      	push	{r7, lr}
   959d6:	b082      	sub	sp, #8
   959d8:	af00      	add	r7, sp, #0
   959da:	4603      	mov	r3, r0
   959dc:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   959de:	79fb      	ldrb	r3, [r7, #7]
   959e0:	3b01      	subs	r3, #1
   959e2:	2b12      	cmp	r3, #18
   959e4:	f200 82b3 	bhi.w	95f4e <DD_SET_FLOW_PATH+0x57a>
   959e8:	a201      	add	r2, pc, #4	; (adr r2, 959f0 <DD_SET_FLOW_PATH+0x1c>)
   959ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   959ee:	bf00      	nop
   959f0:	00095aef 	.word	0x00095aef
   959f4:	00095b69 	.word	0x00095b69
   959f8:	00095be3 	.word	0x00095be3
   959fc:	00095c3f 	.word	0x00095c3f
   95a00:	00095cb1 	.word	0x00095cb1
   95a04:	00095d39 	.word	0x00095d39
   95a08:	00095dc1 	.word	0x00095dc1
   95a0c:	00095f4f 	.word	0x00095f4f
   95a10:	00095f4f 	.word	0x00095f4f
   95a14:	00095e23 	.word	0x00095e23
   95a18:	00095e6d 	.word	0x00095e6d
   95a1c:	00095f4f 	.word	0x00095f4f
   95a20:	00095f4f 	.word	0x00095f4f
   95a24:	00095f4f 	.word	0x00095f4f
   95a28:	00095f4f 	.word	0x00095f4f
   95a2c:	00095f4f 	.word	0x00095f4f
   95a30:	00095a6f 	.word	0x00095a6f
   95a34:	00095eb7 	.word	0x00095eb7
   95a38:	00095a3d 	.word	0x00095a3d
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   95a3c:	2005      	movs	r0, #5
   95a3e:	4b97      	ldr	r3, [pc, #604]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a40:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   95a42:	2006      	movs	r0, #6
   95a44:	4b95      	ldr	r3, [pc, #596]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a46:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   95a48:	2007      	movs	r0, #7
   95a4a:	4b94      	ldr	r3, [pc, #592]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a4c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   95a4e:	2008      	movs	r0, #8
   95a50:	4b92      	ldr	r3, [pc, #584]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a52:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   95a54:	2009      	movs	r0, #9
   95a56:	4b91      	ldr	r3, [pc, #580]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a58:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   95a5a:	200a      	movs	r0, #10
   95a5c:	4b8f      	ldr	r3, [pc, #572]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a5e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   95a60:	200b      	movs	r0, #11
   95a62:	4b8e      	ldr	r3, [pc, #568]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a64:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   95a66:	200c      	movs	r0, #12
   95a68:	4b8c      	ldr	r3, [pc, #560]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a6a:	4798      	blx	r3
		break;
   95a6c:	e26f      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   95a6e:	2001      	movs	r0, #1
   95a70:	4b8a      	ldr	r3, [pc, #552]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a72:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   95a74:	2002      	movs	r0, #2
   95a76:	4b89      	ldr	r3, [pc, #548]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a78:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   95a7a:	2003      	movs	r0, #3
   95a7c:	4b87      	ldr	r3, [pc, #540]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a7e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   95a80:	2004      	movs	r0, #4
   95a82:	4b86      	ldr	r3, [pc, #536]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a84:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   95a86:	2005      	movs	r0, #5
   95a88:	4b84      	ldr	r3, [pc, #528]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a8a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   95a8c:	2006      	movs	r0, #6
   95a8e:	4b83      	ldr	r3, [pc, #524]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a90:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95a92:	2007      	movs	r0, #7
   95a94:	4b81      	ldr	r3, [pc, #516]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a96:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95a98:	2008      	movs	r0, #8
   95a9a:	4b80      	ldr	r3, [pc, #512]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95a9c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95a9e:	2009      	movs	r0, #9
   95aa0:	4b7e      	ldr	r3, [pc, #504]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95aa2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95aa4:	200a      	movs	r0, #10
   95aa6:	4b7d      	ldr	r3, [pc, #500]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95aa8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95aaa:	200b      	movs	r0, #11
   95aac:	4b7b      	ldr	r3, [pc, #492]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95aae:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95ab0:	200c      	movs	r0, #12
   95ab2:	4b7a      	ldr	r3, [pc, #488]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ab4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   95ab6:	200d      	movs	r0, #13
   95ab8:	4b78      	ldr	r3, [pc, #480]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95aba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   95abc:	200e      	movs	r0, #14
   95abe:	4b77      	ldr	r3, [pc, #476]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ac0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   95ac2:	200f      	movs	r0, #15
   95ac4:	4b75      	ldr	r3, [pc, #468]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ac6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   95ac8:	2010      	movs	r0, #16
   95aca:	4b74      	ldr	r3, [pc, #464]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95acc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   95ace:	2011      	movs	r0, #17
   95ad0:	4b72      	ldr	r3, [pc, #456]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ad2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   95ad4:	2012      	movs	r0, #18
   95ad6:	4b71      	ldr	r3, [pc, #452]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ad8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   95ada:	2013      	movs	r0, #19
   95adc:	4b6f      	ldr	r3, [pc, #444]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ade:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   95ae0:	2002      	movs	r0, #2
   95ae2:	4b6f      	ldr	r3, [pc, #444]	; (95ca0 <DD_SET_FLOW_PATH+0x2cc>)
   95ae4:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   95ae6:	2001      	movs	r0, #1
   95ae8:	4b6d      	ldr	r3, [pc, #436]	; (95ca0 <DD_SET_FLOW_PATH+0x2cc>)
   95aea:	4798      	blx	r3
				
				
		break;
   95aec:	e22f      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   95aee:	2001      	movs	r0, #1
   95af0:	4b6c      	ldr	r3, [pc, #432]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95af2:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   95af4:	2003      	movs	r0, #3
   95af6:	4b69      	ldr	r3, [pc, #420]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95af8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   95afa:	2004      	movs	r0, #4
   95afc:	4b67      	ldr	r3, [pc, #412]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95afe:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   95b00:	2005      	movs	r0, #5
   95b02:	4b66      	ldr	r3, [pc, #408]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b04:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   95b06:	2006      	movs	r0, #6
   95b08:	4b64      	ldr	r3, [pc, #400]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b0a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95b0c:	2007      	movs	r0, #7
   95b0e:	4b63      	ldr	r3, [pc, #396]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b10:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95b12:	2008      	movs	r0, #8
   95b14:	4b61      	ldr	r3, [pc, #388]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b16:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95b18:	2009      	movs	r0, #9
   95b1a:	4b60      	ldr	r3, [pc, #384]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b1c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95b1e:	200a      	movs	r0, #10
   95b20:	4b5e      	ldr	r3, [pc, #376]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b22:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95b24:	200b      	movs	r0, #11
   95b26:	4b5d      	ldr	r3, [pc, #372]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b28:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95b2a:	200c      	movs	r0, #12
   95b2c:	4b5b      	ldr	r3, [pc, #364]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b2e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   95b30:	200d      	movs	r0, #13
   95b32:	4b5a      	ldr	r3, [pc, #360]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b34:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   95b36:	200e      	movs	r0, #14
   95b38:	4b58      	ldr	r3, [pc, #352]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b3a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   95b3c:	200f      	movs	r0, #15
   95b3e:	4b59      	ldr	r3, [pc, #356]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95b40:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   95b42:	2010      	movs	r0, #16
   95b44:	4b55      	ldr	r3, [pc, #340]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b46:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   95b48:	2011      	movs	r0, #17
   95b4a:	4b54      	ldr	r3, [pc, #336]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b4c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   95b4e:	2012      	movs	r0, #18
   95b50:	4b54      	ldr	r3, [pc, #336]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95b52:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   95b54:	2013      	movs	r0, #19
   95b56:	4b51      	ldr	r3, [pc, #324]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b58:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   95b5a:	2002      	movs	r0, #2
   95b5c:	4b50      	ldr	r3, [pc, #320]	; (95ca0 <DD_SET_FLOW_PATH+0x2cc>)
   95b5e:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   95b60:	2001      	movs	r0, #1
   95b62:	4b4f      	ldr	r3, [pc, #316]	; (95ca0 <DD_SET_FLOW_PATH+0x2cc>)
   95b64:	4798      	blx	r3
		
		
		break;
   95b66:	e1f2      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   95b68:	2001      	movs	r0, #1
   95b6a:	4b4e      	ldr	r3, [pc, #312]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95b6c:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   95b6e:	2003      	movs	r0, #3
   95b70:	4b4a      	ldr	r3, [pc, #296]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b72:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   95b74:	2004      	movs	r0, #4
   95b76:	4b49      	ldr	r3, [pc, #292]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b78:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   95b7a:	2005      	movs	r0, #5
   95b7c:	4b47      	ldr	r3, [pc, #284]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b7e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   95b80:	2006      	movs	r0, #6
   95b82:	4b46      	ldr	r3, [pc, #280]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b84:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95b86:	2007      	movs	r0, #7
   95b88:	4b44      	ldr	r3, [pc, #272]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b8a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95b8c:	2008      	movs	r0, #8
   95b8e:	4b43      	ldr	r3, [pc, #268]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b90:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95b92:	2009      	movs	r0, #9
   95b94:	4b41      	ldr	r3, [pc, #260]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b96:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95b98:	200a      	movs	r0, #10
   95b9a:	4b40      	ldr	r3, [pc, #256]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95b9c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95b9e:	200b      	movs	r0, #11
   95ba0:	4b3e      	ldr	r3, [pc, #248]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ba2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95ba4:	200c      	movs	r0, #12
   95ba6:	4b3d      	ldr	r3, [pc, #244]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95ba8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   95baa:	200d      	movs	r0, #13
   95bac:	4b3b      	ldr	r3, [pc, #236]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bae:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   95bb0:	200e      	movs	r0, #14
   95bb2:	4b3a      	ldr	r3, [pc, #232]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bb4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   95bb6:	200f      	movs	r0, #15
   95bb8:	4b38      	ldr	r3, [pc, #224]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   95bbc:	2010      	movs	r0, #16
   95bbe:	4b37      	ldr	r3, [pc, #220]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bc0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   95bc2:	2011      	movs	r0, #17
   95bc4:	4b35      	ldr	r3, [pc, #212]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bc6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   95bc8:	2012      	movs	r0, #18
   95bca:	4b36      	ldr	r3, [pc, #216]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95bcc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   95bce:	2013      	movs	r0, #19
   95bd0:	4b32      	ldr	r3, [pc, #200]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bd2:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   95bd4:	2001      	movs	r0, #1
   95bd6:	4b34      	ldr	r3, [pc, #208]	; (95ca8 <DD_SET_FLOW_PATH+0x2d4>)
   95bd8:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   95bda:	2002      	movs	r0, #2
   95bdc:	4b30      	ldr	r3, [pc, #192]	; (95ca0 <DD_SET_FLOW_PATH+0x2cc>)
   95bde:	4798      	blx	r3
		
		break;
   95be0:	e1b5      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   95be2:	2005      	movs	r0, #5
   95be4:	4b2d      	ldr	r3, [pc, #180]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95be6:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   95be8:	2008      	movs	r0, #8
   95bea:	4b2c      	ldr	r3, [pc, #176]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bec:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   95bee:	200a      	movs	r0, #10
   95bf0:	4b2a      	ldr	r3, [pc, #168]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bf2:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   95bf4:	200b      	movs	r0, #11
   95bf6:	4b29      	ldr	r3, [pc, #164]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95bf8:	4798      	blx	r3
				cl_wait(50);
   95bfa:	2032      	movs	r0, #50	; 0x32
   95bfc:	4b2b      	ldr	r3, [pc, #172]	; (95cac <DD_SET_FLOW_PATH+0x2d8>)
   95bfe:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   95c00:	2006      	movs	r0, #6
   95c02:	4b28      	ldr	r3, [pc, #160]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c04:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   95c06:	2007      	movs	r0, #7
   95c08:	4b26      	ldr	r3, [pc, #152]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c0a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   95c0c:	2009      	movs	r0, #9
   95c0e:	4b25      	ldr	r3, [pc, #148]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c10:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   95c12:	200c      	movs	r0, #12
   95c14:	4b23      	ldr	r3, [pc, #140]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c16:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   95c18:	200d      	movs	r0, #13
   95c1a:	4b20      	ldr	r3, [pc, #128]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c1c:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   95c1e:	200e      	movs	r0, #14
   95c20:	4b1e      	ldr	r3, [pc, #120]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c22:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   95c24:	200f      	movs	r0, #15
   95c26:	4b1f      	ldr	r3, [pc, #124]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c28:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   95c2a:	2010      	movs	r0, #16
   95c2c:	4b1b      	ldr	r3, [pc, #108]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c2e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   95c30:	2011      	movs	r0, #17
   95c32:	4b1c      	ldr	r3, [pc, #112]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c34:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   95c36:	2012      	movs	r0, #18
   95c38:	4b1a      	ldr	r3, [pc, #104]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c3a:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   95c3c:	e187      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   95c3e:	2006      	movs	r0, #6
   95c40:	4b16      	ldr	r3, [pc, #88]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c42:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95c44:	2007      	movs	r0, #7
   95c46:	4b15      	ldr	r3, [pc, #84]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c48:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95c4a:	2009      	movs	r0, #9
   95c4c:	4b13      	ldr	r3, [pc, #76]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c4e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95c50:	200c      	movs	r0, #12
   95c52:	4b12      	ldr	r3, [pc, #72]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c54:	4798      	blx	r3
		cl_wait(50);
   95c56:	2032      	movs	r0, #50	; 0x32
   95c58:	4b14      	ldr	r3, [pc, #80]	; (95cac <DD_SET_FLOW_PATH+0x2d8>)
   95c5a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   95c5c:	2005      	movs	r0, #5
   95c5e:	4b11      	ldr	r3, [pc, #68]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c60:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   95c62:	2008      	movs	r0, #8
   95c64:	4b0f      	ldr	r3, [pc, #60]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c66:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   95c68:	200a      	movs	r0, #10
   95c6a:	4b0e      	ldr	r3, [pc, #56]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c6c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   95c6e:	200b      	movs	r0, #11
   95c70:	4b0c      	ldr	r3, [pc, #48]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c72:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   95c74:	200d      	movs	r0, #13
   95c76:	4b09      	ldr	r3, [pc, #36]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c78:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   95c7a:	200e      	movs	r0, #14
   95c7c:	4b07      	ldr	r3, [pc, #28]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c7e:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   95c80:	200f      	movs	r0, #15
   95c82:	4b08      	ldr	r3, [pc, #32]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c84:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   95c86:	2010      	movs	r0, #16
   95c88:	4b04      	ldr	r3, [pc, #16]	; (95c9c <DD_SET_FLOW_PATH+0x2c8>)
   95c8a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   95c8c:	2011      	movs	r0, #17
   95c8e:	4b05      	ldr	r3, [pc, #20]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c90:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   95c92:	2012      	movs	r0, #18
   95c94:	4b03      	ldr	r3, [pc, #12]	; (95ca4 <DD_SET_FLOW_PATH+0x2d0>)
   95c96:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   95c98:	e159      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
   95c9a:	bf00      	nop
   95c9c:	0009526d 	.word	0x0009526d
   95ca0:	00094e35 	.word	0x00094e35
   95ca4:	000951ad 	.word	0x000951ad
   95ca8:	00094c95 	.word	0x00094c95
   95cac:	00091b9d 	.word	0x00091b9d
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   95cb0:	2005      	movs	r0, #5
   95cb2:	4b94      	ldr	r3, [pc, #592]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cb4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95cb6:	2008      	movs	r0, #8
   95cb8:	4b92      	ldr	r3, [pc, #584]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95cbc:	200a      	movs	r0, #10
   95cbe:	4b91      	ldr	r3, [pc, #580]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cc0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95cc2:	200b      	movs	r0, #11
   95cc4:	4b8f      	ldr	r3, [pc, #572]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cc6:	4798      	blx	r3
		cl_wait(100);		
   95cc8:	2064      	movs	r0, #100	; 0x64
   95cca:	4b8f      	ldr	r3, [pc, #572]	; (95f08 <DD_SET_FLOW_PATH+0x534>)
   95ccc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   95cce:	2006      	movs	r0, #6
   95cd0:	4b8e      	ldr	r3, [pc, #568]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95cd2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   95cd4:	2007      	movs	r0, #7
   95cd6:	4b8d      	ldr	r3, [pc, #564]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95cd8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   95cda:	2009      	movs	r0, #9
   95cdc:	4b8b      	ldr	r3, [pc, #556]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95cde:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   95ce0:	200c      	movs	r0, #12
   95ce2:	4b8a      	ldr	r3, [pc, #552]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95ce4:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   95ce6:	4b8a      	ldr	r3, [pc, #552]	; (95f10 <DD_SET_FLOW_PATH+0x53c>)
   95ce8:	781b      	ldrb	r3, [r3, #0]
   95cea:	2b00      	cmp	r3, #0
   95cec:	d009      	beq.n	95d02 <DD_SET_FLOW_PATH+0x32e>
		{
			DD_SET_VALVE (VALVE_ID15);
   95cee:	200f      	movs	r0, #15
   95cf0:	4b86      	ldr	r3, [pc, #536]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95cf2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   95cf4:	200d      	movs	r0, #13
   95cf6:	4b83      	ldr	r3, [pc, #524]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cf8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   95cfa:	200e      	movs	r0, #14
   95cfc:	4b81      	ldr	r3, [pc, #516]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95cfe:	4798      	blx	r3
   95d00:	e008      	b.n	95d14 <DD_SET_FLOW_PATH+0x340>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   95d02:	200f      	movs	r0, #15
   95d04:	4b7f      	ldr	r3, [pc, #508]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d06:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   95d08:	200d      	movs	r0, #13
   95d0a:	4b80      	ldr	r3, [pc, #512]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d0c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   95d0e:	200e      	movs	r0, #14
   95d10:	4b7e      	ldr	r3, [pc, #504]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d12:	4798      	blx	r3
		}
		if( LoopBack)
   95d14:	4b7f      	ldr	r3, [pc, #508]	; (95f14 <DD_SET_FLOW_PATH+0x540>)
   95d16:	781b      	ldrb	r3, [r3, #0]
   95d18:	2b00      	cmp	r3, #0
   95d1a:	d006      	beq.n	95d2a <DD_SET_FLOW_PATH+0x356>
		{
			DD_SET_VALVE (VALVE_ID16);
   95d1c:	2010      	movs	r0, #16
   95d1e:	4b7b      	ldr	r3, [pc, #492]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d20:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   95d22:	2012      	movs	r0, #18
   95d24:	4b77      	ldr	r3, [pc, #476]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d26:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95d28:	e111      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   95d2a:	2010      	movs	r0, #16
   95d2c:	4b75      	ldr	r3, [pc, #468]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d2e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   95d30:	2012      	movs	r0, #18
   95d32:	4b76      	ldr	r3, [pc, #472]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d34:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95d36:	e10a      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   95d38:	2006      	movs	r0, #6
   95d3a:	4b72      	ldr	r3, [pc, #456]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d3c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95d3e:	2007      	movs	r0, #7
   95d40:	4b70      	ldr	r3, [pc, #448]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d42:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95d44:	2009      	movs	r0, #9
   95d46:	4b6f      	ldr	r3, [pc, #444]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d48:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95d4a:	200c      	movs	r0, #12
   95d4c:	4b6d      	ldr	r3, [pc, #436]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d4e:	4798      	blx	r3
		cl_wait(100);				
   95d50:	2064      	movs	r0, #100	; 0x64
   95d52:	4b6d      	ldr	r3, [pc, #436]	; (95f08 <DD_SET_FLOW_PATH+0x534>)
   95d54:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   95d56:	2005      	movs	r0, #5
   95d58:	4b6c      	ldr	r3, [pc, #432]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d5a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   95d5c:	2008      	movs	r0, #8
   95d5e:	4b6b      	ldr	r3, [pc, #428]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d60:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   95d62:	200a      	movs	r0, #10
   95d64:	4b69      	ldr	r3, [pc, #420]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d66:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   95d68:	200b      	movs	r0, #11
   95d6a:	4b68      	ldr	r3, [pc, #416]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d6c:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   95d6e:	4b68      	ldr	r3, [pc, #416]	; (95f10 <DD_SET_FLOW_PATH+0x53c>)
   95d70:	781b      	ldrb	r3, [r3, #0]
   95d72:	2b00      	cmp	r3, #0
   95d74:	d009      	beq.n	95d8a <DD_SET_FLOW_PATH+0x3b6>
		{
			DD_SET_VALVE (VALVE_ID15);
   95d76:	200f      	movs	r0, #15
   95d78:	4b64      	ldr	r3, [pc, #400]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d7a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   95d7c:	200d      	movs	r0, #13
   95d7e:	4b61      	ldr	r3, [pc, #388]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d80:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   95d82:	200e      	movs	r0, #14
   95d84:	4b5f      	ldr	r3, [pc, #380]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d86:	4798      	blx	r3
   95d88:	e008      	b.n	95d9c <DD_SET_FLOW_PATH+0x3c8>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   95d8a:	200f      	movs	r0, #15
   95d8c:	4b5d      	ldr	r3, [pc, #372]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95d8e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   95d90:	200d      	movs	r0, #13
   95d92:	4b5e      	ldr	r3, [pc, #376]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d94:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   95d96:	200e      	movs	r0, #14
   95d98:	4b5c      	ldr	r3, [pc, #368]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95d9a:	4798      	blx	r3
		}
		
		if( LoopBack)
   95d9c:	4b5d      	ldr	r3, [pc, #372]	; (95f14 <DD_SET_FLOW_PATH+0x540>)
   95d9e:	781b      	ldrb	r3, [r3, #0]
   95da0:	2b00      	cmp	r3, #0
   95da2:	d006      	beq.n	95db2 <DD_SET_FLOW_PATH+0x3de>
		{
			DD_SET_VALVE (VALVE_ID16);
   95da4:	2010      	movs	r0, #16
   95da6:	4b59      	ldr	r3, [pc, #356]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95da8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   95daa:	2012      	movs	r0, #18
   95dac:	4b55      	ldr	r3, [pc, #340]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95dae:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95db0:	e0cd      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   95db2:	2012      	movs	r0, #18
   95db4:	4b55      	ldr	r3, [pc, #340]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95db6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   95db8:	2010      	movs	r0, #16
   95dba:	4b52      	ldr	r3, [pc, #328]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95dbc:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95dbe:	e0c6      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   95dc0:	2004      	movs	r0, #4
   95dc2:	4b50      	ldr	r3, [pc, #320]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95dc4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   95dc6:	2005      	movs	r0, #5
   95dc8:	4b50      	ldr	r3, [pc, #320]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95dca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   95dcc:	2006      	movs	r0, #6
   95dce:	4b4f      	ldr	r3, [pc, #316]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95dd0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   95dd2:	2007      	movs	r0, #7
   95dd4:	4b4d      	ldr	r3, [pc, #308]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95dd6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   95dd8:	2008      	movs	r0, #8
   95dda:	4b4c      	ldr	r3, [pc, #304]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95ddc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   95dde:	2009      	movs	r0, #9
   95de0:	4b4a      	ldr	r3, [pc, #296]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95de2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   95de4:	200a      	movs	r0, #10
   95de6:	4b49      	ldr	r3, [pc, #292]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95de8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   95dea:	200b      	movs	r0, #11
   95dec:	4b47      	ldr	r3, [pc, #284]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95dee:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   95df0:	200c      	movs	r0, #12
   95df2:	4b46      	ldr	r3, [pc, #280]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95df4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   95df6:	200d      	movs	r0, #13
   95df8:	4b44      	ldr	r3, [pc, #272]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95dfa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   95dfc:	200e      	movs	r0, #14
   95dfe:	4b43      	ldr	r3, [pc, #268]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e00:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   95e02:	200f      	movs	r0, #15
   95e04:	4b41      	ldr	r3, [pc, #260]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e06:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   95e08:	2010      	movs	r0, #16
   95e0a:	4b3e      	ldr	r3, [pc, #248]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e0c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   95e0e:	2011      	movs	r0, #17
   95e10:	4b3e      	ldr	r3, [pc, #248]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e12:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   95e14:	2012      	movs	r0, #18
   95e16:	4b3d      	ldr	r3, [pc, #244]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e18:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);		
   95e1a:	2013      	movs	r0, #19
   95e1c:	4b39      	ldr	r3, [pc, #228]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e1e:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   95e20:	e095      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   95e22:	2005      	movs	r0, #5
   95e24:	4b37      	ldr	r3, [pc, #220]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e26:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95e28:	2008      	movs	r0, #8
   95e2a:	4b36      	ldr	r3, [pc, #216]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95e2e:	200a      	movs	r0, #10
   95e30:	4b34      	ldr	r3, [pc, #208]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95e34:	200b      	movs	r0, #11
   95e36:	4b33      	ldr	r3, [pc, #204]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e38:	4798      	blx	r3
		cl_wait(100);		
   95e3a:	2064      	movs	r0, #100	; 0x64
   95e3c:	4b32      	ldr	r3, [pc, #200]	; (95f08 <DD_SET_FLOW_PATH+0x534>)
   95e3e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   95e40:	2006      	movs	r0, #6
   95e42:	4b32      	ldr	r3, [pc, #200]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e44:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   95e46:	2007      	movs	r0, #7
   95e48:	4b30      	ldr	r3, [pc, #192]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e4a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   95e4c:	2009      	movs	r0, #9
   95e4e:	4b2f      	ldr	r3, [pc, #188]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e50:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   95e52:	200c      	movs	r0, #12
   95e54:	4b2d      	ldr	r3, [pc, #180]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e56:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   95e58:	2010      	movs	r0, #16
   95e5a:	4b2c      	ldr	r3, [pc, #176]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   95e5e:	200f      	movs	r0, #15
   95e60:	4b28      	ldr	r3, [pc, #160]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e62:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   95e64:	2012      	movs	r0, #18
   95e66:	4b27      	ldr	r3, [pc, #156]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e68:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95e6a:	e070      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   95e6c:	2006      	movs	r0, #6
   95e6e:	4b25      	ldr	r3, [pc, #148]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e70:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95e72:	2007      	movs	r0, #7
   95e74:	4b23      	ldr	r3, [pc, #140]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e76:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95e78:	2009      	movs	r0, #9
   95e7a:	4b22      	ldr	r3, [pc, #136]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e7c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95e7e:	200c      	movs	r0, #12
   95e80:	4b20      	ldr	r3, [pc, #128]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95e82:	4798      	blx	r3
		cl_wait(100);				
   95e84:	2064      	movs	r0, #100	; 0x64
   95e86:	4b20      	ldr	r3, [pc, #128]	; (95f08 <DD_SET_FLOW_PATH+0x534>)
   95e88:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   95e8a:	2005      	movs	r0, #5
   95e8c:	4b1f      	ldr	r3, [pc, #124]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e8e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   95e90:	2008      	movs	r0, #8
   95e92:	4b1e      	ldr	r3, [pc, #120]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e94:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   95e96:	200a      	movs	r0, #10
   95e98:	4b1c      	ldr	r3, [pc, #112]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95e9a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   95e9c:	200b      	movs	r0, #11
   95e9e:	4b1b      	ldr	r3, [pc, #108]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95ea0:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   95ea2:	200f      	movs	r0, #15
   95ea4:	4b17      	ldr	r3, [pc, #92]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ea6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   95ea8:	2010      	movs	r0, #16
   95eaa:	4b18      	ldr	r3, [pc, #96]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95eac:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   95eae:	2012      	movs	r0, #18
   95eb0:	4b14      	ldr	r3, [pc, #80]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95eb2:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   95eb4:	e04b      	b.n	95f4e <DD_SET_FLOW_PATH+0x57a>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   95eb6:	2005      	movs	r0, #5
   95eb8:	4b12      	ldr	r3, [pc, #72]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95eba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   95ebc:	2006      	movs	r0, #6
   95ebe:	4b11      	ldr	r3, [pc, #68]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ec0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   95ec2:	2007      	movs	r0, #7
   95ec4:	4b0f      	ldr	r3, [pc, #60]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ec6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   95ec8:	2008      	movs	r0, #8
   95eca:	4b0e      	ldr	r3, [pc, #56]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ecc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   95ece:	2009      	movs	r0, #9
   95ed0:	4b0c      	ldr	r3, [pc, #48]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ed2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   95ed4:	200a      	movs	r0, #10
   95ed6:	4b0b      	ldr	r3, [pc, #44]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ed8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   95eda:	200b      	movs	r0, #11
   95edc:	4b09      	ldr	r3, [pc, #36]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ede:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   95ee0:	200c      	movs	r0, #12
   95ee2:	4b08      	ldr	r3, [pc, #32]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ee4:	4798      	blx	r3

		if( ByPass)
   95ee6:	4b0a      	ldr	r3, [pc, #40]	; (95f10 <DD_SET_FLOW_PATH+0x53c>)
   95ee8:	781b      	ldrb	r3, [r3, #0]
   95eea:	2b00      	cmp	r3, #0
   95eec:	d014      	beq.n	95f18 <DD_SET_FLOW_PATH+0x544>
		{
			DD_SET_VALVE (VALVE_ID15);
   95eee:	200f      	movs	r0, #15
   95ef0:	4b06      	ldr	r3, [pc, #24]	; (95f0c <DD_SET_FLOW_PATH+0x538>)
   95ef2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   95ef4:	200d      	movs	r0, #13
   95ef6:	4b03      	ldr	r3, [pc, #12]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95ef8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   95efa:	200e      	movs	r0, #14
   95efc:	4b01      	ldr	r3, [pc, #4]	; (95f04 <DD_SET_FLOW_PATH+0x530>)
   95efe:	4798      	blx	r3
   95f00:	e013      	b.n	95f2a <DD_SET_FLOW_PATH+0x556>
   95f02:	bf00      	nop
   95f04:	0009526d 	.word	0x0009526d
   95f08:	00091b9d 	.word	0x00091b9d
   95f0c:	000951ad 	.word	0x000951ad
   95f10:	200726bc 	.word	0x200726bc
   95f14:	200726bd 	.word	0x200726bd
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   95f18:	200f      	movs	r0, #15
   95f1a:	4b0f      	ldr	r3, [pc, #60]	; (95f58 <DD_SET_FLOW_PATH+0x584>)
   95f1c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   95f1e:	200d      	movs	r0, #13
   95f20:	4b0e      	ldr	r3, [pc, #56]	; (95f5c <DD_SET_FLOW_PATH+0x588>)
   95f22:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   95f24:	200e      	movs	r0, #14
   95f26:	4b0d      	ldr	r3, [pc, #52]	; (95f5c <DD_SET_FLOW_PATH+0x588>)
   95f28:	4798      	blx	r3
		}
		if( LoopBack)
   95f2a:	4b0d      	ldr	r3, [pc, #52]	; (95f60 <DD_SET_FLOW_PATH+0x58c>)
   95f2c:	781b      	ldrb	r3, [r3, #0]
   95f2e:	2b00      	cmp	r3, #0
   95f30:	d006      	beq.n	95f40 <DD_SET_FLOW_PATH+0x56c>
		{
			DD_SET_VALVE (VALVE_ID16);
   95f32:	2010      	movs	r0, #16
   95f34:	4b09      	ldr	r3, [pc, #36]	; (95f5c <DD_SET_FLOW_PATH+0x588>)
   95f36:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   95f38:	2012      	movs	r0, #18
   95f3a:	4b07      	ldr	r3, [pc, #28]	; (95f58 <DD_SET_FLOW_PATH+0x584>)
   95f3c:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   95f3e:	e005      	b.n	95f4c <DD_SET_FLOW_PATH+0x578>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   95f40:	2010      	movs	r0, #16
   95f42:	4b05      	ldr	r3, [pc, #20]	; (95f58 <DD_SET_FLOW_PATH+0x584>)
   95f44:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   95f46:	2012      	movs	r0, #18
   95f48:	4b04      	ldr	r3, [pc, #16]	; (95f5c <DD_SET_FLOW_PATH+0x588>)
   95f4a:	4798      	blx	r3
		}
		break;
   95f4c:	bf00      	nop
	}
	
	return 0;
   95f4e:	2300      	movs	r3, #0
	
}
   95f50:	4618      	mov	r0, r3
   95f52:	3708      	adds	r7, #8
   95f54:	46bd      	mov	sp, r7
   95f56:	bd80      	pop	{r7, pc}
   95f58:	0009526d 	.word	0x0009526d
   95f5c:	000951ad 	.word	0x000951ad
   95f60:	200726bd 	.word	0x200726bd

00095f64 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   95f64:	b580      	push	{r7, lr}
   95f66:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   95f68:	210d      	movs	r1, #13
   95f6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95f6e:	4b0c      	ldr	r3, [pc, #48]	; (95fa0 <DD_LATCH_STROBE_X1_X16+0x3c>)
   95f70:	4798      	blx	r3
	cl_wait(2);
   95f72:	2002      	movs	r0, #2
   95f74:	4b0b      	ldr	r3, [pc, #44]	; (95fa4 <DD_LATCH_STROBE_X1_X16+0x40>)
   95f76:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   95f78:	210d      	movs	r1, #13
   95f7a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95f7e:	4b0a      	ldr	r3, [pc, #40]	; (95fa8 <DD_LATCH_STROBE_X1_X16+0x44>)
   95f80:	4798      	blx	r3
	cl_wait(2);
   95f82:	2002      	movs	r0, #2
   95f84:	4b07      	ldr	r3, [pc, #28]	; (95fa4 <DD_LATCH_STROBE_X1_X16+0x40>)
   95f86:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   95f88:	210d      	movs	r1, #13
   95f8a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95f8e:	4b04      	ldr	r3, [pc, #16]	; (95fa0 <DD_LATCH_STROBE_X1_X16+0x3c>)
   95f90:	4798      	blx	r3
	cl_wait(2);
   95f92:	2002      	movs	r0, #2
   95f94:	4b03      	ldr	r3, [pc, #12]	; (95fa4 <DD_LATCH_STROBE_X1_X16+0x40>)
   95f96:	4798      	blx	r3
	
	return 0;
   95f98:	2300      	movs	r3, #0
}
   95f9a:	4618      	mov	r0, r3
   95f9c:	bd80      	pop	{r7, pc}
   95f9e:	bf00      	nop
   95fa0:	00093d5d 	.word	0x00093d5d
   95fa4:	00091b9d 	.word	0x00091b9d
   95fa8:	00093cd9 	.word	0x00093cd9

00095fac <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   95fac:	b580      	push	{r7, lr}
   95fae:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   95fb0:	210b      	movs	r1, #11
   95fb2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95fb6:	4b0c      	ldr	r3, [pc, #48]	; (95fe8 <DD_LATCH_STROBE_X17_X20+0x3c>)
   95fb8:	4798      	blx	r3
	cl_wait(2);
   95fba:	2002      	movs	r0, #2
   95fbc:	4b0b      	ldr	r3, [pc, #44]	; (95fec <DD_LATCH_STROBE_X17_X20+0x40>)
   95fbe:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   95fc0:	210b      	movs	r1, #11
   95fc2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95fc6:	4b0a      	ldr	r3, [pc, #40]	; (95ff0 <DD_LATCH_STROBE_X17_X20+0x44>)
   95fc8:	4798      	blx	r3
	cl_wait(2);
   95fca:	2002      	movs	r0, #2
   95fcc:	4b07      	ldr	r3, [pc, #28]	; (95fec <DD_LATCH_STROBE_X17_X20+0x40>)
   95fce:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   95fd0:	210b      	movs	r1, #11
   95fd2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   95fd6:	4b04      	ldr	r3, [pc, #16]	; (95fe8 <DD_LATCH_STROBE_X17_X20+0x3c>)
   95fd8:	4798      	blx	r3
	cl_wait(2);
   95fda:	2002      	movs	r0, #2
   95fdc:	4b03      	ldr	r3, [pc, #12]	; (95fec <DD_LATCH_STROBE_X17_X20+0x40>)
   95fde:	4798      	blx	r3
	
	return 0;
   95fe0:	2300      	movs	r3, #0
}
   95fe2:	4618      	mov	r0, r3
   95fe4:	bd80      	pop	{r7, pc}
   95fe6:	bf00      	nop
   95fe8:	00093d5d 	.word	0x00093d5d
   95fec:	00091b9d 	.word	0x00091b9d
   95ff0:	00093cd9 	.word	0x00093cd9

00095ff4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   95ff4:	b480      	push	{r7}
   95ff6:	b083      	sub	sp, #12
   95ff8:	af00      	add	r7, sp, #0
   95ffa:	4603      	mov	r3, r0
   95ffc:	6039      	str	r1, [r7, #0]
   95ffe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   96000:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96004:	2b00      	cmp	r3, #0
   96006:	da0b      	bge.n	96020 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   96008:	490d      	ldr	r1, [pc, #52]	; (96040 <NVIC_SetPriority+0x4c>)
   9600a:	79fb      	ldrb	r3, [r7, #7]
   9600c:	f003 030f 	and.w	r3, r3, #15
   96010:	3b04      	subs	r3, #4
   96012:	683a      	ldr	r2, [r7, #0]
   96014:	b2d2      	uxtb	r2, r2
   96016:	0112      	lsls	r2, r2, #4
   96018:	b2d2      	uxtb	r2, r2
   9601a:	440b      	add	r3, r1
   9601c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   9601e:	e009      	b.n	96034 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   96020:	4908      	ldr	r1, [pc, #32]	; (96044 <NVIC_SetPriority+0x50>)
   96022:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96026:	683a      	ldr	r2, [r7, #0]
   96028:	b2d2      	uxtb	r2, r2
   9602a:	0112      	lsls	r2, r2, #4
   9602c:	b2d2      	uxtb	r2, r2
   9602e:	440b      	add	r3, r1
   96030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   96034:	bf00      	nop
   96036:	370c      	adds	r7, #12
   96038:	46bd      	mov	sp, r7
   9603a:	bc80      	pop	{r7}
   9603c:	4770      	bx	lr
   9603e:	bf00      	nop
   96040:	e000ed00 	.word	0xe000ed00
   96044:	e000e100 	.word	0xe000e100

00096048 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   96048:	b580      	push	{r7, lr}
   9604a:	b082      	sub	sp, #8
   9604c:	af00      	add	r7, sp, #0
   9604e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   96050:	687b      	ldr	r3, [r7, #4]
   96052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   96056:	d301      	bcc.n	9605c <SysTick_Config+0x14>
   96058:	2301      	movs	r3, #1
   9605a:	e011      	b.n	96080 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   9605c:	4a0a      	ldr	r2, [pc, #40]	; (96088 <SysTick_Config+0x40>)
   9605e:	687b      	ldr	r3, [r7, #4]
   96060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   96064:	3b01      	subs	r3, #1
   96066:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   96068:	210f      	movs	r1, #15
   9606a:	f04f 30ff 	mov.w	r0, #4294967295
   9606e:	4b07      	ldr	r3, [pc, #28]	; (9608c <SysTick_Config+0x44>)
   96070:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   96072:	4b05      	ldr	r3, [pc, #20]	; (96088 <SysTick_Config+0x40>)
   96074:	2200      	movs	r2, #0
   96076:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   96078:	4b03      	ldr	r3, [pc, #12]	; (96088 <SysTick_Config+0x40>)
   9607a:	2207      	movs	r2, #7
   9607c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   9607e:	2300      	movs	r3, #0
}
   96080:	4618      	mov	r0, r3
   96082:	3708      	adds	r7, #8
   96084:	46bd      	mov	sp, r7
   96086:	bd80      	pop	{r7, pc}
   96088:	e000e010 	.word	0xe000e010
   9608c:	00095ff5 	.word	0x00095ff5

00096090 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   96090:	b480      	push	{r7}
   96092:	b083      	sub	sp, #12
   96094:	af00      	add	r7, sp, #0
   96096:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   96098:	687b      	ldr	r3, [r7, #4]
   9609a:	2b07      	cmp	r3, #7
   9609c:	d825      	bhi.n	960ea <osc_get_rate+0x5a>
   9609e:	a201      	add	r2, pc, #4	; (adr r2, 960a4 <osc_get_rate+0x14>)
   960a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   960a4:	000960c5 	.word	0x000960c5
   960a8:	000960cb 	.word	0x000960cb
   960ac:	000960d1 	.word	0x000960d1
   960b0:	000960d7 	.word	0x000960d7
   960b4:	000960db 	.word	0x000960db
   960b8:	000960df 	.word	0x000960df
   960bc:	000960e3 	.word	0x000960e3
   960c0:	000960e7 	.word	0x000960e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   960c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   960c8:	e010      	b.n	960ec <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   960ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   960ce:	e00d      	b.n	960ec <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   960d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   960d4:	e00a      	b.n	960ec <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   960d6:	4b08      	ldr	r3, [pc, #32]	; (960f8 <osc_get_rate+0x68>)
   960d8:	e008      	b.n	960ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   960da:	4b08      	ldr	r3, [pc, #32]	; (960fc <osc_get_rate+0x6c>)
   960dc:	e006      	b.n	960ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   960de:	4b08      	ldr	r3, [pc, #32]	; (96100 <osc_get_rate+0x70>)
   960e0:	e004      	b.n	960ec <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   960e2:	4b07      	ldr	r3, [pc, #28]	; (96100 <osc_get_rate+0x70>)
   960e4:	e002      	b.n	960ec <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   960e6:	4b06      	ldr	r3, [pc, #24]	; (96100 <osc_get_rate+0x70>)
   960e8:	e000      	b.n	960ec <osc_get_rate+0x5c>
#endif
	}

	return 0;
   960ea:	2300      	movs	r3, #0
}
   960ec:	4618      	mov	r0, r3
   960ee:	370c      	adds	r7, #12
   960f0:	46bd      	mov	sp, r7
   960f2:	bc80      	pop	{r7}
   960f4:	4770      	bx	lr
   960f6:	bf00      	nop
   960f8:	003d0900 	.word	0x003d0900
   960fc:	007a1200 	.word	0x007a1200
   96100:	00b71b00 	.word	0x00b71b00

00096104 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   96104:	b580      	push	{r7, lr}
   96106:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   96108:	2006      	movs	r0, #6
   9610a:	4b04      	ldr	r3, [pc, #16]	; (9611c <sysclk_get_main_hz+0x18>)
   9610c:	4798      	blx	r3
   9610e:	4602      	mov	r2, r0
   96110:	4613      	mov	r3, r2
   96112:	00db      	lsls	r3, r3, #3
   96114:	1a9b      	subs	r3, r3, r2
   96116:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   96118:	4618      	mov	r0, r3
   9611a:	bd80      	pop	{r7, pc}
   9611c:	00096091 	.word	0x00096091

00096120 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   96120:	b580      	push	{r7, lr}
   96122:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   96124:	4b02      	ldr	r3, [pc, #8]	; (96130 <sysclk_get_cpu_hz+0x10>)
   96126:	4798      	blx	r3
   96128:	4603      	mov	r3, r0
   9612a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9612c:	4618      	mov	r0, r3
   9612e:	bd80      	pop	{r7, pc}
   96130:	00096105 	.word	0x00096105

00096134 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   96134:	b580      	push	{r7, lr}
   96136:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   96138:	4b15      	ldr	r3, [pc, #84]	; (96190 <DD_INIT_TIMER+0x5c>)
   9613a:	4a16      	ldr	r2, [pc, #88]	; (96194 <DD_INIT_TIMER+0x60>)
   9613c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   96140:	4b15      	ldr	r3, [pc, #84]	; (96198 <DD_INIT_TIMER+0x64>)
   96142:	4a14      	ldr	r2, [pc, #80]	; (96194 <DD_INIT_TIMER+0x60>)
   96144:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   96148:	4b14      	ldr	r3, [pc, #80]	; (9619c <DD_INIT_TIMER+0x68>)
   9614a:	4a12      	ldr	r2, [pc, #72]	; (96194 <DD_INIT_TIMER+0x60>)
   9614c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   96150:	201b      	movs	r0, #27
   96152:	4b13      	ldr	r3, [pc, #76]	; (961a0 <DD_INIT_TIMER+0x6c>)
   96154:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   96156:	201c      	movs	r0, #28
   96158:	4b11      	ldr	r3, [pc, #68]	; (961a0 <DD_INIT_TIMER+0x6c>)
   9615a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   9615c:	201d      	movs	r0, #29
   9615e:	4b10      	ldr	r3, [pc, #64]	; (961a0 <DD_INIT_TIMER+0x6c>)
   96160:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96162:	4b0b      	ldr	r3, [pc, #44]	; (96190 <DD_INIT_TIMER+0x5c>)
   96164:	f24c 0203 	movw	r2, #49155	; 0xc003
   96168:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9616a:	4b0b      	ldr	r3, [pc, #44]	; (96198 <DD_INIT_TIMER+0x64>)
   9616c:	f24c 0203 	movw	r2, #49155	; 0xc003
   96170:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96172:	4b0a      	ldr	r3, [pc, #40]	; (9619c <DD_INIT_TIMER+0x68>)
   96174:	f24c 0203 	movw	r2, #49155	; 0xc003
   96178:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9617a:	4b05      	ldr	r3, [pc, #20]	; (96190 <DD_INIT_TIMER+0x5c>)
   9617c:	2210      	movs	r2, #16
   9617e:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   96180:	4b05      	ldr	r3, [pc, #20]	; (96198 <DD_INIT_TIMER+0x64>)
   96182:	2210      	movs	r2, #16
   96184:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   96186:	4b05      	ldr	r3, [pc, #20]	; (9619c <DD_INIT_TIMER+0x68>)
   96188:	2210      	movs	r2, #16
   9618a:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   9618c:	bf00      	nop
   9618e:	bd80      	pop	{r7, pc}
   96190:	40080000 	.word	0x40080000
   96194:	54494d00 	.word	0x54494d00
   96198:	40084000 	.word	0x40084000
   9619c:	40088000 	.word	0x40088000
   961a0:	000979c5 	.word	0x000979c5

000961a4 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   961a4:	b580      	push	{r7, lr}
   961a6:	b084      	sub	sp, #16
   961a8:	af00      	add	r7, sp, #0
   961aa:	60f8      	str	r0, [r7, #12]
   961ac:	60b9      	str	r1, [r7, #8]
   961ae:	603b      	str	r3, [r7, #0]
   961b0:	4613      	mov	r3, r2
   961b2:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   961b4:	2000      	movs	r0, #0
   961b6:	4b16      	ldr	r3, [pc, #88]	; (96210 <DD_SET_TIMER+0x6c>)
   961b8:	4798      	blx	r3
	channel=0;
   961ba:	2300      	movs	r3, #0
   961bc:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   961be:	4b15      	ldr	r3, [pc, #84]	; (96214 <DD_SET_TIMER+0x70>)
   961c0:	f24c 0203 	movw	r2, #49155	; 0xc003
   961c4:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   961c6:	683a      	ldr	r2, [r7, #0]
   961c8:	68b9      	ldr	r1, [r7, #8]
   961ca:	68f8      	ldr	r0, [r7, #12]
   961cc:	4b12      	ldr	r3, [pc, #72]	; (96218 <DD_SET_TIMER+0x74>)
   961ce:	4798      	blx	r3
	tc_start(tc, channel);
   961d0:	68b9      	ldr	r1, [r7, #8]
   961d2:	68f8      	ldr	r0, [r7, #12]
   961d4:	4b11      	ldr	r3, [pc, #68]	; (9621c <DD_SET_TIMER+0x78>)
   961d6:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   961d8:	2210      	movs	r2, #16
   961da:	68b9      	ldr	r1, [r7, #8]
   961dc:	68f8      	ldr	r0, [r7, #12]
   961de:	4b10      	ldr	r3, [pc, #64]	; (96220 <DD_SET_TIMER+0x7c>)
   961e0:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   961e2:	4b10      	ldr	r3, [pc, #64]	; (96224 <DD_SET_TIMER+0x80>)
   961e4:	4798      	blx	r3
   961e6:	4602      	mov	r2, r0
   961e8:	4b0f      	ldr	r3, [pc, #60]	; (96228 <DD_SET_TIMER+0x84>)
   961ea:	fba3 2302 	umull	r2, r3, r3, r2
   961ee:	099b      	lsrs	r3, r3, #6
   961f0:	4618      	mov	r0, r3
   961f2:	4b0e      	ldr	r3, [pc, #56]	; (9622c <DD_SET_TIMER+0x88>)
   961f4:	4798      	blx	r3
   961f6:	4603      	mov	r3, r0
   961f8:	2b00      	cmp	r3, #0
   961fa:	d003      	beq.n	96204 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   961fc:	480c      	ldr	r0, [pc, #48]	; (96230 <DD_SET_TIMER+0x8c>)
   961fe:	4b0d      	ldr	r3, [pc, #52]	; (96234 <DD_SET_TIMER+0x90>)
   96200:	4798      	blx	r3
		while (1);
   96202:	e7fe      	b.n	96202 <DD_SET_TIMER+0x5e>
	}
	
}
   96204:	bf00      	nop
   96206:	4618      	mov	r0, r3
   96208:	3710      	adds	r7, #16
   9620a:	46bd      	mov	sp, r7
   9620c:	bd80      	pop	{r7, pc}
   9620e:	bf00      	nop
   96210:	00097a45 	.word	0x00097a45
   96214:	40088000 	.word	0x40088000
   96218:	00097a9d 	.word	0x00097a9d
   9621c:	00097a7d 	.word	0x00097a7d
   96220:	00097ac1 	.word	0x00097ac1
   96224:	00096121 	.word	0x00096121
   96228:	10624dd3 	.word	0x10624dd3
   9622c:	00096049 	.word	0x00096049
   96230:	000a4adc 	.word	0x000a4adc
   96234:	000a2ce5 	.word	0x000a2ce5

00096238 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   96238:	b480      	push	{r7}
   9623a:	b083      	sub	sp, #12
   9623c:	af00      	add	r7, sp, #0
   9623e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   96240:	687b      	ldr	r3, [r7, #4]
   96242:	2b07      	cmp	r3, #7
   96244:	d825      	bhi.n	96292 <osc_get_rate+0x5a>
   96246:	a201      	add	r2, pc, #4	; (adr r2, 9624c <osc_get_rate+0x14>)
   96248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9624c:	0009626d 	.word	0x0009626d
   96250:	00096273 	.word	0x00096273
   96254:	00096279 	.word	0x00096279
   96258:	0009627f 	.word	0x0009627f
   9625c:	00096283 	.word	0x00096283
   96260:	00096287 	.word	0x00096287
   96264:	0009628b 	.word	0x0009628b
   96268:	0009628f 	.word	0x0009628f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9626c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   96270:	e010      	b.n	96294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   96272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   96276:	e00d      	b.n	96294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   96278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9627c:	e00a      	b.n	96294 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9627e:	4b08      	ldr	r3, [pc, #32]	; (962a0 <osc_get_rate+0x68>)
   96280:	e008      	b.n	96294 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   96282:	4b08      	ldr	r3, [pc, #32]	; (962a4 <osc_get_rate+0x6c>)
   96284:	e006      	b.n	96294 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   96286:	4b08      	ldr	r3, [pc, #32]	; (962a8 <osc_get_rate+0x70>)
   96288:	e004      	b.n	96294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9628a:	4b07      	ldr	r3, [pc, #28]	; (962a8 <osc_get_rate+0x70>)
   9628c:	e002      	b.n	96294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9628e:	4b06      	ldr	r3, [pc, #24]	; (962a8 <osc_get_rate+0x70>)
   96290:	e000      	b.n	96294 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   96292:	2300      	movs	r3, #0
}
   96294:	4618      	mov	r0, r3
   96296:	370c      	adds	r7, #12
   96298:	46bd      	mov	sp, r7
   9629a:	bc80      	pop	{r7}
   9629c:	4770      	bx	lr
   9629e:	bf00      	nop
   962a0:	003d0900 	.word	0x003d0900
   962a4:	007a1200 	.word	0x007a1200
   962a8:	00b71b00 	.word	0x00b71b00

000962ac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   962ac:	b580      	push	{r7, lr}
   962ae:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   962b0:	2006      	movs	r0, #6
   962b2:	4b04      	ldr	r3, [pc, #16]	; (962c4 <sysclk_get_main_hz+0x18>)
   962b4:	4798      	blx	r3
   962b6:	4602      	mov	r2, r0
   962b8:	4613      	mov	r3, r2
   962ba:	00db      	lsls	r3, r3, #3
   962bc:	1a9b      	subs	r3, r3, r2
   962be:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   962c0:	4618      	mov	r0, r3
   962c2:	bd80      	pop	{r7, pc}
   962c4:	00096239 	.word	0x00096239

000962c8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   962c8:	b580      	push	{r7, lr}
   962ca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   962cc:	4b02      	ldr	r3, [pc, #8]	; (962d8 <sysclk_get_peripheral_hz+0x10>)
   962ce:	4798      	blx	r3
   962d0:	4603      	mov	r3, r0
   962d2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   962d4:	4618      	mov	r0, r3
   962d6:	bd80      	pop	{r7, pc}
   962d8:	000962ad 	.word	0x000962ad

000962dc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   962dc:	b580      	push	{r7, lr}
   962de:	b082      	sub	sp, #8
   962e0:	af00      	add	r7, sp, #0
   962e2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   962e4:	6878      	ldr	r0, [r7, #4]
   962e6:	4b03      	ldr	r3, [pc, #12]	; (962f4 <sysclk_enable_peripheral_clock+0x18>)
   962e8:	4798      	blx	r3
}
   962ea:	bf00      	nop
   962ec:	3708      	adds	r7, #8
   962ee:	46bd      	mov	sp, r7
   962f0:	bd80      	pop	{r7, pc}
   962f2:	bf00      	nop
   962f4:	000979c5 	.word	0x000979c5

000962f8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   962f8:	b580      	push	{r7, lr}
   962fa:	b08c      	sub	sp, #48	; 0x30
   962fc:	af00      	add	r7, sp, #0
   962fe:	6078      	str	r0, [r7, #4]
   96300:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   96302:	4b40      	ldr	r3, [pc, #256]	; (96404 <usart_serial_init+0x10c>)
   96304:	4798      	blx	r3
   96306:	4603      	mov	r3, r0
   96308:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   9630a:	683b      	ldr	r3, [r7, #0]
   9630c:	681b      	ldr	r3, [r3, #0]
   9630e:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   96310:	683b      	ldr	r3, [r7, #0]
   96312:	689b      	ldr	r3, [r3, #8]
   96314:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   96316:	683b      	ldr	r3, [r7, #0]
   96318:	681b      	ldr	r3, [r3, #0]
   9631a:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   9631c:	683b      	ldr	r3, [r7, #0]
   9631e:	685b      	ldr	r3, [r3, #4]
   96320:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   96322:	683b      	ldr	r3, [r7, #0]
   96324:	689b      	ldr	r3, [r3, #8]
   96326:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   96328:	683b      	ldr	r3, [r7, #0]
   9632a:	7b1b      	ldrb	r3, [r3, #12]
   9632c:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9632e:	2300      	movs	r3, #0
   96330:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   96332:	687b      	ldr	r3, [r7, #4]
   96334:	4a34      	ldr	r2, [pc, #208]	; (96408 <usart_serial_init+0x110>)
   96336:	4293      	cmp	r3, r2
   96338:	d108      	bne.n	9634c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   9633a:	2008      	movs	r0, #8
   9633c:	4b33      	ldr	r3, [pc, #204]	; (9640c <usart_serial_init+0x114>)
   9633e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   96340:	f107 0320 	add.w	r3, r7, #32
   96344:	4619      	mov	r1, r3
   96346:	6878      	ldr	r0, [r7, #4]
   96348:	4b31      	ldr	r3, [pc, #196]	; (96410 <usart_serial_init+0x118>)
   9634a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9634c:	687b      	ldr	r3, [r7, #4]
   9634e:	4a31      	ldr	r2, [pc, #196]	; (96414 <usart_serial_init+0x11c>)
   96350:	4293      	cmp	r3, r2
   96352:	d111      	bne.n	96378 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   96354:	2011      	movs	r0, #17
   96356:	4b2d      	ldr	r3, [pc, #180]	; (9640c <usart_serial_init+0x114>)
   96358:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9635a:	4b2a      	ldr	r3, [pc, #168]	; (96404 <usart_serial_init+0x10c>)
   9635c:	4798      	blx	r3
   9635e:	4602      	mov	r2, r0
   96360:	f107 0308 	add.w	r3, r7, #8
   96364:	4619      	mov	r1, r3
   96366:	6878      	ldr	r0, [r7, #4]
   96368:	4b2b      	ldr	r3, [pc, #172]	; (96418 <usart_serial_init+0x120>)
   9636a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9636c:	6878      	ldr	r0, [r7, #4]
   9636e:	4b2b      	ldr	r3, [pc, #172]	; (9641c <usart_serial_init+0x124>)
   96370:	4798      	blx	r3
		usart_enable_rx(p_usart);
   96372:	6878      	ldr	r0, [r7, #4]
   96374:	4b2a      	ldr	r3, [pc, #168]	; (96420 <usart_serial_init+0x128>)
   96376:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   96378:	687b      	ldr	r3, [r7, #4]
   9637a:	4a2a      	ldr	r2, [pc, #168]	; (96424 <usart_serial_init+0x12c>)
   9637c:	4293      	cmp	r3, r2
   9637e:	d111      	bne.n	963a4 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   96380:	2012      	movs	r0, #18
   96382:	4b22      	ldr	r3, [pc, #136]	; (9640c <usart_serial_init+0x114>)
   96384:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   96386:	4b1f      	ldr	r3, [pc, #124]	; (96404 <usart_serial_init+0x10c>)
   96388:	4798      	blx	r3
   9638a:	4602      	mov	r2, r0
   9638c:	f107 0308 	add.w	r3, r7, #8
   96390:	4619      	mov	r1, r3
   96392:	6878      	ldr	r0, [r7, #4]
   96394:	4b20      	ldr	r3, [pc, #128]	; (96418 <usart_serial_init+0x120>)
   96396:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   96398:	6878      	ldr	r0, [r7, #4]
   9639a:	4b20      	ldr	r3, [pc, #128]	; (9641c <usart_serial_init+0x124>)
   9639c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9639e:	6878      	ldr	r0, [r7, #4]
   963a0:	4b1f      	ldr	r3, [pc, #124]	; (96420 <usart_serial_init+0x128>)
   963a2:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   963a4:	687b      	ldr	r3, [r7, #4]
   963a6:	4a20      	ldr	r2, [pc, #128]	; (96428 <usart_serial_init+0x130>)
   963a8:	4293      	cmp	r3, r2
   963aa:	d111      	bne.n	963d0 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   963ac:	2013      	movs	r0, #19
   963ae:	4b17      	ldr	r3, [pc, #92]	; (9640c <usart_serial_init+0x114>)
   963b0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   963b2:	4b14      	ldr	r3, [pc, #80]	; (96404 <usart_serial_init+0x10c>)
   963b4:	4798      	blx	r3
   963b6:	4602      	mov	r2, r0
   963b8:	f107 0308 	add.w	r3, r7, #8
   963bc:	4619      	mov	r1, r3
   963be:	6878      	ldr	r0, [r7, #4]
   963c0:	4b15      	ldr	r3, [pc, #84]	; (96418 <usart_serial_init+0x120>)
   963c2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   963c4:	6878      	ldr	r0, [r7, #4]
   963c6:	4b15      	ldr	r3, [pc, #84]	; (9641c <usart_serial_init+0x124>)
   963c8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   963ca:	6878      	ldr	r0, [r7, #4]
   963cc:	4b14      	ldr	r3, [pc, #80]	; (96420 <usart_serial_init+0x128>)
   963ce:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   963d0:	687b      	ldr	r3, [r7, #4]
   963d2:	4a16      	ldr	r2, [pc, #88]	; (9642c <usart_serial_init+0x134>)
   963d4:	4293      	cmp	r3, r2
   963d6:	d111      	bne.n	963fc <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   963d8:	2014      	movs	r0, #20
   963da:	4b0c      	ldr	r3, [pc, #48]	; (9640c <usart_serial_init+0x114>)
   963dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   963de:	4b09      	ldr	r3, [pc, #36]	; (96404 <usart_serial_init+0x10c>)
   963e0:	4798      	blx	r3
   963e2:	4602      	mov	r2, r0
   963e4:	f107 0308 	add.w	r3, r7, #8
   963e8:	4619      	mov	r1, r3
   963ea:	6878      	ldr	r0, [r7, #4]
   963ec:	4b0a      	ldr	r3, [pc, #40]	; (96418 <usart_serial_init+0x120>)
   963ee:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   963f0:	6878      	ldr	r0, [r7, #4]
   963f2:	4b0a      	ldr	r3, [pc, #40]	; (9641c <usart_serial_init+0x124>)
   963f4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   963f6:	6878      	ldr	r0, [r7, #4]
   963f8:	4b09      	ldr	r3, [pc, #36]	; (96420 <usart_serial_init+0x128>)
   963fa:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   963fc:	bf00      	nop
   963fe:	3730      	adds	r7, #48	; 0x30
   96400:	46bd      	mov	sp, r7
   96402:	bd80      	pop	{r7, pc}
   96404:	000962c9 	.word	0x000962c9
   96408:	400e0800 	.word	0x400e0800
   9640c:	000962dd 	.word	0x000962dd
   96410:	00097b0d 	.word	0x00097b0d
   96414:	40098000 	.word	0x40098000
   96418:	00097d21 	.word	0x00097d21
   9641c:	00097da5 	.word	0x00097da5
   96420:	00097dd5 	.word	0x00097dd5
   96424:	4009c000 	.word	0x4009c000
   96428:	400a0000 	.word	0x400a0000
   9642c:	400a4000 	.word	0x400a4000

00096430 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   96430:	b580      	push	{r7, lr}
   96432:	b082      	sub	sp, #8
   96434:	af00      	add	r7, sp, #0
   96436:	6078      	str	r0, [r7, #4]
   96438:	460b      	mov	r3, r1
   9643a:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9643c:	687b      	ldr	r3, [r7, #4]
   9643e:	4a27      	ldr	r2, [pc, #156]	; (964dc <usart_serial_putchar+0xac>)
   96440:	4293      	cmp	r3, r2
   96442:	d10a      	bne.n	9645a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   96444:	bf00      	nop
   96446:	78fb      	ldrb	r3, [r7, #3]
   96448:	4619      	mov	r1, r3
   9644a:	6878      	ldr	r0, [r7, #4]
   9644c:	4b24      	ldr	r3, [pc, #144]	; (964e0 <usart_serial_putchar+0xb0>)
   9644e:	4798      	blx	r3
   96450:	4603      	mov	r3, r0
   96452:	2b00      	cmp	r3, #0
   96454:	d1f7      	bne.n	96446 <usart_serial_putchar+0x16>
		return 1;
   96456:	2301      	movs	r3, #1
   96458:	e03c      	b.n	964d4 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9645a:	687b      	ldr	r3, [r7, #4]
   9645c:	4a21      	ldr	r2, [pc, #132]	; (964e4 <usart_serial_putchar+0xb4>)
   9645e:	4293      	cmp	r3, r2
   96460:	d10a      	bne.n	96478 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   96462:	bf00      	nop
   96464:	78fb      	ldrb	r3, [r7, #3]
   96466:	4619      	mov	r1, r3
   96468:	6878      	ldr	r0, [r7, #4]
   9646a:	4b1f      	ldr	r3, [pc, #124]	; (964e8 <usart_serial_putchar+0xb8>)
   9646c:	4798      	blx	r3
   9646e:	4603      	mov	r3, r0
   96470:	2b00      	cmp	r3, #0
   96472:	d1f7      	bne.n	96464 <usart_serial_putchar+0x34>
		return 1;
   96474:	2301      	movs	r3, #1
   96476:	e02d      	b.n	964d4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   96478:	687b      	ldr	r3, [r7, #4]
   9647a:	4a1c      	ldr	r2, [pc, #112]	; (964ec <usart_serial_putchar+0xbc>)
   9647c:	4293      	cmp	r3, r2
   9647e:	d10a      	bne.n	96496 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   96480:	bf00      	nop
   96482:	78fb      	ldrb	r3, [r7, #3]
   96484:	4619      	mov	r1, r3
   96486:	6878      	ldr	r0, [r7, #4]
   96488:	4b17      	ldr	r3, [pc, #92]	; (964e8 <usart_serial_putchar+0xb8>)
   9648a:	4798      	blx	r3
   9648c:	4603      	mov	r3, r0
   9648e:	2b00      	cmp	r3, #0
   96490:	d1f7      	bne.n	96482 <usart_serial_putchar+0x52>
		return 1;
   96492:	2301      	movs	r3, #1
   96494:	e01e      	b.n	964d4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   96496:	687b      	ldr	r3, [r7, #4]
   96498:	4a15      	ldr	r2, [pc, #84]	; (964f0 <usart_serial_putchar+0xc0>)
   9649a:	4293      	cmp	r3, r2
   9649c:	d10a      	bne.n	964b4 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   9649e:	bf00      	nop
   964a0:	78fb      	ldrb	r3, [r7, #3]
   964a2:	4619      	mov	r1, r3
   964a4:	6878      	ldr	r0, [r7, #4]
   964a6:	4b10      	ldr	r3, [pc, #64]	; (964e8 <usart_serial_putchar+0xb8>)
   964a8:	4798      	blx	r3
   964aa:	4603      	mov	r3, r0
   964ac:	2b00      	cmp	r3, #0
   964ae:	d1f7      	bne.n	964a0 <usart_serial_putchar+0x70>
		return 1;
   964b0:	2301      	movs	r3, #1
   964b2:	e00f      	b.n	964d4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   964b4:	687b      	ldr	r3, [r7, #4]
   964b6:	4a0f      	ldr	r2, [pc, #60]	; (964f4 <usart_serial_putchar+0xc4>)
   964b8:	4293      	cmp	r3, r2
   964ba:	d10a      	bne.n	964d2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   964bc:	bf00      	nop
   964be:	78fb      	ldrb	r3, [r7, #3]
   964c0:	4619      	mov	r1, r3
   964c2:	6878      	ldr	r0, [r7, #4]
   964c4:	4b08      	ldr	r3, [pc, #32]	; (964e8 <usart_serial_putchar+0xb8>)
   964c6:	4798      	blx	r3
   964c8:	4603      	mov	r3, r0
   964ca:	2b00      	cmp	r3, #0
   964cc:	d1f7      	bne.n	964be <usart_serial_putchar+0x8e>
		return 1;
   964ce:	2301      	movs	r3, #1
   964d0:	e000      	b.n	964d4 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   964d2:	2300      	movs	r3, #0
}
   964d4:	4618      	mov	r0, r3
   964d6:	3708      	adds	r7, #8
   964d8:	46bd      	mov	sp, r7
   964da:	bd80      	pop	{r7, pc}
   964dc:	400e0800 	.word	0x400e0800
   964e0:	00097bd1 	.word	0x00097bd1
   964e4:	40098000 	.word	0x40098000
   964e8:	00097e3d 	.word	0x00097e3d
   964ec:	4009c000 	.word	0x4009c000
   964f0:	400a0000 	.word	0x400a0000
   964f4:	400a4000 	.word	0x400a4000

000964f8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   964f8:	b580      	push	{r7, lr}
   964fa:	b084      	sub	sp, #16
   964fc:	af00      	add	r7, sp, #0
   964fe:	6078      	str	r0, [r7, #4]
   96500:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   96502:	2300      	movs	r3, #0
   96504:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   96506:	687b      	ldr	r3, [r7, #4]
   96508:	4a2b      	ldr	r2, [pc, #172]	; (965b8 <usart_serial_getchar+0xc0>)
   9650a:	4293      	cmp	r3, r2
   9650c:	d107      	bne.n	9651e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9650e:	bf00      	nop
   96510:	6839      	ldr	r1, [r7, #0]
   96512:	6878      	ldr	r0, [r7, #4]
   96514:	4b29      	ldr	r3, [pc, #164]	; (965bc <usart_serial_getchar+0xc4>)
   96516:	4798      	blx	r3
   96518:	4603      	mov	r3, r0
   9651a:	2b00      	cmp	r3, #0
   9651c:	d1f8      	bne.n	96510 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9651e:	687b      	ldr	r3, [r7, #4]
   96520:	4a27      	ldr	r2, [pc, #156]	; (965c0 <usart_serial_getchar+0xc8>)
   96522:	4293      	cmp	r3, r2
   96524:	d10d      	bne.n	96542 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   96526:	bf00      	nop
   96528:	f107 030c 	add.w	r3, r7, #12
   9652c:	4619      	mov	r1, r3
   9652e:	6878      	ldr	r0, [r7, #4]
   96530:	4b24      	ldr	r3, [pc, #144]	; (965c4 <usart_serial_getchar+0xcc>)
   96532:	4798      	blx	r3
   96534:	4603      	mov	r3, r0
   96536:	2b00      	cmp	r3, #0
   96538:	d1f6      	bne.n	96528 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   9653a:	68fb      	ldr	r3, [r7, #12]
   9653c:	b2da      	uxtb	r2, r3
   9653e:	683b      	ldr	r3, [r7, #0]
   96540:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   96542:	687b      	ldr	r3, [r7, #4]
   96544:	4a20      	ldr	r2, [pc, #128]	; (965c8 <usart_serial_getchar+0xd0>)
   96546:	4293      	cmp	r3, r2
   96548:	d10d      	bne.n	96566 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   9654a:	bf00      	nop
   9654c:	f107 030c 	add.w	r3, r7, #12
   96550:	4619      	mov	r1, r3
   96552:	6878      	ldr	r0, [r7, #4]
   96554:	4b1b      	ldr	r3, [pc, #108]	; (965c4 <usart_serial_getchar+0xcc>)
   96556:	4798      	blx	r3
   96558:	4603      	mov	r3, r0
   9655a:	2b00      	cmp	r3, #0
   9655c:	d1f6      	bne.n	9654c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9655e:	68fb      	ldr	r3, [r7, #12]
   96560:	b2da      	uxtb	r2, r3
   96562:	683b      	ldr	r3, [r7, #0]
   96564:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   96566:	687b      	ldr	r3, [r7, #4]
   96568:	4a18      	ldr	r2, [pc, #96]	; (965cc <usart_serial_getchar+0xd4>)
   9656a:	4293      	cmp	r3, r2
   9656c:	d10d      	bne.n	9658a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9656e:	bf00      	nop
   96570:	f107 030c 	add.w	r3, r7, #12
   96574:	4619      	mov	r1, r3
   96576:	6878      	ldr	r0, [r7, #4]
   96578:	4b12      	ldr	r3, [pc, #72]	; (965c4 <usart_serial_getchar+0xcc>)
   9657a:	4798      	blx	r3
   9657c:	4603      	mov	r3, r0
   9657e:	2b00      	cmp	r3, #0
   96580:	d1f6      	bne.n	96570 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   96582:	68fb      	ldr	r3, [r7, #12]
   96584:	b2da      	uxtb	r2, r3
   96586:	683b      	ldr	r3, [r7, #0]
   96588:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9658a:	687b      	ldr	r3, [r7, #4]
   9658c:	4a10      	ldr	r2, [pc, #64]	; (965d0 <usart_serial_getchar+0xd8>)
   9658e:	4293      	cmp	r3, r2
   96590:	d10d      	bne.n	965ae <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   96592:	bf00      	nop
   96594:	f107 030c 	add.w	r3, r7, #12
   96598:	4619      	mov	r1, r3
   9659a:	6878      	ldr	r0, [r7, #4]
   9659c:	4b09      	ldr	r3, [pc, #36]	; (965c4 <usart_serial_getchar+0xcc>)
   9659e:	4798      	blx	r3
   965a0:	4603      	mov	r3, r0
   965a2:	2b00      	cmp	r3, #0
   965a4:	d1f6      	bne.n	96594 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   965a6:	68fb      	ldr	r3, [r7, #12]
   965a8:	b2da      	uxtb	r2, r3
   965aa:	683b      	ldr	r3, [r7, #0]
   965ac:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   965ae:	bf00      	nop
   965b0:	3710      	adds	r7, #16
   965b2:	46bd      	mov	sp, r7
   965b4:	bd80      	pop	{r7, pc}
   965b6:	bf00      	nop
   965b8:	400e0800 	.word	0x400e0800
   965bc:	00097c15 	.word	0x00097c15
   965c0:	40098000 	.word	0x40098000
   965c4:	00097e6d 	.word	0x00097e6d
   965c8:	4009c000 	.word	0x4009c000
   965cc:	400a0000 	.word	0x400a0000
   965d0:	400a4000 	.word	0x400a4000

000965d4 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   965d4:	b580      	push	{r7, lr}
   965d6:	b082      	sub	sp, #8
   965d8:	af00      	add	r7, sp, #0
   965da:	6078      	str	r0, [r7, #4]
   965dc:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   965de:	4a0f      	ldr	r2, [pc, #60]	; (9661c <stdio_serial_init+0x48>)
   965e0:	687b      	ldr	r3, [r7, #4]
   965e2:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   965e4:	4b0e      	ldr	r3, [pc, #56]	; (96620 <stdio_serial_init+0x4c>)
   965e6:	4a0f      	ldr	r2, [pc, #60]	; (96624 <stdio_serial_init+0x50>)
   965e8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   965ea:	4b0f      	ldr	r3, [pc, #60]	; (96628 <stdio_serial_init+0x54>)
   965ec:	4a0f      	ldr	r2, [pc, #60]	; (9662c <stdio_serial_init+0x58>)
   965ee:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   965f0:	6839      	ldr	r1, [r7, #0]
   965f2:	6878      	ldr	r0, [r7, #4]
   965f4:	4b0e      	ldr	r3, [pc, #56]	; (96630 <stdio_serial_init+0x5c>)
   965f6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   965f8:	4b0e      	ldr	r3, [pc, #56]	; (96634 <stdio_serial_init+0x60>)
   965fa:	681b      	ldr	r3, [r3, #0]
   965fc:	689b      	ldr	r3, [r3, #8]
   965fe:	2100      	movs	r1, #0
   96600:	4618      	mov	r0, r3
   96602:	4b0d      	ldr	r3, [pc, #52]	; (96638 <stdio_serial_init+0x64>)
   96604:	4798      	blx	r3
	setbuf(stdin, NULL);
   96606:	4b0b      	ldr	r3, [pc, #44]	; (96634 <stdio_serial_init+0x60>)
   96608:	681b      	ldr	r3, [r3, #0]
   9660a:	685b      	ldr	r3, [r3, #4]
   9660c:	2100      	movs	r1, #0
   9660e:	4618      	mov	r0, r3
   96610:	4b09      	ldr	r3, [pc, #36]	; (96638 <stdio_serial_init+0x64>)
   96612:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   96614:	bf00      	nop
   96616:	3708      	adds	r7, #8
   96618:	46bd      	mov	sp, r7
   9661a:	bd80      	pop	{r7, pc}
   9661c:	200732e8 	.word	0x200732e8
   96620:	200732e4 	.word	0x200732e4
   96624:	00096431 	.word	0x00096431
   96628:	200732e0 	.word	0x200732e0
   9662c:	000964f9 	.word	0x000964f9
   96630:	000962f9 	.word	0x000962f9
   96634:	20071090 	.word	0x20071090
   96638:	000a2cf5 	.word	0x000a2cf5

0009663c <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   9663c:	b580      	push	{r7, lr}
   9663e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   96640:	2008      	movs	r0, #8
   96642:	4b11      	ldr	r3, [pc, #68]	; (96688 <DD_INIT_UART+0x4c>)
   96644:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   96646:	4b11      	ldr	r3, [pc, #68]	; (9668c <DD_INIT_UART+0x50>)
   96648:	2250      	movs	r2, #80	; 0x50
   9664a:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   9664c:	4b0f      	ldr	r3, [pc, #60]	; (9668c <DD_INIT_UART+0x50>)
   9664e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   96652:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   96654:	4b0d      	ldr	r3, [pc, #52]	; (9668c <DD_INIT_UART+0x50>)
   96656:	2246      	movs	r2, #70	; 0x46
   96658:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   9665a:	490d      	ldr	r1, [pc, #52]	; (96690 <DD_INIT_UART+0x54>)
   9665c:	480b      	ldr	r0, [pc, #44]	; (9668c <DD_INIT_UART+0x50>)
   9665e:	4b0d      	ldr	r3, [pc, #52]	; (96694 <DD_INIT_UART+0x58>)
   96660:	4798      	blx	r3
	uart_enable(UART);
   96662:	480a      	ldr	r0, [pc, #40]	; (9668c <DD_INIT_UART+0x50>)
   96664:	4b0c      	ldr	r3, [pc, #48]	; (96698 <DD_INIT_UART+0x5c>)
   96666:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   96668:	2101      	movs	r1, #1
   9666a:	4808      	ldr	r0, [pc, #32]	; (9668c <DD_INIT_UART+0x50>)
   9666c:	4b0b      	ldr	r3, [pc, #44]	; (9669c <DD_INIT_UART+0x60>)
   9666e:	4798      	blx	r3
	uart_enable(UART);
   96670:	4806      	ldr	r0, [pc, #24]	; (9668c <DD_INIT_UART+0x50>)
   96672:	4b09      	ldr	r3, [pc, #36]	; (96698 <DD_INIT_UART+0x5c>)
   96674:	4798      	blx	r3
	uart_enable_rx(UART);
   96676:	4805      	ldr	r0, [pc, #20]	; (9668c <DD_INIT_UART+0x50>)
   96678:	4b09      	ldr	r3, [pc, #36]	; (966a0 <DD_INIT_UART+0x64>)
   9667a:	4798      	blx	r3
	uart_enable_tx(UART);
   9667c:	4803      	ldr	r0, [pc, #12]	; (9668c <DD_INIT_UART+0x50>)
   9667e:	4b09      	ldr	r3, [pc, #36]	; (966a4 <DD_INIT_UART+0x68>)
   96680:	4798      	blx	r3
	
	
}
   96682:	bf00      	nop
   96684:	bd80      	pop	{r7, pc}
   96686:	bf00      	nop
   96688:	000962dd 	.word	0x000962dd
   9668c:	400e0800 	.word	0x400e0800
   96690:	000a4b00 	.word	0x000a4b00
   96694:	000965d5 	.word	0x000965d5
   96698:	00097b9d 	.word	0x00097b9d
   9669c:	00097bb5 	.word	0x00097bb5
   966a0:	00097b85 	.word	0x00097b85
   966a4:	00097b6d 	.word	0x00097b6d

000966a8 <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   966a8:	b580      	push	{r7, lr}
   966aa:	b084      	sub	sp, #16
   966ac:	af00      	add	r7, sp, #0
   966ae:	4603      	mov	r3, r0
   966b0:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   966b2:	79fb      	ldrb	r3, [r7, #7]
   966b4:	4619      	mov	r1, r3
   966b6:	4804      	ldr	r0, [pc, #16]	; (966c8 <DD_TX_UART+0x20>)
   966b8:	4b04      	ldr	r3, [pc, #16]	; (966cc <DD_TX_UART+0x24>)
   966ba:	4798      	blx	r3
   966bc:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   966be:	68fb      	ldr	r3, [r7, #12]
}
   966c0:	4618      	mov	r0, r3
   966c2:	3710      	adds	r7, #16
   966c4:	46bd      	mov	sp, r7
   966c6:	bd80      	pop	{r7, pc}
   966c8:	400e0800 	.word	0x400e0800
   966cc:	00097bd1 	.word	0x00097bd1

000966d0 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t data, uint16_t rc_count)

{
   966d0:	b580      	push	{r7, lr}
   966d2:	b082      	sub	sp, #8
   966d4:	af00      	add	r7, sp, #0
   966d6:	4603      	mov	r3, r0
   966d8:	460a      	mov	r2, r1
   966da:	80fb      	strh	r3, [r7, #6]
   966dc:	4613      	mov	r3, r2
   966de:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(data, rc_count);
   966e0:	88ba      	ldrh	r2, [r7, #4]
   966e2:	88fb      	ldrh	r3, [r7, #6]
   966e4:	4611      	mov	r1, r2
   966e6:	4618      	mov	r0, r3
   966e8:	4b02      	ldr	r3, [pc, #8]	; (966f4 <SV_CAN_WRITE_PROPO+0x24>)
   966ea:	4798      	blx	r3
	
}
   966ec:	bf00      	nop
   966ee:	3708      	adds	r7, #8
   966f0:	46bd      	mov	sp, r7
   966f2:	bd80      	pop	{r7, pc}
   966f4:	000936ad 	.word	0x000936ad

000966f8 <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   966f8:	b580      	push	{r7, lr}
   966fa:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   966fc:	4b02      	ldr	r3, [pc, #8]	; (96708 <SV_CAN_READ_HEMO+0x10>)
   966fe:	4798      	blx	r3
	return 0;
   96700:	2300      	movs	r3, #0
}
   96702:	4618      	mov	r0, r3
   96704:	bd80      	pop	{r7, pc}
   96706:	bf00      	nop
   96708:	0009376d 	.word	0x0009376d

0009670c <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   9670c:	b580      	push	{r7, lr}
   9670e:	b082      	sub	sp, #8
   96710:	af00      	add	r7, sp, #0
   96712:	4603      	mov	r3, r0
   96714:	6039      	str	r1, [r7, #0]
   96716:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   96718:	683b      	ldr	r3, [r7, #0]
   9671a:	b29b      	uxth	r3, r3
   9671c:	4618      	mov	r0, r3
   9671e:	4b03      	ldr	r3, [pc, #12]	; (9672c <SV_CAN_WRITE_SENSOR+0x20>)
   96720:	4798      	blx	r3
	
}
   96722:	bf00      	nop
   96724:	3708      	adds	r7, #8
   96726:	46bd      	mov	sp, r7
   96728:	bd80      	pop	{r7, pc}
   9672a:	bf00      	nop
   9672c:	00093729 	.word	0x00093729

00096730 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   96730:	b580      	push	{r7, lr}
   96732:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   96734:	4b23      	ldr	r3, [pc, #140]	; (967c4 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   96736:	681b      	ldr	r3, [r3, #0]
   96738:	4a23      	ldr	r2, [pc, #140]	; (967c8 <SV_CAN_REQUEST_SENSORDATA+0x98>)
   9673a:	6013      	str	r3, [r2, #0]
	delay = 0;	
   9673c:	4b23      	ldr	r3, [pc, #140]	; (967cc <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   9673e:	2200      	movs	r2, #0
   96740:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   96742:	200a      	movs	r0, #10
   96744:	4b22      	ldr	r3, [pc, #136]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   96746:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   96748:	2141      	movs	r1, #65	; 0x41
   9674a:	2003      	movs	r0, #3
   9674c:	4b21      	ldr	r3, [pc, #132]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9674e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   96750:	4b21      	ldr	r3, [pc, #132]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   96752:	2200      	movs	r2, #0
   96754:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   96756:	200a      	movs	r0, #10
   96758:	4b1d      	ldr	r3, [pc, #116]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9675a:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   9675c:	2142      	movs	r1, #66	; 0x42
   9675e:	2003      	movs	r0, #3
   96760:	4b1c      	ldr	r3, [pc, #112]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   96762:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   96764:	4b1c      	ldr	r3, [pc, #112]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   96766:	2200      	movs	r2, #0
   96768:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   9676a:	200a      	movs	r0, #10
   9676c:	4b18      	ldr	r3, [pc, #96]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9676e:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   96770:	2143      	movs	r1, #67	; 0x43
   96772:	2003      	movs	r0, #3
   96774:	4b17      	ldr	r3, [pc, #92]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   96776:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   96778:	4b17      	ldr	r3, [pc, #92]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9677a:	2200      	movs	r2, #0
   9677c:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   9677e:	200a      	movs	r0, #10
   96780:	4b13      	ldr	r3, [pc, #76]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   96782:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   96784:	2144      	movs	r1, #68	; 0x44
   96786:	2003      	movs	r0, #3
   96788:	4b12      	ldr	r3, [pc, #72]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9678a:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   9678c:	4b12      	ldr	r3, [pc, #72]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9678e:	2200      	movs	r2, #0
   96790:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   96792:	200a      	movs	r0, #10
   96794:	4b0e      	ldr	r3, [pc, #56]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   96796:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   96798:	2145      	movs	r1, #69	; 0x45
   9679a:	2003      	movs	r0, #3
   9679c:	4b0d      	ldr	r3, [pc, #52]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9679e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   967a0:	4b0d      	ldr	r3, [pc, #52]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   967a2:	2200      	movs	r2, #0
   967a4:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   967a6:	200a      	movs	r0, #10
   967a8:	4b09      	ldr	r3, [pc, #36]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   967aa:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   967ac:	2146      	movs	r1, #70	; 0x46
   967ae:	2003      	movs	r0, #3
   967b0:	4b08      	ldr	r3, [pc, #32]	; (967d4 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   967b2:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   967b4:	200a      	movs	r0, #10
   967b6:	4b06      	ldr	r3, [pc, #24]	; (967d0 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   967b8:	4798      	blx	r3
	array1[6]	= 0;
   967ba:	4b07      	ldr	r3, [pc, #28]	; (967d8 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   967bc:	2200      	movs	r2, #0
   967be:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   967c0:	bf00      	nop
   967c2:	bd80      	pop	{r7, pc}
   967c4:	2007263c 	.word	0x2007263c
   967c8:	200726cc 	.word	0x200726cc
   967cc:	200726d0 	.word	0x200726d0
   967d0:	00091b9d 	.word	0x00091b9d
   967d4:	0009670d 	.word	0x0009670d
   967d8:	200726c0 	.word	0x200726c0

000967dc <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   967dc:	b580      	push	{r7, lr}
   967de:	b084      	sub	sp, #16
   967e0:	af00      	add	r7, sp, #0
   967e2:	4603      	mov	r3, r0
   967e4:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   967e6:	2300      	movs	r3, #0
   967e8:	60fb      	str	r3, [r7, #12]
	
	if(sv_pump_id != BLOODPUMP)
   967ea:	79fb      	ldrb	r3, [r7, #7]
   967ec:	2b03      	cmp	r3, #3
   967ee:	d004      	beq.n	967fa <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   967f0:	79fb      	ldrb	r3, [r7, #7]
   967f2:	4618      	mov	r0, r3
   967f4:	4b06      	ldr	r3, [pc, #24]	; (96810 <sv_cntrl_activatepump+0x34>)
   967f6:	4798      	blx	r3
   967f8:	e005      	b.n	96806 <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   967fa:	2301      	movs	r3, #1
   967fc:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   967fe:	2100      	movs	r1, #0
   96800:	2020      	movs	r0, #32
   96802:	4b04      	ldr	r3, [pc, #16]	; (96814 <sv_cntrl_activatepump+0x38>)
   96804:	4798      	blx	r3
	}
	
	return 0;
   96806:	2300      	movs	r3, #0
}
   96808:	4618      	mov	r0, r3
   9680a:	3710      	adds	r7, #16
   9680c:	46bd      	mov	sp, r7
   9680e:	bd80      	pop	{r7, pc}
   96810:	00094c95 	.word	0x00094c95
   96814:	000936e1 	.word	0x000936e1

00096818 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   96818:	b580      	push	{r7, lr}
   9681a:	b084      	sub	sp, #16
   9681c:	af00      	add	r7, sp, #0
   9681e:	4603      	mov	r3, r0
   96820:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   96822:	2300      	movs	r3, #0
   96824:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   96826:	79fb      	ldrb	r3, [r7, #7]
   96828:	2b03      	cmp	r3, #3
   9682a:	d004      	beq.n	96836 <sv_cntrl_deactivatepump+0x1e>
	{
		DD_RESET_PUMP(sv_pump_id);
   9682c:	79fb      	ldrb	r3, [r7, #7]
   9682e:	4618      	mov	r0, r3
   96830:	4b06      	ldr	r3, [pc, #24]	; (9684c <sv_cntrl_deactivatepump+0x34>)
   96832:	4798      	blx	r3
   96834:	e005      	b.n	96842 <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   96836:	2302      	movs	r3, #2
   96838:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   9683a:	2100      	movs	r1, #0
   9683c:	2021      	movs	r0, #33	; 0x21
   9683e:	4b04      	ldr	r3, [pc, #16]	; (96850 <sv_cntrl_deactivatepump+0x38>)
   96840:	4798      	blx	r3
	}
	
	
	return 0;
   96842:	2300      	movs	r3, #0
}
   96844:	4618      	mov	r0, r3
   96846:	3710      	adds	r7, #16
   96848:	46bd      	mov	sp, r7
   9684a:	bd80      	pop	{r7, pc}
   9684c:	00094e35 	.word	0x00094e35
   96850:	000936e1 	.word	0x000936e1

00096854 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   96854:	b580      	push	{r7, lr}
   96856:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   96858:	4b02      	ldr	r3, [pc, #8]	; (96864 <sv_cntrl_poweronheater+0x10>)
   9685a:	4798      	blx	r3
	 return 0;
   9685c:	2300      	movs	r3, #0
}
   9685e:	4618      	mov	r0, r3
   96860:	bd80      	pop	{r7, pc}
   96862:	bf00      	nop
   96864:	00094d75 	.word	0x00094d75

00096868 <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   96868:	b580      	push	{r7, lr}
   9686a:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   9686c:	4b02      	ldr	r3, [pc, #8]	; (96878 <sv_cntrl_poweroffheater+0x10>)
   9686e:	4798      	blx	r3
	return 0;
   96870:	2300      	movs	r3, #0
}
   96872:	4618      	mov	r0, r3
   96874:	bd80      	pop	{r7, pc}
   96876:	bf00      	nop
   96878:	00094dd5 	.word	0x00094dd5

0009687c <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   9687c:	b580      	push	{r7, lr}
   9687e:	b082      	sub	sp, #8
   96880:	af00      	add	r7, sp, #0
   96882:	4603      	mov	r3, r0
   96884:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   96886:	79fb      	ldrb	r3, [r7, #7]
   96888:	4618      	mov	r0, r3
   9688a:	4b03      	ldr	r3, [pc, #12]	; (96898 <sv_cntrl_activate_valve+0x1c>)
   9688c:	4798      	blx	r3
	}
	
	
	return 0;
   9688e:	2300      	movs	r3, #0
}
   96890:	4618      	mov	r0, r3
   96892:	3708      	adds	r7, #8
   96894:	46bd      	mov	sp, r7
   96896:	bd80      	pop	{r7, pc}
   96898:	000951ad 	.word	0x000951ad

0009689c <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   9689c:	b580      	push	{r7, lr}
   9689e:	b082      	sub	sp, #8
   968a0:	af00      	add	r7, sp, #0
   968a2:	4603      	mov	r3, r0
   968a4:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   968a6:	79fb      	ldrb	r3, [r7, #7]
   968a8:	2b10      	cmp	r3, #16
   968aa:	d101      	bne.n	968b0 <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   968ac:	4b05      	ldr	r3, [pc, #20]	; (968c4 <sv_cntrl_deactivate_valve+0x28>)
   968ae:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   968b0:	79fb      	ldrb	r3, [r7, #7]
   968b2:	4618      	mov	r0, r3
   968b4:	4b04      	ldr	r3, [pc, #16]	; (968c8 <sv_cntrl_deactivate_valve+0x2c>)
   968b6:	4798      	blx	r3
	
	return 0;
   968b8:	2300      	movs	r3, #0
}
   968ba:	4618      	mov	r0, r3
   968bc:	3708      	adds	r7, #8
   968be:	46bd      	mov	sp, r7
   968c0:	bd80      	pop	{r7, pc}
   968c2:	bf00      	nop
   968c4:	00094dd5 	.word	0x00094dd5
   968c8:	0009526d 	.word	0x0009526d

000968cc <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   968cc:	b580      	push	{r7, lr}
   968ce:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   968d0:	4b02      	ldr	r3, [pc, #8]	; (968dc <sv_cntrl_setHepa_dir+0x10>)
   968d2:	4798      	blx	r3
	
	return 0;
   968d4:	2300      	movs	r3, #0
}
   968d6:	4618      	mov	r0, r3
   968d8:	bd80      	pop	{r7, pc}
   968da:	bf00      	nop
   968dc:	000950bd 	.word	0x000950bd

000968e0 <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   968e0:	b580      	push	{r7, lr}
   968e2:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   968e4:	4b02      	ldr	r3, [pc, #8]	; (968f0 <sv_cntrl_resetHepa_dir+0x10>)
   968e6:	4798      	blx	r3
	
	return 0;	
   968e8:	2300      	movs	r3, #0
}
   968ea:	4618      	mov	r0, r3
   968ec:	bd80      	pop	{r7, pc}
   968ee:	bf00      	nop
   968f0:	000950e5 	.word	0x000950e5

000968f4 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   968f4:	b580      	push	{r7, lr}
   968f6:	b084      	sub	sp, #16
   968f8:	af00      	add	r7, sp, #0
   968fa:	4603      	mov	r3, r0
   968fc:	6039      	str	r1, [r7, #0]
   968fe:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   96900:	2300      	movs	r3, #0
   96902:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   96904:	2304      	movs	r3, #4
   96906:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   96908:	683b      	ldr	r3, [r7, #0]
   9690a:	b2db      	uxtb	r3, r3
   9690c:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   9690e:	683b      	ldr	r3, [r7, #0]
   96910:	0a1b      	lsrs	r3, r3, #8
   96912:	b2db      	uxtb	r3, r3
   96914:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   96916:	79fb      	ldrb	r3, [r7, #7]
   96918:	2b03      	cmp	r3, #3
   9691a:	d005      	beq.n	96928 <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   9691c:	79fb      	ldrb	r3, [r7, #7]
   9691e:	6839      	ldr	r1, [r7, #0]
   96920:	4618      	mov	r0, r3
   96922:	4b07      	ldr	r3, [pc, #28]	; (96940 <sv_cntrl_setpumpspeed+0x4c>)
   96924:	4798      	blx	r3
   96926:	e005      	b.n	96934 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   96928:	683b      	ldr	r3, [r7, #0]
   9692a:	b29b      	uxth	r3, r3
   9692c:	4619      	mov	r1, r3
   9692e:	2023      	movs	r0, #35	; 0x23
   96930:	4b04      	ldr	r3, [pc, #16]	; (96944 <sv_cntrl_setpumpspeed+0x50>)
   96932:	4798      	blx	r3
		}
		
	
	return 0;
   96934:	2300      	movs	r3, #0
}
   96936:	4618      	mov	r0, r3
   96938:	3710      	adds	r7, #16
   9693a:	46bd      	mov	sp, r7
   9693c:	bd80      	pop	{r7, pc}
   9693e:	bf00      	nop
   96940:	00094f1d 	.word	0x00094f1d
   96944:	000936e1 	.word	0x000936e1

00096948 <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   96948:	b480      	push	{r7}
   9694a:	b083      	sub	sp, #12
   9694c:	af00      	add	r7, sp, #0
   9694e:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   96950:	bf00      	nop
   96952:	370c      	adds	r7, #12
   96954:	46bd      	mov	sp, r7
   96956:	bc80      	pop	{r7}
   96958:	4770      	bx	lr
   9695a:	bf00      	nop

0009695c <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   9695c:	b580      	push	{r7, lr}
   9695e:	b082      	sub	sp, #8
   96960:	af00      	add	r7, sp, #0
   96962:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   96964:	4b0c      	ldr	r3, [pc, #48]	; (96998 <sv_cntrl_incheater+0x3c>)
   96966:	6878      	ldr	r0, [r7, #4]
   96968:	4798      	blx	r3
   9696a:	4602      	mov	r2, r0
   9696c:	4b0b      	ldr	r3, [pc, #44]	; (9699c <sv_cntrl_incheater+0x40>)
   9696e:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   96970:	687b      	ldr	r3, [r7, #4]
   96972:	f641 524c 	movw	r2, #7500	; 0x1d4c
   96976:	4293      	cmp	r3, r2
   96978:	dd02      	ble.n	96980 <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   9697a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   9697e:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   96980:	687b      	ldr	r3, [r7, #4]
   96982:	2b00      	cmp	r3, #0
   96984:	dd03      	ble.n	9698e <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   96986:	687b      	ldr	r3, [r7, #4]
   96988:	4618      	mov	r0, r3
   9698a:	4b05      	ldr	r3, [pc, #20]	; (969a0 <sv_cntrl_incheater+0x44>)
   9698c:	4798      	blx	r3
	 }
	
	
	return 0;
   9698e:	2300      	movs	r3, #0
}
   96990:	4618      	mov	r0, r3
   96992:	3708      	adds	r7, #8
   96994:	46bd      	mov	sp, r7
   96996:	bd80      	pop	{r7, pc}
   96998:	000a25e5 	.word	0x000a25e5
   9699c:	20072d28 	.word	0x20072d28
   969a0:	00095099 	.word	0x00095099

000969a4 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   969a4:	b580      	push	{r7, lr}
   969a6:	b082      	sub	sp, #8
   969a8:	af00      	add	r7, sp, #0
   969aa:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   969ac:	687b      	ldr	r3, [r7, #4]
   969ae:	2b00      	cmp	r3, #0
   969b0:	dd03      	ble.n	969ba <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   969b2:	687b      	ldr	r3, [r7, #4]
   969b4:	4618      	mov	r0, r3
   969b6:	4b03      	ldr	r3, [pc, #12]	; (969c4 <sv_cntrl_decheater+0x20>)
   969b8:	4798      	blx	r3
	 }
	
	
	return 0;
   969ba:	2300      	movs	r3, #0
}
   969bc:	4618      	mov	r0, r3
   969be:	3708      	adds	r7, #8
   969c0:	46bd      	mov	sp, r7
   969c2:	bd80      	pop	{r7, pc}
   969c4:	00095099 	.word	0x00095099

000969c8 <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   969c8:	b580      	push	{r7, lr}
   969ca:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   969cc:	4b02      	ldr	r3, [pc, #8]	; (969d8 <sv_cntrl_activatevenousclamp+0x10>)
   969ce:	4798      	blx	r3
	
	return 0;
   969d0:	2300      	movs	r3, #0
}
   969d2:	4618      	mov	r0, r3
   969d4:	bd80      	pop	{r7, pc}
   969d6:	bf00      	nop
   969d8:	000955fd 	.word	0x000955fd

000969dc <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   969dc:	b580      	push	{r7, lr}
   969de:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   969e0:	4b02      	ldr	r3, [pc, #8]	; (969ec <sv_cntrl_deactivatevenousclamp+0x10>)
   969e2:	4798      	blx	r3
	
	return 0;
   969e4:	2300      	movs	r3, #0
}
   969e6:	4618      	mov	r0, r3
   969e8:	bd80      	pop	{r7, pc}
   969ea:	bf00      	nop
   969ec:	00095625 	.word	0x00095625

000969f0 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   969f0:	b580      	push	{r7, lr}
   969f2:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   969f4:	4b03      	ldr	r3, [pc, #12]	; (96a04 <sv_cntrl_enable_loopback+0x14>)
   969f6:	4798      	blx	r3
	Loopbackstatus = true;
   969f8:	4b03      	ldr	r3, [pc, #12]	; (96a08 <sv_cntrl_enable_loopback+0x18>)
   969fa:	2201      	movs	r2, #1
   969fc:	701a      	strb	r2, [r3, #0]
	return 0;
   969fe:	2300      	movs	r3, #0

}
   96a00:	4618      	mov	r0, r3
   96a02:	bd80      	pop	{r7, pc}
   96a04:	00094c45 	.word	0x00094c45
   96a08:	2007309b 	.word	0x2007309b

00096a0c <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   96a0c:	b580      	push	{r7, lr}
   96a0e:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   96a10:	4b03      	ldr	r3, [pc, #12]	; (96a20 <sv_cntrl_disable_loopback+0x14>)
   96a12:	4798      	blx	r3
	Loopbackstatus = false;
   96a14:	4b03      	ldr	r3, [pc, #12]	; (96a24 <sv_cntrl_disable_loopback+0x18>)
   96a16:	2200      	movs	r2, #0
   96a18:	701a      	strb	r2, [r3, #0]
	return 0;
   96a1a:	2300      	movs	r3, #0

}
   96a1c:	4618      	mov	r0, r3
   96a1e:	bd80      	pop	{r7, pc}
   96a20:	00094c6d 	.word	0x00094c6d
   96a24:	2007309b 	.word	0x2007309b

00096a28 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   96a28:	b580      	push	{r7, lr}
   96a2a:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   96a2c:	4b05      	ldr	r3, [pc, #20]	; (96a44 <sv_cntrl_enable_bypass+0x1c>)
   96a2e:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   96a30:	2004      	movs	r0, #4
   96a32:	4b05      	ldr	r3, [pc, #20]	; (96a48 <sv_cntrl_enable_bypass+0x20>)
   96a34:	4798      	blx	r3
	Bypassstatus = true;
   96a36:	4b05      	ldr	r3, [pc, #20]	; (96a4c <sv_cntrl_enable_bypass+0x24>)
   96a38:	2201      	movs	r2, #1
   96a3a:	701a      	strb	r2, [r3, #0]
	return 0;
   96a3c:	2300      	movs	r3, #0

}
   96a3e:	4618      	mov	r0, r3
   96a40:	bd80      	pop	{r7, pc}
   96a42:	bf00      	nop
   96a44:	00094be5 	.word	0x00094be5
   96a48:	00096819 	.word	0x00096819
   96a4c:	20073131 	.word	0x20073131

00096a50 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   96a50:	b580      	push	{r7, lr}
   96a52:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   96a54:	4b03      	ldr	r3, [pc, #12]	; (96a64 <sv_cntrl_disable_bypass+0x14>)
   96a56:	4798      	blx	r3
	Bypassstatus = false;
   96a58:	4b03      	ldr	r3, [pc, #12]	; (96a68 <sv_cntrl_disable_bypass+0x18>)
   96a5a:	2200      	movs	r2, #0
   96a5c:	701a      	strb	r2, [r3, #0]
	return 0;
   96a5e:	2300      	movs	r3, #0

}
   96a60:	4618      	mov	r0, r3
   96a62:	bd80      	pop	{r7, pc}
   96a64:	00094c15 	.word	0x00094c15
   96a68:	20073131 	.word	0x20073131

00096a6c <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   96a6c:	b580      	push	{r7, lr}
   96a6e:	b082      	sub	sp, #8
   96a70:	af00      	add	r7, sp, #0
   96a72:	4603      	mov	r3, r0
   96a74:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   96a76:	4b0a      	ldr	r3, [pc, #40]	; (96aa0 <sv_cntrl_setflowpath+0x34>)
   96a78:	681a      	ldr	r2, [r3, #0]
   96a7a:	4b0a      	ldr	r3, [pc, #40]	; (96aa4 <sv_cntrl_setflowpath+0x38>)
   96a7c:	681b      	ldr	r3, [r3, #0]
   96a7e:	1ad3      	subs	r3, r2, r3
   96a80:	4a09      	ldr	r2, [pc, #36]	; (96aa8 <sv_cntrl_setflowpath+0x3c>)
   96a82:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   96a84:	4b06      	ldr	r3, [pc, #24]	; (96aa0 <sv_cntrl_setflowpath+0x34>)
   96a86:	681b      	ldr	r3, [r3, #0]
   96a88:	4a06      	ldr	r2, [pc, #24]	; (96aa4 <sv_cntrl_setflowpath+0x38>)
   96a8a:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   96a8c:	79fb      	ldrb	r3, [r7, #7]
   96a8e:	4618      	mov	r0, r3
   96a90:	4b06      	ldr	r3, [pc, #24]	; (96aac <sv_cntrl_setflowpath+0x40>)
   96a92:	4798      	blx	r3
	
	return 0;
   96a94:	2300      	movs	r3, #0

}
   96a96:	4618      	mov	r0, r3
   96a98:	3708      	adds	r7, #8
   96a9a:	46bd      	mov	sp, r7
   96a9c:	bd80      	pop	{r7, pc}
   96a9e:	bf00      	nop
   96aa0:	2007263c 	.word	0x2007263c
   96aa4:	20072eb4 	.word	0x20072eb4
   96aa8:	20073018 	.word	0x20073018
   96aac:	000959d5 	.word	0x000959d5

00096ab0 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   96ab0:	b580      	push	{r7, lr}
   96ab2:	b082      	sub	sp, #8
   96ab4:	af00      	add	r7, sp, #0
   96ab6:	4603      	mov	r3, r0
   96ab8:	6039      	str	r1, [r7, #0]
   96aba:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   96abc:	79fb      	ldrb	r3, [r7, #7]
   96abe:	6839      	ldr	r1, [r7, #0]
   96ac0:	4618      	mov	r0, r3
   96ac2:	4b03      	ldr	r3, [pc, #12]	; (96ad0 <sv_cntrl_setpumpfreq+0x20>)
   96ac4:	4798      	blx	r3
	return 0;
   96ac6:	2300      	movs	r3, #0
}
   96ac8:	4618      	mov	r0, r3
   96aca:	3708      	adds	r7, #8
   96acc:	46bd      	mov	sp, r7
   96ace:	bd80      	pop	{r7, pc}
   96ad0:	00095049 	.word	0x00095049

00096ad4 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   96ad4:	b580      	push	{r7, lr}
   96ad6:	af00      	add	r7, sp, #0
	DD_SET_RED();
   96ad8:	4b02      	ldr	r3, [pc, #8]	; (96ae4 <sv_cntrl_setredalarm+0x10>)
   96ada:	4798      	blx	r3
	return 0;
   96adc:	2300      	movs	r3, #0
}
   96ade:	4618      	mov	r0, r3
   96ae0:	bd80      	pop	{r7, pc}
   96ae2:	bf00      	nop
   96ae4:	0009510d 	.word	0x0009510d

00096ae8 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   96ae8:	b580      	push	{r7, lr}
   96aea:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   96aec:	4b02      	ldr	r3, [pc, #8]	; (96af8 <sv_cntrl_setyellowalarm+0x10>)
   96aee:	4798      	blx	r3
	return 0;
   96af0:	2300      	movs	r3, #0
}
   96af2:	4618      	mov	r0, r3
   96af4:	bd80      	pop	{r7, pc}
   96af6:	bf00      	nop
   96af8:	00095135 	.word	0x00095135

00096afc <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   96afc:	b580      	push	{r7, lr}
   96afe:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   96b00:	4b02      	ldr	r3, [pc, #8]	; (96b0c <sv_cntrl_setgreenalarm+0x10>)
   96b02:	4798      	blx	r3
	return 0;
   96b04:	2300      	movs	r3, #0
}
   96b06:	4618      	mov	r0, r3
   96b08:	bd80      	pop	{r7, pc}
   96b0a:	bf00      	nop
   96b0c:	00095121 	.word	0x00095121

00096b10 <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   96b10:	b580      	push	{r7, lr}
   96b12:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   96b14:	4b02      	ldr	r3, [pc, #8]	; (96b20 <sv_cntrl_buzzer+0x10>)
   96b16:	4798      	blx	r3
	return 0;
   96b18:	2300      	movs	r3, #0
}
   96b1a:	4618      	mov	r0, r3
   96b1c:	bd80      	pop	{r7, pc}
   96b1e:	bf00      	nop
   96b20:	00095149 	.word	0x00095149

00096b24 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   96b24:	b580      	push	{r7, lr}
   96b26:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   96b28:	4b02      	ldr	r3, [pc, #8]	; (96b34 <sv_cntrl_resetredalarm+0x10>)
   96b2a:	4798      	blx	r3
	return 0;
   96b2c:	2300      	movs	r3, #0
}
   96b2e:	4618      	mov	r0, r3
   96b30:	bd80      	pop	{r7, pc}
   96b32:	bf00      	nop
   96b34:	0009515d 	.word	0x0009515d

00096b38 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   96b38:	b580      	push	{r7, lr}
   96b3a:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   96b3c:	4b02      	ldr	r3, [pc, #8]	; (96b48 <sv_cntrl_resetyellowalarm+0x10>)
   96b3e:	4798      	blx	r3
	return 0;
   96b40:	2300      	movs	r3, #0
}
   96b42:	4618      	mov	r0, r3
   96b44:	bd80      	pop	{r7, pc}
   96b46:	bf00      	nop
   96b48:	00095185 	.word	0x00095185

00096b4c <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   96b4c:	b580      	push	{r7, lr}
   96b4e:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   96b50:	4b02      	ldr	r3, [pc, #8]	; (96b5c <sv_cntrl_resetgreenalarm+0x10>)
   96b52:	4798      	blx	r3
	return 0;
   96b54:	2300      	movs	r3, #0
}
   96b56:	4618      	mov	r0, r3
   96b58:	bd80      	pop	{r7, pc}
   96b5a:	bf00      	nop
   96b5c:	00095171 	.word	0x00095171

00096b60 <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   96b60:	b580      	push	{r7, lr}
   96b62:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   96b64:	4b02      	ldr	r3, [pc, #8]	; (96b70 <sv_cntrl_nobuzzer+0x10>)
   96b66:	4798      	blx	r3
	return 0;
   96b68:	2300      	movs	r3, #0
}
   96b6a:	4618      	mov	r0, r3
   96b6c:	bd80      	pop	{r7, pc}
   96b6e:	bf00      	nop
   96b70:	00095199 	.word	0x00095199

00096b74 <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   96b74:	b580      	push	{r7, lr}
   96b76:	b082      	sub	sp, #8
   96b78:	af00      	add	r7, sp, #0
   96b7a:	6078      	str	r0, [r7, #4]
   96b7c:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   96b7e:	6879      	ldr	r1, [r7, #4]
   96b80:	6838      	ldr	r0, [r7, #0]
   96b82:	4b03      	ldr	r3, [pc, #12]	; (96b90 <sv_cntrl_setoutput+0x1c>)
   96b84:	4798      	blx	r3
	return 0;
   96b86:	2300      	movs	r3, #0
}
   96b88:	4618      	mov	r0, r3
   96b8a:	3708      	adds	r7, #8
   96b8c:	46bd      	mov	sp, r7
   96b8e:	bd80      	pop	{r7, pc}
   96b90:	00093cd9 	.word	0x00093cd9

00096b94 <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   96b94:	b580      	push	{r7, lr}
   96b96:	b082      	sub	sp, #8
   96b98:	af00      	add	r7, sp, #0
   96b9a:	6078      	str	r0, [r7, #4]
   96b9c:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   96b9e:	6879      	ldr	r1, [r7, #4]
   96ba0:	6838      	ldr	r0, [r7, #0]
   96ba2:	4b03      	ldr	r3, [pc, #12]	; (96bb0 <sv_cntrl_resetoutput+0x1c>)
   96ba4:	4798      	blx	r3
	
	return 0;
   96ba6:	2300      	movs	r3, #0
   96ba8:	4618      	mov	r0, r3
   96baa:	3708      	adds	r7, #8
   96bac:	46bd      	mov	sp, r7
   96bae:	bd80      	pop	{r7, pc}
   96bb0:	00093d5d 	.word	0x00093d5d

00096bb4 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   96bb4:	b580      	push	{r7, lr}
   96bb6:	b084      	sub	sp, #16
   96bb8:	af00      	add	r7, sp, #0
   96bba:	4603      	mov	r3, r0
   96bbc:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   96bbe:	79fb      	ldrb	r3, [r7, #7]
   96bc0:	4618      	mov	r0, r3
   96bc2:	4b04      	ldr	r3, [pc, #16]	; (96bd4 <sv_console_bytedatawrite+0x20>)
   96bc4:	4798      	blx	r3
   96bc6:	4603      	mov	r3, r0
   96bc8:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   96bca:	68fb      	ldr	r3, [r7, #12]
	
}
   96bcc:	4618      	mov	r0, r3
   96bce:	3710      	adds	r7, #16
   96bd0:	46bd      	mov	sp, r7
   96bd2:	bd80      	pop	{r7, pc}
   96bd4:	000958d9 	.word	0x000958d9

00096bd8 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   96bd8:	b580      	push	{r7, lr}
   96bda:	b082      	sub	sp, #8
   96bdc:	af00      	add	r7, sp, #0
   96bde:	4603      	mov	r3, r0
   96be0:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   96be2:	79fb      	ldrb	r3, [r7, #7]
   96be4:	4618      	mov	r0, r3
   96be6:	4b03      	ldr	r3, [pc, #12]	; (96bf4 <sv_console_receivedbyte+0x1c>)
   96be8:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   96bea:	2300      	movs	r3, #0
	
}
   96bec:	4618      	mov	r0, r3
   96bee:	3708      	adds	r7, #8
   96bf0:	46bd      	mov	sp, r7
   96bf2:	bd80      	pop	{r7, pc}
   96bf4:	00098b21 	.word	0x00098b21

00096bf8 <sv_prop_startpropeo_aligning>:
void sv_prop_set_propro_rc(uint8_t data);
static uint8_t data = 0;
uint16_t count = 0;

void sv_prop_startpropeo_aligning(void)
{
   96bf8:	b590      	push	{r4, r7, lr}
   96bfa:	b085      	sub	sp, #20
   96bfc:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   96bfe:	4b07      	ldr	r3, [pc, #28]	; (96c1c <sv_prop_startpropeo_aligning+0x24>)
   96c00:	463c      	mov	r4, r7
   96c02:	6818      	ldr	r0, [r3, #0]
   96c04:	6859      	ldr	r1, [r3, #4]
   96c06:	689a      	ldr	r2, [r3, #8]
   96c08:	68db      	ldr	r3, [r3, #12]
   96c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   96c0c:	2100      	movs	r1, #0
   96c0e:	2001      	movs	r0, #1
   96c10:	4b03      	ldr	r3, [pc, #12]	; (96c20 <sv_prop_startpropeo_aligning+0x28>)
   96c12:	4798      	blx	r3

}
   96c14:	bf00      	nop
   96c16:	3714      	adds	r7, #20
   96c18:	46bd      	mov	sp, r7
   96c1a:	bd90      	pop	{r4, r7, pc}
   96c1c:	000a4b10 	.word	0x000a4b10
   96c20:	000966d1 	.word	0x000966d1

00096c24 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   96c24:	b580      	push	{r7, lr}
   96c26:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,0);
   96c28:	2100      	movs	r1, #0
   96c2a:	2002      	movs	r0, #2
   96c2c:	4b01      	ldr	r3, [pc, #4]	; (96c34 <sv_prop_startmixing+0x10>)
   96c2e:	4798      	blx	r3
	
	}
	
}
   96c30:	bf00      	nop
   96c32:	bd80      	pop	{r7, pc}
   96c34:	000966d1 	.word	0x000966d1

00096c38 <sv_prop_startacidpump>:
void sv_prop_startacidpump()
{
   96c38:	b580      	push	{r7, lr}
   96c3a:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   96c3c:	2100      	movs	r1, #0
   96c3e:	200c      	movs	r0, #12
   96c40:	4b01      	ldr	r3, [pc, #4]	; (96c48 <sv_prop_startacidpump+0x10>)
   96c42:	4798      	blx	r3
			
}
   96c44:	bf00      	nop
   96c46:	bd80      	pop	{r7, pc}
   96c48:	000966d1 	.word	0x000966d1

00096c4c <sv_prop_set_propro_rc>:
	
}


void sv_prop_set_propro_rc(uint8_t data)
{
   96c4c:	b580      	push	{r7, lr}
   96c4e:	b084      	sub	sp, #16
   96c50:	af00      	add	r7, sp, #0
   96c52:	4603      	mov	r3, r0
   96c54:	71fb      	strb	r3, [r7, #7]
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, data);				// nEEDS TO WRITE CAN EQUIVALENT COMMAND
	uint16_t rc_count = data;
   96c56:	79fb      	ldrb	r3, [r7, #7]
   96c58:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,data);
   96c5a:	79fb      	ldrb	r3, [r7, #7]
   96c5c:	b29b      	uxth	r3, r3
   96c5e:	4619      	mov	r1, r3
   96c60:	2003      	movs	r0, #3
   96c62:	4b03      	ldr	r3, [pc, #12]	; (96c70 <sv_prop_set_propro_rc+0x24>)
   96c64:	4798      	blx	r3
}
   96c66:	bf00      	nop
   96c68:	3710      	adds	r7, #16
   96c6a:	46bd      	mov	sp, r7
   96c6c:	bd80      	pop	{r7, pc}
   96c6e:	bf00      	nop
   96c70:	000966d1 	.word	0x000966d1

00096c74 <sv_prop_stopmixing>:

void sv_prop_stopmixing()
{
   96c74:	b580      	push	{r7, lr}
   96c76:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   96c78:	2100      	movs	r1, #0
   96c7a:	2003      	movs	r0, #3
   96c7c:	4b01      	ldr	r3, [pc, #4]	; (96c84 <sv_prop_stopmixing+0x10>)
   96c7e:	4798      	blx	r3
}
   96c80:	bf00      	nop
   96c82:	bd80      	pop	{r7, pc}
   96c84:	000966d1 	.word	0x000966d1

00096c88 <sv_prop_start_disinfect_intake>:

void sv_prop_start_disinfect_intake(void)
{
   96c88:	b580      	push	{r7, lr}
   96c8a:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   96c8c:	2100      	movs	r1, #0
   96c8e:	2004      	movs	r0, #4
   96c90:	4b01      	ldr	r3, [pc, #4]	; (96c98 <sv_prop_start_disinfect_intake+0x10>)
   96c92:	4798      	blx	r3

	}
	
}
   96c94:	bf00      	nop
   96c96:	bd80      	pop	{r7, pc}
   96c98:	000966d1 	.word	0x000966d1

00096c9c <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   96c9c:	b580      	push	{r7, lr}
   96c9e:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   96ca0:	2100      	movs	r1, #0
   96ca2:	2005      	movs	r0, #5
   96ca4:	4b01      	ldr	r3, [pc, #4]	; (96cac <sv_prop_stop_disinfect_intake+0x10>)
   96ca6:	4798      	blx	r3

	}
	
}
   96ca8:	bf00      	nop
   96caa:	bd80      	pop	{r7, pc}
   96cac:	000966d1 	.word	0x000966d1

00096cb0 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   96cb0:	b580      	push	{r7, lr}
   96cb2:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   96cb4:	2100      	movs	r1, #0
   96cb6:	2006      	movs	r0, #6
   96cb8:	4b01      	ldr	r3, [pc, #4]	; (96cc0 <sv_prop_start_citricdisinfect_intake+0x10>)
   96cba:	4798      	blx	r3


	}
	
}
   96cbc:	bf00      	nop
   96cbe:	bd80      	pop	{r7, pc}
   96cc0:	000966d1 	.word	0x000966d1

00096cc4 <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   96cc4:	b580      	push	{r7, lr}
   96cc6:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   96cc8:	2100      	movs	r1, #0
   96cca:	2007      	movs	r0, #7
   96ccc:	4b01      	ldr	r3, [pc, #4]	; (96cd4 <sv_prop_stop_citricdisinfect_intake+0x10>)
   96cce:	4798      	blx	r3


	}
	
}
   96cd0:	bf00      	nop
   96cd2:	bd80      	pop	{r7, pc}
   96cd4:	000966d1 	.word	0x000966d1

00096cd8 <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   96cd8:	b580      	push	{r7, lr}
   96cda:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   96cdc:	2206      	movs	r2, #6
   96cde:	4905      	ldr	r1, [pc, #20]	; (96cf4 <sv_prop_startopenfill+0x1c>)
   96ce0:	2018      	movs	r0, #24
   96ce2:	4b05      	ldr	r3, [pc, #20]	; (96cf8 <sv_prop_startopenfill+0x20>)
   96ce4:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   96ce6:	2100      	movs	r1, #0
   96ce8:	2008      	movs	r0, #8
   96cea:	4b04      	ldr	r3, [pc, #16]	; (96cfc <sv_prop_startopenfill+0x24>)
   96cec:	4798      	blx	r3
}
   96cee:	bf00      	nop
   96cf0:	bd80      	pop	{r7, pc}
   96cf2:	bf00      	nop
   96cf4:	000a4b20 	.word	0x000a4b20
   96cf8:	00098601 	.word	0x00098601
   96cfc:	000966d1 	.word	0x000966d1

00096d00 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   96d00:	b580      	push	{r7, lr}
   96d02:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   96d04:	2206      	movs	r2, #6
   96d06:	4905      	ldr	r1, [pc, #20]	; (96d1c <sv_prop_stopopenfill+0x1c>)
   96d08:	2018      	movs	r0, #24
   96d0a:	4b05      	ldr	r3, [pc, #20]	; (96d20 <sv_prop_stopopenfill+0x20>)
   96d0c:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   96d0e:	2100      	movs	r1, #0
   96d10:	2009      	movs	r0, #9
   96d12:	4b04      	ldr	r3, [pc, #16]	; (96d24 <sv_prop_stopopenfill+0x24>)
   96d14:	4798      	blx	r3
}
   96d16:	bf00      	nop
   96d18:	bd80      	pop	{r7, pc}
   96d1a:	bf00      	nop
   96d1c:	000a4b28 	.word	0x000a4b28
   96d20:	00098601 	.word	0x00098601
   96d24:	000966d1 	.word	0x000966d1

00096d28 <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   96d28:	b580      	push	{r7, lr}
   96d2a:	b082      	sub	sp, #8
   96d2c:	af00      	add	r7, sp, #0
   96d2e:	4603      	mov	r3, r0
   96d30:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   96d32:	88fb      	ldrh	r3, [r7, #6]
   96d34:	4618      	mov	r0, r3
   96d36:	4b03      	ldr	r3, [pc, #12]	; (96d44 <sv_cs_setpotvalue+0x1c>)
   96d38:	4798      	blx	r3
		
		}
   96d3a:	bf00      	nop
   96d3c:	4618      	mov	r0, r3
   96d3e:	3708      	adds	r7, #8
   96d40:	46bd      	mov	sp, r7
   96d42:	bd80      	pop	{r7, pc}
   96d44:	00096d6d 	.word	0x00096d6d

00096d48 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   96d48:	b580      	push	{r7, lr}
   96d4a:	b082      	sub	sp, #8
   96d4c:	af00      	add	r7, sp, #0
   96d4e:	4603      	mov	r3, r0
   96d50:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   96d52:	88fb      	ldrh	r3, [r7, #6]
   96d54:	4619      	mov	r1, r3
   96d56:	202f      	movs	r0, #47	; 0x2f
   96d58:	4b03      	ldr	r3, [pc, #12]	; (96d68 <sv_cs_setcondpotvalue+0x20>)
   96d5a:	4798      	blx	r3
	
}
   96d5c:	bf00      	nop
   96d5e:	4618      	mov	r0, r3
   96d60:	3708      	adds	r7, #8
   96d62:	46bd      	mov	sp, r7
   96d64:	bd80      	pop	{r7, pc}
   96d66:	bf00      	nop
   96d68:	00094311 	.word	0x00094311

00096d6c <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   96d6c:	b580      	push	{r7, lr}
   96d6e:	b084      	sub	sp, #16
   96d70:	af00      	add	r7, sp, #0
   96d72:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   96d74:	687b      	ldr	r3, [r7, #4]
   96d76:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   96d78:	89fb      	ldrh	r3, [r7, #14]
   96d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   96d7e:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   96d80:	4b08      	ldr	r3, [pc, #32]	; (96da4 <SV_CS_SET_POT+0x38>)
   96d82:	f641 4202 	movw	r2, #7170	; 0x1c02
   96d86:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   96d88:	89fb      	ldrh	r3, [r7, #14]
   96d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   96d8e:	b29a      	uxth	r2, r3
   96d90:	4b04      	ldr	r3, [pc, #16]	; (96da4 <SV_CS_SET_POT+0x38>)
   96d92:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   96d94:	2102      	movs	r1, #2
   96d96:	4803      	ldr	r0, [pc, #12]	; (96da4 <SV_CS_SET_POT+0x38>)
   96d98:	4b03      	ldr	r3, [pc, #12]	; (96da8 <SV_CS_SET_POT+0x3c>)
   96d9a:	4798      	blx	r3
   96d9c:	bf00      	nop
   96d9e:	3710      	adds	r7, #16
   96da0:	46bd      	mov	sp, r7
   96da2:	bd80      	pop	{r7, pc}
   96da4:	200732d8 	.word	0x200732d8
   96da8:	00094989 	.word	0x00094989

00096dac <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   96dac:	b580      	push	{r7, lr}
   96dae:	b098      	sub	sp, #96	; 0x60
   96db0:	af00      	add	r7, sp, #0
   96db2:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   96db4:	2300      	movs	r3, #0
   96db6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.FPcurrentstatus	= 1;
   96dba:	2301      	movs	r3, #1
   96dbc:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.DGPstatus = 1;
   96dbe:	2301      	movs	r3, #1
   96dc0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   96dc4:	2001      	movs	r0, #1
   96dc6:	4b9c      	ldr	r3, [pc, #624]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96dc8:	4798      	blx	r3
   96dca:	4603      	mov	r3, r0
   96dcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   96dce:	2002      	movs	r0, #2
   96dd0:	4b99      	ldr	r3, [pc, #612]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96dd2:	4798      	blx	r3
   96dd4:	4603      	mov	r3, r0
   96dd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   96dd8:	2003      	movs	r0, #3
   96dda:	4b97      	ldr	r3, [pc, #604]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96ddc:	4798      	blx	r3
   96dde:	4603      	mov	r3, r0
   96de0:	863b      	strh	r3, [r7, #48]	; 0x30

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   96de2:	2005      	movs	r0, #5
   96de4:	4b94      	ldr	r3, [pc, #592]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96de6:	4798      	blx	r3
   96de8:	4603      	mov	r3, r0
   96dea:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   96dec:	2006      	movs	r0, #6
   96dee:	4b92      	ldr	r3, [pc, #584]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96df0:	4798      	blx	r3
   96df2:	4603      	mov	r3, r0
   96df4:	86bb      	strh	r3, [r7, #52]	; 0x34
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   96df6:	2007      	movs	r0, #7
   96df8:	4b8f      	ldr	r3, [pc, #572]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96dfa:	4798      	blx	r3
   96dfc:	4603      	mov	r3, r0
   96dfe:	86fb      	strh	r3, [r7, #54]	; 0x36
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   96e00:	200d      	movs	r0, #13
   96e02:	4b8d      	ldr	r3, [pc, #564]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e04:	4798      	blx	r3
   96e06:	4603      	mov	r3, r0
   96e08:	877b      	strh	r3, [r7, #58]	; 0x3a
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   96e0a:	200e      	movs	r0, #14
   96e0c:	4b8a      	ldr	r3, [pc, #552]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e0e:	4798      	blx	r3
   96e10:	4603      	mov	r3, r0
   96e12:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   96e14:	200b      	movs	r0, #11
   96e16:	4b88      	ldr	r3, [pc, #544]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e18:	4798      	blx	r3
   96e1a:	4603      	mov	r3, r0
   96e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   96e20:	200c      	movs	r0, #12
   96e22:	4b85      	ldr	r3, [pc, #532]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e24:	4798      	blx	r3
   96e26:	4603      	mov	r3, r0
   96e28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   96e2c:	2013      	movs	r0, #19
   96e2e:	4b82      	ldr	r3, [pc, #520]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e30:	4798      	blx	r3
   96e32:	4603      	mov	r3, r0
   96e34:	83bb      	strh	r3, [r7, #28]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   96e36:	2014      	movs	r0, #20
   96e38:	4b7f      	ldr	r3, [pc, #508]	; (97038 <sv_status_getsystemstatus+0x28c>)
   96e3a:	4798      	blx	r3
   96e3c:	4603      	mov	r3, r0
   96e3e:	83fb      	strh	r3, [r7, #30]
	
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   96e40:	200e      	movs	r0, #14
   96e42:	4b7e      	ldr	r3, [pc, #504]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e44:	4798      	blx	r3
   96e46:	4603      	mov	r3, r0
   96e48:	733b      	strb	r3, [r7, #12]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   96e4a:	2005      	movs	r0, #5
   96e4c:	4b7b      	ldr	r3, [pc, #492]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e4e:	4798      	blx	r3
   96e50:	4603      	mov	r3, r0
   96e52:	b29b      	uxth	r3, r3
   96e54:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   96e56:	200f      	movs	r0, #15
   96e58:	4b78      	ldr	r3, [pc, #480]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e5a:	4798      	blx	r3
   96e5c:	4603      	mov	r3, r0
   96e5e:	b29b      	uxth	r3, r3
   96e60:	823b      	strh	r3, [r7, #16]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   96e62:	2010      	movs	r0, #16
   96e64:	4b75      	ldr	r3, [pc, #468]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e66:	4798      	blx	r3
   96e68:	4603      	mov	r3, r0
   96e6a:	b29b      	uxth	r3, r3
   96e6c:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   96e6e:	200d      	movs	r0, #13
   96e70:	4b72      	ldr	r3, [pc, #456]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e72:	4798      	blx	r3
   96e74:	4603      	mov	r3, r0
   96e76:	b29b      	uxth	r3, r3
   96e78:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   96e7a:	2006      	movs	r0, #6
   96e7c:	4b6f      	ldr	r3, [pc, #444]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e7e:	4798      	blx	r3
   96e80:	4603      	mov	r3, r0
   96e82:	b29b      	uxth	r3, r3
   96e84:	833b      	strh	r3, [r7, #24]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   96e86:	2007      	movs	r0, #7
   96e88:	4b6c      	ldr	r3, [pc, #432]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e8a:	4798      	blx	r3
   96e8c:	4603      	mov	r3, r0
   96e8e:	b29b      	uxth	r3, r3
   96e90:	837b      	strh	r3, [r7, #26]

	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   96e92:	201a      	movs	r0, #26
   96e94:	4b69      	ldr	r3, [pc, #420]	; (9703c <sv_status_getsystemstatus+0x290>)
   96e96:	4798      	blx	r3
   96e98:	4603      	mov	r3, r0
   96e9a:	b29b      	uxth	r3, r3
   96e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   96e9e:	2008      	movs	r0, #8
   96ea0:	4b66      	ldr	r3, [pc, #408]	; (9703c <sv_status_getsystemstatus+0x290>)
   96ea2:	4798      	blx	r3
   96ea4:	4603      	mov	r3, r0
   96ea6:	b29b      	uxth	r3, r3
   96ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   96eaa:	2003      	movs	r0, #3
   96eac:	4b63      	ldr	r3, [pc, #396]	; (9703c <sv_status_getsystemstatus+0x290>)
   96eae:	4798      	blx	r3
   96eb0:	4603      	mov	r3, r0
   96eb2:	b29b      	uxth	r3, r3
   96eb4:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   96eb6:	2004      	movs	r0, #4
   96eb8:	4b60      	ldr	r3, [pc, #384]	; (9703c <sv_status_getsystemstatus+0x290>)
   96eba:	4798      	blx	r3
   96ebc:	4603      	mov	r3, r0
   96ebe:	b29b      	uxth	r3, r3
   96ec0:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   96ec2:	2001      	movs	r0, #1
   96ec4:	4b5d      	ldr	r3, [pc, #372]	; (9703c <sv_status_getsystemstatus+0x290>)
   96ec6:	4798      	blx	r3
   96ec8:	4603      	mov	r3, r0
   96eca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   96ece:	200c      	movs	r0, #12
   96ed0:	4b5a      	ldr	r3, [pc, #360]	; (9703c <sv_status_getsystemstatus+0x290>)
   96ed2:	4798      	blx	r3
   96ed4:	4603      	mov	r3, r0
   96ed6:	b29b      	uxth	r3, r3
   96ed8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   96edc:	201b      	movs	r0, #27
   96ede:	4b57      	ldr	r3, [pc, #348]	; (9703c <sv_status_getsystemstatus+0x290>)
   96ee0:	4798      	blx	r3
   96ee2:	4603      	mov	r3, r0
   96ee4:	b29b      	uxth	r3, r3
   96ee6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   96eea:	2009      	movs	r0, #9
   96eec:	4b53      	ldr	r3, [pc, #332]	; (9703c <sv_status_getsystemstatus+0x290>)
   96eee:	4798      	blx	r3
   96ef0:	4603      	mov	r3, r0
   96ef2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   96ef6:	200a      	movs	r0, #10
   96ef8:	4b50      	ldr	r3, [pc, #320]	; (9703c <sv_status_getsystemstatus+0x290>)
   96efa:	4798      	blx	r3
   96efc:	4603      	mov	r3, r0
   96efe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   96f02:	2013      	movs	r0, #19
   96f04:	4b4d      	ldr	r3, [pc, #308]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f06:	4798      	blx	r3
   96f08:	4603      	mov	r3, r0
   96f0a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   96f0e:	2014      	movs	r0, #20
   96f10:	4b4a      	ldr	r3, [pc, #296]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f12:	4798      	blx	r3
   96f14:	4603      	mov	r3, r0
   96f16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   96f1a:	2015      	movs	r0, #21
   96f1c:	4b47      	ldr	r3, [pc, #284]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f1e:	4798      	blx	r3
   96f20:	4603      	mov	r3, r0
   96f22:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   96f26:	2016      	movs	r0, #22
   96f28:	4b44      	ldr	r3, [pc, #272]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f2a:	4798      	blx	r3
   96f2c:	4603      	mov	r3, r0
   96f2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   96f32:	2017      	movs	r0, #23
   96f34:	4b41      	ldr	r3, [pc, #260]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f36:	4798      	blx	r3
   96f38:	4603      	mov	r3, r0
   96f3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   96f3e:	2018      	movs	r0, #24
   96f40:	4b3e      	ldr	r3, [pc, #248]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f42:	4798      	blx	r3
   96f44:	4603      	mov	r3, r0
   96f46:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   96f4a:	2002      	movs	r0, #2
   96f4c:	4b3b      	ldr	r3, [pc, #236]	; (9703c <sv_status_getsystemstatus+0x290>)
   96f4e:	4798      	blx	r3
   96f50:	4603      	mov	r3, r0
   96f52:	b29b      	uxth	r3, r3
   96f54:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   96f58:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   96f5a:	687b      	ldr	r3, [r7, #4]
   96f5c:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   96f5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   96f60:	687b      	ldr	r3, [r7, #4]
   96f62:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   96f64:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   96f66:	687b      	ldr	r3, [r7, #4]
   96f68:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   96f6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   96f6c:	687b      	ldr	r3, [r7, #4]
   96f6e:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   96f70:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   96f72:	687b      	ldr	r3, [r7, #4]
   96f74:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   96f76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   96f78:	687b      	ldr	r3, [r7, #4]
   96f7a:	865a      	strh	r2, [r3, #50]	; 0x32
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   96f7c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   96f80:	687b      	ldr	r3, [r7, #4]
   96f82:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   96f84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   96f88:	687b      	ldr	r3, [r7, #4]
   96f8a:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   96f8c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   96f8e:	687b      	ldr	r3, [r7, #4]
   96f90:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   96f92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   96f94:	687b      	ldr	r3, [r7, #4]
   96f96:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   96f98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   96f9a:	687b      	ldr	r3, [r7, #4]
   96f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   96f9e:	8bba      	ldrh	r2, [r7, #28]
   96fa0:	687b      	ldr	r3, [r7, #4]
   96fa2:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   96fa4:	8bfa      	ldrh	r2, [r7, #30]
   96fa6:	687b      	ldr	r3, [r7, #4]
   96fa8:	825a      	strh	r2, [r3, #18]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   96faa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
   96fae:	687b      	ldr	r3, [r7, #4]
   96fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   96fb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   96fb6:	687b      	ldr	r3, [r7, #4]
   96fb8:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   96fba:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   96fbe:	687b      	ldr	r3, [r7, #4]
   96fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   96fc4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   96fc6:	687b      	ldr	r3, [r7, #4]
   96fc8:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   96fca:	89fa      	ldrh	r2, [r7, #14]
   96fcc:	687b      	ldr	r3, [r7, #4]
   96fce:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   96fd0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
   96fd4:	687b      	ldr	r3, [r7, #4]
   96fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   96fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   96fda:	687b      	ldr	r3, [r7, #4]
   96fdc:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   96fde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   96fe0:	687b      	ldr	r3, [r7, #4]
   96fe2:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   96fe4:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   96fe8:	687b      	ldr	r3, [r7, #4]
   96fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   96fee:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
   96ff2:	687b      	ldr	r3, [r7, #4]
   96ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   96ff8:	7b3a      	ldrb	r2, [r7, #12]
   96ffa:	687b      	ldr	r3, [r7, #4]
   96ffc:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   96ffe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
   97002:	687b      	ldr	r3, [r7, #4]
   97004:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   97006:	8b3a      	ldrh	r2, [r7, #24]
   97008:	687b      	ldr	r3, [r7, #4]
   9700a:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   9700c:	8b7a      	ldrh	r2, [r7, #26]
   9700e:	687b      	ldr	r3, [r7, #4]
   97010:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   97012:	8afa      	ldrh	r2, [r7, #22]
   97014:	687b      	ldr	r3, [r7, #4]
   97016:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   97018:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
   9701c:	687b      	ldr	r3, [r7, #4]
   9701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   97022:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
   97026:	687b      	ldr	r3, [r7, #4]
   97028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	
	return 0;
   9702c:	2300      	movs	r3, #0

}
   9702e:	4618      	mov	r0, r3
   97030:	3760      	adds	r7, #96	; 0x60
   97032:	46bd      	mov	sp, r7
   97034:	bd80      	pop	{r7, pc}
   97036:	bf00      	nop
   97038:	000938f1 	.word	0x000938f1
   9703c:	0009564d 	.word	0x0009564d

00097040 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   97040:	b580      	push	{r7, lr}
   97042:	b082      	sub	sp, #8
   97044:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   97046:	4b1b      	ldr	r3, [pc, #108]	; (970b4 <SV_SYSTEM_INIT+0x74>)
   97048:	4798      	blx	r3
	DD_INIT_PIO();
   9704a:	4b1b      	ldr	r3, [pc, #108]	; (970b8 <SV_SYSTEM_INIT+0x78>)
   9704c:	4798      	blx	r3
	DD_INIT_UART();
   9704e:	4b1b      	ldr	r3, [pc, #108]	; (970bc <SV_SYSTEM_INIT+0x7c>)
   97050:	4798      	blx	r3
	DD_INIT_TIMER();
   97052:	4b1b      	ldr	r3, [pc, #108]	; (970c0 <SV_SYSTEM_INIT+0x80>)
   97054:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   97056:	4b1b      	ldr	r3, [pc, #108]	; (970c4 <SV_SYSTEM_INIT+0x84>)
   97058:	4798      	blx	r3
	DD_INIT_NVM();
   9705a:	4b1b      	ldr	r3, [pc, #108]	; (970c8 <SV_SYSTEM_INIT+0x88>)
   9705c:	4798      	blx	r3
	DD_INIT_INT();
   9705e:	4b1b      	ldr	r3, [pc, #108]	; (970cc <SV_SYSTEM_INIT+0x8c>)
   97060:	4798      	blx	r3
	DD_INIT_IIC();
   97062:	4b1b      	ldr	r3, [pc, #108]	; (970d0 <SV_SYSTEM_INIT+0x90>)
   97064:	4798      	blx	r3
	DD_INIT_SPI();
   97066:	4b1b      	ldr	r3, [pc, #108]	; (970d4 <SV_SYSTEM_INIT+0x94>)
   97068:	4798      	blx	r3

    DD_INIT_CAN();
   9706a:	4b1b      	ldr	r3, [pc, #108]	; (970d8 <SV_SYSTEM_INIT+0x98>)
   9706c:	4798      	blx	r3
    nvram_read(CAL_PS1);
   9706e:	2003      	movs	r0, #3
   97070:	4b1a      	ldr	r3, [pc, #104]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   97072:	4798      	blx	r3
	nvram_read(CAL_APT);
   97074:	2006      	movs	r0, #6
   97076:	4b19      	ldr	r3, [pc, #100]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   97078:	4798      	blx	r3
	nvram_read(CAL_COND);
   9707a:	2008      	movs	r0, #8
   9707c:	4b17      	ldr	r3, [pc, #92]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   9707e:	4798      	blx	r3
	nvram_read(CAL_HEP);
   97080:	2009      	movs	r0, #9
   97082:	4b16      	ldr	r3, [pc, #88]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   97084:	4798      	blx	r3
	nvram_read(CAL_TEMP_TS1);
   97086:	2000      	movs	r0, #0
   97088:	4b14      	ldr	r3, [pc, #80]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   9708a:	4798      	blx	r3
	nvram_read(CAL_CHECKSUM);
   9708c:	200a      	movs	r0, #10
   9708e:	4b13      	ldr	r3, [pc, #76]	; (970dc <SV_SYSTEM_INIT+0x9c>)
   97090:	4798      	blx	r3
	for (int i=0;i<10;i++)
   97092:	2300      	movs	r3, #0
   97094:	607b      	str	r3, [r7, #4]
   97096:	e002      	b.n	9709e <SV_SYSTEM_INIT+0x5e>
   97098:	687b      	ldr	r3, [r7, #4]
   9709a:	3301      	adds	r3, #1
   9709c:	607b      	str	r3, [r7, #4]
   9709e:	687b      	ldr	r3, [r7, #4]
   970a0:	2b09      	cmp	r3, #9
   970a2:	ddf9      	ble.n	97098 <SV_SYSTEM_INIT+0x58>
		{
			//printf("error\n");
		}
	}
	
	SV_START_TIMER(0,1);
   970a4:	2101      	movs	r1, #1
   970a6:	2000      	movs	r0, #0
   970a8:	4b0d      	ldr	r3, [pc, #52]	; (970e0 <SV_SYSTEM_INIT+0xa0>)
   970aa:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   970ac:	bf00      	nop
   970ae:	3708      	adds	r7, #8
   970b0:	46bd      	mov	sp, r7
   970b2:	bd80      	pop	{r7, pc}
   970b4:	00093a39 	.word	0x00093a39
   970b8:	00093a6d 	.word	0x00093a6d
   970bc:	0009663d 	.word	0x0009663d
   970c0:	00096135 	.word	0x00096135
   970c4:	000946c1 	.word	0x000946c1
   970c8:	0009456d 	.word	0x0009456d
   970cc:	00094491 	.word	0x00094491
   970d0:	000942dd 	.word	0x000942dd
   970d4:	00094ac9 	.word	0x00094ac9
   970d8:	00093781 	.word	0x00093781
   970dc:	0008c9e9 	.word	0x0008c9e9
   970e0:	000970e5 	.word	0x000970e5

000970e4 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   970e4:	b580      	push	{r7, lr}
   970e6:	b082      	sub	sp, #8
   970e8:	af00      	add	r7, sp, #0
   970ea:	4603      	mov	r3, r0
   970ec:	6039      	str	r1, [r7, #0]
   970ee:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   970f0:	683b      	ldr	r3, [r7, #0]
   970f2:	b2da      	uxtb	r2, r3
   970f4:	79fb      	ldrb	r3, [r7, #7]
   970f6:	4611      	mov	r1, r2
   970f8:	4618      	mov	r0, r3
   970fa:	4b03      	ldr	r3, [pc, #12]	; (97108 <SV_START_TIMER+0x24>)
   970fc:	4798      	blx	r3
	
	return 0;
   970fe:	2300      	movs	r3, #0
}
   97100:	4618      	mov	r0, r3
   97102:	3708      	adds	r7, #8
   97104:	46bd      	mov	sp, r7
   97106:	bd80      	pop	{r7, pc}
   97108:	00095925 	.word	0x00095925

0009710c <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   9710c:	b480      	push	{r7}
   9710e:	b085      	sub	sp, #20
   97110:	af00      	add	r7, sp, #0
   97112:	4603      	mov	r3, r0
   97114:	6039      	str	r1, [r7, #0]
   97116:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   97118:	79fb      	ldrb	r3, [r7, #7]
   9711a:	3b01      	subs	r3, #1
   9711c:	4a08      	ldr	r2, [pc, #32]	; (97140 <sv_nvmgetdata+0x34>)
   9711e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   97122:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   97124:	7b3a      	ldrb	r2, [r7, #12]
   97126:	683b      	ldr	r3, [r7, #0]
   97128:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   9712a:	683b      	ldr	r3, [r7, #0]
   9712c:	3301      	adds	r3, #1
   9712e:	7b7a      	ldrb	r2, [r7, #13]
   97130:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   97132:	2300      	movs	r3, #0
}
   97134:	4618      	mov	r0, r3
   97136:	3714      	adds	r7, #20
   97138:	46bd      	mov	sp, r7
   9713a:	bc80      	pop	{r7}
   9713c:	4770      	bx	lr
   9713e:	bf00      	nop
   97140:	200709d4 	.word	0x200709d4

00097144 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   97144:	b480      	push	{r7}
   97146:	b085      	sub	sp, #20
   97148:	af00      	add	r7, sp, #0
   9714a:	4603      	mov	r3, r0
   9714c:	6039      	str	r1, [r7, #0]
   9714e:	71fb      	strb	r3, [r7, #7]
   97150:	4613      	mov	r3, r2
   97152:	71bb      	strb	r3, [r7, #6]
				
				
					
	#endif
	
			temp.byte[0] = pdata[0];
   97154:	683b      	ldr	r3, [r7, #0]
   97156:	781b      	ldrb	r3, [r3, #0]
   97158:	733b      	strb	r3, [r7, #12]
			temp.byte[1] = pdata[1];
   9715a:	683b      	ldr	r3, [r7, #0]
   9715c:	785b      	ldrb	r3, [r3, #1]
   9715e:	737b      	strb	r3, [r7, #13]
			nvmarray[dataItemId-1] = temp.twobyte;
   97160:	79fb      	ldrb	r3, [r7, #7]
   97162:	3b01      	subs	r3, #1
   97164:	89b9      	ldrh	r1, [r7, #12]
   97166:	4a04      	ldr	r2, [pc, #16]	; (97178 <sv_nvmsetdata+0x34>)
   97168:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
		return SV_OK;
   9716c:	2300      	movs	r3, #0
   9716e:	4618      	mov	r0, r3
   97170:	3714      	adds	r7, #20
   97172:	46bd      	mov	sp, r7
   97174:	bc80      	pop	{r7}
   97176:	4770      	bx	lr
   97178:	200709d4 	.word	0x200709d4

0009717c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   9717c:	b580      	push	{r7, lr}
   9717e:	b086      	sub	sp, #24
   97180:	af00      	add	r7, sp, #0
   97182:	60f8      	str	r0, [r7, #12]
   97184:	60b9      	str	r1, [r7, #8]
   97186:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   97188:	2300      	movs	r3, #0
   9718a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   9718c:	68fb      	ldr	r3, [r7, #12]
   9718e:	2b00      	cmp	r3, #0
   97190:	d012      	beq.n	971b8 <_read+0x3c>
		return -1;
   97192:	f04f 33ff 	mov.w	r3, #4294967295
   97196:	e013      	b.n	971c0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   97198:	4b0b      	ldr	r3, [pc, #44]	; (971c8 <_read+0x4c>)
   9719a:	681b      	ldr	r3, [r3, #0]
   9719c:	4a0b      	ldr	r2, [pc, #44]	; (971cc <_read+0x50>)
   9719e:	6812      	ldr	r2, [r2, #0]
   971a0:	68b9      	ldr	r1, [r7, #8]
   971a2:	4610      	mov	r0, r2
   971a4:	4798      	blx	r3
		ptr++;
   971a6:	68bb      	ldr	r3, [r7, #8]
   971a8:	3301      	adds	r3, #1
   971aa:	60bb      	str	r3, [r7, #8]
		nChars++;
   971ac:	697b      	ldr	r3, [r7, #20]
   971ae:	3301      	adds	r3, #1
   971b0:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   971b2:	687b      	ldr	r3, [r7, #4]
   971b4:	3b01      	subs	r3, #1
   971b6:	607b      	str	r3, [r7, #4]
   971b8:	687b      	ldr	r3, [r7, #4]
   971ba:	2b00      	cmp	r3, #0
   971bc:	dcec      	bgt.n	97198 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   971be:	697b      	ldr	r3, [r7, #20]
}
   971c0:	4618      	mov	r0, r3
   971c2:	3718      	adds	r7, #24
   971c4:	46bd      	mov	sp, r7
   971c6:	bd80      	pop	{r7, pc}
   971c8:	200732e0 	.word	0x200732e0
   971cc:	200732e8 	.word	0x200732e8

000971d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   971d0:	b580      	push	{r7, lr}
   971d2:	b086      	sub	sp, #24
   971d4:	af00      	add	r7, sp, #0
   971d6:	60f8      	str	r0, [r7, #12]
   971d8:	60b9      	str	r1, [r7, #8]
   971da:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   971dc:	2300      	movs	r3, #0
   971de:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   971e0:	68fb      	ldr	r3, [r7, #12]
   971e2:	2b01      	cmp	r3, #1
   971e4:	d01e      	beq.n	97224 <_write+0x54>
   971e6:	68fb      	ldr	r3, [r7, #12]
   971e8:	2b02      	cmp	r3, #2
   971ea:	d01b      	beq.n	97224 <_write+0x54>
   971ec:	68fb      	ldr	r3, [r7, #12]
   971ee:	2b03      	cmp	r3, #3
   971f0:	d018      	beq.n	97224 <_write+0x54>
		return -1;
   971f2:	f04f 33ff 	mov.w	r3, #4294967295
   971f6:	e019      	b.n	9722c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   971f8:	4b0e      	ldr	r3, [pc, #56]	; (97234 <_write+0x64>)
   971fa:	681a      	ldr	r2, [r3, #0]
   971fc:	4b0e      	ldr	r3, [pc, #56]	; (97238 <_write+0x68>)
   971fe:	6818      	ldr	r0, [r3, #0]
   97200:	68bb      	ldr	r3, [r7, #8]
   97202:	1c59      	adds	r1, r3, #1
   97204:	60b9      	str	r1, [r7, #8]
   97206:	781b      	ldrb	r3, [r3, #0]
   97208:	4619      	mov	r1, r3
   9720a:	4790      	blx	r2
   9720c:	4603      	mov	r3, r0
   9720e:	2b00      	cmp	r3, #0
   97210:	da02      	bge.n	97218 <_write+0x48>
			return -1;
   97212:	f04f 33ff 	mov.w	r3, #4294967295
   97216:	e009      	b.n	9722c <_write+0x5c>
		}
		++nChars;
   97218:	697b      	ldr	r3, [r7, #20]
   9721a:	3301      	adds	r3, #1
   9721c:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9721e:	687b      	ldr	r3, [r7, #4]
   97220:	3b01      	subs	r3, #1
   97222:	607b      	str	r3, [r7, #4]
   97224:	687b      	ldr	r3, [r7, #4]
   97226:	2b00      	cmp	r3, #0
   97228:	d1e6      	bne.n	971f8 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   9722a:	697b      	ldr	r3, [r7, #20]
}
   9722c:	4618      	mov	r0, r3
   9722e:	3718      	adds	r7, #24
   97230:	46bd      	mov	sp, r7
   97232:	bd80      	pop	{r7, pc}
   97234:	200732e4 	.word	0x200732e4
   97238:	200732e8 	.word	0x200732e8

0009723c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   9723c:	b580      	push	{r7, lr}
   9723e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   97240:	4b05      	ldr	r3, [pc, #20]	; (97258 <board_init+0x1c>)
   97242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   97246:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   97248:	4a04      	ldr	r2, [pc, #16]	; (9725c <board_init+0x20>)
   9724a:	f44f 7140 	mov.w	r1, #768	; 0x300
   9724e:	4804      	ldr	r0, [pc, #16]	; (97260 <board_init+0x24>)
   97250:	4b04      	ldr	r3, [pc, #16]	; (97264 <board_init+0x28>)
   97252:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   97254:	bf00      	nop
   97256:	bd80      	pop	{r7, pc}
   97258:	400e1a50 	.word	0x400e1a50
   9725c:	08000001 	.word	0x08000001
   97260:	400e0e00 	.word	0x400e0e00
   97264:	00097581 	.word	0x00097581

00097268 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   97268:	b480      	push	{r7}
   9726a:	b085      	sub	sp, #20
   9726c:	af00      	add	r7, sp, #0
   9726e:	60f8      	str	r0, [r7, #12]
   97270:	60b9      	str	r1, [r7, #8]
   97272:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   97274:	687b      	ldr	r3, [r7, #4]
   97276:	2b00      	cmp	r3, #0
   97278:	d003      	beq.n	97282 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   9727a:	68fb      	ldr	r3, [r7, #12]
   9727c:	68ba      	ldr	r2, [r7, #8]
   9727e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   97280:	e002      	b.n	97288 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   97282:	68fb      	ldr	r3, [r7, #12]
   97284:	68ba      	ldr	r2, [r7, #8]
   97286:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   97288:	bf00      	nop
   9728a:	3714      	adds	r7, #20
   9728c:	46bd      	mov	sp, r7
   9728e:	bc80      	pop	{r7}
   97290:	4770      	bx	lr
   97292:	bf00      	nop

00097294 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   97294:	b480      	push	{r7}
   97296:	b087      	sub	sp, #28
   97298:	af00      	add	r7, sp, #0
   9729a:	60f8      	str	r0, [r7, #12]
   9729c:	60b9      	str	r1, [r7, #8]
   9729e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   972a0:	68fb      	ldr	r3, [r7, #12]
   972a2:	687a      	ldr	r2, [r7, #4]
   972a4:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   972a6:	68bb      	ldr	r3, [r7, #8]
   972a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   972ac:	d01f      	beq.n	972ee <pio_set_peripheral+0x5a>
   972ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   972b2:	d805      	bhi.n	972c0 <pio_set_peripheral+0x2c>
   972b4:	2b00      	cmp	r3, #0
   972b6:	d027      	beq.n	97308 <pio_set_peripheral+0x74>
   972b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   972bc:	d00a      	beq.n	972d4 <pio_set_peripheral+0x40>
   972be:	e01f      	b.n	97300 <pio_set_peripheral+0x6c>
   972c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   972c4:	d020      	beq.n	97308 <pio_set_peripheral+0x74>
   972c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   972ca:	d01d      	beq.n	97308 <pio_set_peripheral+0x74>
   972cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   972d0:	d01a      	beq.n	97308 <pio_set_peripheral+0x74>
   972d2:	e015      	b.n	97300 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   972d4:	68fb      	ldr	r3, [r7, #12]
   972d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   972d8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   972da:	68fb      	ldr	r3, [r7, #12]
   972dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   972de:	687b      	ldr	r3, [r7, #4]
   972e0:	43d9      	mvns	r1, r3
   972e2:	697b      	ldr	r3, [r7, #20]
   972e4:	400b      	ands	r3, r1
   972e6:	401a      	ands	r2, r3
   972e8:	68fb      	ldr	r3, [r7, #12]
   972ea:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   972ec:	e008      	b.n	97300 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   972ee:	68fb      	ldr	r3, [r7, #12]
   972f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   972f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   972f4:	687a      	ldr	r2, [r7, #4]
   972f6:	697b      	ldr	r3, [r7, #20]
   972f8:	431a      	orrs	r2, r3
   972fa:	68fb      	ldr	r3, [r7, #12]
   972fc:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   972fe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   97300:	68fb      	ldr	r3, [r7, #12]
   97302:	687a      	ldr	r2, [r7, #4]
   97304:	605a      	str	r2, [r3, #4]
   97306:	e000      	b.n	9730a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   97308:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   9730a:	371c      	adds	r7, #28
   9730c:	46bd      	mov	sp, r7
   9730e:	bc80      	pop	{r7}
   97310:	4770      	bx	lr
   97312:	bf00      	nop

00097314 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   97314:	b580      	push	{r7, lr}
   97316:	b084      	sub	sp, #16
   97318:	af00      	add	r7, sp, #0
   9731a:	60f8      	str	r0, [r7, #12]
   9731c:	60b9      	str	r1, [r7, #8]
   9731e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   97320:	68b9      	ldr	r1, [r7, #8]
   97322:	68f8      	ldr	r0, [r7, #12]
   97324:	4b19      	ldr	r3, [pc, #100]	; (9738c <pio_set_input+0x78>)
   97326:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   97328:	687b      	ldr	r3, [r7, #4]
   9732a:	f003 0301 	and.w	r3, r3, #1
   9732e:	461a      	mov	r2, r3
   97330:	68b9      	ldr	r1, [r7, #8]
   97332:	68f8      	ldr	r0, [r7, #12]
   97334:	4b16      	ldr	r3, [pc, #88]	; (97390 <pio_set_input+0x7c>)
   97336:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   97338:	687b      	ldr	r3, [r7, #4]
   9733a:	f003 030a 	and.w	r3, r3, #10
   9733e:	2b00      	cmp	r3, #0
   97340:	d003      	beq.n	9734a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   97342:	68fb      	ldr	r3, [r7, #12]
   97344:	68ba      	ldr	r2, [r7, #8]
   97346:	621a      	str	r2, [r3, #32]
   97348:	e002      	b.n	97350 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   9734a:	68fb      	ldr	r3, [r7, #12]
   9734c:	68ba      	ldr	r2, [r7, #8]
   9734e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   97350:	687b      	ldr	r3, [r7, #4]
   97352:	f003 0302 	and.w	r3, r3, #2
   97356:	2b00      	cmp	r3, #0
   97358:	d004      	beq.n	97364 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   9735a:	68fb      	ldr	r3, [r7, #12]
   9735c:	68ba      	ldr	r2, [r7, #8]
   9735e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   97362:	e008      	b.n	97376 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   97364:	687b      	ldr	r3, [r7, #4]
   97366:	f003 0308 	and.w	r3, r3, #8
   9736a:	2b00      	cmp	r3, #0
   9736c:	d003      	beq.n	97376 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9736e:	68fb      	ldr	r3, [r7, #12]
   97370:	68ba      	ldr	r2, [r7, #8]
   97372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   97376:	68fb      	ldr	r3, [r7, #12]
   97378:	68ba      	ldr	r2, [r7, #8]
   9737a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9737c:	68fb      	ldr	r3, [r7, #12]
   9737e:	68ba      	ldr	r2, [r7, #8]
   97380:	601a      	str	r2, [r3, #0]
}
   97382:	bf00      	nop
   97384:	3710      	adds	r7, #16
   97386:	46bd      	mov	sp, r7
   97388:	bd80      	pop	{r7, pc}
   9738a:	bf00      	nop
   9738c:	000973f9 	.word	0x000973f9
   97390:	00097269 	.word	0x00097269

00097394 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   97394:	b580      	push	{r7, lr}
   97396:	b084      	sub	sp, #16
   97398:	af00      	add	r7, sp, #0
   9739a:	60f8      	str	r0, [r7, #12]
   9739c:	60b9      	str	r1, [r7, #8]
   9739e:	607a      	str	r2, [r7, #4]
   973a0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   973a2:	68b9      	ldr	r1, [r7, #8]
   973a4:	68f8      	ldr	r0, [r7, #12]
   973a6:	4b12      	ldr	r3, [pc, #72]	; (973f0 <pio_set_output+0x5c>)
   973a8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   973aa:	69ba      	ldr	r2, [r7, #24]
   973ac:	68b9      	ldr	r1, [r7, #8]
   973ae:	68f8      	ldr	r0, [r7, #12]
   973b0:	4b10      	ldr	r3, [pc, #64]	; (973f4 <pio_set_output+0x60>)
   973b2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   973b4:	683b      	ldr	r3, [r7, #0]
   973b6:	2b00      	cmp	r3, #0
   973b8:	d003      	beq.n	973c2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   973ba:	68fb      	ldr	r3, [r7, #12]
   973bc:	68ba      	ldr	r2, [r7, #8]
   973be:	651a      	str	r2, [r3, #80]	; 0x50
   973c0:	e002      	b.n	973c8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   973c2:	68fb      	ldr	r3, [r7, #12]
   973c4:	68ba      	ldr	r2, [r7, #8]
   973c6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   973c8:	687b      	ldr	r3, [r7, #4]
   973ca:	2b00      	cmp	r3, #0
   973cc:	d003      	beq.n	973d6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   973ce:	68fb      	ldr	r3, [r7, #12]
   973d0:	68ba      	ldr	r2, [r7, #8]
   973d2:	631a      	str	r2, [r3, #48]	; 0x30
   973d4:	e002      	b.n	973dc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   973d6:	68fb      	ldr	r3, [r7, #12]
   973d8:	68ba      	ldr	r2, [r7, #8]
   973da:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   973dc:	68fb      	ldr	r3, [r7, #12]
   973de:	68ba      	ldr	r2, [r7, #8]
   973e0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   973e2:	68fb      	ldr	r3, [r7, #12]
   973e4:	68ba      	ldr	r2, [r7, #8]
   973e6:	601a      	str	r2, [r3, #0]
}
   973e8:	bf00      	nop
   973ea:	3710      	adds	r7, #16
   973ec:	46bd      	mov	sp, r7
   973ee:	bd80      	pop	{r7, pc}
   973f0:	000973f9 	.word	0x000973f9
   973f4:	00097269 	.word	0x00097269

000973f8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   973f8:	b480      	push	{r7}
   973fa:	b083      	sub	sp, #12
   973fc:	af00      	add	r7, sp, #0
   973fe:	6078      	str	r0, [r7, #4]
   97400:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   97402:	687b      	ldr	r3, [r7, #4]
   97404:	683a      	ldr	r2, [r7, #0]
   97406:	645a      	str	r2, [r3, #68]	; 0x44
}
   97408:	bf00      	nop
   9740a:	370c      	adds	r7, #12
   9740c:	46bd      	mov	sp, r7
   9740e:	bc80      	pop	{r7}
   97410:	4770      	bx	lr
   97412:	bf00      	nop

00097414 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   97414:	b480      	push	{r7}
   97416:	b083      	sub	sp, #12
   97418:	af00      	add	r7, sp, #0
   9741a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9741c:	687b      	ldr	r3, [r7, #4]
   9741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   97420:	4618      	mov	r0, r3
   97422:	370c      	adds	r7, #12
   97424:	46bd      	mov	sp, r7
   97426:	bc80      	pop	{r7}
   97428:	4770      	bx	lr
   9742a:	bf00      	nop

0009742c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9742c:	b480      	push	{r7}
   9742e:	b083      	sub	sp, #12
   97430:	af00      	add	r7, sp, #0
   97432:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   97434:	687b      	ldr	r3, [r7, #4]
   97436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   97438:	4618      	mov	r0, r3
   9743a:	370c      	adds	r7, #12
   9743c:	46bd      	mov	sp, r7
   9743e:	bc80      	pop	{r7}
   97440:	4770      	bx	lr
   97442:	bf00      	nop

00097444 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   97444:	b590      	push	{r4, r7, lr}
   97446:	b087      	sub	sp, #28
   97448:	af02      	add	r7, sp, #8
   9744a:	6078      	str	r0, [r7, #4]
   9744c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9744e:	687b      	ldr	r3, [r7, #4]
   97450:	095b      	lsrs	r3, r3, #5
   97452:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   97456:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9745a:	025b      	lsls	r3, r3, #9
   9745c:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9745e:	683b      	ldr	r3, [r7, #0]
   97460:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   97464:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   97468:	d046      	beq.n	974f8 <pio_configure_pin+0xb4>
   9746a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9746e:	d806      	bhi.n	9747e <pio_configure_pin+0x3a>
   97470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   97474:	d00a      	beq.n	9748c <pio_configure_pin+0x48>
   97476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9747a:	d022      	beq.n	974c2 <pio_configure_pin+0x7e>
   9747c:	e070      	b.n	97560 <pio_configure_pin+0x11c>
   9747e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   97482:	d045      	beq.n	97510 <pio_configure_pin+0xcc>
   97484:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   97488:	d042      	beq.n	97510 <pio_configure_pin+0xcc>
   9748a:	e069      	b.n	97560 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9748c:	687b      	ldr	r3, [r7, #4]
   9748e:	f003 031f 	and.w	r3, r3, #31
   97492:	2201      	movs	r2, #1
   97494:	fa02 f303 	lsl.w	r3, r2, r3
   97498:	461a      	mov	r2, r3
   9749a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9749e:	68f8      	ldr	r0, [r7, #12]
   974a0:	4b33      	ldr	r3, [pc, #204]	; (97570 <pio_configure_pin+0x12c>)
   974a2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   974a4:	687b      	ldr	r3, [r7, #4]
   974a6:	f003 031f 	and.w	r3, r3, #31
   974aa:	2201      	movs	r2, #1
   974ac:	fa02 f303 	lsl.w	r3, r2, r3
   974b0:	4619      	mov	r1, r3
   974b2:	683b      	ldr	r3, [r7, #0]
   974b4:	f003 0301 	and.w	r3, r3, #1
   974b8:	461a      	mov	r2, r3
   974ba:	68f8      	ldr	r0, [r7, #12]
   974bc:	4b2d      	ldr	r3, [pc, #180]	; (97574 <pio_configure_pin+0x130>)
   974be:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   974c0:	e050      	b.n	97564 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   974c2:	687b      	ldr	r3, [r7, #4]
   974c4:	f003 031f 	and.w	r3, r3, #31
   974c8:	2201      	movs	r2, #1
   974ca:	fa02 f303 	lsl.w	r3, r2, r3
   974ce:	461a      	mov	r2, r3
   974d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   974d4:	68f8      	ldr	r0, [r7, #12]
   974d6:	4b26      	ldr	r3, [pc, #152]	; (97570 <pio_configure_pin+0x12c>)
   974d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   974da:	687b      	ldr	r3, [r7, #4]
   974dc:	f003 031f 	and.w	r3, r3, #31
   974e0:	2201      	movs	r2, #1
   974e2:	fa02 f303 	lsl.w	r3, r2, r3
   974e6:	4619      	mov	r1, r3
   974e8:	683b      	ldr	r3, [r7, #0]
   974ea:	f003 0301 	and.w	r3, r3, #1
   974ee:	461a      	mov	r2, r3
   974f0:	68f8      	ldr	r0, [r7, #12]
   974f2:	4b20      	ldr	r3, [pc, #128]	; (97574 <pio_configure_pin+0x130>)
   974f4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   974f6:	e035      	b.n	97564 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   974f8:	687b      	ldr	r3, [r7, #4]
   974fa:	f003 031f 	and.w	r3, r3, #31
   974fe:	2201      	movs	r2, #1
   97500:	fa02 f303 	lsl.w	r3, r2, r3
   97504:	683a      	ldr	r2, [r7, #0]
   97506:	4619      	mov	r1, r3
   97508:	68f8      	ldr	r0, [r7, #12]
   9750a:	4b1b      	ldr	r3, [pc, #108]	; (97578 <pio_configure_pin+0x134>)
   9750c:	4798      	blx	r3
		break;
   9750e:	e029      	b.n	97564 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   97510:	687b      	ldr	r3, [r7, #4]
   97512:	f003 031f 	and.w	r3, r3, #31
   97516:	2201      	movs	r2, #1
   97518:	fa02 f303 	lsl.w	r3, r2, r3
   9751c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9751e:	683b      	ldr	r3, [r7, #0]
   97520:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   97524:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   97528:	bf0c      	ite	eq
   9752a:	2301      	moveq	r3, #1
   9752c:	2300      	movne	r3, #0
   9752e:	b2db      	uxtb	r3, r3
   97530:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   97532:	683b      	ldr	r3, [r7, #0]
   97534:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   97538:	2b00      	cmp	r3, #0
   9753a:	bf14      	ite	ne
   9753c:	2301      	movne	r3, #1
   9753e:	2300      	moveq	r3, #0
   97540:	b2db      	uxtb	r3, r3
   97542:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   97544:	683b      	ldr	r3, [r7, #0]
   97546:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9754a:	2b00      	cmp	r3, #0
   9754c:	bf14      	ite	ne
   9754e:	2301      	movne	r3, #1
   97550:	2300      	moveq	r3, #0
   97552:	b2db      	uxtb	r3, r3
   97554:	9300      	str	r3, [sp, #0]
   97556:	4603      	mov	r3, r0
   97558:	68f8      	ldr	r0, [r7, #12]
   9755a:	4c08      	ldr	r4, [pc, #32]	; (9757c <pio_configure_pin+0x138>)
   9755c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9755e:	e001      	b.n	97564 <pio_configure_pin+0x120>

	default:
		return 0;
   97560:	2300      	movs	r3, #0
   97562:	e000      	b.n	97566 <pio_configure_pin+0x122>
	}

	return 1;
   97564:	2301      	movs	r3, #1
}
   97566:	4618      	mov	r0, r3
   97568:	3714      	adds	r7, #20
   9756a:	46bd      	mov	sp, r7
   9756c:	bd90      	pop	{r4, r7, pc}
   9756e:	bf00      	nop
   97570:	00097295 	.word	0x00097295
   97574:	00097269 	.word	0x00097269
   97578:	00097315 	.word	0x00097315
   9757c:	00097395 	.word	0x00097395

00097580 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   97580:	b590      	push	{r4, r7, lr}
   97582:	b087      	sub	sp, #28
   97584:	af02      	add	r7, sp, #8
   97586:	60f8      	str	r0, [r7, #12]
   97588:	60b9      	str	r1, [r7, #8]
   9758a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9758c:	687b      	ldr	r3, [r7, #4]
   9758e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   97592:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   97596:	d026      	beq.n	975e6 <pio_configure_pin_group+0x66>
   97598:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9759c:	d806      	bhi.n	975ac <pio_configure_pin_group+0x2c>
   9759e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   975a2:	d00a      	beq.n	975ba <pio_configure_pin_group+0x3a>
   975a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   975a8:	d00e      	beq.n	975c8 <pio_configure_pin_group+0x48>
   975aa:	e044      	b.n	97636 <pio_configure_pin_group+0xb6>
   975ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   975b0:	d01f      	beq.n	975f2 <pio_configure_pin_group+0x72>
   975b2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   975b6:	d01c      	beq.n	975f2 <pio_configure_pin_group+0x72>
   975b8:	e03d      	b.n	97636 <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   975ba:	68ba      	ldr	r2, [r7, #8]
   975bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   975c0:	68f8      	ldr	r0, [r7, #12]
   975c2:	4b20      	ldr	r3, [pc, #128]	; (97644 <pio_configure_pin_group+0xc4>)
   975c4:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   975c6:	e038      	b.n	9763a <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   975c8:	68ba      	ldr	r2, [r7, #8]
   975ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   975ce:	68f8      	ldr	r0, [r7, #12]
   975d0:	4b1c      	ldr	r3, [pc, #112]	; (97644 <pio_configure_pin_group+0xc4>)
   975d2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   975d4:	687b      	ldr	r3, [r7, #4]
   975d6:	f003 0301 	and.w	r3, r3, #1
   975da:	461a      	mov	r2, r3
   975dc:	68b9      	ldr	r1, [r7, #8]
   975de:	68f8      	ldr	r0, [r7, #12]
   975e0:	4b19      	ldr	r3, [pc, #100]	; (97648 <pio_configure_pin_group+0xc8>)
   975e2:	4798      	blx	r3
		break;
   975e4:	e029      	b.n	9763a <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   975e6:	687a      	ldr	r2, [r7, #4]
   975e8:	68b9      	ldr	r1, [r7, #8]
   975ea:	68f8      	ldr	r0, [r7, #12]
   975ec:	4b17      	ldr	r3, [pc, #92]	; (9764c <pio_configure_pin_group+0xcc>)
   975ee:	4798      	blx	r3
		break;
   975f0:	e023      	b.n	9763a <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   975f2:	687b      	ldr	r3, [r7, #4]
   975f4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   975f8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   975fc:	bf0c      	ite	eq
   975fe:	2301      	moveq	r3, #1
   97600:	2300      	movne	r3, #0
   97602:	b2db      	uxtb	r3, r3
   97604:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   97606:	687b      	ldr	r3, [r7, #4]
   97608:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9760c:	2b00      	cmp	r3, #0
   9760e:	bf14      	ite	ne
   97610:	2301      	movne	r3, #1
   97612:	2300      	moveq	r3, #0
   97614:	b2db      	uxtb	r3, r3
   97616:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   97618:	687b      	ldr	r3, [r7, #4]
   9761a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9761e:	2b00      	cmp	r3, #0
   97620:	bf14      	ite	ne
   97622:	2301      	movne	r3, #1
   97624:	2300      	moveq	r3, #0
   97626:	b2db      	uxtb	r3, r3
   97628:	9300      	str	r3, [sp, #0]
   9762a:	460b      	mov	r3, r1
   9762c:	68b9      	ldr	r1, [r7, #8]
   9762e:	68f8      	ldr	r0, [r7, #12]
   97630:	4c07      	ldr	r4, [pc, #28]	; (97650 <pio_configure_pin_group+0xd0>)
   97632:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   97634:	e001      	b.n	9763a <pio_configure_pin_group+0xba>

	default:
		return 0;
   97636:	2300      	movs	r3, #0
   97638:	e000      	b.n	9763c <pio_configure_pin_group+0xbc>
	}

	return 1;
   9763a:	2301      	movs	r3, #1
}
   9763c:	4618      	mov	r0, r3
   9763e:	3714      	adds	r7, #20
   97640:	46bd      	mov	sp, r7
   97642:	bd90      	pop	{r4, r7, pc}
   97644:	00097295 	.word	0x00097295
   97648:	00097269 	.word	0x00097269
   9764c:	00097315 	.word	0x00097315
   97650:	00097395 	.word	0x00097395

00097654 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   97654:	b580      	push	{r7, lr}
   97656:	b084      	sub	sp, #16
   97658:	af00      	add	r7, sp, #0
   9765a:	6078      	str	r0, [r7, #4]
   9765c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9765e:	6878      	ldr	r0, [r7, #4]
   97660:	4b24      	ldr	r3, [pc, #144]	; (976f4 <pio_handler_process+0xa0>)
   97662:	4798      	blx	r3
   97664:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   97666:	6878      	ldr	r0, [r7, #4]
   97668:	4b23      	ldr	r3, [pc, #140]	; (976f8 <pio_handler_process+0xa4>)
   9766a:	4798      	blx	r3
   9766c:	4602      	mov	r2, r0
   9766e:	68fb      	ldr	r3, [r7, #12]
   97670:	4013      	ands	r3, r2
   97672:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   97674:	68fb      	ldr	r3, [r7, #12]
   97676:	2b00      	cmp	r3, #0
   97678:	d037      	beq.n	976ea <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   9767a:	2300      	movs	r3, #0
   9767c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   9767e:	e031      	b.n	976e4 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   97680:	4a1e      	ldr	r2, [pc, #120]	; (976fc <pio_handler_process+0xa8>)
   97682:	68bb      	ldr	r3, [r7, #8]
   97684:	011b      	lsls	r3, r3, #4
   97686:	4413      	add	r3, r2
   97688:	681a      	ldr	r2, [r3, #0]
   9768a:	683b      	ldr	r3, [r7, #0]
   9768c:	429a      	cmp	r2, r3
   9768e:	d126      	bne.n	976de <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   97690:	4a1a      	ldr	r2, [pc, #104]	; (976fc <pio_handler_process+0xa8>)
   97692:	68bb      	ldr	r3, [r7, #8]
   97694:	011b      	lsls	r3, r3, #4
   97696:	4413      	add	r3, r2
   97698:	3304      	adds	r3, #4
   9769a:	681a      	ldr	r2, [r3, #0]
   9769c:	68fb      	ldr	r3, [r7, #12]
   9769e:	4013      	ands	r3, r2
   976a0:	2b00      	cmp	r3, #0
   976a2:	d01c      	beq.n	976de <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   976a4:	4a15      	ldr	r2, [pc, #84]	; (976fc <pio_handler_process+0xa8>)
   976a6:	68bb      	ldr	r3, [r7, #8]
   976a8:	011b      	lsls	r3, r3, #4
   976aa:	4413      	add	r3, r2
   976ac:	330c      	adds	r3, #12
   976ae:	681b      	ldr	r3, [r3, #0]
   976b0:	4912      	ldr	r1, [pc, #72]	; (976fc <pio_handler_process+0xa8>)
   976b2:	68ba      	ldr	r2, [r7, #8]
   976b4:	0112      	lsls	r2, r2, #4
   976b6:	440a      	add	r2, r1
   976b8:	6810      	ldr	r0, [r2, #0]
   976ba:	4910      	ldr	r1, [pc, #64]	; (976fc <pio_handler_process+0xa8>)
   976bc:	68ba      	ldr	r2, [r7, #8]
   976be:	0112      	lsls	r2, r2, #4
   976c0:	440a      	add	r2, r1
   976c2:	3204      	adds	r2, #4
   976c4:	6812      	ldr	r2, [r2, #0]
   976c6:	4611      	mov	r1, r2
   976c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   976ca:	4a0c      	ldr	r2, [pc, #48]	; (976fc <pio_handler_process+0xa8>)
   976cc:	68bb      	ldr	r3, [r7, #8]
   976ce:	011b      	lsls	r3, r3, #4
   976d0:	4413      	add	r3, r2
   976d2:	3304      	adds	r3, #4
   976d4:	681b      	ldr	r3, [r3, #0]
   976d6:	43db      	mvns	r3, r3
   976d8:	68fa      	ldr	r2, [r7, #12]
   976da:	4013      	ands	r3, r2
   976dc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   976de:	68bb      	ldr	r3, [r7, #8]
   976e0:	3301      	adds	r3, #1
   976e2:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   976e4:	68fb      	ldr	r3, [r7, #12]
   976e6:	2b00      	cmp	r3, #0
   976e8:	d1ca      	bne.n	97680 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   976ea:	bf00      	nop
   976ec:	3710      	adds	r7, #16
   976ee:	46bd      	mov	sp, r7
   976f0:	bd80      	pop	{r7, pc}
   976f2:	bf00      	nop
   976f4:	00097415 	.word	0x00097415
   976f8:	0009742d 	.word	0x0009742d
   976fc:	200726d4 	.word	0x200726d4

00097700 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   97700:	b580      	push	{r7, lr}
   97702:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   97704:	210b      	movs	r1, #11
   97706:	4802      	ldr	r0, [pc, #8]	; (97710 <PIOA_Handler+0x10>)
   97708:	4b02      	ldr	r3, [pc, #8]	; (97714 <PIOA_Handler+0x14>)
   9770a:	4798      	blx	r3
}
   9770c:	bf00      	nop
   9770e:	bd80      	pop	{r7, pc}
   97710:	400e0e00 	.word	0x400e0e00
   97714:	00097655 	.word	0x00097655

00097718 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   97718:	b580      	push	{r7, lr}
   9771a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9771c:	210c      	movs	r1, #12
   9771e:	4802      	ldr	r0, [pc, #8]	; (97728 <PIOB_Handler+0x10>)
   97720:	4b02      	ldr	r3, [pc, #8]	; (9772c <PIOB_Handler+0x14>)
   97722:	4798      	blx	r3
}
   97724:	bf00      	nop
   97726:	bd80      	pop	{r7, pc}
   97728:	400e1000 	.word	0x400e1000
   9772c:	00097655 	.word	0x00097655

00097730 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   97730:	b580      	push	{r7, lr}
   97732:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   97734:	210d      	movs	r1, #13
   97736:	4802      	ldr	r0, [pc, #8]	; (97740 <PIOC_Handler+0x10>)
   97738:	4b02      	ldr	r3, [pc, #8]	; (97744 <PIOC_Handler+0x14>)
   9773a:	4798      	blx	r3
}
   9773c:	bf00      	nop
   9773e:	bd80      	pop	{r7, pc}
   97740:	400e1200 	.word	0x400e1200
   97744:	00097655 	.word	0x00097655

00097748 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   97748:	b580      	push	{r7, lr}
   9774a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   9774c:	210e      	movs	r1, #14
   9774e:	4802      	ldr	r0, [pc, #8]	; (97758 <PIOD_Handler+0x10>)
   97750:	4b02      	ldr	r3, [pc, #8]	; (9775c <PIOD_Handler+0x14>)
   97752:	4798      	blx	r3
}
   97754:	bf00      	nop
   97756:	bd80      	pop	{r7, pc}
   97758:	400e1400 	.word	0x400e1400
   9775c:	00097655 	.word	0x00097655

00097760 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   97760:	b480      	push	{r7}
   97762:	b085      	sub	sp, #20
   97764:	af00      	add	r7, sp, #0
   97766:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   97768:	491c      	ldr	r1, [pc, #112]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   9776a:	4b1c      	ldr	r3, [pc, #112]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   9776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9776e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   97772:	687b      	ldr	r3, [r7, #4]
   97774:	4313      	orrs	r3, r2
   97776:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   97778:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9777c:	60fb      	str	r3, [r7, #12]
   9777e:	e007      	b.n	97790 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   97780:	68fb      	ldr	r3, [r7, #12]
   97782:	2b00      	cmp	r3, #0
   97784:	d101      	bne.n	9778a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   97786:	2301      	movs	r3, #1
   97788:	e023      	b.n	977d2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9778a:	68fb      	ldr	r3, [r7, #12]
   9778c:	3b01      	subs	r3, #1
   9778e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   97790:	4b12      	ldr	r3, [pc, #72]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   97792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   97794:	f003 0308 	and.w	r3, r3, #8
   97798:	2b00      	cmp	r3, #0
   9779a:	d0f1      	beq.n	97780 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9779c:	4a0f      	ldr	r2, [pc, #60]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   9779e:	4b0f      	ldr	r3, [pc, #60]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   977a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   977a2:	f023 0303 	bic.w	r3, r3, #3
   977a6:	f043 0302 	orr.w	r3, r3, #2
   977aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   977ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   977b0:	60fb      	str	r3, [r7, #12]
   977b2:	e007      	b.n	977c4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   977b4:	68fb      	ldr	r3, [r7, #12]
   977b6:	2b00      	cmp	r3, #0
   977b8:	d101      	bne.n	977be <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   977ba:	2301      	movs	r3, #1
   977bc:	e009      	b.n	977d2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   977be:	68fb      	ldr	r3, [r7, #12]
   977c0:	3b01      	subs	r3, #1
   977c2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   977c4:	4b05      	ldr	r3, [pc, #20]	; (977dc <pmc_switch_mck_to_pllack+0x7c>)
   977c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   977c8:	f003 0308 	and.w	r3, r3, #8
   977cc:	2b00      	cmp	r3, #0
   977ce:	d0f1      	beq.n	977b4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   977d0:	2300      	movs	r3, #0
}
   977d2:	4618      	mov	r0, r3
   977d4:	3714      	adds	r7, #20
   977d6:	46bd      	mov	sp, r7
   977d8:	bc80      	pop	{r7}
   977da:	4770      	bx	lr
   977dc:	400e0600 	.word	0x400e0600

000977e0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   977e0:	b480      	push	{r7}
   977e2:	b083      	sub	sp, #12
   977e4:	af00      	add	r7, sp, #0
   977e6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   977e8:	687b      	ldr	r3, [r7, #4]
   977ea:	2b01      	cmp	r3, #1
   977ec:	d107      	bne.n	977fe <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   977ee:	4a08      	ldr	r2, [pc, #32]	; (97810 <pmc_switch_sclk_to_32kxtal+0x30>)
   977f0:	4b07      	ldr	r3, [pc, #28]	; (97810 <pmc_switch_sclk_to_32kxtal+0x30>)
   977f2:	689b      	ldr	r3, [r3, #8]
   977f4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   977f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   977fc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   977fe:	4b04      	ldr	r3, [pc, #16]	; (97810 <pmc_switch_sclk_to_32kxtal+0x30>)
   97800:	4a04      	ldr	r2, [pc, #16]	; (97814 <pmc_switch_sclk_to_32kxtal+0x34>)
   97802:	601a      	str	r2, [r3, #0]
}
   97804:	bf00      	nop
   97806:	370c      	adds	r7, #12
   97808:	46bd      	mov	sp, r7
   9780a:	bc80      	pop	{r7}
   9780c:	4770      	bx	lr
   9780e:	bf00      	nop
   97810:	400e1a10 	.word	0x400e1a10
   97814:	a5000008 	.word	0xa5000008

00097818 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   97818:	b480      	push	{r7}
   9781a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9781c:	4b09      	ldr	r3, [pc, #36]	; (97844 <pmc_osc_is_ready_32kxtal+0x2c>)
   9781e:	695b      	ldr	r3, [r3, #20]
   97820:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   97824:	2b00      	cmp	r3, #0
   97826:	d007      	beq.n	97838 <pmc_osc_is_ready_32kxtal+0x20>
   97828:	4b07      	ldr	r3, [pc, #28]	; (97848 <pmc_osc_is_ready_32kxtal+0x30>)
   9782a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   97830:	2b00      	cmp	r3, #0
   97832:	d001      	beq.n	97838 <pmc_osc_is_ready_32kxtal+0x20>
   97834:	2301      	movs	r3, #1
   97836:	e000      	b.n	9783a <pmc_osc_is_ready_32kxtal+0x22>
   97838:	2300      	movs	r3, #0
}
   9783a:	4618      	mov	r0, r3
   9783c:	46bd      	mov	sp, r7
   9783e:	bc80      	pop	{r7}
   97840:	4770      	bx	lr
   97842:	bf00      	nop
   97844:	400e1a10 	.word	0x400e1a10
   97848:	400e0600 	.word	0x400e0600

0009784c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   9784c:	b480      	push	{r7}
   9784e:	b085      	sub	sp, #20
   97850:	af00      	add	r7, sp, #0
   97852:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   97854:	2300      	movs	r3, #0
   97856:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   97858:	4b21      	ldr	r3, [pc, #132]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   9785a:	6a1b      	ldr	r3, [r3, #32]
   9785c:	f003 0301 	and.w	r3, r3, #1
   97860:	2b00      	cmp	r3, #0
   97862:	d00e      	beq.n	97882 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   97864:	491e      	ldr	r1, [pc, #120]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   97866:	4b1e      	ldr	r3, [pc, #120]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   97868:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   9786a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9786e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   97872:	687a      	ldr	r2, [r7, #4]
   97874:	4313      	orrs	r3, r2
   97876:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9787a:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9787e:	620b      	str	r3, [r1, #32]
   97880:	e00b      	b.n	9789a <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   97882:	2301      	movs	r3, #1
   97884:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   97886:	4916      	ldr	r1, [pc, #88]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   97888:	4b15      	ldr	r3, [pc, #84]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   9788a:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   9788c:	4b15      	ldr	r3, [pc, #84]	; (978e4 <pmc_switch_mainck_to_fastrc+0x98>)
   9788e:	4013      	ands	r3, r2
   97890:	687a      	ldr	r2, [r7, #4]
   97892:	431a      	orrs	r2, r3
   97894:	4b14      	ldr	r3, [pc, #80]	; (978e8 <pmc_switch_mainck_to_fastrc+0x9c>)
   97896:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   97898:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9789a:	bf00      	nop
   9789c:	4b10      	ldr	r3, [pc, #64]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   9789e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   978a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   978a4:	2b00      	cmp	r3, #0
   978a6:	d0f9      	beq.n	9789c <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   978a8:	4a0d      	ldr	r2, [pc, #52]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   978aa:	4b0d      	ldr	r3, [pc, #52]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   978ac:	6a1b      	ldr	r3, [r3, #32]
   978ae:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   978b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   978b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   978ba:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   978bc:	68fb      	ldr	r3, [r7, #12]
   978be:	2b00      	cmp	r3, #0
   978c0:	d009      	beq.n	978d6 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   978c2:	4a07      	ldr	r2, [pc, #28]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   978c4:	4b06      	ldr	r3, [pc, #24]	; (978e0 <pmc_switch_mainck_to_fastrc+0x94>)
   978c6:	6a1b      	ldr	r3, [r3, #32]
   978c8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   978cc:	f023 0301 	bic.w	r3, r3, #1
   978d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   978d4:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   978d6:	bf00      	nop
   978d8:	3714      	adds	r7, #20
   978da:	46bd      	mov	sp, r7
   978dc:	bc80      	pop	{r7}
   978de:	4770      	bx	lr
   978e0:	400e0600 	.word	0x400e0600
   978e4:	ffc80086 	.word	0xffc80086
   978e8:	0037ff09 	.word	0x0037ff09

000978ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   978ec:	b480      	push	{r7}
   978ee:	b083      	sub	sp, #12
   978f0:	af00      	add	r7, sp, #0
   978f2:	6078      	str	r0, [r7, #4]
   978f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   978f6:	687b      	ldr	r3, [r7, #4]
   978f8:	2b00      	cmp	r3, #0
   978fa:	d008      	beq.n	9790e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   978fc:	4916      	ldr	r1, [pc, #88]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   978fe:	4b16      	ldr	r3, [pc, #88]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   97900:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   97902:	4a16      	ldr	r2, [pc, #88]	; (9795c <pmc_switch_mainck_to_xtal+0x70>)
   97904:	401a      	ands	r2, r3
   97906:	4b16      	ldr	r3, [pc, #88]	; (97960 <pmc_switch_mainck_to_xtal+0x74>)
   97908:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9790a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   9790c:	e01e      	b.n	9794c <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9790e:	4912      	ldr	r1, [pc, #72]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   97910:	4b11      	ldr	r3, [pc, #68]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   97912:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   97914:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   97918:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9791c:	683a      	ldr	r2, [r7, #0]
   9791e:	0212      	lsls	r2, r2, #8
   97920:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   97922:	4313      	orrs	r3, r2
   97924:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   97928:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9792c:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9792e:	bf00      	nop
   97930:	4b09      	ldr	r3, [pc, #36]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   97932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   97934:	f003 0301 	and.w	r3, r3, #1
   97938:	2b00      	cmp	r3, #0
   9793a:	d0f9      	beq.n	97930 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   9793c:	4a06      	ldr	r2, [pc, #24]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   9793e:	4b06      	ldr	r3, [pc, #24]	; (97958 <pmc_switch_mainck_to_xtal+0x6c>)
   97940:	6a1b      	ldr	r3, [r3, #32]
   97942:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   97946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9794a:	6213      	str	r3, [r2, #32]
	}
}
   9794c:	bf00      	nop
   9794e:	370c      	adds	r7, #12
   97950:	46bd      	mov	sp, r7
   97952:	bc80      	pop	{r7}
   97954:	4770      	bx	lr
   97956:	bf00      	nop
   97958:	400e0600 	.word	0x400e0600
   9795c:	fec8fffc 	.word	0xfec8fffc
   97960:	01370002 	.word	0x01370002

00097964 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   97964:	b480      	push	{r7}
   97966:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   97968:	4b03      	ldr	r3, [pc, #12]	; (97978 <pmc_osc_is_ready_mainck+0x14>)
   9796a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9796c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   97970:	4618      	mov	r0, r3
   97972:	46bd      	mov	sp, r7
   97974:	bc80      	pop	{r7}
   97976:	4770      	bx	lr
   97978:	400e0600 	.word	0x400e0600

0009797c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   9797c:	b480      	push	{r7}
   9797e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   97980:	4b03      	ldr	r3, [pc, #12]	; (97990 <pmc_disable_pllack+0x14>)
   97982:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   97986:	629a      	str	r2, [r3, #40]	; 0x28
}
   97988:	bf00      	nop
   9798a:	46bd      	mov	sp, r7
   9798c:	bc80      	pop	{r7}
   9798e:	4770      	bx	lr
   97990:	400e0600 	.word	0x400e0600

00097994 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   97994:	b480      	push	{r7}
   97996:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   97998:	4b03      	ldr	r3, [pc, #12]	; (979a8 <pmc_is_locked_pllack+0x14>)
   9799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9799c:	f003 0302 	and.w	r3, r3, #2
}
   979a0:	4618      	mov	r0, r3
   979a2:	46bd      	mov	sp, r7
   979a4:	bc80      	pop	{r7}
   979a6:	4770      	bx	lr
   979a8:	400e0600 	.word	0x400e0600

000979ac <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   979ac:	b480      	push	{r7}
   979ae:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   979b0:	4b03      	ldr	r3, [pc, #12]	; (979c0 <pmc_is_locked_upll+0x14>)
   979b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   979b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   979b8:	4618      	mov	r0, r3
   979ba:	46bd      	mov	sp, r7
   979bc:	bc80      	pop	{r7}
   979be:	4770      	bx	lr
   979c0:	400e0600 	.word	0x400e0600

000979c4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   979c4:	b480      	push	{r7}
   979c6:	b083      	sub	sp, #12
   979c8:	af00      	add	r7, sp, #0
   979ca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   979cc:	687b      	ldr	r3, [r7, #4]
   979ce:	2b2c      	cmp	r3, #44	; 0x2c
   979d0:	d901      	bls.n	979d6 <pmc_enable_periph_clk+0x12>
		return 1;
   979d2:	2301      	movs	r3, #1
   979d4:	e02f      	b.n	97a36 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   979d6:	687b      	ldr	r3, [r7, #4]
   979d8:	2b1f      	cmp	r3, #31
   979da:	d813      	bhi.n	97a04 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   979dc:	4b18      	ldr	r3, [pc, #96]	; (97a40 <pmc_enable_periph_clk+0x7c>)
   979de:	699a      	ldr	r2, [r3, #24]
   979e0:	2101      	movs	r1, #1
   979e2:	687b      	ldr	r3, [r7, #4]
   979e4:	fa01 f303 	lsl.w	r3, r1, r3
   979e8:	401a      	ands	r2, r3
   979ea:	2101      	movs	r1, #1
   979ec:	687b      	ldr	r3, [r7, #4]
   979ee:	fa01 f303 	lsl.w	r3, r1, r3
   979f2:	429a      	cmp	r2, r3
   979f4:	d01e      	beq.n	97a34 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   979f6:	4a12      	ldr	r2, [pc, #72]	; (97a40 <pmc_enable_periph_clk+0x7c>)
   979f8:	2101      	movs	r1, #1
   979fa:	687b      	ldr	r3, [r7, #4]
   979fc:	fa01 f303 	lsl.w	r3, r1, r3
   97a00:	6113      	str	r3, [r2, #16]
   97a02:	e017      	b.n	97a34 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   97a04:	687b      	ldr	r3, [r7, #4]
   97a06:	3b20      	subs	r3, #32
   97a08:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   97a0a:	4b0d      	ldr	r3, [pc, #52]	; (97a40 <pmc_enable_periph_clk+0x7c>)
   97a0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   97a10:	2101      	movs	r1, #1
   97a12:	687b      	ldr	r3, [r7, #4]
   97a14:	fa01 f303 	lsl.w	r3, r1, r3
   97a18:	401a      	ands	r2, r3
   97a1a:	2101      	movs	r1, #1
   97a1c:	687b      	ldr	r3, [r7, #4]
   97a1e:	fa01 f303 	lsl.w	r3, r1, r3
   97a22:	429a      	cmp	r2, r3
   97a24:	d006      	beq.n	97a34 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   97a26:	4a06      	ldr	r2, [pc, #24]	; (97a40 <pmc_enable_periph_clk+0x7c>)
   97a28:	2101      	movs	r1, #1
   97a2a:	687b      	ldr	r3, [r7, #4]
   97a2c:	fa01 f303 	lsl.w	r3, r1, r3
   97a30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   97a34:	2300      	movs	r3, #0
}
   97a36:	4618      	mov	r0, r3
   97a38:	370c      	adds	r7, #12
   97a3a:	46bd      	mov	sp, r7
   97a3c:	bc80      	pop	{r7}
   97a3e:	4770      	bx	lr
   97a40:	400e0600 	.word	0x400e0600

00097a44 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   97a44:	b480      	push	{r7}
   97a46:	b083      	sub	sp, #12
   97a48:	af00      	add	r7, sp, #0
   97a4a:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   97a4c:	687b      	ldr	r3, [r7, #4]
   97a4e:	2b00      	cmp	r3, #0
   97a50:	d004      	beq.n	97a5c <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   97a52:	4b07      	ldr	r3, [pc, #28]	; (97a70 <pmc_set_writeprotect+0x2c>)
   97a54:	4a07      	ldr	r2, [pc, #28]	; (97a74 <pmc_set_writeprotect+0x30>)
   97a56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   97a5a:	e003      	b.n	97a64 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   97a5c:	4b04      	ldr	r3, [pc, #16]	; (97a70 <pmc_set_writeprotect+0x2c>)
   97a5e:	4a06      	ldr	r2, [pc, #24]	; (97a78 <pmc_set_writeprotect+0x34>)
   97a60:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   97a64:	bf00      	nop
   97a66:	370c      	adds	r7, #12
   97a68:	46bd      	mov	sp, r7
   97a6a:	bc80      	pop	{r7}
   97a6c:	4770      	bx	lr
   97a6e:	bf00      	nop
   97a70:	400e0600 	.word	0x400e0600
   97a74:	504d4301 	.word	0x504d4301
   97a78:	504d4300 	.word	0x504d4300

00097a7c <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   97a7c:	b480      	push	{r7}
   97a7e:	b083      	sub	sp, #12
   97a80:	af00      	add	r7, sp, #0
   97a82:	6078      	str	r0, [r7, #4]
   97a84:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   97a86:	687a      	ldr	r2, [r7, #4]
   97a88:	683b      	ldr	r3, [r7, #0]
   97a8a:	019b      	lsls	r3, r3, #6
   97a8c:	4413      	add	r3, r2
   97a8e:	2205      	movs	r2, #5
   97a90:	601a      	str	r2, [r3, #0]
}
   97a92:	bf00      	nop
   97a94:	370c      	adds	r7, #12
   97a96:	46bd      	mov	sp, r7
   97a98:	bc80      	pop	{r7}
   97a9a:	4770      	bx	lr

00097a9c <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   97a9c:	b480      	push	{r7}
   97a9e:	b085      	sub	sp, #20
   97aa0:	af00      	add	r7, sp, #0
   97aa2:	60f8      	str	r0, [r7, #12]
   97aa4:	60b9      	str	r1, [r7, #8]
   97aa6:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   97aa8:	68fa      	ldr	r2, [r7, #12]
   97aaa:	68bb      	ldr	r3, [r7, #8]
   97aac:	019b      	lsls	r3, r3, #6
   97aae:	4413      	add	r3, r2
   97ab0:	331c      	adds	r3, #28
   97ab2:	687a      	ldr	r2, [r7, #4]
   97ab4:	601a      	str	r2, [r3, #0]
}
   97ab6:	bf00      	nop
   97ab8:	3714      	adds	r7, #20
   97aba:	46bd      	mov	sp, r7
   97abc:	bc80      	pop	{r7}
   97abe:	4770      	bx	lr

00097ac0 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   97ac0:	b480      	push	{r7}
   97ac2:	b087      	sub	sp, #28
   97ac4:	af00      	add	r7, sp, #0
   97ac6:	60f8      	str	r0, [r7, #12]
   97ac8:	60b9      	str	r1, [r7, #8]
   97aca:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   97acc:	68fa      	ldr	r2, [r7, #12]
   97ace:	68bb      	ldr	r3, [r7, #8]
   97ad0:	019b      	lsls	r3, r3, #6
   97ad2:	4413      	add	r3, r2
   97ad4:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   97ad6:	697b      	ldr	r3, [r7, #20]
   97ad8:	687a      	ldr	r2, [r7, #4]
   97ada:	625a      	str	r2, [r3, #36]	; 0x24
}
   97adc:	bf00      	nop
   97ade:	371c      	adds	r7, #28
   97ae0:	46bd      	mov	sp, r7
   97ae2:	bc80      	pop	{r7}
   97ae4:	4770      	bx	lr
   97ae6:	bf00      	nop

00097ae8 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   97ae8:	b480      	push	{r7}
   97aea:	b085      	sub	sp, #20
   97aec:	af00      	add	r7, sp, #0
   97aee:	6078      	str	r0, [r7, #4]
   97af0:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   97af2:	687a      	ldr	r2, [r7, #4]
   97af4:	683b      	ldr	r3, [r7, #0]
   97af6:	019b      	lsls	r3, r3, #6
   97af8:	4413      	add	r3, r2
   97afa:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   97afc:	68fb      	ldr	r3, [r7, #12]
   97afe:	6a1b      	ldr	r3, [r3, #32]
}
   97b00:	4618      	mov	r0, r3
   97b02:	3714      	adds	r7, #20
   97b04:	46bd      	mov	sp, r7
   97b06:	bc80      	pop	{r7}
   97b08:	4770      	bx	lr
   97b0a:	bf00      	nop

00097b0c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   97b0c:	b480      	push	{r7}
   97b0e:	b085      	sub	sp, #20
   97b10:	af00      	add	r7, sp, #0
   97b12:	6078      	str	r0, [r7, #4]
   97b14:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   97b16:	2300      	movs	r3, #0
   97b18:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   97b1a:	687b      	ldr	r3, [r7, #4]
   97b1c:	22ac      	movs	r2, #172	; 0xac
   97b1e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   97b20:	683b      	ldr	r3, [r7, #0]
   97b22:	681a      	ldr	r2, [r3, #0]
   97b24:	683b      	ldr	r3, [r7, #0]
   97b26:	685b      	ldr	r3, [r3, #4]
   97b28:	fbb2 f3f3 	udiv	r3, r2, r3
   97b2c:	091b      	lsrs	r3, r3, #4
   97b2e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   97b30:	68fb      	ldr	r3, [r7, #12]
   97b32:	2b00      	cmp	r3, #0
   97b34:	d003      	beq.n	97b3e <uart_init+0x32>
   97b36:	68fb      	ldr	r3, [r7, #12]
   97b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   97b3c:	d301      	bcc.n	97b42 <uart_init+0x36>
		return 1;
   97b3e:	2301      	movs	r3, #1
   97b40:	e00f      	b.n	97b62 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   97b42:	687b      	ldr	r3, [r7, #4]
   97b44:	68fa      	ldr	r2, [r7, #12]
   97b46:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   97b48:	683b      	ldr	r3, [r7, #0]
   97b4a:	689a      	ldr	r2, [r3, #8]
   97b4c:	687b      	ldr	r3, [r7, #4]
   97b4e:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   97b50:	687b      	ldr	r3, [r7, #4]
   97b52:	f240 2202 	movw	r2, #514	; 0x202
   97b56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   97b5a:	687b      	ldr	r3, [r7, #4]
   97b5c:	2250      	movs	r2, #80	; 0x50
   97b5e:	601a      	str	r2, [r3, #0]

	return 0;
   97b60:	2300      	movs	r3, #0
}
   97b62:	4618      	mov	r0, r3
   97b64:	3714      	adds	r7, #20
   97b66:	46bd      	mov	sp, r7
   97b68:	bc80      	pop	{r7}
   97b6a:	4770      	bx	lr

00097b6c <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   97b6c:	b480      	push	{r7}
   97b6e:	b083      	sub	sp, #12
   97b70:	af00      	add	r7, sp, #0
   97b72:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   97b74:	687b      	ldr	r3, [r7, #4]
   97b76:	2240      	movs	r2, #64	; 0x40
   97b78:	601a      	str	r2, [r3, #0]
}
   97b7a:	bf00      	nop
   97b7c:	370c      	adds	r7, #12
   97b7e:	46bd      	mov	sp, r7
   97b80:	bc80      	pop	{r7}
   97b82:	4770      	bx	lr

00097b84 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   97b84:	b480      	push	{r7}
   97b86:	b083      	sub	sp, #12
   97b88:	af00      	add	r7, sp, #0
   97b8a:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   97b8c:	687b      	ldr	r3, [r7, #4]
   97b8e:	2210      	movs	r2, #16
   97b90:	601a      	str	r2, [r3, #0]
}
   97b92:	bf00      	nop
   97b94:	370c      	adds	r7, #12
   97b96:	46bd      	mov	sp, r7
   97b98:	bc80      	pop	{r7}
   97b9a:	4770      	bx	lr

00097b9c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   97b9c:	b480      	push	{r7}
   97b9e:	b083      	sub	sp, #12
   97ba0:	af00      	add	r7, sp, #0
   97ba2:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   97ba4:	687b      	ldr	r3, [r7, #4]
   97ba6:	2250      	movs	r2, #80	; 0x50
   97ba8:	601a      	str	r2, [r3, #0]
}
   97baa:	bf00      	nop
   97bac:	370c      	adds	r7, #12
   97bae:	46bd      	mov	sp, r7
   97bb0:	bc80      	pop	{r7}
   97bb2:	4770      	bx	lr

00097bb4 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   97bb4:	b480      	push	{r7}
   97bb6:	b083      	sub	sp, #12
   97bb8:	af00      	add	r7, sp, #0
   97bba:	6078      	str	r0, [r7, #4]
   97bbc:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   97bbe:	687b      	ldr	r3, [r7, #4]
   97bc0:	683a      	ldr	r2, [r7, #0]
   97bc2:	609a      	str	r2, [r3, #8]
}
   97bc4:	bf00      	nop
   97bc6:	370c      	adds	r7, #12
   97bc8:	46bd      	mov	sp, r7
   97bca:	bc80      	pop	{r7}
   97bcc:	4770      	bx	lr
   97bce:	bf00      	nop

00097bd0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   97bd0:	b480      	push	{r7}
   97bd2:	b083      	sub	sp, #12
   97bd4:	af00      	add	r7, sp, #0
   97bd6:	6078      	str	r0, [r7, #4]
   97bd8:	460b      	mov	r3, r1
   97bda:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   97bdc:	687b      	ldr	r3, [r7, #4]
   97bde:	695b      	ldr	r3, [r3, #20]
   97be0:	f003 0302 	and.w	r3, r3, #2
   97be4:	2b00      	cmp	r3, #0
   97be6:	d101      	bne.n	97bec <uart_write+0x1c>
		return 1;
   97be8:	2301      	movs	r3, #1
   97bea:	e00c      	b.n	97c06 <uart_write+0x36>
if(cl_console_sync != true)
   97bec:	4b08      	ldr	r3, [pc, #32]	; (97c10 <uart_write+0x40>)
   97bee:	781b      	ldrb	r3, [r3, #0]
   97bf0:	f083 0301 	eor.w	r3, r3, #1
   97bf4:	b2db      	uxtb	r3, r3
   97bf6:	2b00      	cmp	r3, #0
   97bf8:	d001      	beq.n	97bfe <uart_write+0x2e>
	return 1;
   97bfa:	2301      	movs	r3, #1
   97bfc:	e003      	b.n	97c06 <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   97bfe:	78fa      	ldrb	r2, [r7, #3]
   97c00:	687b      	ldr	r3, [r7, #4]
   97c02:	61da      	str	r2, [r3, #28]
	return 0;
   97c04:	2300      	movs	r3, #0
}
   97c06:	4618      	mov	r0, r3
   97c08:	370c      	adds	r7, #12
   97c0a:	46bd      	mov	sp, r7
   97c0c:	bc80      	pop	{r7}
   97c0e:	4770      	bx	lr
   97c10:	20072751 	.word	0x20072751

00097c14 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   97c14:	b480      	push	{r7}
   97c16:	b083      	sub	sp, #12
   97c18:	af00      	add	r7, sp, #0
   97c1a:	6078      	str	r0, [r7, #4]
   97c1c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   97c1e:	687b      	ldr	r3, [r7, #4]
   97c20:	695b      	ldr	r3, [r3, #20]
   97c22:	f003 0301 	and.w	r3, r3, #1
   97c26:	2b00      	cmp	r3, #0
   97c28:	d101      	bne.n	97c2e <uart_read+0x1a>
		return 1;
   97c2a:	2301      	movs	r3, #1
   97c2c:	e005      	b.n	97c3a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   97c2e:	687b      	ldr	r3, [r7, #4]
   97c30:	699b      	ldr	r3, [r3, #24]
   97c32:	b2da      	uxtb	r2, r3
   97c34:	683b      	ldr	r3, [r7, #0]
   97c36:	701a      	strb	r2, [r3, #0]
	return 0;
   97c38:	2300      	movs	r3, #0
}
   97c3a:	4618      	mov	r0, r3
   97c3c:	370c      	adds	r7, #12
   97c3e:	46bd      	mov	sp, r7
   97c40:	bc80      	pop	{r7}
   97c42:	4770      	bx	lr

00097c44 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   97c44:	b480      	push	{r7}
   97c46:	b089      	sub	sp, #36	; 0x24
   97c48:	af00      	add	r7, sp, #0
   97c4a:	60f8      	str	r0, [r7, #12]
   97c4c:	60b9      	str	r1, [r7, #8]
   97c4e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   97c50:	68bb      	ldr	r3, [r7, #8]
   97c52:	011a      	lsls	r2, r3, #4
   97c54:	687b      	ldr	r3, [r7, #4]
   97c56:	429a      	cmp	r2, r3
   97c58:	d802      	bhi.n	97c60 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   97c5a:	2310      	movs	r3, #16
   97c5c:	61fb      	str	r3, [r7, #28]
   97c5e:	e001      	b.n	97c64 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   97c60:	2308      	movs	r3, #8
   97c62:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   97c64:	687b      	ldr	r3, [r7, #4]
   97c66:	00da      	lsls	r2, r3, #3
   97c68:	69fb      	ldr	r3, [r7, #28]
   97c6a:	68b9      	ldr	r1, [r7, #8]
   97c6c:	fb01 f303 	mul.w	r3, r1, r3
   97c70:	085b      	lsrs	r3, r3, #1
   97c72:	441a      	add	r2, r3
   97c74:	69fb      	ldr	r3, [r7, #28]
   97c76:	68b9      	ldr	r1, [r7, #8]
   97c78:	fb01 f303 	mul.w	r3, r1, r3
   97c7c:	fbb2 f3f3 	udiv	r3, r2, r3
   97c80:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   97c82:	69bb      	ldr	r3, [r7, #24]
   97c84:	08db      	lsrs	r3, r3, #3
   97c86:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   97c88:	69bb      	ldr	r3, [r7, #24]
   97c8a:	f003 0307 	and.w	r3, r3, #7
   97c8e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   97c90:	697b      	ldr	r3, [r7, #20]
   97c92:	2b00      	cmp	r3, #0
   97c94:	d003      	beq.n	97c9e <usart_set_async_baudrate+0x5a>
   97c96:	697b      	ldr	r3, [r7, #20]
   97c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   97c9c:	d301      	bcc.n	97ca2 <usart_set_async_baudrate+0x5e>
		return 1;
   97c9e:	2301      	movs	r3, #1
   97ca0:	e00f      	b.n	97cc2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   97ca2:	69fb      	ldr	r3, [r7, #28]
   97ca4:	2b08      	cmp	r3, #8
   97ca6:	d105      	bne.n	97cb4 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   97ca8:	68fb      	ldr	r3, [r7, #12]
   97caa:	685b      	ldr	r3, [r3, #4]
   97cac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   97cb0:	68fb      	ldr	r3, [r7, #12]
   97cb2:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   97cb4:	693b      	ldr	r3, [r7, #16]
   97cb6:	041a      	lsls	r2, r3, #16
   97cb8:	697b      	ldr	r3, [r7, #20]
   97cba:	431a      	orrs	r2, r3
   97cbc:	68fb      	ldr	r3, [r7, #12]
   97cbe:	621a      	str	r2, [r3, #32]

	return 0;
   97cc0:	2300      	movs	r3, #0
}
   97cc2:	4618      	mov	r0, r3
   97cc4:	3724      	adds	r7, #36	; 0x24
   97cc6:	46bd      	mov	sp, r7
   97cc8:	bc80      	pop	{r7}
   97cca:	4770      	bx	lr

00097ccc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   97ccc:	b580      	push	{r7, lr}
   97cce:	b082      	sub	sp, #8
   97cd0:	af00      	add	r7, sp, #0
   97cd2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   97cd4:	6878      	ldr	r0, [r7, #4]
   97cd6:	4b0d      	ldr	r3, [pc, #52]	; (97d0c <usart_reset+0x40>)
   97cd8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   97cda:	687b      	ldr	r3, [r7, #4]
   97cdc:	2200      	movs	r2, #0
   97cde:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   97ce0:	687b      	ldr	r3, [r7, #4]
   97ce2:	2200      	movs	r2, #0
   97ce4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   97ce6:	687b      	ldr	r3, [r7, #4]
   97ce8:	2200      	movs	r2, #0
   97cea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   97cec:	6878      	ldr	r0, [r7, #4]
   97cee:	4b08      	ldr	r3, [pc, #32]	; (97d10 <usart_reset+0x44>)
   97cf0:	4798      	blx	r3
	usart_reset_rx(p_usart);
   97cf2:	6878      	ldr	r0, [r7, #4]
   97cf4:	4b07      	ldr	r3, [pc, #28]	; (97d14 <usart_reset+0x48>)
   97cf6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   97cf8:	6878      	ldr	r0, [r7, #4]
   97cfa:	4b07      	ldr	r3, [pc, #28]	; (97d18 <usart_reset+0x4c>)
   97cfc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   97cfe:	6878      	ldr	r0, [r7, #4]
   97d00:	4b06      	ldr	r3, [pc, #24]	; (97d1c <usart_reset+0x50>)
   97d02:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   97d04:	bf00      	nop
   97d06:	3708      	adds	r7, #8
   97d08:	46bd      	mov	sp, r7
   97d0a:	bd80      	pop	{r7, pc}
   97d0c:	00097ea1 	.word	0x00097ea1
   97d10:	00097dbd 	.word	0x00097dbd
   97d14:	00097ded 	.word	0x00097ded
   97d18:	00097e05 	.word	0x00097e05
   97d1c:	00097e21 	.word	0x00097e21

00097d20 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   97d20:	b580      	push	{r7, lr}
   97d22:	b084      	sub	sp, #16
   97d24:	af00      	add	r7, sp, #0
   97d26:	60f8      	str	r0, [r7, #12]
   97d28:	60b9      	str	r1, [r7, #8]
   97d2a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   97d2c:	68f8      	ldr	r0, [r7, #12]
   97d2e:	4b1a      	ldr	r3, [pc, #104]	; (97d98 <usart_init_rs232+0x78>)
   97d30:	4798      	blx	r3

	ul_reg_val = 0;
   97d32:	4b1a      	ldr	r3, [pc, #104]	; (97d9c <usart_init_rs232+0x7c>)
   97d34:	2200      	movs	r2, #0
   97d36:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   97d38:	68bb      	ldr	r3, [r7, #8]
   97d3a:	2b00      	cmp	r3, #0
   97d3c:	d009      	beq.n	97d52 <usart_init_rs232+0x32>
   97d3e:	68bb      	ldr	r3, [r7, #8]
   97d40:	681b      	ldr	r3, [r3, #0]
   97d42:	687a      	ldr	r2, [r7, #4]
   97d44:	4619      	mov	r1, r3
   97d46:	68f8      	ldr	r0, [r7, #12]
   97d48:	4b15      	ldr	r3, [pc, #84]	; (97da0 <usart_init_rs232+0x80>)
   97d4a:	4798      	blx	r3
   97d4c:	4603      	mov	r3, r0
   97d4e:	2b00      	cmp	r3, #0
   97d50:	d001      	beq.n	97d56 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   97d52:	2301      	movs	r3, #1
   97d54:	e01b      	b.n	97d8e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   97d56:	68bb      	ldr	r3, [r7, #8]
   97d58:	685a      	ldr	r2, [r3, #4]
   97d5a:	68bb      	ldr	r3, [r7, #8]
   97d5c:	689b      	ldr	r3, [r3, #8]
   97d5e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   97d60:	68bb      	ldr	r3, [r7, #8]
   97d62:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   97d64:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   97d66:	68bb      	ldr	r3, [r7, #8]
   97d68:	68db      	ldr	r3, [r3, #12]
   97d6a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   97d6c:	4b0b      	ldr	r3, [pc, #44]	; (97d9c <usart_init_rs232+0x7c>)
   97d6e:	681b      	ldr	r3, [r3, #0]
   97d70:	4313      	orrs	r3, r2
   97d72:	4a0a      	ldr	r2, [pc, #40]	; (97d9c <usart_init_rs232+0x7c>)
   97d74:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   97d76:	4b09      	ldr	r3, [pc, #36]	; (97d9c <usart_init_rs232+0x7c>)
   97d78:	681b      	ldr	r3, [r3, #0]
   97d7a:	4a08      	ldr	r2, [pc, #32]	; (97d9c <usart_init_rs232+0x7c>)
   97d7c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   97d7e:	68fb      	ldr	r3, [r7, #12]
   97d80:	685a      	ldr	r2, [r3, #4]
   97d82:	4b06      	ldr	r3, [pc, #24]	; (97d9c <usart_init_rs232+0x7c>)
   97d84:	681b      	ldr	r3, [r3, #0]
   97d86:	431a      	orrs	r2, r3
   97d88:	68fb      	ldr	r3, [r7, #12]
   97d8a:	605a      	str	r2, [r3, #4]

	return 0;
   97d8c:	2300      	movs	r3, #0
}
   97d8e:	4618      	mov	r0, r3
   97d90:	3710      	adds	r7, #16
   97d92:	46bd      	mov	sp, r7
   97d94:	bd80      	pop	{r7, pc}
   97d96:	bf00      	nop
   97d98:	00097ccd 	.word	0x00097ccd
   97d9c:	20072744 	.word	0x20072744
   97da0:	00097c45 	.word	0x00097c45

00097da4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   97da4:	b480      	push	{r7}
   97da6:	b083      	sub	sp, #12
   97da8:	af00      	add	r7, sp, #0
   97daa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   97dac:	687b      	ldr	r3, [r7, #4]
   97dae:	2240      	movs	r2, #64	; 0x40
   97db0:	601a      	str	r2, [r3, #0]
}
   97db2:	bf00      	nop
   97db4:	370c      	adds	r7, #12
   97db6:	46bd      	mov	sp, r7
   97db8:	bc80      	pop	{r7}
   97dba:	4770      	bx	lr

00097dbc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   97dbc:	b480      	push	{r7}
   97dbe:	b083      	sub	sp, #12
   97dc0:	af00      	add	r7, sp, #0
   97dc2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   97dc4:	687b      	ldr	r3, [r7, #4]
   97dc6:	2288      	movs	r2, #136	; 0x88
   97dc8:	601a      	str	r2, [r3, #0]
}
   97dca:	bf00      	nop
   97dcc:	370c      	adds	r7, #12
   97dce:	46bd      	mov	sp, r7
   97dd0:	bc80      	pop	{r7}
   97dd2:	4770      	bx	lr

00097dd4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   97dd4:	b480      	push	{r7}
   97dd6:	b083      	sub	sp, #12
   97dd8:	af00      	add	r7, sp, #0
   97dda:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   97ddc:	687b      	ldr	r3, [r7, #4]
   97dde:	2210      	movs	r2, #16
   97de0:	601a      	str	r2, [r3, #0]
}
   97de2:	bf00      	nop
   97de4:	370c      	adds	r7, #12
   97de6:	46bd      	mov	sp, r7
   97de8:	bc80      	pop	{r7}
   97dea:	4770      	bx	lr

00097dec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   97dec:	b480      	push	{r7}
   97dee:	b083      	sub	sp, #12
   97df0:	af00      	add	r7, sp, #0
   97df2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   97df4:	687b      	ldr	r3, [r7, #4]
   97df6:	2224      	movs	r2, #36	; 0x24
   97df8:	601a      	str	r2, [r3, #0]
}
   97dfa:	bf00      	nop
   97dfc:	370c      	adds	r7, #12
   97dfe:	46bd      	mov	sp, r7
   97e00:	bc80      	pop	{r7}
   97e02:	4770      	bx	lr

00097e04 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   97e04:	b480      	push	{r7}
   97e06:	b083      	sub	sp, #12
   97e08:	af00      	add	r7, sp, #0
   97e0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   97e0c:	687b      	ldr	r3, [r7, #4]
   97e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   97e12:	601a      	str	r2, [r3, #0]
}
   97e14:	bf00      	nop
   97e16:	370c      	adds	r7, #12
   97e18:	46bd      	mov	sp, r7
   97e1a:	bc80      	pop	{r7}
   97e1c:	4770      	bx	lr
   97e1e:	bf00      	nop

00097e20 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   97e20:	b480      	push	{r7}
   97e22:	b083      	sub	sp, #12
   97e24:	af00      	add	r7, sp, #0
   97e26:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   97e28:	687b      	ldr	r3, [r7, #4]
   97e2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   97e2e:	601a      	str	r2, [r3, #0]
}
   97e30:	bf00      	nop
   97e32:	370c      	adds	r7, #12
   97e34:	46bd      	mov	sp, r7
   97e36:	bc80      	pop	{r7}
   97e38:	4770      	bx	lr
   97e3a:	bf00      	nop

00097e3c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   97e3c:	b480      	push	{r7}
   97e3e:	b083      	sub	sp, #12
   97e40:	af00      	add	r7, sp, #0
   97e42:	6078      	str	r0, [r7, #4]
   97e44:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   97e46:	687b      	ldr	r3, [r7, #4]
   97e48:	695b      	ldr	r3, [r3, #20]
   97e4a:	f003 0302 	and.w	r3, r3, #2
   97e4e:	2b00      	cmp	r3, #0
   97e50:	d101      	bne.n	97e56 <usart_write+0x1a>
		return 1;
   97e52:	2301      	movs	r3, #1
   97e54:	e005      	b.n	97e62 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   97e56:	683b      	ldr	r3, [r7, #0]
   97e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
   97e5c:	687b      	ldr	r3, [r7, #4]
   97e5e:	61da      	str	r2, [r3, #28]
	return 0;
   97e60:	2300      	movs	r3, #0
}
   97e62:	4618      	mov	r0, r3
   97e64:	370c      	adds	r7, #12
   97e66:	46bd      	mov	sp, r7
   97e68:	bc80      	pop	{r7}
   97e6a:	4770      	bx	lr

00097e6c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   97e6c:	b480      	push	{r7}
   97e6e:	b083      	sub	sp, #12
   97e70:	af00      	add	r7, sp, #0
   97e72:	6078      	str	r0, [r7, #4]
   97e74:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   97e76:	687b      	ldr	r3, [r7, #4]
   97e78:	695b      	ldr	r3, [r3, #20]
   97e7a:	f003 0301 	and.w	r3, r3, #1
   97e7e:	2b00      	cmp	r3, #0
   97e80:	d101      	bne.n	97e86 <usart_read+0x1a>
		return 1;
   97e82:	2301      	movs	r3, #1
   97e84:	e006      	b.n	97e94 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   97e86:	687b      	ldr	r3, [r7, #4]
   97e88:	699b      	ldr	r3, [r3, #24]
   97e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   97e8e:	683b      	ldr	r3, [r7, #0]
   97e90:	601a      	str	r2, [r3, #0]

	return 0;
   97e92:	2300      	movs	r3, #0
}
   97e94:	4618      	mov	r0, r3
   97e96:	370c      	adds	r7, #12
   97e98:	46bd      	mov	sp, r7
   97e9a:	bc80      	pop	{r7}
   97e9c:	4770      	bx	lr
   97e9e:	bf00      	nop

00097ea0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   97ea0:	b480      	push	{r7}
   97ea2:	b083      	sub	sp, #12
   97ea4:	af00      	add	r7, sp, #0
   97ea6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   97ea8:	687b      	ldr	r3, [r7, #4]
   97eaa:	4a04      	ldr	r2, [pc, #16]	; (97ebc <usart_disable_writeprotect+0x1c>)
   97eac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   97eb0:	bf00      	nop
   97eb2:	370c      	adds	r7, #12
   97eb4:	46bd      	mov	sp, r7
   97eb6:	bc80      	pop	{r7}
   97eb8:	4770      	bx	lr
   97eba:	bf00      	nop
   97ebc:	55534100 	.word	0x55534100

00097ec0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   97ec0:	b480      	push	{r7}
   97ec2:	af00      	add	r7, sp, #0
	while (1) {
	}
   97ec4:	e7fe      	b.n	97ec4 <Dummy_Handler+0x4>
   97ec6:	bf00      	nop

00097ec8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   97ec8:	b580      	push	{r7, lr}
   97eca:	b082      	sub	sp, #8
   97ecc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   97ece:	4b1e      	ldr	r3, [pc, #120]	; (97f48 <Reset_Handler+0x80>)
   97ed0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   97ed2:	4b1e      	ldr	r3, [pc, #120]	; (97f4c <Reset_Handler+0x84>)
   97ed4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   97ed6:	687a      	ldr	r2, [r7, #4]
   97ed8:	683b      	ldr	r3, [r7, #0]
   97eda:	429a      	cmp	r2, r3
   97edc:	d00c      	beq.n	97ef8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   97ede:	e007      	b.n	97ef0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   97ee0:	683b      	ldr	r3, [r7, #0]
   97ee2:	1d1a      	adds	r2, r3, #4
   97ee4:	603a      	str	r2, [r7, #0]
   97ee6:	687a      	ldr	r2, [r7, #4]
   97ee8:	1d11      	adds	r1, r2, #4
   97eea:	6079      	str	r1, [r7, #4]
   97eec:	6812      	ldr	r2, [r2, #0]
   97eee:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   97ef0:	683b      	ldr	r3, [r7, #0]
   97ef2:	4a17      	ldr	r2, [pc, #92]	; (97f50 <Reset_Handler+0x88>)
   97ef4:	4293      	cmp	r3, r2
   97ef6:	d3f3      	bcc.n	97ee0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   97ef8:	4b16      	ldr	r3, [pc, #88]	; (97f54 <Reset_Handler+0x8c>)
   97efa:	603b      	str	r3, [r7, #0]
   97efc:	e004      	b.n	97f08 <Reset_Handler+0x40>
		*pDest++ = 0;
   97efe:	683b      	ldr	r3, [r7, #0]
   97f00:	1d1a      	adds	r2, r3, #4
   97f02:	603a      	str	r2, [r7, #0]
   97f04:	2200      	movs	r2, #0
   97f06:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   97f08:	683b      	ldr	r3, [r7, #0]
   97f0a:	4a13      	ldr	r2, [pc, #76]	; (97f58 <Reset_Handler+0x90>)
   97f0c:	4293      	cmp	r3, r2
   97f0e:	d3f6      	bcc.n	97efe <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   97f10:	4b12      	ldr	r3, [pc, #72]	; (97f5c <Reset_Handler+0x94>)
   97f12:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   97f14:	4a12      	ldr	r2, [pc, #72]	; (97f60 <Reset_Handler+0x98>)
   97f16:	687b      	ldr	r3, [r7, #4]
   97f18:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   97f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   97f20:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   97f22:	687b      	ldr	r3, [r7, #4]
   97f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   97f28:	d309      	bcc.n	97f3e <Reset_Handler+0x76>
   97f2a:	687b      	ldr	r3, [r7, #4]
   97f2c:	4a0d      	ldr	r2, [pc, #52]	; (97f64 <Reset_Handler+0x9c>)
   97f2e:	4293      	cmp	r3, r2
   97f30:	d805      	bhi.n	97f3e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   97f32:	4a0b      	ldr	r2, [pc, #44]	; (97f60 <Reset_Handler+0x98>)
   97f34:	4b0a      	ldr	r3, [pc, #40]	; (97f60 <Reset_Handler+0x98>)
   97f36:	689b      	ldr	r3, [r3, #8]
   97f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   97f3c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   97f3e:	4b0a      	ldr	r3, [pc, #40]	; (97f68 <Reset_Handler+0xa0>)
   97f40:	4798      	blx	r3

	/* Branch to main function */
	main();
   97f42:	4b0a      	ldr	r3, [pc, #40]	; (97f6c <Reset_Handler+0xa4>)
   97f44:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   97f46:	e7fe      	b.n	97f46 <Reset_Handler+0x7e>
   97f48:	000a4c10 	.word	0x000a4c10
   97f4c:	20070000 	.word	0x20070000
   97f50:	200714a4 	.word	0x200714a4
   97f54:	200714a4 	.word	0x200714a4
   97f58:	200732f4 	.word	0x200732f4
   97f5c:	00080000 	.word	0x00080000
   97f60:	e000ed00 	.word	0xe000ed00
   97f64:	200fffff 	.word	0x200fffff
   97f68:	000a2aa5 	.word	0x000a2aa5
   97f6c:	0008a95d 	.word	0x0008a95d

00097f70 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   97f70:	b480      	push	{r7}
   97f72:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   97f74:	4b57      	ldr	r3, [pc, #348]	; (980d4 <SystemCoreClockUpdate+0x164>)
   97f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   97f78:	f003 0303 	and.w	r3, r3, #3
   97f7c:	2b03      	cmp	r3, #3
   97f7e:	f200 808a 	bhi.w	98096 <SystemCoreClockUpdate+0x126>
   97f82:	a201      	add	r2, pc, #4	; (adr r2, 97f88 <SystemCoreClockUpdate+0x18>)
   97f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97f88:	00097f99 	.word	0x00097f99
   97f8c:	00097fb9 	.word	0x00097fb9
   97f90:	00098009 	.word	0x00098009
   97f94:	00098009 	.word	0x00098009
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   97f98:	4b4f      	ldr	r3, [pc, #316]	; (980d8 <SystemCoreClockUpdate+0x168>)
   97f9a:	695b      	ldr	r3, [r3, #20]
   97f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   97fa0:	2b00      	cmp	r3, #0
   97fa2:	d004      	beq.n	97fae <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   97fa4:	4b4d      	ldr	r3, [pc, #308]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97fa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   97faa:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   97fac:	e073      	b.n	98096 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   97fae:	4b4b      	ldr	r3, [pc, #300]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97fb0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   97fb4:	601a      	str	r2, [r3, #0]
		}
		break;
   97fb6:	e06e      	b.n	98096 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   97fb8:	4b46      	ldr	r3, [pc, #280]	; (980d4 <SystemCoreClockUpdate+0x164>)
   97fba:	6a1b      	ldr	r3, [r3, #32]
   97fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   97fc0:	2b00      	cmp	r3, #0
   97fc2:	d003      	beq.n	97fcc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   97fc4:	4b45      	ldr	r3, [pc, #276]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97fc6:	4a46      	ldr	r2, [pc, #280]	; (980e0 <SystemCoreClockUpdate+0x170>)
   97fc8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   97fca:	e064      	b.n	98096 <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   97fcc:	4b43      	ldr	r3, [pc, #268]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97fce:	4a45      	ldr	r2, [pc, #276]	; (980e4 <SystemCoreClockUpdate+0x174>)
   97fd0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   97fd2:	4b40      	ldr	r3, [pc, #256]	; (980d4 <SystemCoreClockUpdate+0x164>)
   97fd4:	6a1b      	ldr	r3, [r3, #32]
   97fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   97fda:	2b10      	cmp	r3, #16
   97fdc:	d004      	beq.n	97fe8 <SystemCoreClockUpdate+0x78>
   97fde:	2b20      	cmp	r3, #32
   97fe0:	d008      	beq.n	97ff4 <SystemCoreClockUpdate+0x84>
   97fe2:	2b00      	cmp	r3, #0
   97fe4:	d00e      	beq.n	98004 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   97fe6:	e00e      	b.n	98006 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   97fe8:	4b3c      	ldr	r3, [pc, #240]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97fea:	681b      	ldr	r3, [r3, #0]
   97fec:	005b      	lsls	r3, r3, #1
   97fee:	4a3b      	ldr	r2, [pc, #236]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97ff0:	6013      	str	r3, [r2, #0]
				break;
   97ff2:	e008      	b.n	98006 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   97ff4:	4b39      	ldr	r3, [pc, #228]	; (980dc <SystemCoreClockUpdate+0x16c>)
   97ff6:	681a      	ldr	r2, [r3, #0]
   97ff8:	4613      	mov	r3, r2
   97ffa:	005b      	lsls	r3, r3, #1
   97ffc:	4413      	add	r3, r2
   97ffe:	4a37      	ldr	r2, [pc, #220]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98000:	6013      	str	r3, [r2, #0]
				break;
   98002:	e000      	b.n	98006 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   98004:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   98006:	e046      	b.n	98096 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   98008:	4b32      	ldr	r3, [pc, #200]	; (980d4 <SystemCoreClockUpdate+0x164>)
   9800a:	6a1b      	ldr	r3, [r3, #32]
   9800c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   98010:	2b00      	cmp	r3, #0
   98012:	d003      	beq.n	9801c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   98014:	4b31      	ldr	r3, [pc, #196]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98016:	4a32      	ldr	r2, [pc, #200]	; (980e0 <SystemCoreClockUpdate+0x170>)
   98018:	601a      	str	r2, [r3, #0]
   9801a:	e01c      	b.n	98056 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9801c:	4b2f      	ldr	r3, [pc, #188]	; (980dc <SystemCoreClockUpdate+0x16c>)
   9801e:	4a31      	ldr	r2, [pc, #196]	; (980e4 <SystemCoreClockUpdate+0x174>)
   98020:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   98022:	4b2c      	ldr	r3, [pc, #176]	; (980d4 <SystemCoreClockUpdate+0x164>)
   98024:	6a1b      	ldr	r3, [r3, #32]
   98026:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9802a:	2b10      	cmp	r3, #16
   9802c:	d004      	beq.n	98038 <SystemCoreClockUpdate+0xc8>
   9802e:	2b20      	cmp	r3, #32
   98030:	d008      	beq.n	98044 <SystemCoreClockUpdate+0xd4>
   98032:	2b00      	cmp	r3, #0
   98034:	d00e      	beq.n	98054 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   98036:	e00e      	b.n	98056 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   98038:	4b28      	ldr	r3, [pc, #160]	; (980dc <SystemCoreClockUpdate+0x16c>)
   9803a:	681b      	ldr	r3, [r3, #0]
   9803c:	005b      	lsls	r3, r3, #1
   9803e:	4a27      	ldr	r2, [pc, #156]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98040:	6013      	str	r3, [r2, #0]
				break;
   98042:	e008      	b.n	98056 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   98044:	4b25      	ldr	r3, [pc, #148]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98046:	681a      	ldr	r2, [r3, #0]
   98048:	4613      	mov	r3, r2
   9804a:	005b      	lsls	r3, r3, #1
   9804c:	4413      	add	r3, r2
   9804e:	4a23      	ldr	r2, [pc, #140]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98050:	6013      	str	r3, [r2, #0]
				break;
   98052:	e000      	b.n	98056 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   98054:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   98056:	4b1f      	ldr	r3, [pc, #124]	; (980d4 <SystemCoreClockUpdate+0x164>)
   98058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9805a:	f003 0303 	and.w	r3, r3, #3
   9805e:	2b02      	cmp	r3, #2
   98060:	d115      	bne.n	9808e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   98062:	4b1c      	ldr	r3, [pc, #112]	; (980d4 <SystemCoreClockUpdate+0x164>)
   98064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   98066:	4b20      	ldr	r3, [pc, #128]	; (980e8 <SystemCoreClockUpdate+0x178>)
   98068:	4013      	ands	r3, r2
   9806a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   9806c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9806e:	4a1b      	ldr	r2, [pc, #108]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98070:	6812      	ldr	r2, [r2, #0]
   98072:	fb02 f303 	mul.w	r3, r2, r3
   98076:	4a19      	ldr	r2, [pc, #100]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98078:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9807a:	4b16      	ldr	r3, [pc, #88]	; (980d4 <SystemCoreClockUpdate+0x164>)
   9807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   9807e:	b2db      	uxtb	r3, r3
   98080:	4a16      	ldr	r2, [pc, #88]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98082:	6812      	ldr	r2, [r2, #0]
   98084:	fbb2 f3f3 	udiv	r3, r2, r3
   98088:	4a14      	ldr	r2, [pc, #80]	; (980dc <SystemCoreClockUpdate+0x16c>)
   9808a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   9808c:	e002      	b.n	98094 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   9808e:	4b13      	ldr	r3, [pc, #76]	; (980dc <SystemCoreClockUpdate+0x16c>)
   98090:	4a16      	ldr	r2, [pc, #88]	; (980ec <SystemCoreClockUpdate+0x17c>)
   98092:	601a      	str	r2, [r3, #0]
		}
		break;
   98094:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   98096:	4b0f      	ldr	r3, [pc, #60]	; (980d4 <SystemCoreClockUpdate+0x164>)
   98098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9809a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9809e:	2b70      	cmp	r3, #112	; 0x70
   980a0:	d108      	bne.n	980b4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   980a2:	4b0e      	ldr	r3, [pc, #56]	; (980dc <SystemCoreClockUpdate+0x16c>)
   980a4:	681b      	ldr	r3, [r3, #0]
   980a6:	4a12      	ldr	r2, [pc, #72]	; (980f0 <SystemCoreClockUpdate+0x180>)
   980a8:	fba2 2303 	umull	r2, r3, r2, r3
   980ac:	085b      	lsrs	r3, r3, #1
   980ae:	4a0b      	ldr	r2, [pc, #44]	; (980dc <SystemCoreClockUpdate+0x16c>)
   980b0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   980b2:	e00a      	b.n	980ca <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   980b4:	4b07      	ldr	r3, [pc, #28]	; (980d4 <SystemCoreClockUpdate+0x164>)
   980b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   980b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   980bc:	091b      	lsrs	r3, r3, #4
   980be:	4a07      	ldr	r2, [pc, #28]	; (980dc <SystemCoreClockUpdate+0x16c>)
   980c0:	6812      	ldr	r2, [r2, #0]
   980c2:	fa22 f303 	lsr.w	r3, r2, r3
   980c6:	4a05      	ldr	r2, [pc, #20]	; (980dc <SystemCoreClockUpdate+0x16c>)
   980c8:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   980ca:	bf00      	nop
   980cc:	46bd      	mov	sp, r7
   980ce:	bc80      	pop	{r7}
   980d0:	4770      	bx	lr
   980d2:	bf00      	nop
   980d4:	400e0600 	.word	0x400e0600
   980d8:	400e1a10 	.word	0x400e1a10
   980dc:	20070a28 	.word	0x20070a28
   980e0:	00b71b00 	.word	0x00b71b00
   980e4:	003d0900 	.word	0x003d0900
   980e8:	07ff0000 	.word	0x07ff0000
   980ec:	0e4e1c00 	.word	0x0e4e1c00
   980f0:	aaaaaaab 	.word	0xaaaaaaab

000980f4 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   980f4:	b480      	push	{r7}
   980f6:	b083      	sub	sp, #12
   980f8:	af00      	add	r7, sp, #0
   980fa:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   980fc:	687b      	ldr	r3, [r7, #4]
   980fe:	4a25      	ldr	r2, [pc, #148]	; (98194 <system_init_flash+0xa0>)
   98100:	4293      	cmp	r3, r2
   98102:	d806      	bhi.n	98112 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   98104:	4b24      	ldr	r3, [pc, #144]	; (98198 <system_init_flash+0xa4>)
   98106:	2200      	movs	r2, #0
   98108:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   9810a:	4b24      	ldr	r3, [pc, #144]	; (9819c <system_init_flash+0xa8>)
   9810c:	2200      	movs	r2, #0
   9810e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98110:	e03b      	b.n	9818a <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   98112:	687b      	ldr	r3, [r7, #4]
   98114:	4a22      	ldr	r2, [pc, #136]	; (981a0 <system_init_flash+0xac>)
   98116:	4293      	cmp	r3, r2
   98118:	d808      	bhi.n	9812c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   9811a:	4b1f      	ldr	r3, [pc, #124]	; (98198 <system_init_flash+0xa4>)
   9811c:	f44f 7280 	mov.w	r2, #256	; 0x100
   98120:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   98122:	4b1e      	ldr	r3, [pc, #120]	; (9819c <system_init_flash+0xa8>)
   98124:	f44f 7280 	mov.w	r2, #256	; 0x100
   98128:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9812a:	e02e      	b.n	9818a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   9812c:	687b      	ldr	r3, [r7, #4]
   9812e:	4a1d      	ldr	r2, [pc, #116]	; (981a4 <system_init_flash+0xb0>)
   98130:	4293      	cmp	r3, r2
   98132:	d808      	bhi.n	98146 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   98134:	4b18      	ldr	r3, [pc, #96]	; (98198 <system_init_flash+0xa4>)
   98136:	f44f 7200 	mov.w	r2, #512	; 0x200
   9813a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   9813c:	4b17      	ldr	r3, [pc, #92]	; (9819c <system_init_flash+0xa8>)
   9813e:	f44f 7200 	mov.w	r2, #512	; 0x200
   98142:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98144:	e021      	b.n	9818a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   98146:	687b      	ldr	r3, [r7, #4]
   98148:	4a17      	ldr	r2, [pc, #92]	; (981a8 <system_init_flash+0xb4>)
   9814a:	4293      	cmp	r3, r2
   9814c:	d808      	bhi.n	98160 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9814e:	4b12      	ldr	r3, [pc, #72]	; (98198 <system_init_flash+0xa4>)
   98150:	f44f 7240 	mov.w	r2, #768	; 0x300
   98154:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   98156:	4b11      	ldr	r3, [pc, #68]	; (9819c <system_init_flash+0xa8>)
   98158:	f44f 7240 	mov.w	r2, #768	; 0x300
   9815c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9815e:	e014      	b.n	9818a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   98160:	687b      	ldr	r3, [r7, #4]
   98162:	4a12      	ldr	r2, [pc, #72]	; (981ac <system_init_flash+0xb8>)
   98164:	4293      	cmp	r3, r2
   98166:	d808      	bhi.n	9817a <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   98168:	4b0b      	ldr	r3, [pc, #44]	; (98198 <system_init_flash+0xa4>)
   9816a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9816e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   98170:	4b0a      	ldr	r3, [pc, #40]	; (9819c <system_init_flash+0xa8>)
   98172:	f44f 6280 	mov.w	r2, #1024	; 0x400
   98176:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98178:	e007      	b.n	9818a <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   9817a:	4b07      	ldr	r3, [pc, #28]	; (98198 <system_init_flash+0xa4>)
   9817c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   98180:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   98182:	4b06      	ldr	r3, [pc, #24]	; (9819c <system_init_flash+0xa8>)
   98184:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   98188:	601a      	str	r2, [r3, #0]
	}
}
   9818a:	bf00      	nop
   9818c:	370c      	adds	r7, #12
   9818e:	46bd      	mov	sp, r7
   98190:	bc80      	pop	{r7}
   98192:	4770      	bx	lr
   98194:	0121eabf 	.word	0x0121eabf
   98198:	400e0a00 	.word	0x400e0a00
   9819c:	400e0c00 	.word	0x400e0c00
   981a0:	02faf07f 	.word	0x02faf07f
   981a4:	03d08fff 	.word	0x03d08fff
   981a8:	04c4b3ff 	.word	0x04c4b3ff
   981ac:	055d4a7f 	.word	0x055d4a7f

000981b0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   981b0:	b480      	push	{r7}
   981b2:	b085      	sub	sp, #20
   981b4:	af00      	add	r7, sp, #0
   981b6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   981b8:	4b0a      	ldr	r3, [pc, #40]	; (981e4 <_sbrk+0x34>)
   981ba:	681b      	ldr	r3, [r3, #0]
   981bc:	2b00      	cmp	r3, #0
   981be:	d102      	bne.n	981c6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   981c0:	4b08      	ldr	r3, [pc, #32]	; (981e4 <_sbrk+0x34>)
   981c2:	4a09      	ldr	r2, [pc, #36]	; (981e8 <_sbrk+0x38>)
   981c4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   981c6:	4b07      	ldr	r3, [pc, #28]	; (981e4 <_sbrk+0x34>)
   981c8:	681b      	ldr	r3, [r3, #0]
   981ca:	60fb      	str	r3, [r7, #12]

	heap += incr;
   981cc:	4b05      	ldr	r3, [pc, #20]	; (981e4 <_sbrk+0x34>)
   981ce:	681a      	ldr	r2, [r3, #0]
   981d0:	687b      	ldr	r3, [r7, #4]
   981d2:	4413      	add	r3, r2
   981d4:	4a03      	ldr	r2, [pc, #12]	; (981e4 <_sbrk+0x34>)
   981d6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   981d8:	68fb      	ldr	r3, [r7, #12]
}
   981da:	4618      	mov	r0, r3
   981dc:	3714      	adds	r7, #20
   981de:	46bd      	mov	sp, r7
   981e0:	bc80      	pop	{r7}
   981e2:	4770      	bx	lr
   981e4:	20072748 	.word	0x20072748
   981e8:	200752f8 	.word	0x200752f8

000981ec <_close>:
{
	return -1;
}

extern int _close(int file)
{
   981ec:	b480      	push	{r7}
   981ee:	b083      	sub	sp, #12
   981f0:	af00      	add	r7, sp, #0
   981f2:	6078      	str	r0, [r7, #4]
	return -1;
   981f4:	f04f 33ff 	mov.w	r3, #4294967295
}
   981f8:	4618      	mov	r0, r3
   981fa:	370c      	adds	r7, #12
   981fc:	46bd      	mov	sp, r7
   981fe:	bc80      	pop	{r7}
   98200:	4770      	bx	lr
   98202:	bf00      	nop

00098204 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   98204:	b480      	push	{r7}
   98206:	b083      	sub	sp, #12
   98208:	af00      	add	r7, sp, #0
   9820a:	6078      	str	r0, [r7, #4]
   9820c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9820e:	683b      	ldr	r3, [r7, #0]
   98210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   98214:	605a      	str	r2, [r3, #4]

	return 0;
   98216:	2300      	movs	r3, #0
}
   98218:	4618      	mov	r0, r3
   9821a:	370c      	adds	r7, #12
   9821c:	46bd      	mov	sp, r7
   9821e:	bc80      	pop	{r7}
   98220:	4770      	bx	lr
   98222:	bf00      	nop

00098224 <_isatty>:

extern int _isatty(int file)
{
   98224:	b480      	push	{r7}
   98226:	b083      	sub	sp, #12
   98228:	af00      	add	r7, sp, #0
   9822a:	6078      	str	r0, [r7, #4]
	return 1;
   9822c:	2301      	movs	r3, #1
}
   9822e:	4618      	mov	r0, r3
   98230:	370c      	adds	r7, #12
   98232:	46bd      	mov	sp, r7
   98234:	bc80      	pop	{r7}
   98236:	4770      	bx	lr

00098238 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   98238:	b480      	push	{r7}
   9823a:	b085      	sub	sp, #20
   9823c:	af00      	add	r7, sp, #0
   9823e:	60f8      	str	r0, [r7, #12]
   98240:	60b9      	str	r1, [r7, #8]
   98242:	607a      	str	r2, [r7, #4]
	return 0;
   98244:	2300      	movs	r3, #0
}
   98246:	4618      	mov	r0, r3
   98248:	3714      	adds	r7, #20
   9824a:	46bd      	mov	sp, r7
   9824c:	bc80      	pop	{r7}
   9824e:	4770      	bx	lr

00098250 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   98250:	b480      	push	{r7}
   98252:	b083      	sub	sp, #12
   98254:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   98256:	2304      	movs	r3, #4
   98258:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   9825a:	4b0b      	ldr	r3, [pc, #44]	; (98288 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   9825c:	7e1b      	ldrb	r3, [r3, #24]
   9825e:	2b00      	cmp	r3, #0
   98260:	d002      	beq.n	98268 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   98262:	2300      	movs	r3, #0
   98264:	71fb      	strb	r3, [r7, #7]
   98266:	e008      	b.n	9827a <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   98268:	4b08      	ldr	r3, [pc, #32]	; (9828c <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   9826a:	7e1b      	ldrb	r3, [r3, #24]
   9826c:	2b00      	cmp	r3, #0
   9826e:	d002      	beq.n	98276 <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   98270:	2300      	movs	r3, #0
   98272:	71fb      	strb	r3, [r7, #7]
   98274:	e001      	b.n	9827a <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   98276:	2301      	movs	r3, #1
   98278:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   9827a:	79fb      	ldrb	r3, [r7, #7]
}
   9827c:	4618      	mov	r0, r3
   9827e:	370c      	adds	r7, #12
   98280:	46bd      	mov	sp, r7
   98282:	bc80      	pop	{r7}
   98284:	4770      	bx	lr
   98286:	bf00      	nop
   98288:	20072f48 	.word	0x20072f48
   9828c:	20072e10 	.word	0x20072e10

00098290 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   98290:	b480      	push	{r7}
   98292:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   98294:	4b05      	ldr	r3, [pc, #20]	; (982ac <Cl_Console_Read_Message_Ready_Status+0x1c>)
   98296:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   9829a:	2b00      	cmp	r3, #0
   9829c:	d001      	beq.n	982a2 <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   9829e:	2300      	movs	r3, #0
   982a0:	e000      	b.n	982a4 <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   982a2:	2301      	movs	r3, #1
	}
	
}
   982a4:	4618      	mov	r0, r3
   982a6:	46bd      	mov	sp, r7
   982a8:	bc80      	pop	{r7}
   982aa:	4770      	bx	lr
   982ac:	20072d8c 	.word	0x20072d8c

000982b0 <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   982b0:	b480      	push	{r7}
   982b2:	b083      	sub	sp, #12
   982b4:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   982b6:	4b54      	ldr	r3, [pc, #336]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   982b8:	7e1b      	ldrb	r3, [r3, #24]
   982ba:	2b00      	cmp	r3, #0
   982bc:	d03c      	beq.n	98338 <Cl_Console_Read_Message_Console+0x88>
   982be:	4b52      	ldr	r3, [pc, #328]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   982c0:	7e5b      	ldrb	r3, [r3, #25]
   982c2:	f083 0301 	eor.w	r3, r3, #1
   982c6:	b2db      	uxtb	r3, r3
   982c8:	2b00      	cmp	r3, #0
   982ca:	d035      	beq.n	98338 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   982cc:	4b4f      	ldr	r3, [pc, #316]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   982ce:	2200      	movs	r2, #0
   982d0:	701a      	strb	r2, [r3, #0]
   982d2:	2300      	movs	r3, #0
   982d4:	71fb      	strb	r3, [r7, #7]
   982d6:	e010      	b.n	982fa <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   982d8:	4b4c      	ldr	r3, [pc, #304]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   982da:	781b      	ldrb	r3, [r3, #0]
   982dc:	4619      	mov	r1, r3
   982de:	79fb      	ldrb	r3, [r7, #7]
   982e0:	4a49      	ldr	r2, [pc, #292]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   982e2:	5cd2      	ldrb	r2, [r2, r3]
   982e4:	4b4a      	ldr	r3, [pc, #296]	; (98410 <Cl_Console_Read_Message_Console+0x160>)
   982e6:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   982e8:	4b48      	ldr	r3, [pc, #288]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   982ea:	781b      	ldrb	r3, [r3, #0]
   982ec:	3301      	adds	r3, #1
   982ee:	b2da      	uxtb	r2, r3
   982f0:	4b46      	ldr	r3, [pc, #280]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   982f2:	701a      	strb	r2, [r3, #0]
   982f4:	79fb      	ldrb	r3, [r7, #7]
   982f6:	3301      	adds	r3, #1
   982f8:	71fb      	strb	r3, [r7, #7]
   982fa:	4b43      	ldr	r3, [pc, #268]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   982fc:	7d1b      	ldrb	r3, [r3, #20]
   982fe:	79fa      	ldrb	r2, [r7, #7]
   98300:	429a      	cmp	r2, r3
   98302:	d3e9      	bcc.n	982d8 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   98304:	4b40      	ldr	r3, [pc, #256]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   98306:	7f5b      	ldrb	r3, [r3, #29]
   98308:	f083 0301 	eor.w	r3, r3, #1
   9830c:	b2db      	uxtb	r3, r3
   9830e:	2b00      	cmp	r3, #0
   98310:	d003      	beq.n	9831a <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   98312:	4b3f      	ldr	r3, [pc, #252]	; (98410 <Cl_Console_Read_Message_Console+0x160>)
   98314:	2201      	movs	r2, #1
   98316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9831a:	4b3b      	ldr	r3, [pc, #236]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   9831c:	2201      	movs	r2, #1
   9831e:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   98320:	4b39      	ldr	r3, [pc, #228]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   98322:	2200      	movs	r2, #0
   98324:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   98326:	4b38      	ldr	r3, [pc, #224]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   98328:	2200      	movs	r2, #0
   9832a:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9832c:	4b36      	ldr	r3, [pc, #216]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   9832e:	2200      	movs	r2, #0
   98330:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   98332:	4b35      	ldr	r3, [pc, #212]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   98334:	2201      	movs	r2, #1
   98336:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   98338:	4b36      	ldr	r3, [pc, #216]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   9833a:	7e1b      	ldrb	r3, [r3, #24]
   9833c:	2b00      	cmp	r3, #0
   9833e:	d05c      	beq.n	983fa <Cl_Console_Read_Message_Console+0x14a>
   98340:	4b34      	ldr	r3, [pc, #208]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   98342:	7e5b      	ldrb	r3, [r3, #25]
   98344:	f083 0301 	eor.w	r3, r3, #1
   98348:	b2db      	uxtb	r3, r3
   9834a:	2b00      	cmp	r3, #0
   9834c:	d055      	beq.n	983fa <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   9834e:	4b2e      	ldr	r3, [pc, #184]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   98350:	7f5b      	ldrb	r3, [r3, #29]
   98352:	f083 0301 	eor.w	r3, r3, #1
   98356:	b2db      	uxtb	r3, r3
   98358:	2b00      	cmp	r3, #0
   9835a:	d002      	beq.n	98362 <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   9835c:	4b2b      	ldr	r3, [pc, #172]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   9835e:	2200      	movs	r2, #0
   98360:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   98362:	2300      	movs	r3, #0
   98364:	71fb      	strb	r3, [r7, #7]
   98366:	e010      	b.n	9838a <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   98368:	4b28      	ldr	r3, [pc, #160]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   9836a:	781b      	ldrb	r3, [r3, #0]
   9836c:	4619      	mov	r1, r3
   9836e:	79fb      	ldrb	r3, [r7, #7]
   98370:	4a28      	ldr	r2, [pc, #160]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   98372:	5cd2      	ldrb	r2, [r2, r3]
   98374:	4b26      	ldr	r3, [pc, #152]	; (98410 <Cl_Console_Read_Message_Console+0x160>)
   98376:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   98378:	4b24      	ldr	r3, [pc, #144]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   9837a:	781b      	ldrb	r3, [r3, #0]
   9837c:	3301      	adds	r3, #1
   9837e:	b2da      	uxtb	r2, r3
   98380:	4b22      	ldr	r3, [pc, #136]	; (9840c <Cl_Console_Read_Message_Console+0x15c>)
   98382:	701a      	strb	r2, [r3, #0]
   98384:	79fb      	ldrb	r3, [r7, #7]
   98386:	3301      	adds	r3, #1
   98388:	71fb      	strb	r3, [r7, #7]
   9838a:	4b22      	ldr	r3, [pc, #136]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   9838c:	7d1b      	ldrb	r3, [r3, #20]
   9838e:	79fa      	ldrb	r2, [r7, #7]
   98390:	429a      	cmp	r2, r3
   98392:	d3e9      	bcc.n	98368 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   98394:	4b1f      	ldr	r3, [pc, #124]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   98396:	7f5b      	ldrb	r3, [r3, #29]
   98398:	f083 0301 	eor.w	r3, r3, #1
   9839c:	b2db      	uxtb	r3, r3
   9839e:	2b00      	cmp	r3, #0
   983a0:	d003      	beq.n	983aa <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   983a2:	4b1b      	ldr	r3, [pc, #108]	; (98410 <Cl_Console_Read_Message_Console+0x160>)
   983a4:	2201      	movs	r2, #1
   983a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   983aa:	4b1a      	ldr	r3, [pc, #104]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983ac:	2201      	movs	r2, #1
   983ae:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   983b0:	4b18      	ldr	r3, [pc, #96]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983b2:	2200      	movs	r2, #0
   983b4:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   983b6:	4b17      	ldr	r3, [pc, #92]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983b8:	2200      	movs	r2, #0
   983ba:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   983bc:	4b15      	ldr	r3, [pc, #84]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983be:	2200      	movs	r2, #0
   983c0:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   983c2:	4b14      	ldr	r3, [pc, #80]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983c4:	2201      	movs	r2, #1
   983c6:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   983c8:	4b0f      	ldr	r3, [pc, #60]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983ca:	7f5b      	ldrb	r3, [r3, #29]
   983cc:	2b00      	cmp	r3, #0
   983ce:	d014      	beq.n	983fa <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   983d0:	4b0d      	ldr	r3, [pc, #52]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983d2:	2201      	movs	r2, #1
   983d4:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   983d6:	4b0c      	ldr	r3, [pc, #48]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983d8:	2200      	movs	r2, #0
   983da:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   983dc:	4b0a      	ldr	r3, [pc, #40]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983de:	2200      	movs	r2, #0
   983e0:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   983e2:	4b09      	ldr	r3, [pc, #36]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983e4:	2200      	movs	r2, #0
   983e6:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   983e8:	4b0a      	ldr	r3, [pc, #40]	; (98414 <Cl_Console_Read_Message_Console+0x164>)
   983ea:	2200      	movs	r2, #0
   983ec:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   983ee:	4b06      	ldr	r3, [pc, #24]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983f0:	2200      	movs	r2, #0
   983f2:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   983f4:	4b04      	ldr	r3, [pc, #16]	; (98408 <Cl_Console_Read_Message_Console+0x158>)
   983f6:	2201      	movs	r2, #1
   983f8:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   983fa:	2300      	movs	r3, #0
}
   983fc:	4618      	mov	r0, r3
   983fe:	370c      	adds	r7, #12
   98400:	46bd      	mov	sp, r7
   98402:	bc80      	pop	{r7}
   98404:	4770      	bx	lr
   98406:	bf00      	nop
   98408:	20072f48 	.word	0x20072f48
   9840c:	20072752 	.word	0x20072752
   98410:	20072d8c 	.word	0x20072d8c
   98414:	20072e10 	.word	0x20072e10

00098418 <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   98418:	b580      	push	{r7, lr}
   9841a:	b084      	sub	sp, #16
   9841c:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9841e:	2300      	movs	r3, #0
   98420:	70fb      	strb	r3, [r7, #3]
   98422:	2300      	movs	r3, #0
   98424:	60bb      	str	r3, [r7, #8]
   98426:	2300      	movs	r3, #0
   98428:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9842a:	4b47      	ldr	r3, [pc, #284]	; (98548 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9842c:	4a47      	ldr	r2, [pc, #284]	; (9854c <Cl_Mac_Create_ConsoleEvent+0x134>)
   9842e:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   98430:	4b46      	ldr	r3, [pc, #280]	; (9854c <Cl_Mac_Create_ConsoleEvent+0x134>)
   98432:	781a      	ldrb	r2, [r3, #0]
   98434:	4b46      	ldr	r3, [pc, #280]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   98436:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   98438:	4b44      	ldr	r3, [pc, #272]	; (9854c <Cl_Mac_Create_ConsoleEvent+0x134>)
   9843a:	785a      	ldrb	r2, [r3, #1]
   9843c:	4b44      	ldr	r3, [pc, #272]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9843e:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   98440:	4b44      	ldr	r3, [pc, #272]	; (98554 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   98442:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   98444:	4b44      	ldr	r3, [pc, #272]	; (98558 <Cl_Mac_Create_ConsoleEvent+0x140>)
   98446:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   98448:	2300      	movs	r3, #0
   9844a:	73fb      	strb	r3, [r7, #15]
   9844c:	e00c      	b.n	98468 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   9844e:	687b      	ldr	r3, [r7, #4]
   98450:	781a      	ldrb	r2, [r3, #0]
   98452:	68bb      	ldr	r3, [r7, #8]
   98454:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   98456:	68bb      	ldr	r3, [r7, #8]
   98458:	3301      	adds	r3, #1
   9845a:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   9845c:	687b      	ldr	r3, [r7, #4]
   9845e:	3301      	adds	r3, #1
   98460:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   98462:	7bfb      	ldrb	r3, [r7, #15]
   98464:	3301      	adds	r3, #1
   98466:	73fb      	strb	r3, [r7, #15]
   98468:	4b39      	ldr	r3, [pc, #228]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9846a:	78db      	ldrb	r3, [r3, #3]
   9846c:	7bfa      	ldrb	r2, [r7, #15]
   9846e:	429a      	cmp	r2, r3
   98470:	d3ed      	bcc.n	9844e <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   98472:	4b37      	ldr	r3, [pc, #220]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   98474:	789b      	ldrb	r3, [r3, #2]
   98476:	2b04      	cmp	r3, #4
   98478:	d00f      	beq.n	9849a <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   9847a:	4b38      	ldr	r3, [pc, #224]	; (9855c <Cl_Mac_Create_ConsoleEvent+0x144>)
   9847c:	4798      	blx	r3
				test_counter++;
   9847e:	4b38      	ldr	r3, [pc, #224]	; (98560 <Cl_Mac_Create_ConsoleEvent+0x148>)
   98480:	881b      	ldrh	r3, [r3, #0]
   98482:	3301      	adds	r3, #1
   98484:	b29a      	uxth	r2, r3
   98486:	4b36      	ldr	r3, [pc, #216]	; (98560 <Cl_Mac_Create_ConsoleEvent+0x148>)
   98488:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   9848a:	4b35      	ldr	r3, [pc, #212]	; (98560 <Cl_Mac_Create_ConsoleEvent+0x148>)
   9848c:	881b      	ldrh	r3, [r3, #0]
   9848e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   98492:	d302      	bcc.n	9849a <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   98494:	4b32      	ldr	r3, [pc, #200]	; (98560 <Cl_Mac_Create_ConsoleEvent+0x148>)
   98496:	2200      	movs	r2, #0
   98498:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9849a:	4b2d      	ldr	r3, [pc, #180]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9849c:	789b      	ldrb	r3, [r3, #2]
   9849e:	2b17      	cmp	r3, #23
   984a0:	d103      	bne.n	984aa <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   984a2:	482b      	ldr	r0, [pc, #172]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   984a4:	4b2f      	ldr	r3, [pc, #188]	; (98564 <Cl_Mac_Create_ConsoleEvent+0x14c>)
   984a6:	4798      	blx	r3
   984a8:	e049      	b.n	9853e <Cl_Mac_Create_ConsoleEvent+0x126>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   984aa:	4b29      	ldr	r3, [pc, #164]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   984ac:	2201      	movs	r2, #1
   984ae:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   984b0:	4b26      	ldr	r3, [pc, #152]	; (9854c <Cl_Mac_Create_ConsoleEvent+0x134>)
   984b2:	2200      	movs	r2, #0
   984b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			if ( CL_OK == Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent))
   984b8:	4b25      	ldr	r3, [pc, #148]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   984ba:	789b      	ldrb	r3, [r3, #2]
   984bc:	1cba      	adds	r2, r7, #2
   984be:	4611      	mov	r1, r2
   984c0:	4618      	mov	r0, r3
   984c2:	4b29      	ldr	r3, [pc, #164]	; (98568 <Cl_Mac_Create_ConsoleEvent+0x150>)
   984c4:	4798      	blx	r3
   984c6:	4603      	mov	r3, r0
   984c8:	2b00      	cmp	r3, #0
   984ca:	d138      	bne.n	9853e <Cl_Mac_Create_ConsoleEvent+0x126>
			{
				
			
			Cl_MacEvent = MacEvent;
   984cc:	78ba      	ldrb	r2, [r7, #2]
   984ce:	4b27      	ldr	r3, [pc, #156]	; (9856c <Cl_Mac_Create_ConsoleEvent+0x154>)
   984d0:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   984d2:	4b27      	ldr	r3, [pc, #156]	; (98570 <Cl_Mac_Create_ConsoleEvent+0x158>)
   984d4:	2201      	movs	r2, #1
   984d6:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   984d8:	4b26      	ldr	r3, [pc, #152]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984da:	781b      	ldrb	r3, [r3, #0]
   984dc:	2b0a      	cmp	r3, #10
   984de:	d82e      	bhi.n	9853e <Cl_Mac_Create_ConsoleEvent+0x126>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   984e0:	4b24      	ldr	r3, [pc, #144]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984e2:	781b      	ldrb	r3, [r3, #0]
   984e4:	4619      	mov	r1, r3
   984e6:	78ba      	ldrb	r2, [r7, #2]
   984e8:	4b22      	ldr	r3, [pc, #136]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984ea:	440b      	add	r3, r1
   984ec:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   984ee:	4b21      	ldr	r3, [pc, #132]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984f0:	2201      	movs	r2, #1
   984f2:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   984f4:	4b1f      	ldr	r3, [pc, #124]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984f6:	781b      	ldrb	r3, [r3, #0]
   984f8:	3301      	adds	r3, #1
   984fa:	b2da      	uxtb	r2, r3
   984fc:	4b1d      	ldr	r3, [pc, #116]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   984fe:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   98500:	4b14      	ldr	r3, [pc, #80]	; (98554 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   98502:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   98504:	4b1b      	ldr	r3, [pc, #108]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   98506:	781b      	ldrb	r3, [r3, #0]
   98508:	3301      	adds	r3, #1
   9850a:	00db      	lsls	r3, r3, #3
   9850c:	4a19      	ldr	r2, [pc, #100]	; (98574 <Cl_Mac_Create_ConsoleEvent+0x15c>)
   9850e:	4413      	add	r3, r2
   98510:	3304      	adds	r3, #4
   98512:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   98514:	2300      	movs	r3, #0
   98516:	73fb      	strb	r3, [r7, #15]
   98518:	e00c      	b.n	98534 <Cl_Mac_Create_ConsoleEvent+0x11c>
				{
					*dataptr = *msgdataptr ;
   9851a:	687b      	ldr	r3, [r7, #4]
   9851c:	781a      	ldrb	r2, [r3, #0]
   9851e:	68bb      	ldr	r3, [r7, #8]
   98520:	701a      	strb	r2, [r3, #0]
					dataptr++;
   98522:	68bb      	ldr	r3, [r7, #8]
   98524:	3301      	adds	r3, #1
   98526:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   98528:	687b      	ldr	r3, [r7, #4]
   9852a:	3301      	adds	r3, #1
   9852c:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9852e:	7bfb      	ldrb	r3, [r7, #15]
   98530:	3301      	adds	r3, #1
   98532:	73fb      	strb	r3, [r7, #15]
   98534:	4b06      	ldr	r3, [pc, #24]	; (98550 <Cl_Mac_Create_ConsoleEvent+0x138>)
   98536:	78db      	ldrb	r3, [r3, #3]
   98538:	7bfa      	ldrb	r2, [r7, #15]
   9853a:	429a      	cmp	r2, r3
   9853c:	d3ed      	bcc.n	9851a <Cl_Mac_Create_ConsoleEvent+0x102>
			}
	#endif
			 		
	}
		
		return CL_OK;
   9853e:	2300      	movs	r3, #0
}
   98540:	4618      	mov	r0, r3
   98542:	3710      	adds	r7, #16
   98544:	46bd      	mov	sp, r7
   98546:	bd80      	pop	{r7, pc}
   98548:	20072754 	.word	0x20072754
   9854c:	20072d8c 	.word	0x20072d8c
   98550:	20072f2c 	.word	0x20072f2c
   98554:	20072d8e 	.word	0x20072d8e
   98558:	20072f30 	.word	0x20072f30
   9855c:	00098579 	.word	0x00098579
   98560:	2007274e 	.word	0x2007274e
   98564:	0008ec89 	.word	0x0008ec89
   98568:	00098725 	.word	0x00098725
   9856c:	2007212e 	.word	0x2007212e
   98570:	20072130 	.word	0x20072130
   98574:	20072f68 	.word	0x20072f68

00098578 <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   98578:	b580      	push	{r7, lr}
   9857a:	b082      	sub	sp, #8
   9857c:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   9857e:	2001      	movs	r0, #1
   98580:	4b19      	ldr	r3, [pc, #100]	; (985e8 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   98582:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   98584:	4b19      	ldr	r3, [pc, #100]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   98586:	22cc      	movs	r2, #204	; 0xcc
   98588:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   9858a:	4b18      	ldr	r3, [pc, #96]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9858c:	22dd      	movs	r2, #221	; 0xdd
   9858e:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   98590:	4b16      	ldr	r3, [pc, #88]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   98592:	2204      	movs	r2, #4
   98594:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   98596:	4b15      	ldr	r3, [pc, #84]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   98598:	2201      	movs	r2, #1
   9859a:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   9859c:	4b14      	ldr	r3, [pc, #80]	; (985f0 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9859e:	789a      	ldrb	r2, [r3, #2]
   985a0:	4b12      	ldr	r3, [pc, #72]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   985a2:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   985a4:	4b11      	ldr	r3, [pc, #68]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   985a6:	22ee      	movs	r2, #238	; 0xee
   985a8:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   985aa:	4b10      	ldr	r3, [pc, #64]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   985ac:	22bb      	movs	r2, #187	; 0xbb
   985ae:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   985b0:	2300      	movs	r3, #0
   985b2:	71fb      	strb	r3, [r7, #7]
   985b4:	e00f      	b.n	985d6 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   985b6:	4b0f      	ldr	r3, [pc, #60]	; (985f4 <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   985b8:	2201      	movs	r2, #1
   985ba:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   985bc:	79fb      	ldrb	r3, [r7, #7]
   985be:	4a0b      	ldr	r2, [pc, #44]	; (985ec <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   985c0:	5cd3      	ldrb	r3, [r2, r3]
   985c2:	4619      	mov	r1, r3
   985c4:	480c      	ldr	r0, [pc, #48]	; (985f8 <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   985c6:	4b0d      	ldr	r3, [pc, #52]	; (985fc <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   985c8:	4798      	blx	r3
   985ca:	4603      	mov	r3, r0
   985cc:	2b00      	cmp	r3, #0
   985ce:	d102      	bne.n	985d6 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   985d0:	79fb      	ldrb	r3, [r7, #7]
   985d2:	3301      	adds	r3, #1
   985d4:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   985d6:	79fb      	ldrb	r3, [r7, #7]
   985d8:	2b06      	cmp	r3, #6
   985da:	d9ec      	bls.n	985b6 <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   985dc:	2300      	movs	r3, #0
}
   985de:	4618      	mov	r0, r3
   985e0:	3708      	adds	r7, #8
   985e2:	46bd      	mov	sp, r7
   985e4:	bd80      	pop	{r7, pc}
   985e6:	bf00      	nop
   985e8:	00091b9d 	.word	0x00091b9d
   985ec:	20072e30 	.word	0x20072e30
   985f0:	20072f2c 	.word	0x20072f2c
   985f4:	20072751 	.word	0x20072751
   985f8:	400e0800 	.word	0x400e0800
   985fc:	00097bd1 	.word	0x00097bd1

00098600 <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   98600:	b580      	push	{r7, lr}
   98602:	b086      	sub	sp, #24
   98604:	af00      	add	r7, sp, #0
   98606:	4603      	mov	r3, r0
   98608:	6039      	str	r1, [r7, #0]
   9860a:	71fb      	strb	r3, [r7, #7]
   9860c:	4613      	mov	r3, r2
   9860e:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   98610:	2300      	movs	r3, #0
   98612:	75fb      	strb	r3, [r7, #23]
   98614:	2304      	movs	r3, #4
   98616:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   98618:	2300      	movs	r3, #0
   9861a:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   9861c:	2300      	movs	r3, #0
   9861e:	613b      	str	r3, [r7, #16]
   98620:	2300      	movs	r3, #0
   98622:	60fb      	str	r3, [r7, #12]
	//		cmd_backup.array_commands_index = 0;
		}
		
		
	}
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   98624:	79fb      	ldrb	r3, [r7, #7]
   98626:	2b36      	cmp	r3, #54	; 0x36
   98628:	d102      	bne.n	98630 <Cl_SendDatatoconsole+0x30>
	{
		syncdone = true;
   9862a:	4b38      	ldr	r3, [pc, #224]	; (9870c <Cl_SendDatatoconsole+0x10c>)
   9862c:	2201      	movs	r2, #1
   9862e:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   98630:	79bb      	ldrb	r3, [r7, #6]
   98632:	2b00      	cmp	r3, #0
   98634:	d004      	beq.n	98640 <Cl_SendDatatoconsole+0x40>
	{
		if(data != NULL)
   98636:	683b      	ldr	r3, [r7, #0]
   98638:	2b00      	cmp	r3, #0
   9863a:	d001      	beq.n	98640 <Cl_SendDatatoconsole+0x40>
		{
			dataptr = data;	
   9863c:	683b      	ldr	r3, [r7, #0]
   9863e:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   98640:	79bb      	ldrb	r3, [r7, #6]
   98642:	3306      	adds	r3, #6
   98644:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   98646:	4b32      	ldr	r3, [pc, #200]	; (98710 <Cl_SendDatatoconsole+0x110>)
   98648:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   9864a:	4b32      	ldr	r3, [pc, #200]	; (98714 <Cl_SendDatatoconsole+0x114>)
   9864c:	22cc      	movs	r2, #204	; 0xcc
   9864e:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   98650:	4b30      	ldr	r3, [pc, #192]	; (98714 <Cl_SendDatatoconsole+0x114>)
   98652:	22dd      	movs	r2, #221	; 0xdd
   98654:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   98656:	4a2f      	ldr	r2, [pc, #188]	; (98714 <Cl_SendDatatoconsole+0x114>)
   98658:	79fb      	ldrb	r3, [r7, #7]
   9865a:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9865c:	4a2d      	ldr	r2, [pc, #180]	; (98714 <Cl_SendDatatoconsole+0x114>)
   9865e:	79bb      	ldrb	r3, [r7, #6]
   98660:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   98662:	2300      	movs	r3, #0
   98664:	75fb      	strb	r3, [r7, #23]
   98666:	e00c      	b.n	98682 <Cl_SendDatatoconsole+0x82>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   98668:	7dbb      	ldrb	r3, [r7, #22]
   9866a:	7dfa      	ldrb	r2, [r7, #23]
   9866c:	6839      	ldr	r1, [r7, #0]
   9866e:	440a      	add	r2, r1
   98670:	7811      	ldrb	r1, [r2, #0]
   98672:	4a28      	ldr	r2, [pc, #160]	; (98714 <Cl_SendDatatoconsole+0x114>)
   98674:	54d1      	strb	r1, [r2, r3]
		temp++;
   98676:	7dbb      	ldrb	r3, [r7, #22]
   98678:	3301      	adds	r3, #1
   9867a:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9867c:	7dfb      	ldrb	r3, [r7, #23]
   9867e:	3301      	adds	r3, #1
   98680:	75fb      	strb	r3, [r7, #23]
   98682:	7dfa      	ldrb	r2, [r7, #23]
   98684:	79bb      	ldrb	r3, [r7, #6]
   98686:	429a      	cmp	r2, r3
   98688:	d3ee      	bcc.n	98668 <Cl_SendDatatoconsole+0x68>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9868a:	7dbb      	ldrb	r3, [r7, #22]
   9868c:	1c5a      	adds	r2, r3, #1
   9868e:	75ba      	strb	r2, [r7, #22]
   98690:	461a      	mov	r2, r3
   98692:	4b20      	ldr	r3, [pc, #128]	; (98714 <Cl_SendDatatoconsole+0x114>)
   98694:	21ee      	movs	r1, #238	; 0xee
   98696:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   98698:	7dbb      	ldrb	r3, [r7, #22]
   9869a:	1c5a      	adds	r2, r3, #1
   9869c:	75ba      	strb	r2, [r7, #22]
   9869e:	461a      	mov	r2, r3
   986a0:	4b1c      	ldr	r3, [pc, #112]	; (98714 <Cl_SendDatatoconsole+0x114>)
   986a2:	21bb      	movs	r1, #187	; 0xbb
   986a4:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   986a6:	4b19      	ldr	r3, [pc, #100]	; (9870c <Cl_SendDatatoconsole+0x10c>)
   986a8:	781b      	ldrb	r3, [r3, #0]
   986aa:	2b00      	cmp	r3, #0
   986ac:	d013      	beq.n	986d6 <Cl_SendDatatoconsole+0xd6>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   986ae:	4b1a      	ldr	r3, [pc, #104]	; (98718 <Cl_SendDatatoconsole+0x118>)
   986b0:	22aa      	movs	r2, #170	; 0xaa
   986b2:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   986b4:	2300      	movs	r3, #0
   986b6:	75fb      	strb	r3, [r7, #23]
   986b8:	e009      	b.n	986ce <Cl_SendDatatoconsole+0xce>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   986ba:	7dfb      	ldrb	r3, [r7, #23]
   986bc:	3301      	adds	r3, #1
   986be:	7dfa      	ldrb	r2, [r7, #23]
   986c0:	4914      	ldr	r1, [pc, #80]	; (98714 <Cl_SendDatatoconsole+0x114>)
   986c2:	5c89      	ldrb	r1, [r1, r2]
   986c4:	4a14      	ldr	r2, [pc, #80]	; (98718 <Cl_SendDatatoconsole+0x118>)
   986c6:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   986c8:	7dfb      	ldrb	r3, [r7, #23]
   986ca:	3301      	adds	r3, #1
   986cc:	75fb      	strb	r3, [r7, #23]
   986ce:	7dfa      	ldrb	r2, [r7, #23]
   986d0:	7d7b      	ldrb	r3, [r7, #21]
   986d2:	429a      	cmp	r2, r3
   986d4:	d3f1      	bcc.n	986ba <Cl_SendDatatoconsole+0xba>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   986d6:	2300      	movs	r3, #0
   986d8:	75fb      	strb	r3, [r7, #23]
   986da:	e00e      	b.n	986fa <Cl_SendDatatoconsole+0xfa>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   986dc:	4b0f      	ldr	r3, [pc, #60]	; (9871c <Cl_SendDatatoconsole+0x11c>)
   986de:	2201      	movs	r2, #1
   986e0:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   986e2:	7dfb      	ldrb	r3, [r7, #23]
   986e4:	4a0b      	ldr	r2, [pc, #44]	; (98714 <Cl_SendDatatoconsole+0x114>)
   986e6:	5cd3      	ldrb	r3, [r2, r3]
   986e8:	4618      	mov	r0, r3
   986ea:	4b0d      	ldr	r3, [pc, #52]	; (98720 <Cl_SendDatatoconsole+0x120>)
   986ec:	4798      	blx	r3
   986ee:	4603      	mov	r3, r0
   986f0:	2b00      	cmp	r3, #0
   986f2:	d102      	bne.n	986fa <Cl_SendDatatoconsole+0xfa>
	
		{
			tempcount++;
   986f4:	7dfb      	ldrb	r3, [r7, #23]
   986f6:	3301      	adds	r3, #1
   986f8:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   986fa:	7dfa      	ldrb	r2, [r7, #23]
   986fc:	7d7b      	ldrb	r3, [r7, #21]
   986fe:	429a      	cmp	r2, r3
   98700:	d3ec      	bcc.n	986dc <Cl_SendDatatoconsole+0xdc>
		
	}
	

//	printf("\n");
	return CL_OK;
   98702:	2300      	movs	r3, #0
}
   98704:	4618      	mov	r0, r3
   98706:	3718      	adds	r7, #24
   98708:	46bd      	mov	sp, r7
   9870a:	bd80      	pop	{r7, pc}
   9870c:	2007274c 	.word	0x2007274c
   98710:	20072e34 	.word	0x20072e34
   98714:	20072e30 	.word	0x20072e30
   98718:	2007301c 	.word	0x2007301c
   9871c:	20072751 	.word	0x20072751
   98720:	00096bb5 	.word	0x00096bb5

00098724 <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   98724:	b480      	push	{r7}
   98726:	b085      	sub	sp, #20
   98728:	af00      	add	r7, sp, #0
   9872a:	4603      	mov	r3, r0
   9872c:	6039      	str	r1, [r7, #0]
   9872e:	71fb      	strb	r3, [r7, #7]
Cl_ReturnCodeType CL_RETVAL = CL_OK;
   98730:	2300      	movs	r3, #0
   98732:	73fb      	strb	r3, [r7, #15]
	

	switch(command)
   98734:	79fb      	ldrb	r3, [r7, #7]
   98736:	3b03      	subs	r3, #3
   98738:	2b30      	cmp	r3, #48	; 0x30
   9873a:	f200 8111 	bhi.w	98960 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x23c>
   9873e:	a201      	add	r2, pc, #4	; (adr r2, 98744 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20>)
   98740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98744:	00098809 	.word	0x00098809
   98748:	00098819 	.word	0x00098819
   9874c:	00098821 	.word	0x00098821
   98750:	00098961 	.word	0x00098961
   98754:	000988e9 	.word	0x000988e9
   98758:	000988a9 	.word	0x000988a9
   9875c:	00098859 	.word	0x00098859
   98760:	00098861 	.word	0x00098861
   98764:	00098839 	.word	0x00098839
   98768:	00098841 	.word	0x00098841
   9876c:	00098849 	.word	0x00098849
   98770:	00098869 	.word	0x00098869
   98774:	00098879 	.word	0x00098879
   98778:	00098889 	.word	0x00098889
   9877c:	000988b9 	.word	0x000988b9
   98780:	000988c1 	.word	0x000988c1
   98784:	000988c9 	.word	0x000988c9
   98788:	000988d1 	.word	0x000988d1
   9878c:	00098811 	.word	0x00098811
   98790:	00098961 	.word	0x00098961
   98794:	00098961 	.word	0x00098961
   98798:	00098851 	.word	0x00098851
   9879c:	00098871 	.word	0x00098871
   987a0:	000988f1 	.word	0x000988f1
   987a4:	000988f9 	.word	0x000988f9
   987a8:	00098901 	.word	0x00098901
   987ac:	00098909 	.word	0x00098909
   987b0:	000988b1 	.word	0x000988b1
   987b4:	00098911 	.word	0x00098911
   987b8:	00098881 	.word	0x00098881
   987bc:	00098919 	.word	0x00098919
   987c0:	00098921 	.word	0x00098921
   987c4:	00098929 	.word	0x00098929
   987c8:	00098931 	.word	0x00098931
   987cc:	00098941 	.word	0x00098941
   987d0:	00098949 	.word	0x00098949
   987d4:	000988d9 	.word	0x000988d9
   987d8:	000988e1 	.word	0x000988e1
   987dc:	00098951 	.word	0x00098951
   987e0:	00098959 	.word	0x00098959
   987e4:	00098939 	.word	0x00098939
   987e8:	00098829 	.word	0x00098829
   987ec:	00098961 	.word	0x00098961
   987f0:	00098961 	.word	0x00098961
   987f4:	00098831 	.word	0x00098831
   987f8:	00098961 	.word	0x00098961
   987fc:	00098891 	.word	0x00098891
   98800:	00098899 	.word	0x00098899
   98804:	000988a1 	.word	0x000988a1
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   98808:	683b      	ldr	r3, [r7, #0]
   9880a:	2201      	movs	r2, #1
   9880c:	701a      	strb	r2, [r3, #0]
		break;
   9880e:	e0aa      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   98810:	683b      	ldr	r3, [r7, #0]
   98812:	2229      	movs	r2, #41	; 0x29
   98814:	701a      	strb	r2, [r3, #0]
		break;
   98816:	e0a6      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   98818:	683b      	ldr	r3, [r7, #0]
   9881a:	2202      	movs	r2, #2
   9881c:	701a      	strb	r2, [r3, #0]
		break;
   9881e:	e0a2      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   98820:	683b      	ldr	r3, [r7, #0]
   98822:	2207      	movs	r2, #7
   98824:	701a      	strb	r2, [r3, #0]
		break;
   98826:	e09e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   98828:	683b      	ldr	r3, [r7, #0]
   9882a:	223f      	movs	r2, #63	; 0x3f
   9882c:	701a      	strb	r2, [r3, #0]
		break;
   9882e:	e09a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   98830:	683b      	ldr	r3, [r7, #0]
   98832:	2240      	movs	r2, #64	; 0x40
   98834:	701a      	strb	r2, [r3, #0]
		break;
   98836:	e096      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   98838:	683b      	ldr	r3, [r7, #0]
   9883a:	220a      	movs	r2, #10
   9883c:	701a      	strb	r2, [r3, #0]
		break;
   9883e:	e092      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   98840:	683b      	ldr	r3, [r7, #0]
   98842:	220b      	movs	r2, #11
   98844:	701a      	strb	r2, [r3, #0]
		break;
   98846:	e08e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   98848:	683b      	ldr	r3, [r7, #0]
   9884a:	220c      	movs	r2, #12
   9884c:	701a      	strb	r2, [r3, #0]
		break;
   9884e:	e08a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   98850:	683b      	ldr	r3, [r7, #0]
   98852:	2211      	movs	r2, #17
   98854:	701a      	strb	r2, [r3, #0]
		break;
   98856:	e086      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   98858:	683b      	ldr	r3, [r7, #0]
   9885a:	220d      	movs	r2, #13
   9885c:	701a      	strb	r2, [r3, #0]
		break;
   9885e:	e082      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   98860:	683b      	ldr	r3, [r7, #0]
   98862:	220e      	movs	r2, #14
   98864:	701a      	strb	r2, [r3, #0]
		break;
   98866:	e07e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   98868:	683b      	ldr	r3, [r7, #0]
   9886a:	220f      	movs	r2, #15
   9886c:	701a      	strb	r2, [r3, #0]
		break;
   9886e:	e07a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   98870:	683b      	ldr	r3, [r7, #0]
   98872:	2210      	movs	r2, #16
   98874:	701a      	strb	r2, [r3, #0]
		break;
   98876:	e076      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   98878:	683b      	ldr	r3, [r7, #0]
   9887a:	2213      	movs	r2, #19
   9887c:	701a      	strb	r2, [r3, #0]
		break;
   9887e:	e072      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   98880:	683b      	ldr	r3, [r7, #0]
   98882:	2214      	movs	r2, #20
   98884:	701a      	strb	r2, [r3, #0]
		break;
   98886:	e06e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   98888:	683b      	ldr	r3, [r7, #0]
   9888a:	2215      	movs	r2, #21
   9888c:	701a      	strb	r2, [r3, #0]
		break;
   9888e:	e06a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   98890:	683b      	ldr	r3, [r7, #0]
   98892:	2226      	movs	r2, #38	; 0x26
   98894:	701a      	strb	r2, [r3, #0]
		break;
   98896:	e066      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   98898:	683b      	ldr	r3, [r7, #0]
   9889a:	2227      	movs	r2, #39	; 0x27
   9889c:	701a      	strb	r2, [r3, #0]
		break;
   9889e:	e062      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   988a0:	683b      	ldr	r3, [r7, #0]
   988a2:	2228      	movs	r2, #40	; 0x28
   988a4:	701a      	strb	r2, [r3, #0]
		break;
   988a6:	e05e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   988a8:	683b      	ldr	r3, [r7, #0]
   988aa:	2209      	movs	r2, #9
   988ac:	701a      	strb	r2, [r3, #0]
		break;
   988ae:	e05a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   988b0:	683b      	ldr	r3, [r7, #0]
   988b2:	2212      	movs	r2, #18
   988b4:	701a      	strb	r2, [r3, #0]
		break;
   988b6:	e056      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   988b8:	683b      	ldr	r3, [r7, #0]
   988ba:	2216      	movs	r2, #22
   988bc:	701a      	strb	r2, [r3, #0]
		break;
   988be:	e052      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   988c0:	683b      	ldr	r3, [r7, #0]
   988c2:	2217      	movs	r2, #23
   988c4:	701a      	strb	r2, [r3, #0]
		break;
   988c6:	e04e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   988c8:	683b      	ldr	r3, [r7, #0]
   988ca:	2218      	movs	r2, #24
   988cc:	701a      	strb	r2, [r3, #0]
		break;
   988ce:	e04a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   988d0:	683b      	ldr	r3, [r7, #0]
   988d2:	2219      	movs	r2, #25
   988d4:	701a      	strb	r2, [r3, #0]
		break;
   988d6:	e046      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   988d8:	683b      	ldr	r3, [r7, #0]
   988da:	221a      	movs	r2, #26
   988dc:	701a      	strb	r2, [r3, #0]
		break;
   988de:	e042      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   988e0:	683b      	ldr	r3, [r7, #0]
   988e2:	221b      	movs	r2, #27
   988e4:	701a      	strb	r2, [r3, #0]
		break;
   988e6:	e03e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   988e8:	683b      	ldr	r3, [r7, #0]
   988ea:	2208      	movs	r2, #8
   988ec:	701a      	strb	r2, [r3, #0]
		break;
   988ee:	e03a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   988f0:	683b      	ldr	r3, [r7, #0]
   988f2:	2203      	movs	r2, #3
   988f4:	701a      	strb	r2, [r3, #0]
		break;
   988f6:	e036      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   988f8:	683b      	ldr	r3, [r7, #0]
   988fa:	2204      	movs	r2, #4
   988fc:	701a      	strb	r2, [r3, #0]
		break;
   988fe:	e032      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   98900:	683b      	ldr	r3, [r7, #0]
   98902:	2205      	movs	r2, #5
   98904:	701a      	strb	r2, [r3, #0]
		break;
   98906:	e02e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   98908:	683b      	ldr	r3, [r7, #0]
   9890a:	2206      	movs	r2, #6
   9890c:	701a      	strb	r2, [r3, #0]
		break;
   9890e:	e02a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   98910:	683b      	ldr	r3, [r7, #0]
   98912:	221c      	movs	r2, #28
   98914:	701a      	strb	r2, [r3, #0]
		break;
   98916:	e026      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   98918:	683b      	ldr	r3, [r7, #0]
   9891a:	221d      	movs	r2, #29
   9891c:	701a      	strb	r2, [r3, #0]
		break;
   9891e:	e022      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   98920:	683b      	ldr	r3, [r7, #0]
   98922:	221e      	movs	r2, #30
   98924:	701a      	strb	r2, [r3, #0]
		break;
   98926:	e01e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   98928:	683b      	ldr	r3, [r7, #0]
   9892a:	221f      	movs	r2, #31
   9892c:	701a      	strb	r2, [r3, #0]
		break;
   9892e:	e01a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   98930:	683b      	ldr	r3, [r7, #0]
   98932:	2220      	movs	r2, #32
   98934:	701a      	strb	r2, [r3, #0]
		break;
   98936:	e016      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   98938:	683b      	ldr	r3, [r7, #0]
   9893a:	2221      	movs	r2, #33	; 0x21
   9893c:	701a      	strb	r2, [r3, #0]
		break;
   9893e:	e012      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   98940:	683b      	ldr	r3, [r7, #0]
   98942:	2222      	movs	r2, #34	; 0x22
   98944:	701a      	strb	r2, [r3, #0]
		break;
   98946:	e00e      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   98948:	683b      	ldr	r3, [r7, #0]
   9894a:	2223      	movs	r2, #35	; 0x23
   9894c:	701a      	strb	r2, [r3, #0]
		break;			
   9894e:	e00a      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   98950:	683b      	ldr	r3, [r7, #0]
   98952:	2224      	movs	r2, #36	; 0x24
   98954:	701a      	strb	r2, [r3, #0]
		break;
   98956:	e006      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   98958:	683b      	ldr	r3, [r7, #0]
   9895a:	2225      	movs	r2, #37	; 0x25
   9895c:	701a      	strb	r2, [r3, #0]
		break;
   9895e:	e002      	b.n	98966 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x242>
		default:
		CL_RETVAL= CL_ERROR;
   98960:	2304      	movs	r3, #4
   98962:	73fb      	strb	r3, [r7, #15]
		break;
   98964:	bf00      	nop
	}
	return CL_RETVAL;
   98966:	7bfb      	ldrb	r3, [r7, #15]
}
   98968:	4618      	mov	r0, r3
   9896a:	3714      	adds	r7, #20
   9896c:	46bd      	mov	sp, r7
   9896e:	bc80      	pop	{r7}
   98970:	4770      	bx	lr
   98972:	bf00      	nop

00098974 <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   98974:	b580      	push	{r7, lr}
   98976:	b082      	sub	sp, #8
   98978:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   9897a:	2304      	movs	r3, #4
   9897c:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   9897e:	2300      	movs	r3, #0
   98980:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   98982:	2300      	movs	r3, #0
   98984:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   98986:	e07f      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   98988:	79bb      	ldrb	r3, [r7, #6]
   9898a:	2b03      	cmp	r3, #3
   9898c:	d87b      	bhi.n	98a86 <Cl_Console_Console_Sync+0x112>
   9898e:	a201      	add	r2, pc, #4	; (adr r2, 98994 <Cl_Console_Console_Sync+0x20>)
   98990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98994:	000989a5 	.word	0x000989a5
   98998:	000989df 	.word	0x000989df
   9899c:	000989fb 	.word	0x000989fb
   989a0:	00098a7b 	.word	0x00098a7b
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   989a4:	4b3d      	ldr	r3, [pc, #244]	; (98a9c <Cl_Console_Console_Sync+0x128>)
   989a6:	4798      	blx	r3
   989a8:	4603      	mov	r3, r0
   989aa:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   989ac:	79fb      	ldrb	r3, [r7, #7]
   989ae:	2b00      	cmp	r3, #0
   989b0:	d112      	bne.n	989d8 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   989b2:	4b3b      	ldr	r3, [pc, #236]	; (98aa0 <Cl_Console_Console_Sync+0x12c>)
   989b4:	781a      	ldrb	r2, [r3, #0]
   989b6:	4b3b      	ldr	r3, [pc, #236]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   989b8:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   989ba:	4b3a      	ldr	r3, [pc, #232]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   989bc:	789b      	ldrb	r3, [r3, #2]
   989be:	2b03      	cmp	r3, #3
   989c0:	d10a      	bne.n	989d8 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   989c2:	4b39      	ldr	r3, [pc, #228]	; (98aa8 <Cl_Console_Console_Sync+0x134>)
   989c4:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   989c6:	4b37      	ldr	r3, [pc, #220]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   989c8:	2201      	movs	r2, #1
   989ca:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   989cc:	4b34      	ldr	r3, [pc, #208]	; (98aa0 <Cl_Console_Console_Sync+0x12c>)
   989ce:	2200      	movs	r2, #0
   989d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   989d4:	2301      	movs	r3, #1
   989d6:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   989d8:	2301      	movs	r3, #1
   989da:	71fb      	strb	r3, [r7, #7]
								
			break;
   989dc:	e054      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   989de:	200a      	movs	r0, #10
   989e0:	4b32      	ldr	r3, [pc, #200]	; (98aac <Cl_Console_Console_Sync+0x138>)
   989e2:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   989e4:	1d7b      	adds	r3, r7, #5
   989e6:	2200      	movs	r2, #0
   989e8:	4619      	mov	r1, r3
   989ea:	2003      	movs	r0, #3
   989ec:	4b30      	ldr	r3, [pc, #192]	; (98ab0 <Cl_Console_Console_Sync+0x13c>)
   989ee:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   989f0:	2302      	movs	r3, #2
   989f2:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   989f4:	2301      	movs	r3, #1
   989f6:	71fb      	strb	r3, [r7, #7]
				break;
   989f8:	e046      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   989fa:	4b28      	ldr	r3, [pc, #160]	; (98a9c <Cl_Console_Console_Sync+0x128>)
   989fc:	4798      	blx	r3
   989fe:	4603      	mov	r3, r0
   98a00:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   98a02:	79fb      	ldrb	r3, [r7, #7]
   98a04:	2b00      	cmp	r3, #0
   98a06:	d13f      	bne.n	98a88 <Cl_Console_Console_Sync+0x114>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   98a08:	4b25      	ldr	r3, [pc, #148]	; (98aa0 <Cl_Console_Console_Sync+0x12c>)
   98a0a:	781a      	ldrb	r2, [r3, #0]
   98a0c:	4b25      	ldr	r3, [pc, #148]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   98a0e:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   98a10:	4b23      	ldr	r3, [pc, #140]	; (98aa0 <Cl_Console_Console_Sync+0x12c>)
   98a12:	785a      	ldrb	r2, [r3, #1]
   98a14:	4b23      	ldr	r3, [pc, #140]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   98a16:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   98a18:	4b21      	ldr	r3, [pc, #132]	; (98aa0 <Cl_Console_Console_Sync+0x12c>)
   98a1a:	789a      	ldrb	r2, [r3, #2]
   98a1c:	4b21      	ldr	r3, [pc, #132]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   98a1e:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   98a20:	4b20      	ldr	r3, [pc, #128]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   98a22:	789b      	ldrb	r3, [r3, #2]
   98a24:	2b04      	cmp	r3, #4
   98a26:	d125      	bne.n	98a74 <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   98a28:	4b1e      	ldr	r3, [pc, #120]	; (98aa4 <Cl_Console_Console_Sync+0x130>)
   98a2a:	791b      	ldrb	r3, [r3, #4]
   98a2c:	2b03      	cmp	r3, #3
   98a2e:	d12b      	bne.n	98a88 <Cl_Console_Console_Sync+0x114>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   98a30:	2303      	movs	r3, #3
   98a32:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   98a34:	4b1f      	ldr	r3, [pc, #124]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a36:	781b      	ldrb	r3, [r3, #0]
   98a38:	2b0a      	cmp	r3, #10
   98a3a:	d80f      	bhi.n	98a5c <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   98a3c:	4b1d      	ldr	r3, [pc, #116]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a3e:	781b      	ldrb	r3, [r3, #0]
   98a40:	461a      	mov	r2, r3
   98a42:	4b1c      	ldr	r3, [pc, #112]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a44:	4413      	add	r3, r2
   98a46:	222a      	movs	r2, #42	; 0x2a
   98a48:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   98a4a:	4b1a      	ldr	r3, [pc, #104]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a4c:	2201      	movs	r2, #1
   98a4e:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   98a50:	4b18      	ldr	r3, [pc, #96]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a52:	781b      	ldrb	r3, [r3, #0]
   98a54:	3301      	adds	r3, #1
   98a56:	b2da      	uxtb	r2, r3
   98a58:	4b16      	ldr	r3, [pc, #88]	; (98ab4 <Cl_Console_Console_Sync+0x140>)
   98a5a:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   98a5c:	4b16      	ldr	r3, [pc, #88]	; (98ab8 <Cl_Console_Console_Sync+0x144>)
   98a5e:	2201      	movs	r2, #1
   98a60:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   98a62:	4b16      	ldr	r3, [pc, #88]	; (98abc <Cl_Console_Console_Sync+0x148>)
   98a64:	2202      	movs	r2, #2
   98a66:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   98a68:	2300      	movs	r3, #0
   98a6a:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   98a6c:	4b14      	ldr	r3, [pc, #80]	; (98ac0 <Cl_Console_Console_Sync+0x14c>)
   98a6e:	2200      	movs	r2, #0
   98a70:	701a      	strb	r2, [r3, #0]
   98a72:	e009      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   98a74:	2301      	movs	r3, #1
   98a76:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   98a78:	e006      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   98a7a:	4b10      	ldr	r3, [pc, #64]	; (98abc <Cl_Console_Console_Sync+0x148>)
   98a7c:	2202      	movs	r2, #2
   98a7e:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   98a80:	2300      	movs	r3, #0
   98a82:	71fb      	strb	r3, [r7, #7]
			break;
   98a84:	e000      	b.n	98a88 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   98a86:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   98a88:	4b0c      	ldr	r3, [pc, #48]	; (98abc <Cl_Console_Console_Sync+0x148>)
   98a8a:	781b      	ldrb	r3, [r3, #0]
   98a8c:	2b01      	cmp	r3, #1
   98a8e:	f43f af7b 	beq.w	98988 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   98a92:	79fb      	ldrb	r3, [r7, #7]
 }
   98a94:	4618      	mov	r0, r3
   98a96:	3708      	adds	r7, #8
   98a98:	46bd      	mov	sp, r7
   98a9a:	bd80      	pop	{r7, pc}
   98a9c:	00098add 	.word	0x00098add
   98aa0:	20072d8c 	.word	0x20072d8c
   98aa4:	20072f2c 	.word	0x20072f2c
   98aa8:	00098579 	.word	0x00098579
   98aac:	00091b9d 	.word	0x00091b9d
   98ab0:	00098601 	.word	0x00098601
   98ab4:	20072f68 	.word	0x20072f68
   98ab8:	2007274c 	.word	0x2007274c
   98abc:	20070a2c 	.word	0x20070a2c
   98ac0:	20072750 	.word	0x20072750

00098ac4 <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   98ac4:	b480      	push	{r7}
   98ac6:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   98ac8:	4b03      	ldr	r3, [pc, #12]	; (98ad8 <Cl_Console_init+0x14>)
   98aca:	2201      	movs	r2, #1
   98acc:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   98ace:	2300      	movs	r3, #0
 }
   98ad0:	4618      	mov	r0, r3
   98ad2:	46bd      	mov	sp, r7
   98ad4:	bc80      	pop	{r7}
   98ad6:	4770      	bx	lr
   98ad8:	20070a2c 	.word	0x20070a2c

00098adc <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   98adc:	b580      	push	{r7, lr}
   98ade:	b082      	sub	sp, #8
   98ae0:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   98ae2:	2301      	movs	r3, #1
   98ae4:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   98ae6:	4b0b      	ldr	r3, [pc, #44]	; (98b14 <Cl_Console_SyncGetMessage+0x38>)
   98ae8:	4798      	blx	r3
   98aea:	4603      	mov	r3, r0
   98aec:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   98aee:	79fb      	ldrb	r3, [r7, #7]
   98af0:	2b00      	cmp	r3, #0
   98af2:	d10a      	bne.n	98b0a <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   98af4:	4b08      	ldr	r3, [pc, #32]	; (98b18 <Cl_Console_SyncGetMessage+0x3c>)
   98af6:	4798      	blx	r3
   98af8:	4603      	mov	r3, r0
   98afa:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   98afc:	79fb      	ldrb	r3, [r7, #7]
   98afe:	2b00      	cmp	r3, #0
   98b00:	d103      	bne.n	98b0a <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   98b02:	4b06      	ldr	r3, [pc, #24]	; (98b1c <Cl_Console_SyncGetMessage+0x40>)
   98b04:	4798      	blx	r3
   98b06:	4603      	mov	r3, r0
   98b08:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   98b0a:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   98b0c:	4618      	mov	r0, r3
   98b0e:	3708      	adds	r7, #8
   98b10:	46bd      	mov	sp, r7
   98b12:	bd80      	pop	{r7, pc}
   98b14:	00098251 	.word	0x00098251
   98b18:	000982b1 	.word	0x000982b1
   98b1c:	00098291 	.word	0x00098291

00098b20 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   98b20:	b480      	push	{r7}
   98b22:	b083      	sub	sp, #12
   98b24:	af00      	add	r7, sp, #0
   98b26:	4603      	mov	r3, r0
   98b28:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   98b2a:	4b61      	ldr	r3, [pc, #388]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b2c:	7f1b      	ldrb	r3, [r3, #28]
   98b2e:	2b00      	cmp	r3, #0
   98b30:	d009      	beq.n	98b46 <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   98b32:	4b60      	ldr	r3, [pc, #384]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98b34:	7f1b      	ldrb	r3, [r3, #28]
   98b36:	2b00      	cmp	r3, #0
   98b38:	d005      	beq.n	98b46 <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   98b3a:	4b5d      	ldr	r3, [pc, #372]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b3c:	2201      	movs	r2, #1
   98b3e:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   98b40:	4b5c      	ldr	r3, [pc, #368]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98b42:	2200      	movs	r2, #0
   98b44:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   98b46:	4b5a      	ldr	r3, [pc, #360]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b48:	7e9b      	ldrb	r3, [r3, #26]
   98b4a:	2b00      	cmp	r3, #0
   98b4c:	d04e      	beq.n	98bec <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   98b4e:	4b58      	ldr	r3, [pc, #352]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b50:	7edb      	ldrb	r3, [r3, #27]
   98b52:	f083 0301 	eor.w	r3, r3, #1
   98b56:	b2db      	uxtb	r3, r3
   98b58:	2b00      	cmp	r3, #0
   98b5a:	d00a      	beq.n	98b72 <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   98b5c:	4b56      	ldr	r3, [pc, #344]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98b5e:	781b      	ldrb	r3, [r3, #0]
   98b60:	2bcc      	cmp	r3, #204	; 0xcc
   98b62:	d12e      	bne.n	98bc2 <cl_console_receivedbyte+0xa2>
   98b64:	79fb      	ldrb	r3, [r7, #7]
   98b66:	2bdd      	cmp	r3, #221	; 0xdd
   98b68:	d12b      	bne.n	98bc2 <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   98b6a:	4b51      	ldr	r3, [pc, #324]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b6c:	2201      	movs	r2, #1
   98b6e:	76da      	strb	r2, [r3, #27]
   98b70:	e027      	b.n	98bc2 <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   98b72:	4b4f      	ldr	r3, [pc, #316]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b74:	7d1b      	ldrb	r3, [r3, #20]
   98b76:	4619      	mov	r1, r3
   98b78:	4a4d      	ldr	r2, [pc, #308]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b7a:	79fb      	ldrb	r3, [r7, #7]
   98b7c:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   98b7e:	4b4c      	ldr	r3, [pc, #304]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b80:	2201      	movs	r2, #1
   98b82:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   98b84:	4b4a      	ldr	r3, [pc, #296]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b86:	2200      	movs	r2, #0
   98b88:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   98b8a:	4b4b      	ldr	r3, [pc, #300]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98b8c:	781b      	ldrb	r3, [r3, #0]
   98b8e:	2bee      	cmp	r3, #238	; 0xee
   98b90:	d111      	bne.n	98bb6 <cl_console_receivedbyte+0x96>
   98b92:	79fb      	ldrb	r3, [r7, #7]
   98b94:	2bbb      	cmp	r3, #187	; 0xbb
   98b96:	d10e      	bne.n	98bb6 <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   98b98:	4b45      	ldr	r3, [pc, #276]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98b9a:	2201      	movs	r2, #1
   98b9c:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   98b9e:	4b44      	ldr	r3, [pc, #272]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98ba0:	2200      	movs	r2, #0
   98ba2:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   98ba4:	4b42      	ldr	r3, [pc, #264]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98ba6:	2200      	movs	r2, #0
   98ba8:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   98baa:	4b41      	ldr	r3, [pc, #260]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bac:	2200      	movs	r2, #0
   98bae:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   98bb0:	4b40      	ldr	r3, [pc, #256]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98bb2:	2201      	movs	r2, #1
   98bb4:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   98bb6:	4b3e      	ldr	r3, [pc, #248]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bb8:	7d1b      	ldrb	r3, [r3, #20]
   98bba:	3301      	adds	r3, #1
   98bbc:	b2da      	uxtb	r2, r3
   98bbe:	4b3c      	ldr	r3, [pc, #240]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bc0:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   98bc2:	4b3b      	ldr	r3, [pc, #236]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bc4:	7d1b      	ldrb	r3, [r3, #20]
   98bc6:	2b13      	cmp	r3, #19
   98bc8:	d90b      	bls.n	98be2 <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   98bca:	4b39      	ldr	r3, [pc, #228]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bcc:	2201      	movs	r2, #1
   98bce:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   98bd0:	4b37      	ldr	r3, [pc, #220]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bd2:	2200      	movs	r2, #0
   98bd4:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   98bd6:	4b36      	ldr	r3, [pc, #216]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bd8:	2200      	movs	r2, #0
   98bda:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   98bdc:	4b34      	ldr	r3, [pc, #208]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bde:	2201      	movs	r2, #1
   98be0:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   98be2:	4a35      	ldr	r2, [pc, #212]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98be4:	79fb      	ldrb	r3, [r7, #7]
   98be6:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   98be8:	2302      	movs	r3, #2
   98bea:	e05b      	b.n	98ca4 <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   98bec:	4b31      	ldr	r3, [pc, #196]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98bee:	7e9b      	ldrb	r3, [r3, #26]
   98bf0:	2b00      	cmp	r3, #0
   98bf2:	d056      	beq.n	98ca2 <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   98bf4:	4b2e      	ldr	r3, [pc, #184]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98bf6:	7f5b      	ldrb	r3, [r3, #29]
   98bf8:	2b00      	cmp	r3, #0
   98bfa:	d002      	beq.n	98c02 <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   98bfc:	4b2d      	ldr	r3, [pc, #180]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98bfe:	2201      	movs	r2, #1
   98c00:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   98c02:	4b2c      	ldr	r3, [pc, #176]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c04:	7edb      	ldrb	r3, [r3, #27]
   98c06:	f083 0301 	eor.w	r3, r3, #1
   98c0a:	b2db      	uxtb	r3, r3
   98c0c:	2b00      	cmp	r3, #0
   98c0e:	d00d      	beq.n	98c2c <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   98c10:	4b29      	ldr	r3, [pc, #164]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98c12:	781b      	ldrb	r3, [r3, #0]
   98c14:	2bcc      	cmp	r3, #204	; 0xcc
   98c16:	d12e      	bne.n	98c76 <cl_console_receivedbyte+0x156>
   98c18:	79fb      	ldrb	r3, [r7, #7]
   98c1a:	2bdd      	cmp	r3, #221	; 0xdd
   98c1c:	d12b      	bne.n	98c76 <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   98c1e:	4b25      	ldr	r3, [pc, #148]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c20:	2201      	movs	r2, #1
   98c22:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   98c24:	4b23      	ldr	r3, [pc, #140]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c26:	2200      	movs	r2, #0
   98c28:	751a      	strb	r2, [r3, #20]
   98c2a:	e024      	b.n	98c76 <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   98c2c:	4b21      	ldr	r3, [pc, #132]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c2e:	7d1b      	ldrb	r3, [r3, #20]
   98c30:	4619      	mov	r1, r3
   98c32:	4a20      	ldr	r2, [pc, #128]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c34:	79fb      	ldrb	r3, [r7, #7]
   98c36:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   98c38:	4b1e      	ldr	r3, [pc, #120]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c3a:	2201      	movs	r2, #1
   98c3c:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   98c3e:	4b1d      	ldr	r3, [pc, #116]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c40:	2200      	movs	r2, #0
   98c42:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   98c44:	4b1c      	ldr	r3, [pc, #112]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98c46:	781b      	ldrb	r3, [r3, #0]
   98c48:	2bee      	cmp	r3, #238	; 0xee
   98c4a:	d10e      	bne.n	98c6a <cl_console_receivedbyte+0x14a>
   98c4c:	79fb      	ldrb	r3, [r7, #7]
   98c4e:	2bbb      	cmp	r3, #187	; 0xbb
   98c50:	d10b      	bne.n	98c6a <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   98c52:	4b18      	ldr	r3, [pc, #96]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c54:	2201      	movs	r2, #1
   98c56:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   98c58:	4b16      	ldr	r3, [pc, #88]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c5a:	2200      	movs	r2, #0
   98c5c:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   98c5e:	4b14      	ldr	r3, [pc, #80]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98c60:	2201      	movs	r2, #1
   98c62:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   98c64:	4b13      	ldr	r3, [pc, #76]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c66:	2200      	movs	r2, #0
   98c68:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   98c6a:	4b12      	ldr	r3, [pc, #72]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c6c:	7d1b      	ldrb	r3, [r3, #20]
   98c6e:	3301      	adds	r3, #1
   98c70:	b2da      	uxtb	r2, r3
   98c72:	4b10      	ldr	r3, [pc, #64]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c74:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   98c76:	4b0f      	ldr	r3, [pc, #60]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c78:	7d1b      	ldrb	r3, [r3, #20]
   98c7a:	2b14      	cmp	r3, #20
   98c7c:	d90b      	bls.n	98c96 <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   98c7e:	4b0d      	ldr	r3, [pc, #52]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c80:	2201      	movs	r2, #1
   98c82:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   98c84:	4b0b      	ldr	r3, [pc, #44]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c86:	2200      	movs	r2, #0
   98c88:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   98c8a:	4b0a      	ldr	r3, [pc, #40]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c8c:	2201      	movs	r2, #1
   98c8e:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   98c90:	4b07      	ldr	r3, [pc, #28]	; (98cb0 <cl_console_receivedbyte+0x190>)
   98c92:	2200      	movs	r2, #0
   98c94:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   98c96:	4b07      	ldr	r3, [pc, #28]	; (98cb4 <cl_console_receivedbyte+0x194>)
   98c98:	7f5b      	ldrb	r3, [r3, #29]
   98c9a:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   98c9c:	4a06      	ldr	r2, [pc, #24]	; (98cb8 <cl_console_receivedbyte+0x198>)
   98c9e:	79fb      	ldrb	r3, [r7, #7]
   98ca0:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   98ca2:	2302      	movs	r3, #2
}
   98ca4:	4618      	mov	r0, r3
   98ca6:	370c      	adds	r7, #12
   98ca8:	46bd      	mov	sp, r7
   98caa:	bc80      	pop	{r7}
   98cac:	4770      	bx	lr
   98cae:	bf00      	nop
   98cb0:	20072f48 	.word	0x20072f48
   98cb4:	20072e10 	.word	0x20072e10
   98cb8:	20072758 	.word	0x20072758

00098cbc <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   98cbc:	b480      	push	{r7}
   98cbe:	b08b      	sub	sp, #44	; 0x2c
   98cc0:	af00      	add	r7, sp, #0
   98cc2:	6078      	str	r0, [r7, #4]
   98cc4:	687b      	ldr	r3, [r7, #4]
   98cc6:	627b      	str	r3, [r7, #36]	; 0x24
   98cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   98cca:	623b      	str	r3, [r7, #32]
   98ccc:	6a3b      	ldr	r3, [r7, #32]
   98cce:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   98cd0:	69fb      	ldr	r3, [r7, #28]
   98cd2:	095b      	lsrs	r3, r3, #5
   98cd4:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   98cd6:	69bb      	ldr	r3, [r7, #24]
   98cd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   98cdc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   98ce0:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   98ce2:	617b      	str	r3, [r7, #20]
   98ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   98ce6:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   98ce8:	693b      	ldr	r3, [r7, #16]
   98cea:	f003 031f 	and.w	r3, r3, #31
   98cee:	2201      	movs	r2, #1
   98cf0:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   98cf4:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   98cf6:	697b      	ldr	r3, [r7, #20]
   98cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   98cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   98cfc:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   98cfe:	68bb      	ldr	r3, [r7, #8]
   98d00:	f003 031f 	and.w	r3, r3, #31
   98d04:	2101      	movs	r1, #1
   98d06:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   98d0a:	4013      	ands	r3, r2
   98d0c:	2b00      	cmp	r3, #0
   98d0e:	d003      	beq.n	98d18 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   98d10:	697b      	ldr	r3, [r7, #20]
   98d12:	68fa      	ldr	r2, [r7, #12]
   98d14:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
   98d16:	e002      	b.n	98d1e <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   98d18:	697b      	ldr	r3, [r7, #20]
   98d1a:	68fa      	ldr	r2, [r7, #12]
   98d1c:	631a      	str	r2, [r3, #48]	; 0x30
   98d1e:	bf00      	nop
   98d20:	372c      	adds	r7, #44	; 0x2c
   98d22:	46bd      	mov	sp, r7
   98d24:	bc80      	pop	{r7}
   98d26:	4770      	bx	lr

00098d28 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   98d28:	b580      	push	{r7, lr}
   98d2a:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   98d2c:	4b04      	ldr	r3, [pc, #16]	; (98d40 <TC1_Handler+0x18>)
   98d2e:	781b      	ldrb	r3, [r3, #0]
   98d30:	b2db      	uxtb	r3, r3
   98d32:	2b00      	cmp	r3, #0
   98d34:	d002      	beq.n	98d3c <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   98d36:	203b      	movs	r0, #59	; 0x3b
   98d38:	4b02      	ldr	r3, [pc, #8]	; (98d44 <TC1_Handler+0x1c>)
   98d3a:	4798      	blx	r3
		}
		#endif
}
   98d3c:	bf00      	nop
   98d3e:	bd80      	pop	{r7, pc}
   98d40:	20070a2d 	.word	0x20070a2d
   98d44:	00098cbd 	.word	0x00098cbd

00098d48 <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   98d48:	b480      	push	{r7}
   98d4a:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   98d4c:	2300      	movs	r3, #0
 }
   98d4e:	4618      	mov	r0, r3
   98d50:	46bd      	mov	sp, r7
   98d52:	bc80      	pop	{r7}
   98d54:	4770      	bx	lr
   98d56:	bf00      	nop

00098d58 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   98d58:	b590      	push	{r4, r7, lr}
   98d5a:	b08d      	sub	sp, #52	; 0x34
   98d5c:	af02      	add	r7, sp, #8
   98d5e:	4603      	mov	r3, r0
   98d60:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   98d62:	2300      	movs	r3, #0
   98d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   98d68:	2300      	movs	r3, #0
   98d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   98d6e:	234a      	movs	r3, #74	; 0x4a
   98d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   98d74:	2300      	movs	r3, #0
   98d76:	61fb      	str	r3, [r7, #28]
		Cl_Uint8Type data = 0;
   98d78:	2300      	movs	r3, #0
   98d7a:	76fb      	strb	r3, [r7, #27]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   98d7c:	2300      	movs	r3, #0
   98d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   98d82:	2300      	movs	r3, #0
   98d84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   98d88:	2300      	movs	r3, #0
   98d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   98d8e:	2300      	movs	r3, #0
   98d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   98d94:	f107 0221 	add.w	r2, r7, #33	; 0x21
   98d98:	79fb      	ldrb	r3, [r7, #7]
   98d9a:	4611      	mov	r1, r2
   98d9c:	4618      	mov	r0, r3
   98d9e:	4bad      	ldr	r3, [pc, #692]	; (99054 <Cl_disinf_controller+0x2fc>)
   98da0:	4798      	blx	r3
   98da2:	4603      	mov	r3, r0
   98da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   98da8:	4bab      	ldr	r3, [pc, #684]	; (99058 <Cl_disinf_controller+0x300>)
   98daa:	781b      	ldrb	r3, [r3, #0]
   98dac:	2b11      	cmp	r3, #17
   98dae:	f200 86db 	bhi.w	99b68 <Cl_disinf_controller+0xe10>
   98db2:	a201      	add	r2, pc, #4	; (adr r2, 98db8 <Cl_disinf_controller+0x60>)
   98db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98db8:	00098e01 	.word	0x00098e01
   98dbc:	00099b69 	.word	0x00099b69
   98dc0:	00099b69 	.word	0x00099b69
   98dc4:	00098ef9 	.word	0x00098ef9
   98dc8:	00098f85 	.word	0x00098f85
   98dcc:	00099197 	.word	0x00099197
   98dd0:	00099257 	.word	0x00099257
   98dd4:	00099431 	.word	0x00099431
   98dd8:	00099621 	.word	0x00099621
   98ddc:	00099801 	.word	0x00099801
   98de0:	00099841 	.word	0x00099841
   98de4:	00099b69 	.word	0x00099b69
   98de8:	0009991b 	.word	0x0009991b
   98dec:	00099b69 	.word	0x00099b69
   98df0:	00099b69 	.word	0x00099b69
   98df4:	000998a1 	.word	0x000998a1
   98df8:	00099005 	.word	0x00099005
   98dfc:	000994ef 	.word	0x000994ef
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   98e00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   98e04:	2b01      	cmp	r3, #1
   98e06:	d044      	beq.n	98e92 <Cl_disinf_controller+0x13a>
   98e08:	2b14      	cmp	r3, #20
   98e0a:	d000      	beq.n	98e0e <Cl_disinf_controller+0xb6>
				Cl_Disinf_UpdateTimeInfo();
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   98e0c:	e072      	b.n	98ef4 <Cl_disinf_controller+0x19c>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   98e0e:	4b93      	ldr	r3, [pc, #588]	; (9905c <Cl_disinf_controller+0x304>)
   98e10:	7e1b      	ldrb	r3, [r3, #24]
   98e12:	2b00      	cmp	r3, #0
   98e14:	d06d      	beq.n	98ef2 <Cl_disinf_controller+0x19a>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   98e16:	4b91      	ldr	r3, [pc, #580]	; (9905c <Cl_disinf_controller+0x304>)
   98e18:	791b      	ldrb	r3, [r3, #4]
   98e1a:	2b02      	cmp	r3, #2
   98e1c:	d01d      	beq.n	98e5a <Cl_disinf_controller+0x102>
   98e1e:	2b21      	cmp	r3, #33	; 0x21
   98e20:	d000      	beq.n	98e24 <Cl_disinf_controller+0xcc>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   98e22:	e034      	b.n	98e8e <Cl_disinf_controller+0x136>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98e24:	2316      	movs	r3, #22
   98e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   98e2a:	2323      	movs	r3, #35	; 0x23
   98e2c:	773b      	strb	r3, [r7, #28]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   98e2e:	f107 031c 	add.w	r3, r7, #28
   98e32:	3301      	adds	r3, #1
   98e34:	4619      	mov	r1, r3
   98e36:	2028      	movs	r0, #40	; 0x28
   98e38:	4b89      	ldr	r3, [pc, #548]	; (99060 <Cl_disinf_controller+0x308>)
   98e3a:	4798      	blx	r3
   98e3c:	4603      	mov	r3, r0
   98e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98e42:	f107 011c 	add.w	r1, r7, #28
   98e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98e4a:	2202      	movs	r2, #2
   98e4c:	4618      	mov	r0, r3
   98e4e:	4b85      	ldr	r3, [pc, #532]	; (99064 <Cl_disinf_controller+0x30c>)
   98e50:	4798      	blx	r3
   98e52:	4603      	mov	r3, r0
   98e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   98e58:	e01a      	b.n	98e90 <Cl_disinf_controller+0x138>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98e5a:	2316      	movs	r3, #22
   98e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   98e60:	2302      	movs	r3, #2
   98e62:	773b      	strb	r3, [r7, #28]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   98e64:	f107 031c 	add.w	r3, r7, #28
   98e68:	3301      	adds	r3, #1
   98e6a:	4619      	mov	r1, r3
   98e6c:	2002      	movs	r0, #2
   98e6e:	4b7c      	ldr	r3, [pc, #496]	; (99060 <Cl_disinf_controller+0x308>)
   98e70:	4798      	blx	r3
   98e72:	4603      	mov	r3, r0
   98e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98e78:	f107 011c 	add.w	r1, r7, #28
   98e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98e80:	2202      	movs	r2, #2
   98e82:	4618      	mov	r0, r3
   98e84:	4b77      	ldr	r3, [pc, #476]	; (99064 <Cl_disinf_controller+0x30c>)
   98e86:	4798      	blx	r3
   98e88:	4603      	mov	r3, r0
   98e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   98e8e:	bf00      	nop
					}
				}
				break;
   98e90:	e02f      	b.n	98ef2 <Cl_disinf_controller+0x19a>
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   98e92:	2044      	movs	r0, #68	; 0x44
   98e94:	4b74      	ldr	r3, [pc, #464]	; (99068 <Cl_disinf_controller+0x310>)
   98e96:	4798      	blx	r3
   98e98:	4603      	mov	r3, r0
   98e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   98e9e:	4b6f      	ldr	r3, [pc, #444]	; (9905c <Cl_disinf_controller+0x304>)
   98ea0:	7e1b      	ldrb	r3, [r3, #24]
   98ea2:	2b00      	cmp	r3, #0
   98ea4:	d00f      	beq.n	98ec6 <Cl_disinf_controller+0x16e>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   98ea6:	4b6d      	ldr	r3, [pc, #436]	; (9905c <Cl_disinf_controller+0x304>)
   98ea8:	791b      	ldrb	r3, [r3, #4]
   98eaa:	753b      	strb	r3, [r7, #20]
					if (cl_temp.bytearray[0] == 4)
   98eac:	7d3b      	ldrb	r3, [r7, #20]
   98eae:	2b04      	cmp	r3, #4
   98eb0:	d103      	bne.n	98eba <Cl_disinf_controller+0x162>
					{
						flag_hotcitric = 1;
   98eb2:	4b6e      	ldr	r3, [pc, #440]	; (9906c <Cl_disinf_controller+0x314>)
   98eb4:	2201      	movs	r2, #1
   98eb6:	701a      	strb	r2, [r3, #0]
   98eb8:	e005      	b.n	98ec6 <Cl_disinf_controller+0x16e>
					}
					else if (cl_temp.bytearray[0] == 3)
   98eba:	7d3b      	ldrb	r3, [r7, #20]
   98ebc:	2b03      	cmp	r3, #3
   98ebe:	d102      	bne.n	98ec6 <Cl_disinf_controller+0x16e>
					{
						flag_na = 1;
   98ec0:	4b6b      	ldr	r3, [pc, #428]	; (99070 <Cl_disinf_controller+0x318>)
   98ec2:	2201      	movs	r2, #1
   98ec4:	701a      	strb	r2, [r3, #0]
					}
					
				}
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   98ec6:	233c      	movs	r3, #60	; 0x3c
   98ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   98ecc:	2301      	movs	r3, #1
   98ece:	76fb      	strb	r3, [r7, #27]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   98ed0:	f107 011b 	add.w	r1, r7, #27
   98ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98ed8:	2201      	movs	r2, #1
   98eda:	4618      	mov	r0, r3
   98edc:	4b61      	ldr	r3, [pc, #388]	; (99064 <Cl_disinf_controller+0x30c>)
   98ede:	4798      	blx	r3
   98ee0:	4603      	mov	r3, r0
   98ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   98ee6:	4b63      	ldr	r3, [pc, #396]	; (99074 <Cl_disinf_controller+0x31c>)
   98ee8:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   98eea:	4b5b      	ldr	r3, [pc, #364]	; (99058 <Cl_disinf_controller+0x300>)
   98eec:	2203      	movs	r2, #3
   98eee:	701a      	strb	r2, [r3, #0]
				break;
   98ef0:	e000      	b.n	98ef4 <Cl_disinf_controller+0x19c>
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
					}
				}
				break;
   98ef2:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   98ef4:	f000 be3b 	b.w	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   98ef8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   98efc:	2b13      	cmp	r3, #19
   98efe:	d004      	beq.n	98f0a <Cl_disinf_controller+0x1b2>
   98f00:	2b22      	cmp	r3, #34	; 0x22
   98f02:	d008      	beq.n	98f16 <Cl_disinf_controller+0x1be>
   98f04:	2b0f      	cmp	r3, #15
   98f06:	d02d      	beq.n	98f64 <Cl_disinf_controller+0x20c>
							
					}

					break;
					
					default:break;
   98f08:	e03a      	b.n	98f80 <Cl_disinf_controller+0x228>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   98f0a:	4b5b      	ldr	r3, [pc, #364]	; (99078 <Cl_disinf_controller+0x320>)
   98f0c:	4798      	blx	r3
   98f0e:	4603      	mov	r3, r0
   98f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   98f14:	e034      	b.n	98f80 <Cl_disinf_controller+0x228>
					
					case EVENT_PRE_DISINFECT_RINSE_COMPLETED:
					
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   98f16:	4b50      	ldr	r3, [pc, #320]	; (99058 <Cl_disinf_controller+0x300>)
   98f18:	2204      	movs	r2, #4
   98f1a:	701a      	strb	r2, [r3, #0]
					
					command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   98f1c:	2339      	movs	r3, #57	; 0x39
   98f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (Cl_Uint8Type)1;
   98f22:	2301      	movs	r3, #1
   98f24:	76fb      	strb	r3, [r7, #27]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   98f26:	f107 011b 	add.w	r1, r7, #27
   98f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98f2e:	2201      	movs	r2, #1
   98f30:	4618      	mov	r0, r3
   98f32:	4b4c      	ldr	r3, [pc, #304]	; (99064 <Cl_disinf_controller+0x30c>)
   98f34:	4798      	blx	r3
   98f36:	4603      	mov	r3, r0
   98f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					
					cl_wait(5);
   98f3c:	2005      	movs	r0, #5
   98f3e:	4b4f      	ldr	r3, [pc, #316]	; (9907c <Cl_disinf_controller+0x324>)
   98f40:	4798      	blx	r3

					command = CON_TX_COMMAND_DISINF_PAUSED;
   98f42:	2338      	movs	r3, #56	; 0x38
   98f44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (Cl_Uint8Type)0;
   98f48:	2300      	movs	r3, #0
   98f4a:	76fb      	strb	r3, [r7, #27]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   98f4c:	f107 011b 	add.w	r1, r7, #27
   98f50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98f54:	2200      	movs	r2, #0
   98f56:	4618      	mov	r0, r3
   98f58:	4b42      	ldr	r3, [pc, #264]	; (99064 <Cl_disinf_controller+0x30c>)
   98f5a:	4798      	blx	r3
   98f5c:	4603      	mov	r3, r0
   98f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//Send Pause

					break;
   98f62:	e00d      	b.n	98f80 <Cl_disinf_controller+0x228>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   98f64:	4b46      	ldr	r3, [pc, #280]	; (99080 <Cl_disinf_controller+0x328>)
   98f66:	681b      	ldr	r3, [r3, #0]
   98f68:	3301      	adds	r3, #1
   98f6a:	4a45      	ldr	r2, [pc, #276]	; (99080 <Cl_disinf_controller+0x328>)
   98f6c:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   98f6e:	4b45      	ldr	r3, [pc, #276]	; (99084 <Cl_disinf_controller+0x32c>)
   98f70:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   98f72:	4b43      	ldr	r3, [pc, #268]	; (99080 <Cl_disinf_controller+0x328>)
   98f74:	681b      	ldr	r3, [r3, #0]
   98f76:	2b3c      	cmp	r3, #60	; 0x3c
   98f78:	d101      	bne.n	98f7e <Cl_disinf_controller+0x226>
					{
	
						UpdateDisinfMinuteTick();
   98f7a:	4b43      	ldr	r3, [pc, #268]	; (99088 <Cl_disinf_controller+0x330>)
   98f7c:	4798      	blx	r3
						
							
					}

					break;
   98f7e:	bf00      	nop
					
					default:break;
				}
				
			break;
   98f80:	f000 bdf5 	b.w	99b6e <Cl_disinf_controller+0xe16>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   98f84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   98f88:	2b02      	cmp	r3, #2
   98f8a:	d000      	beq.n	98f8e <Cl_disinf_controller+0x236>
					// command = CON_TX_COMMAND_DISINF_RESUMED;
					// data = (Cl_Uint8Type)0;
					// Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
					
					default:break;
   98f8c:	e038      	b.n	99000 <Cl_disinf_controller+0x2a8>
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
				{ 
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   98f8e:	4b3f      	ldr	r3, [pc, #252]	; (9908c <Cl_disinf_controller+0x334>)
   98f90:	4798      	blx	r3
					 if (flag_hotcitric == 1)
   98f92:	4b36      	ldr	r3, [pc, #216]	; (9906c <Cl_disinf_controller+0x314>)
   98f94:	781b      	ldrb	r3, [r3, #0]
   98f96:	2b01      	cmp	r3, #1
   98f98:	d10d      	bne.n	98fb6 <Cl_disinf_controller+0x25e>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   98f9a:	2300      	movs	r3, #0
   98f9c:	9300      	str	r3, [sp, #0]
   98f9e:	f04f 0300 	mov.w	r3, #0
   98fa2:	f04f 0200 	mov.w	r2, #0
   98fa6:	2101      	movs	r1, #1
   98fa8:	202b      	movs	r0, #43	; 0x2b
   98faa:	4c39      	ldr	r4, [pc, #228]	; (99090 <Cl_disinf_controller+0x338>)
   98fac:	47a0      	blx	r4
   98fae:	4603      	mov	r3, r0
   98fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   98fb4:	e010      	b.n	98fd8 <Cl_disinf_controller+0x280>
						// Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					 }
					 else if (flag_na == 1)
   98fb6:	4b2e      	ldr	r3, [pc, #184]	; (99070 <Cl_disinf_controller+0x318>)
   98fb8:	781b      	ldrb	r3, [r3, #0]
   98fba:	2b01      	cmp	r3, #1
   98fbc:	d10c      	bne.n	98fd8 <Cl_disinf_controller+0x280>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   98fbe:	2300      	movs	r3, #0
   98fc0:	9300      	str	r3, [sp, #0]
   98fc2:	f04f 0300 	mov.w	r3, #0
   98fc6:	f04f 0200 	mov.w	r2, #0
   98fca:	2101      	movs	r1, #1
   98fcc:	2029      	movs	r0, #41	; 0x29
   98fce:	4c30      	ldr	r4, [pc, #192]	; (99090 <Cl_disinf_controller+0x338>)
   98fd0:	47a0      	blx	r4
   98fd2:	4603      	mov	r3, r0
   98fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  //Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
					 }
					 cl_disinfstate = CL_DISINF_STATE_INTER;
   98fd8:	4b1f      	ldr	r3, [pc, #124]	; (99058 <Cl_disinf_controller+0x300>)
   98fda:	2210      	movs	r2, #16
   98fdc:	701a      	strb	r2, [r3, #0]
					 command = CON_TX_COMMAND_DISINF_PAUSED;
   98fde:	2338      	movs	r3, #56	; 0x38
   98fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					  data = (Cl_Uint8Type)0;
   98fe4:	2300      	movs	r3, #0
   98fe6:	76fb      	strb	r3, [r7, #27]
					  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   98fe8:	f107 011b 	add.w	r1, r7, #27
   98fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   98ff0:	2200      	movs	r2, #0
   98ff2:	4618      	mov	r0, r3
   98ff4:	4b1b      	ldr	r3, [pc, #108]	; (99064 <Cl_disinf_controller+0x30c>)
   98ff6:	4798      	blx	r3
   98ff8:	4603      	mov	r3, r0
   98ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					
					// cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
					// command = CON_TX_COMMAND_DISINF_RESUMED;
					// data = (Cl_Uint8Type)0;
					// Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   98ffe:	bf00      	nop
					default:break;
					
							
				}
			
			break;
   99000:	f000 bdb5 	b.w	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   99004:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99008:	2b13      	cmp	r3, #19
   9900a:	d005      	beq.n	99018 <Cl_disinf_controller+0x2c0>
   9900c:	2b25      	cmp	r3, #37	; 0x25
   9900e:	d009      	beq.n	99024 <Cl_disinf_controller+0x2cc>
   99010:	2b0f      	cmp	r3, #15
   99012:	d01a      	beq.n	9904a <Cl_disinf_controller+0x2f2>
							}
						}
					break;
							
				}
			break;
   99014:	f000 bdab 	b.w	99b6e <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   99018:	4b17      	ldr	r3, [pc, #92]	; (99078 <Cl_disinf_controller+0x320>)
   9901a:	4798      	blx	r3
   9901c:	4603      	mov	r3, r0
   9901e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   99022:	e0b6      	b.n	99192 <Cl_disinf_controller+0x43a>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   99024:	4b1b      	ldr	r3, [pc, #108]	; (99094 <Cl_disinf_controller+0x33c>)
   99026:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   99028:	4b1b      	ldr	r3, [pc, #108]	; (99098 <Cl_disinf_controller+0x340>)
   9902a:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9902c:	4b1b      	ldr	r3, [pc, #108]	; (9909c <Cl_disinf_controller+0x344>)
   9902e:	4798      	blx	r3
					if (alarm_flag == 1)
   99030:	4b1b      	ldr	r3, [pc, #108]	; (990a0 <Cl_disinf_controller+0x348>)
   99032:	781b      	ldrb	r3, [r3, #0]
   99034:	b2db      	uxtb	r3, r3
   99036:	2b01      	cmp	r3, #1
   99038:	f040 80aa 	bne.w	99190 <Cl_disinf_controller+0x438>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9903c:	4b06      	ldr	r3, [pc, #24]	; (99058 <Cl_disinf_controller+0x300>)
   9903e:	2205      	movs	r2, #5
   99040:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   99042:	4b17      	ldr	r3, [pc, #92]	; (990a0 <Cl_disinf_controller+0x348>)
   99044:	2200      	movs	r2, #0
   99046:	701a      	strb	r2, [r3, #0]
					}
					break;
   99048:	e0a2      	b.n	99190 <Cl_disinf_controller+0x438>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9904a:	4b16      	ldr	r3, [pc, #88]	; (990a4 <Cl_disinf_controller+0x34c>)
   9904c:	2200      	movs	r2, #0
   9904e:	801a      	strh	r2, [r3, #0]
   99050:	e099      	b.n	99186 <Cl_disinf_controller+0x42e>
   99052:	bf00      	nop
   99054:	00099bc1 	.word	0x00099bc1
   99058:	2007275b 	.word	0x2007275b
   9905c:	20072f2c 	.word	0x20072f2c
   99060:	0009710d 	.word	0x0009710d
   99064:	00098601 	.word	0x00098601
   99068:	0008a915 	.word	0x0008a915
   9906c:	200725f3 	.word	0x200725f3
   99070:	200725f5 	.word	0x200725f5
   99074:	0009a079 	.word	0x0009a079
   99078:	0009a1cd 	.word	0x0009a1cd
   9907c:	00091b9d 	.word	0x00091b9d
   99080:	2007275c 	.word	0x2007275c
   99084:	0009a4f9 	.word	0x0009a4f9
   99088:	0009a8d1 	.word	0x0009a8d1
   9908c:	00099df5 	.word	0x00099df5
   99090:	00082ea1 	.word	0x00082ea1
   99094:	00096b25 	.word	0x00096b25
   99098:	00096b61 	.word	0x00096b61
   9909c:	00099fd9 	.word	0x00099fd9
   990a0:	20072759 	.word	0x20072759
   990a4:	200732ec 	.word	0x200732ec
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   990a8:	4ba1      	ldr	r3, [pc, #644]	; (99330 <Cl_disinf_controller+0x5d8>)
   990aa:	881b      	ldrh	r3, [r3, #0]
   990ac:	4619      	mov	r1, r3
   990ae:	4aa1      	ldr	r2, [pc, #644]	; (99334 <Cl_disinf_controller+0x5dc>)
   990b0:	460b      	mov	r3, r1
   990b2:	00db      	lsls	r3, r3, #3
   990b4:	1a5b      	subs	r3, r3, r1
   990b6:	4413      	add	r3, r2
   990b8:	7818      	ldrb	r0, [r3, #0]
   990ba:	4b9d      	ldr	r3, [pc, #628]	; (99330 <Cl_disinf_controller+0x5d8>)
   990bc:	881b      	ldrh	r3, [r3, #0]
   990be:	461a      	mov	r2, r3
   990c0:	4613      	mov	r3, r2
   990c2:	00db      	lsls	r3, r3, #3
   990c4:	1a9b      	subs	r3, r3, r2
   990c6:	4a9b      	ldr	r2, [pc, #620]	; (99334 <Cl_disinf_controller+0x5dc>)
   990c8:	4413      	add	r3, r2
   990ca:	3302      	adds	r3, #2
   990cc:	4619      	mov	r1, r3
   990ce:	4b9a      	ldr	r3, [pc, #616]	; (99338 <Cl_disinf_controller+0x5e0>)
   990d0:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   990d2:	4b97      	ldr	r3, [pc, #604]	; (99330 <Cl_disinf_controller+0x5d8>)
   990d4:	881b      	ldrh	r3, [r3, #0]
   990d6:	4619      	mov	r1, r3
   990d8:	4a96      	ldr	r2, [pc, #600]	; (99334 <Cl_disinf_controller+0x5dc>)
   990da:	460b      	mov	r3, r1
   990dc:	00db      	lsls	r3, r3, #3
   990de:	1a5b      	subs	r3, r3, r1
   990e0:	4413      	add	r3, r2
   990e2:	3302      	adds	r3, #2
   990e4:	781b      	ldrb	r3, [r3, #0]
   990e6:	2b00      	cmp	r3, #0
   990e8:	d015      	beq.n	99116 <Cl_disinf_controller+0x3be>
							{
								sv_cntrl_setredalarm();
   990ea:	4b94      	ldr	r3, [pc, #592]	; (9933c <Cl_disinf_controller+0x5e4>)
   990ec:	4798      	blx	r3
								sv_cntrl_buzzer();
   990ee:	4b94      	ldr	r3, [pc, #592]	; (99340 <Cl_disinf_controller+0x5e8>)
   990f0:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   990f2:	2208      	movs	r2, #8
   990f4:	4993      	ldr	r1, [pc, #588]	; (99344 <Cl_disinf_controller+0x5ec>)
   990f6:	2018      	movs	r0, #24
   990f8:	4b93      	ldr	r3, [pc, #588]	; (99348 <Cl_disinf_controller+0x5f0>)
   990fa:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   990fc:	4b93      	ldr	r3, [pc, #588]	; (9934c <Cl_disinf_controller+0x5f4>)
   990fe:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   99100:	4b93      	ldr	r3, [pc, #588]	; (99350 <Cl_disinf_controller+0x5f8>)
   99102:	2210      	movs	r2, #16
   99104:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   99106:	4b93      	ldr	r3, [pc, #588]	; (99354 <Cl_disinf_controller+0x5fc>)
   99108:	2201      	movs	r2, #1
   9910a:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   9910c:	4b88      	ldr	r3, [pc, #544]	; (99330 <Cl_disinf_controller+0x5d8>)
   9910e:	2200      	movs	r2, #0
   99110:	801a      	strh	r2, [r3, #0]
								break;
   99112:	bf00      	nop
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   99114:	e03d      	b.n	99192 <Cl_disinf_controller+0x43a>
								alarm_flag1 = 1;
								tempcount=0;
								break;
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   99116:	4b86      	ldr	r3, [pc, #536]	; (99330 <Cl_disinf_controller+0x5d8>)
   99118:	881b      	ldrh	r3, [r3, #0]
   9911a:	2b0b      	cmp	r3, #11
   9911c:	d12d      	bne.n	9917a <Cl_disinf_controller+0x422>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9911e:	4b84      	ldr	r3, [pc, #528]	; (99330 <Cl_disinf_controller+0x5d8>)
   99120:	881b      	ldrh	r3, [r3, #0]
   99122:	4619      	mov	r1, r3
   99124:	4a83      	ldr	r2, [pc, #524]	; (99334 <Cl_disinf_controller+0x5dc>)
   99126:	460b      	mov	r3, r1
   99128:	00db      	lsls	r3, r3, #3
   9912a:	1a5b      	subs	r3, r3, r1
   9912c:	4413      	add	r3, r2
   9912e:	3302      	adds	r3, #2
   99130:	781b      	ldrb	r3, [r3, #0]
   99132:	f083 0301 	eor.w	r3, r3, #1
   99136:	b2db      	uxtb	r3, r3
   99138:	2b00      	cmp	r3, #0
   9913a:	d01e      	beq.n	9917a <Cl_disinf_controller+0x422>
								{
									sv_cntrl_resetredalarm();
   9913c:	4b86      	ldr	r3, [pc, #536]	; (99358 <Cl_disinf_controller+0x600>)
   9913e:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   99140:	4b86      	ldr	r3, [pc, #536]	; (9935c <Cl_disinf_controller+0x604>)
   99142:	4798      	blx	r3
									alarm_flag = 1;
   99144:	4b86      	ldr	r3, [pc, #536]	; (99360 <Cl_disinf_controller+0x608>)
   99146:	2201      	movs	r2, #1
   99148:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   9914a:	4b82      	ldr	r3, [pc, #520]	; (99354 <Cl_disinf_controller+0x5fc>)
   9914c:	781b      	ldrb	r3, [r3, #0]
   9914e:	b2db      	uxtb	r3, r3
   99150:	2b00      	cmp	r3, #0
   99152:	d112      	bne.n	9917a <Cl_disinf_controller+0x422>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   99154:	233b      	movs	r3, #59	; 0x3b
   99156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   9915a:	2300      	movs	r3, #0
   9915c:	76fb      	strb	r3, [r7, #27]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9915e:	f107 011b 	add.w	r1, r7, #27
   99162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99166:	2200      	movs	r2, #0
   99168:	4618      	mov	r0, r3
   9916a:	4b77      	ldr	r3, [pc, #476]	; (99348 <Cl_disinf_controller+0x5f0>)
   9916c:	4798      	blx	r3
   9916e:	4603      	mov	r3, r0
   99170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   99174:	4b76      	ldr	r3, [pc, #472]	; (99350 <Cl_disinf_controller+0x5f8>)
   99176:	2205      	movs	r2, #5
   99178:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9917a:	4b6d      	ldr	r3, [pc, #436]	; (99330 <Cl_disinf_controller+0x5d8>)
   9917c:	881b      	ldrh	r3, [r3, #0]
   9917e:	3301      	adds	r3, #1
   99180:	b29a      	uxth	r2, r3
   99182:	4b6b      	ldr	r3, [pc, #428]	; (99330 <Cl_disinf_controller+0x5d8>)
   99184:	801a      	strh	r2, [r3, #0]
   99186:	4b6a      	ldr	r3, [pc, #424]	; (99330 <Cl_disinf_controller+0x5d8>)
   99188:	881b      	ldrh	r3, [r3, #0]
   9918a:	2b0b      	cmp	r3, #11
   9918c:	d98c      	bls.n	990a8 <Cl_disinf_controller+0x350>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9918e:	e000      	b.n	99192 <Cl_disinf_controller+0x43a>
					if (alarm_flag == 1)
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
						alarm_flag = 0;
					}
					break;
   99190:	bf00      	nop
							}
						}
					break;
							
				}
			break;
   99192:	f000 bcec 	b.w	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   99196:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9919a:	3b0c      	subs	r3, #12
   9919c:	2b03      	cmp	r3, #3
   9919e:	d854      	bhi.n	9924a <Cl_disinf_controller+0x4f2>
   991a0:	a201      	add	r2, pc, #4	; (adr r2, 991a8 <Cl_disinf_controller+0x450>)
   991a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   991a6:	bf00      	nop
   991a8:	0009924b 	.word	0x0009924b
   991ac:	0009924b 	.word	0x0009924b
   991b0:	0009924b 	.word	0x0009924b
   991b4:	000991b9 	.word	0x000991b9
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   991b8:	4b6a      	ldr	r3, [pc, #424]	; (99364 <Cl_disinf_controller+0x60c>)
   991ba:	881b      	ldrh	r3, [r3, #0]
   991bc:	3301      	adds	r3, #1
   991be:	b29a      	uxth	r2, r3
   991c0:	4b68      	ldr	r3, [pc, #416]	; (99364 <Cl_disinf_controller+0x60c>)
   991c2:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   991c4:	4b67      	ldr	r3, [pc, #412]	; (99364 <Cl_disinf_controller+0x60c>)
   991c6:	881b      	ldrh	r3, [r3, #0]
   991c8:	2b03      	cmp	r3, #3
   991ca:	d902      	bls.n	991d2 <Cl_disinf_controller+0x47a>
							{
								Cl_disinfOpenFillTimeOut = true;
   991cc:	4b66      	ldr	r3, [pc, #408]	; (99368 <Cl_disinf_controller+0x610>)
   991ce:	2201      	movs	r2, #1
   991d0:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   991d2:	4b65      	ldr	r3, [pc, #404]	; (99368 <Cl_disinf_controller+0x610>)
   991d4:	781b      	ldrb	r3, [r3, #0]
   991d6:	2b00      	cmp	r3, #0
   991d8:	d03a      	beq.n	99250 <Cl_disinf_controller+0x4f8>
							{
								if (flag_hotcitric == 1)
   991da:	4b64      	ldr	r3, [pc, #400]	; (9936c <Cl_disinf_controller+0x614>)
   991dc:	781b      	ldrb	r3, [r3, #0]
   991de:	2b01      	cmp	r3, #1
   991e0:	d119      	bne.n	99216 <Cl_disinf_controller+0x4be>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   991e2:	2001      	movs	r0, #1
   991e4:	4b62      	ldr	r3, [pc, #392]	; (99370 <Cl_disinf_controller+0x618>)
   991e6:	4798      	blx	r3
   991e8:	4603      	mov	r3, r0
   991ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   991ee:	2002      	movs	r0, #2
   991f0:	4b5f      	ldr	r3, [pc, #380]	; (99370 <Cl_disinf_controller+0x618>)
   991f2:	4798      	blx	r3
   991f4:	4603      	mov	r3, r0
   991f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   991fa:	2203      	movs	r2, #3
   991fc:	495d      	ldr	r1, [pc, #372]	; (99374 <Cl_disinf_controller+0x61c>)
   991fe:	2018      	movs	r0, #24
   99200:	4b51      	ldr	r3, [pc, #324]	; (99348 <Cl_disinf_controller+0x5f0>)
   99202:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   99204:	4b5c      	ldr	r3, [pc, #368]	; (99378 <Cl_disinf_controller+0x620>)
   99206:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   99208:	4b51      	ldr	r3, [pc, #324]	; (99350 <Cl_disinf_controller+0x5f8>)
   9920a:	2206      	movs	r2, #6
   9920c:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9920e:	4b55      	ldr	r3, [pc, #340]	; (99364 <Cl_disinf_controller+0x60c>)
   99210:	2200      	movs	r2, #0
   99212:	801a      	strh	r2, [r3, #0]
							}
								
							}

							
							break;
   99214:	e01c      	b.n	99250 <Cl_disinf_controller+0x4f8>
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
								sec_count =0;
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   99216:	2001      	movs	r0, #1
   99218:	4b55      	ldr	r3, [pc, #340]	; (99370 <Cl_disinf_controller+0x618>)
   9921a:	4798      	blx	r3
   9921c:	4603      	mov	r3, r0
   9921e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   99222:	2002      	movs	r0, #2
   99224:	4b52      	ldr	r3, [pc, #328]	; (99370 <Cl_disinf_controller+0x618>)
   99226:	4798      	blx	r3
   99228:	4603      	mov	r3, r0
   9922a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9922e:	2203      	movs	r2, #3
   99230:	4950      	ldr	r1, [pc, #320]	; (99374 <Cl_disinf_controller+0x61c>)
   99232:	2018      	movs	r0, #24
   99234:	4b44      	ldr	r3, [pc, #272]	; (99348 <Cl_disinf_controller+0x5f0>)
   99236:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   99238:	4b50      	ldr	r3, [pc, #320]	; (9937c <Cl_disinf_controller+0x624>)
   9923a:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9923c:	4b44      	ldr	r3, [pc, #272]	; (99350 <Cl_disinf_controller+0x5f8>)
   9923e:	2206      	movs	r2, #6
   99240:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   99242:	4b48      	ldr	r3, [pc, #288]	; (99364 <Cl_disinf_controller+0x60c>)
   99244:	2200      	movs	r2, #0
   99246:	801a      	strh	r2, [r3, #0]
							}
								
							}

							
							break;
   99248:	e002      	b.n	99250 <Cl_disinf_controller+0x4f8>
							default:break;
   9924a:	bf00      	nop
   9924c:	f000 bc8f 	b.w	99b6e <Cl_disinf_controller+0xe16>
							}
								
							}

							
							break;
   99250:	bf00      	nop
							default:break;
						}
			break;
   99252:	f000 bc8c 	b.w	99b6e <Cl_disinf_controller+0xe16>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   99256:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9925a:	3b0c      	subs	r3, #12
   9925c:	2b03      	cmp	r3, #3
   9925e:	f200 80e3 	bhi.w	99428 <Cl_disinf_controller+0x6d0>
   99262:	a201      	add	r2, pc, #4	; (adr r2, 99268 <Cl_disinf_controller+0x510>)
   99264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99268:	00099429 	.word	0x00099429
   9926c:	00099429 	.word	0x00099429
   99270:	00099429 	.word	0x00099429
   99274:	00099279 	.word	0x00099279
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   99278:	4b41      	ldr	r3, [pc, #260]	; (99380 <Cl_disinf_controller+0x628>)
   9927a:	681b      	ldr	r3, [r3, #0]
   9927c:	3301      	adds	r3, #1
   9927e:	4a40      	ldr	r2, [pc, #256]	; (99380 <Cl_disinf_controller+0x628>)
   99280:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   99282:	4b40      	ldr	r3, [pc, #256]	; (99384 <Cl_disinf_controller+0x62c>)
   99284:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   99286:	4b3e      	ldr	r3, [pc, #248]	; (99380 <Cl_disinf_controller+0x628>)
   99288:	681b      	ldr	r3, [r3, #0]
   9928a:	2b3c      	cmp	r3, #60	; 0x3c
   9928c:	d101      	bne.n	99292 <Cl_disinf_controller+0x53a>
							{
						
								UpdateDisinfMinuteTick();
   9928e:	4b3e      	ldr	r3, [pc, #248]	; (99388 <Cl_disinf_controller+0x630>)
   99290:	4798      	blx	r3
						
						
							}
							sec_count ++;
   99292:	4b34      	ldr	r3, [pc, #208]	; (99364 <Cl_disinf_controller+0x60c>)
   99294:	881b      	ldrh	r3, [r3, #0]
   99296:	3301      	adds	r3, #1
   99298:	b29a      	uxth	r2, r3
   9929a:	4b32      	ldr	r3, [pc, #200]	; (99364 <Cl_disinf_controller+0x60c>)
   9929c:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1)
   9929e:	4b33      	ldr	r3, [pc, #204]	; (9936c <Cl_disinf_controller+0x614>)
   992a0:	781b      	ldrb	r3, [r3, #0]
   992a2:	2b01      	cmp	r3, #1
   992a4:	d17a      	bne.n	9939c <Cl_disinf_controller+0x644>
							{
								if(sec_count > 35)
   992a6:	4b2f      	ldr	r3, [pc, #188]	; (99364 <Cl_disinf_controller+0x60c>)
   992a8:	881b      	ldrh	r3, [r3, #0]
   992aa:	2b23      	cmp	r3, #35	; 0x23
   992ac:	f240 80be 	bls.w	9942c <Cl_disinf_controller+0x6d4>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   992b0:	2203      	movs	r2, #3
   992b2:	4936      	ldr	r1, [pc, #216]	; (9938c <Cl_disinf_controller+0x634>)
   992b4:	2018      	movs	r0, #24
   992b6:	4b24      	ldr	r3, [pc, #144]	; (99348 <Cl_disinf_controller+0x5f0>)
   992b8:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   992ba:	4b35      	ldr	r3, [pc, #212]	; (99390 <Cl_disinf_controller+0x638>)
   992bc:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   992be:	2002      	movs	r0, #2
   992c0:	4b2b      	ldr	r3, [pc, #172]	; (99370 <Cl_disinf_controller+0x618>)
   992c2:	4798      	blx	r3
   992c4:	4603      	mov	r3, r0
   992c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   992ca:	2001      	movs	r0, #1
   992cc:	4b28      	ldr	r3, [pc, #160]	; (99370 <Cl_disinf_controller+0x618>)
   992ce:	4798      	blx	r3
   992d0:	4603      	mov	r3, r0
   992d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   992d6:	2005      	movs	r0, #5
   992d8:	4b2e      	ldr	r3, [pc, #184]	; (99394 <Cl_disinf_controller+0x63c>)
   992da:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   992dc:	2339      	movs	r3, #57	; 0x39
   992de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   992e2:	2302      	movs	r3, #2
   992e4:	76fb      	strb	r3, [r7, #27]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   992e6:	f107 011b 	add.w	r1, r7, #27
   992ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   992ee:	2201      	movs	r2, #1
   992f0:	4618      	mov	r0, r3
   992f2:	4b15      	ldr	r3, [pc, #84]	; (99348 <Cl_disinf_controller+0x5f0>)
   992f4:	4798      	blx	r3
   992f6:	4603      	mov	r3, r0
   992f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(5);
   992fc:	2005      	movs	r0, #5
   992fe:	4b26      	ldr	r3, [pc, #152]	; (99398 <Cl_disinf_controller+0x640>)
   99300:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   99302:	2338      	movs	r3, #56	; 0x38
   99304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   99308:	2300      	movs	r3, #0
   9930a:	76fb      	strb	r3, [r7, #27]
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9930c:	4b10      	ldr	r3, [pc, #64]	; (99350 <Cl_disinf_controller+0x5f8>)
   9930e:	2207      	movs	r2, #7
   99310:	701a      	strb	r2, [r3, #0]
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99312:	f107 011b 	add.w	r1, r7, #27
   99316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9931a:	2200      	movs	r2, #0
   9931c:	4618      	mov	r0, r3
   9931e:	4b0a      	ldr	r3, [pc, #40]	; (99348 <Cl_disinf_controller+0x5f0>)
   99320:	4798      	blx	r3
   99322:	4603      	mov	r3, r0
   99324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   99328:	4b09      	ldr	r3, [pc, #36]	; (99350 <Cl_disinf_controller+0x5f8>)
   9932a:	2207      	movs	r2, #7
   9932c:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9932e:	e07d      	b.n	9942c <Cl_disinf_controller+0x6d4>
   99330:	200732ec 	.word	0x200732ec
   99334:	20070a30 	.word	0x20070a30
   99338:	00083041 	.word	0x00083041
   9933c:	00096ad5 	.word	0x00096ad5
   99340:	00096b11 	.word	0x00096b11
   99344:	000a4b30 	.word	0x000a4b30
   99348:	00098601 	.word	0x00098601
   9934c:	00099f45 	.word	0x00099f45
   99350:	2007275b 	.word	0x2007275b
   99354:	2007275a 	.word	0x2007275a
   99358:	00096b25 	.word	0x00096b25
   9935c:	00096b61 	.word	0x00096b61
   99360:	20072759 	.word	0x20072759
   99364:	20072784 	.word	0x20072784
   99368:	20070a2e 	.word	0x20070a2e
   9936c:	200725f3 	.word	0x200725f3
   99370:	00096819 	.word	0x00096819
   99374:	000a4b38 	.word	0x000a4b38
   99378:	00096cb1 	.word	0x00096cb1
   9937c:	00096c89 	.word	0x00096c89
   99380:	2007275c 	.word	0x2007275c
   99384:	0009a4f9 	.word	0x0009a4f9
   99388:	0009a8d1 	.word	0x0009a8d1
   9938c:	000a4b3c 	.word	0x000a4b3c
   99390:	00096cc5 	.word	0x00096cc5
   99394:	00083325 	.word	0x00083325
   99398:	00091b9d 	.word	0x00091b9d
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

								}
							}
							else if(sec_count > 80)
   9939c:	4bad      	ldr	r3, [pc, #692]	; (99654 <Cl_disinf_controller+0x8fc>)
   9939e:	881b      	ldrh	r3, [r3, #0]
   993a0:	2b50      	cmp	r3, #80	; 0x50
   993a2:	d943      	bls.n	9942c <Cl_disinf_controller+0x6d4>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   993a4:	2203      	movs	r2, #3
   993a6:	49ac      	ldr	r1, [pc, #688]	; (99658 <Cl_disinf_controller+0x900>)
   993a8:	2018      	movs	r0, #24
   993aa:	4bac      	ldr	r3, [pc, #688]	; (9965c <Cl_disinf_controller+0x904>)
   993ac:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   993ae:	4bac      	ldr	r3, [pc, #688]	; (99660 <Cl_disinf_controller+0x908>)
   993b0:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   993b2:	4bac      	ldr	r3, [pc, #688]	; (99664 <Cl_disinf_controller+0x90c>)
   993b4:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   993b6:	2002      	movs	r0, #2
   993b8:	4bab      	ldr	r3, [pc, #684]	; (99668 <Cl_disinf_controller+0x910>)
   993ba:	4798      	blx	r3
   993bc:	4603      	mov	r3, r0
   993be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   993c2:	2001      	movs	r0, #1
   993c4:	4ba8      	ldr	r3, [pc, #672]	; (99668 <Cl_disinf_controller+0x910>)
   993c6:	4798      	blx	r3
   993c8:	4603      	mov	r3, r0
   993ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   993ce:	2005      	movs	r0, #5
   993d0:	4ba6      	ldr	r3, [pc, #664]	; (9966c <Cl_disinf_controller+0x914>)
   993d2:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   993d4:	2339      	movs	r3, #57	; 0x39
   993d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   993da:	2302      	movs	r3, #2
   993dc:	76fb      	strb	r3, [r7, #27]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   993de:	f107 011b 	add.w	r1, r7, #27
   993e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   993e6:	2201      	movs	r2, #1
   993e8:	4618      	mov	r0, r3
   993ea:	4b9c      	ldr	r3, [pc, #624]	; (9965c <Cl_disinf_controller+0x904>)
   993ec:	4798      	blx	r3
   993ee:	4603      	mov	r3, r0
   993f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								cl_wait(5);
   993f4:	2005      	movs	r0, #5
   993f6:	4b9e      	ldr	r3, [pc, #632]	; (99670 <Cl_disinf_controller+0x918>)
   993f8:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   993fa:	2338      	movs	r3, #56	; 0x38
   993fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   99400:	2300      	movs	r3, #0
   99402:	76fb      	strb	r3, [r7, #27]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   99404:	4b9b      	ldr	r3, [pc, #620]	; (99674 <Cl_disinf_controller+0x91c>)
   99406:	2207      	movs	r2, #7
   99408:	701a      	strb	r2, [r3, #0]
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9940a:	f107 011b 	add.w	r1, r7, #27
   9940e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99412:	2200      	movs	r2, #0
   99414:	4618      	mov	r0, r3
   99416:	4b91      	ldr	r3, [pc, #580]	; (9965c <Cl_disinf_controller+0x904>)
   99418:	4798      	blx	r3
   9941a:	4603      	mov	r3, r0
   9941c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   99420:	4b94      	ldr	r3, [pc, #592]	; (99674 <Cl_disinf_controller+0x91c>)
   99422:	2207      	movs	r2, #7
   99424:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   99426:	e001      	b.n	9942c <Cl_disinf_controller+0x6d4>
							default:break;
   99428:	bf00      	nop
   9942a:	e3a0      	b.n	99b6e <Cl_disinf_controller+0xe16>
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9942c:	bf00      	nop
							default:break;
						}
			
			break;
   9942e:	e39e      	b.n	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   99430:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99434:	2b02      	cmp	r3, #2
   99436:	d000      	beq.n	9943a <Cl_disinf_controller+0x6e2>
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
								default:break;
   99438:	e058      	b.n	994ec <Cl_disinf_controller+0x794>
			
						switch (cl_disinfevent)
						{
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9943a:	2002      	movs	r0, #2
   9943c:	4b8e      	ldr	r3, [pc, #568]	; (99678 <Cl_disinf_controller+0x920>)
   9943e:	4798      	blx	r3
   99440:	4603      	mov	r3, r0
   99442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   99446:	2001      	movs	r0, #1
   99448:	4b8b      	ldr	r3, [pc, #556]	; (99678 <Cl_disinf_controller+0x920>)
   9944a:	4798      	blx	r3
   9944c:	4603      	mov	r3, r0
   9944e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,500);
   99452:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   99456:	2002      	movs	r0, #2
   99458:	4b88      	ldr	r3, [pc, #544]	; (9967c <Cl_disinf_controller+0x924>)
   9945a:	4798      	blx	r3
   9945c:	4603      	mov	r3, r0
   9945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,400);
   99462:	f44f 71c8 	mov.w	r1, #400	; 0x190
   99466:	2001      	movs	r0, #1
   99468:	4b84      	ldr	r3, [pc, #528]	; (9967c <Cl_disinf_controller+0x924>)
   9946a:	4798      	blx	r3
   9946c:	4603      	mov	r3, r0
   9946e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   99472:	4b83      	ldr	r3, [pc, #524]	; (99680 <Cl_disinf_controller+0x928>)
   99474:	2201      	movs	r2, #1
   99476:	701a      	strb	r2, [r3, #0]
								Cl_bc_controller(BC_EVENT_START);
   99478:	2004      	movs	r0, #4
   9947a:	4b7c      	ldr	r3, [pc, #496]	; (9966c <Cl_disinf_controller+0x914>)
   9947c:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   9947e:	4b81      	ldr	r3, [pc, #516]	; (99684 <Cl_disinf_controller+0x92c>)
   99480:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   99482:	4b81      	ldr	r3, [pc, #516]	; (99688 <Cl_disinf_controller+0x930>)
   99484:	4798      	blx	r3
								if (flag_hotcitric == 1)
   99486:	4b81      	ldr	r3, [pc, #516]	; (9968c <Cl_disinf_controller+0x934>)
   99488:	781b      	ldrb	r3, [r3, #0]
   9948a:	2b01      	cmp	r3, #1
   9948c:	d105      	bne.n	9949a <Cl_disinf_controller+0x742>
								{
									sv_cntrl_poweronheater();
   9948e:	4b80      	ldr	r3, [pc, #512]	; (99690 <Cl_disinf_controller+0x938>)
   99490:	4798      	blx	r3
									sv_cntrl_incheater(3500);
   99492:	f640 50ac 	movw	r0, #3500	; 0xdac
   99496:	4b7f      	ldr	r3, [pc, #508]	; (99694 <Cl_disinf_controller+0x93c>)
   99498:	4798      	blx	r3
								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9949a:	2002      	movs	r0, #2
   9949c:	4b7e      	ldr	r3, [pc, #504]	; (99698 <Cl_disinf_controller+0x940>)
   9949e:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   994a0:	2003      	movs	r0, #3
   994a2:	4b7d      	ldr	r3, [pc, #500]	; (99698 <Cl_disinf_controller+0x940>)
   994a4:	4798      	blx	r3
								sv_prop_startmixing();
   994a6:	4b7d      	ldr	r3, [pc, #500]	; (9969c <Cl_disinf_controller+0x944>)
   994a8:	4798      	blx	r3
								sec_count =0;
   994aa:	4b6a      	ldr	r3, [pc, #424]	; (99654 <Cl_disinf_controller+0x8fc>)
   994ac:	2200      	movs	r2, #0
   994ae:	801a      	strh	r2, [r3, #0]
								cl_disinfstate = CL_DISINF_STATE_INTER_1;
   994b0:	4b70      	ldr	r3, [pc, #448]	; (99674 <Cl_disinf_controller+0x91c>)
   994b2:	2211      	movs	r2, #17
   994b4:	701a      	strb	r2, [r3, #0]
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   994b6:	2300      	movs	r3, #0
   994b8:	9300      	str	r3, [sp, #0]
   994ba:	f04f 0300 	mov.w	r3, #0
   994be:	f04f 0200 	mov.w	r2, #0
   994c2:	2100      	movs	r1, #0
   994c4:	2029      	movs	r0, #41	; 0x29
   994c6:	4c76      	ldr	r4, [pc, #472]	; (996a0 <Cl_disinf_controller+0x948>)
   994c8:	47a0      	blx	r4
   994ca:	4603      	mov	r3, r0
   994cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   994d0:	2300      	movs	r3, #0
   994d2:	9300      	str	r3, [sp, #0]
   994d4:	f04f 0300 	mov.w	r3, #0
   994d8:	f04f 0200 	mov.w	r2, #0
   994dc:	2100      	movs	r1, #0
   994de:	202b      	movs	r0, #43	; 0x2b
   994e0:	4c6f      	ldr	r4, [pc, #444]	; (996a0 <Cl_disinf_controller+0x948>)
   994e2:	47a0      	blx	r4
   994e4:	4603      	mov	r3, r0
   994e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   994ea:	bf00      	nop
								default:break;
						}
			
			break;
   994ec:	e33f      	b.n	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   994ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   994f2:	2b13      	cmp	r3, #19
   994f4:	d004      	beq.n	99500 <Cl_disinf_controller+0x7a8>
   994f6:	2b25      	cmp	r3, #37	; 0x25
   994f8:	d008      	beq.n	9950c <Cl_disinf_controller+0x7b4>
   994fa:	2b0f      	cmp	r3, #15
   994fc:	d018      	beq.n	99530 <Cl_disinf_controller+0x7d8>
						}
					}
								break;
					
						}
			break;
   994fe:	e336      	b.n	99b6e <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   99500:	4b68      	ldr	r3, [pc, #416]	; (996a4 <Cl_disinf_controller+0x94c>)
   99502:	4798      	blx	r3
   99504:	4603      	mov	r3, r0
   99506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9950a:	e088      	b.n	9961e <Cl_disinf_controller+0x8c6>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9950c:	4b66      	ldr	r3, [pc, #408]	; (996a8 <Cl_disinf_controller+0x950>)
   9950e:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   99510:	4b66      	ldr	r3, [pc, #408]	; (996ac <Cl_disinf_controller+0x954>)
   99512:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   99514:	4b66      	ldr	r3, [pc, #408]	; (996b0 <Cl_disinf_controller+0x958>)
   99516:	4798      	blx	r3
					if (alarm_flag == 1)
   99518:	4b66      	ldr	r3, [pc, #408]	; (996b4 <Cl_disinf_controller+0x95c>)
   9951a:	781b      	ldrb	r3, [r3, #0]
   9951c:	b2db      	uxtb	r3, r3
   9951e:	2b01      	cmp	r3, #1
   99520:	d17c      	bne.n	9961c <Cl_disinf_controller+0x8c4>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   99522:	4b54      	ldr	r3, [pc, #336]	; (99674 <Cl_disinf_controller+0x91c>)
   99524:	2208      	movs	r2, #8
   99526:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   99528:	4b62      	ldr	r3, [pc, #392]	; (996b4 <Cl_disinf_controller+0x95c>)
   9952a:	2200      	movs	r2, #0
   9952c:	701a      	strb	r2, [r3, #0]
					}
					break;
   9952e:	e075      	b.n	9961c <Cl_disinf_controller+0x8c4>
								 
					case EVENT_DISINF_TICK_SECOND:
					for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99530:	4b61      	ldr	r3, [pc, #388]	; (996b8 <Cl_disinf_controller+0x960>)
   99532:	2200      	movs	r2, #0
   99534:	801a      	strh	r2, [r3, #0]
   99536:	e06c      	b.n	99612 <Cl_disinf_controller+0x8ba>
					{
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
						Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   99538:	4b5f      	ldr	r3, [pc, #380]	; (996b8 <Cl_disinf_controller+0x960>)
   9953a:	881b      	ldrh	r3, [r3, #0]
   9953c:	4619      	mov	r1, r3
   9953e:	4a5f      	ldr	r2, [pc, #380]	; (996bc <Cl_disinf_controller+0x964>)
   99540:	460b      	mov	r3, r1
   99542:	00db      	lsls	r3, r3, #3
   99544:	1a5b      	subs	r3, r3, r1
   99546:	4413      	add	r3, r2
   99548:	7818      	ldrb	r0, [r3, #0]
   9954a:	4b5b      	ldr	r3, [pc, #364]	; (996b8 <Cl_disinf_controller+0x960>)
   9954c:	881b      	ldrh	r3, [r3, #0]
   9954e:	461a      	mov	r2, r3
   99550:	4613      	mov	r3, r2
   99552:	00db      	lsls	r3, r3, #3
   99554:	1a9b      	subs	r3, r3, r2
   99556:	4a59      	ldr	r2, [pc, #356]	; (996bc <Cl_disinf_controller+0x964>)
   99558:	4413      	add	r3, r2
   9955a:	3302      	adds	r3, #2
   9955c:	4619      	mov	r1, r3
   9955e:	4b58      	ldr	r3, [pc, #352]	; (996c0 <Cl_disinf_controller+0x968>)
   99560:	4798      	blx	r3
					 
						if (Cl_DisinfAlarmTable[tempcount].IsActive)
   99562:	4b55      	ldr	r3, [pc, #340]	; (996b8 <Cl_disinf_controller+0x960>)
   99564:	881b      	ldrh	r3, [r3, #0]
   99566:	4619      	mov	r1, r3
   99568:	4a54      	ldr	r2, [pc, #336]	; (996bc <Cl_disinf_controller+0x964>)
   9956a:	460b      	mov	r3, r1
   9956c:	00db      	lsls	r3, r3, #3
   9956e:	1a5b      	subs	r3, r3, r1
   99570:	4413      	add	r3, r2
   99572:	3302      	adds	r3, #2
   99574:	781b      	ldrb	r3, [r3, #0]
   99576:	2b00      	cmp	r3, #0
   99578:	d015      	beq.n	995a6 <Cl_disinf_controller+0x84e>
						{
							sv_cntrl_setredalarm();
   9957a:	4b52      	ldr	r3, [pc, #328]	; (996c4 <Cl_disinf_controller+0x96c>)
   9957c:	4798      	blx	r3
							sv_cntrl_buzzer();
   9957e:	4b52      	ldr	r3, [pc, #328]	; (996c8 <Cl_disinf_controller+0x970>)
   99580:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   99582:	2208      	movs	r2, #8
   99584:	4951      	ldr	r1, [pc, #324]	; (996cc <Cl_disinf_controller+0x974>)
   99586:	2018      	movs	r0, #24
   99588:	4b34      	ldr	r3, [pc, #208]	; (9965c <Cl_disinf_controller+0x904>)
   9958a:	4798      	blx	r3
							Cl_Disinf_StopDisinf();
   9958c:	4b50      	ldr	r3, [pc, #320]	; (996d0 <Cl_disinf_controller+0x978>)
   9958e:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_INTER_1;
   99590:	4b38      	ldr	r3, [pc, #224]	; (99674 <Cl_disinf_controller+0x91c>)
   99592:	2211      	movs	r2, #17
   99594:	701a      	strb	r2, [r3, #0]
							alarm_flag1 = 1;
   99596:	4b4f      	ldr	r3, [pc, #316]	; (996d4 <Cl_disinf_controller+0x97c>)
   99598:	2201      	movs	r2, #1
   9959a:	701a      	strb	r2, [r3, #0]
							tempcount=0;
   9959c:	4b46      	ldr	r3, [pc, #280]	; (996b8 <Cl_disinf_controller+0x960>)
   9959e:	2200      	movs	r2, #0
   995a0:	801a      	strh	r2, [r3, #0]
							break;
   995a2:	bf00      	nop
								//Cl_Disinf_UpdateTimeInfo();
								
							}
						}
					}
								break;
   995a4:	e03b      	b.n	9961e <Cl_disinf_controller+0x8c6>
							alarm_flag1 = 1;
							tempcount=0;
							break;
						}
						
						else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   995a6:	4b44      	ldr	r3, [pc, #272]	; (996b8 <Cl_disinf_controller+0x960>)
   995a8:	881b      	ldrh	r3, [r3, #0]
   995aa:	2b0b      	cmp	r3, #11
   995ac:	d12b      	bne.n	99606 <Cl_disinf_controller+0x8ae>
						{
							if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   995ae:	4b42      	ldr	r3, [pc, #264]	; (996b8 <Cl_disinf_controller+0x960>)
   995b0:	881b      	ldrh	r3, [r3, #0]
   995b2:	4619      	mov	r1, r3
   995b4:	4a41      	ldr	r2, [pc, #260]	; (996bc <Cl_disinf_controller+0x964>)
   995b6:	460b      	mov	r3, r1
   995b8:	00db      	lsls	r3, r3, #3
   995ba:	1a5b      	subs	r3, r3, r1
   995bc:	4413      	add	r3, r2
   995be:	3302      	adds	r3, #2
   995c0:	781b      	ldrb	r3, [r3, #0]
   995c2:	f083 0301 	eor.w	r3, r3, #1
   995c6:	b2db      	uxtb	r3, r3
   995c8:	2b00      	cmp	r3, #0
   995ca:	d01c      	beq.n	99606 <Cl_disinf_controller+0x8ae>
							{
					 
								sv_cntrl_resetredalarm();
   995cc:	4b36      	ldr	r3, [pc, #216]	; (996a8 <Cl_disinf_controller+0x950>)
   995ce:	4798      	blx	r3
								sv_cntrl_nobuzzer();
   995d0:	4b36      	ldr	r3, [pc, #216]	; (996ac <Cl_disinf_controller+0x954>)
   995d2:	4798      	blx	r3
								alarm_flag = 1;
   995d4:	4b37      	ldr	r3, [pc, #220]	; (996b4 <Cl_disinf_controller+0x95c>)
   995d6:	2201      	movs	r2, #1
   995d8:	701a      	strb	r2, [r3, #0]
								if (alarm_flag1 == 0)
   995da:	4b3e      	ldr	r3, [pc, #248]	; (996d4 <Cl_disinf_controller+0x97c>)
   995dc:	781b      	ldrb	r3, [r3, #0]
   995de:	b2db      	uxtb	r3, r3
   995e0:	2b00      	cmp	r3, #0
   995e2:	d110      	bne.n	99606 <Cl_disinf_controller+0x8ae>
								{
								 command = CON_TX_COMMAND_DISINF_RESUMED;
   995e4:	233b      	movs	r3, #59	; 0x3b
   995e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   995ea:	f107 011b 	add.w	r1, r7, #27
   995ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   995f2:	2200      	movs	r2, #0
   995f4:	4618      	mov	r0, r3
   995f6:	4b19      	ldr	r3, [pc, #100]	; (9965c <Cl_disinf_controller+0x904>)
   995f8:	4798      	blx	r3
   995fa:	4603      	mov	r3, r0
   995fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   99600:	4b1c      	ldr	r3, [pc, #112]	; (99674 <Cl_disinf_controller+0x91c>)
   99602:	2208      	movs	r2, #8
   99604:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
								 
					case EVENT_DISINF_TICK_SECOND:
					for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99606:	4b2c      	ldr	r3, [pc, #176]	; (996b8 <Cl_disinf_controller+0x960>)
   99608:	881b      	ldrh	r3, [r3, #0]
   9960a:	3301      	adds	r3, #1
   9960c:	b29a      	uxth	r2, r3
   9960e:	4b2a      	ldr	r3, [pc, #168]	; (996b8 <Cl_disinf_controller+0x960>)
   99610:	801a      	strh	r2, [r3, #0]
   99612:	4b29      	ldr	r3, [pc, #164]	; (996b8 <Cl_disinf_controller+0x960>)
   99614:	881b      	ldrh	r3, [r3, #0]
   99616:	2b0b      	cmp	r3, #11
   99618:	d98e      	bls.n	99538 <Cl_disinf_controller+0x7e0>
								//Cl_Disinf_UpdateTimeInfo();
								
							}
						}
					}
								break;
   9961a:	e000      	b.n	9961e <Cl_disinf_controller+0x8c6>
					if (alarm_flag == 1)
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
						alarm_flag = 0;
					}
					break;
   9961c:	bf00      	nop
						}
					}
								break;
					
						}
			break;
   9961e:	e2a6      	b.n	99b6e <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   99620:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99624:	3b0c      	subs	r3, #12
   99626:	2b07      	cmp	r3, #7
   99628:	f200 80e6 	bhi.w	997f8 <Cl_disinf_controller+0xaa0>
   9962c:	a201      	add	r2, pc, #4	; (adr r2, 99634 <Cl_disinf_controller+0x8dc>)
   9962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99632:	bf00      	nop
   99634:	000997f9 	.word	0x000997f9
   99638:	000997f9 	.word	0x000997f9
   9963c:	000996d9 	.word	0x000996d9
   99640:	000996f3 	.word	0x000996f3
   99644:	000997f9 	.word	0x000997f9
   99648:	000997f9 	.word	0x000997f9
   9964c:	000997f9 	.word	0x000997f9
   99650:	000997cd 	.word	0x000997cd
   99654:	20072784 	.word	0x20072784
   99658:	000a4b3c 	.word	0x000a4b3c
   9965c:	00098601 	.word	0x00098601
   99660:	00096c9d 	.word	0x00096c9d
   99664:	00096cc5 	.word	0x00096cc5
   99668:	00096819 	.word	0x00096819
   9966c:	00083325 	.word	0x00083325
   99670:	00091b9d 	.word	0x00091b9d
   99674:	2007275b 	.word	0x2007275b
   99678:	000967dd 	.word	0x000967dd
   9967c:	000968f5 	.word	0x000968f5
   99680:	20072786 	.word	0x20072786
   99684:	000969f1 	.word	0x000969f1
   99688:	00096a29 	.word	0x00096a29
   9968c:	200725f3 	.word	0x200725f3
   99690:	00096855 	.word	0x00096855
   99694:	0009695d 	.word	0x0009695d
   99698:	0009687d 	.word	0x0009687d
   9969c:	00096c25 	.word	0x00096c25
   996a0:	00082ea1 	.word	0x00082ea1
   996a4:	0009a1cd 	.word	0x0009a1cd
   996a8:	00096b25 	.word	0x00096b25
   996ac:	00096b61 	.word	0x00096b61
   996b0:	00099fd9 	.word	0x00099fd9
   996b4:	20072759 	.word	0x20072759
   996b8:	200732ec 	.word	0x200732ec
   996bc:	20070a30 	.word	0x20070a30
   996c0:	00083041 	.word	0x00083041
   996c4:	00096ad5 	.word	0x00096ad5
   996c8:	00096b11 	.word	0x00096b11
   996cc:	000a4b30 	.word	0x000a4b30
   996d0:	00099f45 	.word	0x00099f45
   996d4:	2007275a 	.word	0x2007275a
							case EVENT_DISINF_TICK_50MS:
							break;
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
								if (avgtemp2_dummy > 75)
   996d8:	4bb9      	ldr	r3, [pc, #740]	; (999c0 <Cl_disinf_controller+0xc68>)
   996da:	681a      	ldr	r2, [r3, #0]
   996dc:	4bb9      	ldr	r3, [pc, #740]	; (999c4 <Cl_disinf_controller+0xc6c>)
   996de:	49ba      	ldr	r1, [pc, #744]	; (999c8 <Cl_disinf_controller+0xc70>)
   996e0:	4610      	mov	r0, r2
   996e2:	4798      	blx	r3
   996e4:	4603      	mov	r3, r0
   996e6:	2b00      	cmp	r3, #0
   996e8:	d100      	bne.n	996ec <Cl_disinf_controller+0x994>
								{
									sv_cntrl_poweroffheater();
								}
							break;
   996ea:	e088      	b.n	997fe <Cl_disinf_controller+0xaa6>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
								if (avgtemp2_dummy > 75)
								{
									sv_cntrl_poweroffheater();
   996ec:	4bb7      	ldr	r3, [pc, #732]	; (999cc <Cl_disinf_controller+0xc74>)
   996ee:	4798      	blx	r3
								}
							break;
   996f0:	e085      	b.n	997fe <Cl_disinf_controller+0xaa6>
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   996f2:	4bb7      	ldr	r3, [pc, #732]	; (999d0 <Cl_disinf_controller+0xc78>)
   996f4:	4798      	blx	r3
							Cl_disinfsecondscounter++;
   996f6:	4bb7      	ldr	r3, [pc, #732]	; (999d4 <Cl_disinf_controller+0xc7c>)
   996f8:	681b      	ldr	r3, [r3, #0]
   996fa:	3301      	adds	r3, #1
   996fc:	4ab5      	ldr	r2, [pc, #724]	; (999d4 <Cl_disinf_controller+0xc7c>)
   996fe:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   99700:	4bb5      	ldr	r3, [pc, #724]	; (999d8 <Cl_disinf_controller+0xc80>)
   99702:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   99704:	4bb3      	ldr	r3, [pc, #716]	; (999d4 <Cl_disinf_controller+0xc7c>)
   99706:	681b      	ldr	r3, [r3, #0]
   99708:	2b3c      	cmp	r3, #60	; 0x3c
   9970a:	d101      	bne.n	99710 <Cl_disinf_controller+0x9b8>
							{
								UpdateDisinfMinuteTick();	
   9970c:	4bb3      	ldr	r3, [pc, #716]	; (999dc <Cl_disinf_controller+0xc84>)
   9970e:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   99710:	4bb3      	ldr	r3, [pc, #716]	; (999e0 <Cl_disinf_controller+0xc88>)
   99712:	681b      	ldr	r3, [r3, #0]
   99714:	2b0f      	cmp	r3, #15
   99716:	dd71      	ble.n	997fc <Cl_disinf_controller+0xaa4>
							{
								Cl_Disinf_StopDisinf();
   99718:	4bb2      	ldr	r3, [pc, #712]	; (999e4 <Cl_disinf_controller+0xc8c>)
   9971a:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9971c:	2002      	movs	r0, #2
   9971e:	4bb2      	ldr	r3, [pc, #712]	; (999e8 <Cl_disinf_controller+0xc90>)
   99720:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   99722:	2003      	movs	r0, #3
   99724:	4bb0      	ldr	r3, [pc, #704]	; (999e8 <Cl_disinf_controller+0xc90>)
   99726:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   99728:	4ba8      	ldr	r3, [pc, #672]	; (999cc <Cl_disinf_controller+0xc74>)
   9972a:	4798      	blx	r3
								sv_prop_stopmixing();
   9972c:	4baf      	ldr	r3, [pc, #700]	; (999ec <Cl_disinf_controller+0xc94>)
   9972e:	4798      	blx	r3
								flag_hotrinse = 0;
   99730:	4baf      	ldr	r3, [pc, #700]	; (999f0 <Cl_disinf_controller+0xc98>)
   99732:	2200      	movs	r2, #0
   99734:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   99736:	2002      	movs	r0, #2
   99738:	4bae      	ldr	r3, [pc, #696]	; (999f4 <Cl_disinf_controller+0xc9c>)
   9973a:	4798      	blx	r3
   9973c:	4603      	mov	r3, r0
   9973e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   99742:	2001      	movs	r0, #1
   99744:	4bab      	ldr	r3, [pc, #684]	; (999f4 <Cl_disinf_controller+0xc9c>)
   99746:	4798      	blx	r3
   99748:	4603      	mov	r3, r0
   9974a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9974e:	2005      	movs	r0, #5
   99750:	4ba9      	ldr	r3, [pc, #676]	; (999f8 <Cl_disinf_controller+0xca0>)
   99752:	4798      	blx	r3
								if (flag_hotcitric == 1)
   99754:	4ba9      	ldr	r3, [pc, #676]	; (999fc <Cl_disinf_controller+0xca4>)
   99756:	781b      	ldrb	r3, [r3, #0]
   99758:	2b01      	cmp	r3, #1
   9975a:	d110      	bne.n	9977e <Cl_disinf_controller+0xa26>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9975c:	2339      	movs	r3, #57	; 0x39
   9975e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   99762:	2304      	movs	r3, #4
   99764:	76fb      	strb	r3, [r7, #27]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99766:	f107 011b 	add.w	r1, r7, #27
   9976a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9976e:	2201      	movs	r2, #1
   99770:	4618      	mov	r0, r3
   99772:	4ba3      	ldr	r3, [pc, #652]	; (99a00 <Cl_disinf_controller+0xca8>)
   99774:	4798      	blx	r3
   99776:	4603      	mov	r3, r0
   99778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9977c:	e013      	b.n	997a6 <Cl_disinf_controller+0xa4e>
								}
								else if (flag_na == 1)
   9977e:	4ba1      	ldr	r3, [pc, #644]	; (99a04 <Cl_disinf_controller+0xcac>)
   99780:	781b      	ldrb	r3, [r3, #0]
   99782:	2b01      	cmp	r3, #1
   99784:	d10f      	bne.n	997a6 <Cl_disinf_controller+0xa4e>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   99786:	2339      	movs	r3, #57	; 0x39
   99788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9978c:	2303      	movs	r3, #3
   9978e:	76fb      	strb	r3, [r7, #27]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99790:	f107 011b 	add.w	r1, r7, #27
   99794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99798:	2201      	movs	r2, #1
   9979a:	4618      	mov	r0, r3
   9979c:	4b98      	ldr	r3, [pc, #608]	; (99a00 <Cl_disinf_controller+0xca8>)
   9979e:	4798      	blx	r3
   997a0:	4603      	mov	r3, r0
   997a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   997a6:	4b95      	ldr	r3, [pc, #596]	; (999fc <Cl_disinf_controller+0xca4>)
   997a8:	2200      	movs	r2, #0
   997aa:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   997ac:	4b95      	ldr	r3, [pc, #596]	; (99a04 <Cl_disinf_controller+0xcac>)
   997ae:	2200      	movs	r2, #0
   997b0:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   997b2:	4b95      	ldr	r3, [pc, #596]	; (99a08 <Cl_disinf_controller+0xcb0>)
   997b4:	2200      	movs	r2, #0
   997b6:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   997b8:	2045      	movs	r0, #69	; 0x45
   997ba:	4b94      	ldr	r3, [pc, #592]	; (99a0c <Cl_disinf_controller+0xcb4>)
   997bc:	4798      	blx	r3
   997be:	4603      	mov	r3, r0
   997c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   997c4:	4b92      	ldr	r3, [pc, #584]	; (99a10 <Cl_disinf_controller+0xcb8>)
   997c6:	220a      	movs	r2, #10
   997c8:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   997ca:	e017      	b.n	997fc <Cl_disinf_controller+0xaa4>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   997cc:	4b91      	ldr	r3, [pc, #580]	; (99a14 <Cl_disinf_controller+0xcbc>)
   997ce:	4798      	blx	r3
   997d0:	4603      	mov	r3, r0
   997d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							command = CON_TX_COMMAND_DISINF_PAUSED;
   997d6:	2338      	movs	r3, #56	; 0x38
   997d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   997dc:	2300      	movs	r3, #0
   997de:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   997e0:	f107 011b 	add.w	r1, r7, #27
   997e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   997e8:	2200      	movs	r2, #0
   997ea:	4618      	mov	r0, r3
   997ec:	4b84      	ldr	r3, [pc, #528]	; (99a00 <Cl_disinf_controller+0xca8>)
   997ee:	4798      	blx	r3
   997f0:	4603      	mov	r3, r0
   997f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   997f6:	e002      	b.n	997fe <Cl_disinf_controller+0xaa6>
							default:break;
   997f8:	bf00      	nop
   997fa:	e1b8      	b.n	99b6e <Cl_disinf_controller+0xe16>
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
					 
							}
							break;
   997fc:	bf00      	nop
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
						}
						
				break;
   997fe:	e1b6      	b.n	99b6e <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   99800:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99804:	2b02      	cmp	r3, #2
   99806:	d000      	beq.n	9980a <Cl_disinf_controller+0xab2>
					 
							 //Send resumed
					 

							break;
							default:break;
   99808:	e019      	b.n	9983e <Cl_disinf_controller+0xae6>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9980a:	2045      	movs	r0, #69	; 0x45
   9980c:	4b7f      	ldr	r3, [pc, #508]	; (99a0c <Cl_disinf_controller+0xcb4>)
   9980e:	4798      	blx	r3
   99810:	4603      	mov	r3, r0
   99812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   99816:	233b      	movs	r3, #59	; 0x3b
   99818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9981c:	2300      	movs	r3, #0
   9981e:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99820:	f107 011b 	add.w	r1, r7, #27
   99824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99828:	2200      	movs	r2, #0
   9982a:	4618      	mov	r0, r3
   9982c:	4b74      	ldr	r3, [pc, #464]	; (99a00 <Cl_disinf_controller+0xca8>)
   9982e:	4798      	blx	r3
   99830:	4603      	mov	r3, r0
   99832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   99836:	4b76      	ldr	r3, [pc, #472]	; (99a10 <Cl_disinf_controller+0xcb8>)
   99838:	220a      	movs	r2, #10
   9983a:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9983c:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9983e:	e196      	b.n	99b6e <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   99840:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99844:	2b0f      	cmp	r3, #15
   99846:	d01c      	beq.n	99882 <Cl_disinf_controller+0xb2a>
   99848:	2b23      	cmp	r3, #35	; 0x23
   9984a:	d000      	beq.n	9984e <Cl_disinf_controller+0xaf6>
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
									default:break;
   9984c:	e027      	b.n	9989e <Cl_disinf_controller+0xb46>
								switch ( cl_disinfevent)
								{
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9984e:	233a      	movs	r3, #58	; 0x3a
   99850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   99854:	2300      	movs	r3, #0
   99856:	76fb      	strb	r3, [r7, #27]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99858:	f107 011b 	add.w	r1, r7, #27
   9985c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99860:	2200      	movs	r2, #0
   99862:	4618      	mov	r0, r3
   99864:	4b66      	ldr	r3, [pc, #408]	; (99a00 <Cl_disinf_controller+0xca8>)
   99866:	4798      	blx	r3
   99868:	4603      	mov	r3, r0
   9986a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9986e:	2054      	movs	r0, #84	; 0x54
   99870:	4b66      	ldr	r3, [pc, #408]	; (99a0c <Cl_disinf_controller+0xcb4>)
   99872:	4798      	blx	r3
   99874:	4603      	mov	r3, r0
   99876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9987a:	4b65      	ldr	r3, [pc, #404]	; (99a10 <Cl_disinf_controller+0xcb8>)
   9987c:	220f      	movs	r2, #15
   9987e:	701a      	strb	r2, [r3, #0]
									 
									break;
   99880:	e00d      	b.n	9989e <Cl_disinf_controller+0xb46>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   99882:	4b54      	ldr	r3, [pc, #336]	; (999d4 <Cl_disinf_controller+0xc7c>)
   99884:	681b      	ldr	r3, [r3, #0]
   99886:	3301      	adds	r3, #1
   99888:	4a52      	ldr	r2, [pc, #328]	; (999d4 <Cl_disinf_controller+0xc7c>)
   9988a:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9988c:	4b52      	ldr	r3, [pc, #328]	; (999d8 <Cl_disinf_controller+0xc80>)
   9988e:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   99890:	4b50      	ldr	r3, [pc, #320]	; (999d4 <Cl_disinf_controller+0xc7c>)
   99892:	681b      	ldr	r3, [r3, #0]
   99894:	2b3c      	cmp	r3, #60	; 0x3c
   99896:	d101      	bne.n	9989c <Cl_disinf_controller+0xb44>
									{
										UpdateDisinfMinuteTick();
   99898:	4b50      	ldr	r3, [pc, #320]	; (999dc <Cl_disinf_controller+0xc84>)
   9989a:	4798      	blx	r3
									}
									break;
   9989c:	bf00      	nop
									default:break;
								}
				
				
				break;
   9989e:	e166      	b.n	99b6e <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   998a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   998a4:	2b01      	cmp	r3, #1
   998a6:	d009      	beq.n	998bc <Cl_disinf_controller+0xb64>
   998a8:	2b24      	cmp	r3, #36	; 0x24
   998aa:	d000      	beq.n	998ae <Cl_disinf_controller+0xb56>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   998ac:	e15f      	b.n	99b6e <Cl_disinf_controller+0xe16>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   998ae:	2045      	movs	r0, #69	; 0x45
   998b0:	4b56      	ldr	r3, [pc, #344]	; (99a0c <Cl_disinf_controller+0xcb4>)
   998b2:	4798      	blx	r3
   998b4:	4603      	mov	r3, r0
   998b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   998ba:	e02d      	b.n	99918 <Cl_disinf_controller+0xbc0>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   998bc:	2044      	movs	r0, #68	; 0x44
   998be:	4b53      	ldr	r3, [pc, #332]	; (99a0c <Cl_disinf_controller+0xcb4>)
   998c0:	4798      	blx	r3
   998c2:	4603      	mov	r3, r0
   998c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   998c8:	4b53      	ldr	r3, [pc, #332]	; (99a18 <Cl_disinf_controller+0xcc0>)
   998ca:	7e1b      	ldrb	r3, [r3, #24]
   998cc:	2b00      	cmp	r3, #0
   998ce:	d00f      	beq.n	998f0 <Cl_disinf_controller+0xb98>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   998d0:	4b51      	ldr	r3, [pc, #324]	; (99a18 <Cl_disinf_controller+0xcc0>)
   998d2:	791b      	ldrb	r3, [r3, #4]
   998d4:	743b      	strb	r3, [r7, #16]
								if (cl_temp.bytearray[0] == 4)
   998d6:	7c3b      	ldrb	r3, [r7, #16]
   998d8:	2b04      	cmp	r3, #4
   998da:	d103      	bne.n	998e4 <Cl_disinf_controller+0xb8c>
								{
										flag_hotcitric = 1;
   998dc:	4b47      	ldr	r3, [pc, #284]	; (999fc <Cl_disinf_controller+0xca4>)
   998de:	2201      	movs	r2, #1
   998e0:	701a      	strb	r2, [r3, #0]
   998e2:	e005      	b.n	998f0 <Cl_disinf_controller+0xb98>
								}
								else if (cl_temp.bytearray[0] == 3)
   998e4:	7c3b      	ldrb	r3, [r7, #16]
   998e6:	2b03      	cmp	r3, #3
   998e8:	d102      	bne.n	998f0 <Cl_disinf_controller+0xb98>
								{
										flag_na = 1;
   998ea:	4b46      	ldr	r3, [pc, #280]	; (99a04 <Cl_disinf_controller+0xcac>)
   998ec:	2201      	movs	r2, #1
   998ee:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   998f0:	233c      	movs	r3, #60	; 0x3c
   998f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   998f6:	2301      	movs	r3, #1
   998f8:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   998fa:	f107 011b 	add.w	r1, r7, #27
   998fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99902:	2201      	movs	r2, #1
   99904:	4618      	mov	r0, r3
   99906:	4b3e      	ldr	r3, [pc, #248]	; (99a00 <Cl_disinf_controller+0xca8>)
   99908:	4798      	blx	r3
   9990a:	4603      	mov	r3, r0
   9990c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   99910:	4b3f      	ldr	r3, [pc, #252]	; (99a10 <Cl_disinf_controller+0xcb8>)
   99912:	2203      	movs	r2, #3
   99914:	701a      	strb	r2, [r3, #0]
						break;
   99916:	bf00      	nop
					}
				break;
   99918:	e129      	b.n	99b6e <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9991a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9991e:	3b01      	subs	r3, #1
   99920:	2b24      	cmp	r3, #36	; 0x24
   99922:	f200 8123 	bhi.w	99b6c <Cl_disinf_controller+0xe14>
   99926:	a201      	add	r2, pc, #4	; (adr r2, 9992c <Cl_disinf_controller+0xbd4>)
   99928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9992c:	00099a1d 	.word	0x00099a1d
   99930:	00099b6d 	.word	0x00099b6d
   99934:	00099b6d 	.word	0x00099b6d
   99938:	00099b6d 	.word	0x00099b6d
   9993c:	00099b6d 	.word	0x00099b6d
   99940:	00099b6d 	.word	0x00099b6d
   99944:	00099b6d 	.word	0x00099b6d
   99948:	00099b6d 	.word	0x00099b6d
   9994c:	00099b6d 	.word	0x00099b6d
   99950:	00099b6d 	.word	0x00099b6d
   99954:	00099b6d 	.word	0x00099b6d
   99958:	00099b6d 	.word	0x00099b6d
   9995c:	00099b6d 	.word	0x00099b6d
   99960:	00099b6d 	.word	0x00099b6d
   99964:	00099a85 	.word	0x00099a85
   99968:	00099b5b 	.word	0x00099b5b
   9996c:	00099b6d 	.word	0x00099b6d
   99970:	00099b6d 	.word	0x00099b6d
   99974:	00099a79 	.word	0x00099a79
   99978:	00099b6d 	.word	0x00099b6d
   9997c:	00099b6d 	.word	0x00099b6d
   99980:	00099b6d 	.word	0x00099b6d
   99984:	00099b6d 	.word	0x00099b6d
   99988:	00099b6d 	.word	0x00099b6d
   9998c:	00099b6d 	.word	0x00099b6d
   99990:	00099b6d 	.word	0x00099b6d
   99994:	00099b6d 	.word	0x00099b6d
   99998:	00099b6d 	.word	0x00099b6d
   9999c:	00099b6d 	.word	0x00099b6d
   999a0:	00099b6d 	.word	0x00099b6d
   999a4:	00099b6d 	.word	0x00099b6d
   999a8:	00099b6d 	.word	0x00099b6d
   999ac:	00099b6d 	.word	0x00099b6d
   999b0:	00099b6d 	.word	0x00099b6d
   999b4:	00099b6d 	.word	0x00099b6d
   999b8:	00099b6d 	.word	0x00099b6d
   999bc:	00099b43 	.word	0x00099b43
   999c0:	200725c0 	.word	0x200725c0
   999c4:	000a2a05 	.word	0x000a2a05
   999c8:	42960000 	.word	0x42960000
   999cc:	00096869 	.word	0x00096869
   999d0:	0009a42d 	.word	0x0009a42d
   999d4:	2007275c 	.word	0x2007275c
   999d8:	0009a4f9 	.word	0x0009a4f9
   999dc:	0009a8d1 	.word	0x0009a8d1
   999e0:	20072760 	.word	0x20072760
   999e4:	00099f45 	.word	0x00099f45
   999e8:	0009689d 	.word	0x0009689d
   999ec:	00096c75 	.word	0x00096c75
   999f0:	200725f4 	.word	0x200725f4
   999f4:	00096819 	.word	0x00096819
   999f8:	00083325 	.word	0x00083325
   999fc:	200725f3 	.word	0x200725f3
   99a00:	00098601 	.word	0x00098601
   99a04:	200725f5 	.word	0x200725f5
   99a08:	20072786 	.word	0x20072786
   99a0c:	0008a915 	.word	0x0008a915
   99a10:	2007275b 	.word	0x2007275b
   99a14:	0009a1cd 	.word	0x0009a1cd
   99a18:	20072f2c 	.word	0x20072f2c
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   99a1c:	2044      	movs	r0, #68	; 0x44
   99a1e:	4b56      	ldr	r3, [pc, #344]	; (99b78 <Cl_disinf_controller+0xe20>)
   99a20:	4798      	blx	r3
   99a22:	4603      	mov	r3, r0
   99a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   99a28:	4b54      	ldr	r3, [pc, #336]	; (99b7c <Cl_disinf_controller+0xe24>)
   99a2a:	7e1b      	ldrb	r3, [r3, #24]
   99a2c:	2b00      	cmp	r3, #0
   99a2e:	d00f      	beq.n	99a50 <Cl_disinf_controller+0xcf8>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   99a30:	4b52      	ldr	r3, [pc, #328]	; (99b7c <Cl_disinf_controller+0xe24>)
   99a32:	791b      	ldrb	r3, [r3, #4]
   99a34:	733b      	strb	r3, [r7, #12]
					if (cl_temp.bytearray[0] == 4)
   99a36:	7b3b      	ldrb	r3, [r7, #12]
   99a38:	2b04      	cmp	r3, #4
   99a3a:	d103      	bne.n	99a44 <Cl_disinf_controller+0xcec>
					{
						flag_hotcitric = 1;
   99a3c:	4b50      	ldr	r3, [pc, #320]	; (99b80 <Cl_disinf_controller+0xe28>)
   99a3e:	2201      	movs	r2, #1
   99a40:	701a      	strb	r2, [r3, #0]
   99a42:	e005      	b.n	99a50 <Cl_disinf_controller+0xcf8>
					}
					else if (cl_temp.bytearray[0] == 3)
   99a44:	7b3b      	ldrb	r3, [r7, #12]
   99a46:	2b03      	cmp	r3, #3
   99a48:	d102      	bne.n	99a50 <Cl_disinf_controller+0xcf8>
					{
						flag_na = 1;
   99a4a:	4b4e      	ldr	r3, [pc, #312]	; (99b84 <Cl_disinf_controller+0xe2c>)
   99a4c:	2201      	movs	r2, #1
   99a4e:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   99a50:	233c      	movs	r3, #60	; 0x3c
   99a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   99a56:	2301      	movs	r3, #1
   99a58:	76fb      	strb	r3, [r7, #27]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99a5a:	f107 011b 	add.w	r1, r7, #27
   99a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99a62:	2201      	movs	r2, #1
   99a64:	4618      	mov	r0, r3
   99a66:	4b48      	ldr	r3, [pc, #288]	; (99b88 <Cl_disinf_controller+0xe30>)
   99a68:	4798      	blx	r3
   99a6a:	4603      	mov	r3, r0
   99a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   99a70:	4b46      	ldr	r3, [pc, #280]	; (99b8c <Cl_disinf_controller+0xe34>)
   99a72:	2203      	movs	r2, #3
   99a74:	701a      	strb	r2, [r3, #0]
				break;
   99a76:	e076      	b.n	99b66 <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   99a78:	4b45      	ldr	r3, [pc, #276]	; (99b90 <Cl_disinf_controller+0xe38>)
   99a7a:	4798      	blx	r3
   99a7c:	4603      	mov	r3, r0
   99a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   99a82:	e070      	b.n	99b66 <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99a84:	4b43      	ldr	r3, [pc, #268]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99a86:	2200      	movs	r2, #0
   99a88:	801a      	strh	r2, [r3, #0]
   99a8a:	e055      	b.n	99b38 <Cl_disinf_controller+0xde0>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   99a8c:	4b41      	ldr	r3, [pc, #260]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99a8e:	881b      	ldrh	r3, [r3, #0]
   99a90:	4619      	mov	r1, r3
   99a92:	4a41      	ldr	r2, [pc, #260]	; (99b98 <Cl_disinf_controller+0xe40>)
   99a94:	460b      	mov	r3, r1
   99a96:	00db      	lsls	r3, r3, #3
   99a98:	1a5b      	subs	r3, r3, r1
   99a9a:	4413      	add	r3, r2
   99a9c:	7818      	ldrb	r0, [r3, #0]
   99a9e:	4b3d      	ldr	r3, [pc, #244]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99aa0:	881b      	ldrh	r3, [r3, #0]
   99aa2:	461a      	mov	r2, r3
   99aa4:	4613      	mov	r3, r2
   99aa6:	00db      	lsls	r3, r3, #3
   99aa8:	1a9b      	subs	r3, r3, r2
   99aaa:	4a3b      	ldr	r2, [pc, #236]	; (99b98 <Cl_disinf_controller+0xe40>)
   99aac:	4413      	add	r3, r2
   99aae:	3302      	adds	r3, #2
   99ab0:	4619      	mov	r1, r3
   99ab2:	4b3a      	ldr	r3, [pc, #232]	; (99b9c <Cl_disinf_controller+0xe44>)
   99ab4:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   99ab6:	4b37      	ldr	r3, [pc, #220]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99ab8:	881b      	ldrh	r3, [r3, #0]
   99aba:	4619      	mov	r1, r3
   99abc:	4a36      	ldr	r2, [pc, #216]	; (99b98 <Cl_disinf_controller+0xe40>)
   99abe:	460b      	mov	r3, r1
   99ac0:	00db      	lsls	r3, r3, #3
   99ac2:	1a5b      	subs	r3, r3, r1
   99ac4:	4413      	add	r3, r2
   99ac6:	3302      	adds	r3, #2
   99ac8:	781b      	ldrb	r3, [r3, #0]
   99aca:	2b00      	cmp	r3, #0
   99acc:	d00e      	beq.n	99aec <Cl_disinf_controller+0xd94>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   99ace:	2208      	movs	r2, #8
   99ad0:	4933      	ldr	r1, [pc, #204]	; (99ba0 <Cl_disinf_controller+0xe48>)
   99ad2:	2018      	movs	r0, #24
   99ad4:	4b2c      	ldr	r3, [pc, #176]	; (99b88 <Cl_disinf_controller+0xe30>)
   99ad6:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   99ad8:	4b32      	ldr	r3, [pc, #200]	; (99ba4 <Cl_disinf_controller+0xe4c>)
   99ada:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   99adc:	4b2b      	ldr	r3, [pc, #172]	; (99b8c <Cl_disinf_controller+0xe34>)
   99ade:	220c      	movs	r2, #12
   99ae0:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   99ae2:	4b2c      	ldr	r3, [pc, #176]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99ae4:	2200      	movs	r2, #0
   99ae6:	801a      	strh	r2, [r3, #0]
						break;
   99ae8:	bf00      	nop
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   99aea:	e03c      	b.n	99b66 <Cl_disinf_controller+0xe0e>
						//alarm_flag = 1;
						tempcount=0;
						break;
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   99aec:	4b29      	ldr	r3, [pc, #164]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99aee:	881b      	ldrh	r3, [r3, #0]
   99af0:	2b0b      	cmp	r3, #11
   99af2:	d11b      	bne.n	99b2c <Cl_disinf_controller+0xdd4>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   99af4:	4b27      	ldr	r3, [pc, #156]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99af6:	881b      	ldrh	r3, [r3, #0]
   99af8:	4619      	mov	r1, r3
   99afa:	4a27      	ldr	r2, [pc, #156]	; (99b98 <Cl_disinf_controller+0xe40>)
   99afc:	460b      	mov	r3, r1
   99afe:	00db      	lsls	r3, r3, #3
   99b00:	1a5b      	subs	r3, r3, r1
   99b02:	4413      	add	r3, r2
   99b04:	3302      	adds	r3, #2
   99b06:	781b      	ldrb	r3, [r3, #0]
   99b08:	f083 0301 	eor.w	r3, r3, #1
   99b0c:	b2db      	uxtb	r3, r3
   99b0e:	2b00      	cmp	r3, #0
   99b10:	d00c      	beq.n	99b2c <Cl_disinf_controller+0xdd4>
						{
							sv_cntrl_resetredalarm();
   99b12:	4b25      	ldr	r3, [pc, #148]	; (99ba8 <Cl_disinf_controller+0xe50>)
   99b14:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   99b16:	4b25      	ldr	r3, [pc, #148]	; (99bac <Cl_disinf_controller+0xe54>)
   99b18:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   99b1a:	4b25      	ldr	r3, [pc, #148]	; (99bb0 <Cl_disinf_controller+0xe58>)
   99b1c:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   99b1e:	2208      	movs	r2, #8
   99b20:	4924      	ldr	r1, [pc, #144]	; (99bb4 <Cl_disinf_controller+0xe5c>)
   99b22:	2018      	movs	r0, #24
   99b24:	4b18      	ldr	r3, [pc, #96]	; (99b88 <Cl_disinf_controller+0xe30>)
   99b26:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   99b28:	4b23      	ldr	r3, [pc, #140]	; (99bb8 <Cl_disinf_controller+0xe60>)
   99b2a:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99b2c:	4b19      	ldr	r3, [pc, #100]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99b2e:	881b      	ldrh	r3, [r3, #0]
   99b30:	3301      	adds	r3, #1
   99b32:	b29a      	uxth	r2, r3
   99b34:	4b17      	ldr	r3, [pc, #92]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99b36:	801a      	strh	r2, [r3, #0]
   99b38:	4b16      	ldr	r3, [pc, #88]	; (99b94 <Cl_disinf_controller+0xe3c>)
   99b3a:	881b      	ldrh	r3, [r3, #0]
   99b3c:	2b0b      	cmp	r3, #11
   99b3e:	d9a5      	bls.n	99a8c <Cl_disinf_controller+0xd34>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   99b40:	e011      	b.n	99b66 <Cl_disinf_controller+0xe0e>
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   99b42:	4b19      	ldr	r3, [pc, #100]	; (99ba8 <Cl_disinf_controller+0xe50>)
   99b44:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   99b46:	4b19      	ldr	r3, [pc, #100]	; (99bac <Cl_disinf_controller+0xe54>)
   99b48:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   99b4a:	4b19      	ldr	r3, [pc, #100]	; (99bb0 <Cl_disinf_controller+0xe58>)
   99b4c:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   99b4e:	4b1b      	ldr	r3, [pc, #108]	; (99bbc <Cl_disinf_controller+0xe64>)
   99b50:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   99b52:	4b0e      	ldr	r3, [pc, #56]	; (99b8c <Cl_disinf_controller+0xe34>)
   99b54:	2208      	movs	r2, #8
   99b56:	701a      	strb	r2, [r3, #0]
				break;
   99b58:	e005      	b.n	99b66 <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   99b5a:	4b17      	ldr	r3, [pc, #92]	; (99bb8 <Cl_disinf_controller+0xe60>)
   99b5c:	4798      	blx	r3
   99b5e:	4603      	mov	r3, r0
   99b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   99b64:	bf00      	nop
				
			}
			break;
   99b66:	e001      	b.n	99b6c <Cl_disinf_controller+0xe14>
			default:break;
   99b68:	bf00      	nop
   99b6a:	e000      	b.n	99b6e <Cl_disinf_controller+0xe16>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   99b6c:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   99b6e:	2300      	movs	r3, #0
}
   99b70:	4618      	mov	r0, r3
   99b72:	372c      	adds	r7, #44	; 0x2c
   99b74:	46bd      	mov	sp, r7
   99b76:	bd90      	pop	{r4, r7, pc}
   99b78:	0008a915 	.word	0x0008a915
   99b7c:	20072f2c 	.word	0x20072f2c
   99b80:	200725f3 	.word	0x200725f3
   99b84:	200725f5 	.word	0x200725f5
   99b88:	00098601 	.word	0x00098601
   99b8c:	2007275b 	.word	0x2007275b
   99b90:	0009a1cd 	.word	0x0009a1cd
   99b94:	200732ec 	.word	0x200732ec
   99b98:	20070a30 	.word	0x20070a30
   99b9c:	00083041 	.word	0x00083041
   99ba0:	000a4b30 	.word	0x000a4b30
   99ba4:	00099f45 	.word	0x00099f45
   99ba8:	00096b25 	.word	0x00096b25
   99bac:	00096b39 	.word	0x00096b39
   99bb0:	00096b61 	.word	0x00096b61
   99bb4:	000a4b40 	.word	0x000a4b40
   99bb8:	0009a42d 	.word	0x0009a42d
   99bbc:	00099fd9 	.word	0x00099fd9

00099bc0 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   99bc0:	b480      	push	{r7}
   99bc2:	b083      	sub	sp, #12
   99bc4:	af00      	add	r7, sp, #0
   99bc6:	4603      	mov	r3, r0
   99bc8:	6039      	str	r1, [r7, #0]
   99bca:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   99bcc:	79fb      	ldrb	r3, [r7, #7]
   99bce:	3b07      	subs	r3, #7
   99bd0:	2b4d      	cmp	r3, #77	; 0x4d
   99bd2:	f200 8107 	bhi.w	99de4 <cl_disinf_translatemacevent+0x224>
   99bd6:	a201      	add	r2, pc, #4	; (adr r2, 99bdc <cl_disinf_translatemacevent+0x1c>)
   99bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99bdc:	00099d9d 	.word	0x00099d9d
   99be0:	00099de5 	.word	0x00099de5
   99be4:	00099de5 	.word	0x00099de5
   99be8:	00099dcd 	.word	0x00099dcd
   99bec:	00099dd5 	.word	0x00099dd5
   99bf0:	00099ddd 	.word	0x00099ddd
   99bf4:	00099d95 	.word	0x00099d95
   99bf8:	00099da5 	.word	0x00099da5
   99bfc:	00099dad 	.word	0x00099dad
   99c00:	00099db5 	.word	0x00099db5
   99c04:	00099de5 	.word	0x00099de5
   99c08:	00099de5 	.word	0x00099de5
   99c0c:	00099de5 	.word	0x00099de5
   99c10:	00099de5 	.word	0x00099de5
   99c14:	00099de5 	.word	0x00099de5
   99c18:	00099de5 	.word	0x00099de5
   99c1c:	00099de5 	.word	0x00099de5
   99c20:	00099de5 	.word	0x00099de5
   99c24:	00099de5 	.word	0x00099de5
   99c28:	00099de5 	.word	0x00099de5
   99c2c:	00099de5 	.word	0x00099de5
   99c30:	00099de5 	.word	0x00099de5
   99c34:	00099de5 	.word	0x00099de5
   99c38:	00099de5 	.word	0x00099de5
   99c3c:	00099dbd 	.word	0x00099dbd
   99c40:	00099dc5 	.word	0x00099dc5
   99c44:	00099de5 	.word	0x00099de5
   99c48:	00099de5 	.word	0x00099de5
   99c4c:	00099de5 	.word	0x00099de5
   99c50:	00099de5 	.word	0x00099de5
   99c54:	00099de5 	.word	0x00099de5
   99c58:	00099de5 	.word	0x00099de5
   99c5c:	00099de5 	.word	0x00099de5
   99c60:	00099de5 	.word	0x00099de5
   99c64:	00099d1d 	.word	0x00099d1d
   99c68:	00099de5 	.word	0x00099de5
   99c6c:	00099de5 	.word	0x00099de5
   99c70:	00099de5 	.word	0x00099de5
   99c74:	00099d8d 	.word	0x00099d8d
   99c78:	00099d85 	.word	0x00099d85
   99c7c:	00099de5 	.word	0x00099de5
   99c80:	00099de5 	.word	0x00099de5
   99c84:	00099de5 	.word	0x00099de5
   99c88:	00099de5 	.word	0x00099de5
   99c8c:	00099de5 	.word	0x00099de5
   99c90:	00099de5 	.word	0x00099de5
   99c94:	00099de5 	.word	0x00099de5
   99c98:	00099de5 	.word	0x00099de5
   99c9c:	00099de5 	.word	0x00099de5
   99ca0:	00099d55 	.word	0x00099d55
   99ca4:	00099d5d 	.word	0x00099d5d
   99ca8:	00099d65 	.word	0x00099d65
   99cac:	00099d6d 	.word	0x00099d6d
   99cb0:	00099d75 	.word	0x00099d75
   99cb4:	00099d7d 	.word	0x00099d7d
   99cb8:	00099de5 	.word	0x00099de5
   99cbc:	00099d15 	.word	0x00099d15
   99cc0:	00099d25 	.word	0x00099d25
   99cc4:	00099d2d 	.word	0x00099d2d
   99cc8:	00099de5 	.word	0x00099de5
   99ccc:	00099de5 	.word	0x00099de5
   99cd0:	00099de5 	.word	0x00099de5
   99cd4:	00099de5 	.word	0x00099de5
   99cd8:	00099de5 	.word	0x00099de5
   99cdc:	00099de5 	.word	0x00099de5
   99ce0:	00099de5 	.word	0x00099de5
   99ce4:	00099de5 	.word	0x00099de5
   99ce8:	00099de5 	.word	0x00099de5
   99cec:	00099de5 	.word	0x00099de5
   99cf0:	00099de5 	.word	0x00099de5
   99cf4:	00099de5 	.word	0x00099de5
   99cf8:	00099de5 	.word	0x00099de5
   99cfc:	00099de5 	.word	0x00099de5
   99d00:	00099de5 	.word	0x00099de5
   99d04:	00099d4d 	.word	0x00099d4d
   99d08:	00099d35 	.word	0x00099d35
   99d0c:	00099d3d 	.word	0x00099d3d
   99d10:	00099d45 	.word	0x00099d45
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   99d14:	683b      	ldr	r3, [r7, #0]
   99d16:	2201      	movs	r2, #1
   99d18:	701a      	strb	r2, [r3, #0]
		break;
   99d1a:	e064      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   99d1c:	683b      	ldr	r3, [r7, #0]
   99d1e:	2225      	movs	r2, #37	; 0x25
   99d20:	701a      	strb	r2, [r3, #0]
		break;
   99d22:	e060      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   99d24:	683b      	ldr	r3, [r7, #0]
   99d26:	2202      	movs	r2, #2
   99d28:	701a      	strb	r2, [r3, #0]
		break;
   99d2a:	e05c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   99d2c:	683b      	ldr	r3, [r7, #0]
   99d2e:	2203      	movs	r2, #3
   99d30:	701a      	strb	r2, [r3, #0]
		break;
   99d32:	e058      	b.n	99de6 <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   99d34:	683b      	ldr	r3, [r7, #0]
   99d36:	2222      	movs	r2, #34	; 0x22
   99d38:	701a      	strb	r2, [r3, #0]
		break;
   99d3a:	e054      	b.n	99de6 <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   99d3c:	683b      	ldr	r3, [r7, #0]
   99d3e:	2223      	movs	r2, #35	; 0x23
   99d40:	701a      	strb	r2, [r3, #0]
		break;
   99d42:	e050      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   99d44:	683b      	ldr	r3, [r7, #0]
   99d46:	2216      	movs	r2, #22
   99d48:	701a      	strb	r2, [r3, #0]
		break;
   99d4a:	e04c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   99d4c:	683b      	ldr	r3, [r7, #0]
   99d4e:	2221      	movs	r2, #33	; 0x21
   99d50:	701a      	strb	r2, [r3, #0]
		break;
   99d52:	e048      	b.n	99de6 <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   99d54:	683b      	ldr	r3, [r7, #0]
   99d56:	220c      	movs	r2, #12
   99d58:	701a      	strb	r2, [r3, #0]
		break;
   99d5a:	e044      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   99d5c:	683b      	ldr	r3, [r7, #0]
   99d5e:	220d      	movs	r2, #13
   99d60:	701a      	strb	r2, [r3, #0]
		break;
   99d62:	e040      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   99d64:	683b      	ldr	r3, [r7, #0]
   99d66:	220e      	movs	r2, #14
   99d68:	701a      	strb	r2, [r3, #0]
		break;
   99d6a:	e03c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   99d6c:	683b      	ldr	r3, [r7, #0]
   99d6e:	220f      	movs	r2, #15
   99d70:	701a      	strb	r2, [r3, #0]
		break;
   99d72:	e038      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   99d74:	683b      	ldr	r3, [r7, #0]
   99d76:	2210      	movs	r2, #16
   99d78:	701a      	strb	r2, [r3, #0]
		break;
   99d7a:	e034      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   99d7c:	683b      	ldr	r3, [r7, #0]
   99d7e:	2211      	movs	r2, #17
   99d80:	701a      	strb	r2, [r3, #0]
		break;
   99d82:	e030      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   99d84:	683b      	ldr	r3, [r7, #0]
   99d86:	2213      	movs	r2, #19
   99d88:	701a      	strb	r2, [r3, #0]
		break;
   99d8a:	e02c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   99d8c:	683b      	ldr	r3, [r7, #0]
   99d8e:	2212      	movs	r2, #18
   99d90:	701a      	strb	r2, [r3, #0]
		break;
   99d92:	e028      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   99d94:	683b      	ldr	r3, [r7, #0]
   99d96:	2215      	movs	r2, #21
   99d98:	701a      	strb	r2, [r3, #0]
		break;
   99d9a:	e024      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   99d9c:	683b      	ldr	r3, [r7, #0]
   99d9e:	2224      	movs	r2, #36	; 0x24
   99da0:	701a      	strb	r2, [r3, #0]
		break;
   99da2:	e020      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   99da4:	683b      	ldr	r3, [r7, #0]
   99da6:	2214      	movs	r2, #20
   99da8:	701a      	strb	r2, [r3, #0]
		break;
   99daa:	e01c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   99dac:	683b      	ldr	r3, [r7, #0]
   99dae:	2217      	movs	r2, #23
   99db0:	701a      	strb	r2, [r3, #0]
		break;
   99db2:	e018      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   99db4:	683b      	ldr	r3, [r7, #0]
   99db6:	2218      	movs	r2, #24
   99db8:	701a      	strb	r2, [r3, #0]
		break;
   99dba:	e014      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   99dbc:	683b      	ldr	r3, [r7, #0]
   99dbe:	221c      	movs	r2, #28
   99dc0:	701a      	strb	r2, [r3, #0]
		break;
   99dc2:	e010      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   99dc4:	683b      	ldr	r3, [r7, #0]
   99dc6:	221d      	movs	r2, #29
   99dc8:	701a      	strb	r2, [r3, #0]
		break;
   99dca:	e00c      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   99dcc:	683b      	ldr	r3, [r7, #0]
   99dce:	221e      	movs	r2, #30
   99dd0:	701a      	strb	r2, [r3, #0]
		break;
   99dd2:	e008      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   99dd4:	683b      	ldr	r3, [r7, #0]
   99dd6:	221f      	movs	r2, #31
   99dd8:	701a      	strb	r2, [r3, #0]
		break;
   99dda:	e004      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   99ddc:	683b      	ldr	r3, [r7, #0]
   99dde:	2220      	movs	r2, #32
   99de0:	701a      	strb	r2, [r3, #0]
		break;
   99de2:	e000      	b.n	99de6 <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   99de4:	bf00      	nop
	}
	return CL_OK;
   99de6:	2300      	movs	r3, #0
}
   99de8:	4618      	mov	r0, r3
   99dea:	370c      	adds	r7, #12
   99dec:	46bd      	mov	sp, r7
   99dee:	bc80      	pop	{r7}
   99df0:	4770      	bx	lr
   99df2:	bf00      	nop

00099df4 <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   99df4:	b590      	push	{r4, r7, lr}
   99df6:	b085      	sub	sp, #20
   99df8:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   99dfa:	2300      	movs	r3, #0
   99dfc:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99dfe:	234a      	movs	r3, #74	; 0x4a
   99e00:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   99e02:	2300      	movs	r3, #0
   99e04:	603b      	str	r3, [r7, #0]
	Cl_Uint8Type data = 0;
   99e06:	2300      	movs	r3, #0
   99e08:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   99e0a:	2001      	movs	r0, #1
   99e0c:	4b42      	ldr	r3, [pc, #264]	; (99f18 <Cl_Disinf_StartDisinf+0x124>)
   99e0e:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   99e10:	f44f 7016 	mov.w	r0, #600	; 0x258
   99e14:	4b41      	ldr	r3, [pc, #260]	; (99f1c <Cl_Disinf_StartDisinf+0x128>)
   99e16:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   99e18:	2001      	movs	r0, #1
   99e1a:	4b41      	ldr	r3, [pc, #260]	; (99f20 <Cl_Disinf_StartDisinf+0x12c>)
   99e1c:	4798      	blx	r3
   99e1e:	4603      	mov	r3, r0
   99e20:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   99e22:	f44f 7116 	mov.w	r1, #600	; 0x258
   99e26:	2001      	movs	r0, #1
   99e28:	4b3e      	ldr	r3, [pc, #248]	; (99f24 <Cl_Disinf_StartDisinf+0x130>)
   99e2a:	4798      	blx	r3
   99e2c:	4603      	mov	r3, r0
   99e2e:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   99e30:	2004      	movs	r0, #4
   99e32:	4b3d      	ldr	r3, [pc, #244]	; (99f28 <Cl_Disinf_StartDisinf+0x134>)
   99e34:	4798      	blx	r3
   99e36:	4603      	mov	r3, r0
   99e38:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   99e3a:	79fb      	ldrb	r3, [r7, #7]
   99e3c:	2b00      	cmp	r3, #0
   99e3e:	d165      	bne.n	99f0c <Cl_Disinf_StartDisinf+0x118>
	{
		Cl_disinfOpenFillTimeOut = false;
   99e40:	4b3a      	ldr	r3, [pc, #232]	; (99f2c <Cl_Disinf_StartDisinf+0x138>)
   99e42:	2200      	movs	r2, #0
   99e44:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   99e46:	4b3a      	ldr	r3, [pc, #232]	; (99f30 <Cl_Disinf_StartDisinf+0x13c>)
   99e48:	4798      	blx	r3
   99e4a:	4603      	mov	r3, r0
   99e4c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   99e4e:	2001      	movs	r0, #1
   99e50:	4b38      	ldr	r3, [pc, #224]	; (99f34 <Cl_Disinf_StartDisinf+0x140>)
   99e52:	4798      	blx	r3
   99e54:	4603      	mov	r3, r0
   99e56:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   99e58:	4b37      	ldr	r3, [pc, #220]	; (99f38 <Cl_Disinf_StartDisinf+0x144>)
   99e5a:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   99e5c:	2300      	movs	r3, #0
   99e5e:	9300      	str	r3, [sp, #0]
   99e60:	f04f 0300 	mov.w	r3, #0
   99e64:	f04f 0200 	mov.w	r2, #0
   99e68:	2100      	movs	r1, #0
   99e6a:	2029      	movs	r0, #41	; 0x29
   99e6c:	4c33      	ldr	r4, [pc, #204]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99e6e:	47a0      	blx	r4
   99e70:	4603      	mov	r3, r0
   99e72:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   99e74:	2300      	movs	r3, #0
   99e76:	9300      	str	r3, [sp, #0]
   99e78:	f04f 0300 	mov.w	r3, #0
   99e7c:	f04f 0200 	mov.w	r2, #0
   99e80:	2100      	movs	r1, #0
   99e82:	202b      	movs	r0, #43	; 0x2b
   99e84:	4c2d      	ldr	r4, [pc, #180]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99e86:	47a0      	blx	r4
   99e88:	4603      	mov	r3, r0
   99e8a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   99e8c:	2300      	movs	r3, #0
   99e8e:	9300      	str	r3, [sp, #0]
   99e90:	f04f 0300 	mov.w	r3, #0
   99e94:	f04f 0200 	mov.w	r2, #0
   99e98:	2101      	movs	r1, #1
   99e9a:	2003      	movs	r0, #3
   99e9c:	4c27      	ldr	r4, [pc, #156]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99e9e:	47a0      	blx	r4
   99ea0:	4603      	mov	r3, r0
   99ea2:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   99ea4:	2300      	movs	r3, #0
   99ea6:	9300      	str	r3, [sp, #0]
   99ea8:	f04f 0300 	mov.w	r3, #0
   99eac:	f04f 0200 	mov.w	r2, #0
   99eb0:	2101      	movs	r1, #1
   99eb2:	2004      	movs	r0, #4
   99eb4:	4c21      	ldr	r4, [pc, #132]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99eb6:	47a0      	blx	r4
   99eb8:	4603      	mov	r3, r0
   99eba:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   99ebc:	2300      	movs	r3, #0
   99ebe:	9300      	str	r3, [sp, #0]
   99ec0:	f04f 0300 	mov.w	r3, #0
   99ec4:	f04f 0200 	mov.w	r2, #0
   99ec8:	2100      	movs	r1, #0
   99eca:	203d      	movs	r0, #61	; 0x3d
   99ecc:	4c1b      	ldr	r4, [pc, #108]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99ece:	47a0      	blx	r4
   99ed0:	4603      	mov	r3, r0
   99ed2:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   99ed4:	2300      	movs	r3, #0
   99ed6:	9300      	str	r3, [sp, #0]
   99ed8:	f04f 0300 	mov.w	r3, #0
   99edc:	f04f 0200 	mov.w	r2, #0
   99ee0:	2101      	movs	r1, #1
   99ee2:	203e      	movs	r0, #62	; 0x3e
   99ee4:	4c15      	ldr	r4, [pc, #84]	; (99f3c <Cl_Disinf_StartDisinf+0x148>)
   99ee6:	47a0      	blx	r4
   99ee8:	4603      	mov	r3, r0
   99eea:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   99eec:	2101      	movs	r1, #1
   99eee:	203d      	movs	r0, #61	; 0x3d
   99ef0:	4b13      	ldr	r3, [pc, #76]	; (99f40 <Cl_Disinf_StartDisinf+0x14c>)
   99ef2:	4798      	blx	r3
   99ef4:	4603      	mov	r3, r0
   99ef6:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   99ef8:	2101      	movs	r1, #1
   99efa:	203e      	movs	r0, #62	; 0x3e
   99efc:	4b10      	ldr	r3, [pc, #64]	; (99f40 <Cl_Disinf_StartDisinf+0x14c>)
   99efe:	4798      	blx	r3
   99f00:	4603      	mov	r3, r0
   99f02:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   99f04:	4b0c      	ldr	r3, [pc, #48]	; (99f38 <Cl_Disinf_StartDisinf+0x144>)
   99f06:	4798      	blx	r3
   99f08:	4603      	mov	r3, r0
   99f0a:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   99f0c:	2300      	movs	r3, #0
}
   99f0e:	4618      	mov	r0, r3
   99f10:	370c      	adds	r7, #12
   99f12:	46bd      	mov	sp, r7
   99f14:	bd90      	pop	{r4, r7, pc}
   99f16:	bf00      	nop
   99f18:	0009689d 	.word	0x0009689d
   99f1c:	00096d29 	.word	0x00096d29
   99f20:	000967dd 	.word	0x000967dd
   99f24:	000968f5 	.word	0x000968f5
   99f28:	00083325 	.word	0x00083325
   99f2c:	20070a2e 	.word	0x20070a2e
   99f30:	0009a079 	.word	0x0009a079
   99f34:	0009211d 	.word	0x0009211d
   99f38:	0009a42d 	.word	0x0009a42d
   99f3c:	00082ea1 	.word	0x00082ea1
   99f40:	00082efd 	.word	0x00082efd

00099f44 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   99f44:	b580      	push	{r7, lr}
   99f46:	af00      	add	r7, sp, #0
	//Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_cntrl_disable_loopback();
   99f48:	4b16      	ldr	r3, [pc, #88]	; (99fa4 <Cl_Disinf_StopDisinf+0x60>)
   99f4a:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   99f4c:	4b16      	ldr	r3, [pc, #88]	; (99fa8 <Cl_Disinf_StopDisinf+0x64>)
   99f4e:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   99f50:	4b16      	ldr	r3, [pc, #88]	; (99fac <Cl_Disinf_StopDisinf+0x68>)
   99f52:	220c      	movs	r2, #12
   99f54:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   99f56:	4b16      	ldr	r3, [pc, #88]	; (99fb0 <Cl_Disinf_StopDisinf+0x6c>)
   99f58:	681b      	ldr	r3, [r3, #0]
   99f5a:	4a16      	ldr	r2, [pc, #88]	; (99fb4 <Cl_Disinf_StopDisinf+0x70>)
   99f5c:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   99f5e:	4b16      	ldr	r3, [pc, #88]	; (99fb8 <Cl_Disinf_StopDisinf+0x74>)
   99f60:	681b      	ldr	r3, [r3, #0]
   99f62:	4a16      	ldr	r2, [pc, #88]	; (99fbc <Cl_Disinf_StopDisinf+0x78>)
   99f64:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   99f66:	4b16      	ldr	r3, [pc, #88]	; (99fc0 <Cl_Disinf_StopDisinf+0x7c>)
   99f68:	681b      	ldr	r3, [r3, #0]
   99f6a:	4a16      	ldr	r2, [pc, #88]	; (99fc4 <Cl_Disinf_StopDisinf+0x80>)
   99f6c:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   99f6e:	4b16      	ldr	r3, [pc, #88]	; (99fc8 <Cl_Disinf_StopDisinf+0x84>)
   99f70:	681b      	ldr	r3, [r3, #0]
   99f72:	4a16      	ldr	r2, [pc, #88]	; (99fcc <Cl_Disinf_StopDisinf+0x88>)
   99f74:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   99f76:	4b16      	ldr	r3, [pc, #88]	; (99fd0 <Cl_Disinf_StopDisinf+0x8c>)
   99f78:	681b      	ldr	r3, [r3, #0]
   99f7a:	4a16      	ldr	r2, [pc, #88]	; (99fd4 <Cl_Disinf_StopDisinf+0x90>)
   99f7c:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   99f7e:	4b0c      	ldr	r3, [pc, #48]	; (99fb0 <Cl_Disinf_StopDisinf+0x6c>)
   99f80:	2200      	movs	r2, #0
   99f82:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   99f84:	4b0c      	ldr	r3, [pc, #48]	; (99fb8 <Cl_Disinf_StopDisinf+0x74>)
   99f86:	2200      	movs	r2, #0
   99f88:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   99f8a:	4b0d      	ldr	r3, [pc, #52]	; (99fc0 <Cl_Disinf_StopDisinf+0x7c>)
   99f8c:	2200      	movs	r2, #0
   99f8e:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   99f90:	4b0d      	ldr	r3, [pc, #52]	; (99fc8 <Cl_Disinf_StopDisinf+0x84>)
   99f92:	2200      	movs	r2, #0
   99f94:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   99f96:	4b0e      	ldr	r3, [pc, #56]	; (99fd0 <Cl_Disinf_StopDisinf+0x8c>)
   99f98:	2200      	movs	r2, #0
   99f9a:	601a      	str	r2, [r3, #0]
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   99f9c:	2300      	movs	r3, #0
}
   99f9e:	4618      	mov	r0, r3
   99fa0:	bd80      	pop	{r7, pc}
   99fa2:	bf00      	nop
   99fa4:	00096a0d 	.word	0x00096a0d
   99fa8:	00096869 	.word	0x00096869
   99fac:	2007275b 	.word	0x2007275b
   99fb0:	2007275c 	.word	0x2007275c
   99fb4:	20072768 	.word	0x20072768
   99fb8:	20072764 	.word	0x20072764
   99fbc:	20072770 	.word	0x20072770
   99fc0:	20072760 	.word	0x20072760
   99fc4:	2007276c 	.word	0x2007276c
   99fc8:	20072774 	.word	0x20072774
   99fcc:	2007277c 	.word	0x2007277c
   99fd0:	20072778 	.word	0x20072778
   99fd4:	20072780 	.word	0x20072780

00099fd8 <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   99fd8:	b580      	push	{r7, lr}
   99fda:	b082      	sub	sp, #8
   99fdc:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   99fde:	2300      	movs	r3, #0
   99fe0:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   99fe2:	4b16      	ldr	r3, [pc, #88]	; (9a03c <Cl_Disinf_resumeDisinf+0x64>)
   99fe4:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   99fe6:	4b16      	ldr	r3, [pc, #88]	; (9a040 <Cl_Disinf_resumeDisinf+0x68>)
   99fe8:	2208      	movs	r2, #8
   99fea:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   99fec:	4b15      	ldr	r3, [pc, #84]	; (9a044 <Cl_Disinf_resumeDisinf+0x6c>)
   99fee:	781b      	ldrb	r3, [r3, #0]
   99ff0:	2b01      	cmp	r3, #1
   99ff2:	d101      	bne.n	99ff8 <Cl_Disinf_resumeDisinf+0x20>
	{
		sv_cntrl_poweronheater();
   99ff4:	4b14      	ldr	r3, [pc, #80]	; (9a048 <Cl_Disinf_resumeDisinf+0x70>)
   99ff6:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   99ff8:	1dbb      	adds	r3, r7, #6
   99ffa:	2200      	movs	r2, #0
   99ffc:	4619      	mov	r1, r3
   99ffe:	203b      	movs	r0, #59	; 0x3b
   9a000:	4b12      	ldr	r3, [pc, #72]	; (9a04c <Cl_Disinf_resumeDisinf+0x74>)
   9a002:	4798      	blx	r3
   9a004:	4603      	mov	r3, r0
   9a006:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9a008:	4b11      	ldr	r3, [pc, #68]	; (9a050 <Cl_Disinf_resumeDisinf+0x78>)
   9a00a:	681b      	ldr	r3, [r3, #0]
   9a00c:	4a11      	ldr	r2, [pc, #68]	; (9a054 <Cl_Disinf_resumeDisinf+0x7c>)
   9a00e:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9a010:	4b11      	ldr	r3, [pc, #68]	; (9a058 <Cl_Disinf_resumeDisinf+0x80>)
   9a012:	681b      	ldr	r3, [r3, #0]
   9a014:	4a11      	ldr	r2, [pc, #68]	; (9a05c <Cl_Disinf_resumeDisinf+0x84>)
   9a016:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9a018:	4b11      	ldr	r3, [pc, #68]	; (9a060 <Cl_Disinf_resumeDisinf+0x88>)
   9a01a:	681b      	ldr	r3, [r3, #0]
   9a01c:	4a11      	ldr	r2, [pc, #68]	; (9a064 <Cl_Disinf_resumeDisinf+0x8c>)
   9a01e:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9a020:	4b11      	ldr	r3, [pc, #68]	; (9a068 <Cl_Disinf_resumeDisinf+0x90>)
   9a022:	681b      	ldr	r3, [r3, #0]
   9a024:	4a11      	ldr	r2, [pc, #68]	; (9a06c <Cl_Disinf_resumeDisinf+0x94>)
   9a026:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9a028:	4b11      	ldr	r3, [pc, #68]	; (9a070 <Cl_Disinf_resumeDisinf+0x98>)
   9a02a:	681b      	ldr	r3, [r3, #0]
   9a02c:	4a11      	ldr	r2, [pc, #68]	; (9a074 <Cl_Disinf_resumeDisinf+0x9c>)
   9a02e:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9a030:	2300      	movs	r3, #0
}
   9a032:	4618      	mov	r0, r3
   9a034:	3708      	adds	r7, #8
   9a036:	46bd      	mov	sp, r7
   9a038:	bd80      	pop	{r7, pc}
   9a03a:	bf00      	nop
   9a03c:	000969f1 	.word	0x000969f1
   9a040:	2007275b 	.word	0x2007275b
   9a044:	200725f3 	.word	0x200725f3
   9a048:	00096855 	.word	0x00096855
   9a04c:	00098601 	.word	0x00098601
   9a050:	20072768 	.word	0x20072768
   9a054:	2007275c 	.word	0x2007275c
   9a058:	20072770 	.word	0x20072770
   9a05c:	20072764 	.word	0x20072764
   9a060:	2007276c 	.word	0x2007276c
   9a064:	20072760 	.word	0x20072760
   9a068:	2007277c 	.word	0x2007277c
   9a06c:	20072774 	.word	0x20072774
   9a070:	20072780 	.word	0x20072780
   9a074:	20072778 	.word	0x20072778

0009a078 <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9a078:	b580      	push	{r7, lr}
   9a07a:	b084      	sub	sp, #16
   9a07c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9a07e:	2304      	movs	r3, #4
   9a080:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a082:	234a      	movs	r3, #74	; 0x4a
   9a084:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9a086:	1d3b      	adds	r3, r7, #4
   9a088:	2200      	movs	r2, #0
   9a08a:	601a      	str	r2, [r3, #0]
   9a08c:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9a090:	230a      	movs	r3, #10
   9a092:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9a094:	230b      	movs	r3, #11
   9a096:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9a098:	4b08      	ldr	r3, [pc, #32]	; (9a0bc <Cl_Disinf_UpdateTimeInfo+0x44>)
   9a09a:	681b      	ldr	r3, [r3, #0]
   9a09c:	b2db      	uxtb	r3, r3
   9a09e:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9a0a0:	1d39      	adds	r1, r7, #4
   9a0a2:	7bbb      	ldrb	r3, [r7, #14]
   9a0a4:	2202      	movs	r2, #2
   9a0a6:	4618      	mov	r0, r3
   9a0a8:	4b05      	ldr	r3, [pc, #20]	; (9a0c0 <Cl_Disinf_UpdateTimeInfo+0x48>)
   9a0aa:	4798      	blx	r3
   9a0ac:	4603      	mov	r3, r0
   9a0ae:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9a0b0:	2300      	movs	r3, #0
	
}
   9a0b2:	4618      	mov	r0, r3
   9a0b4:	3710      	adds	r7, #16
   9a0b6:	46bd      	mov	sp, r7
   9a0b8:	bd80      	pop	{r7, pc}
   9a0ba:	bf00      	nop
   9a0bc:	20072774 	.word	0x20072774
   9a0c0:	00098601 	.word	0x00098601

0009a0c4 <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9a0c4:	b580      	push	{r7, lr}
   9a0c6:	b086      	sub	sp, #24
   9a0c8:	af00      	add	r7, sp, #0
   9a0ca:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9a0cc:	2300      	movs	r3, #0
   9a0ce:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9a0d0:	2300      	movs	r3, #0
   9a0d2:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9a0d4:	f107 030c 	add.w	r3, r7, #12
   9a0d8:	2100      	movs	r1, #0
   9a0da:	460a      	mov	r2, r1
   9a0dc:	801a      	strh	r2, [r3, #0]
   9a0de:	460a      	mov	r2, r1
   9a0e0:	709a      	strb	r2, [r3, #2]
   9a0e2:	2300      	movs	r3, #0
   9a0e4:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a0e6:	234a      	movs	r3, #74	; 0x4a
   9a0e8:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a0ea:	2300      	movs	r3, #0
   9a0ec:	75bb      	strb	r3, [r7, #22]
   9a0ee:	e05f      	b.n	9a1b0 <Cl_Disinf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9a0f0:	7dba      	ldrb	r2, [r7, #22]
   9a0f2:	4933      	ldr	r1, [pc, #204]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a0f4:	4613      	mov	r3, r2
   9a0f6:	00db      	lsls	r3, r3, #3
   9a0f8:	1a9b      	subs	r3, r3, r2
   9a0fa:	440b      	add	r3, r1
   9a0fc:	7818      	ldrb	r0, [r3, #0]
   9a0fe:	7dba      	ldrb	r2, [r7, #22]
   9a100:	4613      	mov	r3, r2
   9a102:	00db      	lsls	r3, r3, #3
   9a104:	1a9b      	subs	r3, r3, r2
   9a106:	4a2e      	ldr	r2, [pc, #184]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a108:	4413      	add	r3, r2
   9a10a:	3302      	adds	r3, #2
   9a10c:	4619      	mov	r1, r3
   9a10e:	4b2d      	ldr	r3, [pc, #180]	; (9a1c4 <Cl_Disinf_UpdateAlarmTable+0x100>)
   9a110:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9a112:	7dba      	ldrb	r2, [r7, #22]
   9a114:	492a      	ldr	r1, [pc, #168]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a116:	4613      	mov	r3, r2
   9a118:	00db      	lsls	r3, r3, #3
   9a11a:	1a9b      	subs	r3, r3, r2
   9a11c:	440b      	add	r3, r1
   9a11e:	3302      	adds	r3, #2
   9a120:	781b      	ldrb	r3, [r3, #0]
   9a122:	2b00      	cmp	r3, #0
   9a124:	d022      	beq.n	9a16c <Cl_Disinf_UpdateAlarmTable+0xa8>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9a126:	7dba      	ldrb	r2, [r7, #22]
   9a128:	4925      	ldr	r1, [pc, #148]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a12a:	4613      	mov	r3, r2
   9a12c:	00db      	lsls	r3, r3, #3
   9a12e:	1a9b      	subs	r3, r3, r2
   9a130:	440b      	add	r3, r1
   9a132:	3303      	adds	r3, #3
   9a134:	781b      	ldrb	r3, [r3, #0]
   9a136:	f083 0301 	eor.w	r3, r3, #1
   9a13a:	b2db      	uxtb	r3, r3
   9a13c:	2b00      	cmp	r3, #0
   9a13e:	d034      	beq.n	9a1aa <Cl_Disinf_UpdateAlarmTable+0xe6>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9a140:	7dba      	ldrb	r2, [r7, #22]
   9a142:	491f      	ldr	r1, [pc, #124]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a144:	4613      	mov	r3, r2
   9a146:	00db      	lsls	r3, r3, #3
   9a148:	1a9b      	subs	r3, r3, r2
   9a14a:	440b      	add	r3, r1
   9a14c:	3303      	adds	r3, #3
   9a14e:	2201      	movs	r2, #1
   9a150:	701a      	strb	r2, [r3, #0]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9a152:	7dba      	ldrb	r2, [r7, #22]
   9a154:	491a      	ldr	r1, [pc, #104]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a156:	4613      	mov	r3, r2
   9a158:	00db      	lsls	r3, r3, #3
   9a15a:	1a9b      	subs	r3, r3, r2
   9a15c:	440b      	add	r3, r1
   9a15e:	781b      	ldrb	r3, [r3, #0]
   9a160:	4618      	mov	r0, r3
   9a162:	4b19      	ldr	r3, [pc, #100]	; (9a1c8 <Cl_Disinf_UpdateAlarmTable+0x104>)
   9a164:	4798      	blx	r3
   9a166:	4603      	mov	r3, r0
   9a168:	75fb      	strb	r3, [r7, #23]
   9a16a:	e01e      	b.n	9a1aa <Cl_Disinf_UpdateAlarmTable+0xe6>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9a16c:	7dba      	ldrb	r2, [r7, #22]
   9a16e:	4914      	ldr	r1, [pc, #80]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a170:	4613      	mov	r3, r2
   9a172:	00db      	lsls	r3, r3, #3
   9a174:	1a9b      	subs	r3, r3, r2
   9a176:	440b      	add	r3, r1
   9a178:	3303      	adds	r3, #3
   9a17a:	781b      	ldrb	r3, [r3, #0]
   9a17c:	2b00      	cmp	r3, #0
   9a17e:	d014      	beq.n	9a1aa <Cl_Disinf_UpdateAlarmTable+0xe6>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9a180:	7dba      	ldrb	r2, [r7, #22]
   9a182:	490f      	ldr	r1, [pc, #60]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a184:	4613      	mov	r3, r2
   9a186:	00db      	lsls	r3, r3, #3
   9a188:	1a9b      	subs	r3, r3, r2
   9a18a:	440b      	add	r3, r1
   9a18c:	3303      	adds	r3, #3
   9a18e:	2200      	movs	r2, #0
   9a190:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9a192:	2307      	movs	r3, #7
   9a194:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9a196:	7dba      	ldrb	r2, [r7, #22]
   9a198:	4909      	ldr	r1, [pc, #36]	; (9a1c0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9a19a:	4613      	mov	r3, r2
   9a19c:	00db      	lsls	r3, r3, #3
   9a19e:	1a9b      	subs	r3, r3, r2
   9a1a0:	440b      	add	r3, r1
   9a1a2:	781b      	ldrb	r3, [r3, #0]
   9a1a4:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9a1a6:	2300      	movs	r3, #0
   9a1a8:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a1aa:	7dbb      	ldrb	r3, [r7, #22]
   9a1ac:	3301      	adds	r3, #1
   9a1ae:	75bb      	strb	r3, [r7, #22]
   9a1b0:	7dbb      	ldrb	r3, [r7, #22]
   9a1b2:	2b0b      	cmp	r3, #11
   9a1b4:	d99c      	bls.n	9a0f0 <Cl_Disinf_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_disinfretcode );
   9a1b6:	7dfb      	ldrb	r3, [r7, #23]
}
   9a1b8:	4618      	mov	r0, r3
   9a1ba:	3718      	adds	r7, #24
   9a1bc:	46bd      	mov	sp, r7
   9a1be:	bd80      	pop	{r7, pc}
   9a1c0:	20070a30 	.word	0x20070a30
   9a1c4:	00083041 	.word	0x00083041
   9a1c8:	0009a1f5 	.word	0x0009a1f5

0009a1cc <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9a1cc:	b580      	push	{r7, lr}
   9a1ce:	b082      	sub	sp, #8
   9a1d0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9a1d2:	2300      	movs	r3, #0
   9a1d4:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a1d6:	234a      	movs	r3, #74	; 0x4a
   9a1d8:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9a1da:	1d7b      	adds	r3, r7, #5
   9a1dc:	4618      	mov	r0, r3
   9a1de:	4b04      	ldr	r3, [pc, #16]	; (9a1f0 <Cl_disinf_ProcessAlarms+0x24>)
   9a1e0:	4798      	blx	r3
   9a1e2:	4603      	mov	r3, r0
   9a1e4:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9a1e6:	79fb      	ldrb	r3, [r7, #7]
}
   9a1e8:	4618      	mov	r0, r3
   9a1ea:	3708      	adds	r7, #8
   9a1ec:	46bd      	mov	sp, r7
   9a1ee:	bd80      	pop	{r7, pc}
   9a1f0:	0009a0c5 	.word	0x0009a0c5

0009a1f4 <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9a1f4:	b580      	push	{r7, lr}
   9a1f6:	b086      	sub	sp, #24
   9a1f8:	af00      	add	r7, sp, #0
   9a1fa:	4603      	mov	r3, r0
   9a1fc:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9a1fe:	2300      	movs	r3, #0
   9a200:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9a202:	f107 0308 	add.w	r3, r7, #8
   9a206:	2100      	movs	r1, #0
   9a208:	460a      	mov	r2, r1
   9a20a:	801a      	strh	r2, [r3, #0]
   9a20c:	460a      	mov	r2, r1
   9a20e:	709a      	strb	r2, [r3, #2]
   9a210:	2300      	movs	r3, #0
   9a212:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a214:	234a      	movs	r3, #74	; 0x4a
   9a216:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9a218:	2300      	movs	r3, #0
   9a21a:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9a21c:	79fb      	ldrb	r3, [r7, #7]
   9a21e:	3b03      	subs	r3, #3
   9a220:	2b28      	cmp	r3, #40	; 0x28
   9a222:	f200 80d5 	bhi.w	9a3d0 <CL_DisinfAlarmActon+0x1dc>
   9a226:	a201      	add	r2, pc, #4	; (adr r2, 9a22c <CL_DisinfAlarmActon+0x38>)
   9a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a22c:	0009a331 	.word	0x0009a331
   9a230:	0009a345 	.word	0x0009a345
   9a234:	0009a3d1 	.word	0x0009a3d1
   9a238:	0009a3d1 	.word	0x0009a3d1
   9a23c:	0009a3d1 	.word	0x0009a3d1
   9a240:	0009a3bd 	.word	0x0009a3bd
   9a244:	0009a3d1 	.word	0x0009a3d1
   9a248:	0009a3d1 	.word	0x0009a3d1
   9a24c:	0009a3d1 	.word	0x0009a3d1
   9a250:	0009a3d1 	.word	0x0009a3d1
   9a254:	0009a3d1 	.word	0x0009a3d1
   9a258:	0009a3d1 	.word	0x0009a3d1
   9a25c:	0009a3d1 	.word	0x0009a3d1
   9a260:	0009a3d1 	.word	0x0009a3d1
   9a264:	0009a3d1 	.word	0x0009a3d1
   9a268:	0009a3d1 	.word	0x0009a3d1
   9a26c:	0009a359 	.word	0x0009a359
   9a270:	0009a36d 	.word	0x0009a36d
   9a274:	0009a381 	.word	0x0009a381
   9a278:	0009a381 	.word	0x0009a381
   9a27c:	0009a395 	.word	0x0009a395
   9a280:	0009a395 	.word	0x0009a395
   9a284:	0009a3d1 	.word	0x0009a3d1
   9a288:	0009a3d1 	.word	0x0009a3d1
   9a28c:	0009a3d1 	.word	0x0009a3d1
   9a290:	0009a3d1 	.word	0x0009a3d1
   9a294:	0009a3d1 	.word	0x0009a3d1
   9a298:	0009a3d1 	.word	0x0009a3d1
   9a29c:	0009a3d1 	.word	0x0009a3d1
   9a2a0:	0009a3d1 	.word	0x0009a3d1
   9a2a4:	0009a3d1 	.word	0x0009a3d1
   9a2a8:	0009a3d1 	.word	0x0009a3d1
   9a2ac:	0009a3d1 	.word	0x0009a3d1
   9a2b0:	0009a3d1 	.word	0x0009a3d1
   9a2b4:	0009a3d1 	.word	0x0009a3d1
   9a2b8:	0009a3d1 	.word	0x0009a3d1
   9a2bc:	0009a3a9 	.word	0x0009a3a9
   9a2c0:	0009a3a9 	.word	0x0009a3a9
   9a2c4:	0009a2d1 	.word	0x0009a2d1
   9a2c8:	0009a3d1 	.word	0x0009a3d1
   9a2cc:	0009a31d 	.word	0x0009a31d
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9a2d0:	4b4f      	ldr	r3, [pc, #316]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a2d2:	781b      	ldrb	r3, [r3, #0]
   9a2d4:	2b10      	cmp	r3, #16
   9a2d6:	d10b      	bne.n	9a2f0 <CL_DisinfAlarmActon+0xfc>
			{
				sv_cntrl_setredalarm();
   9a2d8:	4b4e      	ldr	r3, [pc, #312]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a2da:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a2dc:	4b4e      	ldr	r3, [pc, #312]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a2de:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9a2e0:	4b4b      	ldr	r3, [pc, #300]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a2e2:	781b      	ldrb	r3, [r3, #0]
   9a2e4:	2b10      	cmp	r3, #16
   9a2e6:	d175      	bne.n	9a3d4 <CL_DisinfAlarmActon+0x1e0>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9a2e8:	4b49      	ldr	r3, [pc, #292]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a2ea:	2210      	movs	r2, #16
   9a2ec:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9a2ee:	e071      	b.n	9a3d4 <CL_DisinfAlarmActon+0x1e0>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9a2f0:	4b47      	ldr	r3, [pc, #284]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a2f2:	781b      	ldrb	r3, [r3, #0]
   9a2f4:	2b11      	cmp	r3, #17
   9a2f6:	d107      	bne.n	9a308 <CL_DisinfAlarmActon+0x114>
			{
				sv_cntrl_setredalarm();
   9a2f8:	4b46      	ldr	r3, [pc, #280]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a2fa:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a2fc:	4b46      	ldr	r3, [pc, #280]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a2fe:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9a300:	4b43      	ldr	r3, [pc, #268]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a302:	2211      	movs	r2, #17
   9a304:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9a306:	e065      	b.n	9a3d4 <CL_DisinfAlarmActon+0x1e0>
				sv_cntrl_buzzer();
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
			}
			else
			{
				sv_cntrl_setredalarm();
   9a308:	4b42      	ldr	r3, [pc, #264]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a30a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a30c:	4b42      	ldr	r3, [pc, #264]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a30e:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a310:	4b42      	ldr	r3, [pc, #264]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a312:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a314:	4b3e      	ldr	r3, [pc, #248]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a316:	220c      	movs	r2, #12
   9a318:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9a31a:	e05b      	b.n	9a3d4 <CL_DisinfAlarmActon+0x1e0>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9a31c:	4b3d      	ldr	r3, [pc, #244]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a31e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a320:	4b3d      	ldr	r3, [pc, #244]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a322:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9a324:	4b3d      	ldr	r3, [pc, #244]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a326:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a328:	4b39      	ldr	r3, [pc, #228]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a32a:	220c      	movs	r2, #12
   9a32c:	701a      	strb	r2, [r3, #0]
			break;
   9a32e:	e052      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9a330:	4b38      	ldr	r3, [pc, #224]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a332:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a334:	4b38      	ldr	r3, [pc, #224]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a336:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a338:	4b38      	ldr	r3, [pc, #224]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a33a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a33c:	4b34      	ldr	r3, [pc, #208]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a33e:	220c      	movs	r2, #12
   9a340:	701a      	strb	r2, [r3, #0]
			break;
   9a342:	e048      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9a344:	4b33      	ldr	r3, [pc, #204]	; (9a414 <CL_DisinfAlarmActon+0x220>)
   9a346:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a348:	4b33      	ldr	r3, [pc, #204]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a34a:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a34c:	4b33      	ldr	r3, [pc, #204]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a34e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a350:	4b2f      	ldr	r3, [pc, #188]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a352:	220c      	movs	r2, #12
   9a354:	701a      	strb	r2, [r3, #0]
			break;
   9a356:	e03e      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9a358:	4b31      	ldr	r3, [pc, #196]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a35a:	4798      	blx	r3
					sv_cntrl_buzzer();
   9a35c:	4b2e      	ldr	r3, [pc, #184]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a35e:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9a360:	4b2e      	ldr	r3, [pc, #184]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a362:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a364:	4b2a      	ldr	r3, [pc, #168]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a366:	220c      	movs	r2, #12
   9a368:	701a      	strb	r2, [r3, #0]
			break;
   9a36a:	e034      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9a36c:	4b2c      	ldr	r3, [pc, #176]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a36e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a370:	4b29      	ldr	r3, [pc, #164]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a372:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9a374:	4b29      	ldr	r3, [pc, #164]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a376:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a378:	4b25      	ldr	r3, [pc, #148]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a37a:	220c      	movs	r2, #12
   9a37c:	701a      	strb	r2, [r3, #0]
			break;
   9a37e:	e02a      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a380:	4b27      	ldr	r3, [pc, #156]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a382:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a384:	4b24      	ldr	r3, [pc, #144]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a386:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a388:	4b24      	ldr	r3, [pc, #144]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a38a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a38c:	4b20      	ldr	r3, [pc, #128]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a38e:	220c      	movs	r2, #12
   9a390:	701a      	strb	r2, [r3, #0]
			break;
   9a392:	e020      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a394:	4b22      	ldr	r3, [pc, #136]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a396:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a398:	4b1f      	ldr	r3, [pc, #124]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a39a:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a39c:	4b1f      	ldr	r3, [pc, #124]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a39e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a3a0:	4b1b      	ldr	r3, [pc, #108]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a3a2:	220c      	movs	r2, #12
   9a3a4:	701a      	strb	r2, [r3, #0]
			break;
   9a3a6:	e016      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a3a8:	4b1d      	ldr	r3, [pc, #116]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a3aa:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a3ac:	4b1a      	ldr	r3, [pc, #104]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a3ae:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a3b0:	4b1a      	ldr	r3, [pc, #104]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a3b2:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a3b4:	4b16      	ldr	r3, [pc, #88]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a3b6:	220c      	movs	r2, #12
   9a3b8:	701a      	strb	r2, [r3, #0]
			break;
   9a3ba:	e00c      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9a3bc:	4b18      	ldr	r3, [pc, #96]	; (9a420 <CL_DisinfAlarmActon+0x22c>)
   9a3be:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a3c0:	4b15      	ldr	r3, [pc, #84]	; (9a418 <CL_DisinfAlarmActon+0x224>)
   9a3c2:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9a3c4:	4b15      	ldr	r3, [pc, #84]	; (9a41c <CL_DisinfAlarmActon+0x228>)
   9a3c6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a3c8:	4b11      	ldr	r3, [pc, #68]	; (9a410 <CL_DisinfAlarmActon+0x21c>)
   9a3ca:	220c      	movs	r2, #12
   9a3cc:	701a      	strb	r2, [r3, #0]
			break;
   9a3ce:	e002      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
			
			default:
			break;
   9a3d0:	bf00      	nop
   9a3d2:	e000      	b.n	9a3d6 <CL_DisinfAlarmActon+0x1e2>
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9a3d4:	bf00      	nop
			
			default:
			break;

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9a3d6:	79fb      	ldrb	r3, [r7, #7]
   9a3d8:	2b00      	cmp	r3, #0
   9a3da:	d013      	beq.n	9a404 <CL_DisinfAlarmActon+0x210>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9a3dc:	79fb      	ldrb	r3, [r7, #7]
   9a3de:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9a3e0:	2301      	movs	r3, #1
   9a3e2:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9a3e4:	2302      	movs	r3, #2
   9a3e6:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9a3e8:	2307      	movs	r3, #7
   9a3ea:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9a3ec:	f107 0108 	add.w	r1, r7, #8
   9a3f0:	7bfb      	ldrb	r3, [r7, #15]
   9a3f2:	2203      	movs	r2, #3
   9a3f4:	4618      	mov	r0, r3
   9a3f6:	4b0b      	ldr	r3, [pc, #44]	; (9a424 <CL_DisinfAlarmActon+0x230>)
   9a3f8:	4798      	blx	r3
   9a3fa:	4603      	mov	r3, r0
   9a3fc:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9a3fe:	200a      	movs	r0, #10
   9a400:	4b09      	ldr	r3, [pc, #36]	; (9a428 <CL_DisinfAlarmActon+0x234>)
   9a402:	4798      	blx	r3
		 }
	return CL_OK;		
   9a404:	2300      	movs	r3, #0
}
   9a406:	4618      	mov	r0, r3
   9a408:	3718      	adds	r7, #24
   9a40a:	46bd      	mov	sp, r7
   9a40c:	bd80      	pop	{r7, pc}
   9a40e:	bf00      	nop
   9a410:	2007275b 	.word	0x2007275b
   9a414:	00096ad5 	.word	0x00096ad5
   9a418:	00096b11 	.word	0x00096b11
   9a41c:	00099f45 	.word	0x00099f45
   9a420:	00096ae9 	.word	0x00096ae9
   9a424:	00098601 	.word	0x00098601
   9a428:	00091b9d 	.word	0x00091b9d

0009a42c <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9a42c:	b580      	push	{r7, lr}
   9a42e:	b082      	sub	sp, #8
   9a430:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9a432:	2300      	movs	r3, #0
   9a434:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a436:	234a      	movs	r3, #74	; 0x4a
   9a438:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9a43a:	4b2d      	ldr	r3, [pc, #180]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a43c:	2200      	movs	r2, #0
   9a43e:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9a440:	4b2b      	ldr	r3, [pc, #172]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a442:	2200      	movs	r2, #0
   9a444:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9a446:	2029      	movs	r0, #41	; 0x29
   9a448:	4b2a      	ldr	r3, [pc, #168]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a44a:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9a44c:	202b      	movs	r0, #43	; 0x2b
   9a44e:	4b29      	ldr	r3, [pc, #164]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a450:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9a452:	4b27      	ldr	r3, [pc, #156]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a454:	2200      	movs	r2, #0
   9a456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9a45a:	2008      	movs	r0, #8
   9a45c:	4b25      	ldr	r3, [pc, #148]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a45e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9a460:	4b23      	ldr	r3, [pc, #140]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a462:	2200      	movs	r2, #0
   9a464:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9a468:	4b21      	ldr	r3, [pc, #132]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a46a:	2200      	movs	r2, #0
   9a46c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9a470:	2015      	movs	r0, #21
   9a472:	4b20      	ldr	r3, [pc, #128]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a474:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9a476:	2016      	movs	r0, #22
   9a478:	4b1e      	ldr	r3, [pc, #120]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a47a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9a47c:	4b1c      	ldr	r3, [pc, #112]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a47e:	2200      	movs	r2, #0
   9a480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9a484:	4b1a      	ldr	r3, [pc, #104]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a486:	2200      	movs	r2, #0
   9a488:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9a48c:	2017      	movs	r0, #23
   9a48e:	4b19      	ldr	r3, [pc, #100]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a490:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9a492:	2018      	movs	r0, #24
   9a494:	4b17      	ldr	r3, [pc, #92]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a496:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9a498:	4b15      	ldr	r3, [pc, #84]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a49a:	2200      	movs	r2, #0
   9a49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9a4a0:	4b13      	ldr	r3, [pc, #76]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a4a2:	2200      	movs	r2, #0
   9a4a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9a4a8:	2028      	movs	r0, #40	; 0x28
   9a4aa:	4b12      	ldr	r3, [pc, #72]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4ac:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9a4ae:	2027      	movs	r0, #39	; 0x27
   9a4b0:	4b10      	ldr	r3, [pc, #64]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4b2:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9a4b4:	4b0e      	ldr	r3, [pc, #56]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a4b6:	2200      	movs	r2, #0
   9a4b8:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9a4ba:	2011      	movs	r0, #17
   9a4bc:	4b0d      	ldr	r3, [pc, #52]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4be:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9a4c0:	4b0b      	ldr	r3, [pc, #44]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a4c2:	2200      	movs	r2, #0
   9a4c4:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9a4c6:	2003      	movs	r0, #3
   9a4c8:	4b0a      	ldr	r3, [pc, #40]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4ca:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9a4cc:	2005      	movs	r0, #5
   9a4ce:	4b09      	ldr	r3, [pc, #36]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4d0:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9a4d2:	4b07      	ldr	r3, [pc, #28]	; (9a4f0 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9a4d4:	2200      	movs	r2, #0
   9a4d6:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9a4d8:	2004      	movs	r0, #4
   9a4da:	4b06      	ldr	r3, [pc, #24]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4dc:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9a4de:	2006      	movs	r0, #6
   9a4e0:	4b04      	ldr	r3, [pc, #16]	; (9a4f4 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9a4e2:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9a4e4:	79fb      	ldrb	r3, [r7, #7]
}
   9a4e6:	4618      	mov	r0, r3
   9a4e8:	3708      	adds	r7, #8
   9a4ea:	46bd      	mov	sp, r7
   9a4ec:	bd80      	pop	{r7, pc}
   9a4ee:	bf00      	nop
   9a4f0:	20070a30 	.word	0x20070a30
   9a4f4:	00082ffd 	.word	0x00082ffd

0009a4f8 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9a4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   9a4fa:	b08b      	sub	sp, #44	; 0x2c
   9a4fc:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9a4fe:	2300      	movs	r3, #0
   9a500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9a504:	2300      	movs	r3, #0
   9a506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9a50a:	463b      	mov	r3, r7
   9a50c:	2200      	movs	r2, #0
   9a50e:	601a      	str	r2, [r3, #0]
   9a510:	605a      	str	r2, [r3, #4]
   9a512:	609a      	str	r2, [r3, #8]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9a514:	4b92      	ldr	r3, [pc, #584]	; (9a760 <Cl_Disinf_SendDisinfStateData+0x268>)
   9a516:	681b      	ldr	r3, [r3, #0]
   9a518:	3301      	adds	r3, #1
   9a51a:	4a91      	ldr	r2, [pc, #580]	; (9a760 <Cl_Disinf_SendDisinfStateData+0x268>)
   9a51c:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9a51e:	4b90      	ldr	r3, [pc, #576]	; (9a760 <Cl_Disinf_SendDisinfStateData+0x268>)
   9a520:	681b      	ldr	r3, [r3, #0]
   9a522:	2b04      	cmp	r3, #4
   9a524:	f240 81c5 	bls.w	9a8b2 <Cl_Disinf_SendDisinfStateData+0x3ba>
	{
		return;
	}
	else
	{
		timecount = 0;
   9a528:	4b8d      	ldr	r3, [pc, #564]	; (9a760 <Cl_Disinf_SendDisinfStateData+0x268>)
   9a52a:	2200      	movs	r2, #0
   9a52c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9a52e:	230b      	movs	r3, #11
   9a530:	703b      	strb	r3, [r7, #0]
	count++;
   9a532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a536:	3301      	adds	r3, #1
   9a538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9a53c:	f107 030e 	add.w	r3, r7, #14
   9a540:	4619      	mov	r1, r3
   9a542:	2014      	movs	r0, #20
   9a544:	4b87      	ldr	r3, [pc, #540]	; (9a764 <Cl_Disinf_SendDisinfStateData+0x26c>)
   9a546:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9a548:	2300      	movs	r3, #0
   9a54a:	613b      	str	r3, [r7, #16]
						// resistance of PT100
			res_temp_lookuptable((402 *100* temp)/(2*32768));									// temperature from look up table in 4 digits
   9a54c:	89fb      	ldrh	r3, [r7, #14]
   9a54e:	461a      	mov	r2, r3
   9a550:	f649 5308 	movw	r3, #40200	; 0x9d08
   9a554:	fb03 f302 	mul.w	r3, r3, r2
   9a558:	2b00      	cmp	r3, #0
   9a55a:	da02      	bge.n	9a562 <Cl_Disinf_SendDisinfStateData+0x6a>
   9a55c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9a560:	33ff      	adds	r3, #255	; 0xff
   9a562:	141b      	asrs	r3, r3, #16
   9a564:	4618      	mov	r0, r3
   9a566:	4b80      	ldr	r3, [pc, #512]	; (9a768 <Cl_Disinf_SendDisinfStateData+0x270>)
   9a568:	4798      	blx	r3
			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   9a56a:	4b80      	ldr	r3, [pc, #512]	; (9a76c <Cl_Disinf_SendDisinfStateData+0x274>)
   9a56c:	681a      	ldr	r2, [r3, #0]
   9a56e:	4b80      	ldr	r3, [pc, #512]	; (9a770 <Cl_Disinf_SendDisinfStateData+0x278>)
   9a570:	4980      	ldr	r1, [pc, #512]	; (9a774 <Cl_Disinf_SendDisinfStateData+0x27c>)
   9a572:	4610      	mov	r0, r2
   9a574:	4798      	blx	r3
   9a576:	4603      	mov	r3, r0
   9a578:	623b      	str	r3, [r7, #32]
			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
   9a57a:	4b7f      	ldr	r3, [pc, #508]	; (9a778 <Cl_Disinf_SendDisinfStateData+0x280>)
   9a57c:	6a38      	ldr	r0, [r7, #32]
   9a57e:	4798      	blx	r3
   9a580:	4c7e      	ldr	r4, [pc, #504]	; (9a77c <Cl_Disinf_SendDisinfStateData+0x284>)
   9a582:	a36f      	add	r3, pc, #444	; (adr r3, 9a740 <Cl_Disinf_SendDisinfStateData+0x248>)
   9a584:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a588:	47a0      	blx	r4
   9a58a:	4603      	mov	r3, r0
   9a58c:	460c      	mov	r4, r1
   9a58e:	4618      	mov	r0, r3
   9a590:	4621      	mov	r1, r4
   9a592:	4c7b      	ldr	r4, [pc, #492]	; (9a780 <Cl_Disinf_SendDisinfStateData+0x288>)
   9a594:	a36c      	add	r3, pc, #432	; (adr r3, 9a748 <Cl_Disinf_SendDisinfStateData+0x250>)
   9a596:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a59a:	47a0      	blx	r4
   9a59c:	4603      	mov	r3, r0
   9a59e:	460c      	mov	r4, r1
   9a5a0:	4619      	mov	r1, r3
   9a5a2:	4622      	mov	r2, r4
   9a5a4:	4b77      	ldr	r3, [pc, #476]	; (9a784 <Cl_Disinf_SendDisinfStateData+0x28c>)
   9a5a6:	4608      	mov	r0, r1
   9a5a8:	4611      	mov	r1, r2
   9a5aa:	4798      	blx	r3
   9a5ac:	4603      	mov	r3, r0
   9a5ae:	623b      	str	r3, [r7, #32]
			avgtmp3 =(avgtmp3*5 + temp1)/6;
   9a5b0:	4b75      	ldr	r3, [pc, #468]	; (9a788 <Cl_Disinf_SendDisinfStateData+0x290>)
   9a5b2:	681a      	ldr	r2, [r3, #0]
   9a5b4:	4b75      	ldr	r3, [pc, #468]	; (9a78c <Cl_Disinf_SendDisinfStateData+0x294>)
   9a5b6:	4976      	ldr	r1, [pc, #472]	; (9a790 <Cl_Disinf_SendDisinfStateData+0x298>)
   9a5b8:	4610      	mov	r0, r2
   9a5ba:	4798      	blx	r3
   9a5bc:	4603      	mov	r3, r0
   9a5be:	461a      	mov	r2, r3
   9a5c0:	4b74      	ldr	r3, [pc, #464]	; (9a794 <Cl_Disinf_SendDisinfStateData+0x29c>)
   9a5c2:	6a39      	ldr	r1, [r7, #32]
   9a5c4:	4610      	mov	r0, r2
   9a5c6:	4798      	blx	r3
   9a5c8:	4603      	mov	r3, r0
   9a5ca:	461a      	mov	r2, r3
   9a5cc:	4b68      	ldr	r3, [pc, #416]	; (9a770 <Cl_Disinf_SendDisinfStateData+0x278>)
   9a5ce:	4972      	ldr	r1, [pc, #456]	; (9a798 <Cl_Disinf_SendDisinfStateData+0x2a0>)
   9a5d0:	4610      	mov	r0, r2
   9a5d2:	4798      	blx	r3
   9a5d4:	4603      	mov	r3, r0
   9a5d6:	461a      	mov	r2, r3
   9a5d8:	4b6b      	ldr	r3, [pc, #428]	; (9a788 <Cl_Disinf_SendDisinfStateData+0x290>)
   9a5da:	601a      	str	r2, [r3, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9a5dc:	f107 030e 	add.w	r3, r7, #14
   9a5e0:	4619      	mov	r1, r3
   9a5e2:	2007      	movs	r0, #7
   9a5e4:	4b5f      	ldr	r3, [pc, #380]	; (9a764 <Cl_Disinf_SendDisinfStateData+0x26c>)
   9a5e6:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9a5e8:	f04f 0300 	mov.w	r3, #0
   9a5ec:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9a5ee:	f04f 0300 	mov.w	r3, #0
   9a5f2:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9a5f4:	89fb      	ldrh	r3, [r7, #14]
   9a5f6:	461a      	mov	r2, r3
   9a5f8:	4b68      	ldr	r3, [pc, #416]	; (9a79c <Cl_Disinf_SendDisinfStateData+0x2a4>)
   9a5fa:	4610      	mov	r0, r2
   9a5fc:	4798      	blx	r3
   9a5fe:	4c68      	ldr	r4, [pc, #416]	; (9a7a0 <Cl_Disinf_SendDisinfStateData+0x2a8>)
   9a600:	a353      	add	r3, pc, #332	; (adr r3, 9a750 <Cl_Disinf_SendDisinfStateData+0x258>)
   9a602:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a606:	47a0      	blx	r4
   9a608:	4603      	mov	r3, r0
   9a60a:	460c      	mov	r4, r1
   9a60c:	4619      	mov	r1, r3
   9a60e:	4622      	mov	r2, r4
   9a610:	4b5c      	ldr	r3, [pc, #368]	; (9a784 <Cl_Disinf_SendDisinfStateData+0x28c>)
   9a612:	4608      	mov	r0, r1
   9a614:	4611      	mov	r1, r2
   9a616:	4798      	blx	r3
   9a618:	4603      	mov	r3, r0
   9a61a:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9a61c:	4b61      	ldr	r3, [pc, #388]	; (9a7a4 <Cl_Disinf_SendDisinfStateData+0x2ac>)
   9a61e:	4962      	ldr	r1, [pc, #392]	; (9a7a8 <Cl_Disinf_SendDisinfStateData+0x2b0>)
   9a620:	69b8      	ldr	r0, [r7, #24]
   9a622:	4798      	blx	r3
   9a624:	4603      	mov	r3, r0
   9a626:	2b00      	cmp	r3, #0
   9a628:	f000 80d0 	beq.w	9a7cc <Cl_Disinf_SendDisinfStateData+0x2d4>
					{
			calibration_cond(temp2);
   9a62c:	69b8      	ldr	r0, [r7, #24]
   9a62e:	4b5f      	ldr	r3, [pc, #380]	; (9a7ac <Cl_Disinf_SendDisinfStateData+0x2b4>)
   9a630:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9a632:	4b5f      	ldr	r3, [pc, #380]	; (9a7b0 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9a634:	681a      	ldr	r2, [r3, #0]
   9a636:	4b55      	ldr	r3, [pc, #340]	; (9a78c <Cl_Disinf_SendDisinfStateData+0x294>)
   9a638:	4955      	ldr	r1, [pc, #340]	; (9a790 <Cl_Disinf_SendDisinfStateData+0x298>)
   9a63a:	4610      	mov	r0, r2
   9a63c:	4798      	blx	r3
   9a63e:	4603      	mov	r3, r0
   9a640:	4618      	mov	r0, r3
   9a642:	4b5c      	ldr	r3, [pc, #368]	; (9a7b4 <Cl_Disinf_SendDisinfStateData+0x2bc>)
   9a644:	681a      	ldr	r2, [r3, #0]
   9a646:	4b53      	ldr	r3, [pc, #332]	; (9a794 <Cl_Disinf_SendDisinfStateData+0x29c>)
   9a648:	4611      	mov	r1, r2
   9a64a:	4798      	blx	r3
   9a64c:	4603      	mov	r3, r0
   9a64e:	461a      	mov	r2, r3
   9a650:	4b47      	ldr	r3, [pc, #284]	; (9a770 <Cl_Disinf_SendDisinfStateData+0x278>)
   9a652:	4951      	ldr	r1, [pc, #324]	; (9a798 <Cl_Disinf_SendDisinfStateData+0x2a0>)
   9a654:	4610      	mov	r0, r2
   9a656:	4798      	blx	r3
   9a658:	4603      	mov	r3, r0
   9a65a:	461a      	mov	r2, r3
   9a65c:	4b54      	ldr	r3, [pc, #336]	; (9a7b0 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9a65e:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9a660:	4b53      	ldr	r3, [pc, #332]	; (9a7b0 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   9a662:	681a      	ldr	r2, [r3, #0]
   9a664:	4b44      	ldr	r3, [pc, #272]	; (9a778 <Cl_Disinf_SendDisinfStateData+0x280>)
   9a666:	4610      	mov	r0, r2
   9a668:	4798      	blx	r3
   9a66a:	4605      	mov	r5, r0
   9a66c:	460e      	mov	r6, r1
   9a66e:	4b46      	ldr	r3, [pc, #280]	; (9a788 <Cl_Disinf_SendDisinfStateData+0x290>)
   9a670:	681a      	ldr	r2, [r3, #0]
   9a672:	4b41      	ldr	r3, [pc, #260]	; (9a778 <Cl_Disinf_SendDisinfStateData+0x280>)
   9a674:	4610      	mov	r0, r2
   9a676:	4798      	blx	r3
   9a678:	4c40      	ldr	r4, [pc, #256]	; (9a77c <Cl_Disinf_SendDisinfStateData+0x284>)
   9a67a:	f04f 0200 	mov.w	r2, #0
   9a67e:	4b4e      	ldr	r3, [pc, #312]	; (9a7b8 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   9a680:	47a0      	blx	r4
   9a682:	4603      	mov	r3, r0
   9a684:	460c      	mov	r4, r1
   9a686:	4618      	mov	r0, r3
   9a688:	4621      	mov	r1, r4
   9a68a:	4c45      	ldr	r4, [pc, #276]	; (9a7a0 <Cl_Disinf_SendDisinfStateData+0x2a8>)
   9a68c:	a332      	add	r3, pc, #200	; (adr r3, 9a758 <Cl_Disinf_SendDisinfStateData+0x260>)
   9a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a692:	47a0      	blx	r4
   9a694:	4603      	mov	r3, r0
   9a696:	460c      	mov	r4, r1
   9a698:	4618      	mov	r0, r3
   9a69a:	4621      	mov	r1, r4
   9a69c:	4c38      	ldr	r4, [pc, #224]	; (9a780 <Cl_Disinf_SendDisinfStateData+0x288>)
   9a69e:	f04f 0200 	mov.w	r2, #0
   9a6a2:	4b46      	ldr	r3, [pc, #280]	; (9a7bc <Cl_Disinf_SendDisinfStateData+0x2c4>)
   9a6a4:	47a0      	blx	r4
   9a6a6:	4603      	mov	r3, r0
   9a6a8:	460c      	mov	r4, r1
   9a6aa:	461a      	mov	r2, r3
   9a6ac:	4623      	mov	r3, r4
   9a6ae:	4c44      	ldr	r4, [pc, #272]	; (9a7c0 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   9a6b0:	4628      	mov	r0, r5
   9a6b2:	4631      	mov	r1, r6
   9a6b4:	47a0      	blx	r4
   9a6b6:	4603      	mov	r3, r0
   9a6b8:	460c      	mov	r4, r1
   9a6ba:	4619      	mov	r1, r3
   9a6bc:	4622      	mov	r2, r4
   9a6be:	4b31      	ldr	r3, [pc, #196]	; (9a784 <Cl_Disinf_SendDisinfStateData+0x28c>)
   9a6c0:	4608      	mov	r0, r1
   9a6c2:	4611      	mov	r1, r2
   9a6c4:	4798      	blx	r3
   9a6c6:	4603      	mov	r3, r0
   9a6c8:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9a6ca:	4b29      	ldr	r3, [pc, #164]	; (9a770 <Cl_Disinf_SendDisinfStateData+0x278>)
   9a6cc:	493d      	ldr	r1, [pc, #244]	; (9a7c4 <Cl_Disinf_SendDisinfStateData+0x2cc>)
   9a6ce:	69f8      	ldr	r0, [r7, #28]
   9a6d0:	4798      	blx	r3
   9a6d2:	4603      	mov	r3, r0
   9a6d4:	461a      	mov	r2, r3
   9a6d6:	4b3c      	ldr	r3, [pc, #240]	; (9a7c8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9a6d8:	4610      	mov	r0, r2
   9a6da:	4798      	blx	r3
   9a6dc:	4603      	mov	r3, r0
   9a6de:	b29b      	uxth	r3, r3
   9a6e0:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9a6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a6e6:	1c5a      	adds	r2, r3, #1
   9a6e8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a6ec:	7c3a      	ldrb	r2, [r7, #16]
   9a6ee:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a6f2:	440b      	add	r3, r1
   9a6f4:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9a6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a6fc:	1c5a      	adds	r2, r3, #1
   9a6fe:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a702:	7c7a      	ldrb	r2, [r7, #17]
   9a704:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a708:	440b      	add	r3, r1
   9a70a:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9a70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a712:	1c5a      	adds	r2, r3, #1
   9a714:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a718:	7cba      	ldrb	r2, [r7, #18]
   9a71a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a71e:	440b      	add	r3, r1
   9a720:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9a724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a728:	1c5a      	adds	r2, r3, #1
   9a72a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a72e:	7cfa      	ldrb	r2, [r7, #19]
   9a730:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a734:	440b      	add	r3, r1
   9a736:	f803 2c28 	strb.w	r2, [r3, #-40]
   9a73a:	e075      	b.n	9a828 <Cl_Disinf_SendDisinfStateData+0x330>
   9a73c:	f3af 8000 	nop.w
   9a740:	cccccccd 	.word	0xcccccccd
   9a744:	4008cccc 	.word	0x4008cccc
   9a748:	66666666 	.word	0x66666666
   9a74c:	3ff66666 	.word	0x3ff66666
   9a750:	58e21965 	.word	0x58e21965
   9a754:	3fe9b717 	.word	0x3fe9b717
   9a758:	47ae147b 	.word	0x47ae147b
   9a75c:	3f947ae1 	.word	0x3f947ae1
   9a760:	20072788 	.word	0x20072788
   9a764:	0008d499 	.word	0x0008d499
   9a768:	0008e659 	.word	0x0008e659
   9a76c:	200725ec 	.word	0x200725ec
   9a770:	000a27f5 	.word	0x000a27f5
   9a774:	42c80000 	.word	0x42c80000
   9a778:	000a1d65 	.word	0x000a1d65
   9a77c:	000a1aa5 	.word	0x000a1aa5
   9a780:	000a1aa9 	.word	0x000a1aa9
   9a784:	000a23d1 	.word	0x000a23d1
   9a788:	2007278c 	.word	0x2007278c
   9a78c:	000a268d 	.word	0x000a268d
   9a790:	40a00000 	.word	0x40a00000
   9a794:	000a247d 	.word	0x000a247d
   9a798:	40c00000 	.word	0x40c00000
   9a79c:	000a1d41 	.word	0x000a1d41
   9a7a0:	000a1e0d 	.word	0x000a1e0d
   9a7a4:	000a2a05 	.word	0x000a2a05
   9a7a8:	44160000 	.word	0x44160000
   9a7ac:	00084471 	.word	0x00084471
   9a7b0:	20072790 	.word	0x20072790
   9a7b4:	20071634 	.word	0x20071634
   9a7b8:	40390000 	.word	0x40390000
   9a7bc:	3ff00000 	.word	0x3ff00000
   9a7c0:	000a2061 	.word	0x000a2061
   9a7c4:	41200000 	.word	0x41200000
   9a7c8:	000a2a65 	.word	0x000a2a65
					}
		else
					{
			data.Twobyte = 0;
   9a7cc:	2300      	movs	r3, #0
   9a7ce:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9a7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a7d4:	1c5a      	adds	r2, r3, #1
   9a7d6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a7da:	7c3a      	ldrb	r2, [r7, #16]
   9a7dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a7e0:	440b      	add	r3, r1
   9a7e2:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9a7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a7ea:	1c5a      	adds	r2, r3, #1
   9a7ec:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a7f0:	7c7a      	ldrb	r2, [r7, #17]
   9a7f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a7f6:	440b      	add	r3, r1
   9a7f8:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9a7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a800:	1c5a      	adds	r2, r3, #1
   9a802:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a806:	7cba      	ldrb	r2, [r7, #18]
   9a808:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a80c:	440b      	add	r3, r1
   9a80e:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9a812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a816:	1c5a      	adds	r2, r3, #1
   9a818:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a81c:	7cfa      	ldrb	r2, [r7, #19]
   9a81e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a822:	440b      	add	r3, r1
   9a824:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9a828:	4b24      	ldr	r3, [pc, #144]	; (9a8bc <Cl_Disinf_SendDisinfStateData+0x3c4>)
   9a82a:	681a      	ldr	r2, [r3, #0]
   9a82c:	4b24      	ldr	r3, [pc, #144]	; (9a8c0 <Cl_Disinf_SendDisinfStateData+0x3c8>)
   9a82e:	4925      	ldr	r1, [pc, #148]	; (9a8c4 <Cl_Disinf_SendDisinfStateData+0x3cc>)
   9a830:	4610      	mov	r0, r2
   9a832:	4798      	blx	r3
   9a834:	4603      	mov	r3, r0
   9a836:	461a      	mov	r2, r3
   9a838:	4b23      	ldr	r3, [pc, #140]	; (9a8c8 <Cl_Disinf_SendDisinfStateData+0x3d0>)
   9a83a:	4610      	mov	r0, r2
   9a83c:	4798      	blx	r3
   9a83e:	4603      	mov	r3, r0
   9a840:	b29b      	uxth	r3, r3
   9a842:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9a844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a848:	1c5a      	adds	r2, r3, #1
   9a84a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a84e:	7c3a      	ldrb	r2, [r7, #16]
   9a850:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a854:	440b      	add	r3, r1
   9a856:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9a85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a85e:	1c5a      	adds	r2, r3, #1
   9a860:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a864:	7c7a      	ldrb	r2, [r7, #17]
   9a866:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a86a:	440b      	add	r3, r1
   9a86c:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9a870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a874:	1c5a      	adds	r2, r3, #1
   9a876:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a87a:	7cba      	ldrb	r2, [r7, #18]
   9a87c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a880:	440b      	add	r3, r1
   9a882:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9a886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9a88a:	1c5a      	adds	r2, r3, #1
   9a88c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9a890:	7cfa      	ldrb	r2, [r7, #19]
   9a892:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9a896:	440b      	add	r3, r1
   9a898:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9a89c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9a8a0:	463b      	mov	r3, r7
   9a8a2:	4619      	mov	r1, r3
   9a8a4:	202a      	movs	r0, #42	; 0x2a
   9a8a6:	4b09      	ldr	r3, [pc, #36]	; (9a8cc <Cl_Disinf_SendDisinfStateData+0x3d4>)
   9a8a8:	4798      	blx	r3
   9a8aa:	4603      	mov	r3, r0
   9a8ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9a8b0:	e000      	b.n	9a8b4 <Cl_Disinf_SendDisinfStateData+0x3bc>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   9a8b2:	bf00      	nop

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
	
	
	}
   9a8b4:	4618      	mov	r0, r3
   9a8b6:	372c      	adds	r7, #44	; 0x2c
   9a8b8:	46bd      	mov	sp, r7
   9a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9a8bc:	2007278c 	.word	0x2007278c
   9a8c0:	000a268d 	.word	0x000a268d
   9a8c4:	41200000 	.word	0x41200000
   9a8c8:	000a2a65 	.word	0x000a2a65
   9a8cc:	00098601 	.word	0x00098601

0009a8d0 <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9a8d0:	b580      	push	{r7, lr}
   9a8d2:	b082      	sub	sp, #8
   9a8d4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9a8d6:	2300      	movs	r3, #0
   9a8d8:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9a8da:	4b0b      	ldr	r3, [pc, #44]	; (9a908 <UpdateDisinfMinuteTick+0x38>)
   9a8dc:	2200      	movs	r2, #0
   9a8de:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9a8e0:	4b0a      	ldr	r3, [pc, #40]	; (9a90c <UpdateDisinfMinuteTick+0x3c>)
   9a8e2:	681b      	ldr	r3, [r3, #0]
   9a8e4:	3301      	adds	r3, #1
   9a8e6:	4a09      	ldr	r2, [pc, #36]	; (9a90c <UpdateDisinfMinuteTick+0x3c>)
   9a8e8:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9a8ea:	4b09      	ldr	r3, [pc, #36]	; (9a910 <UpdateDisinfMinuteTick+0x40>)
   9a8ec:	681b      	ldr	r3, [r3, #0]
   9a8ee:	3301      	adds	r3, #1
   9a8f0:	4a07      	ldr	r2, [pc, #28]	; (9a910 <UpdateDisinfMinuteTick+0x40>)
   9a8f2:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9a8f4:	4b07      	ldr	r3, [pc, #28]	; (9a914 <UpdateDisinfMinuteTick+0x44>)
   9a8f6:	4798      	blx	r3
   9a8f8:	4603      	mov	r3, r0
   9a8fa:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9a8fc:	79fb      	ldrb	r3, [r7, #7]
	}
   9a8fe:	4618      	mov	r0, r3
   9a900:	3708      	adds	r7, #8
   9a902:	46bd      	mov	sp, r7
   9a904:	bd80      	pop	{r7, pc}
   9a906:	bf00      	nop
   9a908:	2007275c 	.word	0x2007275c
   9a90c:	20072760 	.word	0x20072760
   9a910:	20072774 	.word	0x20072774
   9a914:	0009a079 	.word	0x0009a079

0009a918 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9a918:	b580      	push	{r7, lr}
   9a91a:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9a91c:	4b29      	ldr	r3, [pc, #164]	; (9a9c4 <Cl_dprep_init+0xac>)
   9a91e:	2200      	movs	r2, #0
   9a920:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9a922:	4b29      	ldr	r3, [pc, #164]	; (9a9c8 <Cl_dprep_init+0xb0>)
   9a924:	2200      	movs	r2, #0
   9a926:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9a928:	4b28      	ldr	r3, [pc, #160]	; (9a9cc <Cl_dprep_init+0xb4>)
   9a92a:	2200      	movs	r2, #0
   9a92c:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9a92e:	4b28      	ldr	r3, [pc, #160]	; (9a9d0 <Cl_dprep_init+0xb8>)
   9a930:	2200      	movs	r2, #0
   9a932:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9a934:	4b27      	ldr	r3, [pc, #156]	; (9a9d4 <Cl_dprep_init+0xbc>)
   9a936:	2200      	movs	r2, #0
   9a938:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9a93a:	4b27      	ldr	r3, [pc, #156]	; (9a9d8 <Cl_dprep_init+0xc0>)
   9a93c:	2200      	movs	r2, #0
   9a93e:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9a940:	4b26      	ldr	r3, [pc, #152]	; (9a9dc <Cl_dprep_init+0xc4>)
   9a942:	2200      	movs	r2, #0
   9a944:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9a946:	4b26      	ldr	r3, [pc, #152]	; (9a9e0 <Cl_dprep_init+0xc8>)
   9a948:	2200      	movs	r2, #0
   9a94a:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9a94c:	4b25      	ldr	r3, [pc, #148]	; (9a9e4 <Cl_dprep_init+0xcc>)
   9a94e:	2200      	movs	r2, #0
   9a950:	801a      	strh	r2, [r3, #0]

	Cl_Dprep_Prime_secondscounter = 0;
   9a952:	4b25      	ldr	r3, [pc, #148]	; (9a9e8 <Cl_dprep_init+0xd0>)
   9a954:	2200      	movs	r2, #0
   9a956:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9a958:	4b24      	ldr	r3, [pc, #144]	; (9a9ec <Cl_dprep_init+0xd4>)
   9a95a:	2200      	movs	r2, #0
   9a95c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9a95e:	4b24      	ldr	r3, [pc, #144]	; (9a9f0 <Cl_dprep_init+0xd8>)
   9a960:	2200      	movs	r2, #0
   9a962:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9a964:	4b23      	ldr	r3, [pc, #140]	; (9a9f4 <Cl_dprep_init+0xdc>)
   9a966:	2200      	movs	r2, #0
   9a968:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9a96a:	4b23      	ldr	r3, [pc, #140]	; (9a9f8 <Cl_dprep_init+0xe0>)
   9a96c:	2200      	movs	r2, #0
   9a96e:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9a970:	4b22      	ldr	r3, [pc, #136]	; (9a9fc <Cl_dprep_init+0xe4>)
   9a972:	2200      	movs	r2, #0
   9a974:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9a976:	4b22      	ldr	r3, [pc, #136]	; (9aa00 <Cl_dprep_init+0xe8>)
   9a978:	2200      	movs	r2, #0
   9a97a:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9a97c:	4b21      	ldr	r3, [pc, #132]	; (9aa04 <Cl_dprep_init+0xec>)
   9a97e:	2200      	movs	r2, #0
   9a980:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9a982:	4b21      	ldr	r3, [pc, #132]	; (9aa08 <Cl_dprep_init+0xf0>)
   9a984:	f04f 0200 	mov.w	r2, #0
   9a988:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9a98a:	4b20      	ldr	r3, [pc, #128]	; (9aa0c <Cl_dprep_init+0xf4>)
   9a98c:	2200      	movs	r2, #0
   9a98e:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9a990:	4b1f      	ldr	r3, [pc, #124]	; (9aa10 <Cl_dprep_init+0xf8>)
   9a992:	2200      	movs	r2, #0
   9a994:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9a996:	4b1f      	ldr	r3, [pc, #124]	; (9aa14 <Cl_dprep_init+0xfc>)
   9a998:	2200      	movs	r2, #0
   9a99a:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9a99c:	4b1e      	ldr	r3, [pc, #120]	; (9aa18 <Cl_dprep_init+0x100>)
   9a99e:	2200      	movs	r2, #0
   9a9a0:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9a9a2:	4b1e      	ldr	r3, [pc, #120]	; (9aa1c <Cl_dprep_init+0x104>)
   9a9a4:	2200      	movs	r2, #0
   9a9a6:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9a9a8:	4b1d      	ldr	r3, [pc, #116]	; (9aa20 <Cl_dprep_init+0x108>)
   9a9aa:	2200      	movs	r2, #0
   9a9ac:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9a9ae:	4b1d      	ldr	r3, [pc, #116]	; (9aa24 <Cl_dprep_init+0x10c>)
   9a9b0:	2200      	movs	r2, #0
   9a9b2:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9a9b4:	4b1c      	ldr	r3, [pc, #112]	; (9aa28 <Cl_dprep_init+0x110>)
   9a9b6:	2200      	movs	r2, #0
   9a9b8:	701a      	strb	r2, [r3, #0]
	
	cl_dprep_primeInit();
   9a9ba:	4b1c      	ldr	r3, [pc, #112]	; (9aa2c <Cl_dprep_init+0x114>)
   9a9bc:	4798      	blx	r3

	 return CL_OK;
   9a9be:	2300      	movs	r3, #0
 }
   9a9c0:	4618      	mov	r0, r3
   9a9c2:	bd80      	pop	{r7, pc}
   9a9c4:	20072798 	.word	0x20072798
   9a9c8:	2007279c 	.word	0x2007279c
   9a9cc:	200727a0 	.word	0x200727a0
   9a9d0:	200727a4 	.word	0x200727a4
   9a9d4:	200727a8 	.word	0x200727a8
   9a9d8:	200727ac 	.word	0x200727ac
   9a9dc:	200727ae 	.word	0x200727ae
   9a9e0:	200727b0 	.word	0x200727b0
   9a9e4:	200727b2 	.word	0x200727b2
   9a9e8:	200727b4 	.word	0x200727b4
   9a9ec:	200727b6 	.word	0x200727b6
   9a9f0:	200727b8 	.word	0x200727b8
   9a9f4:	200727ba 	.word	0x200727ba
   9a9f8:	200727bc 	.word	0x200727bc
   9a9fc:	200727be 	.word	0x200727be
   9aa00:	200727c0 	.word	0x200727c0
   9aa04:	200727c2 	.word	0x200727c2
   9aa08:	200727c4 	.word	0x200727c4
   9aa0c:	200727c8 	.word	0x200727c8
   9aa10:	200727c9 	.word	0x200727c9
   9aa14:	200727ca 	.word	0x200727ca
   9aa18:	200727cb 	.word	0x200727cb
   9aa1c:	200727cc 	.word	0x200727cc
   9aa20:	200727ce 	.word	0x200727ce
   9aa24:	200727cf 	.word	0x200727cf
   9aa28:	200727d1 	.word	0x200727d1
   9aa2c:	00088921 	.word	0x00088921

0009aa30 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9aa30:	b590      	push	{r4, r7, lr}
   9aa32:	b0ad      	sub	sp, #180	; 0xb4
   9aa34:	af02      	add	r7, sp, #8
   9aa36:	4603      	mov	r3, r0
   9aa38:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9aa3a:	2300      	movs	r3, #0
   9aa3c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9aa40:	2300      	movs	r3, #0
   9aa42:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9aa46:	234a      	movs	r3, #74	; 0x4a
   9aa48:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	Cl_Uint8Type data = 0;
   9aa4c:	2300      	movs	r3, #0
   9aa4e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	Cl_Uint8Type datasize = 0;
   9aa52:	2300      	movs	r3, #0
   9aa54:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9aa58:	2300      	movs	r3, #0
   9aa5a:	667b      	str	r3, [r7, #100]	; 0x64
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9aa5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   9aa60:	2228      	movs	r2, #40	; 0x28
   9aa62:	2100      	movs	r1, #0
   9aa64:	4618      	mov	r0, r3
   9aa66:	4bc0      	ldr	r3, [pc, #768]	; (9ad68 <Cl_dprep_controller+0x338>)
   9aa68:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9aa6a:	2300      	movs	r3, #0
   9aa6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   9aa70:	2300      	movs	r3, #0
   9aa72:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9aa76:	2300      	movs	r3, #0
   9aa78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
   9aa7c:	2300      	movs	r3, #0
   9aa7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9aa82:	f04f 0300 	mov.w	r3, #0
   9aa86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	Cl_Uint16Type temp = 0;
   9aa8a:	2300      	movs	r3, #0
   9aa8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	Cl_Uint16Type tempcount;
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9aa8e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
   9aa92:	79fb      	ldrb	r3, [r7, #7]
   9aa94:	4611      	mov	r1, r2
   9aa96:	4618      	mov	r0, r3
   9aa98:	4bb4      	ldr	r3, [pc, #720]	; (9ad6c <Cl_dprep_controller+0x33c>)
   9aa9a:	4798      	blx	r3
	
	switch(cl_dprepevent)
   9aa9c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9aaa0:	3b05      	subs	r3, #5
   9aaa2:	2b1e      	cmp	r3, #30
   9aaa4:	f200 80a4 	bhi.w	9abf0 <Cl_dprep_controller+0x1c0>
   9aaa8:	a201      	add	r2, pc, #4	; (adr r2, 9aab0 <Cl_dprep_controller+0x80>)
   9aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9aaae:	bf00      	nop
   9aab0:	0009ab37 	.word	0x0009ab37
   9aab4:	0009ab41 	.word	0x0009ab41
   9aab8:	0009ab4b 	.word	0x0009ab4b
   9aabc:	0009abf1 	.word	0x0009abf1
   9aac0:	0009abf1 	.word	0x0009abf1
   9aac4:	0009abf1 	.word	0x0009abf1
   9aac8:	0009abf1 	.word	0x0009abf1
   9aacc:	0009abf1 	.word	0x0009abf1
   9aad0:	0009abf1 	.word	0x0009abf1
   9aad4:	0009abf1 	.word	0x0009abf1
   9aad8:	0009abf1 	.word	0x0009abf1
   9aadc:	0009abf1 	.word	0x0009abf1
   9aae0:	0009abf1 	.word	0x0009abf1
   9aae4:	0009abf1 	.word	0x0009abf1
   9aae8:	0009abf1 	.word	0x0009abf1
   9aaec:	0009abf1 	.word	0x0009abf1
   9aaf0:	0009abf1 	.word	0x0009abf1
   9aaf4:	0009ab2d 	.word	0x0009ab2d
   9aaf8:	0009abf1 	.word	0x0009abf1
   9aafc:	0009abf1 	.word	0x0009abf1
   9ab00:	0009abf1 	.word	0x0009abf1
   9ab04:	0009abf1 	.word	0x0009abf1
   9ab08:	0009abf1 	.word	0x0009abf1
   9ab0c:	0009abf1 	.word	0x0009abf1
   9ab10:	0009abf1 	.word	0x0009abf1
   9ab14:	0009abf1 	.word	0x0009abf1
   9ab18:	0009abf1 	.word	0x0009abf1
   9ab1c:	0009abf1 	.word	0x0009abf1
   9ab20:	0009abe7 	.word	0x0009abe7
   9ab24:	0009ab87 	.word	0x0009ab87
   9ab28:	0009abdd 	.word	0x0009abdd
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9ab2c:	4b90      	ldr	r3, [pc, #576]	; (9ad70 <Cl_dprep_controller+0x340>)
   9ab2e:	781a      	ldrb	r2, [r3, #0]
   9ab30:	4b90      	ldr	r3, [pc, #576]	; (9ad74 <Cl_dprep_controller+0x344>)
   9ab32:	701a      	strb	r2, [r3, #0]
		break;
   9ab34:	e061      	b.n	9abfa <Cl_dprep_controller+0x1ca>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,1);
   9ab36:	2101      	movs	r1, #1
   9ab38:	2002      	movs	r0, #2
   9ab3a:	4b8f      	ldr	r3, [pc, #572]	; (9ad78 <Cl_dprep_controller+0x348>)
   9ab3c:	4798      	blx	r3
		break;
   9ab3e:	e05c      	b.n	9abfa <Cl_dprep_controller+0x1ca>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9ab40:	2101      	movs	r1, #1
   9ab42:	2004      	movs	r0, #4
   9ab44:	4b8c      	ldr	r3, [pc, #560]	; (9ad78 <Cl_dprep_controller+0x348>)
   9ab46:	4798      	blx	r3
		break;
   9ab48:	e057      	b.n	9abfa <Cl_dprep_controller+0x1ca>
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9ab4a:	4b8c      	ldr	r3, [pc, #560]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab4c:	7e1b      	ldrb	r3, [r3, #24]
   9ab4e:	2b00      	cmp	r3, #0
   9ab50:	d050      	beq.n	9abf4 <Cl_dprep_controller+0x1c4>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9ab52:	4b8a      	ldr	r3, [pc, #552]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab54:	791b      	ldrb	r3, [r3, #4]
   9ab56:	f887 3020 	strb.w	r3, [r7, #32]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9ab5a:	4b88      	ldr	r3, [pc, #544]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab5c:	795b      	ldrb	r3, [r3, #5]
   9ab5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9ab62:	4b86      	ldr	r3, [pc, #536]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab64:	799b      	ldrb	r3, [r3, #6]
   9ab66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9ab6a:	4b84      	ldr	r3, [pc, #528]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab6c:	79db      	ldrb	r3, [r3, #7]
   9ab6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9ab72:	8c3b      	ldrh	r3, [r7, #32]
   9ab74:	4619      	mov	r1, r3
   9ab76:	2001      	movs	r0, #1
   9ab78:	4b7f      	ldr	r3, [pc, #508]	; (9ad78 <Cl_dprep_controller+0x348>)
   9ab7a:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9ab7c:	8c3b      	ldrh	r3, [r7, #32]
   9ab7e:	461a      	mov	r2, r3
   9ab80:	4b7f      	ldr	r3, [pc, #508]	; (9ad80 <Cl_dprep_controller+0x350>)
   9ab82:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9ab84:	e036      	b.n	9abf4 <Cl_dprep_controller+0x1c4>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9ab86:	4b7d      	ldr	r3, [pc, #500]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab88:	7e1b      	ldrb	r3, [r3, #24]
   9ab8a:	2b00      	cmp	r3, #0
   9ab8c:	d034      	beq.n	9abf8 <Cl_dprep_controller+0x1c8>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ab8e:	4b7b      	ldr	r3, [pc, #492]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab90:	795b      	ldrb	r3, [r3, #5]
   9ab92:	773b      	strb	r3, [r7, #28]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9ab94:	4b79      	ldr	r3, [pc, #484]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab96:	799b      	ldrb	r3, [r3, #6]
   9ab98:	777b      	strb	r3, [r7, #29]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ab9a:	4b78      	ldr	r3, [pc, #480]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ab9c:	79db      	ldrb	r3, [r3, #7]
   9ab9e:	77bb      	strb	r3, [r7, #30]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9aba0:	4b76      	ldr	r3, [pc, #472]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9aba2:	7a1b      	ldrb	r3, [r3, #8]
   9aba4:	77fb      	strb	r3, [r7, #31]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9aba6:	4b75      	ldr	r3, [pc, #468]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9aba8:	791b      	ldrb	r3, [r3, #4]
   9abaa:	2b01      	cmp	r3, #1
   9abac:	d104      	bne.n	9abb8 <Cl_dprep_controller+0x188>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9abae:	2100      	movs	r1, #0
   9abb0:	2001      	movs	r0, #1
   9abb2:	4b74      	ldr	r3, [pc, #464]	; (9ad84 <Cl_dprep_controller+0x354>)
   9abb4:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9abb6:	e01f      	b.n	9abf8 <Cl_dprep_controller+0x1c8>
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9abb8:	4b70      	ldr	r3, [pc, #448]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9abba:	791b      	ldrb	r3, [r3, #4]
   9abbc:	2b02      	cmp	r3, #2
   9abbe:	d104      	bne.n	9abca <Cl_dprep_controller+0x19a>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9abc0:	2100      	movs	r1, #0
   9abc2:	2004      	movs	r0, #4
   9abc4:	4b6f      	ldr	r3, [pc, #444]	; (9ad84 <Cl_dprep_controller+0x354>)
   9abc6:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9abc8:	e016      	b.n	9abf8 <Cl_dprep_controller+0x1c8>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9abca:	4b6c      	ldr	r3, [pc, #432]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9abcc:	791b      	ldrb	r3, [r3, #4]
   9abce:	2b00      	cmp	r3, #0
   9abd0:	d112      	bne.n	9abf8 <Cl_dprep_controller+0x1c8>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9abd2:	2100      	movs	r1, #0
   9abd4:	200a      	movs	r0, #10
   9abd6:	4b6b      	ldr	r3, [pc, #428]	; (9ad84 <Cl_dprep_controller+0x354>)
   9abd8:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9abda:	e00d      	b.n	9abf8 <Cl_dprep_controller+0x1c8>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9abdc:	2100      	movs	r1, #0
   9abde:	200c      	movs	r0, #12
   9abe0:	4b68      	ldr	r3, [pc, #416]	; (9ad84 <Cl_dprep_controller+0x354>)
   9abe2:	4798      	blx	r3
			break;
   9abe4:	e009      	b.n	9abfa <Cl_dprep_controller+0x1ca>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9abe6:	2100      	movs	r1, #0
   9abe8:	2007      	movs	r0, #7
   9abea:	4b66      	ldr	r3, [pc, #408]	; (9ad84 <Cl_dprep_controller+0x354>)
   9abec:	4798      	blx	r3
			break;
   9abee:	e004      	b.n	9abfa <Cl_dprep_controller+0x1ca>
		case EVENT_HEAPARIN_BOLUS:
		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		break;
#endif
		default:break;
   9abf0:	bf00      	nop
   9abf2:	e002      	b.n	9abfa <Cl_dprep_controller+0x1ca>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		
		break;
   9abf4:	bf00      	nop
   9abf6:	e000      	b.n	9abfa <Cl_dprep_controller+0x1ca>
				}
				
			}
			
			
			break;
   9abf8:	bf00      	nop
		break;
#endif
		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9abfa:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9abfe:	2b16      	cmp	r3, #22
   9ac00:	d105      	bne.n	9ac0e <Cl_dprep_controller+0x1de>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9ac02:	200c      	movs	r0, #12
   9ac04:	4b60      	ldr	r3, [pc, #384]	; (9ad88 <Cl_dprep_controller+0x358>)
   9ac06:	4798      	blx	r3
   9ac08:	4603      	mov	r3, r0
   9ac0a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9ac0e:	4b58      	ldr	r3, [pc, #352]	; (9ad70 <Cl_dprep_controller+0x340>)
   9ac10:	781b      	ldrb	r3, [r3, #0]
   9ac12:	2b0d      	cmp	r3, #13
   9ac14:	f201 83ac 	bhi.w	9c370 <Cl_dprep_controller+0x1940>
   9ac18:	a201      	add	r2, pc, #4	; (adr r2, 9ac20 <Cl_dprep_controller+0x1f0>)
   9ac1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ac1e:	bf00      	nop
   9ac20:	0009ac59 	.word	0x0009ac59
   9ac24:	0009c371 	.word	0x0009c371
   9ac28:	0009afd1 	.word	0x0009afd1
   9ac2c:	0009b8c9 	.word	0x0009b8c9
   9ac30:	0009c371 	.word	0x0009c371
   9ac34:	0009baed 	.word	0x0009baed
   9ac38:	0009bd6b 	.word	0x0009bd6b
   9ac3c:	0009bfcd 	.word	0x0009bfcd
   9ac40:	0009bfe7 	.word	0x0009bfe7
   9ac44:	0009c1cb 	.word	0x0009c1cb
   9ac48:	0009c371 	.word	0x0009c371
   9ac4c:	0009ac59 	.word	0x0009ac59
   9ac50:	0009b705 	.word	0x0009b705
   9ac54:	0009b653 	.word	0x0009b653

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9ac58:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9ac5c:	3b02      	subs	r3, #2
   9ac5e:	2b1d      	cmp	r3, #29
   9ac60:	f200 81a1 	bhi.w	9afa6 <Cl_dprep_controller+0x576>
   9ac64:	a201      	add	r2, pc, #4	; (adr r2, 9ac6c <Cl_dprep_controller+0x23c>)
   9ac66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ac6a:	bf00      	nop
   9ac6c:	0009af41 	.word	0x0009af41
   9ac70:	0009addf 	.word	0x0009addf
   9ac74:	0009ad19 	.word	0x0009ad19
   9ac78:	0009afa7 	.word	0x0009afa7
   9ac7c:	0009afa7 	.word	0x0009afa7
   9ac80:	0009afa7 	.word	0x0009afa7
   9ac84:	0009afa7 	.word	0x0009afa7
   9ac88:	0009afa7 	.word	0x0009afa7
   9ac8c:	0009af81 	.word	0x0009af81
   9ac90:	0009afa7 	.word	0x0009afa7
   9ac94:	0009afa7 	.word	0x0009afa7
   9ac98:	0009afa7 	.word	0x0009afa7
   9ac9c:	0009afa7 	.word	0x0009afa7
   9aca0:	0009afa7 	.word	0x0009afa7
   9aca4:	0009afa7 	.word	0x0009afa7
   9aca8:	0009afa7 	.word	0x0009afa7
   9acac:	0009afa7 	.word	0x0009afa7
   9acb0:	0009afa7 	.word	0x0009afa7
   9acb4:	0009afa7 	.word	0x0009afa7
   9acb8:	0009afa7 	.word	0x0009afa7
   9acbc:	0009afa7 	.word	0x0009afa7
   9acc0:	0009afa7 	.word	0x0009afa7
   9acc4:	0009afa7 	.word	0x0009afa7
   9acc8:	0009af75 	.word	0x0009af75
   9accc:	0009afa7 	.word	0x0009afa7
   9acd0:	0009afa7 	.word	0x0009afa7
   9acd4:	0009afa7 	.word	0x0009afa7
   9acd8:	0009af5b 	.word	0x0009af5b
   9acdc:	0009afa7 	.word	0x0009afa7
   9ace0:	0009ace5 	.word	0x0009ace5
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9ace4:	4b29      	ldr	r3, [pc, #164]	; (9ad8c <Cl_dprep_controller+0x35c>)
   9ace6:	781b      	ldrb	r3, [r3, #0]
   9ace8:	2b01      	cmp	r3, #1
   9acea:	d108      	bne.n	9acfe <Cl_dprep_controller+0x2ce>
   9acec:	4b27      	ldr	r3, [pc, #156]	; (9ad8c <Cl_dprep_controller+0x35c>)
   9acee:	781b      	ldrb	r3, [r3, #0]
   9acf0:	2b05      	cmp	r3, #5
   9acf2:	d104      	bne.n	9acfe <Cl_dprep_controller+0x2ce>
   9acf4:	4b25      	ldr	r3, [pc, #148]	; (9ad8c <Cl_dprep_controller+0x35c>)
   9acf6:	781b      	ldrb	r3, [r3, #0]
   9acf8:	2b09      	cmp	r3, #9
   9acfa:	f000 8157 	beq.w	9afac <Cl_dprep_controller+0x57c>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9acfe:	2206      	movs	r2, #6
   9ad00:	4923      	ldr	r1, [pc, #140]	; (9ad90 <Cl_dprep_controller+0x360>)
   9ad02:	2018      	movs	r0, #24
   9ad04:	4b23      	ldr	r3, [pc, #140]	; (9ad94 <Cl_dprep_controller+0x364>)
   9ad06:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9ad08:	2100      	movs	r1, #0
   9ad0a:	2005      	movs	r0, #5
   9ad0c:	4b22      	ldr	r3, [pc, #136]	; (9ad98 <Cl_dprep_controller+0x368>)
   9ad0e:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ad10:	4b22      	ldr	r3, [pc, #136]	; (9ad9c <Cl_dprep_controller+0x36c>)
   9ad12:	2200      	movs	r2, #0
   9ad14:	70da      	strb	r2, [r3, #3]
						}
				break;
   9ad16:	e149      	b.n	9afac <Cl_dprep_controller+0x57c>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9ad18:	4b18      	ldr	r3, [pc, #96]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ad1a:	7e1b      	ldrb	r3, [r3, #24]
   9ad1c:	2b00      	cmp	r3, #0
   9ad1e:	f000 8148 	beq.w	9afb2 <Cl_dprep_controller+0x582>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ad22:	4b16      	ldr	r3, [pc, #88]	; (9ad7c <Cl_dprep_controller+0x34c>)
   9ad24:	791b      	ldrb	r3, [r3, #4]
   9ad26:	2b02      	cmp	r3, #2
   9ad28:	d002      	beq.n	9ad30 <Cl_dprep_controller+0x300>
   9ad2a:	2b04      	cmp	r3, #4
   9ad2c:	d03a      	beq.n	9ada4 <Cl_dprep_controller+0x374>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9ad2e:	e055      	b.n	9addc <Cl_dprep_controller+0x3ac>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ad30:	2316      	movs	r3, #22
   9ad32:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9ad36:	2302      	movs	r3, #2
   9ad38:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9ad3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9ad40:	3301      	adds	r3, #1
   9ad42:	4619      	mov	r1, r3
   9ad44:	2002      	movs	r0, #2
   9ad46:	4b16      	ldr	r3, [pc, #88]	; (9ada0 <Cl_dprep_controller+0x370>)
   9ad48:	4798      	blx	r3
   9ad4a:	4603      	mov	r3, r0
   9ad4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ad50:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9ad54:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9ad58:	2202      	movs	r2, #2
   9ad5a:	4618      	mov	r0, r3
   9ad5c:	4b0d      	ldr	r3, [pc, #52]	; (9ad94 <Cl_dprep_controller+0x364>)
   9ad5e:	4798      	blx	r3
   9ad60:	4603      	mov	r3, r0
   9ad62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9ad66:	e039      	b.n	9addc <Cl_dprep_controller+0x3ac>
   9ad68:	000a2be1 	.word	0x000a2be1
   9ad6c:	0009c3c9 	.word	0x0009c3c9
   9ad70:	200727cf 	.word	0x200727cf
   9ad74:	20073133 	.word	0x20073133
   9ad78:	00091c25 	.word	0x00091c25
   9ad7c:	20072f2c 	.word	0x20072f2c
   9ad80:	20073138 	.word	0x20073138
   9ad84:	00092315 	.word	0x00092315
   9ad88:	00082ffd 	.word	0x00082ffd
   9ad8c:	200720ec 	.word	0x200720ec
   9ad90:	000a4b48 	.word	0x000a4b48
   9ad94:	00098601 	.word	0x00098601
   9ad98:	0008896d 	.word	0x0008896d
   9ad9c:	20070a84 	.word	0x20070a84
   9ada0:	0009710d 	.word	0x0009710d
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ada4:	2316      	movs	r3, #22
   9ada6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9adaa:	2304      	movs	r3, #4
   9adac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9adb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9adb4:	3301      	adds	r3, #1
   9adb6:	4619      	mov	r1, r3
   9adb8:	2004      	movs	r0, #4
   9adba:	4bb8      	ldr	r3, [pc, #736]	; (9b09c <Cl_dprep_controller+0x66c>)
   9adbc:	4798      	blx	r3
   9adbe:	4603      	mov	r3, r0
   9adc0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9adc4:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9adc8:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9adcc:	2202      	movs	r2, #2
   9adce:	4618      	mov	r0, r3
   9add0:	4bb3      	ldr	r3, [pc, #716]	; (9b0a0 <Cl_dprep_controller+0x670>)
   9add2:	4798      	blx	r3
   9add4:	4603      	mov	r3, r0
   9add6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9adda:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9addc:	e0e9      	b.n	9afb2 <Cl_dprep_controller+0x582>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9adde:	4bb1      	ldr	r3, [pc, #708]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9ade0:	7e1b      	ldrb	r3, [r3, #24]
   9ade2:	2b00      	cmp	r3, #0
   9ade4:	f000 80e8 	beq.w	9afb8 <Cl_dprep_controller+0x588>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ade8:	4bae      	ldr	r3, [pc, #696]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9adea:	795b      	ldrb	r3, [r3, #5]
   9adec:	763b      	strb	r3, [r7, #24]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9adee:	4bad      	ldr	r3, [pc, #692]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9adf0:	799b      	ldrb	r3, [r3, #6]
   9adf2:	767b      	strb	r3, [r7, #25]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9adf4:	4bab      	ldr	r3, [pc, #684]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9adf6:	79db      	ldrb	r3, [r3, #7]
   9adf8:	76bb      	strb	r3, [r7, #26]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9adfa:	4baa      	ldr	r3, [pc, #680]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9adfc:	7a1b      	ldrb	r3, [r3, #8]
   9adfe:	76fb      	strb	r3, [r7, #27]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9ae00:	4ba8      	ldr	r3, [pc, #672]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9ae02:	791b      	ldrb	r3, [r3, #4]
   9ae04:	3b05      	subs	r3, #5
   9ae06:	2b20      	cmp	r3, #32
   9ae08:	f200 8098 	bhi.w	9af3c <Cl_dprep_controller+0x50c>
   9ae0c:	a201      	add	r2, pc, #4	; (adr r2, 9ae14 <Cl_dprep_controller+0x3e4>)
   9ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ae12:	bf00      	nop
   9ae14:	0009af3d 	.word	0x0009af3d
   9ae18:	0009af3d 	.word	0x0009af3d
   9ae1c:	0009af3d 	.word	0x0009af3d
   9ae20:	0009af3d 	.word	0x0009af3d
   9ae24:	0009af3d 	.word	0x0009af3d
   9ae28:	0009af3d 	.word	0x0009af3d
   9ae2c:	0009af3d 	.word	0x0009af3d
   9ae30:	0009af3d 	.word	0x0009af3d
   9ae34:	0009af3d 	.word	0x0009af3d
   9ae38:	0009af3d 	.word	0x0009af3d
   9ae3c:	0009af3d 	.word	0x0009af3d
   9ae40:	0009af3d 	.word	0x0009af3d
   9ae44:	0009af3d 	.word	0x0009af3d
   9ae48:	0009af3d 	.word	0x0009af3d
   9ae4c:	0009af3d 	.word	0x0009af3d
   9ae50:	0009af3d 	.word	0x0009af3d
   9ae54:	0009af3d 	.word	0x0009af3d
   9ae58:	0009af3d 	.word	0x0009af3d
   9ae5c:	0009af3d 	.word	0x0009af3d
   9ae60:	0009ae99 	.word	0x0009ae99
   9ae64:	0009aeb1 	.word	0x0009aeb1
   9ae68:	0009aec9 	.word	0x0009aec9
   9ae6c:	0009aed9 	.word	0x0009aed9
   9ae70:	0009aee9 	.word	0x0009aee9
   9ae74:	0009aef9 	.word	0x0009aef9
   9ae78:	0009af3d 	.word	0x0009af3d
   9ae7c:	0009af3d 	.word	0x0009af3d
   9ae80:	0009af3d 	.word	0x0009af3d
   9ae84:	0009af3d 	.word	0x0009af3d
   9ae88:	0009af09 	.word	0x0009af09
   9ae8c:	0009af13 	.word	0x0009af13
   9ae90:	0009af1d 	.word	0x0009af1d
   9ae94:	0009af2d 	.word	0x0009af2d
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9ae98:	69bb      	ldr	r3, [r7, #24]
   9ae9a:	4a83      	ldr	r2, [pc, #524]	; (9b0a8 <Cl_dprep_controller+0x678>)
   9ae9c:	fba2 2303 	umull	r2, r3, r2, r3
   9aea0:	08da      	lsrs	r2, r3, #3
   9aea2:	4b82      	ldr	r3, [pc, #520]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aea4:	4610      	mov	r0, r2
   9aea6:	4798      	blx	r3
   9aea8:	4602      	mov	r2, r0
   9aeaa:	4b81      	ldr	r3, [pc, #516]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9aeac:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9aeae:	e046      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9aeb0:	69bb      	ldr	r3, [r7, #24]
   9aeb2:	4a7d      	ldr	r2, [pc, #500]	; (9b0a8 <Cl_dprep_controller+0x678>)
   9aeb4:	fba2 2303 	umull	r2, r3, r2, r3
   9aeb8:	08da      	lsrs	r2, r3, #3
   9aeba:	4b7c      	ldr	r3, [pc, #496]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aebc:	4610      	mov	r0, r2
   9aebe:	4798      	blx	r3
   9aec0:	4602      	mov	r2, r0
   9aec2:	4b7b      	ldr	r3, [pc, #492]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9aec4:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9aec6:	e03a      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9aec8:	69ba      	ldr	r2, [r7, #24]
   9aeca:	4b78      	ldr	r3, [pc, #480]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aecc:	4610      	mov	r0, r2
   9aece:	4798      	blx	r3
   9aed0:	4602      	mov	r2, r0
   9aed2:	4b77      	ldr	r3, [pc, #476]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9aed4:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9aed6:	e032      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9aed8:	69ba      	ldr	r2, [r7, #24]
   9aeda:	4b74      	ldr	r3, [pc, #464]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aedc:	4610      	mov	r0, r2
   9aede:	4798      	blx	r3
   9aee0:	4602      	mov	r2, r0
   9aee2:	4b73      	ldr	r3, [pc, #460]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9aee4:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9aee6:	e02a      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9aee8:	69ba      	ldr	r2, [r7, #24]
   9aeea:	4b70      	ldr	r3, [pc, #448]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aeec:	4610      	mov	r0, r2
   9aeee:	4798      	blx	r3
   9aef0:	4602      	mov	r2, r0
   9aef2:	4b6f      	ldr	r3, [pc, #444]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9aef4:	615a      	str	r2, [r3, #20]
										break;
   9aef6:	e022      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9aef8:	69ba      	ldr	r2, [r7, #24]
   9aefa:	4b6c      	ldr	r3, [pc, #432]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9aefc:	4610      	mov	r0, r2
   9aefe:	4798      	blx	r3
   9af00:	4602      	mov	r2, r0
   9af02:	4b6b      	ldr	r3, [pc, #428]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9af04:	611a      	str	r2, [r3, #16]
										break;
   9af06:	e01a      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9af08:	69bb      	ldr	r3, [r7, #24]
   9af0a:	b21a      	sxth	r2, r3
   9af0c:	4b68      	ldr	r3, [pc, #416]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9af0e:	801a      	strh	r2, [r3, #0]
										break;
   9af10:	e015      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9af12:	69bb      	ldr	r3, [r7, #24]
   9af14:	b21a      	sxth	r2, r3
   9af16:	4b66      	ldr	r3, [pc, #408]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9af18:	805a      	strh	r2, [r3, #2]
										break;
   9af1a:	e010      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9af1c:	69ba      	ldr	r2, [r7, #24]
   9af1e:	4b63      	ldr	r3, [pc, #396]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9af20:	4610      	mov	r0, r2
   9af22:	4798      	blx	r3
   9af24:	4602      	mov	r2, r0
   9af26:	4b62      	ldr	r3, [pc, #392]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9af28:	60da      	str	r2, [r3, #12]
										break;
   9af2a:	e008      	b.n	9af3e <Cl_dprep_controller+0x50e>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9af2c:	69ba      	ldr	r2, [r7, #24]
   9af2e:	4b5f      	ldr	r3, [pc, #380]	; (9b0ac <Cl_dprep_controller+0x67c>)
   9af30:	4610      	mov	r0, r2
   9af32:	4798      	blx	r3
   9af34:	4602      	mov	r2, r0
   9af36:	4b5e      	ldr	r3, [pc, #376]	; (9b0b0 <Cl_dprep_controller+0x680>)
   9af38:	609a      	str	r2, [r3, #8]
										break;
   9af3a:	e000      	b.n	9af3e <Cl_dprep_controller+0x50e>

									default:break;
   9af3c:	bf00      	nop
								}
							}
						
	
			break;
   9af3e:	e03b      	b.n	9afb8 <Cl_dprep_controller+0x588>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9af40:	4b5c      	ldr	r3, [pc, #368]	; (9b0b4 <Cl_dprep_controller+0x684>)
   9af42:	4798      	blx	r3
   9af44:	4603      	mov	r3, r0
   9af46:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if(Cl_dprepretcode == CL_REJECTED)
   9af4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9af4e:	2b03      	cmp	r3, #3
   9af50:	d135      	bne.n	9afbe <Cl_dprep_controller+0x58e>
			{
				return Cl_dprepretcode;
   9af52:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9af56:	f001 ba0d 	b.w	9c374 <Cl_dprep_controller+0x1944>
			}
			break;
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9af5a:	4b56      	ldr	r3, [pc, #344]	; (9b0b4 <Cl_dprep_controller+0x684>)
   9af5c:	4798      	blx	r3
   9af5e:	4603      	mov	r3, r0
   9af60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if(Cl_dprepretcode == CL_REJECTED)
   9af64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9af68:	2b03      	cmp	r3, #3
   9af6a:	d12b      	bne.n	9afc4 <Cl_dprep_controller+0x594>
			{
				return Cl_dprepretcode;
   9af6c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9af70:	f001 ba00 	b.w	9c374 <Cl_dprep_controller+0x1944>
			}
			break;
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9af74:	4b50      	ldr	r3, [pc, #320]	; (9b0b8 <Cl_dprep_controller+0x688>)
   9af76:	4798      	blx	r3
   9af78:	4603      	mov	r3, r0
   9af7a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
   9af7e:	e025      	b.n	9afcc <Cl_dprep_controller+0x59c>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9af80:	4b4e      	ldr	r3, [pc, #312]	; (9b0bc <Cl_dprep_controller+0x68c>)
   9af82:	781b      	ldrb	r3, [r3, #0]
   9af84:	2b01      	cmp	r3, #1
   9af86:	d020      	beq.n	9afca <Cl_dprep_controller+0x59a>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9af88:	2206      	movs	r2, #6
   9af8a:	494d      	ldr	r1, [pc, #308]	; (9b0c0 <Cl_dprep_controller+0x690>)
   9af8c:	2018      	movs	r0, #24
   9af8e:	4b44      	ldr	r3, [pc, #272]	; (9b0a0 <Cl_dprep_controller+0x670>)
   9af90:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9af92:	4b4c      	ldr	r3, [pc, #304]	; (9b0c4 <Cl_dprep_controller+0x694>)
   9af94:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9af96:	2100      	movs	r1, #0
   9af98:	2001      	movs	r0, #1
   9af9a:	4b4b      	ldr	r3, [pc, #300]	; (9b0c8 <Cl_dprep_controller+0x698>)
   9af9c:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9af9e:	4b4b      	ldr	r3, [pc, #300]	; (9b0cc <Cl_dprep_controller+0x69c>)
   9afa0:	2200      	movs	r2, #0
   9afa2:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9afa4:	e011      	b.n	9afca <Cl_dprep_controller+0x59a>
			default:
			break;
   9afa6:	bf00      	nop
   9afa8:	f001 b9e2 	b.w	9c370 <Cl_dprep_controller+0x1940>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
				break;
   9afac:	bf00      	nop
   9afae:	f001 b9df 	b.w	9c370 <Cl_dprep_controller+0x1940>
						break;
						default:
						break;
					}
				}
			break;
   9afb2:	bf00      	nop
   9afb4:	f001 b9dc 	b.w	9c370 <Cl_dprep_controller+0x1940>
									default:break;
								}
							}
						
	
			break;
   9afb8:	bf00      	nop
   9afba:	f001 b9d9 	b.w	9c370 <Cl_dprep_controller+0x1940>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9afbe:	bf00      	nop
   9afc0:	f001 b9d6 	b.w	9c370 <Cl_dprep_controller+0x1940>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9afc4:	bf00      	nop
   9afc6:	f001 b9d3 	b.w	9c370 <Cl_dprep_controller+0x1940>
				cl_dprep_activate_prime_related_alarms();
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9afca:	bf00      	nop
			default:
			break;
		}
		break;
   9afcc:	f001 b9d0 	b.w	9c370 <Cl_dprep_controller+0x1940>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9afd0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9afd4:	3b03      	subs	r3, #3
   9afd6:	2b20      	cmp	r3, #32
   9afd8:	f201 81c5 	bhi.w	9c366 <Cl_dprep_controller+0x1936>
   9afdc:	a201      	add	r2, pc, #4	; (adr r2, 9afe4 <Cl_dprep_controller+0x5b4>)
   9afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9afe2:	bf00      	nop
   9afe4:	0009b1cd 	.word	0x0009b1cd
   9afe8:	0009b143 	.word	0x0009b143
   9afec:	0009c367 	.word	0x0009c367
   9aff0:	0009c367 	.word	0x0009c367
   9aff4:	0009c367 	.word	0x0009c367
   9aff8:	0009c367 	.word	0x0009c367
   9affc:	0009b5b5 	.word	0x0009b5b5
   9b000:	0009b601 	.word	0x0009b601
   9b004:	0009c367 	.word	0x0009c367
   9b008:	0009c367 	.word	0x0009c367
   9b00c:	0009c367 	.word	0x0009c367
   9b010:	0009c367 	.word	0x0009c367
   9b014:	0009c367 	.word	0x0009c367
   9b018:	0009c367 	.word	0x0009c367
   9b01c:	0009c367 	.word	0x0009c367
   9b020:	0009c367 	.word	0x0009c367
   9b024:	0009b22b 	.word	0x0009b22b
   9b028:	0009c367 	.word	0x0009c367
   9b02c:	0009b623 	.word	0x0009b623
   9b030:	0009b3dd 	.word	0x0009b3dd
   9b034:	0009b249 	.word	0x0009b249
   9b038:	0009c367 	.word	0x0009c367
   9b03c:	0009b5c1 	.word	0x0009b5c1
   9b040:	0009b5cd 	.word	0x0009b5cd
   9b044:	0009c367 	.word	0x0009c367
   9b048:	0009c367 	.word	0x0009c367
   9b04c:	0009c367 	.word	0x0009c367
   9b050:	0009b5b5 	.word	0x0009b5b5
   9b054:	0009b10f 	.word	0x0009b10f
   9b058:	0009c367 	.word	0x0009c367
   9b05c:	0009b105 	.word	0x0009b105
   9b060:	0009b069 	.word	0x0009b069
   9b064:	0009b0fb 	.word	0x0009b0fb
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9b068:	4b0e      	ldr	r3, [pc, #56]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b06a:	7e1b      	ldrb	r3, [r3, #24]
   9b06c:	2b00      	cmp	r3, #0
   9b06e:	f000 82db 	beq.w	9b628 <Cl_dprep_controller+0xbf8>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9b072:	4b0c      	ldr	r3, [pc, #48]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b074:	795b      	ldrb	r3, [r3, #5]
   9b076:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9b078:	4b0a      	ldr	r3, [pc, #40]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b07a:	799b      	ldrb	r3, [r3, #6]
   9b07c:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9b07e:	4b09      	ldr	r3, [pc, #36]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b080:	79db      	ldrb	r3, [r3, #7]
   9b082:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9b084:	4b07      	ldr	r3, [pc, #28]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b086:	7a1b      	ldrb	r3, [r3, #8]
   9b088:	75fb      	strb	r3, [r7, #23]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9b08a:	4b06      	ldr	r3, [pc, #24]	; (9b0a4 <Cl_dprep_controller+0x674>)
   9b08c:	791b      	ldrb	r3, [r3, #4]
   9b08e:	2b01      	cmp	r3, #1
   9b090:	d120      	bne.n	9b0d4 <Cl_dprep_controller+0x6a4>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9b092:	2100      	movs	r1, #0
   9b094:	2001      	movs	r0, #1
   9b096:	4b0e      	ldr	r3, [pc, #56]	; (9b0d0 <Cl_dprep_controller+0x6a0>)
   9b098:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9b09a:	e2c5      	b.n	9b628 <Cl_dprep_controller+0xbf8>
   9b09c:	0009710d 	.word	0x0009710d
   9b0a0:	00098601 	.word	0x00098601
   9b0a4:	20072f2c 	.word	0x20072f2c
   9b0a8:	cccccccd 	.word	0xcccccccd
   9b0ac:	000a25dd 	.word	0x000a25dd
   9b0b0:	20072c9c 	.word	0x20072c9c
   9b0b4:	0009df5d 	.word	0x0009df5d
   9b0b8:	0009c691 	.word	0x0009c691
   9b0bc:	200720ec 	.word	0x200720ec
   9b0c0:	000a4b50 	.word	0x000a4b50
   9b0c4:	000893d1 	.word	0x000893d1
   9b0c8:	0008896d 	.word	0x0008896d
   9b0cc:	20070a84 	.word	0x20070a84
   9b0d0:	00092315 	.word	0x00092315
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9b0d4:	4ba6      	ldr	r3, [pc, #664]	; (9b370 <Cl_dprep_controller+0x940>)
   9b0d6:	791b      	ldrb	r3, [r3, #4]
   9b0d8:	2b02      	cmp	r3, #2
   9b0da:	d104      	bne.n	9b0e6 <Cl_dprep_controller+0x6b6>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9b0dc:	2100      	movs	r1, #0
   9b0de:	2004      	movs	r0, #4
   9b0e0:	4ba4      	ldr	r3, [pc, #656]	; (9b374 <Cl_dprep_controller+0x944>)
   9b0e2:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9b0e4:	e2a0      	b.n	9b628 <Cl_dprep_controller+0xbf8>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9b0e6:	4ba2      	ldr	r3, [pc, #648]	; (9b370 <Cl_dprep_controller+0x940>)
   9b0e8:	791b      	ldrb	r3, [r3, #4]
   9b0ea:	2b00      	cmp	r3, #0
   9b0ec:	f040 829c 	bne.w	9b628 <Cl_dprep_controller+0xbf8>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9b0f0:	2100      	movs	r1, #0
   9b0f2:	200a      	movs	r0, #10
   9b0f4:	4b9f      	ldr	r3, [pc, #636]	; (9b374 <Cl_dprep_controller+0x944>)
   9b0f6:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9b0f8:	e296      	b.n	9b628 <Cl_dprep_controller+0xbf8>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9b0fa:	2100      	movs	r1, #0
   9b0fc:	200c      	movs	r0, #12
   9b0fe:	4b9d      	ldr	r3, [pc, #628]	; (9b374 <Cl_dprep_controller+0x944>)
   9b100:	4798      	blx	r3
			break;
   9b102:	e2a4      	b.n	9b64e <Cl_dprep_controller+0xc1e>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9b104:	2100      	movs	r1, #0
   9b106:	2007      	movs	r0, #7
   9b108:	4b9a      	ldr	r3, [pc, #616]	; (9b374 <Cl_dprep_controller+0x944>)
   9b10a:	4798      	blx	r3
			break;
   9b10c:	e29f      	b.n	9b64e <Cl_dprep_controller+0xc1e>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9b10e:	4b9a      	ldr	r3, [pc, #616]	; (9b378 <Cl_dprep_controller+0x948>)
   9b110:	781b      	ldrb	r3, [r3, #0]
   9b112:	2b01      	cmp	r3, #1
   9b114:	d108      	bne.n	9b128 <Cl_dprep_controller+0x6f8>
   9b116:	4b98      	ldr	r3, [pc, #608]	; (9b378 <Cl_dprep_controller+0x948>)
   9b118:	781b      	ldrb	r3, [r3, #0]
   9b11a:	2b05      	cmp	r3, #5
   9b11c:	d104      	bne.n	9b128 <Cl_dprep_controller+0x6f8>
   9b11e:	4b96      	ldr	r3, [pc, #600]	; (9b378 <Cl_dprep_controller+0x948>)
   9b120:	781b      	ldrb	r3, [r3, #0]
   9b122:	2b09      	cmp	r3, #9
   9b124:	f000 8283 	beq.w	9b62e <Cl_dprep_controller+0xbfe>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9b128:	2206      	movs	r2, #6
   9b12a:	4994      	ldr	r1, [pc, #592]	; (9b37c <Cl_dprep_controller+0x94c>)
   9b12c:	2018      	movs	r0, #24
   9b12e:	4b94      	ldr	r3, [pc, #592]	; (9b380 <Cl_dprep_controller+0x950>)
   9b130:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9b132:	2100      	movs	r1, #0
   9b134:	2005      	movs	r0, #5
   9b136:	4b93      	ldr	r3, [pc, #588]	; (9b384 <Cl_dprep_controller+0x954>)
   9b138:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9b13a:	4b93      	ldr	r3, [pc, #588]	; (9b388 <Cl_dprep_controller+0x958>)
   9b13c:	2200      	movs	r2, #0
   9b13e:	70da      	strb	r2, [r3, #3]
						}
			break;
   9b140:	e275      	b.n	9b62e <Cl_dprep_controller+0xbfe>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9b142:	4b8b      	ldr	r3, [pc, #556]	; (9b370 <Cl_dprep_controller+0x940>)
   9b144:	7e1b      	ldrb	r3, [r3, #24]
   9b146:	2b00      	cmp	r3, #0
   9b148:	f000 8274 	beq.w	9b634 <Cl_dprep_controller+0xc04>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9b14c:	4b88      	ldr	r3, [pc, #544]	; (9b370 <Cl_dprep_controller+0x940>)
   9b14e:	791b      	ldrb	r3, [r3, #4]
   9b150:	2b02      	cmp	r3, #2
   9b152:	d002      	beq.n	9b15a <Cl_dprep_controller+0x72a>
   9b154:	2b04      	cmp	r3, #4
   9b156:	d01c      	beq.n	9b192 <Cl_dprep_controller+0x762>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9b158:	e037      	b.n	9b1ca <Cl_dprep_controller+0x79a>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9b15a:	2316      	movs	r3, #22
   9b15c:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9b160:	2302      	movs	r3, #2
   9b162:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9b166:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9b16a:	3301      	adds	r3, #1
   9b16c:	4619      	mov	r1, r3
   9b16e:	2002      	movs	r0, #2
   9b170:	4b86      	ldr	r3, [pc, #536]	; (9b38c <Cl_dprep_controller+0x95c>)
   9b172:	4798      	blx	r3
   9b174:	4603      	mov	r3, r0
   9b176:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9b17a:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9b17e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9b182:	2202      	movs	r2, #2
   9b184:	4618      	mov	r0, r3
   9b186:	4b7e      	ldr	r3, [pc, #504]	; (9b380 <Cl_dprep_controller+0x950>)
   9b188:	4798      	blx	r3
   9b18a:	4603      	mov	r3, r0
   9b18c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b190:	e01b      	b.n	9b1ca <Cl_dprep_controller+0x79a>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9b192:	2316      	movs	r3, #22
   9b194:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9b198:	2304      	movs	r3, #4
   9b19a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9b19e:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9b1a2:	3301      	adds	r3, #1
   9b1a4:	4619      	mov	r1, r3
   9b1a6:	2004      	movs	r0, #4
   9b1a8:	4b78      	ldr	r3, [pc, #480]	; (9b38c <Cl_dprep_controller+0x95c>)
   9b1aa:	4798      	blx	r3
   9b1ac:	4603      	mov	r3, r0
   9b1ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9b1b2:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9b1b6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9b1ba:	2202      	movs	r2, #2
   9b1bc:	4618      	mov	r0, r3
   9b1be:	4b70      	ldr	r3, [pc, #448]	; (9b380 <Cl_dprep_controller+0x950>)
   9b1c0:	4798      	blx	r3
   9b1c2:	4603      	mov	r3, r0
   9b1c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b1c8:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9b1ca:	e233      	b.n	9b634 <Cl_dprep_controller+0xc04>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   9b1cc:	4b68      	ldr	r3, [pc, #416]	; (9b370 <Cl_dprep_controller+0x940>)
   9b1ce:	7e1b      	ldrb	r3, [r3, #24]
   9b1d0:	2b00      	cmp	r3, #0
   9b1d2:	f000 8232 	beq.w	9b63a <Cl_dprep_controller+0xc0a>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9b1d6:	4b66      	ldr	r3, [pc, #408]	; (9b370 <Cl_dprep_controller+0x940>)
   9b1d8:	791b      	ldrb	r3, [r3, #4]
   9b1da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9b1de:	2300      	movs	r3, #0
   9b1e0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
   9b1e4:	e011      	b.n	9b20a <Cl_dprep_controller+0x7da>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9b1e6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
   9b1ea:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
   9b1ee:	3201      	adds	r2, #1
   9b1f0:	495f      	ldr	r1, [pc, #380]	; (9b370 <Cl_dprep_controller+0x940>)
   9b1f2:	440a      	add	r2, r1
   9b1f4:	7912      	ldrb	r2, [r2, #4]
   9b1f6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
   9b1fa:	440b      	add	r3, r1
   9b1fc:	f803 2c7c 	strb.w	r2, [r3, #-124]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9b200:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
   9b204:	3301      	adds	r3, #1
   9b206:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
   9b20a:	4b59      	ldr	r3, [pc, #356]	; (9b370 <Cl_dprep_controller+0x940>)
   9b20c:	78db      	ldrb	r3, [r3, #3]
   9b20e:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
   9b212:	429a      	cmp	r2, r3
   9b214:	d3e7      	bcc.n	9b1e6 <Cl_dprep_controller+0x7b6>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9b216:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
   9b21a:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
   9b21e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   9b222:	ca06      	ldmia	r2, {r1, r2}
   9b224:	4c5a      	ldr	r4, [pc, #360]	; (9b390 <Cl_dprep_controller+0x960>)
   9b226:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9b228:	e207      	b.n	9b63a <Cl_dprep_controller+0xc0a>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9b22a:	4b5a      	ldr	r3, [pc, #360]	; (9b394 <Cl_dprep_controller+0x964>)
   9b22c:	881b      	ldrh	r3, [r3, #0]
   9b22e:	3301      	adds	r3, #1
   9b230:	b29a      	uxth	r2, r3
   9b232:	4b58      	ldr	r3, [pc, #352]	; (9b394 <Cl_dprep_controller+0x964>)
   9b234:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9b236:	4b57      	ldr	r3, [pc, #348]	; (9b394 <Cl_dprep_controller+0x964>)
   9b238:	881b      	ldrh	r3, [r3, #0]
   9b23a:	2b02      	cmp	r3, #2
   9b23c:	f040 8200 	bne.w	9b640 <Cl_dprep_controller+0xc10>
			{
				cl_50ms_timer =0;
   9b240:	4b54      	ldr	r3, [pc, #336]	; (9b394 <Cl_dprep_controller+0x964>)
   9b242:	2200      	movs	r2, #0
   9b244:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9b246:	e1fb      	b.n	9b640 <Cl_dprep_controller+0xc10>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   9b248:	4b53      	ldr	r3, [pc, #332]	; (9b398 <Cl_dprep_controller+0x968>)
   9b24a:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9b24c:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9b250:	4619      	mov	r1, r3
   9b252:	2014      	movs	r0, #20
   9b254:	4b51      	ldr	r3, [pc, #324]	; (9b39c <Cl_dprep_controller+0x96c>)
   9b256:	4798      	blx	r3
				int16_t sensordata;
				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
   9b258:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
   9b25c:	f649 5208 	movw	r2, #40200	; 0x9d08
   9b260:	fb02 f303 	mul.w	r3, r2, r3
   9b264:	2b00      	cmp	r3, #0
   9b266:	da02      	bge.n	9b26e <Cl_dprep_controller+0x83e>
   9b268:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9b26c:	33ff      	adds	r3, #255	; 0xff
   9b26e:	141b      	asrs	r3, r3, #16
   9b270:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9b274:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9b278:	4618      	mov	r0, r3
   9b27a:	4b49      	ldr	r3, [pc, #292]	; (9b3a0 <Cl_dprep_controller+0x970>)
   9b27c:	4798      	blx	r3
				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9b27e:	4b49      	ldr	r3, [pc, #292]	; (9b3a4 <Cl_dprep_controller+0x974>)
   9b280:	681a      	ldr	r2, [r3, #0]
   9b282:	4b49      	ldr	r3, [pc, #292]	; (9b3a8 <Cl_dprep_controller+0x978>)
   9b284:	4949      	ldr	r1, [pc, #292]	; (9b3ac <Cl_dprep_controller+0x97c>)
   9b286:	4610      	mov	r0, r2
   9b288:	4798      	blx	r3
   9b28a:	4603      	mov	r3, r0
   9b28c:	461a      	mov	r2, r3
   9b28e:	4b48      	ldr	r3, [pc, #288]	; (9b3b0 <Cl_dprep_controller+0x980>)
   9b290:	4610      	mov	r0, r2
   9b292:	4798      	blx	r3
   9b294:	4603      	mov	r3, r0
   9b296:	b29b      	uxth	r3, r3
   9b298:	84fb      	strh	r3, [r7, #38]	; 0x26
				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9b29a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   9b29c:	461a      	mov	r2, r3
   9b29e:	4b45      	ldr	r3, [pc, #276]	; (9b3b4 <Cl_dprep_controller+0x984>)
   9b2a0:	4610      	mov	r0, r2
   9b2a2:	4798      	blx	r3
   9b2a4:	4c44      	ldr	r4, [pc, #272]	; (9b3b8 <Cl_dprep_controller+0x988>)
   9b2a6:	a32a      	add	r3, pc, #168	; (adr r3, 9b350 <Cl_dprep_controller+0x920>)
   9b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b2ac:	47a0      	blx	r4
   9b2ae:	4603      	mov	r3, r0
   9b2b0:	460c      	mov	r4, r1
   9b2b2:	4618      	mov	r0, r3
   9b2b4:	4621      	mov	r1, r4
   9b2b6:	4c41      	ldr	r4, [pc, #260]	; (9b3bc <Cl_dprep_controller+0x98c>)
   9b2b8:	a327      	add	r3, pc, #156	; (adr r3, 9b358 <Cl_dprep_controller+0x928>)
   9b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b2be:	47a0      	blx	r4
   9b2c0:	4603      	mov	r3, r0
   9b2c2:	460c      	mov	r4, r1
   9b2c4:	4619      	mov	r1, r3
   9b2c6:	4622      	mov	r2, r4
   9b2c8:	4b3d      	ldr	r3, [pc, #244]	; (9b3c0 <Cl_dprep_controller+0x990>)
   9b2ca:	4608      	mov	r0, r1
   9b2cc:	4611      	mov	r1, r2
   9b2ce:	4798      	blx	r3
   9b2d0:	4603      	mov	r3, r0
   9b2d2:	b29b      	uxth	r3, r3
   9b2d4:	84fb      	strh	r3, [r7, #38]	; 0x26
				
//					temp_temp3 = temp_temp3 * 0.803;
					{
						float temp1=0;
   9b2d6:	f04f 0300 	mov.w	r3, #0
   9b2da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
//						calibration_tmp(temp_temp3,TS3);
//						Cl_get_Temperature_Value(TS3_SPI, temprature_final_value_3 , &temp1);
						temp3_cel = temp_temp3;
   9b2de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9b2e0:	4b38      	ldr	r3, [pc, #224]	; (9b3c4 <Cl_dprep_controller+0x994>)
   9b2e2:	4610      	mov	r0, r2
   9b2e4:	4798      	blx	r3
   9b2e6:	4603      	mov	r3, r0
   9b2e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					}
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9b2ec:	4b36      	ldr	r3, [pc, #216]	; (9b3c8 <Cl_dprep_controller+0x998>)
   9b2ee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   9b2f2:	4798      	blx	r3
   9b2f4:	4c35      	ldr	r4, [pc, #212]	; (9b3cc <Cl_dprep_controller+0x99c>)
   9b2f6:	a31a      	add	r3, pc, #104	; (adr r3, 9b360 <Cl_dprep_controller+0x930>)
   9b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b2fc:	47a0      	blx	r4
   9b2fe:	4603      	mov	r3, r0
   9b300:	2b00      	cmp	r3, #0
   9b302:	d01a      	beq.n	9b33a <Cl_dprep_controller+0x90a>
   9b304:	4b30      	ldr	r3, [pc, #192]	; (9b3c8 <Cl_dprep_controller+0x998>)
   9b306:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   9b30a:	4798      	blx	r3
   9b30c:	4c30      	ldr	r4, [pc, #192]	; (9b3d0 <Cl_dprep_controller+0x9a0>)
   9b30e:	a316      	add	r3, pc, #88	; (adr r3, 9b368 <Cl_dprep_controller+0x938>)
   9b310:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b314:	47a0      	blx	r4
   9b316:	4603      	mov	r3, r0
   9b318:	2b00      	cmp	r3, #0
   9b31a:	d00e      	beq.n	9b33a <Cl_dprep_controller+0x90a>
				{
					if( cl_temp3_37stable == true) 
   9b31c:	4b2d      	ldr	r3, [pc, #180]	; (9b3d4 <Cl_dprep_controller+0x9a4>)
   9b31e:	781b      	ldrb	r3, [r3, #0]
   9b320:	2b00      	cmp	r3, #0
   9b322:	d003      	beq.n	9b32c <Cl_dprep_controller+0x8fc>
					{
					 cl_temp3_stable_confirm = true;	
   9b324:	4b2c      	ldr	r3, [pc, #176]	; (9b3d8 <Cl_dprep_controller+0x9a8>)
   9b326:	2201      	movs	r2, #1
   9b328:	701a      	strb	r2, [r3, #0]
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9b32a:	e00d      	b.n	9b348 <Cl_dprep_controller+0x918>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   9b32c:	4b29      	ldr	r3, [pc, #164]	; (9b3d4 <Cl_dprep_controller+0x9a4>)
   9b32e:	2201      	movs	r2, #1
   9b330:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9b332:	4b29      	ldr	r3, [pc, #164]	; (9b3d8 <Cl_dprep_controller+0x9a8>)
   9b334:	2200      	movs	r2, #0
   9b336:	701a      	strb	r2, [r3, #0]
					//calibration_tmp(temp_temp3,TS3);
					//temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9b338:	e006      	b.n	9b348 <Cl_dprep_controller+0x918>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   9b33a:	4b26      	ldr	r3, [pc, #152]	; (9b3d4 <Cl_dprep_controller+0x9a4>)
   9b33c:	2200      	movs	r2, #0
   9b33e:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9b340:	4b25      	ldr	r3, [pc, #148]	; (9b3d8 <Cl_dprep_controller+0x9a8>)
   9b342:	2200      	movs	r2, #0
   9b344:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   9b346:	e182      	b.n	9b64e <Cl_dprep_controller+0xc1e>
   9b348:	e181      	b.n	9b64e <Cl_dprep_controller+0xc1e>
   9b34a:	bf00      	nop
   9b34c:	f3af 8000 	nop.w
   9b350:	cccccccd 	.word	0xcccccccd
   9b354:	4008cccc 	.word	0x4008cccc
   9b358:	66666666 	.word	0x66666666
   9b35c:	3ff66666 	.word	0x3ff66666
   9b360:	66666666 	.word	0x66666666
   9b364:	40426666 	.word	0x40426666
   9b368:	9999999a 	.word	0x9999999a
   9b36c:	40429999 	.word	0x40429999
   9b370:	20072f2c 	.word	0x20072f2c
   9b374:	00092315 	.word	0x00092315
   9b378:	200720ec 	.word	0x200720ec
   9b37c:	000a4b48 	.word	0x000a4b48
   9b380:	00098601 	.word	0x00098601
   9b384:	0008896d 	.word	0x0008896d
   9b388:	20070a84 	.word	0x20070a84
   9b38c:	0009710d 	.word	0x0009710d
   9b390:	0009d7fd 	.word	0x0009d7fd
   9b394:	200727cc 	.word	0x200727cc
   9b398:	0009d669 	.word	0x0009d669
   9b39c:	0008d499 	.word	0x0008d499
   9b3a0:	0008e659 	.word	0x0008e659
   9b3a4:	200725ec 	.word	0x200725ec
   9b3a8:	000a27f5 	.word	0x000a27f5
   9b3ac:	42c80000 	.word	0x42c80000
   9b3b0:	000a2a65 	.word	0x000a2a65
   9b3b4:	000a1d41 	.word	0x000a1d41
   9b3b8:	000a1aa5 	.word	0x000a1aa5
   9b3bc:	000a1aa9 	.word	0x000a1aa9
   9b3c0:	000a2391 	.word	0x000a2391
   9b3c4:	000a25dd 	.word	0x000a25dd
   9b3c8:	000a1d65 	.word	0x000a1d65
   9b3cc:	000a232d 	.word	0x000a232d
   9b3d0:	000a22f1 	.word	0x000a22f1
   9b3d4:	200727cb 	.word	0x200727cb
   9b3d8:	200727c8 	.word	0x200727c8
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   9b3dc:	4bac      	ldr	r3, [pc, #688]	; (9b690 <Cl_dprep_controller+0xc60>)
   9b3de:	f9b3 3000 	ldrsh.w	r3, [r3]
   9b3e2:	b29b      	uxth	r3, r3
   9b3e4:	3301      	adds	r3, #1
   9b3e6:	b29b      	uxth	r3, r3
   9b3e8:	b21a      	sxth	r2, r3
   9b3ea:	4ba9      	ldr	r3, [pc, #676]	; (9b690 <Cl_dprep_controller+0xc60>)
   9b3ec:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   9b3ee:	4ba8      	ldr	r3, [pc, #672]	; (9b690 <Cl_dprep_controller+0xc60>)
   9b3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
   9b3f4:	2b3c      	cmp	r3, #60	; 0x3c
   9b3f6:	d101      	bne.n	9b3fc <Cl_dprep_controller+0x9cc>
					{
						UpdateDprepFillingMinuteTick();
   9b3f8:	4ba6      	ldr	r3, [pc, #664]	; (9b694 <Cl_dprep_controller+0xc64>)
   9b3fa:	4798      	blx	r3
					}
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9b3fc:	2004      	movs	r0, #4
   9b3fe:	4ba6      	ldr	r3, [pc, #664]	; (9b698 <Cl_dprep_controller+0xc68>)
   9b400:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9b402:	4ba6      	ldr	r3, [pc, #664]	; (9b69c <Cl_dprep_controller+0xc6c>)
   9b404:	4798      	blx	r3
   9b406:	4603      	mov	r3, r0
   9b408:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   9b40c:	4ba4      	ldr	r3, [pc, #656]	; (9b6a0 <Cl_dprep_controller+0xc70>)
   9b40e:	4798      	blx	r3
   9b410:	4603      	mov	r3, r0
   9b412:	2b00      	cmp	r3, #0
   9b414:	f040 80a2 	bne.w	9b55c <Cl_dprep_controller+0xb2c>
					{
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   9b418:	4ba2      	ldr	r3, [pc, #648]	; (9b6a4 <Cl_dprep_controller+0xc74>)
   9b41a:	695b      	ldr	r3, [r3, #20]
   9b41c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						Cl_Uint16Type potvalue = 0;
   9b420:	2300      	movs	r3, #0
   9b422:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9b426:	4ba0      	ldr	r3, [pc, #640]	; (9b6a8 <Cl_dprep_controller+0xc78>)
   9b428:	781b      	ldrb	r3, [r3, #0]
   9b42a:	2b08      	cmp	r3, #8
   9b42c:	d134      	bne.n	9b498 <Cl_dprep_controller+0xa68>
						{
						//	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
						//	sv_cntrl_enable_loopback();
							// sv_prop_stopmixing();
							switch (temp)
   9b42e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   9b432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9b436:	d00f      	beq.n	9b458 <Cl_dprep_controller+0xa28>
   9b438:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9b43c:	d003      	beq.n	9b446 <Cl_dprep_controller+0xa16>
   9b43e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9b442:	d017      	beq.n	9b474 <Cl_dprep_controller+0xa44>
								potvalue = (920 * 1024)/10000;
								sv_cs_setpotvalue(potvalue);
								break;
								
								default:
								break;
   9b444:	e01f      	b.n	9b486 <Cl_dprep_controller+0xa56>
						//	sv_cntrl_enable_loopback();
							// sv_prop_stopmixing();
							switch (temp)
							{
								case 800:
								potvalue = (612 * 1024)/10000;
   9b446:	233e      	movs	r3, #62	; 0x3e
   9b448:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b44c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b450:	4618      	mov	r0, r3
   9b452:	4b96      	ldr	r3, [pc, #600]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b454:	4798      	blx	r3
								break;
   9b456:	e016      	b.n	9b486 <Cl_dprep_controller+0xa56>
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9b458:	2203      	movs	r2, #3
   9b45a:	4995      	ldr	r1, [pc, #596]	; (9b6b0 <Cl_dprep_controller+0xc80>)
   9b45c:	2018      	movs	r0, #24
   9b45e:	4b95      	ldr	r3, [pc, #596]	; (9b6b4 <Cl_dprep_controller+0xc84>)
   9b460:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9b462:	2344      	movs	r3, #68	; 0x44
   9b464:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b46c:	4618      	mov	r0, r3
   9b46e:	4b8f      	ldr	r3, [pc, #572]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b470:	4798      	blx	r3
								break;
   9b472:	e008      	b.n	9b486 <Cl_dprep_controller+0xa56>
								
								case 300:
								potvalue = (920 * 1024)/10000;
   9b474:	235e      	movs	r3, #94	; 0x5e
   9b476:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b47a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b47e:	4618      	mov	r0, r3
   9b480:	4b8a      	ldr	r3, [pc, #552]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b482:	4798      	blx	r3
								break;
   9b484:	bf00      	nop
								
								default:
								break;
							}
							 sv_cntrl_enable_bypass();
   9b486:	4b8c      	ldr	r3, [pc, #560]	; (9b6b8 <Cl_dprep_controller+0xc88>)
   9b488:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9b48a:	4b8c      	ldr	r3, [pc, #560]	; (9b6bc <Cl_dprep_controller+0xc8c>)
   9b48c:	2201      	movs	r2, #1
   9b48e:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9b490:	4b8b      	ldr	r3, [pc, #556]	; (9b6c0 <Cl_dprep_controller+0xc90>)
   9b492:	2205      	movs	r2, #5
   9b494:	701a      	strb	r2, [r3, #0]
   9b496:	e033      	b.n	9b500 <Cl_dprep_controller+0xad0>
									 
						}
						else
						{
							switch (temp)
   9b498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   9b49c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9b4a0:	d00f      	beq.n	9b4c2 <Cl_dprep_controller+0xa92>
   9b4a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9b4a6:	d003      	beq.n	9b4b0 <Cl_dprep_controller+0xa80>
   9b4a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9b4ac:	d017      	beq.n	9b4de <Cl_dprep_controller+0xaae>
								potvalue = (920 * 1024)/10000;
								sv_cs_setpotvalue(potvalue);
								break;
								
								default:
								break;
   9b4ae:	e01f      	b.n	9b4f0 <Cl_dprep_controller+0xac0>
						else
						{
							switch (temp)
							{
								case 800:
								potvalue = (612 * 1024)/10000;
   9b4b0:	233e      	movs	r3, #62	; 0x3e
   9b4b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b4b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b4ba:	4618      	mov	r0, r3
   9b4bc:	4b7b      	ldr	r3, [pc, #492]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b4be:	4798      	blx	r3
								break;
   9b4c0:	e016      	b.n	9b4f0 <Cl_dprep_controller+0xac0>
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9b4c2:	2203      	movs	r2, #3
   9b4c4:	497a      	ldr	r1, [pc, #488]	; (9b6b0 <Cl_dprep_controller+0xc80>)
   9b4c6:	2018      	movs	r0, #24
   9b4c8:	4b7a      	ldr	r3, [pc, #488]	; (9b6b4 <Cl_dprep_controller+0xc84>)
   9b4ca:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9b4cc:	2344      	movs	r3, #68	; 0x44
   9b4ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b4d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b4d6:	4618      	mov	r0, r3
   9b4d8:	4b74      	ldr	r3, [pc, #464]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b4da:	4798      	blx	r3
								break;
   9b4dc:	e008      	b.n	9b4f0 <Cl_dprep_controller+0xac0>
								
								case 300:
								potvalue = (920 * 1024)/10000;
   9b4de:	235e      	movs	r3, #94	; 0x5e
   9b4e0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
								sv_cs_setpotvalue(potvalue);
   9b4e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   9b4e8:	4618      	mov	r0, r3
   9b4ea:	4b70      	ldr	r3, [pc, #448]	; (9b6ac <Cl_dprep_controller+0xc7c>)
   9b4ec:	4798      	blx	r3
								break;
   9b4ee:	bf00      	nop
								
								default:
								break;
							}
							sv_cntrl_enable_bypass();
   9b4f0:	4b71      	ldr	r3, [pc, #452]	; (9b6b8 <Cl_dprep_controller+0xc88>)
   9b4f2:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9b4f4:	4b71      	ldr	r3, [pc, #452]	; (9b6bc <Cl_dprep_controller+0xc8c>)
   9b4f6:	2201      	movs	r2, #1
   9b4f8:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   9b4fa:	4b71      	ldr	r3, [pc, #452]	; (9b6c0 <Cl_dprep_controller+0xc90>)
   9b4fc:	2203      	movs	r2, #3
   9b4fe:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   9b500:	231f      	movs	r3, #31
   9b502:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9b506:	2301      	movs	r3, #1
   9b508:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						Cl_Dprep_filling_secondscounter = 0;
   9b50c:	4b60      	ldr	r3, [pc, #384]	; (9b690 <Cl_dprep_controller+0xc60>)
   9b50e:	2200      	movs	r2, #0
   9b510:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9b512:	4b6c      	ldr	r3, [pc, #432]	; (9b6c4 <Cl_dprep_controller+0xc94>)
   9b514:	2200      	movs	r2, #0
   9b516:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   9b518:	4b6b      	ldr	r3, [pc, #428]	; (9b6c8 <Cl_dprep_controller+0xc98>)
   9b51a:	2200      	movs	r2, #0
   9b51c:	801a      	strh	r2, [r3, #0]

						Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
   9b51e:	2300      	movs	r3, #0
   9b520:	9300      	str	r3, [sp, #0]
   9b522:	f04f 0300 	mov.w	r3, #0
   9b526:	4a69      	ldr	r2, [pc, #420]	; (9b6cc <Cl_dprep_controller+0xc9c>)
   9b528:	2103      	movs	r1, #3
   9b52a:	2007      	movs	r0, #7
   9b52c:	4c68      	ldr	r4, [pc, #416]	; (9b6d0 <Cl_dprep_controller+0xca0>)
   9b52e:	47a0      	blx	r4
   9b530:	4603      	mov	r3, r0
   9b532:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						// Appy treatment cond alarm and temerature alarm  limits here
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   9b536:	2101      	movs	r1, #1
   9b538:	2007      	movs	r0, #7
   9b53a:	4b66      	ldr	r3, [pc, #408]	; (9b6d4 <Cl_dprep_controller+0xca4>)
   9b53c:	4798      	blx	r3
   9b53e:	4603      	mov	r3, r0
   9b540:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9b544:	f107 016b 	add.w	r1, r7, #107	; 0x6b
   9b548:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9b54c:	2201      	movs	r2, #1
   9b54e:	4618      	mov	r0, r3
   9b550:	4b58      	ldr	r3, [pc, #352]	; (9b6b4 <Cl_dprep_controller+0xc84>)
   9b552:	4798      	blx	r3
   9b554:	4603      	mov	r3, r0
   9b556:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
						
					}
					
			break;
   9b55a:	e074      	b.n	9b646 <Cl_dprep_controller+0xc16>
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
					}
					
					else if(Cl_Dprep_CheckforfillingCompletion() == CL_REJECTED )
   9b55c:	4b50      	ldr	r3, [pc, #320]	; (9b6a0 <Cl_dprep_controller+0xc70>)
   9b55e:	4798      	blx	r3
   9b560:	4603      	mov	r3, r0
   9b562:	2b03      	cmp	r3, #3
   9b564:	d16f      	bne.n	9b646 <Cl_dprep_controller+0xc16>
					{
						SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
   9b566:	2006      	movs	r0, #6
   9b568:	4b5b      	ldr	r3, [pc, #364]	; (9b6d8 <Cl_dprep_controller+0xca8>)
   9b56a:	4798      	blx	r3
						sv_cntrl_enable_loopback();
   9b56c:	4b5b      	ldr	r3, [pc, #364]	; (9b6dc <Cl_dprep_controller+0xcac>)
   9b56e:	4798      	blx	r3
						data = (Cl_Uint8Type)COMMAND_RESULT_FAILURE;
   9b570:	2300      	movs	r3, #0
   9b572:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						
						Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
   9b576:	2300      	movs	r3, #0
   9b578:	9300      	str	r3, [sp, #0]
   9b57a:	f04f 0300 	mov.w	r3, #0
   9b57e:	4a53      	ldr	r2, [pc, #332]	; (9b6cc <Cl_dprep_controller+0xc9c>)
   9b580:	2103      	movs	r1, #3
   9b582:	2007      	movs	r0, #7
   9b584:	4c52      	ldr	r4, [pc, #328]	; (9b6d0 <Cl_dprep_controller+0xca0>)
   9b586:	47a0      	blx	r4
   9b588:	4603      	mov	r3, r0
   9b58a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						// Appy treatment cond alarm and temerature alarm  limits here
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   9b58e:	2101      	movs	r1, #1
   9b590:	2007      	movs	r0, #7
   9b592:	4b50      	ldr	r3, [pc, #320]	; (9b6d4 <Cl_dprep_controller+0xca4>)
   9b594:	4798      	blx	r3
   9b596:	4603      	mov	r3, r0
   9b598:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9b59c:	f107 016b 	add.w	r1, r7, #107	; 0x6b
   9b5a0:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9b5a4:	2201      	movs	r2, #1
   9b5a6:	4618      	mov	r0, r3
   9b5a8:	4b42      	ldr	r3, [pc, #264]	; (9b6b4 <Cl_dprep_controller+0xc84>)
   9b5aa:	4798      	blx	r3
   9b5ac:	4603      	mov	r3, r0
   9b5ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						
					}
					
			break;
   9b5b2:	e048      	b.n	9b646 <Cl_dprep_controller+0xc16>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   9b5b4:	4b4a      	ldr	r3, [pc, #296]	; (9b6e0 <Cl_dprep_controller+0xcb0>)
   9b5b6:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9b5b8:	4b41      	ldr	r3, [pc, #260]	; (9b6c0 <Cl_dprep_controller+0xc90>)
   9b5ba:	220b      	movs	r2, #11
   9b5bc:	701a      	strb	r2, [r3, #0]
			break;
   9b5be:	e046      	b.n	9b64e <Cl_dprep_controller+0xc1e>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9b5c0:	4b36      	ldr	r3, [pc, #216]	; (9b69c <Cl_dprep_controller+0xc6c>)
   9b5c2:	4798      	blx	r3
   9b5c4:	4603      	mov	r3, r0
   9b5c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			break;
   9b5ca:	e040      	b.n	9b64e <Cl_dprep_controller+0xc1e>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9b5cc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   9b5d0:	4619      	mov	r1, r3
   9b5d2:	203c      	movs	r0, #60	; 0x3c
   9b5d4:	4b43      	ldr	r3, [pc, #268]	; (9b6e4 <Cl_dprep_controller+0xcb4>)
   9b5d6:	4798      	blx	r3
					if(alarmstatus1)
   9b5d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   9b5dc:	2b00      	cmp	r3, #0
   9b5de:	d002      	beq.n	9b5e6 <Cl_dprep_controller+0xbb6>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   9b5e0:	4b41      	ldr	r3, [pc, #260]	; (9b6e8 <Cl_dprep_controller+0xcb8>)
   9b5e2:	2201      	movs	r2, #1
   9b5e4:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9b5e6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   9b5ea:	4619      	mov	r1, r3
   9b5ec:	2011      	movs	r0, #17
   9b5ee:	4b3d      	ldr	r3, [pc, #244]	; (9b6e4 <Cl_dprep_controller+0xcb4>)
   9b5f0:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9b5f2:	f107 0329 	add.w	r3, r7, #41	; 0x29
   9b5f6:	4619      	mov	r1, r3
   9b5f8:	200c      	movs	r0, #12
   9b5fa:	4b3a      	ldr	r3, [pc, #232]	; (9b6e4 <Cl_dprep_controller+0xcb4>)
   9b5fc:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   9b5fe:	e026      	b.n	9b64e <Cl_dprep_controller+0xc1e>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9b600:	4b29      	ldr	r3, [pc, #164]	; (9b6a8 <Cl_dprep_controller+0xc78>)
   9b602:	781b      	ldrb	r3, [r3, #0]
   9b604:	2b01      	cmp	r3, #1
   9b606:	d021      	beq.n	9b64c <Cl_dprep_controller+0xc1c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9b608:	2206      	movs	r2, #6
   9b60a:	4938      	ldr	r1, [pc, #224]	; (9b6ec <Cl_dprep_controller+0xcbc>)
   9b60c:	2018      	movs	r0, #24
   9b60e:	4b29      	ldr	r3, [pc, #164]	; (9b6b4 <Cl_dprep_controller+0xc84>)
   9b610:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9b612:	2100      	movs	r1, #0
   9b614:	2001      	movs	r0, #1
   9b616:	4b36      	ldr	r3, [pc, #216]	; (9b6f0 <Cl_dprep_controller+0xcc0>)
   9b618:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9b61a:	4b36      	ldr	r3, [pc, #216]	; (9b6f4 <Cl_dprep_controller+0xcc4>)
   9b61c:	2200      	movs	r2, #0
   9b61e:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9b620:	e014      	b.n	9b64c <Cl_dprep_controller+0xc1c>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   9b622:	bf00      	nop
   9b624:	f000 be9f 	b.w	9c366 <Cl_dprep_controller+0x1936>
							}
								
						}
				
			
			break;
   9b628:	bf00      	nop
   9b62a:	f000 be9c 	b.w	9c366 <Cl_dprep_controller+0x1936>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
			break;
   9b62e:	bf00      	nop
   9b630:	f000 be99 	b.w	9c366 <Cl_dprep_controller+0x1936>
						break;
						default:
						break;
					}
				}
			break;
   9b634:	bf00      	nop
   9b636:	f000 be96 	b.w	9c366 <Cl_dprep_controller+0x1936>
						 
						 
						 
					 }
	
			break;
   9b63a:	bf00      	nop
   9b63c:	f000 be93 	b.w	9c366 <Cl_dprep_controller+0x1936>
			{
				cl_50ms_timer =0;
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9b640:	bf00      	nop
   9b642:	f000 be90 	b.w	9c366 <Cl_dprep_controller+0x1936>
						
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
						
					}
					
			break;
   9b646:	bf00      	nop
   9b648:	f000 be8d 	b.w	9c366 <Cl_dprep_controller+0x1936>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9b64c:	bf00      	nop

		}
		break;
   9b64e:	f000 be8a 	b.w	9c366 <Cl_dprep_controller+0x1936>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   9b652:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9b656:	2b17      	cmp	r3, #23
   9b658:	d00c      	beq.n	9b674 <Cl_dprep_controller+0xc44>
   9b65a:	2b19      	cmp	r3, #25
   9b65c:	d010      	beq.n	9b680 <Cl_dprep_controller+0xc50>
   9b65e:	2b0d      	cmp	r3, #13
   9b660:	d000      	beq.n	9b664 <Cl_dprep_controller+0xc34>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   9b662:	e013      	b.n	9b68c <Cl_dprep_controller+0xc5c>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   9b664:	4b24      	ldr	r3, [pc, #144]	; (9b6f8 <Cl_dprep_controller+0xcc8>)
   9b666:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   9b668:	4b24      	ldr	r3, [pc, #144]	; (9b6fc <Cl_dprep_controller+0xccc>)
   9b66a:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9b66c:	4b14      	ldr	r3, [pc, #80]	; (9b6c0 <Cl_dprep_controller+0xc90>)
   9b66e:	2206      	movs	r2, #6
   9b670:	701a      	strb	r2, [r3, #0]
								 
						break;
   9b672:	e00b      	b.n	9b68c <Cl_dprep_controller+0xc5c>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9b674:	4b22      	ldr	r3, [pc, #136]	; (9b700 <Cl_dprep_controller+0xcd0>)
   9b676:	4798      	blx	r3
   9b678:	4603      	mov	r3, r0
   9b67a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b67e:	e005      	b.n	9b68c <Cl_dprep_controller+0xc5c>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9b680:	4b06      	ldr	r3, [pc, #24]	; (9b69c <Cl_dprep_controller+0xc6c>)
   9b682:	4798      	blx	r3
   9b684:	4603      	mov	r3, r0
   9b686:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b68a:	bf00      	nop
						default:break;
					}
		break;
   9b68c:	f000 be70 	b.w	9c370 <Cl_dprep_controller+0x1940>
   9b690:	200727ae 	.word	0x200727ae
   9b694:	0009cdb1 	.word	0x0009cdb1
   9b698:	0009ce59 	.word	0x0009ce59
   9b69c:	0009c691 	.word	0x0009c691
   9b6a0:	0009caf1 	.word	0x0009caf1
   9b6a4:	20073138 	.word	0x20073138
   9b6a8:	200720ec 	.word	0x200720ec
   9b6ac:	00096d29 	.word	0x00096d29
   9b6b0:	000a4b58 	.word	0x000a4b58
   9b6b4:	00098601 	.word	0x00098601
   9b6b8:	00096a29 	.word	0x00096a29
   9b6bc:	200727d0 	.word	0x200727d0
   9b6c0:	200727cf 	.word	0x200727cf
   9b6c4:	200727b0 	.word	0x200727b0
   9b6c8:	200727b2 	.word	0x200727b2
   9b6cc:	41500000 	.word	0x41500000
   9b6d0:	00082ea1 	.word	0x00082ea1
   9b6d4:	00082efd 	.word	0x00082efd
   9b6d8:	00089749 	.word	0x00089749
   9b6dc:	000969f1 	.word	0x000969f1
   9b6e0:	0009e4fd 	.word	0x0009e4fd
   9b6e4:	00083041 	.word	0x00083041
   9b6e8:	200727cc 	.word	0x200727cc
   9b6ec:	000a4b50 	.word	0x000a4b50
   9b6f0:	0008896d 	.word	0x0008896d
   9b6f4:	20070a84 	.word	0x20070a84
   9b6f8:	00096a0d 	.word	0x00096a0d
   9b6fc:	00096a51 	.word	0x00096a51
   9b700:	0009d669 	.word	0x0009d669
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   9b704:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9b708:	3b02      	subs	r3, #2
   9b70a:	2b1b      	cmp	r3, #27
   9b70c:	f200 80d3 	bhi.w	9b8b6 <Cl_dprep_controller+0xe86>
   9b710:	a201      	add	r2, pc, #4	; (adr r2, 9b718 <Cl_dprep_controller+0xce8>)
   9b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b716:	bf00      	nop
   9b718:	0009b789 	.word	0x0009b789
   9b71c:	0009b8b7 	.word	0x0009b8b7
   9b720:	0009b8b7 	.word	0x0009b8b7
   9b724:	0009b8b7 	.word	0x0009b8b7
   9b728:	0009b8b7 	.word	0x0009b8b7
   9b72c:	0009b8b7 	.word	0x0009b8b7
   9b730:	0009b8b7 	.word	0x0009b8b7
   9b734:	0009b8b7 	.word	0x0009b8b7
   9b738:	0009b8b7 	.word	0x0009b8b7
   9b73c:	0009b8b7 	.word	0x0009b8b7
   9b740:	0009b8b7 	.word	0x0009b8b7
   9b744:	0009b79b 	.word	0x0009b79b
   9b748:	0009b8b7 	.word	0x0009b8b7
   9b74c:	0009b8b7 	.word	0x0009b8b7
   9b750:	0009b8b7 	.word	0x0009b8b7
   9b754:	0009b8b7 	.word	0x0009b8b7
   9b758:	0009b8b7 	.word	0x0009b8b7
   9b75c:	0009b8b7 	.word	0x0009b8b7
   9b760:	0009b8b7 	.word	0x0009b8b7
   9b764:	0009b8b7 	.word	0x0009b8b7
   9b768:	0009b7dd 	.word	0x0009b7dd
   9b76c:	0009b7c5 	.word	0x0009b7c5
   9b770:	0009b8b7 	.word	0x0009b8b7
   9b774:	0009b7d1 	.word	0x0009b7d1
   9b778:	0009b8b7 	.word	0x0009b8b7
   9b77c:	0009b8b7 	.word	0x0009b8b7
   9b780:	0009b8b7 	.word	0x0009b8b7
   9b784:	0009b7a9 	.word	0x0009b7a9
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   9b788:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b78c:	2b03      	cmp	r3, #3
   9b78e:	f040 8095 	bne.w	9b8bc <Cl_dprep_controller+0xe8c>
							{
								return Cl_dprepretcode;
   9b792:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b796:	f000 bded 	b.w	9c374 <Cl_dprep_controller+0x1944>
							}
						break;
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								Cl_Dprep_StartDialyserPrime();
   9b79a:	4bbd      	ldr	r3, [pc, #756]	; (9ba90 <Cl_dprep_controller+0x1060>)
   9b79c:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9b79e:	4bbd      	ldr	r3, [pc, #756]	; (9ba94 <Cl_dprep_controller+0x1064>)
   9b7a0:	4798      	blx	r3
								 sv_prop_startmixing();
   9b7a2:	4bbd      	ldr	r3, [pc, #756]	; (9ba98 <Cl_dprep_controller+0x1068>)
   9b7a4:	4798      	blx	r3
						break;
   9b7a6:	e08d      	b.n	9b8c4 <Cl_dprep_controller+0xe94>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9b7a8:	4bbc      	ldr	r3, [pc, #752]	; (9ba9c <Cl_dprep_controller+0x106c>)
   9b7aa:	4798      	blx	r3
   9b7ac:	4603      	mov	r3, r0
   9b7ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						if(Cl_dprepretcode == CL_REJECTED)
   9b7b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b7b6:	2b03      	cmp	r3, #3
   9b7b8:	f040 8083 	bne.w	9b8c2 <Cl_dprep_controller+0xe92>
							{
								return Cl_dprepretcode;
   9b7bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b7c0:	f000 bdd8 	b.w	9c374 <Cl_dprep_controller+0x1944>
							}
						break;
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9b7c4:	4bb6      	ldr	r3, [pc, #728]	; (9baa0 <Cl_dprep_controller+0x1070>)
   9b7c6:	4798      	blx	r3
   9b7c8:	4603      	mov	r3, r0
   9b7ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b7ce:	e079      	b.n	9b8c4 <Cl_dprep_controller+0xe94>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9b7d0:	4bb4      	ldr	r3, [pc, #720]	; (9baa4 <Cl_dprep_controller+0x1074>)
   9b7d2:	4798      	blx	r3
   9b7d4:	4603      	mov	r3, r0
   9b7d6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b7da:	e073      	b.n	9b8c4 <Cl_dprep_controller+0xe94>
						case EVENT_DPREP_TICK_SECOND:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
   9b7dc:	2208      	movs	r2, #8
   9b7de:	49b2      	ldr	r1, [pc, #712]	; (9baa8 <Cl_dprep_controller+0x1078>)
   9b7e0:	2018      	movs	r0, #24
   9b7e2:	4bb2      	ldr	r3, [pc, #712]	; (9baac <Cl_dprep_controller+0x107c>)
   9b7e4:	4798      	blx	r3
						for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9b7e6:	2300      	movs	r3, #0
   9b7e8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
   9b7ec:	e05e      	b.n	9b8ac <Cl_dprep_controller+0xe7c>
						{
							
							Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   9b7ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
   9b7f2:	49af      	ldr	r1, [pc, #700]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b7f4:	4613      	mov	r3, r2
   9b7f6:	00db      	lsls	r3, r3, #3
   9b7f8:	1a9b      	subs	r3, r3, r2
   9b7fa:	440b      	add	r3, r1
   9b7fc:	7818      	ldrb	r0, [r3, #0]
   9b7fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
   9b802:	4613      	mov	r3, r2
   9b804:	00db      	lsls	r3, r3, #3
   9b806:	1a9b      	subs	r3, r3, r2
   9b808:	4aa9      	ldr	r2, [pc, #676]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b80a:	4413      	add	r3, r2
   9b80c:	3302      	adds	r3, #2
   9b80e:	4619      	mov	r1, r3
   9b810:	4ba8      	ldr	r3, [pc, #672]	; (9bab4 <Cl_dprep_controller+0x1084>)
   9b812:	4798      	blx	r3
							if (Cl_DprepAlarmTable[tempcount].IsActive)
   9b814:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
   9b818:	49a5      	ldr	r1, [pc, #660]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b81a:	4613      	mov	r3, r2
   9b81c:	00db      	lsls	r3, r3, #3
   9b81e:	1a9b      	subs	r3, r3, r2
   9b820:	440b      	add	r3, r1
   9b822:	3302      	adds	r3, #2
   9b824:	781b      	ldrb	r3, [r3, #0]
   9b826:	2b00      	cmp	r3, #0
   9b828:	d00e      	beq.n	9b848 <Cl_dprep_controller+0xe18>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9b82a:	2208      	movs	r2, #8
   9b82c:	49a2      	ldr	r1, [pc, #648]	; (9bab8 <Cl_dprep_controller+0x1088>)
   9b82e:	2018      	movs	r0, #24
   9b830:	4b9e      	ldr	r3, [pc, #632]	; (9baac <Cl_dprep_controller+0x107c>)
   9b832:	4798      	blx	r3
								Cl_Dprep_Stoppreparation();
   9b834:	4ba1      	ldr	r3, [pc, #644]	; (9babc <Cl_dprep_controller+0x108c>)
   9b836:	4798      	blx	r3
								Cl_dprepretcode = CL_DPREP_STATE_CRITICAL_ALARM;
   9b838:	230c      	movs	r3, #12
   9b83a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
								tempcount=0;
   9b83e:	2300      	movs	r3, #0
   9b840:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
								break;
   9b844:	bf00      	nop
										}

								}
							}
						}
						break;
   9b846:	e03d      	b.n	9b8c4 <Cl_dprep_controller+0xe94>
								Cl_Dprep_Stoppreparation();
								Cl_dprepretcode = CL_DPREP_STATE_CRITICAL_ALARM;
								tempcount=0;
								break;
							}
							else if (tempcount == CL_DPREP_ALRM_MAX - 1)
   9b848:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   9b84c:	2b21      	cmp	r3, #33	; 0x21
   9b84e:	d128      	bne.n	9b8a2 <Cl_dprep_controller+0xe72>
							{
								if(!Cl_DprepAlarmTable[tempcount].IsActive)
   9b850:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
   9b854:	4996      	ldr	r1, [pc, #600]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b856:	4613      	mov	r3, r2
   9b858:	00db      	lsls	r3, r3, #3
   9b85a:	1a9b      	subs	r3, r3, r2
   9b85c:	440b      	add	r3, r1
   9b85e:	3302      	adds	r3, #2
   9b860:	781b      	ldrb	r3, [r3, #0]
   9b862:	f083 0301 	eor.w	r3, r3, #1
   9b866:	b2db      	uxtb	r3, r3
   9b868:	2b00      	cmp	r3, #0
   9b86a:	d01a      	beq.n	9b8a2 <Cl_dprep_controller+0xe72>
								{
									Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9b86c:	4b8b      	ldr	r3, [pc, #556]	; (9ba9c <Cl_dprep_controller+0x106c>)
   9b86e:	4798      	blx	r3
   9b870:	4603      	mov	r3, r0
   9b872:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									if(Cl_dprepretcode == CL_REJECTED)
   9b876:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b87a:	2b03      	cmp	r3, #3
   9b87c:	d103      	bne.n	9b886 <Cl_dprep_controller+0xe56>
										{
											return Cl_dprepretcode;
   9b87e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
   9b882:	f000 bd77 	b.w	9c374 <Cl_dprep_controller+0x1944>
										}
										else
										{
											Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9b886:	2208      	movs	r2, #8
   9b888:	498d      	ldr	r1, [pc, #564]	; (9bac0 <Cl_dprep_controller+0x1090>)
   9b88a:	2018      	movs	r0, #24
   9b88c:	4b87      	ldr	r3, [pc, #540]	; (9baac <Cl_dprep_controller+0x107c>)
   9b88e:	4798      	blx	r3
											sv_cntrl_resetyellowalarm();
   9b890:	4b8c      	ldr	r3, [pc, #560]	; (9bac4 <Cl_dprep_controller+0x1094>)
   9b892:	4798      	blx	r3
											sv_cntrl_resetredalarm();
   9b894:	4b8c      	ldr	r3, [pc, #560]	; (9bac8 <Cl_dprep_controller+0x1098>)
   9b896:	4798      	blx	r3
											sv_cntrl_nobuzzer();
   9b898:	4b8c      	ldr	r3, [pc, #560]	; (9bacc <Cl_dprep_controller+0x109c>)
   9b89a:	4798      	blx	r3
											Cl_dprepretcode = CL_DPREP_STATE_DPREP_FILLING;
   9b89c:	2302      	movs	r3, #2
   9b89e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						case EVENT_DPREP_TICK_SECOND:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
						for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9b8a2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   9b8a6:	3301      	adds	r3, #1
   9b8a8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
   9b8ac:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
   9b8b0:	2b21      	cmp	r3, #33	; 0x21
   9b8b2:	d99c      	bls.n	9b7ee <Cl_dprep_controller+0xdbe>
										}

								}
							}
						}
						break;
   9b8b4:	e006      	b.n	9b8c4 <Cl_dprep_controller+0xe94>
						default:break;
   9b8b6:	bf00      	nop
   9b8b8:	f000 bd5a 	b.w	9c370 <Cl_dprep_controller+0x1940>
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9b8bc:	bf00      	nop
   9b8be:	f000 bd57 	b.w	9c370 <Cl_dprep_controller+0x1940>
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9b8c2:	bf00      	nop
							}
						}
						break;
						default:break;
					}
		break;
   9b8c4:	f000 bd54 	b.w	9c370 <Cl_dprep_controller+0x1940>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9b8c8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9b8cc:	3b04      	subs	r3, #4
   9b8ce:	2b1b      	cmp	r3, #27
   9b8d0:	f200 80cf 	bhi.w	9ba72 <Cl_dprep_controller+0x1042>
   9b8d4:	a201      	add	r2, pc, #4	; (adr r2, 9b8dc <Cl_dprep_controller+0xeac>)
   9b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b8da:	bf00      	nop
   9b8dc:	0009b9eb 	.word	0x0009b9eb
   9b8e0:	0009ba73 	.word	0x0009ba73
   9b8e4:	0009ba73 	.word	0x0009ba73
   9b8e8:	0009ba73 	.word	0x0009ba73
   9b8ec:	0009ba73 	.word	0x0009ba73
   9b8f0:	0009ba73 	.word	0x0009ba73
   9b8f4:	0009b991 	.word	0x0009b991
   9b8f8:	0009ba73 	.word	0x0009ba73
   9b8fc:	0009b9d5 	.word	0x0009b9d5
   9b900:	0009b94d 	.word	0x0009b94d
   9b904:	0009ba73 	.word	0x0009ba73
   9b908:	0009ba73 	.word	0x0009ba73
   9b90c:	0009ba73 	.word	0x0009ba73
   9b910:	0009ba73 	.word	0x0009ba73
   9b914:	0009ba73 	.word	0x0009ba73
   9b918:	0009ba73 	.word	0x0009ba73
   9b91c:	0009ba73 	.word	0x0009ba73
   9b920:	0009ba73 	.word	0x0009ba73
   9b924:	0009b9b9 	.word	0x0009b9b9
   9b928:	0009b9b3 	.word	0x0009b9b3
   9b92c:	0009ba73 	.word	0x0009ba73
   9b930:	0009b9c9 	.word	0x0009b9c9
   9b934:	0009ba73 	.word	0x0009ba73
   9b938:	0009ba73 	.word	0x0009ba73
   9b93c:	0009ba73 	.word	0x0009ba73
   9b940:	0009ba73 	.word	0x0009ba73
   9b944:	0009ba73 	.word	0x0009ba73
   9b948:	0009b95d 	.word	0x0009b95d
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9b94c:	4b50      	ldr	r3, [pc, #320]	; (9ba90 <Cl_dprep_controller+0x1060>)
   9b94e:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9b950:	4b50      	ldr	r3, [pc, #320]	; (9ba94 <Cl_dprep_controller+0x1064>)
   9b952:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9b954:	4b5e      	ldr	r3, [pc, #376]	; (9bad0 <Cl_dprep_controller+0x10a0>)
   9b956:	2206      	movs	r2, #6
   9b958:	701a      	strb	r2, [r3, #0]
						break;
   9b95a:	e097      	b.n	9ba8c <Cl_dprep_controller+0x105c>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9b95c:	4b5d      	ldr	r3, [pc, #372]	; (9bad4 <Cl_dprep_controller+0x10a4>)
   9b95e:	781b      	ldrb	r3, [r3, #0]
   9b960:	2b01      	cmp	r3, #1
   9b962:	d108      	bne.n	9b976 <Cl_dprep_controller+0xf46>
   9b964:	4b5b      	ldr	r3, [pc, #364]	; (9bad4 <Cl_dprep_controller+0x10a4>)
   9b966:	781b      	ldrb	r3, [r3, #0]
   9b968:	2b05      	cmp	r3, #5
   9b96a:	d104      	bne.n	9b976 <Cl_dprep_controller+0xf46>
   9b96c:	4b59      	ldr	r3, [pc, #356]	; (9bad4 <Cl_dprep_controller+0x10a4>)
   9b96e:	781b      	ldrb	r3, [r3, #0]
   9b970:	2b09      	cmp	r3, #9
   9b972:	f000 8081 	beq.w	9ba78 <Cl_dprep_controller+0x1048>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9b976:	2206      	movs	r2, #6
   9b978:	4957      	ldr	r1, [pc, #348]	; (9bad8 <Cl_dprep_controller+0x10a8>)
   9b97a:	2018      	movs	r0, #24
   9b97c:	4b4b      	ldr	r3, [pc, #300]	; (9baac <Cl_dprep_controller+0x107c>)
   9b97e:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9b980:	2100      	movs	r1, #0
   9b982:	2005      	movs	r0, #5
   9b984:	4b55      	ldr	r3, [pc, #340]	; (9badc <Cl_dprep_controller+0x10ac>)
   9b986:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9b988:	4b49      	ldr	r3, [pc, #292]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b98a:	2200      	movs	r2, #0
   9b98c:	70da      	strb	r2, [r3, #3]
									}
						break;
   9b98e:	e073      	b.n	9ba78 <Cl_dprep_controller+0x1048>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9b990:	4b50      	ldr	r3, [pc, #320]	; (9bad4 <Cl_dprep_controller+0x10a4>)
   9b992:	781b      	ldrb	r3, [r3, #0]
   9b994:	2b01      	cmp	r3, #1
   9b996:	d072      	beq.n	9ba7e <Cl_dprep_controller+0x104e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9b998:	2206      	movs	r2, #6
   9b99a:	4951      	ldr	r1, [pc, #324]	; (9bae0 <Cl_dprep_controller+0x10b0>)
   9b99c:	2018      	movs	r0, #24
   9b99e:	4b43      	ldr	r3, [pc, #268]	; (9baac <Cl_dprep_controller+0x107c>)
   9b9a0:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9b9a2:	2100      	movs	r1, #0
   9b9a4:	2001      	movs	r0, #1
   9b9a6:	4b4d      	ldr	r3, [pc, #308]	; (9badc <Cl_dprep_controller+0x10ac>)
   9b9a8:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9b9aa:	4b41      	ldr	r3, [pc, #260]	; (9bab0 <Cl_dprep_controller+0x1080>)
   9b9ac:	2200      	movs	r2, #0
   9b9ae:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9b9b0:	e065      	b.n	9ba7e <Cl_dprep_controller+0x104e>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9b9b2:	4b3b      	ldr	r3, [pc, #236]	; (9baa0 <Cl_dprep_controller+0x1070>)
   9b9b4:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9b9b6:	e069      	b.n	9ba8c <Cl_dprep_controller+0x105c>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9b9b8:	4b46      	ldr	r3, [pc, #280]	; (9bad4 <Cl_dprep_controller+0x10a4>)
   9b9ba:	781b      	ldrb	r3, [r3, #0]
   9b9bc:	2b08      	cmp	r3, #8
   9b9be:	d161      	bne.n	9ba84 <Cl_dprep_controller+0x1054>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9b9c0:	4b43      	ldr	r3, [pc, #268]	; (9bad0 <Cl_dprep_controller+0x10a0>)
   9b9c2:	2205      	movs	r2, #5
   9b9c4:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9b9c6:	e05d      	b.n	9ba84 <Cl_dprep_controller+0x1054>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9b9c8:	4b36      	ldr	r3, [pc, #216]	; (9baa4 <Cl_dprep_controller+0x1074>)
   9b9ca:	4798      	blx	r3
   9b9cc:	4603      	mov	r3, r0
   9b9ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9b9d2:	e05b      	b.n	9ba8c <Cl_dprep_controller+0x105c>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9b9d4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
   9b9d8:	2200      	movs	r2, #0
   9b9da:	4619      	mov	r1, r3
   9b9dc:	2025      	movs	r0, #37	; 0x25
   9b9de:	4b33      	ldr	r3, [pc, #204]	; (9baac <Cl_dprep_controller+0x107c>)
   9b9e0:	4798      	blx	r3
   9b9e2:	4603      	mov	r3, r0
   9b9e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		
						break;
   9b9e8:	e050      	b.n	9ba8c <Cl_dprep_controller+0x105c>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   9b9ea:	4b3e      	ldr	r3, [pc, #248]	; (9bae4 <Cl_dprep_controller+0x10b4>)
   9b9ec:	7e1b      	ldrb	r3, [r3, #24]
   9b9ee:	2b00      	cmp	r3, #0
   9b9f0:	d04b      	beq.n	9ba8a <Cl_dprep_controller+0x105a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9b9f2:	4b3c      	ldr	r3, [pc, #240]	; (9bae4 <Cl_dprep_controller+0x10b4>)
   9b9f4:	791b      	ldrb	r3, [r3, #4]
   9b9f6:	2b02      	cmp	r3, #2
   9b9f8:	d002      	beq.n	9ba00 <Cl_dprep_controller+0xfd0>
   9b9fa:	2b04      	cmp	r3, #4
   9b9fc:	d01c      	beq.n	9ba38 <Cl_dprep_controller+0x1008>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   9b9fe:	e037      	b.n	9ba70 <Cl_dprep_controller+0x1040>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9ba00:	2316      	movs	r3, #22
   9ba02:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9ba06:	2302      	movs	r3, #2
   9ba08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9ba0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9ba10:	3301      	adds	r3, #1
   9ba12:	4619      	mov	r1, r3
   9ba14:	2002      	movs	r0, #2
   9ba16:	4b34      	ldr	r3, [pc, #208]	; (9bae8 <Cl_dprep_controller+0x10b8>)
   9ba18:	4798      	blx	r3
   9ba1a:	4603      	mov	r3, r0
   9ba1c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ba20:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9ba24:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9ba28:	2202      	movs	r2, #2
   9ba2a:	4618      	mov	r0, r3
   9ba2c:	4b1f      	ldr	r3, [pc, #124]	; (9baac <Cl_dprep_controller+0x107c>)
   9ba2e:	4798      	blx	r3
   9ba30:	4603      	mov	r3, r0
   9ba32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9ba36:	e01b      	b.n	9ba70 <Cl_dprep_controller+0x1040>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9ba38:	2316      	movs	r3, #22
   9ba3a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ba3e:	2304      	movs	r3, #4
   9ba40:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ba44:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9ba48:	3301      	adds	r3, #1
   9ba4a:	4619      	mov	r1, r3
   9ba4c:	2004      	movs	r0, #4
   9ba4e:	4b26      	ldr	r3, [pc, #152]	; (9bae8 <Cl_dprep_controller+0x10b8>)
   9ba50:	4798      	blx	r3
   9ba52:	4603      	mov	r3, r0
   9ba54:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ba58:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9ba5c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9ba60:	2202      	movs	r2, #2
   9ba62:	4618      	mov	r0, r3
   9ba64:	4b11      	ldr	r3, [pc, #68]	; (9baac <Cl_dprep_controller+0x107c>)
   9ba66:	4798      	blx	r3
   9ba68:	4603      	mov	r3, r0
   9ba6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9ba6e:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9ba70:	e00b      	b.n	9ba8a <Cl_dprep_controller+0x105a>
						default:break;
   9ba72:	bf00      	nop
   9ba74:	f000 bc7c 	b.w	9c370 <Cl_dprep_controller+0x1940>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
									}
						break;
   9ba78:	bf00      	nop
   9ba7a:	f000 bc79 	b.w	9c370 <Cl_dprep_controller+0x1940>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   9ba7e:	bf00      	nop
   9ba80:	f000 bc76 	b.w	9c370 <Cl_dprep_controller+0x1940>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
									 
						}
						break;
   9ba84:	bf00      	nop
   9ba86:	f000 bc73 	b.w	9c370 <Cl_dprep_controller+0x1940>
									break;
									default:
									break;
								}
							}
						break;
   9ba8a:	bf00      	nop
						default:break;
					}

		break;
   9ba8c:	f000 bc70 	b.w	9c370 <Cl_dprep_controller+0x1940>
   9ba90:	0009e315 	.word	0x0009e315
   9ba94:	00096a0d 	.word	0x00096a0d
   9ba98:	00096c25 	.word	0x00096c25
   9ba9c:	0009df5d 	.word	0x0009df5d
   9baa0:	0009d669 	.word	0x0009d669
   9baa4:	0009c691 	.word	0x0009c691
   9baa8:	000a4b5c 	.word	0x000a4b5c
   9baac:	00098601 	.word	0x00098601
   9bab0:	20070a84 	.word	0x20070a84
   9bab4:	00083041 	.word	0x00083041
   9bab8:	000a4b64 	.word	0x000a4b64
   9babc:	0009d551 	.word	0x0009d551
   9bac0:	000a4b6c 	.word	0x000a4b6c
   9bac4:	00096b39 	.word	0x00096b39
   9bac8:	00096b25 	.word	0x00096b25
   9bacc:	00096b61 	.word	0x00096b61
   9bad0:	200727cf 	.word	0x200727cf
   9bad4:	200720ec 	.word	0x200720ec
   9bad8:	000a4b48 	.word	0x000a4b48
   9badc:	0008896d 	.word	0x0008896d
   9bae0:	000a4b50 	.word	0x000a4b50
   9bae4:	20072f2c 	.word	0x20072f2c
   9bae8:	0009710d 	.word	0x0009710d
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   9baec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9baf0:	3b03      	subs	r3, #3
   9baf2:	2b17      	cmp	r3, #23
   9baf4:	f200 8131 	bhi.w	9bd5a <Cl_dprep_controller+0x132a>
   9baf8:	a201      	add	r2, pc, #4	; (adr r2, 9bb00 <Cl_dprep_controller+0x10d0>)
   9bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bafe:	bf00      	nop
   9bb00:	0009bbdd 	.word	0x0009bbdd
   9bb04:	0009bb61 	.word	0x0009bb61
   9bb08:	0009bd5b 	.word	0x0009bd5b
   9bb0c:	0009bd5b 	.word	0x0009bd5b
   9bb10:	0009bc79 	.word	0x0009bc79
   9bb14:	0009bd5b 	.word	0x0009bd5b
   9bb18:	0009bd5b 	.word	0x0009bd5b
   9bb1c:	0009bd5b 	.word	0x0009bd5b
   9bb20:	0009bd5b 	.word	0x0009bd5b
   9bb24:	0009bc3b 	.word	0x0009bc3b
   9bb28:	0009bc51 	.word	0x0009bc51
   9bb2c:	0009bd5b 	.word	0x0009bd5b
   9bb30:	0009bd5b 	.word	0x0009bd5b
   9bb34:	0009bd5b 	.word	0x0009bd5b
   9bb38:	0009bd5b 	.word	0x0009bd5b
   9bb3c:	0009bd5b 	.word	0x0009bd5b
   9bb40:	0009bd5b 	.word	0x0009bd5b
   9bb44:	0009bd5b 	.word	0x0009bd5b
   9bb48:	0009bd5b 	.word	0x0009bd5b
   9bb4c:	0009bd5b 	.word	0x0009bd5b
   9bb50:	0009bca7 	.word	0x0009bca7
   9bb54:	0009bd5b 	.word	0x0009bd5b
   9bb58:	0009bc6d 	.word	0x0009bc6d
   9bb5c:	0009bc5f 	.word	0x0009bc5f
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9bb60:	4b99      	ldr	r3, [pc, #612]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bb62:	7e1b      	ldrb	r3, [r3, #24]
   9bb64:	2b00      	cmp	r3, #0
   9bb66:	f000 80fa 	beq.w	9bd5e <Cl_dprep_controller+0x132e>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9bb6a:	4b97      	ldr	r3, [pc, #604]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bb6c:	791b      	ldrb	r3, [r3, #4]
   9bb6e:	2b03      	cmp	r3, #3
   9bb70:	d002      	beq.n	9bb78 <Cl_dprep_controller+0x1148>
   9bb72:	2b04      	cmp	r3, #4
   9bb74:	d015      	beq.n	9bba2 <Cl_dprep_controller+0x1172>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9bb76:	e030      	b.n	9bbda <Cl_dprep_controller+0x11aa>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9bb78:	2316      	movs	r3, #22
   9bb7a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9bb7e:	2303      	movs	r3, #3
   9bb80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									dataarray[1] = 0;									
   9bb84:	2300      	movs	r3, #0
   9bb86:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bb8a:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9bb8e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9bb92:	2202      	movs	r2, #2
   9bb94:	4618      	mov	r0, r3
   9bb96:	4b8d      	ldr	r3, [pc, #564]	; (9bdcc <Cl_dprep_controller+0x139c>)
   9bb98:	4798      	blx	r3
   9bb9a:	4603      	mov	r3, r0
   9bb9c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9bba0:	e01b      	b.n	9bbda <Cl_dprep_controller+0x11aa>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9bba2:	2316      	movs	r3, #22
   9bba4:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9bba8:	2304      	movs	r3, #4
   9bbaa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9bbae:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9bbb2:	3301      	adds	r3, #1
   9bbb4:	4619      	mov	r1, r3
   9bbb6:	2004      	movs	r0, #4
   9bbb8:	4b85      	ldr	r3, [pc, #532]	; (9bdd0 <Cl_dprep_controller+0x13a0>)
   9bbba:	4798      	blx	r3
   9bbbc:	4603      	mov	r3, r0
   9bbbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bbc2:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9bbc6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9bbca:	2202      	movs	r2, #2
   9bbcc:	4618      	mov	r0, r3
   9bbce:	4b7f      	ldr	r3, [pc, #508]	; (9bdcc <Cl_dprep_controller+0x139c>)
   9bbd0:	4798      	blx	r3
   9bbd2:	4603      	mov	r3, r0
   9bbd4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9bbd8:	bf00      	nop
									default:break;
								}
							}
						break;
   9bbda:	e0c0      	b.n	9bd5e <Cl_dprep_controller+0x132e>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9bbdc:	4b7a      	ldr	r3, [pc, #488]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bbde:	7e1b      	ldrb	r3, [r3, #24]
   9bbe0:	2b00      	cmp	r3, #0
   9bbe2:	f000 80be 	beq.w	9bd62 <Cl_dprep_controller+0x1332>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9bbe6:	4b78      	ldr	r3, [pc, #480]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bbe8:	791b      	ldrb	r3, [r3, #4]
   9bbea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9bbee:	2300      	movs	r3, #0
   9bbf0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
   9bbf4:	e011      	b.n	9bc1a <Cl_dprep_controller+0x11ea>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9bbf6:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
   9bbfa:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
   9bbfe:	3201      	adds	r2, #1
   9bc00:	4971      	ldr	r1, [pc, #452]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc02:	440a      	add	r2, r1
   9bc04:	7912      	ldrb	r2, [r2, #4]
   9bc06:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
   9bc0a:	440b      	add	r3, r1
   9bc0c:	f803 2c7c 	strb.w	r2, [r3, #-124]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9bc10:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
   9bc14:	3301      	adds	r3, #1
   9bc16:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
   9bc1a:	4b6b      	ldr	r3, [pc, #428]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc1c:	78db      	ldrb	r3, [r3, #3]
   9bc1e:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
   9bc22:	429a      	cmp	r2, r3
   9bc24:	d3e7      	bcc.n	9bbf6 <Cl_dprep_controller+0x11c6>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9bc26:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
   9bc2a:	f897 0085 	ldrb.w	r0, [r7, #133]	; 0x85
   9bc2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   9bc32:	ca06      	ldmia	r2, {r1, r2}
   9bc34:	4c67      	ldr	r4, [pc, #412]	; (9bdd4 <Cl_dprep_controller+0x13a4>)
   9bc36:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9bc38:	e093      	b.n	9bd62 <Cl_dprep_controller+0x1332>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9bc3a:	f107 036b 	add.w	r3, r7, #107	; 0x6b
   9bc3e:	2200      	movs	r2, #0
   9bc40:	4619      	mov	r1, r3
   9bc42:	2025      	movs	r0, #37	; 0x25
   9bc44:	4b61      	ldr	r3, [pc, #388]	; (9bdcc <Cl_dprep_controller+0x139c>)
   9bc46:	4798      	blx	r3
   9bc48:	4603      	mov	r3, r0
   9bc4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		
						break;
   9bc4e:	e08b      	b.n	9bd68 <Cl_dprep_controller+0x1338>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9bc50:	4b61      	ldr	r3, [pc, #388]	; (9bdd8 <Cl_dprep_controller+0x13a8>)
   9bc52:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9bc54:	4b61      	ldr	r3, [pc, #388]	; (9bddc <Cl_dprep_controller+0x13ac>)
   9bc56:	4798      	blx	r3
								 sv_prop_startmixing();
   9bc58:	4b61      	ldr	r3, [pc, #388]	; (9bde0 <Cl_dprep_controller+0x13b0>)
   9bc5a:	4798      	blx	r3
						break;
   9bc5c:	e084      	b.n	9bd68 <Cl_dprep_controller+0x1338>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9bc5e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   9bc62:	4619      	mov	r1, r3
   9bc64:	203c      	movs	r0, #60	; 0x3c
   9bc66:	4b5f      	ldr	r3, [pc, #380]	; (9bde4 <Cl_dprep_controller+0x13b4>)
   9bc68:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   9bc6a:	e07d      	b.n	9bd68 <Cl_dprep_controller+0x1338>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9bc6c:	4b5e      	ldr	r3, [pc, #376]	; (9bde8 <Cl_dprep_controller+0x13b8>)
   9bc6e:	4798      	blx	r3
   9bc70:	4603      	mov	r3, r0
   9bc72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9bc76:	e077      	b.n	9bd68 <Cl_dprep_controller+0x1338>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   9bc78:	4b53      	ldr	r3, [pc, #332]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc7a:	7e1b      	ldrb	r3, [r3, #24]
   9bc7c:	2b00      	cmp	r3, #0
   9bc7e:	d072      	beq.n	9bd66 <Cl_dprep_controller+0x1336>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9bc80:	4b51      	ldr	r3, [pc, #324]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc82:	791b      	ldrb	r3, [r3, #4]
   9bc84:	743b      	strb	r3, [r7, #16]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9bc86:	4b50      	ldr	r3, [pc, #320]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc88:	791b      	ldrb	r3, [r3, #4]
   9bc8a:	747b      	strb	r3, [r7, #17]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9bc8c:	4b4e      	ldr	r3, [pc, #312]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc8e:	791b      	ldrb	r3, [r3, #4]
   9bc90:	74bb      	strb	r3, [r7, #18]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9bc92:	4b4d      	ldr	r3, [pc, #308]	; (9bdc8 <Cl_dprep_controller+0x1398>)
   9bc94:	791b      	ldrb	r3, [r3, #4]
   9bc96:	74fb      	strb	r3, [r7, #19]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9bc98:	8a3b      	ldrh	r3, [r7, #16]
   9bc9a:	b21b      	sxth	r3, r3
   9bc9c:	4619      	mov	r1, r3
   9bc9e:	200e      	movs	r0, #14
   9bca0:	4b52      	ldr	r3, [pc, #328]	; (9bdec <Cl_dprep_controller+0x13bc>)
   9bca2:	4798      	blx	r3
											}
						break;
   9bca4:	e05f      	b.n	9bd66 <Cl_dprep_controller+0x1336>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   9bca6:	f04f 0300 	mov.w	r3, #0
   9bcaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9bcae:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9bcb2:	4619      	mov	r1, r3
   9bcb4:	2014      	movs	r0, #20
   9bcb6:	4b4e      	ldr	r3, [pc, #312]	; (9bdf0 <Cl_dprep_controller+0x13c0>)
   9bcb8:	4798      	blx	r3

							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
   9bcba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   9bcbc:	461a      	mov	r2, r3
   9bcbe:	f649 5308 	movw	r3, #40200	; 0x9d08
   9bcc2:	fb03 f302 	mul.w	r3, r3, r2
   9bcc6:	2b00      	cmp	r3, #0
   9bcc8:	da02      	bge.n	9bcd0 <Cl_dprep_controller+0x12a0>
   9bcca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9bcce:	33ff      	adds	r3, #255	; 0xff
   9bcd0:	141b      	asrs	r3, r3, #16
   9bcd2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9bcd6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
   9bcda:	4618      	mov	r0, r3
   9bcdc:	4b45      	ldr	r3, [pc, #276]	; (9bdf4 <Cl_dprep_controller+0x13c4>)
   9bcde:	4798      	blx	r3
							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9bce0:	4b45      	ldr	r3, [pc, #276]	; (9bdf8 <Cl_dprep_controller+0x13c8>)
   9bce2:	681a      	ldr	r2, [r3, #0]
   9bce4:	4b45      	ldr	r3, [pc, #276]	; (9bdfc <Cl_dprep_controller+0x13cc>)
   9bce6:	4946      	ldr	r1, [pc, #280]	; (9be00 <Cl_dprep_controller+0x13d0>)
   9bce8:	4610      	mov	r0, r2
   9bcea:	4798      	blx	r3
   9bcec:	4603      	mov	r3, r0
   9bcee:	461a      	mov	r2, r3
   9bcf0:	4b44      	ldr	r3, [pc, #272]	; (9be04 <Cl_dprep_controller+0x13d4>)
   9bcf2:	4610      	mov	r0, r2
   9bcf4:	4798      	blx	r3
   9bcf6:	4603      	mov	r3, r0
   9bcf8:	b29b      	uxth	r3, r3
   9bcfa:	84fb      	strh	r3, [r7, #38]	; 0x26
							temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9bcfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   9bcfe:	461a      	mov	r2, r3
   9bd00:	4b41      	ldr	r3, [pc, #260]	; (9be08 <Cl_dprep_controller+0x13d8>)
   9bd02:	4610      	mov	r0, r2
   9bd04:	4798      	blx	r3
   9bd06:	4c41      	ldr	r4, [pc, #260]	; (9be0c <Cl_dprep_controller+0x13dc>)
   9bd08:	a32b      	add	r3, pc, #172	; (adr r3, 9bdb8 <Cl_dprep_controller+0x1388>)
   9bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9bd0e:	47a0      	blx	r4
   9bd10:	4603      	mov	r3, r0
   9bd12:	460c      	mov	r4, r1
   9bd14:	4618      	mov	r0, r3
   9bd16:	4621      	mov	r1, r4
   9bd18:	4c3d      	ldr	r4, [pc, #244]	; (9be10 <Cl_dprep_controller+0x13e0>)
   9bd1a:	a329      	add	r3, pc, #164	; (adr r3, 9bdc0 <Cl_dprep_controller+0x1390>)
   9bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9bd20:	47a0      	blx	r4
   9bd22:	4603      	mov	r3, r0
   9bd24:	460c      	mov	r4, r1
   9bd26:	4619      	mov	r1, r3
   9bd28:	4622      	mov	r2, r4
   9bd2a:	4b3a      	ldr	r3, [pc, #232]	; (9be14 <Cl_dprep_controller+0x13e4>)
   9bd2c:	4608      	mov	r0, r1
   9bd2e:	4611      	mov	r1, r2
   9bd30:	4798      	blx	r3
   9bd32:	4603      	mov	r3, r0
   9bd34:	b29b      	uxth	r3, r3
   9bd36:	84fb      	strh	r3, [r7, #38]	; 0x26
							temp3_cel = temp_temp3;
   9bd38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9bd3a:	4b37      	ldr	r3, [pc, #220]	; (9be18 <Cl_dprep_controller+0x13e8>)
   9bd3c:	4610      	mov	r0, r2
   9bd3e:	4798      	blx	r3
   9bd40:	4603      	mov	r3, r0
   9bd42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							Cl_Dprep_filling_secondscounter++;
   9bd46:	4b35      	ldr	r3, [pc, #212]	; (9be1c <Cl_dprep_controller+0x13ec>)
   9bd48:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bd4c:	b29b      	uxth	r3, r3
   9bd4e:	3301      	adds	r3, #1
   9bd50:	b29b      	uxth	r3, r3
   9bd52:	b21a      	sxth	r2, r3
   9bd54:	4b31      	ldr	r3, [pc, #196]	; (9be1c <Cl_dprep_controller+0x13ec>)
   9bd56:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   9bd58:	e006      	b.n	9bd68 <Cl_dprep_controller+0x1338>
						default:
						break;
   9bd5a:	bf00      	nop
   9bd5c:	e308      	b.n	9c370 <Cl_dprep_controller+0x1940>
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
								}
							}
						break;
   9bd5e:	bf00      	nop
   9bd60:	e306      	b.n	9c370 <Cl_dprep_controller+0x1940>
						 
						 
						 
								 }
	
						break;
   9bd62:	bf00      	nop
   9bd64:	e304      	b.n	9c370 <Cl_dprep_controller+0x1940>
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
											}
						break;
   9bd66:	bf00      	nop
					#endif
						break;
						default:
						break;
					}
		break;
   9bd68:	e302      	b.n	9c370 <Cl_dprep_controller+0x1940>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   9bd6a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9bd6e:	3b0e      	subs	r3, #14
   9bd70:	2b0c      	cmp	r3, #12
   9bd72:	f200 82fa 	bhi.w	9c36a <Cl_dprep_controller+0x193a>
   9bd76:	a201      	add	r2, pc, #4	; (adr r2, 9bd7c <Cl_dprep_controller+0x134c>)
   9bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bd7c:	0009bf9b 	.word	0x0009bf9b
   9bd80:	0009c36b 	.word	0x0009c36b
   9bd84:	0009c36b 	.word	0x0009c36b
   9bd88:	0009c36b 	.word	0x0009c36b
   9bd8c:	0009c36b 	.word	0x0009c36b
   9bd90:	0009bfc5 	.word	0x0009bfc5
   9bd94:	0009c36b 	.word	0x0009c36b
   9bd98:	0009bfc5 	.word	0x0009bfc5
   9bd9c:	0009be25 	.word	0x0009be25
   9bda0:	0009bdb1 	.word	0x0009bdb1
   9bda4:	0009c36b 	.word	0x0009c36b
   9bda8:	0009bfab 	.word	0x0009bfab
   9bdac:	0009bfb7 	.word	0x0009bfb7
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9bdb0:	4b1b      	ldrge	r3, [pc, #108]	; (9be20 <Cl_dprep_controller+0x13f0>)
   9bdb2:	4798      	blxlt	r3	; unpredictable branch in IT block

						break;
   9bdb4:	e109      	blt.n	9bfca <Cl_dprep_controller+0x159a>
   9bdb6:	bf00      	nop
   9bdb8:	cccccccd 	.word	0xcccccccd
   9bdbc:	4008cccc 	.word	0x4008cccc
   9bdc0:	66666666 	.word	0x66666666
   9bdc4:	3ff66666 	.word	0x3ff66666
   9bdc8:	20072f2c 	.word	0x20072f2c
   9bdcc:	00098601 	.word	0x00098601
   9bdd0:	0009710d 	.word	0x0009710d
   9bdd4:	0009d7fd 	.word	0x0009d7fd
   9bdd8:	0009e315 	.word	0x0009e315
   9bddc:	00096a0d 	.word	0x00096a0d
   9bde0:	00096c25 	.word	0x00096c25
   9bde4:	00083041 	.word	0x00083041
   9bde8:	0009c691 	.word	0x0009c691
   9bdec:	0008896d 	.word	0x0008896d
   9bdf0:	0008d499 	.word	0x0008d499
   9bdf4:	0008e659 	.word	0x0008e659
   9bdf8:	200725ec 	.word	0x200725ec
   9bdfc:	000a27f5 	.word	0x000a27f5
   9be00:	42c80000 	.word	0x42c80000
   9be04:	000a2a65 	.word	0x000a2a65
   9be08:	000a1d41 	.word	0x000a1d41
   9be0c:	000a1aa5 	.word	0x000a1aa5
   9be10:	000a1aa9 	.word	0x000a1aa9
   9be14:	000a2391 	.word	0x000a2391
   9be18:	000a25dd 	.word	0x000a25dd
   9be1c:	200727ae 	.word	0x200727ae
   9be20:	0009d669 	.word	0x0009d669
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   9be24:	f04f 0300 	mov.w	r3, #0
   9be28:	67bb      	str	r3, [r7, #120]	; 0x78
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9be2a:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9be2e:	4619      	mov	r1, r3
   9be30:	2014      	movs	r0, #20
   9be32:	4b91      	ldr	r3, [pc, #580]	; (9c078 <Cl_dprep_controller+0x1648>)
   9be34:	4798      	blx	r3
					
						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
   9be36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   9be38:	461a      	mov	r2, r3
   9be3a:	f649 5308 	movw	r3, #40200	; 0x9d08
   9be3e:	fb03 f302 	mul.w	r3, r3, r2
   9be42:	2b00      	cmp	r3, #0
   9be44:	da02      	bge.n	9be4c <Cl_dprep_controller+0x141c>
   9be46:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9be4a:	33ff      	adds	r3, #255	; 0xff
   9be4c:	141b      	asrs	r3, r3, #16
   9be4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
   9be52:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   9be56:	4618      	mov	r0, r3
   9be58:	4b88      	ldr	r3, [pc, #544]	; (9c07c <Cl_dprep_controller+0x164c>)
   9be5a:	4798      	blx	r3
						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
   9be5c:	4b88      	ldr	r3, [pc, #544]	; (9c080 <Cl_dprep_controller+0x1650>)
   9be5e:	681a      	ldr	r2, [r3, #0]
   9be60:	4b88      	ldr	r3, [pc, #544]	; (9c084 <Cl_dprep_controller+0x1654>)
   9be62:	4989      	ldr	r1, [pc, #548]	; (9c088 <Cl_dprep_controller+0x1658>)
   9be64:	4610      	mov	r0, r2
   9be66:	4798      	blx	r3
   9be68:	4603      	mov	r3, r0
   9be6a:	461a      	mov	r2, r3
   9be6c:	4b87      	ldr	r3, [pc, #540]	; (9c08c <Cl_dprep_controller+0x165c>)
   9be6e:	4610      	mov	r0, r2
   9be70:	4798      	blx	r3
   9be72:	4603      	mov	r3, r0
   9be74:	b29b      	uxth	r3, r3
   9be76:	84fb      	strh	r3, [r7, #38]	; 0x26
						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
   9be78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   9be7a:	461a      	mov	r2, r3
   9be7c:	4b84      	ldr	r3, [pc, #528]	; (9c090 <Cl_dprep_controller+0x1660>)
   9be7e:	4610      	mov	r0, r2
   9be80:	4798      	blx	r3
   9be82:	4c84      	ldr	r4, [pc, #528]	; (9c094 <Cl_dprep_controller+0x1664>)
   9be84:	a378      	add	r3, pc, #480	; (adr r3, 9c068 <Cl_dprep_controller+0x1638>)
   9be86:	e9d3 2300 	ldrd	r2, r3, [r3]
   9be8a:	47a0      	blx	r4
   9be8c:	4603      	mov	r3, r0
   9be8e:	460c      	mov	r4, r1
   9be90:	4618      	mov	r0, r3
   9be92:	4621      	mov	r1, r4
   9be94:	4c80      	ldr	r4, [pc, #512]	; (9c098 <Cl_dprep_controller+0x1668>)
   9be96:	a376      	add	r3, pc, #472	; (adr r3, 9c070 <Cl_dprep_controller+0x1640>)
   9be98:	e9d3 2300 	ldrd	r2, r3, [r3]
   9be9c:	47a0      	blx	r4
   9be9e:	4603      	mov	r3, r0
   9bea0:	460c      	mov	r4, r1
   9bea2:	4619      	mov	r1, r3
   9bea4:	4622      	mov	r2, r4
   9bea6:	4b7d      	ldr	r3, [pc, #500]	; (9c09c <Cl_dprep_controller+0x166c>)
   9bea8:	4608      	mov	r0, r1
   9beaa:	4611      	mov	r1, r2
   9beac:	4798      	blx	r3
   9beae:	4603      	mov	r3, r0
   9beb0:	b29b      	uxth	r3, r3
   9beb2:	84fb      	strh	r3, [r7, #38]	; 0x26
						temp3_cel = temp_temp3;
   9beb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9beb6:	4b7a      	ldr	r3, [pc, #488]	; (9c0a0 <Cl_dprep_controller+0x1670>)
   9beb8:	4610      	mov	r0, r2
   9beba:	4798      	blx	r3
   9bebc:	4603      	mov	r3, r0
   9bebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						
							Cl_Dprep_filling_secondscounter++;
   9bec2:	4b78      	ldr	r3, [pc, #480]	; (9c0a4 <Cl_dprep_controller+0x1674>)
   9bec4:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bec8:	b29b      	uxth	r3, r3
   9beca:	3301      	adds	r3, #1
   9becc:	b29b      	uxth	r3, r3
   9bece:	b21a      	sxth	r2, r3
   9bed0:	4b74      	ldr	r3, [pc, #464]	; (9c0a4 <Cl_dprep_controller+0x1674>)
   9bed2:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9bed4:	4b74      	ldr	r3, [pc, #464]	; (9c0a8 <Cl_dprep_controller+0x1678>)
   9bed6:	f9b3 3000 	ldrsh.w	r3, [r3]
   9beda:	b29b      	uxth	r3, r3
   9bedc:	3301      	adds	r3, #1
   9bede:	b29b      	uxth	r3, r3
   9bee0:	b21a      	sxth	r2, r3
   9bee2:	4b71      	ldr	r3, [pc, #452]	; (9c0a8 <Cl_dprep_controller+0x1678>)
   9bee4:	801a      	strh	r2, [r3, #0]
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   9bee6:	4b70      	ldr	r3, [pc, #448]	; (9c0a8 <Cl_dprep_controller+0x1678>)
   9bee8:	f9b3 3000 	ldrsh.w	r3, [r3]
   9beec:	2b3c      	cmp	r3, #60	; 0x3c
   9beee:	d101      	bne.n	9bef4 <Cl_dprep_controller+0x14c4>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9bef0:	4b6e      	ldr	r3, [pc, #440]	; (9c0ac <Cl_dprep_controller+0x167c>)
   9bef2:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9bef4:	2003      	movs	r0, #3
   9bef6:	4b6e      	ldr	r3, [pc, #440]	; (9c0b0 <Cl_dprep_controller+0x1680>)
   9bef8:	4798      	blx	r3
						//	Cl_Dprep_ResetAlertsforReassertion();
							Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9befa:	4b6e      	ldr	r3, [pc, #440]	; (9c0b4 <Cl_dprep_controller+0x1684>)
   9befc:	4798      	blx	r3
   9befe:	4603      	mov	r3, r0
   9bf00:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9bf04:	4b6c      	ldr	r3, [pc, #432]	; (9c0b8 <Cl_dprep_controller+0x1688>)
   9bf06:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bf0a:	2b00      	cmp	r3, #0
   9bf0c:	dd5c      	ble.n	9bfc8 <Cl_dprep_controller+0x1598>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9bf0e:	4b6a      	ldr	r3, [pc, #424]	; (9c0b8 <Cl_dprep_controller+0x1688>)
   9bf10:	2200      	movs	r2, #0
   9bf12:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   9bf14:	2101      	movs	r1, #1
   9bf16:	2009      	movs	r0, #9
   9bf18:	4b68      	ldr	r3, [pc, #416]	; (9c0bc <Cl_dprep_controller+0x168c>)
   9bf1a:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   9bf1c:	4b68      	ldr	r3, [pc, #416]	; (9c0c0 <Cl_dprep_controller+0x1690>)
   9bf1e:	695b      	ldr	r3, [r3, #20]
   9bf20:	673b      	str	r3, [r7, #112]	; 0x70
								 Cl_Uint16Type potvalue=0;
   9bf22:	2300      	movs	r3, #0
   9bf24:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
								 switch (temp)
   9bf28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   9bf2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9bf2e:	d00f      	beq.n	9bf50 <Cl_dprep_controller+0x1520>
   9bf30:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9bf34:	d003      	beq.n	9bf3e <Cl_dprep_controller+0x150e>
   9bf36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9bf3a:	d017      	beq.n	9bf6c <Cl_dprep_controller+0x153c>
									 potvalue = (920 * 1024)/10000;
									 sv_cs_setpotvalue(potvalue);
									 break;
									 
									 default:
									 break;
   9bf3c:	e01f      	b.n	9bf7e <Cl_dprep_controller+0x154e>
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
								 Cl_Uint16Type potvalue=0;
								 switch (temp)
								 {
									 case 800:
									 potvalue = (612 * 1024)/10000;
   9bf3e:	233e      	movs	r3, #62	; 0x3e
   9bf40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
									 sv_cs_setpotvalue(potvalue);
   9bf44:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
   9bf48:	4618      	mov	r0, r3
   9bf4a:	4b5e      	ldr	r3, [pc, #376]	; (9c0c4 <Cl_dprep_controller+0x1694>)
   9bf4c:	4798      	blx	r3
									 break;
   9bf4e:	e016      	b.n	9bf7e <Cl_dprep_controller+0x154e>
									 
									 case 500:
									 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9bf50:	2203      	movs	r2, #3
   9bf52:	495d      	ldr	r1, [pc, #372]	; (9c0c8 <Cl_dprep_controller+0x1698>)
   9bf54:	2018      	movs	r0, #24
   9bf56:	4b5d      	ldr	r3, [pc, #372]	; (9c0cc <Cl_dprep_controller+0x169c>)
   9bf58:	4798      	blx	r3
									 potvalue = (670 * 1024)/10000;
   9bf5a:	2344      	movs	r3, #68	; 0x44
   9bf5c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
									 sv_cs_setpotvalue(potvalue);
   9bf60:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
   9bf64:	4618      	mov	r0, r3
   9bf66:	4b57      	ldr	r3, [pc, #348]	; (9c0c4 <Cl_dprep_controller+0x1694>)
   9bf68:	4798      	blx	r3
									 break;
   9bf6a:	e008      	b.n	9bf7e <Cl_dprep_controller+0x154e>
									 
									 case 300:
									 potvalue = (920 * 1024)/10000;
   9bf6c:	235e      	movs	r3, #94	; 0x5e
   9bf6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
									 sv_cs_setpotvalue(potvalue);
   9bf72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
   9bf76:	4618      	mov	r0, r3
   9bf78:	4b52      	ldr	r3, [pc, #328]	; (9c0c4 <Cl_dprep_controller+0x1694>)
   9bf7a:	4798      	blx	r3
									 break;
   9bf7c:	bf00      	nop
									 
									 default:
									 break;
								 }
								sv_cntrl_enable_bypass();
   9bf7e:	4b54      	ldr	r3, [pc, #336]	; (9c0d0 <Cl_dprep_controller+0x16a0>)
   9bf80:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   9bf82:	4b54      	ldr	r3, [pc, #336]	; (9c0d4 <Cl_dprep_controller+0x16a4>)
   9bf84:	4798      	blx	r3
   9bf86:	4603      	mov	r3, r0
   9bf88:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9bf8c:	4b52      	ldr	r3, [pc, #328]	; (9c0d8 <Cl_dprep_controller+0x16a8>)
   9bf8e:	2201      	movs	r2, #1
   9bf90:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   9bf92:	4b52      	ldr	r3, [pc, #328]	; (9c0dc <Cl_dprep_controller+0x16ac>)
   9bf94:	2208      	movs	r2, #8
   9bf96:	701a      	strb	r2, [r3, #0]
							}
						break;
   9bf98:	e016      	b.n	9bfc8 <Cl_dprep_controller+0x1598>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9bf9a:	2100      	movs	r1, #0
   9bf9c:	2009      	movs	r0, #9
   9bf9e:	4b47      	ldr	r3, [pc, #284]	; (9c0bc <Cl_dprep_controller+0x168c>)
   9bfa0:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   9bfa2:	4b4e      	ldr	r3, [pc, #312]	; (9c0dc <Cl_dprep_controller+0x16ac>)
   9bfa4:	2207      	movs	r2, #7
   9bfa6:	701a      	strb	r2, [r3, #0]
						break;
   9bfa8:	e00f      	b.n	9bfca <Cl_dprep_controller+0x159a>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9bfaa:	4b42      	ldr	r3, [pc, #264]	; (9c0b4 <Cl_dprep_controller+0x1684>)
   9bfac:	4798      	blx	r3
   9bfae:	4603      	mov	r3, r0
   9bfb0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9bfb4:	e009      	b.n	9bfca <Cl_dprep_controller+0x159a>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9bfb6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   9bfba:	4619      	mov	r1, r3
   9bfbc:	203c      	movs	r0, #60	; 0x3c
   9bfbe:	4b48      	ldr	r3, [pc, #288]	; (9c0e0 <Cl_dprep_controller+0x16b0>)
   9bfc0:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   9bfc2:	e002      	b.n	9bfca <Cl_dprep_controller+0x159a>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   9bfc4:	bf00      	nop
   9bfc6:	e1d0      	b.n	9c36a <Cl_dprep_controller+0x193a>
								sv_cntrl_enable_bypass();
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
   9bfc8:	bf00      	nop
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   9bfca:	e1ce      	b.n	9c36a <Cl_dprep_controller+0x193a>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   9bfcc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9bfd0:	2b0d      	cmp	r3, #13
   9bfd2:	d000      	beq.n	9bfd6 <Cl_dprep_controller+0x15a6>
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   9bfd4:	e006      	b.n	9bfe4 <Cl_dprep_controller+0x15b4>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
							{
		
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9bfd6:	4b43      	ldr	r3, [pc, #268]	; (9c0e4 <Cl_dprep_controller+0x16b4>)
   9bfd8:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9bfda:	4b43      	ldr	r3, [pc, #268]	; (9c0e8 <Cl_dprep_controller+0x16b8>)
   9bfdc:	4798      	blx	r3
								sv_prop_startmixing();
   9bfde:	4b43      	ldr	r3, [pc, #268]	; (9c0ec <Cl_dprep_controller+0x16bc>)
   9bfe0:	4798      	blx	r3
								 break;
   9bfe2:	bf00      	nop
								 default:break;
							}
		break;
   9bfe4:	e1c4      	b.n	9c370 <Cl_dprep_controller+0x1940>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   9bfe6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9bfea:	3b16      	subs	r3, #22
   9bfec:	2b06      	cmp	r3, #6
   9bfee:	f200 81be 	bhi.w	9c36e <Cl_dprep_controller+0x193e>
   9bff2:	a201      	add	r2, pc, #4	; (adr r2, 9bff8 <Cl_dprep_controller+0x15c8>)
   9bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bff8:	0009c101 	.word	0x0009c101
   9bffc:	0009c05d 	.word	0x0009c05d
   9c000:	0009c36f 	.word	0x0009c36f
   9c004:	0009c023 	.word	0x0009c023
   9c008:	0009c015 	.word	0x0009c015
   9c00c:	0009c03f 	.word	0x0009c03f
   9c010:	0009c02f 	.word	0x0009c02f
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c014:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   9c018:	4619      	mov	r1, r3
   9c01a:	203c      	movs	r0, #60	; 0x3c
   9c01c:	4b30      	ldr	r3, [pc, #192]	; (9c0e0 <Cl_dprep_controller+0x16b0>)
   9c01e:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   9c020:	e0d2      	b.n	9c1c8 <Cl_dprep_controller+0x1798>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c022:	4b24      	ldr	r3, [pc, #144]	; (9c0b4 <Cl_dprep_controller+0x1684>)
   9c024:	4798      	blx	r3
   9c026:	4603      	mov	r3, r0
   9c028:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				break;
   9c02c:	e0cc      	b.n	9c1c8 <Cl_dprep_controller+0x1798>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9c02e:	2100      	movs	r1, #0
   9c030:	2004      	movs	r0, #4
   9c032:	4b2f      	ldr	r3, [pc, #188]	; (9c0f0 <Cl_dprep_controller+0x16c0>)
   9c034:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   9c036:	4b2f      	ldr	r3, [pc, #188]	; (9c0f4 <Cl_dprep_controller+0x16c4>)
   9c038:	2201      	movs	r2, #1
   9c03a:	701a      	strb	r2, [r3, #0]
				break;
   9c03c:	e0c4      	b.n	9c1c8 <Cl_dprep_controller+0x1798>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9c03e:	4b2d      	ldr	r3, [pc, #180]	; (9c0f4 <Cl_dprep_controller+0x16c4>)
   9c040:	781b      	ldrb	r3, [r3, #0]
   9c042:	2b02      	cmp	r3, #2
   9c044:	f040 80bd 	bne.w	9c1c2 <Cl_dprep_controller+0x1792>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9c048:	204c      	movs	r0, #76	; 0x4c
   9c04a:	4b2b      	ldr	r3, [pc, #172]	; (9c0f8 <Cl_dprep_controller+0x16c8>)
   9c04c:	4798      	blx	r3
   9c04e:	4603      	mov	r3, r0
   9c050:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   9c054:	4b21      	ldr	r3, [pc, #132]	; (9c0dc <Cl_dprep_controller+0x16ac>)
   9c056:	2209      	movs	r2, #9
   9c058:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   9c05a:	e0b2      	b.n	9c1c2 <Cl_dprep_controller+0x1792>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   9c05c:	4b27      	ldr	r3, [pc, #156]	; (9c0fc <Cl_dprep_controller+0x16cc>)
   9c05e:	4798      	blx	r3
				break;
   9c060:	e0b2      	b.n	9c1c8 <Cl_dprep_controller+0x1798>
   9c062:	bf00      	nop
   9c064:	f3af 8000 	nop.w
   9c068:	cccccccd 	.word	0xcccccccd
   9c06c:	4008cccc 	.word	0x4008cccc
   9c070:	66666666 	.word	0x66666666
   9c074:	3ff66666 	.word	0x3ff66666
   9c078:	0008d499 	.word	0x0008d499
   9c07c:	0008e659 	.word	0x0008e659
   9c080:	200725ec 	.word	0x200725ec
   9c084:	000a27f5 	.word	0x000a27f5
   9c088:	42c80000 	.word	0x42c80000
   9c08c:	000a2a65 	.word	0x000a2a65
   9c090:	000a1d41 	.word	0x000a1d41
   9c094:	000a1aa5 	.word	0x000a1aa5
   9c098:	000a1aa9 	.word	0x000a1aa9
   9c09c:	000a2391 	.word	0x000a2391
   9c0a0:	000a25dd 	.word	0x000a25dd
   9c0a4:	200727ae 	.word	0x200727ae
   9c0a8:	200727ba 	.word	0x200727ba
   9c0ac:	0009cdfd 	.word	0x0009cdfd
   9c0b0:	0009ce59 	.word	0x0009ce59
   9c0b4:	0009c691 	.word	0x0009c691
   9c0b8:	200727bc 	.word	0x200727bc
   9c0bc:	0008896d 	.word	0x0008896d
   9c0c0:	20073138 	.word	0x20073138
   9c0c4:	00096d29 	.word	0x00096d29
   9c0c8:	000a4b58 	.word	0x000a4b58
   9c0cc:	00098601 	.word	0x00098601
   9c0d0:	00096a29 	.word	0x00096a29
   9c0d4:	0009c60d 	.word	0x0009c60d
   9c0d8:	200727d0 	.word	0x200727d0
   9c0dc:	200727cf 	.word	0x200727cf
   9c0e0:	00083041 	.word	0x00083041
   9c0e4:	0009e315 	.word	0x0009e315
   9c0e8:	00096a0d 	.word	0x00096a0d
   9c0ec:	00096c25 	.word	0x00096c25
   9c0f0:	00091c25 	.word	0x00091c25
   9c0f4:	200727ce 	.word	0x200727ce
   9c0f8:	0008a915 	.word	0x0008a915
   9c0fc:	0009d669 	.word	0x0009d669
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   9c100:	4b9e      	ldr	r3, [pc, #632]	; (9c37c <Cl_dprep_controller+0x194c>)
   9c102:	781b      	ldrb	r3, [r3, #0]
   9c104:	2b01      	cmp	r3, #1
   9c106:	d13d      	bne.n	9c184 <Cl_dprep_controller+0x1754>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9c108:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9c10c:	4619      	mov	r1, r3
   9c10e:	200a      	movs	r0, #10
   9c110:	4b9b      	ldr	r3, [pc, #620]	; (9c380 <Cl_dprep_controller+0x1950>)
   9c112:	4798      	blx	r3
				
					if(temp == 0)
   9c114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   9c116:	2b00      	cmp	r3, #0
   9c118:	d134      	bne.n	9c184 <Cl_dprep_controller+0x1754>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9c11a:	2205      	movs	r2, #5
   9c11c:	4999      	ldr	r1, [pc, #612]	; (9c384 <Cl_dprep_controller+0x1954>)
   9c11e:	2018      	movs	r0, #24
   9c120:	4b99      	ldr	r3, [pc, #612]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c122:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   9c124:	2200      	movs	r2, #0
   9c126:	2100      	movs	r1, #0
   9c128:	2027      	movs	r0, #39	; 0x27
   9c12a:	4b97      	ldr	r3, [pc, #604]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c12c:	4798      	blx	r3
   9c12e:	4603      	mov	r3, r0
   9c130:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   9c134:	4b91      	ldr	r3, [pc, #580]	; (9c37c <Cl_dprep_controller+0x194c>)
   9c136:	2202      	movs	r2, #2
   9c138:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   9c13a:	4b94      	ldr	r3, [pc, #592]	; (9c38c <Cl_dprep_controller+0x195c>)
   9c13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   9c13e:	60fb      	str	r3, [r7, #12]
										hep_calibration(temp);
   9c140:	68fb      	ldr	r3, [r7, #12]
   9c142:	4618      	mov	r0, r3
   9c144:	4b92      	ldr	r3, [pc, #584]	; (9c390 <Cl_dprep_controller+0x1960>)
   9c146:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9c148:	f107 030c 	add.w	r3, r7, #12
   9c14c:	2202      	movs	r2, #2
   9c14e:	4619      	mov	r1, r3
   9c150:	2019      	movs	r0, #25
   9c152:	4b8d      	ldr	r3, [pc, #564]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c154:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   9c156:	2202      	movs	r2, #2
   9c158:	498e      	ldr	r1, [pc, #568]	; (9c394 <Cl_dprep_controller+0x1964>)
   9c15a:	2019      	movs	r0, #25
   9c15c:	4b8a      	ldr	r3, [pc, #552]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c15e:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   9c160:	4b8c      	ldr	r3, [pc, #560]	; (9c394 <Cl_dprep_controller+0x1964>)
   9c162:	681b      	ldr	r3, [r3, #0]
   9c164:	4619      	mov	r1, r3
   9c166:	2006      	movs	r0, #6
   9c168:	4b8b      	ldr	r3, [pc, #556]	; (9c398 <Cl_dprep_controller+0x1968>)
   9c16a:	4798      	blx	r3
										cl_wait(100);
   9c16c:	2064      	movs	r0, #100	; 0x64
   9c16e:	4b8b      	ldr	r3, [pc, #556]	; (9c39c <Cl_dprep_controller+0x196c>)
   9c170:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9c172:	2100      	movs	r1, #0
   9c174:	200a      	movs	r0, #10
   9c176:	4b88      	ldr	r3, [pc, #544]	; (9c398 <Cl_dprep_controller+0x1968>)
   9c178:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   9c17a:	2207      	movs	r2, #7
   9c17c:	4988      	ldr	r1, [pc, #544]	; (9c3a0 <Cl_dprep_controller+0x1970>)
   9c17e:	2018      	movs	r0, #24
   9c180:	4b81      	ldr	r3, [pc, #516]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c182:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9c184:	4b7d      	ldr	r3, [pc, #500]	; (9c37c <Cl_dprep_controller+0x194c>)
   9c186:	781b      	ldrb	r3, [r3, #0]
   9c188:	2b02      	cmp	r3, #2
   9c18a:	d11c      	bne.n	9c1c6 <Cl_dprep_controller+0x1796>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   9c18c:	4b85      	ldr	r3, [pc, #532]	; (9c3a4 <Cl_dprep_controller+0x1974>)
   9c18e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c192:	b29b      	uxth	r3, r3
   9c194:	3301      	adds	r3, #1
   9c196:	b29b      	uxth	r3, r3
   9c198:	b21a      	sxth	r2, r3
   9c19a:	4b82      	ldr	r3, [pc, #520]	; (9c3a4 <Cl_dprep_controller+0x1974>)
   9c19c:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   9c19e:	4b81      	ldr	r3, [pc, #516]	; (9c3a4 <Cl_dprep_controller+0x1974>)
   9c1a0:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c1a4:	2b3c      	cmp	r3, #60	; 0x3c
   9c1a6:	d10e      	bne.n	9c1c6 <Cl_dprep_controller+0x1796>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   9c1a8:	4b7e      	ldr	r3, [pc, #504]	; (9c3a4 <Cl_dprep_controller+0x1974>)
   9c1aa:	2200      	movs	r2, #0
   9c1ac:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   9c1ae:	2207      	movs	r2, #7
   9c1b0:	497d      	ldr	r1, [pc, #500]	; (9c3a8 <Cl_dprep_controller+0x1978>)
   9c1b2:	2018      	movs	r0, #24
   9c1b4:	4b74      	ldr	r3, [pc, #464]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c1b6:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9c1b8:	2100      	movs	r1, #0
   9c1ba:	2009      	movs	r0, #9
   9c1bc:	4b76      	ldr	r3, [pc, #472]	; (9c398 <Cl_dprep_controller+0x1968>)
   9c1be:	4798      	blx	r3
					}
					}
				break;
   9c1c0:	e001      	b.n	9c1c6 <Cl_dprep_controller+0x1796>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
				}
				
				break;
   9c1c2:	bf00      	nop
   9c1c4:	e0d3      	b.n	9c36e <Cl_dprep_controller+0x193e>
						Cl_Dprep_hepbolus_secondscounter = 0;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
					}
					}
				break;
   9c1c6:	bf00      	nop
			}
		
		break;
   9c1c8:	e0d1      	b.n	9c36e <Cl_dprep_controller+0x193e>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   9c1ca:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   9c1ce:	3b03      	subs	r3, #3
   9c1d0:	2b17      	cmp	r3, #23
   9c1d2:	f200 80c0 	bhi.w	9c356 <Cl_dprep_controller+0x1926>
   9c1d6:	a201      	add	r2, pc, #4	; (adr r2, 9c1dc <Cl_dprep_controller+0x17ac>)
   9c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c1dc:	0009c2ef 	.word	0x0009c2ef
   9c1e0:	0009c275 	.word	0x0009c275
   9c1e4:	0009c357 	.word	0x0009c357
   9c1e8:	0009c357 	.word	0x0009c357
   9c1ec:	0009c357 	.word	0x0009c357
   9c1f0:	0009c357 	.word	0x0009c357
   9c1f4:	0009c357 	.word	0x0009c357
   9c1f8:	0009c357 	.word	0x0009c357
   9c1fc:	0009c357 	.word	0x0009c357
   9c200:	0009c357 	.word	0x0009c357
   9c204:	0009c357 	.word	0x0009c357
   9c208:	0009c357 	.word	0x0009c357
   9c20c:	0009c357 	.word	0x0009c357
   9c210:	0009c357 	.word	0x0009c357
   9c214:	0009c357 	.word	0x0009c357
   9c218:	0009c357 	.word	0x0009c357
   9c21c:	0009c357 	.word	0x0009c357
   9c220:	0009c357 	.word	0x0009c357
   9c224:	0009c357 	.word	0x0009c357
   9c228:	0009c251 	.word	0x0009c251
   9c22c:	0009c24b 	.word	0x0009c24b
   9c230:	0009c357 	.word	0x0009c357
   9c234:	0009c34b 	.word	0x0009c34b
   9c238:	0009c23d 	.word	0x0009c23d
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c23c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   9c240:	4619      	mov	r1, r3
   9c242:	203c      	movs	r0, #60	; 0x3c
   9c244:	4b59      	ldr	r3, [pc, #356]	; (9c3ac <Cl_dprep_controller+0x197c>)
   9c246:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   9c248:	e08c      	b.n	9c364 <Cl_dprep_controller+0x1934>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   9c24a:	4b59      	ldr	r3, [pc, #356]	; (9c3b0 <Cl_dprep_controller+0x1980>)
   9c24c:	4798      	blx	r3
					break;
   9c24e:	e089      	b.n	9c364 <Cl_dprep_controller+0x1934>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9c250:	2004      	movs	r0, #4
   9c252:	4b58      	ldr	r3, [pc, #352]	; (9c3b4 <Cl_dprep_controller+0x1984>)
   9c254:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9c256:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9c25a:	4619      	mov	r1, r3
   9c25c:	200a      	movs	r0, #10
   9c25e:	4b48      	ldr	r3, [pc, #288]	; (9c380 <Cl_dprep_controller+0x1950>)
   9c260:	4798      	blx	r3
					if( temp == 0)
   9c262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   9c264:	2b00      	cmp	r3, #0
   9c266:	d178      	bne.n	9c35a <Cl_dprep_controller+0x192a>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9c268:	2205      	movs	r2, #5
   9c26a:	4946      	ldr	r1, [pc, #280]	; (9c384 <Cl_dprep_controller+0x1954>)
   9c26c:	2018      	movs	r0, #24
   9c26e:	4b46      	ldr	r3, [pc, #280]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c270:	4798      	blx	r3
					}
					break;
   9c272:	e072      	b.n	9c35a <Cl_dprep_controller+0x192a>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9c274:	4b50      	ldr	r3, [pc, #320]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c276:	7e1b      	ldrb	r3, [r3, #24]
   9c278:	2b00      	cmp	r3, #0
   9c27a:	d070      	beq.n	9c35e <Cl_dprep_controller+0x192e>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9c27c:	4b4e      	ldr	r3, [pc, #312]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c27e:	791b      	ldrb	r3, [r3, #4]
   9c280:	2b03      	cmp	r3, #3
   9c282:	d002      	beq.n	9c28a <Cl_dprep_controller+0x185a>
   9c284:	2b04      	cmp	r3, #4
   9c286:	d015      	beq.n	9c2b4 <Cl_dprep_controller+0x1884>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9c288:	e030      	b.n	9c2ec <Cl_dprep_controller+0x18bc>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c28a:	2316      	movs	r3, #22
   9c28c:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9c290:	2303      	movs	r3, #3
   9c292:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									dataarray[1] = 0;
   9c296:	2300      	movs	r3, #0
   9c298:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c29c:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9c2a0:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9c2a4:	2202      	movs	r2, #2
   9c2a6:	4618      	mov	r0, r3
   9c2a8:	4b37      	ldr	r3, [pc, #220]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c2aa:	4798      	blx	r3
   9c2ac:	4603      	mov	r3, r0
   9c2ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9c2b2:	e01b      	b.n	9c2ec <Cl_dprep_controller+0x18bc>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c2b4:	2316      	movs	r3, #22
   9c2b6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9c2ba:	2304      	movs	r3, #4
   9c2bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9c2c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9c2c4:	3301      	adds	r3, #1
   9c2c6:	4619      	mov	r1, r3
   9c2c8:	2004      	movs	r0, #4
   9c2ca:	4b3c      	ldr	r3, [pc, #240]	; (9c3bc <Cl_dprep_controller+0x198c>)
   9c2cc:	4798      	blx	r3
   9c2ce:	4603      	mov	r3, r0
   9c2d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c2d4:	f107 0164 	add.w	r1, r7, #100	; 0x64
   9c2d8:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   9c2dc:	2202      	movs	r2, #2
   9c2de:	4618      	mov	r0, r3
   9c2e0:	4b29      	ldr	r3, [pc, #164]	; (9c388 <Cl_dprep_controller+0x1958>)
   9c2e2:	4798      	blx	r3
   9c2e4:	4603      	mov	r3, r0
   9c2e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									break;
   9c2ea:	bf00      	nop
									default:break;
								}
							}
				
						break;
   9c2ec:	e037      	b.n	9c35e <Cl_dprep_controller+0x192e>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9c2ee:	4b32      	ldr	r3, [pc, #200]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c2f0:	7e1b      	ldrb	r3, [r3, #24]
   9c2f2:	2b00      	cmp	r3, #0
   9c2f4:	d035      	beq.n	9c362 <Cl_dprep_controller+0x1932>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9c2f6:	4b30      	ldr	r3, [pc, #192]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c2f8:	791b      	ldrb	r3, [r3, #4]
   9c2fa:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c2fe:	2300      	movs	r3, #0
   9c300:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
   9c304:	e011      	b.n	9c32a <Cl_dprep_controller+0x18fa>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9c306:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
   9c30a:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
   9c30e:	3201      	adds	r2, #1
   9c310:	4929      	ldr	r1, [pc, #164]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c312:	440a      	add	r2, r1
   9c314:	7912      	ldrb	r2, [r2, #4]
   9c316:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
   9c31a:	440b      	add	r3, r1
   9c31c:	f803 2c7c 	strb.w	r2, [r3, #-124]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c320:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
   9c324:	3301      	adds	r3, #1
   9c326:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
   9c32a:	4b23      	ldr	r3, [pc, #140]	; (9c3b8 <Cl_dprep_controller+0x1988>)
   9c32c:	78db      	ldrb	r3, [r3, #3]
   9c32e:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
   9c332:	429a      	cmp	r2, r3
   9c334:	d3e7      	bcc.n	9c306 <Cl_dprep_controller+0x18d6>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9c336:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
   9c33a:	f897 006d 	ldrb.w	r0, [r7, #109]	; 0x6d
   9c33e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   9c342:	ca06      	ldmia	r2, {r1, r2}
   9c344:	4c1e      	ldr	r4, [pc, #120]	; (9c3c0 <Cl_dprep_controller+0x1990>)
   9c346:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9c348:	e00b      	b.n	9c362 <Cl_dprep_controller+0x1932>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c34a:	4b1e      	ldr	r3, [pc, #120]	; (9c3c4 <Cl_dprep_controller+0x1994>)
   9c34c:	4798      	blx	r3
   9c34e:	4603      	mov	r3, r0
   9c350:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						break;
   9c354:	e006      	b.n	9c364 <Cl_dprep_controller+0x1934>
					default:
					break;
   9c356:	bf00      	nop
   9c358:	e00a      	b.n	9c370 <Cl_dprep_controller+0x1940>
					if( temp == 0)
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					}
					break;
   9c35a:	bf00      	nop
   9c35c:	e008      	b.n	9c370 <Cl_dprep_controller+0x1940>
									break;
									default:break;
								}
							}
				
						break;
   9c35e:	bf00      	nop
   9c360:	e006      	b.n	9c370 <Cl_dprep_controller+0x1940>
						 
						 
						 
								 }
	
						break;
   9c362:	bf00      	nop
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
					default:
					break;
				}
		break;
   9c364:	e004      	b.n	9c370 <Cl_dprep_controller+0x1940>
			}
			
			break;

		}
		break;
   9c366:	bf00      	nop
   9c368:	e002      	b.n	9c370 <Cl_dprep_controller+0x1940>
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   9c36a:	bf00      	nop
   9c36c:	e000      	b.n	9c370 <Cl_dprep_controller+0x1940>
					}
					}
				break;
			}
		
		break;
   9c36e:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   9c370:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
   9c374:	4618      	mov	r0, r3
   9c376:	37ac      	adds	r7, #172	; 0xac
   9c378:	46bd      	mov	sp, r7
   9c37a:	bd90      	pop	{r4, r7, pc}
   9c37c:	200727ce 	.word	0x200727ce
   9c380:	0008d499 	.word	0x0008d499
   9c384:	000a4b74 	.word	0x000a4b74
   9c388:	00098601 	.word	0x00098601
   9c38c:	20073138 	.word	0x20073138
   9c390:	00083d55 	.word	0x00083d55
   9c394:	20072d0c 	.word	0x20072d0c
   9c398:	00092315 	.word	0x00092315
   9c39c:	00091b9d 	.word	0x00091b9d
   9c3a0:	000a4b7c 	.word	0x000a4b7c
   9c3a4:	200727ac 	.word	0x200727ac
   9c3a8:	000a4b84 	.word	0x000a4b84
   9c3ac:	00083041 	.word	0x00083041
   9c3b0:	0009d669 	.word	0x0009d669
   9c3b4:	0009ce59 	.word	0x0009ce59
   9c3b8:	20072f2c 	.word	0x20072f2c
   9c3bc:	0009710d 	.word	0x0009710d
   9c3c0:	0009d7fd 	.word	0x0009d7fd
   9c3c4:	0009c691 	.word	0x0009c691

0009c3c8 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   9c3c8:	b480      	push	{r7}
   9c3ca:	b083      	sub	sp, #12
   9c3cc:	af00      	add	r7, sp, #0
   9c3ce:	4603      	mov	r3, r0
   9c3d0:	6039      	str	r1, [r7, #0]
   9c3d2:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   9c3d4:	79fb      	ldrb	r3, [r7, #7]
   9c3d6:	3b09      	subs	r3, #9
   9c3d8:	2b43      	cmp	r3, #67	; 0x43
   9c3da:	f200 810f 	bhi.w	9c5fc <cl_dprep_translatemacevent+0x234>
   9c3de:	a201      	add	r2, pc, #4	; (adr r2, 9c3e4 <cl_dprep_translatemacevent+0x1c>)
   9c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c3e4:	0009c4fd 	.word	0x0009c4fd
   9c3e8:	0009c505 	.word	0x0009c505
   9c3ec:	0009c50d 	.word	0x0009c50d
   9c3f0:	0009c515 	.word	0x0009c515
   9c3f4:	0009c51d 	.word	0x0009c51d
   9c3f8:	0009c525 	.word	0x0009c525
   9c3fc:	0009c535 	.word	0x0009c535
   9c400:	0009c53d 	.word	0x0009c53d
   9c404:	0009c52d 	.word	0x0009c52d
   9c408:	0009c545 	.word	0x0009c545
   9c40c:	0009c54d 	.word	0x0009c54d
   9c410:	0009c555 	.word	0x0009c555
   9c414:	0009c5f5 	.word	0x0009c5f5
   9c418:	0009c55d 	.word	0x0009c55d
   9c41c:	0009c5fd 	.word	0x0009c5fd
   9c420:	0009c5fd 	.word	0x0009c5fd
   9c424:	0009c5fd 	.word	0x0009c5fd
   9c428:	0009c5fd 	.word	0x0009c5fd
   9c42c:	0009c5fd 	.word	0x0009c5fd
   9c430:	0009c5b5 	.word	0x0009c5b5
   9c434:	0009c5c5 	.word	0x0009c5c5
   9c438:	0009c5cd 	.word	0x0009c5cd
   9c43c:	0009c5d5 	.word	0x0009c5d5
   9c440:	0009c5fd 	.word	0x0009c5fd
   9c444:	0009c5bd 	.word	0x0009c5bd
   9c448:	0009c5fd 	.word	0x0009c5fd
   9c44c:	0009c5fd 	.word	0x0009c5fd
   9c450:	0009c5fd 	.word	0x0009c5fd
   9c454:	0009c5fd 	.word	0x0009c5fd
   9c458:	0009c5dd 	.word	0x0009c5dd
   9c45c:	0009c5e5 	.word	0x0009c5e5
   9c460:	0009c5ed 	.word	0x0009c5ed
   9c464:	0009c4f5 	.word	0x0009c4f5
   9c468:	0009c5fd 	.word	0x0009c5fd
   9c46c:	0009c5fd 	.word	0x0009c5fd
   9c470:	0009c5fd 	.word	0x0009c5fd
   9c474:	0009c5ad 	.word	0x0009c5ad
   9c478:	0009c5a5 	.word	0x0009c5a5
   9c47c:	0009c5fd 	.word	0x0009c5fd
   9c480:	0009c5fd 	.word	0x0009c5fd
   9c484:	0009c5fd 	.word	0x0009c5fd
   9c488:	0009c5fd 	.word	0x0009c5fd
   9c48c:	0009c5fd 	.word	0x0009c5fd
   9c490:	0009c5fd 	.word	0x0009c5fd
   9c494:	0009c5fd 	.word	0x0009c5fd
   9c498:	0009c5fd 	.word	0x0009c5fd
   9c49c:	0009c5fd 	.word	0x0009c5fd
   9c4a0:	0009c565 	.word	0x0009c565
   9c4a4:	0009c56d 	.word	0x0009c56d
   9c4a8:	0009c575 	.word	0x0009c575
   9c4ac:	0009c57d 	.word	0x0009c57d
   9c4b0:	0009c585 	.word	0x0009c585
   9c4b4:	0009c58d 	.word	0x0009c58d
   9c4b8:	0009c5fd 	.word	0x0009c5fd
   9c4bc:	0009c5fd 	.word	0x0009c5fd
   9c4c0:	0009c5fd 	.word	0x0009c5fd
   9c4c4:	0009c5fd 	.word	0x0009c5fd
   9c4c8:	0009c5fd 	.word	0x0009c5fd
   9c4cc:	0009c5fd 	.word	0x0009c5fd
   9c4d0:	0009c5fd 	.word	0x0009c5fd
   9c4d4:	0009c5fd 	.word	0x0009c5fd
   9c4d8:	0009c5fd 	.word	0x0009c5fd
   9c4dc:	0009c5fd 	.word	0x0009c5fd
   9c4e0:	0009c5fd 	.word	0x0009c5fd
   9c4e4:	0009c595 	.word	0x0009c595
   9c4e8:	0009c5fd 	.word	0x0009c5fd
   9c4ec:	0009c5fd 	.word	0x0009c5fd
   9c4f0:	0009c59d 	.word	0x0009c59d
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   9c4f4:	683b      	ldr	r3, [r7, #0]
   9c4f6:	2201      	movs	r2, #1
   9c4f8:	701a      	strb	r2, [r3, #0]
		break;
   9c4fa:	e080      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   9c4fc:	683b      	ldr	r3, [r7, #0]
   9c4fe:	2202      	movs	r2, #2
   9c500:	701a      	strb	r2, [r3, #0]
		break;
   9c502:	e07c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   9c504:	683b      	ldr	r3, [r7, #0]
   9c506:	2205      	movs	r2, #5
   9c508:	701a      	strb	r2, [r3, #0]
		break;
   9c50a:	e078      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   9c50c:	683b      	ldr	r3, [r7, #0]
   9c50e:	2206      	movs	r2, #6
   9c510:	701a      	strb	r2, [r3, #0]
		break;
   9c512:	e074      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   9c514:	683b      	ldr	r3, [r7, #0]
   9c516:	2207      	movs	r2, #7
   9c518:	701a      	strb	r2, [r3, #0]
		break;
   9c51a:	e070      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   9c51c:	683b      	ldr	r3, [r7, #0]
   9c51e:	2203      	movs	r2, #3
   9c520:	701a      	strb	r2, [r3, #0]
		break;
   9c522:	e06c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   9c524:	683b      	ldr	r3, [r7, #0]
   9c526:	2204      	movs	r2, #4
   9c528:	701a      	strb	r2, [r3, #0]
		break;
   9c52a:	e068      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   9c52c:	683b      	ldr	r3, [r7, #0]
   9c52e:	2208      	movs	r2, #8
   9c530:	701a      	strb	r2, [r3, #0]
				break;
   9c532:	e064      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   9c534:	683b      	ldr	r3, [r7, #0]
   9c536:	220a      	movs	r2, #10
   9c538:	701a      	strb	r2, [r3, #0]
		break;
   9c53a:	e060      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   9c53c:	683b      	ldr	r3, [r7, #0]
   9c53e:	220b      	movs	r2, #11
   9c540:	701a      	strb	r2, [r3, #0]
		break;
   9c542:	e05c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   9c544:	683b      	ldr	r3, [r7, #0]
   9c546:	220c      	movs	r2, #12
   9c548:	701a      	strb	r2, [r3, #0]
		break;
   9c54a:	e058      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9c54c:	683b      	ldr	r3, [r7, #0]
   9c54e:	220d      	movs	r2, #13
   9c550:	701a      	strb	r2, [r3, #0]
		break;
   9c552:	e054      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   9c554:	683b      	ldr	r3, [r7, #0]
   9c556:	220e      	movs	r2, #14
   9c558:	701a      	strb	r2, [r3, #0]
		break;	
   9c55a:	e050      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   9c55c:	683b      	ldr	r3, [r7, #0]
   9c55e:	2212      	movs	r2, #18
   9c560:	701a      	strb	r2, [r3, #0]
		break;
   9c562:	e04c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   9c564:	683b      	ldr	r3, [r7, #0]
   9c566:	2213      	movs	r2, #19
   9c568:	701a      	strb	r2, [r3, #0]
		break;
   9c56a:	e048      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   9c56c:	683b      	ldr	r3, [r7, #0]
   9c56e:	2214      	movs	r2, #20
   9c570:	701a      	strb	r2, [r3, #0]
		break;
   9c572:	e044      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   9c574:	683b      	ldr	r3, [r7, #0]
   9c576:	2215      	movs	r2, #21
   9c578:	701a      	strb	r2, [r3, #0]
		break;
   9c57a:	e040      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   9c57c:	683b      	ldr	r3, [r7, #0]
   9c57e:	2216      	movs	r2, #22
   9c580:	701a      	strb	r2, [r3, #0]
		break;
   9c582:	e03c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   9c584:	683b      	ldr	r3, [r7, #0]
   9c586:	2217      	movs	r2, #23
   9c588:	701a      	strb	r2, [r3, #0]
		break;			 
   9c58a:	e038      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   9c58c:	683b      	ldr	r3, [r7, #0]
   9c58e:	2218      	movs	r2, #24
   9c590:	701a      	strb	r2, [r3, #0]
		break;
   9c592:	e034      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   9c594:	683b      	ldr	r3, [r7, #0]
   9c596:	2210      	movs	r2, #16
   9c598:	701a      	strb	r2, [r3, #0]
		break;
   9c59a:	e030      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   9c59c:	683b      	ldr	r3, [r7, #0]
   9c59e:	2211      	movs	r2, #17
   9c5a0:	701a      	strb	r2, [r3, #0]
		break;
   9c5a2:	e02c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   9c5a4:	683b      	ldr	r3, [r7, #0]
   9c5a6:	2219      	movs	r2, #25
   9c5a8:	701a      	strb	r2, [r3, #0]
		break;
   9c5aa:	e028      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   9c5ac:	683b      	ldr	r3, [r7, #0]
   9c5ae:	221a      	movs	r2, #26
   9c5b0:	701a      	strb	r2, [r3, #0]
		break;
   9c5b2:	e024      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   9c5b4:	683b      	ldr	r3, [r7, #0]
   9c5b6:	221b      	movs	r2, #27
   9c5b8:	701a      	strb	r2, [r3, #0]
		break;
   9c5ba:	e020      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   9c5bc:	683b      	ldr	r3, [r7, #0]
   9c5be:	221c      	movs	r2, #28
   9c5c0:	701a      	strb	r2, [r3, #0]
		break;
   9c5c2:	e01c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   9c5c4:	683b      	ldr	r3, [r7, #0]
   9c5c6:	221d      	movs	r2, #29
   9c5c8:	701a      	strb	r2, [r3, #0]
		break;
   9c5ca:	e018      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   9c5cc:	683b      	ldr	r3, [r7, #0]
   9c5ce:	221e      	movs	r2, #30
   9c5d0:	701a      	strb	r2, [r3, #0]
		break;
   9c5d2:	e014      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   9c5d4:	683b      	ldr	r3, [r7, #0]
   9c5d6:	221f      	movs	r2, #31
   9c5d8:	701a      	strb	r2, [r3, #0]
		break;
   9c5da:	e010      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   9c5dc:	683b      	ldr	r3, [r7, #0]
   9c5de:	2221      	movs	r2, #33	; 0x21
   9c5e0:	701a      	strb	r2, [r3, #0]
		break;
   9c5e2:	e00c      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   9c5e4:	683b      	ldr	r3, [r7, #0]
   9c5e6:	2222      	movs	r2, #34	; 0x22
   9c5e8:	701a      	strb	r2, [r3, #0]
		break;
   9c5ea:	e008      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   9c5ec:	683b      	ldr	r3, [r7, #0]
   9c5ee:	2223      	movs	r2, #35	; 0x23
   9c5f0:	701a      	strb	r2, [r3, #0]
		break;
   9c5f2:	e004      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   9c5f4:	683b      	ldr	r3, [r7, #0]
   9c5f6:	220f      	movs	r2, #15
   9c5f8:	701a      	strb	r2, [r3, #0]
		break;
   9c5fa:	e000      	b.n	9c5fe <cl_dprep_translatemacevent+0x236>
		default:
		break;
   9c5fc:	bf00      	nop
	}
		 return CL_OK;
   9c5fe:	2300      	movs	r3, #0
}
   9c600:	4618      	mov	r0, r3
   9c602:	370c      	adds	r7, #12
   9c604:	46bd      	mov	sp, r7
   9c606:	bc80      	pop	{r7}
   9c608:	4770      	bx	lr
   9c60a:	bf00      	nop

0009c60c <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   9c60c:	b580      	push	{r7, lr}
   9c60e:	b082      	sub	sp, #8
   9c610:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9c612:	2300      	movs	r3, #0
   9c614:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   9c616:	2300      	movs	r3, #0
   9c618:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   9c61a:	4b15      	ldr	r3, [pc, #84]	; (9c670 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   9c61c:	2200      	movs	r2, #0
   9c61e:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   9c620:	4b14      	ldr	r3, [pc, #80]	; (9c674 <cl_dprep_notifydacandgotodpreptandby+0x68>)
   9c622:	2200      	movs	r2, #0
   9c624:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   9c626:	4b14      	ldr	r3, [pc, #80]	; (9c678 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   9c628:	2200      	movs	r2, #0
   9c62a:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   9c62c:	4b13      	ldr	r3, [pc, #76]	; (9c67c <cl_dprep_notifydacandgotodpreptandby+0x70>)
   9c62e:	2200      	movs	r2, #0
   9c630:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   9c632:	4b13      	ldr	r3, [pc, #76]	; (9c680 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   9c634:	2200      	movs	r2, #0
   9c636:	601a      	str	r2, [r3, #0]
		data = 1;
   9c638:	2301      	movs	r3, #1
   9c63a:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   9c63c:	1dbb      	adds	r3, r7, #6
   9c63e:	2201      	movs	r2, #1
   9c640:	4619      	mov	r1, r3
   9c642:	2002      	movs	r0, #2
   9c644:	4b0f      	ldr	r3, [pc, #60]	; (9c684 <cl_dprep_notifydacandgotodpreptandby+0x78>)
   9c646:	4798      	blx	r3
   9c648:	4603      	mov	r3, r0
   9c64a:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   9c64c:	1dbb      	adds	r3, r7, #6
   9c64e:	2200      	movs	r2, #0
   9c650:	4619      	mov	r1, r3
   9c652:	2010      	movs	r0, #16
   9c654:	4b0c      	ldr	r3, [pc, #48]	; (9c688 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   9c656:	4798      	blx	r3
   9c658:	4603      	mov	r3, r0
   9c65a:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9c65c:	204c      	movs	r0, #76	; 0x4c
   9c65e:	4b0b      	ldr	r3, [pc, #44]	; (9c68c <cl_dprep_notifydacandgotodpreptandby+0x80>)
   9c660:	4798      	blx	r3
   9c662:	4603      	mov	r3, r0
   9c664:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   9c666:	79fb      	ldrb	r3, [r7, #7]
	}
   9c668:	4618      	mov	r0, r3
   9c66a:	3708      	adds	r7, #8
   9c66c:	46bd      	mov	sp, r7
   9c66e:	bd80      	pop	{r7, pc}
   9c670:	200727d4 	.word	0x200727d4
   9c674:	200727d8 	.word	0x200727d8
   9c678:	200727dc 	.word	0x200727dc
   9c67c:	200727e0 	.word	0x200727e0
   9c680:	200727e4 	.word	0x200727e4
   9c684:	00097145 	.word	0x00097145
   9c688:	00098601 	.word	0x00098601
   9c68c:	0008a915 	.word	0x0008a915

0009c690 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   9c690:	b580      	push	{r7, lr}
   9c692:	b082      	sub	sp, #8
   9c694:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9c696:	2300      	movs	r3, #0
   9c698:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9c69a:	234a      	movs	r3, #74	; 0x4a
   9c69c:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   9c69e:	4b04      	ldr	r3, [pc, #16]	; (9c6b0 <Cl_Dprep_ProcessAlarms+0x20>)
   9c6a0:	4798      	blx	r3
   9c6a2:	4603      	mov	r3, r0
   9c6a4:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   9c6a6:	79fb      	ldrb	r3, [r7, #7]
	}
   9c6a8:	4618      	mov	r0, r3
   9c6aa:	3708      	adds	r7, #8
   9c6ac:	46bd      	mov	sp, r7
   9c6ae:	bd80      	pop	{r7, pc}
   9c6b0:	0009c6b5 	.word	0x0009c6b5

0009c6b4 <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   9c6b4:	b580      	push	{r7, lr}
   9c6b6:	b084      	sub	sp, #16
   9c6b8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9c6ba:	2300      	movs	r3, #0
   9c6bc:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   9c6be:	2300      	movs	r3, #0
   9c6c0:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   9c6c2:	2300      	movs	r3, #0
   9c6c4:	713b      	strb	r3, [r7, #4]
   9c6c6:	2300      	movs	r3, #0
   9c6c8:	717b      	strb	r3, [r7, #5]
   9c6ca:	2300      	movs	r3, #0
   9c6cc:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9c6ce:	234a      	movs	r3, #74	; 0x4a
   9c6d0:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9c6d2:	2300      	movs	r3, #0
   9c6d4:	73bb      	strb	r3, [r7, #14]
   9c6d6:	e068      	b.n	9c7aa <Cl_Dprep_UpdateAlarmTable+0xf6>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   9c6d8:	7bba      	ldrb	r2, [r7, #14]
   9c6da:	4938      	ldr	r1, [pc, #224]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c6dc:	4613      	mov	r3, r2
   9c6de:	00db      	lsls	r3, r3, #3
   9c6e0:	1a9b      	subs	r3, r3, r2
   9c6e2:	440b      	add	r3, r1
   9c6e4:	7818      	ldrb	r0, [r3, #0]
   9c6e6:	7bba      	ldrb	r2, [r7, #14]
   9c6e8:	4613      	mov	r3, r2
   9c6ea:	00db      	lsls	r3, r3, #3
   9c6ec:	1a9b      	subs	r3, r3, r2
   9c6ee:	4a33      	ldr	r2, [pc, #204]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c6f0:	4413      	add	r3, r2
   9c6f2:	3302      	adds	r3, #2
   9c6f4:	4619      	mov	r1, r3
   9c6f6:	4b32      	ldr	r3, [pc, #200]	; (9c7c0 <Cl_Dprep_UpdateAlarmTable+0x10c>)
   9c6f8:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   9c6fa:	7bba      	ldrb	r2, [r7, #14]
   9c6fc:	492f      	ldr	r1, [pc, #188]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c6fe:	4613      	mov	r3, r2
   9c700:	00db      	lsls	r3, r3, #3
   9c702:	1a9b      	subs	r3, r3, r2
   9c704:	440b      	add	r3, r1
   9c706:	3302      	adds	r3, #2
   9c708:	781b      	ldrb	r3, [r3, #0]
   9c70a:	2b00      	cmp	r3, #0
   9c70c:	d022      	beq.n	9c754 <Cl_Dprep_UpdateAlarmTable+0xa0>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   9c70e:	7bba      	ldrb	r2, [r7, #14]
   9c710:	492a      	ldr	r1, [pc, #168]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c712:	4613      	mov	r3, r2
   9c714:	00db      	lsls	r3, r3, #3
   9c716:	1a9b      	subs	r3, r3, r2
   9c718:	440b      	add	r3, r1
   9c71a:	3303      	adds	r3, #3
   9c71c:	781b      	ldrb	r3, [r3, #0]
   9c71e:	f083 0301 	eor.w	r3, r3, #1
   9c722:	b2db      	uxtb	r3, r3
   9c724:	2b00      	cmp	r3, #0
   9c726:	d03d      	beq.n	9c7a4 <Cl_Dprep_UpdateAlarmTable+0xf0>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   9c728:	7bba      	ldrb	r2, [r7, #14]
   9c72a:	4924      	ldr	r1, [pc, #144]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c72c:	4613      	mov	r3, r2
   9c72e:	00db      	lsls	r3, r3, #3
   9c730:	1a9b      	subs	r3, r3, r2
   9c732:	440b      	add	r3, r1
   9c734:	3303      	adds	r3, #3
   9c736:	2201      	movs	r2, #1
   9c738:	701a      	strb	r2, [r3, #0]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9c73a:	7bba      	ldrb	r2, [r7, #14]
   9c73c:	491f      	ldr	r1, [pc, #124]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c73e:	4613      	mov	r3, r2
   9c740:	00db      	lsls	r3, r3, #3
   9c742:	1a9b      	subs	r3, r3, r2
   9c744:	440b      	add	r3, r1
   9c746:	781b      	ldrb	r3, [r3, #0]
   9c748:	4618      	mov	r0, r3
   9c74a:	4b1e      	ldr	r3, [pc, #120]	; (9c7c4 <Cl_Dprep_UpdateAlarmTable+0x110>)
   9c74c:	4798      	blx	r3
   9c74e:	4603      	mov	r3, r0
   9c750:	73fb      	strb	r3, [r7, #15]
   9c752:	e027      	b.n	9c7a4 <Cl_Dprep_UpdateAlarmTable+0xf0>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   9c754:	7bba      	ldrb	r2, [r7, #14]
   9c756:	4919      	ldr	r1, [pc, #100]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c758:	4613      	mov	r3, r2
   9c75a:	00db      	lsls	r3, r3, #3
   9c75c:	1a9b      	subs	r3, r3, r2
   9c75e:	440b      	add	r3, r1
   9c760:	3303      	adds	r3, #3
   9c762:	781b      	ldrb	r3, [r3, #0]
   9c764:	2b00      	cmp	r3, #0
   9c766:	d014      	beq.n	9c792 <Cl_Dprep_UpdateAlarmTable+0xde>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   9c768:	7bba      	ldrb	r2, [r7, #14]
   9c76a:	4914      	ldr	r1, [pc, #80]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c76c:	4613      	mov	r3, r2
   9c76e:	00db      	lsls	r3, r3, #3
   9c770:	1a9b      	subs	r3, r3, r2
   9c772:	440b      	add	r3, r1
   9c774:	3303      	adds	r3, #3
   9c776:	2200      	movs	r2, #0
   9c778:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9c77a:	2307      	movs	r3, #7
   9c77c:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9c77e:	7bba      	ldrb	r2, [r7, #14]
   9c780:	490e      	ldr	r1, [pc, #56]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c782:	4613      	mov	r3, r2
   9c784:	00db      	lsls	r3, r3, #3
   9c786:	1a9b      	subs	r3, r3, r2
   9c788:	440b      	add	r3, r1
   9c78a:	781b      	ldrb	r3, [r3, #0]
   9c78c:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   9c78e:	2300      	movs	r3, #0
   9c790:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9c792:	7bba      	ldrb	r2, [r7, #14]
   9c794:	4909      	ldr	r1, [pc, #36]	; (9c7bc <Cl_Dprep_UpdateAlarmTable+0x108>)
   9c796:	4613      	mov	r3, r2
   9c798:	00db      	lsls	r3, r3, #3
   9c79a:	1a9b      	subs	r3, r3, r2
   9c79c:	440b      	add	r3, r1
   9c79e:	3302      	adds	r3, #2
   9c7a0:	2201      	movs	r2, #1
   9c7a2:	701a      	strb	r2, [r3, #0]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9c7a4:	7bbb      	ldrb	r3, [r7, #14]
   9c7a6:	3301      	adds	r3, #1
   9c7a8:	73bb      	strb	r3, [r7, #14]
   9c7aa:	7bbb      	ldrb	r3, [r7, #14]
   9c7ac:	2b21      	cmp	r3, #33	; 0x21
   9c7ae:	d993      	bls.n	9c6d8 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   9c7b0:	7bfb      	ldrb	r3, [r7, #15]
	}
   9c7b2:	4618      	mov	r0, r3
   9c7b4:	3710      	adds	r7, #16
   9c7b6:	46bd      	mov	sp, r7
   9c7b8:	bd80      	pop	{r7, pc}
   9c7ba:	bf00      	nop
   9c7bc:	20070a84 	.word	0x20070a84
   9c7c0:	00083041 	.word	0x00083041
   9c7c4:	0009c7c9 	.word	0x0009c7c9

0009c7c8 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9c7c8:	b580      	push	{r7, lr}
   9c7ca:	b086      	sub	sp, #24
   9c7cc:	af00      	add	r7, sp, #0
   9c7ce:	4603      	mov	r3, r0
   9c7d0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9c7d2:	2300      	movs	r3, #0
   9c7d4:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   9c7d6:	2300      	movs	r3, #0
   9c7d8:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   9c7da:	2300      	movs	r3, #0
   9c7dc:	827b      	strh	r3, [r7, #18]
   9c7de:	2300      	movs	r3, #0
   9c7e0:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   9c7e2:	f107 0308 	add.w	r3, r7, #8
   9c7e6:	2100      	movs	r1, #0
   9c7e8:	460a      	mov	r2, r1
   9c7ea:	801a      	strh	r2, [r3, #0]
   9c7ec:	460a      	mov	r2, r1
   9c7ee:	709a      	strb	r2, [r3, #2]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9c7f0:	2300      	movs	r3, #0
   9c7f2:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9c7f4:	234a      	movs	r3, #74	; 0x4a
   9c7f6:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   9c7f8:	79fb      	ldrb	r3, [r7, #7]
   9c7fa:	3b01      	subs	r3, #1
   9c7fc:	2b3d      	cmp	r3, #61	; 0x3d
   9c7fe:	f200 8100 	bhi.w	9ca02 <CL_DrepAlarmActon+0x23a>
   9c802:	a201      	add	r2, pc, #4	; (adr r2, 9c808 <CL_DrepAlarmActon+0x40>)
   9c804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c808:	0009c901 	.word	0x0009c901
   9c80c:	0009ca03 	.word	0x0009ca03
   9c810:	0009c93b 	.word	0x0009c93b
   9c814:	0009c93b 	.word	0x0009c93b
   9c818:	0009c94f 	.word	0x0009c94f
   9c81c:	0009c94f 	.word	0x0009c94f
   9c820:	0009c9ef 	.word	0x0009c9ef
   9c824:	0009c9ef 	.word	0x0009c9ef
   9c828:	0009ca03 	.word	0x0009ca03
   9c82c:	0009ca03 	.word	0x0009ca03
   9c830:	0009ca03 	.word	0x0009ca03
   9c834:	0009ca03 	.word	0x0009ca03
   9c838:	0009ca03 	.word	0x0009ca03
   9c83c:	0009ca03 	.word	0x0009ca03
   9c840:	0009c99f 	.word	0x0009c99f
   9c844:	0009c99f 	.word	0x0009c99f
   9c848:	0009c98b 	.word	0x0009c98b
   9c84c:	0009c98b 	.word	0x0009c98b
   9c850:	0009c977 	.word	0x0009c977
   9c854:	0009c977 	.word	0x0009c977
   9c858:	0009c9b3 	.word	0x0009c9b3
   9c85c:	0009c9b3 	.word	0x0009c9b3
   9c860:	0009c9c7 	.word	0x0009c9c7
   9c864:	0009c9c7 	.word	0x0009c9c7
   9c868:	0009ca03 	.word	0x0009ca03
   9c86c:	0009ca03 	.word	0x0009ca03
   9c870:	0009ca03 	.word	0x0009ca03
   9c874:	0009ca03 	.word	0x0009ca03
   9c878:	0009ca03 	.word	0x0009ca03
   9c87c:	0009ca03 	.word	0x0009ca03
   9c880:	0009ca03 	.word	0x0009ca03
   9c884:	0009ca03 	.word	0x0009ca03
   9c888:	0009ca03 	.word	0x0009ca03
   9c88c:	0009ca03 	.word	0x0009ca03
   9c890:	0009ca03 	.word	0x0009ca03
   9c894:	0009ca09 	.word	0x0009ca09
   9c898:	0009ca03 	.word	0x0009ca03
   9c89c:	0009ca09 	.word	0x0009ca09
   9c8a0:	0009c9db 	.word	0x0009c9db
   9c8a4:	0009c9db 	.word	0x0009c9db
   9c8a8:	0009ca03 	.word	0x0009ca03
   9c8ac:	0009c963 	.word	0x0009c963
   9c8b0:	0009ca03 	.word	0x0009ca03
   9c8b4:	0009c963 	.word	0x0009c963
   9c8b8:	0009ca03 	.word	0x0009ca03
   9c8bc:	0009ca03 	.word	0x0009ca03
   9c8c0:	0009ca03 	.word	0x0009ca03
   9c8c4:	0009ca03 	.word	0x0009ca03
   9c8c8:	0009ca03 	.word	0x0009ca03
   9c8cc:	0009ca03 	.word	0x0009ca03
   9c8d0:	0009ca03 	.word	0x0009ca03
   9c8d4:	0009ca03 	.word	0x0009ca03
   9c8d8:	0009ca03 	.word	0x0009ca03
   9c8dc:	0009ca03 	.word	0x0009ca03
   9c8e0:	0009ca03 	.word	0x0009ca03
   9c8e4:	0009ca03 	.word	0x0009ca03
   9c8e8:	0009ca03 	.word	0x0009ca03
   9c8ec:	0009ca03 	.word	0x0009ca03
   9c8f0:	0009ca03 	.word	0x0009ca03
   9c8f4:	0009ca03 	.word	0x0009ca03
   9c8f8:	0009ca09 	.word	0x0009ca09
   9c8fc:	0009ca09 	.word	0x0009ca09
	{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   9c900:	4b57      	ldr	r3, [pc, #348]	; (9ca60 <CL_DrepAlarmActon+0x298>)
   9c902:	4798      	blx	r3
				sv_cntrl_buzzer();
   9c904:	4b57      	ldr	r3, [pc, #348]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c906:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9c908:	2100      	movs	r1, #0
   9c90a:	2004      	movs	r0, #4
   9c90c:	4b56      	ldr	r3, [pc, #344]	; (9ca68 <CL_DrepAlarmActon+0x2a0>)
   9c90e:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   9c910:	4b56      	ldr	r3, [pc, #344]	; (9ca6c <CL_DrepAlarmActon+0x2a4>)
   9c912:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c914:	4b56      	ldr	r3, [pc, #344]	; (9ca70 <CL_DrepAlarmActon+0x2a8>)
   9c916:	2201      	movs	r2, #1
   9c918:	701a      	strb	r2, [r3, #0]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
   9c91a:	2100      	movs	r1, #0
   9c91c:	2003      	movs	r0, #3
   9c91e:	4b55      	ldr	r3, [pc, #340]	; (9ca74 <CL_DrepAlarmActon+0x2ac>)
   9c920:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9c922:	4b55      	ldr	r3, [pc, #340]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c924:	781b      	ldrb	r3, [r3, #0]
   9c926:	2b06      	cmp	r3, #6
   9c928:	d003      	beq.n	9c932 <CL_DrepAlarmActon+0x16a>
   9c92a:	4b53      	ldr	r3, [pc, #332]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c92c:	781b      	ldrb	r3, [r3, #0]
   9c92e:	2b0d      	cmp	r3, #13
   9c930:	d16c      	bne.n	9ca0c <CL_DrepAlarmActon+0x244>
				{	
				
					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
   9c932:	4b51      	ldr	r3, [pc, #324]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c934:	220d      	movs	r2, #13
   9c936:	701a      	strb	r2, [r3, #0]
				}
				//
			break;
   9c938:	e068      	b.n	9ca0c <CL_DrepAlarmActon+0x244>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   9c93a:	4b50      	ldr	r3, [pc, #320]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c93c:	4798      	blx	r3
				sv_cntrl_buzzer();
   9c93e:	4b49      	ldr	r3, [pc, #292]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c940:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9c942:	4b4f      	ldr	r3, [pc, #316]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c944:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c946:	4b4c      	ldr	r3, [pc, #304]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c948:	220c      	movs	r2, #12
   9c94a:	701a      	strb	r2, [r3, #0]
			break;
   9c94c:	e05f      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case HOLDER1STATUS_CLOSED:
			case HOLDER2STATUS_CLOSED:
			sv_cntrl_setyellowalarm();
   9c94e:	4b4b      	ldr	r3, [pc, #300]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c950:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c952:	4b44      	ldr	r3, [pc, #272]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c954:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c956:	4b4a      	ldr	r3, [pc, #296]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c958:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c95a:	4b47      	ldr	r3, [pc, #284]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c95c:	220c      	movs	r2, #12
   9c95e:	701a      	strb	r2, [r3, #0]
			//Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
			//enterl_saferinse_state();
			break;
   9c960:	e055      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
			sv_cntrl_setyellowalarm();
   9c962:	4b46      	ldr	r3, [pc, #280]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c964:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c966:	4b3f      	ldr	r3, [pc, #252]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c968:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c96a:	4b45      	ldr	r3, [pc, #276]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c96c:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c96e:	4b42      	ldr	r3, [pc, #264]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c970:	220c      	movs	r2, #12
   9c972:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   9c974:	e04b      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
				}
			}
			break;
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9c976:	4b41      	ldr	r3, [pc, #260]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c978:	4798      	blx	r3
				sv_cntrl_buzzer();
   9c97a:	4b3a      	ldr	r3, [pc, #232]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c97c:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9c97e:	4b40      	ldr	r3, [pc, #256]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c980:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c982:	4b3d      	ldr	r3, [pc, #244]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c984:	220c      	movs	r2, #12
   9c986:	701a      	strb	r2, [r3, #0]

			break;
   9c988:	e041      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9c98a:	4b3c      	ldr	r3, [pc, #240]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c98c:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c98e:	4b35      	ldr	r3, [pc, #212]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c990:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c992:	4b3b      	ldr	r3, [pc, #236]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c994:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c996:	4b38      	ldr	r3, [pc, #224]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c998:	220c      	movs	r2, #12
   9c99a:	701a      	strb	r2, [r3, #0]

			break;
   9c99c:	e037      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9c99e:	4b37      	ldr	r3, [pc, #220]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c9a0:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c9a2:	4b30      	ldr	r3, [pc, #192]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c9a4:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c9a6:	4b36      	ldr	r3, [pc, #216]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c9a8:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c9aa:	4b33      	ldr	r3, [pc, #204]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c9ac:	220c      	movs	r2, #12
   9c9ae:	701a      	strb	r2, [r3, #0]

			break;
   9c9b0:	e02d      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case 	PS1_HIGH_THRESHOLD:
			case	PS1_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9c9b2:	4b32      	ldr	r3, [pc, #200]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c9b4:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c9b6:	4b2b      	ldr	r3, [pc, #172]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c9b8:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c9ba:	4b31      	ldr	r3, [pc, #196]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c9bc:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c9be:	4b2e      	ldr	r3, [pc, #184]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c9c0:	220c      	movs	r2, #12
   9c9c2:	701a      	strb	r2, [r3, #0]
			break;
   9c9c4:	e023      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case 	PS2_HIGH_THRESHOLD:
			case	PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9c9c6:	4b2d      	ldr	r3, [pc, #180]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c9c8:	4798      	blx	r3
				sv_cntrl_buzzer();
   9c9ca:	4b26      	ldr	r3, [pc, #152]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c9cc:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9c9ce:	4b2c      	ldr	r3, [pc, #176]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c9d0:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c9d2:	4b29      	ldr	r3, [pc, #164]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c9d4:	220c      	movs	r2, #12
   9c9d6:	701a      	strb	r2, [r3, #0]
			break;
   9c9d8:	e019      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9c9da:	4b28      	ldr	r3, [pc, #160]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c9dc:	4798      	blx	r3
				sv_cntrl_buzzer();
   9c9de:	4b21      	ldr	r3, [pc, #132]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c9e0:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9c9e2:	4b27      	ldr	r3, [pc, #156]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c9e4:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c9e6:	4b24      	ldr	r3, [pc, #144]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c9e8:	220c      	movs	r2, #12
   9c9ea:	701a      	strb	r2, [r3, #0]
			break;
   9c9ec:	e00f      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			sv_cntrl_setyellowalarm();
   9c9ee:	4b23      	ldr	r3, [pc, #140]	; (9ca7c <CL_DrepAlarmActon+0x2b4>)
   9c9f0:	4798      	blx	r3
			sv_cntrl_buzzer();
   9c9f2:	4b1c      	ldr	r3, [pc, #112]	; (9ca64 <CL_DrepAlarmActon+0x29c>)
   9c9f4:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9c9f6:	4b22      	ldr	r3, [pc, #136]	; (9ca80 <CL_DrepAlarmActon+0x2b8>)
   9c9f8:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9c9fa:	4b1f      	ldr	r3, [pc, #124]	; (9ca78 <CL_DrepAlarmActon+0x2b0>)
   9c9fc:	220c      	movs	r2, #12
   9c9fe:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;	
   9ca00:	e005      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			break;
			case VPTSTATUS_HIGH:
						// Cl_Dprep_Stoppreparation();
			break;
			default:
			cl_dprepalarmid = _NO_ALARM;
   9ca02:	2300      	movs	r3, #0
   9ca04:	71fb      	strb	r3, [r7, #7]
			break;
   9ca06:	e002      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
			//enterl_saferinse_state();
			break;	
			
			case APTSTATUS_HIGH:
						// Cl_Dprep_Stoppreparation();
			break;
   9ca08:	bf00      	nop
   9ca0a:	e000      	b.n	9ca0e <CL_DrepAlarmActon+0x246>
				{	
				
					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				}
				//
			break;
   9ca0c:	bf00      	nop
			break;
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   9ca0e:	79fb      	ldrb	r3, [r7, #7]
   9ca10:	2b00      	cmp	r3, #0
   9ca12:	d01f      	beq.n	9ca54 <CL_DrepAlarmActon+0x28c>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   9ca14:	79fb      	ldrb	r3, [r7, #7]
   9ca16:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9ca18:	2301      	movs	r3, #1
   9ca1a:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   9ca1c:	2302      	movs	r3, #2
   9ca1e:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   9ca20:	2307      	movs	r3, #7
   9ca22:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   9ca24:	f107 0108 	add.w	r1, r7, #8
   9ca28:	7bbb      	ldrb	r3, [r7, #14]
   9ca2a:	2203      	movs	r2, #3
   9ca2c:	4618      	mov	r0, r3
   9ca2e:	4b15      	ldr	r3, [pc, #84]	; (9ca84 <CL_DrepAlarmActon+0x2bc>)
   9ca30:	4798      	blx	r3
   9ca32:	4603      	mov	r3, r0
   9ca34:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   9ca36:	232b      	movs	r3, #43	; 0x2b
   9ca38:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   9ca3a:	2302      	movs	r3, #2
   9ca3c:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   9ca3e:	2300      	movs	r3, #0
   9ca40:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   9ca42:	f107 0108 	add.w	r1, r7, #8
   9ca46:	7bbb      	ldrb	r3, [r7, #14]
   9ca48:	2202      	movs	r2, #2
   9ca4a:	4618      	mov	r0, r3
   9ca4c:	4b0d      	ldr	r3, [pc, #52]	; (9ca84 <CL_DrepAlarmActon+0x2bc>)
   9ca4e:	4798      	blx	r3
   9ca50:	4603      	mov	r3, r0
   9ca52:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   9ca54:	2300      	movs	r3, #0
}
   9ca56:	4618      	mov	r0, r3
   9ca58:	3718      	adds	r7, #24
   9ca5a:	46bd      	mov	sp, r7
   9ca5c:	bd80      	pop	{r7, pc}
   9ca5e:	bf00      	nop
   9ca60:	00096ad5 	.word	0x00096ad5
   9ca64:	00096b11 	.word	0x00096b11
   9ca68:	00091c25 	.word	0x00091c25
   9ca6c:	00096a29 	.word	0x00096a29
   9ca70:	200727d0 	.word	0x200727d0
   9ca74:	0008896d 	.word	0x0008896d
   9ca78:	200727cf 	.word	0x200727cf
   9ca7c:	00096ae9 	.word	0x00096ae9
   9ca80:	0009d551 	.word	0x0009d551
   9ca84:	00098601 	.word	0x00098601

0009ca88 <Cl_dprepSendAlarm>:
	
	

Cl_ReturnCodeType  Cl_dprepSendAlarm(Cl_NewAlarmIdType cl_dprepalarmId )
{
   9ca88:	b580      	push	{r7, lr}
   9ca8a:	b086      	sub	sp, #24
   9ca8c:	af00      	add	r7, sp, #0
   9ca8e:	4603      	mov	r3, r0
   9ca90:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   9ca92:	2300      	movs	r3, #0
   9ca94:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9ca96:	f107 030c 	add.w	r3, r7, #12
   9ca9a:	2100      	movs	r1, #0
   9ca9c:	460a      	mov	r2, r1
   9ca9e:	801a      	strh	r2, [r3, #0]
   9caa0:	460a      	mov	r2, r1
   9caa2:	709a      	strb	r2, [r3, #2]
   9caa4:	2300      	movs	r3, #0
   9caa6:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9caa8:	234a      	movs	r3, #74	; 0x4a
   9caaa:	73fb      	strb	r3, [r7, #15]
			if(cl_dprepalarmId != _NO_ALARM)
   9caac:	79fb      	ldrb	r3, [r7, #7]
   9caae:	2b00      	cmp	r3, #0
   9cab0:	d013      	beq.n	9cada <Cl_dprepSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_dprepalarmId;
   9cab2:	79fb      	ldrb	r3, [r7, #7]
   9cab4:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9cab6:	2301      	movs	r3, #1
   9cab8:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   9caba:	2302      	movs	r3, #2
   9cabc:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   9cabe:	2307      	movs	r3, #7
   9cac0:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   9cac2:	f107 010c 	add.w	r1, r7, #12
   9cac6:	7bfb      	ldrb	r3, [r7, #15]
   9cac8:	2203      	movs	r2, #3
   9caca:	4618      	mov	r0, r3
   9cacc:	4b05      	ldr	r3, [pc, #20]	; (9cae4 <Cl_dprepSendAlarm+0x5c>)
   9cace:	4798      	blx	r3
   9cad0:	4603      	mov	r3, r0
   9cad2:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   9cad4:	200a      	movs	r0, #10
   9cad6:	4b04      	ldr	r3, [pc, #16]	; (9cae8 <Cl_dprepSendAlarm+0x60>)
   9cad8:	4798      	blx	r3

			 }
}	
   9cada:	bf00      	nop
   9cadc:	4618      	mov	r0, r3
   9cade:	3718      	adds	r7, #24
   9cae0:	46bd      	mov	sp, r7
   9cae2:	bd80      	pop	{r7, pc}
   9cae4:	00098601 	.word	0x00098601
   9cae8:	00091b9d 	.word	0x00091b9d
   9caec:	00000000 	.word	0x00000000

0009caf0 <Cl_Dprep_CheckforfillingCompletion>:
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   9caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   9caf2:	b087      	sub	sp, #28
   9caf4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   9caf6:	2304      	movs	r3, #4
   9caf8:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   9cafa:	2202      	movs	r2, #2
   9cafc:	498c      	ldr	r1, [pc, #560]	; (9cd30 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   9cafe:	2019      	movs	r0, #25
   9cb00:	4b8c      	ldr	r3, [pc, #560]	; (9cd34 <Cl_Dprep_CheckforfillingCompletion+0x244>)
   9cb02:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   9cb04:	4b8a      	ldr	r3, [pc, #552]	; (9cd30 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   9cb06:	f9b3 3000 	ldrsh.w	r3, [r3]
   9cb0a:	2b06      	cmp	r3, #6
   9cb0c:	dd04      	ble.n	9cb18 <Cl_Dprep_CheckforfillingCompletion+0x28>
		{
			
			Cl_dprepretcode = CL_REJECTED;
   9cb0e:	2303      	movs	r3, #3
   9cb10:	75fb      	strb	r3, [r7, #23]
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   9cb12:	2300      	movs	r3, #0
   9cb14:	75fb      	strb	r3, [r7, #23]
   9cb16:	e0e4      	b.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   9cb18:	463b      	mov	r3, r7
   9cb1a:	4619      	mov	r1, r3
   9cb1c:	2014      	movs	r0, #20
   9cb1e:	4b86      	ldr	r3, [pc, #536]	; (9cd38 <Cl_Dprep_CheckforfillingCompletion+0x248>)
   9cb20:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   9cb22:	1cbb      	adds	r3, r7, #2
   9cb24:	4619      	mov	r1, r3
   9cb26:	2007      	movs	r0, #7
   9cb28:	4b83      	ldr	r3, [pc, #524]	; (9cd38 <Cl_Dprep_CheckforfillingCompletion+0x248>)
   9cb2a:	4798      	blx	r3
			
			
			uint16_t cal_data  = (402 *100* cl_temp3)/(2*32768);
   9cb2c:	f9b7 3000 	ldrsh.w	r3, [r7]
   9cb30:	461a      	mov	r2, r3
   9cb32:	f649 5308 	movw	r3, #40200	; 0x9d08
   9cb36:	fb03 f302 	mul.w	r3, r3, r2
   9cb3a:	2b00      	cmp	r3, #0
   9cb3c:	da02      	bge.n	9cb44 <Cl_Dprep_CheckforfillingCompletion+0x54>
   9cb3e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cb42:	33ff      	adds	r3, #255	; 0xff
   9cb44:	141b      	asrs	r3, r3, #16
   9cb46:	82bb      	strh	r3, [r7, #20]
			res_temp_lookuptable(cal_data);
   9cb48:	8abb      	ldrh	r3, [r7, #20]
   9cb4a:	4618      	mov	r0, r3
   9cb4c:	4b7b      	ldr	r3, [pc, #492]	; (9cd3c <Cl_Dprep_CheckforfillingCompletion+0x24c>)
   9cb4e:	4798      	blx	r3
			float temp = res_temp_value/100;
   9cb50:	4b7b      	ldr	r3, [pc, #492]	; (9cd40 <Cl_Dprep_CheckforfillingCompletion+0x250>)
   9cb52:	681a      	ldr	r2, [r3, #0]
   9cb54:	4b7b      	ldr	r3, [pc, #492]	; (9cd44 <Cl_Dprep_CheckforfillingCompletion+0x254>)
   9cb56:	497c      	ldr	r1, [pc, #496]	; (9cd48 <Cl_Dprep_CheckforfillingCompletion+0x258>)
   9cb58:	4610      	mov	r0, r2
   9cb5a:	4798      	blx	r3
   9cb5c:	4603      	mov	r3, r0
   9cb5e:	613b      	str	r3, [r7, #16]
			cl_temp3_cel = temp - 3.1 + 1.4;										// sensor offset 
   9cb60:	4b7a      	ldr	r3, [pc, #488]	; (9cd4c <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9cb62:	6938      	ldr	r0, [r7, #16]
   9cb64:	4798      	blx	r3
   9cb66:	4c7a      	ldr	r4, [pc, #488]	; (9cd50 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9cb68:	a361      	add	r3, pc, #388	; (adr r3, 9ccf0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   9cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cb6e:	47a0      	blx	r4
   9cb70:	4603      	mov	r3, r0
   9cb72:	460c      	mov	r4, r1
   9cb74:	4618      	mov	r0, r3
   9cb76:	4621      	mov	r1, r4
   9cb78:	4c76      	ldr	r4, [pc, #472]	; (9cd54 <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9cb7a:	a35f      	add	r3, pc, #380	; (adr r3, 9ccf8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cb80:	47a0      	blx	r4
   9cb82:	4603      	mov	r3, r0
   9cb84:	460c      	mov	r4, r1
   9cb86:	4619      	mov	r1, r3
   9cb88:	4622      	mov	r2, r4
   9cb8a:	4b73      	ldr	r3, [pc, #460]	; (9cd58 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9cb8c:	4608      	mov	r0, r1
   9cb8e:	4611      	mov	r1, r2
   9cb90:	4798      	blx	r3
   9cb92:	4603      	mov	r3, r0
   9cb94:	60fb      	str	r3, [r7, #12]
			
							
			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   9cb96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9cb9a:	4b70      	ldr	r3, [pc, #448]	; (9cd5c <Cl_Dprep_CheckforfillingCompletion+0x26c>)
   9cb9c:	4610      	mov	r0, r2
   9cb9e:	4798      	blx	r3
   9cba0:	4c6f      	ldr	r4, [pc, #444]	; (9cd60 <Cl_Dprep_CheckforfillingCompletion+0x270>)
   9cba2:	a357      	add	r3, pc, #348	; (adr r3, 9cd00 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   9cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cba8:	47a0      	blx	r4
   9cbaa:	4603      	mov	r3, r0
   9cbac:	460c      	mov	r4, r1
   9cbae:	461d      	mov	r5, r3
   9cbb0:	4626      	mov	r6, r4
   9cbb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9cbb6:	4b69      	ldr	r3, [pc, #420]	; (9cd5c <Cl_Dprep_CheckforfillingCompletion+0x26c>)
   9cbb8:	4610      	mov	r0, r2
   9cbba:	4798      	blx	r3
   9cbbc:	4602      	mov	r2, r0
   9cbbe:	460b      	mov	r3, r1
   9cbc0:	4c67      	ldr	r4, [pc, #412]	; (9cd60 <Cl_Dprep_CheckforfillingCompletion+0x270>)
   9cbc2:	4628      	mov	r0, r5
   9cbc4:	4631      	mov	r1, r6
   9cbc6:	47a0      	blx	r4
   9cbc8:	4603      	mov	r3, r0
   9cbca:	460c      	mov	r4, r1
   9cbcc:	461d      	mov	r5, r3
   9cbce:	4626      	mov	r6, r4
   9cbd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   9cbd4:	4b61      	ldr	r3, [pc, #388]	; (9cd5c <Cl_Dprep_CheckforfillingCompletion+0x26c>)
   9cbd6:	4610      	mov	r0, r2
   9cbd8:	4798      	blx	r3
   9cbda:	4c61      	ldr	r4, [pc, #388]	; (9cd60 <Cl_Dprep_CheckforfillingCompletion+0x270>)
   9cbdc:	a34a      	add	r3, pc, #296	; (adr r3, 9cd08 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   9cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cbe2:	47a0      	blx	r4
   9cbe4:	4603      	mov	r3, r0
   9cbe6:	460c      	mov	r4, r1
   9cbe8:	461a      	mov	r2, r3
   9cbea:	4623      	mov	r3, r4
   9cbec:	4c59      	ldr	r4, [pc, #356]	; (9cd54 <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9cbee:	4628      	mov	r0, r5
   9cbf0:	4631      	mov	r1, r6
   9cbf2:	47a0      	blx	r4
   9cbf4:	4603      	mov	r3, r0
   9cbf6:	460c      	mov	r4, r1
   9cbf8:	4618      	mov	r0, r3
   9cbfa:	4621      	mov	r1, r4
   9cbfc:	4c54      	ldr	r4, [pc, #336]	; (9cd50 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9cbfe:	a344      	add	r3, pc, #272	; (adr r3, 9cd10 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   9cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cc04:	47a0      	blx	r4
   9cc06:	4603      	mov	r3, r0
   9cc08:	460c      	mov	r4, r1
   9cc0a:	4619      	mov	r1, r3
   9cc0c:	4622      	mov	r2, r4
   9cc0e:	4b52      	ldr	r3, [pc, #328]	; (9cd58 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9cc10:	4608      	mov	r0, r1
   9cc12:	4611      	mov	r1, r2
   9cc14:	4798      	blx	r3
   9cc16:	4603      	mov	r3, r0
   9cc18:	60bb      	str	r3, [r7, #8]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   9cc1a:	4b4c      	ldr	r3, [pc, #304]	; (9cd4c <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9cc1c:	68b8      	ldr	r0, [r7, #8]
   9cc1e:	4798      	blx	r3
   9cc20:	4605      	mov	r5, r0
   9cc22:	460e      	mov	r6, r1
   9cc24:	4b49      	ldr	r3, [pc, #292]	; (9cd4c <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9cc26:	68f8      	ldr	r0, [r7, #12]
   9cc28:	4798      	blx	r3
   9cc2a:	4c49      	ldr	r4, [pc, #292]	; (9cd50 <Cl_Dprep_CheckforfillingCompletion+0x260>)
   9cc2c:	f04f 0200 	mov.w	r2, #0
   9cc30:	4b4c      	ldr	r3, [pc, #304]	; (9cd64 <Cl_Dprep_CheckforfillingCompletion+0x274>)
   9cc32:	47a0      	blx	r4
   9cc34:	4603      	mov	r3, r0
   9cc36:	460c      	mov	r4, r1
   9cc38:	4618      	mov	r0, r3
   9cc3a:	4621      	mov	r1, r4
   9cc3c:	4c48      	ldr	r4, [pc, #288]	; (9cd60 <Cl_Dprep_CheckforfillingCompletion+0x270>)
   9cc3e:	a336      	add	r3, pc, #216	; (adr r3, 9cd18 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   9cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cc44:	47a0      	blx	r4
   9cc46:	4603      	mov	r3, r0
   9cc48:	460c      	mov	r4, r1
   9cc4a:	4618      	mov	r0, r3
   9cc4c:	4621      	mov	r1, r4
   9cc4e:	4c41      	ldr	r4, [pc, #260]	; (9cd54 <Cl_Dprep_CheckforfillingCompletion+0x264>)
   9cc50:	f04f 0200 	mov.w	r2, #0
   9cc54:	4b44      	ldr	r3, [pc, #272]	; (9cd68 <Cl_Dprep_CheckforfillingCompletion+0x278>)
   9cc56:	47a0      	blx	r4
   9cc58:	4603      	mov	r3, r0
   9cc5a:	460c      	mov	r4, r1
   9cc5c:	461a      	mov	r2, r3
   9cc5e:	4623      	mov	r3, r4
   9cc60:	4c42      	ldr	r4, [pc, #264]	; (9cd6c <Cl_Dprep_CheckforfillingCompletion+0x27c>)
   9cc62:	4628      	mov	r0, r5
   9cc64:	4631      	mov	r1, r6
   9cc66:	47a0      	blx	r4
   9cc68:	4603      	mov	r3, r0
   9cc6a:	460c      	mov	r4, r1
   9cc6c:	4618      	mov	r0, r3
   9cc6e:	4621      	mov	r1, r4
   9cc70:	4c3e      	ldr	r4, [pc, #248]	; (9cd6c <Cl_Dprep_CheckforfillingCompletion+0x27c>)
   9cc72:	f04f 0200 	mov.w	r2, #0
   9cc76:	4b3e      	ldr	r3, [pc, #248]	; (9cd70 <Cl_Dprep_CheckforfillingCompletion+0x280>)
   9cc78:	47a0      	blx	r4
   9cc7a:	4603      	mov	r3, r0
   9cc7c:	460c      	mov	r4, r1
   9cc7e:	4619      	mov	r1, r3
   9cc80:	4622      	mov	r2, r4
   9cc82:	4b35      	ldr	r3, [pc, #212]	; (9cd58 <Cl_Dprep_CheckforfillingCompletion+0x268>)
   9cc84:	4608      	mov	r0, r1
   9cc86:	4611      	mov	r1, r2
   9cc88:	4798      	blx	r3
   9cc8a:	4603      	mov	r3, r0
   9cc8c:	607b      	str	r3, [r7, #4]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   9cc8e:	4b2f      	ldr	r3, [pc, #188]	; (9cd4c <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9cc90:	6878      	ldr	r0, [r7, #4]
   9cc92:	4798      	blx	r3
   9cc94:	4c37      	ldr	r4, [pc, #220]	; (9cd74 <Cl_Dprep_CheckforfillingCompletion+0x284>)
   9cc96:	a322      	add	r3, pc, #136	; (adr r3, 9cd20 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   9cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cc9c:	47a0      	blx	r4
   9cc9e:	4603      	mov	r3, r0
   9cca0:	2b00      	cmp	r3, #0
   9cca2:	d01e      	beq.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
   9cca4:	4b29      	ldr	r3, [pc, #164]	; (9cd4c <Cl_Dprep_CheckforfillingCompletion+0x25c>)
   9cca6:	6878      	ldr	r0, [r7, #4]
   9cca8:	4798      	blx	r3
   9ccaa:	4c33      	ldr	r4, [pc, #204]	; (9cd78 <Cl_Dprep_CheckforfillingCompletion+0x288>)
   9ccac:	a31e      	add	r3, pc, #120	; (adr r3, 9cd28 <Cl_Dprep_CheckforfillingCompletion+0x238>)
   9ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ccb2:	47a0      	blx	r4
   9ccb4:	4603      	mov	r3, r0
   9ccb6:	2b00      	cmp	r3, #0
   9ccb8:	d013      	beq.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   9ccba:	4b30      	ldr	r3, [pc, #192]	; (9cd7c <Cl_Dprep_CheckforfillingCompletion+0x28c>)
   9ccbc:	4930      	ldr	r1, [pc, #192]	; (9cd80 <Cl_Dprep_CheckforfillingCompletion+0x290>)
   9ccbe:	68f8      	ldr	r0, [r7, #12]
   9ccc0:	4798      	blx	r3
   9ccc2:	4603      	mov	r3, r0
   9ccc4:	2b00      	cmp	r3, #0
   9ccc6:	d00c      	beq.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
   9ccc8:	4b2e      	ldr	r3, [pc, #184]	; (9cd84 <Cl_Dprep_CheckforfillingCompletion+0x294>)
   9ccca:	492f      	ldr	r1, [pc, #188]	; (9cd88 <Cl_Dprep_CheckforfillingCompletion+0x298>)
   9cccc:	68f8      	ldr	r0, [r7, #12]
   9ccce:	4798      	blx	r3
   9ccd0:	4603      	mov	r3, r0
   9ccd2:	2b00      	cmp	r3, #0
   9ccd4:	d005      	beq.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
				{
					if(cl_temp3_stable_confirm == true)
   9ccd6:	4b2d      	ldr	r3, [pc, #180]	; (9cd8c <Cl_Dprep_CheckforfillingCompletion+0x29c>)
   9ccd8:	781b      	ldrb	r3, [r3, #0]
   9ccda:	2b00      	cmp	r3, #0
   9ccdc:	d001      	beq.n	9cce2 <Cl_Dprep_CheckforfillingCompletion+0x1f2>
							Cl_dprepretcode = CL_OK;
   9ccde:	2300      	movs	r3, #0
   9cce0:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   9cce2:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   9cce4:	4618      	mov	r0, r3
   9cce6:	371c      	adds	r7, #28
   9cce8:	46bd      	mov	sp, r7
   9ccea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9ccec:	f3af 8000 	nop.w
   9ccf0:	cccccccd 	.word	0xcccccccd
   9ccf4:	4008cccc 	.word	0x4008cccc
   9ccf8:	66666666 	.word	0x66666666
   9ccfc:	3ff66666 	.word	0x3ff66666
   9cd00:	eb1c432d 	.word	0xeb1c432d
   9cd04:	bf1a36e2 	.word	0xbf1a36e2
   9cd08:	70a3d70a 	.word	0x70a3d70a
   9cd0c:	3fd70a3d 	.word	0x3fd70a3d
   9cd10:	851eb852 	.word	0x851eb852
   9cd14:	404331eb 	.word	0x404331eb
   9cd18:	47ae147b 	.word	0x47ae147b
   9cd1c:	3f947ae1 	.word	0x3f947ae1
   9cd20:	9999999a 	.word	0x9999999a
   9cd24:	402a9999 	.word	0x402a9999
   9cd28:	9999999a 	.word	0x9999999a
   9cd2c:	402b9999 	.word	0x402b9999
   9cd30:	200727b2 	.word	0x200727b2
   9cd34:	00098601 	.word	0x00098601
   9cd38:	0008d499 	.word	0x0008d499
   9cd3c:	0008e659 	.word	0x0008e659
   9cd40:	200725ec 	.word	0x200725ec
   9cd44:	000a27f5 	.word	0x000a27f5
   9cd48:	42c80000 	.word	0x42c80000
   9cd4c:	000a1d65 	.word	0x000a1d65
   9cd50:	000a1aa5 	.word	0x000a1aa5
   9cd54:	000a1aa9 	.word	0x000a1aa9
   9cd58:	000a23d1 	.word	0x000a23d1
   9cd5c:	000a1d41 	.word	0x000a1d41
   9cd60:	000a1e0d 	.word	0x000a1e0d
   9cd64:	40390000 	.word	0x40390000
   9cd68:	3ff00000 	.word	0x3ff00000
   9cd6c:	000a2061 	.word	0x000a2061
   9cd70:	40240000 	.word	0x40240000
   9cd74:	000a232d 	.word	0x000a232d
   9cd78:	000a22f1 	.word	0x000a22f1
   9cd7c:	000a2a05 	.word	0x000a2a05
   9cd80:	42120000 	.word	0x42120000
   9cd84:	000a29c9 	.word	0x000a29c9
   9cd88:	42160000 	.word	0x42160000
   9cd8c:	200727c8 	.word	0x200727c8

0009cd90 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   9cd90:	b580      	push	{r7, lr}
   9cd92:	b082      	sub	sp, #8
   9cd94:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   9cd96:	2300      	movs	r3, #0
   9cd98:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   9cd9a:	2012      	movs	r0, #18
   9cd9c:	4b03      	ldr	r3, [pc, #12]	; (9cdac <Cl_DprepSelectDialysateInlet+0x1c>)
   9cd9e:	4798      	blx	r3
		return Cl_RetVal;
   9cda0:	79fb      	ldrb	r3, [r7, #7]
	}
   9cda2:	4618      	mov	r0, r3
   9cda4:	3708      	adds	r7, #8
   9cda6:	46bd      	mov	sp, r7
   9cda8:	bd80      	pop	{r7, pc}
   9cdaa:	bf00      	nop
   9cdac:	0009687d 	.word	0x0009687d

0009cdb0 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   9cdb0:	b480      	push	{r7}
   9cdb2:	b083      	sub	sp, #12
   9cdb4:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9cdb6:	2300      	movs	r3, #0
   9cdb8:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   9cdba:	4b0d      	ldr	r3, [pc, #52]	; (9cdf0 <UpdateDprepFillingMinuteTick+0x40>)
   9cdbc:	2200      	movs	r2, #0
   9cdbe:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   9cdc0:	4b0c      	ldr	r3, [pc, #48]	; (9cdf4 <UpdateDprepFillingMinuteTick+0x44>)
   9cdc2:	f9b3 3000 	ldrsh.w	r3, [r3]
   9cdc6:	b29b      	uxth	r3, r3
   9cdc8:	3301      	adds	r3, #1
   9cdca:	b29b      	uxth	r3, r3
   9cdcc:	b21a      	sxth	r2, r3
   9cdce:	4b09      	ldr	r3, [pc, #36]	; (9cdf4 <UpdateDprepFillingMinuteTick+0x44>)
   9cdd0:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   9cdd2:	4b09      	ldr	r3, [pc, #36]	; (9cdf8 <UpdateDprepFillingMinuteTick+0x48>)
   9cdd4:	f9b3 3000 	ldrsh.w	r3, [r3]
   9cdd8:	b29b      	uxth	r3, r3
   9cdda:	3301      	adds	r3, #1
   9cddc:	b29b      	uxth	r3, r3
   9cdde:	b21a      	sxth	r2, r3
   9cde0:	4b05      	ldr	r3, [pc, #20]	; (9cdf8 <UpdateDprepFillingMinuteTick+0x48>)
   9cde2:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   9cde4:	79fb      	ldrb	r3, [r7, #7]
					

}
   9cde6:	4618      	mov	r0, r3
   9cde8:	370c      	adds	r7, #12
   9cdea:	46bd      	mov	sp, r7
   9cdec:	bc80      	pop	{r7}
   9cdee:	4770      	bx	lr
   9cdf0:	200727ae 	.word	0x200727ae
   9cdf4:	200727b0 	.word	0x200727b0
   9cdf8:	200727b2 	.word	0x200727b2

0009cdfc <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   9cdfc:	b580      	push	{r7, lr}
   9cdfe:	b082      	sub	sp, #8
   9ce00:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9ce02:	2300      	movs	r3, #0
   9ce04:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9ce06:	4b0f      	ldr	r3, [pc, #60]	; (9ce44 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   9ce08:	2200      	movs	r2, #0
   9ce0a:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   9ce0c:	4b0e      	ldr	r3, [pc, #56]	; (9ce48 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9ce0e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ce12:	b29b      	uxth	r3, r3
   9ce14:	3301      	adds	r3, #1
   9ce16:	b29b      	uxth	r3, r3
   9ce18:	b21a      	sxth	r2, r3
   9ce1a:	4b0b      	ldr	r3, [pc, #44]	; (9ce48 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9ce1c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   9ce1e:	4b0b      	ldr	r3, [pc, #44]	; (9ce4c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9ce20:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ce24:	b29b      	uxth	r3, r3
   9ce26:	3301      	adds	r3, #1
   9ce28:	b29b      	uxth	r3, r3
   9ce2a:	b21a      	sxth	r2, r3
   9ce2c:	4b07      	ldr	r3, [pc, #28]	; (9ce4c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9ce2e:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   9ce30:	4b07      	ldr	r3, [pc, #28]	; (9ce50 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   9ce32:	4798      	blx	r3
   9ce34:	4603      	mov	r3, r0
   9ce36:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   9ce38:	79fb      	ldrb	r3, [r7, #7]
	

}
   9ce3a:	4618      	mov	r0, r3
   9ce3c:	3708      	adds	r7, #8
   9ce3e:	46bd      	mov	sp, r7
   9ce40:	bd80      	pop	{r7, pc}
   9ce42:	bf00      	nop
   9ce44:	200727ba 	.word	0x200727ba
   9ce48:	200727bc 	.word	0x200727bc
   9ce4c:	200727be 	.word	0x200727be
   9ce50:	00089355 	.word	0x00089355
   9ce54:	00000000 	.word	0x00000000

0009ce58 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   9ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
   9ce5a:	b09b      	sub	sp, #108	; 0x6c
   9ce5c:	af00      	add	r7, sp, #0
   9ce5e:	4603      	mov	r3, r0
   9ce60:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9ce62:	f107 0318 	add.w	r3, r7, #24
   9ce66:	2228      	movs	r2, #40	; 0x28
   9ce68:	2100      	movs	r1, #0
   9ce6a:	4618      	mov	r0, r3
   9ce6c:	4bb0      	ldr	r3, [pc, #704]	; (9d130 <Cl_Dprep_SendPrepStateData+0x2d8>)
   9ce6e:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0;
   9ce70:	2300      	movs	r3, #0
   9ce72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   9ce76:	2300      	movs	r3, #0
   9ce78:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
   9ce7c:	2300      	movs	r3, #0
   9ce7e:	81fb      	strh	r3, [r7, #14]
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0,apt=0,vpt=0,TMP =0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9ce80:	2300      	movs	r3, #0
   9ce82:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	Cl_Uint8Type count = 0;
   9ce86:	2300      	movs	r3, #0
   9ce88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ce8c:	234a      	movs	r3, #74	; 0x4a
   9ce8e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	
	
	


					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   9ce92:	232a      	movs	r3, #42	; 0x2a
   9ce94:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
					systemdataarray[0] = datatype;
   9ce98:	79fb      	ldrb	r3, [r7, #7]
   9ce9a:	763b      	strb	r3, [r7, #24]
					count++;
   9ce9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9cea0:	3301      	adds	r3, #1
   9cea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   9cea6:	f107 030e 	add.w	r3, r7, #14
   9ceaa:	4619      	mov	r1, r3
   9ceac:	2014      	movs	r0, #20
   9ceae:	4ba1      	ldr	r3, [pc, #644]	; (9d134 <Cl_Dprep_SendPrepStateData+0x2dc>)
   9ceb0:	4798      	blx	r3
						{
							
							float ftemp,ftemp1,temp1;

							uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   9ceb2:	89fb      	ldrh	r3, [r7, #14]
   9ceb4:	461a      	mov	r2, r3
   9ceb6:	f649 5308 	movw	r3, #40200	; 0x9d08
   9ceba:	fb03 f302 	mul.w	r3, r3, r2
   9cebe:	2b00      	cmp	r3, #0
   9cec0:	da02      	bge.n	9cec8 <Cl_Dprep_SendPrepStateData+0x70>
   9cec2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cec6:	33ff      	adds	r3, #255	; 0xff
   9cec8:	141b      	asrs	r3, r3, #16
   9ceca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
							res_temp_lookuptable(cal_data);
   9cece:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   9ced2:	4618      	mov	r0, r3
   9ced4:	4b98      	ldr	r3, [pc, #608]	; (9d138 <Cl_Dprep_SendPrepStateData+0x2e0>)
   9ced6:	4798      	blx	r3
							uint16_t temp = res_temp_value/10;
   9ced8:	4b98      	ldr	r3, [pc, #608]	; (9d13c <Cl_Dprep_SendPrepStateData+0x2e4>)
   9ceda:	681a      	ldr	r2, [r3, #0]
   9cedc:	4b98      	ldr	r3, [pc, #608]	; (9d140 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9cede:	4999      	ldr	r1, [pc, #612]	; (9d144 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9cee0:	4610      	mov	r0, r2
   9cee2:	4798      	blx	r3
   9cee4:	4603      	mov	r3, r0
   9cee6:	461a      	mov	r2, r3
   9cee8:	4b97      	ldr	r3, [pc, #604]	; (9d148 <Cl_Dprep_SendPrepStateData+0x2f0>)
   9ceea:	4610      	mov	r0, r2
   9ceec:	4798      	blx	r3
   9ceee:	4603      	mov	r3, r0
   9cef0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							temp = temp - 3.1 + 1.4;										// sensor offset 
   9cef4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9cef8:	4b94      	ldr	r3, [pc, #592]	; (9d14c <Cl_Dprep_SendPrepStateData+0x2f4>)
   9cefa:	4610      	mov	r0, r2
   9cefc:	4798      	blx	r3
   9cefe:	4c94      	ldr	r4, [pc, #592]	; (9d150 <Cl_Dprep_SendPrepStateData+0x2f8>)
   9cf00:	a37b      	add	r3, pc, #492	; (adr r3, 9d0f0 <Cl_Dprep_SendPrepStateData+0x298>)
   9cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cf06:	47a0      	blx	r4
   9cf08:	4603      	mov	r3, r0
   9cf0a:	460c      	mov	r4, r1
   9cf0c:	4618      	mov	r0, r3
   9cf0e:	4621      	mov	r1, r4
   9cf10:	4c90      	ldr	r4, [pc, #576]	; (9d154 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9cf12:	a379      	add	r3, pc, #484	; (adr r3, 9d0f8 <Cl_Dprep_SendPrepStateData+0x2a0>)
   9cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cf18:	47a0      	blx	r4
   9cf1a:	4603      	mov	r3, r0
   9cf1c:	460c      	mov	r4, r1
   9cf1e:	4619      	mov	r1, r3
   9cf20:	4622      	mov	r2, r4
   9cf22:	4b8d      	ldr	r3, [pc, #564]	; (9d158 <Cl_Dprep_SendPrepStateData+0x300>)
   9cf24:	4608      	mov	r0, r1
   9cf26:	4611      	mov	r1, r2
   9cf28:	4798      	blx	r3
   9cf2a:	4603      	mov	r3, r0
   9cf2c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							tmp3 =(tmp3*5 + temp)/6;
   9cf30:	4b8a      	ldr	r3, [pc, #552]	; (9d15c <Cl_Dprep_SendPrepStateData+0x304>)
   9cf32:	681a      	ldr	r2, [r3, #0]
   9cf34:	4b8a      	ldr	r3, [pc, #552]	; (9d160 <Cl_Dprep_SendPrepStateData+0x308>)
   9cf36:	498b      	ldr	r1, [pc, #556]	; (9d164 <Cl_Dprep_SendPrepStateData+0x30c>)
   9cf38:	4610      	mov	r0, r2
   9cf3a:	4798      	blx	r3
   9cf3c:	4603      	mov	r3, r0
   9cf3e:	461c      	mov	r4, r3
   9cf40:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9cf44:	4b88      	ldr	r3, [pc, #544]	; (9d168 <Cl_Dprep_SendPrepStateData+0x310>)
   9cf46:	4610      	mov	r0, r2
   9cf48:	4798      	blx	r3
   9cf4a:	4602      	mov	r2, r0
   9cf4c:	4b87      	ldr	r3, [pc, #540]	; (9d16c <Cl_Dprep_SendPrepStateData+0x314>)
   9cf4e:	4611      	mov	r1, r2
   9cf50:	4620      	mov	r0, r4
   9cf52:	4798      	blx	r3
   9cf54:	4603      	mov	r3, r0
   9cf56:	461a      	mov	r2, r3
   9cf58:	4b79      	ldr	r3, [pc, #484]	; (9d140 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9cf5a:	4985      	ldr	r1, [pc, #532]	; (9d170 <Cl_Dprep_SendPrepStateData+0x318>)
   9cf5c:	4610      	mov	r0, r2
   9cf5e:	4798      	blx	r3
   9cf60:	4603      	mov	r3, r0
   9cf62:	461a      	mov	r2, r3
   9cf64:	4b7d      	ldr	r3, [pc, #500]	; (9d15c <Cl_Dprep_SendPrepStateData+0x304>)
   9cf66:	601a      	str	r2, [r3, #0]

							
						}
						
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   9cf68:	f107 030e 	add.w	r3, r7, #14
   9cf6c:	4619      	mov	r1, r3
   9cf6e:	2007      	movs	r0, #7
   9cf70:	4b70      	ldr	r3, [pc, #448]	; (9d134 <Cl_Dprep_SendPrepStateData+0x2dc>)
   9cf72:	4798      	blx	r3
					{
					
						float cond_comp=0;
   9cf74:	f04f 0300 	mov.w	r3, #0
   9cf78:	65bb      	str	r3, [r7, #88]	; 0x58
						float temp2=0;
   9cf7a:	f04f 0300 	mov.w	r3, #0
   9cf7e:	657b      	str	r3, [r7, #84]	; 0x54
						float	 cond1,	cond_final, cond1x100, cond_final_X10000;
					//	temp2 = temp * 0.8036;
					sensordata = sensordata/10;
   9cf80:	89fb      	ldrh	r3, [r7, #14]
   9cf82:	4a7c      	ldr	r2, [pc, #496]	; (9d174 <Cl_Dprep_SendPrepStateData+0x31c>)
   9cf84:	fba2 2303 	umull	r2, r3, r2, r3
   9cf88:	08db      	lsrs	r3, r3, #3
   9cf8a:	b29b      	uxth	r3, r3
   9cf8c:	81fb      	strh	r3, [r7, #14]
						if (sensordata > 50)
   9cf8e:	89fb      	ldrh	r3, [r7, #14]
   9cf90:	2b32      	cmp	r3, #50	; 0x32
   9cf92:	f240 8130 	bls.w	9d1f6 <Cl_Dprep_SendPrepStateData+0x39e>
						//	cond =(cond*5 + cond_final_cs3)/6;
						
								
								//	sensordata  = 25600;
								
								cond1 = sensordata/100;
   9cf96:	89fb      	ldrh	r3, [r7, #14]
   9cf98:	4a77      	ldr	r2, [pc, #476]	; (9d178 <Cl_Dprep_SendPrepStateData+0x320>)
   9cf9a:	fba2 2303 	umull	r2, r3, r2, r3
   9cf9e:	095b      	lsrs	r3, r3, #5
   9cfa0:	b29b      	uxth	r3, r3
   9cfa2:	461a      	mov	r2, r3
   9cfa4:	4b70      	ldr	r3, [pc, #448]	; (9d168 <Cl_Dprep_SendPrepStateData+0x310>)
   9cfa6:	4610      	mov	r0, r2
   9cfa8:	4798      	blx	r3
   9cfaa:	4603      	mov	r3, r0
   9cfac:	653b      	str	r3, [r7, #80]	; 0x50
								cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   9cfae:	4b73      	ldr	r3, [pc, #460]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9cfb0:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9cfb2:	4798      	blx	r3
   9cfb4:	4c72      	ldr	r4, [pc, #456]	; (9d180 <Cl_Dprep_SendPrepStateData+0x328>)
   9cfb6:	a352      	add	r3, pc, #328	; (adr r3, 9d100 <Cl_Dprep_SendPrepStateData+0x2a8>)
   9cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cfbc:	47a0      	blx	r4
   9cfbe:	4603      	mov	r3, r0
   9cfc0:	460c      	mov	r4, r1
   9cfc2:	461d      	mov	r5, r3
   9cfc4:	4626      	mov	r6, r4
   9cfc6:	4b6d      	ldr	r3, [pc, #436]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9cfc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9cfca:	4798      	blx	r3
   9cfcc:	4602      	mov	r2, r0
   9cfce:	460b      	mov	r3, r1
   9cfd0:	4c6b      	ldr	r4, [pc, #428]	; (9d180 <Cl_Dprep_SendPrepStateData+0x328>)
   9cfd2:	4628      	mov	r0, r5
   9cfd4:	4631      	mov	r1, r6
   9cfd6:	47a0      	blx	r4
   9cfd8:	4603      	mov	r3, r0
   9cfda:	460c      	mov	r4, r1
   9cfdc:	461d      	mov	r5, r3
   9cfde:	4626      	mov	r6, r4
   9cfe0:	4b66      	ldr	r3, [pc, #408]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9cfe2:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9cfe4:	4798      	blx	r3
   9cfe6:	4c66      	ldr	r4, [pc, #408]	; (9d180 <Cl_Dprep_SendPrepStateData+0x328>)
   9cfe8:	a347      	add	r3, pc, #284	; (adr r3, 9d108 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cfee:	47a0      	blx	r4
   9cff0:	4603      	mov	r3, r0
   9cff2:	460c      	mov	r4, r1
   9cff4:	461a      	mov	r2, r3
   9cff6:	4623      	mov	r3, r4
   9cff8:	4c56      	ldr	r4, [pc, #344]	; (9d154 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9cffa:	4628      	mov	r0, r5
   9cffc:	4631      	mov	r1, r6
   9cffe:	47a0      	blx	r4
   9d000:	4603      	mov	r3, r0
   9d002:	460c      	mov	r4, r1
   9d004:	4618      	mov	r0, r3
   9d006:	4621      	mov	r1, r4
   9d008:	4c52      	ldr	r4, [pc, #328]	; (9d154 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9d00a:	a341      	add	r3, pc, #260	; (adr r3, 9d110 <Cl_Dprep_SendPrepStateData+0x2b8>)
   9d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d010:	47a0      	blx	r4
   9d012:	4603      	mov	r3, r0
   9d014:	460c      	mov	r4, r1
   9d016:	4618      	mov	r0, r3
   9d018:	4621      	mov	r1, r4
   9d01a:	4c4e      	ldr	r4, [pc, #312]	; (9d154 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9d01c:	a33e      	add	r3, pc, #248	; (adr r3, 9d118 <Cl_Dprep_SendPrepStateData+0x2c0>)
   9d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d022:	47a0      	blx	r4
   9d024:	4603      	mov	r3, r0
   9d026:	460c      	mov	r4, r1
   9d028:	4619      	mov	r1, r3
   9d02a:	4622      	mov	r2, r4
   9d02c:	4b55      	ldr	r3, [pc, #340]	; (9d184 <Cl_Dprep_SendPrepStateData+0x32c>)
   9d02e:	4608      	mov	r0, r1
   9d030:	4611      	mov	r1, r2
   9d032:	4798      	blx	r3
   9d034:	4603      	mov	r3, r0
   9d036:	64fb      	str	r3, [r7, #76]	; 0x4c
								cond1x100 = cond_final*100; ;
   9d038:	4b49      	ldr	r3, [pc, #292]	; (9d160 <Cl_Dprep_SendPrepStateData+0x308>)
   9d03a:	4953      	ldr	r1, [pc, #332]	; (9d188 <Cl_Dprep_SendPrepStateData+0x330>)
   9d03c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   9d03e:	4798      	blx	r3
   9d040:	4603      	mov	r3, r0
   9d042:	64bb      	str	r3, [r7, #72]	; 0x48
								cond_final_X10000= (cond1x100/(1+(tmp3/10  -25.0)*0.021));
   9d044:	4b4d      	ldr	r3, [pc, #308]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9d046:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   9d048:	4798      	blx	r3
   9d04a:	4605      	mov	r5, r0
   9d04c:	460e      	mov	r6, r1
   9d04e:	4b43      	ldr	r3, [pc, #268]	; (9d15c <Cl_Dprep_SendPrepStateData+0x304>)
   9d050:	681a      	ldr	r2, [r3, #0]
   9d052:	4b3b      	ldr	r3, [pc, #236]	; (9d140 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9d054:	493b      	ldr	r1, [pc, #236]	; (9d144 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9d056:	4610      	mov	r0, r2
   9d058:	4798      	blx	r3
   9d05a:	4603      	mov	r3, r0
   9d05c:	461a      	mov	r2, r3
   9d05e:	4b47      	ldr	r3, [pc, #284]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9d060:	4610      	mov	r0, r2
   9d062:	4798      	blx	r3
   9d064:	4c3a      	ldr	r4, [pc, #232]	; (9d150 <Cl_Dprep_SendPrepStateData+0x2f8>)
   9d066:	f04f 0200 	mov.w	r2, #0
   9d06a:	4b48      	ldr	r3, [pc, #288]	; (9d18c <Cl_Dprep_SendPrepStateData+0x334>)
   9d06c:	47a0      	blx	r4
   9d06e:	4603      	mov	r3, r0
   9d070:	460c      	mov	r4, r1
   9d072:	4618      	mov	r0, r3
   9d074:	4621      	mov	r1, r4
   9d076:	4c42      	ldr	r4, [pc, #264]	; (9d180 <Cl_Dprep_SendPrepStateData+0x328>)
   9d078:	a329      	add	r3, pc, #164	; (adr r3, 9d120 <Cl_Dprep_SendPrepStateData+0x2c8>)
   9d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d07e:	47a0      	blx	r4
   9d080:	4603      	mov	r3, r0
   9d082:	460c      	mov	r4, r1
   9d084:	4618      	mov	r0, r3
   9d086:	4621      	mov	r1, r4
   9d088:	4c32      	ldr	r4, [pc, #200]	; (9d154 <Cl_Dprep_SendPrepStateData+0x2fc>)
   9d08a:	f04f 0200 	mov.w	r2, #0
   9d08e:	4b40      	ldr	r3, [pc, #256]	; (9d190 <Cl_Dprep_SendPrepStateData+0x338>)
   9d090:	47a0      	blx	r4
   9d092:	4603      	mov	r3, r0
   9d094:	460c      	mov	r4, r1
   9d096:	461a      	mov	r2, r3
   9d098:	4623      	mov	r3, r4
   9d09a:	4c3e      	ldr	r4, [pc, #248]	; (9d194 <Cl_Dprep_SendPrepStateData+0x33c>)
   9d09c:	4628      	mov	r0, r5
   9d09e:	4631      	mov	r1, r6
   9d0a0:	47a0      	blx	r4
   9d0a2:	4603      	mov	r3, r0
   9d0a4:	460c      	mov	r4, r1
   9d0a6:	4619      	mov	r1, r3
   9d0a8:	4622      	mov	r2, r4
   9d0aa:	4b36      	ldr	r3, [pc, #216]	; (9d184 <Cl_Dprep_SendPrepStateData+0x32c>)
   9d0ac:	4608      	mov	r0, r1
   9d0ae:	4611      	mov	r1, r2
   9d0b0:	4798      	blx	r3
   9d0b2:	4603      	mov	r3, r0
   9d0b4:	647b      	str	r3, [r7, #68]	; 0x44
								cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   9d0b6:	4b31      	ldr	r3, [pc, #196]	; (9d17c <Cl_Dprep_SendPrepStateData+0x324>)
   9d0b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9d0ba:	4798      	blx	r3
   9d0bc:	4c30      	ldr	r4, [pc, #192]	; (9d180 <Cl_Dprep_SendPrepStateData+0x328>)
   9d0be:	a31a      	add	r3, pc, #104	; (adr r3, 9d128 <Cl_Dprep_SendPrepStateData+0x2d0>)
   9d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d0c4:	47a0      	blx	r4
   9d0c6:	4603      	mov	r3, r0
   9d0c8:	460c      	mov	r4, r1
   9d0ca:	4619      	mov	r1, r3
   9d0cc:	4622      	mov	r2, r4
   9d0ce:	4b2d      	ldr	r3, [pc, #180]	; (9d184 <Cl_Dprep_SendPrepStateData+0x32c>)
   9d0d0:	4608      	mov	r0, r1
   9d0d2:	4611      	mov	r1, r2
   9d0d4:	4798      	blx	r3
   9d0d6:	4603      	mov	r3, r0
   9d0d8:	647b      	str	r3, [r7, #68]	; 0x44
								
								
							//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
							//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
								tempdata.word = (cond_final_X10000/10);
   9d0da:	4b19      	ldr	r3, [pc, #100]	; (9d140 <Cl_Dprep_SendPrepStateData+0x2e8>)
   9d0dc:	4919      	ldr	r1, [pc, #100]	; (9d144 <Cl_Dprep_SendPrepStateData+0x2ec>)
   9d0de:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9d0e0:	4798      	blx	r3
   9d0e2:	4603      	mov	r3, r0
   9d0e4:	461a      	mov	r2, r3
   9d0e6:	4b18      	ldr	r3, [pc, #96]	; (9d148 <Cl_Dprep_SendPrepStateData+0x2f0>)
   9d0e8:	4610      	mov	r0, r2
   9d0ea:	4798      	blx	r3
   9d0ec:	e054      	b.n	9d198 <Cl_Dprep_SendPrepStateData+0x340>
   9d0ee:	bf00      	nop
   9d0f0:	cccccccd 	.word	0xcccccccd
   9d0f4:	4008cccc 	.word	0x4008cccc
   9d0f8:	66666666 	.word	0x66666666
   9d0fc:	3ff66666 	.word	0x3ff66666
   9d100:	eb1c432d 	.word	0xeb1c432d
   9d104:	3f1a36e2 	.word	0x3f1a36e2
   9d108:	d2f1a9fc 	.word	0xd2f1a9fc
   9d10c:	3fa0624d 	.word	0x3fa0624d
   9d110:	51eb851f 	.word	0x51eb851f
   9d114:	3fed1eb8 	.word	0x3fed1eb8
   9d118:	9999999a 	.word	0x9999999a
   9d11c:	3fd99999 	.word	0x3fd99999
   9d120:	24dd2f1b 	.word	0x24dd2f1b
   9d124:	3f958106 	.word	0x3f958106
   9d128:	33333333 	.word	0x33333333
   9d12c:	40153333 	.word	0x40153333
   9d130:	000a2be1 	.word	0x000a2be1
   9d134:	0008d499 	.word	0x0008d499
   9d138:	0008e659 	.word	0x0008e659
   9d13c:	200725ec 	.word	0x200725ec
   9d140:	000a27f5 	.word	0x000a27f5
   9d144:	41200000 	.word	0x41200000
   9d148:	000a2a65 	.word	0x000a2a65
   9d14c:	000a1d41 	.word	0x000a1d41
   9d150:	000a1aa5 	.word	0x000a1aa5
   9d154:	000a1aa9 	.word	0x000a1aa9
   9d158:	000a2391 	.word	0x000a2391
   9d15c:	200727e8 	.word	0x200727e8
   9d160:	000a268d 	.word	0x000a268d
   9d164:	40a00000 	.word	0x40a00000
   9d168:	000a25e5 	.word	0x000a25e5
   9d16c:	000a247d 	.word	0x000a247d
   9d170:	40c00000 	.word	0x40c00000
   9d174:	cccccccd 	.word	0xcccccccd
   9d178:	51eb851f 	.word	0x51eb851f
   9d17c:	000a1d65 	.word	0x000a1d65
   9d180:	000a1e0d 	.word	0x000a1e0d
   9d184:	000a23d1 	.word	0x000a23d1
   9d188:	42c80000 	.word	0x42c80000
   9d18c:	40390000 	.word	0x40390000
   9d190:	3ff00000 	.word	0x3ff00000
   9d194:	000a2061 	.word	0x000a2061
   9d198:	4603      	mov	r3, r0
   9d19a:	613b      	str	r3, [r7, #16]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   9d19c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d1a0:	1c5a      	adds	r2, r3, #1
   9d1a2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d1a6:	7c3a      	ldrb	r2, [r7, #16]
   9d1a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d1ac:	440b      	add	r3, r1
   9d1ae:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[1];
   9d1b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d1b6:	1c5a      	adds	r2, r3, #1
   9d1b8:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d1bc:	7c7a      	ldrb	r2, [r7, #17]
   9d1be:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d1c2:	440b      	add	r3, r1
   9d1c4:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[2];
   9d1c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d1cc:	1c5a      	adds	r2, r3, #1
   9d1ce:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d1d2:	7cba      	ldrb	r2, [r7, #18]
   9d1d4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d1d8:	440b      	add	r3, r1
   9d1da:	f803 2c50 	strb.w	r2, [r3, #-80]
								systemdataarray[count++] = tempdata.bytearray[3];
   9d1de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d1e2:	1c5a      	adds	r2, r3, #1
   9d1e4:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d1e8:	7cfa      	ldrb	r2, [r7, #19]
   9d1ea:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d1ee:	440b      	add	r3, r1
   9d1f0:	f803 2c50 	strb.w	r2, [r3, #-80]
   9d1f4:	e02d      	b.n	9d252 <Cl_Dprep_SendPrepStateData+0x3fa>
							}
							else
							{
								tempdata.word = 0;
   9d1f6:	2300      	movs	r3, #0
   9d1f8:	613b      	str	r3, [r7, #16]
							systemdataarray[count++] = tempdata.bytearray[0];
   9d1fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d1fe:	1c5a      	adds	r2, r3, #1
   9d200:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d204:	7c3a      	ldrb	r2, [r7, #16]
   9d206:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d20a:	440b      	add	r3, r1
   9d20c:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[1];
   9d210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d214:	1c5a      	adds	r2, r3, #1
   9d216:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d21a:	7c7a      	ldrb	r2, [r7, #17]
   9d21c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d220:	440b      	add	r3, r1
   9d222:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[2];
   9d226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d22a:	1c5a      	adds	r2, r3, #1
   9d22c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d230:	7cba      	ldrb	r2, [r7, #18]
   9d232:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d236:	440b      	add	r3, r1
   9d238:	f803 2c50 	strb.w	r2, [r3, #-80]
							systemdataarray[count++] = tempdata.bytearray[3];
   9d23c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d240:	1c5a      	adds	r2, r3, #1
   9d242:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d246:	7cfa      	ldrb	r2, [r7, #19]
   9d248:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d24c:	440b      	add	r3, r1
   9d24e:	f803 2c50 	strb.w	r2, [r3, #-80]
		
					}
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   9d252:	4bab      	ldr	r3, [pc, #684]	; (9d500 <Cl_Dprep_SendPrepStateData+0x6a8>)
   9d254:	681a      	ldr	r2, [r3, #0]
   9d256:	4bab      	ldr	r3, [pc, #684]	; (9d504 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9d258:	4610      	mov	r0, r2
   9d25a:	4798      	blx	r3
   9d25c:	4603      	mov	r3, r0
   9d25e:	613b      	str	r3, [r7, #16]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   9d260:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d264:	1c5a      	adds	r2, r3, #1
   9d266:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d26a:	7c3a      	ldrb	r2, [r7, #16]
   9d26c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d270:	440b      	add	r3, r1
   9d272:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1];
   9d276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d27a:	1c5a      	adds	r2, r3, #1
   9d27c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d280:	7c7a      	ldrb	r2, [r7, #17]
   9d282:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d286:	440b      	add	r3, r1
   9d288:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2];
   9d28c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d290:	1c5a      	adds	r2, r3, #1
   9d292:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d296:	7cba      	ldrb	r2, [r7, #18]
   9d298:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d29c:	440b      	add	r3, r1
   9d29e:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3];
   9d2a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d2a6:	1c5a      	adds	r2, r3, #1
   9d2a8:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d2ac:	7cfa      	ldrb	r2, [r7, #19]
   9d2ae:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d2b2:	440b      	add	r3, r1
   9d2b4:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   9d2b8:	f107 0310 	add.w	r3, r7, #16
   9d2bc:	4619      	mov	r1, r3
   9d2be:	200b      	movs	r0, #11
   9d2c0:	4b91      	ldr	r3, [pc, #580]	; (9d508 <Cl_Dprep_SendPrepStateData+0x6b0>)
   9d2c2:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9d2c4:	8a3b      	ldrh	r3, [r7, #16]
   9d2c6:	461a      	mov	r2, r3
   9d2c8:	4b90      	ldr	r3, [pc, #576]	; (9d50c <Cl_Dprep_SendPrepStateData+0x6b4>)
   9d2ca:	4610      	mov	r0, r2
   9d2cc:	4798      	blx	r3
   9d2ce:	4c90      	ldr	r4, [pc, #576]	; (9d510 <Cl_Dprep_SendPrepStateData+0x6b8>)
   9d2d0:	a389      	add	r3, pc, #548	; (adr r3, 9d4f8 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d2d6:	47a0      	blx	r4
   9d2d8:	4603      	mov	r3, r0
   9d2da:	460c      	mov	r4, r1
   9d2dc:	4619      	mov	r1, r3
   9d2de:	4622      	mov	r2, r4
   9d2e0:	4b8c      	ldr	r3, [pc, #560]	; (9d514 <Cl_Dprep_SendPrepStateData+0x6bc>)
   9d2e2:	4608      	mov	r0, r1
   9d2e4:	4611      	mov	r1, r2
   9d2e6:	4798      	blx	r3
   9d2e8:	4603      	mov	r3, r0
   9d2ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						calibration_apt(sensordatamillivolts);
   9d2ee:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
   9d2f2:	4618      	mov	r0, r3
   9d2f4:	4b88      	ldr	r3, [pc, #544]	; (9d518 <Cl_Dprep_SendPrepStateData+0x6c0>)
   9d2f6:	4798      	blx	r3
						apt =(apt*5 + pressure_final_apt)/6;
   9d2f8:	4b88      	ldr	r3, [pc, #544]	; (9d51c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9d2fa:	681a      	ldr	r2, [r3, #0]
   9d2fc:	4b88      	ldr	r3, [pc, #544]	; (9d520 <Cl_Dprep_SendPrepStateData+0x6c8>)
   9d2fe:	4989      	ldr	r1, [pc, #548]	; (9d524 <Cl_Dprep_SendPrepStateData+0x6cc>)
   9d300:	4610      	mov	r0, r2
   9d302:	4798      	blx	r3
   9d304:	4603      	mov	r3, r0
   9d306:	4618      	mov	r0, r3
   9d308:	4b87      	ldr	r3, [pc, #540]	; (9d528 <Cl_Dprep_SendPrepStateData+0x6d0>)
   9d30a:	681a      	ldr	r2, [r3, #0]
   9d30c:	4b87      	ldr	r3, [pc, #540]	; (9d52c <Cl_Dprep_SendPrepStateData+0x6d4>)
   9d30e:	4611      	mov	r1, r2
   9d310:	4798      	blx	r3
   9d312:	4603      	mov	r3, r0
   9d314:	461a      	mov	r2, r3
   9d316:	4b86      	ldr	r3, [pc, #536]	; (9d530 <Cl_Dprep_SendPrepStateData+0x6d8>)
   9d318:	4986      	ldr	r1, [pc, #536]	; (9d534 <Cl_Dprep_SendPrepStateData+0x6dc>)
   9d31a:	4610      	mov	r0, r2
   9d31c:	4798      	blx	r3
   9d31e:	4603      	mov	r3, r0
   9d320:	461a      	mov	r2, r3
   9d322:	4b7e      	ldr	r3, [pc, #504]	; (9d51c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9d324:	601a      	str	r2, [r3, #0]
						tempdata.word	 = apt;
   9d326:	4b7d      	ldr	r3, [pc, #500]	; (9d51c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9d328:	681a      	ldr	r2, [r3, #0]
   9d32a:	4b76      	ldr	r3, [pc, #472]	; (9d504 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9d32c:	4610      	mov	r0, r2
   9d32e:	4798      	blx	r3
   9d330:	4603      	mov	r3, r0
   9d332:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9d334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d338:	1c5a      	adds	r2, r3, #1
   9d33a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d33e:	7c3a      	ldrb	r2, [r7, #16]
   9d340:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d344:	440b      	add	r3, r1
   9d346:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9d34a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d34e:	1c5a      	adds	r2, r3, #1
   9d350:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d354:	7c7a      	ldrb	r2, [r7, #17]
   9d356:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d35a:	440b      	add	r3, r1
   9d35c:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9d360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d364:	1c5a      	adds	r2, r3, #1
   9d366:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d36a:	7cba      	ldrb	r2, [r7, #18]
   9d36c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d370:	440b      	add	r3, r1
   9d372:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9d376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d37a:	1c5a      	adds	r2, r3, #1
   9d37c:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d380:	7cfa      	ldrb	r2, [r7, #19]
   9d382:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d386:	440b      	add	r3, r1
   9d388:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   9d38c:	f107 0310 	add.w	r3, r7, #16
   9d390:	4619      	mov	r1, r3
   9d392:	200c      	movs	r0, #12
   9d394:	4b5c      	ldr	r3, [pc, #368]	; (9d508 <Cl_Dprep_SendPrepStateData+0x6b0>)
   9d396:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9d398:	8a3b      	ldrh	r3, [r7, #16]
   9d39a:	461a      	mov	r2, r3
   9d39c:	4b5b      	ldr	r3, [pc, #364]	; (9d50c <Cl_Dprep_SendPrepStateData+0x6b4>)
   9d39e:	4610      	mov	r0, r2
   9d3a0:	4798      	blx	r3
   9d3a2:	4c5b      	ldr	r4, [pc, #364]	; (9d510 <Cl_Dprep_SendPrepStateData+0x6b8>)
   9d3a4:	a354      	add	r3, pc, #336	; (adr r3, 9d4f8 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d3aa:	47a0      	blx	r4
   9d3ac:	4603      	mov	r3, r0
   9d3ae:	460c      	mov	r4, r1
   9d3b0:	4619      	mov	r1, r3
   9d3b2:	4622      	mov	r2, r4
   9d3b4:	4b57      	ldr	r3, [pc, #348]	; (9d514 <Cl_Dprep_SendPrepStateData+0x6bc>)
   9d3b6:	4608      	mov	r0, r1
   9d3b8:	4611      	mov	r1, r2
   9d3ba:	4798      	blx	r3
   9d3bc:	4603      	mov	r3, r0
   9d3be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						calibration_vpt(sensordatamillivolts);
   9d3c2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
   9d3c6:	4618      	mov	r0, r3
   9d3c8:	4b5b      	ldr	r3, [pc, #364]	; (9d538 <Cl_Dprep_SendPrepStateData+0x6e0>)
   9d3ca:	4798      	blx	r3
						vpt =(vpt*5 + pressure_final_vpt)/6;
   9d3cc:	4b5b      	ldr	r3, [pc, #364]	; (9d53c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9d3ce:	681a      	ldr	r2, [r3, #0]
   9d3d0:	4b53      	ldr	r3, [pc, #332]	; (9d520 <Cl_Dprep_SendPrepStateData+0x6c8>)
   9d3d2:	4954      	ldr	r1, [pc, #336]	; (9d524 <Cl_Dprep_SendPrepStateData+0x6cc>)
   9d3d4:	4610      	mov	r0, r2
   9d3d6:	4798      	blx	r3
   9d3d8:	4603      	mov	r3, r0
   9d3da:	4618      	mov	r0, r3
   9d3dc:	4b58      	ldr	r3, [pc, #352]	; (9d540 <Cl_Dprep_SendPrepStateData+0x6e8>)
   9d3de:	681a      	ldr	r2, [r3, #0]
   9d3e0:	4b52      	ldr	r3, [pc, #328]	; (9d52c <Cl_Dprep_SendPrepStateData+0x6d4>)
   9d3e2:	4611      	mov	r1, r2
   9d3e4:	4798      	blx	r3
   9d3e6:	4603      	mov	r3, r0
   9d3e8:	461a      	mov	r2, r3
   9d3ea:	4b51      	ldr	r3, [pc, #324]	; (9d530 <Cl_Dprep_SendPrepStateData+0x6d8>)
   9d3ec:	4951      	ldr	r1, [pc, #324]	; (9d534 <Cl_Dprep_SendPrepStateData+0x6dc>)
   9d3ee:	4610      	mov	r0, r2
   9d3f0:	4798      	blx	r3
   9d3f2:	4603      	mov	r3, r0
   9d3f4:	461a      	mov	r2, r3
   9d3f6:	4b51      	ldr	r3, [pc, #324]	; (9d53c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9d3f8:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (vpt);
   9d3fa:	4b50      	ldr	r3, [pc, #320]	; (9d53c <Cl_Dprep_SendPrepStateData+0x6e4>)
   9d3fc:	681a      	ldr	r2, [r3, #0]
   9d3fe:	4b41      	ldr	r3, [pc, #260]	; (9d504 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9d400:	4610      	mov	r0, r2
   9d402:	4798      	blx	r3
   9d404:	4603      	mov	r3, r0
   9d406:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9d408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d40c:	1c5a      	adds	r2, r3, #1
   9d40e:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d412:	7c3a      	ldrb	r2, [r7, #16]
   9d414:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d418:	440b      	add	r3, r1
   9d41a:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9d41e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d422:	1c5a      	adds	r2, r3, #1
   9d424:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d428:	7c7a      	ldrb	r2, [r7, #17]
   9d42a:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d42e:	440b      	add	r3, r1
   9d430:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9d434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d438:	1c5a      	adds	r2, r3, #1
   9d43a:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d43e:	7cba      	ldrb	r2, [r7, #18]
   9d440:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d444:	440b      	add	r3, r1
   9d446:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9d44a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d44e:	1c5a      	adds	r2, r3, #1
   9d450:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d454:	7cfa      	ldrb	r2, [r7, #19]
   9d456:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d45a:	440b      	add	r3, r1
   9d45c:	f803 2c50 	strb.w	r2, [r3, #-80]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   9d460:	79fb      	ldrb	r3, [r7, #7]
   9d462:	2b04      	cmp	r3, #4
   9d464:	d135      	bne.n	9d4d2 <Cl_Dprep_SendPrepStateData+0x67a>
					{
						TMP = 5000;
   9d466:	4b37      	ldr	r3, [pc, #220]	; (9d544 <Cl_Dprep_SendPrepStateData+0x6ec>)
   9d468:	4a37      	ldr	r2, [pc, #220]	; (9d548 <Cl_Dprep_SendPrepStateData+0x6f0>)
   9d46a:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (TMP);
   9d46c:	4b35      	ldr	r3, [pc, #212]	; (9d544 <Cl_Dprep_SendPrepStateData+0x6ec>)
   9d46e:	681a      	ldr	r2, [r3, #0]
   9d470:	4b24      	ldr	r3, [pc, #144]	; (9d504 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9d472:	4610      	mov	r0, r2
   9d474:	4798      	blx	r3
   9d476:	4603      	mov	r3, r0
   9d478:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9d47a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d47e:	1c5a      	adds	r2, r3, #1
   9d480:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d484:	7c3a      	ldrb	r2, [r7, #16]
   9d486:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d48a:	440b      	add	r3, r1
   9d48c:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9d490:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d494:	1c5a      	adds	r2, r3, #1
   9d496:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d49a:	7c7a      	ldrb	r2, [r7, #17]
   9d49c:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d4a0:	440b      	add	r3, r1
   9d4a2:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9d4a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d4aa:	1c5a      	adds	r2, r3, #1
   9d4ac:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d4b0:	7cba      	ldrb	r2, [r7, #18]
   9d4b2:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d4b6:	440b      	add	r3, r1
   9d4b8:	f803 2c50 	strb.w	r2, [r3, #-80]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9d4bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   9d4c0:	1c5a      	adds	r2, r3, #1
   9d4c2:	f887 2067 	strb.w	r2, [r7, #103]	; 0x67
   9d4c6:	7cfa      	ldrb	r2, [r7, #19]
   9d4c8:	f107 0168 	add.w	r1, r7, #104	; 0x68
   9d4cc:	440b      	add	r3, r1
   9d4ce:	f803 2c50 	strb.w	r2, [r3, #-80]
					}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   9d4d2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
   9d4d6:	f107 0318 	add.w	r3, r7, #24
   9d4da:	4619      	mov	r1, r3
   9d4dc:	202a      	movs	r0, #42	; 0x2a
   9d4de:	4b1b      	ldr	r3, [pc, #108]	; (9d54c <Cl_Dprep_SendPrepStateData+0x6f4>)
   9d4e0:	4798      	blx	r3
   9d4e2:	4603      	mov	r3, r0
   9d4e4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   9d4e8:	2300      	movs	r3, #0
}
   9d4ea:	4618      	mov	r0, r3
   9d4ec:	376c      	adds	r7, #108	; 0x6c
   9d4ee:	46bd      	mov	sp, r7
   9d4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9d4f2:	bf00      	nop
   9d4f4:	f3af 8000 	nop.w
   9d4f8:	58e21965 	.word	0x58e21965
   9d4fc:	3fe9b717 	.word	0x3fe9b717
   9d500:	200727e8 	.word	0x200727e8
   9d504:	000a2a65 	.word	0x000a2a65
   9d508:	0008d499 	.word	0x0008d499
   9d50c:	000a1d41 	.word	0x000a1d41
   9d510:	000a1e0d 	.word	0x000a1e0d
   9d514:	000a2391 	.word	0x000a2391
   9d518:	00083e39 	.word	0x00083e39
   9d51c:	200727ec 	.word	0x200727ec
   9d520:	000a268d 	.word	0x000a268d
   9d524:	40a00000 	.word	0x40a00000
   9d528:	20072d08 	.word	0x20072d08
   9d52c:	000a247d 	.word	0x000a247d
   9d530:	000a27f5 	.word	0x000a27f5
   9d534:	40c00000 	.word	0x40c00000
   9d538:	00083fb9 	.word	0x00083fb9
   9d53c:	200727f0 	.word	0x200727f0
   9d540:	20071618 	.word	0x20071618
   9d544:	200727f4 	.word	0x200727f4
   9d548:	459c4000 	.word	0x459c4000
   9d54c:	00098601 	.word	0x00098601

0009d550 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   9d550:	b580      	push	{r7, lr}
   9d552:	b082      	sub	sp, #8
   9d554:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9d556:	2300      	movs	r3, #0
   9d558:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   9d55a:	4b2e      	ldr	r3, [pc, #184]	; (9d614 <Cl_Dprep_Stoppreparation+0xc4>)
   9d55c:	781b      	ldrb	r3, [r3, #0]
   9d55e:	2b00      	cmp	r3, #0
   9d560:	d052      	beq.n	9d608 <Cl_Dprep_Stoppreparation+0xb8>
   9d562:	4b2c      	ldr	r3, [pc, #176]	; (9d614 <Cl_Dprep_Stoppreparation+0xc4>)
   9d564:	781b      	ldrb	r3, [r3, #0]
   9d566:	2b0b      	cmp	r3, #11
   9d568:	d04e      	beq.n	9d608 <Cl_Dprep_Stoppreparation+0xb8>
   9d56a:	4b2a      	ldr	r3, [pc, #168]	; (9d614 <Cl_Dprep_Stoppreparation+0xc4>)
   9d56c:	781b      	ldrb	r3, [r3, #0]
   9d56e:	2b0c      	cmp	r3, #12
   9d570:	d04a      	beq.n	9d608 <Cl_Dprep_Stoppreparation+0xb8>
				{
					
					
					 	Cl_Dprepsecondscounter = 0;
   9d572:	4b29      	ldr	r3, [pc, #164]	; (9d618 <Cl_Dprep_Stoppreparation+0xc8>)
   9d574:	2200      	movs	r2, #0
   9d576:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   9d578:	4b28      	ldr	r3, [pc, #160]	; (9d61c <Cl_Dprep_Stoppreparation+0xcc>)
   9d57a:	2200      	movs	r2, #0
   9d57c:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   9d57e:	4b28      	ldr	r3, [pc, #160]	; (9d620 <Cl_Dprep_Stoppreparation+0xd0>)
   9d580:	2200      	movs	r2, #0
   9d582:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   9d584:	4b27      	ldr	r3, [pc, #156]	; (9d624 <Cl_Dprep_Stoppreparation+0xd4>)
   9d586:	2200      	movs	r2, #0
   9d588:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   9d58a:	4b27      	ldr	r3, [pc, #156]	; (9d628 <Cl_Dprep_Stoppreparation+0xd8>)
   9d58c:	2200      	movs	r2, #0
   9d58e:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   9d590:	4b26      	ldr	r3, [pc, #152]	; (9d62c <Cl_Dprep_Stoppreparation+0xdc>)
   9d592:	2200      	movs	r2, #0
   9d594:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   9d596:	4b26      	ldr	r3, [pc, #152]	; (9d630 <Cl_Dprep_Stoppreparation+0xe0>)
   9d598:	2200      	movs	r2, #0
   9d59a:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   9d59c:	4b25      	ldr	r3, [pc, #148]	; (9d634 <Cl_Dprep_Stoppreparation+0xe4>)
   9d59e:	2200      	movs	r2, #0
   9d5a0:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   9d5a2:	4b25      	ldr	r3, [pc, #148]	; (9d638 <Cl_Dprep_Stoppreparation+0xe8>)
   9d5a4:	2200      	movs	r2, #0
   9d5a6:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   9d5a8:	4b24      	ldr	r3, [pc, #144]	; (9d63c <Cl_Dprep_Stoppreparation+0xec>)
   9d5aa:	2200      	movs	r2, #0
   9d5ac:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   9d5ae:	4b24      	ldr	r3, [pc, #144]	; (9d640 <Cl_Dprep_Stoppreparation+0xf0>)
   9d5b0:	2200      	movs	r2, #0
   9d5b2:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   9d5b4:	4b23      	ldr	r3, [pc, #140]	; (9d644 <Cl_Dprep_Stoppreparation+0xf4>)
   9d5b6:	2200      	movs	r2, #0
   9d5b8:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9d5ba:	4b23      	ldr	r3, [pc, #140]	; (9d648 <Cl_Dprep_Stoppreparation+0xf8>)
   9d5bc:	2200      	movs	r2, #0
   9d5be:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9d5c0:	4b22      	ldr	r3, [pc, #136]	; (9d64c <Cl_Dprep_Stoppreparation+0xfc>)
   9d5c2:	2200      	movs	r2, #0
   9d5c4:	801a      	strh	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   9d5c6:	4b22      	ldr	r3, [pc, #136]	; (9d650 <Cl_Dprep_Stoppreparation+0x100>)
   9d5c8:	4798      	blx	r3
   9d5ca:	4603      	mov	r3, r0
   9d5cc:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   9d5ce:	2011      	movs	r0, #17
   9d5d0:	4b20      	ldr	r3, [pc, #128]	; (9d654 <Cl_Dprep_Stoppreparation+0x104>)
   9d5d2:	4798      	blx	r3
   9d5d4:	4603      	mov	r3, r0
   9d5d6:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9d5d8:	4b1f      	ldr	r3, [pc, #124]	; (9d658 <Cl_Dprep_Stoppreparation+0x108>)
   9d5da:	4798      	blx	r3
   9d5dc:	4603      	mov	r3, r0
   9d5de:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9d5e0:	2004      	movs	r0, #4
   9d5e2:	4b1e      	ldr	r3, [pc, #120]	; (9d65c <Cl_Dprep_Stoppreparation+0x10c>)
   9d5e4:	4798      	blx	r3
   9d5e6:	4603      	mov	r3, r0
   9d5e8:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9d5ea:	2100      	movs	r1, #0
   9d5ec:	2002      	movs	r0, #2
   9d5ee:	4b1c      	ldr	r3, [pc, #112]	; (9d660 <Cl_Dprep_Stoppreparation+0x110>)
   9d5f0:	4798      	blx	r3

				
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   9d5f2:	4b08      	ldr	r3, [pc, #32]	; (9d614 <Cl_Dprep_Stoppreparation+0xc4>)
   9d5f4:	2200      	movs	r2, #0
   9d5f6:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9d5f8:	1dbb      	adds	r3, r7, #6
   9d5fa:	2200      	movs	r2, #0
   9d5fc:	4619      	mov	r1, r3
   9d5fe:	202d      	movs	r0, #45	; 0x2d
   9d600:	4b18      	ldr	r3, [pc, #96]	; (9d664 <Cl_Dprep_Stoppreparation+0x114>)
   9d602:	4798      	blx	r3
   9d604:	4603      	mov	r3, r0
   9d606:	71fb      	strb	r3, [r7, #7]
				
					
				}
		return CL_OK;
   9d608:	2300      	movs	r3, #0
}
   9d60a:	4618      	mov	r0, r3
   9d60c:	3708      	adds	r7, #8
   9d60e:	46bd      	mov	sp, r7
   9d610:	bd80      	pop	{r7, pc}
   9d612:	bf00      	nop
   9d614:	200727cf 	.word	0x200727cf
   9d618:	20072798 	.word	0x20072798
   9d61c:	2007279c 	.word	0x2007279c
   9d620:	200727a0 	.word	0x200727a0
   9d624:	200727a4 	.word	0x200727a4
   9d628:	200727a8 	.word	0x200727a8
   9d62c:	200727ae 	.word	0x200727ae
   9d630:	200727b0 	.word	0x200727b0
   9d634:	200727b2 	.word	0x200727b2
   9d638:	200727b4 	.word	0x200727b4
   9d63c:	200727b6 	.word	0x200727b6
   9d640:	200727b8 	.word	0x200727b8
   9d644:	200727ba 	.word	0x200727ba
   9d648:	200727bc 	.word	0x200727bc
   9d64c:	200727be 	.word	0x200727be
   9d650:	000969dd 	.word	0x000969dd
   9d654:	00096a6d 	.word	0x00096a6d
   9d658:	00096869 	.word	0x00096869
   9d65c:	00089749 	.word	0x00089749
   9d660:	0008896d 	.word	0x0008896d
   9d664:	00098601 	.word	0x00098601

0009d668 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   9d668:	b580      	push	{r7, lr}
   9d66a:	b082      	sub	sp, #8
   9d66c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d66e:	2300      	movs	r3, #0
   9d670:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d672:	234a      	movs	r3, #74	; 0x4a
   9d674:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9d676:	4b5f      	ldr	r3, [pc, #380]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d678:	2200      	movs	r2, #0
   9d67a:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   9d67c:	2001      	movs	r0, #1
   9d67e:	4b5e      	ldr	r3, [pc, #376]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d680:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   9d682:	4b5c      	ldr	r3, [pc, #368]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d684:	2200      	movs	r2, #0
   9d686:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   9d688:	4b5a      	ldr	r3, [pc, #360]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d68a:	2200      	movs	r2, #0
   9d68c:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9d68e:	2005      	movs	r0, #5
   9d690:	4b59      	ldr	r3, [pc, #356]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d692:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9d694:	2006      	movs	r0, #6
   9d696:	4b58      	ldr	r3, [pc, #352]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d698:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9d69a:	4b56      	ldr	r3, [pc, #344]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d69c:	2200      	movs	r2, #0
   9d69e:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9d6a0:	4b54      	ldr	r3, [pc, #336]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6a2:	2200      	movs	r2, #0
   9d6a4:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9d6a6:	2003      	movs	r0, #3
   9d6a8:	4b53      	ldr	r3, [pc, #332]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6aa:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9d6ac:	2004      	movs	r0, #4
   9d6ae:	4b52      	ldr	r3, [pc, #328]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6b0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   9d6b2:	4b50      	ldr	r3, [pc, #320]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6b4:	2200      	movs	r2, #0
   9d6b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   9d6ba:	202a      	movs	r0, #42	; 0x2a
   9d6bc:	4b4e      	ldr	r3, [pc, #312]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6be:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   9d6c0:	4b4c      	ldr	r3, [pc, #304]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6c2:	2200      	movs	r2, #0
   9d6c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   9d6c8:	202c      	movs	r0, #44	; 0x2c
   9d6ca:	4b4b      	ldr	r3, [pc, #300]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6cc:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   9d6ce:	4b49      	ldr	r3, [pc, #292]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6d0:	2200      	movs	r2, #0
   9d6d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9d6d6:	4b47      	ldr	r3, [pc, #284]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6d8:	2200      	movs	r2, #0
   9d6da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9d6de:	2008      	movs	r0, #8
   9d6e0:	4b45      	ldr	r3, [pc, #276]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6e2:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   9d6e4:	2007      	movs	r0, #7
   9d6e6:	4b44      	ldr	r3, [pc, #272]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d6e8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   9d6ea:	4b42      	ldr	r3, [pc, #264]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6ec:	2200      	movs	r2, #0
   9d6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   9d6f2:	4b40      	ldr	r3, [pc, #256]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6f4:	2200      	movs	r2, #0
   9d6f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   9d6fa:	4b3e      	ldr	r3, [pc, #248]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d6fc:	2200      	movs	r2, #0
   9d6fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   9d702:	4b3c      	ldr	r3, [pc, #240]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d704:	2200      	movs	r2, #0
   9d706:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9d70a:	4b3a      	ldr	r3, [pc, #232]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d70c:	2200      	movs	r2, #0
   9d70e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   9d712:	4b38      	ldr	r3, [pc, #224]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d714:	2200      	movs	r2, #0
   9d716:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   9d71a:	4b36      	ldr	r3, [pc, #216]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d71c:	2200      	movs	r2, #0
   9d71e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   9d722:	4b34      	ldr	r3, [pc, #208]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d724:	2200      	movs	r2, #0
   9d726:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   9d72a:	4b32      	ldr	r3, [pc, #200]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d72c:	2200      	movs	r2, #0
   9d72e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   9d732:	4b30      	ldr	r3, [pc, #192]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d734:	2200      	movs	r2, #0
   9d736:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9d73a:	4b2e      	ldr	r3, [pc, #184]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d73c:	2200      	movs	r2, #0
   9d73e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9d742:	4b2c      	ldr	r3, [pc, #176]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d744:	2200      	movs	r2, #0
   9d746:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9d74a:	2015      	movs	r0, #21
   9d74c:	4b2a      	ldr	r3, [pc, #168]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d74e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9d750:	2016      	movs	r0, #22
   9d752:	4b29      	ldr	r3, [pc, #164]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d754:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9d756:	4b27      	ldr	r3, [pc, #156]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d758:	2200      	movs	r2, #0
   9d75a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9d75e:	4b25      	ldr	r3, [pc, #148]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d760:	2200      	movs	r2, #0
   9d762:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9d766:	2017      	movs	r0, #23
   9d768:	4b23      	ldr	r3, [pc, #140]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d76a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9d76c:	2018      	movs	r0, #24
   9d76e:	4b22      	ldr	r3, [pc, #136]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d770:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9d772:	4b20      	ldr	r3, [pc, #128]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d774:	2200      	movs	r2, #0
   9d776:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9d77a:	4b1e      	ldr	r3, [pc, #120]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d77c:	2200      	movs	r2, #0
   9d77e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9d782:	2027      	movs	r0, #39	; 0x27
   9d784:	4b1c      	ldr	r3, [pc, #112]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d786:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9d788:	2028      	movs	r0, #40	; 0x28
   9d78a:	4b1b      	ldr	r3, [pc, #108]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d78c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9d78e:	4b19      	ldr	r3, [pc, #100]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d790:	2200      	movs	r2, #0
   9d792:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   9d796:	4b17      	ldr	r3, [pc, #92]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d798:	2200      	movs	r2, #0
   9d79a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   9d79e:	4b15      	ldr	r3, [pc, #84]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d7a0:	2200      	movs	r2, #0
   9d7a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   9d7a6:	200f      	movs	r0, #15
   9d7a8:	4b13      	ldr	r3, [pc, #76]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7aa:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   9d7ac:	2010      	movs	r0, #16
   9d7ae:	4b12      	ldr	r3, [pc, #72]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7b0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9d7b2:	4b10      	ldr	r3, [pc, #64]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d7b4:	2200      	movs	r2, #0
   9d7b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   9d7ba:	4b0e      	ldr	r3, [pc, #56]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d7bc:	2200      	movs	r2, #0
   9d7be:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9d7c2:	2011      	movs	r0, #17
   9d7c4:	4b0c      	ldr	r3, [pc, #48]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7c6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9d7c8:	2012      	movs	r0, #18
   9d7ca:	4b0b      	ldr	r3, [pc, #44]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7cc:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9d7ce:	4b09      	ldr	r3, [pc, #36]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d7d0:	2200      	movs	r2, #0
   9d7d2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   9d7d6:	4b07      	ldr	r3, [pc, #28]	; (9d7f4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9d7d8:	2200      	movs	r2, #0
   9d7da:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   9d7de:	2013      	movs	r0, #19
   9d7e0:	4b05      	ldr	r3, [pc, #20]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7e2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   9d7e4:	2014      	movs	r0, #20
   9d7e6:	4b04      	ldr	r3, [pc, #16]	; (9d7f8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9d7e8:	4798      	blx	r3

	return (Cl_dprepretcode);
   9d7ea:	79fb      	ldrb	r3, [r7, #7]
	
}
   9d7ec:	4618      	mov	r0, r3
   9d7ee:	3708      	adds	r7, #8
   9d7f0:	46bd      	mov	sp, r7
   9d7f2:	bd80      	pop	{r7, pc}
   9d7f4:	20070a84 	.word	0x20070a84
   9d7f8:	00082ffd 	.word	0x00082ffd

0009d7fc <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   9d7fc:	b590      	push	{r4, r7, lr}
   9d7fe:	b089      	sub	sp, #36	; 0x24
   9d800:	af00      	add	r7, sp, #0
   9d802:	4604      	mov	r4, r0
   9d804:	1d38      	adds	r0, r7, #4
   9d806:	e880 0006 	stmia.w	r0, {r1, r2}
   9d80a:	461a      	mov	r2, r3
   9d80c:	4623      	mov	r3, r4
   9d80e:	73fb      	strb	r3, [r7, #15]
   9d810:	4613      	mov	r3, r2
   9d812:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9d814:	2300      	movs	r3, #0
   9d816:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d818:	234a      	movs	r3, #74	; 0x4a
   9d81a:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   9d81c:	f107 0314 	add.w	r3, r7, #20
   9d820:	2200      	movs	r2, #0
   9d822:	601a      	str	r2, [r3, #0]
   9d824:	605a      	str	r2, [r3, #4]
	Cl_Uint8Type  databytecnt = 0;
   9d826:	2300      	movs	r3, #0
   9d828:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   9d82a:	7bfb      	ldrb	r3, [r7, #15]
   9d82c:	3b05      	subs	r3, #5
   9d82e:	2b18      	cmp	r3, #24
   9d830:	f200 837c 	bhi.w	9df2c <Cl_Dprep_setdata+0x730>
   9d834:	a201      	add	r2, pc, #4	; (adr r2, 9d83c <Cl_Dprep_setdata+0x40>)
   9d836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d83a:	bf00      	nop
   9d83c:	0009d8a1 	.word	0x0009d8a1
   9d840:	0009d8cb 	.word	0x0009d8cb
   9d844:	0009d8f5 	.word	0x0009d8f5
   9d848:	0009d949 	.word	0x0009d949
   9d84c:	0009d973 	.word	0x0009d973
   9d850:	0009df2d 	.word	0x0009df2d
   9d854:	0009d99d 	.word	0x0009d99d
   9d858:	0009d9c7 	.word	0x0009d9c7
   9d85c:	0009d9f1 	.word	0x0009d9f1
   9d860:	0009d91f 	.word	0x0009d91f
   9d864:	0009da1b 	.word	0x0009da1b
   9d868:	0009df2d 	.word	0x0009df2d
   9d86c:	0009df2d 	.word	0x0009df2d
   9d870:	0009df2d 	.word	0x0009df2d
   9d874:	0009da49 	.word	0x0009da49
   9d878:	0009dab9 	.word	0x0009dab9
   9d87c:	0009db29 	.word	0x0009db29
   9d880:	0009dba5 	.word	0x0009dba5
   9d884:	0009dc15 	.word	0x0009dc15
   9d888:	0009dc85 	.word	0x0009dc85
   9d88c:	0009dcf3 	.word	0x0009dcf3
   9d890:	0009dd63 	.word	0x0009dd63
   9d894:	0009ddd3 	.word	0x0009ddd3
   9d898:	0009de43 	.word	0x0009de43
   9d89c:	0009debd 	.word	0x0009debd
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9d8a0:	4bbd      	ldr	r3, [pc, #756]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d8a2:	78da      	ldrb	r2, [r3, #3]
   9d8a4:	1d3b      	adds	r3, r7, #4
   9d8a6:	4619      	mov	r1, r3
   9d8a8:	2005      	movs	r0, #5
   9d8aa:	4bbc      	ldr	r3, [pc, #752]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d8ac:	4798      	blx	r3
   9d8ae:	4603      	mov	r3, r0
   9d8b0:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   9d8b2:	2305      	movs	r3, #5
   9d8b4:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   9d8b6:	f107 0314 	add.w	r3, r7, #20
   9d8ba:	3301      	adds	r3, #1
   9d8bc:	4619      	mov	r1, r3
   9d8be:	2005      	movs	r0, #5
   9d8c0:	4bb7      	ldr	r3, [pc, #732]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d8c2:	4798      	blx	r3
   9d8c4:	4603      	mov	r3, r0
   9d8c6:	77fb      	strb	r3, [r7, #31]
					
					 break;
   9d8c8:	e331      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d8ca:	4bb3      	ldr	r3, [pc, #716]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d8cc:	78da      	ldrb	r2, [r3, #3]
   9d8ce:	1d3b      	adds	r3, r7, #4
   9d8d0:	4619      	mov	r1, r3
   9d8d2:	2006      	movs	r0, #6
   9d8d4:	4bb1      	ldr	r3, [pc, #708]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d8d6:	4798      	blx	r3
   9d8d8:	4603      	mov	r3, r0
   9d8da:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   9d8dc:	2306      	movs	r3, #6
   9d8de:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9d8e0:	f107 0314 	add.w	r3, r7, #20
   9d8e4:	3301      	adds	r3, #1
   9d8e6:	4619      	mov	r1, r3
   9d8e8:	2006      	movs	r0, #6
   9d8ea:	4bad      	ldr	r3, [pc, #692]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d8ec:	4798      	blx	r3
   9d8ee:	4603      	mov	r3, r0
   9d8f0:	77fb      	strb	r3, [r7, #31]

					 break;
   9d8f2:	e31c      	b.n	9df2e <Cl_Dprep_setdata+0x732>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d8f4:	4ba8      	ldr	r3, [pc, #672]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d8f6:	78da      	ldrb	r2, [r3, #3]
   9d8f8:	1d3b      	adds	r3, r7, #4
   9d8fa:	4619      	mov	r1, r3
   9d8fc:	200e      	movs	r0, #14
   9d8fe:	4ba7      	ldr	r3, [pc, #668]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d900:	4798      	blx	r3
   9d902:	4603      	mov	r3, r0
   9d904:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   9d906:	2307      	movs	r3, #7
   9d908:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9d90a:	f107 0314 	add.w	r3, r7, #20
   9d90e:	3301      	adds	r3, #1
   9d910:	4619      	mov	r1, r3
   9d912:	200e      	movs	r0, #14
   9d914:	4ba2      	ldr	r3, [pc, #648]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d916:	4798      	blx	r3
   9d918:	4603      	mov	r3, r0
   9d91a:	77fb      	strb	r3, [r7, #31]
					 break;
   9d91c:	e307      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d91e:	4b9e      	ldr	r3, [pc, #632]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d920:	78da      	ldrb	r2, [r3, #3]
   9d922:	1d3b      	adds	r3, r7, #4
   9d924:	4619      	mov	r1, r3
   9d926:	200f      	movs	r0, #15
   9d928:	4b9c      	ldr	r3, [pc, #624]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d92a:	4798      	blx	r3
   9d92c:	4603      	mov	r3, r0
   9d92e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   9d930:	230e      	movs	r3, #14
   9d932:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9d934:	f107 0314 	add.w	r3, r7, #20
   9d938:	3301      	adds	r3, #1
   9d93a:	4619      	mov	r1, r3
   9d93c:	200f      	movs	r0, #15
   9d93e:	4b98      	ldr	r3, [pc, #608]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d940:	4798      	blx	r3
   9d942:	4603      	mov	r3, r0
   9d944:	77fb      	strb	r3, [r7, #31]

					break;
   9d946:	e2f2      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d948:	4b93      	ldr	r3, [pc, #588]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d94a:	78da      	ldrb	r2, [r3, #3]
   9d94c:	1d3b      	adds	r3, r7, #4
   9d94e:	4619      	mov	r1, r3
   9d950:	2007      	movs	r0, #7
   9d952:	4b92      	ldr	r3, [pc, #584]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d954:	4798      	blx	r3
   9d956:	4603      	mov	r3, r0
   9d958:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   9d95a:	2308      	movs	r3, #8
   9d95c:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9d95e:	f107 0314 	add.w	r3, r7, #20
   9d962:	3301      	adds	r3, #1
   9d964:	4619      	mov	r1, r3
   9d966:	2007      	movs	r0, #7
   9d968:	4b8d      	ldr	r3, [pc, #564]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d96a:	4798      	blx	r3
   9d96c:	4603      	mov	r3, r0
   9d96e:	77fb      	strb	r3, [r7, #31]

					 break;
   9d970:	e2dd      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d972:	4b89      	ldr	r3, [pc, #548]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d974:	78da      	ldrb	r2, [r3, #3]
   9d976:	1d3b      	adds	r3, r7, #4
   9d978:	4619      	mov	r1, r3
   9d97a:	2008      	movs	r0, #8
   9d97c:	4b87      	ldr	r3, [pc, #540]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d97e:	4798      	blx	r3
   9d980:	4603      	mov	r3, r0
   9d982:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   9d984:	2309      	movs	r3, #9
   9d986:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9d988:	f107 0314 	add.w	r3, r7, #20
   9d98c:	3301      	adds	r3, #1
   9d98e:	4619      	mov	r1, r3
   9d990:	2008      	movs	r0, #8
   9d992:	4b83      	ldr	r3, [pc, #524]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d994:	4798      	blx	r3
   9d996:	4603      	mov	r3, r0
   9d998:	77fb      	strb	r3, [r7, #31]

					 break;
   9d99a:	e2c8      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d99c:	4b7e      	ldr	r3, [pc, #504]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d99e:	78da      	ldrb	r2, [r3, #3]
   9d9a0:	1d3b      	adds	r3, r7, #4
   9d9a2:	4619      	mov	r1, r3
   9d9a4:	200a      	movs	r0, #10
   9d9a6:	4b7d      	ldr	r3, [pc, #500]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d9a8:	4798      	blx	r3
   9d9aa:	4603      	mov	r3, r0
   9d9ac:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   9d9ae:	230b      	movs	r3, #11
   9d9b0:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9d9b2:	f107 0314 	add.w	r3, r7, #20
   9d9b6:	3301      	adds	r3, #1
   9d9b8:	4619      	mov	r1, r3
   9d9ba:	200a      	movs	r0, #10
   9d9bc:	4b78      	ldr	r3, [pc, #480]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d9be:	4798      	blx	r3
   9d9c0:	4603      	mov	r3, r0
   9d9c2:	77fb      	strb	r3, [r7, #31]

					 break;
   9d9c4:	e2b3      	b.n	9df2e <Cl_Dprep_setdata+0x732>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d9c6:	4b74      	ldr	r3, [pc, #464]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d9c8:	78da      	ldrb	r2, [r3, #3]
   9d9ca:	1d3b      	adds	r3, r7, #4
   9d9cc:	4619      	mov	r1, r3
   9d9ce:	200b      	movs	r0, #11
   9d9d0:	4b72      	ldr	r3, [pc, #456]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d9d2:	4798      	blx	r3
   9d9d4:	4603      	mov	r3, r0
   9d9d6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   9d9d8:	230c      	movs	r3, #12
   9d9da:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9d9dc:	f107 0314 	add.w	r3, r7, #20
   9d9e0:	3301      	adds	r3, #1
   9d9e2:	4619      	mov	r1, r3
   9d9e4:	200b      	movs	r0, #11
   9d9e6:	4b6e      	ldr	r3, [pc, #440]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9d9e8:	4798      	blx	r3
   9d9ea:	4603      	mov	r3, r0
   9d9ec:	77fb      	strb	r3, [r7, #31]

					 break;
   9d9ee:	e29e      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9d9f0:	4b69      	ldr	r3, [pc, #420]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9d9f2:	78da      	ldrb	r2, [r3, #3]
   9d9f4:	1d3b      	adds	r3, r7, #4
   9d9f6:	4619      	mov	r1, r3
   9d9f8:	200c      	movs	r0, #12
   9d9fa:	4b68      	ldr	r3, [pc, #416]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9d9fc:	4798      	blx	r3
   9d9fe:	4603      	mov	r3, r0
   9da00:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   9da02:	230d      	movs	r3, #13
   9da04:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9da06:	f107 0314 	add.w	r3, r7, #20
   9da0a:	3301      	adds	r3, #1
   9da0c:	4619      	mov	r1, r3
   9da0e:	200c      	movs	r0, #12
   9da10:	4b63      	ldr	r3, [pc, #396]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9da12:	4798      	blx	r3
   9da14:	4603      	mov	r3, r0
   9da16:	77fb      	strb	r3, [r7, #31]

					 break;
   9da18:	e289      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9da1a:	4b5f      	ldr	r3, [pc, #380]	; (9db98 <Cl_Dprep_setdata+0x39c>)
   9da1c:	78da      	ldrb	r2, [r3, #3]
   9da1e:	1d3b      	adds	r3, r7, #4
   9da20:	4619      	mov	r1, r3
   9da22:	200e      	movs	r0, #14
   9da24:	4b5d      	ldr	r3, [pc, #372]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9da26:	4798      	blx	r3
   9da28:	4603      	mov	r3, r0
   9da2a:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   9da2c:	2316      	movs	r3, #22
   9da2e:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   9da30:	230f      	movs	r3, #15
   9da32:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   9da34:	f107 0314 	add.w	r3, r7, #20
   9da38:	3301      	adds	r3, #1
   9da3a:	4619      	mov	r1, r3
   9da3c:	200d      	movs	r0, #13
   9da3e:	4b58      	ldr	r3, [pc, #352]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9da40:	4798      	blx	r3
   9da42:	4603      	mov	r3, r0
   9da44:	77fb      	strb	r3, [r7, #31]
					 break;
   9da46:	e272      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   9da48:	1d3b      	adds	r3, r7, #4
   9da4a:	2202      	movs	r2, #2
   9da4c:	4619      	mov	r1, r3
   9da4e:	2005      	movs	r0, #5
   9da50:	4b52      	ldr	r3, [pc, #328]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9da52:	4798      	blx	r3
   9da54:	4603      	mov	r3, r0
   9da56:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9da58:	1d3b      	adds	r3, r7, #4
   9da5a:	3302      	adds	r3, #2
   9da5c:	2202      	movs	r2, #2
   9da5e:	4619      	mov	r1, r3
   9da60:	2012      	movs	r0, #18
   9da62:	4b4e      	ldr	r3, [pc, #312]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9da64:	4798      	blx	r3
   9da66:	4603      	mov	r3, r0
   9da68:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9da6a:	1d3b      	adds	r3, r7, #4
   9da6c:	3304      	adds	r3, #4
   9da6e:	2202      	movs	r2, #2
   9da70:	4619      	mov	r1, r3
   9da72:	2013      	movs	r0, #19
   9da74:	4b49      	ldr	r3, [pc, #292]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9da76:	4798      	blx	r3
   9da78:	4603      	mov	r3, r0
   9da7a:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   9da7c:	2313      	movs	r3, #19
   9da7e:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   9da80:	f107 0314 	add.w	r3, r7, #20
   9da84:	3301      	adds	r3, #1
   9da86:	4619      	mov	r1, r3
   9da88:	2005      	movs	r0, #5
   9da8a:	4b45      	ldr	r3, [pc, #276]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9da8c:	4798      	blx	r3
   9da8e:	4603      	mov	r3, r0
   9da90:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   9da92:	f107 0314 	add.w	r3, r7, #20
   9da96:	3303      	adds	r3, #3
   9da98:	4619      	mov	r1, r3
   9da9a:	2012      	movs	r0, #18
   9da9c:	4b40      	ldr	r3, [pc, #256]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9da9e:	4798      	blx	r3
   9daa0:	4603      	mov	r3, r0
   9daa2:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   9daa4:	f107 0314 	add.w	r3, r7, #20
   9daa8:	3305      	adds	r3, #5
   9daaa:	4619      	mov	r1, r3
   9daac:	2013      	movs	r0, #19
   9daae:	4b3c      	ldr	r3, [pc, #240]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9dab0:	4798      	blx	r3
   9dab2:	4603      	mov	r3, r0
   9dab4:	77fb      	strb	r3, [r7, #31]
							
					break;
   9dab6:	e23a      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   9dab8:	1d3b      	adds	r3, r7, #4
   9daba:	2202      	movs	r2, #2
   9dabc:	4619      	mov	r1, r3
   9dabe:	2006      	movs	r0, #6
   9dac0:	4b36      	ldr	r3, [pc, #216]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9dac2:	4798      	blx	r3
   9dac4:	4603      	mov	r3, r0
   9dac6:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dac8:	1d3b      	adds	r3, r7, #4
   9daca:	3302      	adds	r3, #2
   9dacc:	2202      	movs	r2, #2
   9dace:	4619      	mov	r1, r3
   9dad0:	2014      	movs	r0, #20
   9dad2:	4b32      	ldr	r3, [pc, #200]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9dad4:	4798      	blx	r3
   9dad6:	4603      	mov	r3, r0
   9dad8:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dada:	1d3b      	adds	r3, r7, #4
   9dadc:	3304      	adds	r3, #4
   9dade:	2202      	movs	r2, #2
   9dae0:	4619      	mov	r1, r3
   9dae2:	2015      	movs	r0, #21
   9dae4:	4b2d      	ldr	r3, [pc, #180]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9dae6:	4798      	blx	r3
   9dae8:	4603      	mov	r3, r0
   9daea:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   9daec:	2314      	movs	r3, #20
   9daee:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9daf0:	f107 0314 	add.w	r3, r7, #20
   9daf4:	3301      	adds	r3, #1
   9daf6:	4619      	mov	r1, r3
   9daf8:	2006      	movs	r0, #6
   9dafa:	4b29      	ldr	r3, [pc, #164]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9dafc:	4798      	blx	r3
   9dafe:	4603      	mov	r3, r0
   9db00:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   9db02:	f107 0314 	add.w	r3, r7, #20
   9db06:	3303      	adds	r3, #3
   9db08:	4619      	mov	r1, r3
   9db0a:	2014      	movs	r0, #20
   9db0c:	4b24      	ldr	r3, [pc, #144]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9db0e:	4798      	blx	r3
   9db10:	4603      	mov	r3, r0
   9db12:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   9db14:	f107 0314 	add.w	r3, r7, #20
   9db18:	3305      	adds	r3, #5
   9db1a:	4619      	mov	r1, r3
   9db1c:	2015      	movs	r0, #21
   9db1e:	4b20      	ldr	r3, [pc, #128]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9db20:	4798      	blx	r3
   9db22:	4603      	mov	r3, r0
   9db24:	77fb      	strb	r3, [r7, #31]
					break;
   9db26:	e202      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   9db28:	1d3b      	adds	r3, r7, #4
   9db2a:	2202      	movs	r2, #2
   9db2c:	4619      	mov	r1, r3
   9db2e:	200e      	movs	r0, #14
   9db30:	4b1a      	ldr	r3, [pc, #104]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9db32:	4798      	blx	r3
   9db34:	4603      	mov	r3, r0
   9db36:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9db38:	1d3b      	adds	r3, r7, #4
   9db3a:	3302      	adds	r3, #2
   9db3c:	2202      	movs	r2, #2
   9db3e:	4619      	mov	r1, r3
   9db40:	2016      	movs	r0, #22
   9db42:	4b16      	ldr	r3, [pc, #88]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9db44:	4798      	blx	r3
   9db46:	4603      	mov	r3, r0
   9db48:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9db4a:	1d3b      	adds	r3, r7, #4
   9db4c:	3304      	adds	r3, #4
   9db4e:	2202      	movs	r2, #2
   9db50:	4619      	mov	r1, r3
   9db52:	2017      	movs	r0, #23
   9db54:	4b11      	ldr	r3, [pc, #68]	; (9db9c <Cl_Dprep_setdata+0x3a0>)
   9db56:	4798      	blx	r3
   9db58:	4603      	mov	r3, r0
   9db5a:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   9db5c:	2315      	movs	r3, #21
   9db5e:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9db60:	f107 0314 	add.w	r3, r7, #20
   9db64:	3301      	adds	r3, #1
   9db66:	4619      	mov	r1, r3
   9db68:	200e      	movs	r0, #14
   9db6a:	4b0d      	ldr	r3, [pc, #52]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9db6c:	4798      	blx	r3
   9db6e:	4603      	mov	r3, r0
   9db70:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   9db72:	f107 0314 	add.w	r3, r7, #20
   9db76:	3303      	adds	r3, #3
   9db78:	4619      	mov	r1, r3
   9db7a:	2016      	movs	r0, #22
   9db7c:	4b08      	ldr	r3, [pc, #32]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9db7e:	4798      	blx	r3
   9db80:	4603      	mov	r3, r0
   9db82:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   9db84:	f107 0314 	add.w	r3, r7, #20
   9db88:	3305      	adds	r3, #5
   9db8a:	4619      	mov	r1, r3
   9db8c:	2017      	movs	r0, #23
   9db8e:	4b04      	ldr	r3, [pc, #16]	; (9dba0 <Cl_Dprep_setdata+0x3a4>)
   9db90:	4798      	blx	r3
   9db92:	4603      	mov	r3, r0
   9db94:	77fb      	strb	r3, [r7, #31]
					break;
   9db96:	e1ca      	b.n	9df2e <Cl_Dprep_setdata+0x732>
   9db98:	20072f2c 	.word	0x20072f2c
   9db9c:	00097145 	.word	0x00097145
   9dba0:	0009710d 	.word	0x0009710d
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   9dba4:	1d3b      	adds	r3, r7, #4
   9dba6:	2202      	movs	r2, #2
   9dba8:	4619      	mov	r1, r3
   9dbaa:	2007      	movs	r0, #7
   9dbac:	4bc1      	ldr	r3, [pc, #772]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dbae:	4798      	blx	r3
   9dbb0:	4603      	mov	r3, r0
   9dbb2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dbb4:	1d3b      	adds	r3, r7, #4
   9dbb6:	3302      	adds	r3, #2
   9dbb8:	2202      	movs	r2, #2
   9dbba:	4619      	mov	r1, r3
   9dbbc:	2018      	movs	r0, #24
   9dbbe:	4bbd      	ldr	r3, [pc, #756]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dbc0:	4798      	blx	r3
   9dbc2:	4603      	mov	r3, r0
   9dbc4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dbc6:	1d3b      	adds	r3, r7, #4
   9dbc8:	3304      	adds	r3, #4
   9dbca:	2202      	movs	r2, #2
   9dbcc:	4619      	mov	r1, r3
   9dbce:	2019      	movs	r0, #25
   9dbd0:	4bb8      	ldr	r3, [pc, #736]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dbd2:	4798      	blx	r3
   9dbd4:	4603      	mov	r3, r0
   9dbd6:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   9dbd8:	2316      	movs	r3, #22
   9dbda:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9dbdc:	f107 0314 	add.w	r3, r7, #20
   9dbe0:	3301      	adds	r3, #1
   9dbe2:	4619      	mov	r1, r3
   9dbe4:	2007      	movs	r0, #7
   9dbe6:	4bb4      	ldr	r3, [pc, #720]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dbe8:	4798      	blx	r3
   9dbea:	4603      	mov	r3, r0
   9dbec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9dbee:	f107 0314 	add.w	r3, r7, #20
   9dbf2:	3303      	adds	r3, #3
   9dbf4:	4619      	mov	r1, r3
   9dbf6:	2018      	movs	r0, #24
   9dbf8:	4baf      	ldr	r3, [pc, #700]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dbfa:	4798      	blx	r3
   9dbfc:	4603      	mov	r3, r0
   9dbfe:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9dc00:	f107 0314 	add.w	r3, r7, #20
   9dc04:	3305      	adds	r3, #5
   9dc06:	4619      	mov	r1, r3
   9dc08:	2019      	movs	r0, #25
   9dc0a:	4bab      	ldr	r3, [pc, #684]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dc0c:	4798      	blx	r3
   9dc0e:	4603      	mov	r3, r0
   9dc10:	77fb      	strb	r3, [r7, #31]
					break;
   9dc12:	e18c      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   9dc14:	1d3b      	adds	r3, r7, #4
   9dc16:	2202      	movs	r2, #2
   9dc18:	4619      	mov	r1, r3
   9dc1a:	2008      	movs	r0, #8
   9dc1c:	4ba5      	ldr	r3, [pc, #660]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dc1e:	4798      	blx	r3
   9dc20:	4603      	mov	r3, r0
   9dc22:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dc24:	1d3b      	adds	r3, r7, #4
   9dc26:	3302      	adds	r3, #2
   9dc28:	2202      	movs	r2, #2
   9dc2a:	4619      	mov	r1, r3
   9dc2c:	201a      	movs	r0, #26
   9dc2e:	4ba1      	ldr	r3, [pc, #644]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dc30:	4798      	blx	r3
   9dc32:	4603      	mov	r3, r0
   9dc34:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dc36:	1d3b      	adds	r3, r7, #4
   9dc38:	3304      	adds	r3, #4
   9dc3a:	2202      	movs	r2, #2
   9dc3c:	4619      	mov	r1, r3
   9dc3e:	201b      	movs	r0, #27
   9dc40:	4b9c      	ldr	r3, [pc, #624]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dc42:	4798      	blx	r3
   9dc44:	4603      	mov	r3, r0
   9dc46:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   9dc48:	2317      	movs	r3, #23
   9dc4a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9dc4c:	f107 0314 	add.w	r3, r7, #20
   9dc50:	3301      	adds	r3, #1
   9dc52:	4619      	mov	r1, r3
   9dc54:	2008      	movs	r0, #8
   9dc56:	4b98      	ldr	r3, [pc, #608]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dc58:	4798      	blx	r3
   9dc5a:	4603      	mov	r3, r0
   9dc5c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9dc5e:	f107 0314 	add.w	r3, r7, #20
   9dc62:	3303      	adds	r3, #3
   9dc64:	4619      	mov	r1, r3
   9dc66:	201a      	movs	r0, #26
   9dc68:	4b93      	ldr	r3, [pc, #588]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dc6a:	4798      	blx	r3
   9dc6c:	4603      	mov	r3, r0
   9dc6e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9dc70:	f107 0314 	add.w	r3, r7, #20
   9dc74:	3305      	adds	r3, #5
   9dc76:	4619      	mov	r1, r3
   9dc78:	201b      	movs	r0, #27
   9dc7a:	4b8f      	ldr	r3, [pc, #572]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dc7c:	4798      	blx	r3
   9dc7e:	4603      	mov	r3, r0
   9dc80:	77fb      	strb	r3, [r7, #31]
					break;
   9dc82:	e154      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   9dc84:	1d3b      	adds	r3, r7, #4
   9dc86:	2202      	movs	r2, #2
   9dc88:	4619      	mov	r1, r3
   9dc8a:	2009      	movs	r0, #9
   9dc8c:	4b89      	ldr	r3, [pc, #548]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dc8e:	4798      	blx	r3
   9dc90:	4603      	mov	r3, r0
   9dc92:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   9dc94:	1d3b      	adds	r3, r7, #4
   9dc96:	2202      	movs	r2, #2
   9dc98:	4619      	mov	r1, r3
   9dc9a:	201c      	movs	r0, #28
   9dc9c:	4b85      	ldr	r3, [pc, #532]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dc9e:	4798      	blx	r3
   9dca0:	4603      	mov	r3, r0
   9dca2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dca4:	1d3b      	adds	r3, r7, #4
   9dca6:	3304      	adds	r3, #4
   9dca8:	2202      	movs	r2, #2
   9dcaa:	4619      	mov	r1, r3
   9dcac:	201d      	movs	r0, #29
   9dcae:	4b81      	ldr	r3, [pc, #516]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dcb0:	4798      	blx	r3
   9dcb2:	4603      	mov	r3, r0
   9dcb4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   9dcb6:	2318      	movs	r3, #24
   9dcb8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   9dcba:	f107 0314 	add.w	r3, r7, #20
   9dcbe:	3301      	adds	r3, #1
   9dcc0:	4619      	mov	r1, r3
   9dcc2:	2009      	movs	r0, #9
   9dcc4:	4b7c      	ldr	r3, [pc, #496]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dcc6:	4798      	blx	r3
   9dcc8:	4603      	mov	r3, r0
   9dcca:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   9dccc:	f107 0314 	add.w	r3, r7, #20
   9dcd0:	3303      	adds	r3, #3
   9dcd2:	4619      	mov	r1, r3
   9dcd4:	201c      	movs	r0, #28
   9dcd6:	4b78      	ldr	r3, [pc, #480]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dcd8:	4798      	blx	r3
   9dcda:	4603      	mov	r3, r0
   9dcdc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   9dcde:	f107 0314 	add.w	r3, r7, #20
   9dce2:	3305      	adds	r3, #5
   9dce4:	4619      	mov	r1, r3
   9dce6:	201d      	movs	r0, #29
   9dce8:	4b73      	ldr	r3, [pc, #460]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dcea:	4798      	blx	r3
   9dcec:	4603      	mov	r3, r0
   9dcee:	77fb      	strb	r3, [r7, #31]
					break;
   9dcf0:	e11d      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   9dcf2:	1d3b      	adds	r3, r7, #4
   9dcf4:	2202      	movs	r2, #2
   9dcf6:	4619      	mov	r1, r3
   9dcf8:	200a      	movs	r0, #10
   9dcfa:	4b6e      	ldr	r3, [pc, #440]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dcfc:	4798      	blx	r3
   9dcfe:	4603      	mov	r3, r0
   9dd00:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dd02:	1d3b      	adds	r3, r7, #4
   9dd04:	3302      	adds	r3, #2
   9dd06:	2202      	movs	r2, #2
   9dd08:	4619      	mov	r1, r3
   9dd0a:	201e      	movs	r0, #30
   9dd0c:	4b69      	ldr	r3, [pc, #420]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dd0e:	4798      	blx	r3
   9dd10:	4603      	mov	r3, r0
   9dd12:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dd14:	1d3b      	adds	r3, r7, #4
   9dd16:	3304      	adds	r3, #4
   9dd18:	2202      	movs	r2, #2
   9dd1a:	4619      	mov	r1, r3
   9dd1c:	201f      	movs	r0, #31
   9dd1e:	4b65      	ldr	r3, [pc, #404]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dd20:	4798      	blx	r3
   9dd22:	4603      	mov	r3, r0
   9dd24:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   9dd26:	2319      	movs	r3, #25
   9dd28:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9dd2a:	f107 0314 	add.w	r3, r7, #20
   9dd2e:	3301      	adds	r3, #1
   9dd30:	4619      	mov	r1, r3
   9dd32:	200a      	movs	r0, #10
   9dd34:	4b60      	ldr	r3, [pc, #384]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dd36:	4798      	blx	r3
   9dd38:	4603      	mov	r3, r0
   9dd3a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   9dd3c:	f107 0314 	add.w	r3, r7, #20
   9dd40:	3303      	adds	r3, #3
   9dd42:	4619      	mov	r1, r3
   9dd44:	201e      	movs	r0, #30
   9dd46:	4b5c      	ldr	r3, [pc, #368]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dd48:	4798      	blx	r3
   9dd4a:	4603      	mov	r3, r0
   9dd4c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   9dd4e:	f107 0314 	add.w	r3, r7, #20
   9dd52:	3305      	adds	r3, #5
   9dd54:	4619      	mov	r1, r3
   9dd56:	201f      	movs	r0, #31
   9dd58:	4b57      	ldr	r3, [pc, #348]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dd5a:	4798      	blx	r3
   9dd5c:	4603      	mov	r3, r0
   9dd5e:	77fb      	strb	r3, [r7, #31]
					break;
   9dd60:	e0e5      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   9dd62:	1d3b      	adds	r3, r7, #4
   9dd64:	2202      	movs	r2, #2
   9dd66:	4619      	mov	r1, r3
   9dd68:	200b      	movs	r0, #11
   9dd6a:	4b52      	ldr	r3, [pc, #328]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dd6c:	4798      	blx	r3
   9dd6e:	4603      	mov	r3, r0
   9dd70:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dd72:	1d3b      	adds	r3, r7, #4
   9dd74:	3302      	adds	r3, #2
   9dd76:	2202      	movs	r2, #2
   9dd78:	4619      	mov	r1, r3
   9dd7a:	2020      	movs	r0, #32
   9dd7c:	4b4d      	ldr	r3, [pc, #308]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dd7e:	4798      	blx	r3
   9dd80:	4603      	mov	r3, r0
   9dd82:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dd84:	1d3b      	adds	r3, r7, #4
   9dd86:	3304      	adds	r3, #4
   9dd88:	2202      	movs	r2, #2
   9dd8a:	4619      	mov	r1, r3
   9dd8c:	2021      	movs	r0, #33	; 0x21
   9dd8e:	4b49      	ldr	r3, [pc, #292]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dd90:	4798      	blx	r3
   9dd92:	4603      	mov	r3, r0
   9dd94:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   9dd96:	231a      	movs	r3, #26
   9dd98:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9dd9a:	f107 0314 	add.w	r3, r7, #20
   9dd9e:	3301      	adds	r3, #1
   9dda0:	4619      	mov	r1, r3
   9dda2:	200b      	movs	r0, #11
   9dda4:	4b44      	ldr	r3, [pc, #272]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9dda6:	4798      	blx	r3
   9dda8:	4603      	mov	r3, r0
   9ddaa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   9ddac:	f107 0314 	add.w	r3, r7, #20
   9ddb0:	3303      	adds	r3, #3
   9ddb2:	4619      	mov	r1, r3
   9ddb4:	2020      	movs	r0, #32
   9ddb6:	4b40      	ldr	r3, [pc, #256]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9ddb8:	4798      	blx	r3
   9ddba:	4603      	mov	r3, r0
   9ddbc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   9ddbe:	f107 0314 	add.w	r3, r7, #20
   9ddc2:	3305      	adds	r3, #5
   9ddc4:	4619      	mov	r1, r3
   9ddc6:	2021      	movs	r0, #33	; 0x21
   9ddc8:	4b3b      	ldr	r3, [pc, #236]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9ddca:	4798      	blx	r3
   9ddcc:	4603      	mov	r3, r0
   9ddce:	77fb      	strb	r3, [r7, #31]
					break;
   9ddd0:	e0ad      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   9ddd2:	1d3b      	adds	r3, r7, #4
   9ddd4:	2202      	movs	r2, #2
   9ddd6:	4619      	mov	r1, r3
   9ddd8:	200c      	movs	r0, #12
   9ddda:	4b36      	ldr	r3, [pc, #216]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9dddc:	4798      	blx	r3
   9ddde:	4603      	mov	r3, r0
   9dde0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9dde2:	1d3b      	adds	r3, r7, #4
   9dde4:	3302      	adds	r3, #2
   9dde6:	2202      	movs	r2, #2
   9dde8:	4619      	mov	r1, r3
   9ddea:	2022      	movs	r0, #34	; 0x22
   9ddec:	4b31      	ldr	r3, [pc, #196]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9ddee:	4798      	blx	r3
   9ddf0:	4603      	mov	r3, r0
   9ddf2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9ddf4:	1d3b      	adds	r3, r7, #4
   9ddf6:	3304      	adds	r3, #4
   9ddf8:	2202      	movs	r2, #2
   9ddfa:	4619      	mov	r1, r3
   9ddfc:	2023      	movs	r0, #35	; 0x23
   9ddfe:	4b2d      	ldr	r3, [pc, #180]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9de00:	4798      	blx	r3
   9de02:	4603      	mov	r3, r0
   9de04:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   9de06:	231b      	movs	r3, #27
   9de08:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9de0a:	f107 0314 	add.w	r3, r7, #20
   9de0e:	3301      	adds	r3, #1
   9de10:	4619      	mov	r1, r3
   9de12:	200c      	movs	r0, #12
   9de14:	4b28      	ldr	r3, [pc, #160]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9de16:	4798      	blx	r3
   9de18:	4603      	mov	r3, r0
   9de1a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   9de1c:	f107 0314 	add.w	r3, r7, #20
   9de20:	3303      	adds	r3, #3
   9de22:	4619      	mov	r1, r3
   9de24:	2022      	movs	r0, #34	; 0x22
   9de26:	4b24      	ldr	r3, [pc, #144]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9de28:	4798      	blx	r3
   9de2a:	4603      	mov	r3, r0
   9de2c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   9de2e:	f107 0314 	add.w	r3, r7, #20
   9de32:	3305      	adds	r3, #5
   9de34:	4619      	mov	r1, r3
   9de36:	2023      	movs	r0, #35	; 0x23
   9de38:	4b1f      	ldr	r3, [pc, #124]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9de3a:	4798      	blx	r3
   9de3c:	4603      	mov	r3, r0
   9de3e:	77fb      	strb	r3, [r7, #31]
					break;
   9de40:	e075      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   9de42:	1d3b      	adds	r3, r7, #4
   9de44:	2202      	movs	r2, #2
   9de46:	4619      	mov	r1, r3
   9de48:	200f      	movs	r0, #15
   9de4a:	4b1a      	ldr	r3, [pc, #104]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9de4c:	4798      	blx	r3
   9de4e:	4603      	mov	r3, r0
   9de50:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9de52:	1d3b      	adds	r3, r7, #4
   9de54:	3302      	adds	r3, #2
   9de56:	2202      	movs	r2, #2
   9de58:	4619      	mov	r1, r3
   9de5a:	2024      	movs	r0, #36	; 0x24
   9de5c:	4b15      	ldr	r3, [pc, #84]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9de5e:	4798      	blx	r3
   9de60:	4603      	mov	r3, r0
   9de62:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9de64:	1d3b      	adds	r3, r7, #4
   9de66:	3304      	adds	r3, #4
   9de68:	2202      	movs	r2, #2
   9de6a:	4619      	mov	r1, r3
   9de6c:	2025      	movs	r0, #37	; 0x25
   9de6e:	4b11      	ldr	r3, [pc, #68]	; (9deb4 <Cl_Dprep_setdata+0x6b8>)
   9de70:	4798      	blx	r3
   9de72:	4603      	mov	r3, r0
   9de74:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   9de76:	231c      	movs	r3, #28
   9de78:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9de7a:	f107 0314 	add.w	r3, r7, #20
   9de7e:	3301      	adds	r3, #1
   9de80:	4619      	mov	r1, r3
   9de82:	200f      	movs	r0, #15
   9de84:	4b0c      	ldr	r3, [pc, #48]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9de86:	4798      	blx	r3
   9de88:	4603      	mov	r3, r0
   9de8a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   9de8c:	f107 0314 	add.w	r3, r7, #20
   9de90:	3303      	adds	r3, #3
   9de92:	4619      	mov	r1, r3
   9de94:	2024      	movs	r0, #36	; 0x24
   9de96:	4b08      	ldr	r3, [pc, #32]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9de98:	4798      	blx	r3
   9de9a:	4603      	mov	r3, r0
   9de9c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   9de9e:	f107 0314 	add.w	r3, r7, #20
   9dea2:	3305      	adds	r3, #5
   9dea4:	4619      	mov	r1, r3
   9dea6:	2025      	movs	r0, #37	; 0x25
   9dea8:	4b03      	ldr	r3, [pc, #12]	; (9deb8 <Cl_Dprep_setdata+0x6bc>)
   9deaa:	4798      	blx	r3
   9deac:	4603      	mov	r3, r0
   9deae:	77fb      	strb	r3, [r7, #31]
					break;
   9deb0:	e03d      	b.n	9df2e <Cl_Dprep_setdata+0x732>
   9deb2:	bf00      	nop
   9deb4:	00097145 	.word	0x00097145
   9deb8:	0009710d 	.word	0x0009710d
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   9debc:	1d3b      	adds	r3, r7, #4
   9debe:	2202      	movs	r2, #2
   9dec0:	4619      	mov	r1, r3
   9dec2:	200d      	movs	r0, #13
   9dec4:	4b22      	ldr	r3, [pc, #136]	; (9df50 <Cl_Dprep_setdata+0x754>)
   9dec6:	4798      	blx	r3
   9dec8:	4603      	mov	r3, r0
   9deca:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9decc:	1d3b      	adds	r3, r7, #4
   9dece:	3302      	adds	r3, #2
   9ded0:	2202      	movs	r2, #2
   9ded2:	4619      	mov	r1, r3
   9ded4:	2026      	movs	r0, #38	; 0x26
   9ded6:	4b1e      	ldr	r3, [pc, #120]	; (9df50 <Cl_Dprep_setdata+0x754>)
   9ded8:	4798      	blx	r3
   9deda:	4603      	mov	r3, r0
   9dedc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9dede:	1d3b      	adds	r3, r7, #4
   9dee0:	3304      	adds	r3, #4
   9dee2:	2202      	movs	r2, #2
   9dee4:	4619      	mov	r1, r3
   9dee6:	2027      	movs	r0, #39	; 0x27
   9dee8:	4b19      	ldr	r3, [pc, #100]	; (9df50 <Cl_Dprep_setdata+0x754>)
   9deea:	4798      	blx	r3
   9deec:	4603      	mov	r3, r0
   9deee:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   9def0:	231d      	movs	r3, #29
   9def2:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   9def4:	f107 0314 	add.w	r3, r7, #20
   9def8:	3301      	adds	r3, #1
   9defa:	4619      	mov	r1, r3
   9defc:	200d      	movs	r0, #13
   9defe:	4b15      	ldr	r3, [pc, #84]	; (9df54 <Cl_Dprep_setdata+0x758>)
   9df00:	4798      	blx	r3
   9df02:	4603      	mov	r3, r0
   9df04:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   9df06:	f107 0314 	add.w	r3, r7, #20
   9df0a:	3303      	adds	r3, #3
   9df0c:	4619      	mov	r1, r3
   9df0e:	2026      	movs	r0, #38	; 0x26
   9df10:	4b10      	ldr	r3, [pc, #64]	; (9df54 <Cl_Dprep_setdata+0x758>)
   9df12:	4798      	blx	r3
   9df14:	4603      	mov	r3, r0
   9df16:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   9df18:	f107 0314 	add.w	r3, r7, #20
   9df1c:	3305      	adds	r3, #5
   9df1e:	4619      	mov	r1, r3
   9df20:	2027      	movs	r0, #39	; 0x27
   9df22:	4b0c      	ldr	r3, [pc, #48]	; (9df54 <Cl_Dprep_setdata+0x758>)
   9df24:	4798      	blx	r3
   9df26:	4603      	mov	r3, r0
   9df28:	77fb      	strb	r3, [r7, #31]
					break;
   9df2a:	e000      	b.n	9df2e <Cl_Dprep_setdata+0x732>
					
					 default:
					 break;
   9df2c:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   9df2e:	2316      	movs	r3, #22
   9df30:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   9df32:	7bba      	ldrb	r2, [r7, #14]
   9df34:	f107 0114 	add.w	r1, r7, #20
   9df38:	7fbb      	ldrb	r3, [r7, #30]
   9df3a:	4618      	mov	r0, r3
   9df3c:	4b06      	ldr	r3, [pc, #24]	; (9df58 <Cl_Dprep_setdata+0x75c>)
   9df3e:	4798      	blx	r3
   9df40:	4603      	mov	r3, r0
   9df42:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   9df44:	2300      	movs	r3, #0
}
   9df46:	4618      	mov	r0, r3
   9df48:	3724      	adds	r7, #36	; 0x24
   9df4a:	46bd      	mov	sp, r7
   9df4c:	bd90      	pop	{r4, r7, pc}
   9df4e:	bf00      	nop
   9df50:	00097145 	.word	0x00097145
   9df54:	0009710d 	.word	0x0009710d
   9df58:	00098601 	.word	0x00098601

0009df5c <Cl_Dprep_StartPreparation>:

Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   9df5c:	b590      	push	{r4, r7, lr}
   9df5e:	b089      	sub	sp, #36	; 0x24
   9df60:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9df62:	2300      	movs	r3, #0
   9df64:	75bb      	strb	r3, [r7, #22]
			Cl_Uint8Type data =0;
   9df66:	2300      	movs	r3, #0
   9df68:	737b      	strb	r3, [r7, #13]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   9df6a:	2300      	movs	r3, #0
   9df6c:	817b      	strh	r3, [r7, #10]
   9df6e:	2300      	movs	r3, #0
   9df70:	813b      	strh	r3, [r7, #8]
   9df72:	2300      	movs	r3, #0
   9df74:	80fb      	strh	r3, [r7, #6]
   9df76:	2300      	movs	r3, #0
   9df78:	80bb      	strh	r3, [r7, #4]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   9df7a:	2301      	movs	r3, #1
   9df7c:	75fb      	strb	r3, [r7, #23]
					
				//Check for  dprep readiness and alarm status
				
				//Cl_checkdprepReadyness();
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_dprep_acidstatus);
   9df7e:	f107 030a 	add.w	r3, r7, #10
   9df82:	4619      	mov	r1, r3
   9df84:	2020      	movs	r0, #32
   9df86:	4baf      	ldr	r3, [pc, #700]	; (9e244 <Cl_Dprep_StartPreparation+0x2e8>)
   9df88:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_dprep_bicarbstatus);
   9df8a:	f107 0308 	add.w	r3, r7, #8
   9df8e:	4619      	mov	r1, r3
   9df90:	2021      	movs	r0, #33	; 0x21
   9df92:	4bac      	ldr	r3, [pc, #688]	; (9e244 <Cl_Dprep_StartPreparation+0x2e8>)
   9df94:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_dprep_holder1status);
   9df96:	1dbb      	adds	r3, r7, #6
   9df98:	4619      	mov	r1, r3
   9df9a:	2003      	movs	r0, #3
   9df9c:	4ba9      	ldr	r3, [pc, #676]	; (9e244 <Cl_Dprep_StartPreparation+0x2e8>)
   9df9e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_dprep_holder2status);
   9dfa0:	1d3b      	adds	r3, r7, #4
   9dfa2:	4619      	mov	r1, r3
   9dfa4:	2004      	movs	r0, #4
   9dfa6:	4ba7      	ldr	r3, [pc, #668]	; (9e244 <Cl_Dprep_StartPreparation+0x2e8>)
   9dfa8:	4798      	blx	r3
				 if(cl_dprep_acidstatus == ACID_INLET_CLOSED )
   9dfaa:	897b      	ldrh	r3, [r7, #10]
   9dfac:	2b01      	cmp	r3, #1
   9dfae:	d104      	bne.n	9dfba <Cl_Dprep_StartPreparation+0x5e>
				 {
					 Cl_dprepSendAlarm(ACID_IN_CLOSED);
   9dfb0:	202a      	movs	r0, #42	; 0x2a
   9dfb2:	4ba5      	ldr	r3, [pc, #660]	; (9e248 <Cl_Dprep_StartPreparation+0x2ec>)
   9dfb4:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   9dfb6:	2300      	movs	r3, #0
   9dfb8:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_dprep_bicarbstatus == BICARB_INLET_CLOSED )
   9dfba:	893b      	ldrh	r3, [r7, #8]
   9dfbc:	2b01      	cmp	r3, #1
   9dfbe:	d104      	bne.n	9dfca <Cl_Dprep_StartPreparation+0x6e>
				 {
					  Cl_dprepSendAlarm(BICARB_IN_CLOSED);
   9dfc0:	202c      	movs	r0, #44	; 0x2c
   9dfc2:	4ba1      	ldr	r3, [pc, #644]	; (9e248 <Cl_Dprep_StartPreparation+0x2ec>)
   9dfc4:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   9dfc6:	2300      	movs	r3, #0
   9dfc8:	75fb      	strb	r3, [r7, #23]
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
					 Cl_dprepreaduinessflag = false;
				 }		
				 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   9dfca:	7dfb      	ldrb	r3, [r7, #23]
   9dfcc:	f083 0301 	eor.w	r3, r3, #1
   9dfd0:	b2db      	uxtb	r3, r3
   9dfd2:	2b00      	cmp	r3, #0
   9dfd4:	d001      	beq.n	9dfda <Cl_Dprep_StartPreparation+0x7e>
				 {
					 return CL_REJECTED;
   9dfd6:	2303      	movs	r3, #3
   9dfd8:	e18f      	b.n	9e2fa <Cl_Dprep_StartPreparation+0x39e>
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   9dfda:	4b9c      	ldr	r3, [pc, #624]	; (9e24c <Cl_Dprep_StartPreparation+0x2f0>)
   9dfdc:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9dfde:	4b9c      	ldr	r3, [pc, #624]	; (9e250 <Cl_Dprep_StartPreparation+0x2f4>)
   9dfe0:	4798      	blx	r3
   9dfe2:	4603      	mov	r3, r0
   9dfe4:	75bb      	strb	r3, [r7, #22]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   9dfe6:	4b9b      	ldr	r3, [pc, #620]	; (9e254 <Cl_Dprep_StartPreparation+0x2f8>)
   9dfe8:	4798      	blx	r3
							data = 1;
   9dfea:	2301      	movs	r3, #1
   9dfec:	737b      	strb	r3, [r7, #13]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   9dfee:	f107 030d 	add.w	r3, r7, #13
   9dff2:	2200      	movs	r2, #0
   9dff4:	4619      	mov	r1, r3
   9dff6:	200c      	movs	r0, #12
   9dff8:	4b97      	ldr	r3, [pc, #604]	; (9e258 <Cl_Dprep_StartPreparation+0x2fc>)
   9dffa:	4798      	blx	r3
   9dffc:	4603      	mov	r3, r0
   9dffe:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   9e000:	f107 030d 	add.w	r3, r7, #13
   9e004:	2200      	movs	r2, #0
   9e006:	4619      	mov	r1, r3
   9e008:	201e      	movs	r0, #30
   9e00a:	4b93      	ldr	r3, [pc, #588]	; (9e258 <Cl_Dprep_StartPreparation+0x2fc>)
   9e00c:	4798      	blx	r3
   9e00e:	4603      	mov	r3, r0
   9e010:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9e012:	2300      	movs	r3, #0
   9e014:	9300      	str	r3, [sp, #0]
   9e016:	f04f 0300 	mov.w	r3, #0
   9e01a:	f04f 0200 	mov.w	r2, #0
   9e01e:	2101      	movs	r1, #1
   9e020:	202a      	movs	r0, #42	; 0x2a
   9e022:	4c8e      	ldr	r4, [pc, #568]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e024:	47a0      	blx	r4
   9e026:	4603      	mov	r3, r0
   9e028:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9e02a:	2300      	movs	r3, #0
   9e02c:	9300      	str	r3, [sp, #0]
   9e02e:	f04f 0300 	mov.w	r3, #0
   9e032:	f04f 0200 	mov.w	r2, #0
   9e036:	2101      	movs	r1, #1
   9e038:	202c      	movs	r0, #44	; 0x2c
   9e03a:	4c88      	ldr	r4, [pc, #544]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e03c:	47a0      	blx	r4
   9e03e:	4603      	mov	r3, r0
   9e040:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9e042:	2001      	movs	r0, #1
   9e044:	4b86      	ldr	r3, [pc, #536]	; (9e260 <Cl_Dprep_StartPreparation+0x304>)
   9e046:	4798      	blx	r3
   9e048:	4603      	mov	r3, r0
   9e04a:	75bb      	strb	r3, [r7, #22]
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_LOW,0,0,0);
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_LOW,0,0,0);
							
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9e04c:	2300      	movs	r3, #0
   9e04e:	9300      	str	r3, [sp, #0]
   9e050:	f04f 0300 	mov.w	r3, #0
   9e054:	f04f 0200 	mov.w	r2, #0
   9e058:	2101      	movs	r1, #1
   9e05a:	2004      	movs	r0, #4
   9e05c:	4c7f      	ldr	r4, [pc, #508]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e05e:	47a0      	blx	r4
   9e060:	4603      	mov	r3, r0
   9e062:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9e064:	2300      	movs	r3, #0
   9e066:	9300      	str	r3, [sp, #0]
   9e068:	f04f 0300 	mov.w	r3, #0
   9e06c:	f04f 0200 	mov.w	r2, #0
   9e070:	2101      	movs	r1, #1
   9e072:	2003      	movs	r0, #3
   9e074:	4c79      	ldr	r4, [pc, #484]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e076:	47a0      	blx	r4
   9e078:	4603      	mov	r3, r0
   9e07a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,14.0,0,0);
   9e07c:	2300      	movs	r3, #0
   9e07e:	9300      	str	r3, [sp, #0]
   9e080:	f04f 0300 	mov.w	r3, #0
   9e084:	4a77      	ldr	r2, [pc, #476]	; (9e264 <Cl_Dprep_StartPreparation+0x308>)
   9e086:	2102      	movs	r1, #2
   9e088:	2008      	movs	r0, #8
   9e08a:	4c74      	ldr	r4, [pc, #464]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e08c:	47a0      	blx	r4
   9e08e:	4603      	mov	r3, r0
   9e090:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,40,0,0);
   9e092:	2300      	movs	r3, #0
   9e094:	9300      	str	r3, [sp, #0]
   9e096:	f04f 0300 	mov.w	r3, #0
   9e09a:	4a73      	ldr	r2, [pc, #460]	; (9e268 <Cl_Dprep_StartPreparation+0x30c>)
   9e09c:	2102      	movs	r1, #2
   9e09e:	200f      	movs	r0, #15
   9e0a0:	4c6e      	ldr	r4, [pc, #440]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e0a2:	47a0      	blx	r4
   9e0a4:	4603      	mov	r3, r0
   9e0a6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,40,0,0);
   9e0a8:	2300      	movs	r3, #0
   9e0aa:	9300      	str	r3, [sp, #0]
   9e0ac:	f04f 0300 	mov.w	r3, #0
   9e0b0:	4a6d      	ldr	r2, [pc, #436]	; (9e268 <Cl_Dprep_StartPreparation+0x30c>)
   9e0b2:	2102      	movs	r1, #2
   9e0b4:	2011      	movs	r0, #17
   9e0b6:	4c69      	ldr	r4, [pc, #420]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e0b8:	47a0      	blx	r4
   9e0ba:	4603      	mov	r3, r0
   9e0bc:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,40,0,0);
   9e0be:	2300      	movs	r3, #0
   9e0c0:	9300      	str	r3, [sp, #0]
   9e0c2:	f04f 0300 	mov.w	r3, #0
   9e0c6:	4a68      	ldr	r2, [pc, #416]	; (9e268 <Cl_Dprep_StartPreparation+0x30c>)
   9e0c8:	2102      	movs	r1, #2
   9e0ca:	2013      	movs	r0, #19
   9e0cc:	4c63      	ldr	r4, [pc, #396]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e0ce:	47a0      	blx	r4
   9e0d0:	4603      	mov	r3, r0
   9e0d2:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e0d4:	2300      	movs	r3, #0
   9e0d6:	9300      	str	r3, [sp, #0]
   9e0d8:	f04f 0300 	mov.w	r3, #0
   9e0dc:	4a63      	ldr	r2, [pc, #396]	; (9e26c <Cl_Dprep_StartPreparation+0x310>)
   9e0de:	2102      	movs	r1, #2
   9e0e0:	2015      	movs	r0, #21
   9e0e2:	4c5e      	ldr	r4, [pc, #376]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e0e4:	47a0      	blx	r4
   9e0e6:	4603      	mov	r3, r0
   9e0e8:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e0ea:	2300      	movs	r3, #0
   9e0ec:	9300      	str	r3, [sp, #0]
   9e0ee:	f04f 0300 	mov.w	r3, #0
   9e0f2:	4a5e      	ldr	r2, [pc, #376]	; (9e26c <Cl_Dprep_StartPreparation+0x310>)
   9e0f4:	2102      	movs	r1, #2
   9e0f6:	2017      	movs	r0, #23
   9e0f8:	4c58      	ldr	r4, [pc, #352]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e0fa:	47a0      	blx	r4
   9e0fc:	4603      	mov	r3, r0
   9e0fe:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9e100:	2300      	movs	r3, #0
   9e102:	9300      	str	r3, [sp, #0]
   9e104:	f04f 0300 	mov.w	r3, #0
   9e108:	4a59      	ldr	r2, [pc, #356]	; (9e270 <Cl_Dprep_StartPreparation+0x314>)
   9e10a:	2102      	movs	r1, #2
   9e10c:	2027      	movs	r0, #39	; 0x27
   9e10e:	4c53      	ldr	r4, [pc, #332]	; (9e25c <Cl_Dprep_StartPreparation+0x300>)
   9e110:	47a0      	blx	r4
   9e112:	4603      	mov	r3, r0
   9e114:	75bb      	strb	r3, [r7, #22]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9e116:	2101      	movs	r1, #1
   9e118:	203d      	movs	r0, #61	; 0x3d
   9e11a:	4b56      	ldr	r3, [pc, #344]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e11c:	4798      	blx	r3
   9e11e:	4603      	mov	r3, r0
   9e120:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   9e122:	2101      	movs	r1, #1
   9e124:	203e      	movs	r0, #62	; 0x3e
   9e126:	4b53      	ldr	r3, [pc, #332]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e128:	4798      	blx	r3
   9e12a:	4603      	mov	r3, r0
   9e12c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatevenousclamp();
   9e12e:	4b52      	ldr	r3, [pc, #328]	; (9e278 <Cl_Dprep_StartPreparation+0x31c>)
   9e130:	4798      	blx	r3
   9e132:	4603      	mov	r3, r0
   9e134:	75bb      	strb	r3, [r7, #22]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   9e136:	2101      	movs	r1, #1
   9e138:	202a      	movs	r0, #42	; 0x2a
   9e13a:	4b4e      	ldr	r3, [pc, #312]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e13c:	4798      	blx	r3
   9e13e:	4603      	mov	r3, r0
   9e140:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   9e142:	2101      	movs	r1, #1
   9e144:	202c      	movs	r0, #44	; 0x2c
   9e146:	4b4b      	ldr	r3, [pc, #300]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e148:	4798      	blx	r3
   9e14a:	4603      	mov	r3, r0
   9e14c:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9e14e:	2101      	movs	r1, #1
   9e150:	2015      	movs	r0, #21
   9e152:	4b48      	ldr	r3, [pc, #288]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e154:	4798      	blx	r3
   9e156:	4603      	mov	r3, r0
   9e158:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9e15a:	2101      	movs	r1, #1
   9e15c:	2017      	movs	r0, #23
   9e15e:	4b45      	ldr	r3, [pc, #276]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e160:	4798      	blx	r3
   9e162:	4603      	mov	r3, r0
   9e164:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9e166:	2101      	movs	r1, #1
   9e168:	2027      	movs	r0, #39	; 0x27
   9e16a:	4b42      	ldr	r3, [pc, #264]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e16c:	4798      	blx	r3
   9e16e:	4603      	mov	r3, r0
   9e170:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9e172:	2101      	movs	r1, #1
   9e174:	200f      	movs	r0, #15
   9e176:	4b3f      	ldr	r3, [pc, #252]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e178:	4798      	blx	r3
   9e17a:	4603      	mov	r3, r0
   9e17c:	75bb      	strb	r3, [r7, #22]
							//prepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9e17e:	2101      	movs	r1, #1
   9e180:	2011      	movs	r0, #17
   9e182:	4b3c      	ldr	r3, [pc, #240]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e184:	4798      	blx	r3
   9e186:	4603      	mov	r3, r0
   9e188:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   9e18a:	2101      	movs	r1, #1
   9e18c:	2013      	movs	r0, #19
   9e18e:	4b39      	ldr	r3, [pc, #228]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e190:	4798      	blx	r3
   9e192:	4603      	mov	r3, r0
   9e194:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
							
						
							if(Current_sense_trigger)
   9e196:	4b39      	ldr	r3, [pc, #228]	; (9e27c <Cl_Dprep_StartPreparation+0x320>)
   9e198:	781b      	ldrb	r3, [r3, #0]
   9e19a:	2b00      	cmp	r3, #0
   9e19c:	d005      	beq.n	9e1aa <Cl_Dprep_StartPreparation+0x24e>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9e19e:	2101      	movs	r1, #1
   9e1a0:	203c      	movs	r0, #60	; 0x3c
   9e1a2:	4b34      	ldr	r3, [pc, #208]	; (9e274 <Cl_Dprep_StartPreparation+0x318>)
   9e1a4:	4798      	blx	r3
   9e1a6:	4603      	mov	r3, r0
   9e1a8:	75bb      	strb	r3, [r7, #22]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9e1aa:	2001      	movs	r0, #1
   9e1ac:	4b34      	ldr	r3, [pc, #208]	; (9e280 <Cl_Dprep_StartPreparation+0x324>)
   9e1ae:	4798      	blx	r3
   9e1b0:	4603      	mov	r3, r0
   9e1b2:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9e1b4:	2002      	movs	r0, #2
   9e1b6:	4b32      	ldr	r3, [pc, #200]	; (9e280 <Cl_Dprep_StartPreparation+0x324>)
   9e1b8:	4798      	blx	r3
   9e1ba:	4603      	mov	r3, r0
   9e1bc:	75bb      	strb	r3, [r7, #22]
							sv_cntrl_enable_bypass();
   9e1be:	4b31      	ldr	r3, [pc, #196]	; (9e284 <Cl_Dprep_StartPreparation+0x328>)
   9e1c0:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9e1c2:	4b31      	ldr	r3, [pc, #196]	; (9e288 <Cl_Dprep_StartPreparation+0x32c>)
   9e1c4:	2201      	movs	r2, #1
   9e1c6:	701a      	strb	r2, [r3, #0]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9e1c8:	200b      	movs	r0, #11
   9e1ca:	4b30      	ldr	r3, [pc, #192]	; (9e28c <Cl_Dprep_StartPreparation+0x330>)
   9e1cc:	4798      	blx	r3
   9e1ce:	4603      	mov	r3, r0
   9e1d0:	75bb      	strb	r3, [r7, #22]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   9e1d2:	4b2f      	ldr	r3, [pc, #188]	; (9e290 <Cl_Dprep_StartPreparation+0x334>)
   9e1d4:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   9e1d6:	4b2f      	ldr	r3, [pc, #188]	; (9e294 <Cl_Dprep_StartPreparation+0x338>)
   9e1d8:	695b      	ldr	r3, [r3, #20]
   9e1da:	613b      	str	r3, [r7, #16]
							Cl_Uint16Type potvalue = 0;
   9e1dc:	2300      	movs	r3, #0
   9e1de:	81fb      	strh	r3, [r7, #14]
							switch (temp)
   9e1e0:	693b      	ldr	r3, [r7, #16]
   9e1e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9e1e6:	d017      	beq.n	9e218 <Cl_Dprep_StartPreparation+0x2bc>
   9e1e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9e1ec:	d003      	beq.n	9e1f6 <Cl_Dprep_StartPreparation+0x29a>
   9e1ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9e1f2:	d057      	beq.n	9e2a4 <Cl_Dprep_StartPreparation+0x348>
   9e1f4:	e067      	b.n	9e2c6 <Cl_Dprep_StartPreparation+0x36a>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e1f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e1fa:	2002      	movs	r0, #2
   9e1fc:	4b26      	ldr	r3, [pc, #152]	; (9e298 <Cl_Dprep_StartPreparation+0x33c>)
   9e1fe:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1395);   //960
   9e200:	f240 5173 	movw	r1, #1395	; 0x573
   9e204:	2001      	movs	r0, #1
   9e206:	4b24      	ldr	r3, [pc, #144]	; (9e298 <Cl_Dprep_StartPreparation+0x33c>)
   9e208:	4798      	blx	r3
								potvalue = (612 * 1024)/10000;
   9e20a:	233e      	movs	r3, #62	; 0x3e
   9e20c:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   9e20e:	89fb      	ldrh	r3, [r7, #14]
   9e210:	4618      	mov	r0, r3
   9e212:	4b22      	ldr	r3, [pc, #136]	; (9e29c <Cl_Dprep_StartPreparation+0x340>)
   9e214:	4798      	blx	r3
								break;
   9e216:	e067      	b.n	9e2e8 <Cl_Dprep_StartPreparation+0x38c>
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9e218:	2203      	movs	r2, #3
   9e21a:	4921      	ldr	r1, [pc, #132]	; (9e2a0 <Cl_Dprep_StartPreparation+0x344>)
   9e21c:	2018      	movs	r0, #24
   9e21e:	4b0e      	ldr	r3, [pc, #56]	; (9e258 <Cl_Dprep_StartPreparation+0x2fc>)
   9e220:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e226:	2002      	movs	r0, #2
   9e228:	4b1b      	ldr	r3, [pc, #108]	; (9e298 <Cl_Dprep_StartPreparation+0x33c>)
   9e22a:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9e22c:	f240 414c 	movw	r1, #1100	; 0x44c
   9e230:	2001      	movs	r0, #1
   9e232:	4b19      	ldr	r3, [pc, #100]	; (9e298 <Cl_Dprep_StartPreparation+0x33c>)
   9e234:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9e236:	2344      	movs	r3, #68	; 0x44
   9e238:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   9e23a:	89fb      	ldrh	r3, [r7, #14]
   9e23c:	4618      	mov	r0, r3
   9e23e:	4b17      	ldr	r3, [pc, #92]	; (9e29c <Cl_Dprep_StartPreparation+0x340>)
   9e240:	4798      	blx	r3
								break;
   9e242:	e051      	b.n	9e2e8 <Cl_Dprep_StartPreparation+0x38c>
   9e244:	0008d499 	.word	0x0008d499
   9e248:	0009ca89 	.word	0x0009ca89
   9e24c:	00096b4d 	.word	0x00096b4d
   9e250:	0009cd91 	.word	0x0009cd91
   9e254:	0009d669 	.word	0x0009d669
   9e258:	00098601 	.word	0x00098601
   9e25c:	00082ea1 	.word	0x00082ea1
   9e260:	0009211d 	.word	0x0009211d
   9e264:	41600000 	.word	0x41600000
   9e268:	42200000 	.word	0x42200000
   9e26c:	43c80000 	.word	0x43c80000
   9e270:	447a0000 	.word	0x447a0000
   9e274:	00082efd 	.word	0x00082efd
   9e278:	000969c9 	.word	0x000969c9
   9e27c:	200709b2 	.word	0x200709b2
   9e280:	000967dd 	.word	0x000967dd
   9e284:	00096a29 	.word	0x00096a29
   9e288:	200727d0 	.word	0x200727d0
   9e28c:	00083325 	.word	0x00083325
   9e290:	00096c25 	.word	0x00096c25
   9e294:	20073138 	.word	0x20073138
   9e298:	000968f5 	.word	0x000968f5
   9e29c:	00096d29 	.word	0x00096d29
   9e2a0:	000a4b58 	.word	0x000a4b58
// 								potvalue = (2000 * 1024)/10000;
// 								sv_cs_setpotvalue(potvalue);
// 								break;
								
								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e2a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e2a8:	2002      	movs	r0, #2
   9e2aa:	4b16      	ldr	r3, [pc, #88]	; (9e304 <Cl_Dprep_StartPreparation+0x3a8>)
   9e2ac:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,640);
   9e2ae:	f44f 7120 	mov.w	r1, #640	; 0x280
   9e2b2:	2001      	movs	r0, #1
   9e2b4:	4b13      	ldr	r3, [pc, #76]	; (9e304 <Cl_Dprep_StartPreparation+0x3a8>)
   9e2b6:	4798      	blx	r3
								potvalue = (920 * 1024)/10000;
   9e2b8:	235e      	movs	r3, #94	; 0x5e
   9e2ba:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   9e2bc:	89fb      	ldrh	r3, [r7, #14]
   9e2be:	4618      	mov	r0, r3
   9e2c0:	4b11      	ldr	r3, [pc, #68]	; (9e308 <Cl_Dprep_StartPreparation+0x3ac>)
   9e2c2:	4798      	blx	r3
								break;
   9e2c4:	e010      	b.n	9e2e8 <Cl_Dprep_StartPreparation+0x38c>
// 								sv_cntrl_setpumpspeed(DCMOTOR1,210);
// 								potvalue = (1200 * 1024)/10000;
// 								sv_cs_setpotvalue(potvalue);
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e2c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e2ca:	2002      	movs	r0, #2
   9e2cc:	4b0d      	ldr	r3, [pc, #52]	; (9e304 <Cl_Dprep_StartPreparation+0x3a8>)
   9e2ce:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9e2d0:	f240 414c 	movw	r1, #1100	; 0x44c
   9e2d4:	2001      	movs	r0, #1
   9e2d6:	4b0b      	ldr	r3, [pc, #44]	; (9e304 <Cl_Dprep_StartPreparation+0x3a8>)
   9e2d8:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9e2da:	2344      	movs	r3, #68	; 0x44
   9e2dc:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   9e2de:	89fb      	ldrh	r3, [r7, #14]
   9e2e0:	4618      	mov	r0, r3
   9e2e2:	4b09      	ldr	r3, [pc, #36]	; (9e308 <Cl_Dprep_StartPreparation+0x3ac>)
   9e2e4:	4798      	blx	r3
								
								break;
   9e2e6:	bf00      	nop
							}
						//	#if 0
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9e2e8:	2001      	movs	r0, #1
   9e2ea:	4b08      	ldr	r3, [pc, #32]	; (9e30c <Cl_Dprep_StartPreparation+0x3b0>)
   9e2ec:	4798      	blx	r3
   9e2ee:	4603      	mov	r3, r0
   9e2f0:	75bb      	strb	r3, [r7, #22]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   9e2f2:	4b07      	ldr	r3, [pc, #28]	; (9e310 <Cl_Dprep_StartPreparation+0x3b4>)
   9e2f4:	2202      	movs	r2, #2
   9e2f6:	701a      	strb	r2, [r3, #0]
							
							return 0;
   9e2f8:	2300      	movs	r3, #0
				
	}
   9e2fa:	4618      	mov	r0, r3
   9e2fc:	371c      	adds	r7, #28
   9e2fe:	46bd      	mov	sp, r7
   9e300:	bd90      	pop	{r4, r7, pc}
   9e302:	bf00      	nop
   9e304:	000968f5 	.word	0x000968f5
   9e308:	00096d29 	.word	0x00096d29
   9e30c:	00089749 	.word	0x00089749
   9e310:	200727cf 	.word	0x200727cf

0009e314 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   9e314:	b580      	push	{r7, lr}
   9e316:	b084      	sub	sp, #16
   9e318:	af00      	add	r7, sp, #0
			sv_cntrl_resetgreenalarm();
   9e31a:	4b5f      	ldr	r3, [pc, #380]	; (9e498 <Cl_Dprep_StartDialyserPrime+0x184>)
   9e31c:	4798      	blx	r3
			dialyzerprime_flag =1;
   9e31e:	4b5f      	ldr	r3, [pc, #380]	; (9e49c <Cl_Dprep_StartDialyserPrime+0x188>)
   9e320:	2201      	movs	r2, #1
   9e322:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9e324:	2300      	movs	r3, #0
   9e326:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   9e328:	2300      	movs	r3, #0
   9e32a:	73bb      	strb	r3, [r7, #14]
				
			Cl_dprepMinutescounter = 0;
   9e32c:	4b5c      	ldr	r3, [pc, #368]	; (9e4a0 <Cl_Dprep_StartDialyserPrime+0x18c>)
   9e32e:	2200      	movs	r2, #0
   9e330:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   9e332:	4b5c      	ldr	r3, [pc, #368]	; (9e4a4 <Cl_Dprep_StartDialyserPrime+0x190>)
   9e334:	2200      	movs	r2, #0
   9e336:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   9e338:	4b5b      	ldr	r3, [pc, #364]	; (9e4a8 <Cl_Dprep_StartDialyserPrime+0x194>)
   9e33a:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9e33c:	4b5b      	ldr	r3, [pc, #364]	; (9e4ac <Cl_Dprep_StartDialyserPrime+0x198>)
   9e33e:	4798      	blx	r3
   9e340:	4603      	mov	r3, r0
   9e342:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN,LOGIC_HIGH,0,0,0);
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );*/
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9e344:	2101      	movs	r1, #1
   9e346:	203d      	movs	r0, #61	; 0x3d
   9e348:	4b59      	ldr	r3, [pc, #356]	; (9e4b0 <Cl_Dprep_StartDialyserPrime+0x19c>)
   9e34a:	4798      	blx	r3
   9e34c:	4603      	mov	r3, r0
   9e34e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   9e350:	2101      	movs	r1, #1
   9e352:	203e      	movs	r0, #62	; 0x3e
   9e354:	4b56      	ldr	r3, [pc, #344]	; (9e4b0 <Cl_Dprep_StartDialyserPrime+0x19c>)
   9e356:	4798      	blx	r3
   9e358:	4603      	mov	r3, r0
   9e35a:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
			//Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
			//Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
			//Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
		
			if(Current_sense_trigger)
   9e35c:	4b55      	ldr	r3, [pc, #340]	; (9e4b4 <Cl_Dprep_StartDialyserPrime+0x1a0>)
   9e35e:	781b      	ldrb	r3, [r3, #0]
   9e360:	2b00      	cmp	r3, #0
   9e362:	d005      	beq.n	9e370 <Cl_Dprep_StartDialyserPrime+0x5c>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9e364:	2101      	movs	r1, #1
   9e366:	203c      	movs	r0, #60	; 0x3c
   9e368:	4b51      	ldr	r3, [pc, #324]	; (9e4b0 <Cl_Dprep_StartDialyserPrime+0x19c>)
   9e36a:	4798      	blx	r3
   9e36c:	4603      	mov	r3, r0
   9e36e:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9e370:	2001      	movs	r0, #1
   9e372:	4b51      	ldr	r3, [pc, #324]	; (9e4b8 <Cl_Dprep_StartDialyserPrime+0x1a4>)
   9e374:	4798      	blx	r3
   9e376:	4603      	mov	r3, r0
   9e378:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9e37a:	2002      	movs	r0, #2
   9e37c:	4b4e      	ldr	r3, [pc, #312]	; (9e4b8 <Cl_Dprep_StartDialyserPrime+0x1a4>)
   9e37e:	4798      	blx	r3
   9e380:	4603      	mov	r3, r0
   9e382:	73fb      	strb	r3, [r7, #15]
			
			Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9e384:	4b4d      	ldr	r3, [pc, #308]	; (9e4bc <Cl_Dprep_StartDialyserPrime+0x1a8>)
   9e386:	4798      	blx	r3
   9e388:	4603      	mov	r3, r0
   9e38a:	73fb      	strb	r3, [r7, #15]
			cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   9e38c:	4b4c      	ldr	r3, [pc, #304]	; (9e4c0 <Cl_Dprep_StartDialyserPrime+0x1ac>)
   9e38e:	2202      	movs	r2, #2
   9e390:	701a      	strb	r2, [r3, #0]
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   9e392:	4b4c      	ldr	r3, [pc, #304]	; (9e4c4 <Cl_Dprep_StartDialyserPrime+0x1b0>)
   9e394:	695b      	ldr	r3, [r3, #20]
   9e396:	60bb      	str	r3, [r7, #8]
			Cl_Uint16Type potvalue = 0;
   9e398:	2300      	movs	r3, #0
   9e39a:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   9e39c:	68bb      	ldr	r3, [r7, #8]
   9e39e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9e3a2:	d017      	beq.n	9e3d4 <Cl_Dprep_StartDialyserPrime+0xc0>
   9e3a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9e3a8:	d003      	beq.n	9e3b2 <Cl_Dprep_StartDialyserPrime+0x9e>
   9e3aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9e3ae:	d027      	beq.n	9e400 <Cl_Dprep_StartDialyserPrime+0xec>
   9e3b0:	e037      	b.n	9e422 <Cl_Dprep_StartDialyserPrime+0x10e>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e3b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e3b6:	2002      	movs	r0, #2
   9e3b8:	4b43      	ldr	r3, [pc, #268]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e3ba:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   9e3bc:	f240 5173 	movw	r1, #1395	; 0x573
   9e3c0:	2001      	movs	r0, #1
   9e3c2:	4b41      	ldr	r3, [pc, #260]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e3c4:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   9e3c6:	233e      	movs	r3, #62	; 0x3e
   9e3c8:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9e3ca:	88fb      	ldrh	r3, [r7, #6]
   9e3cc:	4618      	mov	r0, r3
   9e3ce:	4b3f      	ldr	r3, [pc, #252]	; (9e4cc <Cl_Dprep_StartDialyserPrime+0x1b8>)
   9e3d0:	4798      	blx	r3
				break;
   9e3d2:	e03c      	b.n	9e44e <Cl_Dprep_StartDialyserPrime+0x13a>
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9e3d4:	2203      	movs	r2, #3
   9e3d6:	493e      	ldr	r1, [pc, #248]	; (9e4d0 <Cl_Dprep_StartDialyserPrime+0x1bc>)
   9e3d8:	2018      	movs	r0, #24
   9e3da:	4b3e      	ldr	r3, [pc, #248]	; (9e4d4 <Cl_Dprep_StartDialyserPrime+0x1c0>)
   9e3dc:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e3de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e3e2:	2002      	movs	r0, #2
   9e3e4:	4b38      	ldr	r3, [pc, #224]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e3e6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9e3e8:	f240 414c 	movw	r1, #1100	; 0x44c
   9e3ec:	2001      	movs	r0, #1
   9e3ee:	4b36      	ldr	r3, [pc, #216]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e3f0:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9e3f2:	2344      	movs	r3, #68	; 0x44
   9e3f4:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9e3f6:	88fb      	ldrh	r3, [r7, #6]
   9e3f8:	4618      	mov	r0, r3
   9e3fa:	4b34      	ldr	r3, [pc, #208]	; (9e4cc <Cl_Dprep_StartDialyserPrime+0x1b8>)
   9e3fc:	4798      	blx	r3
				break;
   9e3fe:	e026      	b.n	9e44e <Cl_Dprep_StartDialyserPrime+0x13a>
// 				sv_cntrl_setpumpspeed(DCMOTOR1,360);
// 				potvalue = (2000 * 1024)/10000;
// 				sv_cs_setpotvalue(potvalue);
// 				break;
				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e400:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e404:	2002      	movs	r0, #2
   9e406:	4b30      	ldr	r3, [pc, #192]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e408:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,640);
   9e40a:	f44f 7120 	mov.w	r1, #640	; 0x280
   9e40e:	2001      	movs	r0, #1
   9e410:	4b2d      	ldr	r3, [pc, #180]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e412:	4798      	blx	r3
				potvalue = (920 * 1024)/10000;
   9e414:	235e      	movs	r3, #94	; 0x5e
   9e416:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9e418:	88fb      	ldrh	r3, [r7, #6]
   9e41a:	4618      	mov	r0, r3
   9e41c:	4b2b      	ldr	r3, [pc, #172]	; (9e4cc <Cl_Dprep_StartDialyserPrime+0x1b8>)
   9e41e:	4798      	blx	r3
				break;
   9e420:	e015      	b.n	9e44e <Cl_Dprep_StartDialyserPrime+0x13a>
// 				potvalue = (1200 * 1024)/10000;
// 				sv_cs_setpotvalue(potvalue);
// 				break;
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9e422:	2203      	movs	r2, #3
   9e424:	492a      	ldr	r1, [pc, #168]	; (9e4d0 <Cl_Dprep_StartDialyserPrime+0x1bc>)
   9e426:	2018      	movs	r0, #24
   9e428:	4b2a      	ldr	r3, [pc, #168]	; (9e4d4 <Cl_Dprep_StartDialyserPrime+0x1c0>)
   9e42a:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e42c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e430:	2002      	movs	r0, #2
   9e432:	4b25      	ldr	r3, [pc, #148]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e434:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   9e436:	f240 414c 	movw	r1, #1100	; 0x44c
   9e43a:	2001      	movs	r0, #1
   9e43c:	4b22      	ldr	r3, [pc, #136]	; (9e4c8 <Cl_Dprep_StartDialyserPrime+0x1b4>)
   9e43e:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9e440:	2344      	movs	r3, #68	; 0x44
   9e442:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9e444:	88fb      	ldrh	r3, [r7, #6]
   9e446:	4618      	mov	r0, r3
   9e448:	4b20      	ldr	r3, [pc, #128]	; (9e4cc <Cl_Dprep_StartDialyserPrime+0x1b8>)
   9e44a:	4798      	blx	r3
				break;
   9e44c:	bf00      	nop
			}
			
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
   9e44e:	4b22      	ldr	r3, [pc, #136]	; (9e4d8 <Cl_Dprep_StartDialyserPrime+0x1c4>)
   9e450:	781b      	ldrb	r3, [r3, #0]
   9e452:	2b09      	cmp	r3, #9
   9e454:	d006      	beq.n	9e464 <Cl_Dprep_StartDialyserPrime+0x150>
			{
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   9e456:	2100      	movs	r1, #0
   9e458:	2008      	movs	r0, #8
   9e45a:	4b20      	ldr	r3, [pc, #128]	; (9e4dc <Cl_Dprep_StartDialyserPrime+0x1c8>)
   9e45c:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9e45e:	4b20      	ldr	r3, [pc, #128]	; (9e4e0 <Cl_Dprep_StartDialyserPrime+0x1cc>)
   9e460:	2200      	movs	r2, #0
   9e462:	70da      	strb	r2, [r3, #3]
			}
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   9e464:	4b1f      	ldr	r3, [pc, #124]	; (9e4e4 <Cl_Dprep_StartDialyserPrime+0x1d0>)
   9e466:	4798      	blx	r3
   9e468:	4603      	mov	r3, r0
   9e46a:	73fb      	strb	r3, [r7, #15]
			sv_prop_startmixing();
   9e46c:	4b1e      	ldr	r3, [pc, #120]	; (9e4e8 <Cl_Dprep_StartDialyserPrime+0x1d4>)
   9e46e:	4798      	blx	r3
			Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9e470:	200b      	movs	r0, #11
   9e472:	4b1e      	ldr	r3, [pc, #120]	; (9e4ec <Cl_Dprep_StartDialyserPrime+0x1d8>)
   9e474:	4798      	blx	r3
   9e476:	4603      	mov	r3, r0
   9e478:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);
   9e47a:	2002      	movs	r0, #2
   9e47c:	4b1c      	ldr	r3, [pc, #112]	; (9e4f0 <Cl_Dprep_StartDialyserPrime+0x1dc>)
   9e47e:	4798      	blx	r3
   9e480:	4603      	mov	r3, r0
   9e482:	73fb      	strb	r3, [r7, #15]
			
			UpdateDprepFillingMinuteTick();
   9e484:	4b1b      	ldr	r3, [pc, #108]	; (9e4f4 <Cl_Dprep_StartDialyserPrime+0x1e0>)
   9e486:	4798      	blx	r3
			
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9e488:	4b1b      	ldr	r3, [pc, #108]	; (9e4f8 <Cl_Dprep_StartDialyserPrime+0x1e4>)
   9e48a:	2206      	movs	r2, #6
   9e48c:	701a      	strb	r2, [r3, #0]
							
			return 0;
   9e48e:	2300      	movs	r3, #0
	}
   9e490:	4618      	mov	r0, r3
   9e492:	3710      	adds	r7, #16
   9e494:	46bd      	mov	sp, r7
   9e496:	bd80      	pop	{r7, pc}
   9e498:	00096b4d 	.word	0x00096b4d
   9e49c:	20072794 	.word	0x20072794
   9e4a0:	200727d8 	.word	0x200727d8
   9e4a4:	200727d4 	.word	0x200727d4
   9e4a8:	0009d669 	.word	0x0009d669
   9e4ac:	0009cd91 	.word	0x0009cd91
   9e4b0:	00082efd 	.word	0x00082efd
   9e4b4:	200709b2 	.word	0x200709b2
   9e4b8:	000967dd 	.word	0x000967dd
   9e4bc:	00096a51 	.word	0x00096a51
   9e4c0:	200727d0 	.word	0x200727d0
   9e4c4:	20073138 	.word	0x20073138
   9e4c8:	000968f5 	.word	0x000968f5
   9e4cc:	00096d29 	.word	0x00096d29
   9e4d0:	000a4b58 	.word	0x000a4b58
   9e4d4:	00098601 	.word	0x00098601
   9e4d8:	200720ec 	.word	0x200720ec
   9e4dc:	0008896d 	.word	0x0008896d
   9e4e0:	20070a84 	.word	0x20070a84
   9e4e4:	00096a0d 	.word	0x00096a0d
   9e4e8:	00096c25 	.word	0x00096c25
   9e4ec:	00083325 	.word	0x00083325
   9e4f0:	00089749 	.word	0x00089749
   9e4f4:	0009cdb1 	.word	0x0009cdb1
   9e4f8:	200727cf 	.word	0x200727cf

0009e4fc <Cl_dprep_StopMixing>:
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   9e4fc:	b580      	push	{r7, lr}
   9e4fe:	b082      	sub	sp, #8
   9e500:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9e502:	2300      	movs	r3, #0
   9e504:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   9e506:	4b13      	ldr	r3, [pc, #76]	; (9e554 <Cl_dprep_StopMixing+0x58>)
   9e508:	781b      	ldrb	r3, [r3, #0]
   9e50a:	2b02      	cmp	r3, #2
   9e50c:	d11c      	bne.n	9e548 <Cl_dprep_StopMixing+0x4c>
				{
					
				Cl_dprepMinutescounter = 0;
   9e50e:	4b12      	ldr	r3, [pc, #72]	; (9e558 <Cl_dprep_StopMixing+0x5c>)
   9e510:	2200      	movs	r2, #0
   9e512:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   9e514:	4b11      	ldr	r3, [pc, #68]	; (9e55c <Cl_dprep_StopMixing+0x60>)
   9e516:	2200      	movs	r2, #0
   9e518:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9e51a:	4b11      	ldr	r3, [pc, #68]	; (9e560 <Cl_dprep_StopMixing+0x64>)
   9e51c:	4798      	blx	r3
   9e51e:	4603      	mov	r3, r0
   9e520:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9e522:	2004      	movs	r0, #4
   9e524:	4b0f      	ldr	r3, [pc, #60]	; (9e564 <Cl_dprep_StopMixing+0x68>)
   9e526:	4798      	blx	r3
   9e528:	4603      	mov	r3, r0
   9e52a:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9e52c:	2005      	movs	r0, #5
   9e52e:	4b0e      	ldr	r3, [pc, #56]	; (9e568 <Cl_dprep_StopMixing+0x6c>)
   9e530:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9e532:	4b08      	ldr	r3, [pc, #32]	; (9e554 <Cl_dprep_StopMixing+0x58>)
   9e534:	220b      	movs	r2, #11
   9e536:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9e538:	1dbb      	adds	r3, r7, #6
   9e53a:	2200      	movs	r2, #0
   9e53c:	4619      	mov	r1, r3
   9e53e:	202d      	movs	r0, #45	; 0x2d
   9e540:	4b0a      	ldr	r3, [pc, #40]	; (9e56c <Cl_dprep_StopMixing+0x70>)
   9e542:	4798      	blx	r3
   9e544:	4603      	mov	r3, r0
   9e546:	71fb      	strb	r3, [r7, #7]
				
					
				}

				return Cl_dprepretcode;
   9e548:	79fb      	ldrb	r3, [r7, #7]
}
   9e54a:	4618      	mov	r0, r3
   9e54c:	3708      	adds	r7, #8
   9e54e:	46bd      	mov	sp, r7
   9e550:	bd80      	pop	{r7, pc}
   9e552:	bf00      	nop
   9e554:	200727cf 	.word	0x200727cf
   9e558:	200727d8 	.word	0x200727d8
   9e55c:	200727d4 	.word	0x200727d4
   9e560:	00096869 	.word	0x00096869
   9e564:	00089749 	.word	0x00089749
   9e568:	00083325 	.word	0x00083325
   9e56c:	00098601 	.word	0x00098601

0009e570 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false},                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   9e570:	b580      	push	{r7, lr}
   9e572:	b092      	sub	sp, #72	; 0x48
   9e574:	af00      	add	r7, sp, #0
   9e576:	4603      	mov	r3, r0
   9e578:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   9e57a:	2300      	movs	r3, #0
   9e57c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   9e580:	2300      	movs	r3, #0
   9e582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e586:	234a      	movs	r3, #74	; 0x4a
   9e588:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9e58c:	2300      	movs	r3, #0
   9e58e:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint8Type data = 0;
   9e590:	2300      	movs	r3, #0
   9e592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9e596:	2300      	movs	r3, #0
   9e598:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   9e59c:	2300      	movs	r3, #0
   9e59e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   9e5a2:	2300      	movs	r3, #0
   9e5a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   9e5a8:	2300      	movs	r3, #0
   9e5aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34




cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   9e5ae:	f107 023f 	add.w	r2, r7, #63	; 0x3f
   9e5b2:	79fb      	ldrb	r3, [r7, #7]
   9e5b4:	4611      	mov	r1, r2
   9e5b6:	4618      	mov	r0, r3
   9e5b8:	4ba4      	ldr	r3, [pc, #656]	; (9e84c <Cl_Rinse_Controller+0x2dc>)
   9e5ba:	4798      	blx	r3

switch(cl_rinseevent)
   9e5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9e5c0:	3b21      	subs	r3, #33	; 0x21
   9e5c2:	2b05      	cmp	r3, #5
   9e5c4:	d872      	bhi.n	9e6ac <Cl_Rinse_Controller+0x13c>
   9e5c6:	a201      	add	r2, pc, #4	; (adr r2, 9e5cc <Cl_Rinse_Controller+0x5c>)
   9e5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e5cc:	0009e5e5 	.word	0x0009e5e5
   9e5d0:	0009e5f5 	.word	0x0009e5f5
   9e5d4:	0009e5ff 	.word	0x0009e5ff
   9e5d8:	0009e63b 	.word	0x0009e63b
   9e5dc:	0009e699 	.word	0x0009e699
   9e5e0:	0009e6a3 	.word	0x0009e6a3
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9e5e4:	4b9a      	ldr	r3, [pc, #616]	; (9e850 <Cl_Rinse_Controller+0x2e0>)
   9e5e6:	2200      	movs	r2, #0
   9e5e8:	70da      	strb	r2, [r3, #3]
	cl_bp_controller(CL_BP_EVENT_START,0);
   9e5ea:	2100      	movs	r1, #0
   9e5ec:	2002      	movs	r0, #2
   9e5ee:	4b99      	ldr	r3, [pc, #612]	; (9e854 <Cl_Rinse_Controller+0x2e4>)
   9e5f0:	4798      	blx	r3
	break;
   9e5f2:	e060      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   9e5f4:	2100      	movs	r1, #0
   9e5f6:	2004      	movs	r0, #4
   9e5f8:	4b96      	ldr	r3, [pc, #600]	; (9e854 <Cl_Rinse_Controller+0x2e4>)
   9e5fa:	4798      	blx	r3
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   9e5fc:	e05b      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   9e5fe:	4b96      	ldr	r3, [pc, #600]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e600:	7e1b      	ldrb	r3, [r3, #24]
   9e602:	2b00      	cmp	r3, #0
   9e604:	d054      	beq.n	9e6b0 <Cl_Rinse_Controller+0x140>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e606:	4b94      	ldr	r3, [pc, #592]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e608:	791b      	ldrb	r3, [r3, #4]
   9e60a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9e60e:	4b92      	ldr	r3, [pc, #584]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e610:	795b      	ldrb	r3, [r3, #5]
   9e612:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9e616:	4b90      	ldr	r3, [pc, #576]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e618:	799b      	ldrb	r3, [r3, #6]
   9e61a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9e61e:	4b8e      	ldr	r3, [pc, #568]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e620:	79db      	ldrb	r3, [r3, #7]
   9e622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9e626:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9e628:	4619      	mov	r1, r3
   9e62a:	2001      	movs	r0, #1
   9e62c:	4b89      	ldr	r3, [pc, #548]	; (9e854 <Cl_Rinse_Controller+0x2e4>)
   9e62e:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   9e630:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9e632:	461a      	mov	r2, r3
   9e634:	4b89      	ldr	r3, [pc, #548]	; (9e85c <Cl_Rinse_Controller+0x2ec>)
   9e636:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   9e638:	e03a      	b.n	9e6b0 <Cl_Rinse_Controller+0x140>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   9e63a:	4b87      	ldr	r3, [pc, #540]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e63c:	7e1b      	ldrb	r3, [r3, #24]
   9e63e:	2b00      	cmp	r3, #0
   9e640:	d038      	beq.n	9e6b4 <Cl_Rinse_Controller+0x144>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9e642:	4b85      	ldr	r3, [pc, #532]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e644:	795b      	ldrb	r3, [r3, #5]
   9e646:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9e64a:	4b83      	ldr	r3, [pc, #524]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e64c:	799b      	ldrb	r3, [r3, #6]
   9e64e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9e652:	4b81      	ldr	r3, [pc, #516]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e654:	79db      	ldrb	r3, [r3, #7]
   9e656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9e65a:	4b7f      	ldr	r3, [pc, #508]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e65c:	7a1b      	ldrb	r3, [r3, #8]
   9e65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9e662:	4b7d      	ldr	r3, [pc, #500]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e664:	791b      	ldrb	r3, [r3, #4]
   9e666:	2b01      	cmp	r3, #1
   9e668:	d104      	bne.n	9e674 <Cl_Rinse_Controller+0x104>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9e66a:	2100      	movs	r1, #0
   9e66c:	2001      	movs	r0, #1
   9e66e:	4b7c      	ldr	r3, [pc, #496]	; (9e860 <Cl_Rinse_Controller+0x2f0>)
   9e670:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9e672:	e01f      	b.n	9e6b4 <Cl_Rinse_Controller+0x144>
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9e674:	4b78      	ldr	r3, [pc, #480]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e676:	791b      	ldrb	r3, [r3, #4]
   9e678:	2b02      	cmp	r3, #2
   9e67a:	d104      	bne.n	9e686 <Cl_Rinse_Controller+0x116>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9e67c:	2100      	movs	r1, #0
   9e67e:	2004      	movs	r0, #4
   9e680:	4b77      	ldr	r3, [pc, #476]	; (9e860 <Cl_Rinse_Controller+0x2f0>)
   9e682:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9e684:	e016      	b.n	9e6b4 <Cl_Rinse_Controller+0x144>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9e686:	4b74      	ldr	r3, [pc, #464]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e688:	791b      	ldrb	r3, [r3, #4]
   9e68a:	2b00      	cmp	r3, #0
   9e68c:	d112      	bne.n	9e6b4 <Cl_Rinse_Controller+0x144>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9e68e:	2100      	movs	r1, #0
   9e690:	200a      	movs	r0, #10
   9e692:	4b73      	ldr	r3, [pc, #460]	; (9e860 <Cl_Rinse_Controller+0x2f0>)
   9e694:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9e696:	e00d      	b.n	9e6b4 <Cl_Rinse_Controller+0x144>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9e698:	2100      	movs	r1, #0
   9e69a:	200c      	movs	r0, #12
   9e69c:	4b70      	ldr	r3, [pc, #448]	; (9e860 <Cl_Rinse_Controller+0x2f0>)
   9e69e:	4798      	blx	r3
	break;
   9e6a0:	e009      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9e6a2:	2100      	movs	r1, #0
   9e6a4:	2007      	movs	r0, #7
   9e6a6:	4b6e      	ldr	r3, [pc, #440]	; (9e860 <Cl_Rinse_Controller+0x2f0>)
   9e6a8:	4798      	blx	r3
	break;
   9e6aa:	e004      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
	default:break;	
   9e6ac:	bf00      	nop
   9e6ae:	e002      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
	}
	break;
   9e6b0:	bf00      	nop
   9e6b2:	e000      	b.n	9e6b6 <Cl_Rinse_Controller+0x146>
		}
				
	}
			
			
	break;
   9e6b4:	bf00      	nop
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
	break;
	default:break;	
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   9e6b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9e6ba:	2b12      	cmp	r3, #18
   9e6bc:	d10f      	bne.n	9e6de <Cl_Rinse_Controller+0x16e>
{
	Rinsestatedummy = cl_rinsestate;
   9e6be:	4b69      	ldr	r3, [pc, #420]	; (9e864 <Cl_Rinse_Controller+0x2f4>)
   9e6c0:	781a      	ldrb	r2, [r3, #0]
   9e6c2:	4b69      	ldr	r3, [pc, #420]	; (9e868 <Cl_Rinse_Controller+0x2f8>)
   9e6c4:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   9e6c6:	203d      	movs	r0, #61	; 0x3d
   9e6c8:	4b68      	ldr	r3, [pc, #416]	; (9e86c <Cl_Rinse_Controller+0x2fc>)
   9e6ca:	4798      	blx	r3
   9e6cc:	4603      	mov	r3, r0
   9e6ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   9e6d2:	203e      	movs	r0, #62	; 0x3e
   9e6d4:	4b65      	ldr	r3, [pc, #404]	; (9e86c <Cl_Rinse_Controller+0x2fc>)
   9e6d6:	4798      	blx	r3
   9e6d8:	4603      	mov	r3, r0
   9e6da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   9e6de:	4b61      	ldr	r3, [pc, #388]	; (9e864 <Cl_Rinse_Controller+0x2f4>)
   9e6e0:	781b      	ldrb	r3, [r3, #0]
   9e6e2:	2b09      	cmp	r3, #9
   9e6e4:	f201 8154 	bhi.w	9f990 <Cl_Rinse_Controller+0x1420>
   9e6e8:	a201      	add	r2, pc, #4	; (adr r2, 9e6f0 <Cl_Rinse_Controller+0x180>)
   9e6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e6ee:	bf00      	nop
   9e6f0:	0009e719 	.word	0x0009e719
   9e6f4:	0009faa1 	.word	0x0009faa1
   9e6f8:	0009f991 	.word	0x0009f991
   9e6fc:	0009e941 	.word	0x0009e941
   9e700:	0009e941 	.word	0x0009e941
   9e704:	0009e941 	.word	0x0009e941
   9e708:	0009f299 	.word	0x0009f299
   9e70c:	0009f991 	.word	0x0009f991
   9e710:	0009f991 	.word	0x0009f991
   9e714:	0009f56f 	.word	0x0009f56f
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   9e718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9e71c:	3b02      	subs	r3, #2
   9e71e:	2b15      	cmp	r3, #21
   9e720:	f200 8108 	bhi.w	9e934 <Cl_Rinse_Controller+0x3c4>
   9e724:	a201      	add	r2, pc, #4	; (adr r2, 9e72c <Cl_Rinse_Controller+0x1bc>)
   9e726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e72a:	bf00      	nop
   9e72c:	0009e879 	.word	0x0009e879
   9e730:	0009e935 	.word	0x0009e935
   9e734:	0009e905 	.word	0x0009e905
   9e738:	0009e917 	.word	0x0009e917
   9e73c:	0009e935 	.word	0x0009e935
   9e740:	0009e935 	.word	0x0009e935
   9e744:	0009e935 	.word	0x0009e935
   9e748:	0009e935 	.word	0x0009e935
   9e74c:	0009e935 	.word	0x0009e935
   9e750:	0009e935 	.word	0x0009e935
   9e754:	0009e935 	.word	0x0009e935
   9e758:	0009e935 	.word	0x0009e935
   9e75c:	0009e935 	.word	0x0009e935
   9e760:	0009e935 	.word	0x0009e935
   9e764:	0009e935 	.word	0x0009e935
   9e768:	0009e935 	.word	0x0009e935
   9e76c:	0009e935 	.word	0x0009e935
   9e770:	0009e935 	.word	0x0009e935
   9e774:	0009e935 	.word	0x0009e935
   9e778:	0009e935 	.word	0x0009e935
   9e77c:	0009e929 	.word	0x0009e929
   9e780:	0009e785 	.word	0x0009e785
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   9e784:	4b34      	ldr	r3, [pc, #208]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e786:	7e1b      	ldrb	r3, [r3, #24]
   9e788:	2b00      	cmp	r3, #0
   9e78a:	f000 80d6 	beq.w	9e93a <Cl_Rinse_Controller+0x3ca>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   9e78e:	4b32      	ldr	r3, [pc, #200]	; (9e858 <Cl_Rinse_Controller+0x2e8>)
   9e790:	791b      	ldrb	r3, [r3, #4]
   9e792:	2b02      	cmp	r3, #2
   9e794:	d020      	beq.n	9e7d8 <Cl_Rinse_Controller+0x268>
   9e796:	2b21      	cmp	r3, #33	; 0x21
   9e798:	d03a      	beq.n	9e810 <Cl_Rinse_Controller+0x2a0>
   9e79a:	2b01      	cmp	r3, #1
   9e79c:	d000      	beq.n	9e7a0 <Cl_Rinse_Controller+0x230>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   9e79e:	e053      	b.n	9e848 <Cl_Rinse_Controller+0x2d8>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9e7a0:	2316      	movs	r3, #22
   9e7a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e7a6:	2301      	movs	r3, #1
   9e7a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e7ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9e7b0:	3301      	adds	r3, #1
   9e7b2:	4619      	mov	r1, r3
   9e7b4:	2001      	movs	r0, #1
   9e7b6:	4b2e      	ldr	r3, [pc, #184]	; (9e870 <Cl_Rinse_Controller+0x300>)
   9e7b8:	4798      	blx	r3
   9e7ba:	4603      	mov	r3, r0
   9e7bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9e7c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9e7c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9e7c8:	2202      	movs	r2, #2
   9e7ca:	4618      	mov	r0, r3
   9e7cc:	4b29      	ldr	r3, [pc, #164]	; (9e874 <Cl_Rinse_Controller+0x304>)
   9e7ce:	4798      	blx	r3
   9e7d0:	4603      	mov	r3, r0
   9e7d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   9e7d6:	e037      	b.n	9e848 <Cl_Rinse_Controller+0x2d8>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9e7d8:	2316      	movs	r3, #22
   9e7da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9e7de:	2302      	movs	r3, #2
   9e7e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9e7e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9e7e8:	3301      	adds	r3, #1
   9e7ea:	4619      	mov	r1, r3
   9e7ec:	2002      	movs	r0, #2
   9e7ee:	4b20      	ldr	r3, [pc, #128]	; (9e870 <Cl_Rinse_Controller+0x300>)
   9e7f0:	4798      	blx	r3
   9e7f2:	4603      	mov	r3, r0
   9e7f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9e7f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9e7fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9e800:	2202      	movs	r2, #2
   9e802:	4618      	mov	r0, r3
   9e804:	4b1b      	ldr	r3, [pc, #108]	; (9e874 <Cl_Rinse_Controller+0x304>)
   9e806:	4798      	blx	r3
   9e808:	4603      	mov	r3, r0
   9e80a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   9e80e:	e01b      	b.n	9e848 <Cl_Rinse_Controller+0x2d8>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9e810:	2316      	movs	r3, #22
   9e812:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9e816:	2323      	movs	r3, #35	; 0x23
   9e818:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9e81c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9e820:	3301      	adds	r3, #1
   9e822:	4619      	mov	r1, r3
   9e824:	2028      	movs	r0, #40	; 0x28
   9e826:	4b12      	ldr	r3, [pc, #72]	; (9e870 <Cl_Rinse_Controller+0x300>)
   9e828:	4798      	blx	r3
   9e82a:	4603      	mov	r3, r0
   9e82c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9e830:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9e834:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9e838:	2202      	movs	r2, #2
   9e83a:	4618      	mov	r0, r3
   9e83c:	4b0d      	ldr	r3, [pc, #52]	; (9e874 <Cl_Rinse_Controller+0x304>)
   9e83e:	4798      	blx	r3
   9e840:	4603      	mov	r3, r0
   9e842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   9e846:	bf00      	nop
								default:
								break;
							}
						}
				break;
   9e848:	e077      	b.n	9e93a <Cl_Rinse_Controller+0x3ca>
   9e84a:	bf00      	nop
   9e84c:	0009fac5 	.word	0x0009fac5
   9e850:	20070b74 	.word	0x20070b74
   9e854:	00091c25 	.word	0x00091c25
   9e858:	20072f2c 	.word	0x20072f2c
   9e85c:	20073138 	.word	0x20073138
   9e860:	00092315 	.word	0x00092315
   9e864:	200727fe 	.word	0x200727fe
   9e868:	2007309c 	.word	0x2007309c
   9e86c:	00082ffd 	.word	0x00082ffd
   9e870:	0009710d 	.word	0x0009710d
   9e874:	00098601 	.word	0x00098601
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9e878:	4bb9      	ldr	r3, [pc, #740]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e87a:	7e1b      	ldrb	r3, [r3, #24]
   9e87c:	2b00      	cmp	r3, #0
   9e87e:	d00e      	beq.n	9e89e <Cl_Rinse_Controller+0x32e>
					{
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e880:	4bb7      	ldr	r3, [pc, #732]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e882:	791b      	ldrb	r3, [r3, #4]
   9e884:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						if (cl_temp.bytearray[0] == 1)
   9e888:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   9e88c:	2b01      	cmp	r3, #1
   9e88e:	d006      	beq.n	9e89e <Cl_Rinse_Controller+0x32e>
						{
						
						}
						else if (cl_temp.bytearray[0] == 2)
   9e890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   9e894:	2b02      	cmp	r3, #2
   9e896:	d102      	bne.n	9e89e <Cl_Rinse_Controller+0x32e>
						{
							hotrinse_flag = 1;
   9e898:	4bb2      	ldr	r3, [pc, #712]	; (9eb64 <Cl_Rinse_Controller+0x5f4>)
   9e89a:	2201      	movs	r2, #1
   9e89c:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   9e89e:	4bb2      	ldr	r3, [pc, #712]	; (9eb68 <Cl_Rinse_Controller+0x5f8>)
   9e8a0:	4798      	blx	r3
   9e8a2:	4603      	mov	r3, r0
   9e8a4:	2b00      	cmp	r3, #0
   9e8a6:	d12a      	bne.n	9e8fe <Cl_Rinse_Controller+0x38e>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   9e8a8:	2308      	movs	r3, #8
   9e8aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9e8ae:	2301      	movs	r3, #1
   9e8b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9e8b4:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9e8b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9e8bc:	2201      	movs	r2, #1
   9e8be:	4618      	mov	r0, r3
   9e8c0:	4baa      	ldr	r3, [pc, #680]	; (9eb6c <Cl_Rinse_Controller+0x5fc>)
   9e8c2:	4798      	blx	r3
   9e8c4:	4603      	mov	r3, r0
   9e8c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   9e8ca:	2309      	movs	r3, #9
   9e8cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9e8d0:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9e8d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9e8d8:	2200      	movs	r2, #0
   9e8da:	4618      	mov	r0, r3
   9e8dc:	4ba3      	ldr	r3, [pc, #652]	; (9eb6c <Cl_Rinse_Controller+0x5fc>)
   9e8de:	4798      	blx	r3
   9e8e0:	4603      	mov	r3, r0
   9e8e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9e8e6:	4ba2      	ldr	r3, [pc, #648]	; (9eb70 <Cl_Rinse_Controller+0x600>)
   9e8e8:	4798      	blx	r3
   9e8ea:	4603      	mov	r3, r0
   9e8ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9e8f0:	4ba0      	ldr	r3, [pc, #640]	; (9eb74 <Cl_Rinse_Controller+0x604>)
   9e8f2:	2203      	movs	r2, #3
   9e8f4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9e8f6:	4ba0      	ldr	r3, [pc, #640]	; (9eb78 <Cl_Rinse_Controller+0x608>)
   9e8f8:	2201      	movs	r2, #1
   9e8fa:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   9e8fc:	e01e      	b.n	9e93c <Cl_Rinse_Controller+0x3cc>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   9e8fe:	2303      	movs	r3, #3
   9e900:	f001 b8d3 	b.w	9faaa <Cl_Rinse_Controller+0x153a>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   9e904:	4b98      	ldr	r3, [pc, #608]	; (9eb68 <Cl_Rinse_Controller+0x5f8>)
   9e906:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9e908:	4b9a      	ldr	r3, [pc, #616]	; (9eb74 <Cl_Rinse_Controller+0x604>)
   9e90a:	2204      	movs	r2, #4
   9e90c:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9e90e:	4b9a      	ldr	r3, [pc, #616]	; (9eb78 <Cl_Rinse_Controller+0x608>)
   9e910:	2201      	movs	r2, #1
   9e912:	701a      	strb	r2, [r3, #0]
				break;
   9e914:	e012      	b.n	9e93c <Cl_Rinse_Controller+0x3cc>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9e916:	4b94      	ldr	r3, [pc, #592]	; (9eb68 <Cl_Rinse_Controller+0x5f8>)
   9e918:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9e91a:	4b96      	ldr	r3, [pc, #600]	; (9eb74 <Cl_Rinse_Controller+0x604>)
   9e91c:	2205      	movs	r2, #5
   9e91e:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9e920:	4b95      	ldr	r3, [pc, #596]	; (9eb78 <Cl_Rinse_Controller+0x608>)
   9e922:	2201      	movs	r2, #1
   9e924:	701a      	strb	r2, [r3, #0]
				break;
   9e926:	e009      	b.n	9e93c <Cl_Rinse_Controller+0x3cc>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9e928:	4b94      	ldr	r3, [pc, #592]	; (9eb7c <Cl_Rinse_Controller+0x60c>)
   9e92a:	4798      	blx	r3
   9e92c:	4603      	mov	r3, r0
   9e92e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   9e932:	e003      	b.n	9e93c <Cl_Rinse_Controller+0x3cc>
				default:
				break;
   9e934:	bf00      	nop
   9e936:	f001 b8b6 	b.w	9faa6 <Cl_Rinse_Controller+0x1536>
								break;							
								default:
								break;
							}
						}
				break;
   9e93a:	bf00      	nop
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
				break;
				default:
				break;
			}                                 	
		break;
   9e93c:	f001 b8b3 	b.w	9faa6 <Cl_Rinse_Controller+0x1536>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   9e940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9e944:	3b06      	subs	r3, #6
   9e946:	2b21      	cmp	r3, #33	; 0x21
   9e948:	f201 80ac 	bhi.w	9faa4 <Cl_Rinse_Controller+0x1534>
   9e94c:	a201      	add	r2, pc, #4	; (adr r2, 9e954 <Cl_Rinse_Controller+0x3e4>)
   9e94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e952:	bf00      	nop
   9e954:	0009f07d 	.word	0x0009f07d
   9e958:	0009faa5 	.word	0x0009faa5
   9e95c:	0009faa5 	.word	0x0009faa5
   9e960:	0009faa5 	.word	0x0009faa5
   9e964:	0009faa5 	.word	0x0009faa5
   9e968:	0009faa5 	.word	0x0009faa5
   9e96c:	0009faa5 	.word	0x0009faa5
   9e970:	0009faa5 	.word	0x0009faa5
   9e974:	0009faa5 	.word	0x0009faa5
   9e978:	0009ec29 	.word	0x0009ec29
   9e97c:	0009faa5 	.word	0x0009faa5
   9e980:	0009ec51 	.word	0x0009ec51
   9e984:	0009ecf9 	.word	0x0009ecf9
   9e988:	0009ee93 	.word	0x0009ee93
   9e98c:	0009f067 	.word	0x0009f067
   9e990:	0009f08f 	.word	0x0009f08f
   9e994:	0009f083 	.word	0x0009f083
   9e998:	0009eb45 	.word	0x0009eb45
   9e99c:	0009e9dd 	.word	0x0009e9dd
   9e9a0:	0009f145 	.word	0x0009f145
   9e9a4:	0009f0c3 	.word	0x0009f0c3
   9e9a8:	0009f0dd 	.word	0x0009f0dd
   9e9ac:	0009f1b7 	.word	0x0009f1b7
   9e9b0:	0009f1c1 	.word	0x0009f1c1
   9e9b4:	0009f1cb 	.word	0x0009f1cb
   9e9b8:	0009f0ed 	.word	0x0009f0ed
   9e9bc:	0009f111 	.word	0x0009f111
   9e9c0:	0009f125 	.word	0x0009f125
   9e9c4:	0009f135 	.word	0x0009f135
   9e9c8:	0009faa5 	.word	0x0009faa5
   9e9cc:	0009faa5 	.word	0x0009faa5
   9e9d0:	0009faa5 	.word	0x0009faa5
   9e9d4:	0009faa5 	.word	0x0009faa5
   9e9d8:	0009f1f9 	.word	0x0009f1f9
				{
						case EVT_RINSE_SET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9e9dc:	4b60      	ldr	r3, [pc, #384]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e9de:	7e1b      	ldrb	r3, [r3, #24]
   9e9e0:	2b00      	cmp	r3, #0
   9e9e2:	f000 840d 	beq.w	9f200 <Cl_Rinse_Controller+0xc90>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9e9e6:	4b5e      	ldr	r3, [pc, #376]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e9e8:	795b      	ldrb	r3, [r3, #5]
   9e9ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9e9ee:	4b5c      	ldr	r3, [pc, #368]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e9f0:	799b      	ldrb	r3, [r3, #6]
   9e9f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9e9f6:	4b5a      	ldr	r3, [pc, #360]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9e9f8:	79db      	ldrb	r3, [r3, #7]
   9e9fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9e9fe:	4b58      	ldr	r3, [pc, #352]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9ea00:	7a1b      	ldrb	r3, [r3, #8]
   9ea02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9ea06:	4b56      	ldr	r3, [pc, #344]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9ea08:	791b      	ldrb	r3, [r3, #4]
   9ea0a:	3b05      	subs	r3, #5
   9ea0c:	2b20      	cmp	r3, #32
   9ea0e:	f200 8097 	bhi.w	9eb40 <Cl_Rinse_Controller+0x5d0>
   9ea12:	a201      	add	r2, pc, #4	; (adr r2, 9ea18 <Cl_Rinse_Controller+0x4a8>)
   9ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ea18:	0009eb41 	.word	0x0009eb41
   9ea1c:	0009eb41 	.word	0x0009eb41
   9ea20:	0009eb41 	.word	0x0009eb41
   9ea24:	0009eb41 	.word	0x0009eb41
   9ea28:	0009eb41 	.word	0x0009eb41
   9ea2c:	0009eb41 	.word	0x0009eb41
   9ea30:	0009eb41 	.word	0x0009eb41
   9ea34:	0009eb41 	.word	0x0009eb41
   9ea38:	0009eb41 	.word	0x0009eb41
   9ea3c:	0009eb41 	.word	0x0009eb41
   9ea40:	0009eb41 	.word	0x0009eb41
   9ea44:	0009eb41 	.word	0x0009eb41
   9ea48:	0009eb41 	.word	0x0009eb41
   9ea4c:	0009eb41 	.word	0x0009eb41
   9ea50:	0009eb41 	.word	0x0009eb41
   9ea54:	0009eb41 	.word	0x0009eb41
   9ea58:	0009eb41 	.word	0x0009eb41
   9ea5c:	0009eb41 	.word	0x0009eb41
   9ea60:	0009eb41 	.word	0x0009eb41
   9ea64:	0009ea9d 	.word	0x0009ea9d
   9ea68:	0009eab5 	.word	0x0009eab5
   9ea6c:	0009eacd 	.word	0x0009eacd
   9ea70:	0009eadd 	.word	0x0009eadd
   9ea74:	0009eaed 	.word	0x0009eaed
   9ea78:	0009eafd 	.word	0x0009eafd
   9ea7c:	0009eb41 	.word	0x0009eb41
   9ea80:	0009eb41 	.word	0x0009eb41
   9ea84:	0009eb41 	.word	0x0009eb41
   9ea88:	0009eb41 	.word	0x0009eb41
   9ea8c:	0009eb0d 	.word	0x0009eb0d
   9ea90:	0009eb17 	.word	0x0009eb17
   9ea94:	0009eb21 	.word	0x0009eb21
   9ea98:	0009eb31 	.word	0x0009eb31
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9ea9e:	4a38      	ldr	r2, [pc, #224]	; (9eb80 <Cl_Rinse_Controller+0x610>)
   9eaa0:	fba2 2303 	umull	r2, r3, r2, r3
   9eaa4:	08da      	lsrs	r2, r3, #3
   9eaa6:	4b37      	ldr	r3, [pc, #220]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eaa8:	4610      	mov	r0, r2
   9eaaa:	4798      	blx	r3
   9eaac:	4602      	mov	r2, r0
   9eaae:	4b36      	ldr	r3, [pc, #216]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eab0:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9eab2:	e046      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9eab6:	4a32      	ldr	r2, [pc, #200]	; (9eb80 <Cl_Rinse_Controller+0x610>)
   9eab8:	fba2 2303 	umull	r2, r3, r2, r3
   9eabc:	08da      	lsrs	r2, r3, #3
   9eabe:	4b31      	ldr	r3, [pc, #196]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eac0:	4610      	mov	r0, r2
   9eac2:	4798      	blx	r3
   9eac4:	4602      	mov	r2, r0
   9eac6:	4b30      	ldr	r3, [pc, #192]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eac8:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9eaca:	e03a      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9eacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eace:	4b2d      	ldr	r3, [pc, #180]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9ead0:	4610      	mov	r0, r2
   9ead2:	4798      	blx	r3
   9ead4:	4602      	mov	r2, r0
   9ead6:	4b2c      	ldr	r3, [pc, #176]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9ead8:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9eada:	e032      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9eadc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eade:	4b29      	ldr	r3, [pc, #164]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eae0:	4610      	mov	r0, r2
   9eae2:	4798      	blx	r3
   9eae4:	4602      	mov	r2, r0
   9eae6:	4b28      	ldr	r3, [pc, #160]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eae8:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9eaea:	e02a      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9eaec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eaee:	4b25      	ldr	r3, [pc, #148]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eaf0:	4610      	mov	r0, r2
   9eaf2:	4798      	blx	r3
   9eaf4:	4602      	mov	r2, r0
   9eaf6:	4b24      	ldr	r3, [pc, #144]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eaf8:	615a      	str	r2, [r3, #20]
										break;
   9eafa:	e022      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9eafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eafe:	4b21      	ldr	r3, [pc, #132]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eb00:	4610      	mov	r0, r2
   9eb02:	4798      	blx	r3
   9eb04:	4602      	mov	r2, r0
   9eb06:	4b20      	ldr	r3, [pc, #128]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eb08:	611a      	str	r2, [r3, #16]
										break;
   9eb0a:	e01a      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9eb0e:	b21a      	sxth	r2, r3
   9eb10:	4b1d      	ldr	r3, [pc, #116]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eb12:	801a      	strh	r2, [r3, #0]
										break;
   9eb14:	e015      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9eb18:	b21a      	sxth	r2, r3
   9eb1a:	4b1b      	ldr	r3, [pc, #108]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eb1c:	805a      	strh	r2, [r3, #2]
										break;
   9eb1e:	e010      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9eb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eb22:	4b18      	ldr	r3, [pc, #96]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eb24:	4610      	mov	r0, r2
   9eb26:	4798      	blx	r3
   9eb28:	4602      	mov	r2, r0
   9eb2a:	4b17      	ldr	r3, [pc, #92]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eb2c:	60da      	str	r2, [r3, #12]
										break;
   9eb2e:	e008      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9eb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   9eb32:	4b14      	ldr	r3, [pc, #80]	; (9eb84 <Cl_Rinse_Controller+0x614>)
   9eb34:	4610      	mov	r0, r2
   9eb36:	4798      	blx	r3
   9eb38:	4602      	mov	r2, r0
   9eb3a:	4b13      	ldr	r3, [pc, #76]	; (9eb88 <Cl_Rinse_Controller+0x618>)
   9eb3c:	609a      	str	r2, [r3, #8]
										break;
   9eb3e:	e000      	b.n	9eb42 <Cl_Rinse_Controller+0x5d2>

									default:break;
   9eb40:	bf00      	nop
								}
							}
						
						break;
   9eb42:	e35d      	b.n	9f200 <Cl_Rinse_Controller+0xc90>
						case EVT_RINSE_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9eb44:	4b06      	ldr	r3, [pc, #24]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9eb46:	7e1b      	ldrb	r3, [r3, #24]
   9eb48:	2b00      	cmp	r3, #0
   9eb4a:	f000 835c 	beq.w	9f206 <Cl_Rinse_Controller+0xc96>
								{
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9eb4e:	4b04      	ldr	r3, [pc, #16]	; (9eb60 <Cl_Rinse_Controller+0x5f0>)
   9eb50:	791b      	ldrb	r3, [r3, #4]
   9eb52:	2b20      	cmp	r3, #32
   9eb54:	d036      	beq.n	9ebc4 <Cl_Rinse_Controller+0x654>
   9eb56:	2b21      	cmp	r3, #33	; 0x21
   9eb58:	d049      	beq.n	9ebee <Cl_Rinse_Controller+0x67e>
   9eb5a:	2b02      	cmp	r3, #2
   9eb5c:	d016      	beq.n	9eb8c <Cl_Rinse_Controller+0x61c>
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
										break;			
															
										default:
										break;
   9eb5e:	e062      	b.n	9ec26 <Cl_Rinse_Controller+0x6b6>
   9eb60:	20072f2c 	.word	0x20072f2c
   9eb64:	20072821 	.word	0x20072821
   9eb68:	000a09d1 	.word	0x000a09d1
   9eb6c:	00098601 	.word	0x00098601
   9eb70:	0009fdfd 	.word	0x0009fdfd
   9eb74:	200727fe 	.word	0x200727fe
   9eb78:	200727ff 	.word	0x200727ff
   9eb7c:	000a0049 	.word	0x000a0049
   9eb80:	cccccccd 	.word	0xcccccccd
   9eb84:	000a25dd 	.word	0x000a25dd
   9eb88:	20072c9c 	.word	0x20072c9c
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{

										case CON_RX_PARAM_DATA_PRIME_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9eb8c:	2316      	movs	r3, #22
   9eb8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9eb92:	2302      	movs	r3, #2
   9eb94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9eb98:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9eb9c:	3301      	adds	r3, #1
   9eb9e:	4619      	mov	r1, r3
   9eba0:	2002      	movs	r0, #2
   9eba2:	4b4a      	ldr	r3, [pc, #296]	; (9eccc <Cl_Rinse_Controller+0x75c>)
   9eba4:	4798      	blx	r3
   9eba6:	4603      	mov	r3, r0
   9eba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ebac:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9ebb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9ebb4:	2202      	movs	r2, #2
   9ebb6:	4618      	mov	r0, r3
   9ebb8:	4b45      	ldr	r3, [pc, #276]	; (9ecd0 <Cl_Rinse_Controller+0x760>)
   9ebba:	4798      	blx	r3
   9ebbc:	4603      	mov	r3, r0
   9ebbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;
   9ebc2:	e030      	b.n	9ec26 <Cl_Rinse_Controller+0x6b6>

										case CON_RX_PARAM_DATA_RECIRC_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9ebc4:	2316      	movs	r3, #22
   9ebc6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   9ebca:	2321      	movs	r3, #33	; 0x21
   9ebcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
										dataarray[1] = 0;
   9ebd0:	2300      	movs	r3, #0
   9ebd2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ebd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9ebda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9ebde:	2202      	movs	r2, #2
   9ebe0:	4618      	mov	r0, r3
   9ebe2:	4b3b      	ldr	r3, [pc, #236]	; (9ecd0 <Cl_Rinse_Controller+0x760>)
   9ebe4:	4798      	blx	r3
   9ebe6:	4603      	mov	r3, r0
   9ebe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;		
   9ebec:	e01b      	b.n	9ec26 <Cl_Rinse_Controller+0x6b6>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9ebee:	2316      	movs	r3, #22
   9ebf0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
										dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9ebf4:	2323      	movs	r3, #35	; 0x23
   9ebf6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9ebfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9ebfe:	3301      	adds	r3, #1
   9ec00:	4619      	mov	r1, r3
   9ec02:	2028      	movs	r0, #40	; 0x28
   9ec04:	4b31      	ldr	r3, [pc, #196]	; (9eccc <Cl_Rinse_Controller+0x75c>)
   9ec06:	4798      	blx	r3
   9ec08:	4603      	mov	r3, r0
   9ec0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9ec0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9ec12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9ec16:	2202      	movs	r2, #2
   9ec18:	4618      	mov	r0, r3
   9ec1a:	4b2d      	ldr	r3, [pc, #180]	; (9ecd0 <Cl_Rinse_Controller+0x760>)
   9ec1c:	4798      	blx	r3
   9ec1e:	4603      	mov	r3, r0
   9ec20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										break;			
   9ec24:	bf00      	nop
															
										default:
										break;
									}
								}
						break;
   9ec26:	e2ee      	b.n	9f206 <Cl_Rinse_Controller+0xc96>
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   9ec28:	4b2a      	ldr	r3, [pc, #168]	; (9ecd4 <Cl_Rinse_Controller+0x764>)
   9ec2a:	781b      	ldrb	r3, [r3, #0]
   9ec2c:	2b02      	cmp	r3, #2
   9ec2e:	f040 82ed 	bne.w	9f20c <Cl_Rinse_Controller+0xc9c>
						{
									cl_50ms_timer++;
   9ec32:	4b29      	ldr	r3, [pc, #164]	; (9ecd8 <Cl_Rinse_Controller+0x768>)
   9ec34:	881b      	ldrh	r3, [r3, #0]
   9ec36:	3301      	adds	r3, #1
   9ec38:	b29a      	uxth	r2, r3
   9ec3a:	4b27      	ldr	r3, [pc, #156]	; (9ecd8 <Cl_Rinse_Controller+0x768>)
   9ec3c:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   9ec3e:	4b26      	ldr	r3, [pc, #152]	; (9ecd8 <Cl_Rinse_Controller+0x768>)
   9ec40:	881b      	ldrh	r3, [r3, #0]
   9ec42:	2b02      	cmp	r3, #2
   9ec44:	f040 82e2 	bne.w	9f20c <Cl_Rinse_Controller+0xc9c>
									{
										cl_50ms_timer =0;
   9ec48:	4b23      	ldr	r3, [pc, #140]	; (9ecd8 <Cl_Rinse_Controller+0x768>)
   9ec4a:	2200      	movs	r2, #0
   9ec4c:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   9ec4e:	e2dd      	b.n	9f20c <Cl_Rinse_Controller+0xc9c>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   9ec50:	4b22      	ldr	r3, [pc, #136]	; (9ecdc <Cl_Rinse_Controller+0x76c>)
   9ec52:	681a      	ldr	r2, [r3, #0]
   9ec54:	4b22      	ldr	r3, [pc, #136]	; (9ece0 <Cl_Rinse_Controller+0x770>)
   9ec56:	4923      	ldr	r1, [pc, #140]	; (9ece4 <Cl_Rinse_Controller+0x774>)
   9ec58:	4610      	mov	r0, r2
   9ec5a:	4798      	blx	r3
   9ec5c:	4603      	mov	r3, r0
   9ec5e:	2b00      	cmp	r3, #0
   9ec60:	d00d      	beq.n	9ec7e <Cl_Rinse_Controller+0x70e>
   9ec62:	4b1e      	ldr	r3, [pc, #120]	; (9ecdc <Cl_Rinse_Controller+0x76c>)
   9ec64:	681a      	ldr	r2, [r3, #0]
   9ec66:	4b20      	ldr	r3, [pc, #128]	; (9ece8 <Cl_Rinse_Controller+0x778>)
   9ec68:	4920      	ldr	r1, [pc, #128]	; (9ecec <Cl_Rinse_Controller+0x77c>)
   9ec6a:	4610      	mov	r0, r2
   9ec6c:	4798      	blx	r3
   9ec6e:	4603      	mov	r3, r0
   9ec70:	2b00      	cmp	r3, #0
   9ec72:	d004      	beq.n	9ec7e <Cl_Rinse_Controller+0x70e>
							{
								sv_cntrl_decheater(2200);
   9ec74:	f640 0098 	movw	r0, #2200	; 0x898
   9ec78:	4b1d      	ldr	r3, [pc, #116]	; (9ecf0 <Cl_Rinse_Controller+0x780>)
   9ec7a:	4798      	blx	r3
   9ec7c:	e025      	b.n	9ecca <Cl_Rinse_Controller+0x75a>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   9ec7e:	4b17      	ldr	r3, [pc, #92]	; (9ecdc <Cl_Rinse_Controller+0x76c>)
   9ec80:	681a      	ldr	r2, [r3, #0]
   9ec82:	4b17      	ldr	r3, [pc, #92]	; (9ece0 <Cl_Rinse_Controller+0x770>)
   9ec84:	4919      	ldr	r1, [pc, #100]	; (9ecec <Cl_Rinse_Controller+0x77c>)
   9ec86:	4610      	mov	r0, r2
   9ec88:	4798      	blx	r3
   9ec8a:	4603      	mov	r3, r0
   9ec8c:	2b00      	cmp	r3, #0
   9ec8e:	d00d      	beq.n	9ecac <Cl_Rinse_Controller+0x73c>
   9ec90:	4b12      	ldr	r3, [pc, #72]	; (9ecdc <Cl_Rinse_Controller+0x76c>)
   9ec92:	681a      	ldr	r2, [r3, #0]
   9ec94:	4b14      	ldr	r3, [pc, #80]	; (9ece8 <Cl_Rinse_Controller+0x778>)
   9ec96:	4917      	ldr	r1, [pc, #92]	; (9ecf4 <Cl_Rinse_Controller+0x784>)
   9ec98:	4610      	mov	r0, r2
   9ec9a:	4798      	blx	r3
   9ec9c:	4603      	mov	r3, r0
   9ec9e:	2b00      	cmp	r3, #0
   9eca0:	d004      	beq.n	9ecac <Cl_Rinse_Controller+0x73c>
							{
								sv_cntrl_decheater(2000);
   9eca2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   9eca6:	4b12      	ldr	r3, [pc, #72]	; (9ecf0 <Cl_Rinse_Controller+0x780>)
   9eca8:	4798      	blx	r3
   9ecaa:	e00e      	b.n	9ecca <Cl_Rinse_Controller+0x75a>
							}
							else if (avgtemp2_dummy > 77)
   9ecac:	4b0b      	ldr	r3, [pc, #44]	; (9ecdc <Cl_Rinse_Controller+0x76c>)
   9ecae:	681a      	ldr	r2, [r3, #0]
   9ecb0:	4b0b      	ldr	r3, [pc, #44]	; (9ece0 <Cl_Rinse_Controller+0x770>)
   9ecb2:	4910      	ldr	r1, [pc, #64]	; (9ecf4 <Cl_Rinse_Controller+0x784>)
   9ecb4:	4610      	mov	r0, r2
   9ecb6:	4798      	blx	r3
   9ecb8:	4603      	mov	r3, r0
   9ecba:	2b00      	cmp	r3, #0
   9ecbc:	d100      	bne.n	9ecc0 <Cl_Rinse_Controller+0x750>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   9ecbe:	e2b5      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   9ecc0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   9ecc4:	4b0a      	ldr	r3, [pc, #40]	; (9ecf0 <Cl_Rinse_Controller+0x780>)
   9ecc6:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   9ecc8:	e2b0      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
   9ecca:	e2af      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
   9eccc:	0009710d 	.word	0x0009710d
   9ecd0:	00098601 	.word	0x00098601
   9ecd4:	200727ff 	.word	0x200727ff
   9ecd8:	2007281e 	.word	0x2007281e
   9ecdc:	200725c0 	.word	0x200725c0
   9ece0:	000a2a05 	.word	0x000a2a05
   9ece4:	42960000 	.word	0x42960000
   9ece8:	000a29c9 	.word	0x000a29c9
   9ecec:	42980000 	.word	0x42980000
   9ecf0:	000969a5 	.word	0x000969a5
   9ecf4:	429a0000 	.word	0x429a0000
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9ecf8:	4b7f      	ldr	r3, [pc, #508]	; (9eef8 <Cl_Rinse_Controller+0x988>)
   9ecfa:	781b      	ldrb	r3, [r3, #0]
   9ecfc:	2b03      	cmp	r3, #3
   9ecfe:	d101      	bne.n	9ed04 <Cl_Rinse_Controller+0x794>
						{
							Cl_Rinse_SendRinseStateData();	
   9ed00:	4b7e      	ldr	r3, [pc, #504]	; (9eefc <Cl_Rinse_Controller+0x98c>)
   9ed02:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   9ed04:	4b7e      	ldr	r3, [pc, #504]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9ed06:	681b      	ldr	r3, [r3, #0]
   9ed08:	3301      	adds	r3, #1
   9ed0a:	4a7d      	ldr	r2, [pc, #500]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9ed0c:	6013      	str	r3, [r2, #0]
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   9ed0e:	4b7c      	ldr	r3, [pc, #496]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9ed10:	681b      	ldr	r3, [r3, #0]
   9ed12:	2b0a      	cmp	r3, #10
   9ed14:	d118      	bne.n	9ed48 <Cl_Rinse_Controller+0x7d8>
   9ed16:	4b7b      	ldr	r3, [pc, #492]	; (9ef04 <Cl_Rinse_Controller+0x994>)
   9ed18:	781b      	ldrb	r3, [r3, #0]
   9ed1a:	b2db      	uxtb	r3, r3
   9ed1c:	2b01      	cmp	r3, #1
   9ed1e:	d113      	bne.n	9ed48 <Cl_Rinse_Controller+0x7d8>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   9ed20:	2206      	movs	r2, #6
   9ed22:	4979      	ldr	r1, [pc, #484]	; (9ef08 <Cl_Rinse_Controller+0x998>)
   9ed24:	2018      	movs	r0, #24
   9ed26:	4b79      	ldr	r3, [pc, #484]	; (9ef0c <Cl_Rinse_Controller+0x99c>)
   9ed28:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   9ed2a:	2004      	movs	r0, #4
   9ed2c:	4b78      	ldr	r3, [pc, #480]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ed2e:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   9ed30:	2001      	movs	r0, #1
   9ed32:	4b78      	ldr	r3, [pc, #480]	; (9ef14 <Cl_Rinse_Controller+0x9a4>)
   9ed34:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   9ed36:	2013      	movs	r0, #19
   9ed38:	4b77      	ldr	r3, [pc, #476]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ed3a:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   9ed3c:	2014      	movs	r0, #20
   9ed3e:	4b76      	ldr	r3, [pc, #472]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ed40:	4798      	blx	r3
							rinse2=1;
   9ed42:	4b76      	ldr	r3, [pc, #472]	; (9ef1c <Cl_Rinse_Controller+0x9ac>)
   9ed44:	2201      	movs	r2, #1
   9ed46:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   9ed48:	4b6d      	ldr	r3, [pc, #436]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9ed4a:	681b      	ldr	r3, [r3, #0]
   9ed4c:	2b1e      	cmp	r3, #30
   9ed4e:	d129      	bne.n	9eda4 <Cl_Rinse_Controller+0x834>
   9ed50:	4b6c      	ldr	r3, [pc, #432]	; (9ef04 <Cl_Rinse_Controller+0x994>)
   9ed52:	781b      	ldrb	r3, [r3, #0]
   9ed54:	b2db      	uxtb	r3, r3
   9ed56:	2b01      	cmp	r3, #1
   9ed58:	d124      	bne.n	9eda4 <Cl_Rinse_Controller+0x834>
   9ed5a:	4b70      	ldr	r3, [pc, #448]	; (9ef1c <Cl_Rinse_Controller+0x9ac>)
   9ed5c:	781b      	ldrb	r3, [r3, #0]
   9ed5e:	b2db      	uxtb	r3, r3
   9ed60:	2b01      	cmp	r3, #1
   9ed62:	d11f      	bne.n	9eda4 <Cl_Rinse_Controller+0x834>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   9ed64:	2206      	movs	r2, #6
   9ed66:	496e      	ldr	r1, [pc, #440]	; (9ef20 <Cl_Rinse_Controller+0x9b0>)
   9ed68:	2018      	movs	r0, #24
   9ed6a:	4b68      	ldr	r3, [pc, #416]	; (9ef0c <Cl_Rinse_Controller+0x99c>)
   9ed6c:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   9ed6e:	2002      	movs	r0, #2
   9ed70:	4b68      	ldr	r3, [pc, #416]	; (9ef14 <Cl_Rinse_Controller+0x9a4>)
   9ed72:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   9ed74:	2013      	movs	r0, #19
   9ed76:	4b66      	ldr	r3, [pc, #408]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ed78:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   9ed7a:	2014      	movs	r0, #20
   9ed7c:	4b64      	ldr	r3, [pc, #400]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ed7e:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   9ed80:	2001      	movs	r0, #1
   9ed82:	4b68      	ldr	r3, [pc, #416]	; (9ef24 <Cl_Rinse_Controller+0x9b4>)
   9ed84:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   9ed86:	2002      	movs	r0, #2
   9ed88:	4b66      	ldr	r3, [pc, #408]	; (9ef24 <Cl_Rinse_Controller+0x9b4>)
   9ed8a:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   9ed8c:	2006      	movs	r0, #6
   9ed8e:	4b62      	ldr	r3, [pc, #392]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ed90:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   9ed92:	2008      	movs	r0, #8
   9ed94:	4b60      	ldr	r3, [pc, #384]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ed96:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   9ed98:	2011      	movs	r0, #17
   9ed9a:	4b5f      	ldr	r3, [pc, #380]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ed9c:	4798      	blx	r3
							rinse3=1;
   9ed9e:	4b62      	ldr	r3, [pc, #392]	; (9ef28 <Cl_Rinse_Controller+0x9b8>)
   9eda0:	2201      	movs	r2, #1
   9eda2:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   9eda4:	4b56      	ldr	r3, [pc, #344]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9eda6:	681b      	ldr	r3, [r3, #0]
   9eda8:	2b37      	cmp	r3, #55	; 0x37
   9edaa:	d11c      	bne.n	9ede6 <Cl_Rinse_Controller+0x876>
   9edac:	4b55      	ldr	r3, [pc, #340]	; (9ef04 <Cl_Rinse_Controller+0x994>)
   9edae:	781b      	ldrb	r3, [r3, #0]
   9edb0:	b2db      	uxtb	r3, r3
   9edb2:	2b01      	cmp	r3, #1
   9edb4:	d117      	bne.n	9ede6 <Cl_Rinse_Controller+0x876>
   9edb6:	4b59      	ldr	r3, [pc, #356]	; (9ef1c <Cl_Rinse_Controller+0x9ac>)
   9edb8:	781b      	ldrb	r3, [r3, #0]
   9edba:	b2db      	uxtb	r3, r3
   9edbc:	2b01      	cmp	r3, #1
   9edbe:	d112      	bne.n	9ede6 <Cl_Rinse_Controller+0x876>
   9edc0:	4b59      	ldr	r3, [pc, #356]	; (9ef28 <Cl_Rinse_Controller+0x9b8>)
   9edc2:	781b      	ldrb	r3, [r3, #0]
   9edc4:	b2db      	uxtb	r3, r3
   9edc6:	2b01      	cmp	r3, #1
   9edc8:	d10d      	bne.n	9ede6 <Cl_Rinse_Controller+0x876>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   9edca:	2206      	movs	r2, #6
   9edcc:	4957      	ldr	r1, [pc, #348]	; (9ef2c <Cl_Rinse_Controller+0x9bc>)
   9edce:	2018      	movs	r0, #24
   9edd0:	4b4e      	ldr	r3, [pc, #312]	; (9ef0c <Cl_Rinse_Controller+0x99c>)
   9edd2:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   9edd4:	2004      	movs	r0, #4
   9edd6:	4b50      	ldr	r3, [pc, #320]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9edd8:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   9edda:	2011      	movs	r0, #17
   9eddc:	4b4c      	ldr	r3, [pc, #304]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9edde:	4798      	blx	r3
							rinse4=1;
   9ede0:	4b53      	ldr	r3, [pc, #332]	; (9ef30 <Cl_Rinse_Controller+0x9c0>)
   9ede2:	2201      	movs	r2, #1
   9ede4:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   9ede6:	4b46      	ldr	r3, [pc, #280]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9ede8:	681b      	ldr	r3, [r3, #0]
   9edea:	2b3c      	cmp	r3, #60	; 0x3c
   9edec:	f040 8211 	bne.w	9f212 <Cl_Rinse_Controller+0xca2>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   9edf0:	2100      	movs	r1, #0
   9edf2:	2004      	movs	r0, #4
   9edf4:	4b4f      	ldr	r3, [pc, #316]	; (9ef34 <Cl_Rinse_Controller+0x9c4>)
   9edf6:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   9edf8:	4b41      	ldr	r3, [pc, #260]	; (9ef00 <Cl_Rinse_Controller+0x990>)
   9edfa:	2200      	movs	r2, #0
   9edfc:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   9edfe:	4b4e      	ldr	r3, [pc, #312]	; (9ef38 <Cl_Rinse_Controller+0x9c8>)
   9ee00:	681b      	ldr	r3, [r3, #0]
   9ee02:	3301      	adds	r3, #1
   9ee04:	4a4c      	ldr	r2, [pc, #304]	; (9ef38 <Cl_Rinse_Controller+0x9c8>)
   9ee06:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   9ee08:	4b4b      	ldr	r3, [pc, #300]	; (9ef38 <Cl_Rinse_Controller+0x9c8>)
   9ee0a:	681b      	ldr	r3, [r3, #0]
   9ee0c:	2b01      	cmp	r3, #1
   9ee0e:	d10d      	bne.n	9ee2c <Cl_Rinse_Controller+0x8bc>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   9ee10:	2206      	movs	r2, #6
   9ee12:	494a      	ldr	r1, [pc, #296]	; (9ef3c <Cl_Rinse_Controller+0x9cc>)
   9ee14:	2018      	movs	r0, #24
   9ee16:	4b3d      	ldr	r3, [pc, #244]	; (9ef0c <Cl_Rinse_Controller+0x99c>)
   9ee18:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   9ee1a:	2004      	movs	r0, #4
   9ee1c:	4b3e      	ldr	r3, [pc, #248]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ee1e:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   9ee20:	2011      	movs	r0, #17
   9ee22:	4b3b      	ldr	r3, [pc, #236]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ee24:	4798      	blx	r3
								rinse1=1;
   9ee26:	4b37      	ldr	r3, [pc, #220]	; (9ef04 <Cl_Rinse_Controller+0x994>)
   9ee28:	2201      	movs	r2, #1
   9ee2a:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == 2)
   9ee2c:	4b42      	ldr	r3, [pc, #264]	; (9ef38 <Cl_Rinse_Controller+0x9c8>)
   9ee2e:	681b      	ldr	r3, [r3, #0]
   9ee30:	2b02      	cmp	r3, #2
   9ee32:	d11e      	bne.n	9ee72 <Cl_Rinse_Controller+0x902>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   9ee34:	2206      	movs	r2, #6
   9ee36:	4942      	ldr	r1, [pc, #264]	; (9ef40 <Cl_Rinse_Controller+0x9d0>)
   9ee38:	2018      	movs	r0, #24
   9ee3a:	4b34      	ldr	r3, [pc, #208]	; (9ef0c <Cl_Rinse_Controller+0x99c>)
   9ee3c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   9ee3e:	2004      	movs	r0, #4
   9ee40:	4b33      	ldr	r3, [pc, #204]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ee42:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   9ee44:	2011      	movs	r0, #17
   9ee46:	4b34      	ldr	r3, [pc, #208]	; (9ef18 <Cl_Rinse_Controller+0x9a8>)
   9ee48:	4798      	blx	r3
								sv_prop_stopopenfill();
   9ee4a:	4b3e      	ldr	r3, [pc, #248]	; (9ef44 <Cl_Rinse_Controller+0x9d4>)
   9ee4c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9ee4e:	2002      	movs	r0, #2
   9ee50:	4b2f      	ldr	r3, [pc, #188]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ee52:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9ee54:	2003      	movs	r0, #3
   9ee56:	4b2e      	ldr	r3, [pc, #184]	; (9ef10 <Cl_Rinse_Controller+0x9a0>)
   9ee58:	4798      	blx	r3
								
								rinse1=0;
   9ee5a:	4b2a      	ldr	r3, [pc, #168]	; (9ef04 <Cl_Rinse_Controller+0x994>)
   9ee5c:	2200      	movs	r2, #0
   9ee5e:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   9ee60:	4b2e      	ldr	r3, [pc, #184]	; (9ef1c <Cl_Rinse_Controller+0x9ac>)
   9ee62:	2200      	movs	r2, #0
   9ee64:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   9ee66:	4b30      	ldr	r3, [pc, #192]	; (9ef28 <Cl_Rinse_Controller+0x9b8>)
   9ee68:	2200      	movs	r2, #0
   9ee6a:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   9ee6c:	4b30      	ldr	r3, [pc, #192]	; (9ef30 <Cl_Rinse_Controller+0x9c0>)
   9ee6e:	2200      	movs	r2, #0
   9ee70:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   9ee72:	4b35      	ldr	r3, [pc, #212]	; (9ef48 <Cl_Rinse_Controller+0x9d8>)
   9ee74:	681b      	ldr	r3, [r3, #0]
   9ee76:	3301      	adds	r3, #1
   9ee78:	4a33      	ldr	r2, [pc, #204]	; (9ef48 <Cl_Rinse_Controller+0x9d8>)
   9ee7a:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9ee7c:	4b1e      	ldr	r3, [pc, #120]	; (9eef8 <Cl_Rinse_Controller+0x988>)
   9ee7e:	781b      	ldrb	r3, [r3, #0]
   9ee80:	2b03      	cmp	r3, #3
   9ee82:	f040 81c6 	bne.w	9f212 <Cl_Rinse_Controller+0xca2>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9ee86:	4b31      	ldr	r3, [pc, #196]	; (9ef4c <Cl_Rinse_Controller+0x9dc>)
   9ee88:	4798      	blx	r3
   9ee8a:	4603      	mov	r3, r0
   9ee8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   9ee90:	e1bf      	b.n	9f212 <Cl_Rinse_Controller+0xca2>
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   9ee92:	4b2f      	ldr	r3, [pc, #188]	; (9ef50 <Cl_Rinse_Controller+0x9e0>)
   9ee94:	781b      	ldrb	r3, [r3, #0]
   9ee96:	b2db      	uxtb	r3, r3
   9ee98:	3301      	adds	r3, #1
   9ee9a:	b2da      	uxtb	r2, r3
   9ee9c:	4b2c      	ldr	r3, [pc, #176]	; (9ef50 <Cl_Rinse_Controller+0x9e0>)
   9ee9e:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   9eea0:	4b2b      	ldr	r3, [pc, #172]	; (9ef50 <Cl_Rinse_Controller+0x9e0>)
   9eea2:	781b      	ldrb	r3, [r3, #0]
   9eea4:	b2db      	uxtb	r3, r3
   9eea6:	2b1e      	cmp	r3, #30
   9eea8:	d905      	bls.n	9eeb6 <Cl_Rinse_Controller+0x946>
							{
								sv_cntrl_poweroffheater();
   9eeaa:	4b2a      	ldr	r3, [pc, #168]	; (9ef54 <Cl_Rinse_Controller+0x9e4>)
   9eeac:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9eeae:	4b2a      	ldr	r3, [pc, #168]	; (9ef58 <Cl_Rinse_Controller+0x9e8>)
   9eeb0:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   9eeb2:	4b2a      	ldr	r3, [pc, #168]	; (9ef5c <Cl_Rinse_Controller+0x9ec>)
   9eeb4:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   9eeb6:	4b2a      	ldr	r3, [pc, #168]	; (9ef60 <Cl_Rinse_Controller+0x9f0>)
   9eeb8:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   9eeba:	4b2a      	ldr	r3, [pc, #168]	; (9ef64 <Cl_Rinse_Controller+0x9f4>)
   9eebc:	4798      	blx	r3
   9eebe:	4603      	mov	r3, r0
   9eec0:	2b00      	cmp	r3, #0
   9eec2:	f040 81a9 	bne.w	9f218 <Cl_Rinse_Controller+0xca8>
							{
								sv_cntrl_setgreenalarm();
   9eec6:	4b28      	ldr	r3, [pc, #160]	; (9ef68 <Cl_Rinse_Controller+0x9f8>)
   9eec8:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   9eeca:	2001      	movs	r0, #1
   9eecc:	4b11      	ldr	r3, [pc, #68]	; (9ef14 <Cl_Rinse_Controller+0x9a4>)
   9eece:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   9eed0:	2002      	movs	r0, #2
   9eed2:	4b10      	ldr	r3, [pc, #64]	; (9ef14 <Cl_Rinse_Controller+0x9a4>)
   9eed4:	4798      	blx	r3
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   9eed6:	4b25      	ldr	r3, [pc, #148]	; (9ef6c <Cl_Rinse_Controller+0x9fc>)
   9eed8:	4798      	blx	r3
   9eeda:	4603      	mov	r3, r0
   9eedc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   9eee0:	4b05      	ldr	r3, [pc, #20]	; (9eef8 <Cl_Rinse_Controller+0x988>)
   9eee2:	781b      	ldrb	r3, [r3, #0]
   9eee4:	2b04      	cmp	r3, #4
   9eee6:	d145      	bne.n	9ef74 <Cl_Rinse_Controller+0xa04>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   9eee8:	2052      	movs	r0, #82	; 0x52
   9eeea:	4b21      	ldr	r3, [pc, #132]	; (9ef70 <Cl_Rinse_Controller+0xa00>)
   9eeec:	4798      	blx	r3
   9eeee:	4603      	mov	r3, r0
   9eef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   9eef4:	e048      	b.n	9ef88 <Cl_Rinse_Controller+0xa18>
   9eef6:	bf00      	nop
   9eef8:	200727fe 	.word	0x200727fe
   9eefc:	000a0579 	.word	0x000a0579
   9ef00:	20072800 	.word	0x20072800
   9ef04:	200727fa 	.word	0x200727fa
   9ef08:	000a4b8c 	.word	0x000a4b8c
   9ef0c:	00098601 	.word	0x00098601
   9ef10:	0009689d 	.word	0x0009689d
   9ef14:	00096819 	.word	0x00096819
   9ef18:	0009687d 	.word	0x0009687d
   9ef1c:	200727fb 	.word	0x200727fb
   9ef20:	000a4b94 	.word	0x000a4b94
   9ef24:	000967dd 	.word	0x000967dd
   9ef28:	200727fc 	.word	0x200727fc
   9ef2c:	000a4b9c 	.word	0x000a4b9c
   9ef30:	200727fd 	.word	0x200727fd
   9ef34:	00092e89 	.word	0x00092e89
   9ef38:	20072804 	.word	0x20072804
   9ef3c:	000a4ba4 	.word	0x000a4ba4
   9ef40:	000a4bac 	.word	0x000a4bac
   9ef44:	00096d01 	.word	0x00096d01
   9ef48:	20072810 	.word	0x20072810
   9ef4c:	0009fdfd 	.word	0x0009fdfd
   9ef50:	20072822 	.word	0x20072822
   9ef54:	00096869 	.word	0x00096869
   9ef58:	00096a0d 	.word	0x00096a0d
   9ef5c:	00096a29 	.word	0x00096a29
   9ef60:	000a0071 	.word	0x000a0071
   9ef64:	0009fe49 	.word	0x0009fe49
   9ef68:	00096afd 	.word	0x00096afd
   9ef6c:	0009fec9 	.word	0x0009fec9
   9ef70:	0008a915 	.word	0x0008a915
								}
								else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   9ef74:	4bae      	ldr	r3, [pc, #696]	; (9f230 <Cl_Rinse_Controller+0xcc0>)
   9ef76:	781b      	ldrb	r3, [r3, #0]
   9ef78:	2b05      	cmp	r3, #5
   9ef7a:	d105      	bne.n	9ef88 <Cl_Rinse_Controller+0xa18>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   9ef7c:	2053      	movs	r0, #83	; 0x53
   9ef7e:	4bad      	ldr	r3, [pc, #692]	; (9f234 <Cl_Rinse_Controller+0xcc4>)
   9ef80:	4798      	blx	r3
   9ef82:	4603      	mov	r3, r0
   9ef84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								}
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   9ef88:	2100      	movs	r1, #0
   9ef8a:	200c      	movs	r0, #12
   9ef8c:	4baa      	ldr	r3, [pc, #680]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9ef8e:	4798      	blx	r3
   9ef90:	4603      	mov	r3, r0
   9ef92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   9ef96:	2100      	movs	r1, #0
   9ef98:	200d      	movs	r0, #13
   9ef9a:	4ba7      	ldr	r3, [pc, #668]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9ef9c:	4798      	blx	r3
   9ef9e:	4603      	mov	r3, r0
   9efa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   9efa4:	2100      	movs	r1, #0
   9efa6:	200e      	movs	r0, #14
   9efa8:	4ba3      	ldr	r3, [pc, #652]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9efaa:	4798      	blx	r3
   9efac:	4603      	mov	r3, r0
   9efae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9efb2:	2100      	movs	r1, #0
   9efb4:	2029      	movs	r0, #41	; 0x29
   9efb6:	4ba0      	ldr	r3, [pc, #640]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9efb8:	4798      	blx	r3
   9efba:	4603      	mov	r3, r0
   9efbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9efc0:	2100      	movs	r1, #0
   9efc2:	202b      	movs	r0, #43	; 0x2b
   9efc4:	4b9c      	ldr	r3, [pc, #624]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9efc6:	4798      	blx	r3
   9efc8:	4603      	mov	r3, r0
   9efca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9efce:	2100      	movs	r1, #0
   9efd0:	2003      	movs	r0, #3
   9efd2:	4b99      	ldr	r3, [pc, #612]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9efd4:	4798      	blx	r3
   9efd6:	4603      	mov	r3, r0
   9efd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9efdc:	2100      	movs	r1, #0
   9efde:	2004      	movs	r0, #4
   9efe0:	4b95      	ldr	r3, [pc, #596]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9efe2:	4798      	blx	r3
   9efe4:	4603      	mov	r3, r0
   9efe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9efea:	4b91      	ldr	r3, [pc, #580]	; (9f230 <Cl_Rinse_Controller+0xcc0>)
   9efec:	2209      	movs	r2, #9
   9efee:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   9eff0:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9eff4:	4619      	mov	r1, r3
   9eff6:	2012      	movs	r0, #18
   9eff8:	4b90      	ldr	r3, [pc, #576]	; (9f23c <Cl_Rinse_Controller+0xccc>)
   9effa:	4798      	blx	r3
												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
   9effc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   9effe:	461a      	mov	r2, r3
   9f000:	f649 5308 	movw	r3, #40200	; 0x9d08
   9f004:	fb03 f302 	mul.w	r3, r3, r2
   9f008:	2b00      	cmp	r3, #0
   9f00a:	da02      	bge.n	9f012 <Cl_Rinse_Controller+0xaa2>
   9f00c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9f010:	33ff      	adds	r3, #255	; 0xff
   9f012:	141b      	asrs	r3, r3, #16
   9f014:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												res_temp_lookuptable(cal_data);
   9f018:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   9f01c:	4618      	mov	r0, r3
   9f01e:	4b88      	ldr	r3, [pc, #544]	; (9f240 <Cl_Rinse_Controller+0xcd0>)
   9f020:	4798      	blx	r3
												 uint16_t temp = res_temp_value /10;
   9f022:	4b88      	ldr	r3, [pc, #544]	; (9f244 <Cl_Rinse_Controller+0xcd4>)
   9f024:	681a      	ldr	r2, [r3, #0]
   9f026:	4b88      	ldr	r3, [pc, #544]	; (9f248 <Cl_Rinse_Controller+0xcd8>)
   9f028:	4988      	ldr	r1, [pc, #544]	; (9f24c <Cl_Rinse_Controller+0xcdc>)
   9f02a:	4610      	mov	r0, r2
   9f02c:	4798      	blx	r3
   9f02e:	4603      	mov	r3, r0
   9f030:	461a      	mov	r2, r3
   9f032:	4b87      	ldr	r3, [pc, #540]	; (9f250 <Cl_Rinse_Controller+0xce0>)
   9f034:	4610      	mov	r0, r2
   9f036:	4798      	blx	r3
   9f038:	4603      	mov	r3, r0
   9f03a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
												
												temp = temp - 25;
   9f03e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   9f042:	3b19      	subs	r3, #25
   9f044:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   9f048:	2300      	movs	r3, #0
   9f04a:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   9f04c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   9f050:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   9f052:	230b      	movs	r3, #11
   9f054:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   9f056:	f107 031c 	add.w	r3, r7, #28
   9f05a:	2204      	movs	r2, #4
   9f05c:	4619      	mov	r1, r3
   9f05e:	2037      	movs	r0, #55	; 0x37
   9f060:	4b7c      	ldr	r3, [pc, #496]	; (9f254 <Cl_Rinse_Controller+0xce4>)
   9f062:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   9f064:	e0d8      	b.n	9f218 <Cl_Rinse_Controller+0xca8>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   9f066:	4b7c      	ldr	r3, [pc, #496]	; (9f258 <Cl_Rinse_Controller+0xce8>)
   9f068:	681b      	ldr	r3, [r3, #0]
   9f06a:	3301      	adds	r3, #1
   9f06c:	4a7a      	ldr	r2, [pc, #488]	; (9f258 <Cl_Rinse_Controller+0xce8>)
   9f06e:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   9f070:	4b7a      	ldr	r3, [pc, #488]	; (9f25c <Cl_Rinse_Controller+0xcec>)
   9f072:	681b      	ldr	r3, [r3, #0]
   9f074:	3301      	adds	r3, #1
   9f076:	4a79      	ldr	r2, [pc, #484]	; (9f25c <Cl_Rinse_Controller+0xcec>)
   9f078:	6013      	str	r3, [r2, #0]
						break;
   9f07a:	e0d7      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   9f07c:	4b78      	ldr	r3, [pc, #480]	; (9f260 <Cl_Rinse_Controller+0xcf0>)
   9f07e:	4798      	blx	r3
						break;
   9f080:	e0d4      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9f082:	4b78      	ldr	r3, [pc, #480]	; (9f264 <Cl_Rinse_Controller+0xcf4>)
   9f084:	4798      	blx	r3
   9f086:	4603      	mov	r3, r0
   9f088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   9f08c:	e0ce      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f08e:	f107 0336 	add.w	r3, r7, #54	; 0x36
   9f092:	4619      	mov	r1, r3
   9f094:	203c      	movs	r0, #60	; 0x3c
   9f096:	4b74      	ldr	r3, [pc, #464]	; (9f268 <Cl_Rinse_Controller+0xcf8>)
   9f098:	4798      	blx	r3
							if(alarmstatus1)
   9f09a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   9f09e:	2b00      	cmp	r3, #0
   9f0a0:	d002      	beq.n	9f0a8 <Cl_Rinse_Controller+0xb38>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   9f0a2:	4b72      	ldr	r3, [pc, #456]	; (9f26c <Cl_Rinse_Controller+0xcfc>)
   9f0a4:	2201      	movs	r2, #1
   9f0a6:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   9f0a8:	f107 0335 	add.w	r3, r7, #53	; 0x35
   9f0ac:	4619      	mov	r1, r3
   9f0ae:	2013      	movs	r0, #19
   9f0b0:	4b6d      	ldr	r3, [pc, #436]	; (9f268 <Cl_Rinse_Controller+0xcf8>)
   9f0b2:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9f0b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9f0b8:	4619      	mov	r1, r3
   9f0ba:	200c      	movs	r0, #12
   9f0bc:	4b6a      	ldr	r3, [pc, #424]	; (9f268 <Cl_Rinse_Controller+0xcf8>)
   9f0be:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   9f0c0:	e0b4      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   9f0c2:	4b6b      	ldr	r3, [pc, #428]	; (9f270 <Cl_Rinse_Controller+0xd00>)
   9f0c4:	2201      	movs	r2, #1
   9f0c6:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   9f0c8:	4b6a      	ldr	r3, [pc, #424]	; (9f274 <Cl_Rinse_Controller+0xd04>)
   9f0ca:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f0cc:	4b6a      	ldr	r3, [pc, #424]	; (9f278 <Cl_Rinse_Controller+0xd08>)
   9f0ce:	2200      	movs	r2, #0
   9f0d0:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9f0d2:	2100      	movs	r1, #0
   9f0d4:	2001      	movs	r0, #1
   9f0d6:	4b69      	ldr	r3, [pc, #420]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f0d8:	4798      	blx	r3
						}
						
						break;
   9f0da:	e0a7      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   9f0dc:	4b64      	ldr	r3, [pc, #400]	; (9f270 <Cl_Rinse_Controller+0xd00>)
   9f0de:	2200      	movs	r2, #0
   9f0e0:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9f0e2:	2100      	movs	r1, #0
   9f0e4:	2002      	movs	r0, #2
   9f0e6:	4b65      	ldr	r3, [pc, #404]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f0e8:	4798      	blx	r3
						break;
   9f0ea:	e09f      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f0ec:	4b64      	ldr	r3, [pc, #400]	; (9f280 <Cl_Rinse_Controller+0xd10>)
   9f0ee:	781b      	ldrb	r3, [r3, #0]
   9f0f0:	2b01      	cmp	r3, #1
   9f0f2:	f000 8094 	beq.w	9f21e <Cl_Rinse_Controller+0xcae>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9f0f6:	2206      	movs	r2, #6
   9f0f8:	4962      	ldr	r1, [pc, #392]	; (9f284 <Cl_Rinse_Controller+0xd14>)
   9f0fa:	2018      	movs	r0, #24
   9f0fc:	4b55      	ldr	r3, [pc, #340]	; (9f254 <Cl_Rinse_Controller+0xce4>)
   9f0fe:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9f100:	2100      	movs	r1, #0
   9f102:	2005      	movs	r0, #5
   9f104:	4b5d      	ldr	r3, [pc, #372]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f106:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f108:	4b5b      	ldr	r3, [pc, #364]	; (9f278 <Cl_Rinse_Controller+0xd08>)
   9f10a:	2200      	movs	r2, #0
   9f10c:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9f10e:	e086      	b.n	9f21e <Cl_Rinse_Controller+0xcae>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   9f110:	2206      	movs	r2, #6
   9f112:	495d      	ldr	r1, [pc, #372]	; (9f288 <Cl_Rinse_Controller+0xd18>)
   9f114:	2018      	movs	r0, #24
   9f116:	4b4f      	ldr	r3, [pc, #316]	; (9f254 <Cl_Rinse_Controller+0xce4>)
   9f118:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   9f11a:	2100      	movs	r1, #0
   9f11c:	2006      	movs	r0, #6
   9f11e:	4b57      	ldr	r3, [pc, #348]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f120:	4798      	blx	r3

						
						break;
   9f122:	e083      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   9f124:	2100      	movs	r1, #0
   9f126:	2002      	movs	r0, #2
   9f128:	4b58      	ldr	r3, [pc, #352]	; (9f28c <Cl_Rinse_Controller+0xd1c>)
   9f12a:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   9f12c:	4b52      	ldr	r3, [pc, #328]	; (9f278 <Cl_Rinse_Controller+0xd08>)
   9f12e:	2201      	movs	r2, #1
   9f130:	709a      	strb	r2, [r3, #2]
						break;
   9f132:	e07b      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   9f134:	2100      	movs	r1, #0
   9f136:	2004      	movs	r0, #4
   9f138:	4b54      	ldr	r3, [pc, #336]	; (9f28c <Cl_Rinse_Controller+0xd1c>)
   9f13a:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   9f13c:	4b4e      	ldr	r3, [pc, #312]	; (9f278 <Cl_Rinse_Controller+0xd08>)
   9f13e:	2200      	movs	r2, #0
   9f140:	709a      	strb	r2, [r3, #2]
						break;
   9f142:	e073      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9f144:	4b3a      	ldr	r3, [pc, #232]	; (9f230 <Cl_Rinse_Controller+0xcc0>)
   9f146:	781b      	ldrb	r3, [r3, #0]
   9f148:	2b09      	cmp	r3, #9
   9f14a:	d06b      	beq.n	9f224 <Cl_Rinse_Controller+0xcb4>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   9f14c:	2100      	movs	r1, #0
   9f14e:	200c      	movs	r0, #12
   9f150:	4b39      	ldr	r3, [pc, #228]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f152:	4798      	blx	r3
   9f154:	4603      	mov	r3, r0
   9f156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   9f15a:	2100      	movs	r1, #0
   9f15c:	200d      	movs	r0, #13
   9f15e:	4b36      	ldr	r3, [pc, #216]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f160:	4798      	blx	r3
   9f162:	4603      	mov	r3, r0
   9f164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   9f168:	2100      	movs	r1, #0
   9f16a:	200e      	movs	r0, #14
   9f16c:	4b32      	ldr	r3, [pc, #200]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f16e:	4798      	blx	r3
   9f170:	4603      	mov	r3, r0
   9f172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9f176:	2100      	movs	r1, #0
   9f178:	2029      	movs	r0, #41	; 0x29
   9f17a:	4b2f      	ldr	r3, [pc, #188]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f17c:	4798      	blx	r3
   9f17e:	4603      	mov	r3, r0
   9f180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9f184:	2100      	movs	r1, #0
   9f186:	202b      	movs	r0, #43	; 0x2b
   9f188:	4b2b      	ldr	r3, [pc, #172]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f18a:	4798      	blx	r3
   9f18c:	4603      	mov	r3, r0
   9f18e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9f192:	2100      	movs	r1, #0
   9f194:	2003      	movs	r0, #3
   9f196:	4b28      	ldr	r3, [pc, #160]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f198:	4798      	blx	r3
   9f19a:	4603      	mov	r3, r0
   9f19c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9f1a0:	2100      	movs	r1, #0
   9f1a2:	2004      	movs	r0, #4
   9f1a4:	4b24      	ldr	r3, [pc, #144]	; (9f238 <Cl_Rinse_Controller+0xcc8>)
   9f1a6:	4798      	blx	r3
   9f1a8:	4603      	mov	r3, r0
   9f1aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9f1ae:	4b20      	ldr	r3, [pc, #128]	; (9f230 <Cl_Rinse_Controller+0xcc0>)
   9f1b0:	2209      	movs	r2, #9
   9f1b2:	701a      	strb	r2, [r3, #0]
						}
						break;
   9f1b4:	e036      	b.n	9f224 <Cl_Rinse_Controller+0xcb4>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   9f1b6:	2100      	movs	r1, #0
   9f1b8:	200c      	movs	r0, #12
   9f1ba:	4b30      	ldr	r3, [pc, #192]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f1bc:	4798      	blx	r3
						break;
   9f1be:	e035      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   9f1c0:	2100      	movs	r1, #0
   9f1c2:	200d      	movs	r0, #13
   9f1c4:	4b2d      	ldr	r3, [pc, #180]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f1c6:	4798      	blx	r3
						break;
   9f1c8:	e030      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   9f1ca:	4b31      	ldr	r3, [pc, #196]	; (9f290 <Cl_Rinse_Controller+0xd20>)
   9f1cc:	7e1b      	ldrb	r3, [r3, #24]
   9f1ce:	2b00      	cmp	r3, #0
   9f1d0:	d02b      	beq.n	9f22a <Cl_Rinse_Controller+0xcba>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f1d2:	4b2f      	ldr	r3, [pc, #188]	; (9f290 <Cl_Rinse_Controller+0xd20>)
   9f1d4:	791b      	ldrb	r3, [r3, #4]
   9f1d6:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9f1d8:	4b2d      	ldr	r3, [pc, #180]	; (9f290 <Cl_Rinse_Controller+0xd20>)
   9f1da:	791b      	ldrb	r3, [r3, #4]
   9f1dc:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9f1de:	4b2c      	ldr	r3, [pc, #176]	; (9f290 <Cl_Rinse_Controller+0xd20>)
   9f1e0:	791b      	ldrb	r3, [r3, #4]
   9f1e2:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9f1e4:	4b2a      	ldr	r3, [pc, #168]	; (9f290 <Cl_Rinse_Controller+0xd20>)
   9f1e6:	791b      	ldrb	r3, [r3, #4]
   9f1e8:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9f1ea:	8b3b      	ldrh	r3, [r7, #24]
   9f1ec:	b21b      	sxth	r3, r3
   9f1ee:	4619      	mov	r1, r3
   9f1f0:	200e      	movs	r0, #14
   9f1f2:	4b22      	ldr	r3, [pc, #136]	; (9f27c <Cl_Rinse_Controller+0xd0c>)
   9f1f4:	4798      	blx	r3
						}
						break;
   9f1f6:	e018      	b.n	9f22a <Cl_Rinse_Controller+0xcba>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   9f1f8:	4b26      	ldr	r3, [pc, #152]	; (9f294 <Cl_Rinse_Controller+0xd24>)
   9f1fa:	2202      	movs	r2, #2
   9f1fc:	701a      	strb	r2, [r3, #0]
						break;
   9f1fe:	e015      	b.n	9f22c <Cl_Rinse_Controller+0xcbc>

									default:break;
								}
							}
						
						break;
   9f200:	bf00      	nop
   9f202:	f000 bc4f 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
															
										default:
										break;
									}
								}
						break;
   9f206:	bf00      	nop
   9f208:	f000 bc4c 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
										cl_50ms_timer =0;
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   9f20c:	bf00      	nop
   9f20e:	f000 bc49 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   9f212:	bf00      	nop
   9f214:	f000 bc46 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
										cl_tdata.bytearray[2] = 11;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   9f218:	bf00      	nop
   9f21a:	f000 bc43 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   9f21e:	bf00      	nop
   9f220:	f000 bc40 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
						}
						break;
   9f224:	bf00      	nop
   9f226:	f000 bc3d 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
						break;
   9f22a:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   9f22c:	f000 bc3a 	b.w	9faa4 <Cl_Rinse_Controller+0x1534>
   9f230:	200727fe 	.word	0x200727fe
   9f234:	0008a915 	.word	0x0008a915
   9f238:	00082efd 	.word	0x00082efd
   9f23c:	0008d499 	.word	0x0008d499
   9f240:	0008e659 	.word	0x0008e659
   9f244:	200725ec 	.word	0x200725ec
   9f248:	000a27f5 	.word	0x000a27f5
   9f24c:	41200000 	.word	0x41200000
   9f250:	000a2a65 	.word	0x000a2a65
   9f254:	00098601 	.word	0x00098601
   9f258:	20072808 	.word	0x20072808
   9f25c:	20072814 	.word	0x20072814
   9f260:	000a0d2d 	.word	0x000a0d2d
   9f264:	000a0049 	.word	0x000a0049
   9f268:	00083041 	.word	0x00083041
   9f26c:	2007281e 	.word	0x2007281e
   9f270:	200727f8 	.word	0x200727f8
   9f274:	000893d1 	.word	0x000893d1
   9f278:	20070b74 	.word	0x20070b74
   9f27c:	0008896d 	.word	0x0008896d
   9f280:	200720ec 	.word	0x200720ec
   9f284:	000a4bb4 	.word	0x000a4bb4
   9f288:	000a4bbc 	.word	0x000a4bbc
   9f28c:	00091c25 	.word	0x00091c25
   9f290:	20072f2c 	.word	0x20072f2c
   9f294:	200727ff 	.word	0x200727ff
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   9f298:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9f29c:	3b01      	subs	r3, #1
   9f29e:	2b1d      	cmp	r3, #29
   9f2a0:	f200 815f 	bhi.w	9f562 <Cl_Rinse_Controller+0xff2>
   9f2a4:	a201      	add	r2, pc, #4	; (adr r2, 9f2ac <Cl_Rinse_Controller+0xd3c>)
   9f2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f2aa:	bf00      	nop
   9f2ac:	0009f4cb 	.word	0x0009f4cb
   9f2b0:	0009f325 	.word	0x0009f325
   9f2b4:	0009f563 	.word	0x0009f563
   9f2b8:	0009f375 	.word	0x0009f375
   9f2bc:	0009f387 	.word	0x0009f387
   9f2c0:	0009f399 	.word	0x0009f399
   9f2c4:	0009f563 	.word	0x0009f563
   9f2c8:	0009f563 	.word	0x0009f563
   9f2cc:	0009f563 	.word	0x0009f563
   9f2d0:	0009f563 	.word	0x0009f563
   9f2d4:	0009f563 	.word	0x0009f563
   9f2d8:	0009f563 	.word	0x0009f563
   9f2dc:	0009f563 	.word	0x0009f563
   9f2e0:	0009f563 	.word	0x0009f563
   9f2e4:	0009f563 	.word	0x0009f563
   9f2e8:	0009f563 	.word	0x0009f563
   9f2ec:	0009f563 	.word	0x0009f563
   9f2f0:	0009f435 	.word	0x0009f435
   9f2f4:	0009f563 	.word	0x0009f563
   9f2f8:	0009f563 	.word	0x0009f563
   9f2fc:	0009f563 	.word	0x0009f563
   9f300:	0009f429 	.word	0x0009f429
   9f304:	0009f39f 	.word	0x0009f39f
   9f308:	0009f563 	.word	0x0009f563
   9f30c:	0009f563 	.word	0x0009f563
   9f310:	0009f563 	.word	0x0009f563
   9f314:	0009f563 	.word	0x0009f563
   9f318:	0009f563 	.word	0x0009f563
   9f31c:	0009f563 	.word	0x0009f563
   9f320:	0009f535 	.word	0x0009f535
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   9f324:	4bb8      	ldr	r3, [pc, #736]	; (9f608 <Cl_Rinse_Controller+0x1098>)
   9f326:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9f328:	2308      	movs	r3, #8
   9f32a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9f32e:	2301      	movs	r3, #1
   9f330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9f334:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f338:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f33c:	2201      	movs	r2, #1
   9f33e:	4618      	mov	r0, r3
   9f340:	4bb2      	ldr	r3, [pc, #712]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f342:	4798      	blx	r3
   9f344:	4603      	mov	r3, r0
   9f346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   9f34a:	2309      	movs	r3, #9
   9f34c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9f350:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f354:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f358:	2200      	movs	r2, #0
   9f35a:	4618      	mov	r0, r3
   9f35c:	4bab      	ldr	r3, [pc, #684]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f35e:	4798      	blx	r3
   9f360:	4603      	mov	r3, r0
   9f362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9f366:	4baa      	ldr	r3, [pc, #680]	; (9f610 <Cl_Rinse_Controller+0x10a0>)
   9f368:	2203      	movs	r2, #3
   9f36a:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f36c:	4ba9      	ldr	r3, [pc, #676]	; (9f614 <Cl_Rinse_Controller+0x10a4>)
   9f36e:	2201      	movs	r2, #1
   9f370:	701a      	strb	r2, [r3, #0]
					break;
   9f372:	e0fb      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9f374:	4ba4      	ldr	r3, [pc, #656]	; (9f608 <Cl_Rinse_Controller+0x1098>)
   9f376:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9f378:	4ba5      	ldr	r3, [pc, #660]	; (9f610 <Cl_Rinse_Controller+0x10a0>)
   9f37a:	2204      	movs	r2, #4
   9f37c:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f37e:	4ba5      	ldr	r3, [pc, #660]	; (9f614 <Cl_Rinse_Controller+0x10a4>)
   9f380:	2201      	movs	r2, #1
   9f382:	701a      	strb	r2, [r3, #0]
					break;
   9f384:	e0f2      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9f386:	4ba0      	ldr	r3, [pc, #640]	; (9f608 <Cl_Rinse_Controller+0x1098>)
   9f388:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9f38a:	4ba1      	ldr	r3, [pc, #644]	; (9f610 <Cl_Rinse_Controller+0x10a0>)
   9f38c:	2205      	movs	r2, #5
   9f38e:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f390:	4ba0      	ldr	r3, [pc, #640]	; (9f614 <Cl_Rinse_Controller+0x10a4>)
   9f392:	2201      	movs	r2, #1
   9f394:	701a      	strb	r2, [r3, #0]
					break;
   9f396:	e0e9      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   9f398:	4b9f      	ldr	r3, [pc, #636]	; (9f618 <Cl_Rinse_Controller+0x10a8>)
   9f39a:	4798      	blx	r3
					break;
   9f39c:	e0e6      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9f39e:	4b9f      	ldr	r3, [pc, #636]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f3a0:	7e1b      	ldrb	r3, [r3, #24]
   9f3a2:	2b00      	cmp	r3, #0
   9f3a4:	f000 80df 	beq.w	9f566 <Cl_Rinse_Controller+0xff6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9f3a8:	4b9c      	ldr	r3, [pc, #624]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f3aa:	791b      	ldrb	r3, [r3, #4]
   9f3ac:	2b01      	cmp	r3, #1
   9f3ae:	d002      	beq.n	9f3b6 <Cl_Rinse_Controller+0xe46>
   9f3b0:	2b21      	cmp	r3, #33	; 0x21
   9f3b2:	d01c      	beq.n	9f3ee <Cl_Rinse_Controller+0xe7e>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   9f3b4:	e037      	b.n	9f426 <Cl_Rinse_Controller+0xeb6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f3b6:	2316      	movs	r3, #22
   9f3b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9f3bc:	2301      	movs	r3, #1
   9f3be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9f3c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f3c6:	3301      	adds	r3, #1
   9f3c8:	4619      	mov	r1, r3
   9f3ca:	2001      	movs	r0, #1
   9f3cc:	4b94      	ldr	r3, [pc, #592]	; (9f620 <Cl_Rinse_Controller+0x10b0>)
   9f3ce:	4798      	blx	r3
   9f3d0:	4603      	mov	r3, r0
   9f3d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f3d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f3da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f3de:	2202      	movs	r2, #2
   9f3e0:	4618      	mov	r0, r3
   9f3e2:	4b8a      	ldr	r3, [pc, #552]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f3e4:	4798      	blx	r3
   9f3e6:	4603      	mov	r3, r0
   9f3e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
							break;
   9f3ec:	e01b      	b.n	9f426 <Cl_Rinse_Controller+0xeb6>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f3ee:	2316      	movs	r3, #22
   9f3f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9f3f4:	2323      	movs	r3, #35	; 0x23
   9f3f6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9f3fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f3fe:	3301      	adds	r3, #1
   9f400:	4619      	mov	r1, r3
   9f402:	2028      	movs	r0, #40	; 0x28
   9f404:	4b86      	ldr	r3, [pc, #536]	; (9f620 <Cl_Rinse_Controller+0x10b0>)
   9f406:	4798      	blx	r3
   9f408:	4603      	mov	r3, r0
   9f40a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9f40e:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f412:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f416:	2202      	movs	r2, #2
   9f418:	4618      	mov	r0, r3
   9f41a:	4b7c      	ldr	r3, [pc, #496]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f41c:	4798      	blx	r3
   9f41e:	4603      	mov	r3, r0
   9f420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f424:	bf00      	nop
							default:
							break;
						}
					}
					break;
   9f426:	e09e      	b.n	9f566 <Cl_Rinse_Controller+0xff6>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9f428:	4b7e      	ldr	r3, [pc, #504]	; (9f624 <Cl_Rinse_Controller+0x10b4>)
   9f42a:	4798      	blx	r3
   9f42c:	4603      	mov	r3, r0
   9f42e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   9f432:	e09b      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9f434:	4b7c      	ldr	r3, [pc, #496]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f436:	2200      	movs	r2, #0
   9f438:	801a      	strh	r2, [r3, #0]
   9f43a:	e041      	b.n	9f4c0 <Cl_Rinse_Controller+0xf50>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   9f43c:	4b7a      	ldr	r3, [pc, #488]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f43e:	881b      	ldrh	r3, [r3, #0]
   9f440:	461a      	mov	r2, r3
   9f442:	4b7a      	ldr	r3, [pc, #488]	; (9f62c <Cl_Rinse_Controller+0x10bc>)
   9f444:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
   9f448:	4b77      	ldr	r3, [pc, #476]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f44a:	881b      	ldrh	r3, [r3, #0]
   9f44c:	00db      	lsls	r3, r3, #3
   9f44e:	4a77      	ldr	r2, [pc, #476]	; (9f62c <Cl_Rinse_Controller+0x10bc>)
   9f450:	4413      	add	r3, r2
   9f452:	3302      	adds	r3, #2
   9f454:	4619      	mov	r1, r3
   9f456:	4b76      	ldr	r3, [pc, #472]	; (9f630 <Cl_Rinse_Controller+0x10c0>)
   9f458:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   9f45a:	4b73      	ldr	r3, [pc, #460]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f45c:	881b      	ldrh	r3, [r3, #0]
   9f45e:	4a73      	ldr	r2, [pc, #460]	; (9f62c <Cl_Rinse_Controller+0x10bc>)
   9f460:	00db      	lsls	r3, r3, #3
   9f462:	4413      	add	r3, r2
   9f464:	789b      	ldrb	r3, [r3, #2]
   9f466:	2b00      	cmp	r3, #0
   9f468:	d00e      	beq.n	9f488 <Cl_Rinse_Controller+0xf18>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9f46a:	2208      	movs	r2, #8
   9f46c:	4971      	ldr	r1, [pc, #452]	; (9f634 <Cl_Rinse_Controller+0x10c4>)
   9f46e:	2018      	movs	r0, #24
   9f470:	4b66      	ldr	r3, [pc, #408]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f472:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   9f474:	4b68      	ldr	r3, [pc, #416]	; (9f618 <Cl_Rinse_Controller+0x10a8>)
   9f476:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9f478:	4b65      	ldr	r3, [pc, #404]	; (9f610 <Cl_Rinse_Controller+0x10a0>)
   9f47a:	2206      	movs	r2, #6
   9f47c:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   9f47e:	4b6a      	ldr	r3, [pc, #424]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f480:	2200      	movs	r2, #0
   9f482:	801a      	strh	r2, [r3, #0]
										break;	
   9f484:	bf00      	nop
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   9f486:	e071      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
										Cl_Rinse_StopRinse();
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   9f488:	4b67      	ldr	r3, [pc, #412]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f48a:	881b      	ldrh	r3, [r3, #0]
   9f48c:	2b18      	cmp	r3, #24
   9f48e:	d111      	bne.n	9f4b4 <Cl_Rinse_Controller+0xf44>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   9f490:	4b65      	ldr	r3, [pc, #404]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f492:	881b      	ldrh	r3, [r3, #0]
   9f494:	4a65      	ldr	r2, [pc, #404]	; (9f62c <Cl_Rinse_Controller+0x10bc>)
   9f496:	00db      	lsls	r3, r3, #3
   9f498:	4413      	add	r3, r2
   9f49a:	789b      	ldrb	r3, [r3, #2]
   9f49c:	f083 0301 	eor.w	r3, r3, #1
   9f4a0:	b2db      	uxtb	r3, r3
   9f4a2:	2b00      	cmp	r3, #0
   9f4a4:	d006      	beq.n	9f4b4 <Cl_Rinse_Controller+0xf44>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9f4a6:	2208      	movs	r2, #8
   9f4a8:	4963      	ldr	r1, [pc, #396]	; (9f638 <Cl_Rinse_Controller+0x10c8>)
   9f4aa:	2018      	movs	r0, #24
   9f4ac:	4b57      	ldr	r3, [pc, #348]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f4ae:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   9f4b0:	4b62      	ldr	r3, [pc, #392]	; (9f63c <Cl_Rinse_Controller+0x10cc>)
   9f4b2:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9f4b4:	4b5c      	ldr	r3, [pc, #368]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f4b6:	881b      	ldrh	r3, [r3, #0]
   9f4b8:	3301      	adds	r3, #1
   9f4ba:	b29a      	uxth	r2, r3
   9f4bc:	4b5a      	ldr	r3, [pc, #360]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f4be:	801a      	strh	r2, [r3, #0]
   9f4c0:	4b59      	ldr	r3, [pc, #356]	; (9f628 <Cl_Rinse_Controller+0x10b8>)
   9f4c2:	881b      	ldrh	r3, [r3, #0]
   9f4c4:	2b18      	cmp	r3, #24
   9f4c6:	d9b9      	bls.n	9f43c <Cl_Rinse_Controller+0xecc>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   9f4c8:	e050      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVENT_RINSE_CLR_ALARM:
										sv_cntrl_resetyellowalarm();
   9f4ca:	4b5d      	ldr	r3, [pc, #372]	; (9f640 <Cl_Rinse_Controller+0x10d0>)
   9f4cc:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   9f4ce:	4b5d      	ldr	r3, [pc, #372]	; (9f644 <Cl_Rinse_Controller+0x10d4>)
   9f4d0:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   9f4d2:	4b5d      	ldr	r3, [pc, #372]	; (9f648 <Cl_Rinse_Controller+0x10d8>)
   9f4d4:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   9f4d6:	4b59      	ldr	r3, [pc, #356]	; (9f63c <Cl_Rinse_Controller+0x10cc>)
   9f4d8:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   9f4da:	4b4b      	ldr	r3, [pc, #300]	; (9f608 <Cl_Rinse_Controller+0x1098>)
   9f4dc:	4798      	blx	r3
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   9f4de:	2308      	movs	r3, #8
   9f4e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9f4e4:	2301      	movs	r3, #1
   9f4e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   9f4ea:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f4ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f4f2:	2201      	movs	r2, #1
   9f4f4:	4618      	mov	r0, r3
   9f4f6:	4b45      	ldr	r3, [pc, #276]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f4f8:	4798      	blx	r3
   9f4fa:	4603      	mov	r3, r0
   9f4fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   9f500:	2309      	movs	r3, #9
   9f502:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9f506:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f50a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f50e:	2200      	movs	r2, #0
   9f510:	4618      	mov	r0, r3
   9f512:	4b3e      	ldr	r3, [pc, #248]	; (9f60c <Cl_Rinse_Controller+0x109c>)
   9f514:	4798      	blx	r3
   9f516:	4603      	mov	r3, r0
   9f518:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9f51c:	4b4b      	ldr	r3, [pc, #300]	; (9f64c <Cl_Rinse_Controller+0x10dc>)
   9f51e:	4798      	blx	r3
   9f520:	4603      	mov	r3, r0
   9f522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   9f526:	4b3a      	ldr	r3, [pc, #232]	; (9f610 <Cl_Rinse_Controller+0x10a0>)
   9f528:	2203      	movs	r2, #3
   9f52a:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f52c:	4b39      	ldr	r3, [pc, #228]	; (9f614 <Cl_Rinse_Controller+0x10a4>)
   9f52e:	2201      	movs	r2, #1
   9f530:	701a      	strb	r2, [r3, #0]
						
						
						//alarm_flag = 1;
						break;
   9f532:	e01b      	b.n	9f56c <Cl_Rinse_Controller+0xffc>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   9f534:	4b39      	ldr	r3, [pc, #228]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f536:	7e1b      	ldrb	r3, [r3, #24]
   9f538:	2b00      	cmp	r3, #0
   9f53a:	d016      	beq.n	9f56a <Cl_Rinse_Controller+0xffa>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f53c:	4b37      	ldr	r3, [pc, #220]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f53e:	791b      	ldrb	r3, [r3, #4]
   9f540:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9f542:	4b36      	ldr	r3, [pc, #216]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f544:	791b      	ldrb	r3, [r3, #4]
   9f546:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9f548:	4b34      	ldr	r3, [pc, #208]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f54a:	791b      	ldrb	r3, [r3, #4]
   9f54c:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9f54e:	4b33      	ldr	r3, [pc, #204]	; (9f61c <Cl_Rinse_Controller+0x10ac>)
   9f550:	791b      	ldrb	r3, [r3, #4]
   9f552:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9f554:	8abb      	ldrh	r3, [r7, #20]
   9f556:	b21b      	sxth	r3, r3
   9f558:	4619      	mov	r1, r3
   9f55a:	200e      	movs	r0, #14
   9f55c:	4b3c      	ldr	r3, [pc, #240]	; (9f650 <Cl_Rinse_Controller+0x10e0>)
   9f55e:	4798      	blx	r3
						}
					break;
   9f560:	e003      	b.n	9f56a <Cl_Rinse_Controller+0xffa>
					default:break;
   9f562:	bf00      	nop
   9f564:	e29f      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
							break;
							default:
							break;
						}
					}
					break;
   9f566:	bf00      	nop
   9f568:	e29d      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
					break;
   9f56a:	bf00      	nop
					default:break;
				}
		break;
   9f56c:	e29b      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   9f56e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9f572:	3b02      	subs	r3, #2
   9f574:	2b1e      	cmp	r3, #30
   9f576:	f200 81e3 	bhi.w	9f940 <Cl_Rinse_Controller+0x13d0>
   9f57a:	a201      	add	r2, pc, #4	; (adr r2, 9f580 <Cl_Rinse_Controller+0x1010>)
   9f57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f580:	0009f655 	.word	0x0009f655
   9f584:	0009f941 	.word	0x0009f941
   9f588:	0009f6cf 	.word	0x0009f6cf
   9f58c:	0009f6eb 	.word	0x0009f6eb
   9f590:	0009f941 	.word	0x0009f941
   9f594:	0009f941 	.word	0x0009f941
   9f598:	0009f941 	.word	0x0009f941
   9f59c:	0009f941 	.word	0x0009f941
   9f5a0:	0009f941 	.word	0x0009f941
   9f5a4:	0009f941 	.word	0x0009f941
   9f5a8:	0009f941 	.word	0x0009f941
   9f5ac:	0009f941 	.word	0x0009f941
   9f5b0:	0009f941 	.word	0x0009f941
   9f5b4:	0009f941 	.word	0x0009f941
   9f5b8:	0009f941 	.word	0x0009f941
   9f5bc:	0009f941 	.word	0x0009f941
   9f5c0:	0009f941 	.word	0x0009f941
   9f5c4:	0009f941 	.word	0x0009f941
   9f5c8:	0009f941 	.word	0x0009f941
   9f5cc:	0009f941 	.word	0x0009f941
   9f5d0:	0009f5fd 	.word	0x0009f5fd
   9f5d4:	0009f707 	.word	0x0009f707
   9f5d8:	0009f941 	.word	0x0009f941
   9f5dc:	0009f90f 	.word	0x0009f90f
   9f5e0:	0009f8a9 	.word	0x0009f8a9
   9f5e4:	0009f8cf 	.word	0x0009f8cf
   9f5e8:	0009f941 	.word	0x0009f941
   9f5ec:	0009f941 	.word	0x0009f941
   9f5f0:	0009f913 	.word	0x0009f913
   9f5f4:	0009f8d9 	.word	0x0009f8d9
   9f5f8:	0009f8fb 	.word	0x0009f8fb
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9f5fc:	4b09      	ldr	r3, [pc, #36]	; (9f624 <Cl_Rinse_Controller+0x10b4>)
   9f5fe:	4798      	blx	r3
   9f600:	4603      	mov	r3, r0
   9f602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   9f606:	e1a4      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
   9f608:	000a09d1 	.word	0x000a09d1
   9f60c:	00098601 	.word	0x00098601
   9f610:	200727fe 	.word	0x200727fe
   9f614:	200727ff 	.word	0x200727ff
   9f618:	000a0d2d 	.word	0x000a0d2d
   9f61c:	20072f2c 	.word	0x20072f2c
   9f620:	0009710d 	.word	0x0009710d
   9f624:	000a0049 	.word	0x000a0049
   9f628:	200732ec 	.word	0x200732ec
   9f62c:	20070b74 	.word	0x20070b74
   9f630:	00083041 	.word	0x00083041
   9f634:	000a4bc8 	.word	0x000a4bc8
   9f638:	000a4bd0 	.word	0x000a4bd0
   9f63c:	000a0071 	.word	0x000a0071
   9f640:	00096b39 	.word	0x00096b39
   9f644:	00096b25 	.word	0x00096b25
   9f648:	00096b61 	.word	0x00096b61
   9f64c:	0009fdfd 	.word	0x0009fdfd
   9f650:	0008896d 	.word	0x0008896d
					
					case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9f654:	4bbf      	ldr	r3, [pc, #764]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f656:	7e1b      	ldrb	r3, [r3, #24]
   9f658:	2b00      	cmp	r3, #0
   9f65a:	d00b      	beq.n	9f674 <Cl_Rinse_Controller+0x1104>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f65c:	4bbd      	ldr	r3, [pc, #756]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f65e:	791b      	ldrb	r3, [r3, #4]
   9f660:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   9f662:	7c3b      	ldrb	r3, [r7, #16]
   9f664:	2b01      	cmp	r3, #1
   9f666:	d005      	beq.n	9f674 <Cl_Rinse_Controller+0x1104>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   9f668:	7c3b      	ldrb	r3, [r7, #16]
   9f66a:	2b02      	cmp	r3, #2
   9f66c:	d102      	bne.n	9f674 <Cl_Rinse_Controller+0x1104>
					{
						hotrinse_flag = 1;
   9f66e:	4bba      	ldr	r3, [pc, #744]	; (9f958 <Cl_Rinse_Controller+0x13e8>)
   9f670:	2201      	movs	r2, #1
   9f672:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   9f674:	4bb9      	ldr	r3, [pc, #740]	; (9f95c <Cl_Rinse_Controller+0x13ec>)
   9f676:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9f678:	2308      	movs	r3, #8
   9f67a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9f67e:	2301      	movs	r3, #1
   9f680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9f684:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f688:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f68c:	2201      	movs	r2, #1
   9f68e:	4618      	mov	r0, r3
   9f690:	4bb3      	ldr	r3, [pc, #716]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f692:	4798      	blx	r3
   9f694:	4603      	mov	r3, r0
   9f696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   9f69a:	2309      	movs	r3, #9
   9f69c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9f6a0:	f107 0137 	add.w	r1, r7, #55	; 0x37
   9f6a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f6a8:	2200      	movs	r2, #0
   9f6aa:	4618      	mov	r0, r3
   9f6ac:	4bac      	ldr	r3, [pc, #688]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f6ae:	4798      	blx	r3
   9f6b0:	4603      	mov	r3, r0
   9f6b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9f6b6:	4bab      	ldr	r3, [pc, #684]	; (9f964 <Cl_Rinse_Controller+0x13f4>)
   9f6b8:	4798      	blx	r3
   9f6ba:	4603      	mov	r3, r0
   9f6bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9f6c0:	4ba9      	ldr	r3, [pc, #676]	; (9f968 <Cl_Rinse_Controller+0x13f8>)
   9f6c2:	2203      	movs	r2, #3
   9f6c4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f6c6:	4ba9      	ldr	r3, [pc, #676]	; (9f96c <Cl_Rinse_Controller+0x13fc>)
   9f6c8:	2201      	movs	r2, #1
   9f6ca:	701a      	strb	r2, [r3, #0]
					break;
   9f6cc:	e141      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9f6ce:	4ba3      	ldr	r3, [pc, #652]	; (9f95c <Cl_Rinse_Controller+0x13ec>)
   9f6d0:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9f6d2:	4ba4      	ldr	r3, [pc, #656]	; (9f964 <Cl_Rinse_Controller+0x13f4>)
   9f6d4:	4798      	blx	r3
   9f6d6:	4603      	mov	r3, r0
   9f6d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9f6dc:	4ba2      	ldr	r3, [pc, #648]	; (9f968 <Cl_Rinse_Controller+0x13f8>)
   9f6de:	2204      	movs	r2, #4
   9f6e0:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f6e2:	4ba2      	ldr	r3, [pc, #648]	; (9f96c <Cl_Rinse_Controller+0x13fc>)
   9f6e4:	2201      	movs	r2, #1
   9f6e6:	701a      	strb	r2, [r3, #0]
					break;
   9f6e8:	e133      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9f6ea:	4b9c      	ldr	r3, [pc, #624]	; (9f95c <Cl_Rinse_Controller+0x13ec>)
   9f6ec:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9f6ee:	4b9d      	ldr	r3, [pc, #628]	; (9f964 <Cl_Rinse_Controller+0x13f4>)
   9f6f0:	4798      	blx	r3
   9f6f2:	4603      	mov	r3, r0
   9f6f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9f6f8:	4b9b      	ldr	r3, [pc, #620]	; (9f968 <Cl_Rinse_Controller+0x13f8>)
   9f6fa:	2205      	movs	r2, #5
   9f6fc:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f6fe:	4b9b      	ldr	r3, [pc, #620]	; (9f96c <Cl_Rinse_Controller+0x13fc>)
   9f700:	2201      	movs	r2, #1
   9f702:	701a      	strb	r2, [r3, #0]
					break;
   9f704:	e125      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9f706:	4b93      	ldr	r3, [pc, #588]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f708:	7e1b      	ldrb	r3, [r3, #24]
   9f70a:	2b00      	cmp	r3, #0
   9f70c:	f000 811a 	beq.w	9f944 <Cl_Rinse_Controller+0x13d4>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9f710:	4b90      	ldr	r3, [pc, #576]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f712:	791b      	ldrb	r3, [r3, #4]
   9f714:	3b01      	subs	r3, #1
   9f716:	2b20      	cmp	r3, #32
   9f718:	f200 80c4 	bhi.w	9f8a4 <Cl_Rinse_Controller+0x1334>
   9f71c:	a201      	add	r2, pc, #4	; (adr r2, 9f724 <Cl_Rinse_Controller+0x11b4>)
   9f71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f722:	bf00      	nop
   9f724:	0009f7a9 	.word	0x0009f7a9
   9f728:	0009f7e1 	.word	0x0009f7e1
   9f72c:	0009f8a5 	.word	0x0009f8a5
   9f730:	0009f8a5 	.word	0x0009f8a5
   9f734:	0009f8a5 	.word	0x0009f8a5
   9f738:	0009f8a5 	.word	0x0009f8a5
   9f73c:	0009f8a5 	.word	0x0009f8a5
   9f740:	0009f8a5 	.word	0x0009f8a5
   9f744:	0009f8a5 	.word	0x0009f8a5
   9f748:	0009f8a5 	.word	0x0009f8a5
   9f74c:	0009f8a5 	.word	0x0009f8a5
   9f750:	0009f8a5 	.word	0x0009f8a5
   9f754:	0009f8a5 	.word	0x0009f8a5
   9f758:	0009f8a5 	.word	0x0009f8a5
   9f75c:	0009f8a5 	.word	0x0009f8a5
   9f760:	0009f8a5 	.word	0x0009f8a5
   9f764:	0009f8a5 	.word	0x0009f8a5
   9f768:	0009f8a5 	.word	0x0009f8a5
   9f76c:	0009f8a5 	.word	0x0009f8a5
   9f770:	0009f8a5 	.word	0x0009f8a5
   9f774:	0009f8a5 	.word	0x0009f8a5
   9f778:	0009f8a5 	.word	0x0009f8a5
   9f77c:	0009f8a5 	.word	0x0009f8a5
   9f780:	0009f8a5 	.word	0x0009f8a5
   9f784:	0009f8a5 	.word	0x0009f8a5
   9f788:	0009f8a5 	.word	0x0009f8a5
   9f78c:	0009f8a5 	.word	0x0009f8a5
   9f790:	0009f8a5 	.word	0x0009f8a5
   9f794:	0009f8a5 	.word	0x0009f8a5
   9f798:	0009f819 	.word	0x0009f819
   9f79c:	0009f8a5 	.word	0x0009f8a5
   9f7a0:	0009f843 	.word	0x0009f843
   9f7a4:	0009f86d 	.word	0x0009f86d
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f7a8:	2316      	movs	r3, #22
   9f7aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9f7ae:	2301      	movs	r3, #1
   9f7b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9f7b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f7b8:	3301      	adds	r3, #1
   9f7ba:	4619      	mov	r1, r3
   9f7bc:	2001      	movs	r0, #1
   9f7be:	4b6c      	ldr	r3, [pc, #432]	; (9f970 <Cl_Rinse_Controller+0x1400>)
   9f7c0:	4798      	blx	r3
   9f7c2:	4603      	mov	r3, r0
   9f7c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f7c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f7cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f7d0:	2202      	movs	r2, #2
   9f7d2:	4618      	mov	r0, r3
   9f7d4:	4b62      	ldr	r3, [pc, #392]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f7d6:	4798      	blx	r3
   9f7d8:	4603      	mov	r3, r0
   9f7da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f7de:	e062      	b.n	9f8a6 <Cl_Rinse_Controller+0x1336>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f7e0:	2316      	movs	r3, #22
   9f7e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9f7e6:	2302      	movs	r3, #2
   9f7e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9f7ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f7f0:	3301      	adds	r3, #1
   9f7f2:	4619      	mov	r1, r3
   9f7f4:	2002      	movs	r0, #2
   9f7f6:	4b5e      	ldr	r3, [pc, #376]	; (9f970 <Cl_Rinse_Controller+0x1400>)
   9f7f8:	4798      	blx	r3
   9f7fa:	4603      	mov	r3, r0
   9f7fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f800:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f804:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f808:	2202      	movs	r2, #2
   9f80a:	4618      	mov	r0, r3
   9f80c:	4b54      	ldr	r3, [pc, #336]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f80e:	4798      	blx	r3
   9f810:	4603      	mov	r3, r0
   9f812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f816:	e046      	b.n	9f8a6 <Cl_Rinse_Controller+0x1336>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f818:	2316      	movs	r3, #22
   9f81a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   9f81e:	2320      	movs	r3, #32
   9f820:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   9f824:	2300      	movs	r3, #0
   9f826:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f82a:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f82e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f832:	2202      	movs	r2, #2
   9f834:	4618      	mov	r0, r3
   9f836:	4b4a      	ldr	r3, [pc, #296]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f838:	4798      	blx	r3
   9f83a:	4603      	mov	r3, r0
   9f83c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f840:	e031      	b.n	9f8a6 <Cl_Rinse_Controller+0x1336>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f842:	2316      	movs	r3, #22
   9f844:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   9f848:	2321      	movs	r3, #33	; 0x21
   9f84a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   9f84e:	2300      	movs	r3, #0
   9f850:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f854:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f858:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f85c:	2202      	movs	r2, #2
   9f85e:	4618      	mov	r0, r3
   9f860:	4b3f      	ldr	r3, [pc, #252]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f862:	4798      	blx	r3
   9f864:	4603      	mov	r3, r0
   9f866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f86a:	e01c      	b.n	9f8a6 <Cl_Rinse_Controller+0x1336>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9f86c:	2316      	movs	r3, #22
   9f86e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9f872:	2323      	movs	r3, #35	; 0x23
   9f874:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9f878:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f87c:	3301      	adds	r3, #1
   9f87e:	4619      	mov	r1, r3
   9f880:	2028      	movs	r0, #40	; 0x28
   9f882:	4b3b      	ldr	r3, [pc, #236]	; (9f970 <Cl_Rinse_Controller+0x1400>)
   9f884:	4798      	blx	r3
   9f886:	4603      	mov	r3, r0
   9f888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9f88c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   9f890:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   9f894:	2202      	movs	r2, #2
   9f896:	4618      	mov	r0, r3
   9f898:	4b31      	ldr	r3, [pc, #196]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f89a:	4798      	blx	r3
   9f89c:	4603      	mov	r3, r0
   9f89e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   9f8a2:	e000      	b.n	9f8a6 <Cl_Rinse_Controller+0x1336>
							
							default:
							break;
   9f8a4:	bf00      	nop
						}
					}
					break;
   9f8a6:	e04d      	b.n	9f944 <Cl_Rinse_Controller+0x13d4>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f8a8:	4b32      	ldr	r3, [pc, #200]	; (9f974 <Cl_Rinse_Controller+0x1404>)
   9f8aa:	781b      	ldrb	r3, [r3, #0]
   9f8ac:	2b01      	cmp	r3, #1
   9f8ae:	d04b      	beq.n	9f948 <Cl_Rinse_Controller+0x13d8>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9f8b0:	2206      	movs	r2, #6
   9f8b2:	4931      	ldr	r1, [pc, #196]	; (9f978 <Cl_Rinse_Controller+0x1408>)
   9f8b4:	2018      	movs	r0, #24
   9f8b6:	4b2a      	ldr	r3, [pc, #168]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f8b8:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   9f8ba:	4b30      	ldr	r3, [pc, #192]	; (9f97c <Cl_Rinse_Controller+0x140c>)
   9f8bc:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f8be:	4b30      	ldr	r3, [pc, #192]	; (9f980 <Cl_Rinse_Controller+0x1410>)
   9f8c0:	2200      	movs	r2, #0
   9f8c2:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9f8c4:	2100      	movs	r1, #0
   9f8c6:	2001      	movs	r0, #1
   9f8c8:	4b2e      	ldr	r3, [pc, #184]	; (9f984 <Cl_Rinse_Controller+0x1414>)
   9f8ca:	4798      	blx	r3
					}
						
					break;
   9f8cc:	e03c      	b.n	9f948 <Cl_Rinse_Controller+0x13d8>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9f8ce:	2100      	movs	r1, #0
   9f8d0:	2002      	movs	r0, #2
   9f8d2:	4b2c      	ldr	r3, [pc, #176]	; (9f984 <Cl_Rinse_Controller+0x1414>)
   9f8d4:	4798      	blx	r3
					break;
   9f8d6:	e03c      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f8d8:	4b26      	ldr	r3, [pc, #152]	; (9f974 <Cl_Rinse_Controller+0x1404>)
   9f8da:	781b      	ldrb	r3, [r3, #0]
   9f8dc:	2b01      	cmp	r3, #1
   9f8de:	d035      	beq.n	9f94c <Cl_Rinse_Controller+0x13dc>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9f8e0:	2206      	movs	r2, #6
   9f8e2:	4929      	ldr	r1, [pc, #164]	; (9f988 <Cl_Rinse_Controller+0x1418>)
   9f8e4:	2018      	movs	r0, #24
   9f8e6:	4b1e      	ldr	r3, [pc, #120]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f8e8:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9f8ea:	2100      	movs	r1, #0
   9f8ec:	2005      	movs	r0, #5
   9f8ee:	4b25      	ldr	r3, [pc, #148]	; (9f984 <Cl_Rinse_Controller+0x1414>)
   9f8f0:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f8f2:	4b23      	ldr	r3, [pc, #140]	; (9f980 <Cl_Rinse_Controller+0x1410>)
   9f8f4:	2200      	movs	r2, #0
   9f8f6:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   9f8f8:	e028      	b.n	9f94c <Cl_Rinse_Controller+0x13dc>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   9f8fa:	2206      	movs	r2, #6
   9f8fc:	4923      	ldr	r1, [pc, #140]	; (9f98c <Cl_Rinse_Controller+0x141c>)
   9f8fe:	2018      	movs	r0, #24
   9f900:	4b17      	ldr	r3, [pc, #92]	; (9f960 <Cl_Rinse_Controller+0x13f0>)
   9f902:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   9f904:	2100      	movs	r1, #0
   9f906:	2006      	movs	r0, #6
   9f908:	4b1e      	ldr	r3, [pc, #120]	; (9f984 <Cl_Rinse_Controller+0x1414>)
   9f90a:	4798      	blx	r3

						
					break;
   9f90c:	e021      	b.n	9f952 <Cl_Rinse_Controller+0x13e2>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   9f90e:	2300      	movs	r3, #0
   9f910:	e0cb      	b.n	9faaa <Cl_Rinse_Controller+0x153a>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9f912:	4b10      	ldr	r3, [pc, #64]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f914:	7e1b      	ldrb	r3, [r3, #24]
   9f916:	2b00      	cmp	r3, #0
   9f918:	d01a      	beq.n	9f950 <Cl_Rinse_Controller+0x13e0>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f91a:	4b0e      	ldr	r3, [pc, #56]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f91c:	791b      	ldrb	r3, [r3, #4]
   9f91e:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9f920:	4b0c      	ldr	r3, [pc, #48]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f922:	791b      	ldrb	r3, [r3, #4]
   9f924:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9f926:	4b0b      	ldr	r3, [pc, #44]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f928:	791b      	ldrb	r3, [r3, #4]
   9f92a:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9f92c:	4b09      	ldr	r3, [pc, #36]	; (9f954 <Cl_Rinse_Controller+0x13e4>)
   9f92e:	791b      	ldrb	r3, [r3, #4]
   9f930:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9f932:	89bb      	ldrh	r3, [r7, #12]
   9f934:	b21b      	sxth	r3, r3
   9f936:	4619      	mov	r1, r3
   9f938:	200e      	movs	r0, #14
   9f93a:	4b12      	ldr	r3, [pc, #72]	; (9f984 <Cl_Rinse_Controller+0x1414>)
   9f93c:	4798      	blx	r3
					}
					break;
   9f93e:	e007      	b.n	9f950 <Cl_Rinse_Controller+0x13e0>
					default: 
					
					return(CL_REJECTED);
   9f940:	2303      	movs	r3, #3
   9f942:	e0b2      	b.n	9faaa <Cl_Rinse_Controller+0x153a>
							
							default:
							break;
						}
					}
					break;
   9f944:	bf00      	nop
   9f946:	e0ae      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
						cl_dprep_activate_prime_related_alarms();
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
					}
						
					break;
   9f948:	bf00      	nop
   9f94a:	e0ac      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
					}
						
					break;
   9f94c:	bf00      	nop
   9f94e:	e0aa      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
					}
					break;
   9f950:	bf00      	nop
					
					return(CL_REJECTED);
					break;
				}
					
		break;
   9f952:	e0a8      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
   9f954:	20072f2c 	.word	0x20072f2c
   9f958:	20072821 	.word	0x20072821
   9f95c:	000a09d1 	.word	0x000a09d1
   9f960:	00098601 	.word	0x00098601
   9f964:	0009fdfd 	.word	0x0009fdfd
   9f968:	200727fe 	.word	0x200727fe
   9f96c:	200727ff 	.word	0x200727ff
   9f970:	0009710d 	.word	0x0009710d
   9f974:	200720ec 	.word	0x200720ec
   9f978:	000a4bd8 	.word	0x000a4bd8
   9f97c:	000893d1 	.word	0x000893d1
   9f980:	20070b74 	.word	0x20070b74
   9f984:	0008896d 	.word	0x0008896d
   9f988:	000a4bb4 	.word	0x000a4bb4
   9f98c:	000a4bbc 	.word	0x000a4bbc

	
	default:
			switch(cl_rinseevent)
   9f990:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   9f994:	3b02      	subs	r3, #2
   9f996:	2b17      	cmp	r3, #23
   9f998:	d87c      	bhi.n	9fa94 <Cl_Rinse_Controller+0x1524>
   9f99a:	a201      	add	r2, pc, #4	; (adr r2, 9f9a0 <Cl_Rinse_Controller+0x1430>)
   9f99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f9a0:	0009fa95 	.word	0x0009fa95
   9f9a4:	0009fa95 	.word	0x0009fa95
   9f9a8:	0009fa95 	.word	0x0009fa95
   9f9ac:	0009fa95 	.word	0x0009fa95
   9f9b0:	0009fa01 	.word	0x0009fa01
   9f9b4:	0009fa95 	.word	0x0009fa95
   9f9b8:	0009fa95 	.word	0x0009fa95
   9f9bc:	0009fa95 	.word	0x0009fa95
   9f9c0:	0009fa95 	.word	0x0009fa95
   9f9c4:	0009fa95 	.word	0x0009fa95
   9f9c8:	0009fa95 	.word	0x0009fa95
   9f9cc:	0009fa95 	.word	0x0009fa95
   9f9d0:	0009fa85 	.word	0x0009fa85
   9f9d4:	0009fa95 	.word	0x0009fa95
   9f9d8:	0009fa95 	.word	0x0009fa95
   9f9dc:	0009fa95 	.word	0x0009fa95
   9f9e0:	0009fa95 	.word	0x0009fa95
   9f9e4:	0009fa95 	.word	0x0009fa95
   9f9e8:	0009fa95 	.word	0x0009fa95
   9f9ec:	0009fa95 	.word	0x0009fa95
   9f9f0:	0009fa07 	.word	0x0009fa07
   9f9f4:	0009fa95 	.word	0x0009fa95
   9f9f8:	0009fa95 	.word	0x0009fa95
   9f9fc:	0009fa13 	.word	0x0009fa13
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   9fa00:	4b2c      	ldr	r3, [pc, #176]	; (9fab4 <Cl_Rinse_Controller+0x1544>)
   9fa02:	4798      	blx	r3
				break;
   9fa04:	e04b      	b.n	9fa9e <Cl_Rinse_Controller+0x152e>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9fa06:	4b2c      	ldr	r3, [pc, #176]	; (9fab8 <Cl_Rinse_Controller+0x1548>)
   9fa08:	4798      	blx	r3
   9fa0a:	4603      	mov	r3, r0
   9fa0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   9fa10:	e045      	b.n	9fa9e <Cl_Rinse_Controller+0x152e>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9fa12:	4b2a      	ldr	r3, [pc, #168]	; (9fabc <Cl_Rinse_Controller+0x154c>)
   9fa14:	781b      	ldrb	r3, [r3, #0]
   9fa16:	2b09      	cmp	r3, #9
   9fa18:	d03e      	beq.n	9fa98 <Cl_Rinse_Controller+0x1528>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   9fa1a:	2100      	movs	r1, #0
   9fa1c:	200c      	movs	r0, #12
   9fa1e:	4b28      	ldr	r3, [pc, #160]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa20:	4798      	blx	r3
   9fa22:	4603      	mov	r3, r0
   9fa24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   9fa28:	2100      	movs	r1, #0
   9fa2a:	200d      	movs	r0, #13
   9fa2c:	4b24      	ldr	r3, [pc, #144]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa2e:	4798      	blx	r3
   9fa30:	4603      	mov	r3, r0
   9fa32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   9fa36:	2100      	movs	r1, #0
   9fa38:	200e      	movs	r0, #14
   9fa3a:	4b21      	ldr	r3, [pc, #132]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa3c:	4798      	blx	r3
   9fa3e:	4603      	mov	r3, r0
   9fa40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9fa44:	2100      	movs	r1, #0
   9fa46:	2029      	movs	r0, #41	; 0x29
   9fa48:	4b1d      	ldr	r3, [pc, #116]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa4a:	4798      	blx	r3
   9fa4c:	4603      	mov	r3, r0
   9fa4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9fa52:	2100      	movs	r1, #0
   9fa54:	202b      	movs	r0, #43	; 0x2b
   9fa56:	4b1a      	ldr	r3, [pc, #104]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa58:	4798      	blx	r3
   9fa5a:	4603      	mov	r3, r0
   9fa5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9fa60:	2100      	movs	r1, #0
   9fa62:	2003      	movs	r0, #3
   9fa64:	4b16      	ldr	r3, [pc, #88]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa66:	4798      	blx	r3
   9fa68:	4603      	mov	r3, r0
   9fa6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9fa6e:	2100      	movs	r1, #0
   9fa70:	2004      	movs	r0, #4
   9fa72:	4b13      	ldr	r3, [pc, #76]	; (9fac0 <Cl_Rinse_Controller+0x1550>)
   9fa74:	4798      	blx	r3
   9fa76:	4603      	mov	r3, r0
   9fa78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9fa7c:	4b0f      	ldr	r3, [pc, #60]	; (9fabc <Cl_Rinse_Controller+0x154c>)
   9fa7e:	2209      	movs	r2, #9
   9fa80:	701a      	strb	r2, [r3, #0]
				}
				break;
   9fa82:	e009      	b.n	9fa98 <Cl_Rinse_Controller+0x1528>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   9fa84:	4b0d      	ldr	r3, [pc, #52]	; (9fabc <Cl_Rinse_Controller+0x154c>)
   9fa86:	781b      	ldrb	r3, [r3, #0]
   9fa88:	2b09      	cmp	r3, #9
   9fa8a:	d007      	beq.n	9fa9c <Cl_Rinse_Controller+0x152c>
				{
					Cl_rinseretcode = CL_ERROR;
   9fa8c:	2304      	movs	r3, #4
   9fa8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   9fa92:	e003      	b.n	9fa9c <Cl_Rinse_Controller+0x152c>
				default:
				break;
   9fa94:	bf00      	nop
   9fa96:	e006      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
				}
				break;
   9fa98:	bf00      	nop
   9fa9a:	e004      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
				{
					Cl_rinseretcode = CL_ERROR;
				}
				break;
   9fa9c:	bf00      	nop
				default:
				break;
			}
	break;
   9fa9e:	e002      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   9faa0:	bf00      	nop
   9faa2:	e000      	b.n	9faa6 <Cl_Rinse_Controller+0x1536>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   9faa4:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   9faa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   9faaa:	4618      	mov	r0, r3
   9faac:	3748      	adds	r7, #72	; 0x48
   9faae:	46bd      	mov	sp, r7
   9fab0:	bd80      	pop	{r7, pc}
   9fab2:	bf00      	nop
   9fab4:	000a0d2d 	.word	0x000a0d2d
   9fab8:	000a0049 	.word	0x000a0049
   9fabc:	200727fe 	.word	0x200727fe
   9fac0:	00082efd 	.word	0x00082efd

0009fac4 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   9fac4:	b480      	push	{r7}
   9fac6:	b083      	sub	sp, #12
   9fac8:	af00      	add	r7, sp, #0
   9faca:	4603      	mov	r3, r0
   9facc:	6039      	str	r1, [r7, #0]
   9face:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   9fad0:	79fb      	ldrb	r3, [r7, #7]
   9fad2:	3b07      	subs	r3, #7
   9fad4:	2b4a      	cmp	r3, #74	; 0x4a
   9fad6:	f200 8109 	bhi.w	9fcec <cl_rinse_translatemacevent+0x228>
   9fada:	a201      	add	r2, pc, #4	; (adr r2, 9fae0 <cl_rinse_translatemacevent+0x1c>)
   9fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fae0:	0009fc2d 	.word	0x0009fc2d
   9fae4:	0009fc45 	.word	0x0009fc45
   9fae8:	0009fc5d 	.word	0x0009fc5d
   9faec:	0009fcd5 	.word	0x0009fcd5
   9faf0:	0009fcdd 	.word	0x0009fcdd
   9faf4:	0009fce5 	.word	0x0009fce5
   9faf8:	0009fca5 	.word	0x0009fca5
   9fafc:	0009fcad 	.word	0x0009fcad
   9fb00:	0009fcb5 	.word	0x0009fcb5
   9fb04:	0009fcbd 	.word	0x0009fcbd
   9fb08:	0009fced 	.word	0x0009fced
   9fb0c:	0009fced 	.word	0x0009fced
   9fb10:	0009fced 	.word	0x0009fced
   9fb14:	0009fced 	.word	0x0009fced
   9fb18:	0009fced 	.word	0x0009fced
   9fb1c:	0009fced 	.word	0x0009fced
   9fb20:	0009fced 	.word	0x0009fced
   9fb24:	0009fced 	.word	0x0009fced
   9fb28:	0009fced 	.word	0x0009fced
   9fb2c:	0009fced 	.word	0x0009fced
   9fb30:	0009fced 	.word	0x0009fced
   9fb34:	0009fced 	.word	0x0009fced
   9fb38:	0009fced 	.word	0x0009fced
   9fb3c:	0009fced 	.word	0x0009fced
   9fb40:	0009fcc5 	.word	0x0009fcc5
   9fb44:	0009fccd 	.word	0x0009fccd
   9fb48:	0009fced 	.word	0x0009fced
   9fb4c:	0009fced 	.word	0x0009fced
   9fb50:	0009fced 	.word	0x0009fced
   9fb54:	0009fced 	.word	0x0009fced
   9fb58:	0009fced 	.word	0x0009fced
   9fb5c:	0009fc1d 	.word	0x0009fc1d
   9fb60:	0009fc0d 	.word	0x0009fc0d
   9fb64:	0009fc15 	.word	0x0009fc15
   9fb68:	0009fc25 	.word	0x0009fc25
   9fb6c:	0009fced 	.word	0x0009fced
   9fb70:	0009fced 	.word	0x0009fced
   9fb74:	0009fced 	.word	0x0009fced
   9fb78:	0009fc9d 	.word	0x0009fc9d
   9fb7c:	0009fc95 	.word	0x0009fc95
   9fb80:	0009fced 	.word	0x0009fced
   9fb84:	0009fced 	.word	0x0009fced
   9fb88:	0009fced 	.word	0x0009fced
   9fb8c:	0009fced 	.word	0x0009fced
   9fb90:	0009fced 	.word	0x0009fced
   9fb94:	0009fced 	.word	0x0009fced
   9fb98:	0009fced 	.word	0x0009fced
   9fb9c:	0009fced 	.word	0x0009fced
   9fba0:	0009fced 	.word	0x0009fced
   9fba4:	0009fc65 	.word	0x0009fc65
   9fba8:	0009fc6d 	.word	0x0009fc6d
   9fbac:	0009fc75 	.word	0x0009fc75
   9fbb0:	0009fc7d 	.word	0x0009fc7d
   9fbb4:	0009fc85 	.word	0x0009fc85
   9fbb8:	0009fc8d 	.word	0x0009fc8d
   9fbbc:	0009fced 	.word	0x0009fced
   9fbc0:	0009fced 	.word	0x0009fced
   9fbc4:	0009fced 	.word	0x0009fced
   9fbc8:	0009fced 	.word	0x0009fced
   9fbcc:	0009fced 	.word	0x0009fced
   9fbd0:	0009fced 	.word	0x0009fced
   9fbd4:	0009fc35 	.word	0x0009fc35
   9fbd8:	0009fc3d 	.word	0x0009fc3d
   9fbdc:	0009fced 	.word	0x0009fced
   9fbe0:	0009fced 	.word	0x0009fced
   9fbe4:	0009fc4d 	.word	0x0009fc4d
   9fbe8:	0009fced 	.word	0x0009fced
   9fbec:	0009fced 	.word	0x0009fced
   9fbf0:	0009fced 	.word	0x0009fced
   9fbf4:	0009fced 	.word	0x0009fced
   9fbf8:	0009fced 	.word	0x0009fced
   9fbfc:	0009fced 	.word	0x0009fced
   9fc00:	0009fced 	.word	0x0009fced
   9fc04:	0009fced 	.word	0x0009fced
   9fc08:	0009fc55 	.word	0x0009fc55
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   9fc0c:	683b      	ldr	r3, [r7, #0]
   9fc0e:	2224      	movs	r2, #36	; 0x24
   9fc10:	701a      	strb	r2, [r3, #0]
		break;
   9fc12:	e06c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   9fc14:	683b      	ldr	r3, [r7, #0]
   9fc16:	2225      	movs	r2, #37	; 0x25
   9fc18:	701a      	strb	r2, [r3, #0]
		break;
   9fc1a:	e068      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   9fc1c:	683b      	ldr	r3, [r7, #0]
   9fc1e:	2226      	movs	r2, #38	; 0x26
   9fc20:	701a      	strb	r2, [r3, #0]
		break;
   9fc22:	e064      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   9fc24:	683b      	ldr	r3, [r7, #0]
   9fc26:	2201      	movs	r2, #1
   9fc28:	701a      	strb	r2, [r3, #0]
		break;
   9fc2a:	e060      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   9fc2c:	683b      	ldr	r3, [r7, #0]
   9fc2e:	2202      	movs	r2, #2
   9fc30:	701a      	strb	r2, [r3, #0]
		break;
   9fc32:	e05c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   9fc34:	683b      	ldr	r3, [r7, #0]
   9fc36:	2204      	movs	r2, #4
   9fc38:	701a      	strb	r2, [r3, #0]
		break;
   9fc3a:	e058      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   9fc3c:	683b      	ldr	r3, [r7, #0]
   9fc3e:	2205      	movs	r2, #5
   9fc40:	701a      	strb	r2, [r3, #0]
		break;
   9fc42:	e054      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   9fc44:	683b      	ldr	r3, [r7, #0]
   9fc46:	2206      	movs	r2, #6
   9fc48:	701a      	strb	r2, [r3, #0]
		break;
   9fc4a:	e050      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   9fc4c:	683b      	ldr	r3, [r7, #0]
   9fc4e:	2219      	movs	r2, #25
   9fc50:	701a      	strb	r2, [r3, #0]
		break;
   9fc52:	e04c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   9fc54:	683b      	ldr	r3, [r7, #0]
   9fc56:	2227      	movs	r2, #39	; 0x27
   9fc58:	701a      	strb	r2, [r3, #0]
		break;
   9fc5a:	e048      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   9fc5c:	683b      	ldr	r3, [r7, #0]
   9fc5e:	220e      	movs	r2, #14
   9fc60:	701a      	strb	r2, [r3, #0]
		break; 
   9fc62:	e044      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   9fc64:	683b      	ldr	r3, [r7, #0]
   9fc66:	220f      	movs	r2, #15
   9fc68:	701a      	strb	r2, [r3, #0]
		break;
   9fc6a:	e040      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   9fc6c:	683b      	ldr	r3, [r7, #0]
   9fc6e:	2210      	movs	r2, #16
   9fc70:	701a      	strb	r2, [r3, #0]
		break;
   9fc72:	e03c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   9fc74:	683b      	ldr	r3, [r7, #0]
   9fc76:	2211      	movs	r2, #17
   9fc78:	701a      	strb	r2, [r3, #0]
		break;
   9fc7a:	e038      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   9fc7c:	683b      	ldr	r3, [r7, #0]
   9fc7e:	2212      	movs	r2, #18
   9fc80:	701a      	strb	r2, [r3, #0]
		break;
   9fc82:	e034      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   9fc84:	683b      	ldr	r3, [r7, #0]
   9fc86:	2213      	movs	r2, #19
   9fc88:	701a      	strb	r2, [r3, #0]
		break;			 
   9fc8a:	e030      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   9fc8c:	683b      	ldr	r3, [r7, #0]
   9fc8e:	2214      	movs	r2, #20
   9fc90:	701a      	strb	r2, [r3, #0]
		break;
   9fc92:	e02c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   9fc94:	683b      	ldr	r3, [r7, #0]
   9fc96:	2216      	movs	r2, #22
   9fc98:	701a      	strb	r2, [r3, #0]
		break;
   9fc9a:	e028      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   9fc9c:	683b      	ldr	r3, [r7, #0]
   9fc9e:	2215      	movs	r2, #21
   9fca0:	701a      	strb	r2, [r3, #0]
		break;
   9fca2:	e024      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   9fca4:	683b      	ldr	r3, [r7, #0]
   9fca6:	2218      	movs	r2, #24
   9fca8:	701a      	strb	r2, [r3, #0]
		break;
   9fcaa:	e020      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   9fcac:	683b      	ldr	r3, [r7, #0]
   9fcae:	2217      	movs	r2, #23
   9fcb0:	701a      	strb	r2, [r3, #0]
		break;
   9fcb2:	e01c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   9fcb4:	683b      	ldr	r3, [r7, #0]
   9fcb6:	221a      	movs	r2, #26
   9fcb8:	701a      	strb	r2, [r3, #0]
		break;
   9fcba:	e018      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   9fcbc:	683b      	ldr	r3, [r7, #0]
   9fcbe:	221b      	movs	r2, #27
   9fcc0:	701a      	strb	r2, [r3, #0]
		break;
   9fcc2:	e014      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   9fcc4:	683b      	ldr	r3, [r7, #0]
   9fcc6:	221f      	movs	r2, #31
   9fcc8:	701a      	strb	r2, [r3, #0]
		break;
   9fcca:	e010      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   9fccc:	683b      	ldr	r3, [r7, #0]
   9fcce:	2220      	movs	r2, #32
   9fcd0:	701a      	strb	r2, [r3, #0]
		break;
   9fcd2:	e00c      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   9fcd4:	683b      	ldr	r3, [r7, #0]
   9fcd6:	2221      	movs	r2, #33	; 0x21
   9fcd8:	701a      	strb	r2, [r3, #0]
		break;
   9fcda:	e008      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   9fcdc:	683b      	ldr	r3, [r7, #0]
   9fcde:	2222      	movs	r2, #34	; 0x22
   9fce0:	701a      	strb	r2, [r3, #0]
		break;
   9fce2:	e004      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   9fce4:	683b      	ldr	r3, [r7, #0]
   9fce6:	2223      	movs	r2, #35	; 0x23
   9fce8:	701a      	strb	r2, [r3, #0]
		break;
   9fcea:	e000      	b.n	9fcee <cl_rinse_translatemacevent+0x22a>
		
		default:
		break;
   9fcec:	bf00      	nop
	}
		 return CL_OK;
   9fcee:	2300      	movs	r3, #0
}
   9fcf0:	4618      	mov	r0, r3
   9fcf2:	370c      	adds	r7, #12
   9fcf4:	46bd      	mov	sp, r7
   9fcf6:	bc80      	pop	{r7}
   9fcf8:	4770      	bx	lr
   9fcfa:	bf00      	nop

0009fcfc <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   9fcfc:	b480      	push	{r7}
   9fcfe:	af00      	add	r7, sp, #0
		tempcount = 0;
   9fd00:	4b26      	ldr	r3, [pc, #152]	; (9fd9c <Cl_rinse_init+0xa0>)
   9fd02:	2200      	movs	r2, #0
   9fd04:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   9fd06:	4b26      	ldr	r3, [pc, #152]	; (9fda0 <Cl_rinse_init+0xa4>)
   9fd08:	2200      	movs	r2, #0
   9fd0a:	701a      	strb	r2, [r3, #0]
	   var1=0;
   9fd0c:	4b25      	ldr	r3, [pc, #148]	; (9fda4 <Cl_rinse_init+0xa8>)
   9fd0e:	2200      	movs	r2, #0
   9fd10:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   9fd12:	4b25      	ldr	r3, [pc, #148]	; (9fda8 <Cl_rinse_init+0xac>)
   9fd14:	2200      	movs	r2, #0
   9fd16:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   9fd18:	4b24      	ldr	r3, [pc, #144]	; (9fdac <Cl_rinse_init+0xb0>)
   9fd1a:	2200      	movs	r2, #0
   9fd1c:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   9fd1e:	4b24      	ldr	r3, [pc, #144]	; (9fdb0 <Cl_rinse_init+0xb4>)
   9fd20:	2200      	movs	r2, #0
   9fd22:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   9fd24:	4b23      	ldr	r3, [pc, #140]	; (9fdb4 <Cl_rinse_init+0xb8>)
   9fd26:	2200      	movs	r2, #0
   9fd28:	701a      	strb	r2, [r3, #0]
	 
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   9fd2a:	4b23      	ldr	r3, [pc, #140]	; (9fdb8 <Cl_rinse_init+0xbc>)
   9fd2c:	2200      	movs	r2, #0
   9fd2e:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   9fd30:	4b22      	ldr	r3, [pc, #136]	; (9fdbc <Cl_rinse_init+0xc0>)
   9fd32:	2200      	movs	r2, #0
   9fd34:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   9fd36:	4b22      	ldr	r3, [pc, #136]	; (9fdc0 <Cl_rinse_init+0xc4>)
   9fd38:	2200      	movs	r2, #0
   9fd3a:	601a      	str	r2, [r3, #0]
   9fd3c:	4b21      	ldr	r3, [pc, #132]	; (9fdc4 <Cl_rinse_init+0xc8>)
   9fd3e:	2200      	movs	r2, #0
   9fd40:	601a      	str	r2, [r3, #0]
   9fd42:	4b21      	ldr	r3, [pc, #132]	; (9fdc8 <Cl_rinse_init+0xcc>)
   9fd44:	2200      	movs	r2, #0
   9fd46:	601a      	str	r2, [r3, #0]
   9fd48:	4b20      	ldr	r3, [pc, #128]	; (9fdcc <Cl_rinse_init+0xd0>)
   9fd4a:	2200      	movs	r2, #0
   9fd4c:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   9fd4e:	4b20      	ldr	r3, [pc, #128]	; (9fdd0 <Cl_rinse_init+0xd4>)
   9fd50:	2200      	movs	r2, #0
   9fd52:	601a      	str	r2, [r3, #0]
   9fd54:	4b1f      	ldr	r3, [pc, #124]	; (9fdd4 <Cl_rinse_init+0xd8>)
   9fd56:	2200      	movs	r2, #0
   9fd58:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   9fd5a:	4b1f      	ldr	r3, [pc, #124]	; (9fdd8 <Cl_rinse_init+0xdc>)
   9fd5c:	2200      	movs	r2, #0
   9fd5e:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   9fd60:	4b1e      	ldr	r3, [pc, #120]	; (9fddc <Cl_rinse_init+0xe0>)
   9fd62:	2200      	movs	r2, #0
   9fd64:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   9fd66:	4b1e      	ldr	r3, [pc, #120]	; (9fde0 <Cl_rinse_init+0xe4>)
   9fd68:	2200      	movs	r2, #0
   9fd6a:	801a      	strh	r2, [r3, #0]
   9fd6c:	4b1d      	ldr	r3, [pc, #116]	; (9fde4 <Cl_rinse_init+0xe8>)
   9fd6e:	2200      	movs	r2, #0
   9fd70:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   9fd72:	4b1d      	ldr	r3, [pc, #116]	; (9fde8 <Cl_rinse_init+0xec>)
   9fd74:	2200      	movs	r2, #0
   9fd76:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   9fd78:	4b1c      	ldr	r3, [pc, #112]	; (9fdec <Cl_rinse_init+0xf0>)
   9fd7a:	2200      	movs	r2, #0
   9fd7c:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   9fd7e:	4b1c      	ldr	r3, [pc, #112]	; (9fdf0 <Cl_rinse_init+0xf4>)
   9fd80:	2200      	movs	r2, #0
   9fd82:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   9fd84:	4b1b      	ldr	r3, [pc, #108]	; (9fdf4 <Cl_rinse_init+0xf8>)
   9fd86:	2200      	movs	r2, #0
   9fd88:	701a      	strb	r2, [r3, #0]
   9fd8a:	4b1b      	ldr	r3, [pc, #108]	; (9fdf8 <Cl_rinse_init+0xfc>)
   9fd8c:	2200      	movs	r2, #0
   9fd8e:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   9fd90:	2300      	movs	r3, #0
 }
   9fd92:	4618      	mov	r0, r3
   9fd94:	46bd      	mov	sp, r7
   9fd96:	bc80      	pop	{r7}
   9fd98:	4770      	bx	lr
   9fd9a:	bf00      	nop
   9fd9c:	200732ec 	.word	0x200732ec
   9fda0:	200727f8 	.word	0x200727f8
   9fda4:	200727f9 	.word	0x200727f9
   9fda8:	200727fa 	.word	0x200727fa
   9fdac:	200727fb 	.word	0x200727fb
   9fdb0:	200727fc 	.word	0x200727fc
   9fdb4:	200727fd 	.word	0x200727fd
   9fdb8:	200727fe 	.word	0x200727fe
   9fdbc:	200727ff 	.word	0x200727ff
   9fdc0:	20072800 	.word	0x20072800
   9fdc4:	20072804 	.word	0x20072804
   9fdc8:	20072808 	.word	0x20072808
   9fdcc:	2007280c 	.word	0x2007280c
   9fdd0:	20072810 	.word	0x20072810
   9fdd4:	20072814 	.word	0x20072814
   9fdd8:	20072818 	.word	0x20072818
   9fddc:	20072819 	.word	0x20072819
   9fde0:	2007281a 	.word	0x2007281a
   9fde4:	2007281c 	.word	0x2007281c
   9fde8:	2007281e 	.word	0x2007281e
   9fdec:	20072820 	.word	0x20072820
   9fdf0:	200732ef 	.word	0x200732ef
   9fdf4:	20072821 	.word	0x20072821
   9fdf8:	20072822 	.word	0x20072822

0009fdfc <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   9fdfc:	b580      	push	{r7, lr}
   9fdfe:	b084      	sub	sp, #16
   9fe00:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   9fe02:	2304      	movs	r3, #4
   9fe04:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9fe06:	234a      	movs	r3, #74	; 0x4a
   9fe08:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9fe0a:	1d3b      	adds	r3, r7, #4
   9fe0c:	2200      	movs	r2, #0
   9fe0e:	601a      	str	r2, [r3, #0]
   9fe10:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   9fe14:	230a      	movs	r3, #10
   9fe16:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   9fe18:	2301      	movs	r3, #1
   9fe1a:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   9fe1c:	4b08      	ldr	r3, [pc, #32]	; (9fe40 <Cl_Rinse_UpdateTimeInfo+0x44>)
   9fe1e:	681b      	ldr	r3, [r3, #0]
   9fe20:	b2db      	uxtb	r3, r3
   9fe22:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   9fe24:	1d39      	adds	r1, r7, #4
   9fe26:	7bbb      	ldrb	r3, [r7, #14]
   9fe28:	2202      	movs	r2, #2
   9fe2a:	4618      	mov	r0, r3
   9fe2c:	4b05      	ldr	r3, [pc, #20]	; (9fe44 <Cl_Rinse_UpdateTimeInfo+0x48>)
   9fe2e:	4798      	blx	r3
   9fe30:	4603      	mov	r3, r0
   9fe32:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   9fe34:	2300      	movs	r3, #0
	
 }
   9fe36:	4618      	mov	r0, r3
   9fe38:	3710      	adds	r7, #16
   9fe3a:	46bd      	mov	sp, r7
   9fe3c:	bd80      	pop	{r7, pc}
   9fe3e:	bf00      	nop
   9fe40:	20072810 	.word	0x20072810
   9fe44:	00098601 	.word	0x00098601

0009fe48 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   9fe48:	b580      	push	{r7, lr}
   9fe4a:	b082      	sub	sp, #8
   9fe4c:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   9fe4e:	2304      	movs	r3, #4
   9fe50:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   9fe52:	4b18      	ldr	r3, [pc, #96]	; (9feb4 <Cl_Rinse_CheckforRinseCompletion+0x6c>)
   9fe54:	781b      	ldrb	r3, [r3, #0]
   9fe56:	2b00      	cmp	r3, #0
   9fe58:	d007      	beq.n	9fe6a <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   9fe5a:	4b17      	ldr	r3, [pc, #92]	; (9feb8 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   9fe5c:	681b      	ldr	r3, [r3, #0]
   9fe5e:	2b05      	cmp	r3, #5
   9fe60:	dd01      	ble.n	9fe66 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   9fe62:	2300      	movs	r3, #0
   9fe64:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   9fe66:	79fb      	ldrb	r3, [r7, #7]
   9fe68:	e020      	b.n	9feac <Cl_Rinse_CheckforRinseCompletion+0x64>
	 }
	if (hotrinse_flag == 1)
   9fe6a:	4b14      	ldr	r3, [pc, #80]	; (9febc <Cl_Rinse_CheckforRinseCompletion+0x74>)
   9fe6c:	781b      	ldrb	r3, [r3, #0]
   9fe6e:	b2db      	uxtb	r3, r3
   9fe70:	2b01      	cmp	r3, #1
   9fe72:	d114      	bne.n	9fe9e <Cl_Rinse_CheckforRinseCompletion+0x56>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN - 3) )
   9fe74:	4b10      	ldr	r3, [pc, #64]	; (9feb8 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   9fe76:	681b      	ldr	r3, [r3, #0]
   9fe78:	2b15      	cmp	r3, #21
   9fe7a:	dd03      	ble.n	9fe84 <Cl_Rinse_CheckforRinseCompletion+0x3c>
		{
			sv_cntrl_poweroffheater();
   9fe7c:	4b10      	ldr	r3, [pc, #64]	; (9fec0 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   9fe7e:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   9fe80:	4b10      	ldr	r3, [pc, #64]	; (9fec4 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   9fe82:	4798      	blx	r3
		}
		if (Cl_RinseTotalMinutescounter >= CL_HOTRINSE_TIMEOUT_MIN )
   9fe84:	4b0c      	ldr	r3, [pc, #48]	; (9feb8 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   9fe86:	681b      	ldr	r3, [r3, #0]
   9fe88:	2b18      	cmp	r3, #24
   9fe8a:	dd0e      	ble.n	9feaa <Cl_Rinse_CheckforRinseCompletion+0x62>
		{
			Cl_rinseretcode = CL_OK;
   9fe8c:	2300      	movs	r3, #0
   9fe8e:	71fb      	strb	r3, [r7, #7]
			sv_cntrl_poweroffheater();
   9fe90:	4b0b      	ldr	r3, [pc, #44]	; (9fec0 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   9fe92:	4798      	blx	r3
			hotrinse_flag = 0;
   9fe94:	4b09      	ldr	r3, [pc, #36]	; (9febc <Cl_Rinse_CheckforRinseCompletion+0x74>)
   9fe96:	2200      	movs	r2, #0
   9fe98:	701a      	strb	r2, [r3, #0]
			//HeaterState == CL_HEATER_STATE_INACTIVE;							// // added on 3.07.2017
			return Cl_rinseretcode;
   9fe9a:	79fb      	ldrb	r3, [r7, #7]
   9fe9c:	e006      	b.n	9feac <Cl_Rinse_CheckforRinseCompletion+0x64>
		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   9fe9e:	4b06      	ldr	r3, [pc, #24]	; (9feb8 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   9fea0:	681b      	ldr	r3, [r3, #0]
   9fea2:	2b07      	cmp	r3, #7
   9fea4:	dd01      	ble.n	9feaa <Cl_Rinse_CheckforRinseCompletion+0x62>
	{
			
		Cl_rinseretcode = CL_OK;
   9fea6:	2300      	movs	r3, #0
   9fea8:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   9feaa:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   9feac:	4618      	mov	r0, r3
   9feae:	3708      	adds	r7, #8
   9feb0:	46bd      	mov	sp, r7
   9feb2:	bd80      	pop	{r7, pc}
   9feb4:	20072604 	.word	0x20072604
   9feb8:	20072810 	.word	0x20072810
   9febc:	20072821 	.word	0x20072821
   9fec0:	00096869 	.word	0x00096869
   9fec4:	00096a0d 	.word	0x00096a0d

0009fec8 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   9fec8:	b580      	push	{r7, lr}
   9feca:	b082      	sub	sp, #8
   9fecc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   9fece:	2300      	movs	r3, #0
   9fed0:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   9fed2:	2300      	movs	r3, #0
   9fed4:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   9fed6:	4b1b      	ldr	r3, [pc, #108]	; (9ff44 <cl_rinse_notifydacandgotorinsestandby+0x7c>)
   9fed8:	4798      	blx	r3
	Cl_RinseFlowOff();
   9feda:	4b1b      	ldr	r3, [pc, #108]	; (9ff48 <cl_rinse_notifydacandgotorinsestandby+0x80>)
   9fedc:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   9fede:	4b1b      	ldr	r3, [pc, #108]	; (9ff4c <cl_rinse_notifydacandgotorinsestandby+0x84>)
   9fee0:	2200      	movs	r2, #0
   9fee2:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   9fee4:	4b1a      	ldr	r3, [pc, #104]	; (9ff50 <cl_rinse_notifydacandgotorinsestandby+0x88>)
   9fee6:	2200      	movs	r2, #0
   9fee8:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   9feea:	4b1a      	ldr	r3, [pc, #104]	; (9ff54 <cl_rinse_notifydacandgotorinsestandby+0x8c>)
   9feec:	2200      	movs	r2, #0
   9feee:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   9fef0:	4b19      	ldr	r3, [pc, #100]	; (9ff58 <cl_rinse_notifydacandgotorinsestandby+0x90>)
   9fef2:	2200      	movs	r2, #0
   9fef4:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   9fef6:	4b19      	ldr	r3, [pc, #100]	; (9ff5c <cl_rinse_notifydacandgotorinsestandby+0x94>)
   9fef8:	2200      	movs	r2, #0
   9fefa:	601a      	str	r2, [r3, #0]
	
	data = 1;
   9fefc:	2301      	movs	r3, #1
   9fefe:	71bb      	strb	r3, [r7, #6]
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   9ff00:	4b17      	ldr	r3, [pc, #92]	; (9ff60 <cl_rinse_notifydacandgotorinsestandby+0x98>)
   9ff02:	781b      	ldrb	r3, [r3, #0]
   9ff04:	2b03      	cmp	r3, #3
   9ff06:	d114      	bne.n	9ff32 <cl_rinse_notifydacandgotorinsestandby+0x6a>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   9ff08:	1dbb      	adds	r3, r7, #6
   9ff0a:	2201      	movs	r2, #1
   9ff0c:	4619      	mov	r1, r3
   9ff0e:	2001      	movs	r0, #1
   9ff10:	4b14      	ldr	r3, [pc, #80]	; (9ff64 <cl_rinse_notifydacandgotorinsestandby+0x9c>)
   9ff12:	4798      	blx	r3
   9ff14:	4603      	mov	r3, r0
   9ff16:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   9ff18:	1dbb      	adds	r3, r7, #6
   9ff1a:	2200      	movs	r2, #0
   9ff1c:	4619      	mov	r1, r3
   9ff1e:	200b      	movs	r0, #11
   9ff20:	4b11      	ldr	r3, [pc, #68]	; (9ff68 <cl_rinse_notifydacandgotorinsestandby+0xa0>)
   9ff22:	4798      	blx	r3
   9ff24:	4603      	mov	r3, r0
   9ff26:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   9ff28:	2048      	movs	r0, #72	; 0x48
   9ff2a:	4b10      	ldr	r3, [pc, #64]	; (9ff6c <cl_rinse_notifydacandgotorinsestandby+0xa4>)
   9ff2c:	4798      	blx	r3
   9ff2e:	4603      	mov	r3, r0
   9ff30:	71fb      	strb	r3, [r7, #7]
		
	}
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   9ff32:	2002      	movs	r0, #2
   9ff34:	4b0e      	ldr	r3, [pc, #56]	; (9ff70 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   9ff36:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   9ff38:	79fb      	ldrb	r3, [r7, #7]
}
   9ff3a:	4618      	mov	r0, r3
   9ff3c:	3708      	adds	r7, #8
   9ff3e:	46bd      	mov	sp, r7
   9ff40:	bd80      	pop	{r7, pc}
   9ff42:	bf00      	nop
   9ff44:	000a0551 	.word	0x000a0551
   9ff48:	000a0529 	.word	0x000a0529
   9ff4c:	20072800 	.word	0x20072800
   9ff50:	20072804 	.word	0x20072804
   9ff54:	20072808 	.word	0x20072808
   9ff58:	20072810 	.word	0x20072810
   9ff5c:	20072814 	.word	0x20072814
   9ff60:	200727fe 	.word	0x200727fe
   9ff64:	00097145 	.word	0x00097145
   9ff68:	00098601 	.word	0x00098601
   9ff6c:	0008a915 	.word	0x0008a915
   9ff70:	0009211d 	.word	0x0009211d

0009ff74 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   9ff74:	b580      	push	{r7, lr}
   9ff76:	b086      	sub	sp, #24
   9ff78:	af00      	add	r7, sp, #0
   9ff7a:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   9ff7c:	2300      	movs	r3, #0
   9ff7e:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9ff80:	2300      	movs	r3, #0
   9ff82:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9ff84:	f107 030c 	add.w	r3, r7, #12
   9ff88:	2100      	movs	r1, #0
   9ff8a:	460a      	mov	r2, r1
   9ff8c:	801a      	strh	r2, [r3, #0]
   9ff8e:	460a      	mov	r2, r1
   9ff90:	709a      	strb	r2, [r3, #2]
   9ff92:	2300      	movs	r3, #0
   9ff94:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ff96:	234a      	movs	r3, #74	; 0x4a
   9ff98:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9ff9a:	2300      	movs	r3, #0
   9ff9c:	75bb      	strb	r3, [r7, #22]
   9ff9e:	e045      	b.n	a002c <Cl_Rinse_UpdateAlarmTable+0xb8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   9ffa0:	7dbb      	ldrb	r3, [r7, #22]
   9ffa2:	4a26      	ldr	r2, [pc, #152]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffa4:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   9ffa8:	7dbb      	ldrb	r3, [r7, #22]
   9ffaa:	00db      	lsls	r3, r3, #3
   9ffac:	4a23      	ldr	r2, [pc, #140]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffae:	4413      	add	r3, r2
   9ffb0:	3302      	adds	r3, #2
   9ffb2:	4619      	mov	r1, r3
   9ffb4:	4b22      	ldr	r3, [pc, #136]	; (a0040 <Cl_Rinse_UpdateAlarmTable+0xcc>)
   9ffb6:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   9ffb8:	7dbb      	ldrb	r3, [r7, #22]
   9ffba:	4a20      	ldr	r2, [pc, #128]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffbc:	00db      	lsls	r3, r3, #3
   9ffbe:	4413      	add	r3, r2
   9ffc0:	789b      	ldrb	r3, [r3, #2]
   9ffc2:	2b00      	cmp	r3, #0
   9ffc4:	d019      	beq.n	9fffa <Cl_Rinse_UpdateAlarmTable+0x86>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   9ffc6:	7dbb      	ldrb	r3, [r7, #22]
   9ffc8:	4a1c      	ldr	r2, [pc, #112]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffca:	00db      	lsls	r3, r3, #3
   9ffcc:	4413      	add	r3, r2
   9ffce:	78db      	ldrb	r3, [r3, #3]
   9ffd0:	f083 0301 	eor.w	r3, r3, #1
   9ffd4:	b2db      	uxtb	r3, r3
   9ffd6:	2b00      	cmp	r3, #0
   9ffd8:	d025      	beq.n	a0026 <Cl_Rinse_UpdateAlarmTable+0xb2>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   9ffda:	7dbb      	ldrb	r3, [r7, #22]
   9ffdc:	4a17      	ldr	r2, [pc, #92]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffde:	00db      	lsls	r3, r3, #3
   9ffe0:	4413      	add	r3, r2
   9ffe2:	2201      	movs	r2, #1
   9ffe4:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   9ffe6:	7dbb      	ldrb	r3, [r7, #22]
   9ffe8:	4a14      	ldr	r2, [pc, #80]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9ffea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   9ffee:	4618      	mov	r0, r3
   9fff0:	4b14      	ldr	r3, [pc, #80]	; (a0044 <Cl_Rinse_UpdateAlarmTable+0xd0>)
   9fff2:	4798      	blx	r3
   9fff4:	4603      	mov	r3, r0
   9fff6:	75fb      	strb	r3, [r7, #23]
   9fff8:	e015      	b.n	a0026 <Cl_Rinse_UpdateAlarmTable+0xb2>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   9fffa:	7dbb      	ldrb	r3, [r7, #22]
   9fffc:	4a0f      	ldr	r2, [pc, #60]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   9fffe:	00db      	lsls	r3, r3, #3
   a0000:	4413      	add	r3, r2
   a0002:	78db      	ldrb	r3, [r3, #3]
   a0004:	2b00      	cmp	r3, #0
   a0006:	d00e      	beq.n	a0026 <Cl_Rinse_UpdateAlarmTable+0xb2>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a0008:	7dbb      	ldrb	r3, [r7, #22]
   a000a:	4a0c      	ldr	r2, [pc, #48]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a000c:	00db      	lsls	r3, r3, #3
   a000e:	4413      	add	r3, r2
   a0010:	2200      	movs	r2, #0
   a0012:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a0014:	2307      	movs	r3, #7
   a0016:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a0018:	7dbb      	ldrb	r3, [r7, #22]
   a001a:	4a08      	ldr	r2, [pc, #32]	; (a003c <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a001c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a0020:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a0022:	2300      	movs	r3, #0
   a0024:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0026:	7dbb      	ldrb	r3, [r7, #22]
   a0028:	3301      	adds	r3, #1
   a002a:	75bb      	strb	r3, [r7, #22]
   a002c:	7dbb      	ldrb	r3, [r7, #22]
   a002e:	2b18      	cmp	r3, #24
   a0030:	d9b6      	bls.n	9ffa0 <Cl_Rinse_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_rinseretcode );
   a0032:	7dfb      	ldrb	r3, [r7, #23]
}
   a0034:	4618      	mov	r0, r3
   a0036:	3718      	adds	r7, #24
   a0038:	46bd      	mov	sp, r7
   a003a:	bd80      	pop	{r7, pc}
   a003c:	20070b74 	.word	0x20070b74
   a0040:	00083041 	.word	0x00083041
   a0044:	000a019d 	.word	0x000a019d

000a0048 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a0048:	b580      	push	{r7, lr}
   a004a:	b082      	sub	sp, #8
   a004c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a004e:	2300      	movs	r3, #0
   a0050:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0052:	234a      	movs	r3, #74	; 0x4a
   a0054:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a0056:	1d7b      	adds	r3, r7, #5
   a0058:	4618      	mov	r0, r3
   a005a:	4b04      	ldr	r3, [pc, #16]	; (a006c <Cl_Rinse_ProcessAlarms+0x24>)
   a005c:	4798      	blx	r3
   a005e:	4603      	mov	r3, r0
   a0060:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a0062:	79fb      	ldrb	r3, [r7, #7]
}
   a0064:	4618      	mov	r0, r3
   a0066:	3708      	adds	r7, #8
   a0068:	46bd      	mov	sp, r7
   a006a:	bd80      	pop	{r7, pc}
   a006c:	0009ff75 	.word	0x0009ff75

000a0070 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a0070:	b580      	push	{r7, lr}
   a0072:	b082      	sub	sp, #8
   a0074:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a0076:	2300      	movs	r3, #0
   a0078:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a007a:	234a      	movs	r3, #74	; 0x4a
   a007c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a007e:	4b45      	ldr	r3, [pc, #276]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0080:	2200      	movs	r2, #0
   a0082:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a0084:	4b43      	ldr	r3, [pc, #268]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0086:	781b      	ldrb	r3, [r3, #0]
   a0088:	4618      	mov	r0, r3
   a008a:	4b43      	ldr	r3, [pc, #268]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a008c:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a008e:	4b41      	ldr	r3, [pc, #260]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0090:	2200      	movs	r2, #0
   a0092:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a0094:	2029      	movs	r0, #41	; 0x29
   a0096:	4b40      	ldr	r3, [pc, #256]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0098:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a009a:	4b3e      	ldr	r3, [pc, #248]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a009c:	2200      	movs	r2, #0
   a009e:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a00a0:	202b      	movs	r0, #43	; 0x2b
   a00a2:	4b3d      	ldr	r3, [pc, #244]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00a4:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a00a6:	4b3b      	ldr	r3, [pc, #236]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00a8:	2200      	movs	r2, #0
   a00aa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a00ae:	2008      	movs	r0, #8
   a00b0:	4b39      	ldr	r3, [pc, #228]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00b2:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a00b4:	4b37      	ldr	r3, [pc, #220]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00b6:	2200      	movs	r2, #0
   a00b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a00bc:	4b35      	ldr	r3, [pc, #212]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00be:	2200      	movs	r2, #0
   a00c0:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a00c4:	2015      	movs	r0, #21
   a00c6:	4b34      	ldr	r3, [pc, #208]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00c8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a00ca:	2016      	movs	r0, #22
   a00cc:	4b32      	ldr	r3, [pc, #200]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00ce:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a00d0:	4b30      	ldr	r3, [pc, #192]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00d2:	2200      	movs	r2, #0
   a00d4:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a00d8:	4b2e      	ldr	r3, [pc, #184]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00da:	2200      	movs	r2, #0
   a00dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a00e0:	2017      	movs	r0, #23
   a00e2:	4b2d      	ldr	r3, [pc, #180]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00e4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a00e6:	2018      	movs	r0, #24
   a00e8:	4b2b      	ldr	r3, [pc, #172]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a00ea:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a00ec:	4b29      	ldr	r3, [pc, #164]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00ee:	2200      	movs	r2, #0
   a00f0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a00f4:	4b27      	ldr	r3, [pc, #156]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a00f6:	2200      	movs	r2, #0
   a00f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a00fc:	2028      	movs	r0, #40	; 0x28
   a00fe:	4b26      	ldr	r3, [pc, #152]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0100:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a0102:	2027      	movs	r0, #39	; 0x27
   a0104:	4b24      	ldr	r3, [pc, #144]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0106:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a0108:	4b22      	ldr	r3, [pc, #136]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a010a:	2200      	movs	r2, #0
   a010c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a0110:	2012      	movs	r0, #18
   a0112:	4b21      	ldr	r3, [pc, #132]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0114:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a0116:	2011      	movs	r0, #17
   a0118:	4b1f      	ldr	r3, [pc, #124]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a011a:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a011c:	4b1d      	ldr	r3, [pc, #116]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a011e:	2200      	movs	r2, #0
   a0120:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a0124:	4b1b      	ldr	r3, [pc, #108]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0126:	2200      	movs	r2, #0
   a0128:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a012c:	2013      	movs	r0, #19
   a012e:	4b1a      	ldr	r3, [pc, #104]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0130:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a0132:	2014      	movs	r0, #20
   a0134:	4b18      	ldr	r3, [pc, #96]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0136:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a0138:	4b16      	ldr	r3, [pc, #88]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a013a:	2200      	movs	r2, #0
   a013c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a0140:	2003      	movs	r0, #3
   a0142:	4b15      	ldr	r3, [pc, #84]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0144:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a0146:	4b13      	ldr	r3, [pc, #76]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0148:	2200      	movs	r2, #0
   a014a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a014e:	2004      	movs	r0, #4
   a0150:	4b11      	ldr	r3, [pc, #68]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0152:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a0154:	4b0f      	ldr	r3, [pc, #60]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0156:	2200      	movs	r2, #0
   a0158:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a015c:	4b0d      	ldr	r3, [pc, #52]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a015e:	2200      	movs	r2, #0
   a0160:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a0164:	4b0b      	ldr	r3, [pc, #44]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0166:	2200      	movs	r2, #0
   a0168:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a016c:	4b09      	ldr	r3, [pc, #36]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a016e:	2200      	movs	r2, #0
   a0170:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a0174:	2010      	movs	r0, #16
   a0176:	4b08      	ldr	r3, [pc, #32]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0178:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a017a:	4b06      	ldr	r3, [pc, #24]	; (a0194 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a017c:	2200      	movs	r2, #0
   a017e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a0182:	200f      	movs	r0, #15
   a0184:	4b04      	ldr	r3, [pc, #16]	; (a0198 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0186:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a0188:	79fb      	ldrb	r3, [r7, #7]
}
   a018a:	4618      	mov	r0, r3
   a018c:	3708      	adds	r7, #8
   a018e:	46bd      	mov	sp, r7
   a0190:	bd80      	pop	{r7, pc}
   a0192:	bf00      	nop
   a0194:	20070b74 	.word	0x20070b74
   a0198:	00082ffd 	.word	0x00082ffd

000a019c <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a019c:	b580      	push	{r7, lr}
   a019e:	b086      	sub	sp, #24
   a01a0:	af00      	add	r7, sp, #0
   a01a2:	4603      	mov	r3, r0
   a01a4:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a01a6:	2300      	movs	r3, #0
   a01a8:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a01aa:	f107 0308 	add.w	r3, r7, #8
   a01ae:	2100      	movs	r1, #0
   a01b0:	460a      	mov	r2, r1
   a01b2:	801a      	strh	r2, [r3, #0]
   a01b4:	460a      	mov	r2, r1
   a01b6:	709a      	strb	r2, [r3, #2]
   a01b8:	2300      	movs	r3, #0
   a01ba:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a01bc:	234a      	movs	r3, #74	; 0x4a
   a01be:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a01c0:	2300      	movs	r3, #0
   a01c2:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a01c4:	2300      	movs	r3, #0
   a01c6:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a01c8:	79fb      	ldrb	r3, [r7, #7]
   a01ca:	3b01      	subs	r3, #1
   a01cc:	2b3a      	cmp	r3, #58	; 0x3a
   a01ce:	f200 812c 	bhi.w	a042a <CL_RinseAlarmActon+0x28e>
   a01d2:	a201      	add	r2, pc, #4	; (adr r2, a01d8 <CL_RinseAlarmActon+0x3c>)
   a01d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a01d8:	000a02c5 	.word	0x000a02c5
   a01dc:	000a042b 	.word	0x000a042b
   a01e0:	000a0307 	.word	0x000a0307
   a01e4:	000a031b 	.word	0x000a031b
   a01e8:	000a042b 	.word	0x000a042b
   a01ec:	000a042b 	.word	0x000a042b
   a01f0:	000a042b 	.word	0x000a042b
   a01f4:	000a03d7 	.word	0x000a03d7
   a01f8:	000a042b 	.word	0x000a042b
   a01fc:	000a042b 	.word	0x000a042b
   a0200:	000a042b 	.word	0x000a042b
   a0204:	000a03eb 	.word	0x000a03eb
   a0208:	000a03f7 	.word	0x000a03f7
   a020c:	000a0403 	.word	0x000a0403
   a0210:	000a032f 	.word	0x000a032f
   a0214:	000a032f 	.word	0x000a032f
   a0218:	000a0343 	.word	0x000a0343
   a021c:	000a035b 	.word	0x000a035b
   a0220:	000a036f 	.word	0x000a036f
   a0224:	000a0387 	.word	0x000a0387
   a0228:	000a039b 	.word	0x000a039b
   a022c:	000a039b 	.word	0x000a039b
   a0230:	000a03af 	.word	0x000a03af
   a0234:	000a03af 	.word	0x000a03af
   a0238:	000a042b 	.word	0x000a042b
   a023c:	000a042b 	.word	0x000a042b
   a0240:	000a0431 	.word	0x000a0431
   a0244:	000a0431 	.word	0x000a0431
   a0248:	000a0431 	.word	0x000a0431
   a024c:	000a042b 	.word	0x000a042b
   a0250:	000a0431 	.word	0x000a0431
   a0254:	000a042b 	.word	0x000a042b
   a0258:	000a042b 	.word	0x000a042b
   a025c:	000a042b 	.word	0x000a042b
   a0260:	000a042b 	.word	0x000a042b
   a0264:	000a042b 	.word	0x000a042b
   a0268:	000a042b 	.word	0x000a042b
   a026c:	000a042b 	.word	0x000a042b
   a0270:	000a03c3 	.word	0x000a03c3
   a0274:	000a03c3 	.word	0x000a03c3
   a0278:	000a02df 	.word	0x000a02df
   a027c:	000a042b 	.word	0x000a042b
   a0280:	000a02f3 	.word	0x000a02f3
   a0284:	000a042b 	.word	0x000a042b
   a0288:	000a0431 	.word	0x000a0431
   a028c:	000a0431 	.word	0x000a0431
   a0290:	000a042b 	.word	0x000a042b
   a0294:	000a042b 	.word	0x000a042b
   a0298:	000a042b 	.word	0x000a042b
   a029c:	000a040f 	.word	0x000a040f
   a02a0:	000a040f 	.word	0x000a040f
   a02a4:	000a042b 	.word	0x000a042b
   a02a8:	000a042b 	.word	0x000a042b
   a02ac:	000a042b 	.word	0x000a042b
   a02b0:	000a042b 	.word	0x000a042b
   a02b4:	000a042b 	.word	0x000a042b
   a02b8:	000a041b 	.word	0x000a041b
   a02bc:	000a041b 	.word	0x000a041b
   a02c0:	000a041b 	.word	0x000a041b
		{
			
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setredalarm();
   a02c4:	4b6a      	ldr	r3, [pc, #424]	; (a0470 <CL_RinseAlarmActon+0x2d4>)
   a02c6:	4798      	blx	r3
					sv_cntrl_buzzer();
   a02c8:	4b6a      	ldr	r3, [pc, #424]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a02ca:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a02cc:	2100      	movs	r1, #0
   a02ce:	2004      	movs	r0, #4
   a02d0:	4b69      	ldr	r3, [pc, #420]	; (a0478 <CL_RinseAlarmActon+0x2dc>)
   a02d2:	4798      	blx	r3
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
   a02d4:	2100      	movs	r1, #0
   a02d6:	2003      	movs	r0, #3
   a02d8:	4b68      	ldr	r3, [pc, #416]	; (a047c <CL_RinseAlarmActon+0x2e0>)
   a02da:	4798      	blx	r3
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a02dc:	e0a9      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case ACID_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a02de:	4b68      	ldr	r3, [pc, #416]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a02e0:	4798      	blx	r3
			sv_cntrl_buzzer();
   a02e2:	4b64      	ldr	r3, [pc, #400]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a02e4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a02e6:	4b67      	ldr	r3, [pc, #412]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a02e8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a02ea:	4b67      	ldr	r3, [pc, #412]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a02ec:	2206      	movs	r2, #6
   a02ee:	701a      	strb	r2, [r3, #0]
			break;
   a02f0:	e09f      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a02f2:	4b63      	ldr	r3, [pc, #396]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a02f4:	4798      	blx	r3
			sv_cntrl_buzzer();
   a02f6:	4b5f      	ldr	r3, [pc, #380]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a02f8:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a02fa:	4b62      	ldr	r3, [pc, #392]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a02fc:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a02fe:	4b62      	ldr	r3, [pc, #392]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0300:	2206      	movs	r2, #6
   a0302:	701a      	strb	r2, [r3, #0]
			break;
   a0304:	e095      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a0306:	4b5e      	ldr	r3, [pc, #376]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a0308:	4798      	blx	r3
				sv_cntrl_buzzer();
   a030a:	4b5a      	ldr	r3, [pc, #360]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a030c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a030e:	4b5d      	ldr	r3, [pc, #372]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0310:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0312:	4b5d      	ldr	r3, [pc, #372]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0314:	2206      	movs	r2, #6
   a0316:	701a      	strb	r2, [r3, #0]
			break;
   a0318:	e08b      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a031a:	4b59      	ldr	r3, [pc, #356]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a031c:	4798      	blx	r3
				sv_cntrl_buzzer();
   a031e:	4b55      	ldr	r3, [pc, #340]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a0320:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a0322:	4b58      	ldr	r3, [pc, #352]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0324:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0326:	4b58      	ldr	r3, [pc, #352]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0328:	2206      	movs	r2, #6
   a032a:	701a      	strb	r2, [r3, #0]
			break;
   a032c:	e081      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			break;*/
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a032e:	4b54      	ldr	r3, [pc, #336]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a0330:	4798      	blx	r3
				sv_cntrl_buzzer();
   a0332:	4b50      	ldr	r3, [pc, #320]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a0334:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a0336:	4b53      	ldr	r3, [pc, #332]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0338:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a033a:	4b53      	ldr	r3, [pc, #332]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a033c:	2206      	movs	r2, #6
   a033e:	701a      	strb	r2, [r3, #0]
			break;
   a0340:	e077      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case TEMP2_HIGH_THRESHOLD:
		//	case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a0342:	4b4f      	ldr	r3, [pc, #316]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a0344:	4798      	blx	r3
			sv_cntrl_buzzer();
   a0346:	4b4b      	ldr	r3, [pc, #300]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a0348:	4798      	blx	r3
			sv_cntrl_poweroffheater();					// added on 30-06-2017
   a034a:	4b50      	ldr	r3, [pc, #320]	; (a048c <CL_RinseAlarmActon+0x2f0>)
   a034c:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a034e:	4b4d      	ldr	r3, [pc, #308]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0350:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0352:	4b4d      	ldr	r3, [pc, #308]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0354:	2206      	movs	r2, #6
   a0356:	701a      	strb	r2, [r3, #0]
			break;
   a0358:	e06b      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a035a:	4b49      	ldr	r3, [pc, #292]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a035c:	4798      	blx	r3
			sv_cntrl_buzzer();
   a035e:	4b45      	ldr	r3, [pc, #276]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a0360:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a0362:	4b48      	ldr	r3, [pc, #288]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0364:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0366:	4b48      	ldr	r3, [pc, #288]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0368:	2206      	movs	r2, #6
   a036a:	701a      	strb	r2, [r3, #0]
			break;
   a036c:	e061      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   a036e:	4b44      	ldr	r3, [pc, #272]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a0370:	4798      	blx	r3
					sv_cntrl_buzzer();
   a0372:	4b40      	ldr	r3, [pc, #256]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a0374:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a0376:	4b43      	ldr	r3, [pc, #268]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0378:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a037a:	4b42      	ldr	r3, [pc, #264]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a037c:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a037e:	4b42      	ldr	r3, [pc, #264]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0380:	2206      	movs	r2, #6
   a0382:	701a      	strb	r2, [r3, #0]
			break;
   a0384:	e055      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a0386:	4b3e      	ldr	r3, [pc, #248]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a0388:	4798      	blx	r3
			sv_cntrl_buzzer();
   a038a:	4b3a      	ldr	r3, [pc, #232]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a038c:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a038e:	4b3d      	ldr	r3, [pc, #244]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0390:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0392:	4b3d      	ldr	r3, [pc, #244]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0394:	2206      	movs	r2, #6
   a0396:	701a      	strb	r2, [r3, #0]
			break;
   a0398:	e04b      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a039a:	4b39      	ldr	r3, [pc, #228]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a039c:	4798      	blx	r3
				sv_cntrl_buzzer();
   a039e:	4b35      	ldr	r3, [pc, #212]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a03a0:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a03a2:	4b38      	ldr	r3, [pc, #224]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03a4:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03a6:	4b38      	ldr	r3, [pc, #224]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03a8:	2206      	movs	r2, #6
   a03aa:	701a      	strb	r2, [r3, #0]
			break;
   a03ac:	e041      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a03ae:	4b34      	ldr	r3, [pc, #208]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a03b0:	4798      	blx	r3
				sv_cntrl_buzzer();
   a03b2:	4b30      	ldr	r3, [pc, #192]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a03b4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a03b6:	4b33      	ldr	r3, [pc, #204]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03b8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03ba:	4b33      	ldr	r3, [pc, #204]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03bc:	2206      	movs	r2, #6
   a03be:	701a      	strb	r2, [r3, #0]
			break;
   a03c0:	e037      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a03c2:	4b2f      	ldr	r3, [pc, #188]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a03c4:	4798      	blx	r3
				sv_cntrl_buzzer();
   a03c6:	4b2b      	ldr	r3, [pc, #172]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a03c8:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a03ca:	4b2e      	ldr	r3, [pc, #184]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03cc:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03ce:	4b2e      	ldr	r3, [pc, #184]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03d0:	2206      	movs	r2, #6
   a03d2:	701a      	strb	r2, [r3, #0]
			break;
   a03d4:	e02d      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   a03d6:	4b2a      	ldr	r3, [pc, #168]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a03d8:	4798      	blx	r3
				sv_cntrl_buzzer();
   a03da:	4b26      	ldr	r3, [pc, #152]	; (a0474 <CL_RinseAlarmActon+0x2d8>)
   a03dc:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a03de:	4b29      	ldr	r3, [pc, #164]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03e0:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03e2:	4b29      	ldr	r3, [pc, #164]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03e4:	2206      	movs	r2, #6
   a03e6:	701a      	strb	r2, [r3, #0]
			break;
   a03e8:	e023      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   a03ea:	4b26      	ldr	r3, [pc, #152]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03ec:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03ee:	4b26      	ldr	r3, [pc, #152]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03f0:	2206      	movs	r2, #6
   a03f2:	701a      	strb	r2, [r3, #0]
			break;
   a03f4:	e01d      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   a03f6:	4b23      	ldr	r3, [pc, #140]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a03f8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a03fa:	4b23      	ldr	r3, [pc, #140]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a03fc:	2206      	movs	r2, #6
   a03fe:	701a      	strb	r2, [r3, #0]
			break;
   a0400:	e017      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   a0402:	4b20      	ldr	r3, [pc, #128]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0404:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0406:	4b20      	ldr	r3, [pc, #128]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0408:	2206      	movs	r2, #6
   a040a:	701a      	strb	r2, [r3, #0]
			break;
   a040c:	e011      	b.n	a0432 <CL_RinseAlarmActon+0x296>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   a040e:	4b1d      	ldr	r3, [pc, #116]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0410:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0412:	4b1d      	ldr	r3, [pc, #116]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0414:	2206      	movs	r2, #6
   a0416:	701a      	strb	r2, [r3, #0]
			break;
   a0418:	e00b      	b.n	a0432 <CL_RinseAlarmActon+0x296>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
				sv_cntrl_setyellowalarm();                              // updated on 17.03.17
   a041a:	4b19      	ldr	r3, [pc, #100]	; (a0480 <CL_RinseAlarmActon+0x2e4>)
   a041c:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a041e:	4b19      	ldr	r3, [pc, #100]	; (a0484 <CL_RinseAlarmActon+0x2e8>)
   a0420:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0422:	4b19      	ldr	r3, [pc, #100]	; (a0488 <CL_RinseAlarmActon+0x2ec>)
   a0424:	2206      	movs	r2, #6
   a0426:	701a      	strb	r2, [r3, #0]
			break;
   a0428:	e003      	b.n	a0432 <CL_RinseAlarmActon+0x296>

			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a042a:	2300      	movs	r3, #0
   a042c:	71fb      	strb	r3, [r7, #7]
			break;
   a042e:	e000      	b.n	a0432 <CL_RinseAlarmActon+0x296>
					Cl_Rinse_StopRinse();
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
			break;

			case DE_CHAMBER_LOW: //23
			break;
   a0430:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a0432:	79fb      	ldrb	r3, [r7, #7]
   a0434:	2b00      	cmp	r3, #0
   a0436:	d013      	beq.n	a0460 <CL_RinseAlarmActon+0x2c4>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a0438:	79fb      	ldrb	r3, [r7, #7]
   a043a:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a043c:	2301      	movs	r3, #1
   a043e:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a0440:	2302      	movs	r3, #2
   a0442:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a0444:	2307      	movs	r3, #7
   a0446:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a0448:	f107 0108 	add.w	r1, r7, #8
   a044c:	7bfb      	ldrb	r3, [r7, #15]
   a044e:	2203      	movs	r2, #3
   a0450:	4618      	mov	r0, r3
   a0452:	4b0f      	ldr	r3, [pc, #60]	; (a0490 <CL_RinseAlarmActon+0x2f4>)
   a0454:	4798      	blx	r3
   a0456:	4603      	mov	r3, r0
   a0458:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a045a:	200a      	movs	r0, #10
   a045c:	4b0d      	ldr	r3, [pc, #52]	; (a0494 <CL_RinseAlarmActon+0x2f8>)
   a045e:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a0460:	4a0d      	ldr	r2, [pc, #52]	; (a0498 <CL_RinseAlarmActon+0x2fc>)
   a0462:	79fb      	ldrb	r3, [r7, #7]
   a0464:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a0466:	2300      	movs	r3, #0
}
   a0468:	4618      	mov	r0, r3
   a046a:	3718      	adds	r7, #24
   a046c:	46bd      	mov	sp, r7
   a046e:	bd80      	pop	{r7, pc}
   a0470:	00096ad5 	.word	0x00096ad5
   a0474:	00096b11 	.word	0x00096b11
   a0478:	00091c25 	.word	0x00091c25
   a047c:	0008896d 	.word	0x0008896d
   a0480:	00096ae9 	.word	0x00096ae9
   a0484:	000a0d2d 	.word	0x000a0d2d
   a0488:	200727fe 	.word	0x200727fe
   a048c:	00096869 	.word	0x00096869
   a0490:	00098601 	.word	0x00098601
   a0494:	00091b9d 	.word	0x00091b9d
   a0498:	20072820 	.word	0x20072820

000a049c <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a049c:	b580      	push	{r7, lr}
   a049e:	b086      	sub	sp, #24
   a04a0:	af00      	add	r7, sp, #0
   a04a2:	4603      	mov	r3, r0
   a04a4:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a04a6:	2300      	movs	r3, #0
   a04a8:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a04aa:	f107 030c 	add.w	r3, r7, #12
   a04ae:	2100      	movs	r1, #0
   a04b0:	460a      	mov	r2, r1
   a04b2:	801a      	strh	r2, [r3, #0]
   a04b4:	460a      	mov	r2, r1
   a04b6:	709a      	strb	r2, [r3, #2]
   a04b8:	2300      	movs	r3, #0
   a04ba:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a04bc:	234a      	movs	r3, #74	; 0x4a
   a04be:	73fb      	strb	r3, [r7, #15]
			if(cl_rinsealarmId != _NO_ALARM)
   a04c0:	79fb      	ldrb	r3, [r7, #7]
   a04c2:	2b00      	cmp	r3, #0
   a04c4:	d013      	beq.n	a04ee <Cl_RinseSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a04c6:	79fb      	ldrb	r3, [r7, #7]
   a04c8:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a04ca:	2301      	movs	r3, #1
   a04cc:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a04ce:	2302      	movs	r3, #2
   a04d0:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a04d2:	2307      	movs	r3, #7
   a04d4:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a04d6:	f107 010c 	add.w	r1, r7, #12
   a04da:	7bfb      	ldrb	r3, [r7, #15]
   a04dc:	2203      	movs	r2, #3
   a04de:	4618      	mov	r0, r3
   a04e0:	4b05      	ldr	r3, [pc, #20]	; (a04f8 <Cl_RinseSendAlarm+0x5c>)
   a04e2:	4798      	blx	r3
   a04e4:	4603      	mov	r3, r0
   a04e6:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a04e8:	200a      	movs	r0, #10
   a04ea:	4b04      	ldr	r3, [pc, #16]	; (a04fc <Cl_RinseSendAlarm+0x60>)
   a04ec:	4798      	blx	r3

			 }
}
   a04ee:	bf00      	nop
   a04f0:	4618      	mov	r0, r3
   a04f2:	3718      	adds	r7, #24
   a04f4:	46bd      	mov	sp, r7
   a04f6:	bd80      	pop	{r7, pc}
   a04f8:	00098601 	.word	0x00098601
   a04fc:	00091b9d 	.word	0x00091b9d

000a0500 <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a0500:	b580      	push	{r7, lr}
   a0502:	b082      	sub	sp, #8
   a0504:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a0506:	2300      	movs	r3, #0
   a0508:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a050a:	2001      	movs	r0, #1
   a050c:	4b04      	ldr	r3, [pc, #16]	; (a0520 <Cl_RinseFlowOn+0x20>)
   a050e:	4798      	blx	r3
	cl_gfillinprogress = true;
   a0510:	4b04      	ldr	r3, [pc, #16]	; (a0524 <Cl_RinseFlowOn+0x24>)
   a0512:	2201      	movs	r2, #1
   a0514:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a0516:	79fb      	ldrb	r3, [r7, #7]
	
}
   a0518:	4618      	mov	r0, r3
   a051a:	3708      	adds	r7, #8
   a051c:	46bd      	mov	sp, r7
   a051e:	bd80      	pop	{r7, pc}
   a0520:	0009687d 	.word	0x0009687d
   a0524:	20072819 	.word	0x20072819

000a0528 <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a0528:	b580      	push	{r7, lr}
   a052a:	b082      	sub	sp, #8
   a052c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a052e:	2300      	movs	r3, #0
   a0530:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a0532:	2001      	movs	r0, #1
   a0534:	4b04      	ldr	r3, [pc, #16]	; (a0548 <Cl_RinseFlowOff+0x20>)
   a0536:	4798      	blx	r3
	cl_gfillinprogress = false;
   a0538:	4b04      	ldr	r3, [pc, #16]	; (a054c <Cl_RinseFlowOff+0x24>)
   a053a:	2200      	movs	r2, #0
   a053c:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a053e:	79fb      	ldrb	r3, [r7, #7]
	
}
   a0540:	4618      	mov	r0, r3
   a0542:	3708      	adds	r7, #8
   a0544:	46bd      	mov	sp, r7
   a0546:	bd80      	pop	{r7, pc}
   a0548:	0009689d 	.word	0x0009689d
   a054c:	20072819 	.word	0x20072819

000a0550 <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a0550:	b580      	push	{r7, lr}
   a0552:	b082      	sub	sp, #8
   a0554:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a0556:	2300      	movs	r3, #0
   a0558:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a055a:	2005      	movs	r0, #5
   a055c:	4b04      	ldr	r3, [pc, #16]	; (a0570 <Cl_RinseStop+0x20>)
   a055e:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a0560:	4b04      	ldr	r3, [pc, #16]	; (a0574 <Cl_RinseStop+0x24>)
   a0562:	4798      	blx	r3
	return Cl_RetVal;
   a0564:	79fb      	ldrb	r3, [r7, #7]
	
}
   a0566:	4618      	mov	r0, r3
   a0568:	3708      	adds	r7, #8
   a056a:	46bd      	mov	sp, r7
   a056c:	bd80      	pop	{r7, pc}
   a056e:	bf00      	nop
   a0570:	00083325 	.word	0x00083325
   a0574:	00096869 	.word	0x00096869

000a0578 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a0578:	b5f0      	push	{r4, r5, r6, r7, lr}
   a057a:	b08b      	sub	sp, #44	; 0x2c
   a057c:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a057e:	2300      	movs	r3, #0
   a0580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	StateDatatype data;
	Cl_Uint8Type count=0;
   a0584:	2300      	movs	r3, #0
   a0586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0;
   a058a:	2300      	movs	r3, #0
   a058c:	827b      	strh	r3, [r7, #18]
   a058e:	2300      	movs	r3, #0
   a0590:	84bb      	strh	r3, [r7, #36]	; 0x24
   a0592:	2300      	movs	r3, #0
   a0594:	823b      	strh	r3, [r7, #16]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a0596:	1d3b      	adds	r3, r7, #4
   a0598:	2200      	movs	r2, #0
   a059a:	601a      	str	r2, [r3, #0]
   a059c:	605a      	str	r2, [r3, #4]
   a059e:	609a      	str	r2, [r3, #8]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a05a0:	4b8d      	ldr	r3, [pc, #564]	; (a07d8 <Cl_Rinse_SendRinseStateData+0x260>)
   a05a2:	681b      	ldr	r3, [r3, #0]
   a05a4:	3301      	adds	r3, #1
   a05a6:	4a8c      	ldr	r2, [pc, #560]	; (a07d8 <Cl_Rinse_SendRinseStateData+0x260>)
   a05a8:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a05aa:	4b8b      	ldr	r3, [pc, #556]	; (a07d8 <Cl_Rinse_SendRinseStateData+0x260>)
   a05ac:	681b      	ldr	r3, [r3, #0]
   a05ae:	2b04      	cmp	r3, #4
   a05b0:	f340 81ef 	ble.w	a0992 <Cl_Rinse_SendRinseStateData+0x41a>
	{
		return;
	}
	else
	{
		timecount = 0;
   a05b4:	4b88      	ldr	r3, [pc, #544]	; (a07d8 <Cl_Rinse_SendRinseStateData+0x260>)
   a05b6:	2200      	movs	r2, #0
   a05b8:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a05ba:	2301      	movs	r3, #1
   a05bc:	713b      	strb	r3, [r7, #4]
	count++;
   a05be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a05c2:	3301      	adds	r3, #1
   a05c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a05c8:	f107 0312 	add.w	r3, r7, #18
   a05cc:	4619      	mov	r1, r3
   a05ce:	2007      	movs	r0, #7
   a05d0:	4b82      	ldr	r3, [pc, #520]	; (a07dc <Cl_Rinse_SendRinseStateData+0x264>)
   a05d2:	4798      	blx	r3
		{
 			float cond_comp;
// 			float temp2;
// 			temp2 = temp * 0.8036;
			if (temp > 50)
   a05d4:	8a7b      	ldrh	r3, [r7, #18]
   a05d6:	2b32      	cmp	r3, #50	; 0x32
   a05d8:	f240 812c 	bls.w	a0834 <Cl_Rinse_SendRinseStateData+0x2bc>
			{
				//calibration_cond(temp2);
				cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   a05dc:	8a7b      	ldrh	r3, [r7, #18]
   a05de:	461a      	mov	r2, r3
   a05e0:	4b7f      	ldr	r3, [pc, #508]	; (a07e0 <Cl_Rinse_SendRinseStateData+0x268>)
   a05e2:	4610      	mov	r0, r2
   a05e4:	4798      	blx	r3
   a05e6:	4c7f      	ldr	r4, [pc, #508]	; (a07e4 <Cl_Rinse_SendRinseStateData+0x26c>)
   a05e8:	a373      	add	r3, pc, #460	; (adr r3, a07b8 <Cl_Rinse_SendRinseStateData+0x240>)
   a05ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   a05ee:	47a0      	blx	r4
   a05f0:	4603      	mov	r3, r0
   a05f2:	460c      	mov	r4, r1
   a05f4:	461d      	mov	r5, r3
   a05f6:	4626      	mov	r6, r4
   a05f8:	8a7b      	ldrh	r3, [r7, #18]
   a05fa:	461a      	mov	r2, r3
   a05fc:	4b78      	ldr	r3, [pc, #480]	; (a07e0 <Cl_Rinse_SendRinseStateData+0x268>)
   a05fe:	4610      	mov	r0, r2
   a0600:	4798      	blx	r3
   a0602:	4602      	mov	r2, r0
   a0604:	460b      	mov	r3, r1
   a0606:	4c77      	ldr	r4, [pc, #476]	; (a07e4 <Cl_Rinse_SendRinseStateData+0x26c>)
   a0608:	4628      	mov	r0, r5
   a060a:	4631      	mov	r1, r6
   a060c:	47a0      	blx	r4
   a060e:	4603      	mov	r3, r0
   a0610:	460c      	mov	r4, r1
   a0612:	461d      	mov	r5, r3
   a0614:	4626      	mov	r6, r4
   a0616:	8a7b      	ldrh	r3, [r7, #18]
   a0618:	461a      	mov	r2, r3
   a061a:	4b71      	ldr	r3, [pc, #452]	; (a07e0 <Cl_Rinse_SendRinseStateData+0x268>)
   a061c:	4610      	mov	r0, r2
   a061e:	4798      	blx	r3
   a0620:	4c70      	ldr	r4, [pc, #448]	; (a07e4 <Cl_Rinse_SendRinseStateData+0x26c>)
   a0622:	a367      	add	r3, pc, #412	; (adr r3, a07c0 <Cl_Rinse_SendRinseStateData+0x248>)
   a0624:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0628:	47a0      	blx	r4
   a062a:	4603      	mov	r3, r0
   a062c:	460c      	mov	r4, r1
   a062e:	461a      	mov	r2, r3
   a0630:	4623      	mov	r3, r4
   a0632:	4c6d      	ldr	r4, [pc, #436]	; (a07e8 <Cl_Rinse_SendRinseStateData+0x270>)
   a0634:	4628      	mov	r0, r5
   a0636:	4631      	mov	r1, r6
   a0638:	47a0      	blx	r4
   a063a:	4603      	mov	r3, r0
   a063c:	460c      	mov	r4, r1
   a063e:	4618      	mov	r0, r3
   a0640:	4621      	mov	r1, r4
   a0642:	4c6a      	ldr	r4, [pc, #424]	; (a07ec <Cl_Rinse_SendRinseStateData+0x274>)
   a0644:	a360      	add	r3, pc, #384	; (adr r3, a07c8 <Cl_Rinse_SendRinseStateData+0x250>)
   a0646:	e9d3 2300 	ldrd	r2, r3, [r3]
   a064a:	47a0      	blx	r4
   a064c:	4603      	mov	r3, r0
   a064e:	460c      	mov	r4, r1
   a0650:	4619      	mov	r1, r3
   a0652:	4622      	mov	r2, r4
   a0654:	4b66      	ldr	r3, [pc, #408]	; (a07f0 <Cl_Rinse_SendRinseStateData+0x278>)
   a0656:	4608      	mov	r0, r1
   a0658:	4611      	mov	r1, r2
   a065a:	4798      	blx	r3
   a065c:	4602      	mov	r2, r0
   a065e:	4b65      	ldr	r3, [pc, #404]	; (a07f4 <Cl_Rinse_SendRinseStateData+0x27c>)
   a0660:	601a      	str	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a0662:	f107 0310 	add.w	r3, r7, #16
   a0666:	4619      	mov	r1, r3
   a0668:	2014      	movs	r0, #20
   a066a:	4b5c      	ldr	r3, [pc, #368]	; (a07dc <Cl_Rinse_SendRinseStateData+0x264>)
   a066c:	4798      	blx	r3
				{
				float ftemp,ftemp1,temp1;

				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   a066e:	8a3b      	ldrh	r3, [r7, #16]
   a0670:	461a      	mov	r2, r3
   a0672:	f649 5308 	movw	r3, #40200	; 0x9d08
   a0676:	fb03 f302 	mul.w	r3, r3, r2
   a067a:	2b00      	cmp	r3, #0
   a067c:	da02      	bge.n	a0684 <Cl_Rinse_SendRinseStateData+0x10c>
   a067e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a0682:	33ff      	adds	r3, #255	; 0xff
   a0684:	141b      	asrs	r3, r3, #16
   a0686:	847b      	strh	r3, [r7, #34]	; 0x22
				res_temp_lookuptable(cal_data);
   a0688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a068a:	4618      	mov	r0, r3
   a068c:	4b5a      	ldr	r3, [pc, #360]	; (a07f8 <Cl_Rinse_SendRinseStateData+0x280>)
   a068e:	4798      	blx	r3
				tmp2 =	(tmp2*5 + res_temp_value)/6;
   a0690:	4b5a      	ldr	r3, [pc, #360]	; (a07fc <Cl_Rinse_SendRinseStateData+0x284>)
   a0692:	681a      	ldr	r2, [r3, #0]
   a0694:	4b5a      	ldr	r3, [pc, #360]	; (a0800 <Cl_Rinse_SendRinseStateData+0x288>)
   a0696:	495b      	ldr	r1, [pc, #364]	; (a0804 <Cl_Rinse_SendRinseStateData+0x28c>)
   a0698:	4610      	mov	r0, r2
   a069a:	4798      	blx	r3
   a069c:	4603      	mov	r3, r0
   a069e:	4618      	mov	r0, r3
   a06a0:	4b59      	ldr	r3, [pc, #356]	; (a0808 <Cl_Rinse_SendRinseStateData+0x290>)
   a06a2:	681a      	ldr	r2, [r3, #0]
   a06a4:	4b59      	ldr	r3, [pc, #356]	; (a080c <Cl_Rinse_SendRinseStateData+0x294>)
   a06a6:	4611      	mov	r1, r2
   a06a8:	4798      	blx	r3
   a06aa:	4603      	mov	r3, r0
   a06ac:	461a      	mov	r2, r3
   a06ae:	4b58      	ldr	r3, [pc, #352]	; (a0810 <Cl_Rinse_SendRinseStateData+0x298>)
   a06b0:	4958      	ldr	r1, [pc, #352]	; (a0814 <Cl_Rinse_SendRinseStateData+0x29c>)
   a06b2:	4610      	mov	r0, r2
   a06b4:	4798      	blx	r3
   a06b6:	4603      	mov	r3, r0
   a06b8:	461a      	mov	r2, r3
   a06ba:	4b50      	ldr	r3, [pc, #320]	; (a07fc <Cl_Rinse_SendRinseStateData+0x284>)
   a06bc:	601a      	str	r2, [r3, #0]
				uint16_t temp = tmp2/10;
   a06be:	4b4f      	ldr	r3, [pc, #316]	; (a07fc <Cl_Rinse_SendRinseStateData+0x284>)
   a06c0:	681a      	ldr	r2, [r3, #0]
   a06c2:	4b53      	ldr	r3, [pc, #332]	; (a0810 <Cl_Rinse_SendRinseStateData+0x298>)
   a06c4:	4954      	ldr	r1, [pc, #336]	; (a0818 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a06c6:	4610      	mov	r0, r2
   a06c8:	4798      	blx	r3
   a06ca:	4603      	mov	r3, r0
   a06cc:	461a      	mov	r2, r3
   a06ce:	4b53      	ldr	r3, [pc, #332]	; (a081c <Cl_Rinse_SendRinseStateData+0x2a4>)
   a06d0:	4610      	mov	r0, r2
   a06d2:	4798      	blx	r3
   a06d4:	4603      	mov	r3, r0
   a06d6:	843b      	strh	r3, [r7, #32]
				temp = temp - 31 + 14;										// sensor offset
   a06d8:	8c3b      	ldrh	r3, [r7, #32]
   a06da:	3b11      	subs	r3, #17
   a06dc:	843b      	strh	r3, [r7, #32]
				cond_comp= cond/(1+(temp/10-25.0)*0.019);
   a06de:	4b45      	ldr	r3, [pc, #276]	; (a07f4 <Cl_Rinse_SendRinseStateData+0x27c>)
   a06e0:	681a      	ldr	r2, [r3, #0]
   a06e2:	4b4f      	ldr	r3, [pc, #316]	; (a0820 <Cl_Rinse_SendRinseStateData+0x2a8>)
   a06e4:	4610      	mov	r0, r2
   a06e6:	4798      	blx	r3
   a06e8:	4605      	mov	r5, r0
   a06ea:	460e      	mov	r6, r1
   a06ec:	8c3b      	ldrh	r3, [r7, #32]
   a06ee:	4a4d      	ldr	r2, [pc, #308]	; (a0824 <Cl_Rinse_SendRinseStateData+0x2ac>)
   a06f0:	fba2 2303 	umull	r2, r3, r2, r3
   a06f4:	08db      	lsrs	r3, r3, #3
   a06f6:	b29b      	uxth	r3, r3
   a06f8:	461a      	mov	r2, r3
   a06fa:	4b39      	ldr	r3, [pc, #228]	; (a07e0 <Cl_Rinse_SendRinseStateData+0x268>)
   a06fc:	4610      	mov	r0, r2
   a06fe:	4798      	blx	r3
   a0700:	4c3a      	ldr	r4, [pc, #232]	; (a07ec <Cl_Rinse_SendRinseStateData+0x274>)
   a0702:	f04f 0200 	mov.w	r2, #0
   a0706:	4b48      	ldr	r3, [pc, #288]	; (a0828 <Cl_Rinse_SendRinseStateData+0x2b0>)
   a0708:	47a0      	blx	r4
   a070a:	4603      	mov	r3, r0
   a070c:	460c      	mov	r4, r1
   a070e:	4618      	mov	r0, r3
   a0710:	4621      	mov	r1, r4
   a0712:	4c34      	ldr	r4, [pc, #208]	; (a07e4 <Cl_Rinse_SendRinseStateData+0x26c>)
   a0714:	a32e      	add	r3, pc, #184	; (adr r3, a07d0 <Cl_Rinse_SendRinseStateData+0x258>)
   a0716:	e9d3 2300 	ldrd	r2, r3, [r3]
   a071a:	47a0      	blx	r4
   a071c:	4603      	mov	r3, r0
   a071e:	460c      	mov	r4, r1
   a0720:	4618      	mov	r0, r3
   a0722:	4621      	mov	r1, r4
   a0724:	4c30      	ldr	r4, [pc, #192]	; (a07e8 <Cl_Rinse_SendRinseStateData+0x270>)
   a0726:	f04f 0200 	mov.w	r2, #0
   a072a:	4b40      	ldr	r3, [pc, #256]	; (a082c <Cl_Rinse_SendRinseStateData+0x2b4>)
   a072c:	47a0      	blx	r4
   a072e:	4603      	mov	r3, r0
   a0730:	460c      	mov	r4, r1
   a0732:	461a      	mov	r2, r3
   a0734:	4623      	mov	r3, r4
   a0736:	4c3e      	ldr	r4, [pc, #248]	; (a0830 <Cl_Rinse_SendRinseStateData+0x2b8>)
   a0738:	4628      	mov	r0, r5
   a073a:	4631      	mov	r1, r6
   a073c:	47a0      	blx	r4
   a073e:	4603      	mov	r3, r0
   a0740:	460c      	mov	r4, r1
   a0742:	4619      	mov	r1, r3
   a0744:	4622      	mov	r2, r4
   a0746:	4b2a      	ldr	r3, [pc, #168]	; (a07f0 <Cl_Rinse_SendRinseStateData+0x278>)
   a0748:	4608      	mov	r0, r1
   a074a:	4611      	mov	r1, r2
   a074c:	4798      	blx	r3
   a074e:	4603      	mov	r3, r0
   a0750:	61fb      	str	r3, [r7, #28]
// 											
// 											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
				
				}
				//data.fourbytedata = (cond_comp);
				data.fourbytedata = cond_comp;
   a0752:	4b32      	ldr	r3, [pc, #200]	; (a081c <Cl_Rinse_SendRinseStateData+0x2a4>)
   a0754:	69f8      	ldr	r0, [r7, #28]
   a0756:	4798      	blx	r3
   a0758:	4603      	mov	r3, r0
   a075a:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a075c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0760:	1c5a      	adds	r2, r3, #1
   a0762:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0766:	7d3a      	ldrb	r2, [r7, #20]
   a0768:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a076c:	440b      	add	r3, r1
   a076e:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a0772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0776:	1c5a      	adds	r2, r3, #1
   a0778:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a077c:	7d7a      	ldrb	r2, [r7, #21]
   a077e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0782:	440b      	add	r3, r1
   a0784:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a0788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a078c:	1c5a      	adds	r2, r3, #1
   a078e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0792:	7dba      	ldrb	r2, [r7, #22]
   a0794:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0798:	440b      	add	r3, r1
   a079a:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a079e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a07a2:	1c5a      	adds	r2, r3, #1
   a07a4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a07a8:	7dfa      	ldrb	r2, [r7, #23]
   a07aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a07ae:	440b      	add	r3, r1
   a07b0:	f803 2c24 	strb.w	r2, [r3, #-36]
   a07b4:	e06c      	b.n	a0890 <Cl_Rinse_SendRinseStateData+0x318>
   a07b6:	bf00      	nop
   a07b8:	eb1c432d 	.word	0xeb1c432d
   a07bc:	bf1a36e2 	.word	0xbf1a36e2
   a07c0:	70a3d70a 	.word	0x70a3d70a
   a07c4:	3fd70a3d 	.word	0x3fd70a3d
   a07c8:	851eb852 	.word	0x851eb852
   a07cc:	404331eb 	.word	0x404331eb
   a07d0:	6a7ef9db 	.word	0x6a7ef9db
   a07d4:	3f9374bc 	.word	0x3f9374bc
   a07d8:	20072824 	.word	0x20072824
   a07dc:	0008d499 	.word	0x0008d499
   a07e0:	000a1d41 	.word	0x000a1d41
   a07e4:	000a1e0d 	.word	0x000a1e0d
   a07e8:	000a1aa9 	.word	0x000a1aa9
   a07ec:	000a1aa5 	.word	0x000a1aa5
   a07f0:	000a23d1 	.word	0x000a23d1
   a07f4:	20072828 	.word	0x20072828
   a07f8:	0008e659 	.word	0x0008e659
   a07fc:	2007282c 	.word	0x2007282c
   a0800:	000a268d 	.word	0x000a268d
   a0804:	40a00000 	.word	0x40a00000
   a0808:	200725ec 	.word	0x200725ec
   a080c:	000a247d 	.word	0x000a247d
   a0810:	000a27f5 	.word	0x000a27f5
   a0814:	40c00000 	.word	0x40c00000
   a0818:	41200000 	.word	0x41200000
   a081c:	000a2a65 	.word	0x000a2a65
   a0820:	000a1d65 	.word	0x000a1d65
   a0824:	cccccccd 	.word	0xcccccccd
   a0828:	40390000 	.word	0x40390000
   a082c:	3ff00000 	.word	0x3ff00000
   a0830:	000a2061 	.word	0x000a2061
				}
			else
			{
				data.fourbytedata = 0;
   a0834:	2300      	movs	r3, #0
   a0836:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a0838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a083c:	1c5a      	adds	r2, r3, #1
   a083e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0842:	7d3a      	ldrb	r2, [r7, #20]
   a0844:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0848:	440b      	add	r3, r1
   a084a:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a084e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0852:	1c5a      	adds	r2, r3, #1
   a0854:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0858:	7d7a      	ldrb	r2, [r7, #21]
   a085a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a085e:	440b      	add	r3, r1
   a0860:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a0864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0868:	1c5a      	adds	r2, r3, #1
   a086a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a086e:	7dba      	ldrb	r2, [r7, #22]
   a0870:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0874:	440b      	add	r3, r1
   a0876:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a087a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a087e:	1c5a      	adds	r2, r3, #1
   a0880:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0884:	7dfa      	ldrb	r2, [r7, #23]
   a0886:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a088a:	440b      	add	r3, r1
   a088c:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a0890:	f107 0310 	add.w	r3, r7, #16
   a0894:	4619      	mov	r1, r3
   a0896:	2014      	movs	r0, #20
   a0898:	4b40      	ldr	r3, [pc, #256]	; (a099c <Cl_Rinse_SendRinseStateData+0x424>)
   a089a:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;

				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   a089c:	8a3b      	ldrh	r3, [r7, #16]
   a089e:	461a      	mov	r2, r3
   a08a0:	f649 5308 	movw	r3, #40200	; 0x9d08
   a08a4:	fb03 f302 	mul.w	r3, r3, r2
   a08a8:	2b00      	cmp	r3, #0
   a08aa:	da02      	bge.n	a08b2 <Cl_Rinse_SendRinseStateData+0x33a>
   a08ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a08b0:	33ff      	adds	r3, #255	; 0xff
   a08b2:	141b      	asrs	r3, r3, #16
   a08b4:	837b      	strh	r3, [r7, #26]
				res_temp_lookuptable(cal_data);
   a08b6:	8b7b      	ldrh	r3, [r7, #26]
   a08b8:	4618      	mov	r0, r3
   a08ba:	4b39      	ldr	r3, [pc, #228]	; (a09a0 <Cl_Rinse_SendRinseStateData+0x428>)
   a08bc:	4798      	blx	r3
			//	tmp3 =	(tmp3*5 + res_temp_value)/6;
				uint16_t temp = res_temp_value/10;
   a08be:	4b39      	ldr	r3, [pc, #228]	; (a09a4 <Cl_Rinse_SendRinseStateData+0x42c>)
   a08c0:	681a      	ldr	r2, [r3, #0]
   a08c2:	4b39      	ldr	r3, [pc, #228]	; (a09a8 <Cl_Rinse_SendRinseStateData+0x430>)
   a08c4:	4939      	ldr	r1, [pc, #228]	; (a09ac <Cl_Rinse_SendRinseStateData+0x434>)
   a08c6:	4610      	mov	r0, r2
   a08c8:	4798      	blx	r3
   a08ca:	4603      	mov	r3, r0
   a08cc:	461a      	mov	r2, r3
   a08ce:	4b38      	ldr	r3, [pc, #224]	; (a09b0 <Cl_Rinse_SendRinseStateData+0x438>)
   a08d0:	4610      	mov	r0, r2
   a08d2:	4798      	blx	r3
   a08d4:	4603      	mov	r3, r0
   a08d6:	833b      	strh	r3, [r7, #24]
				temp = temp - 31 + 14;										// sensor offset			
   a08d8:	8b3b      	ldrh	r3, [r7, #24]
   a08da:	3b11      	subs	r3, #17
   a08dc:	833b      	strh	r3, [r7, #24]
				tmp3 =(tmp3*5 + temp)/6;
   a08de:	4b35      	ldr	r3, [pc, #212]	; (a09b4 <Cl_Rinse_SendRinseStateData+0x43c>)
   a08e0:	681a      	ldr	r2, [r3, #0]
   a08e2:	4b35      	ldr	r3, [pc, #212]	; (a09b8 <Cl_Rinse_SendRinseStateData+0x440>)
   a08e4:	4935      	ldr	r1, [pc, #212]	; (a09bc <Cl_Rinse_SendRinseStateData+0x444>)
   a08e6:	4610      	mov	r0, r2
   a08e8:	4798      	blx	r3
   a08ea:	4603      	mov	r3, r0
   a08ec:	461c      	mov	r4, r3
   a08ee:	8b3a      	ldrh	r2, [r7, #24]
   a08f0:	4b33      	ldr	r3, [pc, #204]	; (a09c0 <Cl_Rinse_SendRinseStateData+0x448>)
   a08f2:	4610      	mov	r0, r2
   a08f4:	4798      	blx	r3
   a08f6:	4602      	mov	r2, r0
   a08f8:	4b32      	ldr	r3, [pc, #200]	; (a09c4 <Cl_Rinse_SendRinseStateData+0x44c>)
   a08fa:	4611      	mov	r1, r2
   a08fc:	4620      	mov	r0, r4
   a08fe:	4798      	blx	r3
   a0900:	4603      	mov	r3, r0
   a0902:	461a      	mov	r2, r3
   a0904:	4b28      	ldr	r3, [pc, #160]	; (a09a8 <Cl_Rinse_SendRinseStateData+0x430>)
   a0906:	4930      	ldr	r1, [pc, #192]	; (a09c8 <Cl_Rinse_SendRinseStateData+0x450>)
   a0908:	4610      	mov	r0, r2
   a090a:	4798      	blx	r3
   a090c:	4603      	mov	r3, r0
   a090e:	461a      	mov	r2, r3
   a0910:	4b28      	ldr	r3, [pc, #160]	; (a09b4 <Cl_Rinse_SendRinseStateData+0x43c>)
   a0912:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a0914:	4b27      	ldr	r3, [pc, #156]	; (a09b4 <Cl_Rinse_SendRinseStateData+0x43c>)
   a0916:	681a      	ldr	r2, [r3, #0]
   a0918:	4b25      	ldr	r3, [pc, #148]	; (a09b0 <Cl_Rinse_SendRinseStateData+0x438>)
   a091a:	4610      	mov	r0, r2
   a091c:	4798      	blx	r3
   a091e:	4603      	mov	r3, r0
   a0920:	b29b      	uxth	r3, r3
   a0922:	617b      	str	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   a0924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0928:	1c5a      	adds	r2, r3, #1
   a092a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a092e:	7d3a      	ldrb	r2, [r7, #20]
   a0930:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0934:	440b      	add	r3, r1
   a0936:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[1];
   a093a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a093e:	1c5a      	adds	r2, r3, #1
   a0940:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0944:	7d7a      	ldrb	r2, [r7, #21]
   a0946:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a094a:	440b      	add	r3, r1
   a094c:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[2];
   a0950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a0954:	1c5a      	adds	r2, r3, #1
   a0956:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a095a:	7dba      	ldrb	r2, [r7, #22]
   a095c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0960:	440b      	add	r3, r1
   a0962:	f803 2c24 	strb.w	r2, [r3, #-36]
				dataarray[count++] = data.bytedata[3];
   a0966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a096a:	1c5a      	adds	r2, r3, #1
   a096c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a0970:	7dfa      	ldrb	r2, [r7, #23]
   a0972:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a0976:	440b      	add	r3, r1
   a0978:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a097c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a0980:	1d3b      	adds	r3, r7, #4
   a0982:	4619      	mov	r1, r3
   a0984:	202a      	movs	r0, #42	; 0x2a
   a0986:	4b11      	ldr	r3, [pc, #68]	; (a09cc <Cl_Rinse_SendRinseStateData+0x454>)
   a0988:	4798      	blx	r3
   a098a:	4603      	mov	r3, r0
   a098c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   a0990:	e000      	b.n	a0994 <Cl_Rinse_SendRinseStateData+0x41c>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   a0992:	bf00      	nop
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
		

}
   a0994:	4618      	mov	r0, r3
   a0996:	372c      	adds	r7, #44	; 0x2c
   a0998:	46bd      	mov	sp, r7
   a099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a099c:	0008d499 	.word	0x0008d499
   a09a0:	0008e659 	.word	0x0008e659
   a09a4:	200725ec 	.word	0x200725ec
   a09a8:	000a27f5 	.word	0x000a27f5
   a09ac:	41200000 	.word	0x41200000
   a09b0:	000a2a65 	.word	0x000a2a65
   a09b4:	20072830 	.word	0x20072830
   a09b8:	000a268d 	.word	0x000a268d
   a09bc:	40a00000 	.word	0x40a00000
   a09c0:	000a25e5 	.word	0x000a25e5
   a09c4:	000a247d 	.word	0x000a247d
   a09c8:	40c00000 	.word	0x40c00000
   a09cc:	00098601 	.word	0x00098601

000a09d0 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a09d0:	b590      	push	{r4, r7, lr}
   a09d2:	b089      	sub	sp, #36	; 0x24
   a09d4:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a09d6:	2300      	movs	r3, #0
   a09d8:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a09da:	234a      	movs	r3, #74	; 0x4a
   a09dc:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a09de:	2300      	movs	r3, #0
   a09e0:	60fb      	str	r3, [r7, #12]
				
				Cl_Uint8Type data = 0;
   a09e2:	2300      	movs	r3, #0
   a09e4:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a09e6:	2300      	movs	r3, #0
   a09e8:	817b      	strh	r3, [r7, #10]
   a09ea:	2300      	movs	r3, #0
   a09ec:	813b      	strh	r3, [r7, #8]
   a09ee:	2300      	movs	r3, #0
   a09f0:	80fb      	strh	r3, [r7, #6]
   a09f2:	2300      	movs	r3, #0
   a09f4:	80bb      	strh	r3, [r7, #4]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a09f6:	2301      	movs	r3, #1
   a09f8:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();
				SetHeaterState(CL_HEATER_STATE_OFF);
   a09fa:	2004      	movs	r0, #4
   a09fc:	4bb3      	ldr	r3, [pc, #716]	; (a0ccc <Cl_Rinse_StartRinse+0x2fc>)
   a09fe:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a0a00:	2001      	movs	r0, #1
   a0a02:	4bb3      	ldr	r3, [pc, #716]	; (a0cd0 <Cl_Rinse_StartRinse+0x300>)
   a0a04:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a0a06:	f107 030a 	add.w	r3, r7, #10
   a0a0a:	4619      	mov	r1, r3
   a0a0c:	2020      	movs	r0, #32
   a0a0e:	4bb1      	ldr	r3, [pc, #708]	; (a0cd4 <Cl_Rinse_StartRinse+0x304>)
   a0a10:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a0a12:	f107 0308 	add.w	r3, r7, #8
   a0a16:	4619      	mov	r1, r3
   a0a18:	2021      	movs	r0, #33	; 0x21
   a0a1a:	4bae      	ldr	r3, [pc, #696]	; (a0cd4 <Cl_Rinse_StartRinse+0x304>)
   a0a1c:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a0a1e:	1dbb      	adds	r3, r7, #6
   a0a20:	4619      	mov	r1, r3
   a0a22:	2003      	movs	r0, #3
   a0a24:	4bab      	ldr	r3, [pc, #684]	; (a0cd4 <Cl_Rinse_StartRinse+0x304>)
   a0a26:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a0a28:	1d3b      	adds	r3, r7, #4
   a0a2a:	4619      	mov	r1, r3
   a0a2c:	2004      	movs	r0, #4
   a0a2e:	4ba9      	ldr	r3, [pc, #676]	; (a0cd4 <Cl_Rinse_StartRinse+0x304>)
   a0a30:	4798      	blx	r3
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )
   a0a32:	897b      	ldrh	r3, [r7, #10]
   a0a34:	2b00      	cmp	r3, #0
   a0a36:	d104      	bne.n	a0a42 <Cl_Rinse_StartRinse+0x72>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a0a38:	2029      	movs	r0, #41	; 0x29
   a0a3a:	4ba7      	ldr	r3, [pc, #668]	; (a0cd8 <Cl_Rinse_StartRinse+0x308>)
   a0a3c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a0a3e:	2300      	movs	r3, #0
   a0a40:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a0a42:	893b      	ldrh	r3, [r7, #8]
   a0a44:	2b00      	cmp	r3, #0
   a0a46:	d104      	bne.n	a0a52 <Cl_Rinse_StartRinse+0x82>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a0a48:	202b      	movs	r0, #43	; 0x2b
   a0a4a:	4ba3      	ldr	r3, [pc, #652]	; (a0cd8 <Cl_Rinse_StartRinse+0x308>)
   a0a4c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a0a4e:	2300      	movs	r3, #0
   a0a50:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )
   a0a52:	88fb      	ldrh	r3, [r7, #6]
   a0a54:	2b01      	cmp	r3, #1
   a0a56:	d104      	bne.n	a0a62 <Cl_Rinse_StartRinse+0x92>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a0a58:	2003      	movs	r0, #3
   a0a5a:	4b9f      	ldr	r3, [pc, #636]	; (a0cd8 <Cl_Rinse_StartRinse+0x308>)
   a0a5c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a0a5e:	2300      	movs	r3, #0
   a0a60:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER1OPEN )
   a0a62:	88bb      	ldrh	r3, [r7, #4]
   a0a64:	2b01      	cmp	r3, #1
   a0a66:	d104      	bne.n	a0a72 <Cl_Rinse_StartRinse+0xa2>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a0a68:	2004      	movs	r0, #4
   a0a6a:	4b9b      	ldr	r3, [pc, #620]	; (a0cd8 <Cl_Rinse_StartRinse+0x308>)
   a0a6c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a0a6e:	2300      	movs	r3, #0
   a0a70:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a0a72:	7dfb      	ldrb	r3, [r7, #23]
   a0a74:	f083 0301 	eor.w	r3, r3, #1
   a0a78:	b2db      	uxtb	r3, r3
   a0a7a:	2b00      	cmp	r3, #0
   a0a7c:	d001      	beq.n	a0a82 <Cl_Rinse_StartRinse+0xb2>
				 {
					 return CL_REJECTED;
   a0a7e:	2303      	movs	r3, #3
   a0a80:	e11f      	b.n	a0cc2 <Cl_Rinse_StartRinse+0x2f2>
				 }
				 
				sv_cntrl_resetgreenalarm();
   a0a82:	4b96      	ldr	r3, [pc, #600]	; (a0cdc <Cl_Rinse_StartRinse+0x30c>)
   a0a84:	4798      	blx	r3
				Cl_RinseFlowOn();
   a0a86:	4b96      	ldr	r3, [pc, #600]	; (a0ce0 <Cl_Rinse_StartRinse+0x310>)
   a0a88:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a0a8a:	2002      	movs	r0, #2
   a0a8c:	4b95      	ldr	r3, [pc, #596]	; (a0ce4 <Cl_Rinse_StartRinse+0x314>)
   a0a8e:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a0a90:	2003      	movs	r0, #3
   a0a92:	4b94      	ldr	r3, [pc, #592]	; (a0ce4 <Cl_Rinse_StartRinse+0x314>)
   a0a94:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,800);   // 900
   a0a96:	f44f 7148 	mov.w	r1, #800	; 0x320
   a0a9a:	2002      	movs	r0, #2
   a0a9c:	4b92      	ldr	r3, [pc, #584]	; (a0ce8 <Cl_Rinse_StartRinse+0x318>)
   a0a9e:	4798      	blx	r3
   a0aa0:	4603      	mov	r3, r0
   a0aa2:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a0aa4:	f44f 7116 	mov.w	r1, #600	; 0x258
   a0aa8:	2001      	movs	r0, #1
   a0aaa:	4b8f      	ldr	r3, [pc, #572]	; (a0ce8 <Cl_Rinse_StartRinse+0x318>)
   a0aac:	4798      	blx	r3
   a0aae:	4603      	mov	r3, r0
   a0ab0:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a0ab2:	2001      	movs	r0, #1
   a0ab4:	4b8d      	ldr	r3, [pc, #564]	; (a0cec <Cl_Rinse_StartRinse+0x31c>)
   a0ab6:	4798      	blx	r3
   a0ab8:	4603      	mov	r3, r0
   a0aba:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a0abc:	2002      	movs	r0, #2
   a0abe:	4b8b      	ldr	r3, [pc, #556]	; (a0cec <Cl_Rinse_StartRinse+0x31c>)
   a0ac0:	4798      	blx	r3
   a0ac2:	4603      	mov	r3, r0
   a0ac4:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a0ac6:	2300      	movs	r3, #0
   a0ac8:	827b      	strh	r3, [r7, #18]
				potvalue = (650 * 1024)/10000;                                 // 600
   a0aca:	2342      	movs	r3, #66	; 0x42
   a0acc:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a0ace:	8a7b      	ldrh	r3, [r7, #18]
   a0ad0:	4618      	mov	r0, r3
   a0ad2:	4b87      	ldr	r3, [pc, #540]	; (a0cf0 <Cl_Rinse_StartRinse+0x320>)
   a0ad4:	4798      	blx	r3
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,4000);
   a0ad6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   a0ada:	2001      	movs	r0, #1
   a0adc:	4b85      	ldr	r3, [pc, #532]	; (a0cf4 <Cl_Rinse_StartRinse+0x324>)
   a0ade:	4798      	blx	r3
				cl_wait(100);
   a0ae0:	2064      	movs	r0, #100	; 0x64
   a0ae2:	4b85      	ldr	r3, [pc, #532]	; (a0cf8 <Cl_Rinse_StartRinse+0x328>)
   a0ae4:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_START,0);
   a0ae6:	2100      	movs	r1, #0
   a0ae8:	2002      	movs	r0, #2
   a0aea:	4b82      	ldr	r3, [pc, #520]	; (a0cf4 <Cl_Rinse_StartRinse+0x324>)
   a0aec:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   a0aee:	4b83      	ldr	r3, [pc, #524]	; (a0cfc <Cl_Rinse_StartRinse+0x32c>)
   a0af0:	4798      	blx	r3
				cl_wait(100);
   a0af2:	2064      	movs	r0, #100	; 0x64
   a0af4:	4b80      	ldr	r3, [pc, #512]	; (a0cf8 <Cl_Rinse_StartRinse+0x328>)
   a0af6:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   a0af8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   a0afc:	2001      	movs	r0, #1
   a0afe:	4b7d      	ldr	r3, [pc, #500]	; (a0cf4 <Cl_Rinse_StartRinse+0x324>)
   a0b00:	4798      	blx	r3
				cl_wait(100);
   a0b02:	2064      	movs	r0, #100	; 0x64
   a0b04:	4b7c      	ldr	r3, [pc, #496]	; (a0cf8 <Cl_Rinse_StartRinse+0x328>)
   a0b06:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   a0b08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a0b0c:	2001      	movs	r0, #1
   a0b0e:	4b79      	ldr	r3, [pc, #484]	; (a0cf4 <Cl_Rinse_StartRinse+0x324>)
   a0b10:	4798      	blx	r3
				cl_wait(100);
   a0b12:	2064      	movs	r0, #100	; 0x64
   a0b14:	4b78      	ldr	r3, [pc, #480]	; (a0cf8 <Cl_Rinse_StartRinse+0x328>)
   a0b16:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   a0b18:	2196      	movs	r1, #150	; 0x96
   a0b1a:	2001      	movs	r0, #1
   a0b1c:	4b75      	ldr	r3, [pc, #468]	; (a0cf4 <Cl_Rinse_StartRinse+0x324>)
   a0b1e:	4798      	blx	r3
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a0b20:	2000      	movs	r0, #0
   a0b22:	4b77      	ldr	r3, [pc, #476]	; (a0d00 <Cl_Rinse_StartRinse+0x330>)
   a0b24:	4798      	blx	r3
   a0b26:	4603      	mov	r3, r0
   a0b28:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a0b2a:	2004      	movs	r0, #4
   a0b2c:	4b75      	ldr	r3, [pc, #468]	; (a0d04 <Cl_Rinse_StartRinse+0x334>)
   a0b2e:	4798      	blx	r3
   a0b30:	4603      	mov	r3, r0
   a0b32:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill();  
   a0b34:	4b74      	ldr	r3, [pc, #464]	; (a0d08 <Cl_Rinse_StartRinse+0x338>)
   a0b36:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a0b38:	7dbb      	ldrb	r3, [r7, #22]
   a0b3a:	2b00      	cmp	r3, #0
   a0b3c:	f040 80c0 	bne.w	a0cc0 <Cl_Rinse_StartRinse+0x2f0>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a0b40:	4b72      	ldr	r3, [pc, #456]	; (a0d0c <Cl_Rinse_StartRinse+0x33c>)
   a0b42:	2200      	movs	r2, #0
   a0b44:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a0b46:	4b72      	ldr	r3, [pc, #456]	; (a0d10 <Cl_Rinse_StartRinse+0x340>)
   a0b48:	2200      	movs	r2, #0
   a0b4a:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a0b4c:	4b71      	ldr	r3, [pc, #452]	; (a0d14 <Cl_Rinse_StartRinse+0x344>)
   a0b4e:	2200      	movs	r2, #0
   a0b50:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a0b52:	4b71      	ldr	r3, [pc, #452]	; (a0d18 <Cl_Rinse_StartRinse+0x348>)
   a0b54:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a0b56:	2001      	movs	r0, #1
   a0b58:	4b5d      	ldr	r3, [pc, #372]	; (a0cd0 <Cl_Rinse_StartRinse+0x300>)
   a0b5a:	4798      	blx	r3
   a0b5c:	4603      	mov	r3, r0
   a0b5e:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a0b60:	2300      	movs	r3, #0
   a0b62:	9300      	str	r3, [sp, #0]
   a0b64:	f04f 0300 	mov.w	r3, #0
   a0b68:	f04f 0200 	mov.w	r2, #0
   a0b6c:	2101      	movs	r1, #1
   a0b6e:	2001      	movs	r0, #1
   a0b70:	4c6a      	ldr	r4, [pc, #424]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0b72:	47a0      	blx	r4
   a0b74:	4603      	mov	r3, r0
   a0b76:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a0b78:	2300      	movs	r3, #0
   a0b7a:	9300      	str	r3, [sp, #0]
   a0b7c:	f04f 0300 	mov.w	r3, #0
   a0b80:	f04f 0200 	mov.w	r2, #0
   a0b84:	2100      	movs	r1, #0
   a0b86:	2029      	movs	r0, #41	; 0x29
   a0b88:	4c64      	ldr	r4, [pc, #400]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0b8a:	47a0      	blx	r4
   a0b8c:	4603      	mov	r3, r0
   a0b8e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a0b90:	2300      	movs	r3, #0
   a0b92:	9300      	str	r3, [sp, #0]
   a0b94:	f04f 0300 	mov.w	r3, #0
   a0b98:	f04f 0200 	mov.w	r2, #0
   a0b9c:	2100      	movs	r1, #0
   a0b9e:	202b      	movs	r0, #43	; 0x2b
   a0ba0:	4c5e      	ldr	r4, [pc, #376]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0ba2:	47a0      	blx	r4
   a0ba4:	4603      	mov	r3, r0
   a0ba6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a0ba8:	2300      	movs	r3, #0
   a0baa:	9300      	str	r3, [sp, #0]
   a0bac:	f04f 0300 	mov.w	r3, #0
   a0bb0:	f04f 0200 	mov.w	r2, #0
   a0bb4:	2101      	movs	r1, #1
   a0bb6:	2003      	movs	r0, #3
   a0bb8:	4c58      	ldr	r4, [pc, #352]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0bba:	47a0      	blx	r4
   a0bbc:	4603      	mov	r3, r0
   a0bbe:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a0bc0:	2300      	movs	r3, #0
   a0bc2:	9300      	str	r3, [sp, #0]
   a0bc4:	f04f 0300 	mov.w	r3, #0
   a0bc8:	f04f 0200 	mov.w	r2, #0
   a0bcc:	2101      	movs	r1, #1
   a0bce:	2004      	movs	r0, #4
   a0bd0:	4c52      	ldr	r4, [pc, #328]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0bd2:	47a0      	blx	r4
   a0bd4:	4603      	mov	r3, r0
   a0bd6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a0bd8:	2300      	movs	r3, #0
   a0bda:	9300      	str	r3, [sp, #0]
   a0bdc:	f04f 0300 	mov.w	r3, #0
   a0be0:	f04f 0200 	mov.w	r2, #0
   a0be4:	2100      	movs	r1, #0
   a0be6:	203d      	movs	r0, #61	; 0x3d
   a0be8:	4c4c      	ldr	r4, [pc, #304]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0bea:	47a0      	blx	r4
   a0bec:	4603      	mov	r3, r0
   a0bee:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a0bf0:	2300      	movs	r3, #0
   a0bf2:	9300      	str	r3, [sp, #0]
   a0bf4:	f04f 0300 	mov.w	r3, #0
   a0bf8:	f04f 0200 	mov.w	r2, #0
   a0bfc:	2101      	movs	r1, #1
   a0bfe:	203e      	movs	r0, #62	; 0x3e
   a0c00:	4c46      	ldr	r4, [pc, #280]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0c02:	47a0      	blx	r4
   a0c04:	4603      	mov	r3, r0
   a0c06:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a0c08:	2300      	movs	r3, #0
   a0c0a:	9300      	str	r3, [sp, #0]
   a0c0c:	f04f 0300 	mov.w	r3, #0
   a0c10:	f04f 0200 	mov.w	r2, #0
   a0c14:	2100      	movs	r1, #0
   a0c16:	200d      	movs	r0, #13
   a0c18:	4c40      	ldr	r4, [pc, #256]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0c1a:	47a0      	blx	r4
   a0c1c:	4603      	mov	r3, r0
   a0c1e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a0c20:	2300      	movs	r3, #0
   a0c22:	9300      	str	r3, [sp, #0]
   a0c24:	f04f 0300 	mov.w	r3, #0
   a0c28:	f04f 0200 	mov.w	r2, #0
   a0c2c:	2100      	movs	r1, #0
   a0c2e:	200c      	movs	r0, #12
   a0c30:	4c3a      	ldr	r4, [pc, #232]	; (a0d1c <Cl_Rinse_StartRinse+0x34c>)
   a0c32:	47a0      	blx	r4
   a0c34:	4603      	mov	r3, r0
   a0c36:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a0c38:	2101      	movs	r1, #1
   a0c3a:	203d      	movs	r0, #61	; 0x3d
   a0c3c:	4b38      	ldr	r3, [pc, #224]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c3e:	4798      	blx	r3
   a0c40:	4603      	mov	r3, r0
   a0c42:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a0c44:	2101      	movs	r1, #1
   a0c46:	203e      	movs	r0, #62	; 0x3e
   a0c48:	4b35      	ldr	r3, [pc, #212]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c4a:	4798      	blx	r3
   a0c4c:	4603      	mov	r3, r0
   a0c4e:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   a0c50:	2101      	movs	r1, #1
   a0c52:	200c      	movs	r0, #12
   a0c54:	4b32      	ldr	r3, [pc, #200]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c56:	4798      	blx	r3
   a0c58:	4603      	mov	r3, r0
   a0c5a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a0c5c:	2101      	movs	r1, #1
   a0c5e:	200d      	movs	r0, #13
   a0c60:	4b2f      	ldr	r3, [pc, #188]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c62:	4798      	blx	r3
   a0c64:	4603      	mov	r3, r0
   a0c66:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a0c68:	2101      	movs	r1, #1
   a0c6a:	200e      	movs	r0, #14
   a0c6c:	4b2c      	ldr	r3, [pc, #176]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c6e:	4798      	blx	r3
   a0c70:	4603      	mov	r3, r0
   a0c72:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   a0c74:	2101      	movs	r1, #1
   a0c76:	2029      	movs	r0, #41	; 0x29
   a0c78:	4b29      	ldr	r3, [pc, #164]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c7a:	4798      	blx	r3
   a0c7c:	4603      	mov	r3, r0
   a0c7e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   a0c80:	2101      	movs	r1, #1
   a0c82:	202b      	movs	r0, #43	; 0x2b
   a0c84:	4b26      	ldr	r3, [pc, #152]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c86:	4798      	blx	r3
   a0c88:	4603      	mov	r3, r0
   a0c8a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a0c8c:	2101      	movs	r1, #1
   a0c8e:	2003      	movs	r0, #3
   a0c90:	4b23      	ldr	r3, [pc, #140]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c92:	4798      	blx	r3
   a0c94:	4603      	mov	r3, r0
   a0c96:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a0c98:	2101      	movs	r1, #1
   a0c9a:	2004      	movs	r0, #4
   a0c9c:	4b20      	ldr	r3, [pc, #128]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0c9e:	4798      	blx	r3
   a0ca0:	4603      	mov	r3, r0
   a0ca2:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a0ca4:	4b1f      	ldr	r3, [pc, #124]	; (a0d24 <Cl_Rinse_StartRinse+0x354>)
   a0ca6:	781b      	ldrb	r3, [r3, #0]
   a0ca8:	2b00      	cmp	r3, #0
   a0caa:	d005      	beq.n	a0cb8 <Cl_Rinse_StartRinse+0x2e8>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a0cac:	2101      	movs	r1, #1
   a0cae:	203c      	movs	r0, #60	; 0x3c
   a0cb0:	4b1b      	ldr	r3, [pc, #108]	; (a0d20 <Cl_Rinse_StartRinse+0x350>)
   a0cb2:	4798      	blx	r3
   a0cb4:	4603      	mov	r3, r0
   a0cb6:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a0cb8:	4b1b      	ldr	r3, [pc, #108]	; (a0d28 <Cl_Rinse_StartRinse+0x358>)
   a0cba:	4798      	blx	r3
   a0cbc:	4603      	mov	r3, r0
   a0cbe:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a0cc0:	2300      	movs	r3, #0
}
   a0cc2:	4618      	mov	r0, r3
   a0cc4:	371c      	adds	r7, #28
   a0cc6:	46bd      	mov	sp, r7
   a0cc8:	bd90      	pop	{r4, r7, pc}
   a0cca:	bf00      	nop
   a0ccc:	00089749 	.word	0x00089749
   a0cd0:	0009211d 	.word	0x0009211d
   a0cd4:	0008d499 	.word	0x0008d499
   a0cd8:	000a049d 	.word	0x000a049d
   a0cdc:	00096b4d 	.word	0x00096b4d
   a0ce0:	000a0501 	.word	0x000a0501
   a0ce4:	0009687d 	.word	0x0009687d
   a0ce8:	000968f5 	.word	0x000968f5
   a0cec:	000967dd 	.word	0x000967dd
   a0cf0:	00096d29 	.word	0x00096d29
   a0cf4:	00092e89 	.word	0x00092e89
   a0cf8:	00091b9d 	.word	0x00091b9d
   a0cfc:	00092c4d 	.word	0x00092c4d
   a0d00:	0009205d 	.word	0x0009205d
   a0d04:	00083325 	.word	0x00083325
   a0d08:	00096cd9 	.word	0x00096cd9
   a0d0c:	20072804 	.word	0x20072804
   a0d10:	20072810 	.word	0x20072810
   a0d14:	20072818 	.word	0x20072818
   a0d18:	000969c9 	.word	0x000969c9
   a0d1c:	00082ea1 	.word	0x00082ea1
   a0d20:	00082efd 	.word	0x00082efd
   a0d24:	200709b2 	.word	0x200709b2
   a0d28:	000a0071 	.word	0x000a0071

000a0d2c <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a0d2c:	b580      	push	{r7, lr}
   a0d2e:	b082      	sub	sp, #8
   a0d30:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a0d32:	2300      	movs	r3, #0
   a0d34:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a0d36:	4b1b      	ldr	r3, [pc, #108]	; (a0da4 <Cl_Rinse_StopRinse+0x78>)
   a0d38:	781b      	ldrb	r3, [r3, #0]
   a0d3a:	2b00      	cmp	r3, #0
   a0d3c:	d02c      	beq.n	a0d98 <Cl_Rinse_StopRinse+0x6c>
   a0d3e:	4b19      	ldr	r3, [pc, #100]	; (a0da4 <Cl_Rinse_StopRinse+0x78>)
   a0d40:	781b      	ldrb	r3, [r3, #0]
   a0d42:	2b08      	cmp	r3, #8
   a0d44:	d028      	beq.n	a0d98 <Cl_Rinse_StopRinse+0x6c>
   a0d46:	4b17      	ldr	r3, [pc, #92]	; (a0da4 <Cl_Rinse_StopRinse+0x78>)
   a0d48:	781b      	ldrb	r3, [r3, #0]
   a0d4a:	2b06      	cmp	r3, #6
   a0d4c:	d024      	beq.n	a0d98 <Cl_Rinse_StopRinse+0x6c>
				{
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a0d4e:	4b16      	ldr	r3, [pc, #88]	; (a0da8 <Cl_Rinse_StopRinse+0x7c>)
   a0d50:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a0d52:	4b16      	ldr	r3, [pc, #88]	; (a0dac <Cl_Rinse_StopRinse+0x80>)
   a0d54:	2200      	movs	r2, #0
   a0d56:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a0d58:	4b15      	ldr	r3, [pc, #84]	; (a0db0 <Cl_Rinse_StopRinse+0x84>)
   a0d5a:	2200      	movs	r2, #0
   a0d5c:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a0d5e:	4b15      	ldr	r3, [pc, #84]	; (a0db4 <Cl_Rinse_StopRinse+0x88>)
   a0d60:	2200      	movs	r2, #0
   a0d62:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a0d64:	4b14      	ldr	r3, [pc, #80]	; (a0db8 <Cl_Rinse_StopRinse+0x8c>)
   a0d66:	2200      	movs	r2, #0
   a0d68:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a0d6a:	2005      	movs	r0, #5
   a0d6c:	4b13      	ldr	r3, [pc, #76]	; (a0dbc <Cl_Rinse_StopRinse+0x90>)
   a0d6e:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a0d70:	200d      	movs	r0, #13
   a0d72:	4b12      	ldr	r3, [pc, #72]	; (a0dbc <Cl_Rinse_StopRinse+0x90>)
   a0d74:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a0d76:	2100      	movs	r1, #0
   a0d78:	2004      	movs	r0, #4
   a0d7a:	4b11      	ldr	r3, [pc, #68]	; (a0dc0 <Cl_Rinse_StopRinse+0x94>)
   a0d7c:	4798      	blx	r3
				sv_prop_stopmixing();
   a0d7e:	4b11      	ldr	r3, [pc, #68]	; (a0dc4 <Cl_Rinse_StopRinse+0x98>)
   a0d80:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a0d82:	4b08      	ldr	r3, [pc, #32]	; (a0da4 <Cl_Rinse_StopRinse+0x78>)
   a0d84:	2200      	movs	r2, #0
   a0d86:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a0d88:	1dbb      	adds	r3, r7, #6
   a0d8a:	2200      	movs	r2, #0
   a0d8c:	4619      	mov	r1, r3
   a0d8e:	2022      	movs	r0, #34	; 0x22
   a0d90:	4b0d      	ldr	r3, [pc, #52]	; (a0dc8 <Cl_Rinse_StopRinse+0x9c>)
   a0d92:	4798      	blx	r3
   a0d94:	4603      	mov	r3, r0
   a0d96:	71fb      	strb	r3, [r7, #7]
				
					
				}
			
				return Cl_rinseretcode;
   a0d98:	79fb      	ldrb	r3, [r7, #7]
}
   a0d9a:	4618      	mov	r0, r3
   a0d9c:	3708      	adds	r7, #8
   a0d9e:	46bd      	mov	sp, r7
   a0da0:	bd80      	pop	{r7, pc}
   a0da2:	bf00      	nop
   a0da4:	200727fe 	.word	0x200727fe
   a0da8:	000969c9 	.word	0x000969c9
   a0dac:	20072800 	.word	0x20072800
   a0db0:	20072804 	.word	0x20072804
   a0db4:	20072810 	.word	0x20072810
   a0db8:	20072814 	.word	0x20072814
   a0dbc:	00083325 	.word	0x00083325
   a0dc0:	00092e89 	.word	0x00092e89
   a0dc4:	00096c75 	.word	0x00096c75
   a0dc8:	00098601 	.word	0x00098601

000a0dcc <Cl_Standby_Controller>:
 Cl_BoolType Cl_StbRinseOpenFillTimeOut = false;
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a0dcc:	b580      	push	{r7, lr}
   a0dce:	b088      	sub	sp, #32
   a0dd0:	af00      	add	r7, sp, #0
   a0dd2:	4603      	mov	r3, r0
   a0dd4:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a0dd6:	234a      	movs	r3, #74	; 0x4a
   a0dd8:	77fb      	strb	r3, [r7, #31]
		Cl_Uint8Type data =0;
   a0dda:	2300      	movs	r3, #0
   a0ddc:	773b      	strb	r3, [r7, #28]
		ClStbyAlarmIdType ClstbyAlarmId;
		
		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a0dde:	f107 021d 	add.w	r2, r7, #29
   a0de2:	79fb      	ldrb	r3, [r7, #7]
   a0de4:	4611      	mov	r1, r2
   a0de6:	4618      	mov	r0, r3
   a0de8:	4bbd      	ldr	r3, [pc, #756]	; (a10e0 <Cl_Standby_Controller+0x314>)
   a0dea:	4798      	blx	r3
   a0dec:	4603      	mov	r3, r0
   a0dee:	77bb      	strb	r3, [r7, #30]
		switch(cl_stbystate)
   a0df0:	4bbc      	ldr	r3, [pc, #752]	; (a10e4 <Cl_Standby_Controller+0x318>)
   a0df2:	781b      	ldrb	r3, [r3, #0]
   a0df4:	2b0a      	cmp	r3, #10
   a0df6:	f200 83ed 	bhi.w	a15d4 <Cl_Standby_Controller+0x808>
   a0dfa:	a201      	add	r2, pc, #4	; (adr r2, a0e00 <Cl_Standby_Controller+0x34>)
   a0dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0e00:	000a15d5 	.word	0x000a15d5
   a0e04:	000a0e2d 	.word	0x000a0e2d
   a0e08:	000a0ee5 	.word	0x000a0ee5
   a0e0c:	000a118b 	.word	0x000a118b
   a0e10:	000a12af 	.word	0x000a12af
   a0e14:	000a138d 	.word	0x000a138d
   a0e18:	000a143f 	.word	0x000a143f
   a0e1c:	000a14c5 	.word	0x000a14c5
   a0e20:	000a154d 	.word	0x000a154d
   a0e24:	000a15d5 	.word	0x000a15d5
   a0e28:	000a15d5 	.word	0x000a15d5
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a0e2c:	7f7b      	ldrb	r3, [r7, #29]
   a0e2e:	3b01      	subs	r3, #1
   a0e30:	2b0f      	cmp	r3, #15
   a0e32:	d853      	bhi.n	a0edc <Cl_Standby_Controller+0x110>
   a0e34:	a201      	add	r2, pc, #4	; (adr r2, a0e3c <Cl_Standby_Controller+0x70>)
   a0e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0e3a:	bf00      	nop
   a0e3c:	000a0e7d 	.word	0x000a0e7d
   a0e40:	000a0edd 	.word	0x000a0edd
   a0e44:	000a0edd 	.word	0x000a0edd
   a0e48:	000a0edd 	.word	0x000a0edd
   a0e4c:	000a0edd 	.word	0x000a0edd
   a0e50:	000a0edd 	.word	0x000a0edd
   a0e54:	000a0edd 	.word	0x000a0edd
   a0e58:	000a0edd 	.word	0x000a0edd
   a0e5c:	000a0edd 	.word	0x000a0edd
   a0e60:	000a0edd 	.word	0x000a0edd
   a0e64:	000a0edd 	.word	0x000a0edd
   a0e68:	000a0edd 	.word	0x000a0edd
   a0e6c:	000a0edd 	.word	0x000a0edd
   a0e70:	000a0e9d 	.word	0x000a0e9d
   a0e74:	000a0ea7 	.word	0x000a0ea7
   a0e78:	000a0eb1 	.word	0x000a0eb1
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a0e7c:	2316      	movs	r3, #22
   a0e7e:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a0e80:	2311      	movs	r3, #17
   a0e82:	763b      	strb	r3, [r7, #24]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a0e84:	230e      	movs	r3, #14
   a0e86:	767b      	strb	r3, [r7, #25]
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a0e88:	f107 0118 	add.w	r1, r7, #24
   a0e8c:	7ffb      	ldrb	r3, [r7, #31]
   a0e8e:	2202      	movs	r2, #2
   a0e90:	4618      	mov	r0, r3
   a0e92:	4b95      	ldr	r3, [pc, #596]	; (a10e8 <Cl_Standby_Controller+0x31c>)
   a0e94:	4798      	blx	r3
   a0e96:	4603      	mov	r3, r0
   a0e98:	77bb      	strb	r3, [r7, #30]
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a0e9a:	e022      	b.n	a0ee2 <Cl_Standby_Controller+0x116>
				case EVENT_STBY_SET_BLDPMP_ON:
					cl_bp_controller(CL_BP_EVENT_START,0);
   a0e9c:	2100      	movs	r1, #0
   a0e9e:	2002      	movs	r0, #2
   a0ea0:	4b92      	ldr	r3, [pc, #584]	; (a10ec <Cl_Standby_Controller+0x320>)
   a0ea2:	4798      	blx	r3
				break;
   a0ea4:	e01d      	b.n	a0ee2 <Cl_Standby_Controller+0x116>
				case EVENT_STBY_SET_BLDPMP_OFF:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a0ea6:	2100      	movs	r1, #0
   a0ea8:	2004      	movs	r0, #4
   a0eaa:	4b90      	ldr	r3, [pc, #576]	; (a10ec <Cl_Standby_Controller+0x320>)
   a0eac:	4798      	blx	r3
				break;
   a0eae:	e018      	b.n	a0ee2 <Cl_Standby_Controller+0x116>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0eb0:	4b8f      	ldr	r3, [pc, #572]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0eb2:	7e1b      	ldrb	r3, [r3, #24]
   a0eb4:	2b00      	cmp	r3, #0
   a0eb6:	d013      	beq.n	a0ee0 <Cl_Standby_Controller+0x114>
					{
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0eb8:	4b8d      	ldr	r3, [pc, #564]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0eba:	791b      	ldrb	r3, [r3, #4]
   a0ebc:	743b      	strb	r3, [r7, #16]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a0ebe:	4b8c      	ldr	r3, [pc, #560]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0ec0:	795b      	ldrb	r3, [r3, #5]
   a0ec2:	747b      	strb	r3, [r7, #17]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a0ec4:	4b8a      	ldr	r3, [pc, #552]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0ec6:	799b      	ldrb	r3, [r3, #6]
   a0ec8:	74bb      	strb	r3, [r7, #18]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a0eca:	4b89      	ldr	r3, [pc, #548]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0ecc:	79db      	ldrb	r3, [r3, #7]
   a0ece:	74fb      	strb	r3, [r7, #19]
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a0ed0:	8a3b      	ldrh	r3, [r7, #16]
   a0ed2:	4619      	mov	r1, r3
   a0ed4:	2001      	movs	r0, #1
   a0ed6:	4b85      	ldr	r3, [pc, #532]	; (a10ec <Cl_Standby_Controller+0x320>)
   a0ed8:	4798      	blx	r3
						
					}
				break;
   a0eda:	e001      	b.n	a0ee0 <Cl_Standby_Controller+0x114>
				default:
				break;	
   a0edc:	bf00      	nop
   a0ede:	e37a      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
						
					}
				break;
   a0ee0:	bf00      	nop
				default:
				break;	
				}


				break;
   a0ee2:	e378      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a0ee4:	7f7b      	ldrb	r3, [r7, #29]
   a0ee6:	3b01      	subs	r3, #1
   a0ee8:	2b0c      	cmp	r3, #12
   a0eea:	f200 8148 	bhi.w	a117e <Cl_Standby_Controller+0x3b2>
   a0eee:	a201      	add	r2, pc, #4	; (adr r2, a0ef4 <Cl_Standby_Controller+0x128>)
   a0ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0ef4:	000a113d 	.word	0x000a113d
   a0ef8:	000a117f 	.word	0x000a117f
   a0efc:	000a117f 	.word	0x000a117f
   a0f00:	000a117f 	.word	0x000a117f
   a0f04:	000a117f 	.word	0x000a117f
   a0f08:	000a115d 	.word	0x000a115d
   a0f0c:	000a1171 	.word	0x000a1171
   a0f10:	000a117f 	.word	0x000a117f
   a0f14:	000a1145 	.word	0x000a1145
   a0f18:	000a0f31 	.word	0x000a0f31
   a0f1c:	000a0fb9 	.word	0x000a0fb9
   a0f20:	000a0f29 	.word	0x000a0f29
   a0f24:	000a117f 	.word	0x000a117f
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a0f28:	4b6e      	ldr	r3, [pc, #440]	; (a10e4 <Cl_Standby_Controller+0x318>)
   a0f2a:	2201      	movs	r2, #1
   a0f2c:	701a      	strb	r2, [r3, #0]
					break;
   a0f2e:	e12b      	b.n	a1188 <Cl_Standby_Controller+0x3bc>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0f30:	4b6f      	ldr	r3, [pc, #444]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0f32:	7e1b      	ldrb	r3, [r3, #24]
   a0f34:	2b00      	cmp	r3, #0
   a0f36:	f000 8124 	beq.w	a1182 <Cl_Standby_Controller+0x3b6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a0f3a:	4b6d      	ldr	r3, [pc, #436]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0f3c:	791b      	ldrb	r3, [r3, #4]
   a0f3e:	2b01      	cmp	r3, #1
   a0f40:	d002      	beq.n	a0f48 <Cl_Standby_Controller+0x17c>
   a0f42:	2b21      	cmp	r3, #33	; 0x21
   a0f44:	d017      	beq.n	a0f76 <Cl_Standby_Controller+0x1aa>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a0f46:	e036      	b.n	a0fb6 <Cl_Standby_Controller+0x1ea>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a0f48:	2316      	movs	r3, #22
   a0f4a:	77fb      	strb	r3, [r7, #31]
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a0f4c:	2301      	movs	r3, #1
   a0f4e:	763b      	strb	r3, [r7, #24]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a0f50:	f107 0318 	add.w	r3, r7, #24
   a0f54:	3301      	adds	r3, #1
   a0f56:	4619      	mov	r1, r3
   a0f58:	2001      	movs	r0, #1
   a0f5a:	4b66      	ldr	r3, [pc, #408]	; (a10f4 <Cl_Standby_Controller+0x328>)
   a0f5c:	4798      	blx	r3
   a0f5e:	4603      	mov	r3, r0
   a0f60:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a0f62:	f107 0118 	add.w	r1, r7, #24
   a0f66:	7ffb      	ldrb	r3, [r7, #31]
   a0f68:	2202      	movs	r2, #2
   a0f6a:	4618      	mov	r0, r3
   a0f6c:	4b5e      	ldr	r3, [pc, #376]	; (a10e8 <Cl_Standby_Controller+0x31c>)
   a0f6e:	4798      	blx	r3
   a0f70:	4603      	mov	r3, r0
   a0f72:	77bb      	strb	r3, [r7, #30]
									//cl_wait(100);
							break;
   a0f74:	e01f      	b.n	a0fb6 <Cl_Standby_Controller+0x1ea>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a0f76:	2316      	movs	r3, #22
   a0f78:	77fb      	strb	r3, [r7, #31]
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a0f7a:	2323      	movs	r3, #35	; 0x23
   a0f7c:	763b      	strb	r3, [r7, #24]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a0f7e:	f107 0318 	add.w	r3, r7, #24
   a0f82:	3301      	adds	r3, #1
   a0f84:	4619      	mov	r1, r3
   a0f86:	2001      	movs	r0, #1
   a0f88:	4b5a      	ldr	r3, [pc, #360]	; (a10f4 <Cl_Standby_Controller+0x328>)
   a0f8a:	4798      	blx	r3
   a0f8c:	4603      	mov	r3, r0
   a0f8e:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a0f90:	f107 0318 	add.w	r3, r7, #24
   a0f94:	3301      	adds	r3, #1
   a0f96:	4619      	mov	r1, r3
   a0f98:	2028      	movs	r0, #40	; 0x28
   a0f9a:	4b56      	ldr	r3, [pc, #344]	; (a10f4 <Cl_Standby_Controller+0x328>)
   a0f9c:	4798      	blx	r3
   a0f9e:	4603      	mov	r3, r0
   a0fa0:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a0fa2:	f107 0118 	add.w	r1, r7, #24
   a0fa6:	7ffb      	ldrb	r3, [r7, #31]
   a0fa8:	2202      	movs	r2, #2
   a0faa:	4618      	mov	r0, r3
   a0fac:	4b4e      	ldr	r3, [pc, #312]	; (a10e8 <Cl_Standby_Controller+0x31c>)
   a0fae:	4798      	blx	r3
   a0fb0:	4603      	mov	r3, r0
   a0fb2:	77bb      	strb	r3, [r7, #30]

							break;
   a0fb4:	bf00      	nop
							break;
						}

					}
				}
				break;
   a0fb6:	e0e4      	b.n	a1182 <Cl_Standby_Controller+0x3b6>
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a0fb8:	4b4d      	ldr	r3, [pc, #308]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fba:	7e1b      	ldrb	r3, [r3, #24]
   a0fbc:	2b00      	cmp	r3, #0
   a0fbe:	f000 80e2 	beq.w	a1186 <Cl_Standby_Controller+0x3ba>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a0fc2:	4b4b      	ldr	r3, [pc, #300]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fc4:	795b      	ldrb	r3, [r3, #5]
   a0fc6:	733b      	strb	r3, [r7, #12]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a0fc8:	4b49      	ldr	r3, [pc, #292]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fca:	799b      	ldrb	r3, [r3, #6]
   a0fcc:	737b      	strb	r3, [r7, #13]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a0fce:	4b48      	ldr	r3, [pc, #288]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fd0:	79db      	ldrb	r3, [r3, #7]
   a0fd2:	73bb      	strb	r3, [r7, #14]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a0fd4:	4b46      	ldr	r3, [pc, #280]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fd6:	7a1b      	ldrb	r3, [r3, #8]
   a0fd8:	73fb      	strb	r3, [r7, #15]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a0fda:	4b45      	ldr	r3, [pc, #276]	; (a10f0 <Cl_Standby_Controller+0x324>)
   a0fdc:	791b      	ldrb	r3, [r3, #4]
   a0fde:	3b05      	subs	r3, #5
   a0fe0:	2b20      	cmp	r3, #32
   a0fe2:	f200 80a9 	bhi.w	a1138 <Cl_Standby_Controller+0x36c>
   a0fe6:	a201      	add	r2, pc, #4	; (adr r2, a0fec <Cl_Standby_Controller+0x220>)
   a0fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0fec:	000a1139 	.word	0x000a1139
   a0ff0:	000a1139 	.word	0x000a1139
   a0ff4:	000a1139 	.word	0x000a1139
   a0ff8:	000a1139 	.word	0x000a1139
   a0ffc:	000a1139 	.word	0x000a1139
   a1000:	000a1139 	.word	0x000a1139
   a1004:	000a1139 	.word	0x000a1139
   a1008:	000a1139 	.word	0x000a1139
   a100c:	000a1139 	.word	0x000a1139
   a1010:	000a1139 	.word	0x000a1139
   a1014:	000a1139 	.word	0x000a1139
   a1018:	000a1139 	.word	0x000a1139
   a101c:	000a1139 	.word	0x000a1139
   a1020:	000a1139 	.word	0x000a1139
   a1024:	000a1139 	.word	0x000a1139
   a1028:	000a1139 	.word	0x000a1139
   a102c:	000a1139 	.word	0x000a1139
   a1030:	000a1139 	.word	0x000a1139
   a1034:	000a1139 	.word	0x000a1139
   a1038:	000a1071 	.word	0x000a1071
   a103c:	000a1089 	.word	0x000a1089
   a1040:	000a10a1 	.word	0x000a10a1
   a1044:	000a10b1 	.word	0x000a10b1
   a1048:	000a10c1 	.word	0x000a10c1
   a104c:	000a10d1 	.word	0x000a10d1
   a1050:	000a1139 	.word	0x000a1139
   a1054:	000a1139 	.word	0x000a1139
   a1058:	000a1139 	.word	0x000a1139
   a105c:	000a1139 	.word	0x000a1139
   a1060:	000a1105 	.word	0x000a1105
   a1064:	000a110f 	.word	0x000a110f
   a1068:	000a1119 	.word	0x000a1119
   a106c:	000a1129 	.word	0x000a1129
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a1070:	68fb      	ldr	r3, [r7, #12]
   a1072:	4a21      	ldr	r2, [pc, #132]	; (a10f8 <Cl_Standby_Controller+0x32c>)
   a1074:	fba2 2303 	umull	r2, r3, r2, r3
   a1078:	08da      	lsrs	r2, r3, #3
   a107a:	4b20      	ldr	r3, [pc, #128]	; (a10fc <Cl_Standby_Controller+0x330>)
   a107c:	4610      	mov	r0, r2
   a107e:	4798      	blx	r3
   a1080:	4602      	mov	r2, r0
   a1082:	4b1f      	ldr	r3, [pc, #124]	; (a1100 <Cl_Standby_Controller+0x334>)
   a1084:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a1086:	e058      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a1088:	68fb      	ldr	r3, [r7, #12]
   a108a:	4a1b      	ldr	r2, [pc, #108]	; (a10f8 <Cl_Standby_Controller+0x32c>)
   a108c:	fba2 2303 	umull	r2, r3, r2, r3
   a1090:	08da      	lsrs	r2, r3, #3
   a1092:	4b1a      	ldr	r3, [pc, #104]	; (a10fc <Cl_Standby_Controller+0x330>)
   a1094:	4610      	mov	r0, r2
   a1096:	4798      	blx	r3
   a1098:	4602      	mov	r2, r0
   a109a:	4b19      	ldr	r3, [pc, #100]	; (a1100 <Cl_Standby_Controller+0x334>)
   a109c:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a109e:	e04c      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a10a0:	68fa      	ldr	r2, [r7, #12]
   a10a2:	4b16      	ldr	r3, [pc, #88]	; (a10fc <Cl_Standby_Controller+0x330>)
   a10a4:	4610      	mov	r0, r2
   a10a6:	4798      	blx	r3
   a10a8:	4602      	mov	r2, r0
   a10aa:	4b15      	ldr	r3, [pc, #84]	; (a1100 <Cl_Standby_Controller+0x334>)
   a10ac:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a10ae:	e044      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a10b0:	68fa      	ldr	r2, [r7, #12]
   a10b2:	4b12      	ldr	r3, [pc, #72]	; (a10fc <Cl_Standby_Controller+0x330>)
   a10b4:	4610      	mov	r0, r2
   a10b6:	4798      	blx	r3
   a10b8:	4602      	mov	r2, r0
   a10ba:	4b11      	ldr	r3, [pc, #68]	; (a1100 <Cl_Standby_Controller+0x334>)
   a10bc:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a10be:	e03c      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a10c0:	68fa      	ldr	r2, [r7, #12]
   a10c2:	4b0e      	ldr	r3, [pc, #56]	; (a10fc <Cl_Standby_Controller+0x330>)
   a10c4:	4610      	mov	r0, r2
   a10c6:	4798      	blx	r3
   a10c8:	4602      	mov	r2, r0
   a10ca:	4b0d      	ldr	r3, [pc, #52]	; (a1100 <Cl_Standby_Controller+0x334>)
   a10cc:	615a      	str	r2, [r3, #20]
						break;
   a10ce:	e034      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a10d0:	68fa      	ldr	r2, [r7, #12]
   a10d2:	4b0a      	ldr	r3, [pc, #40]	; (a10fc <Cl_Standby_Controller+0x330>)
   a10d4:	4610      	mov	r0, r2
   a10d6:	4798      	blx	r3
   a10d8:	4602      	mov	r2, r0
   a10da:	4b09      	ldr	r3, [pc, #36]	; (a1100 <Cl_Standby_Controller+0x334>)
   a10dc:	611a      	str	r2, [r3, #16]
						break;
   a10de:	e02c      	b.n	a113a <Cl_Standby_Controller+0x36e>
   a10e0:	000a15ed 	.word	0x000a15ed
   a10e4:	20070c60 	.word	0x20070c60
   a10e8:	00098601 	.word	0x00098601
   a10ec:	00091c25 	.word	0x00091c25
   a10f0:	20072f2c 	.word	0x20072f2c
   a10f4:	0009710d 	.word	0x0009710d
   a10f8:	cccccccd 	.word	0xcccccccd
   a10fc:	000a25dd 	.word	0x000a25dd
   a1100:	20072c9c 	.word	0x20072c9c
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a1104:	68fb      	ldr	r3, [r7, #12]
   a1106:	b21a      	sxth	r2, r3
   a1108:	4ba9      	ldr	r3, [pc, #676]	; (a13b0 <Cl_Standby_Controller+0x5e4>)
   a110a:	801a      	strh	r2, [r3, #0]
						break;
   a110c:	e015      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a110e:	68fb      	ldr	r3, [r7, #12]
   a1110:	b21a      	sxth	r2, r3
   a1112:	4ba7      	ldr	r3, [pc, #668]	; (a13b0 <Cl_Standby_Controller+0x5e4>)
   a1114:	805a      	strh	r2, [r3, #2]
						break;
   a1116:	e010      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a1118:	68fa      	ldr	r2, [r7, #12]
   a111a:	4ba6      	ldr	r3, [pc, #664]	; (a13b4 <Cl_Standby_Controller+0x5e8>)
   a111c:	4610      	mov	r0, r2
   a111e:	4798      	blx	r3
   a1120:	4602      	mov	r2, r0
   a1122:	4ba3      	ldr	r3, [pc, #652]	; (a13b0 <Cl_Standby_Controller+0x5e4>)
   a1124:	60da      	str	r2, [r3, #12]
						break;
   a1126:	e008      	b.n	a113a <Cl_Standby_Controller+0x36e>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a1128:	68fa      	ldr	r2, [r7, #12]
   a112a:	4ba2      	ldr	r3, [pc, #648]	; (a13b4 <Cl_Standby_Controller+0x5e8>)
   a112c:	4610      	mov	r0, r2
   a112e:	4798      	blx	r3
   a1130:	4602      	mov	r2, r0
   a1132:	4b9f      	ldr	r3, [pc, #636]	; (a13b0 <Cl_Standby_Controller+0x5e4>)
   a1134:	609a      	str	r2, [r3, #8]
						break;
   a1136:	e000      	b.n	a113a <Cl_Standby_Controller+0x36e>

						default:break;
   a1138:	bf00      	nop
					}
				}
				break;
   a113a:	e024      	b.n	a1186 <Cl_Standby_Controller+0x3ba>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a113c:	4b9e      	ldr	r3, [pc, #632]	; (a13b8 <Cl_Standby_Controller+0x5ec>)
   a113e:	2201      	movs	r2, #1
   a1140:	701a      	strb	r2, [r3, #0]

				break;
   a1142:	e021      	b.n	a1188 <Cl_Standby_Controller+0x3bc>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a1144:	2307      	movs	r3, #7
   a1146:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a1148:	f107 011c 	add.w	r1, r7, #28
   a114c:	7ffb      	ldrb	r3, [r7, #31]
   a114e:	2200      	movs	r2, #0
   a1150:	4618      	mov	r0, r3
   a1152:	4b9a      	ldr	r3, [pc, #616]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1154:	4798      	blx	r3
   a1156:	4603      	mov	r3, r0
   a1158:	77bb      	strb	r3, [r7, #30]

				break;
   a115a:	e015      	b.n	a1188 <Cl_Standby_Controller+0x3bc>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a115c:	4b98      	ldr	r3, [pc, #608]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a115e:	681b      	ldr	r3, [r3, #0]
   a1160:	3301      	adds	r3, #1
   a1162:	4a97      	ldr	r2, [pc, #604]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a1164:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a1166:	4b97      	ldr	r3, [pc, #604]	; (a13c4 <Cl_Standby_Controller+0x5f8>)
   a1168:	4798      	blx	r3
   a116a:	4603      	mov	r3, r0
   a116c:	77bb      	strb	r3, [r7, #30]
				break;
   a116e:	e00b      	b.n	a1188 <Cl_Standby_Controller+0x3bc>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a1170:	4b93      	ldr	r3, [pc, #588]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a1172:	2200      	movs	r2, #0
   a1174:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a1176:	4b90      	ldr	r3, [pc, #576]	; (a13b8 <Cl_Standby_Controller+0x5ec>)
   a1178:	2201      	movs	r2, #1
   a117a:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a117c:	e004      	b.n	a1188 <Cl_Standby_Controller+0x3bc>
			//	printf("H");
				break;

				
				default:
				break;
   a117e:	bf00      	nop
   a1180:	e229      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
							break;
						}

					}
				}
				break;
   a1182:	bf00      	nop
   a1184:	e227      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
						break;

						default:break;
					}
				}
				break;
   a1186:	bf00      	nop

				
				default:
				break;
			}
			break;
   a1188:	e225      	b.n	a15d6 <Cl_Standby_Controller+0x80a>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a118a:	7f7b      	ldrb	r3, [r7, #29]
   a118c:	3b06      	subs	r3, #6
   a118e:	2b07      	cmp	r3, #7
   a1190:	f200 8087 	bhi.w	a12a2 <Cl_Standby_Controller+0x4d6>
   a1194:	a201      	add	r2, pc, #4	; (adr r2, a119c <Cl_Standby_Controller+0x3d0>)
   a1196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a119a:	bf00      	nop
   a119c:	000a1281 	.word	0x000a1281
   a11a0:	000a129b 	.word	0x000a129b
   a11a4:	000a12a3 	.word	0x000a12a3
   a11a8:	000a1273 	.word	0x000a1273
   a11ac:	000a11bd 	.word	0x000a11bd
   a11b0:	000a1231 	.word	0x000a1231
   a11b4:	000a12a3 	.word	0x000a12a3
   a11b8:	000a12a3 	.word	0x000a12a3
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a11bc:	4b82      	ldr	r3, [pc, #520]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a11be:	7e1b      	ldrb	r3, [r3, #24]
   a11c0:	2b00      	cmp	r3, #0
   a11c2:	d070      	beq.n	a12a6 <Cl_Standby_Controller+0x4da>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a11c4:	4b80      	ldr	r3, [pc, #512]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a11c6:	791b      	ldrb	r3, [r3, #4]
   a11c8:	2b01      	cmp	r3, #1
   a11ca:	d002      	beq.n	a11d2 <Cl_Standby_Controller+0x406>
   a11cc:	2b21      	cmp	r3, #33	; 0x21
   a11ce:	d017      	beq.n	a1200 <Cl_Standby_Controller+0x434>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a11d0:	e02d      	b.n	a122e <Cl_Standby_Controller+0x462>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a11d2:	2316      	movs	r3, #22
   a11d4:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a11d6:	2301      	movs	r3, #1
   a11d8:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a11da:	f107 0318 	add.w	r3, r7, #24
   a11de:	3301      	adds	r3, #1
   a11e0:	4619      	mov	r1, r3
   a11e2:	2001      	movs	r0, #1
   a11e4:	4b79      	ldr	r3, [pc, #484]	; (a13cc <Cl_Standby_Controller+0x600>)
   a11e6:	4798      	blx	r3
   a11e8:	4603      	mov	r3, r0
   a11ea:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a11ec:	f107 0118 	add.w	r1, r7, #24
   a11f0:	7ffb      	ldrb	r3, [r7, #31]
   a11f2:	2202      	movs	r2, #2
   a11f4:	4618      	mov	r0, r3
   a11f6:	4b71      	ldr	r3, [pc, #452]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a11f8:	4798      	blx	r3
   a11fa:	4603      	mov	r3, r0
   a11fc:	77bb      	strb	r3, [r7, #30]
									//	cl_wait(
										break;
   a11fe:	e016      	b.n	a122e <Cl_Standby_Controller+0x462>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a1200:	2316      	movs	r3, #22
   a1202:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a1204:	2323      	movs	r3, #35	; 0x23
   a1206:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1208:	f107 0318 	add.w	r3, r7, #24
   a120c:	3301      	adds	r3, #1
   a120e:	4619      	mov	r1, r3
   a1210:	2001      	movs	r0, #1
   a1212:	4b6e      	ldr	r3, [pc, #440]	; (a13cc <Cl_Standby_Controller+0x600>)
   a1214:	4798      	blx	r3
   a1216:	4603      	mov	r3, r0
   a1218:	77bb      	strb	r3, [r7, #30]
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a121a:	f107 0118 	add.w	r1, r7, #24
   a121e:	7ffb      	ldrb	r3, [r7, #31]
   a1220:	2202      	movs	r2, #2
   a1222:	4618      	mov	r0, r3
   a1224:	4b65      	ldr	r3, [pc, #404]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1226:	4798      	blx	r3
   a1228:	4603      	mov	r3, r0
   a122a:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
						break;
   a122c:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a122e:	e03a      	b.n	a12a6 <Cl_Standby_Controller+0x4da>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a1230:	4b65      	ldr	r3, [pc, #404]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a1232:	7e1b      	ldrb	r3, [r3, #24]
   a1234:	2b00      	cmp	r3, #0
   a1236:	d038      	beq.n	a12aa <Cl_Standby_Controller+0x4de>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a1238:	4b63      	ldr	r3, [pc, #396]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a123a:	791b      	ldrb	r3, [r3, #4]
   a123c:	2b01      	cmp	r3, #1
   a123e:	d000      	beq.n	a1242 <Cl_Standby_Controller+0x476>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a1240:	e016      	b.n	a1270 <Cl_Standby_Controller+0x4a4>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a1242:	2316      	movs	r3, #22
   a1244:	77fb      	strb	r3, [r7, #31]
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a1246:	2301      	movs	r3, #1
   a1248:	763b      	strb	r3, [r7, #24]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a124a:	f107 0318 	add.w	r3, r7, #24
   a124e:	3301      	adds	r3, #1
   a1250:	4619      	mov	r1, r3
   a1252:	2001      	movs	r0, #1
   a1254:	4b5d      	ldr	r3, [pc, #372]	; (a13cc <Cl_Standby_Controller+0x600>)
   a1256:	4798      	blx	r3
   a1258:	4603      	mov	r3, r0
   a125a:	77bb      	strb	r3, [r7, #30]
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a125c:	f107 0118 	add.w	r1, r7, #24
   a1260:	7ffb      	ldrb	r3, [r7, #31]
   a1262:	2202      	movs	r2, #2
   a1264:	4618      	mov	r0, r3
   a1266:	4b55      	ldr	r3, [pc, #340]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1268:	4798      	blx	r3
   a126a:	4603      	mov	r3, r0
   a126c:	77bb      	strb	r3, [r7, #30]
						//cl_wait(10);
						break;
   a126e:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a1270:	e01b      	b.n	a12aa <Cl_Standby_Controller+0x4de>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a1272:	2307      	movs	r3, #7
   a1274:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a1276:	4b56      	ldr	r3, [pc, #344]	; (a13d0 <Cl_Standby_Controller+0x604>)
   a1278:	4798      	blx	r3
   a127a:	4603      	mov	r3, r0
   a127c:	77bb      	strb	r3, [r7, #30]

				break;
   a127e:	e015      	b.n	a12ac <Cl_Standby_Controller+0x4e0>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a1280:	4b4f      	ldr	r3, [pc, #316]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a1282:	681b      	ldr	r3, [r3, #0]
   a1284:	3301      	adds	r3, #1
   a1286:	4a4e      	ldr	r2, [pc, #312]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a1288:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a128a:	f107 0317 	add.w	r3, r7, #23
   a128e:	4618      	mov	r0, r3
   a1290:	4b50      	ldr	r3, [pc, #320]	; (a13d4 <Cl_Standby_Controller+0x608>)
   a1292:	4798      	blx	r3
   a1294:	4603      	mov	r3, r0
   a1296:	77bb      	strb	r3, [r7, #30]
				
				
				break;
   a1298:	e008      	b.n	a12ac <Cl_Standby_Controller+0x4e0>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a129a:	4b49      	ldr	r3, [pc, #292]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a129c:	2200      	movs	r2, #0
   a129e:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a12a0:	e004      	b.n	a12ac <Cl_Standby_Controller+0x4e0>
			//	printf("H");
				break;

				
				default:
				break;
   a12a2:	bf00      	nop
   a12a4:	e197      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
										default:
										break;
									}
								}

				break;
   a12a6:	bf00      	nop
   a12a8:	e195      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
						default:
						break;
					}
					
				}
				break;
   a12aa:	bf00      	nop

				
				default:
				break;
			}
			break;
   a12ac:	e193      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a12ae:	7f7b      	ldrb	r3, [r7, #29]
   a12b0:	3b06      	subs	r3, #6
   a12b2:	2b07      	cmp	r3, #7
   a12b4:	d866      	bhi.n	a1384 <Cl_Standby_Controller+0x5b8>
   a12b6:	a201      	add	r2, pc, #4	; (adr r2, a12bc <Cl_Standby_Controller+0x4f0>)
   a12b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a12bc:	000a1369 	.word	0x000a1369
   a12c0:	000a137d 	.word	0x000a137d
   a12c4:	000a1385 	.word	0x000a1385
   a12c8:	000a1351 	.word	0x000a1351
   a12cc:	000a12dd 	.word	0x000a12dd
   a12d0:	000a1385 	.word	0x000a1385
   a12d4:	000a1385 	.word	0x000a1385
   a12d8:	000a1385 	.word	0x000a1385
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a12dc:	4b3a      	ldr	r3, [pc, #232]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a12de:	7e1b      	ldrb	r3, [r3, #24]
   a12e0:	2b00      	cmp	r3, #0
   a12e2:	d051      	beq.n	a1388 <Cl_Standby_Controller+0x5bc>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a12e4:	4b38      	ldr	r3, [pc, #224]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a12e6:	791b      	ldrb	r3, [r3, #4]
   a12e8:	2b01      	cmp	r3, #1
   a12ea:	d002      	beq.n	a12f2 <Cl_Standby_Controller+0x526>
   a12ec:	2b21      	cmp	r3, #33	; 0x21
   a12ee:	d017      	beq.n	a1320 <Cl_Standby_Controller+0x554>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a12f0:	e02d      	b.n	a134e <Cl_Standby_Controller+0x582>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a12f2:	2316      	movs	r3, #22
   a12f4:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a12f6:	2301      	movs	r3, #1
   a12f8:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a12fa:	f107 0318 	add.w	r3, r7, #24
   a12fe:	3301      	adds	r3, #1
   a1300:	4619      	mov	r1, r3
   a1302:	2001      	movs	r0, #1
   a1304:	4b31      	ldr	r3, [pc, #196]	; (a13cc <Cl_Standby_Controller+0x600>)
   a1306:	4798      	blx	r3
   a1308:	4603      	mov	r3, r0
   a130a:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a130c:	f107 0118 	add.w	r1, r7, #24
   a1310:	7ffb      	ldrb	r3, [r7, #31]
   a1312:	2202      	movs	r2, #2
   a1314:	4618      	mov	r0, r3
   a1316:	4b29      	ldr	r3, [pc, #164]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1318:	4798      	blx	r3
   a131a:	4603      	mov	r3, r0
   a131c:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a131e:	e016      	b.n	a134e <Cl_Standby_Controller+0x582>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a1320:	2316      	movs	r3, #22
   a1322:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a1324:	2323      	movs	r3, #35	; 0x23
   a1326:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1328:	f107 0318 	add.w	r3, r7, #24
   a132c:	3301      	adds	r3, #1
   a132e:	4619      	mov	r1, r3
   a1330:	2001      	movs	r0, #1
   a1332:	4b26      	ldr	r3, [pc, #152]	; (a13cc <Cl_Standby_Controller+0x600>)
   a1334:	4798      	blx	r3
   a1336:	4603      	mov	r3, r0
   a1338:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a133a:	f107 0118 	add.w	r1, r7, #24
   a133e:	7ffb      	ldrb	r3, [r7, #31]
   a1340:	2202      	movs	r2, #2
   a1342:	4618      	mov	r0, r3
   a1344:	4b1d      	ldr	r3, [pc, #116]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1346:	4798      	blx	r3
   a1348:	4603      	mov	r3, r0
   a134a:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a134c:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a134e:	e01b      	b.n	a1388 <Cl_Standby_Controller+0x5bc>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a1350:	2307      	movs	r3, #7
   a1352:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a1354:	f107 011c 	add.w	r1, r7, #28
   a1358:	7ffb      	ldrb	r3, [r7, #31]
   a135a:	2200      	movs	r2, #0
   a135c:	4618      	mov	r0, r3
   a135e:	4b17      	ldr	r3, [pc, #92]	; (a13bc <Cl_Standby_Controller+0x5f0>)
   a1360:	4798      	blx	r3
   a1362:	4603      	mov	r3, r0
   a1364:	77bb      	strb	r3, [r7, #30]

				break;
   a1366:	e010      	b.n	a138a <Cl_Standby_Controller+0x5be>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a1368:	4b15      	ldr	r3, [pc, #84]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a136a:	681b      	ldr	r3, [r3, #0]
   a136c:	3301      	adds	r3, #1
   a136e:	4a14      	ldr	r2, [pc, #80]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a1370:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a1372:	4b14      	ldr	r3, [pc, #80]	; (a13c4 <Cl_Standby_Controller+0x5f8>)
   a1374:	4798      	blx	r3
   a1376:	4603      	mov	r3, r0
   a1378:	77bb      	strb	r3, [r7, #30]
				break;
   a137a:	e006      	b.n	a138a <Cl_Standby_Controller+0x5be>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a137c:	4b10      	ldr	r3, [pc, #64]	; (a13c0 <Cl_Standby_Controller+0x5f4>)
   a137e:	2200      	movs	r2, #0
   a1380:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a1382:	e002      	b.n	a138a <Cl_Standby_Controller+0x5be>
			//	printf("H");
				break;

				
				default:
				break;
   a1384:	bf00      	nop
   a1386:	e126      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
				break;
   a1388:	bf00      	nop

				
				default:
				break;
			}
			break;
   a138a:	e124      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a138c:	7f7b      	ldrb	r3, [r7, #29]
   a138e:	2b0a      	cmp	r3, #10
   a1390:	d002      	beq.n	a1398 <Cl_Standby_Controller+0x5cc>
   a1392:	2b0d      	cmp	r3, #13
   a1394:	d04f      	beq.n	a1436 <Cl_Standby_Controller+0x66a>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a1396:	e051      	b.n	a143c <Cl_Standby_Controller+0x670>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a1398:	4b0b      	ldr	r3, [pc, #44]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a139a:	7e1b      	ldrb	r3, [r3, #24]
   a139c:	2b00      	cmp	r3, #0
   a139e:	d04c      	beq.n	a143a <Cl_Standby_Controller+0x66e>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a13a0:	4b09      	ldr	r3, [pc, #36]	; (a13c8 <Cl_Standby_Controller+0x5fc>)
   a13a2:	791b      	ldrb	r3, [r3, #4]
   a13a4:	2b01      	cmp	r3, #1
   a13a6:	d017      	beq.n	a13d8 <Cl_Standby_Controller+0x60c>
   a13a8:	2b21      	cmp	r3, #33	; 0x21
   a13aa:	d02c      	beq.n	a1406 <Cl_Standby_Controller+0x63a>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a13ac:	e042      	b.n	a1434 <Cl_Standby_Controller+0x668>
   a13ae:	bf00      	nop
   a13b0:	20072c9c 	.word	0x20072c9c
   a13b4:	000a25dd 	.word	0x000a25dd
   a13b8:	20070c60 	.word	0x20070c60
   a13bc:	00098601 	.word	0x00098601
   a13c0:	20072834 	.word	0x20072834
   a13c4:	000a17f1 	.word	0x000a17f1
   a13c8:	20072f2c 	.word	0x20072f2c
   a13cc:	0009710d 	.word	0x0009710d
   a13d0:	000a187d 	.word	0x000a187d
   a13d4:	000a18e9 	.word	0x000a18e9
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a13d8:	2316      	movs	r3, #22
   a13da:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a13dc:	2301      	movs	r3, #1
   a13de:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a13e0:	f107 0318 	add.w	r3, r7, #24
   a13e4:	3301      	adds	r3, #1
   a13e6:	4619      	mov	r1, r3
   a13e8:	2001      	movs	r0, #1
   a13ea:	4b7d      	ldr	r3, [pc, #500]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a13ec:	4798      	blx	r3
   a13ee:	4603      	mov	r3, r0
   a13f0:	77bb      	strb	r3, [r7, #30]
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a13f2:	f107 0118 	add.w	r1, r7, #24
   a13f6:	7ffb      	ldrb	r3, [r7, #31]
   a13f8:	2202      	movs	r2, #2
   a13fa:	4618      	mov	r0, r3
   a13fc:	4b79      	ldr	r3, [pc, #484]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a13fe:	4798      	blx	r3
   a1400:	4603      	mov	r3, r0
   a1402:	77bb      	strb	r3, [r7, #30]
												//cl_wait(10);
												break;
   a1404:	e016      	b.n	a1434 <Cl_Standby_Controller+0x668>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a1406:	2316      	movs	r3, #22
   a1408:	77fb      	strb	r3, [r7, #31]
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a140a:	2323      	movs	r3, #35	; 0x23
   a140c:	763b      	strb	r3, [r7, #24]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a140e:	f107 0318 	add.w	r3, r7, #24
   a1412:	3301      	adds	r3, #1
   a1414:	4619      	mov	r1, r3
   a1416:	2001      	movs	r0, #1
   a1418:	4b71      	ldr	r3, [pc, #452]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a141a:	4798      	blx	r3
   a141c:	4603      	mov	r3, r0
   a141e:	77bb      	strb	r3, [r7, #30]
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1420:	f107 0118 	add.w	r1, r7, #24
   a1424:	7ffb      	ldrb	r3, [r7, #31]
   a1426:	2202      	movs	r2, #2
   a1428:	4618      	mov	r0, r3
   a142a:	4b6e      	ldr	r3, [pc, #440]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a142c:	4798      	blx	r3
   a142e:	4603      	mov	r3, r0
   a1430:	77bb      	strb	r3, [r7, #30]
														//cl_wait(100);
												break;
   a1432:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a1434:	e001      	b.n	a143a <Cl_Standby_Controller+0x66e>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a1436:	bf00      	nop
   a1438:	e0cd      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
												break;
												default:
												break;
											}
										}
							break;
   a143a:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a143c:	e0cb      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a143e:	7f7b      	ldrb	r3, [r7, #29]
   a1440:	2b0a      	cmp	r3, #10
   a1442:	d002      	beq.n	a144a <Cl_Standby_Controller+0x67e>
   a1444:	2b0d      	cmp	r3, #13
   a1446:	d03a      	beq.n	a14be <Cl_Standby_Controller+0x6f2>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a1448:	e03c      	b.n	a14c4 <Cl_Standby_Controller+0x6f8>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a144a:	4b67      	ldr	r3, [pc, #412]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a144c:	7e1b      	ldrb	r3, [r3, #24]
   a144e:	2b00      	cmp	r3, #0
   a1450:	d037      	beq.n	a14c2 <Cl_Standby_Controller+0x6f6>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a1452:	4b65      	ldr	r3, [pc, #404]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a1454:	791b      	ldrb	r3, [r3, #4]
   a1456:	2b01      	cmp	r3, #1
   a1458:	d002      	beq.n	a1460 <Cl_Standby_Controller+0x694>
   a145a:	2b21      	cmp	r3, #33	; 0x21
   a145c:	d017      	beq.n	a148e <Cl_Standby_Controller+0x6c2>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a145e:	e02d      	b.n	a14bc <Cl_Standby_Controller+0x6f0>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a1460:	2316      	movs	r3, #22
   a1462:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a1464:	2301      	movs	r3, #1
   a1466:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1468:	f107 0318 	add.w	r3, r7, #24
   a146c:	3301      	adds	r3, #1
   a146e:	4619      	mov	r1, r3
   a1470:	2001      	movs	r0, #1
   a1472:	4b5b      	ldr	r3, [pc, #364]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a1474:	4798      	blx	r3
   a1476:	4603      	mov	r3, r0
   a1478:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a147a:	f107 0118 	add.w	r1, r7, #24
   a147e:	7ffb      	ldrb	r3, [r7, #31]
   a1480:	2202      	movs	r2, #2
   a1482:	4618      	mov	r0, r3
   a1484:	4b57      	ldr	r3, [pc, #348]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a1486:	4798      	blx	r3
   a1488:	4603      	mov	r3, r0
   a148a:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a148c:	e016      	b.n	a14bc <Cl_Standby_Controller+0x6f0>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a148e:	2316      	movs	r3, #22
   a1490:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a1492:	2323      	movs	r3, #35	; 0x23
   a1494:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1496:	f107 0318 	add.w	r3, r7, #24
   a149a:	3301      	adds	r3, #1
   a149c:	4619      	mov	r1, r3
   a149e:	2001      	movs	r0, #1
   a14a0:	4b4f      	ldr	r3, [pc, #316]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a14a2:	4798      	blx	r3
   a14a4:	4603      	mov	r3, r0
   a14a6:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a14a8:	f107 0118 	add.w	r1, r7, #24
   a14ac:	7ffb      	ldrb	r3, [r7, #31]
   a14ae:	2202      	movs	r2, #2
   a14b0:	4618      	mov	r0, r3
   a14b2:	4b4c      	ldr	r3, [pc, #304]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a14b4:	4798      	blx	r3
   a14b6:	4603      	mov	r3, r0
   a14b8:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a14ba:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a14bc:	e001      	b.n	a14c2 <Cl_Standby_Controller+0x6f6>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a14be:	bf00      	nop
   a14c0:	e000      	b.n	a14c4 <Cl_Standby_Controller+0x6f8>
										break;
										default:
										break;
									}
								}
							break;
   a14c2:	bf00      	nop
							break;
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a14c4:	7f7b      	ldrb	r3, [r7, #29]
   a14c6:	2b0a      	cmp	r3, #10
   a14c8:	d002      	beq.n	a14d0 <Cl_Standby_Controller+0x704>
   a14ca:	2b0d      	cmp	r3, #13
   a14cc:	d03a      	beq.n	a1544 <Cl_Standby_Controller+0x778>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a14ce:	e03c      	b.n	a154a <Cl_Standby_Controller+0x77e>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a14d0:	4b45      	ldr	r3, [pc, #276]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a14d2:	7e1b      	ldrb	r3, [r3, #24]
   a14d4:	2b00      	cmp	r3, #0
   a14d6:	d037      	beq.n	a1548 <Cl_Standby_Controller+0x77c>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a14d8:	4b43      	ldr	r3, [pc, #268]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a14da:	791b      	ldrb	r3, [r3, #4]
   a14dc:	2b01      	cmp	r3, #1
   a14de:	d002      	beq.n	a14e6 <Cl_Standby_Controller+0x71a>
   a14e0:	2b21      	cmp	r3, #33	; 0x21
   a14e2:	d017      	beq.n	a1514 <Cl_Standby_Controller+0x748>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a14e4:	e02d      	b.n	a1542 <Cl_Standby_Controller+0x776>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a14e6:	2316      	movs	r3, #22
   a14e8:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a14ea:	2301      	movs	r3, #1
   a14ec:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a14ee:	f107 0318 	add.w	r3, r7, #24
   a14f2:	3301      	adds	r3, #1
   a14f4:	4619      	mov	r1, r3
   a14f6:	2001      	movs	r0, #1
   a14f8:	4b39      	ldr	r3, [pc, #228]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a14fa:	4798      	blx	r3
   a14fc:	4603      	mov	r3, r0
   a14fe:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1500:	f107 0118 	add.w	r1, r7, #24
   a1504:	7ffb      	ldrb	r3, [r7, #31]
   a1506:	2202      	movs	r2, #2
   a1508:	4618      	mov	r0, r3
   a150a:	4b36      	ldr	r3, [pc, #216]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a150c:	4798      	blx	r3
   a150e:	4603      	mov	r3, r0
   a1510:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a1512:	e016      	b.n	a1542 <Cl_Standby_Controller+0x776>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a1514:	2316      	movs	r3, #22
   a1516:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a1518:	2323      	movs	r3, #35	; 0x23
   a151a:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a151c:	f107 0318 	add.w	r3, r7, #24
   a1520:	3301      	adds	r3, #1
   a1522:	4619      	mov	r1, r3
   a1524:	2001      	movs	r0, #1
   a1526:	4b2e      	ldr	r3, [pc, #184]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a1528:	4798      	blx	r3
   a152a:	4603      	mov	r3, r0
   a152c:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a152e:	f107 0118 	add.w	r1, r7, #24
   a1532:	7ffb      	ldrb	r3, [r7, #31]
   a1534:	2202      	movs	r2, #2
   a1536:	4618      	mov	r0, r3
   a1538:	4b2a      	ldr	r3, [pc, #168]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a153a:	4798      	blx	r3
   a153c:	4603      	mov	r3, r0
   a153e:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a1540:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a1542:	e001      	b.n	a1548 <Cl_Standby_Controller+0x77c>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a1544:	bf00      	nop
   a1546:	e046      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
							break;
   a1548:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a154a:	e044      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a154c:	7f7b      	ldrb	r3, [r7, #29]
   a154e:	2b0a      	cmp	r3, #10
   a1550:	d002      	beq.n	a1558 <Cl_Standby_Controller+0x78c>
   a1552:	2b0d      	cmp	r3, #13
   a1554:	d03a      	beq.n	a15cc <Cl_Standby_Controller+0x800>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a1556:	e03c      	b.n	a15d2 <Cl_Standby_Controller+0x806>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a1558:	4b23      	ldr	r3, [pc, #140]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a155a:	7e1b      	ldrb	r3, [r3, #24]
   a155c:	2b00      	cmp	r3, #0
   a155e:	d037      	beq.n	a15d0 <Cl_Standby_Controller+0x804>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a1560:	4b21      	ldr	r3, [pc, #132]	; (a15e8 <Cl_Standby_Controller+0x81c>)
   a1562:	791b      	ldrb	r3, [r3, #4]
   a1564:	2b01      	cmp	r3, #1
   a1566:	d002      	beq.n	a156e <Cl_Standby_Controller+0x7a2>
   a1568:	2b21      	cmp	r3, #33	; 0x21
   a156a:	d017      	beq.n	a159c <Cl_Standby_Controller+0x7d0>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a156c:	e02d      	b.n	a15ca <Cl_Standby_Controller+0x7fe>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a156e:	2316      	movs	r3, #22
   a1570:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a1572:	2301      	movs	r3, #1
   a1574:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1576:	f107 0318 	add.w	r3, r7, #24
   a157a:	3301      	adds	r3, #1
   a157c:	4619      	mov	r1, r3
   a157e:	2001      	movs	r0, #1
   a1580:	4b17      	ldr	r3, [pc, #92]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a1582:	4798      	blx	r3
   a1584:	4603      	mov	r3, r0
   a1586:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1588:	f107 0118 	add.w	r1, r7, #24
   a158c:	7ffb      	ldrb	r3, [r7, #31]
   a158e:	2202      	movs	r2, #2
   a1590:	4618      	mov	r0, r3
   a1592:	4b14      	ldr	r3, [pc, #80]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a1594:	4798      	blx	r3
   a1596:	4603      	mov	r3, r0
   a1598:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a159a:	e016      	b.n	a15ca <Cl_Standby_Controller+0x7fe>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a159c:	2316      	movs	r3, #22
   a159e:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a15a0:	2323      	movs	r3, #35	; 0x23
   a15a2:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a15a4:	f107 0318 	add.w	r3, r7, #24
   a15a8:	3301      	adds	r3, #1
   a15aa:	4619      	mov	r1, r3
   a15ac:	2001      	movs	r0, #1
   a15ae:	4b0c      	ldr	r3, [pc, #48]	; (a15e0 <Cl_Standby_Controller+0x814>)
   a15b0:	4798      	blx	r3
   a15b2:	4603      	mov	r3, r0
   a15b4:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a15b6:	f107 0118 	add.w	r1, r7, #24
   a15ba:	7ffb      	ldrb	r3, [r7, #31]
   a15bc:	2202      	movs	r2, #2
   a15be:	4618      	mov	r0, r3
   a15c0:	4b08      	ldr	r3, [pc, #32]	; (a15e4 <Cl_Standby_Controller+0x818>)
   a15c2:	4798      	blx	r3
   a15c4:	4603      	mov	r3, r0
   a15c6:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a15c8:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a15ca:	e001      	b.n	a15d0 <Cl_Standby_Controller+0x804>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a15cc:	bf00      	nop
   a15ce:	e002      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
							break;
   a15d0:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a15d2:	e000      	b.n	a15d6 <Cl_Standby_Controller+0x80a>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a15d4:	bf00      	nop
		}

	
return CL_OK;
   a15d6:	2300      	movs	r3, #0
}
   a15d8:	4618      	mov	r0, r3
   a15da:	3720      	adds	r7, #32
   a15dc:	46bd      	mov	sp, r7
   a15de:	bd80      	pop	{r7, pc}
   a15e0:	0009710d 	.word	0x0009710d
   a15e4:	00098601 	.word	0x00098601
   a15e8:	20072f2c 	.word	0x20072f2c

000a15ec <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a15ec:	b480      	push	{r7}
   a15ee:	b083      	sub	sp, #12
   a15f0:	af00      	add	r7, sp, #0
   a15f2:	4603      	mov	r3, r0
   a15f4:	6039      	str	r1, [r7, #0]
   a15f6:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a15f8:	683b      	ldr	r3, [r7, #0]
   a15fa:	2200      	movs	r2, #0
   a15fc:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a15fe:	79fb      	ldrb	r3, [r7, #7]
   a1600:	3b07      	subs	r3, #7
   a1602:	2b36      	cmp	r3, #54	; 0x36
   a1604:	f200 809e 	bhi.w	a1744 <cl_stby_translatemacevent+0x158>
   a1608:	a201      	add	r2, pc, #4	; (adr r2, a1610 <cl_stby_translatemacevent+0x24>)
   a160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a160e:	bf00      	nop
   a1610:	000a171d 	.word	0x000a171d
   a1614:	000a1745 	.word	0x000a1745
   a1618:	000a1725 	.word	0x000a1725
   a161c:	000a172d 	.word	0x000a172d
   a1620:	000a1735 	.word	0x000a1735
   a1624:	000a1745 	.word	0x000a1745
   a1628:	000a1745 	.word	0x000a1745
   a162c:	000a1715 	.word	0x000a1715
   a1630:	000a1745 	.word	0x000a1745
   a1634:	000a173d 	.word	0x000a173d
   a1638:	000a1745 	.word	0x000a1745
   a163c:	000a1745 	.word	0x000a1745
   a1640:	000a1745 	.word	0x000a1745
   a1644:	000a1745 	.word	0x000a1745
   a1648:	000a1745 	.word	0x000a1745
   a164c:	000a1745 	.word	0x000a1745
   a1650:	000a1745 	.word	0x000a1745
   a1654:	000a1745 	.word	0x000a1745
   a1658:	000a1745 	.word	0x000a1745
   a165c:	000a1745 	.word	0x000a1745
   a1660:	000a1745 	.word	0x000a1745
   a1664:	000a1745 	.word	0x000a1745
   a1668:	000a1745 	.word	0x000a1745
   a166c:	000a1745 	.word	0x000a1745
   a1670:	000a1745 	.word	0x000a1745
   a1674:	000a1745 	.word	0x000a1745
   a1678:	000a1745 	.word	0x000a1745
   a167c:	000a1745 	.word	0x000a1745
   a1680:	000a1745 	.word	0x000a1745
   a1684:	000a1745 	.word	0x000a1745
   a1688:	000a1745 	.word	0x000a1745
   a168c:	000a1745 	.word	0x000a1745
   a1690:	000a1745 	.word	0x000a1745
   a1694:	000a1745 	.word	0x000a1745
   a1698:	000a1745 	.word	0x000a1745
   a169c:	000a1745 	.word	0x000a1745
   a16a0:	000a16ed 	.word	0x000a16ed
   a16a4:	000a1745 	.word	0x000a1745
   a16a8:	000a1745 	.word	0x000a1745
   a16ac:	000a170d 	.word	0x000a170d
   a16b0:	000a1745 	.word	0x000a1745
   a16b4:	000a1745 	.word	0x000a1745
   a16b8:	000a1745 	.word	0x000a1745
   a16bc:	000a1745 	.word	0x000a1745
   a16c0:	000a1745 	.word	0x000a1745
   a16c4:	000a1745 	.word	0x000a1745
   a16c8:	000a1745 	.word	0x000a1745
   a16cc:	000a1745 	.word	0x000a1745
   a16d0:	000a1745 	.word	0x000a1745
   a16d4:	000a1745 	.word	0x000a1745
   a16d8:	000a16f5 	.word	0x000a16f5
   a16dc:	000a1745 	.word	0x000a1745
   a16e0:	000a16fd 	.word	0x000a16fd
   a16e4:	000a1705 	.word	0x000a1705
   a16e8:	000a1745 	.word	0x000a1745
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a16ec:	683b      	ldr	r3, [r7, #0]
   a16ee:	2201      	movs	r2, #1
   a16f0:	701a      	strb	r2, [r3, #0]
		break;
   a16f2:	e028      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a16f4:	683b      	ldr	r3, [r7, #0]
   a16f6:	2204      	movs	r2, #4
   a16f8:	701a      	strb	r2, [r3, #0]
		break;
   a16fa:	e024      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a16fc:	683b      	ldr	r3, [r7, #0]
   a16fe:	2206      	movs	r2, #6
   a1700:	701a      	strb	r2, [r3, #0]
		break;
   a1702:	e020      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a1704:	683b      	ldr	r3, [r7, #0]
   a1706:	2207      	movs	r2, #7
   a1708:	701a      	strb	r2, [r3, #0]
		break;
   a170a:	e01c      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a170c:	683b      	ldr	r3, [r7, #0]
   a170e:	2209      	movs	r2, #9
   a1710:	701a      	strb	r2, [r3, #0]
		break;
   a1712:	e018      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a1714:	683b      	ldr	r3, [r7, #0]
   a1716:	220a      	movs	r2, #10
   a1718:	701a      	strb	r2, [r3, #0]
		break;
   a171a:	e014      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a171c:	683b      	ldr	r3, [r7, #0]
   a171e:	220c      	movs	r2, #12
   a1720:	701a      	strb	r2, [r3, #0]
		break;
   a1722:	e010      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a1724:	683b      	ldr	r3, [r7, #0]
   a1726:	220d      	movs	r2, #13
   a1728:	701a      	strb	r2, [r3, #0]
		break; 
   a172a:	e00c      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a172c:	683b      	ldr	r3, [r7, #0]
   a172e:	220e      	movs	r2, #14
   a1730:	701a      	strb	r2, [r3, #0]
		break;
   a1732:	e008      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a1734:	683b      	ldr	r3, [r7, #0]
   a1736:	220f      	movs	r2, #15
   a1738:	701a      	strb	r2, [r3, #0]
		break;
   a173a:	e004      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a173c:	683b      	ldr	r3, [r7, #0]
   a173e:	2210      	movs	r2, #16
   a1740:	701a      	strb	r2, [r3, #0]
		break;
   a1742:	e000      	b.n	a1746 <cl_stby_translatemacevent+0x15a>
		default:
		break;
   a1744:	bf00      	nop
	}
	return CL_OK;
   a1746:	2300      	movs	r3, #0
}
   a1748:	4618      	mov	r0, r3
   a174a:	370c      	adds	r7, #12
   a174c:	46bd      	mov	sp, r7
   a174e:	bc80      	pop	{r7}
   a1750:	4770      	bx	lr
   a1752:	bf00      	nop

000a1754 <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a1754:	b580      	push	{r7, lr}
   a1756:	b082      	sub	sp, #8
   a1758:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a175a:	2304      	movs	r3, #4
   a175c:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a175e:	2301      	movs	r3, #1
   a1760:	80fb      	strh	r3, [r7, #6]
   a1762:	e00a      	b.n	a177a <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a1764:	88fb      	ldrh	r3, [r7, #6]
   a1766:	b2db      	uxtb	r3, r3
   a1768:	4618      	mov	r0, r3
   a176a:	4b1b      	ldr	r3, [pc, #108]	; (a17d8 <Cl_stby_init+0x84>)
   a176c:	4798      	blx	r3
				cl_wait(10);
   a176e:	200a      	movs	r0, #10
   a1770:	4b1a      	ldr	r3, [pc, #104]	; (a17dc <Cl_stby_init+0x88>)
   a1772:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a1774:	88fb      	ldrh	r3, [r7, #6]
   a1776:	3301      	adds	r3, #1
   a1778:	80fb      	strh	r3, [r7, #6]
   a177a:	88fb      	ldrh	r3, [r7, #6]
   a177c:	2b14      	cmp	r3, #20
   a177e:	d9f1      	bls.n	a1764 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a1780:	2001      	movs	r0, #1
   a1782:	4b17      	ldr	r3, [pc, #92]	; (a17e0 <Cl_stby_init+0x8c>)
   a1784:	4798      	blx	r3
   a1786:	4603      	mov	r3, r0
   a1788:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a178a:	2002      	movs	r0, #2
   a178c:	4b14      	ldr	r3, [pc, #80]	; (a17e0 <Cl_stby_init+0x8c>)
   a178e:	4798      	blx	r3
   a1790:	4603      	mov	r3, r0
   a1792:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a1794:	2004      	movs	r0, #4
   a1796:	4b12      	ldr	r3, [pc, #72]	; (a17e0 <Cl_stby_init+0x8c>)
   a1798:	4798      	blx	r3
   a179a:	4603      	mov	r3, r0
   a179c:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a179e:	2005      	movs	r0, #5
   a17a0:	4b0f      	ldr	r3, [pc, #60]	; (a17e0 <Cl_stby_init+0x8c>)
   a17a2:	4798      	blx	r3
   a17a4:	4603      	mov	r3, r0
   a17a6:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a17a8:	2006      	movs	r0, #6
   a17aa:	4b0d      	ldr	r3, [pc, #52]	; (a17e0 <Cl_stby_init+0x8c>)
   a17ac:	4798      	blx	r3
   a17ae:	4603      	mov	r3, r0
   a17b0:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   a17b2:	4b0c      	ldr	r3, [pc, #48]	; (a17e4 <Cl_stby_init+0x90>)
   a17b4:	4798      	blx	r3
   a17b6:	4603      	mov	r3, r0
   a17b8:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a17ba:	20e1      	movs	r0, #225	; 0xe1
   a17bc:	4b0a      	ldr	r3, [pc, #40]	; (a17e8 <Cl_stby_init+0x94>)
   a17be:	4798      	blx	r3
   a17c0:	4603      	mov	r3, r0
   a17c2:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a17c4:	2000      	movs	r0, #0
   a17c6:	4b09      	ldr	r3, [pc, #36]	; (a17ec <Cl_stby_init+0x98>)
   a17c8:	4798      	blx	r3
   a17ca:	4603      	mov	r3, r0
   a17cc:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a17ce:	2300      	movs	r3, #0
 }
   a17d0:	4618      	mov	r0, r3
   a17d2:	3708      	adds	r7, #8
   a17d4:	46bd      	mov	sp, r7
   a17d6:	bd80      	pop	{r7, pc}
   a17d8:	0009689d 	.word	0x0009689d
   a17dc:	00091b9d 	.word	0x00091b9d
   a17e0:	00096819 	.word	0x00096819
   a17e4:	00096869 	.word	0x00096869
   a17e8:	00096d29 	.word	0x00096d29
   a17ec:	0008e179 	.word	0x0008e179

000a17f0 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a17f0:	b580      	push	{r7, lr}
   a17f2:	b084      	sub	sp, #16
   a17f4:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a17f6:	2304      	movs	r3, #4
   a17f8:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a17fa:	234a      	movs	r3, #74	; 0x4a
   a17fc:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a17fe:	1d3b      	adds	r3, r7, #4
   a1800:	2200      	movs	r2, #0
   a1802:	601a      	str	r2, [r3, #0]
   a1804:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a1808:	230a      	movs	r3, #10
   a180a:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a180c:	2300      	movs	r3, #0
   a180e:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a1810:	4b16      	ldr	r3, [pc, #88]	; (a186c <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a1812:	681b      	ldr	r3, [r3, #0]
   a1814:	b2db      	uxtb	r3, r3
   a1816:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a1818:	4b15      	ldr	r3, [pc, #84]	; (a1870 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a181a:	681b      	ldr	r3, [r3, #0]
   a181c:	b2db      	uxtb	r3, r3
   a181e:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a1820:	4b14      	ldr	r3, [pc, #80]	; (a1874 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a1822:	681b      	ldr	r3, [r3, #0]
   a1824:	b2db      	uxtb	r3, r3
   a1826:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a1828:	4b10      	ldr	r3, [pc, #64]	; (a186c <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a182a:	681b      	ldr	r3, [r3, #0]
   a182c:	b2db      	uxtb	r3, r3
   a182e:	425b      	negs	r3, r3
   a1830:	b2db      	uxtb	r3, r3
   a1832:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a1834:	4b0e      	ldr	r3, [pc, #56]	; (a1870 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a1836:	681b      	ldr	r3, [r3, #0]
   a1838:	b2db      	uxtb	r3, r3
   a183a:	f1c3 0308 	rsb	r3, r3, #8
   a183e:	b2db      	uxtb	r3, r3
   a1840:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a1842:	4b0c      	ldr	r3, [pc, #48]	; (a1874 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a1844:	681b      	ldr	r3, [r3, #0]
   a1846:	b2db      	uxtb	r3, r3
   a1848:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a184c:	b2db      	uxtb	r3, r3
   a184e:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a1850:	1d39      	adds	r1, r7, #4
   a1852:	7bbb      	ldrb	r3, [r7, #14]
   a1854:	2207      	movs	r2, #7
   a1856:	4618      	mov	r0, r3
   a1858:	4b07      	ldr	r3, [pc, #28]	; (a1878 <Cl_StabyRinse_UpdateTimeInfo+0x88>)
   a185a:	4798      	blx	r3
   a185c:	4603      	mov	r3, r0
   a185e:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a1860:	2300      	movs	r3, #0
	
 }
   a1862:	4618      	mov	r0, r3
   a1864:	3710      	adds	r7, #16
   a1866:	46bd      	mov	sp, r7
   a1868:	bd80      	pop	{r7, pc}
   a186a:	bf00      	nop
   a186c:	2007283c 	.word	0x2007283c
   a1870:	20072838 	.word	0x20072838
   a1874:	20072834 	.word	0x20072834
   a1878:	00098601 	.word	0x00098601

000a187c <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a187c:	b580      	push	{r7, lr}
   a187e:	b082      	sub	sp, #8
   a1880:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a1882:	2300      	movs	r3, #0
   a1884:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a1886:	2300      	movs	r3, #0
   a1888:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a188a:	234a      	movs	r3, #74	; 0x4a
   a188c:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a188e:	2300      	movs	r3, #0
   a1890:	71fb      	strb	r3, [r7, #7]
   a1892:	e01c      	b.n	a18ce <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a1894:	79fa      	ldrb	r2, [r7, #7]
   a1896:	4912      	ldr	r1, [pc, #72]	; (a18e0 <Cl_standby_ProcessAlarms+0x64>)
   a1898:	4613      	mov	r3, r2
   a189a:	00db      	lsls	r3, r3, #3
   a189c:	4413      	add	r3, r2
   a189e:	440b      	add	r3, r1
   a18a0:	7818      	ldrb	r0, [r3, #0]
   a18a2:	79fa      	ldrb	r2, [r7, #7]
   a18a4:	4613      	mov	r3, r2
   a18a6:	00db      	lsls	r3, r3, #3
   a18a8:	4413      	add	r3, r2
   a18aa:	4a0d      	ldr	r2, [pc, #52]	; (a18e0 <Cl_standby_ProcessAlarms+0x64>)
   a18ac:	4413      	add	r3, r2
   a18ae:	3304      	adds	r3, #4
   a18b0:	4619      	mov	r1, r3
   a18b2:	4b0c      	ldr	r3, [pc, #48]	; (a18e4 <Cl_standby_ProcessAlarms+0x68>)
   a18b4:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a18b6:	79fa      	ldrb	r2, [r7, #7]
   a18b8:	4909      	ldr	r1, [pc, #36]	; (a18e0 <Cl_standby_ProcessAlarms+0x64>)
   a18ba:	4613      	mov	r3, r2
   a18bc:	00db      	lsls	r3, r3, #3
   a18be:	4413      	add	r3, r2
   a18c0:	440b      	add	r3, r1
   a18c2:	3304      	adds	r3, #4
   a18c4:	781b      	ldrb	r3, [r3, #0]
   a18c6:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a18c8:	79fb      	ldrb	r3, [r7, #7]
   a18ca:	3301      	adds	r3, #1
   a18cc:	71fb      	strb	r3, [r7, #7]
   a18ce:	79fb      	ldrb	r3, [r7, #7]
   a18d0:	2b03      	cmp	r3, #3
   a18d2:	d9df      	bls.n	a1894 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a18d4:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a18d6:	4618      	mov	r0, r3
   a18d8:	3708      	adds	r7, #8
   a18da:	46bd      	mov	sp, r7
   a18dc:	bd80      	pop	{r7, pc}
   a18de:	bf00      	nop
   a18e0:	20070c3c 	.word	0x20070c3c
   a18e4:	00083041 	.word	0x00083041

000a18e8 <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a18e8:	b580      	push	{r7, lr}
   a18ea:	b084      	sub	sp, #16
   a18ec:	af00      	add	r7, sp, #0
   a18ee:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a18f0:	2300      	movs	r3, #0
   a18f2:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a18f4:	2300      	movs	r3, #0
   a18f6:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a18f8:	234a      	movs	r3, #74	; 0x4a
   a18fa:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a18fc:	2300      	movs	r3, #0
   a18fe:	73bb      	strb	r3, [r7, #14]
   a1900:	e0bc      	b.n	a1a7c <Cl_standby_UpdateAlarmTable+0x194>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a1902:	7bba      	ldrb	r2, [r7, #14]
   a1904:	4962      	ldr	r1, [pc, #392]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1906:	4613      	mov	r3, r2
   a1908:	00db      	lsls	r3, r3, #3
   a190a:	4413      	add	r3, r2
   a190c:	440b      	add	r3, r1
   a190e:	7818      	ldrb	r0, [r3, #0]
   a1910:	7bba      	ldrb	r2, [r7, #14]
   a1912:	4613      	mov	r3, r2
   a1914:	00db      	lsls	r3, r3, #3
   a1916:	4413      	add	r3, r2
   a1918:	4a5d      	ldr	r2, [pc, #372]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a191a:	4413      	add	r3, r2
   a191c:	3304      	adds	r3, #4
   a191e:	4619      	mov	r1, r3
   a1920:	4b5c      	ldr	r3, [pc, #368]	; (a1a94 <Cl_standby_UpdateAlarmTable+0x1ac>)
   a1922:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a1924:	7bba      	ldrb	r2, [r7, #14]
   a1926:	495a      	ldr	r1, [pc, #360]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1928:	4613      	mov	r3, r2
   a192a:	00db      	lsls	r3, r3, #3
   a192c:	4413      	add	r3, r2
   a192e:	440b      	add	r3, r1
   a1930:	3304      	adds	r3, #4
   a1932:	781b      	ldrb	r3, [r3, #0]
   a1934:	2b00      	cmp	r3, #0
   a1936:	d076      	beq.n	a1a26 <Cl_standby_UpdateAlarmTable+0x13e>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a1938:	7bba      	ldrb	r2, [r7, #14]
   a193a:	4955      	ldr	r1, [pc, #340]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a193c:	4613      	mov	r3, r2
   a193e:	00db      	lsls	r3, r3, #3
   a1940:	4413      	add	r3, r2
   a1942:	440b      	add	r3, r1
   a1944:	3305      	adds	r3, #5
   a1946:	781b      	ldrb	r3, [r3, #0]
   a1948:	f083 0301 	eor.w	r3, r3, #1
   a194c:	b2db      	uxtb	r3, r3
   a194e:	2b00      	cmp	r3, #0
   a1950:	d01e      	beq.n	a1990 <Cl_standby_UpdateAlarmTable+0xa8>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a1952:	7bba      	ldrb	r2, [r7, #14]
   a1954:	494e      	ldr	r1, [pc, #312]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1956:	4613      	mov	r3, r2
   a1958:	00db      	lsls	r3, r3, #3
   a195a:	4413      	add	r3, r2
   a195c:	440b      	add	r3, r1
   a195e:	781b      	ldrb	r3, [r3, #0]
   a1960:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a1962:	2301      	movs	r3, #1
   a1964:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a1966:	2307      	movs	r3, #7
   a1968:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a196a:	f107 0108 	add.w	r1, r7, #8
   a196e:	7b7b      	ldrb	r3, [r7, #13]
   a1970:	2202      	movs	r2, #2
   a1972:	4618      	mov	r0, r3
   a1974:	4b48      	ldr	r3, [pc, #288]	; (a1a98 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a1976:	4798      	blx	r3
   a1978:	4603      	mov	r3, r0
   a197a:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a197c:	7bba      	ldrb	r2, [r7, #14]
   a197e:	4944      	ldr	r1, [pc, #272]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1980:	4613      	mov	r3, r2
   a1982:	00db      	lsls	r3, r3, #3
   a1984:	4413      	add	r3, r2
   a1986:	440b      	add	r3, r1
   a1988:	3305      	adds	r3, #5
   a198a:	2201      	movs	r2, #1
   a198c:	701a      	strb	r2, [r3, #0]
   a198e:	e072      	b.n	a1a76 <Cl_standby_UpdateAlarmTable+0x18e>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a1990:	7bba      	ldrb	r2, [r7, #14]
   a1992:	493f      	ldr	r1, [pc, #252]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1994:	4613      	mov	r3, r2
   a1996:	00db      	lsls	r3, r3, #3
   a1998:	4413      	add	r3, r2
   a199a:	440b      	add	r3, r1
   a199c:	3301      	adds	r3, #1
   a199e:	781b      	ldrb	r3, [r3, #0]
   a19a0:	3301      	adds	r3, #1
   a19a2:	b2d8      	uxtb	r0, r3
   a19a4:	493a      	ldr	r1, [pc, #232]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a19a6:	4613      	mov	r3, r2
   a19a8:	00db      	lsls	r3, r3, #3
   a19aa:	4413      	add	r3, r2
   a19ac:	440b      	add	r3, r1
   a19ae:	3301      	adds	r3, #1
   a19b0:	4602      	mov	r2, r0
   a19b2:	701a      	strb	r2, [r3, #0]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a19b4:	7bba      	ldrb	r2, [r7, #14]
   a19b6:	4936      	ldr	r1, [pc, #216]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a19b8:	4613      	mov	r3, r2
   a19ba:	00db      	lsls	r3, r3, #3
   a19bc:	4413      	add	r3, r2
   a19be:	440b      	add	r3, r1
   a19c0:	3303      	adds	r3, #3
   a19c2:	781b      	ldrb	r3, [r3, #0]
   a19c4:	3301      	adds	r3, #1
   a19c6:	b2d8      	uxtb	r0, r3
   a19c8:	4931      	ldr	r1, [pc, #196]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a19ca:	4613      	mov	r3, r2
   a19cc:	00db      	lsls	r3, r3, #3
   a19ce:	4413      	add	r3, r2
   a19d0:	440b      	add	r3, r1
   a19d2:	3303      	adds	r3, #3
   a19d4:	4602      	mov	r2, r0
   a19d6:	701a      	strb	r2, [r3, #0]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a19d8:	7bba      	ldrb	r2, [r7, #14]
   a19da:	492d      	ldr	r1, [pc, #180]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a19dc:	4613      	mov	r3, r2
   a19de:	00db      	lsls	r3, r3, #3
   a19e0:	4413      	add	r3, r2
   a19e2:	440b      	add	r3, r1
   a19e4:	3301      	adds	r3, #1
   a19e6:	781b      	ldrb	r3, [r3, #0]
   a19e8:	2b05      	cmp	r3, #5
   a19ea:	d908      	bls.n	a19fe <Cl_standby_UpdateAlarmTable+0x116>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a19ec:	7bba      	ldrb	r2, [r7, #14]
   a19ee:	4928      	ldr	r1, [pc, #160]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a19f0:	4613      	mov	r3, r2
   a19f2:	00db      	lsls	r3, r3, #3
   a19f4:	4413      	add	r3, r2
   a19f6:	440b      	add	r3, r1
   a19f8:	3303      	adds	r3, #3
   a19fa:	2200      	movs	r2, #0
   a19fc:	701a      	strb	r2, [r3, #0]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a19fe:	7bba      	ldrb	r2, [r7, #14]
   a1a00:	4923      	ldr	r1, [pc, #140]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1a02:	4613      	mov	r3, r2
   a1a04:	00db      	lsls	r3, r3, #3
   a1a06:	4413      	add	r3, r2
   a1a08:	440b      	add	r3, r1
   a1a0a:	3301      	adds	r3, #1
   a1a0c:	781b      	ldrb	r3, [r3, #0]
   a1a0e:	2b3b      	cmp	r3, #59	; 0x3b
   a1a10:	d931      	bls.n	a1a76 <Cl_standby_UpdateAlarmTable+0x18e>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a1a12:	7bba      	ldrb	r2, [r7, #14]
   a1a14:	491e      	ldr	r1, [pc, #120]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1a16:	4613      	mov	r3, r2
   a1a18:	00db      	lsls	r3, r3, #3
   a1a1a:	4413      	add	r3, r2
   a1a1c:	440b      	add	r3, r1
   a1a1e:	3301      	adds	r3, #1
   a1a20:	2200      	movs	r2, #0
   a1a22:	701a      	strb	r2, [r3, #0]
   a1a24:	e027      	b.n	a1a76 <Cl_standby_UpdateAlarmTable+0x18e>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a1a26:	7bba      	ldrb	r2, [r7, #14]
   a1a28:	4919      	ldr	r1, [pc, #100]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1a2a:	4613      	mov	r3, r2
   a1a2c:	00db      	lsls	r3, r3, #3
   a1a2e:	4413      	add	r3, r2
   a1a30:	440b      	add	r3, r1
   a1a32:	3305      	adds	r3, #5
   a1a34:	781b      	ldrb	r3, [r3, #0]
   a1a36:	2b00      	cmp	r3, #0
   a1a38:	d01d      	beq.n	a1a76 <Cl_standby_UpdateAlarmTable+0x18e>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a1a3a:	7bba      	ldrb	r2, [r7, #14]
   a1a3c:	4914      	ldr	r1, [pc, #80]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1a3e:	4613      	mov	r3, r2
   a1a40:	00db      	lsls	r3, r3, #3
   a1a42:	4413      	add	r3, r2
   a1a44:	440b      	add	r3, r1
   a1a46:	3305      	adds	r3, #5
   a1a48:	2200      	movs	r2, #0
   a1a4a:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   a1a4c:	2307      	movs	r3, #7
   a1a4e:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a1a50:	7bba      	ldrb	r2, [r7, #14]
   a1a52:	490f      	ldr	r1, [pc, #60]	; (a1a90 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a1a54:	4613      	mov	r3, r2
   a1a56:	00db      	lsls	r3, r3, #3
   a1a58:	4413      	add	r3, r2
   a1a5a:	440b      	add	r3, r1
   a1a5c:	781b      	ldrb	r3, [r3, #0]
   a1a5e:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a1a60:	2300      	movs	r3, #0
   a1a62:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a1a64:	f107 0108 	add.w	r1, r7, #8
   a1a68:	7b7b      	ldrb	r3, [r7, #13]
   a1a6a:	2202      	movs	r2, #2
   a1a6c:	4618      	mov	r0, r3
   a1a6e:	4b0a      	ldr	r3, [pc, #40]	; (a1a98 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a1a70:	4798      	blx	r3
   a1a72:	4603      	mov	r3, r0
   a1a74:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a1a76:	7bbb      	ldrb	r3, [r7, #14]
   a1a78:	3301      	adds	r3, #1
   a1a7a:	73bb      	strb	r3, [r7, #14]
   a1a7c:	7bbb      	ldrb	r3, [r7, #14]
   a1a7e:	2b03      	cmp	r3, #3
   a1a80:	f67f af3f 	bls.w	a1902 <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a1a84:	7bfb      	ldrb	r3, [r7, #15]
}
   a1a86:	4618      	mov	r0, r3
   a1a88:	3710      	adds	r7, #16
   a1a8a:	46bd      	mov	sp, r7
   a1a8c:	bd80      	pop	{r7, pc}
   a1a8e:	bf00      	nop
   a1a90:	20070c3c 	.word	0x20070c3c
   a1a94:	00083041 	.word	0x00083041
   a1a98:	00098601 	.word	0x00098601

000a1a9c <__aeabi_drsub>:
   a1a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a1aa0:	e002      	b.n	a1aa8 <__adddf3>
   a1aa2:	bf00      	nop

000a1aa4 <__aeabi_dsub>:
   a1aa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a1aa8 <__adddf3>:
   a1aa8:	b530      	push	{r4, r5, lr}
   a1aaa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a1aae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a1ab2:	ea94 0f05 	teq	r4, r5
   a1ab6:	bf08      	it	eq
   a1ab8:	ea90 0f02 	teqeq	r0, r2
   a1abc:	bf1f      	itttt	ne
   a1abe:	ea54 0c00 	orrsne.w	ip, r4, r0
   a1ac2:	ea55 0c02 	orrsne.w	ip, r5, r2
   a1ac6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a1aca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a1ace:	f000 80e2 	beq.w	a1c96 <__adddf3+0x1ee>
   a1ad2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a1ad6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a1ada:	bfb8      	it	lt
   a1adc:	426d      	neglt	r5, r5
   a1ade:	dd0c      	ble.n	a1afa <__adddf3+0x52>
   a1ae0:	442c      	add	r4, r5
   a1ae2:	ea80 0202 	eor.w	r2, r0, r2
   a1ae6:	ea81 0303 	eor.w	r3, r1, r3
   a1aea:	ea82 0000 	eor.w	r0, r2, r0
   a1aee:	ea83 0101 	eor.w	r1, r3, r1
   a1af2:	ea80 0202 	eor.w	r2, r0, r2
   a1af6:	ea81 0303 	eor.w	r3, r1, r3
   a1afa:	2d36      	cmp	r5, #54	; 0x36
   a1afc:	bf88      	it	hi
   a1afe:	bd30      	pophi	{r4, r5, pc}
   a1b00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a1b04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a1b08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a1b0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a1b10:	d002      	beq.n	a1b18 <__adddf3+0x70>
   a1b12:	4240      	negs	r0, r0
   a1b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a1b18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a1b1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a1b20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a1b24:	d002      	beq.n	a1b2c <__adddf3+0x84>
   a1b26:	4252      	negs	r2, r2
   a1b28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a1b2c:	ea94 0f05 	teq	r4, r5
   a1b30:	f000 80a7 	beq.w	a1c82 <__adddf3+0x1da>
   a1b34:	f1a4 0401 	sub.w	r4, r4, #1
   a1b38:	f1d5 0e20 	rsbs	lr, r5, #32
   a1b3c:	db0d      	blt.n	a1b5a <__adddf3+0xb2>
   a1b3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   a1b42:	fa22 f205 	lsr.w	r2, r2, r5
   a1b46:	1880      	adds	r0, r0, r2
   a1b48:	f141 0100 	adc.w	r1, r1, #0
   a1b4c:	fa03 f20e 	lsl.w	r2, r3, lr
   a1b50:	1880      	adds	r0, r0, r2
   a1b52:	fa43 f305 	asr.w	r3, r3, r5
   a1b56:	4159      	adcs	r1, r3
   a1b58:	e00e      	b.n	a1b78 <__adddf3+0xd0>
   a1b5a:	f1a5 0520 	sub.w	r5, r5, #32
   a1b5e:	f10e 0e20 	add.w	lr, lr, #32
   a1b62:	2a01      	cmp	r2, #1
   a1b64:	fa03 fc0e 	lsl.w	ip, r3, lr
   a1b68:	bf28      	it	cs
   a1b6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   a1b6e:	fa43 f305 	asr.w	r3, r3, r5
   a1b72:	18c0      	adds	r0, r0, r3
   a1b74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a1b78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a1b7c:	d507      	bpl.n	a1b8e <__adddf3+0xe6>
   a1b7e:	f04f 0e00 	mov.w	lr, #0
   a1b82:	f1dc 0c00 	rsbs	ip, ip, #0
   a1b86:	eb7e 0000 	sbcs.w	r0, lr, r0
   a1b8a:	eb6e 0101 	sbc.w	r1, lr, r1
   a1b8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a1b92:	d31b      	bcc.n	a1bcc <__adddf3+0x124>
   a1b94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a1b98:	d30c      	bcc.n	a1bb4 <__adddf3+0x10c>
   a1b9a:	0849      	lsrs	r1, r1, #1
   a1b9c:	ea5f 0030 	movs.w	r0, r0, rrx
   a1ba0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a1ba4:	f104 0401 	add.w	r4, r4, #1
   a1ba8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a1bac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a1bb0:	f080 809a 	bcs.w	a1ce8 <__adddf3+0x240>
   a1bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a1bb8:	bf08      	it	eq
   a1bba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a1bbe:	f150 0000 	adcs.w	r0, r0, #0
   a1bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a1bc6:	ea41 0105 	orr.w	r1, r1, r5
   a1bca:	bd30      	pop	{r4, r5, pc}
   a1bcc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a1bd0:	4140      	adcs	r0, r0
   a1bd2:	eb41 0101 	adc.w	r1, r1, r1
   a1bd6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a1bda:	f1a4 0401 	sub.w	r4, r4, #1
   a1bde:	d1e9      	bne.n	a1bb4 <__adddf3+0x10c>
   a1be0:	f091 0f00 	teq	r1, #0
   a1be4:	bf04      	itt	eq
   a1be6:	4601      	moveq	r1, r0
   a1be8:	2000      	moveq	r0, #0
   a1bea:	fab1 f381 	clz	r3, r1
   a1bee:	bf08      	it	eq
   a1bf0:	3320      	addeq	r3, #32
   a1bf2:	f1a3 030b 	sub.w	r3, r3, #11
   a1bf6:	f1b3 0220 	subs.w	r2, r3, #32
   a1bfa:	da0c      	bge.n	a1c16 <__adddf3+0x16e>
   a1bfc:	320c      	adds	r2, #12
   a1bfe:	dd08      	ble.n	a1c12 <__adddf3+0x16a>
   a1c00:	f102 0c14 	add.w	ip, r2, #20
   a1c04:	f1c2 020c 	rsb	r2, r2, #12
   a1c08:	fa01 f00c 	lsl.w	r0, r1, ip
   a1c0c:	fa21 f102 	lsr.w	r1, r1, r2
   a1c10:	e00c      	b.n	a1c2c <__adddf3+0x184>
   a1c12:	f102 0214 	add.w	r2, r2, #20
   a1c16:	bfd8      	it	le
   a1c18:	f1c2 0c20 	rsble	ip, r2, #32
   a1c1c:	fa01 f102 	lsl.w	r1, r1, r2
   a1c20:	fa20 fc0c 	lsr.w	ip, r0, ip
   a1c24:	bfdc      	itt	le
   a1c26:	ea41 010c 	orrle.w	r1, r1, ip
   a1c2a:	4090      	lslle	r0, r2
   a1c2c:	1ae4      	subs	r4, r4, r3
   a1c2e:	bfa2      	ittt	ge
   a1c30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a1c34:	4329      	orrge	r1, r5
   a1c36:	bd30      	popge	{r4, r5, pc}
   a1c38:	ea6f 0404 	mvn.w	r4, r4
   a1c3c:	3c1f      	subs	r4, #31
   a1c3e:	da1c      	bge.n	a1c7a <__adddf3+0x1d2>
   a1c40:	340c      	adds	r4, #12
   a1c42:	dc0e      	bgt.n	a1c62 <__adddf3+0x1ba>
   a1c44:	f104 0414 	add.w	r4, r4, #20
   a1c48:	f1c4 0220 	rsb	r2, r4, #32
   a1c4c:	fa20 f004 	lsr.w	r0, r0, r4
   a1c50:	fa01 f302 	lsl.w	r3, r1, r2
   a1c54:	ea40 0003 	orr.w	r0, r0, r3
   a1c58:	fa21 f304 	lsr.w	r3, r1, r4
   a1c5c:	ea45 0103 	orr.w	r1, r5, r3
   a1c60:	bd30      	pop	{r4, r5, pc}
   a1c62:	f1c4 040c 	rsb	r4, r4, #12
   a1c66:	f1c4 0220 	rsb	r2, r4, #32
   a1c6a:	fa20 f002 	lsr.w	r0, r0, r2
   a1c6e:	fa01 f304 	lsl.w	r3, r1, r4
   a1c72:	ea40 0003 	orr.w	r0, r0, r3
   a1c76:	4629      	mov	r1, r5
   a1c78:	bd30      	pop	{r4, r5, pc}
   a1c7a:	fa21 f004 	lsr.w	r0, r1, r4
   a1c7e:	4629      	mov	r1, r5
   a1c80:	bd30      	pop	{r4, r5, pc}
   a1c82:	f094 0f00 	teq	r4, #0
   a1c86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a1c8a:	bf06      	itte	eq
   a1c8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a1c90:	3401      	addeq	r4, #1
   a1c92:	3d01      	subne	r5, #1
   a1c94:	e74e      	b.n	a1b34 <__adddf3+0x8c>
   a1c96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a1c9a:	bf18      	it	ne
   a1c9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a1ca0:	d029      	beq.n	a1cf6 <__adddf3+0x24e>
   a1ca2:	ea94 0f05 	teq	r4, r5
   a1ca6:	bf08      	it	eq
   a1ca8:	ea90 0f02 	teqeq	r0, r2
   a1cac:	d005      	beq.n	a1cba <__adddf3+0x212>
   a1cae:	ea54 0c00 	orrs.w	ip, r4, r0
   a1cb2:	bf04      	itt	eq
   a1cb4:	4619      	moveq	r1, r3
   a1cb6:	4610      	moveq	r0, r2
   a1cb8:	bd30      	pop	{r4, r5, pc}
   a1cba:	ea91 0f03 	teq	r1, r3
   a1cbe:	bf1e      	ittt	ne
   a1cc0:	2100      	movne	r1, #0
   a1cc2:	2000      	movne	r0, #0
   a1cc4:	bd30      	popne	{r4, r5, pc}
   a1cc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a1cca:	d105      	bne.n	a1cd8 <__adddf3+0x230>
   a1ccc:	0040      	lsls	r0, r0, #1
   a1cce:	4149      	adcs	r1, r1
   a1cd0:	bf28      	it	cs
   a1cd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a1cd6:	bd30      	pop	{r4, r5, pc}
   a1cd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a1cdc:	bf3c      	itt	cc
   a1cde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a1ce2:	bd30      	popcc	{r4, r5, pc}
   a1ce4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a1ce8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a1cec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a1cf0:	f04f 0000 	mov.w	r0, #0
   a1cf4:	bd30      	pop	{r4, r5, pc}
   a1cf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a1cfa:	bf1a      	itte	ne
   a1cfc:	4619      	movne	r1, r3
   a1cfe:	4610      	movne	r0, r2
   a1d00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a1d04:	bf1c      	itt	ne
   a1d06:	460b      	movne	r3, r1
   a1d08:	4602      	movne	r2, r0
   a1d0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a1d0e:	bf06      	itte	eq
   a1d10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a1d14:	ea91 0f03 	teqeq	r1, r3
   a1d18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a1d1c:	bd30      	pop	{r4, r5, pc}
   a1d1e:	bf00      	nop

000a1d20 <__aeabi_ui2d>:
   a1d20:	f090 0f00 	teq	r0, #0
   a1d24:	bf04      	itt	eq
   a1d26:	2100      	moveq	r1, #0
   a1d28:	4770      	bxeq	lr
   a1d2a:	b530      	push	{r4, r5, lr}
   a1d2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a1d30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a1d34:	f04f 0500 	mov.w	r5, #0
   a1d38:	f04f 0100 	mov.w	r1, #0
   a1d3c:	e750      	b.n	a1be0 <__adddf3+0x138>
   a1d3e:	bf00      	nop

000a1d40 <__aeabi_i2d>:
   a1d40:	f090 0f00 	teq	r0, #0
   a1d44:	bf04      	itt	eq
   a1d46:	2100      	moveq	r1, #0
   a1d48:	4770      	bxeq	lr
   a1d4a:	b530      	push	{r4, r5, lr}
   a1d4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a1d50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a1d54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a1d58:	bf48      	it	mi
   a1d5a:	4240      	negmi	r0, r0
   a1d5c:	f04f 0100 	mov.w	r1, #0
   a1d60:	e73e      	b.n	a1be0 <__adddf3+0x138>
   a1d62:	bf00      	nop

000a1d64 <__aeabi_f2d>:
   a1d64:	0042      	lsls	r2, r0, #1
   a1d66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a1d6a:	ea4f 0131 	mov.w	r1, r1, rrx
   a1d6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a1d72:	bf1f      	itttt	ne
   a1d74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a1d78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a1d7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a1d80:	4770      	bxne	lr
   a1d82:	f092 0f00 	teq	r2, #0
   a1d86:	bf14      	ite	ne
   a1d88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a1d8c:	4770      	bxeq	lr
   a1d8e:	b530      	push	{r4, r5, lr}
   a1d90:	f44f 7460 	mov.w	r4, #896	; 0x380
   a1d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a1d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a1d9c:	e720      	b.n	a1be0 <__adddf3+0x138>
   a1d9e:	bf00      	nop

000a1da0 <__aeabi_ul2d>:
   a1da0:	ea50 0201 	orrs.w	r2, r0, r1
   a1da4:	bf08      	it	eq
   a1da6:	4770      	bxeq	lr
   a1da8:	b530      	push	{r4, r5, lr}
   a1daa:	f04f 0500 	mov.w	r5, #0
   a1dae:	e00a      	b.n	a1dc6 <__aeabi_l2d+0x16>

000a1db0 <__aeabi_l2d>:
   a1db0:	ea50 0201 	orrs.w	r2, r0, r1
   a1db4:	bf08      	it	eq
   a1db6:	4770      	bxeq	lr
   a1db8:	b530      	push	{r4, r5, lr}
   a1dba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a1dbe:	d502      	bpl.n	a1dc6 <__aeabi_l2d+0x16>
   a1dc0:	4240      	negs	r0, r0
   a1dc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a1dc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a1dca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a1dce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a1dd2:	f43f aedc 	beq.w	a1b8e <__adddf3+0xe6>
   a1dd6:	f04f 0203 	mov.w	r2, #3
   a1dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a1dde:	bf18      	it	ne
   a1de0:	3203      	addne	r2, #3
   a1de2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a1de6:	bf18      	it	ne
   a1de8:	3203      	addne	r2, #3
   a1dea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a1dee:	f1c2 0320 	rsb	r3, r2, #32
   a1df2:	fa00 fc03 	lsl.w	ip, r0, r3
   a1df6:	fa20 f002 	lsr.w	r0, r0, r2
   a1dfa:	fa01 fe03 	lsl.w	lr, r1, r3
   a1dfe:	ea40 000e 	orr.w	r0, r0, lr
   a1e02:	fa21 f102 	lsr.w	r1, r1, r2
   a1e06:	4414      	add	r4, r2
   a1e08:	e6c1      	b.n	a1b8e <__adddf3+0xe6>
   a1e0a:	bf00      	nop

000a1e0c <__aeabi_dmul>:
   a1e0c:	b570      	push	{r4, r5, r6, lr}
   a1e0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a1e12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a1e16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a1e1a:	bf1d      	ittte	ne
   a1e1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a1e20:	ea94 0f0c 	teqne	r4, ip
   a1e24:	ea95 0f0c 	teqne	r5, ip
   a1e28:	f000 f8de 	bleq	a1fe8 <__aeabi_dmul+0x1dc>
   a1e2c:	442c      	add	r4, r5
   a1e2e:	ea81 0603 	eor.w	r6, r1, r3
   a1e32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a1e36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a1e3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a1e3e:	bf18      	it	ne
   a1e40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a1e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a1e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a1e4c:	d038      	beq.n	a1ec0 <__aeabi_dmul+0xb4>
   a1e4e:	fba0 ce02 	umull	ip, lr, r0, r2
   a1e52:	f04f 0500 	mov.w	r5, #0
   a1e56:	fbe1 e502 	umlal	lr, r5, r1, r2
   a1e5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a1e5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   a1e62:	f04f 0600 	mov.w	r6, #0
   a1e66:	fbe1 5603 	umlal	r5, r6, r1, r3
   a1e6a:	f09c 0f00 	teq	ip, #0
   a1e6e:	bf18      	it	ne
   a1e70:	f04e 0e01 	orrne.w	lr, lr, #1
   a1e74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a1e78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a1e7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a1e80:	d204      	bcs.n	a1e8c <__aeabi_dmul+0x80>
   a1e82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a1e86:	416d      	adcs	r5, r5
   a1e88:	eb46 0606 	adc.w	r6, r6, r6
   a1e8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a1e90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a1e94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a1e98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a1e9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a1ea0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a1ea4:	bf88      	it	hi
   a1ea6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a1eaa:	d81e      	bhi.n	a1eea <__aeabi_dmul+0xde>
   a1eac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a1eb0:	bf08      	it	eq
   a1eb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a1eb6:	f150 0000 	adcs.w	r0, r0, #0
   a1eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a1ebe:	bd70      	pop	{r4, r5, r6, pc}
   a1ec0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a1ec4:	ea46 0101 	orr.w	r1, r6, r1
   a1ec8:	ea40 0002 	orr.w	r0, r0, r2
   a1ecc:	ea81 0103 	eor.w	r1, r1, r3
   a1ed0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a1ed4:	bfc2      	ittt	gt
   a1ed6:	ebd4 050c 	rsbsgt	r5, r4, ip
   a1eda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a1ede:	bd70      	popgt	{r4, r5, r6, pc}
   a1ee0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a1ee4:	f04f 0e00 	mov.w	lr, #0
   a1ee8:	3c01      	subs	r4, #1
   a1eea:	f300 80ab 	bgt.w	a2044 <__aeabi_dmul+0x238>
   a1eee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a1ef2:	bfde      	ittt	le
   a1ef4:	2000      	movle	r0, #0
   a1ef6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a1efa:	bd70      	pople	{r4, r5, r6, pc}
   a1efc:	f1c4 0400 	rsb	r4, r4, #0
   a1f00:	3c20      	subs	r4, #32
   a1f02:	da35      	bge.n	a1f70 <__aeabi_dmul+0x164>
   a1f04:	340c      	adds	r4, #12
   a1f06:	dc1b      	bgt.n	a1f40 <__aeabi_dmul+0x134>
   a1f08:	f104 0414 	add.w	r4, r4, #20
   a1f0c:	f1c4 0520 	rsb	r5, r4, #32
   a1f10:	fa00 f305 	lsl.w	r3, r0, r5
   a1f14:	fa20 f004 	lsr.w	r0, r0, r4
   a1f18:	fa01 f205 	lsl.w	r2, r1, r5
   a1f1c:	ea40 0002 	orr.w	r0, r0, r2
   a1f20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a1f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a1f28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a1f2c:	fa21 f604 	lsr.w	r6, r1, r4
   a1f30:	eb42 0106 	adc.w	r1, r2, r6
   a1f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a1f38:	bf08      	it	eq
   a1f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a1f3e:	bd70      	pop	{r4, r5, r6, pc}
   a1f40:	f1c4 040c 	rsb	r4, r4, #12
   a1f44:	f1c4 0520 	rsb	r5, r4, #32
   a1f48:	fa00 f304 	lsl.w	r3, r0, r4
   a1f4c:	fa20 f005 	lsr.w	r0, r0, r5
   a1f50:	fa01 f204 	lsl.w	r2, r1, r4
   a1f54:	ea40 0002 	orr.w	r0, r0, r2
   a1f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a1f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a1f60:	f141 0100 	adc.w	r1, r1, #0
   a1f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a1f68:	bf08      	it	eq
   a1f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a1f6e:	bd70      	pop	{r4, r5, r6, pc}
   a1f70:	f1c4 0520 	rsb	r5, r4, #32
   a1f74:	fa00 f205 	lsl.w	r2, r0, r5
   a1f78:	ea4e 0e02 	orr.w	lr, lr, r2
   a1f7c:	fa20 f304 	lsr.w	r3, r0, r4
   a1f80:	fa01 f205 	lsl.w	r2, r1, r5
   a1f84:	ea43 0302 	orr.w	r3, r3, r2
   a1f88:	fa21 f004 	lsr.w	r0, r1, r4
   a1f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a1f90:	fa21 f204 	lsr.w	r2, r1, r4
   a1f94:	ea20 0002 	bic.w	r0, r0, r2
   a1f98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a1f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a1fa0:	bf08      	it	eq
   a1fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a1fa6:	bd70      	pop	{r4, r5, r6, pc}
   a1fa8:	f094 0f00 	teq	r4, #0
   a1fac:	d10f      	bne.n	a1fce <__aeabi_dmul+0x1c2>
   a1fae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a1fb2:	0040      	lsls	r0, r0, #1
   a1fb4:	eb41 0101 	adc.w	r1, r1, r1
   a1fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a1fbc:	bf08      	it	eq
   a1fbe:	3c01      	subeq	r4, #1
   a1fc0:	d0f7      	beq.n	a1fb2 <__aeabi_dmul+0x1a6>
   a1fc2:	ea41 0106 	orr.w	r1, r1, r6
   a1fc6:	f095 0f00 	teq	r5, #0
   a1fca:	bf18      	it	ne
   a1fcc:	4770      	bxne	lr
   a1fce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a1fd2:	0052      	lsls	r2, r2, #1
   a1fd4:	eb43 0303 	adc.w	r3, r3, r3
   a1fd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a1fdc:	bf08      	it	eq
   a1fde:	3d01      	subeq	r5, #1
   a1fe0:	d0f7      	beq.n	a1fd2 <__aeabi_dmul+0x1c6>
   a1fe2:	ea43 0306 	orr.w	r3, r3, r6
   a1fe6:	4770      	bx	lr
   a1fe8:	ea94 0f0c 	teq	r4, ip
   a1fec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a1ff0:	bf18      	it	ne
   a1ff2:	ea95 0f0c 	teqne	r5, ip
   a1ff6:	d00c      	beq.n	a2012 <__aeabi_dmul+0x206>
   a1ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a1ffc:	bf18      	it	ne
   a1ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a2002:	d1d1      	bne.n	a1fa8 <__aeabi_dmul+0x19c>
   a2004:	ea81 0103 	eor.w	r1, r1, r3
   a2008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a200c:	f04f 0000 	mov.w	r0, #0
   a2010:	bd70      	pop	{r4, r5, r6, pc}
   a2012:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a2016:	bf06      	itte	eq
   a2018:	4610      	moveq	r0, r2
   a201a:	4619      	moveq	r1, r3
   a201c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a2020:	d019      	beq.n	a2056 <__aeabi_dmul+0x24a>
   a2022:	ea94 0f0c 	teq	r4, ip
   a2026:	d102      	bne.n	a202e <__aeabi_dmul+0x222>
   a2028:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a202c:	d113      	bne.n	a2056 <__aeabi_dmul+0x24a>
   a202e:	ea95 0f0c 	teq	r5, ip
   a2032:	d105      	bne.n	a2040 <__aeabi_dmul+0x234>
   a2034:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a2038:	bf1c      	itt	ne
   a203a:	4610      	movne	r0, r2
   a203c:	4619      	movne	r1, r3
   a203e:	d10a      	bne.n	a2056 <__aeabi_dmul+0x24a>
   a2040:	ea81 0103 	eor.w	r1, r1, r3
   a2044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a2048:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a204c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a2050:	f04f 0000 	mov.w	r0, #0
   a2054:	bd70      	pop	{r4, r5, r6, pc}
   a2056:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a205a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a205e:	bd70      	pop	{r4, r5, r6, pc}

000a2060 <__aeabi_ddiv>:
   a2060:	b570      	push	{r4, r5, r6, lr}
   a2062:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a2066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a206a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a206e:	bf1d      	ittte	ne
   a2070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a2074:	ea94 0f0c 	teqne	r4, ip
   a2078:	ea95 0f0c 	teqne	r5, ip
   a207c:	f000 f8a7 	bleq	a21ce <__aeabi_ddiv+0x16e>
   a2080:	eba4 0405 	sub.w	r4, r4, r5
   a2084:	ea81 0e03 	eor.w	lr, r1, r3
   a2088:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a208c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a2090:	f000 8088 	beq.w	a21a4 <__aeabi_ddiv+0x144>
   a2094:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a2098:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a209c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a20a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a20a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a20a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a20ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a20b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a20b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a20b8:	429d      	cmp	r5, r3
   a20ba:	bf08      	it	eq
   a20bc:	4296      	cmpeq	r6, r2
   a20be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a20c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a20c6:	d202      	bcs.n	a20ce <__aeabi_ddiv+0x6e>
   a20c8:	085b      	lsrs	r3, r3, #1
   a20ca:	ea4f 0232 	mov.w	r2, r2, rrx
   a20ce:	1ab6      	subs	r6, r6, r2
   a20d0:	eb65 0503 	sbc.w	r5, r5, r3
   a20d4:	085b      	lsrs	r3, r3, #1
   a20d6:	ea4f 0232 	mov.w	r2, r2, rrx
   a20da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a20de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a20e2:	ebb6 0e02 	subs.w	lr, r6, r2
   a20e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   a20ea:	bf22      	ittt	cs
   a20ec:	1ab6      	subcs	r6, r6, r2
   a20ee:	4675      	movcs	r5, lr
   a20f0:	ea40 000c 	orrcs.w	r0, r0, ip
   a20f4:	085b      	lsrs	r3, r3, #1
   a20f6:	ea4f 0232 	mov.w	r2, r2, rrx
   a20fa:	ebb6 0e02 	subs.w	lr, r6, r2
   a20fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2102:	bf22      	ittt	cs
   a2104:	1ab6      	subcs	r6, r6, r2
   a2106:	4675      	movcs	r5, lr
   a2108:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a210c:	085b      	lsrs	r3, r3, #1
   a210e:	ea4f 0232 	mov.w	r2, r2, rrx
   a2112:	ebb6 0e02 	subs.w	lr, r6, r2
   a2116:	eb75 0e03 	sbcs.w	lr, r5, r3
   a211a:	bf22      	ittt	cs
   a211c:	1ab6      	subcs	r6, r6, r2
   a211e:	4675      	movcs	r5, lr
   a2120:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a2124:	085b      	lsrs	r3, r3, #1
   a2126:	ea4f 0232 	mov.w	r2, r2, rrx
   a212a:	ebb6 0e02 	subs.w	lr, r6, r2
   a212e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2132:	bf22      	ittt	cs
   a2134:	1ab6      	subcs	r6, r6, r2
   a2136:	4675      	movcs	r5, lr
   a2138:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a213c:	ea55 0e06 	orrs.w	lr, r5, r6
   a2140:	d018      	beq.n	a2174 <__aeabi_ddiv+0x114>
   a2142:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a2146:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a214a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a214e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a2152:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a2156:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a215a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a215e:	d1c0      	bne.n	a20e2 <__aeabi_ddiv+0x82>
   a2160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a2164:	d10b      	bne.n	a217e <__aeabi_ddiv+0x11e>
   a2166:	ea41 0100 	orr.w	r1, r1, r0
   a216a:	f04f 0000 	mov.w	r0, #0
   a216e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a2172:	e7b6      	b.n	a20e2 <__aeabi_ddiv+0x82>
   a2174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a2178:	bf04      	itt	eq
   a217a:	4301      	orreq	r1, r0
   a217c:	2000      	moveq	r0, #0
   a217e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a2182:	bf88      	it	hi
   a2184:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a2188:	f63f aeaf 	bhi.w	a1eea <__aeabi_dmul+0xde>
   a218c:	ebb5 0c03 	subs.w	ip, r5, r3
   a2190:	bf04      	itt	eq
   a2192:	ebb6 0c02 	subseq.w	ip, r6, r2
   a2196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a219a:	f150 0000 	adcs.w	r0, r0, #0
   a219e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a21a2:	bd70      	pop	{r4, r5, r6, pc}
   a21a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a21a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a21ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a21b0:	bfc2      	ittt	gt
   a21b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   a21b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a21ba:	bd70      	popgt	{r4, r5, r6, pc}
   a21bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a21c0:	f04f 0e00 	mov.w	lr, #0
   a21c4:	3c01      	subs	r4, #1
   a21c6:	e690      	b.n	a1eea <__aeabi_dmul+0xde>
   a21c8:	ea45 0e06 	orr.w	lr, r5, r6
   a21cc:	e68d      	b.n	a1eea <__aeabi_dmul+0xde>
   a21ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a21d2:	ea94 0f0c 	teq	r4, ip
   a21d6:	bf08      	it	eq
   a21d8:	ea95 0f0c 	teqeq	r5, ip
   a21dc:	f43f af3b 	beq.w	a2056 <__aeabi_dmul+0x24a>
   a21e0:	ea94 0f0c 	teq	r4, ip
   a21e4:	d10a      	bne.n	a21fc <__aeabi_ddiv+0x19c>
   a21e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a21ea:	f47f af34 	bne.w	a2056 <__aeabi_dmul+0x24a>
   a21ee:	ea95 0f0c 	teq	r5, ip
   a21f2:	f47f af25 	bne.w	a2040 <__aeabi_dmul+0x234>
   a21f6:	4610      	mov	r0, r2
   a21f8:	4619      	mov	r1, r3
   a21fa:	e72c      	b.n	a2056 <__aeabi_dmul+0x24a>
   a21fc:	ea95 0f0c 	teq	r5, ip
   a2200:	d106      	bne.n	a2210 <__aeabi_ddiv+0x1b0>
   a2202:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a2206:	f43f aefd 	beq.w	a2004 <__aeabi_dmul+0x1f8>
   a220a:	4610      	mov	r0, r2
   a220c:	4619      	mov	r1, r3
   a220e:	e722      	b.n	a2056 <__aeabi_dmul+0x24a>
   a2210:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a2214:	bf18      	it	ne
   a2216:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a221a:	f47f aec5 	bne.w	a1fa8 <__aeabi_dmul+0x19c>
   a221e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a2222:	f47f af0d 	bne.w	a2040 <__aeabi_dmul+0x234>
   a2226:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a222a:	f47f aeeb 	bne.w	a2004 <__aeabi_dmul+0x1f8>
   a222e:	e712      	b.n	a2056 <__aeabi_dmul+0x24a>

000a2230 <__gedf2>:
   a2230:	f04f 3cff 	mov.w	ip, #4294967295
   a2234:	e006      	b.n	a2244 <__cmpdf2+0x4>
   a2236:	bf00      	nop

000a2238 <__ledf2>:
   a2238:	f04f 0c01 	mov.w	ip, #1
   a223c:	e002      	b.n	a2244 <__cmpdf2+0x4>
   a223e:	bf00      	nop

000a2240 <__cmpdf2>:
   a2240:	f04f 0c01 	mov.w	ip, #1
   a2244:	f84d cd04 	str.w	ip, [sp, #-4]!
   a2248:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a224c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a2250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a2254:	bf18      	it	ne
   a2256:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a225a:	d01b      	beq.n	a2294 <__cmpdf2+0x54>
   a225c:	b001      	add	sp, #4
   a225e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a2262:	bf0c      	ite	eq
   a2264:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a2268:	ea91 0f03 	teqne	r1, r3
   a226c:	bf02      	ittt	eq
   a226e:	ea90 0f02 	teqeq	r0, r2
   a2272:	2000      	moveq	r0, #0
   a2274:	4770      	bxeq	lr
   a2276:	f110 0f00 	cmn.w	r0, #0
   a227a:	ea91 0f03 	teq	r1, r3
   a227e:	bf58      	it	pl
   a2280:	4299      	cmppl	r1, r3
   a2282:	bf08      	it	eq
   a2284:	4290      	cmpeq	r0, r2
   a2286:	bf2c      	ite	cs
   a2288:	17d8      	asrcs	r0, r3, #31
   a228a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a228e:	f040 0001 	orr.w	r0, r0, #1
   a2292:	4770      	bx	lr
   a2294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a2298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a229c:	d102      	bne.n	a22a4 <__cmpdf2+0x64>
   a229e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a22a2:	d107      	bne.n	a22b4 <__cmpdf2+0x74>
   a22a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a22a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a22ac:	d1d6      	bne.n	a225c <__cmpdf2+0x1c>
   a22ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a22b2:	d0d3      	beq.n	a225c <__cmpdf2+0x1c>
   a22b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   a22b8:	4770      	bx	lr
   a22ba:	bf00      	nop

000a22bc <__aeabi_cdrcmple>:
   a22bc:	4684      	mov	ip, r0
   a22be:	4610      	mov	r0, r2
   a22c0:	4662      	mov	r2, ip
   a22c2:	468c      	mov	ip, r1
   a22c4:	4619      	mov	r1, r3
   a22c6:	4663      	mov	r3, ip
   a22c8:	e000      	b.n	a22cc <__aeabi_cdcmpeq>
   a22ca:	bf00      	nop

000a22cc <__aeabi_cdcmpeq>:
   a22cc:	b501      	push	{r0, lr}
   a22ce:	f7ff ffb7 	bl	a2240 <__cmpdf2>
   a22d2:	2800      	cmp	r0, #0
   a22d4:	bf48      	it	mi
   a22d6:	f110 0f00 	cmnmi.w	r0, #0
   a22da:	bd01      	pop	{r0, pc}

000a22dc <__aeabi_dcmpeq>:
   a22dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a22e0:	f7ff fff4 	bl	a22cc <__aeabi_cdcmpeq>
   a22e4:	bf0c      	ite	eq
   a22e6:	2001      	moveq	r0, #1
   a22e8:	2000      	movne	r0, #0
   a22ea:	f85d fb08 	ldr.w	pc, [sp], #8
   a22ee:	bf00      	nop

000a22f0 <__aeabi_dcmplt>:
   a22f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a22f4:	f7ff ffea 	bl	a22cc <__aeabi_cdcmpeq>
   a22f8:	bf34      	ite	cc
   a22fa:	2001      	movcc	r0, #1
   a22fc:	2000      	movcs	r0, #0
   a22fe:	f85d fb08 	ldr.w	pc, [sp], #8
   a2302:	bf00      	nop

000a2304 <__aeabi_dcmple>:
   a2304:	f84d ed08 	str.w	lr, [sp, #-8]!
   a2308:	f7ff ffe0 	bl	a22cc <__aeabi_cdcmpeq>
   a230c:	bf94      	ite	ls
   a230e:	2001      	movls	r0, #1
   a2310:	2000      	movhi	r0, #0
   a2312:	f85d fb08 	ldr.w	pc, [sp], #8
   a2316:	bf00      	nop

000a2318 <__aeabi_dcmpge>:
   a2318:	f84d ed08 	str.w	lr, [sp, #-8]!
   a231c:	f7ff ffce 	bl	a22bc <__aeabi_cdrcmple>
   a2320:	bf94      	ite	ls
   a2322:	2001      	movls	r0, #1
   a2324:	2000      	movhi	r0, #0
   a2326:	f85d fb08 	ldr.w	pc, [sp], #8
   a232a:	bf00      	nop

000a232c <__aeabi_dcmpgt>:
   a232c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a2330:	f7ff ffc4 	bl	a22bc <__aeabi_cdrcmple>
   a2334:	bf34      	ite	cc
   a2336:	2001      	movcc	r0, #1
   a2338:	2000      	movcs	r0, #0
   a233a:	f85d fb08 	ldr.w	pc, [sp], #8
   a233e:	bf00      	nop

000a2340 <__aeabi_d2iz>:
   a2340:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a2344:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a2348:	d215      	bcs.n	a2376 <__aeabi_d2iz+0x36>
   a234a:	d511      	bpl.n	a2370 <__aeabi_d2iz+0x30>
   a234c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a2350:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a2354:	d912      	bls.n	a237c <__aeabi_d2iz+0x3c>
   a2356:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a235a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a235e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a2362:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a2366:	fa23 f002 	lsr.w	r0, r3, r2
   a236a:	bf18      	it	ne
   a236c:	4240      	negne	r0, r0
   a236e:	4770      	bx	lr
   a2370:	f04f 0000 	mov.w	r0, #0
   a2374:	4770      	bx	lr
   a2376:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a237a:	d105      	bne.n	a2388 <__aeabi_d2iz+0x48>
   a237c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a2380:	bf08      	it	eq
   a2382:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a2386:	4770      	bx	lr
   a2388:	f04f 0000 	mov.w	r0, #0
   a238c:	4770      	bx	lr
   a238e:	bf00      	nop

000a2390 <__aeabi_d2uiz>:
   a2390:	004a      	lsls	r2, r1, #1
   a2392:	d211      	bcs.n	a23b8 <__aeabi_d2uiz+0x28>
   a2394:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a2398:	d211      	bcs.n	a23be <__aeabi_d2uiz+0x2e>
   a239a:	d50d      	bpl.n	a23b8 <__aeabi_d2uiz+0x28>
   a239c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a23a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a23a4:	d40e      	bmi.n	a23c4 <__aeabi_d2uiz+0x34>
   a23a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a23aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a23ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a23b2:	fa23 f002 	lsr.w	r0, r3, r2
   a23b6:	4770      	bx	lr
   a23b8:	f04f 0000 	mov.w	r0, #0
   a23bc:	4770      	bx	lr
   a23be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a23c2:	d102      	bne.n	a23ca <__aeabi_d2uiz+0x3a>
   a23c4:	f04f 30ff 	mov.w	r0, #4294967295
   a23c8:	4770      	bx	lr
   a23ca:	f04f 0000 	mov.w	r0, #0
   a23ce:	4770      	bx	lr

000a23d0 <__aeabi_d2f>:
   a23d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a23d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a23d8:	bf24      	itt	cs
   a23da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a23de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a23e2:	d90d      	bls.n	a2400 <__aeabi_d2f+0x30>
   a23e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a23e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a23ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a23f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a23f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a23f8:	bf08      	it	eq
   a23fa:	f020 0001 	biceq.w	r0, r0, #1
   a23fe:	4770      	bx	lr
   a2400:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a2404:	d121      	bne.n	a244a <__aeabi_d2f+0x7a>
   a2406:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a240a:	bfbc      	itt	lt
   a240c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a2410:	4770      	bxlt	lr
   a2412:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a2416:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a241a:	f1c2 0218 	rsb	r2, r2, #24
   a241e:	f1c2 0c20 	rsb	ip, r2, #32
   a2422:	fa10 f30c 	lsls.w	r3, r0, ip
   a2426:	fa20 f002 	lsr.w	r0, r0, r2
   a242a:	bf18      	it	ne
   a242c:	f040 0001 	orrne.w	r0, r0, #1
   a2430:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a2434:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a2438:	fa03 fc0c 	lsl.w	ip, r3, ip
   a243c:	ea40 000c 	orr.w	r0, r0, ip
   a2440:	fa23 f302 	lsr.w	r3, r3, r2
   a2444:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a2448:	e7cc      	b.n	a23e4 <__aeabi_d2f+0x14>
   a244a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a244e:	d107      	bne.n	a2460 <__aeabi_d2f+0x90>
   a2450:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a2454:	bf1e      	ittt	ne
   a2456:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a245a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a245e:	4770      	bxne	lr
   a2460:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a2464:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a2468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a246c:	4770      	bx	lr
   a246e:	bf00      	nop

000a2470 <__aeabi_frsub>:
   a2470:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a2474:	e002      	b.n	a247c <__addsf3>
   a2476:	bf00      	nop

000a2478 <__aeabi_fsub>:
   a2478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a247c <__addsf3>:
   a247c:	0042      	lsls	r2, r0, #1
   a247e:	bf1f      	itttt	ne
   a2480:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a2484:	ea92 0f03 	teqne	r2, r3
   a2488:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a248c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a2490:	d06a      	beq.n	a2568 <__addsf3+0xec>
   a2492:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a2496:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a249a:	bfc1      	itttt	gt
   a249c:	18d2      	addgt	r2, r2, r3
   a249e:	4041      	eorgt	r1, r0
   a24a0:	4048      	eorgt	r0, r1
   a24a2:	4041      	eorgt	r1, r0
   a24a4:	bfb8      	it	lt
   a24a6:	425b      	neglt	r3, r3
   a24a8:	2b19      	cmp	r3, #25
   a24aa:	bf88      	it	hi
   a24ac:	4770      	bxhi	lr
   a24ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a24b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a24b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a24ba:	bf18      	it	ne
   a24bc:	4240      	negne	r0, r0
   a24be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a24c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a24c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a24ca:	bf18      	it	ne
   a24cc:	4249      	negne	r1, r1
   a24ce:	ea92 0f03 	teq	r2, r3
   a24d2:	d03f      	beq.n	a2554 <__addsf3+0xd8>
   a24d4:	f1a2 0201 	sub.w	r2, r2, #1
   a24d8:	fa41 fc03 	asr.w	ip, r1, r3
   a24dc:	eb10 000c 	adds.w	r0, r0, ip
   a24e0:	f1c3 0320 	rsb	r3, r3, #32
   a24e4:	fa01 f103 	lsl.w	r1, r1, r3
   a24e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a24ec:	d502      	bpl.n	a24f4 <__addsf3+0x78>
   a24ee:	4249      	negs	r1, r1
   a24f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a24f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a24f8:	d313      	bcc.n	a2522 <__addsf3+0xa6>
   a24fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a24fe:	d306      	bcc.n	a250e <__addsf3+0x92>
   a2500:	0840      	lsrs	r0, r0, #1
   a2502:	ea4f 0131 	mov.w	r1, r1, rrx
   a2506:	f102 0201 	add.w	r2, r2, #1
   a250a:	2afe      	cmp	r2, #254	; 0xfe
   a250c:	d251      	bcs.n	a25b2 <__addsf3+0x136>
   a250e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a2512:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a2516:	bf08      	it	eq
   a2518:	f020 0001 	biceq.w	r0, r0, #1
   a251c:	ea40 0003 	orr.w	r0, r0, r3
   a2520:	4770      	bx	lr
   a2522:	0049      	lsls	r1, r1, #1
   a2524:	eb40 0000 	adc.w	r0, r0, r0
   a2528:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a252c:	f1a2 0201 	sub.w	r2, r2, #1
   a2530:	d1ed      	bne.n	a250e <__addsf3+0x92>
   a2532:	fab0 fc80 	clz	ip, r0
   a2536:	f1ac 0c08 	sub.w	ip, ip, #8
   a253a:	ebb2 020c 	subs.w	r2, r2, ip
   a253e:	fa00 f00c 	lsl.w	r0, r0, ip
   a2542:	bfaa      	itet	ge
   a2544:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a2548:	4252      	neglt	r2, r2
   a254a:	4318      	orrge	r0, r3
   a254c:	bfbc      	itt	lt
   a254e:	40d0      	lsrlt	r0, r2
   a2550:	4318      	orrlt	r0, r3
   a2552:	4770      	bx	lr
   a2554:	f092 0f00 	teq	r2, #0
   a2558:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a255c:	bf06      	itte	eq
   a255e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a2562:	3201      	addeq	r2, #1
   a2564:	3b01      	subne	r3, #1
   a2566:	e7b5      	b.n	a24d4 <__addsf3+0x58>
   a2568:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a256c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a2570:	bf18      	it	ne
   a2572:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a2576:	d021      	beq.n	a25bc <__addsf3+0x140>
   a2578:	ea92 0f03 	teq	r2, r3
   a257c:	d004      	beq.n	a2588 <__addsf3+0x10c>
   a257e:	f092 0f00 	teq	r2, #0
   a2582:	bf08      	it	eq
   a2584:	4608      	moveq	r0, r1
   a2586:	4770      	bx	lr
   a2588:	ea90 0f01 	teq	r0, r1
   a258c:	bf1c      	itt	ne
   a258e:	2000      	movne	r0, #0
   a2590:	4770      	bxne	lr
   a2592:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a2596:	d104      	bne.n	a25a2 <__addsf3+0x126>
   a2598:	0040      	lsls	r0, r0, #1
   a259a:	bf28      	it	cs
   a259c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a25a0:	4770      	bx	lr
   a25a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a25a6:	bf3c      	itt	cc
   a25a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a25ac:	4770      	bxcc	lr
   a25ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a25b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a25b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a25ba:	4770      	bx	lr
   a25bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a25c0:	bf16      	itet	ne
   a25c2:	4608      	movne	r0, r1
   a25c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a25c8:	4601      	movne	r1, r0
   a25ca:	0242      	lsls	r2, r0, #9
   a25cc:	bf06      	itte	eq
   a25ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a25d2:	ea90 0f01 	teqeq	r0, r1
   a25d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a25da:	4770      	bx	lr

000a25dc <__aeabi_ui2f>:
   a25dc:	f04f 0300 	mov.w	r3, #0
   a25e0:	e004      	b.n	a25ec <__aeabi_i2f+0x8>
   a25e2:	bf00      	nop

000a25e4 <__aeabi_i2f>:
   a25e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a25e8:	bf48      	it	mi
   a25ea:	4240      	negmi	r0, r0
   a25ec:	ea5f 0c00 	movs.w	ip, r0
   a25f0:	bf08      	it	eq
   a25f2:	4770      	bxeq	lr
   a25f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a25f8:	4601      	mov	r1, r0
   a25fa:	f04f 0000 	mov.w	r0, #0
   a25fe:	e01c      	b.n	a263a <__aeabi_l2f+0x2a>

000a2600 <__aeabi_ul2f>:
   a2600:	ea50 0201 	orrs.w	r2, r0, r1
   a2604:	bf08      	it	eq
   a2606:	4770      	bxeq	lr
   a2608:	f04f 0300 	mov.w	r3, #0
   a260c:	e00a      	b.n	a2624 <__aeabi_l2f+0x14>
   a260e:	bf00      	nop

000a2610 <__aeabi_l2f>:
   a2610:	ea50 0201 	orrs.w	r2, r0, r1
   a2614:	bf08      	it	eq
   a2616:	4770      	bxeq	lr
   a2618:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a261c:	d502      	bpl.n	a2624 <__aeabi_l2f+0x14>
   a261e:	4240      	negs	r0, r0
   a2620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a2624:	ea5f 0c01 	movs.w	ip, r1
   a2628:	bf02      	ittt	eq
   a262a:	4684      	moveq	ip, r0
   a262c:	4601      	moveq	r1, r0
   a262e:	2000      	moveq	r0, #0
   a2630:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a2634:	bf08      	it	eq
   a2636:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a263a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a263e:	fabc f28c 	clz	r2, ip
   a2642:	3a08      	subs	r2, #8
   a2644:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a2648:	db10      	blt.n	a266c <__aeabi_l2f+0x5c>
   a264a:	fa01 fc02 	lsl.w	ip, r1, r2
   a264e:	4463      	add	r3, ip
   a2650:	fa00 fc02 	lsl.w	ip, r0, r2
   a2654:	f1c2 0220 	rsb	r2, r2, #32
   a2658:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a265c:	fa20 f202 	lsr.w	r2, r0, r2
   a2660:	eb43 0002 	adc.w	r0, r3, r2
   a2664:	bf08      	it	eq
   a2666:	f020 0001 	biceq.w	r0, r0, #1
   a266a:	4770      	bx	lr
   a266c:	f102 0220 	add.w	r2, r2, #32
   a2670:	fa01 fc02 	lsl.w	ip, r1, r2
   a2674:	f1c2 0220 	rsb	r2, r2, #32
   a2678:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a267c:	fa21 f202 	lsr.w	r2, r1, r2
   a2680:	eb43 0002 	adc.w	r0, r3, r2
   a2684:	bf08      	it	eq
   a2686:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a268a:	4770      	bx	lr

000a268c <__aeabi_fmul>:
   a268c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a2690:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a2694:	bf1e      	ittt	ne
   a2696:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a269a:	ea92 0f0c 	teqne	r2, ip
   a269e:	ea93 0f0c 	teqne	r3, ip
   a26a2:	d06f      	beq.n	a2784 <__aeabi_fmul+0xf8>
   a26a4:	441a      	add	r2, r3
   a26a6:	ea80 0c01 	eor.w	ip, r0, r1
   a26aa:	0240      	lsls	r0, r0, #9
   a26ac:	bf18      	it	ne
   a26ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a26b2:	d01e      	beq.n	a26f2 <__aeabi_fmul+0x66>
   a26b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a26b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a26bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a26c0:	fba0 3101 	umull	r3, r1, r0, r1
   a26c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a26c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a26cc:	bf3e      	ittt	cc
   a26ce:	0049      	lslcc	r1, r1, #1
   a26d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a26d4:	005b      	lslcc	r3, r3, #1
   a26d6:	ea40 0001 	orr.w	r0, r0, r1
   a26da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a26de:	2afd      	cmp	r2, #253	; 0xfd
   a26e0:	d81d      	bhi.n	a271e <__aeabi_fmul+0x92>
   a26e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a26e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a26ea:	bf08      	it	eq
   a26ec:	f020 0001 	biceq.w	r0, r0, #1
   a26f0:	4770      	bx	lr
   a26f2:	f090 0f00 	teq	r0, #0
   a26f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a26fa:	bf08      	it	eq
   a26fc:	0249      	lsleq	r1, r1, #9
   a26fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a2702:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a2706:	3a7f      	subs	r2, #127	; 0x7f
   a2708:	bfc2      	ittt	gt
   a270a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a270e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a2712:	4770      	bxgt	lr
   a2714:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a2718:	f04f 0300 	mov.w	r3, #0
   a271c:	3a01      	subs	r2, #1
   a271e:	dc5d      	bgt.n	a27dc <__aeabi_fmul+0x150>
   a2720:	f112 0f19 	cmn.w	r2, #25
   a2724:	bfdc      	itt	le
   a2726:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a272a:	4770      	bxle	lr
   a272c:	f1c2 0200 	rsb	r2, r2, #0
   a2730:	0041      	lsls	r1, r0, #1
   a2732:	fa21 f102 	lsr.w	r1, r1, r2
   a2736:	f1c2 0220 	rsb	r2, r2, #32
   a273a:	fa00 fc02 	lsl.w	ip, r0, r2
   a273e:	ea5f 0031 	movs.w	r0, r1, rrx
   a2742:	f140 0000 	adc.w	r0, r0, #0
   a2746:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a274a:	bf08      	it	eq
   a274c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a2750:	4770      	bx	lr
   a2752:	f092 0f00 	teq	r2, #0
   a2756:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a275a:	bf02      	ittt	eq
   a275c:	0040      	lsleq	r0, r0, #1
   a275e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a2762:	3a01      	subeq	r2, #1
   a2764:	d0f9      	beq.n	a275a <__aeabi_fmul+0xce>
   a2766:	ea40 000c 	orr.w	r0, r0, ip
   a276a:	f093 0f00 	teq	r3, #0
   a276e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a2772:	bf02      	ittt	eq
   a2774:	0049      	lsleq	r1, r1, #1
   a2776:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a277a:	3b01      	subeq	r3, #1
   a277c:	d0f9      	beq.n	a2772 <__aeabi_fmul+0xe6>
   a277e:	ea41 010c 	orr.w	r1, r1, ip
   a2782:	e78f      	b.n	a26a4 <__aeabi_fmul+0x18>
   a2784:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a2788:	ea92 0f0c 	teq	r2, ip
   a278c:	bf18      	it	ne
   a278e:	ea93 0f0c 	teqne	r3, ip
   a2792:	d00a      	beq.n	a27aa <__aeabi_fmul+0x11e>
   a2794:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a2798:	bf18      	it	ne
   a279a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a279e:	d1d8      	bne.n	a2752 <__aeabi_fmul+0xc6>
   a27a0:	ea80 0001 	eor.w	r0, r0, r1
   a27a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a27a8:	4770      	bx	lr
   a27aa:	f090 0f00 	teq	r0, #0
   a27ae:	bf17      	itett	ne
   a27b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a27b4:	4608      	moveq	r0, r1
   a27b6:	f091 0f00 	teqne	r1, #0
   a27ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a27be:	d014      	beq.n	a27ea <__aeabi_fmul+0x15e>
   a27c0:	ea92 0f0c 	teq	r2, ip
   a27c4:	d101      	bne.n	a27ca <__aeabi_fmul+0x13e>
   a27c6:	0242      	lsls	r2, r0, #9
   a27c8:	d10f      	bne.n	a27ea <__aeabi_fmul+0x15e>
   a27ca:	ea93 0f0c 	teq	r3, ip
   a27ce:	d103      	bne.n	a27d8 <__aeabi_fmul+0x14c>
   a27d0:	024b      	lsls	r3, r1, #9
   a27d2:	bf18      	it	ne
   a27d4:	4608      	movne	r0, r1
   a27d6:	d108      	bne.n	a27ea <__aeabi_fmul+0x15e>
   a27d8:	ea80 0001 	eor.w	r0, r0, r1
   a27dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a27e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a27e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a27e8:	4770      	bx	lr
   a27ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a27ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a27f2:	4770      	bx	lr

000a27f4 <__aeabi_fdiv>:
   a27f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a27f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a27fc:	bf1e      	ittt	ne
   a27fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a2802:	ea92 0f0c 	teqne	r2, ip
   a2806:	ea93 0f0c 	teqne	r3, ip
   a280a:	d069      	beq.n	a28e0 <__aeabi_fdiv+0xec>
   a280c:	eba2 0203 	sub.w	r2, r2, r3
   a2810:	ea80 0c01 	eor.w	ip, r0, r1
   a2814:	0249      	lsls	r1, r1, #9
   a2816:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a281a:	d037      	beq.n	a288c <__aeabi_fdiv+0x98>
   a281c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a2820:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a2824:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a2828:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a282c:	428b      	cmp	r3, r1
   a282e:	bf38      	it	cc
   a2830:	005b      	lslcc	r3, r3, #1
   a2832:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a2836:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a283a:	428b      	cmp	r3, r1
   a283c:	bf24      	itt	cs
   a283e:	1a5b      	subcs	r3, r3, r1
   a2840:	ea40 000c 	orrcs.w	r0, r0, ip
   a2844:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a2848:	bf24      	itt	cs
   a284a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a284e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a2852:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a2856:	bf24      	itt	cs
   a2858:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a285c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a2860:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a2864:	bf24      	itt	cs
   a2866:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a286a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a286e:	011b      	lsls	r3, r3, #4
   a2870:	bf18      	it	ne
   a2872:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a2876:	d1e0      	bne.n	a283a <__aeabi_fdiv+0x46>
   a2878:	2afd      	cmp	r2, #253	; 0xfd
   a287a:	f63f af50 	bhi.w	a271e <__aeabi_fmul+0x92>
   a287e:	428b      	cmp	r3, r1
   a2880:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a2884:	bf08      	it	eq
   a2886:	f020 0001 	biceq.w	r0, r0, #1
   a288a:	4770      	bx	lr
   a288c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a2890:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a2894:	327f      	adds	r2, #127	; 0x7f
   a2896:	bfc2      	ittt	gt
   a2898:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a289c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a28a0:	4770      	bxgt	lr
   a28a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a28a6:	f04f 0300 	mov.w	r3, #0
   a28aa:	3a01      	subs	r2, #1
   a28ac:	e737      	b.n	a271e <__aeabi_fmul+0x92>
   a28ae:	f092 0f00 	teq	r2, #0
   a28b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a28b6:	bf02      	ittt	eq
   a28b8:	0040      	lsleq	r0, r0, #1
   a28ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a28be:	3a01      	subeq	r2, #1
   a28c0:	d0f9      	beq.n	a28b6 <__aeabi_fdiv+0xc2>
   a28c2:	ea40 000c 	orr.w	r0, r0, ip
   a28c6:	f093 0f00 	teq	r3, #0
   a28ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a28ce:	bf02      	ittt	eq
   a28d0:	0049      	lsleq	r1, r1, #1
   a28d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a28d6:	3b01      	subeq	r3, #1
   a28d8:	d0f9      	beq.n	a28ce <__aeabi_fdiv+0xda>
   a28da:	ea41 010c 	orr.w	r1, r1, ip
   a28de:	e795      	b.n	a280c <__aeabi_fdiv+0x18>
   a28e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a28e4:	ea92 0f0c 	teq	r2, ip
   a28e8:	d108      	bne.n	a28fc <__aeabi_fdiv+0x108>
   a28ea:	0242      	lsls	r2, r0, #9
   a28ec:	f47f af7d 	bne.w	a27ea <__aeabi_fmul+0x15e>
   a28f0:	ea93 0f0c 	teq	r3, ip
   a28f4:	f47f af70 	bne.w	a27d8 <__aeabi_fmul+0x14c>
   a28f8:	4608      	mov	r0, r1
   a28fa:	e776      	b.n	a27ea <__aeabi_fmul+0x15e>
   a28fc:	ea93 0f0c 	teq	r3, ip
   a2900:	d104      	bne.n	a290c <__aeabi_fdiv+0x118>
   a2902:	024b      	lsls	r3, r1, #9
   a2904:	f43f af4c 	beq.w	a27a0 <__aeabi_fmul+0x114>
   a2908:	4608      	mov	r0, r1
   a290a:	e76e      	b.n	a27ea <__aeabi_fmul+0x15e>
   a290c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a2910:	bf18      	it	ne
   a2912:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a2916:	d1ca      	bne.n	a28ae <__aeabi_fdiv+0xba>
   a2918:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a291c:	f47f af5c 	bne.w	a27d8 <__aeabi_fmul+0x14c>
   a2920:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a2924:	f47f af3c 	bne.w	a27a0 <__aeabi_fmul+0x114>
   a2928:	e75f      	b.n	a27ea <__aeabi_fmul+0x15e>
   a292a:	bf00      	nop

000a292c <__gesf2>:
   a292c:	f04f 3cff 	mov.w	ip, #4294967295
   a2930:	e006      	b.n	a2940 <__cmpsf2+0x4>
   a2932:	bf00      	nop

000a2934 <__lesf2>:
   a2934:	f04f 0c01 	mov.w	ip, #1
   a2938:	e002      	b.n	a2940 <__cmpsf2+0x4>
   a293a:	bf00      	nop

000a293c <__cmpsf2>:
   a293c:	f04f 0c01 	mov.w	ip, #1
   a2940:	f84d cd04 	str.w	ip, [sp, #-4]!
   a2944:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a2948:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a294c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a2950:	bf18      	it	ne
   a2952:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a2956:	d011      	beq.n	a297c <__cmpsf2+0x40>
   a2958:	b001      	add	sp, #4
   a295a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a295e:	bf18      	it	ne
   a2960:	ea90 0f01 	teqne	r0, r1
   a2964:	bf58      	it	pl
   a2966:	ebb2 0003 	subspl.w	r0, r2, r3
   a296a:	bf88      	it	hi
   a296c:	17c8      	asrhi	r0, r1, #31
   a296e:	bf38      	it	cc
   a2970:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a2974:	bf18      	it	ne
   a2976:	f040 0001 	orrne.w	r0, r0, #1
   a297a:	4770      	bx	lr
   a297c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a2980:	d102      	bne.n	a2988 <__cmpsf2+0x4c>
   a2982:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a2986:	d105      	bne.n	a2994 <__cmpsf2+0x58>
   a2988:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a298c:	d1e4      	bne.n	a2958 <__cmpsf2+0x1c>
   a298e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a2992:	d0e1      	beq.n	a2958 <__cmpsf2+0x1c>
   a2994:	f85d 0b04 	ldr.w	r0, [sp], #4
   a2998:	4770      	bx	lr
   a299a:	bf00      	nop

000a299c <__aeabi_cfrcmple>:
   a299c:	4684      	mov	ip, r0
   a299e:	4608      	mov	r0, r1
   a29a0:	4661      	mov	r1, ip
   a29a2:	e7ff      	b.n	a29a4 <__aeabi_cfcmpeq>

000a29a4 <__aeabi_cfcmpeq>:
   a29a4:	b50f      	push	{r0, r1, r2, r3, lr}
   a29a6:	f7ff ffc9 	bl	a293c <__cmpsf2>
   a29aa:	2800      	cmp	r0, #0
   a29ac:	bf48      	it	mi
   a29ae:	f110 0f00 	cmnmi.w	r0, #0
   a29b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a29b4 <__aeabi_fcmpeq>:
   a29b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a29b8:	f7ff fff4 	bl	a29a4 <__aeabi_cfcmpeq>
   a29bc:	bf0c      	ite	eq
   a29be:	2001      	moveq	r0, #1
   a29c0:	2000      	movne	r0, #0
   a29c2:	f85d fb08 	ldr.w	pc, [sp], #8
   a29c6:	bf00      	nop

000a29c8 <__aeabi_fcmplt>:
   a29c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a29cc:	f7ff ffea 	bl	a29a4 <__aeabi_cfcmpeq>
   a29d0:	bf34      	ite	cc
   a29d2:	2001      	movcc	r0, #1
   a29d4:	2000      	movcs	r0, #0
   a29d6:	f85d fb08 	ldr.w	pc, [sp], #8
   a29da:	bf00      	nop

000a29dc <__aeabi_fcmple>:
   a29dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a29e0:	f7ff ffe0 	bl	a29a4 <__aeabi_cfcmpeq>
   a29e4:	bf94      	ite	ls
   a29e6:	2001      	movls	r0, #1
   a29e8:	2000      	movhi	r0, #0
   a29ea:	f85d fb08 	ldr.w	pc, [sp], #8
   a29ee:	bf00      	nop

000a29f0 <__aeabi_fcmpge>:
   a29f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a29f4:	f7ff ffd2 	bl	a299c <__aeabi_cfrcmple>
   a29f8:	bf94      	ite	ls
   a29fa:	2001      	movls	r0, #1
   a29fc:	2000      	movhi	r0, #0
   a29fe:	f85d fb08 	ldr.w	pc, [sp], #8
   a2a02:	bf00      	nop

000a2a04 <__aeabi_fcmpgt>:
   a2a04:	f84d ed08 	str.w	lr, [sp, #-8]!
   a2a08:	f7ff ffc8 	bl	a299c <__aeabi_cfrcmple>
   a2a0c:	bf34      	ite	cc
   a2a0e:	2001      	movcc	r0, #1
   a2a10:	2000      	movcs	r0, #0
   a2a12:	f85d fb08 	ldr.w	pc, [sp], #8
   a2a16:	bf00      	nop

000a2a18 <__aeabi_f2iz>:
   a2a18:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a2a1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a2a20:	d30f      	bcc.n	a2a42 <__aeabi_f2iz+0x2a>
   a2a22:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a2a26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a2a2a:	d90d      	bls.n	a2a48 <__aeabi_f2iz+0x30>
   a2a2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a2a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a2a34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a2a38:	fa23 f002 	lsr.w	r0, r3, r2
   a2a3c:	bf18      	it	ne
   a2a3e:	4240      	negne	r0, r0
   a2a40:	4770      	bx	lr
   a2a42:	f04f 0000 	mov.w	r0, #0
   a2a46:	4770      	bx	lr
   a2a48:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a2a4c:	d101      	bne.n	a2a52 <__aeabi_f2iz+0x3a>
   a2a4e:	0242      	lsls	r2, r0, #9
   a2a50:	d105      	bne.n	a2a5e <__aeabi_f2iz+0x46>
   a2a52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a2a56:	bf08      	it	eq
   a2a58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a2a5c:	4770      	bx	lr
   a2a5e:	f04f 0000 	mov.w	r0, #0
   a2a62:	4770      	bx	lr

000a2a64 <__aeabi_f2uiz>:
   a2a64:	0042      	lsls	r2, r0, #1
   a2a66:	d20e      	bcs.n	a2a86 <__aeabi_f2uiz+0x22>
   a2a68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a2a6c:	d30b      	bcc.n	a2a86 <__aeabi_f2uiz+0x22>
   a2a6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a2a72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a2a76:	d409      	bmi.n	a2a8c <__aeabi_f2uiz+0x28>
   a2a78:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a2a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a2a80:	fa23 f002 	lsr.w	r0, r3, r2
   a2a84:	4770      	bx	lr
   a2a86:	f04f 0000 	mov.w	r0, #0
   a2a8a:	4770      	bx	lr
   a2a8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a2a90:	d101      	bne.n	a2a96 <__aeabi_f2uiz+0x32>
   a2a92:	0242      	lsls	r2, r0, #9
   a2a94:	d102      	bne.n	a2a9c <__aeabi_f2uiz+0x38>
   a2a96:	f04f 30ff 	mov.w	r0, #4294967295
   a2a9a:	4770      	bx	lr
   a2a9c:	f04f 0000 	mov.w	r0, #0
   a2aa0:	4770      	bx	lr
   a2aa2:	bf00      	nop

000a2aa4 <__libc_init_array>:
   a2aa4:	b570      	push	{r4, r5, r6, lr}
   a2aa6:	4e0f      	ldr	r6, [pc, #60]	; (a2ae4 <__libc_init_array+0x40>)
   a2aa8:	4d0f      	ldr	r5, [pc, #60]	; (a2ae8 <__libc_init_array+0x44>)
   a2aaa:	1b76      	subs	r6, r6, r5
   a2aac:	10b6      	asrs	r6, r6, #2
   a2aae:	bf18      	it	ne
   a2ab0:	2400      	movne	r4, #0
   a2ab2:	d005      	beq.n	a2ac0 <__libc_init_array+0x1c>
   a2ab4:	3401      	adds	r4, #1
   a2ab6:	f855 3b04 	ldr.w	r3, [r5], #4
   a2aba:	4798      	blx	r3
   a2abc:	42a6      	cmp	r6, r4
   a2abe:	d1f9      	bne.n	a2ab4 <__libc_init_array+0x10>
   a2ac0:	4e0a      	ldr	r6, [pc, #40]	; (a2aec <__libc_init_array+0x48>)
   a2ac2:	4d0b      	ldr	r5, [pc, #44]	; (a2af0 <__libc_init_array+0x4c>)
   a2ac4:	f002 f892 	bl	a4bec <_init>
   a2ac8:	1b76      	subs	r6, r6, r5
   a2aca:	10b6      	asrs	r6, r6, #2
   a2acc:	bf18      	it	ne
   a2ace:	2400      	movne	r4, #0
   a2ad0:	d006      	beq.n	a2ae0 <__libc_init_array+0x3c>
   a2ad2:	3401      	adds	r4, #1
   a2ad4:	f855 3b04 	ldr.w	r3, [r5], #4
   a2ad8:	4798      	blx	r3
   a2ada:	42a6      	cmp	r6, r4
   a2adc:	d1f9      	bne.n	a2ad2 <__libc_init_array+0x2e>
   a2ade:	bd70      	pop	{r4, r5, r6, pc}
   a2ae0:	bd70      	pop	{r4, r5, r6, pc}
   a2ae2:	bf00      	nop
   a2ae4:	000a4bf8 	.word	0x000a4bf8
   a2ae8:	000a4bf8 	.word	0x000a4bf8
   a2aec:	000a4c00 	.word	0x000a4c00
   a2af0:	000a4bf8 	.word	0x000a4bf8

000a2af4 <memcpy>:
   a2af4:	4684      	mov	ip, r0
   a2af6:	ea41 0300 	orr.w	r3, r1, r0
   a2afa:	f013 0303 	ands.w	r3, r3, #3
   a2afe:	d149      	bne.n	a2b94 <memcpy+0xa0>
   a2b00:	3a40      	subs	r2, #64	; 0x40
   a2b02:	d323      	bcc.n	a2b4c <memcpy+0x58>
   a2b04:	680b      	ldr	r3, [r1, #0]
   a2b06:	6003      	str	r3, [r0, #0]
   a2b08:	684b      	ldr	r3, [r1, #4]
   a2b0a:	6043      	str	r3, [r0, #4]
   a2b0c:	688b      	ldr	r3, [r1, #8]
   a2b0e:	6083      	str	r3, [r0, #8]
   a2b10:	68cb      	ldr	r3, [r1, #12]
   a2b12:	60c3      	str	r3, [r0, #12]
   a2b14:	690b      	ldr	r3, [r1, #16]
   a2b16:	6103      	str	r3, [r0, #16]
   a2b18:	694b      	ldr	r3, [r1, #20]
   a2b1a:	6143      	str	r3, [r0, #20]
   a2b1c:	698b      	ldr	r3, [r1, #24]
   a2b1e:	6183      	str	r3, [r0, #24]
   a2b20:	69cb      	ldr	r3, [r1, #28]
   a2b22:	61c3      	str	r3, [r0, #28]
   a2b24:	6a0b      	ldr	r3, [r1, #32]
   a2b26:	6203      	str	r3, [r0, #32]
   a2b28:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a2b2a:	6243      	str	r3, [r0, #36]	; 0x24
   a2b2c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a2b2e:	6283      	str	r3, [r0, #40]	; 0x28
   a2b30:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a2b32:	62c3      	str	r3, [r0, #44]	; 0x2c
   a2b34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a2b36:	6303      	str	r3, [r0, #48]	; 0x30
   a2b38:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a2b3a:	6343      	str	r3, [r0, #52]	; 0x34
   a2b3c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a2b3e:	6383      	str	r3, [r0, #56]	; 0x38
   a2b40:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a2b42:	63c3      	str	r3, [r0, #60]	; 0x3c
   a2b44:	3040      	adds	r0, #64	; 0x40
   a2b46:	3140      	adds	r1, #64	; 0x40
   a2b48:	3a40      	subs	r2, #64	; 0x40
   a2b4a:	d2db      	bcs.n	a2b04 <memcpy+0x10>
   a2b4c:	3230      	adds	r2, #48	; 0x30
   a2b4e:	d30b      	bcc.n	a2b68 <memcpy+0x74>
   a2b50:	680b      	ldr	r3, [r1, #0]
   a2b52:	6003      	str	r3, [r0, #0]
   a2b54:	684b      	ldr	r3, [r1, #4]
   a2b56:	6043      	str	r3, [r0, #4]
   a2b58:	688b      	ldr	r3, [r1, #8]
   a2b5a:	6083      	str	r3, [r0, #8]
   a2b5c:	68cb      	ldr	r3, [r1, #12]
   a2b5e:	60c3      	str	r3, [r0, #12]
   a2b60:	3010      	adds	r0, #16
   a2b62:	3110      	adds	r1, #16
   a2b64:	3a10      	subs	r2, #16
   a2b66:	d2f3      	bcs.n	a2b50 <memcpy+0x5c>
   a2b68:	320c      	adds	r2, #12
   a2b6a:	d305      	bcc.n	a2b78 <memcpy+0x84>
   a2b6c:	f851 3b04 	ldr.w	r3, [r1], #4
   a2b70:	f840 3b04 	str.w	r3, [r0], #4
   a2b74:	3a04      	subs	r2, #4
   a2b76:	d2f9      	bcs.n	a2b6c <memcpy+0x78>
   a2b78:	3204      	adds	r2, #4
   a2b7a:	d008      	beq.n	a2b8e <memcpy+0x9a>
   a2b7c:	07d2      	lsls	r2, r2, #31
   a2b7e:	bf1c      	itt	ne
   a2b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a2b84:	f800 3b01 	strbne.w	r3, [r0], #1
   a2b88:	d301      	bcc.n	a2b8e <memcpy+0x9a>
   a2b8a:	880b      	ldrh	r3, [r1, #0]
   a2b8c:	8003      	strh	r3, [r0, #0]
   a2b8e:	4660      	mov	r0, ip
   a2b90:	4770      	bx	lr
   a2b92:	bf00      	nop
   a2b94:	2a08      	cmp	r2, #8
   a2b96:	d313      	bcc.n	a2bc0 <memcpy+0xcc>
   a2b98:	078b      	lsls	r3, r1, #30
   a2b9a:	d0b1      	beq.n	a2b00 <memcpy+0xc>
   a2b9c:	f010 0303 	ands.w	r3, r0, #3
   a2ba0:	d0ae      	beq.n	a2b00 <memcpy+0xc>
   a2ba2:	f1c3 0304 	rsb	r3, r3, #4
   a2ba6:	1ad2      	subs	r2, r2, r3
   a2ba8:	07db      	lsls	r3, r3, #31
   a2baa:	bf1c      	itt	ne
   a2bac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a2bb0:	f800 3b01 	strbne.w	r3, [r0], #1
   a2bb4:	d3a4      	bcc.n	a2b00 <memcpy+0xc>
   a2bb6:	f831 3b02 	ldrh.w	r3, [r1], #2
   a2bba:	f820 3b02 	strh.w	r3, [r0], #2
   a2bbe:	e79f      	b.n	a2b00 <memcpy+0xc>
   a2bc0:	3a04      	subs	r2, #4
   a2bc2:	d3d9      	bcc.n	a2b78 <memcpy+0x84>
   a2bc4:	3a01      	subs	r2, #1
   a2bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
   a2bca:	f800 3b01 	strb.w	r3, [r0], #1
   a2bce:	d2f9      	bcs.n	a2bc4 <memcpy+0xd0>
   a2bd0:	780b      	ldrb	r3, [r1, #0]
   a2bd2:	7003      	strb	r3, [r0, #0]
   a2bd4:	784b      	ldrb	r3, [r1, #1]
   a2bd6:	7043      	strb	r3, [r0, #1]
   a2bd8:	788b      	ldrb	r3, [r1, #2]
   a2bda:	7083      	strb	r3, [r0, #2]
   a2bdc:	4660      	mov	r0, ip
   a2bde:	4770      	bx	lr

000a2be0 <memset>:
   a2be0:	b470      	push	{r4, r5, r6}
   a2be2:	0784      	lsls	r4, r0, #30
   a2be4:	d046      	beq.n	a2c74 <memset+0x94>
   a2be6:	1e54      	subs	r4, r2, #1
   a2be8:	2a00      	cmp	r2, #0
   a2bea:	d041      	beq.n	a2c70 <memset+0x90>
   a2bec:	b2cd      	uxtb	r5, r1
   a2bee:	4603      	mov	r3, r0
   a2bf0:	e002      	b.n	a2bf8 <memset+0x18>
   a2bf2:	1e62      	subs	r2, r4, #1
   a2bf4:	b3e4      	cbz	r4, a2c70 <memset+0x90>
   a2bf6:	4614      	mov	r4, r2
   a2bf8:	f803 5b01 	strb.w	r5, [r3], #1
   a2bfc:	079a      	lsls	r2, r3, #30
   a2bfe:	d1f8      	bne.n	a2bf2 <memset+0x12>
   a2c00:	2c03      	cmp	r4, #3
   a2c02:	d92e      	bls.n	a2c62 <memset+0x82>
   a2c04:	b2cd      	uxtb	r5, r1
   a2c06:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a2c0a:	2c0f      	cmp	r4, #15
   a2c0c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a2c10:	d919      	bls.n	a2c46 <memset+0x66>
   a2c12:	4626      	mov	r6, r4
   a2c14:	f103 0210 	add.w	r2, r3, #16
   a2c18:	3e10      	subs	r6, #16
   a2c1a:	2e0f      	cmp	r6, #15
   a2c1c:	f842 5c10 	str.w	r5, [r2, #-16]
   a2c20:	f842 5c0c 	str.w	r5, [r2, #-12]
   a2c24:	f842 5c08 	str.w	r5, [r2, #-8]
   a2c28:	f842 5c04 	str.w	r5, [r2, #-4]
   a2c2c:	f102 0210 	add.w	r2, r2, #16
   a2c30:	d8f2      	bhi.n	a2c18 <memset+0x38>
   a2c32:	f1a4 0210 	sub.w	r2, r4, #16
   a2c36:	f022 020f 	bic.w	r2, r2, #15
   a2c3a:	f004 040f 	and.w	r4, r4, #15
   a2c3e:	3210      	adds	r2, #16
   a2c40:	2c03      	cmp	r4, #3
   a2c42:	4413      	add	r3, r2
   a2c44:	d90d      	bls.n	a2c62 <memset+0x82>
   a2c46:	461e      	mov	r6, r3
   a2c48:	4622      	mov	r2, r4
   a2c4a:	3a04      	subs	r2, #4
   a2c4c:	2a03      	cmp	r2, #3
   a2c4e:	f846 5b04 	str.w	r5, [r6], #4
   a2c52:	d8fa      	bhi.n	a2c4a <memset+0x6a>
   a2c54:	1f22      	subs	r2, r4, #4
   a2c56:	f022 0203 	bic.w	r2, r2, #3
   a2c5a:	3204      	adds	r2, #4
   a2c5c:	4413      	add	r3, r2
   a2c5e:	f004 0403 	and.w	r4, r4, #3
   a2c62:	b12c      	cbz	r4, a2c70 <memset+0x90>
   a2c64:	b2c9      	uxtb	r1, r1
   a2c66:	441c      	add	r4, r3
   a2c68:	f803 1b01 	strb.w	r1, [r3], #1
   a2c6c:	42a3      	cmp	r3, r4
   a2c6e:	d1fb      	bne.n	a2c68 <memset+0x88>
   a2c70:	bc70      	pop	{r4, r5, r6}
   a2c72:	4770      	bx	lr
   a2c74:	4614      	mov	r4, r2
   a2c76:	4603      	mov	r3, r0
   a2c78:	e7c2      	b.n	a2c00 <memset+0x20>
   a2c7a:	bf00      	nop

000a2c7c <_puts_r>:
   a2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   a2c7e:	4605      	mov	r5, r0
   a2c80:	b089      	sub	sp, #36	; 0x24
   a2c82:	4608      	mov	r0, r1
   a2c84:	460c      	mov	r4, r1
   a2c86:	f000 f8e5 	bl	a2e54 <strlen>
   a2c8a:	1c43      	adds	r3, r0, #1
   a2c8c:	4f14      	ldr	r7, [pc, #80]	; (a2ce0 <_puts_r+0x64>)
   a2c8e:	9303      	str	r3, [sp, #12]
   a2c90:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a2c92:	2601      	movs	r6, #1
   a2c94:	a904      	add	r1, sp, #16
   a2c96:	2202      	movs	r2, #2
   a2c98:	9404      	str	r4, [sp, #16]
   a2c9a:	9005      	str	r0, [sp, #20]
   a2c9c:	68ac      	ldr	r4, [r5, #8]
   a2c9e:	9706      	str	r7, [sp, #24]
   a2ca0:	9607      	str	r6, [sp, #28]
   a2ca2:	9101      	str	r1, [sp, #4]
   a2ca4:	9202      	str	r2, [sp, #8]
   a2ca6:	b1b3      	cbz	r3, a2cd6 <_puts_r+0x5a>
   a2ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2cac:	049a      	lsls	r2, r3, #18
   a2cae:	d406      	bmi.n	a2cbe <_puts_r+0x42>
   a2cb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   a2cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a2cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   a2cba:	81a3      	strh	r3, [r4, #12]
   a2cbc:	6662      	str	r2, [r4, #100]	; 0x64
   a2cbe:	4621      	mov	r1, r4
   a2cc0:	4628      	mov	r0, r5
   a2cc2:	aa01      	add	r2, sp, #4
   a2cc4:	f000 fbf4 	bl	a34b0 <__sfvwrite_r>
   a2cc8:	2800      	cmp	r0, #0
   a2cca:	bf14      	ite	ne
   a2ccc:	f04f 30ff 	movne.w	r0, #4294967295
   a2cd0:	200a      	moveq	r0, #10
   a2cd2:	b009      	add	sp, #36	; 0x24
   a2cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a2cd6:	4628      	mov	r0, r5
   a2cd8:	f000 fa96 	bl	a3208 <__sinit>
   a2cdc:	e7e4      	b.n	a2ca8 <_puts_r+0x2c>
   a2cde:	bf00      	nop
   a2ce0:	000a4be8 	.word	0x000a4be8

000a2ce4 <puts>:
   a2ce4:	4b02      	ldr	r3, [pc, #8]	; (a2cf0 <puts+0xc>)
   a2ce6:	4601      	mov	r1, r0
   a2ce8:	6818      	ldr	r0, [r3, #0]
   a2cea:	f7ff bfc7 	b.w	a2c7c <_puts_r>
   a2cee:	bf00      	nop
   a2cf0:	20071090 	.word	0x20071090

000a2cf4 <setbuf>:
   a2cf4:	2900      	cmp	r1, #0
   a2cf6:	bf0c      	ite	eq
   a2cf8:	2202      	moveq	r2, #2
   a2cfa:	2200      	movne	r2, #0
   a2cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a2d00:	f000 b800 	b.w	a2d04 <setvbuf>

000a2d04 <setvbuf>:
   a2d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a2d08:	4d51      	ldr	r5, [pc, #324]	; (a2e50 <setvbuf+0x14c>)
   a2d0a:	b083      	sub	sp, #12
   a2d0c:	682d      	ldr	r5, [r5, #0]
   a2d0e:	4604      	mov	r4, r0
   a2d10:	460f      	mov	r7, r1
   a2d12:	4690      	mov	r8, r2
   a2d14:	461e      	mov	r6, r3
   a2d16:	b115      	cbz	r5, a2d1e <setvbuf+0x1a>
   a2d18:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a2d1a:	2b00      	cmp	r3, #0
   a2d1c:	d079      	beq.n	a2e12 <setvbuf+0x10e>
   a2d1e:	f1b8 0f02 	cmp.w	r8, #2
   a2d22:	d004      	beq.n	a2d2e <setvbuf+0x2a>
   a2d24:	f1b8 0f01 	cmp.w	r8, #1
   a2d28:	d87f      	bhi.n	a2e2a <setvbuf+0x126>
   a2d2a:	2e00      	cmp	r6, #0
   a2d2c:	db7d      	blt.n	a2e2a <setvbuf+0x126>
   a2d2e:	4621      	mov	r1, r4
   a2d30:	4628      	mov	r0, r5
   a2d32:	f000 f9d5 	bl	a30e0 <_fflush_r>
   a2d36:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a2d38:	b141      	cbz	r1, a2d4c <setvbuf+0x48>
   a2d3a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a2d3e:	4299      	cmp	r1, r3
   a2d40:	d002      	beq.n	a2d48 <setvbuf+0x44>
   a2d42:	4628      	mov	r0, r5
   a2d44:	f000 facc 	bl	a32e0 <_free_r>
   a2d48:	2300      	movs	r3, #0
   a2d4a:	6323      	str	r3, [r4, #48]	; 0x30
   a2d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2d50:	2200      	movs	r2, #0
   a2d52:	61a2      	str	r2, [r4, #24]
   a2d54:	6062      	str	r2, [r4, #4]
   a2d56:	061a      	lsls	r2, r3, #24
   a2d58:	d454      	bmi.n	a2e04 <setvbuf+0x100>
   a2d5a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   a2d5e:	f023 0303 	bic.w	r3, r3, #3
   a2d62:	f1b8 0f02 	cmp.w	r8, #2
   a2d66:	81a3      	strh	r3, [r4, #12]
   a2d68:	d039      	beq.n	a2dde <setvbuf+0xda>
   a2d6a:	ab01      	add	r3, sp, #4
   a2d6c:	466a      	mov	r2, sp
   a2d6e:	4621      	mov	r1, r4
   a2d70:	4628      	mov	r0, r5
   a2d72:	f000 fd49 	bl	a3808 <__swhatbuf_r>
   a2d76:	89a3      	ldrh	r3, [r4, #12]
   a2d78:	4318      	orrs	r0, r3
   a2d7a:	81a0      	strh	r0, [r4, #12]
   a2d7c:	b326      	cbz	r6, a2dc8 <setvbuf+0xc4>
   a2d7e:	b327      	cbz	r7, a2dca <setvbuf+0xc6>
   a2d80:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a2d82:	2b00      	cmp	r3, #0
   a2d84:	d04d      	beq.n	a2e22 <setvbuf+0x11e>
   a2d86:	9b00      	ldr	r3, [sp, #0]
   a2d88:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   a2d8c:	429e      	cmp	r6, r3
   a2d8e:	bf1c      	itt	ne
   a2d90:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   a2d94:	81a0      	strhne	r0, [r4, #12]
   a2d96:	f1b8 0f01 	cmp.w	r8, #1
   a2d9a:	bf08      	it	eq
   a2d9c:	f040 0001 	orreq.w	r0, r0, #1
   a2da0:	b283      	uxth	r3, r0
   a2da2:	bf08      	it	eq
   a2da4:	81a0      	strheq	r0, [r4, #12]
   a2da6:	f003 0008 	and.w	r0, r3, #8
   a2daa:	b280      	uxth	r0, r0
   a2dac:	6027      	str	r7, [r4, #0]
   a2dae:	6127      	str	r7, [r4, #16]
   a2db0:	6166      	str	r6, [r4, #20]
   a2db2:	b318      	cbz	r0, a2dfc <setvbuf+0xf8>
   a2db4:	f013 0001 	ands.w	r0, r3, #1
   a2db8:	d02f      	beq.n	a2e1a <setvbuf+0x116>
   a2dba:	2000      	movs	r0, #0
   a2dbc:	4276      	negs	r6, r6
   a2dbe:	61a6      	str	r6, [r4, #24]
   a2dc0:	60a0      	str	r0, [r4, #8]
   a2dc2:	b003      	add	sp, #12
   a2dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2dc8:	9e00      	ldr	r6, [sp, #0]
   a2dca:	4630      	mov	r0, r6
   a2dcc:	f000 fd90 	bl	a38f0 <malloc>
   a2dd0:	4607      	mov	r7, r0
   a2dd2:	b368      	cbz	r0, a2e30 <setvbuf+0x12c>
   a2dd4:	89a3      	ldrh	r3, [r4, #12]
   a2dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a2dda:	81a3      	strh	r3, [r4, #12]
   a2ddc:	e7d0      	b.n	a2d80 <setvbuf+0x7c>
   a2dde:	2000      	movs	r0, #0
   a2de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a2de4:	f043 0302 	orr.w	r3, r3, #2
   a2de8:	2500      	movs	r5, #0
   a2dea:	2101      	movs	r1, #1
   a2dec:	81a3      	strh	r3, [r4, #12]
   a2dee:	60a5      	str	r5, [r4, #8]
   a2df0:	6022      	str	r2, [r4, #0]
   a2df2:	6122      	str	r2, [r4, #16]
   a2df4:	6161      	str	r1, [r4, #20]
   a2df6:	b003      	add	sp, #12
   a2df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2dfc:	60a0      	str	r0, [r4, #8]
   a2dfe:	b003      	add	sp, #12
   a2e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2e04:	6921      	ldr	r1, [r4, #16]
   a2e06:	4628      	mov	r0, r5
   a2e08:	f000 fa6a 	bl	a32e0 <_free_r>
   a2e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2e10:	e7a3      	b.n	a2d5a <setvbuf+0x56>
   a2e12:	4628      	mov	r0, r5
   a2e14:	f000 f9f8 	bl	a3208 <__sinit>
   a2e18:	e781      	b.n	a2d1e <setvbuf+0x1a>
   a2e1a:	60a6      	str	r6, [r4, #8]
   a2e1c:	b003      	add	sp, #12
   a2e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2e22:	4628      	mov	r0, r5
   a2e24:	f000 f9f0 	bl	a3208 <__sinit>
   a2e28:	e7ad      	b.n	a2d86 <setvbuf+0x82>
   a2e2a:	f04f 30ff 	mov.w	r0, #4294967295
   a2e2e:	e7e2      	b.n	a2df6 <setvbuf+0xf2>
   a2e30:	f8dd 9000 	ldr.w	r9, [sp]
   a2e34:	45b1      	cmp	r9, r6
   a2e36:	d006      	beq.n	a2e46 <setvbuf+0x142>
   a2e38:	4648      	mov	r0, r9
   a2e3a:	f000 fd59 	bl	a38f0 <malloc>
   a2e3e:	4607      	mov	r7, r0
   a2e40:	b108      	cbz	r0, a2e46 <setvbuf+0x142>
   a2e42:	464e      	mov	r6, r9
   a2e44:	e7c6      	b.n	a2dd4 <setvbuf+0xd0>
   a2e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2e4a:	f04f 30ff 	mov.w	r0, #4294967295
   a2e4e:	e7c7      	b.n	a2de0 <setvbuf+0xdc>
   a2e50:	20071090 	.word	0x20071090

000a2e54 <strlen>:
   a2e54:	f020 0103 	bic.w	r1, r0, #3
   a2e58:	f010 0003 	ands.w	r0, r0, #3
   a2e5c:	f1c0 0000 	rsb	r0, r0, #0
   a2e60:	f851 3b04 	ldr.w	r3, [r1], #4
   a2e64:	f100 0c04 	add.w	ip, r0, #4
   a2e68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a2e6c:	f06f 0200 	mvn.w	r2, #0
   a2e70:	bf1c      	itt	ne
   a2e72:	fa22 f20c 	lsrne.w	r2, r2, ip
   a2e76:	4313      	orrne	r3, r2
   a2e78:	f04f 0c01 	mov.w	ip, #1
   a2e7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a2e80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a2e84:	eba3 020c 	sub.w	r2, r3, ip
   a2e88:	ea22 0203 	bic.w	r2, r2, r3
   a2e8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a2e90:	bf04      	itt	eq
   a2e92:	f851 3b04 	ldreq.w	r3, [r1], #4
   a2e96:	3004      	addeq	r0, #4
   a2e98:	d0f4      	beq.n	a2e84 <strlen+0x30>
   a2e9a:	f1c2 0100 	rsb	r1, r2, #0
   a2e9e:	ea02 0201 	and.w	r2, r2, r1
   a2ea2:	fab2 f282 	clz	r2, r2
   a2ea6:	f1c2 021f 	rsb	r2, r2, #31
   a2eaa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a2eae:	4770      	bx	lr

000a2eb0 <__swsetup_r>:
   a2eb0:	b538      	push	{r3, r4, r5, lr}
   a2eb2:	4b30      	ldr	r3, [pc, #192]	; (a2f74 <__swsetup_r+0xc4>)
   a2eb4:	4605      	mov	r5, r0
   a2eb6:	6818      	ldr	r0, [r3, #0]
   a2eb8:	460c      	mov	r4, r1
   a2eba:	b110      	cbz	r0, a2ec2 <__swsetup_r+0x12>
   a2ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a2ebe:	2b00      	cmp	r3, #0
   a2ec0:	d038      	beq.n	a2f34 <__swsetup_r+0x84>
   a2ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a2ec6:	b293      	uxth	r3, r2
   a2ec8:	0718      	lsls	r0, r3, #28
   a2eca:	d50c      	bpl.n	a2ee6 <__swsetup_r+0x36>
   a2ecc:	6920      	ldr	r0, [r4, #16]
   a2ece:	b1a8      	cbz	r0, a2efc <__swsetup_r+0x4c>
   a2ed0:	f013 0201 	ands.w	r2, r3, #1
   a2ed4:	d01e      	beq.n	a2f14 <__swsetup_r+0x64>
   a2ed6:	6963      	ldr	r3, [r4, #20]
   a2ed8:	2200      	movs	r2, #0
   a2eda:	425b      	negs	r3, r3
   a2edc:	61a3      	str	r3, [r4, #24]
   a2ede:	60a2      	str	r2, [r4, #8]
   a2ee0:	b1f0      	cbz	r0, a2f20 <__swsetup_r+0x70>
   a2ee2:	2000      	movs	r0, #0
   a2ee4:	bd38      	pop	{r3, r4, r5, pc}
   a2ee6:	06d9      	lsls	r1, r3, #27
   a2ee8:	d53b      	bpl.n	a2f62 <__swsetup_r+0xb2>
   a2eea:	0758      	lsls	r0, r3, #29
   a2eec:	d425      	bmi.n	a2f3a <__swsetup_r+0x8a>
   a2eee:	6920      	ldr	r0, [r4, #16]
   a2ef0:	f042 0308 	orr.w	r3, r2, #8
   a2ef4:	81a3      	strh	r3, [r4, #12]
   a2ef6:	b29b      	uxth	r3, r3
   a2ef8:	2800      	cmp	r0, #0
   a2efa:	d1e9      	bne.n	a2ed0 <__swsetup_r+0x20>
   a2efc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a2f00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a2f04:	d0e4      	beq.n	a2ed0 <__swsetup_r+0x20>
   a2f06:	4628      	mov	r0, r5
   a2f08:	4621      	mov	r1, r4
   a2f0a:	f000 fcad 	bl	a3868 <__smakebuf_r>
   a2f0e:	89a3      	ldrh	r3, [r4, #12]
   a2f10:	6920      	ldr	r0, [r4, #16]
   a2f12:	e7dd      	b.n	a2ed0 <__swsetup_r+0x20>
   a2f14:	0799      	lsls	r1, r3, #30
   a2f16:	bf58      	it	pl
   a2f18:	6962      	ldrpl	r2, [r4, #20]
   a2f1a:	60a2      	str	r2, [r4, #8]
   a2f1c:	2800      	cmp	r0, #0
   a2f1e:	d1e0      	bne.n	a2ee2 <__swsetup_r+0x32>
   a2f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2f24:	061a      	lsls	r2, r3, #24
   a2f26:	d5dd      	bpl.n	a2ee4 <__swsetup_r+0x34>
   a2f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a2f2c:	81a3      	strh	r3, [r4, #12]
   a2f2e:	f04f 30ff 	mov.w	r0, #4294967295
   a2f32:	bd38      	pop	{r3, r4, r5, pc}
   a2f34:	f000 f968 	bl	a3208 <__sinit>
   a2f38:	e7c3      	b.n	a2ec2 <__swsetup_r+0x12>
   a2f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a2f3c:	b151      	cbz	r1, a2f54 <__swsetup_r+0xa4>
   a2f3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a2f42:	4299      	cmp	r1, r3
   a2f44:	d004      	beq.n	a2f50 <__swsetup_r+0xa0>
   a2f46:	4628      	mov	r0, r5
   a2f48:	f000 f9ca 	bl	a32e0 <_free_r>
   a2f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a2f50:	2300      	movs	r3, #0
   a2f52:	6323      	str	r3, [r4, #48]	; 0x30
   a2f54:	6920      	ldr	r0, [r4, #16]
   a2f56:	2300      	movs	r3, #0
   a2f58:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a2f5c:	e884 0009 	stmia.w	r4, {r0, r3}
   a2f60:	e7c6      	b.n	a2ef0 <__swsetup_r+0x40>
   a2f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a2f66:	2309      	movs	r3, #9
   a2f68:	602b      	str	r3, [r5, #0]
   a2f6a:	f04f 30ff 	mov.w	r0, #4294967295
   a2f6e:	81a2      	strh	r2, [r4, #12]
   a2f70:	bd38      	pop	{r3, r4, r5, pc}
   a2f72:	bf00      	nop
   a2f74:	20071090 	.word	0x20071090

000a2f78 <register_fini>:
   a2f78:	4b02      	ldr	r3, [pc, #8]	; (a2f84 <register_fini+0xc>)
   a2f7a:	b113      	cbz	r3, a2f82 <register_fini+0xa>
   a2f7c:	4802      	ldr	r0, [pc, #8]	; (a2f88 <register_fini+0x10>)
   a2f7e:	f000 b805 	b.w	a2f8c <atexit>
   a2f82:	4770      	bx	lr
   a2f84:	00000000 	.word	0x00000000
   a2f88:	000a321d 	.word	0x000a321d

000a2f8c <atexit>:
   a2f8c:	2300      	movs	r3, #0
   a2f8e:	4601      	mov	r1, r0
   a2f90:	461a      	mov	r2, r3
   a2f92:	4618      	mov	r0, r3
   a2f94:	f001 ba64 	b.w	a4460 <__register_exitproc>

000a2f98 <__sflush_r>:
   a2f98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   a2f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a2fa0:	b29a      	uxth	r2, r3
   a2fa2:	460d      	mov	r5, r1
   a2fa4:	0711      	lsls	r1, r2, #28
   a2fa6:	4680      	mov	r8, r0
   a2fa8:	d43c      	bmi.n	a3024 <__sflush_r+0x8c>
   a2faa:	686a      	ldr	r2, [r5, #4]
   a2fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a2fb0:	2a00      	cmp	r2, #0
   a2fb2:	81ab      	strh	r3, [r5, #12]
   a2fb4:	dd73      	ble.n	a309e <__sflush_r+0x106>
   a2fb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a2fb8:	2c00      	cmp	r4, #0
   a2fba:	d04b      	beq.n	a3054 <__sflush_r+0xbc>
   a2fbc:	b29b      	uxth	r3, r3
   a2fbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a2fc2:	2100      	movs	r1, #0
   a2fc4:	b292      	uxth	r2, r2
   a2fc6:	f8d8 6000 	ldr.w	r6, [r8]
   a2fca:	f8c8 1000 	str.w	r1, [r8]
   a2fce:	2a00      	cmp	r2, #0
   a2fd0:	d069      	beq.n	a30a6 <__sflush_r+0x10e>
   a2fd2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a2fd4:	075f      	lsls	r7, r3, #29
   a2fd6:	d505      	bpl.n	a2fe4 <__sflush_r+0x4c>
   a2fd8:	6869      	ldr	r1, [r5, #4]
   a2fda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a2fdc:	1a52      	subs	r2, r2, r1
   a2fde:	b10b      	cbz	r3, a2fe4 <__sflush_r+0x4c>
   a2fe0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a2fe2:	1ad2      	subs	r2, r2, r3
   a2fe4:	2300      	movs	r3, #0
   a2fe6:	69e9      	ldr	r1, [r5, #28]
   a2fe8:	4640      	mov	r0, r8
   a2fea:	47a0      	blx	r4
   a2fec:	1c44      	adds	r4, r0, #1
   a2fee:	d03c      	beq.n	a306a <__sflush_r+0xd2>
   a2ff0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a2ff4:	6929      	ldr	r1, [r5, #16]
   a2ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a2ffa:	2200      	movs	r2, #0
   a2ffc:	81ab      	strh	r3, [r5, #12]
   a2ffe:	04db      	lsls	r3, r3, #19
   a3000:	e885 0006 	stmia.w	r5, {r1, r2}
   a3004:	d449      	bmi.n	a309a <__sflush_r+0x102>
   a3006:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a3008:	f8c8 6000 	str.w	r6, [r8]
   a300c:	b311      	cbz	r1, a3054 <__sflush_r+0xbc>
   a300e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a3012:	4299      	cmp	r1, r3
   a3014:	d002      	beq.n	a301c <__sflush_r+0x84>
   a3016:	4640      	mov	r0, r8
   a3018:	f000 f962 	bl	a32e0 <_free_r>
   a301c:	2000      	movs	r0, #0
   a301e:	6328      	str	r0, [r5, #48]	; 0x30
   a3020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3024:	692e      	ldr	r6, [r5, #16]
   a3026:	b1ae      	cbz	r6, a3054 <__sflush_r+0xbc>
   a3028:	0790      	lsls	r0, r2, #30
   a302a:	682c      	ldr	r4, [r5, #0]
   a302c:	bf0c      	ite	eq
   a302e:	696b      	ldreq	r3, [r5, #20]
   a3030:	2300      	movne	r3, #0
   a3032:	602e      	str	r6, [r5, #0]
   a3034:	1ba4      	subs	r4, r4, r6
   a3036:	60ab      	str	r3, [r5, #8]
   a3038:	e00a      	b.n	a3050 <__sflush_r+0xb8>
   a303a:	4623      	mov	r3, r4
   a303c:	4632      	mov	r2, r6
   a303e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a3040:	69e9      	ldr	r1, [r5, #28]
   a3042:	4640      	mov	r0, r8
   a3044:	47b8      	blx	r7
   a3046:	2800      	cmp	r0, #0
   a3048:	eba4 0400 	sub.w	r4, r4, r0
   a304c:	4406      	add	r6, r0
   a304e:	dd04      	ble.n	a305a <__sflush_r+0xc2>
   a3050:	2c00      	cmp	r4, #0
   a3052:	dcf2      	bgt.n	a303a <__sflush_r+0xa2>
   a3054:	2000      	movs	r0, #0
   a3056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a305a:	89ab      	ldrh	r3, [r5, #12]
   a305c:	f04f 30ff 	mov.w	r0, #4294967295
   a3060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a3064:	81ab      	strh	r3, [r5, #12]
   a3066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a306a:	f8d8 2000 	ldr.w	r2, [r8]
   a306e:	2a1d      	cmp	r2, #29
   a3070:	d8f3      	bhi.n	a305a <__sflush_r+0xc2>
   a3072:	4b1a      	ldr	r3, [pc, #104]	; (a30dc <__sflush_r+0x144>)
   a3074:	40d3      	lsrs	r3, r2
   a3076:	f003 0301 	and.w	r3, r3, #1
   a307a:	f083 0401 	eor.w	r4, r3, #1
   a307e:	2b00      	cmp	r3, #0
   a3080:	d0eb      	beq.n	a305a <__sflush_r+0xc2>
   a3082:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a3086:	6929      	ldr	r1, [r5, #16]
   a3088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a308c:	6029      	str	r1, [r5, #0]
   a308e:	04d9      	lsls	r1, r3, #19
   a3090:	606c      	str	r4, [r5, #4]
   a3092:	81ab      	strh	r3, [r5, #12]
   a3094:	d5b7      	bpl.n	a3006 <__sflush_r+0x6e>
   a3096:	2a00      	cmp	r2, #0
   a3098:	d1b5      	bne.n	a3006 <__sflush_r+0x6e>
   a309a:	6528      	str	r0, [r5, #80]	; 0x50
   a309c:	e7b3      	b.n	a3006 <__sflush_r+0x6e>
   a309e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a30a0:	2a00      	cmp	r2, #0
   a30a2:	dc88      	bgt.n	a2fb6 <__sflush_r+0x1e>
   a30a4:	e7d6      	b.n	a3054 <__sflush_r+0xbc>
   a30a6:	2301      	movs	r3, #1
   a30a8:	69e9      	ldr	r1, [r5, #28]
   a30aa:	4640      	mov	r0, r8
   a30ac:	47a0      	blx	r4
   a30ae:	1c43      	adds	r3, r0, #1
   a30b0:	4602      	mov	r2, r0
   a30b2:	d002      	beq.n	a30ba <__sflush_r+0x122>
   a30b4:	89ab      	ldrh	r3, [r5, #12]
   a30b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a30b8:	e78c      	b.n	a2fd4 <__sflush_r+0x3c>
   a30ba:	f8d8 3000 	ldr.w	r3, [r8]
   a30be:	2b00      	cmp	r3, #0
   a30c0:	d0f8      	beq.n	a30b4 <__sflush_r+0x11c>
   a30c2:	2b1d      	cmp	r3, #29
   a30c4:	d001      	beq.n	a30ca <__sflush_r+0x132>
   a30c6:	2b16      	cmp	r3, #22
   a30c8:	d102      	bne.n	a30d0 <__sflush_r+0x138>
   a30ca:	f8c8 6000 	str.w	r6, [r8]
   a30ce:	e7c1      	b.n	a3054 <__sflush_r+0xbc>
   a30d0:	89ab      	ldrh	r3, [r5, #12]
   a30d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a30d6:	81ab      	strh	r3, [r5, #12]
   a30d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a30dc:	20400001 	.word	0x20400001

000a30e0 <_fflush_r>:
   a30e0:	b510      	push	{r4, lr}
   a30e2:	4604      	mov	r4, r0
   a30e4:	b082      	sub	sp, #8
   a30e6:	b108      	cbz	r0, a30ec <_fflush_r+0xc>
   a30e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a30ea:	b153      	cbz	r3, a3102 <_fflush_r+0x22>
   a30ec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a30f0:	b908      	cbnz	r0, a30f6 <_fflush_r+0x16>
   a30f2:	b002      	add	sp, #8
   a30f4:	bd10      	pop	{r4, pc}
   a30f6:	4620      	mov	r0, r4
   a30f8:	b002      	add	sp, #8
   a30fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a30fe:	f7ff bf4b 	b.w	a2f98 <__sflush_r>
   a3102:	9101      	str	r1, [sp, #4]
   a3104:	f000 f880 	bl	a3208 <__sinit>
   a3108:	9901      	ldr	r1, [sp, #4]
   a310a:	e7ef      	b.n	a30ec <_fflush_r+0xc>

000a310c <_cleanup_r>:
   a310c:	4901      	ldr	r1, [pc, #4]	; (a3114 <_cleanup_r+0x8>)
   a310e:	f000 bb53 	b.w	a37b8 <_fwalk_reent>
   a3112:	bf00      	nop
   a3114:	000a4529 	.word	0x000a4529

000a3118 <__sinit.part.1>:
   a3118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a311c:	4607      	mov	r7, r0
   a311e:	4835      	ldr	r0, [pc, #212]	; (a31f4 <__sinit.part.1+0xdc>)
   a3120:	687d      	ldr	r5, [r7, #4]
   a3122:	2400      	movs	r4, #0
   a3124:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a3128:	2304      	movs	r3, #4
   a312a:	2103      	movs	r1, #3
   a312c:	63f8      	str	r0, [r7, #60]	; 0x3c
   a312e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a3132:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a3136:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a313a:	b083      	sub	sp, #12
   a313c:	602c      	str	r4, [r5, #0]
   a313e:	606c      	str	r4, [r5, #4]
   a3140:	60ac      	str	r4, [r5, #8]
   a3142:	666c      	str	r4, [r5, #100]	; 0x64
   a3144:	81ec      	strh	r4, [r5, #14]
   a3146:	612c      	str	r4, [r5, #16]
   a3148:	616c      	str	r4, [r5, #20]
   a314a:	61ac      	str	r4, [r5, #24]
   a314c:	81ab      	strh	r3, [r5, #12]
   a314e:	4621      	mov	r1, r4
   a3150:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a3154:	2208      	movs	r2, #8
   a3156:	f7ff fd43 	bl	a2be0 <memset>
   a315a:	f8df b09c 	ldr.w	fp, [pc, #156]	; a31f8 <__sinit.part.1+0xe0>
   a315e:	68be      	ldr	r6, [r7, #8]
   a3160:	f8df a098 	ldr.w	sl, [pc, #152]	; a31fc <__sinit.part.1+0xe4>
   a3164:	f8df 9098 	ldr.w	r9, [pc, #152]	; a3200 <__sinit.part.1+0xe8>
   a3168:	f8df 8098 	ldr.w	r8, [pc, #152]	; a3204 <__sinit.part.1+0xec>
   a316c:	2301      	movs	r3, #1
   a316e:	2209      	movs	r2, #9
   a3170:	f8c5 b020 	str.w	fp, [r5, #32]
   a3174:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a3178:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a317c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a3180:	61ed      	str	r5, [r5, #28]
   a3182:	4621      	mov	r1, r4
   a3184:	81f3      	strh	r3, [r6, #14]
   a3186:	81b2      	strh	r2, [r6, #12]
   a3188:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a318c:	6034      	str	r4, [r6, #0]
   a318e:	6074      	str	r4, [r6, #4]
   a3190:	60b4      	str	r4, [r6, #8]
   a3192:	6674      	str	r4, [r6, #100]	; 0x64
   a3194:	6134      	str	r4, [r6, #16]
   a3196:	6174      	str	r4, [r6, #20]
   a3198:	61b4      	str	r4, [r6, #24]
   a319a:	2208      	movs	r2, #8
   a319c:	9301      	str	r3, [sp, #4]
   a319e:	f7ff fd1f 	bl	a2be0 <memset>
   a31a2:	68fd      	ldr	r5, [r7, #12]
   a31a4:	2012      	movs	r0, #18
   a31a6:	2202      	movs	r2, #2
   a31a8:	61f6      	str	r6, [r6, #28]
   a31aa:	f8c6 b020 	str.w	fp, [r6, #32]
   a31ae:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a31b2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a31b6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a31ba:	4621      	mov	r1, r4
   a31bc:	81a8      	strh	r0, [r5, #12]
   a31be:	81ea      	strh	r2, [r5, #14]
   a31c0:	602c      	str	r4, [r5, #0]
   a31c2:	606c      	str	r4, [r5, #4]
   a31c4:	60ac      	str	r4, [r5, #8]
   a31c6:	666c      	str	r4, [r5, #100]	; 0x64
   a31c8:	612c      	str	r4, [r5, #16]
   a31ca:	616c      	str	r4, [r5, #20]
   a31cc:	61ac      	str	r4, [r5, #24]
   a31ce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a31d2:	2208      	movs	r2, #8
   a31d4:	f7ff fd04 	bl	a2be0 <memset>
   a31d8:	9b01      	ldr	r3, [sp, #4]
   a31da:	61ed      	str	r5, [r5, #28]
   a31dc:	f8c5 b020 	str.w	fp, [r5, #32]
   a31e0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a31e4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a31e8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a31ec:	63bb      	str	r3, [r7, #56]	; 0x38
   a31ee:	b003      	add	sp, #12
   a31f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a31f4:	000a310d 	.word	0x000a310d
   a31f8:	000a43ad 	.word	0x000a43ad
   a31fc:	000a43d1 	.word	0x000a43d1
   a3200:	000a440d 	.word	0x000a440d
   a3204:	000a442d 	.word	0x000a442d

000a3208 <__sinit>:
   a3208:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a320a:	b103      	cbz	r3, a320e <__sinit+0x6>
   a320c:	4770      	bx	lr
   a320e:	f7ff bf83 	b.w	a3118 <__sinit.part.1>
   a3212:	bf00      	nop

000a3214 <__sfp_lock_acquire>:
   a3214:	4770      	bx	lr
   a3216:	bf00      	nop

000a3218 <__sfp_lock_release>:
   a3218:	4770      	bx	lr
   a321a:	bf00      	nop

000a321c <__libc_fini_array>:
   a321c:	b538      	push	{r3, r4, r5, lr}
   a321e:	4d07      	ldr	r5, [pc, #28]	; (a323c <__libc_fini_array+0x20>)
   a3220:	4c07      	ldr	r4, [pc, #28]	; (a3240 <__libc_fini_array+0x24>)
   a3222:	1b2c      	subs	r4, r5, r4
   a3224:	10a4      	asrs	r4, r4, #2
   a3226:	d005      	beq.n	a3234 <__libc_fini_array+0x18>
   a3228:	3c01      	subs	r4, #1
   a322a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a322e:	4798      	blx	r3
   a3230:	2c00      	cmp	r4, #0
   a3232:	d1f9      	bne.n	a3228 <__libc_fini_array+0xc>
   a3234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a3238:	f001 bce2 	b.w	a4c00 <_fini>
   a323c:	000a4c10 	.word	0x000a4c10
   a3240:	000a4c0c 	.word	0x000a4c0c

000a3244 <_malloc_trim_r>:
   a3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a3246:	460c      	mov	r4, r1
   a3248:	4f22      	ldr	r7, [pc, #136]	; (a32d4 <_malloc_trim_r+0x90>)
   a324a:	4606      	mov	r6, r0
   a324c:	f000 feae 	bl	a3fac <__malloc_lock>
   a3250:	68bb      	ldr	r3, [r7, #8]
   a3252:	685d      	ldr	r5, [r3, #4]
   a3254:	f025 0503 	bic.w	r5, r5, #3
   a3258:	1b29      	subs	r1, r5, r4
   a325a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a325e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a3262:	f021 010f 	bic.w	r1, r1, #15
   a3266:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a326a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a326e:	db07      	blt.n	a3280 <_malloc_trim_r+0x3c>
   a3270:	2100      	movs	r1, #0
   a3272:	4630      	mov	r0, r6
   a3274:	f001 f888 	bl	a4388 <_sbrk_r>
   a3278:	68bb      	ldr	r3, [r7, #8]
   a327a:	442b      	add	r3, r5
   a327c:	4298      	cmp	r0, r3
   a327e:	d004      	beq.n	a328a <_malloc_trim_r+0x46>
   a3280:	4630      	mov	r0, r6
   a3282:	f000 fe95 	bl	a3fb0 <__malloc_unlock>
   a3286:	2000      	movs	r0, #0
   a3288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a328a:	4261      	negs	r1, r4
   a328c:	4630      	mov	r0, r6
   a328e:	f001 f87b 	bl	a4388 <_sbrk_r>
   a3292:	3001      	adds	r0, #1
   a3294:	d00d      	beq.n	a32b2 <_malloc_trim_r+0x6e>
   a3296:	4b10      	ldr	r3, [pc, #64]	; (a32d8 <_malloc_trim_r+0x94>)
   a3298:	68ba      	ldr	r2, [r7, #8]
   a329a:	6819      	ldr	r1, [r3, #0]
   a329c:	1b2d      	subs	r5, r5, r4
   a329e:	f045 0501 	orr.w	r5, r5, #1
   a32a2:	4630      	mov	r0, r6
   a32a4:	1b09      	subs	r1, r1, r4
   a32a6:	6055      	str	r5, [r2, #4]
   a32a8:	6019      	str	r1, [r3, #0]
   a32aa:	f000 fe81 	bl	a3fb0 <__malloc_unlock>
   a32ae:	2001      	movs	r0, #1
   a32b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a32b2:	2100      	movs	r1, #0
   a32b4:	4630      	mov	r0, r6
   a32b6:	f001 f867 	bl	a4388 <_sbrk_r>
   a32ba:	68ba      	ldr	r2, [r7, #8]
   a32bc:	1a83      	subs	r3, r0, r2
   a32be:	2b0f      	cmp	r3, #15
   a32c0:	ddde      	ble.n	a3280 <_malloc_trim_r+0x3c>
   a32c2:	4c06      	ldr	r4, [pc, #24]	; (a32dc <_malloc_trim_r+0x98>)
   a32c4:	4904      	ldr	r1, [pc, #16]	; (a32d8 <_malloc_trim_r+0x94>)
   a32c6:	6824      	ldr	r4, [r4, #0]
   a32c8:	f043 0301 	orr.w	r3, r3, #1
   a32cc:	1b00      	subs	r0, r0, r4
   a32ce:	6053      	str	r3, [r2, #4]
   a32d0:	6008      	str	r0, [r1, #0]
   a32d2:	e7d5      	b.n	a3280 <_malloc_trim_r+0x3c>
   a32d4:	20071094 	.word	0x20071094
   a32d8:	2007284c 	.word	0x2007284c
   a32dc:	200714a0 	.word	0x200714a0

000a32e0 <_free_r>:
   a32e0:	2900      	cmp	r1, #0
   a32e2:	d045      	beq.n	a3370 <_free_r+0x90>
   a32e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a32e8:	460d      	mov	r5, r1
   a32ea:	4680      	mov	r8, r0
   a32ec:	f000 fe5e 	bl	a3fac <__malloc_lock>
   a32f0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a32f4:	496a      	ldr	r1, [pc, #424]	; (a34a0 <_free_r+0x1c0>)
   a32f6:	f1a5 0408 	sub.w	r4, r5, #8
   a32fa:	f027 0301 	bic.w	r3, r7, #1
   a32fe:	18e2      	adds	r2, r4, r3
   a3300:	688e      	ldr	r6, [r1, #8]
   a3302:	6850      	ldr	r0, [r2, #4]
   a3304:	42b2      	cmp	r2, r6
   a3306:	f020 0003 	bic.w	r0, r0, #3
   a330a:	d062      	beq.n	a33d2 <_free_r+0xf2>
   a330c:	07fe      	lsls	r6, r7, #31
   a330e:	6050      	str	r0, [r2, #4]
   a3310:	d40b      	bmi.n	a332a <_free_r+0x4a>
   a3312:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a3316:	f101 0e08 	add.w	lr, r1, #8
   a331a:	1be4      	subs	r4, r4, r7
   a331c:	68a5      	ldr	r5, [r4, #8]
   a331e:	443b      	add	r3, r7
   a3320:	4575      	cmp	r5, lr
   a3322:	d06f      	beq.n	a3404 <_free_r+0x124>
   a3324:	68e7      	ldr	r7, [r4, #12]
   a3326:	60ef      	str	r7, [r5, #12]
   a3328:	60bd      	str	r5, [r7, #8]
   a332a:	1815      	adds	r5, r2, r0
   a332c:	686d      	ldr	r5, [r5, #4]
   a332e:	07ed      	lsls	r5, r5, #31
   a3330:	d542      	bpl.n	a33b8 <_free_r+0xd8>
   a3332:	f043 0201 	orr.w	r2, r3, #1
   a3336:	6062      	str	r2, [r4, #4]
   a3338:	50e3      	str	r3, [r4, r3]
   a333a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a333e:	d218      	bcs.n	a3372 <_free_r+0x92>
   a3340:	08db      	lsrs	r3, r3, #3
   a3342:	6848      	ldr	r0, [r1, #4]
   a3344:	109d      	asrs	r5, r3, #2
   a3346:	2201      	movs	r2, #1
   a3348:	3301      	adds	r3, #1
   a334a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a334e:	fa02 f505 	lsl.w	r5, r2, r5
   a3352:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   a3356:	4328      	orrs	r0, r5
   a3358:	3a08      	subs	r2, #8
   a335a:	60e2      	str	r2, [r4, #12]
   a335c:	60a7      	str	r7, [r4, #8]
   a335e:	6048      	str	r0, [r1, #4]
   a3360:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a3364:	60fc      	str	r4, [r7, #12]
   a3366:	4640      	mov	r0, r8
   a3368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a336c:	f000 be20 	b.w	a3fb0 <__malloc_unlock>
   a3370:	4770      	bx	lr
   a3372:	0a5a      	lsrs	r2, r3, #9
   a3374:	2a04      	cmp	r2, #4
   a3376:	d853      	bhi.n	a3420 <_free_r+0x140>
   a3378:	099a      	lsrs	r2, r3, #6
   a337a:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a337e:	007f      	lsls	r7, r7, #1
   a3380:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a3384:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   a3388:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   a338c:	3808      	subs	r0, #8
   a338e:	4290      	cmp	r0, r2
   a3390:	4943      	ldr	r1, [pc, #268]	; (a34a0 <_free_r+0x1c0>)
   a3392:	d04d      	beq.n	a3430 <_free_r+0x150>
   a3394:	6851      	ldr	r1, [r2, #4]
   a3396:	f021 0103 	bic.w	r1, r1, #3
   a339a:	428b      	cmp	r3, r1
   a339c:	d202      	bcs.n	a33a4 <_free_r+0xc4>
   a339e:	6892      	ldr	r2, [r2, #8]
   a33a0:	4290      	cmp	r0, r2
   a33a2:	d1f7      	bne.n	a3394 <_free_r+0xb4>
   a33a4:	68d0      	ldr	r0, [r2, #12]
   a33a6:	60e0      	str	r0, [r4, #12]
   a33a8:	60a2      	str	r2, [r4, #8]
   a33aa:	6084      	str	r4, [r0, #8]
   a33ac:	60d4      	str	r4, [r2, #12]
   a33ae:	4640      	mov	r0, r8
   a33b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a33b4:	f000 bdfc 	b.w	a3fb0 <__malloc_unlock>
   a33b8:	6895      	ldr	r5, [r2, #8]
   a33ba:	4f3a      	ldr	r7, [pc, #232]	; (a34a4 <_free_r+0x1c4>)
   a33bc:	4403      	add	r3, r0
   a33be:	42bd      	cmp	r5, r7
   a33c0:	d03f      	beq.n	a3442 <_free_r+0x162>
   a33c2:	68d0      	ldr	r0, [r2, #12]
   a33c4:	f043 0201 	orr.w	r2, r3, #1
   a33c8:	60e8      	str	r0, [r5, #12]
   a33ca:	6085      	str	r5, [r0, #8]
   a33cc:	6062      	str	r2, [r4, #4]
   a33ce:	50e3      	str	r3, [r4, r3]
   a33d0:	e7b3      	b.n	a333a <_free_r+0x5a>
   a33d2:	07ff      	lsls	r7, r7, #31
   a33d4:	4403      	add	r3, r0
   a33d6:	d407      	bmi.n	a33e8 <_free_r+0x108>
   a33d8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a33dc:	1b64      	subs	r4, r4, r5
   a33de:	68e2      	ldr	r2, [r4, #12]
   a33e0:	68a0      	ldr	r0, [r4, #8]
   a33e2:	442b      	add	r3, r5
   a33e4:	60c2      	str	r2, [r0, #12]
   a33e6:	6090      	str	r0, [r2, #8]
   a33e8:	4a2f      	ldr	r2, [pc, #188]	; (a34a8 <_free_r+0x1c8>)
   a33ea:	f043 0001 	orr.w	r0, r3, #1
   a33ee:	6812      	ldr	r2, [r2, #0]
   a33f0:	6060      	str	r0, [r4, #4]
   a33f2:	4293      	cmp	r3, r2
   a33f4:	608c      	str	r4, [r1, #8]
   a33f6:	d3b6      	bcc.n	a3366 <_free_r+0x86>
   a33f8:	4b2c      	ldr	r3, [pc, #176]	; (a34ac <_free_r+0x1cc>)
   a33fa:	4640      	mov	r0, r8
   a33fc:	6819      	ldr	r1, [r3, #0]
   a33fe:	f7ff ff21 	bl	a3244 <_malloc_trim_r>
   a3402:	e7b0      	b.n	a3366 <_free_r+0x86>
   a3404:	1811      	adds	r1, r2, r0
   a3406:	6849      	ldr	r1, [r1, #4]
   a3408:	07c9      	lsls	r1, r1, #31
   a340a:	d444      	bmi.n	a3496 <_free_r+0x1b6>
   a340c:	6891      	ldr	r1, [r2, #8]
   a340e:	4403      	add	r3, r0
   a3410:	68d2      	ldr	r2, [r2, #12]
   a3412:	f043 0001 	orr.w	r0, r3, #1
   a3416:	60ca      	str	r2, [r1, #12]
   a3418:	6091      	str	r1, [r2, #8]
   a341a:	6060      	str	r0, [r4, #4]
   a341c:	50e3      	str	r3, [r4, r3]
   a341e:	e7a2      	b.n	a3366 <_free_r+0x86>
   a3420:	2a14      	cmp	r2, #20
   a3422:	d817      	bhi.n	a3454 <_free_r+0x174>
   a3424:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a3428:	007f      	lsls	r7, r7, #1
   a342a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a342e:	e7a9      	b.n	a3384 <_free_r+0xa4>
   a3430:	10aa      	asrs	r2, r5, #2
   a3432:	684b      	ldr	r3, [r1, #4]
   a3434:	2501      	movs	r5, #1
   a3436:	fa05 f202 	lsl.w	r2, r5, r2
   a343a:	4313      	orrs	r3, r2
   a343c:	604b      	str	r3, [r1, #4]
   a343e:	4602      	mov	r2, r0
   a3440:	e7b1      	b.n	a33a6 <_free_r+0xc6>
   a3442:	f043 0201 	orr.w	r2, r3, #1
   a3446:	614c      	str	r4, [r1, #20]
   a3448:	610c      	str	r4, [r1, #16]
   a344a:	60e5      	str	r5, [r4, #12]
   a344c:	60a5      	str	r5, [r4, #8]
   a344e:	6062      	str	r2, [r4, #4]
   a3450:	50e3      	str	r3, [r4, r3]
   a3452:	e788      	b.n	a3366 <_free_r+0x86>
   a3454:	2a54      	cmp	r2, #84	; 0x54
   a3456:	d806      	bhi.n	a3466 <_free_r+0x186>
   a3458:	0b1a      	lsrs	r2, r3, #12
   a345a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a345e:	007f      	lsls	r7, r7, #1
   a3460:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a3464:	e78e      	b.n	a3384 <_free_r+0xa4>
   a3466:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a346a:	d806      	bhi.n	a347a <_free_r+0x19a>
   a346c:	0bda      	lsrs	r2, r3, #15
   a346e:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a3472:	007f      	lsls	r7, r7, #1
   a3474:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a3478:	e784      	b.n	a3384 <_free_r+0xa4>
   a347a:	f240 5054 	movw	r0, #1364	; 0x554
   a347e:	4282      	cmp	r2, r0
   a3480:	d806      	bhi.n	a3490 <_free_r+0x1b0>
   a3482:	0c9a      	lsrs	r2, r3, #18
   a3484:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a3488:	007f      	lsls	r7, r7, #1
   a348a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a348e:	e779      	b.n	a3384 <_free_r+0xa4>
   a3490:	27fe      	movs	r7, #254	; 0xfe
   a3492:	257e      	movs	r5, #126	; 0x7e
   a3494:	e776      	b.n	a3384 <_free_r+0xa4>
   a3496:	f043 0201 	orr.w	r2, r3, #1
   a349a:	6062      	str	r2, [r4, #4]
   a349c:	50e3      	str	r3, [r4, r3]
   a349e:	e762      	b.n	a3366 <_free_r+0x86>
   a34a0:	20071094 	.word	0x20071094
   a34a4:	2007109c 	.word	0x2007109c
   a34a8:	2007149c 	.word	0x2007149c
   a34ac:	20072848 	.word	0x20072848

000a34b0 <__sfvwrite_r>:
   a34b0:	6893      	ldr	r3, [r2, #8]
   a34b2:	2b00      	cmp	r3, #0
   a34b4:	f000 80ab 	beq.w	a360e <__sfvwrite_r+0x15e>
   a34b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a34bc:	898b      	ldrh	r3, [r1, #12]
   a34be:	b085      	sub	sp, #20
   a34c0:	460c      	mov	r4, r1
   a34c2:	0719      	lsls	r1, r3, #28
   a34c4:	9002      	str	r0, [sp, #8]
   a34c6:	4616      	mov	r6, r2
   a34c8:	d528      	bpl.n	a351c <__sfvwrite_r+0x6c>
   a34ca:	6922      	ldr	r2, [r4, #16]
   a34cc:	b332      	cbz	r2, a351c <__sfvwrite_r+0x6c>
   a34ce:	f003 0802 	and.w	r8, r3, #2
   a34d2:	fa1f f088 	uxth.w	r0, r8
   a34d6:	6835      	ldr	r5, [r6, #0]
   a34d8:	b378      	cbz	r0, a353a <__sfvwrite_r+0x8a>
   a34da:	f04f 0900 	mov.w	r9, #0
   a34de:	46c8      	mov	r8, r9
   a34e0:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a37b4 <__sfvwrite_r+0x304>
   a34e4:	f1b8 0f00 	cmp.w	r8, #0
   a34e8:	f000 808b 	beq.w	a3602 <__sfvwrite_r+0x152>
   a34ec:	45d0      	cmp	r8, sl
   a34ee:	4643      	mov	r3, r8
   a34f0:	464a      	mov	r2, r9
   a34f2:	bf28      	it	cs
   a34f4:	4653      	movcs	r3, sl
   a34f6:	69e1      	ldr	r1, [r4, #28]
   a34f8:	9802      	ldr	r0, [sp, #8]
   a34fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a34fc:	47b8      	blx	r7
   a34fe:	2800      	cmp	r0, #0
   a3500:	f340 80a5 	ble.w	a364e <__sfvwrite_r+0x19e>
   a3504:	68b3      	ldr	r3, [r6, #8]
   a3506:	4481      	add	r9, r0
   a3508:	1a1b      	subs	r3, r3, r0
   a350a:	ebc0 0808 	rsb	r8, r0, r8
   a350e:	60b3      	str	r3, [r6, #8]
   a3510:	2b00      	cmp	r3, #0
   a3512:	d1e7      	bne.n	a34e4 <__sfvwrite_r+0x34>
   a3514:	2000      	movs	r0, #0
   a3516:	b005      	add	sp, #20
   a3518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a351c:	4621      	mov	r1, r4
   a351e:	9802      	ldr	r0, [sp, #8]
   a3520:	f7ff fcc6 	bl	a2eb0 <__swsetup_r>
   a3524:	2800      	cmp	r0, #0
   a3526:	f040 813c 	bne.w	a37a2 <__sfvwrite_r+0x2f2>
   a352a:	89a3      	ldrh	r3, [r4, #12]
   a352c:	6835      	ldr	r5, [r6, #0]
   a352e:	f003 0802 	and.w	r8, r3, #2
   a3532:	fa1f f088 	uxth.w	r0, r8
   a3536:	2800      	cmp	r0, #0
   a3538:	d1cf      	bne.n	a34da <__sfvwrite_r+0x2a>
   a353a:	f013 0901 	ands.w	r9, r3, #1
   a353e:	f040 8090 	bne.w	a3662 <__sfvwrite_r+0x1b2>
   a3542:	464f      	mov	r7, r9
   a3544:	9601      	str	r6, [sp, #4]
   a3546:	2f00      	cmp	r7, #0
   a3548:	d056      	beq.n	a35f8 <__sfvwrite_r+0x148>
   a354a:	059a      	lsls	r2, r3, #22
   a354c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   a3550:	d55f      	bpl.n	a3612 <__sfvwrite_r+0x162>
   a3552:	4547      	cmp	r7, r8
   a3554:	46c2      	mov	sl, r8
   a3556:	f0c0 80bf 	bcc.w	a36d8 <__sfvwrite_r+0x228>
   a355a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   a355e:	f000 80bd 	beq.w	a36dc <__sfvwrite_r+0x22c>
   a3562:	6962      	ldr	r2, [r4, #20]
   a3564:	6820      	ldr	r0, [r4, #0]
   a3566:	6921      	ldr	r1, [r4, #16]
   a3568:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   a356c:	ebc1 0a00 	rsb	sl, r1, r0
   a3570:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   a3574:	f10a 0001 	add.w	r0, sl, #1
   a3578:	ea4f 0868 	mov.w	r8, r8, asr #1
   a357c:	4438      	add	r0, r7
   a357e:	4540      	cmp	r0, r8
   a3580:	4642      	mov	r2, r8
   a3582:	bf84      	itt	hi
   a3584:	4680      	movhi	r8, r0
   a3586:	4642      	movhi	r2, r8
   a3588:	055b      	lsls	r3, r3, #21
   a358a:	f140 80f2 	bpl.w	a3772 <__sfvwrite_r+0x2c2>
   a358e:	4611      	mov	r1, r2
   a3590:	9802      	ldr	r0, [sp, #8]
   a3592:	f000 f9b5 	bl	a3900 <_malloc_r>
   a3596:	4683      	mov	fp, r0
   a3598:	2800      	cmp	r0, #0
   a359a:	f000 8105 	beq.w	a37a8 <__sfvwrite_r+0x2f8>
   a359e:	4652      	mov	r2, sl
   a35a0:	6921      	ldr	r1, [r4, #16]
   a35a2:	f7ff faa7 	bl	a2af4 <memcpy>
   a35a6:	89a3      	ldrh	r3, [r4, #12]
   a35a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   a35ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a35b0:	81a3      	strh	r3, [r4, #12]
   a35b2:	ebca 0308 	rsb	r3, sl, r8
   a35b6:	eb0b 000a 	add.w	r0, fp, sl
   a35ba:	f8c4 8014 	str.w	r8, [r4, #20]
   a35be:	46ba      	mov	sl, r7
   a35c0:	46b8      	mov	r8, r7
   a35c2:	f8c4 b010 	str.w	fp, [r4, #16]
   a35c6:	6020      	str	r0, [r4, #0]
   a35c8:	60a3      	str	r3, [r4, #8]
   a35ca:	4652      	mov	r2, sl
   a35cc:	4649      	mov	r1, r9
   a35ce:	f000 fc89 	bl	a3ee4 <memmove>
   a35d2:	68a0      	ldr	r0, [r4, #8]
   a35d4:	6823      	ldr	r3, [r4, #0]
   a35d6:	ebc8 0000 	rsb	r0, r8, r0
   a35da:	60a0      	str	r0, [r4, #8]
   a35dc:	4638      	mov	r0, r7
   a35de:	4453      	add	r3, sl
   a35e0:	6023      	str	r3, [r4, #0]
   a35e2:	9a01      	ldr	r2, [sp, #4]
   a35e4:	4481      	add	r9, r0
   a35e6:	6893      	ldr	r3, [r2, #8]
   a35e8:	1a3f      	subs	r7, r7, r0
   a35ea:	1a1b      	subs	r3, r3, r0
   a35ec:	6093      	str	r3, [r2, #8]
   a35ee:	2b00      	cmp	r3, #0
   a35f0:	d090      	beq.n	a3514 <__sfvwrite_r+0x64>
   a35f2:	89a3      	ldrh	r3, [r4, #12]
   a35f4:	2f00      	cmp	r7, #0
   a35f6:	d1a8      	bne.n	a354a <__sfvwrite_r+0x9a>
   a35f8:	f8d5 9000 	ldr.w	r9, [r5]
   a35fc:	686f      	ldr	r7, [r5, #4]
   a35fe:	3508      	adds	r5, #8
   a3600:	e7a1      	b.n	a3546 <__sfvwrite_r+0x96>
   a3602:	f8d5 9000 	ldr.w	r9, [r5]
   a3606:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a360a:	3508      	adds	r5, #8
   a360c:	e76a      	b.n	a34e4 <__sfvwrite_r+0x34>
   a360e:	2000      	movs	r0, #0
   a3610:	4770      	bx	lr
   a3612:	6820      	ldr	r0, [r4, #0]
   a3614:	6923      	ldr	r3, [r4, #16]
   a3616:	4298      	cmp	r0, r3
   a3618:	d803      	bhi.n	a3622 <__sfvwrite_r+0x172>
   a361a:	6962      	ldr	r2, [r4, #20]
   a361c:	4297      	cmp	r7, r2
   a361e:	f080 8083 	bcs.w	a3728 <__sfvwrite_r+0x278>
   a3622:	45b8      	cmp	r8, r7
   a3624:	bf28      	it	cs
   a3626:	46b8      	movcs	r8, r7
   a3628:	4649      	mov	r1, r9
   a362a:	4642      	mov	r2, r8
   a362c:	f000 fc5a 	bl	a3ee4 <memmove>
   a3630:	68a3      	ldr	r3, [r4, #8]
   a3632:	6822      	ldr	r2, [r4, #0]
   a3634:	ebc8 0303 	rsb	r3, r8, r3
   a3638:	4442      	add	r2, r8
   a363a:	60a3      	str	r3, [r4, #8]
   a363c:	6022      	str	r2, [r4, #0]
   a363e:	2b00      	cmp	r3, #0
   a3640:	d148      	bne.n	a36d4 <__sfvwrite_r+0x224>
   a3642:	4621      	mov	r1, r4
   a3644:	9802      	ldr	r0, [sp, #8]
   a3646:	f7ff fd4b 	bl	a30e0 <_fflush_r>
   a364a:	2800      	cmp	r0, #0
   a364c:	d042      	beq.n	a36d4 <__sfvwrite_r+0x224>
   a364e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a3656:	f04f 30ff 	mov.w	r0, #4294967295
   a365a:	81a3      	strh	r3, [r4, #12]
   a365c:	b005      	add	sp, #20
   a365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3662:	4680      	mov	r8, r0
   a3664:	4682      	mov	sl, r0
   a3666:	4681      	mov	r9, r0
   a3668:	9001      	str	r0, [sp, #4]
   a366a:	f1b9 0f00 	cmp.w	r9, #0
   a366e:	d029      	beq.n	a36c4 <__sfvwrite_r+0x214>
   a3670:	9b01      	ldr	r3, [sp, #4]
   a3672:	2b00      	cmp	r3, #0
   a3674:	d04b      	beq.n	a370e <__sfvwrite_r+0x25e>
   a3676:	45c8      	cmp	r8, r9
   a3678:	46c3      	mov	fp, r8
   a367a:	bf28      	it	cs
   a367c:	46cb      	movcs	fp, r9
   a367e:	6820      	ldr	r0, [r4, #0]
   a3680:	6923      	ldr	r3, [r4, #16]
   a3682:	465f      	mov	r7, fp
   a3684:	4298      	cmp	r0, r3
   a3686:	6962      	ldr	r2, [r4, #20]
   a3688:	d903      	bls.n	a3692 <__sfvwrite_r+0x1e2>
   a368a:	68a3      	ldr	r3, [r4, #8]
   a368c:	4413      	add	r3, r2
   a368e:	459b      	cmp	fp, r3
   a3690:	dc5c      	bgt.n	a374c <__sfvwrite_r+0x29c>
   a3692:	4593      	cmp	fp, r2
   a3694:	db24      	blt.n	a36e0 <__sfvwrite_r+0x230>
   a3696:	4613      	mov	r3, r2
   a3698:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a369a:	4652      	mov	r2, sl
   a369c:	69e1      	ldr	r1, [r4, #28]
   a369e:	9802      	ldr	r0, [sp, #8]
   a36a0:	47b8      	blx	r7
   a36a2:	1e07      	subs	r7, r0, #0
   a36a4:	ddd3      	ble.n	a364e <__sfvwrite_r+0x19e>
   a36a6:	ebb8 0807 	subs.w	r8, r8, r7
   a36aa:	d027      	beq.n	a36fc <__sfvwrite_r+0x24c>
   a36ac:	68b3      	ldr	r3, [r6, #8]
   a36ae:	44ba      	add	sl, r7
   a36b0:	1bdb      	subs	r3, r3, r7
   a36b2:	ebc7 0909 	rsb	r9, r7, r9
   a36b6:	60b3      	str	r3, [r6, #8]
   a36b8:	2b00      	cmp	r3, #0
   a36ba:	f43f af2b 	beq.w	a3514 <__sfvwrite_r+0x64>
   a36be:	f1b9 0f00 	cmp.w	r9, #0
   a36c2:	d1d5      	bne.n	a3670 <__sfvwrite_r+0x1c0>
   a36c4:	2300      	movs	r3, #0
   a36c6:	f8d5 a000 	ldr.w	sl, [r5]
   a36ca:	f8d5 9004 	ldr.w	r9, [r5, #4]
   a36ce:	9301      	str	r3, [sp, #4]
   a36d0:	3508      	adds	r5, #8
   a36d2:	e7ca      	b.n	a366a <__sfvwrite_r+0x1ba>
   a36d4:	4640      	mov	r0, r8
   a36d6:	e784      	b.n	a35e2 <__sfvwrite_r+0x132>
   a36d8:	46b8      	mov	r8, r7
   a36da:	46ba      	mov	sl, r7
   a36dc:	6820      	ldr	r0, [r4, #0]
   a36de:	e774      	b.n	a35ca <__sfvwrite_r+0x11a>
   a36e0:	465a      	mov	r2, fp
   a36e2:	4651      	mov	r1, sl
   a36e4:	f000 fbfe 	bl	a3ee4 <memmove>
   a36e8:	68a2      	ldr	r2, [r4, #8]
   a36ea:	6823      	ldr	r3, [r4, #0]
   a36ec:	ebcb 0202 	rsb	r2, fp, r2
   a36f0:	445b      	add	r3, fp
   a36f2:	ebb8 0807 	subs.w	r8, r8, r7
   a36f6:	60a2      	str	r2, [r4, #8]
   a36f8:	6023      	str	r3, [r4, #0]
   a36fa:	d1d7      	bne.n	a36ac <__sfvwrite_r+0x1fc>
   a36fc:	4621      	mov	r1, r4
   a36fe:	9802      	ldr	r0, [sp, #8]
   a3700:	f7ff fcee 	bl	a30e0 <_fflush_r>
   a3704:	2800      	cmp	r0, #0
   a3706:	d1a2      	bne.n	a364e <__sfvwrite_r+0x19e>
   a3708:	f8cd 8004 	str.w	r8, [sp, #4]
   a370c:	e7ce      	b.n	a36ac <__sfvwrite_r+0x1fc>
   a370e:	464a      	mov	r2, r9
   a3710:	210a      	movs	r1, #10
   a3712:	4650      	mov	r0, sl
   a3714:	f000 fba0 	bl	a3e58 <memchr>
   a3718:	2800      	cmp	r0, #0
   a371a:	d03d      	beq.n	a3798 <__sfvwrite_r+0x2e8>
   a371c:	3001      	adds	r0, #1
   a371e:	2301      	movs	r3, #1
   a3720:	ebca 0800 	rsb	r8, sl, r0
   a3724:	9301      	str	r3, [sp, #4]
   a3726:	e7a6      	b.n	a3676 <__sfvwrite_r+0x1c6>
   a3728:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a372c:	42bb      	cmp	r3, r7
   a372e:	bf28      	it	cs
   a3730:	463b      	movcs	r3, r7
   a3732:	fb93 f3f2 	sdiv	r3, r3, r2
   a3736:	69e1      	ldr	r1, [r4, #28]
   a3738:	fb02 f303 	mul.w	r3, r2, r3
   a373c:	9802      	ldr	r0, [sp, #8]
   a373e:	464a      	mov	r2, r9
   a3740:	6a66      	ldr	r6, [r4, #36]	; 0x24
   a3742:	47b0      	blx	r6
   a3744:	2800      	cmp	r0, #0
   a3746:	f73f af4c 	bgt.w	a35e2 <__sfvwrite_r+0x132>
   a374a:	e780      	b.n	a364e <__sfvwrite_r+0x19e>
   a374c:	461a      	mov	r2, r3
   a374e:	4651      	mov	r1, sl
   a3750:	9303      	str	r3, [sp, #12]
   a3752:	f000 fbc7 	bl	a3ee4 <memmove>
   a3756:	6822      	ldr	r2, [r4, #0]
   a3758:	9b03      	ldr	r3, [sp, #12]
   a375a:	4621      	mov	r1, r4
   a375c:	441a      	add	r2, r3
   a375e:	6022      	str	r2, [r4, #0]
   a3760:	9802      	ldr	r0, [sp, #8]
   a3762:	f7ff fcbd 	bl	a30e0 <_fflush_r>
   a3766:	9b03      	ldr	r3, [sp, #12]
   a3768:	2800      	cmp	r0, #0
   a376a:	f47f af70 	bne.w	a364e <__sfvwrite_r+0x19e>
   a376e:	461f      	mov	r7, r3
   a3770:	e799      	b.n	a36a6 <__sfvwrite_r+0x1f6>
   a3772:	9802      	ldr	r0, [sp, #8]
   a3774:	f000 fc1e 	bl	a3fb4 <_realloc_r>
   a3778:	4683      	mov	fp, r0
   a377a:	2800      	cmp	r0, #0
   a377c:	f47f af19 	bne.w	a35b2 <__sfvwrite_r+0x102>
   a3780:	9d02      	ldr	r5, [sp, #8]
   a3782:	6921      	ldr	r1, [r4, #16]
   a3784:	4628      	mov	r0, r5
   a3786:	f7ff fdab 	bl	a32e0 <_free_r>
   a378a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a378e:	220c      	movs	r2, #12
   a3790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a3794:	602a      	str	r2, [r5, #0]
   a3796:	e75c      	b.n	a3652 <__sfvwrite_r+0x1a2>
   a3798:	2301      	movs	r3, #1
   a379a:	f109 0801 	add.w	r8, r9, #1
   a379e:	9301      	str	r3, [sp, #4]
   a37a0:	e769      	b.n	a3676 <__sfvwrite_r+0x1c6>
   a37a2:	f04f 30ff 	mov.w	r0, #4294967295
   a37a6:	e6b6      	b.n	a3516 <__sfvwrite_r+0x66>
   a37a8:	9a02      	ldr	r2, [sp, #8]
   a37aa:	230c      	movs	r3, #12
   a37ac:	6013      	str	r3, [r2, #0]
   a37ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a37b2:	e74e      	b.n	a3652 <__sfvwrite_r+0x1a2>
   a37b4:	7ffffc00 	.word	0x7ffffc00

000a37b8 <_fwalk_reent>:
   a37b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a37bc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a37c0:	d01e      	beq.n	a3800 <_fwalk_reent+0x48>
   a37c2:	4688      	mov	r8, r1
   a37c4:	4607      	mov	r7, r0
   a37c6:	f04f 0900 	mov.w	r9, #0
   a37ca:	6875      	ldr	r5, [r6, #4]
   a37cc:	68b4      	ldr	r4, [r6, #8]
   a37ce:	3d01      	subs	r5, #1
   a37d0:	d410      	bmi.n	a37f4 <_fwalk_reent+0x3c>
   a37d2:	89a3      	ldrh	r3, [r4, #12]
   a37d4:	3d01      	subs	r5, #1
   a37d6:	2b01      	cmp	r3, #1
   a37d8:	d908      	bls.n	a37ec <_fwalk_reent+0x34>
   a37da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a37de:	3301      	adds	r3, #1
   a37e0:	d004      	beq.n	a37ec <_fwalk_reent+0x34>
   a37e2:	4621      	mov	r1, r4
   a37e4:	4638      	mov	r0, r7
   a37e6:	47c0      	blx	r8
   a37e8:	ea49 0900 	orr.w	r9, r9, r0
   a37ec:	1c6b      	adds	r3, r5, #1
   a37ee:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a37f2:	d1ee      	bne.n	a37d2 <_fwalk_reent+0x1a>
   a37f4:	6836      	ldr	r6, [r6, #0]
   a37f6:	2e00      	cmp	r6, #0
   a37f8:	d1e7      	bne.n	a37ca <_fwalk_reent+0x12>
   a37fa:	4648      	mov	r0, r9
   a37fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a3800:	46b1      	mov	r9, r6
   a3802:	4648      	mov	r0, r9
   a3804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a3808 <__swhatbuf_r>:
   a3808:	b570      	push	{r4, r5, r6, lr}
   a380a:	460e      	mov	r6, r1
   a380c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a3810:	b090      	sub	sp, #64	; 0x40
   a3812:	2900      	cmp	r1, #0
   a3814:	4614      	mov	r4, r2
   a3816:	461d      	mov	r5, r3
   a3818:	db14      	blt.n	a3844 <__swhatbuf_r+0x3c>
   a381a:	aa01      	add	r2, sp, #4
   a381c:	f000 fec6 	bl	a45ac <_fstat_r>
   a3820:	2800      	cmp	r0, #0
   a3822:	db0f      	blt.n	a3844 <__swhatbuf_r+0x3c>
   a3824:	9a02      	ldr	r2, [sp, #8]
   a3826:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a382a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   a382e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   a3832:	fab2 f282 	clz	r2, r2
   a3836:	f44f 6000 	mov.w	r0, #2048	; 0x800
   a383a:	0952      	lsrs	r2, r2, #5
   a383c:	602a      	str	r2, [r5, #0]
   a383e:	6023      	str	r3, [r4, #0]
   a3840:	b010      	add	sp, #64	; 0x40
   a3842:	bd70      	pop	{r4, r5, r6, pc}
   a3844:	89b2      	ldrh	r2, [r6, #12]
   a3846:	2000      	movs	r0, #0
   a3848:	f002 0280 	and.w	r2, r2, #128	; 0x80
   a384c:	b292      	uxth	r2, r2
   a384e:	6028      	str	r0, [r5, #0]
   a3850:	b11a      	cbz	r2, a385a <__swhatbuf_r+0x52>
   a3852:	2340      	movs	r3, #64	; 0x40
   a3854:	6023      	str	r3, [r4, #0]
   a3856:	b010      	add	sp, #64	; 0x40
   a3858:	bd70      	pop	{r4, r5, r6, pc}
   a385a:	4610      	mov	r0, r2
   a385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a3860:	6023      	str	r3, [r4, #0]
   a3862:	b010      	add	sp, #64	; 0x40
   a3864:	bd70      	pop	{r4, r5, r6, pc}
   a3866:	bf00      	nop

000a3868 <__smakebuf_r>:
   a3868:	898a      	ldrh	r2, [r1, #12]
   a386a:	460b      	mov	r3, r1
   a386c:	0792      	lsls	r2, r2, #30
   a386e:	d506      	bpl.n	a387e <__smakebuf_r+0x16>
   a3870:	f101 0243 	add.w	r2, r1, #67	; 0x43
   a3874:	2101      	movs	r1, #1
   a3876:	601a      	str	r2, [r3, #0]
   a3878:	611a      	str	r2, [r3, #16]
   a387a:	6159      	str	r1, [r3, #20]
   a387c:	4770      	bx	lr
   a387e:	b5f0      	push	{r4, r5, r6, r7, lr}
   a3880:	b083      	sub	sp, #12
   a3882:	ab01      	add	r3, sp, #4
   a3884:	466a      	mov	r2, sp
   a3886:	460c      	mov	r4, r1
   a3888:	4605      	mov	r5, r0
   a388a:	f7ff ffbd 	bl	a3808 <__swhatbuf_r>
   a388e:	9900      	ldr	r1, [sp, #0]
   a3890:	4606      	mov	r6, r0
   a3892:	4628      	mov	r0, r5
   a3894:	f000 f834 	bl	a3900 <_malloc_r>
   a3898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a389c:	b1d0      	cbz	r0, a38d4 <__smakebuf_r+0x6c>
   a389e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   a38a2:	4f12      	ldr	r7, [pc, #72]	; (a38ec <__smakebuf_r+0x84>)
   a38a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a38a8:	63ef      	str	r7, [r5, #60]	; 0x3c
   a38aa:	81a3      	strh	r3, [r4, #12]
   a38ac:	6020      	str	r0, [r4, #0]
   a38ae:	6120      	str	r0, [r4, #16]
   a38b0:	6161      	str	r1, [r4, #20]
   a38b2:	b91a      	cbnz	r2, a38bc <__smakebuf_r+0x54>
   a38b4:	4333      	orrs	r3, r6
   a38b6:	81a3      	strh	r3, [r4, #12]
   a38b8:	b003      	add	sp, #12
   a38ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a38bc:	4628      	mov	r0, r5
   a38be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a38c2:	f000 fe87 	bl	a45d4 <_isatty_r>
   a38c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a38ca:	2800      	cmp	r0, #0
   a38cc:	d0f2      	beq.n	a38b4 <__smakebuf_r+0x4c>
   a38ce:	f043 0301 	orr.w	r3, r3, #1
   a38d2:	e7ef      	b.n	a38b4 <__smakebuf_r+0x4c>
   a38d4:	059a      	lsls	r2, r3, #22
   a38d6:	d4ef      	bmi.n	a38b8 <__smakebuf_r+0x50>
   a38d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a38dc:	f043 0302 	orr.w	r3, r3, #2
   a38e0:	2101      	movs	r1, #1
   a38e2:	81a3      	strh	r3, [r4, #12]
   a38e4:	6022      	str	r2, [r4, #0]
   a38e6:	6122      	str	r2, [r4, #16]
   a38e8:	6161      	str	r1, [r4, #20]
   a38ea:	e7e5      	b.n	a38b8 <__smakebuf_r+0x50>
   a38ec:	000a310d 	.word	0x000a310d

000a38f0 <malloc>:
   a38f0:	4b02      	ldr	r3, [pc, #8]	; (a38fc <malloc+0xc>)
   a38f2:	4601      	mov	r1, r0
   a38f4:	6818      	ldr	r0, [r3, #0]
   a38f6:	f000 b803 	b.w	a3900 <_malloc_r>
   a38fa:	bf00      	nop
   a38fc:	20071090 	.word	0x20071090

000a3900 <_malloc_r>:
   a3900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a3904:	f101 050b 	add.w	r5, r1, #11
   a3908:	2d16      	cmp	r5, #22
   a390a:	b083      	sub	sp, #12
   a390c:	4606      	mov	r6, r0
   a390e:	f240 80a0 	bls.w	a3a52 <_malloc_r+0x152>
   a3912:	f035 0507 	bics.w	r5, r5, #7
   a3916:	f100 80c0 	bmi.w	a3a9a <_malloc_r+0x19a>
   a391a:	42a9      	cmp	r1, r5
   a391c:	f200 80bd 	bhi.w	a3a9a <_malloc_r+0x19a>
   a3920:	f000 fb44 	bl	a3fac <__malloc_lock>
   a3924:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a3928:	f0c0 8290 	bcc.w	a3e4c <_malloc_r+0x54c>
   a392c:	0a6b      	lsrs	r3, r5, #9
   a392e:	f000 80bb 	beq.w	a3aa8 <_malloc_r+0x1a8>
   a3932:	2b04      	cmp	r3, #4
   a3934:	f200 8177 	bhi.w	a3c26 <_malloc_r+0x326>
   a3938:	09a8      	lsrs	r0, r5, #6
   a393a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   a393e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a3942:	3038      	adds	r0, #56	; 0x38
   a3944:	4fbe      	ldr	r7, [pc, #760]	; (a3c40 <_malloc_r+0x340>)
   a3946:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a394a:	684c      	ldr	r4, [r1, #4]
   a394c:	3908      	subs	r1, #8
   a394e:	42a1      	cmp	r1, r4
   a3950:	d107      	bne.n	a3962 <_malloc_r+0x62>
   a3952:	e0ae      	b.n	a3ab2 <_malloc_r+0x1b2>
   a3954:	2a00      	cmp	r2, #0
   a3956:	f280 80ae 	bge.w	a3ab6 <_malloc_r+0x1b6>
   a395a:	68e4      	ldr	r4, [r4, #12]
   a395c:	42a1      	cmp	r1, r4
   a395e:	f000 80a8 	beq.w	a3ab2 <_malloc_r+0x1b2>
   a3962:	6863      	ldr	r3, [r4, #4]
   a3964:	f023 0303 	bic.w	r3, r3, #3
   a3968:	1b5a      	subs	r2, r3, r5
   a396a:	2a0f      	cmp	r2, #15
   a396c:	ddf2      	ble.n	a3954 <_malloc_r+0x54>
   a396e:	49b4      	ldr	r1, [pc, #720]	; (a3c40 <_malloc_r+0x340>)
   a3970:	693c      	ldr	r4, [r7, #16]
   a3972:	f101 0e08 	add.w	lr, r1, #8
   a3976:	4574      	cmp	r4, lr
   a3978:	f000 81a8 	beq.w	a3ccc <_malloc_r+0x3cc>
   a397c:	6863      	ldr	r3, [r4, #4]
   a397e:	f023 0303 	bic.w	r3, r3, #3
   a3982:	1b5a      	subs	r2, r3, r5
   a3984:	2a0f      	cmp	r2, #15
   a3986:	f300 818e 	bgt.w	a3ca6 <_malloc_r+0x3a6>
   a398a:	2a00      	cmp	r2, #0
   a398c:	f8c1 e014 	str.w	lr, [r1, #20]
   a3990:	f8c1 e010 	str.w	lr, [r1, #16]
   a3994:	f280 8093 	bge.w	a3abe <_malloc_r+0x1be>
   a3998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a399c:	f080 815c 	bcs.w	a3c58 <_malloc_r+0x358>
   a39a0:	08db      	lsrs	r3, r3, #3
   a39a2:	684a      	ldr	r2, [r1, #4]
   a39a4:	ea4f 09a3 	mov.w	r9, r3, asr #2
   a39a8:	f04f 0c01 	mov.w	ip, #1
   a39ac:	3301      	adds	r3, #1
   a39ae:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   a39b2:	fa0c f909 	lsl.w	r9, ip, r9
   a39b6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   a39ba:	ea49 0202 	orr.w	r2, r9, r2
   a39be:	f1ac 0c08 	sub.w	ip, ip, #8
   a39c2:	f8c4 c00c 	str.w	ip, [r4, #12]
   a39c6:	f8c4 8008 	str.w	r8, [r4, #8]
   a39ca:	604a      	str	r2, [r1, #4]
   a39cc:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a39d0:	f8c8 400c 	str.w	r4, [r8, #12]
   a39d4:	1083      	asrs	r3, r0, #2
   a39d6:	2401      	movs	r4, #1
   a39d8:	409c      	lsls	r4, r3
   a39da:	4294      	cmp	r4, r2
   a39dc:	d87c      	bhi.n	a3ad8 <_malloc_r+0x1d8>
   a39de:	4214      	tst	r4, r2
   a39e0:	d106      	bne.n	a39f0 <_malloc_r+0xf0>
   a39e2:	f020 0003 	bic.w	r0, r0, #3
   a39e6:	0064      	lsls	r4, r4, #1
   a39e8:	4214      	tst	r4, r2
   a39ea:	f100 0004 	add.w	r0, r0, #4
   a39ee:	d0fa      	beq.n	a39e6 <_malloc_r+0xe6>
   a39f0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a39f4:	46cc      	mov	ip, r9
   a39f6:	4680      	mov	r8, r0
   a39f8:	f8dc 100c 	ldr.w	r1, [ip, #12]
   a39fc:	458c      	cmp	ip, r1
   a39fe:	d107      	bne.n	a3a10 <_malloc_r+0x110>
   a3a00:	e166      	b.n	a3cd0 <_malloc_r+0x3d0>
   a3a02:	2a00      	cmp	r2, #0
   a3a04:	f280 8174 	bge.w	a3cf0 <_malloc_r+0x3f0>
   a3a08:	68c9      	ldr	r1, [r1, #12]
   a3a0a:	458c      	cmp	ip, r1
   a3a0c:	f000 8160 	beq.w	a3cd0 <_malloc_r+0x3d0>
   a3a10:	684b      	ldr	r3, [r1, #4]
   a3a12:	f023 0303 	bic.w	r3, r3, #3
   a3a16:	1b5a      	subs	r2, r3, r5
   a3a18:	2a0f      	cmp	r2, #15
   a3a1a:	ddf2      	ble.n	a3a02 <_malloc_r+0x102>
   a3a1c:	460c      	mov	r4, r1
   a3a1e:	68cb      	ldr	r3, [r1, #12]
   a3a20:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a3a24:	f045 0801 	orr.w	r8, r5, #1
   a3a28:	f8c1 8004 	str.w	r8, [r1, #4]
   a3a2c:	440d      	add	r5, r1
   a3a2e:	f042 0101 	orr.w	r1, r2, #1
   a3a32:	f8cc 300c 	str.w	r3, [ip, #12]
   a3a36:	4630      	mov	r0, r6
   a3a38:	f8c3 c008 	str.w	ip, [r3, #8]
   a3a3c:	617d      	str	r5, [r7, #20]
   a3a3e:	613d      	str	r5, [r7, #16]
   a3a40:	f8c5 e00c 	str.w	lr, [r5, #12]
   a3a44:	f8c5 e008 	str.w	lr, [r5, #8]
   a3a48:	6069      	str	r1, [r5, #4]
   a3a4a:	50aa      	str	r2, [r5, r2]
   a3a4c:	f000 fab0 	bl	a3fb0 <__malloc_unlock>
   a3a50:	e01f      	b.n	a3a92 <_malloc_r+0x192>
   a3a52:	2910      	cmp	r1, #16
   a3a54:	d821      	bhi.n	a3a9a <_malloc_r+0x19a>
   a3a56:	f000 faa9 	bl	a3fac <__malloc_lock>
   a3a5a:	2510      	movs	r5, #16
   a3a5c:	2306      	movs	r3, #6
   a3a5e:	2002      	movs	r0, #2
   a3a60:	4f77      	ldr	r7, [pc, #476]	; (a3c40 <_malloc_r+0x340>)
   a3a62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   a3a66:	685c      	ldr	r4, [r3, #4]
   a3a68:	f1a3 0208 	sub.w	r2, r3, #8
   a3a6c:	4294      	cmp	r4, r2
   a3a6e:	f000 8138 	beq.w	a3ce2 <_malloc_r+0x3e2>
   a3a72:	6863      	ldr	r3, [r4, #4]
   a3a74:	68e1      	ldr	r1, [r4, #12]
   a3a76:	f023 0303 	bic.w	r3, r3, #3
   a3a7a:	4423      	add	r3, r4
   a3a7c:	685a      	ldr	r2, [r3, #4]
   a3a7e:	68a5      	ldr	r5, [r4, #8]
   a3a80:	f042 0201 	orr.w	r2, r2, #1
   a3a84:	60e9      	str	r1, [r5, #12]
   a3a86:	4630      	mov	r0, r6
   a3a88:	608d      	str	r5, [r1, #8]
   a3a8a:	605a      	str	r2, [r3, #4]
   a3a8c:	f000 fa90 	bl	a3fb0 <__malloc_unlock>
   a3a90:	3408      	adds	r4, #8
   a3a92:	4620      	mov	r0, r4
   a3a94:	b003      	add	sp, #12
   a3a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3a9a:	2400      	movs	r4, #0
   a3a9c:	4620      	mov	r0, r4
   a3a9e:	230c      	movs	r3, #12
   a3aa0:	6033      	str	r3, [r6, #0]
   a3aa2:	b003      	add	sp, #12
   a3aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3aa8:	2180      	movs	r1, #128	; 0x80
   a3aaa:	f04f 0e40 	mov.w	lr, #64	; 0x40
   a3aae:	203f      	movs	r0, #63	; 0x3f
   a3ab0:	e748      	b.n	a3944 <_malloc_r+0x44>
   a3ab2:	4670      	mov	r0, lr
   a3ab4:	e75b      	b.n	a396e <_malloc_r+0x6e>
   a3ab6:	4423      	add	r3, r4
   a3ab8:	685a      	ldr	r2, [r3, #4]
   a3aba:	68e1      	ldr	r1, [r4, #12]
   a3abc:	e7df      	b.n	a3a7e <_malloc_r+0x17e>
   a3abe:	4423      	add	r3, r4
   a3ac0:	685a      	ldr	r2, [r3, #4]
   a3ac2:	4630      	mov	r0, r6
   a3ac4:	f042 0201 	orr.w	r2, r2, #1
   a3ac8:	605a      	str	r2, [r3, #4]
   a3aca:	3408      	adds	r4, #8
   a3acc:	f000 fa70 	bl	a3fb0 <__malloc_unlock>
   a3ad0:	4620      	mov	r0, r4
   a3ad2:	b003      	add	sp, #12
   a3ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3ad8:	68bc      	ldr	r4, [r7, #8]
   a3ada:	6863      	ldr	r3, [r4, #4]
   a3adc:	f023 0803 	bic.w	r8, r3, #3
   a3ae0:	45a8      	cmp	r8, r5
   a3ae2:	d304      	bcc.n	a3aee <_malloc_r+0x1ee>
   a3ae4:	ebc5 0308 	rsb	r3, r5, r8
   a3ae8:	2b0f      	cmp	r3, #15
   a3aea:	f300 808c 	bgt.w	a3c06 <_malloc_r+0x306>
   a3aee:	4b55      	ldr	r3, [pc, #340]	; (a3c44 <_malloc_r+0x344>)
   a3af0:	f8df 9160 	ldr.w	r9, [pc, #352]	; a3c54 <_malloc_r+0x354>
   a3af4:	681a      	ldr	r2, [r3, #0]
   a3af6:	f8d9 3000 	ldr.w	r3, [r9]
   a3afa:	442a      	add	r2, r5
   a3afc:	3301      	adds	r3, #1
   a3afe:	eb04 0a08 	add.w	sl, r4, r8
   a3b02:	f000 8160 	beq.w	a3dc6 <_malloc_r+0x4c6>
   a3b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a3b0a:	320f      	adds	r2, #15
   a3b0c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a3b10:	f022 020f 	bic.w	r2, r2, #15
   a3b14:	4611      	mov	r1, r2
   a3b16:	4630      	mov	r0, r6
   a3b18:	9201      	str	r2, [sp, #4]
   a3b1a:	f000 fc35 	bl	a4388 <_sbrk_r>
   a3b1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   a3b22:	4683      	mov	fp, r0
   a3b24:	9a01      	ldr	r2, [sp, #4]
   a3b26:	f000 8158 	beq.w	a3dda <_malloc_r+0x4da>
   a3b2a:	4582      	cmp	sl, r0
   a3b2c:	f200 80fc 	bhi.w	a3d28 <_malloc_r+0x428>
   a3b30:	4b45      	ldr	r3, [pc, #276]	; (a3c48 <_malloc_r+0x348>)
   a3b32:	45da      	cmp	sl, fp
   a3b34:	6819      	ldr	r1, [r3, #0]
   a3b36:	4411      	add	r1, r2
   a3b38:	6019      	str	r1, [r3, #0]
   a3b3a:	f000 8153 	beq.w	a3de4 <_malloc_r+0x4e4>
   a3b3e:	f8d9 0000 	ldr.w	r0, [r9]
   a3b42:	f8df e110 	ldr.w	lr, [pc, #272]	; a3c54 <_malloc_r+0x354>
   a3b46:	3001      	adds	r0, #1
   a3b48:	bf1b      	ittet	ne
   a3b4a:	ebca 0a0b 	rsbne	sl, sl, fp
   a3b4e:	4451      	addne	r1, sl
   a3b50:	f8ce b000 	streq.w	fp, [lr]
   a3b54:	6019      	strne	r1, [r3, #0]
   a3b56:	f01b 0107 	ands.w	r1, fp, #7
   a3b5a:	f000 8117 	beq.w	a3d8c <_malloc_r+0x48c>
   a3b5e:	f1c1 0008 	rsb	r0, r1, #8
   a3b62:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a3b66:	4483      	add	fp, r0
   a3b68:	3108      	adds	r1, #8
   a3b6a:	445a      	add	r2, fp
   a3b6c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a3b70:	ebc2 0901 	rsb	r9, r2, r1
   a3b74:	4649      	mov	r1, r9
   a3b76:	4630      	mov	r0, r6
   a3b78:	9301      	str	r3, [sp, #4]
   a3b7a:	f000 fc05 	bl	a4388 <_sbrk_r>
   a3b7e:	1c43      	adds	r3, r0, #1
   a3b80:	9b01      	ldr	r3, [sp, #4]
   a3b82:	f000 813f 	beq.w	a3e04 <_malloc_r+0x504>
   a3b86:	ebcb 0200 	rsb	r2, fp, r0
   a3b8a:	444a      	add	r2, r9
   a3b8c:	f042 0201 	orr.w	r2, r2, #1
   a3b90:	6819      	ldr	r1, [r3, #0]
   a3b92:	42bc      	cmp	r4, r7
   a3b94:	4449      	add	r1, r9
   a3b96:	f8c7 b008 	str.w	fp, [r7, #8]
   a3b9a:	6019      	str	r1, [r3, #0]
   a3b9c:	f8cb 2004 	str.w	r2, [fp, #4]
   a3ba0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a3c48 <_malloc_r+0x348>
   a3ba4:	d016      	beq.n	a3bd4 <_malloc_r+0x2d4>
   a3ba6:	f1b8 0f0f 	cmp.w	r8, #15
   a3baa:	f240 80fd 	bls.w	a3da8 <_malloc_r+0x4a8>
   a3bae:	6862      	ldr	r2, [r4, #4]
   a3bb0:	f1a8 030c 	sub.w	r3, r8, #12
   a3bb4:	f023 0307 	bic.w	r3, r3, #7
   a3bb8:	f002 0201 	and.w	r2, r2, #1
   a3bbc:	18e0      	adds	r0, r4, r3
   a3bbe:	f04f 0e05 	mov.w	lr, #5
   a3bc2:	431a      	orrs	r2, r3
   a3bc4:	2b0f      	cmp	r3, #15
   a3bc6:	6062      	str	r2, [r4, #4]
   a3bc8:	f8c0 e004 	str.w	lr, [r0, #4]
   a3bcc:	f8c0 e008 	str.w	lr, [r0, #8]
   a3bd0:	f200 811c 	bhi.w	a3e0c <_malloc_r+0x50c>
   a3bd4:	4b1d      	ldr	r3, [pc, #116]	; (a3c4c <_malloc_r+0x34c>)
   a3bd6:	68bc      	ldr	r4, [r7, #8]
   a3bd8:	681a      	ldr	r2, [r3, #0]
   a3bda:	4291      	cmp	r1, r2
   a3bdc:	bf88      	it	hi
   a3bde:	6019      	strhi	r1, [r3, #0]
   a3be0:	4b1b      	ldr	r3, [pc, #108]	; (a3c50 <_malloc_r+0x350>)
   a3be2:	681a      	ldr	r2, [r3, #0]
   a3be4:	4291      	cmp	r1, r2
   a3be6:	6862      	ldr	r2, [r4, #4]
   a3be8:	bf88      	it	hi
   a3bea:	6019      	strhi	r1, [r3, #0]
   a3bec:	f022 0203 	bic.w	r2, r2, #3
   a3bf0:	4295      	cmp	r5, r2
   a3bf2:	eba2 0305 	sub.w	r3, r2, r5
   a3bf6:	d801      	bhi.n	a3bfc <_malloc_r+0x2fc>
   a3bf8:	2b0f      	cmp	r3, #15
   a3bfa:	dc04      	bgt.n	a3c06 <_malloc_r+0x306>
   a3bfc:	4630      	mov	r0, r6
   a3bfe:	f000 f9d7 	bl	a3fb0 <__malloc_unlock>
   a3c02:	2400      	movs	r4, #0
   a3c04:	e745      	b.n	a3a92 <_malloc_r+0x192>
   a3c06:	f045 0201 	orr.w	r2, r5, #1
   a3c0a:	f043 0301 	orr.w	r3, r3, #1
   a3c0e:	4425      	add	r5, r4
   a3c10:	6062      	str	r2, [r4, #4]
   a3c12:	4630      	mov	r0, r6
   a3c14:	60bd      	str	r5, [r7, #8]
   a3c16:	3408      	adds	r4, #8
   a3c18:	606b      	str	r3, [r5, #4]
   a3c1a:	f000 f9c9 	bl	a3fb0 <__malloc_unlock>
   a3c1e:	4620      	mov	r0, r4
   a3c20:	b003      	add	sp, #12
   a3c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3c26:	2b14      	cmp	r3, #20
   a3c28:	d971      	bls.n	a3d0e <_malloc_r+0x40e>
   a3c2a:	2b54      	cmp	r3, #84	; 0x54
   a3c2c:	f200 80a4 	bhi.w	a3d78 <_malloc_r+0x478>
   a3c30:	0b28      	lsrs	r0, r5, #12
   a3c32:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   a3c36:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a3c3a:	306e      	adds	r0, #110	; 0x6e
   a3c3c:	e682      	b.n	a3944 <_malloc_r+0x44>
   a3c3e:	bf00      	nop
   a3c40:	20071094 	.word	0x20071094
   a3c44:	20072848 	.word	0x20072848
   a3c48:	2007284c 	.word	0x2007284c
   a3c4c:	20072844 	.word	0x20072844
   a3c50:	20072840 	.word	0x20072840
   a3c54:	200714a0 	.word	0x200714a0
   a3c58:	0a5a      	lsrs	r2, r3, #9
   a3c5a:	2a04      	cmp	r2, #4
   a3c5c:	d95e      	bls.n	a3d1c <_malloc_r+0x41c>
   a3c5e:	2a14      	cmp	r2, #20
   a3c60:	f200 80b3 	bhi.w	a3dca <_malloc_r+0x4ca>
   a3c64:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a3c68:	0049      	lsls	r1, r1, #1
   a3c6a:	325b      	adds	r2, #91	; 0x5b
   a3c6c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   a3c70:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   a3c74:	f1ac 0c08 	sub.w	ip, ip, #8
   a3c78:	458c      	cmp	ip, r1
   a3c7a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; a3e54 <_malloc_r+0x554>
   a3c7e:	f000 8088 	beq.w	a3d92 <_malloc_r+0x492>
   a3c82:	684a      	ldr	r2, [r1, #4]
   a3c84:	f022 0203 	bic.w	r2, r2, #3
   a3c88:	4293      	cmp	r3, r2
   a3c8a:	d202      	bcs.n	a3c92 <_malloc_r+0x392>
   a3c8c:	6889      	ldr	r1, [r1, #8]
   a3c8e:	458c      	cmp	ip, r1
   a3c90:	d1f7      	bne.n	a3c82 <_malloc_r+0x382>
   a3c92:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   a3c96:	687a      	ldr	r2, [r7, #4]
   a3c98:	f8c4 c00c 	str.w	ip, [r4, #12]
   a3c9c:	60a1      	str	r1, [r4, #8]
   a3c9e:	f8cc 4008 	str.w	r4, [ip, #8]
   a3ca2:	60cc      	str	r4, [r1, #12]
   a3ca4:	e696      	b.n	a39d4 <_malloc_r+0xd4>
   a3ca6:	f045 0701 	orr.w	r7, r5, #1
   a3caa:	f042 0301 	orr.w	r3, r2, #1
   a3cae:	4425      	add	r5, r4
   a3cb0:	6067      	str	r7, [r4, #4]
   a3cb2:	4630      	mov	r0, r6
   a3cb4:	614d      	str	r5, [r1, #20]
   a3cb6:	610d      	str	r5, [r1, #16]
   a3cb8:	f8c5 e00c 	str.w	lr, [r5, #12]
   a3cbc:	f8c5 e008 	str.w	lr, [r5, #8]
   a3cc0:	606b      	str	r3, [r5, #4]
   a3cc2:	50aa      	str	r2, [r5, r2]
   a3cc4:	3408      	adds	r4, #8
   a3cc6:	f000 f973 	bl	a3fb0 <__malloc_unlock>
   a3cca:	e6e2      	b.n	a3a92 <_malloc_r+0x192>
   a3ccc:	684a      	ldr	r2, [r1, #4]
   a3cce:	e681      	b.n	a39d4 <_malloc_r+0xd4>
   a3cd0:	f108 0801 	add.w	r8, r8, #1
   a3cd4:	f018 0f03 	tst.w	r8, #3
   a3cd8:	f10c 0c08 	add.w	ip, ip, #8
   a3cdc:	f47f ae8c 	bne.w	a39f8 <_malloc_r+0xf8>
   a3ce0:	e030      	b.n	a3d44 <_malloc_r+0x444>
   a3ce2:	68dc      	ldr	r4, [r3, #12]
   a3ce4:	42a3      	cmp	r3, r4
   a3ce6:	bf08      	it	eq
   a3ce8:	3002      	addeq	r0, #2
   a3cea:	f43f ae40 	beq.w	a396e <_malloc_r+0x6e>
   a3cee:	e6c0      	b.n	a3a72 <_malloc_r+0x172>
   a3cf0:	460c      	mov	r4, r1
   a3cf2:	440b      	add	r3, r1
   a3cf4:	685a      	ldr	r2, [r3, #4]
   a3cf6:	68c9      	ldr	r1, [r1, #12]
   a3cf8:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a3cfc:	f042 0201 	orr.w	r2, r2, #1
   a3d00:	605a      	str	r2, [r3, #4]
   a3d02:	4630      	mov	r0, r6
   a3d04:	60e9      	str	r1, [r5, #12]
   a3d06:	608d      	str	r5, [r1, #8]
   a3d08:	f000 f952 	bl	a3fb0 <__malloc_unlock>
   a3d0c:	e6c1      	b.n	a3a92 <_malloc_r+0x192>
   a3d0e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   a3d12:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   a3d16:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a3d1a:	e613      	b.n	a3944 <_malloc_r+0x44>
   a3d1c:	099a      	lsrs	r2, r3, #6
   a3d1e:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a3d22:	0049      	lsls	r1, r1, #1
   a3d24:	3238      	adds	r2, #56	; 0x38
   a3d26:	e7a1      	b.n	a3c6c <_malloc_r+0x36c>
   a3d28:	42bc      	cmp	r4, r7
   a3d2a:	4b4a      	ldr	r3, [pc, #296]	; (a3e54 <_malloc_r+0x554>)
   a3d2c:	f43f af00 	beq.w	a3b30 <_malloc_r+0x230>
   a3d30:	689c      	ldr	r4, [r3, #8]
   a3d32:	6862      	ldr	r2, [r4, #4]
   a3d34:	f022 0203 	bic.w	r2, r2, #3
   a3d38:	e75a      	b.n	a3bf0 <_malloc_r+0x2f0>
   a3d3a:	f859 3908 	ldr.w	r3, [r9], #-8
   a3d3e:	4599      	cmp	r9, r3
   a3d40:	f040 8082 	bne.w	a3e48 <_malloc_r+0x548>
   a3d44:	f010 0f03 	tst.w	r0, #3
   a3d48:	f100 30ff 	add.w	r0, r0, #4294967295
   a3d4c:	d1f5      	bne.n	a3d3a <_malloc_r+0x43a>
   a3d4e:	687b      	ldr	r3, [r7, #4]
   a3d50:	ea23 0304 	bic.w	r3, r3, r4
   a3d54:	607b      	str	r3, [r7, #4]
   a3d56:	0064      	lsls	r4, r4, #1
   a3d58:	429c      	cmp	r4, r3
   a3d5a:	f63f aebd 	bhi.w	a3ad8 <_malloc_r+0x1d8>
   a3d5e:	2c00      	cmp	r4, #0
   a3d60:	f43f aeba 	beq.w	a3ad8 <_malloc_r+0x1d8>
   a3d64:	421c      	tst	r4, r3
   a3d66:	4640      	mov	r0, r8
   a3d68:	f47f ae42 	bne.w	a39f0 <_malloc_r+0xf0>
   a3d6c:	0064      	lsls	r4, r4, #1
   a3d6e:	421c      	tst	r4, r3
   a3d70:	f100 0004 	add.w	r0, r0, #4
   a3d74:	d0fa      	beq.n	a3d6c <_malloc_r+0x46c>
   a3d76:	e63b      	b.n	a39f0 <_malloc_r+0xf0>
   a3d78:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a3d7c:	d818      	bhi.n	a3db0 <_malloc_r+0x4b0>
   a3d7e:	0be8      	lsrs	r0, r5, #15
   a3d80:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   a3d84:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a3d88:	3077      	adds	r0, #119	; 0x77
   a3d8a:	e5db      	b.n	a3944 <_malloc_r+0x44>
   a3d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a3d90:	e6eb      	b.n	a3b6a <_malloc_r+0x26a>
   a3d92:	2101      	movs	r1, #1
   a3d94:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a3d98:	1092      	asrs	r2, r2, #2
   a3d9a:	fa01 f202 	lsl.w	r2, r1, r2
   a3d9e:	431a      	orrs	r2, r3
   a3da0:	f8c8 2004 	str.w	r2, [r8, #4]
   a3da4:	4661      	mov	r1, ip
   a3da6:	e777      	b.n	a3c98 <_malloc_r+0x398>
   a3da8:	2301      	movs	r3, #1
   a3daa:	f8cb 3004 	str.w	r3, [fp, #4]
   a3dae:	e725      	b.n	a3bfc <_malloc_r+0x2fc>
   a3db0:	f240 5254 	movw	r2, #1364	; 0x554
   a3db4:	4293      	cmp	r3, r2
   a3db6:	d820      	bhi.n	a3dfa <_malloc_r+0x4fa>
   a3db8:	0ca8      	lsrs	r0, r5, #18
   a3dba:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   a3dbe:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a3dc2:	307c      	adds	r0, #124	; 0x7c
   a3dc4:	e5be      	b.n	a3944 <_malloc_r+0x44>
   a3dc6:	3210      	adds	r2, #16
   a3dc8:	e6a4      	b.n	a3b14 <_malloc_r+0x214>
   a3dca:	2a54      	cmp	r2, #84	; 0x54
   a3dcc:	d826      	bhi.n	a3e1c <_malloc_r+0x51c>
   a3dce:	0b1a      	lsrs	r2, r3, #12
   a3dd0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a3dd4:	0049      	lsls	r1, r1, #1
   a3dd6:	326e      	adds	r2, #110	; 0x6e
   a3dd8:	e748      	b.n	a3c6c <_malloc_r+0x36c>
   a3dda:	68bc      	ldr	r4, [r7, #8]
   a3ddc:	6862      	ldr	r2, [r4, #4]
   a3dde:	f022 0203 	bic.w	r2, r2, #3
   a3de2:	e705      	b.n	a3bf0 <_malloc_r+0x2f0>
   a3de4:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a3de8:	2800      	cmp	r0, #0
   a3dea:	f47f aea8 	bne.w	a3b3e <_malloc_r+0x23e>
   a3dee:	4442      	add	r2, r8
   a3df0:	68bb      	ldr	r3, [r7, #8]
   a3df2:	f042 0201 	orr.w	r2, r2, #1
   a3df6:	605a      	str	r2, [r3, #4]
   a3df8:	e6ec      	b.n	a3bd4 <_malloc_r+0x2d4>
   a3dfa:	21fe      	movs	r1, #254	; 0xfe
   a3dfc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   a3e00:	207e      	movs	r0, #126	; 0x7e
   a3e02:	e59f      	b.n	a3944 <_malloc_r+0x44>
   a3e04:	2201      	movs	r2, #1
   a3e06:	f04f 0900 	mov.w	r9, #0
   a3e0a:	e6c1      	b.n	a3b90 <_malloc_r+0x290>
   a3e0c:	f104 0108 	add.w	r1, r4, #8
   a3e10:	4630      	mov	r0, r6
   a3e12:	f7ff fa65 	bl	a32e0 <_free_r>
   a3e16:	f8d9 1000 	ldr.w	r1, [r9]
   a3e1a:	e6db      	b.n	a3bd4 <_malloc_r+0x2d4>
   a3e1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a3e20:	d805      	bhi.n	a3e2e <_malloc_r+0x52e>
   a3e22:	0bda      	lsrs	r2, r3, #15
   a3e24:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a3e28:	0049      	lsls	r1, r1, #1
   a3e2a:	3277      	adds	r2, #119	; 0x77
   a3e2c:	e71e      	b.n	a3c6c <_malloc_r+0x36c>
   a3e2e:	f240 5154 	movw	r1, #1364	; 0x554
   a3e32:	428a      	cmp	r2, r1
   a3e34:	d805      	bhi.n	a3e42 <_malloc_r+0x542>
   a3e36:	0c9a      	lsrs	r2, r3, #18
   a3e38:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a3e3c:	0049      	lsls	r1, r1, #1
   a3e3e:	327c      	adds	r2, #124	; 0x7c
   a3e40:	e714      	b.n	a3c6c <_malloc_r+0x36c>
   a3e42:	21fe      	movs	r1, #254	; 0xfe
   a3e44:	227e      	movs	r2, #126	; 0x7e
   a3e46:	e711      	b.n	a3c6c <_malloc_r+0x36c>
   a3e48:	687b      	ldr	r3, [r7, #4]
   a3e4a:	e784      	b.n	a3d56 <_malloc_r+0x456>
   a3e4c:	08e8      	lsrs	r0, r5, #3
   a3e4e:	1c43      	adds	r3, r0, #1
   a3e50:	005b      	lsls	r3, r3, #1
   a3e52:	e605      	b.n	a3a60 <_malloc_r+0x160>
   a3e54:	20071094 	.word	0x20071094

000a3e58 <memchr>:
   a3e58:	0783      	lsls	r3, r0, #30
   a3e5a:	b470      	push	{r4, r5, r6}
   a3e5c:	b2cd      	uxtb	r5, r1
   a3e5e:	d03d      	beq.n	a3edc <memchr+0x84>
   a3e60:	1e53      	subs	r3, r2, #1
   a3e62:	b302      	cbz	r2, a3ea6 <memchr+0x4e>
   a3e64:	7802      	ldrb	r2, [r0, #0]
   a3e66:	42aa      	cmp	r2, r5
   a3e68:	d01e      	beq.n	a3ea8 <memchr+0x50>
   a3e6a:	1c42      	adds	r2, r0, #1
   a3e6c:	e004      	b.n	a3e78 <memchr+0x20>
   a3e6e:	b1d3      	cbz	r3, a3ea6 <memchr+0x4e>
   a3e70:	7804      	ldrb	r4, [r0, #0]
   a3e72:	3b01      	subs	r3, #1
   a3e74:	42ac      	cmp	r4, r5
   a3e76:	d017      	beq.n	a3ea8 <memchr+0x50>
   a3e78:	f012 0f03 	tst.w	r2, #3
   a3e7c:	4610      	mov	r0, r2
   a3e7e:	f102 0201 	add.w	r2, r2, #1
   a3e82:	d1f4      	bne.n	a3e6e <memchr+0x16>
   a3e84:	2b03      	cmp	r3, #3
   a3e86:	d811      	bhi.n	a3eac <memchr+0x54>
   a3e88:	b353      	cbz	r3, a3ee0 <memchr+0x88>
   a3e8a:	7802      	ldrb	r2, [r0, #0]
   a3e8c:	42aa      	cmp	r2, r5
   a3e8e:	d00b      	beq.n	a3ea8 <memchr+0x50>
   a3e90:	4403      	add	r3, r0
   a3e92:	1c42      	adds	r2, r0, #1
   a3e94:	e002      	b.n	a3e9c <memchr+0x44>
   a3e96:	7801      	ldrb	r1, [r0, #0]
   a3e98:	42a9      	cmp	r1, r5
   a3e9a:	d005      	beq.n	a3ea8 <memchr+0x50>
   a3e9c:	4293      	cmp	r3, r2
   a3e9e:	4610      	mov	r0, r2
   a3ea0:	f102 0201 	add.w	r2, r2, #1
   a3ea4:	d1f7      	bne.n	a3e96 <memchr+0x3e>
   a3ea6:	2000      	movs	r0, #0
   a3ea8:	bc70      	pop	{r4, r5, r6}
   a3eaa:	4770      	bx	lr
   a3eac:	4604      	mov	r4, r0
   a3eae:	020e      	lsls	r6, r1, #8
   a3eb0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   a3eb4:	432e      	orrs	r6, r5
   a3eb6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a3eba:	6822      	ldr	r2, [r4, #0]
   a3ebc:	4620      	mov	r0, r4
   a3ebe:	4072      	eors	r2, r6
   a3ec0:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   a3ec4:	ea21 0202 	bic.w	r2, r1, r2
   a3ec8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a3ecc:	f104 0404 	add.w	r4, r4, #4
   a3ed0:	d1db      	bne.n	a3e8a <memchr+0x32>
   a3ed2:	3b04      	subs	r3, #4
   a3ed4:	2b03      	cmp	r3, #3
   a3ed6:	4620      	mov	r0, r4
   a3ed8:	d8ef      	bhi.n	a3eba <memchr+0x62>
   a3eda:	e7d5      	b.n	a3e88 <memchr+0x30>
   a3edc:	4613      	mov	r3, r2
   a3ede:	e7d1      	b.n	a3e84 <memchr+0x2c>
   a3ee0:	4618      	mov	r0, r3
   a3ee2:	e7e1      	b.n	a3ea8 <memchr+0x50>

000a3ee4 <memmove>:
   a3ee4:	4288      	cmp	r0, r1
   a3ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
   a3ee8:	d90d      	bls.n	a3f06 <memmove+0x22>
   a3eea:	188b      	adds	r3, r1, r2
   a3eec:	4298      	cmp	r0, r3
   a3eee:	d20a      	bcs.n	a3f06 <memmove+0x22>
   a3ef0:	1881      	adds	r1, r0, r2
   a3ef2:	2a00      	cmp	r2, #0
   a3ef4:	d051      	beq.n	a3f9a <memmove+0xb6>
   a3ef6:	1a9a      	subs	r2, r3, r2
   a3ef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a3efc:	4293      	cmp	r3, r2
   a3efe:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a3f02:	d1f9      	bne.n	a3ef8 <memmove+0x14>
   a3f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a3f06:	2a0f      	cmp	r2, #15
   a3f08:	d948      	bls.n	a3f9c <memmove+0xb8>
   a3f0a:	ea41 0300 	orr.w	r3, r1, r0
   a3f0e:	079b      	lsls	r3, r3, #30
   a3f10:	d146      	bne.n	a3fa0 <memmove+0xbc>
   a3f12:	4615      	mov	r5, r2
   a3f14:	f100 0410 	add.w	r4, r0, #16
   a3f18:	f101 0310 	add.w	r3, r1, #16
   a3f1c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a3f20:	3d10      	subs	r5, #16
   a3f22:	f844 6c10 	str.w	r6, [r4, #-16]
   a3f26:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a3f2a:	2d0f      	cmp	r5, #15
   a3f2c:	f844 6c0c 	str.w	r6, [r4, #-12]
   a3f30:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a3f34:	f104 0410 	add.w	r4, r4, #16
   a3f38:	f844 6c18 	str.w	r6, [r4, #-24]
   a3f3c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a3f40:	f103 0310 	add.w	r3, r3, #16
   a3f44:	f844 6c14 	str.w	r6, [r4, #-20]
   a3f48:	d8e8      	bhi.n	a3f1c <memmove+0x38>
   a3f4a:	f1a2 0310 	sub.w	r3, r2, #16
   a3f4e:	f023 030f 	bic.w	r3, r3, #15
   a3f52:	f002 0e0f 	and.w	lr, r2, #15
   a3f56:	3310      	adds	r3, #16
   a3f58:	f1be 0f03 	cmp.w	lr, #3
   a3f5c:	4419      	add	r1, r3
   a3f5e:	4403      	add	r3, r0
   a3f60:	d921      	bls.n	a3fa6 <memmove+0xc2>
   a3f62:	460e      	mov	r6, r1
   a3f64:	4674      	mov	r4, lr
   a3f66:	1f1d      	subs	r5, r3, #4
   a3f68:	f856 7b04 	ldr.w	r7, [r6], #4
   a3f6c:	3c04      	subs	r4, #4
   a3f6e:	2c03      	cmp	r4, #3
   a3f70:	f845 7f04 	str.w	r7, [r5, #4]!
   a3f74:	d8f8      	bhi.n	a3f68 <memmove+0x84>
   a3f76:	f1ae 0404 	sub.w	r4, lr, #4
   a3f7a:	f024 0403 	bic.w	r4, r4, #3
   a3f7e:	3404      	adds	r4, #4
   a3f80:	4423      	add	r3, r4
   a3f82:	4421      	add	r1, r4
   a3f84:	f002 0203 	and.w	r2, r2, #3
   a3f88:	b162      	cbz	r2, a3fa4 <memmove+0xc0>
   a3f8a:	3b01      	subs	r3, #1
   a3f8c:	440a      	add	r2, r1
   a3f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   a3f92:	428a      	cmp	r2, r1
   a3f94:	f803 4f01 	strb.w	r4, [r3, #1]!
   a3f98:	d1f9      	bne.n	a3f8e <memmove+0xaa>
   a3f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a3f9c:	4603      	mov	r3, r0
   a3f9e:	e7f3      	b.n	a3f88 <memmove+0xa4>
   a3fa0:	4603      	mov	r3, r0
   a3fa2:	e7f2      	b.n	a3f8a <memmove+0xa6>
   a3fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a3fa6:	4672      	mov	r2, lr
   a3fa8:	e7ee      	b.n	a3f88 <memmove+0xa4>
   a3faa:	bf00      	nop

000a3fac <__malloc_lock>:
   a3fac:	4770      	bx	lr
   a3fae:	bf00      	nop

000a3fb0 <__malloc_unlock>:
   a3fb0:	4770      	bx	lr
   a3fb2:	bf00      	nop

000a3fb4 <_realloc_r>:
   a3fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a3fb8:	4617      	mov	r7, r2
   a3fba:	b083      	sub	sp, #12
   a3fbc:	2900      	cmp	r1, #0
   a3fbe:	f000 808f 	beq.w	a40e0 <_realloc_r+0x12c>
   a3fc2:	460d      	mov	r5, r1
   a3fc4:	4681      	mov	r9, r0
   a3fc6:	f107 040b 	add.w	r4, r7, #11
   a3fca:	f7ff ffef 	bl	a3fac <__malloc_lock>
   a3fce:	f855 ec04 	ldr.w	lr, [r5, #-4]
   a3fd2:	2c16      	cmp	r4, #22
   a3fd4:	f02e 0603 	bic.w	r6, lr, #3
   a3fd8:	f1a5 0808 	sub.w	r8, r5, #8
   a3fdc:	d83c      	bhi.n	a4058 <_realloc_r+0xa4>
   a3fde:	2210      	movs	r2, #16
   a3fe0:	4614      	mov	r4, r2
   a3fe2:	42a7      	cmp	r7, r4
   a3fe4:	d83d      	bhi.n	a4062 <_realloc_r+0xae>
   a3fe6:	4296      	cmp	r6, r2
   a3fe8:	da42      	bge.n	a4070 <_realloc_r+0xbc>
   a3fea:	4bc6      	ldr	r3, [pc, #792]	; (a4304 <_realloc_r+0x350>)
   a3fec:	eb08 0006 	add.w	r0, r8, r6
   a3ff0:	6899      	ldr	r1, [r3, #8]
   a3ff2:	4288      	cmp	r0, r1
   a3ff4:	6841      	ldr	r1, [r0, #4]
   a3ff6:	f000 80d7 	beq.w	a41a8 <_realloc_r+0x1f4>
   a3ffa:	f021 0301 	bic.w	r3, r1, #1
   a3ffe:	4403      	add	r3, r0
   a4000:	685b      	ldr	r3, [r3, #4]
   a4002:	07db      	lsls	r3, r3, #31
   a4004:	d54c      	bpl.n	a40a0 <_realloc_r+0xec>
   a4006:	f01e 0f01 	tst.w	lr, #1
   a400a:	f000 809d 	beq.w	a4148 <_realloc_r+0x194>
   a400e:	4639      	mov	r1, r7
   a4010:	4648      	mov	r0, r9
   a4012:	f7ff fc75 	bl	a3900 <_malloc_r>
   a4016:	4607      	mov	r7, r0
   a4018:	2800      	cmp	r0, #0
   a401a:	d03a      	beq.n	a4092 <_realloc_r+0xde>
   a401c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a4020:	f1a0 0208 	sub.w	r2, r0, #8
   a4024:	f023 0301 	bic.w	r3, r3, #1
   a4028:	4443      	add	r3, r8
   a402a:	429a      	cmp	r2, r3
   a402c:	f000 813e 	beq.w	a42ac <_realloc_r+0x2f8>
   a4030:	1f32      	subs	r2, r6, #4
   a4032:	2a24      	cmp	r2, #36	; 0x24
   a4034:	f200 812b 	bhi.w	a428e <_realloc_r+0x2da>
   a4038:	2a13      	cmp	r2, #19
   a403a:	f200 80ff 	bhi.w	a423c <_realloc_r+0x288>
   a403e:	4603      	mov	r3, r0
   a4040:	462a      	mov	r2, r5
   a4042:	6811      	ldr	r1, [r2, #0]
   a4044:	6019      	str	r1, [r3, #0]
   a4046:	6851      	ldr	r1, [r2, #4]
   a4048:	6059      	str	r1, [r3, #4]
   a404a:	6892      	ldr	r2, [r2, #8]
   a404c:	609a      	str	r2, [r3, #8]
   a404e:	4629      	mov	r1, r5
   a4050:	4648      	mov	r0, r9
   a4052:	f7ff f945 	bl	a32e0 <_free_r>
   a4056:	e01c      	b.n	a4092 <_realloc_r+0xde>
   a4058:	f024 0407 	bic.w	r4, r4, #7
   a405c:	2c00      	cmp	r4, #0
   a405e:	4622      	mov	r2, r4
   a4060:	dabf      	bge.n	a3fe2 <_realloc_r+0x2e>
   a4062:	230c      	movs	r3, #12
   a4064:	2000      	movs	r0, #0
   a4066:	f8c9 3000 	str.w	r3, [r9]
   a406a:	b003      	add	sp, #12
   a406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4070:	462f      	mov	r7, r5
   a4072:	1b33      	subs	r3, r6, r4
   a4074:	2b0f      	cmp	r3, #15
   a4076:	f8d8 2004 	ldr.w	r2, [r8, #4]
   a407a:	d81d      	bhi.n	a40b8 <_realloc_r+0x104>
   a407c:	f002 0201 	and.w	r2, r2, #1
   a4080:	4332      	orrs	r2, r6
   a4082:	eb08 0106 	add.w	r1, r8, r6
   a4086:	f8c8 2004 	str.w	r2, [r8, #4]
   a408a:	684b      	ldr	r3, [r1, #4]
   a408c:	f043 0301 	orr.w	r3, r3, #1
   a4090:	604b      	str	r3, [r1, #4]
   a4092:	4648      	mov	r0, r9
   a4094:	f7ff ff8c 	bl	a3fb0 <__malloc_unlock>
   a4098:	4638      	mov	r0, r7
   a409a:	b003      	add	sp, #12
   a409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a40a0:	f021 0103 	bic.w	r1, r1, #3
   a40a4:	4431      	add	r1, r6
   a40a6:	4291      	cmp	r1, r2
   a40a8:	db20      	blt.n	a40ec <_realloc_r+0x138>
   a40aa:	68c3      	ldr	r3, [r0, #12]
   a40ac:	6882      	ldr	r2, [r0, #8]
   a40ae:	462f      	mov	r7, r5
   a40b0:	60d3      	str	r3, [r2, #12]
   a40b2:	460e      	mov	r6, r1
   a40b4:	609a      	str	r2, [r3, #8]
   a40b6:	e7dc      	b.n	a4072 <_realloc_r+0xbe>
   a40b8:	f002 0201 	and.w	r2, r2, #1
   a40bc:	eb08 0104 	add.w	r1, r8, r4
   a40c0:	4314      	orrs	r4, r2
   a40c2:	f043 0201 	orr.w	r2, r3, #1
   a40c6:	f8c8 4004 	str.w	r4, [r8, #4]
   a40ca:	440b      	add	r3, r1
   a40cc:	604a      	str	r2, [r1, #4]
   a40ce:	685a      	ldr	r2, [r3, #4]
   a40d0:	3108      	adds	r1, #8
   a40d2:	f042 0201 	orr.w	r2, r2, #1
   a40d6:	605a      	str	r2, [r3, #4]
   a40d8:	4648      	mov	r0, r9
   a40da:	f7ff f901 	bl	a32e0 <_free_r>
   a40de:	e7d8      	b.n	a4092 <_realloc_r+0xde>
   a40e0:	4611      	mov	r1, r2
   a40e2:	b003      	add	sp, #12
   a40e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a40e8:	f7ff bc0a 	b.w	a3900 <_malloc_r>
   a40ec:	f01e 0f01 	tst.w	lr, #1
   a40f0:	d18d      	bne.n	a400e <_realloc_r+0x5a>
   a40f2:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a40f6:	ebc3 0a08 	rsb	sl, r3, r8
   a40fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   a40fe:	f023 0c03 	bic.w	ip, r3, #3
   a4102:	eb01 0e0c 	add.w	lr, r1, ip
   a4106:	4596      	cmp	lr, r2
   a4108:	db26      	blt.n	a4158 <_realloc_r+0x1a4>
   a410a:	4657      	mov	r7, sl
   a410c:	68c3      	ldr	r3, [r0, #12]
   a410e:	6881      	ldr	r1, [r0, #8]
   a4110:	1f32      	subs	r2, r6, #4
   a4112:	60cb      	str	r3, [r1, #12]
   a4114:	6099      	str	r1, [r3, #8]
   a4116:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a411a:	f8da 300c 	ldr.w	r3, [sl, #12]
   a411e:	2a24      	cmp	r2, #36	; 0x24
   a4120:	60cb      	str	r3, [r1, #12]
   a4122:	6099      	str	r1, [r3, #8]
   a4124:	f200 80c9 	bhi.w	a42ba <_realloc_r+0x306>
   a4128:	2a13      	cmp	r2, #19
   a412a:	f240 8092 	bls.w	a4252 <_realloc_r+0x29e>
   a412e:	682b      	ldr	r3, [r5, #0]
   a4130:	2a1b      	cmp	r2, #27
   a4132:	f8ca 3008 	str.w	r3, [sl, #8]
   a4136:	686b      	ldr	r3, [r5, #4]
   a4138:	f8ca 300c 	str.w	r3, [sl, #12]
   a413c:	f200 80cd 	bhi.w	a42da <_realloc_r+0x326>
   a4140:	3508      	adds	r5, #8
   a4142:	f10a 0310 	add.w	r3, sl, #16
   a4146:	e085      	b.n	a4254 <_realloc_r+0x2a0>
   a4148:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a414c:	ebc3 0a08 	rsb	sl, r3, r8
   a4150:	f8da 3004 	ldr.w	r3, [sl, #4]
   a4154:	f023 0c03 	bic.w	ip, r3, #3
   a4158:	eb06 030c 	add.w	r3, r6, ip
   a415c:	4293      	cmp	r3, r2
   a415e:	f6ff af56 	blt.w	a400e <_realloc_r+0x5a>
   a4162:	4657      	mov	r7, sl
   a4164:	f8da 100c 	ldr.w	r1, [sl, #12]
   a4168:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a416c:	1f32      	subs	r2, r6, #4
   a416e:	2a24      	cmp	r2, #36	; 0x24
   a4170:	60c1      	str	r1, [r0, #12]
   a4172:	6088      	str	r0, [r1, #8]
   a4174:	f200 80aa 	bhi.w	a42cc <_realloc_r+0x318>
   a4178:	2a13      	cmp	r2, #19
   a417a:	f240 80a5 	bls.w	a42c8 <_realloc_r+0x314>
   a417e:	6829      	ldr	r1, [r5, #0]
   a4180:	2a1b      	cmp	r2, #27
   a4182:	f8ca 1008 	str.w	r1, [sl, #8]
   a4186:	6869      	ldr	r1, [r5, #4]
   a4188:	f8ca 100c 	str.w	r1, [sl, #12]
   a418c:	f200 80bc 	bhi.w	a4308 <_realloc_r+0x354>
   a4190:	3508      	adds	r5, #8
   a4192:	f10a 0210 	add.w	r2, sl, #16
   a4196:	6829      	ldr	r1, [r5, #0]
   a4198:	461e      	mov	r6, r3
   a419a:	6011      	str	r1, [r2, #0]
   a419c:	6869      	ldr	r1, [r5, #4]
   a419e:	46d0      	mov	r8, sl
   a41a0:	6051      	str	r1, [r2, #4]
   a41a2:	68ab      	ldr	r3, [r5, #8]
   a41a4:	6093      	str	r3, [r2, #8]
   a41a6:	e764      	b.n	a4072 <_realloc_r+0xbe>
   a41a8:	f021 0b03 	bic.w	fp, r1, #3
   a41ac:	f104 0010 	add.w	r0, r4, #16
   a41b0:	44b3      	add	fp, r6
   a41b2:	4583      	cmp	fp, r0
   a41b4:	da57      	bge.n	a4266 <_realloc_r+0x2b2>
   a41b6:	f01e 0f01 	tst.w	lr, #1
   a41ba:	f47f af28 	bne.w	a400e <_realloc_r+0x5a>
   a41be:	f855 1c08 	ldr.w	r1, [r5, #-8]
   a41c2:	ebc1 0a08 	rsb	sl, r1, r8
   a41c6:	f8da 1004 	ldr.w	r1, [sl, #4]
   a41ca:	f021 0c03 	bic.w	ip, r1, #3
   a41ce:	44e3      	add	fp, ip
   a41d0:	4558      	cmp	r0, fp
   a41d2:	dcc1      	bgt.n	a4158 <_realloc_r+0x1a4>
   a41d4:	4657      	mov	r7, sl
   a41d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   a41da:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a41de:	1f32      	subs	r2, r6, #4
   a41e0:	2a24      	cmp	r2, #36	; 0x24
   a41e2:	60c1      	str	r1, [r0, #12]
   a41e4:	6088      	str	r0, [r1, #8]
   a41e6:	f200 80b1 	bhi.w	a434c <_realloc_r+0x398>
   a41ea:	2a13      	cmp	r2, #19
   a41ec:	f240 80a2 	bls.w	a4334 <_realloc_r+0x380>
   a41f0:	6829      	ldr	r1, [r5, #0]
   a41f2:	2a1b      	cmp	r2, #27
   a41f4:	f8ca 1008 	str.w	r1, [sl, #8]
   a41f8:	6869      	ldr	r1, [r5, #4]
   a41fa:	f8ca 100c 	str.w	r1, [sl, #12]
   a41fe:	f200 80ac 	bhi.w	a435a <_realloc_r+0x3a6>
   a4202:	3508      	adds	r5, #8
   a4204:	f10a 0210 	add.w	r2, sl, #16
   a4208:	6829      	ldr	r1, [r5, #0]
   a420a:	6011      	str	r1, [r2, #0]
   a420c:	6869      	ldr	r1, [r5, #4]
   a420e:	6051      	str	r1, [r2, #4]
   a4210:	68a9      	ldr	r1, [r5, #8]
   a4212:	6091      	str	r1, [r2, #8]
   a4214:	ebc4 020b 	rsb	r2, r4, fp
   a4218:	eb0a 0104 	add.w	r1, sl, r4
   a421c:	f042 0201 	orr.w	r2, r2, #1
   a4220:	6099      	str	r1, [r3, #8]
   a4222:	604a      	str	r2, [r1, #4]
   a4224:	f8da 3004 	ldr.w	r3, [sl, #4]
   a4228:	4648      	mov	r0, r9
   a422a:	f003 0301 	and.w	r3, r3, #1
   a422e:	431c      	orrs	r4, r3
   a4230:	f8ca 4004 	str.w	r4, [sl, #4]
   a4234:	f7ff febc 	bl	a3fb0 <__malloc_unlock>
   a4238:	4638      	mov	r0, r7
   a423a:	e72e      	b.n	a409a <_realloc_r+0xe6>
   a423c:	682b      	ldr	r3, [r5, #0]
   a423e:	2a1b      	cmp	r2, #27
   a4240:	6003      	str	r3, [r0, #0]
   a4242:	686b      	ldr	r3, [r5, #4]
   a4244:	6043      	str	r3, [r0, #4]
   a4246:	d826      	bhi.n	a4296 <_realloc_r+0x2e2>
   a4248:	f100 0308 	add.w	r3, r0, #8
   a424c:	f105 0208 	add.w	r2, r5, #8
   a4250:	e6f7      	b.n	a4042 <_realloc_r+0x8e>
   a4252:	463b      	mov	r3, r7
   a4254:	682a      	ldr	r2, [r5, #0]
   a4256:	4676      	mov	r6, lr
   a4258:	601a      	str	r2, [r3, #0]
   a425a:	686a      	ldr	r2, [r5, #4]
   a425c:	46d0      	mov	r8, sl
   a425e:	605a      	str	r2, [r3, #4]
   a4260:	68aa      	ldr	r2, [r5, #8]
   a4262:	609a      	str	r2, [r3, #8]
   a4264:	e705      	b.n	a4072 <_realloc_r+0xbe>
   a4266:	ebc4 0b0b 	rsb	fp, r4, fp
   a426a:	eb08 0104 	add.w	r1, r8, r4
   a426e:	f04b 0201 	orr.w	r2, fp, #1
   a4272:	6099      	str	r1, [r3, #8]
   a4274:	604a      	str	r2, [r1, #4]
   a4276:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a427a:	4648      	mov	r0, r9
   a427c:	f003 0301 	and.w	r3, r3, #1
   a4280:	431c      	orrs	r4, r3
   a4282:	f845 4c04 	str.w	r4, [r5, #-4]
   a4286:	f7ff fe93 	bl	a3fb0 <__malloc_unlock>
   a428a:	4628      	mov	r0, r5
   a428c:	e705      	b.n	a409a <_realloc_r+0xe6>
   a428e:	4629      	mov	r1, r5
   a4290:	f7ff fe28 	bl	a3ee4 <memmove>
   a4294:	e6db      	b.n	a404e <_realloc_r+0x9a>
   a4296:	68ab      	ldr	r3, [r5, #8]
   a4298:	2a24      	cmp	r2, #36	; 0x24
   a429a:	6083      	str	r3, [r0, #8]
   a429c:	68eb      	ldr	r3, [r5, #12]
   a429e:	60c3      	str	r3, [r0, #12]
   a42a0:	d027      	beq.n	a42f2 <_realloc_r+0x33e>
   a42a2:	f100 0310 	add.w	r3, r0, #16
   a42a6:	f105 0210 	add.w	r2, r5, #16
   a42aa:	e6ca      	b.n	a4042 <_realloc_r+0x8e>
   a42ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a42b0:	462f      	mov	r7, r5
   a42b2:	f023 0303 	bic.w	r3, r3, #3
   a42b6:	441e      	add	r6, r3
   a42b8:	e6db      	b.n	a4072 <_realloc_r+0xbe>
   a42ba:	4629      	mov	r1, r5
   a42bc:	4638      	mov	r0, r7
   a42be:	4676      	mov	r6, lr
   a42c0:	46d0      	mov	r8, sl
   a42c2:	f7ff fe0f 	bl	a3ee4 <memmove>
   a42c6:	e6d4      	b.n	a4072 <_realloc_r+0xbe>
   a42c8:	463a      	mov	r2, r7
   a42ca:	e764      	b.n	a4196 <_realloc_r+0x1e2>
   a42cc:	4629      	mov	r1, r5
   a42ce:	4638      	mov	r0, r7
   a42d0:	461e      	mov	r6, r3
   a42d2:	46d0      	mov	r8, sl
   a42d4:	f7ff fe06 	bl	a3ee4 <memmove>
   a42d8:	e6cb      	b.n	a4072 <_realloc_r+0xbe>
   a42da:	68ab      	ldr	r3, [r5, #8]
   a42dc:	2a24      	cmp	r2, #36	; 0x24
   a42de:	f8ca 3010 	str.w	r3, [sl, #16]
   a42e2:	68eb      	ldr	r3, [r5, #12]
   a42e4:	f8ca 3014 	str.w	r3, [sl, #20]
   a42e8:	d01a      	beq.n	a4320 <_realloc_r+0x36c>
   a42ea:	3510      	adds	r5, #16
   a42ec:	f10a 0318 	add.w	r3, sl, #24
   a42f0:	e7b0      	b.n	a4254 <_realloc_r+0x2a0>
   a42f2:	692a      	ldr	r2, [r5, #16]
   a42f4:	f100 0318 	add.w	r3, r0, #24
   a42f8:	6102      	str	r2, [r0, #16]
   a42fa:	6969      	ldr	r1, [r5, #20]
   a42fc:	f105 0218 	add.w	r2, r5, #24
   a4300:	6141      	str	r1, [r0, #20]
   a4302:	e69e      	b.n	a4042 <_realloc_r+0x8e>
   a4304:	20071094 	.word	0x20071094
   a4308:	68a9      	ldr	r1, [r5, #8]
   a430a:	2a24      	cmp	r2, #36	; 0x24
   a430c:	f8ca 1010 	str.w	r1, [sl, #16]
   a4310:	68e9      	ldr	r1, [r5, #12]
   a4312:	f8ca 1014 	str.w	r1, [sl, #20]
   a4316:	d00f      	beq.n	a4338 <_realloc_r+0x384>
   a4318:	3510      	adds	r5, #16
   a431a:	f10a 0218 	add.w	r2, sl, #24
   a431e:	e73a      	b.n	a4196 <_realloc_r+0x1e2>
   a4320:	692a      	ldr	r2, [r5, #16]
   a4322:	f10a 0320 	add.w	r3, sl, #32
   a4326:	f8ca 2018 	str.w	r2, [sl, #24]
   a432a:	696a      	ldr	r2, [r5, #20]
   a432c:	3518      	adds	r5, #24
   a432e:	f8ca 201c 	str.w	r2, [sl, #28]
   a4332:	e78f      	b.n	a4254 <_realloc_r+0x2a0>
   a4334:	463a      	mov	r2, r7
   a4336:	e767      	b.n	a4208 <_realloc_r+0x254>
   a4338:	6929      	ldr	r1, [r5, #16]
   a433a:	f10a 0220 	add.w	r2, sl, #32
   a433e:	f8ca 1018 	str.w	r1, [sl, #24]
   a4342:	6969      	ldr	r1, [r5, #20]
   a4344:	3518      	adds	r5, #24
   a4346:	f8ca 101c 	str.w	r1, [sl, #28]
   a434a:	e724      	b.n	a4196 <_realloc_r+0x1e2>
   a434c:	4629      	mov	r1, r5
   a434e:	4638      	mov	r0, r7
   a4350:	9301      	str	r3, [sp, #4]
   a4352:	f7ff fdc7 	bl	a3ee4 <memmove>
   a4356:	9b01      	ldr	r3, [sp, #4]
   a4358:	e75c      	b.n	a4214 <_realloc_r+0x260>
   a435a:	68a9      	ldr	r1, [r5, #8]
   a435c:	2a24      	cmp	r2, #36	; 0x24
   a435e:	f8ca 1010 	str.w	r1, [sl, #16]
   a4362:	68e9      	ldr	r1, [r5, #12]
   a4364:	f8ca 1014 	str.w	r1, [sl, #20]
   a4368:	d003      	beq.n	a4372 <_realloc_r+0x3be>
   a436a:	3510      	adds	r5, #16
   a436c:	f10a 0218 	add.w	r2, sl, #24
   a4370:	e74a      	b.n	a4208 <_realloc_r+0x254>
   a4372:	6929      	ldr	r1, [r5, #16]
   a4374:	f10a 0220 	add.w	r2, sl, #32
   a4378:	f8ca 1018 	str.w	r1, [sl, #24]
   a437c:	6969      	ldr	r1, [r5, #20]
   a437e:	3518      	adds	r5, #24
   a4380:	f8ca 101c 	str.w	r1, [sl, #28]
   a4384:	e740      	b.n	a4208 <_realloc_r+0x254>
   a4386:	bf00      	nop

000a4388 <_sbrk_r>:
   a4388:	b538      	push	{r3, r4, r5, lr}
   a438a:	4c07      	ldr	r4, [pc, #28]	; (a43a8 <_sbrk_r+0x20>)
   a438c:	2300      	movs	r3, #0
   a438e:	4605      	mov	r5, r0
   a4390:	4608      	mov	r0, r1
   a4392:	6023      	str	r3, [r4, #0]
   a4394:	f7f3 ff0c 	bl	981b0 <_sbrk>
   a4398:	1c43      	adds	r3, r0, #1
   a439a:	d000      	beq.n	a439e <_sbrk_r+0x16>
   a439c:	bd38      	pop	{r3, r4, r5, pc}
   a439e:	6823      	ldr	r3, [r4, #0]
   a43a0:	2b00      	cmp	r3, #0
   a43a2:	d0fb      	beq.n	a439c <_sbrk_r+0x14>
   a43a4:	602b      	str	r3, [r5, #0]
   a43a6:	bd38      	pop	{r3, r4, r5, pc}
   a43a8:	200732f0 	.word	0x200732f0

000a43ac <__sread>:
   a43ac:	b510      	push	{r4, lr}
   a43ae:	460c      	mov	r4, r1
   a43b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a43b4:	f000 f936 	bl	a4624 <_read_r>
   a43b8:	2800      	cmp	r0, #0
   a43ba:	db03      	blt.n	a43c4 <__sread+0x18>
   a43bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a43be:	4403      	add	r3, r0
   a43c0:	6523      	str	r3, [r4, #80]	; 0x50
   a43c2:	bd10      	pop	{r4, pc}
   a43c4:	89a3      	ldrh	r3, [r4, #12]
   a43c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a43ca:	81a3      	strh	r3, [r4, #12]
   a43cc:	bd10      	pop	{r4, pc}
   a43ce:	bf00      	nop

000a43d0 <__swrite>:
   a43d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a43d4:	460c      	mov	r4, r1
   a43d6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   a43da:	461f      	mov	r7, r3
   a43dc:	05cb      	lsls	r3, r1, #23
   a43de:	4616      	mov	r6, r2
   a43e0:	4605      	mov	r5, r0
   a43e2:	d507      	bpl.n	a43f4 <__swrite+0x24>
   a43e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a43e8:	2302      	movs	r3, #2
   a43ea:	2200      	movs	r2, #0
   a43ec:	f000 f904 	bl	a45f8 <_lseek_r>
   a43f0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   a43f4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a43f8:	81a1      	strh	r1, [r4, #12]
   a43fa:	463b      	mov	r3, r7
   a43fc:	4632      	mov	r2, r6
   a43fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a4402:	4628      	mov	r0, r5
   a4404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a4408:	f000 b814 	b.w	a4434 <_write_r>

000a440c <__sseek>:
   a440c:	b510      	push	{r4, lr}
   a440e:	460c      	mov	r4, r1
   a4410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a4414:	f000 f8f0 	bl	a45f8 <_lseek_r>
   a4418:	89a3      	ldrh	r3, [r4, #12]
   a441a:	1c42      	adds	r2, r0, #1
   a441c:	bf0e      	itee	eq
   a441e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a4422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a4426:	6520      	strne	r0, [r4, #80]	; 0x50
   a4428:	81a3      	strh	r3, [r4, #12]
   a442a:	bd10      	pop	{r4, pc}

000a442c <__sclose>:
   a442c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a4430:	f000 b868 	b.w	a4504 <_close_r>

000a4434 <_write_r>:
   a4434:	b570      	push	{r4, r5, r6, lr}
   a4436:	460d      	mov	r5, r1
   a4438:	4c08      	ldr	r4, [pc, #32]	; (a445c <_write_r+0x28>)
   a443a:	4611      	mov	r1, r2
   a443c:	4606      	mov	r6, r0
   a443e:	461a      	mov	r2, r3
   a4440:	4628      	mov	r0, r5
   a4442:	2300      	movs	r3, #0
   a4444:	6023      	str	r3, [r4, #0]
   a4446:	f7f2 fec3 	bl	971d0 <_write>
   a444a:	1c43      	adds	r3, r0, #1
   a444c:	d000      	beq.n	a4450 <_write_r+0x1c>
   a444e:	bd70      	pop	{r4, r5, r6, pc}
   a4450:	6823      	ldr	r3, [r4, #0]
   a4452:	2b00      	cmp	r3, #0
   a4454:	d0fb      	beq.n	a444e <_write_r+0x1a>
   a4456:	6033      	str	r3, [r6, #0]
   a4458:	bd70      	pop	{r4, r5, r6, pc}
   a445a:	bf00      	nop
   a445c:	200732f0 	.word	0x200732f0

000a4460 <__register_exitproc>:
   a4460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a4464:	4c25      	ldr	r4, [pc, #148]	; (a44fc <__register_exitproc+0x9c>)
   a4466:	4606      	mov	r6, r0
   a4468:	6825      	ldr	r5, [r4, #0]
   a446a:	4688      	mov	r8, r1
   a446c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a4470:	4692      	mov	sl, r2
   a4472:	4699      	mov	r9, r3
   a4474:	b3c4      	cbz	r4, a44e8 <__register_exitproc+0x88>
   a4476:	6860      	ldr	r0, [r4, #4]
   a4478:	281f      	cmp	r0, #31
   a447a:	dc17      	bgt.n	a44ac <__register_exitproc+0x4c>
   a447c:	1c41      	adds	r1, r0, #1
   a447e:	b176      	cbz	r6, a449e <__register_exitproc+0x3e>
   a4480:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a4484:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a4488:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a448c:	2201      	movs	r2, #1
   a448e:	4082      	lsls	r2, r0
   a4490:	4315      	orrs	r5, r2
   a4492:	2e02      	cmp	r6, #2
   a4494:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a4498:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a449c:	d01e      	beq.n	a44dc <__register_exitproc+0x7c>
   a449e:	1c83      	adds	r3, r0, #2
   a44a0:	6061      	str	r1, [r4, #4]
   a44a2:	2000      	movs	r0, #0
   a44a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a44a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a44ac:	4b14      	ldr	r3, [pc, #80]	; (a4500 <__register_exitproc+0xa0>)
   a44ae:	b303      	cbz	r3, a44f2 <__register_exitproc+0x92>
   a44b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a44b4:	f7ff fa1c 	bl	a38f0 <malloc>
   a44b8:	4604      	mov	r4, r0
   a44ba:	b1d0      	cbz	r0, a44f2 <__register_exitproc+0x92>
   a44bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a44c0:	2700      	movs	r7, #0
   a44c2:	e884 0088 	stmia.w	r4, {r3, r7}
   a44c6:	4638      	mov	r0, r7
   a44c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a44cc:	2101      	movs	r1, #1
   a44ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a44d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a44d6:	2e00      	cmp	r6, #0
   a44d8:	d0e1      	beq.n	a449e <__register_exitproc+0x3e>
   a44da:	e7d1      	b.n	a4480 <__register_exitproc+0x20>
   a44dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a44e0:	431a      	orrs	r2, r3
   a44e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a44e6:	e7da      	b.n	a449e <__register_exitproc+0x3e>
   a44e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a44ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a44f0:	e7c1      	b.n	a4476 <__register_exitproc+0x16>
   a44f2:	f04f 30ff 	mov.w	r0, #4294967295
   a44f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a44fa:	bf00      	nop
   a44fc:	000a4be4 	.word	0x000a4be4
   a4500:	000a38f1 	.word	0x000a38f1

000a4504 <_close_r>:
   a4504:	b538      	push	{r3, r4, r5, lr}
   a4506:	4c07      	ldr	r4, [pc, #28]	; (a4524 <_close_r+0x20>)
   a4508:	2300      	movs	r3, #0
   a450a:	4605      	mov	r5, r0
   a450c:	4608      	mov	r0, r1
   a450e:	6023      	str	r3, [r4, #0]
   a4510:	f7f3 fe6c 	bl	981ec <_close>
   a4514:	1c43      	adds	r3, r0, #1
   a4516:	d000      	beq.n	a451a <_close_r+0x16>
   a4518:	bd38      	pop	{r3, r4, r5, pc}
   a451a:	6823      	ldr	r3, [r4, #0]
   a451c:	2b00      	cmp	r3, #0
   a451e:	d0fb      	beq.n	a4518 <_close_r+0x14>
   a4520:	602b      	str	r3, [r5, #0]
   a4522:	bd38      	pop	{r3, r4, r5, pc}
   a4524:	200732f0 	.word	0x200732f0

000a4528 <_fclose_r>:
   a4528:	2900      	cmp	r1, #0
   a452a:	d03d      	beq.n	a45a8 <_fclose_r+0x80>
   a452c:	b570      	push	{r4, r5, r6, lr}
   a452e:	4605      	mov	r5, r0
   a4530:	460c      	mov	r4, r1
   a4532:	b108      	cbz	r0, a4538 <_fclose_r+0x10>
   a4534:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a4536:	b37b      	cbz	r3, a4598 <_fclose_r+0x70>
   a4538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a453c:	b90b      	cbnz	r3, a4542 <_fclose_r+0x1a>
   a453e:	2000      	movs	r0, #0
   a4540:	bd70      	pop	{r4, r5, r6, pc}
   a4542:	4621      	mov	r1, r4
   a4544:	4628      	mov	r0, r5
   a4546:	f7fe fd27 	bl	a2f98 <__sflush_r>
   a454a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a454c:	4606      	mov	r6, r0
   a454e:	b133      	cbz	r3, a455e <_fclose_r+0x36>
   a4550:	69e1      	ldr	r1, [r4, #28]
   a4552:	4628      	mov	r0, r5
   a4554:	4798      	blx	r3
   a4556:	2800      	cmp	r0, #0
   a4558:	bfb8      	it	lt
   a455a:	f04f 36ff 	movlt.w	r6, #4294967295
   a455e:	89a3      	ldrh	r3, [r4, #12]
   a4560:	061b      	lsls	r3, r3, #24
   a4562:	d41c      	bmi.n	a459e <_fclose_r+0x76>
   a4564:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a4566:	b141      	cbz	r1, a457a <_fclose_r+0x52>
   a4568:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a456c:	4299      	cmp	r1, r3
   a456e:	d002      	beq.n	a4576 <_fclose_r+0x4e>
   a4570:	4628      	mov	r0, r5
   a4572:	f7fe feb5 	bl	a32e0 <_free_r>
   a4576:	2300      	movs	r3, #0
   a4578:	6323      	str	r3, [r4, #48]	; 0x30
   a457a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a457c:	b121      	cbz	r1, a4588 <_fclose_r+0x60>
   a457e:	4628      	mov	r0, r5
   a4580:	f7fe feae 	bl	a32e0 <_free_r>
   a4584:	2300      	movs	r3, #0
   a4586:	6463      	str	r3, [r4, #68]	; 0x44
   a4588:	f7fe fe44 	bl	a3214 <__sfp_lock_acquire>
   a458c:	2300      	movs	r3, #0
   a458e:	81a3      	strh	r3, [r4, #12]
   a4590:	f7fe fe42 	bl	a3218 <__sfp_lock_release>
   a4594:	4630      	mov	r0, r6
   a4596:	bd70      	pop	{r4, r5, r6, pc}
   a4598:	f7fe fe36 	bl	a3208 <__sinit>
   a459c:	e7cc      	b.n	a4538 <_fclose_r+0x10>
   a459e:	6921      	ldr	r1, [r4, #16]
   a45a0:	4628      	mov	r0, r5
   a45a2:	f7fe fe9d 	bl	a32e0 <_free_r>
   a45a6:	e7dd      	b.n	a4564 <_fclose_r+0x3c>
   a45a8:	2000      	movs	r0, #0
   a45aa:	4770      	bx	lr

000a45ac <_fstat_r>:
   a45ac:	b538      	push	{r3, r4, r5, lr}
   a45ae:	460b      	mov	r3, r1
   a45b0:	4c07      	ldr	r4, [pc, #28]	; (a45d0 <_fstat_r+0x24>)
   a45b2:	4605      	mov	r5, r0
   a45b4:	4611      	mov	r1, r2
   a45b6:	4618      	mov	r0, r3
   a45b8:	2300      	movs	r3, #0
   a45ba:	6023      	str	r3, [r4, #0]
   a45bc:	f7f3 fe22 	bl	98204 <_fstat>
   a45c0:	1c43      	adds	r3, r0, #1
   a45c2:	d000      	beq.n	a45c6 <_fstat_r+0x1a>
   a45c4:	bd38      	pop	{r3, r4, r5, pc}
   a45c6:	6823      	ldr	r3, [r4, #0]
   a45c8:	2b00      	cmp	r3, #0
   a45ca:	d0fb      	beq.n	a45c4 <_fstat_r+0x18>
   a45cc:	602b      	str	r3, [r5, #0]
   a45ce:	bd38      	pop	{r3, r4, r5, pc}
   a45d0:	200732f0 	.word	0x200732f0

000a45d4 <_isatty_r>:
   a45d4:	b538      	push	{r3, r4, r5, lr}
   a45d6:	4c07      	ldr	r4, [pc, #28]	; (a45f4 <_isatty_r+0x20>)
   a45d8:	2300      	movs	r3, #0
   a45da:	4605      	mov	r5, r0
   a45dc:	4608      	mov	r0, r1
   a45de:	6023      	str	r3, [r4, #0]
   a45e0:	f7f3 fe20 	bl	98224 <_isatty>
   a45e4:	1c43      	adds	r3, r0, #1
   a45e6:	d000      	beq.n	a45ea <_isatty_r+0x16>
   a45e8:	bd38      	pop	{r3, r4, r5, pc}
   a45ea:	6823      	ldr	r3, [r4, #0]
   a45ec:	2b00      	cmp	r3, #0
   a45ee:	d0fb      	beq.n	a45e8 <_isatty_r+0x14>
   a45f0:	602b      	str	r3, [r5, #0]
   a45f2:	bd38      	pop	{r3, r4, r5, pc}
   a45f4:	200732f0 	.word	0x200732f0

000a45f8 <_lseek_r>:
   a45f8:	b570      	push	{r4, r5, r6, lr}
   a45fa:	460d      	mov	r5, r1
   a45fc:	4c08      	ldr	r4, [pc, #32]	; (a4620 <_lseek_r+0x28>)
   a45fe:	4611      	mov	r1, r2
   a4600:	4606      	mov	r6, r0
   a4602:	461a      	mov	r2, r3
   a4604:	4628      	mov	r0, r5
   a4606:	2300      	movs	r3, #0
   a4608:	6023      	str	r3, [r4, #0]
   a460a:	f7f3 fe15 	bl	98238 <_lseek>
   a460e:	1c43      	adds	r3, r0, #1
   a4610:	d000      	beq.n	a4614 <_lseek_r+0x1c>
   a4612:	bd70      	pop	{r4, r5, r6, pc}
   a4614:	6823      	ldr	r3, [r4, #0]
   a4616:	2b00      	cmp	r3, #0
   a4618:	d0fb      	beq.n	a4612 <_lseek_r+0x1a>
   a461a:	6033      	str	r3, [r6, #0]
   a461c:	bd70      	pop	{r4, r5, r6, pc}
   a461e:	bf00      	nop
   a4620:	200732f0 	.word	0x200732f0

000a4624 <_read_r>:
   a4624:	b570      	push	{r4, r5, r6, lr}
   a4626:	460d      	mov	r5, r1
   a4628:	4c08      	ldr	r4, [pc, #32]	; (a464c <_read_r+0x28>)
   a462a:	4611      	mov	r1, r2
   a462c:	4606      	mov	r6, r0
   a462e:	461a      	mov	r2, r3
   a4630:	4628      	mov	r0, r5
   a4632:	2300      	movs	r3, #0
   a4634:	6023      	str	r3, [r4, #0]
   a4636:	f7f2 fda1 	bl	9717c <_read>
   a463a:	1c43      	adds	r3, r0, #1
   a463c:	d000      	beq.n	a4640 <_read_r+0x1c>
   a463e:	bd70      	pop	{r4, r5, r6, pc}
   a4640:	6823      	ldr	r3, [r4, #0]
   a4642:	2b00      	cmp	r3, #0
   a4644:	d0fb      	beq.n	a463e <_read_r+0x1a>
   a4646:	6033      	str	r3, [r6, #0]
   a4648:	bd70      	pop	{r4, r5, r6, pc}
   a464a:	bf00      	nop
   a464c:	200732f0 	.word	0x200732f0
   a4650:	54534554 	.word	0x54534554
   a4654:	00315350 	.word	0x00315350
   a4658:	54534554 	.word	0x54534554
   a465c:	00325350 	.word	0x00325350
   a4660:	54534554 	.word	0x54534554
   a4664:	00335350 	.word	0x00335350
   a4668:	54534554 	.word	0x54534554
   a466c:	00545041 	.word	0x00545041
   a4670:	54534554 	.word	0x54534554
   a4674:	00003154 	.word	0x00003154
   a4678:	54534554 	.word	0x54534554
   a467c:	00003254 	.word	0x00003254
   a4680:	54534554 	.word	0x54534554
   a4684:	00003354 	.word	0x00003354
   a4688:	54534554 	.word	0x54534554
   a468c:	444e4f43 	.word	0x444e4f43
   a4690:	00000000 	.word	0x00000000
   a4694:	45544544 	.word	0x45544544
   a4698:	4c5f5443 	.word	0x4c5f5443
   a469c:	0000574f 	.word	0x0000574f
   a46a0:	48545056 	.word	0x48545056
   a46a4:	00484749 	.word	0x00484749
   a46a8:	4f4f4c42 	.word	0x4f4f4c42
   a46ac:	4c445f44 	.word	0x4c445f44
   a46b0:	00000000 	.word	0x00000000
   a46b4:	00545041 	.word	0x00545041
   a46b8:	45544e45 	.word	0x45544e45
   a46bc:	00315f52 	.word	0x00315f52
   a46c0:	4f434552 	.word	0x4f434552
   a46c4:	59524556 	.word	0x59524556
   a46c8:	00000000 	.word	0x00000000
   a46cc:	45464153 	.word	0x45464153
   a46d0:	00000000 	.word	0x00000000
   a46d4:	45544e45 	.word	0x45544e45
   a46d8:	00325f52 	.word	0x00325f52
   a46dc:	45544e45 	.word	0x45544e45
   a46e0:	00335f52 	.word	0x00335f52
   a46e4:	45544e45 	.word	0x45544e45
   a46e8:	00345f52 	.word	0x00345f52
   a46ec:	00574c46 	.word	0x00574c46
   a46f0:	00004442 	.word	0x00004442
   a46f4:	00444241 	.word	0x00444241
   a46f8:	00303035 	.word	0x00303035
   a46fc:	41505942 	.word	0x41505942
   a4700:	00005353 	.word	0x00005353
   a4704:	4d495250 	.word	0x4d495250
   a4708:	00003245 	.word	0x00003245
   a470c:	52494352 	.word	0x52494352
   a4710:	00003243 	.word	0x00003243
   a4714:	4f5f4548 	.word	0x4f5f4548
   a4718:	0000004e 	.word	0x0000004e
   a471c:	4f5f4548 	.word	0x4f5f4548
   a4720:	00004646 	.word	0x00004646
   a4724:	4f5f5046 	.word	0x4f5f5046
   a4728:	0000004e 	.word	0x0000004e
   a472c:	4f5f5046 	.word	0x4f5f5046
   a4730:	00004646 	.word	0x00004646
   a4734:	505f5343 	.word	0x505f5343
   a4738:	535f544f 	.word	0x535f544f
   a473c:	00005445 	.word	0x00005445
   a4740:	525f5046 	.word	0x525f5046
   a4744:	00455441 	.word	0x00455441
   a4748:	465f5046 	.word	0x465f5046
   a474c:	00005152 	.word	0x00005152
   a4750:	5f504744 	.word	0x5f504744
   a4754:	00004e4f 	.word	0x00004e4f
   a4758:	5f504744 	.word	0x5f504744
   a475c:	0046464f 	.word	0x0046464f
   a4760:	5f504744 	.word	0x5f504744
   a4764:	45544152 	.word	0x45544152
   a4768:	00000000 	.word	0x00000000
   a476c:	5f504744 	.word	0x5f504744
   a4770:	00515246 	.word	0x00515246
   a4774:	545f5350 	.word	0x545f5350
   a4778:	00000000 	.word	0x00000000
   a477c:	5f504655 	.word	0x5f504655
   a4780:	0046464f 	.word	0x0046464f
   a4784:	5f504655 	.word	0x5f504655
   a4788:	45544152 	.word	0x45544152
   a478c:	00000000 	.word	0x00000000
   a4790:	5f414c56 	.word	0x5f414c56
   a4794:	504d5550 	.word	0x504d5550
   a4798:	004e4f5f 	.word	0x004e4f5f
   a479c:	5f414c56 	.word	0x5f414c56
   a47a0:	504d5550 	.word	0x504d5550
   a47a4:	46464f5f 	.word	0x46464f5f
   a47a8:	00000000 	.word	0x00000000
   a47ac:	525f5042 	.word	0x525f5042
   a47b0:	00455441 	.word	0x00455441
   a47b4:	4f5f4356 	.word	0x4f5f4356
   a47b8:	00004646 	.word	0x00004646
   a47bc:	4f5f4957 	.word	0x4f5f4957
   a47c0:	0000004e 	.word	0x0000004e
   a47c4:	4f5f4957 	.word	0x4f5f4957
   a47c8:	00004646 	.word	0x00004646
   a47cc:	49415244 	.word	0x49415244
   a47d0:	4e4f5f4e 	.word	0x4e4f5f4e
   a47d4:	00000000 	.word	0x00000000
   a47d8:	49415244 	.word	0x49415244
   a47dc:	464f5f4e 	.word	0x464f5f4e
   a47e0:	00000046 	.word	0x00000046
   a47e4:	504f5f56 	.word	0x504f5f56
   a47e8:	00004e45 	.word	0x00004e45
   a47ec:	4c435f56 	.word	0x4c435f56
   a47f0:	0045534f 	.word	0x0045534f
   a47f4:	4c415f56 	.word	0x4c415f56
   a47f8:	45504f4c 	.word	0x45504f4c
   a47fc:	0000004e 	.word	0x0000004e
   a4800:	4f5f5048 	.word	0x4f5f5048
   a4804:	0000004e 	.word	0x0000004e
   a4808:	4f5f5048 	.word	0x4f5f5048
   a480c:	00004646 	.word	0x00004646
   a4810:	525f5048 	.word	0x525f5048
   a4814:	00455441 	.word	0x00455441
   a4818:	565f4342 	.word	0x565f4342
   a481c:	45532031 	.word	0x45532031
   a4820:	00000054 	.word	0x00000054
   a4824:	565f4342 	.word	0x565f4342
   a4828:	45532032 	.word	0x45532032
   a482c:	00000054 	.word	0x00000054
   a4830:	565f4342 	.word	0x565f4342
   a4834:	33315f31 	.word	0x33315f31
   a4838:	53203431 	.word	0x53203431
   a483c:	00005445 	.word	0x00005445
   a4840:	565f4342 	.word	0x565f4342
   a4844:	33315f32 	.word	0x33315f32
   a4848:	53203431 	.word	0x53203431
   a484c:	00005445 	.word	0x00005445
   a4850:	565f4342 	.word	0x565f4342
   a4854:	20345f31 	.word	0x20345f31
   a4858:	00544553 	.word	0x00544553
   a485c:	565f4342 	.word	0x565f4342
   a4860:	20345f32 	.word	0x20345f32
   a4864:	00544553 	.word	0x00544553
   a4868:	525f4342 	.word	0x525f4342
   a486c:	54455345 	.word	0x54455345
   a4870:	00000000 	.word	0x00000000
   a4874:	465f4342 	.word	0x465f4342
   a4878:	5a454552 	.word	0x5a454552
   a487c:	00000045 	.word	0x00000045
   a4880:	555f4342 	.word	0x555f4342
   a4884:	4552464e 	.word	0x4552464e
   a4888:	00455a45 	.word	0x00455a45
   a488c:	4e45504f 	.word	0x4e45504f
   a4890:	4c4c4946 	.word	0x4c4c4946
   a4894:	00000000 	.word	0x00000000
   a4898:	0052544a 	.word	0x0052544a
   a489c:	4f5f4356 	.word	0x4f5f4356
   a48a0:	0000004e 	.word	0x0000004e
   a48a4:	545f5343 	.word	0x545f5343
   a48a8:	47474952 	.word	0x47474952
   a48ac:	00005245 	.word	0x00005245
   a48b0:	545f5350 	.word	0x545f5350
   a48b4:	47474952 	.word	0x47474952
   a48b8:	00005245 	.word	0x00005245
   a48bc:	3a726556 	.word	0x3a726556
   a48c0:	00342e54 	.word	0x00342e54
   a48c4:	574f4c46 	.word	0x574f4c46
   a48c8:	004e455f 	.word	0x004e455f
   a48cc:	574f4c46 	.word	0x574f4c46
   a48d0:	5349445f 	.word	0x5349445f
   a48d4:	00000000 	.word	0x00000000
   a48d8:	504d4554 	.word	0x504d4554
   a48dc:	49485f31 	.word	0x49485f31
   a48e0:	00004847 	.word	0x00004847
   a48e4:	504d4554 	.word	0x504d4554
   a48e8:	4f4c5f31 	.word	0x4f4c5f31
   a48ec:	00000057 	.word	0x00000057
   a48f0:	504d4554 	.word	0x504d4554
   a48f4:	00000031 	.word	0x00000031
   a48f8:	504d4554 	.word	0x504d4554
   a48fc:	49485f32 	.word	0x49485f32
   a4900:	00004847 	.word	0x00004847
   a4904:	504d4554 	.word	0x504d4554
   a4908:	4f4c5f32 	.word	0x4f4c5f32
   a490c:	00000057 	.word	0x00000057
   a4910:	54534554 	.word	0x54534554
   a4914:	00000000 	.word	0x00000000
   a4918:	504d4554 	.word	0x504d4554
   a491c:	00000032 	.word	0x00000032
   a4920:	504d4554 	.word	0x504d4554
   a4924:	4749485f 	.word	0x4749485f
   a4928:	00000048 	.word	0x00000048
   a492c:	504d4554 	.word	0x504d4554
   a4930:	574f4c5f 	.word	0x574f4c5f
   a4934:	00000000 	.word	0x00000000
   a4938:	504d4554 	.word	0x504d4554
   a493c:	00000033 	.word	0x00000033
   a4940:	5f545041 	.word	0x5f545041
   a4944:	48474948 	.word	0x48474948
   a4948:	00000000 	.word	0x00000000
   a494c:	5f545041 	.word	0x5f545041
   a4950:	3d574f4c 	.word	0x3d574f4c
   a4954:	292d2820 	.word	0x292d2820
   a4958:	00000000 	.word	0x00000000
   a495c:	5f545041 	.word	0x5f545041
   a4960:	00574f4c 	.word	0x00574f4c
   a4964:	5f545056 	.word	0x5f545056
   a4968:	48474948 	.word	0x48474948
   a496c:	00000000 	.word	0x00000000
   a4970:	5f545056 	.word	0x5f545056
   a4974:	3d574f4c 	.word	0x3d574f4c
   a4978:	292d2820 	.word	0x292d2820
   a497c:	00000000 	.word	0x00000000
   a4980:	5f325350 	.word	0x5f325350
   a4984:	00574f4c 	.word	0x00574f4c
   a4988:	444e4f43 	.word	0x444e4f43
   a498c:	4749485f 	.word	0x4749485f
   a4990:	00000048 	.word	0x00000048
   a4994:	444e4f43 	.word	0x444e4f43
   a4998:	574f4c5f 	.word	0x574f4c5f
   a499c:	00000000 	.word	0x00000000
   a49a0:	5f4e4f43 	.word	0x5f4e4f43
   a49a4:	00574f4c 	.word	0x00574f4c
   a49a8:	5f315350 	.word	0x5f315350
   a49ac:	48474948 	.word	0x48474948
   a49b0:	00000000 	.word	0x00000000
   a49b4:	5f315350 	.word	0x5f315350
   a49b8:	3d574f4c 	.word	0x3d574f4c
   a49bc:	292d2820 	.word	0x292d2820
   a49c0:	00000000 	.word	0x00000000
   a49c4:	00325350 	.word	0x00325350
   a49c8:	5f325350 	.word	0x5f325350
   a49cc:	3d574f4c 	.word	0x3d574f4c
   a49d0:	292d2820 	.word	0x292d2820
   a49d4:	00000000 	.word	0x00000000
   a49d8:	00335350 	.word	0x00335350
   a49dc:	5f335350 	.word	0x5f335350
   a49e0:	3d574f4c 	.word	0x3d574f4c
   a49e4:	292d2820 	.word	0x292d2820
   a49e8:	00000000 	.word	0x00000000
   a49ec:	5f335350 	.word	0x5f335350
   a49f0:	00574f4c 	.word	0x00574f4c
   a49f4:	535f5048 	.word	0x535f5048
   a49f8:	54524154 	.word	0x54524154
   a49fc:	0000003d 	.word	0x0000003d
   a4a00:	455f5048 	.word	0x455f5048
   a4a04:	003d444e 	.word	0x003d444e
   a4a08:	3d315350 	.word	0x3d315350
   a4a0c:	00000000 	.word	0x00000000
   a4a10:	3d325350 	.word	0x3d325350
   a4a14:	00000000 	.word	0x00000000
   a4a18:	3d335350 	.word	0x3d335350
   a4a1c:	00000000 	.word	0x00000000
   a4a20:	3d545041 	.word	0x3d545041
   a4a24:	00000000 	.word	0x00000000
   a4a28:	3d545056 	.word	0x3d545056
   a4a2c:	00000000 	.word	0x00000000
   a4a30:	31504d54 	.word	0x31504d54
   a4a34:	0000003d 	.word	0x0000003d
   a4a38:	32504d54 	.word	0x32504d54
   a4a3c:	0000003d 	.word	0x0000003d
   a4a40:	504d4554 	.word	0x504d4554
   a4a44:	00003d31 	.word	0x00003d31
   a4a48:	504d4554 	.word	0x504d4554
   a4a4c:	00003d32 	.word	0x00003d32
   a4a50:	504d4554 	.word	0x504d4554
   a4a54:	00003d33 	.word	0x00003d33
   a4a58:	544e4328 	.word	0x544e4328
   a4a5c:	00000029 	.word	0x00000029

000a4a60 <can_bit_time>:
   a4a60:	02020308 02094b03 43020303 0303030a     .....K.....C....
   a4a70:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   a4a80:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   a4a90:	05050510 06114504 47040505 06060512     .....E.....G....
   a4aa0:	06134304 44040606 06060714 08154604     .C.....D.....F..
   a4ab0:	47040606 07070716 08174404 46040708     ...G.....D.....F
   a4ac0:	08080718 08194304 44040808 00006325     .....C.....D%c..
   a4ad0:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   a4ae0:	74737953 206b6369 666e6f63 72756769     Systick configur
   a4af0:	6f697461 7265206e 0d726f72 00000000     ation error.....

000a4b00 <uart_serial_options>:
   a4b00:	0001c200 00000000 00000800 00000001     ................
   a4b10:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a4b20:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a4b30:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   a4b40:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   a4b50:	4d495250 00003145 00303035 45544e45     PRIME1..500.ENTE
   a4b60:	00000052 45544e45 00315f52 45464153     R...ENTER_1.SAFE
   a4b70:	00000000 4f4f4c42 00000044 41504548     ....BLOOD...HEPA
   a4b80:	004e4952 454e4f44 0050485f 534e4952     RIN.DONE_HP.RINS
   a4b90:	00003245 534e4952 00003345 534e4952     E2..RINSE3..RINS
   a4ba0:	00003445 534e4952 00003145 454e4f44     E4..RINSE1..DONE
   a4bb0:	00000000 52494352 00000043 52494352     ....RCIRC...RCIR
   a4bc0:	54535f43 0000504f 45544e45 00315f52     C_STOP..ENTER_1.
   a4bd0:	45464153 00000000 4d495250 00003145     SAFE....PRIME1..
   a4be0:	00000043                                C...

000a4be4 <_global_impure_ptr>:
   a4be4:	20070c68 0000000a                       h.. ....

000a4bec <_init>:
   a4bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a4bee:	bf00      	nop
   a4bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a4bf2:	bc08      	pop	{r3}
   a4bf4:	469e      	mov	lr, r3
   a4bf6:	4770      	bx	lr

000a4bf8 <__init_array_start>:
   a4bf8:	000a2f79 	.word	0x000a2f79

000a4bfc <__frame_dummy_init_array_entry>:
   a4bfc:	00080119                                ....

000a4c00 <_fini>:
   a4c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a4c02:	bf00      	nop
   a4c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a4c06:	bc08      	pop	{r3}
   a4c08:	469e      	mov	lr, r3
   a4c0a:	4770      	bx	lr

000a4c0c <__fini_array_start>:
   a4c0c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a27      	ldr	r2, [pc, #156]	; (200700b0 <efc_perform_read_sequence+0xb0>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00

200700b4 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b4:	b480      	push	{r7}
200700b6:	b083      	sub	sp, #12
200700b8:	af00      	add	r7, sp, #0
200700ba:	6078      	str	r0, [r7, #4]
200700bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700be:	687b      	ldr	r3, [r7, #4]
200700c0:	683a      	ldr	r2, [r7, #0]
200700c2:	601a      	str	r2, [r3, #0]
}
200700c4:	bf00      	nop
200700c6:	370c      	adds	r7, #12
200700c8:	46bd      	mov	sp, r7
200700ca:	bc80      	pop	{r7}
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop

200700d0 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d0:	b480      	push	{r7}
200700d2:	b085      	sub	sp, #20
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700da:	687b      	ldr	r3, [r7, #4]
200700dc:	683a      	ldr	r2, [r7, #0]
200700de:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e0:	687b      	ldr	r3, [r7, #4]
200700e2:	689b      	ldr	r3, [r3, #8]
200700e4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700e6:	68fb      	ldr	r3, [r7, #12]
200700e8:	f003 0301 	and.w	r3, r3, #1
200700ec:	2b00      	cmp	r3, #0
200700ee:	d0f7      	beq.n	200700e0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f0:	68fb      	ldr	r3, [r7, #12]
200700f2:	f003 0306 	and.w	r3, r3, #6
}
200700f6:	4618      	mov	r0, r3
200700f8:	3714      	adds	r7, #20
200700fa:	46bd      	mov	sp, r7
200700fc:	bc80      	pop	{r7}
200700fe:	4770      	bx	lr

20070100 <levelswitchprevstatus>:
20070100:	0001                                        ..

20070102 <ps3_threshold>:
20070102:	1000                                        ..

20070104 <cl_flowpathtable>:
20070104:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

2007011c <apt2>:
2007011c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007012c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007013c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007014c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007015c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007016c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
2007017c:	0168 12e1 01a4 1630                         h.....0.

20070184 <vpt2>:
20070184:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
20070194:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
200701a4:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
200701b4:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
200701c4:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
200701d4:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200701e4:	0168 12e1 01a4 1630                         h.....0.

200701ec <ps_1_2>:
200701ec:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200701fc:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
2007020c:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
2007021c:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
2007022c:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
2007023c:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007024c:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070258 <ps_2_2>:
20070258:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
20070268:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
20070278:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
20070288:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
20070298:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200702a8:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200702b8:	02ee 1612 0320 1900 0000 0000               .... .......

200702c4 <ps_3_2>:
200702c4:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200702d4:	ff38 df0d ff6a e172 ff9c e563 ffce e769     8...j.r...c...i.
200702e4:	0000 eb06 0032 ed32 0064 f08a 0096 f3fb     ....2.2.d.......
200702f4:	00c8 f6ce 00fa f941 012c fc1b 015e ff10     ......A.,...^...
20070304:	0190 026c 01c2 053f 01da 06a4 01f4 0708     ..l...?.........
20070314:	0226 0ab7 0258 0e10 028a 1004 02bc 13ec     &...X...........
20070324:	02ee 1676 0320 1964 0352 1c6d 0384 1f40     ..v. .d.R.m...@.
20070334:	03b6 2260 03e8 25e4 041a 29cc 044c 2db4     ..`"...%...)L..-
20070344:	047e 3200 04b0 36b0 04e2 3b60 0514 4074     ~..2...6..`;..t@
20070354:	0546 4588 0578 4b00 05aa 50dc 05dc 571c     F..Ex..K...P...W

20070364 <Cl_DlsisAlarmTable>:
20070364:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
20070374:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
20070384:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070394:	1500 0001 0000 0000 0116 0000 0000 1700     ................
200703a4:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
200703b4:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
200703c4:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
200703d4:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
200703e4:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
200703f4:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070404:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070414:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070438 <heater_duty>:
20070438:	0555 0000                                   U...

2007043c <prescribed_temp>:
2007043c:	0000 4214                                   ...B

20070440 <wait_4_TS2Stability>:
20070440:	00b4                                        ..

20070442 <wait_4_stability>:
20070442:	00f0                                        ..

20070444 <Prescribed_T2>:
20070444:	0000 4214                                   ...B

20070448 <Prescribed_T3>:
20070448:	0000 4214                                   ...B

2007044c <gram_test_buffer.9533>:
2007044c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007045c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007046c:	aaaa 0000 0000 0000                         ........

20070474 <Cl_MacState>:
20070474:	0101                                             .

20070475 <ConsoleSync>:
20070475:	0001 0000                                        ...

20070478 <array>:
	...
20070480:	01d4 0000 0001 0000 01d4 0000 01d4 0000     ................
20070490:	0002 0000 03a8 0000 01d4 0000 0003 0000     ................
200704a0:	057c 0000 0094 0000 0004 0000 0610 0000     |...............
200704b0:	0094 0000 0005 0000 06a4 0000 0094 0000     ................
200704c0:	0006 0000 0738 0000 0038 0000 0007 0000     ....8...8.......
200704d0:	0770 0000 0038 0000 0008 0000 07a8 0000     p...8...........
200704e0:	005c 0000 0009 0000 0804 0000 002c 0000     \...........,...
200704f0:	000a 0000 0830 0000 0014 0000               ....0.......

200704fc <cond_pot_val_2volts.9562>:
200704fc:	02cc 0000                                   ....

20070500 <res_temp>:
20070500:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
20070510:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
20070520:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
20070530:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
20070540:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
20070550:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
20070560:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
20070570:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
20070580:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
20070590:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
200705a0:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
200705b0:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
200705c0:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
200705d0:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
200705e0:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
200705f0:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
20070600:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
20070610:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
20070620:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
20070630:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
20070640:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
20070650:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
20070660:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
20070670:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
20070680:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
20070690:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
200706a0:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
200706b0:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
200706c0:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
200706d0:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
200706e0:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
200706f0:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
20070700:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
20070710:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
20070720:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
20070730:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
20070740:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

200709b0 <TEST_STUB_ENABLEGATE>:
200709b0:	0101                                             .

200709b1 <prev_gate_status>:
200709b1:	0101                                             .

200709b2 <Current_sense_trigger>:
200709b2:	0001                                        ..

200709b4 <pwm_period>:
200709b4:	00c8 0000                                   ....

200709b8 <bp_rotataion_marker>:
200709b8:	0001                                        ..

200709ba <prev_bp_rotataion_marker>:
200709ba:	0001                                        ..

200709bc <cl_hep_deliveryrate>:
200709bc:	0064 0000                                   d...

200709c0 <hep_rotataion_marker>:
200709c0:	0001                                        ..

200709c2 <prev_hep_rotataion_marker>:
200709c2:	0001                                        ..

200709c4 <uf_rotataion_marker>:
200709c4:	0001                                        ..

200709c6 <prev_uf_rotataion_marker>:
200709c6:	0001                                        ..

200709c8 <opt>:
200709c8:	0000 0000 86a0 0001 002c 0000               ........,...

200709d4 <nvmarray>:
	...
200709dc:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
200709ec:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070a28 <SystemCoreClock>:
20070a28:	0900 003d                                   ..=.

20070a2c <Cl_ConsoleState>:
20070a2c:	0101                                             .

20070a2d <g_b_led0_active>:
20070a2d:	0101                                             .

20070a2e <Cl_disinfOpenFillTimeOut>:
20070a2e:	0001                                        ..

20070a30 <Cl_DisinfAlarmTable>:
20070a30:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070a40:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070a50:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070a60:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070a70:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070a80:	0000 0000                                   ....

20070a84 <Cl_DprepAlarmTable>:
20070a84:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070a94:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070aa4:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070ab4:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070ac4:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070ad4:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070ae4:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
20070af4:	0122 0000 0000 2400 0001 0000 0000 0126     "......$......&.
20070b04:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070b14:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070b24:	2700 0001 0000 0000 0128 0000 0000 0f00     .'......(.......
20070b34:	0001 0000 0000 0110 0000 0000 1100 0001     ................
20070b44:	0000 0000 0112 0000 0000 1300 0001 0000     ................
20070b54:	0000 0114 0000 0000 3c00 0001 0000 0000     .........<......
	...

20070b74 <Cl_RinseAlarmTable>:
20070b74:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070b84:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070b94:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070ba4:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070bb4:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070bc4:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070bd4:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070be4:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070bf4:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070c04:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070c14:	010c 0000 0000 0000 010d 0000 0000 0000     ................
20070c24:	010e 0000 0000 0000 023c 0000 0000 0000     ........<.......
20070c34:	0238 0000 0000 0000                         8.......

20070c3c <Cl_StandbyAlarmTable>:
20070c3c:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070c4c:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070c5c:	0000 0000                                   ....

20070c60 <cl_stbystate>:
20070c60:	0001 0000 0000 0000                         ........

20070c68 <impure_data>:
20070c68:	0000 0000 0f54 2007 0fbc 2007 1024 2007     ....T.. ... $.. 
	...
20070c9c:	4be0 000a 0000 0000 0000 0000 0000 0000     .K..............
	...
20070d10:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070d20:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20071090 <_impure_ptr>:
20071090:	0c68 2007                                   h.. 

20071094 <__malloc_av_>:
	...
2007109c:	1094 2007 1094 2007 109c 2007 109c 2007     ... ... ... ... 
200710ac:	10a4 2007 10a4 2007 10ac 2007 10ac 2007     ... ... ... ... 
200710bc:	10b4 2007 10b4 2007 10bc 2007 10bc 2007     ... ... ... ... 
200710cc:	10c4 2007 10c4 2007 10cc 2007 10cc 2007     ... ... ... ... 
200710dc:	10d4 2007 10d4 2007 10dc 2007 10dc 2007     ... ... ... ... 
200710ec:	10e4 2007 10e4 2007 10ec 2007 10ec 2007     ... ... ... ... 
200710fc:	10f4 2007 10f4 2007 10fc 2007 10fc 2007     ... ... ... ... 
2007110c:	1104 2007 1104 2007 110c 2007 110c 2007     ... ... ... ... 
2007111c:	1114 2007 1114 2007 111c 2007 111c 2007     ... ... ... ... 
2007112c:	1124 2007 1124 2007 112c 2007 112c 2007     $.. $.. ,.. ,.. 
2007113c:	1134 2007 1134 2007 113c 2007 113c 2007     4.. 4.. <.. <.. 
2007114c:	1144 2007 1144 2007 114c 2007 114c 2007     D.. D.. L.. L.. 
2007115c:	1154 2007 1154 2007 115c 2007 115c 2007     T.. T.. \.. \.. 
2007116c:	1164 2007 1164 2007 116c 2007 116c 2007     d.. d.. l.. l.. 
2007117c:	1174 2007 1174 2007 117c 2007 117c 2007     t.. t.. |.. |.. 
2007118c:	1184 2007 1184 2007 118c 2007 118c 2007     ... ... ... ... 
2007119c:	1194 2007 1194 2007 119c 2007 119c 2007     ... ... ... ... 
200711ac:	11a4 2007 11a4 2007 11ac 2007 11ac 2007     ... ... ... ... 
200711bc:	11b4 2007 11b4 2007 11bc 2007 11bc 2007     ... ... ... ... 
200711cc:	11c4 2007 11c4 2007 11cc 2007 11cc 2007     ... ... ... ... 
200711dc:	11d4 2007 11d4 2007 11dc 2007 11dc 2007     ... ... ... ... 
200711ec:	11e4 2007 11e4 2007 11ec 2007 11ec 2007     ... ... ... ... 
200711fc:	11f4 2007 11f4 2007 11fc 2007 11fc 2007     ... ... ... ... 
2007120c:	1204 2007 1204 2007 120c 2007 120c 2007     ... ... ... ... 
2007121c:	1214 2007 1214 2007 121c 2007 121c 2007     ... ... ... ... 
2007122c:	1224 2007 1224 2007 122c 2007 122c 2007     $.. $.. ,.. ,.. 
2007123c:	1234 2007 1234 2007 123c 2007 123c 2007     4.. 4.. <.. <.. 
2007124c:	1244 2007 1244 2007 124c 2007 124c 2007     D.. D.. L.. L.. 
2007125c:	1254 2007 1254 2007 125c 2007 125c 2007     T.. T.. \.. \.. 
2007126c:	1264 2007 1264 2007 126c 2007 126c 2007     d.. d.. l.. l.. 
2007127c:	1274 2007 1274 2007 127c 2007 127c 2007     t.. t.. |.. |.. 
2007128c:	1284 2007 1284 2007 128c 2007 128c 2007     ... ... ... ... 
2007129c:	1294 2007 1294 2007 129c 2007 129c 2007     ... ... ... ... 
200712ac:	12a4 2007 12a4 2007 12ac 2007 12ac 2007     ... ... ... ... 
200712bc:	12b4 2007 12b4 2007 12bc 2007 12bc 2007     ... ... ... ... 
200712cc:	12c4 2007 12c4 2007 12cc 2007 12cc 2007     ... ... ... ... 
200712dc:	12d4 2007 12d4 2007 12dc 2007 12dc 2007     ... ... ... ... 
200712ec:	12e4 2007 12e4 2007 12ec 2007 12ec 2007     ... ... ... ... 
200712fc:	12f4 2007 12f4 2007 12fc 2007 12fc 2007     ... ... ... ... 
2007130c:	1304 2007 1304 2007 130c 2007 130c 2007     ... ... ... ... 
2007131c:	1314 2007 1314 2007 131c 2007 131c 2007     ... ... ... ... 
2007132c:	1324 2007 1324 2007 132c 2007 132c 2007     $.. $.. ,.. ,.. 
2007133c:	1334 2007 1334 2007 133c 2007 133c 2007     4.. 4.. <.. <.. 
2007134c:	1344 2007 1344 2007 134c 2007 134c 2007     D.. D.. L.. L.. 
2007135c:	1354 2007 1354 2007 135c 2007 135c 2007     T.. T.. \.. \.. 
2007136c:	1364 2007 1364 2007 136c 2007 136c 2007     d.. d.. l.. l.. 
2007137c:	1374 2007 1374 2007 137c 2007 137c 2007     t.. t.. |.. |.. 
2007138c:	1384 2007 1384 2007 138c 2007 138c 2007     ... ... ... ... 
2007139c:	1394 2007 1394 2007 139c 2007 139c 2007     ... ... ... ... 
200713ac:	13a4 2007 13a4 2007 13ac 2007 13ac 2007     ... ... ... ... 
200713bc:	13b4 2007 13b4 2007 13bc 2007 13bc 2007     ... ... ... ... 
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 

2007149c <__malloc_trim_threshold>:
2007149c:	0000 0002                                   ....

200714a0 <__malloc_sbrk_base>:
200714a0:	ffff ffff                                   ....
