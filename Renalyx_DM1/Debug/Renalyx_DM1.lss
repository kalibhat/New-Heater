
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000259a0  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000014dc  20070000  000a59a0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001e78  200714dc  000a6e7c  000414dc  2**2
                  ALLOC
  3 .stack        00002004  20073354  000a8cf4  000414dc  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000414dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00041505  2**0
                  CONTENTS, READONLY
  6 .debug_info   00056f63  00000000  00000000  0004155e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a346  00000000  00000000  000984c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010da5  00000000  00000000  000a2807  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002270  00000000  00000000  000b35ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e30  00000000  00000000  000b581c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003535f  00000000  00000000  000b764c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005d34d  00000000  00000000  000ec9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000746b9  00000000  00000000  00149cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008aa8  00000000  00000000  001be3b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20075358 	.word	0x20075358
   80004:	00098b39 	.word	0x00098b39
   80008:	00098b31 	.word	0x00098b31
   8000c:	00098b31 	.word	0x00098b31
   80010:	00098b31 	.word	0x00098b31
   80014:	00098b31 	.word	0x00098b31
   80018:	00098b31 	.word	0x00098b31
	...
   8002c:	00098b31 	.word	0x00098b31
   80030:	00098b31 	.word	0x00098b31
   80034:	00000000 	.word	0x00000000
   80038:	00098b31 	.word	0x00098b31
   8003c:	00094b45 	.word	0x00094b45
   80040:	00098b31 	.word	0x00098b31
   80044:	00098b31 	.word	0x00098b31
   80048:	00098b31 	.word	0x00098b31
   8004c:	00098b31 	.word	0x00098b31
   80050:	00098b31 	.word	0x00098b31
   80054:	00098b31 	.word	0x00098b31
   80058:	00098b31 	.word	0x00098b31
   8005c:	00098b31 	.word	0x00098b31
   80060:	00094a8d 	.word	0x00094a8d
   80064:	00098b31 	.word	0x00098b31
   80068:	00000000 	.word	0x00000000
   8006c:	00098371 	.word	0x00098371
   80070:	00098389 	.word	0x00098389
   80074:	000983a1 	.word	0x000983a1
   80078:	000983b9 	.word	0x000983b9
	...
   80084:	00098b31 	.word	0x00098b31
   80088:	00098b31 	.word	0x00098b31
   8008c:	00098b31 	.word	0x00098b31
   80090:	00098b31 	.word	0x00098b31
   80094:	00098b31 	.word	0x00098b31
   80098:	00098b31 	.word	0x00098b31
   8009c:	00098b31 	.word	0x00098b31
   800a0:	00098b31 	.word	0x00098b31
   800a4:	00000000 	.word	0x00000000
   800a8:	00098b31 	.word	0x00098b31
   800ac:	00094ac9 	.word	0x00094ac9
   800b0:	000999d1 	.word	0x000999d1
   800b4:	00098b31 	.word	0x00098b31
   800b8:	00094b21 	.word	0x00094b21
   800bc:	00098b31 	.word	0x00098b31
   800c0:	00098b31 	.word	0x00098b31
   800c4:	00094afd 	.word	0x00094afd
   800c8:	00098b31 	.word	0x00098b31
   800cc:	00098b31 	.word	0x00098b31
   800d0:	00098b31 	.word	0x00098b31
   800d4:	00098b31 	.word	0x00098b31
   800d8:	00098b31 	.word	0x00098b31
   800dc:	00098b31 	.word	0x00098b31
   800e0:	00098b31 	.word	0x00098b31
   800e4:	00098b31 	.word	0x00098b31
   800e8:	00098b31 	.word	0x00098b31
   800ec:	00093cc9 	.word	0x00093cc9
   800f0:	00098b31 	.word	0x00098b31

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714dc 	.word	0x200714dc
   80110:	00000000 	.word	0x00000000
   80114:	000a59a0 	.word	0x000a59a0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200714e0 	.word	0x200714e0
   80144:	000a59a0 	.word	0x000a59a0
   80148:	000a59a0 	.word	0x000a59a0
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d831      	bhi.n	801c2 <osc_enable+0x72>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b11      	ldr	r3, [pc, #68]	; (801cc <osc_enable+0x7c>)
   80188:	4798      	blx	r3
		break;
   8018a:	e01a      	b.n	801c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0f      	ldr	r3, [pc, #60]	; (801cc <osc_enable+0x7c>)
   80190:	4798      	blx	r3
		break;
   80192:	e016      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0e      	ldr	r3, [pc, #56]	; (801d0 <osc_enable+0x80>)
   80198:	4798      	blx	r3
		break;
   8019a:	e012      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <osc_enable+0x80>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00e      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b0a      	ldr	r3, [pc, #40]	; (801d0 <osc_enable+0x80>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e00a      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	213e      	movs	r1, #62	; 0x3e
   801ae:	2000      	movs	r0, #0
   801b0:	4b08      	ldr	r3, [pc, #32]	; (801d4 <osc_enable+0x84>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e005      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	213e      	movs	r1, #62	; 0x3e
   801b8:	2001      	movs	r0, #1
   801ba:	4b06      	ldr	r3, [pc, #24]	; (801d4 <osc_enable+0x84>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	e000      	b.n	801c2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   801c0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   801c2:	bf00      	nop
   801c4:	3708      	adds	r7, #8
   801c6:	46bd      	mov	sp, r7
   801c8:	bd80      	pop	{r7, pc}
   801ca:	bf00      	nop
   801cc:	00098451 	.word	0x00098451
   801d0:	000984bd 	.word	0x000984bd
   801d4:	0009855d 	.word	0x0009855d

000801d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d826      	bhi.n	80234 <osc_is_ready+0x5c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_is_ready+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	0008020d 	.word	0x0008020d
   801f0:	00080211 	.word	0x00080211
   801f4:	00080211 	.word	0x00080211
   801f8:	00080223 	.word	0x00080223
   801fc:	00080223 	.word	0x00080223
   80200:	00080223 	.word	0x00080223
   80204:	00080223 	.word	0x00080223
   80208:	00080223 	.word	0x00080223
	case OSC_SLCK_32K_RC:
		return 1;
   8020c:	2301      	movs	r3, #1
   8020e:	e012      	b.n	80236 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80210:	4b0b      	ldr	r3, [pc, #44]	; (80240 <osc_is_ready+0x68>)
   80212:	4798      	blx	r3
   80214:	4603      	mov	r3, r0
   80216:	2b00      	cmp	r3, #0
   80218:	bf14      	ite	ne
   8021a:	2301      	movne	r3, #1
   8021c:	2300      	moveq	r3, #0
   8021e:	b2db      	uxtb	r3, r3
   80220:	e009      	b.n	80236 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80222:	4b08      	ldr	r3, [pc, #32]	; (80244 <osc_is_ready+0x6c>)
   80224:	4798      	blx	r3
   80226:	4603      	mov	r3, r0
   80228:	2b00      	cmp	r3, #0
   8022a:	bf14      	ite	ne
   8022c:	2301      	movne	r3, #1
   8022e:	2300      	moveq	r3, #0
   80230:	b2db      	uxtb	r3, r3
   80232:	e000      	b.n	80236 <osc_is_ready+0x5e>
	}

	return 0;
   80234:	2300      	movs	r3, #0
}
   80236:	4618      	mov	r0, r3
   80238:	3708      	adds	r7, #8
   8023a:	46bd      	mov	sp, r7
   8023c:	bd80      	pop	{r7, pc}
   8023e:	bf00      	nop
   80240:	00098489 	.word	0x00098489
   80244:	000985d5 	.word	0x000985d5

00080248 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	2b07      	cmp	r3, #7
   80254:	d825      	bhi.n	802a2 <osc_get_rate+0x5a>
   80256:	a201      	add	r2, pc, #4	; (adr r2, 8025c <osc_get_rate+0x14>)
   80258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8025c:	0008027d 	.word	0x0008027d
   80260:	00080283 	.word	0x00080283
   80264:	00080289 	.word	0x00080289
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
   80278:	0008029f 	.word	0x0008029f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80280:	e010      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80286:	e00d      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8028c:	e00a      	b.n	802a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x68>)
   80290:	e008      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x6c>)
   80294:	e006      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80296:	4b08      	ldr	r3, [pc, #32]	; (802b8 <osc_get_rate+0x70>)
   80298:	e004      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <osc_get_rate+0x70>)
   8029c:	e002      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029e:	4b06      	ldr	r3, [pc, #24]	; (802b8 <osc_get_rate+0x70>)
   802a0:	e000      	b.n	802a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   802a2:	2300      	movs	r3, #0
}
   802a4:	4618      	mov	r0, r3
   802a6:	370c      	adds	r7, #12
   802a8:	46bd      	mov	sp, r7
   802aa:	bc80      	pop	{r7}
   802ac:	4770      	bx	lr
   802ae:	bf00      	nop
   802b0:	003d0900 	.word	0x003d0900
   802b4:	007a1200 	.word	0x007a1200
   802b8:	00b71b00 	.word	0x00b71b00

000802bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802bc:	b580      	push	{r7, lr}
   802be:	b082      	sub	sp, #8
   802c0:	af00      	add	r7, sp, #0
   802c2:	4603      	mov	r3, r0
   802c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c6:	bf00      	nop
   802c8:	79fb      	ldrb	r3, [r7, #7]
   802ca:	4618      	mov	r0, r3
   802cc:	4b05      	ldr	r3, [pc, #20]	; (802e4 <osc_wait_ready+0x28>)
   802ce:	4798      	blx	r3
   802d0:	4603      	mov	r3, r0
   802d2:	f083 0301 	eor.w	r3, r3, #1
   802d6:	b2db      	uxtb	r3, r3
   802d8:	2b00      	cmp	r3, #0
   802da:	d1f5      	bne.n	802c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802dc:	bf00      	nop
   802de:	3708      	adds	r7, #8
   802e0:	46bd      	mov	sp, r7
   802e2:	bd80      	pop	{r7, pc}
   802e4:	000801d9 	.word	0x000801d9

000802e8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b086      	sub	sp, #24
   802ec:	af00      	add	r7, sp, #0
   802ee:	60f8      	str	r0, [r7, #12]
   802f0:	607a      	str	r2, [r7, #4]
   802f2:	603b      	str	r3, [r7, #0]
   802f4:	460b      	mov	r3, r1
   802f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f8:	687b      	ldr	r3, [r7, #4]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d107      	bne.n	8030e <pll_config_init+0x26>
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	2b00      	cmp	r3, #0
   80302:	d104      	bne.n	8030e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80304:	68fb      	ldr	r3, [r7, #12]
   80306:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8030a:	601a      	str	r2, [r3, #0]
   8030c:	e019      	b.n	80342 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030e:	7afb      	ldrb	r3, [r7, #11]
   80310:	4618      	mov	r0, r3
   80312:	4b0e      	ldr	r3, [pc, #56]	; (8034c <pll_config_init+0x64>)
   80314:	4798      	blx	r3
   80316:	4602      	mov	r2, r0
   80318:	687b      	ldr	r3, [r7, #4]
   8031a:	fbb2 f3f3 	udiv	r3, r2, r3
   8031e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80320:	697b      	ldr	r3, [r7, #20]
   80322:	683a      	ldr	r2, [r7, #0]
   80324:	fb02 f303 	mul.w	r3, r2, r3
   80328:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	3b01      	subs	r3, #1
   8032e:	041a      	lsls	r2, r3, #16
   80330:	4b07      	ldr	r3, [pc, #28]	; (80350 <pll_config_init+0x68>)
   80332:	4013      	ands	r3, r2
   80334:	687a      	ldr	r2, [r7, #4]
   80336:	b2d2      	uxtb	r2, r2
   80338:	4313      	orrs	r3, r2
   8033a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033e:	68fb      	ldr	r3, [r7, #12]
   80340:	601a      	str	r2, [r3, #0]
	}
}
   80342:	bf00      	nop
   80344:	3718      	adds	r7, #24
   80346:	46bd      	mov	sp, r7
   80348:	bd80      	pop	{r7, pc}
   8034a:	bf00      	nop
   8034c:	00080249 	.word	0x00080249
   80350:	07ff0000 	.word	0x07ff0000

00080354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80354:	b580      	push	{r7, lr}
   80356:	b082      	sub	sp, #8
   80358:	af00      	add	r7, sp, #0
   8035a:	6078      	str	r0, [r7, #4]
   8035c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	2b00      	cmp	r3, #0
   80362:	d108      	bne.n	80376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <pll_enable+0x38>)
   80366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80368:	4a09      	ldr	r2, [pc, #36]	; (80390 <pll_enable+0x3c>)
   8036a:	687b      	ldr	r3, [r7, #4]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80374:	e005      	b.n	80382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80376:	4a06      	ldr	r2, [pc, #24]	; (80390 <pll_enable+0x3c>)
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	681b      	ldr	r3, [r3, #0]
   8037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80380:	61d3      	str	r3, [r2, #28]
	}
}
   80382:	bf00      	nop
   80384:	3708      	adds	r7, #8
   80386:	46bd      	mov	sp, r7
   80388:	bd80      	pop	{r7, pc}
   8038a:	bf00      	nop
   8038c:	000985ed 	.word	0x000985ed
   80390:	400e0600 	.word	0x400e0600

00080394 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
   8039a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b00      	cmp	r3, #0
   803a0:	d103      	bne.n	803aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <pll_is_locked+0x24>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	e002      	b.n	803b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <pll_is_locked+0x28>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
	}
}
   803b0:	4618      	mov	r0, r3
   803b2:	3708      	adds	r7, #8
   803b4:	46bd      	mov	sp, r7
   803b6:	bd80      	pop	{r7, pc}
   803b8:	00098605 	.word	0x00098605
   803bc:	0009861d 	.word	0x0009861d

000803c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803c0:	b580      	push	{r7, lr}
   803c2:	b082      	sub	sp, #8
   803c4:	af00      	add	r7, sp, #0
   803c6:	4603      	mov	r3, r0
   803c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ca:	79fb      	ldrb	r3, [r7, #7]
   803cc:	3b03      	subs	r3, #3
   803ce:	2b04      	cmp	r3, #4
   803d0:	d808      	bhi.n	803e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803d2:	79fb      	ldrb	r3, [r7, #7]
   803d4:	4618      	mov	r0, r3
   803d6:	4b06      	ldr	r3, [pc, #24]	; (803f0 <pll_enable_source+0x30>)
   803d8:	4798      	blx	r3
		osc_wait_ready(e_src);
   803da:	79fb      	ldrb	r3, [r7, #7]
   803dc:	4618      	mov	r0, r3
   803de:	4b05      	ldr	r3, [pc, #20]	; (803f4 <pll_enable_source+0x34>)
   803e0:	4798      	blx	r3
		break;
   803e2:	e000      	b.n	803e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803e4:	bf00      	nop
	}
}
   803e6:	bf00      	nop
   803e8:	3708      	adds	r7, #8
   803ea:	46bd      	mov	sp, r7
   803ec:	bd80      	pop	{r7, pc}
   803ee:	bf00      	nop
   803f0:	00080151 	.word	0x00080151
   803f4:	000802bd 	.word	0x000802bd

000803f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803f8:	b580      	push	{r7, lr}
   803fa:	b082      	sub	sp, #8
   803fc:	af00      	add	r7, sp, #0
   803fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80400:	bf00      	nop
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b04      	ldr	r3, [pc, #16]	; (80418 <pll_wait_for_lock+0x20>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d0f9      	beq.n	80402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8040e:	2300      	movs	r3, #0
}
   80410:	4618      	mov	r0, r3
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00080395 	.word	0x00080395

0008041c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80420:	2006      	movs	r0, #6
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <sysclk_get_main_hz+0x18>)
   80424:	4798      	blx	r3
   80426:	4602      	mov	r2, r0
   80428:	4613      	mov	r3, r2
   8042a:	00db      	lsls	r3, r3, #3
   8042c:	1a9b      	subs	r3, r3, r2
   8042e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80430:	4618      	mov	r0, r3
   80432:	bd80      	pop	{r7, pc}
   80434:	00080249 	.word	0x00080249

00080438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80438:	b580      	push	{r7, lr}
   8043a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8043c:	4b02      	ldr	r3, [pc, #8]	; (80448 <sysclk_get_cpu_hz+0x10>)
   8043e:	4798      	blx	r3
   80440:	4603      	mov	r3, r0
   80442:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80444:	4618      	mov	r0, r3
   80446:	bd80      	pop	{r7, pc}
   80448:	0008041d 	.word	0x0008041d

0008044c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8044c:	b590      	push	{r4, r7, lr}
   8044e:	b083      	sub	sp, #12
   80450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <sysclk_init+0x48>)
   80454:	4798      	blx	r3
   80456:	4603      	mov	r3, r0
   80458:	4618      	mov	r0, r3
   8045a:	4b0f      	ldr	r3, [pc, #60]	; (80498 <sysclk_init+0x4c>)
   8045c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8045e:	2006      	movs	r0, #6
   80460:	4b0e      	ldr	r3, [pc, #56]	; (8049c <sysclk_init+0x50>)
   80462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80464:	1d38      	adds	r0, r7, #4
   80466:	230e      	movs	r3, #14
   80468:	2201      	movs	r2, #1
   8046a:	2106      	movs	r1, #6
   8046c:	4c0c      	ldr	r4, [pc, #48]	; (804a0 <sysclk_init+0x54>)
   8046e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80470:	1d3b      	adds	r3, r7, #4
   80472:	2100      	movs	r1, #0
   80474:	4618      	mov	r0, r3
   80476:	4b0b      	ldr	r3, [pc, #44]	; (804a4 <sysclk_init+0x58>)
   80478:	4798      	blx	r3
		pll_wait_for_lock(0);
   8047a:	2000      	movs	r0, #0
   8047c:	4b0a      	ldr	r3, [pc, #40]	; (804a8 <sysclk_init+0x5c>)
   8047e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80480:	2010      	movs	r0, #16
   80482:	4b0a      	ldr	r3, [pc, #40]	; (804ac <sysclk_init+0x60>)
   80484:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80486:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <sysclk_init+0x64>)
   80488:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bd90      	pop	{r4, r7, pc}
   80492:	bf00      	nop
   80494:	00080439 	.word	0x00080439
   80498:	00098d65 	.word	0x00098d65
   8049c:	000803c1 	.word	0x000803c1
   804a0:	000802e9 	.word	0x000802e9
   804a4:	00080355 	.word	0x00080355
   804a8:	000803f9 	.word	0x000803f9
   804ac:	000983d1 	.word	0x000983d1
   804b0:	00098be1 	.word	0x00098be1

000804b4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804b4:	b580      	push	{r7, lr}
   804b6:	b084      	sub	sp, #16
   804b8:	af00      	add	r7, sp, #0
   804ba:	60f8      	str	r0, [r7, #12]
   804bc:	60b9      	str	r1, [r7, #8]
   804be:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	021b      	lsls	r3, r3, #8
   804c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804c8:	68bb      	ldr	r3, [r7, #8]
   804ca:	4313      	orrs	r3, r2
   804cc:	4619      	mov	r1, r3
   804ce:	68f8      	ldr	r0, [r7, #12]
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <efc_init+0x2c>)
   804d2:	4798      	blx	r3
	return EFC_RC_OK;
   804d4:	2300      	movs	r3, #0
}
   804d6:	4618      	mov	r0, r3
   804d8:	3710      	adds	r7, #16
   804da:	46bd      	mov	sp, r7
   804dc:	bd80      	pop	{r7, pc}
   804de:	bf00      	nop
   804e0:	200700b5 	.word	0x200700b5

000804e4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804ee:	687b      	ldr	r3, [r7, #4]
   804f0:	681b      	ldr	r3, [r3, #0]
   804f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804f6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804f8:	683b      	ldr	r3, [r7, #0]
   804fa:	021b      	lsls	r3, r3, #8
   804fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	4313      	orrs	r3, r2
   80504:	4619      	mov	r1, r3
   80506:	6878      	ldr	r0, [r7, #4]
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <efc_set_wait_state+0x30>)
   8050a:	4798      	blx	r3
}
   8050c:	bf00      	nop
   8050e:	3710      	adds	r7, #16
   80510:	46bd      	mov	sp, r7
   80512:	bd80      	pop	{r7, pc}
   80514:	200700b5 	.word	0x200700b5

00080518 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	681b      	ldr	r3, [r3, #0]
   80524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80528:	0a1b      	lsrs	r3, r3, #8
}
   8052a:	4618      	mov	r0, r3
   8052c:	370c      	adds	r7, #12
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80534:	b580      	push	{r7, lr}
   80536:	b086      	sub	sp, #24
   80538:	af00      	add	r7, sp, #0
   8053a:	60f8      	str	r0, [r7, #12]
   8053c:	60b9      	str	r1, [r7, #8]
   8053e:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80540:	68bb      	ldr	r3, [r7, #8]
   80542:	2b0e      	cmp	r3, #14
   80544:	d002      	beq.n	8054c <efc_perform_command+0x18>
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	2b0f      	cmp	r3, #15
   8054a:	d102      	bne.n	80552 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8054c:	f04f 33ff 	mov.w	r3, #4294967295
   80550:	e020      	b.n	80594 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <efc_perform_command+0x68>)
   80556:	4293      	cmp	r3, r2
   80558:	bf14      	ite	ne
   8055a:	2301      	movne	r3, #1
   8055c:	2300      	moveq	r3, #0
   8055e:	b2db      	uxtb	r3, r3
   80560:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80562:	4b0f      	ldr	r3, [pc, #60]	; (805a0 <efc_perform_command+0x6c>)
   80564:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   80566:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <efc_perform_command+0x70>)
   8056a:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <efc_perform_command+0x70>)
   8056e:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80570:	687b      	ldr	r3, [r7, #4]
   80572:	021b      	lsls	r3, r3, #8
   80574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80578:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8057c:	68b9      	ldr	r1, [r7, #8]
   8057e:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80580:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80582:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   80586:	4619      	mov	r1, r3
   80588:	6978      	ldr	r0, [r7, #20]
   8058a:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	689b      	ldr	r3, [r3, #8]
   80590:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80594:	4618      	mov	r0, r3
   80596:	3718      	adds	r7, #24
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	00100008 	.word	0x00100008
   805a4:	200714f8 	.word	0x200714f8

000805a8 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   805a8:	b480      	push	{r7}
   805aa:	b083      	sub	sp, #12
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	68db      	ldr	r3, [r3, #12]
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805c0:	b580      	push	{r7, lr}
   805c2:	b082      	sub	sp, #8
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805c8:	6878      	ldr	r0, [r7, #4]
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <sysclk_enable_peripheral_clock+0x18>)
   805cc:	4798      	blx	r3
}
   805ce:	bf00      	nop
   805d0:	3708      	adds	r7, #8
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	00098635 	.word	0x00098635

000805dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b082      	sub	sp, #8
   805e0:	af00      	add	r7, sp, #0
   805e2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <spi_enable_clock+0x20>)
   805e8:	4293      	cmp	r3, r2
   805ea:	d102      	bne.n	805f2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805ec:	2018      	movs	r0, #24
   805ee:	4b04      	ldr	r3, [pc, #16]	; (80600 <spi_enable_clock+0x24>)
   805f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805f2:	bf00      	nop
   805f4:	3708      	adds	r7, #8
   805f6:	46bd      	mov	sp, r7
   805f8:	bd80      	pop	{r7, pc}
   805fa:	bf00      	nop
   805fc:	40008000 	.word	0x40008000
   80600:	000805c1 	.word	0x000805c1

00080604 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	2208      	movs	r2, #8
   80610:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2220      	movs	r2, #32
   80616:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
}
   8061e:	bf00      	nop
   80620:	370c      	adds	r7, #12
   80622:	46bd      	mov	sp, r7
   80624:	bc80      	pop	{r7}
   80626:	4770      	bx	lr

00080628 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80628:	b580      	push	{r7, lr}
   8062a:	b084      	sub	sp, #16
   8062c:	af00      	add	r7, sp, #0
   8062e:	6078      	str	r0, [r7, #4]
   80630:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80632:	2300      	movs	r3, #0
   80634:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	f04f 32ff 	mov.w	r2, #4294967295
   8063c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4b0e      	ldr	r3, [pc, #56]	; (80680 <twi_master_init+0x58>)
   80646:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80648:	6878      	ldr	r0, [r7, #4]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <twi_master_init+0x5c>)
   8064c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8064e:	683b      	ldr	r3, [r7, #0]
   80650:	6859      	ldr	r1, [r3, #4]
   80652:	683b      	ldr	r3, [r7, #0]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	461a      	mov	r2, r3
   80658:	6878      	ldr	r0, [r7, #4]
   8065a:	4b0b      	ldr	r3, [pc, #44]	; (80688 <twi_master_init+0x60>)
   8065c:	4798      	blx	r3
   8065e:	4603      	mov	r3, r0
   80660:	2b01      	cmp	r3, #1
   80662:	d101      	bne.n	80668 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80664:	2301      	movs	r3, #1
   80666:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	7a5b      	ldrb	r3, [r3, #9]
   8066c:	2b01      	cmp	r3, #1
   8066e:	d102      	bne.n	80676 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2240      	movs	r2, #64	; 0x40
   80674:	601a      	str	r2, [r3, #0]
	}

	return status;
   80676:	68fb      	ldr	r3, [r7, #12]
}
   80678:	4618      	mov	r0, r3
   8067a:	3710      	adds	r7, #16
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	0008082d 	.word	0x0008082d
   80684:	00080605 	.word	0x00080605
   80688:	0008068d 	.word	0x0008068d

0008068c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8068c:	b480      	push	{r7}
   8068e:	b087      	sub	sp, #28
   80690:	af00      	add	r7, sp, #0
   80692:	60f8      	str	r0, [r7, #12]
   80694:	60b9      	str	r1, [r7, #8]
   80696:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80698:	2300      	movs	r3, #0
   8069a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	4a17      	ldr	r2, [pc, #92]	; (806fc <twi_set_speed+0x70>)
   806a0:	4293      	cmp	r3, r2
   806a2:	d901      	bls.n	806a8 <twi_set_speed+0x1c>
		return FAIL;
   806a4:	2301      	movs	r3, #1
   806a6:	e024      	b.n	806f2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   806a8:	68bb      	ldr	r3, [r7, #8]
   806aa:	005b      	lsls	r3, r3, #1
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	fbb2 f3f3 	udiv	r3, r2, r3
   806b2:	3b04      	subs	r3, #4
   806b4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b6:	e005      	b.n	806c4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806b8:	697b      	ldr	r3, [r7, #20]
   806ba:	3301      	adds	r3, #1
   806bc:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806be:	693b      	ldr	r3, [r7, #16]
   806c0:	085b      	lsrs	r3, r3, #1
   806c2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c4:	693b      	ldr	r3, [r7, #16]
   806c6:	2bff      	cmp	r3, #255	; 0xff
   806c8:	d902      	bls.n	806d0 <twi_set_speed+0x44>
   806ca:	697b      	ldr	r3, [r7, #20]
   806cc:	2b06      	cmp	r3, #6
   806ce:	d9f3      	bls.n	806b8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806d0:	4a0b      	ldr	r2, [pc, #44]	; (80700 <twi_set_speed+0x74>)
   806d2:	693b      	ldr	r3, [r7, #16]
   806d4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806d6:	693b      	ldr	r3, [r7, #16]
   806d8:	b2da      	uxtb	r2, r3
   806da:	693b      	ldr	r3, [r7, #16]
   806dc:	021b      	lsls	r3, r3, #8
   806de:	b29b      	uxth	r3, r3
   806e0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806e2:	697b      	ldr	r3, [r7, #20]
   806e4:	041b      	lsls	r3, r3, #16
   806e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ea:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806f0:	2300      	movs	r3, #0
}
   806f2:	4618      	mov	r0, r3
   806f4:	371c      	adds	r7, #28
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr
   806fc:	00061a80 	.word	0x00061a80
   80700:	200714fc 	.word	0x200714fc

00080704 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   80704:	b480      	push	{r7}
   80706:	b085      	sub	sp, #20
   80708:	af00      	add	r7, sp, #0
   8070a:	6078      	str	r0, [r7, #4]
   8070c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   8070e:	683b      	ldr	r3, [r7, #0]
   80710:	2b00      	cmp	r3, #0
   80712:	d101      	bne.n	80718 <twi_mk_addr+0x14>
		return 0;
   80714:	2300      	movs	r3, #0
   80716:	e01d      	b.n	80754 <twi_mk_addr+0x50>

	val = addr[0];
   80718:	687b      	ldr	r3, [r7, #4]
   8071a:	781b      	ldrb	r3, [r3, #0]
   8071c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   8071e:	683b      	ldr	r3, [r7, #0]
   80720:	2b01      	cmp	r3, #1
   80722:	dd09      	ble.n	80738 <twi_mk_addr+0x34>
		val <<= 8;
   80724:	68fb      	ldr	r3, [r7, #12]
   80726:	021b      	lsls	r3, r3, #8
   80728:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   8072a:	687b      	ldr	r3, [r7, #4]
   8072c:	3301      	adds	r3, #1
   8072e:	781b      	ldrb	r3, [r3, #0]
   80730:	461a      	mov	r2, r3
   80732:	68fb      	ldr	r3, [r7, #12]
   80734:	4313      	orrs	r3, r2
   80736:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   80738:	683b      	ldr	r3, [r7, #0]
   8073a:	2b02      	cmp	r3, #2
   8073c:	dd09      	ble.n	80752 <twi_mk_addr+0x4e>
		val <<= 8;
   8073e:	68fb      	ldr	r3, [r7, #12]
   80740:	021b      	lsls	r3, r3, #8
   80742:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	3302      	adds	r3, #2
   80748:	781b      	ldrb	r3, [r3, #0]
   8074a:	461a      	mov	r2, r3
   8074c:	68fb      	ldr	r3, [r7, #12]
   8074e:	4313      	orrs	r3, r2
   80750:	60fb      	str	r3, [r7, #12]
	}
	return val;
   80752:	68fb      	ldr	r3, [r7, #12]
}
   80754:	4618      	mov	r0, r3
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	bc80      	pop	{r7}
   8075c:	4770      	bx	lr
   8075e:	bf00      	nop

00080760 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80760:	b580      	push	{r7, lr}
   80762:	b086      	sub	sp, #24
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
   80768:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
   8076a:	683b      	ldr	r3, [r7, #0]
   8076c:	68db      	ldr	r3, [r3, #12]
   8076e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
   80770:	683b      	ldr	r3, [r7, #0]
   80772:	689b      	ldr	r3, [r3, #8]
   80774:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
   80776:	697b      	ldr	r3, [r7, #20]
   80778:	2b00      	cmp	r3, #0
   8077a:	d101      	bne.n	80780 <twi_master_read+0x20>
		return TWI_INVALID_ARGUMENT;
   8077c:	2301      	movs	r3, #1
   8077e:	e04f      	b.n	80820 <twi_master_read+0xc0>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80780:	687b      	ldr	r3, [r7, #4]
   80782:	2200      	movs	r2, #0
   80784:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80786:	683b      	ldr	r3, [r7, #0]
   80788:	7c1b      	ldrb	r3, [r3, #16]
   8078a:	041b      	lsls	r3, r3, #16
   8078c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	685b      	ldr	r3, [r3, #4]
   80794:	021b      	lsls	r3, r3, #8
   80796:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8079a:	4313      	orrs	r3, r2
   8079c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   807a0:	687b      	ldr	r3, [r7, #4]
   807a2:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   807a4:	687b      	ldr	r3, [r7, #4]
   807a6:	2200      	movs	r2, #0
   807a8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   807aa:	683a      	ldr	r2, [r7, #0]
   807ac:	683b      	ldr	r3, [r7, #0]
   807ae:	685b      	ldr	r3, [r3, #4]
   807b0:	4619      	mov	r1, r3
   807b2:	4610      	mov	r0, r2
   807b4:	4b1c      	ldr	r3, [pc, #112]	; (80828 <twi_master_read+0xc8>)
   807b6:	4798      	blx	r3
   807b8:	4602      	mov	r2, r0
   807ba:	687b      	ldr	r3, [r7, #4]
   807bc:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
   807be:	687b      	ldr	r3, [r7, #4]
   807c0:	2201      	movs	r2, #1
   807c2:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
   807c4:	e01f      	b.n	80806 <twi_master_read+0xa6>
		status = p_twi->TWI_SR;
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	6a1b      	ldr	r3, [r3, #32]
   807ca:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   807cc:	68fb      	ldr	r3, [r7, #12]
   807ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
   807d2:	2b00      	cmp	r3, #0
   807d4:	d001      	beq.n	807da <twi_master_read+0x7a>
			return TWI_RECEIVE_NACK;
   807d6:	2305      	movs	r3, #5
   807d8:	e022      	b.n	80820 <twi_master_read+0xc0>
		}

		/* Last byte ? */
		if (cnt == 1) {
   807da:	697b      	ldr	r3, [r7, #20]
   807dc:	2b01      	cmp	r3, #1
   807de:	d102      	bne.n	807e6 <twi_master_read+0x86>
			p_twi->TWI_CR = TWI_CR_STOP;
   807e0:	687b      	ldr	r3, [r7, #4]
   807e2:	2202      	movs	r2, #2
   807e4:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWI_SR_RXRDY)) {
   807e6:	68fb      	ldr	r3, [r7, #12]
   807e8:	f003 0302 	and.w	r3, r3, #2
   807ec:	2b00      	cmp	r3, #0
   807ee:	d100      	bne.n	807f2 <twi_master_read+0x92>
			continue;
   807f0:	e009      	b.n	80806 <twi_master_read+0xa6>
		}
		*buffer++ = p_twi->TWI_RHR;
   807f2:	693b      	ldr	r3, [r7, #16]
   807f4:	1c5a      	adds	r2, r3, #1
   807f6:	613a      	str	r2, [r7, #16]
   807f8:	687a      	ldr	r2, [r7, #4]
   807fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
   807fc:	b2d2      	uxtb	r2, r2
   807fe:	701a      	strb	r2, [r3, #0]

		cnt--;
   80800:	697b      	ldr	r3, [r7, #20]
   80802:	3b01      	subs	r3, #1
   80804:	617b      	str	r3, [r7, #20]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
   80806:	697b      	ldr	r3, [r7, #20]
   80808:	2b00      	cmp	r3, #0
   8080a:	d1dc      	bne.n	807c6 <twi_master_read+0x66>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8080c:	bf00      	nop
   8080e:	687b      	ldr	r3, [r7, #4]
   80810:	6a1b      	ldr	r3, [r3, #32]
   80812:	f003 0301 	and.w	r3, r3, #1
   80816:	2b00      	cmp	r3, #0
   80818:	d0f9      	beq.n	8080e <twi_master_read+0xae>
	}

	p_twi->TWI_SR;
   8081a:	687b      	ldr	r3, [r7, #4]
   8081c:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
   8081e:	2300      	movs	r3, #0
}
   80820:	4618      	mov	r0, r3
   80822:	3718      	adds	r7, #24
   80824:	46bd      	mov	sp, r7
   80826:	bd80      	pop	{r7, pc}
   80828:	00080705 	.word	0x00080705

0008082c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   8082c:	b480      	push	{r7}
   8082e:	b083      	sub	sp, #12
   80830:	af00      	add	r7, sp, #0
   80832:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80834:	687b      	ldr	r3, [r7, #4]
   80836:	2280      	movs	r2, #128	; 0x80
   80838:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   8083a:	687b      	ldr	r3, [r7, #4]
   8083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8083e:	bf00      	nop
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	bc80      	pop	{r7}
   80846:	4770      	bx	lr

00080848 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80848:	b480      	push	{r7}
   8084a:	b087      	sub	sp, #28
   8084c:	af00      	add	r7, sp, #0
   8084e:	60f8      	str	r0, [r7, #12]
   80850:	60b9      	str	r1, [r7, #8]
   80852:	607a      	str	r2, [r7, #4]
   80854:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80856:	68bb      	ldr	r3, [r7, #8]
   80858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   8085c:	d30b      	bcc.n	80876 <translate_address+0x2e>
		p_efc = EFC1;
   8085e:	4b17      	ldr	r3, [pc, #92]	; (808bc <translate_address+0x74>)
   80860:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   80862:	68bb      	ldr	r3, [r7, #8]
   80864:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80868:	0a1b      	lsrs	r3, r3, #8
   8086a:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   8086c:	68bb      	ldr	r3, [r7, #8]
   8086e:	b29b      	uxth	r3, r3
   80870:	b2db      	uxtb	r3, r3
   80872:	823b      	strh	r3, [r7, #16]
   80874:	e00a      	b.n	8088c <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80876:	4b12      	ldr	r3, [pc, #72]	; (808c0 <translate_address+0x78>)
   80878:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   8087a:	68bb      	ldr	r3, [r7, #8]
   8087c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80880:	0a1b      	lsrs	r3, r3, #8
   80882:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80884:	68bb      	ldr	r3, [r7, #8]
   80886:	b29b      	uxth	r3, r3
   80888:	b2db      	uxtb	r3, r3
   8088a:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   8088c:	68fb      	ldr	r3, [r7, #12]
   8088e:	2b00      	cmp	r3, #0
   80890:	d002      	beq.n	80898 <translate_address+0x50>
		*pp_efc = p_efc;
   80892:	68fb      	ldr	r3, [r7, #12]
   80894:	697a      	ldr	r2, [r7, #20]
   80896:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d002      	beq.n	808a4 <translate_address+0x5c>
		*pus_page = us_page;
   8089e:	687b      	ldr	r3, [r7, #4]
   808a0:	8a7a      	ldrh	r2, [r7, #18]
   808a2:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   808a4:	683b      	ldr	r3, [r7, #0]
   808a6:	2b00      	cmp	r3, #0
   808a8:	d002      	beq.n	808b0 <translate_address+0x68>
		*pus_offset = us_offset;
   808aa:	683b      	ldr	r3, [r7, #0]
   808ac:	8a3a      	ldrh	r2, [r7, #16]
   808ae:	801a      	strh	r2, [r3, #0]
	}
}
   808b0:	bf00      	nop
   808b2:	371c      	adds	r7, #28
   808b4:	46bd      	mov	sp, r7
   808b6:	bc80      	pop	{r7}
   808b8:	4770      	bx	lr
   808ba:	bf00      	nop
   808bc:	400e0c00 	.word	0x400e0c00
   808c0:	400e0a00 	.word	0x400e0a00

000808c4 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   808c4:	b480      	push	{r7}
   808c6:	b087      	sub	sp, #28
   808c8:	af00      	add	r7, sp, #0
   808ca:	60f8      	str	r0, [r7, #12]
   808cc:	607b      	str	r3, [r7, #4]
   808ce:	460b      	mov	r3, r1
   808d0:	817b      	strh	r3, [r7, #10]
   808d2:	4613      	mov	r3, r2
   808d4:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808d6:	68fb      	ldr	r3, [r7, #12]
   808d8:	4a0d      	ldr	r2, [pc, #52]	; (80910 <compute_address+0x4c>)
   808da:	4293      	cmp	r3, r2
   808dc:	d106      	bne.n	808ec <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   808de:	897b      	ldrh	r3, [r7, #10]
   808e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   808e4:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808e6:	893b      	ldrh	r3, [r7, #8]
   808e8:	4413      	add	r3, r2
   808ea:	e005      	b.n	808f8 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   808ec:	897b      	ldrh	r3, [r7, #10]
   808ee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   808f2:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   808f4:	893b      	ldrh	r3, [r7, #8]
   808f6:	4413      	add	r3, r2
   808f8:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   808fa:	687b      	ldr	r3, [r7, #4]
   808fc:	2b00      	cmp	r3, #0
   808fe:	d002      	beq.n	80906 <compute_address+0x42>
		*pul_addr = ul_addr;
   80900:	687b      	ldr	r3, [r7, #4]
   80902:	697a      	ldr	r2, [r7, #20]
   80904:	601a      	str	r2, [r3, #0]
	}
}
   80906:	bf00      	nop
   80908:	371c      	adds	r7, #28
   8090a:	46bd      	mov	sp, r7
   8090c:	bc80      	pop	{r7}
   8090e:	4770      	bx	lr
   80910:	400e0a00 	.word	0x400e0a00

00080914 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80914:	b480      	push	{r7}
   80916:	b087      	sub	sp, #28
   80918:	af00      	add	r7, sp, #0
   8091a:	60f8      	str	r0, [r7, #12]
   8091c:	60b9      	str	r1, [r7, #8]
   8091e:	607a      	str	r2, [r7, #4]
   80920:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80922:	68fb      	ldr	r3, [r7, #12]
   80924:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   8092c:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   8092e:	68bb      	ldr	r3, [r7, #8]
   80930:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80938:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   8093c:	333f      	adds	r3, #63	; 0x3f
   8093e:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   80940:	687b      	ldr	r3, [r7, #4]
   80942:	2b00      	cmp	r3, #0
   80944:	d002      	beq.n	8094c <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   80946:	687b      	ldr	r3, [r7, #4]
   80948:	697a      	ldr	r2, [r7, #20]
   8094a:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   8094c:	683b      	ldr	r3, [r7, #0]
   8094e:	2b00      	cmp	r3, #0
   80950:	d002      	beq.n	80958 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   80952:	683b      	ldr	r3, [r7, #0]
   80954:	693a      	ldr	r2, [r7, #16]
   80956:	601a      	str	r2, [r3, #0]
	}
}
   80958:	bf00      	nop
   8095a:	371c      	adds	r7, #28
   8095c:	46bd      	mov	sp, r7
   8095e:	bc80      	pop	{r7}
   80960:	4770      	bx	lr
   80962:	bf00      	nop

00080964 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   80964:	b580      	push	{r7, lr}
   80966:	b082      	sub	sp, #8
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
   8096c:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   8096e:	683a      	ldr	r2, [r7, #0]
   80970:	6879      	ldr	r1, [r7, #4]
   80972:	4806      	ldr	r0, [pc, #24]	; (8098c <flash_init+0x28>)
   80974:	4b06      	ldr	r3, [pc, #24]	; (80990 <flash_init+0x2c>)
   80976:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80978:	683a      	ldr	r2, [r7, #0]
   8097a:	6879      	ldr	r1, [r7, #4]
   8097c:	4805      	ldr	r0, [pc, #20]	; (80994 <flash_init+0x30>)
   8097e:	4b04      	ldr	r3, [pc, #16]	; (80990 <flash_init+0x2c>)
   80980:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   80982:	2300      	movs	r3, #0
}
   80984:	4618      	mov	r0, r3
   80986:	3708      	adds	r7, #8
   80988:	46bd      	mov	sp, r7
   8098a:	bd80      	pop	{r7, pc}
   8098c:	400e0a00 	.word	0x400e0a00
   80990:	000804b5 	.word	0x000804b5
   80994:	400e0c00 	.word	0x400e0c00

00080998 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80998:	b590      	push	{r4, r7, lr}
   8099a:	b08f      	sub	sp, #60	; 0x3c
   8099c:	af00      	add	r7, sp, #0
   8099e:	60f8      	str	r0, [r7, #12]
   809a0:	60b9      	str	r1, [r7, #8]
   809a2:	607a      	str	r2, [r7, #4]
   809a4:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   809a6:	4b4a      	ldr	r3, [pc, #296]	; (80ad0 <flash_write+0x138>)
   809a8:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   809aa:	f107 0314 	add.w	r3, r7, #20
   809ae:	f107 0216 	add.w	r2, r7, #22
   809b2:	f107 0018 	add.w	r0, r7, #24
   809b6:	68f9      	ldr	r1, [r7, #12]
   809b8:	4c46      	ldr	r4, [pc, #280]	; (80ad4 <flash_write+0x13c>)
   809ba:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   809bc:	69bb      	ldr	r3, [r7, #24]
   809be:	4618      	mov	r0, r3
   809c0:	4b45      	ldr	r3, [pc, #276]	; (80ad8 <flash_write+0x140>)
   809c2:	4798      	blx	r3
   809c4:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   809c6:	69bb      	ldr	r3, [r7, #24]
   809c8:	2106      	movs	r1, #6
   809ca:	4618      	mov	r0, r3
   809cc:	4b43      	ldr	r3, [pc, #268]	; (80adc <flash_write+0x144>)
   809ce:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   809d0:	e071      	b.n	80ab6 <flash_write+0x11e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   809d2:	8abb      	ldrh	r3, [r7, #20]
   809d4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   809d8:	687b      	ldr	r3, [r7, #4]
   809da:	4293      	cmp	r3, r2
   809dc:	bf28      	it	cs
   809de:	4613      	movcs	r3, r2
   809e0:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   809e2:	69b8      	ldr	r0, [r7, #24]
   809e4:	8af9      	ldrh	r1, [r7, #22]
   809e6:	f107 0310 	add.w	r3, r7, #16
   809ea:	2200      	movs	r2, #0
   809ec:	4c3c      	ldr	r4, [pc, #240]	; (80ae0 <flash_write+0x148>)
   809ee:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   809f0:	8abb      	ldrh	r3, [r7, #20]
   809f2:	425b      	negs	r3, r3
   809f4:	b29a      	uxth	r2, r3
   809f6:	6a3b      	ldr	r3, [r7, #32]
   809f8:	b29b      	uxth	r3, r3
   809fa:	1ad3      	subs	r3, r2, r3
   809fc:	b29b      	uxth	r3, r3
   809fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
   80a02:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80a04:	693b      	ldr	r3, [r7, #16]
   80a06:	4619      	mov	r1, r3
   80a08:	8abb      	ldrh	r3, [r7, #20]
   80a0a:	461a      	mov	r2, r3
   80a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   80a0e:	4b35      	ldr	r3, [pc, #212]	; (80ae4 <flash_write+0x14c>)
   80a10:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80a12:	8abb      	ldrh	r3, [r7, #20]
   80a14:	461a      	mov	r2, r3
   80a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80a18:	4413      	add	r3, r2
   80a1a:	6a3a      	ldr	r2, [r7, #32]
   80a1c:	68b9      	ldr	r1, [r7, #8]
   80a1e:	4618      	mov	r0, r3
   80a20:	4b30      	ldr	r3, [pc, #192]	; (80ae4 <flash_write+0x14c>)
   80a22:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a24:	8abb      	ldrh	r3, [r7, #20]
   80a26:	461a      	mov	r2, r3
   80a28:	6a3b      	ldr	r3, [r7, #32]
   80a2a:	4413      	add	r3, r2
   80a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80a2e:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80a30:	8abb      	ldrh	r3, [r7, #20]
   80a32:	461a      	mov	r2, r3
   80a34:	693b      	ldr	r3, [r7, #16]
   80a36:	441a      	add	r2, r3
   80a38:	6a3b      	ldr	r3, [r7, #32]
   80a3a:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80a3c:	4619      	mov	r1, r3
   80a3e:	8bfb      	ldrh	r3, [r7, #30]
   80a40:	461a      	mov	r2, r3
   80a42:	4b28      	ldr	r3, [pc, #160]	; (80ae4 <flash_write+0x14c>)
   80a44:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   80a46:	693b      	ldr	r3, [r7, #16]
   80a48:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a4a:	2300      	movs	r3, #0
   80a4c:	633b      	str	r3, [r7, #48]	; 0x30
   80a4e:	e00a      	b.n	80a66 <flash_write+0xce>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80a52:	1d1a      	adds	r2, r3, #4
   80a54:	62fa      	str	r2, [r7, #44]	; 0x2c
   80a56:	491e      	ldr	r1, [pc, #120]	; (80ad0 <flash_write+0x138>)
   80a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80a5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80a5e:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a62:	3301      	adds	r3, #1
   80a64:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80a68:	2b3f      	cmp	r3, #63	; 0x3f
   80a6a:	d9f1      	bls.n	80a50 <flash_write+0xb8>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80a6c:	683b      	ldr	r3, [r7, #0]
   80a6e:	2b00      	cmp	r3, #0
   80a70:	d007      	beq.n	80a82 <flash_write+0xea>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80a72:	69bb      	ldr	r3, [r7, #24]
   80a74:	8afa      	ldrh	r2, [r7, #22]
   80a76:	2103      	movs	r1, #3
   80a78:	4618      	mov	r0, r3
   80a7a:	4b1b      	ldr	r3, [pc, #108]	; (80ae8 <flash_write+0x150>)
   80a7c:	4798      	blx	r3
   80a7e:	6378      	str	r0, [r7, #52]	; 0x34
   80a80:	e006      	b.n	80a90 <flash_write+0xf8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80a82:	69bb      	ldr	r3, [r7, #24]
   80a84:	8afa      	ldrh	r2, [r7, #22]
   80a86:	2101      	movs	r1, #1
   80a88:	4618      	mov	r0, r3
   80a8a:	4b17      	ldr	r3, [pc, #92]	; (80ae8 <flash_write+0x150>)
   80a8c:	4798      	blx	r3
   80a8e:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a92:	2b00      	cmp	r3, #0
   80a94:	d001      	beq.n	80a9a <flash_write+0x102>
			return ul_error;
   80a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80a98:	e016      	b.n	80ac8 <flash_write+0x130>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80a9a:	68ba      	ldr	r2, [r7, #8]
   80a9c:	6a3b      	ldr	r3, [r7, #32]
   80a9e:	4413      	add	r3, r2
   80aa0:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   80aa2:	687a      	ldr	r2, [r7, #4]
   80aa4:	6a3b      	ldr	r3, [r7, #32]
   80aa6:	1ad3      	subs	r3, r2, r3
   80aa8:	607b      	str	r3, [r7, #4]
		us_page++;
   80aaa:	8afb      	ldrh	r3, [r7, #22]
   80aac:	3301      	adds	r3, #1
   80aae:	b29b      	uxth	r3, r3
   80ab0:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   80ab2:	2300      	movs	r3, #0
   80ab4:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   80ab6:	687b      	ldr	r3, [r7, #4]
   80ab8:	2b00      	cmp	r3, #0
   80aba:	d18a      	bne.n	809d2 <flash_write+0x3a>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80abc:	69bb      	ldr	r3, [r7, #24]
   80abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b06      	ldr	r3, [pc, #24]	; (80adc <flash_write+0x144>)
   80ac4:	4798      	blx	r3

	return FLASH_RC_OK;
   80ac6:	2300      	movs	r3, #0
}
   80ac8:	4618      	mov	r0, r3
   80aca:	373c      	adds	r7, #60	; 0x3c
   80acc:	46bd      	mov	sp, r7
   80ace:	bd90      	pop	{r4, r7, pc}
   80ad0:	20071500 	.word	0x20071500
   80ad4:	00080849 	.word	0x00080849
   80ad8:	00080519 	.word	0x00080519
   80adc:	000804e5 	.word	0x000804e5
   80ae0:	000808c5 	.word	0x000808c5
   80ae4:	000a38b9 	.word	0x000a38b9
   80ae8:	00080535 	.word	0x00080535

00080aec <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80aec:	b590      	push	{r4, r7, lr}
   80aee:	b08b      	sub	sp, #44	; 0x2c
   80af0:	af00      	add	r7, sp, #0
   80af2:	60f8      	str	r0, [r7, #12]
   80af4:	60b9      	str	r1, [r7, #8]
   80af6:	607a      	str	r2, [r7, #4]
   80af8:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80afa:	2340      	movs	r3, #64	; 0x40
   80afc:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80afe:	f107 0314 	add.w	r3, r7, #20
   80b02:	f107 0218 	add.w	r2, r7, #24
   80b06:	68b9      	ldr	r1, [r7, #8]
   80b08:	68f8      	ldr	r0, [r7, #12]
   80b0a:	4c1c      	ldr	r4, [pc, #112]	; (80b7c <flash_lock+0x90>)
   80b0c:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   80b0e:	687b      	ldr	r3, [r7, #4]
   80b10:	2b00      	cmp	r3, #0
   80b12:	d002      	beq.n	80b1a <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   80b14:	69ba      	ldr	r2, [r7, #24]
   80b16:	687b      	ldr	r3, [r7, #4]
   80b18:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   80b1a:	683b      	ldr	r3, [r7, #0]
   80b1c:	2b00      	cmp	r3, #0
   80b1e:	d002      	beq.n	80b26 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   80b20:	697a      	ldr	r2, [r7, #20]
   80b22:	683b      	ldr	r3, [r7, #0]
   80b24:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80b26:	69b9      	ldr	r1, [r7, #24]
   80b28:	f107 0212 	add.w	r2, r7, #18
   80b2c:	f107 001c 	add.w	r0, r7, #28
   80b30:	2300      	movs	r3, #0
   80b32:	4c13      	ldr	r4, [pc, #76]	; (80b80 <flash_lock+0x94>)
   80b34:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80b36:	6979      	ldr	r1, [r7, #20]
   80b38:	f107 0210 	add.w	r2, r7, #16
   80b3c:	2300      	movs	r3, #0
   80b3e:	2000      	movs	r0, #0
   80b40:	4c0f      	ldr	r4, [pc, #60]	; (80b80 <flash_lock+0x94>)
   80b42:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b44:	e010      	b.n	80b68 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80b46:	69fb      	ldr	r3, [r7, #28]
   80b48:	8a7a      	ldrh	r2, [r7, #18]
   80b4a:	2108      	movs	r1, #8
   80b4c:	4618      	mov	r0, r3
   80b4e:	4b0d      	ldr	r3, [pc, #52]	; (80b84 <flash_lock+0x98>)
   80b50:	4798      	blx	r3
   80b52:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80b54:	6a3b      	ldr	r3, [r7, #32]
   80b56:	2b00      	cmp	r3, #0
   80b58:	d001      	beq.n	80b5e <flash_lock+0x72>
			return ul_error;
   80b5a:	6a3b      	ldr	r3, [r7, #32]
   80b5c:	e009      	b.n	80b72 <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80b5e:	8a7a      	ldrh	r2, [r7, #18]
   80b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80b62:	4413      	add	r3, r2
   80b64:	b29b      	uxth	r3, r3
   80b66:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80b68:	8a7a      	ldrh	r2, [r7, #18]
   80b6a:	8a3b      	ldrh	r3, [r7, #16]
   80b6c:	429a      	cmp	r2, r3
   80b6e:	d3ea      	bcc.n	80b46 <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80b70:	2300      	movs	r3, #0
}
   80b72:	4618      	mov	r0, r3
   80b74:	372c      	adds	r7, #44	; 0x2c
   80b76:	46bd      	mov	sp, r7
   80b78:	bd90      	pop	{r4, r7, pc}
   80b7a:	bf00      	nop
   80b7c:	00080915 	.word	0x00080915
   80b80:	00080849 	.word	0x00080849
   80b84:	00080535 	.word	0x00080535

00080b88 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80b88:	b590      	push	{r4, r7, lr}
   80b8a:	b08b      	sub	sp, #44	; 0x2c
   80b8c:	af00      	add	r7, sp, #0
   80b8e:	60f8      	str	r0, [r7, #12]
   80b90:	60b9      	str	r1, [r7, #8]
   80b92:	607a      	str	r2, [r7, #4]
   80b94:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80b96:	2340      	movs	r3, #64	; 0x40
   80b98:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80b9a:	f107 0314 	add.w	r3, r7, #20
   80b9e:	f107 0218 	add.w	r2, r7, #24
   80ba2:	68b9      	ldr	r1, [r7, #8]
   80ba4:	68f8      	ldr	r0, [r7, #12]
   80ba6:	4c1c      	ldr	r4, [pc, #112]	; (80c18 <flash_unlock+0x90>)
   80ba8:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80baa:	687b      	ldr	r3, [r7, #4]
   80bac:	2b00      	cmp	r3, #0
   80bae:	d002      	beq.n	80bb6 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80bb0:	69ba      	ldr	r2, [r7, #24]
   80bb2:	687b      	ldr	r3, [r7, #4]
   80bb4:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80bb6:	683b      	ldr	r3, [r7, #0]
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d002      	beq.n	80bc2 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80bbc:	697a      	ldr	r2, [r7, #20]
   80bbe:	683b      	ldr	r3, [r7, #0]
   80bc0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80bc2:	69b9      	ldr	r1, [r7, #24]
   80bc4:	f107 0212 	add.w	r2, r7, #18
   80bc8:	f107 001c 	add.w	r0, r7, #28
   80bcc:	2300      	movs	r3, #0
   80bce:	4c13      	ldr	r4, [pc, #76]	; (80c1c <flash_unlock+0x94>)
   80bd0:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80bd2:	6979      	ldr	r1, [r7, #20]
   80bd4:	f107 0210 	add.w	r2, r7, #16
   80bd8:	2300      	movs	r3, #0
   80bda:	2000      	movs	r0, #0
   80bdc:	4c0f      	ldr	r4, [pc, #60]	; (80c1c <flash_unlock+0x94>)
   80bde:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80be0:	e010      	b.n	80c04 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80be2:	69fb      	ldr	r3, [r7, #28]
   80be4:	8a7a      	ldrh	r2, [r7, #18]
   80be6:	2109      	movs	r1, #9
   80be8:	4618      	mov	r0, r3
   80bea:	4b0d      	ldr	r3, [pc, #52]	; (80c20 <flash_unlock+0x98>)
   80bec:	4798      	blx	r3
   80bee:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80bf0:	6a3b      	ldr	r3, [r7, #32]
   80bf2:	2b00      	cmp	r3, #0
   80bf4:	d001      	beq.n	80bfa <flash_unlock+0x72>
			return ul_error;
   80bf6:	6a3b      	ldr	r3, [r7, #32]
   80bf8:	e009      	b.n	80c0e <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80bfa:	8a7a      	ldrh	r2, [r7, #18]
   80bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80bfe:	4413      	add	r3, r2
   80c00:	b29b      	uxth	r3, r3
   80c02:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80c04:	8a7a      	ldrh	r2, [r7, #18]
   80c06:	8a3b      	ldrh	r3, [r7, #16]
   80c08:	429a      	cmp	r2, r3
   80c0a:	d3ea      	bcc.n	80be2 <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80c0c:	2300      	movs	r3, #0
}
   80c0e:	4618      	mov	r0, r3
   80c10:	372c      	adds	r7, #44	; 0x2c
   80c12:	46bd      	mov	sp, r7
   80c14:	bd90      	pop	{r4, r7, pc}
   80c16:	bf00      	nop
   80c18:	00080915 	.word	0x00080915
   80c1c:	00080849 	.word	0x00080849
   80c20:	00080535 	.word	0x00080535

00080c24 <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	af00      	add	r7, sp, #0
   80c2a:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c2c:	687b      	ldr	r3, [r7, #4]
   80c2e:	2b02      	cmp	r3, #2
   80c30:	d901      	bls.n	80c36 <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80c32:	2311      	movs	r3, #17
   80c34:	e012      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80c36:	6878      	ldr	r0, [r7, #4]
   80c38:	4b0a      	ldr	r3, [pc, #40]	; (80c64 <flash_set_gpnvm+0x40>)
   80c3a:	4798      	blx	r3
   80c3c:	4603      	mov	r3, r0
   80c3e:	2b01      	cmp	r3, #1
   80c40:	d101      	bne.n	80c46 <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80c42:	2300      	movs	r3, #0
   80c44:	e00a      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80c46:	687a      	ldr	r2, [r7, #4]
   80c48:	210b      	movs	r1, #11
   80c4a:	4807      	ldr	r0, [pc, #28]	; (80c68 <flash_set_gpnvm+0x44>)
   80c4c:	4b07      	ldr	r3, [pc, #28]	; (80c6c <flash_set_gpnvm+0x48>)
   80c4e:	4798      	blx	r3
   80c50:	4603      	mov	r3, r0
   80c52:	2b00      	cmp	r3, #0
   80c54:	d101      	bne.n	80c5a <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80c56:	2300      	movs	r3, #0
   80c58:	e000      	b.n	80c5c <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80c5a:	2310      	movs	r3, #16
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	3708      	adds	r7, #8
   80c60:	46bd      	mov	sp, r7
   80c62:	bd80      	pop	{r7, pc}
   80c64:	00080c71 	.word	0x00080c71
   80c68:	400e0a00 	.word	0x400e0a00
   80c6c:	00080535 	.word	0x00080535

00080c70 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80c70:	b580      	push	{r7, lr}
   80c72:	b084      	sub	sp, #16
   80c74:	af00      	add	r7, sp, #0
   80c76:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80c78:	687b      	ldr	r3, [r7, #4]
   80c7a:	2b02      	cmp	r3, #2
   80c7c:	d901      	bls.n	80c82 <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80c7e:	2311      	movs	r3, #17
   80c80:	e019      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80c82:	2200      	movs	r2, #0
   80c84:	210d      	movs	r1, #13
   80c86:	480e      	ldr	r0, [pc, #56]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c88:	4b0e      	ldr	r3, [pc, #56]	; (80cc4 <flash_is_gpnvm_set+0x54>)
   80c8a:	4798      	blx	r3
   80c8c:	4603      	mov	r3, r0
   80c8e:	2b00      	cmp	r3, #0
   80c90:	d001      	beq.n	80c96 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80c92:	2310      	movs	r3, #16
   80c94:	e00f      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80c96:	480a      	ldr	r0, [pc, #40]	; (80cc0 <flash_is_gpnvm_set+0x50>)
   80c98:	4b0b      	ldr	r3, [pc, #44]	; (80cc8 <flash_is_gpnvm_set+0x58>)
   80c9a:	4798      	blx	r3
   80c9c:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80c9e:	2201      	movs	r2, #1
   80ca0:	687b      	ldr	r3, [r7, #4]
   80ca2:	fa02 f303 	lsl.w	r3, r2, r3
   80ca6:	461a      	mov	r2, r3
   80ca8:	68fb      	ldr	r3, [r7, #12]
   80caa:	4013      	ands	r3, r2
   80cac:	2b00      	cmp	r3, #0
   80cae:	d001      	beq.n	80cb4 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80cb0:	2301      	movs	r3, #1
   80cb2:	e000      	b.n	80cb6 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80cb4:	2300      	movs	r3, #0
}
   80cb6:	4618      	mov	r0, r3
   80cb8:	3710      	adds	r7, #16
   80cba:	46bd      	mov	sp, r7
   80cbc:	bd80      	pop	{r7, pc}
   80cbe:	bf00      	nop
   80cc0:	400e0a00 	.word	0x400e0a00
   80cc4:	00080535 	.word	0x00080535
   80cc8:	000805a9 	.word	0x000805a9

00080ccc <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80ccc:	b580      	push	{r7, lr}
   80cce:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80cd0:	2000      	movs	r0, #0
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <flash_enable_security_bit+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	4603      	mov	r3, r0
}
   80cd8:	4618      	mov	r0, r3
   80cda:	bd80      	pop	{r7, pc}
   80cdc:	00080c25 	.word	0x00080c25

00080ce0 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80ce0:	b580      	push	{r7, lr}
   80ce2:	b082      	sub	sp, #8
   80ce4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80ce6:	2304      	movs	r3, #4
   80ce8:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80cea:	4b10      	ldr	r3, [pc, #64]	; (80d2c <Cl_Init_Alarms+0x4c>)
   80cec:	4798      	blx	r3
   80cee:	4603      	mov	r3, r0
   80cf0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80cf2:	79fb      	ldrb	r3, [r7, #7]
   80cf4:	2b00      	cmp	r3, #0
   80cf6:	d001      	beq.n	80cfc <Cl_Init_Alarms+0x1c>
   80cf8:	4b0d      	ldr	r3, [pc, #52]	; (80d30 <Cl_Init_Alarms+0x50>)
   80cfa:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80cfc:	4b0d      	ldr	r3, [pc, #52]	; (80d34 <Cl_Init_Alarms+0x54>)
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80d04:	79fb      	ldrb	r3, [r7, #7]
   80d06:	2b00      	cmp	r3, #0
   80d08:	d001      	beq.n	80d0e <Cl_Init_Alarms+0x2e>
   80d0a:	4b09      	ldr	r3, [pc, #36]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d0c:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80d0e:	4b0a      	ldr	r3, [pc, #40]	; (80d38 <Cl_Init_Alarms+0x58>)
   80d10:	4798      	blx	r3
   80d12:	4603      	mov	r3, r0
   80d14:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80d16:	79fb      	ldrb	r3, [r7, #7]
   80d18:	2b00      	cmp	r3, #0
   80d1a:	d001      	beq.n	80d20 <Cl_Init_Alarms+0x40>
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <Cl_Init_Alarms+0x50>)
   80d1e:	4798      	blx	r3
	return CL_OK;
   80d20:	2300      	movs	r3, #0
	
}
   80d22:	4618      	mov	r0, r3
   80d24:	3708      	adds	r7, #8
   80d26:	46bd      	mov	sp, r7
   80d28:	bd80      	pop	{r7, pc}
   80d2a:	bf00      	nop
   80d2c:	00080d3d 	.word	0x00080d3d
   80d30:	0008870d 	.word	0x0008870d
   80d34:	0008e99d 	.word	0x0008e99d
   80d38:	0008e4dd 	.word	0x0008e4dd

00080d3c <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80d3c:	b480      	push	{r7}
   80d3e:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 13.0;
   80d40:	4b3b      	ldr	r3, [pc, #236]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d42:	220d      	movs	r2, #13
   80d44:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 14.5;
   80d46:	4b3a      	ldr	r3, [pc, #232]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d48:	220e      	movs	r2, #14
   80d4a:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80d4c:	4b38      	ldr	r3, [pc, #224]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d4e:	2200      	movs	r2, #0
   80d50:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80d52:	4b37      	ldr	r3, [pc, #220]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d54:	f242 7210 	movw	r2, #10000	; 0x2710
   80d58:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80d5a:	4b35      	ldr	r3, [pc, #212]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d5c:	4a35      	ldr	r2, [pc, #212]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d5e:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80d60:	4b33      	ldr	r3, [pc, #204]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d62:	4a35      	ldr	r2, [pc, #212]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d64:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80d66:	4b32      	ldr	r3, [pc, #200]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d68:	4a32      	ldr	r2, [pc, #200]	; (80e34 <Cl_LoadAlarmThresholdTable+0xf8>)
   80d6a:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80d6c:	4b30      	ldr	r3, [pc, #192]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d6e:	4a32      	ldr	r2, [pc, #200]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d70:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80d72:	4b2f      	ldr	r3, [pc, #188]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d74:	4a31      	ldr	r2, [pc, #196]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d76:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80d78:	4b2d      	ldr	r3, [pc, #180]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d7a:	4a31      	ldr	r2, [pc, #196]	; (80e40 <Cl_LoadAlarmThresholdTable+0x104>)
   80d7c:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80d7e:	4b2c      	ldr	r3, [pc, #176]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d80:	4a2e      	ldr	r2, [pc, #184]	; (80e3c <Cl_LoadAlarmThresholdTable+0x100>)
   80d82:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80d84:	4b2a      	ldr	r3, [pc, #168]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d86:	4a2c      	ldr	r2, [pc, #176]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d88:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1000;
   80d8a:	4b29      	ldr	r3, [pc, #164]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d8c:	4a2d      	ldr	r2, [pc, #180]	; (80e44 <Cl_LoadAlarmThresholdTable+0x108>)
   80d8e:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80d90:	4b27      	ldr	r3, [pc, #156]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d92:	4a29      	ldr	r2, [pc, #164]	; (80e38 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d94:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80d96:	4b26      	ldr	r3, [pc, #152]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d98:	4a2b      	ldr	r2, [pc, #172]	; (80e48 <Cl_LoadAlarmThresholdTable+0x10c>)
   80d9a:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80d9c:	4b24      	ldr	r3, [pc, #144]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80d9e:	4a2b      	ldr	r2, [pc, #172]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80da0:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80da2:	4b23      	ldr	r3, [pc, #140]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80da4:	4a2a      	ldr	r2, [pc, #168]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80da6:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80da8:	4b21      	ldr	r3, [pc, #132]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80daa:	4a28      	ldr	r2, [pc, #160]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80dac:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 80;
   80dae:	4b20      	ldr	r3, [pc, #128]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db0:	4a27      	ldr	r2, [pc, #156]	; (80e50 <Cl_LoadAlarmThresholdTable+0x114>)
   80db2:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 25;
   80db4:	4b1e      	ldr	r3, [pc, #120]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80db6:	4a25      	ldr	r2, [pc, #148]	; (80e4c <Cl_LoadAlarmThresholdTable+0x110>)
   80db8:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80dba:	4b1d      	ldr	r3, [pc, #116]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dbc:	4a25      	ldr	r2, [pc, #148]	; (80e54 <Cl_LoadAlarmThresholdTable+0x118>)
   80dbe:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80dc0:	4b1b      	ldr	r3, [pc, #108]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dc2:	f242 7210 	movw	r2, #10000	; 0x2710
   80dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80dca:	4b19      	ldr	r3, [pc, #100]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dcc:	2200      	movs	r2, #0
   80dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80dd2:	4b17      	ldr	r3, [pc, #92]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dd4:	f242 7210 	movw	r2, #10000	; 0x2710
   80dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80ddc:	4b14      	ldr	r3, [pc, #80]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80dde:	2200      	movs	r2, #0
   80de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80de4:	4b12      	ldr	r3, [pc, #72]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80de6:	f242 7210 	movw	r2, #10000	; 0x2710
   80dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80dee:	4b10      	ldr	r3, [pc, #64]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df0:	2200      	movs	r2, #0
   80df2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80df6:	4b0e      	ldr	r3, [pc, #56]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80df8:	2205      	movs	r2, #5
   80dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80dfe:	4b0c      	ldr	r3, [pc, #48]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e00:	2214      	movs	r2, #20
   80e02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80e06:	4b0a      	ldr	r3, [pc, #40]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e08:	221e      	movs	r2, #30
   80e0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80e0e:	4b08      	ldr	r3, [pc, #32]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e10:	2205      	movs	r2, #5
   80e12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80e16:	4b06      	ldr	r3, [pc, #24]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e18:	221e      	movs	r2, #30
   80e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80e1e:	4b04      	ldr	r3, [pc, #16]	; (80e30 <Cl_LoadAlarmThresholdTable+0xf4>)
   80e20:	2205      	movs	r2, #5
   80e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		
		return CL_OK ;
   80e26:	2300      	movs	r3, #0
}
   80e28:	4618      	mov	r0, r3
   80e2a:	46bd      	mov	sp, r7
   80e2c:	bc80      	pop	{r7}
   80e2e:	4770      	bx	lr
   80e30:	20072cf8 	.word	0x20072cf8
   80e34:	43fa0000 	.word	0x43fa0000
   80e38:	c3960000 	.word	0xc3960000
   80e3c:	43c80000 	.word	0x43c80000
   80e40:	c3480000 	.word	0xc3480000
   80e44:	447a0000 	.word	0x447a0000
   80e48:	42140000 	.word	0x42140000
   80e4c:	41c80000 	.word	0x41c80000
   80e50:	42a00000 	.word	0x42a00000
   80e54:	42340000 	.word	0x42340000

00080e58 <Cl_Alarm_translate_sensor_values>:
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
  
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void)
{							
   80e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e5a:	b087      	sub	sp, #28
   80e5c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80e5e:	2304      	movs	r3, #4
   80e60:	75fb      	strb	r3, [r7, #23]
	{
		ps3 = prev_ps3val;
	}
	#endif
	
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80e62:	4b89      	ldr	r3, [pc, #548]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80e64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80e66:	461a      	mov	r2, r3
   80e68:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e6c:	fb03 f302 	mul.w	r3, r3, r2
   80e70:	2b00      	cmp	r3, #0
   80e72:	da01      	bge.n	80e78 <Cl_Alarm_translate_sensor_values+0x20>
   80e74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e78:	131b      	asrs	r3, r3, #12
   80e7a:	461a      	mov	r2, r3
   80e7c:	4b83      	ldr	r3, [pc, #524]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80e7e:	4610      	mov	r0, r2
   80e80:	4798      	blx	r3
   80e82:	4603      	mov	r3, r0
   80e84:	613b      	str	r3, [r7, #16]
	calibration_ps1(temp);
   80e86:	4b82      	ldr	r3, [pc, #520]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80e88:	6938      	ldr	r0, [r7, #16]
   80e8a:	4798      	blx	r3
   80e8c:	4603      	mov	r3, r0
   80e8e:	b21b      	sxth	r3, r3
   80e90:	4618      	mov	r0, r3
   80e92:	4b80      	ldr	r3, [pc, #512]	; (81094 <Cl_Alarm_translate_sensor_values+0x23c>)
   80e94:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS1STATUS].test_flag == true)
   80e96:	4b80      	ldr	r3, [pc, #512]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80e9c:	2b00      	cmp	r3, #0
   80e9e:	d015      	beq.n	80ecc <Cl_Alarm_translate_sensor_values+0x74>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS1",5);
   80ea0:	2205      	movs	r2, #5
   80ea2:	497e      	ldr	r1, [pc, #504]	; (8109c <Cl_Alarm_translate_sensor_values+0x244>)
   80ea4:	2018      	movs	r0, #24
   80ea6:	4b7e      	ldr	r3, [pc, #504]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80ea8:	4798      	blx	r3
   80eaa:	4603      	mov	r3, r0
   80eac:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80eae:	7dfb      	ldrb	r3, [r7, #23]
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d001      	beq.n	80eb8 <Cl_Alarm_translate_sensor_values+0x60>
   80eb4:	4b7b      	ldr	r3, [pc, #492]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80eb6:	4798      	blx	r3
		ps1 =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   80eb8:	4b77      	ldr	r3, [pc, #476]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80eba:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
   80ebe:	4b73      	ldr	r3, [pc, #460]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ec0:	4610      	mov	r0, r2
   80ec2:	4798      	blx	r3
   80ec4:	4602      	mov	r2, r0
   80ec6:	4b78      	ldr	r3, [pc, #480]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ec8:	601a      	str	r2, [r3, #0]
   80eca:	e016      	b.n	80efa <Cl_Alarm_translate_sensor_values+0xa2>
		
	}
	else
	{
		ps1 = ((ps1* 49) + pressure_final_ps1)/50;
   80ecc:	4b76      	ldr	r3, [pc, #472]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ece:	681a      	ldr	r2, [r3, #0]
   80ed0:	4b76      	ldr	r3, [pc, #472]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80ed2:	4977      	ldr	r1, [pc, #476]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80ed4:	4610      	mov	r0, r2
   80ed6:	4798      	blx	r3
   80ed8:	4603      	mov	r3, r0
   80eda:	4618      	mov	r0, r3
   80edc:	4b75      	ldr	r3, [pc, #468]	; (810b4 <Cl_Alarm_translate_sensor_values+0x25c>)
   80ede:	681a      	ldr	r2, [r3, #0]
   80ee0:	4b75      	ldr	r3, [pc, #468]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80ee2:	4611      	mov	r1, r2
   80ee4:	4798      	blx	r3
   80ee6:	4603      	mov	r3, r0
   80ee8:	461a      	mov	r2, r3
   80eea:	4b74      	ldr	r3, [pc, #464]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80eec:	4974      	ldr	r1, [pc, #464]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80eee:	4610      	mov	r0, r2
   80ef0:	4798      	blx	r3
   80ef2:	4603      	mov	r3, r0
   80ef4:	461a      	mov	r2, r3
   80ef6:	4b6c      	ldr	r3, [pc, #432]	; (810a8 <Cl_Alarm_translate_sensor_values+0x250>)
   80ef8:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80efa:	4b63      	ldr	r3, [pc, #396]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80efc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80efe:	461a      	mov	r2, r3
   80f00:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f04:	fb03 f302 	mul.w	r3, r3, r2
   80f08:	2b00      	cmp	r3, #0
   80f0a:	da01      	bge.n	80f10 <Cl_Alarm_translate_sensor_values+0xb8>
   80f0c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f10:	131b      	asrs	r3, r3, #12
   80f12:	461a      	mov	r2, r3
   80f14:	4b5d      	ldr	r3, [pc, #372]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f16:	4610      	mov	r0, r2
   80f18:	4798      	blx	r3
   80f1a:	4603      	mov	r3, r0
   80f1c:	613b      	str	r3, [r7, #16]
	calibration_ps2(temp);
   80f1e:	4b5c      	ldr	r3, [pc, #368]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80f20:	6938      	ldr	r0, [r7, #16]
   80f22:	4798      	blx	r3
   80f24:	4603      	mov	r3, r0
   80f26:	b21b      	sxth	r3, r3
   80f28:	4618      	mov	r0, r3
   80f2a:	4b66      	ldr	r3, [pc, #408]	; (810c4 <Cl_Alarm_translate_sensor_values+0x26c>)
   80f2c:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS2STATUS].test_flag == true)
   80f2e:	4b5a      	ldr	r3, [pc, #360]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80f34:	2b00      	cmp	r3, #0
   80f36:	d015      	beq.n	80f64 <Cl_Alarm_translate_sensor_values+0x10c>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS2",5);
   80f38:	2205      	movs	r2, #5
   80f3a:	4963      	ldr	r1, [pc, #396]	; (810c8 <Cl_Alarm_translate_sensor_values+0x270>)
   80f3c:	2018      	movs	r0, #24
   80f3e:	4b58      	ldr	r3, [pc, #352]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80f40:	4798      	blx	r3
   80f42:	4603      	mov	r3, r0
   80f44:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80f46:	7dfb      	ldrb	r3, [r7, #23]
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d001      	beq.n	80f50 <Cl_Alarm_translate_sensor_values+0xf8>
   80f4c:	4b55      	ldr	r3, [pc, #340]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80f4e:	4798      	blx	r3
		ps2 =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   80f50:	4b51      	ldr	r3, [pc, #324]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80f52:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   80f56:	4b4d      	ldr	r3, [pc, #308]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80f58:	4610      	mov	r0, r2
   80f5a:	4798      	blx	r3
   80f5c:	4602      	mov	r2, r0
   80f5e:	4b5b      	ldr	r3, [pc, #364]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f60:	601a      	str	r2, [r3, #0]
   80f62:	e016      	b.n	80f92 <Cl_Alarm_translate_sensor_values+0x13a>
		
	}
	else
	{
		ps2 = ((ps2* 49) + pressure_final_ps2)/50;
   80f64:	4b59      	ldr	r3, [pc, #356]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f66:	681a      	ldr	r2, [r3, #0]
   80f68:	4b50      	ldr	r3, [pc, #320]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   80f6a:	4951      	ldr	r1, [pc, #324]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   80f6c:	4610      	mov	r0, r2
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	4618      	mov	r0, r3
   80f74:	4b56      	ldr	r3, [pc, #344]	; (810d0 <Cl_Alarm_translate_sensor_values+0x278>)
   80f76:	681a      	ldr	r2, [r3, #0]
   80f78:	4b4f      	ldr	r3, [pc, #316]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   80f7a:	4611      	mov	r1, r2
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	461a      	mov	r2, r3
   80f82:	4b4e      	ldr	r3, [pc, #312]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   80f84:	494e      	ldr	r1, [pc, #312]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   80f86:	4610      	mov	r0, r2
   80f88:	4798      	blx	r3
   80f8a:	4603      	mov	r3, r0
   80f8c:	461a      	mov	r2, r3
   80f8e:	4b4f      	ldr	r3, [pc, #316]	; (810cc <Cl_Alarm_translate_sensor_values+0x274>)
   80f90:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80f92:	4b3d      	ldr	r3, [pc, #244]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   80f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80f96:	461a      	mov	r2, r3
   80f98:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f9c:	fb03 f302 	mul.w	r3, r3, r2
   80fa0:	2b00      	cmp	r3, #0
   80fa2:	da01      	bge.n	80fa8 <Cl_Alarm_translate_sensor_values+0x150>
   80fa4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80fa8:	131b      	asrs	r3, r3, #12
   80faa:	461a      	mov	r2, r3
   80fac:	4b37      	ldr	r3, [pc, #220]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80fae:	4610      	mov	r0, r2
   80fb0:	4798      	blx	r3
   80fb2:	4603      	mov	r3, r0
   80fb4:	613b      	str	r3, [r7, #16]
	calibration_ps3(temp);
   80fb6:	4b36      	ldr	r3, [pc, #216]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   80fb8:	6938      	ldr	r0, [r7, #16]
   80fba:	4798      	blx	r3
   80fbc:	4603      	mov	r3, r0
   80fbe:	b21b      	sxth	r3, r3
   80fc0:	4618      	mov	r0, r3
   80fc2:	4b44      	ldr	r3, [pc, #272]	; (810d4 <Cl_Alarm_translate_sensor_values+0x27c>)
   80fc4:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS3STATUS].test_flag == true)
   80fc6:	4b34      	ldr	r3, [pc, #208]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d015      	beq.n	80ffc <Cl_Alarm_translate_sensor_values+0x1a4>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS3",5);
   80fd0:	2205      	movs	r2, #5
   80fd2:	4941      	ldr	r1, [pc, #260]	; (810d8 <Cl_Alarm_translate_sensor_values+0x280>)
   80fd4:	2018      	movs	r0, #24
   80fd6:	4b32      	ldr	r3, [pc, #200]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   80fd8:	4798      	blx	r3
   80fda:	4603      	mov	r3, r0
   80fdc:	75fb      	strb	r3, [r7, #23]
		ASSERT_ERROR(cl_alarm_retval);
   80fde:	7dfb      	ldrb	r3, [r7, #23]
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	d001      	beq.n	80fe8 <Cl_Alarm_translate_sensor_values+0x190>
   80fe4:	4b2f      	ldr	r3, [pc, #188]	; (810a4 <Cl_Alarm_translate_sensor_values+0x24c>)
   80fe6:	4798      	blx	r3
		ps3 =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;			
   80fe8:	4b2b      	ldr	r3, [pc, #172]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   80fea:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   80fee:	4b27      	ldr	r3, [pc, #156]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   80ff0:	4610      	mov	r0, r2
   80ff2:	4798      	blx	r3
   80ff4:	4602      	mov	r2, r0
   80ff6:	4b39      	ldr	r3, [pc, #228]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ff8:	601a      	str	r2, [r3, #0]
   80ffa:	e016      	b.n	8102a <Cl_Alarm_translate_sensor_values+0x1d2>
	}
	else
	{
		ps3 = ((ps3* 49) + pressure_final_ps3)/50;
   80ffc:	4b37      	ldr	r3, [pc, #220]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   80ffe:	681a      	ldr	r2, [r3, #0]
   81000:	4b2a      	ldr	r3, [pc, #168]	; (810ac <Cl_Alarm_translate_sensor_values+0x254>)
   81002:	492b      	ldr	r1, [pc, #172]	; (810b0 <Cl_Alarm_translate_sensor_values+0x258>)
   81004:	4610      	mov	r0, r2
   81006:	4798      	blx	r3
   81008:	4603      	mov	r3, r0
   8100a:	4618      	mov	r0, r3
   8100c:	4b34      	ldr	r3, [pc, #208]	; (810e0 <Cl_Alarm_translate_sensor_values+0x288>)
   8100e:	681a      	ldr	r2, [r3, #0]
   81010:	4b29      	ldr	r3, [pc, #164]	; (810b8 <Cl_Alarm_translate_sensor_values+0x260>)
   81012:	4611      	mov	r1, r2
   81014:	4798      	blx	r3
   81016:	4603      	mov	r3, r0
   81018:	461a      	mov	r2, r3
   8101a:	4b28      	ldr	r3, [pc, #160]	; (810bc <Cl_Alarm_translate_sensor_values+0x264>)
   8101c:	4928      	ldr	r1, [pc, #160]	; (810c0 <Cl_Alarm_translate_sensor_values+0x268>)
   8101e:	4610      	mov	r0, r2
   81020:	4798      	blx	r3
   81022:	4603      	mov	r3, r0
   81024:	461a      	mov	r2, r3
   81026:	4b2d      	ldr	r3, [pc, #180]	; (810dc <Cl_Alarm_translate_sensor_values+0x284>)
   81028:	601a      	str	r2, [r3, #0]
	}
				
	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   8102a:	4b17      	ldr	r3, [pc, #92]	; (81088 <Cl_Alarm_translate_sensor_values+0x230>)
   8102c:	8a1b      	ldrh	r3, [r3, #16]
   8102e:	461a      	mov	r2, r3
   81030:	f640 43e4 	movw	r3, #3300	; 0xce4
   81034:	fb03 f302 	mul.w	r3, r3, r2
   81038:	2b00      	cmp	r3, #0
   8103a:	da01      	bge.n	81040 <Cl_Alarm_translate_sensor_values+0x1e8>
   8103c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81040:	131b      	asrs	r3, r3, #12
   81042:	461a      	mov	r2, r3
   81044:	4b11      	ldr	r3, [pc, #68]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   81046:	4610      	mov	r0, r2
   81048:	4798      	blx	r3
   8104a:	4603      	mov	r3, r0
   8104c:	613b      	str	r3, [r7, #16]
	calibration_apt(temp);
   8104e:	4b10      	ldr	r3, [pc, #64]	; (81090 <Cl_Alarm_translate_sensor_values+0x238>)
   81050:	6938      	ldr	r0, [r7, #16]
   81052:	4798      	blx	r3
   81054:	4603      	mov	r3, r0
   81056:	b21b      	sxth	r3, r3
   81058:	4618      	mov	r0, r3
   8105a:	4b22      	ldr	r3, [pc, #136]	; (810e4 <Cl_Alarm_translate_sensor_values+0x28c>)
   8105c:	4798      	blx	r3
	if(test_sensor_status[SENSOR_APTSTATUS].test_flag == true)
   8105e:	4b0e      	ldr	r3, [pc, #56]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81060:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   81064:	2b00      	cmp	r3, #0
   81066:	d043      	beq.n	810f0 <Cl_Alarm_translate_sensor_values+0x298>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   81068:	2205      	movs	r2, #5
   8106a:	491f      	ldr	r1, [pc, #124]	; (810e8 <Cl_Alarm_translate_sensor_values+0x290>)
   8106c:	2018      	movs	r0, #24
   8106e:	4b0c      	ldr	r3, [pc, #48]	; (810a0 <Cl_Alarm_translate_sensor_values+0x248>)
   81070:	4798      	blx	r3
		apt =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   81072:	4b09      	ldr	r3, [pc, #36]	; (81098 <Cl_Alarm_translate_sensor_values+0x240>)
   81074:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   81078:	4b04      	ldr	r3, [pc, #16]	; (8108c <Cl_Alarm_translate_sensor_values+0x234>)
   8107a:	4610      	mov	r0, r2
   8107c:	4798      	blx	r3
   8107e:	4602      	mov	r2, r0
   81080:	4b1a      	ldr	r3, [pc, #104]	; (810ec <Cl_Alarm_translate_sensor_values+0x294>)
   81082:	601a      	str	r2, [r3, #0]
   81084:	e04b      	b.n	8111e <Cl_Alarm_translate_sensor_values+0x2c6>
   81086:	bf00      	nop
   81088:	20072e18 	.word	0x20072e18
   8108c:	000a33a9 	.word	0x000a33a9
   81090:	000a37dd 	.word	0x000a37dd
   81094:	000843d5 	.word	0x000843d5
   81098:	200730fc 	.word	0x200730fc
   8109c:	000a5414 	.word	0x000a5414
   810a0:	0009926d 	.word	0x0009926d
   810a4:	0008870d 	.word	0x0008870d
   810a8:	20071618 	.word	0x20071618
   810ac:	000a3451 	.word	0x000a3451
   810b0:	42440000 	.word	0x42440000
   810b4:	20071660 	.word	0x20071660
   810b8:	000a3241 	.word	0x000a3241
   810bc:	000a35b9 	.word	0x000a35b9
   810c0:	42480000 	.word	0x42480000
   810c4:	000844e5 	.word	0x000844e5
   810c8:	000a541c 	.word	0x000a541c
   810cc:	2007161c 	.word	0x2007161c
   810d0:	20071664 	.word	0x20071664
   810d4:	000845f5 	.word	0x000845f5
   810d8:	000a5424 	.word	0x000a5424
   810dc:	20071620 	.word	0x20071620
   810e0:	20071668 	.word	0x20071668
   810e4:	000840d1 	.word	0x000840d1
   810e8:	000a542c 	.word	0x000a542c
   810ec:	20072cf0 	.word	0x20072cf0
	}
	else
	{
		apt = ((apt* 49) + pressure_final_apt)/50;
   810f0:	4b6d      	ldr	r3, [pc, #436]	; (812a8 <Cl_Alarm_translate_sensor_values+0x450>)
   810f2:	681a      	ldr	r2, [r3, #0]
   810f4:	4b6d      	ldr	r3, [pc, #436]	; (812ac <Cl_Alarm_translate_sensor_values+0x454>)
   810f6:	496e      	ldr	r1, [pc, #440]	; (812b0 <Cl_Alarm_translate_sensor_values+0x458>)
   810f8:	4610      	mov	r0, r2
   810fa:	4798      	blx	r3
   810fc:	4603      	mov	r3, r0
   810fe:	4618      	mov	r0, r3
   81100:	4b6c      	ldr	r3, [pc, #432]	; (812b4 <Cl_Alarm_translate_sensor_values+0x45c>)
   81102:	681a      	ldr	r2, [r3, #0]
   81104:	4b6c      	ldr	r3, [pc, #432]	; (812b8 <Cl_Alarm_translate_sensor_values+0x460>)
   81106:	4611      	mov	r1, r2
   81108:	4798      	blx	r3
   8110a:	4603      	mov	r3, r0
   8110c:	461a      	mov	r2, r3
   8110e:	4b6b      	ldr	r3, [pc, #428]	; (812bc <Cl_Alarm_translate_sensor_values+0x464>)
   81110:	496b      	ldr	r1, [pc, #428]	; (812c0 <Cl_Alarm_translate_sensor_values+0x468>)
   81112:	4610      	mov	r0, r2
   81114:	4798      	blx	r3
   81116:	4603      	mov	r3, r0
   81118:	461a      	mov	r2, r3
   8111a:	4b63      	ldr	r3, [pc, #396]	; (812a8 <Cl_Alarm_translate_sensor_values+0x450>)
   8111c:	601a      	str	r2, [r3, #0]
	}

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   8111e:	4b69      	ldr	r3, [pc, #420]	; (812c4 <Cl_Alarm_translate_sensor_values+0x46c>)
   81120:	8a5b      	ldrh	r3, [r3, #18]
   81122:	461a      	mov	r2, r3
   81124:	f640 43e4 	movw	r3, #3300	; 0xce4
   81128:	fb03 f302 	mul.w	r3, r3, r2
   8112c:	2b00      	cmp	r3, #0
   8112e:	da01      	bge.n	81134 <Cl_Alarm_translate_sensor_values+0x2dc>
   81130:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81134:	131b      	asrs	r3, r3, #12
   81136:	461a      	mov	r2, r3
   81138:	4b63      	ldr	r3, [pc, #396]	; (812c8 <Cl_Alarm_translate_sensor_values+0x470>)
   8113a:	4610      	mov	r0, r2
   8113c:	4798      	blx	r3
   8113e:	4603      	mov	r3, r0
   81140:	613b      	str	r3, [r7, #16]
	calibration_vpt(temp);
   81142:	4b62      	ldr	r3, [pc, #392]	; (812cc <Cl_Alarm_translate_sensor_values+0x474>)
   81144:	6938      	ldr	r0, [r7, #16]
   81146:	4798      	blx	r3
   81148:	4603      	mov	r3, r0
   8114a:	b21b      	sxth	r3, r3
   8114c:	4618      	mov	r0, r3
   8114e:	4b60      	ldr	r3, [pc, #384]	; (812d0 <Cl_Alarm_translate_sensor_values+0x478>)
   81150:	4798      	blx	r3
	if(test_sensor_status[SENSOR_VPTSTATUS].test_flag == true)
   81152:	4b60      	ldr	r3, [pc, #384]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   81154:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   81158:	2b00      	cmp	r3, #0
   8115a:	d00e      	beq.n	8117a <Cl_Alarm_translate_sensor_values+0x322>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   8115c:	2205      	movs	r2, #5
   8115e:	495e      	ldr	r1, [pc, #376]	; (812d8 <Cl_Alarm_translate_sensor_values+0x480>)
   81160:	2018      	movs	r0, #24
   81162:	4b5e      	ldr	r3, [pc, #376]	; (812dc <Cl_Alarm_translate_sensor_values+0x484>)
   81164:	4798      	blx	r3
		vpt =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   81166:	4b5b      	ldr	r3, [pc, #364]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   81168:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
   8116c:	4b56      	ldr	r3, [pc, #344]	; (812c8 <Cl_Alarm_translate_sensor_values+0x470>)
   8116e:	4610      	mov	r0, r2
   81170:	4798      	blx	r3
   81172:	4602      	mov	r2, r0
   81174:	4b5a      	ldr	r3, [pc, #360]	; (812e0 <Cl_Alarm_translate_sensor_values+0x488>)
   81176:	601a      	str	r2, [r3, #0]
   81178:	e016      	b.n	811a8 <Cl_Alarm_translate_sensor_values+0x350>
	}
	else
	{
		vpt = ((vpt* 49) + pressure_final_vpt)/50;
   8117a:	4b59      	ldr	r3, [pc, #356]	; (812e0 <Cl_Alarm_translate_sensor_values+0x488>)
   8117c:	681a      	ldr	r2, [r3, #0]
   8117e:	4b4b      	ldr	r3, [pc, #300]	; (812ac <Cl_Alarm_translate_sensor_values+0x454>)
   81180:	494b      	ldr	r1, [pc, #300]	; (812b0 <Cl_Alarm_translate_sensor_values+0x458>)
   81182:	4610      	mov	r0, r2
   81184:	4798      	blx	r3
   81186:	4603      	mov	r3, r0
   81188:	4618      	mov	r0, r3
   8118a:	4b56      	ldr	r3, [pc, #344]	; (812e4 <Cl_Alarm_translate_sensor_values+0x48c>)
   8118c:	681a      	ldr	r2, [r3, #0]
   8118e:	4b4a      	ldr	r3, [pc, #296]	; (812b8 <Cl_Alarm_translate_sensor_values+0x460>)
   81190:	4611      	mov	r1, r2
   81192:	4798      	blx	r3
   81194:	4603      	mov	r3, r0
   81196:	461a      	mov	r2, r3
   81198:	4b48      	ldr	r3, [pc, #288]	; (812bc <Cl_Alarm_translate_sensor_values+0x464>)
   8119a:	4949      	ldr	r1, [pc, #292]	; (812c0 <Cl_Alarm_translate_sensor_values+0x468>)
   8119c:	4610      	mov	r0, r2
   8119e:	4798      	blx	r3
   811a0:	4603      	mov	r3, r0
   811a2:	461a      	mov	r2, r3
   811a4:	4b4e      	ldr	r3, [pc, #312]	; (812e0 <Cl_Alarm_translate_sensor_values+0x488>)
   811a6:	601a      	str	r2, [r3, #0]
	}

// 	temp = cl_sys_statbuffer.Temp1status * 0.805;
// 	calibration_tmp(temp,TS1);
	if(test_sensor_status[SENSOR_TEMP1STATUS].test_flag == true)
   811a8:	4b4a      	ldr	r3, [pc, #296]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   811aa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   811ae:	2b00      	cmp	r3, #0
   811b0:	d00e      	beq.n	811d0 <Cl_Alarm_translate_sensor_values+0x378>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT1",7);
   811b2:	2207      	movs	r2, #7
   811b4:	494c      	ldr	r1, [pc, #304]	; (812e8 <Cl_Alarm_translate_sensor_values+0x490>)
   811b6:	2018      	movs	r0, #24
   811b8:	4b48      	ldr	r3, [pc, #288]	; (812dc <Cl_Alarm_translate_sensor_values+0x484>)
   811ba:	4798      	blx	r3
		temp1 =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   811bc:	4b45      	ldr	r3, [pc, #276]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   811be:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
   811c2:	4b41      	ldr	r3, [pc, #260]	; (812c8 <Cl_Alarm_translate_sensor_values+0x470>)
   811c4:	4610      	mov	r0, r2
   811c6:	4798      	blx	r3
   811c8:	4602      	mov	r2, r0
   811ca:	4b48      	ldr	r3, [pc, #288]	; (812ec <Cl_Alarm_translate_sensor_values+0x494>)
   811cc:	601a      	str	r2, [r3, #0]
   811ce:	e056      	b.n	8127e <Cl_Alarm_translate_sensor_values+0x426>
	}
	else
	{
		
		uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp1status)/(2*32768);
   811d0:	4b3c      	ldr	r3, [pc, #240]	; (812c4 <Cl_Alarm_translate_sensor_values+0x46c>)
   811d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   811d4:	461a      	mov	r2, r3
   811d6:	f649 5308 	movw	r3, #40200	; 0x9d08
   811da:	fb03 f302 	mul.w	r3, r3, r2
   811de:	2b00      	cmp	r3, #0
   811e0:	da02      	bge.n	811e8 <Cl_Alarm_translate_sensor_values+0x390>
   811e2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   811e6:	33ff      	adds	r3, #255	; 0xff
   811e8:	141b      	asrs	r3, r3, #16
   811ea:	81fb      	strh	r3, [r7, #14]
		res_temp_lookuptable(cal_data);
   811ec:	89fb      	ldrh	r3, [r7, #14]
   811ee:	4618      	mov	r0, r3
   811f0:	4b3f      	ldr	r3, [pc, #252]	; (812f0 <Cl_Alarm_translate_sensor_values+0x498>)
   811f2:	4798      	blx	r3
		
		uint16_t temp = res_temp_value/100;
   811f4:	4b3f      	ldr	r3, [pc, #252]	; (812f4 <Cl_Alarm_translate_sensor_values+0x49c>)
   811f6:	681a      	ldr	r2, [r3, #0]
   811f8:	4b30      	ldr	r3, [pc, #192]	; (812bc <Cl_Alarm_translate_sensor_values+0x464>)
   811fa:	493f      	ldr	r1, [pc, #252]	; (812f8 <Cl_Alarm_translate_sensor_values+0x4a0>)
   811fc:	4610      	mov	r0, r2
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	461a      	mov	r2, r3
   81204:	4b3d      	ldr	r3, [pc, #244]	; (812fc <Cl_Alarm_translate_sensor_values+0x4a4>)
   81206:	4610      	mov	r0, r2
   81208:	4798      	blx	r3
   8120a:	4603      	mov	r3, r0
   8120c:	81bb      	strh	r3, [r7, #12]
		temp = temp - 2.5- 0.25;
   8120e:	89ba      	ldrh	r2, [r7, #12]
   81210:	4b3b      	ldr	r3, [pc, #236]	; (81300 <Cl_Alarm_translate_sensor_values+0x4a8>)
   81212:	4610      	mov	r0, r2
   81214:	4798      	blx	r3
   81216:	4c3b      	ldr	r4, [pc, #236]	; (81304 <Cl_Alarm_translate_sensor_values+0x4ac>)
   81218:	f04f 0200 	mov.w	r2, #0
   8121c:	4b3a      	ldr	r3, [pc, #232]	; (81308 <Cl_Alarm_translate_sensor_values+0x4b0>)
   8121e:	47a0      	blx	r4
   81220:	4603      	mov	r3, r0
   81222:	460c      	mov	r4, r1
   81224:	4618      	mov	r0, r3
   81226:	4621      	mov	r1, r4
   81228:	4c36      	ldr	r4, [pc, #216]	; (81304 <Cl_Alarm_translate_sensor_values+0x4ac>)
   8122a:	f04f 0200 	mov.w	r2, #0
   8122e:	4b37      	ldr	r3, [pc, #220]	; (8130c <Cl_Alarm_translate_sensor_values+0x4b4>)
   81230:	47a0      	blx	r4
   81232:	4603      	mov	r3, r0
   81234:	460c      	mov	r4, r1
   81236:	4619      	mov	r1, r3
   81238:	4622      	mov	r2, r4
   8123a:	4b35      	ldr	r3, [pc, #212]	; (81310 <Cl_Alarm_translate_sensor_values+0x4b8>)
   8123c:	4608      	mov	r0, r1
   8123e:	4611      	mov	r1, r2
   81240:	4798      	blx	r3
   81242:	4603      	mov	r3, r0
   81244:	81bb      	strh	r3, [r7, #12]
								
		temp1 = ((temp1* 4) +temp)/5;
   81246:	4b29      	ldr	r3, [pc, #164]	; (812ec <Cl_Alarm_translate_sensor_values+0x494>)
   81248:	681a      	ldr	r2, [r3, #0]
   8124a:	4b18      	ldr	r3, [pc, #96]	; (812ac <Cl_Alarm_translate_sensor_values+0x454>)
   8124c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   81250:	4610      	mov	r0, r2
   81252:	4798      	blx	r3
   81254:	4603      	mov	r3, r0
   81256:	461c      	mov	r4, r3
   81258:	89ba      	ldrh	r2, [r7, #12]
   8125a:	4b1b      	ldr	r3, [pc, #108]	; (812c8 <Cl_Alarm_translate_sensor_values+0x470>)
   8125c:	4610      	mov	r0, r2
   8125e:	4798      	blx	r3
   81260:	4602      	mov	r2, r0
   81262:	4b15      	ldr	r3, [pc, #84]	; (812b8 <Cl_Alarm_translate_sensor_values+0x460>)
   81264:	4611      	mov	r1, r2
   81266:	4620      	mov	r0, r4
   81268:	4798      	blx	r3
   8126a:	4603      	mov	r3, r0
   8126c:	461a      	mov	r2, r3
   8126e:	4b13      	ldr	r3, [pc, #76]	; (812bc <Cl_Alarm_translate_sensor_values+0x464>)
   81270:	4928      	ldr	r1, [pc, #160]	; (81314 <Cl_Alarm_translate_sensor_values+0x4bc>)
   81272:	4610      	mov	r0, r2
   81274:	4798      	blx	r3
   81276:	4603      	mov	r3, r0
   81278:	461a      	mov	r2, r3
   8127a:	4b1c      	ldr	r3, [pc, #112]	; (812ec <Cl_Alarm_translate_sensor_values+0x494>)
   8127c:	601a      	str	r2, [r3, #0]
		//temp1=temp1*10;
	}
	

	if(test_sensor_status[SENSOR_TEMP2STATUS].test_flag == true)
   8127e:	4b15      	ldr	r3, [pc, #84]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   81280:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81284:	2b00      	cmp	r3, #0
   81286:	d04b      	beq.n	81320 <Cl_Alarm_translate_sensor_values+0x4c8>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT2",7);
   81288:	2207      	movs	r2, #7
   8128a:	4923      	ldr	r1, [pc, #140]	; (81318 <Cl_Alarm_translate_sensor_values+0x4c0>)
   8128c:	2018      	movs	r0, #24
   8128e:	4b13      	ldr	r3, [pc, #76]	; (812dc <Cl_Alarm_translate_sensor_values+0x484>)
   81290:	4798      	blx	r3
		temp2 =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   81292:	4b10      	ldr	r3, [pc, #64]	; (812d4 <Cl_Alarm_translate_sensor_values+0x47c>)
   81294:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
   81298:	4b0b      	ldr	r3, [pc, #44]	; (812c8 <Cl_Alarm_translate_sensor_values+0x470>)
   8129a:	4610      	mov	r0, r2
   8129c:	4798      	blx	r3
   8129e:	4602      	mov	r2, r0
   812a0:	4b1e      	ldr	r3, [pc, #120]	; (8131c <Cl_Alarm_translate_sensor_values+0x4c4>)
   812a2:	601a      	str	r2, [r3, #0]
   812a4:	e08c      	b.n	813c0 <Cl_Alarm_translate_sensor_values+0x568>
   812a6:	bf00      	nop
   812a8:	20072cf0 	.word	0x20072cf0
   812ac:	000a3451 	.word	0x000a3451
   812b0:	42440000 	.word	0x42440000
   812b4:	20072d64 	.word	0x20072d64
   812b8:	000a3241 	.word	0x000a3241
   812bc:	000a35b9 	.word	0x000a35b9
   812c0:	42480000 	.word	0x42480000
   812c4:	20072e18 	.word	0x20072e18
   812c8:	000a33a9 	.word	0x000a33a9
   812cc:	000a37dd 	.word	0x000a37dd
   812d0:	00084251 	.word	0x00084251
   812d4:	200730fc 	.word	0x200730fc
   812d8:	000a542c 	.word	0x000a542c
   812dc:	0009926d 	.word	0x0009926d
   812e0:	20071614 	.word	0x20071614
   812e4:	2007165c 	.word	0x2007165c
   812e8:	000a5434 	.word	0x000a5434
   812ec:	20071624 	.word	0x20071624
   812f0:	0008e531 	.word	0x0008e531
   812f4:	20072624 	.word	0x20072624
   812f8:	42c80000 	.word	0x42c80000
   812fc:	000a3829 	.word	0x000a3829
   81300:	000a2b05 	.word	0x000a2b05
   81304:	000a2869 	.word	0x000a2869
   81308:	40040000 	.word	0x40040000
   8130c:	3fd00000 	.word	0x3fd00000
   81310:	000a3155 	.word	0x000a3155
   81314:	40a00000 	.word	0x40a00000
   81318:	000a543c 	.word	0x000a543c
   8131c:	20071628 	.word	0x20071628
	}
	else
	{
				uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp2status)/(2*32768);
   81320:	4b67      	ldr	r3, [pc, #412]	; (814c0 <Cl_Alarm_translate_sensor_values+0x668>)
   81322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   81324:	461a      	mov	r2, r3
   81326:	f649 5308 	movw	r3, #40200	; 0x9d08
   8132a:	fb03 f302 	mul.w	r3, r3, r2
   8132e:	2b00      	cmp	r3, #0
   81330:	da02      	bge.n	81338 <Cl_Alarm_translate_sensor_values+0x4e0>
   81332:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   81336:	33ff      	adds	r3, #255	; 0xff
   81338:	141b      	asrs	r3, r3, #16
   8133a:	817b      	strh	r3, [r7, #10]
				res_temp_lookuptable(cal_data);
   8133c:	897b      	ldrh	r3, [r7, #10]
   8133e:	4618      	mov	r0, r3
   81340:	4b60      	ldr	r3, [pc, #384]	; (814c4 <Cl_Alarm_translate_sensor_values+0x66c>)
   81342:	4798      	blx	r3
				
				uint16_t temp = res_temp_value/100;
   81344:	4b60      	ldr	r3, [pc, #384]	; (814c8 <Cl_Alarm_translate_sensor_values+0x670>)
   81346:	681a      	ldr	r2, [r3, #0]
   81348:	4b60      	ldr	r3, [pc, #384]	; (814cc <Cl_Alarm_translate_sensor_values+0x674>)
   8134a:	4961      	ldr	r1, [pc, #388]	; (814d0 <Cl_Alarm_translate_sensor_values+0x678>)
   8134c:	4610      	mov	r0, r2
   8134e:	4798      	blx	r3
   81350:	4603      	mov	r3, r0
   81352:	461a      	mov	r2, r3
   81354:	4b5f      	ldr	r3, [pc, #380]	; (814d4 <Cl_Alarm_translate_sensor_values+0x67c>)
   81356:	4610      	mov	r0, r2
   81358:	4798      	blx	r3
   8135a:	4603      	mov	r3, r0
   8135c:	813b      	strh	r3, [r7, #8]

		
					temp = temp - 25+0.81;
   8135e:	893b      	ldrh	r3, [r7, #8]
   81360:	f1a3 0219 	sub.w	r2, r3, #25
   81364:	4b5c      	ldr	r3, [pc, #368]	; (814d8 <Cl_Alarm_translate_sensor_values+0x680>)
   81366:	4610      	mov	r0, r2
   81368:	4798      	blx	r3
   8136a:	4c5c      	ldr	r4, [pc, #368]	; (814dc <Cl_Alarm_translate_sensor_values+0x684>)
   8136c:	a350      	add	r3, pc, #320	; (adr r3, 814b0 <Cl_Alarm_translate_sensor_values+0x658>)
   8136e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81372:	47a0      	blx	r4
   81374:	4603      	mov	r3, r0
   81376:	460c      	mov	r4, r1
   81378:	4619      	mov	r1, r3
   8137a:	4622      	mov	r2, r4
   8137c:	4b58      	ldr	r3, [pc, #352]	; (814e0 <Cl_Alarm_translate_sensor_values+0x688>)
   8137e:	4608      	mov	r0, r1
   81380:	4611      	mov	r1, r2
   81382:	4798      	blx	r3
   81384:	4603      	mov	r3, r0
   81386:	813b      	strh	r3, [r7, #8]
	
				
				
				temp2 = ((temp2* 4) +temp)/5;
   81388:	4b56      	ldr	r3, [pc, #344]	; (814e4 <Cl_Alarm_translate_sensor_values+0x68c>)
   8138a:	681a      	ldr	r2, [r3, #0]
   8138c:	4b56      	ldr	r3, [pc, #344]	; (814e8 <Cl_Alarm_translate_sensor_values+0x690>)
   8138e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   81392:	4610      	mov	r0, r2
   81394:	4798      	blx	r3
   81396:	4603      	mov	r3, r0
   81398:	461c      	mov	r4, r3
   8139a:	893a      	ldrh	r2, [r7, #8]
   8139c:	4b53      	ldr	r3, [pc, #332]	; (814ec <Cl_Alarm_translate_sensor_values+0x694>)
   8139e:	4610      	mov	r0, r2
   813a0:	4798      	blx	r3
   813a2:	4602      	mov	r2, r0
   813a4:	4b52      	ldr	r3, [pc, #328]	; (814f0 <Cl_Alarm_translate_sensor_values+0x698>)
   813a6:	4611      	mov	r1, r2
   813a8:	4620      	mov	r0, r4
   813aa:	4798      	blx	r3
   813ac:	4603      	mov	r3, r0
   813ae:	461a      	mov	r2, r3
   813b0:	4b46      	ldr	r3, [pc, #280]	; (814cc <Cl_Alarm_translate_sensor_values+0x674>)
   813b2:	4950      	ldr	r1, [pc, #320]	; (814f4 <Cl_Alarm_translate_sensor_values+0x69c>)
   813b4:	4610      	mov	r0, r2
   813b6:	4798      	blx	r3
   813b8:	4603      	mov	r3, r0
   813ba:	461a      	mov	r2, r3
   813bc:	4b49      	ldr	r3, [pc, #292]	; (814e4 <Cl_Alarm_translate_sensor_values+0x68c>)
   813be:	601a      	str	r2, [r3, #0]
		//temp2=temp2*10;
	}

	if(test_sensor_status[SENSOR_TEMP3STATUS].test_flag == true)
   813c0:	4b4d      	ldr	r3, [pc, #308]	; (814f8 <Cl_Alarm_translate_sensor_values+0x6a0>)
   813c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   813c6:	2b00      	cmp	r3, #0
   813c8:	d00e      	beq.n	813e8 <Cl_Alarm_translate_sensor_values+0x590>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT3",7);
   813ca:	2207      	movs	r2, #7
   813cc:	494b      	ldr	r1, [pc, #300]	; (814fc <Cl_Alarm_translate_sensor_values+0x6a4>)
   813ce:	2018      	movs	r0, #24
   813d0:	4b4b      	ldr	r3, [pc, #300]	; (81500 <Cl_Alarm_translate_sensor_values+0x6a8>)
   813d2:	4798      	blx	r3
		temp3 =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   813d4:	4b48      	ldr	r3, [pc, #288]	; (814f8 <Cl_Alarm_translate_sensor_values+0x6a0>)
   813d6:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
   813da:	4b44      	ldr	r3, [pc, #272]	; (814ec <Cl_Alarm_translate_sensor_values+0x694>)
   813dc:	4610      	mov	r0, r2
   813de:	4798      	blx	r3
   813e0:	4602      	mov	r2, r0
   813e2:	4b48      	ldr	r3, [pc, #288]	; (81504 <Cl_Alarm_translate_sensor_values+0x6ac>)
   813e4:	601a      	str	r2, [r3, #0]
   813e6:	e04d      	b.n	81484 <Cl_Alarm_translate_sensor_values+0x62c>
	}
	else
	{
				uint16_t cal_data  = (402 *100* cl_sys_statbuffer.Temp3status)/(2*32768);
   813e8:	4b35      	ldr	r3, [pc, #212]	; (814c0 <Cl_Alarm_translate_sensor_values+0x668>)
   813ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   813ec:	461a      	mov	r2, r3
   813ee:	f649 5308 	movw	r3, #40200	; 0x9d08
   813f2:	fb03 f302 	mul.w	r3, r3, r2
   813f6:	2b00      	cmp	r3, #0
   813f8:	da02      	bge.n	81400 <Cl_Alarm_translate_sensor_values+0x5a8>
   813fa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   813fe:	33ff      	adds	r3, #255	; 0xff
   81400:	141b      	asrs	r3, r3, #16
   81402:	80fb      	strh	r3, [r7, #6]
				res_temp_lookuptable(cal_data);
   81404:	88fb      	ldrh	r3, [r7, #6]
   81406:	4618      	mov	r0, r3
   81408:	4b2e      	ldr	r3, [pc, #184]	; (814c4 <Cl_Alarm_translate_sensor_values+0x66c>)
   8140a:	4798      	blx	r3
				
				uint16_t temp = res_temp_value/100;
   8140c:	4b2e      	ldr	r3, [pc, #184]	; (814c8 <Cl_Alarm_translate_sensor_values+0x670>)
   8140e:	681a      	ldr	r2, [r3, #0]
   81410:	4b2e      	ldr	r3, [pc, #184]	; (814cc <Cl_Alarm_translate_sensor_values+0x674>)
   81412:	492f      	ldr	r1, [pc, #188]	; (814d0 <Cl_Alarm_translate_sensor_values+0x678>)
   81414:	4610      	mov	r0, r2
   81416:	4798      	blx	r3
   81418:	4603      	mov	r3, r0
   8141a:	461a      	mov	r2, r3
   8141c:	4b2d      	ldr	r3, [pc, #180]	; (814d4 <Cl_Alarm_translate_sensor_values+0x67c>)
   8141e:	4610      	mov	r0, r2
   81420:	4798      	blx	r3
   81422:	4603      	mov	r3, r0
   81424:	80bb      	strh	r3, [r7, #4]
				temp = temp - 0.4;
   81426:	88ba      	ldrh	r2, [r7, #4]
   81428:	4b2b      	ldr	r3, [pc, #172]	; (814d8 <Cl_Alarm_translate_sensor_values+0x680>)
   8142a:	4610      	mov	r0, r2
   8142c:	4798      	blx	r3
   8142e:	4c36      	ldr	r4, [pc, #216]	; (81508 <Cl_Alarm_translate_sensor_values+0x6b0>)
   81430:	a321      	add	r3, pc, #132	; (adr r3, 814b8 <Cl_Alarm_translate_sensor_values+0x660>)
   81432:	e9d3 2300 	ldrd	r2, r3, [r3]
   81436:	47a0      	blx	r4
   81438:	4603      	mov	r3, r0
   8143a:	460c      	mov	r4, r1
   8143c:	4619      	mov	r1, r3
   8143e:	4622      	mov	r2, r4
   81440:	4b27      	ldr	r3, [pc, #156]	; (814e0 <Cl_Alarm_translate_sensor_values+0x688>)
   81442:	4608      	mov	r0, r1
   81444:	4611      	mov	r1, r2
   81446:	4798      	blx	r3
   81448:	4603      	mov	r3, r0
   8144a:	80bb      	strh	r3, [r7, #4]
				
				temp3 = ((temp3* 4) +temp)/5;
   8144c:	4b2d      	ldr	r3, [pc, #180]	; (81504 <Cl_Alarm_translate_sensor_values+0x6ac>)
   8144e:	681a      	ldr	r2, [r3, #0]
   81450:	4b25      	ldr	r3, [pc, #148]	; (814e8 <Cl_Alarm_translate_sensor_values+0x690>)
   81452:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   81456:	4610      	mov	r0, r2
   81458:	4798      	blx	r3
   8145a:	4603      	mov	r3, r0
   8145c:	461c      	mov	r4, r3
   8145e:	88ba      	ldrh	r2, [r7, #4]
   81460:	4b22      	ldr	r3, [pc, #136]	; (814ec <Cl_Alarm_translate_sensor_values+0x694>)
   81462:	4610      	mov	r0, r2
   81464:	4798      	blx	r3
   81466:	4602      	mov	r2, r0
   81468:	4b21      	ldr	r3, [pc, #132]	; (814f0 <Cl_Alarm_translate_sensor_values+0x698>)
   8146a:	4611      	mov	r1, r2
   8146c:	4620      	mov	r0, r4
   8146e:	4798      	blx	r3
   81470:	4603      	mov	r3, r0
   81472:	461a      	mov	r2, r3
   81474:	4b15      	ldr	r3, [pc, #84]	; (814cc <Cl_Alarm_translate_sensor_values+0x674>)
   81476:	491f      	ldr	r1, [pc, #124]	; (814f4 <Cl_Alarm_translate_sensor_values+0x69c>)
   81478:	4610      	mov	r0, r2
   8147a:	4798      	blx	r3
   8147c:	4603      	mov	r3, r0
   8147e:	461a      	mov	r2, r3
   81480:	4b20      	ldr	r3, [pc, #128]	; (81504 <Cl_Alarm_translate_sensor_values+0x6ac>)
   81482:	601a      	str	r2, [r3, #0]
		//temp3=temp3*10;
	}
	

	
	if(test_sensor_status[SENSOR_COND_STATUS].test_flag == true)
   81484:	4b1c      	ldr	r3, [pc, #112]	; (814f8 <Cl_Alarm_translate_sensor_values+0x6a0>)
   81486:	7f9b      	ldrb	r3, [r3, #30]
   81488:	2b00      	cmp	r3, #0
   8148a:	d043      	beq.n	81514 <Cl_Alarm_translate_sensor_values+0x6bc>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTCOND",5);
   8148c:	2205      	movs	r2, #5
   8148e:	491f      	ldr	r1, [pc, #124]	; (8150c <Cl_Alarm_translate_sensor_values+0x6b4>)
   81490:	2018      	movs	r0, #24
   81492:	4b1b      	ldr	r3, [pc, #108]	; (81500 <Cl_Alarm_translate_sensor_values+0x6a8>)
   81494:	4798      	blx	r3
		cond_final =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   81496:	4b18      	ldr	r3, [pc, #96]	; (814f8 <Cl_Alarm_translate_sensor_values+0x6a0>)
   81498:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   8149c:	4b13      	ldr	r3, [pc, #76]	; (814ec <Cl_Alarm_translate_sensor_values+0x694>)
   8149e:	4610      	mov	r0, r2
   814a0:	4798      	blx	r3
   814a2:	4602      	mov	r2, r0
   814a4:	4b1a      	ldr	r3, [pc, #104]	; (81510 <Cl_Alarm_translate_sensor_values+0x6b8>)
   814a6:	601a      	str	r2, [r3, #0]
   814a8:	e0b9      	b.n	8161e <Cl_Alarm_translate_sensor_values+0x7c6>
   814aa:	bf00      	nop
   814ac:	f3af 8000 	nop.w
   814b0:	1eb851ec 	.word	0x1eb851ec
   814b4:	3fe9eb85 	.word	0x3fe9eb85
   814b8:	9999999a 	.word	0x9999999a
   814bc:	3fd99999 	.word	0x3fd99999
   814c0:	20072e18 	.word	0x20072e18
   814c4:	0008e531 	.word	0x0008e531
   814c8:	20072624 	.word	0x20072624
   814cc:	000a35b9 	.word	0x000a35b9
   814d0:	42c80000 	.word	0x42c80000
   814d4:	000a3829 	.word	0x000a3829
   814d8:	000a2b05 	.word	0x000a2b05
   814dc:	000a286d 	.word	0x000a286d
   814e0:	000a3155 	.word	0x000a3155
   814e4:	20071628 	.word	0x20071628
   814e8:	000a3451 	.word	0x000a3451
   814ec:	000a33a9 	.word	0x000a33a9
   814f0:	000a3241 	.word	0x000a3241
   814f4:	40a00000 	.word	0x40a00000
   814f8:	200730fc 	.word	0x200730fc
   814fc:	000a5444 	.word	0x000a5444
   81500:	0009926d 	.word	0x0009926d
   81504:	2007162c 	.word	0x2007162c
   81508:	000a2869 	.word	0x000a2869
   8150c:	000a544c 	.word	0x000a544c
   81510:	20071634 	.word	0x20071634
		
	}
	else
	{
		
		cond1 =  -0.0001 * cl_sys_statbuffer.cond_status * cl_sys_statbuffer.cond_status   + 0.36 * cl_sys_statbuffer.cond_status  - 38.39 ;
   81514:	4b4c      	ldr	r3, [pc, #304]	; (81648 <Cl_Alarm_translate_sensor_values+0x7f0>)
   81516:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   81518:	461a      	mov	r2, r3
   8151a:	4b4c      	ldr	r3, [pc, #304]	; (8164c <Cl_Alarm_translate_sensor_values+0x7f4>)
   8151c:	4610      	mov	r0, r2
   8151e:	4798      	blx	r3
   81520:	4c4b      	ldr	r4, [pc, #300]	; (81650 <Cl_Alarm_translate_sensor_values+0x7f8>)
   81522:	a341      	add	r3, pc, #260	; (adr r3, 81628 <Cl_Alarm_translate_sensor_values+0x7d0>)
   81524:	e9d3 2300 	ldrd	r2, r3, [r3]
   81528:	47a0      	blx	r4
   8152a:	4603      	mov	r3, r0
   8152c:	460c      	mov	r4, r1
   8152e:	461d      	mov	r5, r3
   81530:	4626      	mov	r6, r4
   81532:	4b45      	ldr	r3, [pc, #276]	; (81648 <Cl_Alarm_translate_sensor_values+0x7f0>)
   81534:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   81536:	461a      	mov	r2, r3
   81538:	4b44      	ldr	r3, [pc, #272]	; (8164c <Cl_Alarm_translate_sensor_values+0x7f4>)
   8153a:	4610      	mov	r0, r2
   8153c:	4798      	blx	r3
   8153e:	4602      	mov	r2, r0
   81540:	460b      	mov	r3, r1
   81542:	4c43      	ldr	r4, [pc, #268]	; (81650 <Cl_Alarm_translate_sensor_values+0x7f8>)
   81544:	4628      	mov	r0, r5
   81546:	4631      	mov	r1, r6
   81548:	47a0      	blx	r4
   8154a:	4603      	mov	r3, r0
   8154c:	460c      	mov	r4, r1
   8154e:	461d      	mov	r5, r3
   81550:	4626      	mov	r6, r4
   81552:	4b3d      	ldr	r3, [pc, #244]	; (81648 <Cl_Alarm_translate_sensor_values+0x7f0>)
   81554:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   81556:	461a      	mov	r2, r3
   81558:	4b3c      	ldr	r3, [pc, #240]	; (8164c <Cl_Alarm_translate_sensor_values+0x7f4>)
   8155a:	4610      	mov	r0, r2
   8155c:	4798      	blx	r3
   8155e:	4c3c      	ldr	r4, [pc, #240]	; (81650 <Cl_Alarm_translate_sensor_values+0x7f8>)
   81560:	a333      	add	r3, pc, #204	; (adr r3, 81630 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81562:	e9d3 2300 	ldrd	r2, r3, [r3]
   81566:	47a0      	blx	r4
   81568:	4603      	mov	r3, r0
   8156a:	460c      	mov	r4, r1
   8156c:	461a      	mov	r2, r3
   8156e:	4623      	mov	r3, r4
   81570:	4c38      	ldr	r4, [pc, #224]	; (81654 <Cl_Alarm_translate_sensor_values+0x7fc>)
   81572:	4628      	mov	r0, r5
   81574:	4631      	mov	r1, r6
   81576:	47a0      	blx	r4
   81578:	4603      	mov	r3, r0
   8157a:	460c      	mov	r4, r1
   8157c:	4618      	mov	r0, r3
   8157e:	4621      	mov	r1, r4
   81580:	4c35      	ldr	r4, [pc, #212]	; (81658 <Cl_Alarm_translate_sensor_values+0x800>)
   81582:	a32d      	add	r3, pc, #180	; (adr r3, 81638 <Cl_Alarm_translate_sensor_values+0x7e0>)
   81584:	e9d3 2300 	ldrd	r2, r3, [r3]
   81588:	47a0      	blx	r4
   8158a:	4603      	mov	r3, r0
   8158c:	460c      	mov	r4, r1
   8158e:	4619      	mov	r1, r3
   81590:	4622      	mov	r2, r4
   81592:	4b32      	ldr	r3, [pc, #200]	; (8165c <Cl_Alarm_translate_sensor_values+0x804>)
   81594:	4608      	mov	r0, r1
   81596:	4611      	mov	r1, r2
   81598:	4798      	blx	r3
   8159a:	4602      	mov	r2, r0
   8159c:	4b30      	ldr	r3, [pc, #192]	; (81660 <Cl_Alarm_translate_sensor_values+0x808>)
   8159e:	601a      	str	r2, [r3, #0]
		cond_final= (cond1/(1+(temp3-25.0)*0.020)/10);
   815a0:	4b2f      	ldr	r3, [pc, #188]	; (81660 <Cl_Alarm_translate_sensor_values+0x808>)
   815a2:	681a      	ldr	r2, [r3, #0]
   815a4:	4b2f      	ldr	r3, [pc, #188]	; (81664 <Cl_Alarm_translate_sensor_values+0x80c>)
   815a6:	4610      	mov	r0, r2
   815a8:	4798      	blx	r3
   815aa:	4605      	mov	r5, r0
   815ac:	460e      	mov	r6, r1
   815ae:	4b2e      	ldr	r3, [pc, #184]	; (81668 <Cl_Alarm_translate_sensor_values+0x810>)
   815b0:	681a      	ldr	r2, [r3, #0]
   815b2:	4b2c      	ldr	r3, [pc, #176]	; (81664 <Cl_Alarm_translate_sensor_values+0x80c>)
   815b4:	4610      	mov	r0, r2
   815b6:	4798      	blx	r3
   815b8:	4c27      	ldr	r4, [pc, #156]	; (81658 <Cl_Alarm_translate_sensor_values+0x800>)
   815ba:	f04f 0200 	mov.w	r2, #0
   815be:	4b2b      	ldr	r3, [pc, #172]	; (8166c <Cl_Alarm_translate_sensor_values+0x814>)
   815c0:	47a0      	blx	r4
   815c2:	4603      	mov	r3, r0
   815c4:	460c      	mov	r4, r1
   815c6:	4618      	mov	r0, r3
   815c8:	4621      	mov	r1, r4
   815ca:	4c21      	ldr	r4, [pc, #132]	; (81650 <Cl_Alarm_translate_sensor_values+0x7f8>)
   815cc:	a31c      	add	r3, pc, #112	; (adr r3, 81640 <Cl_Alarm_translate_sensor_values+0x7e8>)
   815ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   815d2:	47a0      	blx	r4
   815d4:	4603      	mov	r3, r0
   815d6:	460c      	mov	r4, r1
   815d8:	4618      	mov	r0, r3
   815da:	4621      	mov	r1, r4
   815dc:	4c1d      	ldr	r4, [pc, #116]	; (81654 <Cl_Alarm_translate_sensor_values+0x7fc>)
   815de:	f04f 0200 	mov.w	r2, #0
   815e2:	4b23      	ldr	r3, [pc, #140]	; (81670 <Cl_Alarm_translate_sensor_values+0x818>)
   815e4:	47a0      	blx	r4
   815e6:	4603      	mov	r3, r0
   815e8:	460c      	mov	r4, r1
   815ea:	461a      	mov	r2, r3
   815ec:	4623      	mov	r3, r4
   815ee:	4c21      	ldr	r4, [pc, #132]	; (81674 <Cl_Alarm_translate_sensor_values+0x81c>)
   815f0:	4628      	mov	r0, r5
   815f2:	4631      	mov	r1, r6
   815f4:	47a0      	blx	r4
   815f6:	4603      	mov	r3, r0
   815f8:	460c      	mov	r4, r1
   815fa:	4618      	mov	r0, r3
   815fc:	4621      	mov	r1, r4
   815fe:	4c1d      	ldr	r4, [pc, #116]	; (81674 <Cl_Alarm_translate_sensor_values+0x81c>)
   81600:	f04f 0200 	mov.w	r2, #0
   81604:	4b1c      	ldr	r3, [pc, #112]	; (81678 <Cl_Alarm_translate_sensor_values+0x820>)
   81606:	47a0      	blx	r4
   81608:	4603      	mov	r3, r0
   8160a:	460c      	mov	r4, r1
   8160c:	4619      	mov	r1, r3
   8160e:	4622      	mov	r2, r4
   81610:	4b12      	ldr	r3, [pc, #72]	; (8165c <Cl_Alarm_translate_sensor_values+0x804>)
   81612:	4608      	mov	r0, r1
   81614:	4611      	mov	r1, r2
   81616:	4798      	blx	r3
   81618:	4602      	mov	r2, r0
   8161a:	4b18      	ldr	r3, [pc, #96]	; (8167c <Cl_Alarm_translate_sensor_values+0x824>)
   8161c:	601a      	str	r2, [r3, #0]
// 		cond1 = ((cond1* 10) + cond_final_cs3)/11;
// 		cond_final= cond1/(1+(temp3-25.0)*0.021);
// 		cond_final=cond_final/10;
	}
	
}
   8161e:	bf00      	nop
   81620:	4618      	mov	r0, r3
   81622:	371c      	adds	r7, #28
   81624:	46bd      	mov	sp, r7
   81626:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81628:	eb1c432d 	.word	0xeb1c432d
   8162c:	bf1a36e2 	.word	0xbf1a36e2
   81630:	70a3d70a 	.word	0x70a3d70a
   81634:	3fd70a3d 	.word	0x3fd70a3d
   81638:	851eb852 	.word	0x851eb852
   8163c:	404331eb 	.word	0x404331eb
   81640:	47ae147b 	.word	0x47ae147b
   81644:	3f947ae1 	.word	0x3f947ae1
   81648:	20072e18 	.word	0x20072e18
   8164c:	000a2b05 	.word	0x000a2b05
   81650:	000a2bd1 	.word	0x000a2bd1
   81654:	000a286d 	.word	0x000a286d
   81658:	000a2869 	.word	0x000a2869
   8165c:	000a3195 	.word	0x000a3195
   81660:	20071630 	.word	0x20071630
   81664:	000a2b29 	.word	0x000a2b29
   81668:	2007162c 	.word	0x2007162c
   8166c:	40390000 	.word	0x40390000
   81670:	3ff00000 	.word	0x3ff00000
   81674:	000a2e25 	.word	0x000a2e25
   81678:	40240000 	.word	0x40240000
   8167c:	20071634 	.word	0x20071634

00081680 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   81680:	b580      	push	{r7, lr}
   81682:	b082      	sub	sp, #8
   81684:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   81686:	4ba2      	ldr	r3, [pc, #648]	; (81910 <Cl_alarms_scanforAlarms+0x290>)
   81688:	4798      	blx	r3
   8168a:	4603      	mov	r3, r0
   8168c:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   8168e:	79fb      	ldrb	r3, [r7, #7]
   81690:	2b00      	cmp	r3, #0
   81692:	d001      	beq.n	81698 <Cl_alarms_scanforAlarms+0x18>
   81694:	4b9f      	ldr	r3, [pc, #636]	; (81914 <Cl_alarms_scanforAlarms+0x294>)
   81696:	4798      	blx	r3
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   81698:	4b9f      	ldr	r3, [pc, #636]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8169a:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   8169e:	2b00      	cmp	r3, #0
   816a0:	d049      	beq.n	81736 <Cl_alarms_scanforAlarms+0xb6>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   816a2:	4b9d      	ldr	r3, [pc, #628]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816a4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   816a8:	2b01      	cmp	r3, #1
   816aa:	d104      	bne.n	816b6 <Cl_alarms_scanforAlarms+0x36>
   816ac:	4b9b      	ldr	r3, [pc, #620]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   816ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   816b2:	2b00      	cmp	r3, #0
   816b4:	d109      	bne.n	816ca <Cl_alarms_scanforAlarms+0x4a>
   816b6:	4b98      	ldr	r3, [pc, #608]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816b8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   816bc:	2b00      	cmp	r3, #0
   816be:	d134      	bne.n	8172a <Cl_alarms_scanforAlarms+0xaa>
   816c0:	4b96      	ldr	r3, [pc, #600]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   816c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   816c6:	2b00      	cmp	r3, #0
   816c8:	d12f      	bne.n	8172a <Cl_alarms_scanforAlarms+0xaa>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   816ca:	4b93      	ldr	r3, [pc, #588]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816cc:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   816d0:	2b01      	cmp	r3, #1
   816d2:	d02f      	beq.n	81734 <Cl_alarms_scanforAlarms+0xb4>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   816d4:	4b90      	ldr	r3, [pc, #576]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816d6:	2201      	movs	r2, #1
   816d8:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   816dc:	4b90      	ldr	r3, [pc, #576]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   816de:	781b      	ldrb	r3, [r3, #0]
   816e0:	4a8f      	ldr	r2, [pc, #572]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   816e2:	3301      	adds	r3, #1
   816e4:	00db      	lsls	r3, r3, #3
   816e6:	4413      	add	r3, r2
   816e8:	2229      	movs	r2, #41	; 0x29
   816ea:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   816ec:	4b8a      	ldr	r3, [pc, #552]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   816f2:	3301      	adds	r3, #1
   816f4:	b2da      	uxtb	r2, r3
   816f6:	4b88      	ldr	r3, [pc, #544]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   816f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   816fc:	4b89      	ldr	r3, [pc, #548]	; (81924 <Cl_alarms_scanforAlarms+0x2a4>)
   816fe:	2201      	movs	r2, #1
   81700:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   81702:	4b89      	ldr	r3, [pc, #548]	; (81928 <Cl_alarms_scanforAlarms+0x2a8>)
   81704:	2229      	movs	r2, #41	; 0x29
   81706:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81708:	4b85      	ldr	r3, [pc, #532]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   8170a:	781b      	ldrb	r3, [r3, #0]
   8170c:	461a      	mov	r2, r3
   8170e:	4b84      	ldr	r3, [pc, #528]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   81710:	4413      	add	r3, r2
   81712:	222e      	movs	r2, #46	; 0x2e
   81714:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81716:	4b85      	ldr	r3, [pc, #532]	; (8192c <Cl_alarms_scanforAlarms+0x2ac>)
   81718:	4798      	blx	r3
   8171a:	4603      	mov	r3, r0
   8171c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8171e:	79fb      	ldrb	r3, [r7, #7]
   81720:	2b00      	cmp	r3, #0
   81722:	d007      	beq.n	81734 <Cl_alarms_scanforAlarms+0xb4>
   81724:	4b7b      	ldr	r3, [pc, #492]	; (81914 <Cl_alarms_scanforAlarms+0x294>)
   81726:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81728:	e004      	b.n	81734 <Cl_alarms_scanforAlarms+0xb4>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   8172a:	4b7b      	ldr	r3, [pc, #492]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8172c:	2204      	movs	r2, #4
   8172e:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   81732:	e000      	b.n	81736 <Cl_alarms_scanforAlarms+0xb6>
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81734:	bf00      	nop
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   81736:	4b78      	ldr	r3, [pc, #480]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81738:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   8173c:	2b00      	cmp	r3, #0
   8173e:	d049      	beq.n	817d4 <Cl_alarms_scanforAlarms+0x154>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   81740:	4b75      	ldr	r3, [pc, #468]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81742:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81746:	2b01      	cmp	r3, #1
   81748:	d104      	bne.n	81754 <Cl_alarms_scanforAlarms+0xd4>
   8174a:	4b74      	ldr	r3, [pc, #464]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   8174c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81750:	2b00      	cmp	r3, #0
   81752:	d109      	bne.n	81768 <Cl_alarms_scanforAlarms+0xe8>
   81754:	4b70      	ldr	r3, [pc, #448]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81756:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   8175a:	2b00      	cmp	r3, #0
   8175c:	d134      	bne.n	817c8 <Cl_alarms_scanforAlarms+0x148>
   8175e:	4b6f      	ldr	r3, [pc, #444]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   81760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81764:	2b00      	cmp	r3, #0
   81766:	d12f      	bne.n	817c8 <Cl_alarms_scanforAlarms+0x148>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81768:	4b6b      	ldr	r3, [pc, #428]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8176a:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   8176e:	2b01      	cmp	r3, #1
   81770:	d02f      	beq.n	817d2 <Cl_alarms_scanforAlarms+0x152>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81772:	4b69      	ldr	r3, [pc, #420]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81774:	2201      	movs	r2, #1
   81776:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   8177a:	4b69      	ldr	r3, [pc, #420]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   8177c:	781b      	ldrb	r3, [r3, #0]
   8177e:	4a68      	ldr	r2, [pc, #416]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   81780:	3301      	adds	r3, #1
   81782:	00db      	lsls	r3, r3, #3
   81784:	4413      	add	r3, r2
   81786:	2229      	movs	r2, #41	; 0x29
   81788:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   8178a:	4b63      	ldr	r3, [pc, #396]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8178c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   81790:	3301      	adds	r3, #1
   81792:	b2da      	uxtb	r2, r3
   81794:	4b60      	ldr	r3, [pc, #384]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81796:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   8179a:	4b62      	ldr	r3, [pc, #392]	; (81924 <Cl_alarms_scanforAlarms+0x2a4>)
   8179c:	2201      	movs	r2, #1
   8179e:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   817a0:	4b61      	ldr	r3, [pc, #388]	; (81928 <Cl_alarms_scanforAlarms+0x2a8>)
   817a2:	222a      	movs	r2, #42	; 0x2a
   817a4:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   817a6:	4b5e      	ldr	r3, [pc, #376]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   817a8:	781b      	ldrb	r3, [r3, #0]
   817aa:	461a      	mov	r2, r3
   817ac:	4b5c      	ldr	r3, [pc, #368]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   817ae:	4413      	add	r3, r2
   817b0:	222e      	movs	r2, #46	; 0x2e
   817b2:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   817b4:	4b5d      	ldr	r3, [pc, #372]	; (8192c <Cl_alarms_scanforAlarms+0x2ac>)
   817b6:	4798      	blx	r3
   817b8:	4603      	mov	r3, r0
   817ba:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   817bc:	79fb      	ldrb	r3, [r7, #7]
   817be:	2b00      	cmp	r3, #0
   817c0:	d007      	beq.n	817d2 <Cl_alarms_scanforAlarms+0x152>
   817c2:	4b54      	ldr	r3, [pc, #336]	; (81914 <Cl_alarms_scanforAlarms+0x294>)
   817c4:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   817c6:	e004      	b.n	817d2 <Cl_alarms_scanforAlarms+0x152>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   817c8:	4b53      	ldr	r3, [pc, #332]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   817ca:	2204      	movs	r2, #4
   817cc:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   817d0:	e000      	b.n	817d4 <Cl_alarms_scanforAlarms+0x154>
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   817d2:	bf00      	nop
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   817d4:	4b50      	ldr	r3, [pc, #320]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   817d6:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   817da:	2b00      	cmp	r3, #0
   817dc:	d049      	beq.n	81872 <Cl_alarms_scanforAlarms+0x1f2>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   817de:	4b4e      	ldr	r3, [pc, #312]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   817e0:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   817e4:	2b01      	cmp	r3, #1
   817e6:	d104      	bne.n	817f2 <Cl_alarms_scanforAlarms+0x172>
   817e8:	4b4c      	ldr	r3, [pc, #304]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   817ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817ee:	2b00      	cmp	r3, #0
   817f0:	d109      	bne.n	81806 <Cl_alarms_scanforAlarms+0x186>
   817f2:	4b49      	ldr	r3, [pc, #292]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   817f4:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   817f8:	2b00      	cmp	r3, #0
   817fa:	d134      	bne.n	81866 <Cl_alarms_scanforAlarms+0x1e6>
   817fc:	4b47      	ldr	r3, [pc, #284]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   817fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81802:	2b00      	cmp	r3, #0
   81804:	d12f      	bne.n	81866 <Cl_alarms_scanforAlarms+0x1e6>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81806:	4b44      	ldr	r3, [pc, #272]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81808:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   8180c:	2b01      	cmp	r3, #1
   8180e:	d02f      	beq.n	81870 <Cl_alarms_scanforAlarms+0x1f0>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81810:	4b41      	ldr	r3, [pc, #260]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81812:	2201      	movs	r2, #1
   81814:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   81818:	4b41      	ldr	r3, [pc, #260]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   8181a:	781b      	ldrb	r3, [r3, #0]
   8181c:	4a40      	ldr	r2, [pc, #256]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   8181e:	3301      	adds	r3, #1
   81820:	00db      	lsls	r3, r3, #3
   81822:	4413      	add	r3, r2
   81824:	222b      	movs	r2, #43	; 0x2b
   81826:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   81828:	4b3b      	ldr	r3, [pc, #236]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8182a:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   8182e:	3301      	adds	r3, #1
   81830:	b2da      	uxtb	r2, r3
   81832:	4b39      	ldr	r3, [pc, #228]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81834:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   81838:	4b3a      	ldr	r3, [pc, #232]	; (81924 <Cl_alarms_scanforAlarms+0x2a4>)
   8183a:	2201      	movs	r2, #1
   8183c:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   8183e:	4b3a      	ldr	r3, [pc, #232]	; (81928 <Cl_alarms_scanforAlarms+0x2a8>)
   81840:	222b      	movs	r2, #43	; 0x2b
   81842:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81844:	4b36      	ldr	r3, [pc, #216]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   81846:	781b      	ldrb	r3, [r3, #0]
   81848:	461a      	mov	r2, r3
   8184a:	4b35      	ldr	r3, [pc, #212]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   8184c:	4413      	add	r3, r2
   8184e:	222e      	movs	r2, #46	; 0x2e
   81850:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81852:	4b36      	ldr	r3, [pc, #216]	; (8192c <Cl_alarms_scanforAlarms+0x2ac>)
   81854:	4798      	blx	r3
   81856:	4603      	mov	r3, r0
   81858:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8185a:	79fb      	ldrb	r3, [r7, #7]
   8185c:	2b00      	cmp	r3, #0
   8185e:	d007      	beq.n	81870 <Cl_alarms_scanforAlarms+0x1f0>
   81860:	4b2c      	ldr	r3, [pc, #176]	; (81914 <Cl_alarms_scanforAlarms+0x294>)
   81862:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81864:	e004      	b.n	81870 <Cl_alarms_scanforAlarms+0x1f0>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81866:	4b2c      	ldr	r3, [pc, #176]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81868:	2204      	movs	r2, #4
   8186a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   8186e:	e000      	b.n	81872 <Cl_alarms_scanforAlarms+0x1f2>
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81870:	bf00      	nop
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   81872:	4b29      	ldr	r3, [pc, #164]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81874:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81878:	2b00      	cmp	r3, #0
   8187a:	d05a      	beq.n	81932 <Cl_alarms_scanforAlarms+0x2b2>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   8187c:	4b26      	ldr	r3, [pc, #152]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   8187e:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81882:	2b01      	cmp	r3, #1
   81884:	d104      	bne.n	81890 <Cl_alarms_scanforAlarms+0x210>
   81886:	4b25      	ldr	r3, [pc, #148]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   81888:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8188c:	2b00      	cmp	r3, #0
   8188e:	d109      	bne.n	818a4 <Cl_alarms_scanforAlarms+0x224>
   81890:	4b21      	ldr	r3, [pc, #132]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81892:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81896:	2b00      	cmp	r3, #0
   81898:	d134      	bne.n	81904 <Cl_alarms_scanforAlarms+0x284>
   8189a:	4b20      	ldr	r3, [pc, #128]	; (8191c <Cl_alarms_scanforAlarms+0x29c>)
   8189c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   818a0:	2b00      	cmp	r3, #0
   818a2:	d12f      	bne.n	81904 <Cl_alarms_scanforAlarms+0x284>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   818a4:	4b1c      	ldr	r3, [pc, #112]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   818a6:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   818aa:	2b01      	cmp	r3, #1
   818ac:	d040      	beq.n	81930 <Cl_alarms_scanforAlarms+0x2b0>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   818ae:	4b1a      	ldr	r3, [pc, #104]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   818b0:	2201      	movs	r2, #1
   818b2:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   818b6:	4b1a      	ldr	r3, [pc, #104]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   818b8:	781b      	ldrb	r3, [r3, #0]
   818ba:	4a19      	ldr	r2, [pc, #100]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   818bc:	3301      	adds	r3, #1
   818be:	00db      	lsls	r3, r3, #3
   818c0:	4413      	add	r3, r2
   818c2:	222c      	movs	r2, #44	; 0x2c
   818c4:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   818c6:	4b14      	ldr	r3, [pc, #80]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   818c8:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   818cc:	3301      	adds	r3, #1
   818ce:	b2da      	uxtb	r2, r3
   818d0:	4b11      	ldr	r3, [pc, #68]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   818d2:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   818d6:	4b13      	ldr	r3, [pc, #76]	; (81924 <Cl_alarms_scanforAlarms+0x2a4>)
   818d8:	2201      	movs	r2, #1
   818da:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   818dc:	4b12      	ldr	r3, [pc, #72]	; (81928 <Cl_alarms_scanforAlarms+0x2a8>)
   818de:	222c      	movs	r2, #44	; 0x2c
   818e0:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   818e2:	4b0f      	ldr	r3, [pc, #60]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   818e4:	781b      	ldrb	r3, [r3, #0]
   818e6:	461a      	mov	r2, r3
   818e8:	4b0d      	ldr	r3, [pc, #52]	; (81920 <Cl_alarms_scanforAlarms+0x2a0>)
   818ea:	4413      	add	r3, r2
   818ec:	222e      	movs	r2, #46	; 0x2e
   818ee:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   818f0:	4b0e      	ldr	r3, [pc, #56]	; (8192c <Cl_alarms_scanforAlarms+0x2ac>)
   818f2:	4798      	blx	r3
   818f4:	4603      	mov	r3, r0
   818f6:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   818f8:	79fb      	ldrb	r3, [r7, #7]
   818fa:	2b00      	cmp	r3, #0
   818fc:	d018      	beq.n	81930 <Cl_alarms_scanforAlarms+0x2b0>
   818fe:	4b05      	ldr	r3, [pc, #20]	; (81914 <Cl_alarms_scanforAlarms+0x294>)
   81900:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81902:	e015      	b.n	81930 <Cl_alarms_scanforAlarms+0x2b0>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81904:	4b04      	ldr	r3, [pc, #16]	; (81918 <Cl_alarms_scanforAlarms+0x298>)
   81906:	2204      	movs	r2, #4
   81908:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   8190c:	e011      	b.n	81932 <Cl_alarms_scanforAlarms+0x2b2>
   8190e:	bf00      	nop
   81910:	00080e59 	.word	0x00080e59
   81914:	0008870d 	.word	0x0008870d
   81918:	200728d0 	.word	0x200728d0
   8191c:	20072e18 	.word	0x20072e18
   81920:	20072eb4 	.word	0x20072eb4
   81924:	20071611 	.word	0x20071611
   81928:	20072cf4 	.word	0x20072cf4
   8192c:	00082ec9 	.word	0x00082ec9
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81930:	bf00      	nop
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   81932:	4b95      	ldr	r3, [pc, #596]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81934:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   81938:	2b00      	cmp	r3, #0
   8193a:	d032      	beq.n	819a2 <Cl_alarms_scanforAlarms+0x322>
	{
		
		if(cl_sys_statbuffer.abdstatus)
   8193c:	4b93      	ldr	r3, [pc, #588]	; (81b8c <Cl_alarms_scanforAlarms+0x50c>)
   8193e:	8b1b      	ldrh	r3, [r3, #24]
   81940:	2b00      	cmp	r3, #0
   81942:	d02a      	beq.n	8199a <Cl_alarms_scanforAlarms+0x31a>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81944:	4b90      	ldr	r3, [pc, #576]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81946:	2201      	movs	r2, #1
   81948:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=ABD_EVENT; 
   8194c:	4b90      	ldr	r3, [pc, #576]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   8194e:	781b      	ldrb	r3, [r3, #0]
   81950:	4a8f      	ldr	r2, [pc, #572]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81952:	3301      	adds	r3, #1
   81954:	00db      	lsls	r3, r3, #3
   81956:	4413      	add	r3, r2
   81958:	2220      	movs	r2, #32
   8195a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   8195c:	4b8a      	ldr	r3, [pc, #552]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   8195e:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   81962:	3301      	adds	r3, #1
   81964:	b2da      	uxtb	r2, r3
   81966:	4b88      	ldr	r3, [pc, #544]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81968:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   8196c:	4b89      	ldr	r3, [pc, #548]	; (81b94 <Cl_alarms_scanforAlarms+0x514>)
   8196e:	2201      	movs	r2, #1
   81970:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   81972:	4b89      	ldr	r3, [pc, #548]	; (81b98 <Cl_alarms_scanforAlarms+0x518>)
   81974:	2220      	movs	r2, #32
   81976:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81978:	4b85      	ldr	r3, [pc, #532]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   8197a:	781b      	ldrb	r3, [r3, #0]
   8197c:	461a      	mov	r2, r3
   8197e:	4b84      	ldr	r3, [pc, #528]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81980:	4413      	add	r3, r2
   81982:	222e      	movs	r2, #46	; 0x2e
   81984:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81986:	4b85      	ldr	r3, [pc, #532]	; (81b9c <Cl_alarms_scanforAlarms+0x51c>)
   81988:	4798      	blx	r3
   8198a:	4603      	mov	r3, r0
   8198c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8198e:	79fb      	ldrb	r3, [r7, #7]
   81990:	2b00      	cmp	r3, #0
   81992:	d006      	beq.n	819a2 <Cl_alarms_scanforAlarms+0x322>
   81994:	4b82      	ldr	r3, [pc, #520]	; (81ba0 <Cl_alarms_scanforAlarms+0x520>)
   81996:	4798      	blx	r3
   81998:	e003      	b.n	819a2 <Cl_alarms_scanforAlarms+0x322>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   8199a:	4b7b      	ldr	r3, [pc, #492]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   8199c:	2204      	movs	r2, #4
   8199e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   819a2:	4b79      	ldr	r3, [pc, #484]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   819a4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   819a8:	2b00      	cmp	r3, #0
   819aa:	d032      	beq.n	81a12 <Cl_alarms_scanforAlarms+0x392>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   819ac:	4b77      	ldr	r3, [pc, #476]	; (81b8c <Cl_alarms_scanforAlarms+0x50c>)
   819ae:	8b5b      	ldrh	r3, [r3, #26]
   819b0:	2b00      	cmp	r3, #0
   819b2:	d02a      	beq.n	81a0a <Cl_alarms_scanforAlarms+0x38a>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   819b4:	4b74      	ldr	r3, [pc, #464]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   819b6:	2201      	movs	r2, #1
   819b8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BD_EVENT; 
   819bc:	4b74      	ldr	r3, [pc, #464]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   819be:	781b      	ldrb	r3, [r3, #0]
   819c0:	4a73      	ldr	r2, [pc, #460]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   819c2:	3301      	adds	r3, #1
   819c4:	00db      	lsls	r3, r3, #3
   819c6:	4413      	add	r3, r2
   819c8:	2221      	movs	r2, #33	; 0x21
   819ca:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   819cc:	4b6e      	ldr	r3, [pc, #440]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   819ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   819d2:	3301      	adds	r3, #1
   819d4:	b2da      	uxtb	r2, r3
   819d6:	4b6c      	ldr	r3, [pc, #432]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   819d8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   819dc:	4b6d      	ldr	r3, [pc, #436]	; (81b94 <Cl_alarms_scanforAlarms+0x514>)
   819de:	2201      	movs	r2, #1
   819e0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   819e2:	4b6d      	ldr	r3, [pc, #436]	; (81b98 <Cl_alarms_scanforAlarms+0x518>)
   819e4:	2221      	movs	r2, #33	; 0x21
   819e6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   819e8:	4b69      	ldr	r3, [pc, #420]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   819ea:	781b      	ldrb	r3, [r3, #0]
   819ec:	461a      	mov	r2, r3
   819ee:	4b68      	ldr	r3, [pc, #416]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   819f0:	4413      	add	r3, r2
   819f2:	222e      	movs	r2, #46	; 0x2e
   819f4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   819f6:	4b69      	ldr	r3, [pc, #420]	; (81b9c <Cl_alarms_scanforAlarms+0x51c>)
   819f8:	4798      	blx	r3
   819fa:	4603      	mov	r3, r0
   819fc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   819fe:	79fb      	ldrb	r3, [r7, #7]
   81a00:	2b00      	cmp	r3, #0
   81a02:	d006      	beq.n	81a12 <Cl_alarms_scanforAlarms+0x392>
   81a04:	4b66      	ldr	r3, [pc, #408]	; (81ba0 <Cl_alarms_scanforAlarms+0x520>)
   81a06:	4798      	blx	r3
   81a08:	e003      	b.n	81a12 <Cl_alarms_scanforAlarms+0x392>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81a0a:	4b5f      	ldr	r3, [pc, #380]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a0c:	2204      	movs	r2, #4
   81a0e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   81a12:	4b5d      	ldr	r3, [pc, #372]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a14:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d032      	beq.n	81a82 <Cl_alarms_scanforAlarms+0x402>
	{
				if(cl_sys_statbuffer.bldstatus)
   81a1c:	4b5b      	ldr	r3, [pc, #364]	; (81b8c <Cl_alarms_scanforAlarms+0x50c>)
   81a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   81a20:	2b00      	cmp	r3, #0
   81a22:	d02a      	beq.n	81a7a <Cl_alarms_scanforAlarms+0x3fa>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81a24:	4b58      	ldr	r3, [pc, #352]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a26:	2201      	movs	r2, #1
   81a28:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BLD_EVENT; 
   81a2c:	4b58      	ldr	r3, [pc, #352]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81a2e:	781b      	ldrb	r3, [r3, #0]
   81a30:	4a57      	ldr	r2, [pc, #348]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81a32:	3301      	adds	r3, #1
   81a34:	00db      	lsls	r3, r3, #3
   81a36:	4413      	add	r3, r2
   81a38:	2222      	movs	r2, #34	; 0x22
   81a3a:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   81a3c:	4b52      	ldr	r3, [pc, #328]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a3e:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   81a42:	3301      	adds	r3, #1
   81a44:	b2da      	uxtb	r2, r3
   81a46:	4b50      	ldr	r3, [pc, #320]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a48:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   81a4c:	4b51      	ldr	r3, [pc, #324]	; (81b94 <Cl_alarms_scanforAlarms+0x514>)
   81a4e:	2201      	movs	r2, #1
   81a50:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   81a52:	4b51      	ldr	r3, [pc, #324]	; (81b98 <Cl_alarms_scanforAlarms+0x518>)
   81a54:	2222      	movs	r2, #34	; 0x22
   81a56:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a58:	4b4d      	ldr	r3, [pc, #308]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81a5a:	781b      	ldrb	r3, [r3, #0]
   81a5c:	461a      	mov	r2, r3
   81a5e:	4b4c      	ldr	r3, [pc, #304]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81a60:	4413      	add	r3, r2
   81a62:	222e      	movs	r2, #46	; 0x2e
   81a64:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a66:	4b4d      	ldr	r3, [pc, #308]	; (81b9c <Cl_alarms_scanforAlarms+0x51c>)
   81a68:	4798      	blx	r3
   81a6a:	4603      	mov	r3, r0
   81a6c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81a6e:	79fb      	ldrb	r3, [r7, #7]
   81a70:	2b00      	cmp	r3, #0
   81a72:	d006      	beq.n	81a82 <Cl_alarms_scanforAlarms+0x402>
   81a74:	4b4a      	ldr	r3, [pc, #296]	; (81ba0 <Cl_alarms_scanforAlarms+0x520>)
   81a76:	4798      	blx	r3
   81a78:	e003      	b.n	81a82 <Cl_alarms_scanforAlarms+0x402>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81a7a:	4b43      	ldr	r3, [pc, #268]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a7c:	2204      	movs	r2, #4
   81a7e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   81a82:	4b41      	ldr	r3, [pc, #260]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81a84:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81a88:	2b00      	cmp	r3, #0
   81a8a:	d03d      	beq.n	81b08 <Cl_alarms_scanforAlarms+0x488>
	{
		
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   81a8c:	4b45      	ldr	r3, [pc, #276]	; (81ba4 <Cl_alarms_scanforAlarms+0x524>)
   81a8e:	689a      	ldr	r2, [r3, #8]
   81a90:	4b45      	ldr	r3, [pc, #276]	; (81ba8 <Cl_alarms_scanforAlarms+0x528>)
   81a92:	6819      	ldr	r1, [r3, #0]
   81a94:	4b45      	ldr	r3, [pc, #276]	; (81bac <Cl_alarms_scanforAlarms+0x52c>)
   81a96:	4610      	mov	r0, r2
   81a98:	4798      	blx	r3
   81a9a:	4603      	mov	r3, r0
   81a9c:	2b00      	cmp	r3, #0
   81a9e:	d02a      	beq.n	81af6 <Cl_alarms_scanforAlarms+0x476>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81aa0:	4b39      	ldr	r3, [pc, #228]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81aa2:	2201      	movs	r2, #1
   81aa4:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   81aa8:	4b39      	ldr	r3, [pc, #228]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81aaa:	781b      	ldrb	r3, [r3, #0]
   81aac:	4a38      	ldr	r2, [pc, #224]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81aae:	3301      	adds	r3, #1
   81ab0:	00db      	lsls	r3, r3, #3
   81ab2:	4413      	add	r3, r2
   81ab4:	2224      	movs	r2, #36	; 0x24
   81ab6:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   81ab8:	4b33      	ldr	r3, [pc, #204]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81aba:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   81abe:	3301      	adds	r3, #1
   81ac0:	b2da      	uxtb	r2, r3
   81ac2:	4b31      	ldr	r3, [pc, #196]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81ac4:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   81ac8:	4b32      	ldr	r3, [pc, #200]	; (81b94 <Cl_alarms_scanforAlarms+0x514>)
   81aca:	2201      	movs	r2, #1
   81acc:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   81ace:	4b32      	ldr	r3, [pc, #200]	; (81b98 <Cl_alarms_scanforAlarms+0x518>)
   81ad0:	2224      	movs	r2, #36	; 0x24
   81ad2:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ad4:	4b2e      	ldr	r3, [pc, #184]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81ad6:	781b      	ldrb	r3, [r3, #0]
   81ad8:	461a      	mov	r2, r3
   81ada:	4b2d      	ldr	r3, [pc, #180]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81adc:	4413      	add	r3, r2
   81ade:	222e      	movs	r2, #46	; 0x2e
   81ae0:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ae2:	4b2e      	ldr	r3, [pc, #184]	; (81b9c <Cl_alarms_scanforAlarms+0x51c>)
   81ae4:	4798      	blx	r3
   81ae6:	4603      	mov	r3, r0
   81ae8:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81aea:	79fb      	ldrb	r3, [r7, #7]
   81aec:	2b00      	cmp	r3, #0
   81aee:	d00b      	beq.n	81b08 <Cl_alarms_scanforAlarms+0x488>
   81af0:	4b2b      	ldr	r3, [pc, #172]	; (81ba0 <Cl_alarms_scanforAlarms+0x520>)
   81af2:	4798      	blx	r3
   81af4:	e008      	b.n	81b08 <Cl_alarms_scanforAlarms+0x488>
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81af6:	4b24      	ldr	r3, [pc, #144]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81af8:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   81afc:	2b01      	cmp	r3, #1
   81afe:	d103      	bne.n	81b08 <Cl_alarms_scanforAlarms+0x488>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81b00:	4b21      	ldr	r3, [pc, #132]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81b02:	2204      	movs	r2, #4
   81b04:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   81b08:	4b1f      	ldr	r3, [pc, #124]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81b0a:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   81b0e:	2b00      	cmp	r3, #0
   81b10:	d05d      	beq.n	81bce <Cl_alarms_scanforAlarms+0x54e>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
   81b12:	220b      	movs	r2, #11
   81b14:	4926      	ldr	r1, [pc, #152]	; (81bb0 <Cl_alarms_scanforAlarms+0x530>)
   81b16:	2018      	movs	r0, #24
   81b18:	4b26      	ldr	r3, [pc, #152]	; (81bb4 <Cl_alarms_scanforAlarms+0x534>)
   81b1a:	4798      	blx	r3
		if(apt < Cl_alarmThresholdTable.apt_low_threshold)
   81b1c:	4b21      	ldr	r3, [pc, #132]	; (81ba4 <Cl_alarms_scanforAlarms+0x524>)
   81b1e:	68da      	ldr	r2, [r3, #12]
   81b20:	4b21      	ldr	r3, [pc, #132]	; (81ba8 <Cl_alarms_scanforAlarms+0x528>)
   81b22:	6819      	ldr	r1, [r3, #0]
   81b24:	4b24      	ldr	r3, [pc, #144]	; (81bb8 <Cl_alarms_scanforAlarms+0x538>)
   81b26:	4610      	mov	r0, r2
   81b28:	4798      	blx	r3
   81b2a:	4603      	mov	r3, r0
   81b2c:	2b00      	cmp	r3, #0
   81b2e:	d045      	beq.n	81bbc <Cl_alarms_scanforAlarms+0x53c>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81b30:	4b15      	ldr	r3, [pc, #84]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81b32:	2201      	movs	r2, #1
   81b34:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81b38:	4b15      	ldr	r3, [pc, #84]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81b3a:	781b      	ldrb	r3, [r3, #0]
   81b3c:	4a14      	ldr	r2, [pc, #80]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81b3e:	3301      	adds	r3, #1
   81b40:	00db      	lsls	r3, r3, #3
   81b42:	4413      	add	r3, r2
   81b44:	2223      	movs	r2, #35	; 0x23
   81b46:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81b48:	4b0f      	ldr	r3, [pc, #60]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81b4a:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81b4e:	3301      	adds	r3, #1
   81b50:	b2da      	uxtb	r2, r3
   81b52:	4b0d      	ldr	r3, [pc, #52]	; (81b88 <Cl_alarms_scanforAlarms+0x508>)
   81b54:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81b58:	4b0e      	ldr	r3, [pc, #56]	; (81b94 <Cl_alarms_scanforAlarms+0x514>)
   81b5a:	2201      	movs	r2, #1
   81b5c:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81b5e:	4b0e      	ldr	r3, [pc, #56]	; (81b98 <Cl_alarms_scanforAlarms+0x518>)
   81b60:	2223      	movs	r2, #35	; 0x23
   81b62:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b64:	4b0a      	ldr	r3, [pc, #40]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81b66:	781b      	ldrb	r3, [r3, #0]
   81b68:	461a      	mov	r2, r3
   81b6a:	4b09      	ldr	r3, [pc, #36]	; (81b90 <Cl_alarms_scanforAlarms+0x510>)
   81b6c:	4413      	add	r3, r2
   81b6e:	222e      	movs	r2, #46	; 0x2e
   81b70:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81b72:	4b0a      	ldr	r3, [pc, #40]	; (81b9c <Cl_alarms_scanforAlarms+0x51c>)
   81b74:	4798      	blx	r3
   81b76:	4603      	mov	r3, r0
   81b78:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81b7a:	79fb      	ldrb	r3, [r7, #7]
   81b7c:	2b00      	cmp	r3, #0
   81b7e:	d026      	beq.n	81bce <Cl_alarms_scanforAlarms+0x54e>
   81b80:	4b07      	ldr	r3, [pc, #28]	; (81ba0 <Cl_alarms_scanforAlarms+0x520>)
   81b82:	4798      	blx	r3
   81b84:	e023      	b.n	81bce <Cl_alarms_scanforAlarms+0x54e>
   81b86:	bf00      	nop
   81b88:	200728d0 	.word	0x200728d0
   81b8c:	20072e18 	.word	0x20072e18
   81b90:	20072eb4 	.word	0x20072eb4
   81b94:	20071611 	.word	0x20071611
   81b98:	20072cf4 	.word	0x20072cf4
   81b9c:	00082ec9 	.word	0x00082ec9
   81ba0:	0008870d 	.word	0x0008870d
   81ba4:	20072cf8 	.word	0x20072cf8
   81ba8:	20072cf0 	.word	0x20072cf0
   81bac:	000a378d 	.word	0x000a378d
   81bb0:	000a5458 	.word	0x000a5458
   81bb4:	0009926d 	.word	0x0009926d
   81bb8:	000a37c9 	.word	0x000a37c9
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81bbc:	4b93      	ldr	r3, [pc, #588]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81bbe:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81bc2:	2b01      	cmp	r3, #1
   81bc4:	d103      	bne.n	81bce <Cl_alarms_scanforAlarms+0x54e>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81bc6:	4b91      	ldr	r3, [pc, #580]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81bc8:	2204      	movs	r2, #4
   81bca:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81bce:	4b8f      	ldr	r3, [pc, #572]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81bd0:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81bd4:	2b00      	cmp	r3, #0
   81bd6:	d047      	beq.n	81c68 <Cl_alarms_scanforAlarms+0x5e8>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81bd8:	2207      	movs	r2, #7
   81bda:	498d      	ldr	r1, [pc, #564]	; (81e10 <Cl_alarms_scanforAlarms+0x790>)
   81bdc:	2018      	movs	r0, #24
   81bde:	4b8d      	ldr	r3, [pc, #564]	; (81e14 <Cl_alarms_scanforAlarms+0x794>)
   81be0:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   81be2:	79fb      	ldrb	r3, [r7, #7]
   81be4:	2b00      	cmp	r3, #0
   81be6:	d001      	beq.n	81bec <Cl_alarms_scanforAlarms+0x56c>
   81be8:	4b8b      	ldr	r3, [pc, #556]	; (81e18 <Cl_alarms_scanforAlarms+0x798>)
   81bea:	4798      	blx	r3
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81bec:	4b8b      	ldr	r3, [pc, #556]	; (81e1c <Cl_alarms_scanforAlarms+0x79c>)
   81bee:	691a      	ldr	r2, [r3, #16]
   81bf0:	4b8b      	ldr	r3, [pc, #556]	; (81e20 <Cl_alarms_scanforAlarms+0x7a0>)
   81bf2:	6819      	ldr	r1, [r3, #0]
   81bf4:	4b8b      	ldr	r3, [pc, #556]	; (81e24 <Cl_alarms_scanforAlarms+0x7a4>)
   81bf6:	4610      	mov	r0, r2
   81bf8:	4798      	blx	r3
   81bfa:	4603      	mov	r3, r0
   81bfc:	2b00      	cmp	r3, #0
   81bfe:	d02a      	beq.n	81c56 <Cl_alarms_scanforAlarms+0x5d6>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81c00:	4b82      	ldr	r3, [pc, #520]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c02:	2201      	movs	r2, #1
   81c04:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81c08:	4b87      	ldr	r3, [pc, #540]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c0a:	781b      	ldrb	r3, [r3, #0]
   81c0c:	4a86      	ldr	r2, [pc, #536]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c0e:	3301      	adds	r3, #1
   81c10:	00db      	lsls	r3, r3, #3
   81c12:	4413      	add	r3, r2
   81c14:	2226      	movs	r2, #38	; 0x26
   81c16:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81c18:	4b7c      	ldr	r3, [pc, #496]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c1a:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   81c1e:	3301      	adds	r3, #1
   81c20:	b2da      	uxtb	r2, r3
   81c22:	4b7a      	ldr	r3, [pc, #488]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c24:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   81c28:	4b80      	ldr	r3, [pc, #512]	; (81e2c <Cl_alarms_scanforAlarms+0x7ac>)
   81c2a:	2201      	movs	r2, #1
   81c2c:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   81c2e:	4b80      	ldr	r3, [pc, #512]	; (81e30 <Cl_alarms_scanforAlarms+0x7b0>)
   81c30:	2226      	movs	r2, #38	; 0x26
   81c32:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c34:	4b7c      	ldr	r3, [pc, #496]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c36:	781b      	ldrb	r3, [r3, #0]
   81c38:	461a      	mov	r2, r3
   81c3a:	4b7b      	ldr	r3, [pc, #492]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c3c:	4413      	add	r3, r2
   81c3e:	222e      	movs	r2, #46	; 0x2e
   81c40:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81c42:	4b7c      	ldr	r3, [pc, #496]	; (81e34 <Cl_alarms_scanforAlarms+0x7b4>)
   81c44:	4798      	blx	r3
   81c46:	4603      	mov	r3, r0
   81c48:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81c4a:	79fb      	ldrb	r3, [r7, #7]
   81c4c:	2b00      	cmp	r3, #0
   81c4e:	d00b      	beq.n	81c68 <Cl_alarms_scanforAlarms+0x5e8>
   81c50:	4b71      	ldr	r3, [pc, #452]	; (81e18 <Cl_alarms_scanforAlarms+0x798>)
   81c52:	4798      	blx	r3
   81c54:	e008      	b.n	81c68 <Cl_alarms_scanforAlarms+0x5e8>
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81c56:	4b6d      	ldr	r3, [pc, #436]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81c5c:	2b01      	cmp	r3, #1
   81c5e:	d103      	bne.n	81c68 <Cl_alarms_scanforAlarms+0x5e8>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81c60:	4b6a      	ldr	r3, [pc, #424]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c62:	2204      	movs	r2, #4
   81c64:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   81c68:	4b68      	ldr	r3, [pc, #416]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c6a:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81c6e:	2b00      	cmp	r3, #0
   81c70:	d03d      	beq.n	81cee <Cl_alarms_scanforAlarms+0x66e>
	{
		
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   81c72:	4b6a      	ldr	r3, [pc, #424]	; (81e1c <Cl_alarms_scanforAlarms+0x79c>)
   81c74:	695a      	ldr	r2, [r3, #20]
   81c76:	4b6a      	ldr	r3, [pc, #424]	; (81e20 <Cl_alarms_scanforAlarms+0x7a0>)
   81c78:	6819      	ldr	r1, [r3, #0]
   81c7a:	4b6f      	ldr	r3, [pc, #444]	; (81e38 <Cl_alarms_scanforAlarms+0x7b8>)
   81c7c:	4610      	mov	r0, r2
   81c7e:	4798      	blx	r3
   81c80:	4603      	mov	r3, r0
   81c82:	2b00      	cmp	r3, #0
   81c84:	d02a      	beq.n	81cdc <Cl_alarms_scanforAlarms+0x65c>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81c86:	4b61      	ldr	r3, [pc, #388]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81c88:	2201      	movs	r2, #1
   81c8a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   81c8e:	4b66      	ldr	r3, [pc, #408]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c90:	781b      	ldrb	r3, [r3, #0]
   81c92:	4a65      	ldr	r2, [pc, #404]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81c94:	3301      	adds	r3, #1
   81c96:	00db      	lsls	r3, r3, #3
   81c98:	4413      	add	r3, r2
   81c9a:	2225      	movs	r2, #37	; 0x25
   81c9c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   81c9e:	4b5b      	ldr	r3, [pc, #364]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81ca0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81ca4:	3301      	adds	r3, #1
   81ca6:	b2da      	uxtb	r2, r3
   81ca8:	4b58      	ldr	r3, [pc, #352]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81caa:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   81cae:	4b5f      	ldr	r3, [pc, #380]	; (81e2c <Cl_alarms_scanforAlarms+0x7ac>)
   81cb0:	2201      	movs	r2, #1
   81cb2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   81cb4:	4b5e      	ldr	r3, [pc, #376]	; (81e30 <Cl_alarms_scanforAlarms+0x7b0>)
   81cb6:	2226      	movs	r2, #38	; 0x26
   81cb8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81cba:	4b5b      	ldr	r3, [pc, #364]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81cbc:	781b      	ldrb	r3, [r3, #0]
   81cbe:	461a      	mov	r2, r3
   81cc0:	4b59      	ldr	r3, [pc, #356]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81cc2:	4413      	add	r3, r2
   81cc4:	222e      	movs	r2, #46	; 0x2e
   81cc6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81cc8:	4b5a      	ldr	r3, [pc, #360]	; (81e34 <Cl_alarms_scanforAlarms+0x7b4>)
   81cca:	4798      	blx	r3
   81ccc:	4603      	mov	r3, r0
   81cce:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81cd0:	79fb      	ldrb	r3, [r7, #7]
   81cd2:	2b00      	cmp	r3, #0
   81cd4:	d00b      	beq.n	81cee <Cl_alarms_scanforAlarms+0x66e>
   81cd6:	4b50      	ldr	r3, [pc, #320]	; (81e18 <Cl_alarms_scanforAlarms+0x798>)
   81cd8:	4798      	blx	r3
   81cda:	e008      	b.n	81cee <Cl_alarms_scanforAlarms+0x66e>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81cdc:	4b4b      	ldr	r3, [pc, #300]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81cde:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   81ce2:	2b01      	cmp	r3, #1
   81ce4:	d103      	bne.n	81cee <Cl_alarms_scanforAlarms+0x66e>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81ce6:	4b49      	ldr	r3, [pc, #292]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81ce8:	2204      	movs	r2, #4
   81cea:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   81cee:	4b47      	ldr	r3, [pc, #284]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81cf0:	7f9b      	ldrb	r3, [r3, #30]
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d043      	beq.n	81d7e <Cl_alarms_scanforAlarms+0x6fe>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81cf6:	4b45      	ldr	r3, [pc, #276]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81cf8:	7c5b      	ldrb	r3, [r3, #17]
   81cfa:	2b01      	cmp	r3, #1
   81cfc:	d103      	bne.n	81d06 <Cl_alarms_scanforAlarms+0x686>
   81cfe:	4b4f      	ldr	r3, [pc, #316]	; (81e3c <Cl_alarms_scanforAlarms+0x7bc>)
   81d00:	781b      	ldrb	r3, [r3, #0]
   81d02:	2b00      	cmp	r3, #0
   81d04:	d10a      	bne.n	81d1c <Cl_alarms_scanforAlarms+0x69c>
   81d06:	4b41      	ldr	r3, [pc, #260]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d08:	7c5b      	ldrb	r3, [r3, #17]
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d132      	bne.n	81d74 <Cl_alarms_scanforAlarms+0x6f4>
   81d0e:	4b4b      	ldr	r3, [pc, #300]	; (81e3c <Cl_alarms_scanforAlarms+0x7bc>)
   81d10:	781b      	ldrb	r3, [r3, #0]
   81d12:	f083 0301 	eor.w	r3, r3, #1
   81d16:	b2db      	uxtb	r3, r3
   81d18:	2b00      	cmp	r3, #0
   81d1a:	d02b      	beq.n	81d74 <Cl_alarms_scanforAlarms+0x6f4>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81d1c:	4b3b      	ldr	r3, [pc, #236]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d1e:	7c9b      	ldrb	r3, [r3, #18]
   81d20:	2b01      	cmp	r3, #1
   81d22:	d02b      	beq.n	81d7c <Cl_alarms_scanforAlarms+0x6fc>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81d24:	4b39      	ldr	r3, [pc, #228]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d26:	2201      	movs	r2, #1
   81d28:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81d2a:	4b3f      	ldr	r3, [pc, #252]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81d2c:	781b      	ldrb	r3, [r3, #0]
   81d2e:	4a3e      	ldr	r2, [pc, #248]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81d30:	3301      	adds	r3, #1
   81d32:	00db      	lsls	r3, r3, #3
   81d34:	4413      	add	r3, r2
   81d36:	2201      	movs	r2, #1
   81d38:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81d3a:	4b34      	ldr	r3, [pc, #208]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d3c:	7f5b      	ldrb	r3, [r3, #29]
   81d3e:	3301      	adds	r3, #1
   81d40:	b2da      	uxtb	r2, r3
   81d42:	4b32      	ldr	r3, [pc, #200]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d44:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81d46:	4b39      	ldr	r3, [pc, #228]	; (81e2c <Cl_alarms_scanforAlarms+0x7ac>)
   81d48:	2201      	movs	r2, #1
   81d4a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   81d4c:	4b38      	ldr	r3, [pc, #224]	; (81e30 <Cl_alarms_scanforAlarms+0x7b0>)
   81d4e:	2201      	movs	r2, #1
   81d50:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d52:	4b35      	ldr	r3, [pc, #212]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81d54:	781b      	ldrb	r3, [r3, #0]
   81d56:	461a      	mov	r2, r3
   81d58:	4b33      	ldr	r3, [pc, #204]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81d5a:	4413      	add	r3, r2
   81d5c:	222e      	movs	r2, #46	; 0x2e
   81d5e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d60:	4b34      	ldr	r3, [pc, #208]	; (81e34 <Cl_alarms_scanforAlarms+0x7b4>)
   81d62:	4798      	blx	r3
   81d64:	4603      	mov	r3, r0
   81d66:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81d68:	79fb      	ldrb	r3, [r7, #7]
   81d6a:	2b00      	cmp	r3, #0
   81d6c:	d006      	beq.n	81d7c <Cl_alarms_scanforAlarms+0x6fc>
   81d6e:	4b2a      	ldr	r3, [pc, #168]	; (81e18 <Cl_alarms_scanforAlarms+0x798>)
   81d70:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81d72:	e003      	b.n	81d7c <Cl_alarms_scanforAlarms+0x6fc>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81d74:	4b25      	ldr	r3, [pc, #148]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d76:	2204      	movs	r2, #4
   81d78:	749a      	strb	r2, [r3, #18]
   81d7a:	e000      	b.n	81d7e <Cl_alarms_scanforAlarms+0x6fe>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81d7c:	bf00      	nop
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   81d7e:	4b23      	ldr	r3, [pc, #140]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81d84:	2b00      	cmp	r3, #0
   81d86:	d05f      	beq.n	81e48 <Cl_alarms_scanforAlarms+0x7c8>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81d88:	4b20      	ldr	r3, [pc, #128]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d8e:	2b01      	cmp	r3, #1
   81d90:	d104      	bne.n	81d9c <Cl_alarms_scanforAlarms+0x71c>
   81d92:	4b2a      	ldr	r3, [pc, #168]	; (81e3c <Cl_alarms_scanforAlarms+0x7bc>)
   81d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d98:	2b00      	cmp	r3, #0
   81d9a:	d10c      	bne.n	81db6 <Cl_alarms_scanforAlarms+0x736>
   81d9c:	4b1b      	ldr	r3, [pc, #108]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81da2:	2b00      	cmp	r3, #0
   81da4:	d14c      	bne.n	81e40 <Cl_alarms_scanforAlarms+0x7c0>
   81da6:	4b25      	ldr	r3, [pc, #148]	; (81e3c <Cl_alarms_scanforAlarms+0x7bc>)
   81da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81dac:	f083 0301 	eor.w	r3, r3, #1
   81db0:	b2db      	uxtb	r3, r3
   81db2:	2b00      	cmp	r3, #0
   81db4:	d044      	beq.n	81e40 <Cl_alarms_scanforAlarms+0x7c0>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81db6:	4b15      	ldr	r3, [pc, #84]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81db8:	2201      	movs	r2, #1
   81dba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   81dbe:	4b1a      	ldr	r3, [pc, #104]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81dc0:	781b      	ldrb	r3, [r3, #0]
   81dc2:	4a19      	ldr	r2, [pc, #100]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81dc4:	3301      	adds	r3, #1
   81dc6:	00db      	lsls	r3, r3, #3
   81dc8:	4413      	add	r3, r2
   81dca:	2203      	movs	r2, #3
   81dcc:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   81dce:	4b0f      	ldr	r3, [pc, #60]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81dd4:	3301      	adds	r3, #1
   81dd6:	b2da      	uxtb	r2, r3
   81dd8:	4b0c      	ldr	r3, [pc, #48]	; (81e0c <Cl_alarms_scanforAlarms+0x78c>)
   81dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   81dde:	4b13      	ldr	r3, [pc, #76]	; (81e2c <Cl_alarms_scanforAlarms+0x7ac>)
   81de0:	2201      	movs	r2, #1
   81de2:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81de4:	4b12      	ldr	r3, [pc, #72]	; (81e30 <Cl_alarms_scanforAlarms+0x7b0>)
   81de6:	2203      	movs	r2, #3
   81de8:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81dea:	4b0f      	ldr	r3, [pc, #60]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81dec:	781b      	ldrb	r3, [r3, #0]
   81dee:	461a      	mov	r2, r3
   81df0:	4b0d      	ldr	r3, [pc, #52]	; (81e28 <Cl_alarms_scanforAlarms+0x7a8>)
   81df2:	4413      	add	r3, r2
   81df4:	222e      	movs	r2, #46	; 0x2e
   81df6:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81df8:	4b0e      	ldr	r3, [pc, #56]	; (81e34 <Cl_alarms_scanforAlarms+0x7b4>)
   81dfa:	4798      	blx	r3
   81dfc:	4603      	mov	r3, r0
   81dfe:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81e00:	79fb      	ldrb	r3, [r7, #7]
   81e02:	2b00      	cmp	r3, #0
   81e04:	d020      	beq.n	81e48 <Cl_alarms_scanforAlarms+0x7c8>
   81e06:	4b04      	ldr	r3, [pc, #16]	; (81e18 <Cl_alarms_scanforAlarms+0x798>)
   81e08:	4798      	blx	r3
   81e0a:	e01d      	b.n	81e48 <Cl_alarms_scanforAlarms+0x7c8>
   81e0c:	200728d0 	.word	0x200728d0
   81e10:	000a5464 	.word	0x000a5464
   81e14:	0009926d 	.word	0x0009926d
   81e18:	0008870d 	.word	0x0008870d
   81e1c:	20072cf8 	.word	0x20072cf8
   81e20:	20071614 	.word	0x20071614
   81e24:	000a378d 	.word	0x000a378d
   81e28:	20072eb4 	.word	0x20072eb4
   81e2c:	20071611 	.word	0x20071611
   81e30:	20072cf4 	.word	0x20072cf4
   81e34:	00082ec9 	.word	0x00082ec9
   81e38:	000a37c9 	.word	0x000a37c9
   81e3c:	20072e18 	.word	0x20072e18
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   81e40:	4b96      	ldr	r3, [pc, #600]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e42:	2204      	movs	r2, #4
   81e44:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81e48:	4b94      	ldr	r3, [pc, #592]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e4a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81e4e:	2b00      	cmp	r3, #0
   81e50:	d045      	beq.n	81ede <Cl_alarms_scanforAlarms+0x85e>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81e52:	4b92      	ldr	r3, [pc, #584]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81e58:	2b01      	cmp	r3, #1
   81e5a:	d104      	bne.n	81e66 <Cl_alarms_scanforAlarms+0x7e6>
   81e5c:	4b90      	ldr	r3, [pc, #576]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e62:	2b00      	cmp	r3, #0
   81e64:	d10c      	bne.n	81e80 <Cl_alarms_scanforAlarms+0x800>
   81e66:	4b8d      	ldr	r3, [pc, #564]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81e6c:	2b00      	cmp	r3, #0
   81e6e:	d132      	bne.n	81ed6 <Cl_alarms_scanforAlarms+0x856>
   81e70:	4b8b      	ldr	r3, [pc, #556]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81e76:	f083 0301 	eor.w	r3, r3, #1
   81e7a:	b2db      	uxtb	r3, r3
   81e7c:	2b00      	cmp	r3, #0
   81e7e:	d02a      	beq.n	81ed6 <Cl_alarms_scanforAlarms+0x856>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81e80:	4b86      	ldr	r3, [pc, #536]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e82:	2201      	movs	r2, #1
   81e84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81e88:	4b86      	ldr	r3, [pc, #536]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81e8a:	781b      	ldrb	r3, [r3, #0]
   81e8c:	4a85      	ldr	r2, [pc, #532]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81e8e:	3301      	adds	r3, #1
   81e90:	00db      	lsls	r3, r3, #3
   81e92:	4413      	add	r3, r2
   81e94:	2203      	movs	r2, #3
   81e96:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81e98:	4b80      	ldr	r3, [pc, #512]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81e9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   81e9e:	3301      	adds	r3, #1
   81ea0:	b2da      	uxtb	r2, r3
   81ea2:	4b7e      	ldr	r3, [pc, #504]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81ea8:	4b7f      	ldr	r3, [pc, #508]	; (820a8 <Cl_alarms_scanforAlarms+0xa28>)
   81eaa:	2201      	movs	r2, #1
   81eac:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   81eae:	4b7f      	ldr	r3, [pc, #508]	; (820ac <Cl_alarms_scanforAlarms+0xa2c>)
   81eb0:	2205      	movs	r2, #5
   81eb2:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81eb4:	4b7b      	ldr	r3, [pc, #492]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81eb6:	781b      	ldrb	r3, [r3, #0]
   81eb8:	461a      	mov	r2, r3
   81eba:	4b7a      	ldr	r3, [pc, #488]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81ebc:	4413      	add	r3, r2
   81ebe:	222e      	movs	r2, #46	; 0x2e
   81ec0:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ec2:	4b7b      	ldr	r3, [pc, #492]	; (820b0 <Cl_alarms_scanforAlarms+0xa30>)
   81ec4:	4798      	blx	r3
   81ec6:	4603      	mov	r3, r0
   81ec8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81eca:	79fb      	ldrb	r3, [r7, #7]
   81ecc:	2b00      	cmp	r3, #0
   81ece:	d006      	beq.n	81ede <Cl_alarms_scanforAlarms+0x85e>
   81ed0:	4b78      	ldr	r3, [pc, #480]	; (820b4 <Cl_alarms_scanforAlarms+0xa34>)
   81ed2:	4798      	blx	r3
   81ed4:	e003      	b.n	81ede <Cl_alarms_scanforAlarms+0x85e>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81ed6:	4b71      	ldr	r3, [pc, #452]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81ed8:	2204      	movs	r2, #4
   81eda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   81ede:	4b6f      	ldr	r3, [pc, #444]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81ee0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d045      	beq.n	81f74 <Cl_alarms_scanforAlarms+0x8f4>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81ee8:	4b6c      	ldr	r3, [pc, #432]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81eee:	2b01      	cmp	r3, #1
   81ef0:	d104      	bne.n	81efc <Cl_alarms_scanforAlarms+0x87c>
   81ef2:	4b6b      	ldr	r3, [pc, #428]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81ef8:	2b00      	cmp	r3, #0
   81efa:	d10c      	bne.n	81f16 <Cl_alarms_scanforAlarms+0x896>
   81efc:	4b67      	ldr	r3, [pc, #412]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f02:	2b00      	cmp	r3, #0
   81f04:	d132      	bne.n	81f6c <Cl_alarms_scanforAlarms+0x8ec>
   81f06:	4b66      	ldr	r3, [pc, #408]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f0c:	f083 0301 	eor.w	r3, r3, #1
   81f10:	b2db      	uxtb	r3, r3
   81f12:	2b00      	cmp	r3, #0
   81f14:	d02a      	beq.n	81f6c <Cl_alarms_scanforAlarms+0x8ec>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81f16:	4b61      	ldr	r3, [pc, #388]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f18:	2201      	movs	r2, #1
   81f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81f1e:	4b61      	ldr	r3, [pc, #388]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81f20:	781b      	ldrb	r3, [r3, #0]
   81f22:	4a60      	ldr	r2, [pc, #384]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81f24:	3301      	adds	r3, #1
   81f26:	00db      	lsls	r3, r3, #3
   81f28:	4413      	add	r3, r2
   81f2a:	2204      	movs	r2, #4
   81f2c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81f2e:	4b5b      	ldr	r3, [pc, #364]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f30:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81f34:	3301      	adds	r3, #1
   81f36:	b2da      	uxtb	r2, r3
   81f38:	4b58      	ldr	r3, [pc, #352]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81f3e:	4b5a      	ldr	r3, [pc, #360]	; (820a8 <Cl_alarms_scanforAlarms+0xa28>)
   81f40:	2201      	movs	r2, #1
   81f42:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81f44:	4b59      	ldr	r3, [pc, #356]	; (820ac <Cl_alarms_scanforAlarms+0xa2c>)
   81f46:	2204      	movs	r2, #4
   81f48:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f4a:	4b56      	ldr	r3, [pc, #344]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81f4c:	781b      	ldrb	r3, [r3, #0]
   81f4e:	461a      	mov	r2, r3
   81f50:	4b54      	ldr	r3, [pc, #336]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81f52:	4413      	add	r3, r2
   81f54:	222e      	movs	r2, #46	; 0x2e
   81f56:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81f58:	4b55      	ldr	r3, [pc, #340]	; (820b0 <Cl_alarms_scanforAlarms+0xa30>)
   81f5a:	4798      	blx	r3
   81f5c:	4603      	mov	r3, r0
   81f5e:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81f60:	79fb      	ldrb	r3, [r7, #7]
   81f62:	2b00      	cmp	r3, #0
   81f64:	d006      	beq.n	81f74 <Cl_alarms_scanforAlarms+0x8f4>
   81f66:	4b53      	ldr	r3, [pc, #332]	; (820b4 <Cl_alarms_scanforAlarms+0xa34>)
   81f68:	4798      	blx	r3
   81f6a:	e003      	b.n	81f74 <Cl_alarms_scanforAlarms+0x8f4>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81f6c:	4b4b      	ldr	r3, [pc, #300]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f6e:	2204      	movs	r2, #4
   81f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81f74:	4b49      	ldr	r3, [pc, #292]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f76:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81f7a:	2b00      	cmp	r3, #0
   81f7c:	d045      	beq.n	8200a <Cl_alarms_scanforAlarms+0x98a>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81f7e:	4b47      	ldr	r3, [pc, #284]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f84:	2b01      	cmp	r3, #1
   81f86:	d104      	bne.n	81f92 <Cl_alarms_scanforAlarms+0x912>
   81f88:	4b45      	ldr	r3, [pc, #276]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81f8e:	2b00      	cmp	r3, #0
   81f90:	d10c      	bne.n	81fac <Cl_alarms_scanforAlarms+0x92c>
   81f92:	4b42      	ldr	r3, [pc, #264]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81f94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81f98:	2b00      	cmp	r3, #0
   81f9a:	d132      	bne.n	82002 <Cl_alarms_scanforAlarms+0x982>
   81f9c:	4b40      	ldr	r3, [pc, #256]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   81f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81fa2:	f083 0301 	eor.w	r3, r3, #1
   81fa6:	b2db      	uxtb	r3, r3
   81fa8:	2b00      	cmp	r3, #0
   81faa:	d02a      	beq.n	82002 <Cl_alarms_scanforAlarms+0x982>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81fac:	4b3b      	ldr	r3, [pc, #236]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81fae:	2201      	movs	r2, #1
   81fb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81fb4:	4b3b      	ldr	r3, [pc, #236]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81fb6:	781b      	ldrb	r3, [r3, #0]
   81fb8:	4a3a      	ldr	r2, [pc, #232]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81fba:	3301      	adds	r3, #1
   81fbc:	00db      	lsls	r3, r3, #3
   81fbe:	4413      	add	r3, r2
   81fc0:	2206      	movs	r2, #6
   81fc2:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81fc4:	4b35      	ldr	r3, [pc, #212]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81fc6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81fca:	3301      	adds	r3, #1
   81fcc:	b2da      	uxtb	r2, r3
   81fce:	4b33      	ldr	r3, [pc, #204]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   81fd0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81fd4:	4b34      	ldr	r3, [pc, #208]	; (820a8 <Cl_alarms_scanforAlarms+0xa28>)
   81fd6:	2201      	movs	r2, #1
   81fd8:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81fda:	4b34      	ldr	r3, [pc, #208]	; (820ac <Cl_alarms_scanforAlarms+0xa2c>)
   81fdc:	2206      	movs	r2, #6
   81fde:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81fe0:	4b30      	ldr	r3, [pc, #192]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81fe2:	781b      	ldrb	r3, [r3, #0]
   81fe4:	461a      	mov	r2, r3
   81fe6:	4b2f      	ldr	r3, [pc, #188]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   81fe8:	4413      	add	r3, r2
   81fea:	222e      	movs	r2, #46	; 0x2e
   81fec:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81fee:	4b30      	ldr	r3, [pc, #192]	; (820b0 <Cl_alarms_scanforAlarms+0xa30>)
   81ff0:	4798      	blx	r3
   81ff2:	4603      	mov	r3, r0
   81ff4:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81ff6:	79fb      	ldrb	r3, [r7, #7]
   81ff8:	2b00      	cmp	r3, #0
   81ffa:	d006      	beq.n	8200a <Cl_alarms_scanforAlarms+0x98a>
   81ffc:	4b2d      	ldr	r3, [pc, #180]	; (820b4 <Cl_alarms_scanforAlarms+0xa34>)
   81ffe:	4798      	blx	r3
   82000:	e003      	b.n	8200a <Cl_alarms_scanforAlarms+0x98a>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   82002:	4b26      	ldr	r3, [pc, #152]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   82004:	2204      	movs	r2, #4
   82006:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		}
		
		

	}
	if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   8200a:	4b24      	ldr	r3, [pc, #144]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   8200c:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   82010:	2b00      	cmp	r3, #0
   82012:	d060      	beq.n	820d6 <Cl_alarms_scanforAlarms+0xa56>
	{			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
				if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   82014:	4b22      	ldr	r3, [pc, #136]	; (820a0 <Cl_alarms_scanforAlarms+0xa20>)
   82016:	8b9b      	ldrh	r3, [r3, #28]
   82018:	2b01      	cmp	r3, #1
   8201a:	d14f      	bne.n	820bc <Cl_alarms_scanforAlarms+0xa3c>
   8201c:	4b26      	ldr	r3, [pc, #152]	; (820b8 <Cl_alarms_scanforAlarms+0xa38>)
   8201e:	f9b3 3000 	ldrsh.w	r3, [r3]
   82022:	2b00      	cmp	r3, #0
   82024:	d14a      	bne.n	820bc <Cl_alarms_scanforAlarms+0xa3c>
				{
				
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   82026:	4b1d      	ldr	r3, [pc, #116]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   82028:	2201      	movs	r2, #1
   8202a:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FPCURRENTSTATUS; 
   8202e:	4b1d      	ldr	r3, [pc, #116]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   82030:	781b      	ldrb	r3, [r3, #0]
   82032:	4a1c      	ldr	r2, [pc, #112]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   82034:	3301      	adds	r3, #1
   82036:	00db      	lsls	r3, r3, #3
   82038:	4413      	add	r3, r2
   8203a:	223c      	movs	r2, #60	; 0x3c
   8203c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   8203e:	4b17      	ldr	r3, [pc, #92]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   82040:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   82044:	3301      	adds	r3, #1
   82046:	b2da      	uxtb	r2, r3
   82048:	4b14      	ldr	r3, [pc, #80]	; (8209c <Cl_alarms_scanforAlarms+0xa1c>)
   8204a:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
					cl_alarm_triggered = true;	
   8204e:	4b16      	ldr	r3, [pc, #88]	; (820a8 <Cl_alarms_scanforAlarms+0xa28>)
   82050:	2201      	movs	r2, #1
   82052:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = FPCURRENTSTATUS;
   82054:	4b15      	ldr	r3, [pc, #84]	; (820ac <Cl_alarms_scanforAlarms+0xa2c>)
   82056:	223c      	movs	r2, #60	; 0x3c
   82058:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   8205a:	4b12      	ldr	r3, [pc, #72]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   8205c:	781b      	ldrb	r3, [r3, #0]
   8205e:	461a      	mov	r2, r3
   82060:	4b10      	ldr	r3, [pc, #64]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   82062:	4413      	add	r3, r2
   82064:	222d      	movs	r2, #45	; 0x2d
   82066:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82068:	4b11      	ldr	r3, [pc, #68]	; (820b0 <Cl_alarms_scanforAlarms+0xa30>)
   8206a:	4798      	blx	r3
   8206c:	4603      	mov	r3, r0
   8206e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82070:	79fb      	ldrb	r3, [r7, #7]
   82072:	2b00      	cmp	r3, #0
   82074:	d001      	beq.n	8207a <Cl_alarms_scanforAlarms+0x9fa>
   82076:	4b0f      	ldr	r3, [pc, #60]	; (820b4 <Cl_alarms_scanforAlarms+0xa34>)
   82078:	4798      	blx	r3
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   8207a:	4b0a      	ldr	r3, [pc, #40]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   8207c:	781b      	ldrb	r3, [r3, #0]
   8207e:	461a      	mov	r2, r3
   82080:	4b08      	ldr	r3, [pc, #32]	; (820a4 <Cl_alarms_scanforAlarms+0xa24>)
   82082:	4413      	add	r3, r2
   82084:	222f      	movs	r2, #47	; 0x2f
   82086:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82088:	4b09      	ldr	r3, [pc, #36]	; (820b0 <Cl_alarms_scanforAlarms+0xa30>)
   8208a:	4798      	blx	r3
   8208c:	4603      	mov	r3, r0
   8208e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82090:	79fb      	ldrb	r3, [r7, #7]
   82092:	2b00      	cmp	r3, #0
   82094:	d01a      	beq.n	820cc <Cl_alarms_scanforAlarms+0xa4c>
   82096:	4b07      	ldr	r3, [pc, #28]	; (820b4 <Cl_alarms_scanforAlarms+0xa34>)
   82098:	4798      	blx	r3
   8209a:	e017      	b.n	820cc <Cl_alarms_scanforAlarms+0xa4c>
   8209c:	200728d0 	.word	0x200728d0
   820a0:	20072e18 	.word	0x20072e18
   820a4:	20072eb4 	.word	0x20072eb4
   820a8:	20071611 	.word	0x20071611
   820ac:	20072cf4 	.word	0x20072cf4
   820b0:	00082ec9 	.word	0x00082ec9
   820b4:	0008870d 	.word	0x0008870d
   820b8:	20071612 	.word	0x20071612
					 
				}
				else
				{

						Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   820bc:	4b9b      	ldr	r3, [pc, #620]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   820be:	2204      	movs	r2, #4
   820c0:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
						Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   820c4:	4b99      	ldr	r3, [pc, #612]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   820c6:	2200      	movs	r2, #0
   820c8:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

						
				}
				FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   820cc:	4b98      	ldr	r3, [pc, #608]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   820ce:	8b9b      	ldrh	r3, [r3, #28]
   820d0:	b21a      	sxth	r2, r3
   820d2:	4b98      	ldr	r3, [pc, #608]	; (82334 <Cl_alarms_scanforAlarms+0xcb4>)
   820d4:	801a      	strh	r2, [r3, #0]
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   820d6:	4b96      	ldr	r3, [pc, #600]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   820d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   820da:	2b00      	cmp	r3, #0
   820dc:	d002      	beq.n	820e4 <Cl_alarms_scanforAlarms+0xa64>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   820de:	4b96      	ldr	r3, [pc, #600]	; (82338 <Cl_alarms_scanforAlarms+0xcb8>)
   820e0:	2201      	movs	r2, #1
   820e2:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   820e4:	4b92      	ldr	r3, [pc, #584]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   820e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   820e8:	2b00      	cmp	r3, #0
   820ea:	d102      	bne.n	820f2 <Cl_alarms_scanforAlarms+0xa72>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   820ec:	4b92      	ldr	r3, [pc, #584]	; (82338 <Cl_alarms_scanforAlarms+0xcb8>)
   820ee:	2202      	movs	r2, #2
   820f0:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   820f2:	4b8e      	ldr	r3, [pc, #568]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   820f4:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   820f8:	2b00      	cmp	r3, #0
   820fa:	d046      	beq.n	8218a <Cl_alarms_scanforAlarms+0xb0a>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   820fc:	4b8c      	ldr	r3, [pc, #560]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   820fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   82102:	2b00      	cmp	r3, #0
   82104:	d004      	beq.n	82110 <Cl_alarms_scanforAlarms+0xa90>
   82106:	4b89      	ldr	r3, [pc, #548]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82108:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   8210c:	2b01      	cmp	r3, #1
   8210e:	d00c      	beq.n	8212a <Cl_alarms_scanforAlarms+0xaaa>
   82110:	4b87      	ldr	r3, [pc, #540]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   82112:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   82116:	f083 0301 	eor.w	r3, r3, #1
   8211a:	b2db      	uxtb	r3, r3
   8211c:	2b00      	cmp	r3, #0
   8211e:	d034      	beq.n	8218a <Cl_alarms_scanforAlarms+0xb0a>
   82120:	4b82      	ldr	r3, [pc, #520]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82122:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   82126:	2b00      	cmp	r3, #0
   82128:	d12f      	bne.n	8218a <Cl_alarms_scanforAlarms+0xb0a>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   8212a:	4b80      	ldr	r3, [pc, #512]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8212c:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   82130:	2b01      	cmp	r3, #1
   82132:	d020      	beq.n	82176 <Cl_alarms_scanforAlarms+0xaf6>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   82134:	4b7d      	ldr	r3, [pc, #500]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82136:	2202      	movs	r2, #2
   82138:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   8213c:	4b7b      	ldr	r3, [pc, #492]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8213e:	2201      	movs	r2, #1
   82140:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   82144:	4b7d      	ldr	r3, [pc, #500]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82146:	781b      	ldrb	r3, [r3, #0]
   82148:	4a7c      	ldr	r2, [pc, #496]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   8214a:	3301      	adds	r3, #1
   8214c:	00db      	lsls	r3, r3, #3
   8214e:	4413      	add	r3, r2
   82150:	223d      	movs	r2, #61	; 0x3d
   82152:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   82154:	4b7a      	ldr	r3, [pc, #488]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   82156:	2201      	movs	r2, #1
   82158:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   8215a:	4b7a      	ldr	r3, [pc, #488]	; (82344 <Cl_alarms_scanforAlarms+0xcc4>)
   8215c:	223d      	movs	r2, #61	; 0x3d
   8215e:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82160:	4b76      	ldr	r3, [pc, #472]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82162:	781b      	ldrb	r3, [r3, #0]
   82164:	461a      	mov	r2, r3
   82166:	4b75      	ldr	r3, [pc, #468]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82168:	4413      	add	r3, r2
   8216a:	222e      	movs	r2, #46	; 0x2e
   8216c:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   8216e:	4b76      	ldr	r3, [pc, #472]	; (82348 <Cl_alarms_scanforAlarms+0xcc8>)
   82170:	2201      	movs	r2, #1
   82172:	701a      	strb	r2, [r3, #0]
   82174:	e006      	b.n	82184 <Cl_alarms_scanforAlarms+0xb04>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   82176:	4b6d      	ldr	r3, [pc, #436]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82178:	2200      	movs	r2, #0
   8217a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   8217e:	4b70      	ldr	r3, [pc, #448]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   82180:	2200      	movs	r2, #0
   82182:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   82184:	4b71      	ldr	r3, [pc, #452]	; (8234c <Cl_alarms_scanforAlarms+0xccc>)
   82186:	2200      	movs	r2, #0
   82188:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   8218a:	4b68      	ldr	r3, [pc, #416]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8218c:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82190:	2b00      	cmp	r3, #0
   82192:	d043      	beq.n	8221c <Cl_alarms_scanforAlarms+0xb9c>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   82194:	4b66      	ldr	r3, [pc, #408]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   82196:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8219a:	2b00      	cmp	r3, #0
   8219c:	d004      	beq.n	821a8 <Cl_alarms_scanforAlarms+0xb28>
   8219e:	4b63      	ldr	r3, [pc, #396]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821a0:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   821a4:	2b01      	cmp	r3, #1
   821a6:	d00c      	beq.n	821c2 <Cl_alarms_scanforAlarms+0xb42>
   821a8:	4b61      	ldr	r3, [pc, #388]	; (82330 <Cl_alarms_scanforAlarms+0xcb0>)
   821aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   821ae:	f083 0301 	eor.w	r3, r3, #1
   821b2:	b2db      	uxtb	r3, r3
   821b4:	2b00      	cmp	r3, #0
   821b6:	d031      	beq.n	8221c <Cl_alarms_scanforAlarms+0xb9c>
   821b8:	4b5c      	ldr	r3, [pc, #368]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821ba:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   821be:	2b00      	cmp	r3, #0
   821c0:	d12c      	bne.n	8221c <Cl_alarms_scanforAlarms+0xb9c>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   821c2:	4b5a      	ldr	r3, [pc, #360]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821c4:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   821c8:	2b01      	cmp	r3, #1
   821ca:	d01d      	beq.n	82208 <Cl_alarms_scanforAlarms+0xb88>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   821cc:	4b57      	ldr	r3, [pc, #348]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821ce:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   821d2:	2b00      	cmp	r3, #0
   821d4:	d01f      	beq.n	82216 <Cl_alarms_scanforAlarms+0xb96>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   821d6:	4b55      	ldr	r3, [pc, #340]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821d8:	2202      	movs	r2, #2
   821da:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   821de:	4b53      	ldr	r3, [pc, #332]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   821e0:	2201      	movs	r2, #1
   821e2:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   821e6:	4b56      	ldr	r3, [pc, #344]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   821e8:	2201      	movs	r2, #1
   821ea:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   821ec:	4b55      	ldr	r3, [pc, #340]	; (82344 <Cl_alarms_scanforAlarms+0xcc4>)
   821ee:	223e      	movs	r2, #62	; 0x3e
   821f0:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   821f2:	4b52      	ldr	r3, [pc, #328]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   821f4:	781b      	ldrb	r3, [r3, #0]
   821f6:	461a      	mov	r2, r3
   821f8:	4b50      	ldr	r3, [pc, #320]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   821fa:	4413      	add	r3, r2
   821fc:	222e      	movs	r2, #46	; 0x2e
   821fe:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   82200:	4b51      	ldr	r3, [pc, #324]	; (82348 <Cl_alarms_scanforAlarms+0xcc8>)
   82202:	2202      	movs	r2, #2
   82204:	701a      	strb	r2, [r3, #0]
   82206:	e006      	b.n	82216 <Cl_alarms_scanforAlarms+0xb96>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   82208:	4b48      	ldr	r3, [pc, #288]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8220a:	2200      	movs	r2, #0
   8220c:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   82210:	4b4b      	ldr	r3, [pc, #300]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   82212:	2200      	movs	r2, #0
   82214:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   82216:	4b4d      	ldr	r3, [pc, #308]	; (8234c <Cl_alarms_scanforAlarms+0xccc>)
   82218:	2201      	movs	r2, #1
   8221a:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   8221c:	4b43      	ldr	r3, [pc, #268]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8221e:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   82222:	2b00      	cmp	r3, #0
   82224:	d042      	beq.n	822ac <Cl_alarms_scanforAlarms+0xc2c>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82226:	4b41      	ldr	r3, [pc, #260]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82228:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   8222c:	2b01      	cmp	r3, #1
   8222e:	d034      	beq.n	8229a <Cl_alarms_scanforAlarms+0xc1a>
		{
				if(ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   82230:	4b47      	ldr	r3, [pc, #284]	; (82350 <Cl_alarms_scanforAlarms+0xcd0>)
   82232:	699a      	ldr	r2, [r3, #24]
   82234:	4b47      	ldr	r3, [pc, #284]	; (82354 <Cl_alarms_scanforAlarms+0xcd4>)
   82236:	6819      	ldr	r1, [r3, #0]
   82238:	4b47      	ldr	r3, [pc, #284]	; (82358 <Cl_alarms_scanforAlarms+0xcd8>)
   8223a:	4610      	mov	r0, r2
   8223c:	4798      	blx	r3
   8223e:	4603      	mov	r3, r0
   82240:	2b00      	cmp	r3, #0
   82242:	d033      	beq.n	822ac <Cl_alarms_scanforAlarms+0xc2c>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   82244:	4b39      	ldr	r3, [pc, #228]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82246:	2201      	movs	r2, #1
   82248:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   8224c:	4b3b      	ldr	r3, [pc, #236]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   8224e:	781b      	ldrb	r3, [r3, #0]
   82250:	4a3a      	ldr	r2, [pc, #232]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82252:	3301      	adds	r3, #1
   82254:	00db      	lsls	r3, r3, #3
   82256:	4413      	add	r3, r2
   82258:	2215      	movs	r2, #21
   8225a:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   8225c:	4b33      	ldr	r3, [pc, #204]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8225e:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   82262:	3301      	adds	r3, #1
   82264:	b2da      	uxtb	r2, r3
   82266:	4b31      	ldr	r3, [pc, #196]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   82268:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   8226c:	4b34      	ldr	r3, [pc, #208]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   8226e:	2201      	movs	r2, #1
   82270:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   82272:	4b34      	ldr	r3, [pc, #208]	; (82344 <Cl_alarms_scanforAlarms+0xcc4>)
   82274:	2215      	movs	r2, #21
   82276:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82278:	4b30      	ldr	r3, [pc, #192]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   8227a:	781b      	ldrb	r3, [r3, #0]
   8227c:	461a      	mov	r2, r3
   8227e:	4b2f      	ldr	r3, [pc, #188]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82280:	4413      	add	r3, r2
   82282:	222e      	movs	r2, #46	; 0x2e
   82284:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82286:	4b35      	ldr	r3, [pc, #212]	; (8235c <Cl_alarms_scanforAlarms+0xcdc>)
   82288:	4798      	blx	r3
   8228a:	4603      	mov	r3, r0
   8228c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8228e:	79fb      	ldrb	r3, [r7, #7]
   82290:	2b00      	cmp	r3, #0
   82292:	d00b      	beq.n	822ac <Cl_alarms_scanforAlarms+0xc2c>
   82294:	4b32      	ldr	r3, [pc, #200]	; (82360 <Cl_alarms_scanforAlarms+0xce0>)
   82296:	4798      	blx	r3
   82298:	e008      	b.n	822ac <Cl_alarms_scanforAlarms+0xc2c>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   8229a:	4b24      	ldr	r3, [pc, #144]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   8229c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   822a0:	2b01      	cmp	r3, #1
   822a2:	d103      	bne.n	822ac <Cl_alarms_scanforAlarms+0xc2c>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   822a4:	4b21      	ldr	r3, [pc, #132]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822a6:	2204      	movs	r2, #4
   822a8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   822ac:	4b1f      	ldr	r3, [pc, #124]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822ae:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   822b2:	2b00      	cmp	r3, #0
   822b4:	d061      	beq.n	8237a <Cl_alarms_scanforAlarms+0xcfa>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   822b6:	4b1d      	ldr	r3, [pc, #116]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822b8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   822bc:	2b01      	cmp	r3, #1
   822be:	d053      	beq.n	82368 <Cl_alarms_scanforAlarms+0xce8>
	{
		if(ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   822c0:	4b23      	ldr	r3, [pc, #140]	; (82350 <Cl_alarms_scanforAlarms+0xcd0>)
   822c2:	69da      	ldr	r2, [r3, #28]
   822c4:	4b23      	ldr	r3, [pc, #140]	; (82354 <Cl_alarms_scanforAlarms+0xcd4>)
   822c6:	6819      	ldr	r1, [r3, #0]
   822c8:	4b26      	ldr	r3, [pc, #152]	; (82364 <Cl_alarms_scanforAlarms+0xce4>)
   822ca:	4610      	mov	r0, r2
   822cc:	4798      	blx	r3
   822ce:	4603      	mov	r3, r0
   822d0:	2b00      	cmp	r3, #0
   822d2:	d052      	beq.n	8237a <Cl_alarms_scanforAlarms+0xcfa>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   822d4:	4b15      	ldr	r3, [pc, #84]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822d6:	2201      	movs	r2, #1
   822d8:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   822dc:	4b17      	ldr	r3, [pc, #92]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   822de:	781b      	ldrb	r3, [r3, #0]
   822e0:	4a16      	ldr	r2, [pc, #88]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   822e2:	3301      	adds	r3, #1
   822e4:	00db      	lsls	r3, r3, #3
   822e6:	4413      	add	r3, r2
   822e8:	2216      	movs	r2, #22
   822ea:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   822ec:	4b0f      	ldr	r3, [pc, #60]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822ee:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   822f2:	3301      	adds	r3, #1
   822f4:	b2da      	uxtb	r2, r3
   822f6:	4b0d      	ldr	r3, [pc, #52]	; (8232c <Cl_alarms_scanforAlarms+0xcac>)
   822f8:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   822fc:	4b10      	ldr	r3, [pc, #64]	; (82340 <Cl_alarms_scanforAlarms+0xcc0>)
   822fe:	2201      	movs	r2, #1
   82300:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   82302:	4b10      	ldr	r3, [pc, #64]	; (82344 <Cl_alarms_scanforAlarms+0xcc4>)
   82304:	2216      	movs	r2, #22
   82306:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82308:	4b0c      	ldr	r3, [pc, #48]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   8230a:	781b      	ldrb	r3, [r3, #0]
   8230c:	461a      	mov	r2, r3
   8230e:	4b0b      	ldr	r3, [pc, #44]	; (8233c <Cl_alarms_scanforAlarms+0xcbc>)
   82310:	4413      	add	r3, r2
   82312:	222e      	movs	r2, #46	; 0x2e
   82314:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82316:	4b11      	ldr	r3, [pc, #68]	; (8235c <Cl_alarms_scanforAlarms+0xcdc>)
   82318:	4798      	blx	r3
   8231a:	4603      	mov	r3, r0
   8231c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8231e:	79fb      	ldrb	r3, [r7, #7]
   82320:	2b00      	cmp	r3, #0
   82322:	d02a      	beq.n	8237a <Cl_alarms_scanforAlarms+0xcfa>
   82324:	4b0e      	ldr	r3, [pc, #56]	; (82360 <Cl_alarms_scanforAlarms+0xce0>)
   82326:	4798      	blx	r3
   82328:	e027      	b.n	8237a <Cl_alarms_scanforAlarms+0xcfa>
   8232a:	bf00      	nop
   8232c:	200728d0 	.word	0x200728d0
   82330:	20072e18 	.word	0x20072e18
   82334:	20071612 	.word	0x20071612
   82338:	20072690 	.word	0x20072690
   8233c:	20072eb4 	.word	0x20072eb4
   82340:	20071611 	.word	0x20071611
   82344:	20072cf4 	.word	0x20072cf4
   82348:	200726bc 	.word	0x200726bc
   8234c:	20070100 	.word	0x20070100
   82350:	20072cf8 	.word	0x20072cf8
   82354:	20071618 	.word	0x20071618
   82358:	000a378d 	.word	0x000a378d
   8235c:	00082ec9 	.word	0x00082ec9
   82360:	0008870d 	.word	0x0008870d
   82364:	000a37c9 	.word	0x000a37c9
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82368:	4b99      	ldr	r3, [pc, #612]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8236a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8236e:	2b01      	cmp	r3, #1
   82370:	d103      	bne.n	8237a <Cl_alarms_scanforAlarms+0xcfa>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82372:	4b97      	ldr	r3, [pc, #604]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82374:	2204      	movs	r2, #4
   82376:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   8237a:	4b95      	ldr	r3, [pc, #596]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8237c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   82380:	2b00      	cmp	r3, #0
   82382:	d042      	beq.n	8240a <Cl_alarms_scanforAlarms+0xd8a>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82384:	4b92      	ldr	r3, [pc, #584]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82386:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   8238a:	2b01      	cmp	r3, #1
   8238c:	d034      	beq.n	823f8 <Cl_alarms_scanforAlarms+0xd78>
				{
				if(ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   8238e:	4b91      	ldr	r3, [pc, #580]	; (825d4 <Cl_alarms_scanforAlarms+0xf54>)
   82390:	6a1a      	ldr	r2, [r3, #32]
   82392:	4b91      	ldr	r3, [pc, #580]	; (825d8 <Cl_alarms_scanforAlarms+0xf58>)
   82394:	6819      	ldr	r1, [r3, #0]
   82396:	4b91      	ldr	r3, [pc, #580]	; (825dc <Cl_alarms_scanforAlarms+0xf5c>)
   82398:	4610      	mov	r0, r2
   8239a:	4798      	blx	r3
   8239c:	4603      	mov	r3, r0
   8239e:	2b00      	cmp	r3, #0
   823a0:	d033      	beq.n	8240a <Cl_alarms_scanforAlarms+0xd8a>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   823a2:	4b8b      	ldr	r3, [pc, #556]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   823a4:	2201      	movs	r2, #1
   823a6:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   823aa:	4b8d      	ldr	r3, [pc, #564]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   823ac:	781b      	ldrb	r3, [r3, #0]
   823ae:	4a8c      	ldr	r2, [pc, #560]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   823b0:	3301      	adds	r3, #1
   823b2:	00db      	lsls	r3, r3, #3
   823b4:	4413      	add	r3, r2
   823b6:	2217      	movs	r2, #23
   823b8:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   823ba:	4b85      	ldr	r3, [pc, #532]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   823bc:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   823c0:	3301      	adds	r3, #1
   823c2:	b2da      	uxtb	r2, r3
   823c4:	4b82      	ldr	r3, [pc, #520]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   823c6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   823ca:	4b86      	ldr	r3, [pc, #536]	; (825e4 <Cl_alarms_scanforAlarms+0xf64>)
   823cc:	2201      	movs	r2, #1
   823ce:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   823d0:	4b85      	ldr	r3, [pc, #532]	; (825e8 <Cl_alarms_scanforAlarms+0xf68>)
   823d2:	2217      	movs	r2, #23
   823d4:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   823d6:	4b82      	ldr	r3, [pc, #520]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   823d8:	781b      	ldrb	r3, [r3, #0]
   823da:	461a      	mov	r2, r3
   823dc:	4b80      	ldr	r3, [pc, #512]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   823de:	4413      	add	r3, r2
   823e0:	222e      	movs	r2, #46	; 0x2e
   823e2:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   823e4:	4b81      	ldr	r3, [pc, #516]	; (825ec <Cl_alarms_scanforAlarms+0xf6c>)
   823e6:	4798      	blx	r3
   823e8:	4603      	mov	r3, r0
   823ea:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   823ec:	79fb      	ldrb	r3, [r7, #7]
   823ee:	2b00      	cmp	r3, #0
   823f0:	d00b      	beq.n	8240a <Cl_alarms_scanforAlarms+0xd8a>
   823f2:	4b7f      	ldr	r3, [pc, #508]	; (825f0 <Cl_alarms_scanforAlarms+0xf70>)
   823f4:	4798      	blx	r3
   823f6:	e008      	b.n	8240a <Cl_alarms_scanforAlarms+0xd8a>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   823f8:	4b75      	ldr	r3, [pc, #468]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   823fa:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   823fe:	2b01      	cmp	r3, #1
   82400:	d103      	bne.n	8240a <Cl_alarms_scanforAlarms+0xd8a>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82402:	4b73      	ldr	r3, [pc, #460]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82404:	2204      	movs	r2, #4
   82406:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   8240a:	4b71      	ldr	r3, [pc, #452]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8240c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   82410:	2b00      	cmp	r3, #0
   82412:	d042      	beq.n	8249a <Cl_alarms_scanforAlarms+0xe1a>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82414:	4b6e      	ldr	r3, [pc, #440]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82416:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8241a:	2b01      	cmp	r3, #1
   8241c:	d034      	beq.n	82488 <Cl_alarms_scanforAlarms+0xe08>
			{
				if(ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   8241e:	4b6d      	ldr	r3, [pc, #436]	; (825d4 <Cl_alarms_scanforAlarms+0xf54>)
   82420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   82422:	4b6d      	ldr	r3, [pc, #436]	; (825d8 <Cl_alarms_scanforAlarms+0xf58>)
   82424:	6819      	ldr	r1, [r3, #0]
   82426:	4b73      	ldr	r3, [pc, #460]	; (825f4 <Cl_alarms_scanforAlarms+0xf74>)
   82428:	4610      	mov	r0, r2
   8242a:	4798      	blx	r3
   8242c:	4603      	mov	r3, r0
   8242e:	2b00      	cmp	r3, #0
   82430:	d033      	beq.n	8249a <Cl_alarms_scanforAlarms+0xe1a>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82432:	4b67      	ldr	r3, [pc, #412]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82434:	2201      	movs	r2, #1
   82436:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   8243a:	4b69      	ldr	r3, [pc, #420]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   8243c:	781b      	ldrb	r3, [r3, #0]
   8243e:	4a68      	ldr	r2, [pc, #416]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   82440:	3301      	adds	r3, #1
   82442:	00db      	lsls	r3, r3, #3
   82444:	4413      	add	r3, r2
   82446:	2218      	movs	r2, #24
   82448:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   8244a:	4b61      	ldr	r3, [pc, #388]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8244c:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   82450:	3301      	adds	r3, #1
   82452:	b2da      	uxtb	r2, r3
   82454:	4b5e      	ldr	r3, [pc, #376]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82456:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   8245a:	4b62      	ldr	r3, [pc, #392]	; (825e4 <Cl_alarms_scanforAlarms+0xf64>)
   8245c:	2201      	movs	r2, #1
   8245e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   82460:	4b61      	ldr	r3, [pc, #388]	; (825e8 <Cl_alarms_scanforAlarms+0xf68>)
   82462:	2218      	movs	r2, #24
   82464:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82466:	4b5e      	ldr	r3, [pc, #376]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   82468:	781b      	ldrb	r3, [r3, #0]
   8246a:	461a      	mov	r2, r3
   8246c:	4b5c      	ldr	r3, [pc, #368]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   8246e:	4413      	add	r3, r2
   82470:	222e      	movs	r2, #46	; 0x2e
   82472:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82474:	4b5d      	ldr	r3, [pc, #372]	; (825ec <Cl_alarms_scanforAlarms+0xf6c>)
   82476:	4798      	blx	r3
   82478:	4603      	mov	r3, r0
   8247a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8247c:	79fb      	ldrb	r3, [r7, #7]
   8247e:	2b00      	cmp	r3, #0
   82480:	d00b      	beq.n	8249a <Cl_alarms_scanforAlarms+0xe1a>
   82482:	4b5b      	ldr	r3, [pc, #364]	; (825f0 <Cl_alarms_scanforAlarms+0xf70>)
   82484:	4798      	blx	r3
   82486:	e008      	b.n	8249a <Cl_alarms_scanforAlarms+0xe1a>
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82488:	4b51      	ldr	r3, [pc, #324]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8248a:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8248e:	2b01      	cmp	r3, #1
   82490:	d103      	bne.n	8249a <Cl_alarms_scanforAlarms+0xe1a>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82492:	4b4f      	ldr	r3, [pc, #316]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82494:	2204      	movs	r2, #4
   82496:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   8249a:	4b4d      	ldr	r3, [pc, #308]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8249c:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   824a0:	2b00      	cmp	r3, #0
   824a2:	d042      	beq.n	8252a <Cl_alarms_scanforAlarms+0xeaa>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarmThresholdTable.ps3_high_threshold ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   824a4:	4b4b      	ldr	r3, [pc, #300]	; (825d4 <Cl_alarms_scanforAlarms+0xf54>)
   824a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   824a8:	4b53      	ldr	r3, [pc, #332]	; (825f8 <Cl_alarms_scanforAlarms+0xf78>)
   824aa:	6819      	ldr	r1, [r3, #0]
   824ac:	4b4b      	ldr	r3, [pc, #300]	; (825dc <Cl_alarms_scanforAlarms+0xf5c>)
   824ae:	4610      	mov	r0, r2
   824b0:	4798      	blx	r3
   824b2:	4603      	mov	r3, r0
   824b4:	2b00      	cmp	r3, #0
   824b6:	d02f      	beq.n	82518 <Cl_alarms_scanforAlarms+0xe98>
   824b8:	4b45      	ldr	r3, [pc, #276]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   824ba:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   824be:	2b01      	cmp	r3, #1
   824c0:	d02a      	beq.n	82518 <Cl_alarms_scanforAlarms+0xe98>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   824c2:	4b43      	ldr	r3, [pc, #268]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   824c4:	2201      	movs	r2, #1
   824c6:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   824ca:	4b45      	ldr	r3, [pc, #276]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   824cc:	781b      	ldrb	r3, [r3, #0]
   824ce:	4a44      	ldr	r2, [pc, #272]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   824d0:	3301      	adds	r3, #1
   824d2:	00db      	lsls	r3, r3, #3
   824d4:	4413      	add	r3, r2
   824d6:	2227      	movs	r2, #39	; 0x27
   824d8:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   824da:	4b3d      	ldr	r3, [pc, #244]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   824dc:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   824e0:	3301      	adds	r3, #1
   824e2:	b2da      	uxtb	r2, r3
   824e4:	4b3a      	ldr	r3, [pc, #232]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   824e6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   824ea:	4b3e      	ldr	r3, [pc, #248]	; (825e4 <Cl_alarms_scanforAlarms+0xf64>)
   824ec:	2201      	movs	r2, #1
   824ee:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   824f0:	4b3d      	ldr	r3, [pc, #244]	; (825e8 <Cl_alarms_scanforAlarms+0xf68>)
   824f2:	2227      	movs	r2, #39	; 0x27
   824f4:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   824f6:	4b3a      	ldr	r3, [pc, #232]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   824f8:	781b      	ldrb	r3, [r3, #0]
   824fa:	461a      	mov	r2, r3
   824fc:	4b38      	ldr	r3, [pc, #224]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   824fe:	4413      	add	r3, r2
   82500:	222e      	movs	r2, #46	; 0x2e
   82502:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82504:	4b39      	ldr	r3, [pc, #228]	; (825ec <Cl_alarms_scanforAlarms+0xf6c>)
   82506:	4798      	blx	r3
   82508:	4603      	mov	r3, r0
   8250a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   8250c:	79fb      	ldrb	r3, [r7, #7]
   8250e:	2b00      	cmp	r3, #0
   82510:	d00b      	beq.n	8252a <Cl_alarms_scanforAlarms+0xeaa>
   82512:	4b37      	ldr	r3, [pc, #220]	; (825f0 <Cl_alarms_scanforAlarms+0xf70>)
   82514:	4798      	blx	r3
   82516:	e008      	b.n	8252a <Cl_alarms_scanforAlarms+0xeaa>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82518:	4b2d      	ldr	r3, [pc, #180]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8251a:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   8251e:	2b01      	cmp	r3, #1
   82520:	d103      	bne.n	8252a <Cl_alarms_scanforAlarms+0xeaa>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82522:	4b2b      	ldr	r3, [pc, #172]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82524:	2204      	movs	r2, #4
   82526:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   8252a:	4b29      	ldr	r3, [pc, #164]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8252c:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   82530:	2b00      	cmp	r3, #0
   82532:	d070      	beq.n	82616 <Cl_alarms_scanforAlarms+0xf96>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   82534:	4b27      	ldr	r3, [pc, #156]	; (825d4 <Cl_alarms_scanforAlarms+0xf54>)
   82536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82538:	4b2f      	ldr	r3, [pc, #188]	; (825f8 <Cl_alarms_scanforAlarms+0xf78>)
   8253a:	6819      	ldr	r1, [r3, #0]
   8253c:	4b2d      	ldr	r3, [pc, #180]	; (825f4 <Cl_alarms_scanforAlarms+0xf74>)
   8253e:	4610      	mov	r0, r2
   82540:	4798      	blx	r3
   82542:	4603      	mov	r3, r0
   82544:	2b00      	cmp	r3, #0
   82546:	d05d      	beq.n	82604 <Cl_alarms_scanforAlarms+0xf84>
   82548:	4b21      	ldr	r3, [pc, #132]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8254a:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   8254e:	2b01      	cmp	r3, #1
   82550:	d058      	beq.n	82604 <Cl_alarms_scanforAlarms+0xf84>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
			
			if(ps3 < 0)
   82552:	4b29      	ldr	r3, [pc, #164]	; (825f8 <Cl_alarms_scanforAlarms+0xf78>)
   82554:	681a      	ldr	r2, [r3, #0]
   82556:	4b21      	ldr	r3, [pc, #132]	; (825dc <Cl_alarms_scanforAlarms+0xf5c>)
   82558:	f04f 0100 	mov.w	r1, #0
   8255c:	4610      	mov	r0, r2
   8255e:	4798      	blx	r3
   82560:	4603      	mov	r3, r0
   82562:	2b00      	cmp	r3, #0
   82564:	d009      	beq.n	8257a <Cl_alarms_scanforAlarms+0xefa>
			{
				ps3 = ps3+1000;
   82566:	4b24      	ldr	r3, [pc, #144]	; (825f8 <Cl_alarms_scanforAlarms+0xf78>)
   82568:	681a      	ldr	r2, [r3, #0]
   8256a:	4b24      	ldr	r3, [pc, #144]	; (825fc <Cl_alarms_scanforAlarms+0xf7c>)
   8256c:	4924      	ldr	r1, [pc, #144]	; (82600 <Cl_alarms_scanforAlarms+0xf80>)
   8256e:	4610      	mov	r0, r2
   82570:	4798      	blx	r3
   82572:	4603      	mov	r3, r0
   82574:	461a      	mov	r2, r3
   82576:	4b20      	ldr	r3, [pc, #128]	; (825f8 <Cl_alarms_scanforAlarms+0xf78>)
   82578:	601a      	str	r2, [r3, #0]
				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			}
			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8257a:	4b15      	ldr	r3, [pc, #84]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8257c:	2201      	movs	r2, #1
   8257e:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   82582:	4b17      	ldr	r3, [pc, #92]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   82584:	781b      	ldrb	r3, [r3, #0]
   82586:	4a16      	ldr	r2, [pc, #88]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   82588:	3301      	adds	r3, #1
   8258a:	00db      	lsls	r3, r3, #3
   8258c:	4413      	add	r3, r2
   8258e:	2228      	movs	r2, #40	; 0x28
   82590:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   82592:	4b0f      	ldr	r3, [pc, #60]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   82594:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   82598:	3301      	adds	r3, #1
   8259a:	b2da      	uxtb	r2, r3
   8259c:	4b0c      	ldr	r3, [pc, #48]	; (825d0 <Cl_alarms_scanforAlarms+0xf50>)
   8259e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   825a2:	4b10      	ldr	r3, [pc, #64]	; (825e4 <Cl_alarms_scanforAlarms+0xf64>)
   825a4:	2201      	movs	r2, #1
   825a6:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   825a8:	4b0f      	ldr	r3, [pc, #60]	; (825e8 <Cl_alarms_scanforAlarms+0xf68>)
   825aa:	2228      	movs	r2, #40	; 0x28
   825ac:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   825ae:	4b0c      	ldr	r3, [pc, #48]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   825b0:	781b      	ldrb	r3, [r3, #0]
   825b2:	461a      	mov	r2, r3
   825b4:	4b0a      	ldr	r3, [pc, #40]	; (825e0 <Cl_alarms_scanforAlarms+0xf60>)
   825b6:	4413      	add	r3, r2
   825b8:	222e      	movs	r2, #46	; 0x2e
   825ba:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   825bc:	4b0b      	ldr	r3, [pc, #44]	; (825ec <Cl_alarms_scanforAlarms+0xf6c>)
   825be:	4798      	blx	r3
   825c0:	4603      	mov	r3, r0
   825c2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   825c4:	79fb      	ldrb	r3, [r7, #7]
   825c6:	2b00      	cmp	r3, #0
   825c8:	d025      	beq.n	82616 <Cl_alarms_scanforAlarms+0xf96>
   825ca:	4b09      	ldr	r3, [pc, #36]	; (825f0 <Cl_alarms_scanforAlarms+0xf70>)
   825cc:	4798      	blx	r3
   825ce:	e022      	b.n	82616 <Cl_alarms_scanforAlarms+0xf96>
   825d0:	200728d0 	.word	0x200728d0
   825d4:	20072cf8 	.word	0x20072cf8
   825d8:	2007161c 	.word	0x2007161c
   825dc:	000a378d 	.word	0x000a378d
   825e0:	20072eb4 	.word	0x20072eb4
   825e4:	20071611 	.word	0x20071611
   825e8:	20072cf4 	.word	0x20072cf4
   825ec:	00082ec9 	.word	0x00082ec9
   825f0:	0008870d 	.word	0x0008870d
   825f4:	000a37c9 	.word	0x000a37c9
   825f8:	20071620 	.word	0x20071620
   825fc:	000a3241 	.word	0x000a3241
   82600:	447a0000 	.word	0x447a0000
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82604:	4b99      	ldr	r3, [pc, #612]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82606:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   8260a:	2b01      	cmp	r3, #1
   8260c:	d103      	bne.n	82616 <Cl_alarms_scanforAlarms+0xf96>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8260e:	4b97      	ldr	r3, [pc, #604]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82610:	2204      	movs	r2, #4
   82612:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   82616:	4b95      	ldr	r3, [pc, #596]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82618:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   8261c:	2b00      	cmp	r3, #0
   8261e:	d045      	beq.n	826ac <Cl_alarms_scanforAlarms+0x102c>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 > Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   82620:	4b92      	ldr	r3, [pc, #584]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82622:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   82626:	4b92      	ldr	r3, [pc, #584]	; (82870 <Cl_alarms_scanforAlarms+0x11f0>)
   82628:	6819      	ldr	r1, [r3, #0]
   8262a:	4b92      	ldr	r3, [pc, #584]	; (82874 <Cl_alarms_scanforAlarms+0x11f4>)
   8262c:	4610      	mov	r0, r2
   8262e:	4798      	blx	r3
   82630:	4603      	mov	r3, r0
   82632:	2b00      	cmp	r3, #0
   82634:	d02a      	beq.n	8268c <Cl_alarms_scanforAlarms+0x100c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82636:	4b8d      	ldr	r3, [pc, #564]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82638:	2201      	movs	r2, #1
   8263a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   8263e:	4b8e      	ldr	r3, [pc, #568]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82640:	781b      	ldrb	r3, [r3, #0]
   82642:	4a8d      	ldr	r2, [pc, #564]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82644:	3301      	adds	r3, #1
   82646:	00db      	lsls	r3, r3, #3
   82648:	4413      	add	r3, r2
   8264a:	220f      	movs	r2, #15
   8264c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   8264e:	4b87      	ldr	r3, [pc, #540]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82650:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   82654:	3301      	adds	r3, #1
   82656:	b2da      	uxtb	r2, r3
   82658:	4b84      	ldr	r3, [pc, #528]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8265a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   8265e:	4b87      	ldr	r3, [pc, #540]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   82660:	2201      	movs	r2, #1
   82662:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   82664:	4b86      	ldr	r3, [pc, #536]	; (82880 <Cl_alarms_scanforAlarms+0x1200>)
   82666:	220f      	movs	r2, #15
   82668:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8266a:	4b83      	ldr	r3, [pc, #524]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   8266c:	781b      	ldrb	r3, [r3, #0]
   8266e:	461a      	mov	r2, r3
   82670:	4b81      	ldr	r3, [pc, #516]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82672:	4413      	add	r3, r2
   82674:	222e      	movs	r2, #46	; 0x2e
   82676:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82678:	4b82      	ldr	r3, [pc, #520]	; (82884 <Cl_alarms_scanforAlarms+0x1204>)
   8267a:	4798      	blx	r3
   8267c:	4603      	mov	r3, r0
   8267e:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   82680:	79fb      	ldrb	r3, [r7, #7]
   82682:	2b00      	cmp	r3, #0
   82684:	d012      	beq.n	826ac <Cl_alarms_scanforAlarms+0x102c>
   82686:	4b80      	ldr	r3, [pc, #512]	; (82888 <Cl_alarms_scanforAlarms+0x1208>)
   82688:	4798      	blx	r3
   8268a:	e00f      	b.n	826ac <Cl_alarms_scanforAlarms+0x102c>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8268c:	4b77      	ldr	r3, [pc, #476]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8268e:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   82692:	2b01      	cmp	r3, #1
   82694:	d10a      	bne.n	826ac <Cl_alarms_scanforAlarms+0x102c>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82696:	4b75      	ldr	r3, [pc, #468]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82698:	2204      	movs	r2, #4
   8269a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   8269e:	4b73      	ldr	r3, [pc, #460]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826a0:	2200      	movs	r2, #0
   826a2:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   826a6:	4b75      	ldr	r3, [pc, #468]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   826a8:	2200      	movs	r2, #0
   826aa:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   826ac:	4b6f      	ldr	r3, [pc, #444]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826ae:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   826b2:	2b00      	cmp	r3, #0
   826b4:	d04a      	beq.n	8274c <Cl_alarms_scanforAlarms+0x10cc>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   826b6:	4b6d      	ldr	r3, [pc, #436]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   826bc:	4b6c      	ldr	r3, [pc, #432]	; (82870 <Cl_alarms_scanforAlarms+0x11f0>)
   826be:	6819      	ldr	r1, [r3, #0]
   826c0:	4b72      	ldr	r3, [pc, #456]	; (8288c <Cl_alarms_scanforAlarms+0x120c>)
   826c2:	4610      	mov	r0, r2
   826c4:	4798      	blx	r3
   826c6:	4603      	mov	r3, r0
   826c8:	2b00      	cmp	r3, #0
   826ca:	d02f      	beq.n	8272c <Cl_alarms_scanforAlarms+0x10ac>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   826cc:	4b67      	ldr	r3, [pc, #412]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826ce:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   826d2:	2b01      	cmp	r3, #1
   826d4:	d03a      	beq.n	8274c <Cl_alarms_scanforAlarms+0x10cc>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   826d6:	4b65      	ldr	r3, [pc, #404]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826d8:	2201      	movs	r2, #1
   826da:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   826de:	4b66      	ldr	r3, [pc, #408]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   826e0:	781b      	ldrb	r3, [r3, #0]
   826e2:	4a65      	ldr	r2, [pc, #404]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   826e4:	3301      	adds	r3, #1
   826e6:	00db      	lsls	r3, r3, #3
   826e8:	4413      	add	r3, r2
   826ea:	2210      	movs	r2, #16
   826ec:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   826ee:	4b5f      	ldr	r3, [pc, #380]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826f0:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   826f4:	3301      	adds	r3, #1
   826f6:	b2da      	uxtb	r2, r3
   826f8:	4b5c      	ldr	r3, [pc, #368]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   826fa:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   826fe:	4b5f      	ldr	r3, [pc, #380]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   82700:	2201      	movs	r2, #1
   82702:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   82704:	4b5e      	ldr	r3, [pc, #376]	; (82880 <Cl_alarms_scanforAlarms+0x1200>)
   82706:	2210      	movs	r2, #16
   82708:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8270a:	4b5b      	ldr	r3, [pc, #364]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   8270c:	781b      	ldrb	r3, [r3, #0]
   8270e:	461a      	mov	r2, r3
   82710:	4b59      	ldr	r3, [pc, #356]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82712:	4413      	add	r3, r2
   82714:	222e      	movs	r2, #46	; 0x2e
   82716:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82718:	4b5a      	ldr	r3, [pc, #360]	; (82884 <Cl_alarms_scanforAlarms+0x1204>)
   8271a:	4798      	blx	r3
   8271c:	4603      	mov	r3, r0
   8271e:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   82720:	79fb      	ldrb	r3, [r7, #7]
   82722:	2b00      	cmp	r3, #0
   82724:	d012      	beq.n	8274c <Cl_alarms_scanforAlarms+0x10cc>
   82726:	4b58      	ldr	r3, [pc, #352]	; (82888 <Cl_alarms_scanforAlarms+0x1208>)
   82728:	4798      	blx	r3
   8272a:	e00f      	b.n	8274c <Cl_alarms_scanforAlarms+0x10cc>
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8272c:	4b4f      	ldr	r3, [pc, #316]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8272e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82732:	2b01      	cmp	r3, #1
   82734:	d10a      	bne.n	8274c <Cl_alarms_scanforAlarms+0x10cc>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82736:	4b4d      	ldr	r3, [pc, #308]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82738:	2204      	movs	r2, #4
   8273a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   8273e:	4b4b      	ldr	r3, [pc, #300]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82740:	2200      	movs	r2, #0
   82742:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   82746:	4b4d      	ldr	r3, [pc, #308]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   82748:	2200      	movs	r2, #0
   8274a:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   8274c:	4b47      	ldr	r3, [pc, #284]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8274e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   82752:	2b00      	cmp	r3, #0
   82754:	d04a      	beq.n	827ec <Cl_alarms_scanforAlarms+0x116c>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_upper)
   82756:	4b45      	ldr	r3, [pc, #276]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82758:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   8275c:	4b4c      	ldr	r3, [pc, #304]	; (82890 <Cl_alarms_scanforAlarms+0x1210>)
   8275e:	6819      	ldr	r1, [r3, #0]
   82760:	4b44      	ldr	r3, [pc, #272]	; (82874 <Cl_alarms_scanforAlarms+0x11f4>)
   82762:	4610      	mov	r0, r2
   82764:	4798      	blx	r3
   82766:	4603      	mov	r3, r0
   82768:	2b00      	cmp	r3, #0
   8276a:	d02f      	beq.n	827cc <Cl_alarms_scanforAlarms+0x114c>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8276c:	4b3f      	ldr	r3, [pc, #252]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8276e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82772:	2b01      	cmp	r3, #1
   82774:	d03a      	beq.n	827ec <Cl_alarms_scanforAlarms+0x116c>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82776:	4b3d      	ldr	r3, [pc, #244]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82778:	2201      	movs	r2, #1
   8277a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   8277e:	4b3e      	ldr	r3, [pc, #248]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82780:	781b      	ldrb	r3, [r3, #0]
   82782:	4a3d      	ldr	r2, [pc, #244]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82784:	3301      	adds	r3, #1
   82786:	00db      	lsls	r3, r3, #3
   82788:	4413      	add	r3, r2
   8278a:	2213      	movs	r2, #19
   8278c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   8278e:	4b37      	ldr	r3, [pc, #220]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82790:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   82794:	3301      	adds	r3, #1
   82796:	b2da      	uxtb	r2, r3
   82798:	4b34      	ldr	r3, [pc, #208]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8279a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   8279e:	4b37      	ldr	r3, [pc, #220]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   827a0:	2201      	movs	r2, #1
   827a2:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   827a4:	4b36      	ldr	r3, [pc, #216]	; (82880 <Cl_alarms_scanforAlarms+0x1200>)
   827a6:	2213      	movs	r2, #19
   827a8:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   827aa:	4b33      	ldr	r3, [pc, #204]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   827ac:	781b      	ldrb	r3, [r3, #0]
   827ae:	461a      	mov	r2, r3
   827b0:	4b31      	ldr	r3, [pc, #196]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   827b2:	4413      	add	r3, r2
   827b4:	222e      	movs	r2, #46	; 0x2e
   827b6:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   827b8:	4b32      	ldr	r3, [pc, #200]	; (82884 <Cl_alarms_scanforAlarms+0x1204>)
   827ba:	4798      	blx	r3
   827bc:	4603      	mov	r3, r0
   827be:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   827c0:	79fb      	ldrb	r3, [r7, #7]
   827c2:	2b00      	cmp	r3, #0
   827c4:	d012      	beq.n	827ec <Cl_alarms_scanforAlarms+0x116c>
   827c6:	4b30      	ldr	r3, [pc, #192]	; (82888 <Cl_alarms_scanforAlarms+0x1208>)
   827c8:	4798      	blx	r3
   827ca:	e00f      	b.n	827ec <Cl_alarms_scanforAlarms+0x116c>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   827cc:	4b27      	ldr	r3, [pc, #156]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   827ce:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   827d2:	2b01      	cmp	r3, #1
   827d4:	d10a      	bne.n	827ec <Cl_alarms_scanforAlarms+0x116c>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   827d6:	4b25      	ldr	r3, [pc, #148]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   827d8:	2204      	movs	r2, #4
   827da:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   827de:	4b23      	ldr	r3, [pc, #140]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   827e0:	2200      	movs	r2, #0
   827e2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   827e6:	4b25      	ldr	r3, [pc, #148]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   827e8:	2200      	movs	r2, #0
   827ea:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   827ec:	4b1f      	ldr	r3, [pc, #124]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   827ee:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   827f2:	2b00      	cmp	r3, #0
   827f4:	d05e      	beq.n	828b4 <Cl_alarms_scanforAlarms+0x1234>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_lower)
   827f6:	4b1d      	ldr	r3, [pc, #116]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   827f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   827fc:	4b24      	ldr	r3, [pc, #144]	; (82890 <Cl_alarms_scanforAlarms+0x1210>)
   827fe:	6819      	ldr	r1, [r3, #0]
   82800:	4b22      	ldr	r3, [pc, #136]	; (8288c <Cl_alarms_scanforAlarms+0x120c>)
   82802:	4610      	mov	r0, r2
   82804:	4798      	blx	r3
   82806:	4603      	mov	r3, r0
   82808:	2b00      	cmp	r3, #0
   8280a:	d043      	beq.n	82894 <Cl_alarms_scanforAlarms+0x1214>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8280c:	4b17      	ldr	r3, [pc, #92]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8280e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   82812:	2b01      	cmp	r3, #1
   82814:	d04e      	beq.n	828b4 <Cl_alarms_scanforAlarms+0x1234>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82816:	4b15      	ldr	r3, [pc, #84]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82818:	2201      	movs	r2, #1
   8281a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   8281e:	4b16      	ldr	r3, [pc, #88]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82820:	781b      	ldrb	r3, [r3, #0]
   82822:	4a15      	ldr	r2, [pc, #84]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82824:	3301      	adds	r3, #1
   82826:	00db      	lsls	r3, r3, #3
   82828:	4413      	add	r3, r2
   8282a:	2214      	movs	r2, #20
   8282c:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   8282e:	4b0f      	ldr	r3, [pc, #60]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   82830:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   82834:	3301      	adds	r3, #1
   82836:	b2da      	uxtb	r2, r3
   82838:	4b0c      	ldr	r3, [pc, #48]	; (8286c <Cl_alarms_scanforAlarms+0x11ec>)
   8283a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   8283e:	4b0f      	ldr	r3, [pc, #60]	; (8287c <Cl_alarms_scanforAlarms+0x11fc>)
   82840:	2201      	movs	r2, #1
   82842:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   82844:	4b0e      	ldr	r3, [pc, #56]	; (82880 <Cl_alarms_scanforAlarms+0x1200>)
   82846:	2214      	movs	r2, #20
   82848:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8284a:	4b0b      	ldr	r3, [pc, #44]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   8284c:	781b      	ldrb	r3, [r3, #0]
   8284e:	461a      	mov	r2, r3
   82850:	4b09      	ldr	r3, [pc, #36]	; (82878 <Cl_alarms_scanforAlarms+0x11f8>)
   82852:	4413      	add	r3, r2
   82854:	222e      	movs	r2, #46	; 0x2e
   82856:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82858:	4b0a      	ldr	r3, [pc, #40]	; (82884 <Cl_alarms_scanforAlarms+0x1204>)
   8285a:	4798      	blx	r3
   8285c:	4603      	mov	r3, r0
   8285e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   82860:	79fb      	ldrb	r3, [r7, #7]
   82862:	2b00      	cmp	r3, #0
   82864:	d026      	beq.n	828b4 <Cl_alarms_scanforAlarms+0x1234>
   82866:	4b08      	ldr	r3, [pc, #32]	; (82888 <Cl_alarms_scanforAlarms+0x1208>)
   82868:	4798      	blx	r3
   8286a:	e023      	b.n	828b4 <Cl_alarms_scanforAlarms+0x1234>
   8286c:	200728d0 	.word	0x200728d0
   82870:	20071624 	.word	0x20071624
   82874:	000a378d 	.word	0x000a378d
   82878:	20072eb4 	.word	0x20072eb4
   8287c:	20071611 	.word	0x20071611
   82880:	20072cf4 	.word	0x20072cf4
   82884:	00082ec9 	.word	0x00082ec9
   82888:	0008870d 	.word	0x0008870d
   8288c:	000a37c9 	.word	0x000a37c9
   82890:	2007162c 	.word	0x2007162c
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82894:	4b9a      	ldr	r3, [pc, #616]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82896:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8289a:	2b01      	cmp	r3, #1
   8289c:	d10a      	bne.n	828b4 <Cl_alarms_scanforAlarms+0x1234>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8289e:	4b98      	ldr	r3, [pc, #608]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828a0:	2204      	movs	r2, #4
   828a2:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   828a6:	4b96      	ldr	r3, [pc, #600]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828a8:	2200      	movs	r2, #0
   828aa:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   828ae:	4b95      	ldr	r3, [pc, #596]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   828b0:	2200      	movs	r2, #0
   828b2:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   828b4:	4b92      	ldr	r3, [pc, #584]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828b6:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   828ba:	2b00      	cmp	r3, #0
   828bc:	d04a      	beq.n	82954 <Cl_alarms_scanforAlarms+0x12d4>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   828be:	4b90      	ldr	r3, [pc, #576]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   828c4:	4b90      	ldr	r3, [pc, #576]	; (82b08 <Cl_alarms_scanforAlarms+0x1488>)
   828c6:	6819      	ldr	r1, [r3, #0]
   828c8:	4b90      	ldr	r3, [pc, #576]	; (82b0c <Cl_alarms_scanforAlarms+0x148c>)
   828ca:	4610      	mov	r0, r2
   828cc:	4798      	blx	r3
   828ce:	4603      	mov	r3, r0
   828d0:	2b00      	cmp	r3, #0
   828d2:	d02f      	beq.n	82934 <Cl_alarms_scanforAlarms+0x12b4>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   828d4:	4b8a      	ldr	r3, [pc, #552]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828d6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   828da:	2b01      	cmp	r3, #1
   828dc:	d03a      	beq.n	82954 <Cl_alarms_scanforAlarms+0x12d4>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   828de:	4b88      	ldr	r3, [pc, #544]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828e0:	2201      	movs	r2, #1
   828e2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   828e6:	4b8a      	ldr	r3, [pc, #552]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   828e8:	781b      	ldrb	r3, [r3, #0]
   828ea:	4a89      	ldr	r2, [pc, #548]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   828ec:	3301      	adds	r3, #1
   828ee:	00db      	lsls	r3, r3, #3
   828f0:	4413      	add	r3, r2
   828f2:	2211      	movs	r2, #17
   828f4:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   828f6:	4b82      	ldr	r3, [pc, #520]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   828f8:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   828fc:	3301      	adds	r3, #1
   828fe:	b2da      	uxtb	r2, r3
   82900:	4b7f      	ldr	r3, [pc, #508]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82902:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   82906:	4b7f      	ldr	r3, [pc, #508]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   82908:	2201      	movs	r2, #1
   8290a:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   8290c:	4b81      	ldr	r3, [pc, #516]	; (82b14 <Cl_alarms_scanforAlarms+0x1494>)
   8290e:	2211      	movs	r2, #17
   82910:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82912:	4b7f      	ldr	r3, [pc, #508]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82914:	781b      	ldrb	r3, [r3, #0]
   82916:	461a      	mov	r2, r3
   82918:	4b7d      	ldr	r3, [pc, #500]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   8291a:	4413      	add	r3, r2
   8291c:	222e      	movs	r2, #46	; 0x2e
   8291e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82920:	4b7d      	ldr	r3, [pc, #500]	; (82b18 <Cl_alarms_scanforAlarms+0x1498>)
   82922:	4798      	blx	r3
   82924:	4603      	mov	r3, r0
   82926:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82928:	79fb      	ldrb	r3, [r7, #7]
   8292a:	2b00      	cmp	r3, #0
   8292c:	d012      	beq.n	82954 <Cl_alarms_scanforAlarms+0x12d4>
   8292e:	4b7b      	ldr	r3, [pc, #492]	; (82b1c <Cl_alarms_scanforAlarms+0x149c>)
   82930:	4798      	blx	r3
   82932:	e00f      	b.n	82954 <Cl_alarms_scanforAlarms+0x12d4>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82934:	4b72      	ldr	r3, [pc, #456]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82936:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8293a:	2b01      	cmp	r3, #1
   8293c:	d10a      	bne.n	82954 <Cl_alarms_scanforAlarms+0x12d4>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8293e:	4b70      	ldr	r3, [pc, #448]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82940:	2204      	movs	r2, #4
   82942:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   82946:	4b6e      	ldr	r3, [pc, #440]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82948:	2200      	movs	r2, #0
   8294a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   8294e:	4b6d      	ldr	r3, [pc, #436]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   82950:	2200      	movs	r2, #0
   82952:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   82954:	4b6a      	ldr	r3, [pc, #424]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82956:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   8295a:	2b00      	cmp	r3, #0
   8295c:	d04a      	beq.n	829f4 <Cl_alarms_scanforAlarms+0x1374>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)
   8295e:	4b68      	ldr	r3, [pc, #416]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82960:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   82964:	4b68      	ldr	r3, [pc, #416]	; (82b08 <Cl_alarms_scanforAlarms+0x1488>)
   82966:	6819      	ldr	r1, [r3, #0]
   82968:	4b6d      	ldr	r3, [pc, #436]	; (82b20 <Cl_alarms_scanforAlarms+0x14a0>)
   8296a:	4610      	mov	r0, r2
   8296c:	4798      	blx	r3
   8296e:	4603      	mov	r3, r0
   82970:	2b00      	cmp	r3, #0
   82972:	d02f      	beq.n	829d4 <Cl_alarms_scanforAlarms+0x1354>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82974:	4b62      	ldr	r3, [pc, #392]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82976:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8297a:	2b01      	cmp	r3, #1
   8297c:	d03a      	beq.n	829f4 <Cl_alarms_scanforAlarms+0x1374>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8297e:	4b60      	ldr	r3, [pc, #384]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82980:	2201      	movs	r2, #1
   82982:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   82986:	4b62      	ldr	r3, [pc, #392]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82988:	781b      	ldrb	r3, [r3, #0]
   8298a:	4a61      	ldr	r2, [pc, #388]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   8298c:	3301      	adds	r3, #1
   8298e:	00db      	lsls	r3, r3, #3
   82990:	4413      	add	r3, r2
   82992:	2212      	movs	r2, #18
   82994:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   82996:	4b5a      	ldr	r3, [pc, #360]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82998:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   8299c:	3301      	adds	r3, #1
   8299e:	b2da      	uxtb	r2, r3
   829a0:	4b57      	ldr	r3, [pc, #348]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   829a2:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   829a6:	4b57      	ldr	r3, [pc, #348]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   829a8:	2201      	movs	r2, #1
   829aa:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   829ac:	4b59      	ldr	r3, [pc, #356]	; (82b14 <Cl_alarms_scanforAlarms+0x1494>)
   829ae:	2212      	movs	r2, #18
   829b0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   829b2:	4b57      	ldr	r3, [pc, #348]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   829b4:	781b      	ldrb	r3, [r3, #0]
   829b6:	461a      	mov	r2, r3
   829b8:	4b55      	ldr	r3, [pc, #340]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   829ba:	4413      	add	r3, r2
   829bc:	222e      	movs	r2, #46	; 0x2e
   829be:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   829c0:	4b55      	ldr	r3, [pc, #340]	; (82b18 <Cl_alarms_scanforAlarms+0x1498>)
   829c2:	4798      	blx	r3
   829c4:	4603      	mov	r3, r0
   829c6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   829c8:	79fb      	ldrb	r3, [r7, #7]
   829ca:	2b00      	cmp	r3, #0
   829cc:	d012      	beq.n	829f4 <Cl_alarms_scanforAlarms+0x1374>
   829ce:	4b53      	ldr	r3, [pc, #332]	; (82b1c <Cl_alarms_scanforAlarms+0x149c>)
   829d0:	4798      	blx	r3
   829d2:	e00f      	b.n	829f4 <Cl_alarms_scanforAlarms+0x1374>
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   829d4:	4b4a      	ldr	r3, [pc, #296]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   829d6:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   829da:	2b01      	cmp	r3, #1
   829dc:	d10a      	bne.n	829f4 <Cl_alarms_scanforAlarms+0x1374>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   829de:	4b48      	ldr	r3, [pc, #288]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   829e0:	2204      	movs	r2, #4
   829e2:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   829e6:	4b46      	ldr	r3, [pc, #280]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   829e8:	2200      	movs	r2, #0
   829ea:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   829ee:	4b45      	ldr	r3, [pc, #276]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   829f0:	2200      	movs	r2, #0
   829f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   829f4:	4b42      	ldr	r3, [pc, #264]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   829f6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   829fa:	2b00      	cmp	r3, #0
   829fc:	d045      	beq.n	82a8a <Cl_alarms_scanforAlarms+0x140a>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   829fe:	4b40      	ldr	r3, [pc, #256]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   82a04:	4b47      	ldr	r3, [pc, #284]	; (82b24 <Cl_alarms_scanforAlarms+0x14a4>)
   82a06:	6819      	ldr	r1, [r3, #0]
   82a08:	4b40      	ldr	r3, [pc, #256]	; (82b0c <Cl_alarms_scanforAlarms+0x148c>)
   82a0a:	4610      	mov	r0, r2
   82a0c:	4798      	blx	r3
   82a0e:	4603      	mov	r3, r0
   82a10:	2b00      	cmp	r3, #0
   82a12:	d02a      	beq.n	82a6a <Cl_alarms_scanforAlarms+0x13ea>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   82a14:	4b3a      	ldr	r3, [pc, #232]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a16:	2201      	movs	r2, #1
   82a18:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   82a1c:	4b3c      	ldr	r3, [pc, #240]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82a1e:	781b      	ldrb	r3, [r3, #0]
   82a20:	4a3b      	ldr	r2, [pc, #236]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82a22:	3301      	adds	r3, #1
   82a24:	00db      	lsls	r3, r3, #3
   82a26:	4413      	add	r3, r2
   82a28:	2208      	movs	r2, #8
   82a2a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   82a2c:	4b34      	ldr	r3, [pc, #208]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a2e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   82a32:	3301      	adds	r3, #1
   82a34:	b2da      	uxtb	r2, r3
   82a36:	4b32      	ldr	r3, [pc, #200]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a38:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   82a3c:	4b31      	ldr	r3, [pc, #196]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   82a3e:	2201      	movs	r2, #1
   82a40:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   82a42:	4b34      	ldr	r3, [pc, #208]	; (82b14 <Cl_alarms_scanforAlarms+0x1494>)
   82a44:	2208      	movs	r2, #8
   82a46:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82a48:	4b31      	ldr	r3, [pc, #196]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82a4a:	781b      	ldrb	r3, [r3, #0]
   82a4c:	461a      	mov	r2, r3
   82a4e:	4b30      	ldr	r3, [pc, #192]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82a50:	4413      	add	r3, r2
   82a52:	222e      	movs	r2, #46	; 0x2e
   82a54:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82a56:	4b30      	ldr	r3, [pc, #192]	; (82b18 <Cl_alarms_scanforAlarms+0x1498>)
   82a58:	4798      	blx	r3
   82a5a:	4603      	mov	r3, r0
   82a5c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82a5e:	79fb      	ldrb	r3, [r7, #7]
   82a60:	2b00      	cmp	r3, #0
   82a62:	d012      	beq.n	82a8a <Cl_alarms_scanforAlarms+0x140a>
   82a64:	4b2d      	ldr	r3, [pc, #180]	; (82b1c <Cl_alarms_scanforAlarms+0x149c>)
   82a66:	4798      	blx	r3
   82a68:	e00f      	b.n	82a8a <Cl_alarms_scanforAlarms+0x140a>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   82a6a:	4b25      	ldr	r3, [pc, #148]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a6c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   82a70:	2b01      	cmp	r3, #1
   82a72:	d10a      	bne.n	82a8a <Cl_alarms_scanforAlarms+0x140a>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82a74:	4b22      	ldr	r3, [pc, #136]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a76:	2204      	movs	r2, #4
   82a78:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   82a7c:	4b20      	ldr	r3, [pc, #128]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a7e:	2200      	movs	r2, #0
   82a80:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   82a84:	4b1f      	ldr	r3, [pc, #124]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   82a86:	2200      	movs	r2, #0
   82a88:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   82a8a:	4b1d      	ldr	r3, [pc, #116]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a8c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   82a90:	2b00      	cmp	r3, #0
   82a92:	d059      	beq.n	82b48 <Cl_alarms_scanforAlarms+0x14c8>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarms_alarms[COND_STATUS_LOW].cl_lower)
   82a94:	4b1a      	ldr	r3, [pc, #104]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82a96:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   82a98:	4b22      	ldr	r3, [pc, #136]	; (82b24 <Cl_alarms_scanforAlarms+0x14a4>)
   82a9a:	6819      	ldr	r1, [r3, #0]
   82a9c:	4b20      	ldr	r3, [pc, #128]	; (82b20 <Cl_alarms_scanforAlarms+0x14a0>)
   82a9e:	4610      	mov	r0, r2
   82aa0:	4798      	blx	r3
   82aa2:	4603      	mov	r3, r0
   82aa4:	2b00      	cmp	r3, #0
   82aa6:	d03f      	beq.n	82b28 <Cl_alarms_scanforAlarms+0x14a8>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   82aa8:	4b15      	ldr	r3, [pc, #84]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82aaa:	2201      	movs	r2, #1
   82aac:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   82ab0:	4b17      	ldr	r3, [pc, #92]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82ab2:	781b      	ldrb	r3, [r3, #0]
   82ab4:	4a16      	ldr	r2, [pc, #88]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82ab6:	3301      	adds	r3, #1
   82ab8:	00db      	lsls	r3, r3, #3
   82aba:	4413      	add	r3, r2
   82abc:	2207      	movs	r2, #7
   82abe:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   82ac0:	4b0f      	ldr	r3, [pc, #60]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82ac2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   82ac6:	3301      	adds	r3, #1
   82ac8:	b2da      	uxtb	r2, r3
   82aca:	4b0d      	ldr	r3, [pc, #52]	; (82b00 <Cl_alarms_scanforAlarms+0x1480>)
   82acc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   82ad0:	4b0c      	ldr	r3, [pc, #48]	; (82b04 <Cl_alarms_scanforAlarms+0x1484>)
   82ad2:	2201      	movs	r2, #1
   82ad4:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   82ad6:	4b0f      	ldr	r3, [pc, #60]	; (82b14 <Cl_alarms_scanforAlarms+0x1494>)
   82ad8:	2207      	movs	r2, #7
   82ada:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82adc:	4b0c      	ldr	r3, [pc, #48]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82ade:	781b      	ldrb	r3, [r3, #0]
   82ae0:	461a      	mov	r2, r3
   82ae2:	4b0b      	ldr	r3, [pc, #44]	; (82b10 <Cl_alarms_scanforAlarms+0x1490>)
   82ae4:	4413      	add	r3, r2
   82ae6:	222e      	movs	r2, #46	; 0x2e
   82ae8:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82aea:	4b0b      	ldr	r3, [pc, #44]	; (82b18 <Cl_alarms_scanforAlarms+0x1498>)
   82aec:	4798      	blx	r3
   82aee:	4603      	mov	r3, r0
   82af0:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82af2:	79fb      	ldrb	r3, [r7, #7]
   82af4:	2b00      	cmp	r3, #0
   82af6:	d027      	beq.n	82b48 <Cl_alarms_scanforAlarms+0x14c8>
   82af8:	4b08      	ldr	r3, [pc, #32]	; (82b1c <Cl_alarms_scanforAlarms+0x149c>)
   82afa:	4798      	blx	r3
   82afc:	e024      	b.n	82b48 <Cl_alarms_scanforAlarms+0x14c8>
   82afe:	bf00      	nop
   82b00:	200728d0 	.word	0x200728d0
   82b04:	20071611 	.word	0x20071611
   82b08:	20071628 	.word	0x20071628
   82b0c:	000a378d 	.word	0x000a378d
   82b10:	20072eb4 	.word	0x20072eb4
   82b14:	20072cf4 	.word	0x20072cf4
   82b18:	00082ec9 	.word	0x00082ec9
   82b1c:	0008870d 	.word	0x0008870d
   82b20:	000a37c9 	.word	0x000a37c9
   82b24:	20071634 	.word	0x20071634
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   82b28:	4b82      	ldr	r3, [pc, #520]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b2a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   82b2e:	2b01      	cmp	r3, #1
   82b30:	d10a      	bne.n	82b48 <Cl_alarms_scanforAlarms+0x14c8>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82b32:	4b80      	ldr	r3, [pc, #512]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b34:	2204      	movs	r2, #4
   82b36:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   82b3a:	4b7e      	ldr	r3, [pc, #504]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b3c:	2200      	movs	r2, #0
   82b3e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   82b42:	4b7d      	ldr	r3, [pc, #500]	; (82d38 <Cl_alarms_scanforAlarms+0x16b8>)
   82b44:	2200      	movs	r2, #0
   82b46:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   82b48:	4b7a      	ldr	r3, [pc, #488]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b4a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d10a      	bne.n	82b68 <Cl_alarms_scanforAlarms+0x14e8>
   82b52:	4b78      	ldr	r3, [pc, #480]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b54:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d105      	bne.n	82b68 <Cl_alarms_scanforAlarms+0x14e8>
   82b5c:	4b75      	ldr	r3, [pc, #468]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b5e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82b62:	2b00      	cmp	r3, #0
   82b64:	f000 80f7 	beq.w	82d56 <Cl_alarms_scanforAlarms+0x16d6>
	{
			dac_cond_alarm = _NO_ALARM;
   82b68:	4b74      	ldr	r3, [pc, #464]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82b6a:	2200      	movs	r2, #0
   82b6c:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   82b6e:	4873      	ldr	r0, [pc, #460]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82b70:	4b73      	ldr	r3, [pc, #460]	; (82d40 <Cl_alarms_scanforAlarms+0x16c0>)
   82b72:	4798      	blx	r3
   82b74:	4603      	mov	r3, r0
   82b76:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82b78:	79fb      	ldrb	r3, [r7, #7]
   82b7a:	2b00      	cmp	r3, #0
   82b7c:	d001      	beq.n	82b82 <Cl_alarms_scanforAlarms+0x1502>
   82b7e:	4b71      	ldr	r3, [pc, #452]	; (82d44 <Cl_alarms_scanforAlarms+0x16c4>)
   82b80:	4798      	blx	r3
				switch(dac_cond_alarm)
   82b82:	4b6e      	ldr	r3, [pc, #440]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82b84:	781b      	ldrb	r3, [r3, #0]
   82b86:	2b0a      	cmp	r3, #10
   82b88:	d049      	beq.n	82c1e <Cl_alarms_scanforAlarms+0x159e>
   82b8a:	2b0b      	cmp	r3, #11
   82b8c:	f000 808a 	beq.w	82ca4 <Cl_alarms_scanforAlarms+0x1624>
   82b90:	2b09      	cmp	r3, #9
   82b92:	f040 80e0 	bne.w	82d56 <Cl_alarms_scanforAlarms+0x16d6>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82b96:	4b69      	ldr	r3, [pc, #420]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82b98:	781b      	ldrb	r3, [r3, #0]
   82b9a:	4a66      	ldr	r2, [pc, #408]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82b9c:	011b      	lsls	r3, r3, #4
   82b9e:	4413      	add	r3, r2
   82ba0:	3302      	adds	r3, #2
   82ba2:	2201      	movs	r2, #1
   82ba4:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82ba6:	4b63      	ldr	r3, [pc, #396]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82ba8:	2204      	movs	r2, #4
   82baa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82bae:	4b61      	ldr	r3, [pc, #388]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82bb0:	2204      	movs	r2, #4
   82bb2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82bb6:	4b64      	ldr	r3, [pc, #400]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82bb8:	781b      	ldrb	r3, [r3, #0]
   82bba:	4618      	mov	r0, r3
   82bbc:	4b5f      	ldr	r3, [pc, #380]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82bbe:	781b      	ldrb	r3, [r3, #0]
   82bc0:	b299      	uxth	r1, r3
   82bc2:	4a61      	ldr	r2, [pc, #388]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82bc4:	1c43      	adds	r3, r0, #1
   82bc6:	00db      	lsls	r3, r3, #3
   82bc8:	4413      	add	r3, r2
   82bca:	460a      	mov	r2, r1
   82bcc:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82bce:	4b5b      	ldr	r3, [pc, #364]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82bd0:	781b      	ldrb	r3, [r3, #0]
   82bd2:	4958      	ldr	r1, [pc, #352]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82bd4:	011a      	lsls	r2, r3, #4
   82bd6:	440a      	add	r2, r1
   82bd8:	320d      	adds	r2, #13
   82bda:	7812      	ldrb	r2, [r2, #0]
   82bdc:	3201      	adds	r2, #1
   82bde:	b2d1      	uxtb	r1, r2
   82be0:	4a54      	ldr	r2, [pc, #336]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82be2:	011b      	lsls	r3, r3, #4
   82be4:	4413      	add	r3, r2
   82be6:	330d      	adds	r3, #13
   82be8:	460a      	mov	r2, r1
   82bea:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82bec:	4b52      	ldr	r3, [pc, #328]	; (82d38 <Cl_alarms_scanforAlarms+0x16b8>)
   82bee:	2201      	movs	r2, #1
   82bf0:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82bf2:	4b52      	ldr	r3, [pc, #328]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82bf4:	781a      	ldrb	r2, [r3, #0]
   82bf6:	4b55      	ldr	r3, [pc, #340]	; (82d4c <Cl_alarms_scanforAlarms+0x16cc>)
   82bf8:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82bfa:	4b53      	ldr	r3, [pc, #332]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82bfc:	781b      	ldrb	r3, [r3, #0]
   82bfe:	461a      	mov	r2, r3
   82c00:	4b51      	ldr	r3, [pc, #324]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82c02:	4413      	add	r3, r2
   82c04:	222e      	movs	r2, #46	; 0x2e
   82c06:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82c08:	4b51      	ldr	r3, [pc, #324]	; (82d50 <Cl_alarms_scanforAlarms+0x16d0>)
   82c0a:	4798      	blx	r3
   82c0c:	4603      	mov	r3, r0
   82c0e:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82c10:	79fb      	ldrb	r3, [r7, #7]
   82c12:	2b00      	cmp	r3, #0
   82c14:	f000 8089 	beq.w	82d2a <Cl_alarms_scanforAlarms+0x16aa>
   82c18:	4b4a      	ldr	r3, [pc, #296]	; (82d44 <Cl_alarms_scanforAlarms+0x16c4>)
   82c1a:	4798      	blx	r3
					break;
   82c1c:	e085      	b.n	82d2a <Cl_alarms_scanforAlarms+0x16aa>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82c1e:	4b47      	ldr	r3, [pc, #284]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82c20:	781b      	ldrb	r3, [r3, #0]
   82c22:	4a44      	ldr	r2, [pc, #272]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82c24:	011b      	lsls	r3, r3, #4
   82c26:	4413      	add	r3, r2
   82c28:	3302      	adds	r3, #2
   82c2a:	2201      	movs	r2, #1
   82c2c:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82c2e:	4b41      	ldr	r3, [pc, #260]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82c30:	2204      	movs	r2, #4
   82c32:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82c36:	4b3f      	ldr	r3, [pc, #252]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82c38:	2204      	movs	r2, #4
   82c3a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82c3e:	4b42      	ldr	r3, [pc, #264]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82c40:	781b      	ldrb	r3, [r3, #0]
   82c42:	4618      	mov	r0, r3
   82c44:	4b3d      	ldr	r3, [pc, #244]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82c46:	781b      	ldrb	r3, [r3, #0]
   82c48:	b299      	uxth	r1, r3
   82c4a:	4a3f      	ldr	r2, [pc, #252]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82c4c:	1c43      	adds	r3, r0, #1
   82c4e:	00db      	lsls	r3, r3, #3
   82c50:	4413      	add	r3, r2
   82c52:	460a      	mov	r2, r1
   82c54:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82c56:	4b39      	ldr	r3, [pc, #228]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82c58:	781b      	ldrb	r3, [r3, #0]
   82c5a:	4936      	ldr	r1, [pc, #216]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82c5c:	011a      	lsls	r2, r3, #4
   82c5e:	440a      	add	r2, r1
   82c60:	320d      	adds	r2, #13
   82c62:	7812      	ldrb	r2, [r2, #0]
   82c64:	3201      	adds	r2, #1
   82c66:	b2d1      	uxtb	r1, r2
   82c68:	4a32      	ldr	r2, [pc, #200]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82c6a:	011b      	lsls	r3, r3, #4
   82c6c:	4413      	add	r3, r2
   82c6e:	330d      	adds	r3, #13
   82c70:	460a      	mov	r2, r1
   82c72:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82c74:	4b30      	ldr	r3, [pc, #192]	; (82d38 <Cl_alarms_scanforAlarms+0x16b8>)
   82c76:	2201      	movs	r2, #1
   82c78:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82c7a:	4b30      	ldr	r3, [pc, #192]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82c7c:	781a      	ldrb	r2, [r3, #0]
   82c7e:	4b33      	ldr	r3, [pc, #204]	; (82d4c <Cl_alarms_scanforAlarms+0x16cc>)
   82c80:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82c82:	4b31      	ldr	r3, [pc, #196]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82c84:	781b      	ldrb	r3, [r3, #0]
   82c86:	461a      	mov	r2, r3
   82c88:	4b2f      	ldr	r3, [pc, #188]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82c8a:	4413      	add	r3, r2
   82c8c:	222e      	movs	r2, #46	; 0x2e
   82c8e:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82c90:	4b2f      	ldr	r3, [pc, #188]	; (82d50 <Cl_alarms_scanforAlarms+0x16d0>)
   82c92:	4798      	blx	r3
   82c94:	4603      	mov	r3, r0
   82c96:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82c98:	79fb      	ldrb	r3, [r7, #7]
   82c9a:	2b00      	cmp	r3, #0
   82c9c:	d047      	beq.n	82d2e <Cl_alarms_scanforAlarms+0x16ae>
   82c9e:	4b29      	ldr	r3, [pc, #164]	; (82d44 <Cl_alarms_scanforAlarms+0x16c4>)
   82ca0:	4798      	blx	r3
					break;
   82ca2:	e044      	b.n	82d2e <Cl_alarms_scanforAlarms+0x16ae>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82ca4:	4b25      	ldr	r3, [pc, #148]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82ca6:	781b      	ldrb	r3, [r3, #0]
   82ca8:	4a22      	ldr	r2, [pc, #136]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82caa:	011b      	lsls	r3, r3, #4
   82cac:	4413      	add	r3, r2
   82cae:	3302      	adds	r3, #2
   82cb0:	2201      	movs	r2, #1
   82cb2:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82cb4:	4b1f      	ldr	r3, [pc, #124]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82cb6:	2204      	movs	r2, #4
   82cb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82cbc:	4b1d      	ldr	r3, [pc, #116]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82cbe:	2204      	movs	r2, #4
   82cc0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82cc4:	4b20      	ldr	r3, [pc, #128]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82cc6:	781b      	ldrb	r3, [r3, #0]
   82cc8:	4618      	mov	r0, r3
   82cca:	4b1c      	ldr	r3, [pc, #112]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82ccc:	781b      	ldrb	r3, [r3, #0]
   82cce:	b299      	uxth	r1, r3
   82cd0:	4a1d      	ldr	r2, [pc, #116]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82cd2:	1c43      	adds	r3, r0, #1
   82cd4:	00db      	lsls	r3, r3, #3
   82cd6:	4413      	add	r3, r2
   82cd8:	460a      	mov	r2, r1
   82cda:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82cdc:	4b17      	ldr	r3, [pc, #92]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82cde:	781b      	ldrb	r3, [r3, #0]
   82ce0:	4914      	ldr	r1, [pc, #80]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82ce2:	011a      	lsls	r2, r3, #4
   82ce4:	440a      	add	r2, r1
   82ce6:	320d      	adds	r2, #13
   82ce8:	7812      	ldrb	r2, [r2, #0]
   82cea:	3201      	adds	r2, #1
   82cec:	b2d1      	uxtb	r1, r2
   82cee:	4a11      	ldr	r2, [pc, #68]	; (82d34 <Cl_alarms_scanforAlarms+0x16b4>)
   82cf0:	011b      	lsls	r3, r3, #4
   82cf2:	4413      	add	r3, r2
   82cf4:	330d      	adds	r3, #13
   82cf6:	460a      	mov	r2, r1
   82cf8:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82cfa:	4b0f      	ldr	r3, [pc, #60]	; (82d38 <Cl_alarms_scanforAlarms+0x16b8>)
   82cfc:	2201      	movs	r2, #1
   82cfe:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82d00:	4b0e      	ldr	r3, [pc, #56]	; (82d3c <Cl_alarms_scanforAlarms+0x16bc>)
   82d02:	781a      	ldrb	r2, [r3, #0]
   82d04:	4b11      	ldr	r3, [pc, #68]	; (82d4c <Cl_alarms_scanforAlarms+0x16cc>)
   82d06:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82d08:	4b0f      	ldr	r3, [pc, #60]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82d0a:	781b      	ldrb	r3, [r3, #0]
   82d0c:	461a      	mov	r2, r3
   82d0e:	4b0e      	ldr	r3, [pc, #56]	; (82d48 <Cl_alarms_scanforAlarms+0x16c8>)
   82d10:	4413      	add	r3, r2
   82d12:	222e      	movs	r2, #46	; 0x2e
   82d14:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82d16:	4b0e      	ldr	r3, [pc, #56]	; (82d50 <Cl_alarms_scanforAlarms+0x16d0>)
   82d18:	4798      	blx	r3
   82d1a:	4603      	mov	r3, r0
   82d1c:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82d1e:	79fb      	ldrb	r3, [r7, #7]
   82d20:	2b00      	cmp	r3, #0
   82d22:	d017      	beq.n	82d54 <Cl_alarms_scanforAlarms+0x16d4>
   82d24:	4b07      	ldr	r3, [pc, #28]	; (82d44 <Cl_alarms_scanforAlarms+0x16c4>)
   82d26:	4798      	blx	r3

					break;
   82d28:	e014      	b.n	82d54 <Cl_alarms_scanforAlarms+0x16d4>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82d2a:	bf00      	nop
   82d2c:	e013      	b.n	82d56 <Cl_alarms_scanforAlarms+0x16d6>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82d2e:	bf00      	nop
   82d30:	e011      	b.n	82d56 <Cl_alarms_scanforAlarms+0x16d6>
   82d32:	bf00      	nop
   82d34:	200728d0 	.word	0x200728d0
   82d38:	20071611 	.word	0x20071611
   82d3c:	20071610 	.word	0x20071610
   82d40:	00083271 	.word	0x00083271
   82d44:	0008870d 	.word	0x0008870d
   82d48:	20072eb4 	.word	0x20072eb4
   82d4c:	20072cf4 	.word	0x20072cf4
   82d50:	00082ec9 	.word	0x00082ec9
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);

					break;
   82d54:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   82d56:	4b50      	ldr	r3, [pc, #320]	; (82e98 <Cl_alarms_scanforAlarms+0x1818>)
   82d58:	781b      	ldrb	r3, [r3, #0]
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	f000 8097 	beq.w	82e8e <Cl_alarms_scanforAlarms+0x180e>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   82d60:	4b4e      	ldr	r3, [pc, #312]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82d62:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82d66:	2b00      	cmp	r3, #0
   82d68:	d10a      	bne.n	82d80 <Cl_alarms_scanforAlarms+0x1700>
   82d6a:	4b4c      	ldr	r3, [pc, #304]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82d6c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82d70:	2b00      	cmp	r3, #0
   82d72:	d105      	bne.n	82d80 <Cl_alarms_scanforAlarms+0x1700>
   82d74:	4b49      	ldr	r3, [pc, #292]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82d76:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   82d7a:	2b00      	cmp	r3, #0
   82d7c:	f000 8087 	beq.w	82e8e <Cl_alarms_scanforAlarms+0x180e>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   82d80:	4b47      	ldr	r3, [pc, #284]	; (82ea0 <Cl_alarms_scanforAlarms+0x1820>)
   82d82:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82d84:	461a      	mov	r2, r3
   82d86:	4b47      	ldr	r3, [pc, #284]	; (82ea4 <Cl_alarms_scanforAlarms+0x1824>)
   82d88:	681b      	ldr	r3, [r3, #0]
   82d8a:	429a      	cmp	r2, r3
   82d8c:	d00c      	beq.n	82da8 <Cl_alarms_scanforAlarms+0x1728>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   82d8e:	4b46      	ldr	r3, [pc, #280]	; (82ea8 <Cl_alarms_scanforAlarms+0x1828>)
   82d90:	2200      	movs	r2, #0
   82d92:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82d94:	4b45      	ldr	r3, [pc, #276]	; (82eac <Cl_alarms_scanforAlarms+0x182c>)
   82d96:	681b      	ldr	r3, [r3, #0]
   82d98:	3301      	adds	r3, #1
   82d9a:	4a44      	ldr	r2, [pc, #272]	; (82eac <Cl_alarms_scanforAlarms+0x182c>)
   82d9c:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   82d9e:	4b44      	ldr	r3, [pc, #272]	; (82eb0 <Cl_alarms_scanforAlarms+0x1830>)
   82da0:	681b      	ldr	r3, [r3, #0]
   82da2:	3301      	adds	r3, #1
   82da4:	4a42      	ldr	r2, [pc, #264]	; (82eb0 <Cl_alarms_scanforAlarms+0x1830>)
   82da6:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   82da8:	4b3f      	ldr	r3, [pc, #252]	; (82ea8 <Cl_alarms_scanforAlarms+0x1828>)
   82daa:	681b      	ldr	r3, [r3, #0]
   82dac:	2b28      	cmp	r3, #40	; 0x28
   82dae:	d932      	bls.n	82e16 <Cl_alarms_scanforAlarms+0x1796>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   82db0:	4b3a      	ldr	r3, [pc, #232]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82db2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82db6:	2b01      	cmp	r3, #1
   82db8:	d02d      	beq.n	82e16 <Cl_alarms_scanforAlarms+0x1796>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82dba:	4b38      	ldr	r3, [pc, #224]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82dbc:	2201      	movs	r2, #1
   82dbe:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82dc2:	4b3c      	ldr	r3, [pc, #240]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82dc4:	781b      	ldrb	r3, [r3, #0]
   82dc6:	4a3b      	ldr	r2, [pc, #236]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82dc8:	3301      	adds	r3, #1
   82dca:	00db      	lsls	r3, r3, #3
   82dcc:	4413      	add	r3, r2
   82dce:	220c      	movs	r2, #12
   82dd0:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   82dd2:	4b32      	ldr	r3, [pc, #200]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82dd4:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82dd8:	3301      	adds	r3, #1
   82dda:	b2da      	uxtb	r2, r3
   82ddc:	4b2f      	ldr	r3, [pc, #188]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82dde:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82de2:	4b2e      	ldr	r3, [pc, #184]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82de4:	2204      	movs	r2, #4
   82de6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   82dea:	4b33      	ldr	r3, [pc, #204]	; (82eb8 <Cl_alarms_scanforAlarms+0x1838>)
   82dec:	2201      	movs	r2, #1
   82dee:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82df0:	4b32      	ldr	r3, [pc, #200]	; (82ebc <Cl_alarms_scanforAlarms+0x183c>)
   82df2:	220c      	movs	r2, #12
   82df4:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82df6:	4b2f      	ldr	r3, [pc, #188]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82df8:	781b      	ldrb	r3, [r3, #0]
   82dfa:	461a      	mov	r2, r3
   82dfc:	4b2d      	ldr	r3, [pc, #180]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82dfe:	4413      	add	r3, r2
   82e00:	222d      	movs	r2, #45	; 0x2d
   82e02:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82e04:	4b2e      	ldr	r3, [pc, #184]	; (82ec0 <Cl_alarms_scanforAlarms+0x1840>)
   82e06:	4798      	blx	r3
   82e08:	4603      	mov	r3, r0
   82e0a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82e0c:	79fb      	ldrb	r3, [r7, #7]
   82e0e:	2b00      	cmp	r3, #0
   82e10:	d001      	beq.n	82e16 <Cl_alarms_scanforAlarms+0x1796>
   82e12:	4b2c      	ldr	r3, [pc, #176]	; (82ec4 <Cl_alarms_scanforAlarms+0x1844>)
   82e14:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   82e16:	4b25      	ldr	r3, [pc, #148]	; (82eac <Cl_alarms_scanforAlarms+0x182c>)
   82e18:	681b      	ldr	r3, [r3, #0]
   82e1a:	2b02      	cmp	r3, #2
   82e1c:	d932      	bls.n	82e84 <Cl_alarms_scanforAlarms+0x1804>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   82e1e:	4b1f      	ldr	r3, [pc, #124]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82e20:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82e24:	2b01      	cmp	r3, #1
   82e26:	d02d      	beq.n	82e84 <Cl_alarms_scanforAlarms+0x1804>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82e28:	4b1c      	ldr	r3, [pc, #112]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82e2a:	2201      	movs	r2, #1
   82e2c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   82e30:	4b20      	ldr	r3, [pc, #128]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82e32:	781b      	ldrb	r3, [r3, #0]
   82e34:	4a1f      	ldr	r2, [pc, #124]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82e36:	3301      	adds	r3, #1
   82e38:	00db      	lsls	r3, r3, #3
   82e3a:	4413      	add	r3, r2
   82e3c:	220e      	movs	r2, #14
   82e3e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82e40:	4b16      	ldr	r3, [pc, #88]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82e42:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   82e46:	3301      	adds	r3, #1
   82e48:	b2da      	uxtb	r2, r3
   82e4a:	4b14      	ldr	r3, [pc, #80]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82e4c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82e50:	4b12      	ldr	r3, [pc, #72]	; (82e9c <Cl_alarms_scanforAlarms+0x181c>)
   82e52:	2204      	movs	r2, #4
   82e54:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   82e58:	4b17      	ldr	r3, [pc, #92]	; (82eb8 <Cl_alarms_scanforAlarms+0x1838>)
   82e5a:	2201      	movs	r2, #1
   82e5c:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   82e5e:	4b17      	ldr	r3, [pc, #92]	; (82ebc <Cl_alarms_scanforAlarms+0x183c>)
   82e60:	220e      	movs	r2, #14
   82e62:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82e64:	4b13      	ldr	r3, [pc, #76]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82e66:	781b      	ldrb	r3, [r3, #0]
   82e68:	461a      	mov	r2, r3
   82e6a:	4b12      	ldr	r3, [pc, #72]	; (82eb4 <Cl_alarms_scanforAlarms+0x1834>)
   82e6c:	4413      	add	r3, r2
   82e6e:	222d      	movs	r2, #45	; 0x2d
   82e70:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82e72:	4b13      	ldr	r3, [pc, #76]	; (82ec0 <Cl_alarms_scanforAlarms+0x1840>)
   82e74:	4798      	blx	r3
   82e76:	4603      	mov	r3, r0
   82e78:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82e7a:	79fb      	ldrb	r3, [r7, #7]
   82e7c:	2b00      	cmp	r3, #0
   82e7e:	d001      	beq.n	82e84 <Cl_alarms_scanforAlarms+0x1804>
   82e80:	4b10      	ldr	r3, [pc, #64]	; (82ec4 <Cl_alarms_scanforAlarms+0x1844>)
   82e82:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82e84:	4b06      	ldr	r3, [pc, #24]	; (82ea0 <Cl_alarms_scanforAlarms+0x1820>)
   82e86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82e88:	461a      	mov	r2, r3
   82e8a:	4b06      	ldr	r3, [pc, #24]	; (82ea4 <Cl_alarms_scanforAlarms+0x1824>)
   82e8c:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82e8e:	2300      	movs	r3, #0
}
   82e90:	4618      	mov	r0, r3
   82e92:	3708      	adds	r7, #8
   82e94:	46bd      	mov	sp, r7
   82e96:	bd80      	pop	{r7, pc}
   82e98:	20072633 	.word	0x20072633
   82e9c:	200728d0 	.word	0x200728d0
   82ea0:	20072e18 	.word	0x20072e18
   82ea4:	20071600 	.word	0x20071600
   82ea8:	20071604 	.word	0x20071604
   82eac:	20071608 	.word	0x20071608
   82eb0:	2007160c 	.word	0x2007160c
   82eb4:	20072eb4 	.word	0x20072eb4
   82eb8:	20071611 	.word	0x20071611
   82ebc:	20072cf4 	.word	0x20072cf4
   82ec0:	00082ec9 	.word	0x00082ec9
   82ec4:	0008870d 	.word	0x0008870d

00082ec8 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82ec8:	b480      	push	{r7}
   82eca:	af00      	add	r7, sp, #0
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX ))
   82ecc:	4b0a      	ldr	r3, [pc, #40]	; (82ef8 <Cl_UpdateMacAlarmEventTable+0x30>)
   82ece:	781b      	ldrb	r3, [r3, #0]
   82ed0:	2b00      	cmp	r3, #0
   82ed2:	d00c      	beq.n	82eee <Cl_UpdateMacAlarmEventTable+0x26>
   82ed4:	4b09      	ldr	r3, [pc, #36]	; (82efc <Cl_UpdateMacAlarmEventTable+0x34>)
   82ed6:	781b      	ldrb	r3, [r3, #0]
   82ed8:	2b0a      	cmp	r3, #10
   82eda:	d808      	bhi.n	82eee <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   82edc:	4b07      	ldr	r3, [pc, #28]	; (82efc <Cl_UpdateMacAlarmEventTable+0x34>)
   82ede:	2201      	movs	r2, #1
   82ee0:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   82ee2:	4b06      	ldr	r3, [pc, #24]	; (82efc <Cl_UpdateMacAlarmEventTable+0x34>)
   82ee4:	781b      	ldrb	r3, [r3, #0]
   82ee6:	3301      	adds	r3, #1
   82ee8:	b2da      	uxtb	r2, r3
   82eea:	4b04      	ldr	r3, [pc, #16]	; (82efc <Cl_UpdateMacAlarmEventTable+0x34>)
   82eec:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   82eee:	2300      	movs	r3, #0
}
   82ef0:	4618      	mov	r0, r3
   82ef2:	46bd      	mov	sp, r7
   82ef4:	bc80      	pop	{r7}
   82ef6:	4770      	bx	lr
   82ef8:	20071611 	.word	0x20071611
   82efc:	20072eb4 	.word	0x20072eb4

00082f00 <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   82f00:	b480      	push	{r7}
   82f02:	b085      	sub	sp, #20
   82f04:	af00      	add	r7, sp, #0
   82f06:	60ba      	str	r2, [r7, #8]
   82f08:	607b      	str	r3, [r7, #4]
   82f0a:	4603      	mov	r3, r0
   82f0c:	73fb      	strb	r3, [r7, #15]
   82f0e:	460b      	mov	r3, r1
   82f10:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   82f12:	7bfb      	ldrb	r3, [r7, #15]
   82f14:	4a10      	ldr	r2, [pc, #64]	; (82f58 <Cl_AlarmConfigureAlarmType+0x58>)
   82f16:	011b      	lsls	r3, r3, #4
   82f18:	4413      	add	r3, r2
   82f1a:	3301      	adds	r3, #1
   82f1c:	7bba      	ldrb	r2, [r7, #14]
   82f1e:	701a      	strb	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   82f20:	7bfb      	ldrb	r3, [r7, #15]
   82f22:	4a0d      	ldr	r2, [pc, #52]	; (82f58 <Cl_AlarmConfigureAlarmType+0x58>)
   82f24:	011b      	lsls	r3, r3, #4
   82f26:	4413      	add	r3, r2
   82f28:	3308      	adds	r3, #8
   82f2a:	687a      	ldr	r2, [r7, #4]
   82f2c:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   82f2e:	7bfb      	ldrb	r3, [r7, #15]
   82f30:	4a09      	ldr	r2, [pc, #36]	; (82f58 <Cl_AlarmConfigureAlarmType+0x58>)
   82f32:	011b      	lsls	r3, r3, #4
   82f34:	4413      	add	r3, r2
   82f36:	3304      	adds	r3, #4
   82f38:	68ba      	ldr	r2, [r7, #8]
   82f3a:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   82f3c:	7bfb      	ldrb	r3, [r7, #15]
   82f3e:	4a06      	ldr	r2, [pc, #24]	; (82f58 <Cl_AlarmConfigureAlarmType+0x58>)
   82f40:	011b      	lsls	r3, r3, #4
   82f42:	4413      	add	r3, r2
   82f44:	330c      	adds	r3, #12
   82f46:	7e3a      	ldrb	r2, [r7, #24]
   82f48:	701a      	strb	r2, [r3, #0]

return CL_OK;
   82f4a:	2300      	movs	r3, #0
		
}
   82f4c:	4618      	mov	r0, r3
   82f4e:	3714      	adds	r7, #20
   82f50:	46bd      	mov	sp, r7
   82f52:	bc80      	pop	{r7}
   82f54:	4770      	bx	lr
   82f56:	bf00      	nop
   82f58:	200728d0 	.word	0x200728d0

00082f5c <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   82f5c:	b580      	push	{r7, lr}
   82f5e:	b084      	sub	sp, #16
   82f60:	af00      	add	r7, sp, #0
   82f62:	4603      	mov	r3, r0
   82f64:	460a      	mov	r2, r1
   82f66:	71fb      	strb	r3, [r7, #7]
   82f68:	4613      	mov	r3, r2
   82f6a:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82f6c:	2300      	movs	r3, #0
   82f6e:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82f70:	79fb      	ldrb	r3, [r7, #7]
   82f72:	2b00      	cmp	r3, #0
   82f74:	d059      	beq.n	8302a <Cl_AlarmActivateAlarms+0xce>
   82f76:	79fb      	ldrb	r3, [r7, #7]
   82f78:	2b41      	cmp	r3, #65	; 0x41
   82f7a:	d856      	bhi.n	8302a <Cl_AlarmActivateAlarms+0xce>
	{

	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82f7c:	79fb      	ldrb	r3, [r7, #7]
   82f7e:	2b3d      	cmp	r3, #61	; 0x3d
   82f80:	d005      	beq.n	82f8e <Cl_AlarmActivateAlarms+0x32>
   82f82:	79fb      	ldrb	r3, [r7, #7]
   82f84:	2b3e      	cmp	r3, #62	; 0x3e
   82f86:	d002      	beq.n	82f8e <Cl_AlarmActivateAlarms+0x32>
   82f88:	79fb      	ldrb	r3, [r7, #7]
   82f8a:	2b3c      	cmp	r3, #60	; 0x3c
   82f8c:	d114      	bne.n	82fb8 <Cl_AlarmActivateAlarms+0x5c>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82f8e:	79fb      	ldrb	r3, [r7, #7]
   82f90:	4a2c      	ldr	r2, [pc, #176]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82f92:	011b      	lsls	r3, r3, #4
   82f94:	4413      	add	r3, r2
   82f96:	330e      	adds	r3, #14
   82f98:	2201      	movs	r2, #1
   82f9a:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82f9c:	79fb      	ldrb	r3, [r7, #7]
   82f9e:	4a29      	ldr	r2, [pc, #164]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82fa0:	011b      	lsls	r3, r3, #4
   82fa2:	4413      	add	r3, r2
   82fa4:	3302      	adds	r3, #2
   82fa6:	2202      	movs	r2, #2
   82fa8:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82faa:	79fb      	ldrb	r3, [r7, #7]
   82fac:	4a25      	ldr	r2, [pc, #148]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82fae:	011b      	lsls	r3, r3, #4
   82fb0:	4413      	add	r3, r2
   82fb2:	330d      	adds	r3, #13
   82fb4:	2200      	movs	r2, #0
   82fb6:	701a      	strb	r2, [r3, #0]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82fb8:	4b23      	ldr	r3, [pc, #140]	; (83048 <Cl_AlarmActivateAlarms+0xec>)
   82fba:	781b      	ldrb	r3, [r3, #0]
   82fbc:	2b00      	cmp	r3, #0
   82fbe:	d036      	beq.n	8302e <Cl_AlarmActivateAlarms+0xd2>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82fc0:	79fb      	ldrb	r3, [r7, #7]
   82fc2:	4a20      	ldr	r2, [pc, #128]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82fc4:	011b      	lsls	r3, r3, #4
   82fc6:	4413      	add	r3, r2
   82fc8:	79fa      	ldrb	r2, [r7, #7]
   82fca:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82fcc:	79bb      	ldrb	r3, [r7, #6]
   82fce:	2b00      	cmp	r3, #0
   82fd0:	d015      	beq.n	82ffe <Cl_AlarmActivateAlarms+0xa2>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82fd2:	79fb      	ldrb	r3, [r7, #7]
   82fd4:	4a1b      	ldr	r2, [pc, #108]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82fd6:	011b      	lsls	r3, r3, #4
   82fd8:	4413      	add	r3, r2
   82fda:	330e      	adds	r3, #14
   82fdc:	2201      	movs	r2, #1
   82fde:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82fe0:	79fb      	ldrb	r3, [r7, #7]
   82fe2:	4a18      	ldr	r2, [pc, #96]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82fe4:	011b      	lsls	r3, r3, #4
   82fe6:	4413      	add	r3, r2
   82fe8:	3302      	adds	r3, #2
   82fea:	2202      	movs	r2, #2
   82fec:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82fee:	79fb      	ldrb	r3, [r7, #7]
   82ff0:	4a14      	ldr	r2, [pc, #80]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   82ff2:	011b      	lsls	r3, r3, #4
   82ff4:	4413      	add	r3, r2
   82ff6:	330d      	adds	r3, #13
   82ff8:	2200      	movs	r2, #0
   82ffa:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82ffc:	e017      	b.n	8302e <Cl_AlarmActivateAlarms+0xd2>
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82ffe:	79fb      	ldrb	r3, [r7, #7]
   83000:	4a10      	ldr	r2, [pc, #64]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   83002:	011b      	lsls	r3, r3, #4
   83004:	4413      	add	r3, r2
   83006:	330e      	adds	r3, #14
   83008:	2200      	movs	r2, #0
   8300a:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   8300c:	79fb      	ldrb	r3, [r7, #7]
   8300e:	4a0d      	ldr	r2, [pc, #52]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   83010:	011b      	lsls	r3, r3, #4
   83012:	4413      	add	r3, r2
   83014:	3302      	adds	r3, #2
   83016:	2204      	movs	r2, #4
   83018:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   8301a:	79fb      	ldrb	r3, [r7, #7]
   8301c:	4a09      	ldr	r2, [pc, #36]	; (83044 <Cl_AlarmActivateAlarms+0xe8>)
   8301e:	011b      	lsls	r3, r3, #4
   83020:	4413      	add	r3, r2
   83022:	330d      	adds	r3, #13
   83024:	2200      	movs	r2, #0
   83026:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   83028:	e001      	b.n	8302e <Cl_AlarmActivateAlarms+0xd2>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   8302a:	2304      	movs	r3, #4
   8302c:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   8302e:	7bfb      	ldrb	r3, [r7, #15]
   83030:	2b00      	cmp	r3, #0
   83032:	d001      	beq.n	83038 <Cl_AlarmActivateAlarms+0xdc>
   83034:	4b05      	ldr	r3, [pc, #20]	; (8304c <Cl_AlarmActivateAlarms+0xf0>)
   83036:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   83038:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   8303a:	4618      	mov	r0, r3
   8303c:	3710      	adds	r7, #16
   8303e:	46bd      	mov	sp, r7
   83040:	bd80      	pop	{r7, pc}
   83042:	bf00      	nop
   83044:	200728d0 	.word	0x200728d0
   83048:	200709ec 	.word	0x200709ec
   8304c:	0008870d 	.word	0x0008870d

00083050 <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   83050:	b480      	push	{r7}
   83052:	b085      	sub	sp, #20
   83054:	af00      	add	r7, sp, #0
   83056:	4603      	mov	r3, r0
   83058:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   8305a:	2300      	movs	r3, #0
   8305c:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   8305e:	79fb      	ldrb	r3, [r7, #7]
   83060:	2b00      	cmp	r3, #0
   83062:	d00c      	beq.n	8307e <Cl_AlarmResetAlarm+0x2e>
   83064:	79fb      	ldrb	r3, [r7, #7]
   83066:	2b41      	cmp	r3, #65	; 0x41
   83068:	d809      	bhi.n	8307e <Cl_AlarmResetAlarm+0x2e>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   8306a:	79fb      	ldrb	r3, [r7, #7]
   8306c:	4a08      	ldr	r2, [pc, #32]	; (83090 <Cl_AlarmResetAlarm+0x40>)
   8306e:	011b      	lsls	r3, r3, #4
   83070:	4413      	add	r3, r2
   83072:	3302      	adds	r3, #2
   83074:	2202      	movs	r2, #2
   83076:	701a      	strb	r2, [r3, #0]
						cl_AlarmRetCode = CL_OK;
   83078:	2300      	movs	r3, #0
   8307a:	73fb      	strb	r3, [r7, #15]
   8307c:	e001      	b.n	83082 <Cl_AlarmResetAlarm+0x32>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   8307e:	2304      	movs	r3, #4
   83080:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   83082:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   83084:	4618      	mov	r0, r3
   83086:	3714      	adds	r7, #20
   83088:	46bd      	mov	sp, r7
   8308a:	bc80      	pop	{r7}
   8308c:	4770      	bx	lr
   8308e:	bf00      	nop
   83090:	200728d0 	.word	0x200728d0

00083094 <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   83094:	b580      	push	{r7, lr}
   83096:	b084      	sub	sp, #16
   83098:	af00      	add	r7, sp, #0
   8309a:	4603      	mov	r3, r0
   8309c:	6039      	str	r1, [r7, #0]
   8309e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   830a0:	2300      	movs	r3, #0
   830a2:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   830a4:	79fb      	ldrb	r3, [r7, #7]
   830a6:	2b00      	cmp	r3, #0
   830a8:	d01c      	beq.n	830e4 <Cl_Alarm_GetAlarmStatus+0x50>
   830aa:	79fb      	ldrb	r3, [r7, #7]
   830ac:	2b41      	cmp	r3, #65	; 0x41
   830ae:	d819      	bhi.n	830e4 <Cl_Alarm_GetAlarmStatus+0x50>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   830b0:	79fb      	ldrb	r3, [r7, #7]
   830b2:	4a12      	ldr	r2, [pc, #72]	; (830fc <Cl_Alarm_GetAlarmStatus+0x68>)
   830b4:	011b      	lsls	r3, r3, #4
   830b6:	4413      	add	r3, r2
   830b8:	3302      	adds	r3, #2
   830ba:	781b      	ldrb	r3, [r3, #0]
   830bc:	2b01      	cmp	r3, #1
   830be:	d007      	beq.n	830d0 <Cl_Alarm_GetAlarmStatus+0x3c>
   830c0:	79fb      	ldrb	r3, [r7, #7]
   830c2:	4a0e      	ldr	r2, [pc, #56]	; (830fc <Cl_Alarm_GetAlarmStatus+0x68>)
   830c4:	011b      	lsls	r3, r3, #4
   830c6:	4413      	add	r3, r2
   830c8:	3302      	adds	r3, #2
   830ca:	781b      	ldrb	r3, [r3, #0]
   830cc:	2b03      	cmp	r3, #3
   830ce:	d103      	bne.n	830d8 <Cl_Alarm_GetAlarmStatus+0x44>
		 {
			 *cl_status = true;
   830d0:	683b      	ldr	r3, [r7, #0]
   830d2:	2201      	movs	r2, #1
   830d4:	701a      	strb	r2, [r3, #0]
   830d6:	e002      	b.n	830de <Cl_Alarm_GetAlarmStatus+0x4a>
		 }
		 else
		 {
			 *cl_status = false;
   830d8:	683b      	ldr	r3, [r7, #0]
   830da:	2200      	movs	r2, #0
   830dc:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   830de:	2300      	movs	r3, #0
   830e0:	73fb      	strb	r3, [r7, #15]
   830e2:	e001      	b.n	830e8 <Cl_Alarm_GetAlarmStatus+0x54>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   830e4:	2304      	movs	r3, #4
   830e6:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   830e8:	7bfb      	ldrb	r3, [r7, #15]
   830ea:	2b00      	cmp	r3, #0
   830ec:	d001      	beq.n	830f2 <Cl_Alarm_GetAlarmStatus+0x5e>
   830ee:	4b04      	ldr	r3, [pc, #16]	; (83100 <Cl_Alarm_GetAlarmStatus+0x6c>)
   830f0:	4798      	blx	r3
	return cl_alarmRetCode;
   830f2:	7bfb      	ldrb	r3, [r7, #15]
	
}
   830f4:	4618      	mov	r0, r3
   830f6:	3710      	adds	r7, #16
   830f8:	46bd      	mov	sp, r7
   830fa:	bd80      	pop	{r7, pc}
   830fc:	200728d0 	.word	0x200728d0
   83100:	0008870d 	.word	0x0008870d

00083104 <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   83104:	b580      	push	{r7, lr}
   83106:	b084      	sub	sp, #16
   83108:	af00      	add	r7, sp, #0
   8310a:	4603      	mov	r3, r0
   8310c:	460a      	mov	r2, r1
   8310e:	71fb      	strb	r3, [r7, #7]
   83110:	4613      	mov	r3, r2
   83112:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   83114:	2300      	movs	r3, #0
   83116:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   83118:	79fb      	ldrb	r3, [r7, #7]
   8311a:	2b00      	cmp	r3, #0
   8311c:	d063      	beq.n	831e6 <Cl_Alarm_TriggerAlarm+0xe2>
   8311e:	79fb      	ldrb	r3, [r7, #7]
   83120:	2b41      	cmp	r3, #65	; 0x41
   83122:	d860      	bhi.n	831e6 <Cl_Alarm_TriggerAlarm+0xe2>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   83124:	79fb      	ldrb	r3, [r7, #7]
   83126:	4a36      	ldr	r2, [pc, #216]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   83128:	011b      	lsls	r3, r3, #4
   8312a:	4413      	add	r3, r2
   8312c:	330e      	adds	r3, #14
   8312e:	781b      	ldrb	r3, [r3, #0]
   83130:	2b00      	cmp	r3, #0
   83132:	d055      	beq.n	831e0 <Cl_Alarm_TriggerAlarm+0xdc>
	{
			if(cl_status)
   83134:	79bb      	ldrb	r3, [r7, #6]
   83136:	2b00      	cmp	r3, #0
   83138:	d039      	beq.n	831ae <Cl_Alarm_TriggerAlarm+0xaa>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   8313a:	79fb      	ldrb	r3, [r7, #7]
   8313c:	4a30      	ldr	r2, [pc, #192]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   8313e:	011b      	lsls	r3, r3, #4
   83140:	4413      	add	r3, r2
   83142:	3302      	adds	r3, #2
   83144:	2201      	movs	r2, #1
   83146:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=cl_alarm_id;
   83148:	4b2e      	ldr	r3, [pc, #184]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   8314a:	781b      	ldrb	r3, [r3, #0]
   8314c:	79fa      	ldrb	r2, [r7, #7]
   8314e:	b291      	uxth	r1, r2
   83150:	4a2c      	ldr	r2, [pc, #176]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   83152:	3301      	adds	r3, #1
   83154:	00db      	lsls	r3, r3, #3
   83156:	4413      	add	r3, r2
   83158:	460a      	mov	r2, r1
   8315a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   8315c:	79fb      	ldrb	r3, [r7, #7]
   8315e:	4928      	ldr	r1, [pc, #160]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   83160:	011a      	lsls	r2, r3, #4
   83162:	440a      	add	r2, r1
   83164:	320d      	adds	r2, #13
   83166:	7812      	ldrb	r2, [r2, #0]
   83168:	3201      	adds	r2, #1
   8316a:	b2d1      	uxtb	r1, r2
   8316c:	4a24      	ldr	r2, [pc, #144]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   8316e:	011b      	lsls	r3, r3, #4
   83170:	4413      	add	r3, r2
   83172:	330d      	adds	r3, #13
   83174:	460a      	mov	r2, r1
   83176:	701a      	strb	r2, [r3, #0]
				cl_alarm_triggered = true;
   83178:	4b23      	ldr	r3, [pc, #140]	; (83208 <Cl_Alarm_TriggerAlarm+0x104>)
   8317a:	2201      	movs	r2, #1
   8317c:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   8317e:	4a23      	ldr	r2, [pc, #140]	; (8320c <Cl_Alarm_TriggerAlarm+0x108>)
   83180:	79fb      	ldrb	r3, [r7, #7]
   83182:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   83184:	79fb      	ldrb	r3, [r7, #7]
   83186:	2b3c      	cmp	r3, #60	; 0x3c
   83188:	d107      	bne.n	8319a <Cl_Alarm_TriggerAlarm+0x96>
				{
					Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   8318a:	4b1e      	ldr	r3, [pc, #120]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   8318c:	781b      	ldrb	r3, [r3, #0]
   8318e:	461a      	mov	r2, r3
   83190:	4b1c      	ldr	r3, [pc, #112]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   83192:	4413      	add	r3, r2
   83194:	222d      	movs	r2, #45	; 0x2d
   83196:	709a      	strb	r2, [r3, #2]
   83198:	e006      	b.n	831a8 <Cl_Alarm_TriggerAlarm+0xa4>
				}
				else
				{
						Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8319a:	4b1a      	ldr	r3, [pc, #104]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   8319c:	781b      	ldrb	r3, [r3, #0]
   8319e:	461a      	mov	r2, r3
   831a0:	4b18      	ldr	r3, [pc, #96]	; (83204 <Cl_Alarm_TriggerAlarm+0x100>)
   831a2:	4413      	add	r3, r2
   831a4:	222e      	movs	r2, #46	; 0x2e
   831a6:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   831a8:	4b19      	ldr	r3, [pc, #100]	; (83210 <Cl_Alarm_TriggerAlarm+0x10c>)
   831aa:	4798      	blx	r3
   831ac:	e018      	b.n	831e0 <Cl_Alarm_TriggerAlarm+0xdc>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   831ae:	79fb      	ldrb	r3, [r7, #7]
   831b0:	4a13      	ldr	r2, [pc, #76]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   831b2:	011b      	lsls	r3, r3, #4
   831b4:	4413      	add	r3, r2
   831b6:	3302      	adds	r3, #2
   831b8:	781b      	ldrb	r3, [r3, #0]
   831ba:	2b01      	cmp	r3, #1
   831bc:	d110      	bne.n	831e0 <Cl_Alarm_TriggerAlarm+0xdc>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   831be:	79fb      	ldrb	r3, [r7, #7]
   831c0:	4a0f      	ldr	r2, [pc, #60]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   831c2:	011b      	lsls	r3, r3, #4
   831c4:	4413      	add	r3, r2
   831c6:	3302      	adds	r3, #2
   831c8:	2204      	movs	r2, #4
   831ca:	701a      	strb	r2, [r3, #0]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   831cc:	79fb      	ldrb	r3, [r7, #7]
   831ce:	4a0c      	ldr	r2, [pc, #48]	; (83200 <Cl_Alarm_TriggerAlarm+0xfc>)
   831d0:	011b      	lsls	r3, r3, #4
   831d2:	4413      	add	r3, r2
   831d4:	330d      	adds	r3, #13
   831d6:	2200      	movs	r2, #0
   831d8:	701a      	strb	r2, [r3, #0]
					cl_alarm_triggered = false;
   831da:	4b0b      	ldr	r3, [pc, #44]	; (83208 <Cl_Alarm_TriggerAlarm+0x104>)
   831dc:	2200      	movs	r2, #0
   831de:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   831e0:	2300      	movs	r3, #0
   831e2:	73fb      	strb	r3, [r7, #15]
   831e4:	e001      	b.n	831ea <Cl_Alarm_TriggerAlarm+0xe6>
}else
{
	cl_alarmRetCode = CL_ERROR;
   831e6:	2304      	movs	r3, #4
   831e8:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   831ea:	7bfb      	ldrb	r3, [r7, #15]
   831ec:	2b00      	cmp	r3, #0
   831ee:	d001      	beq.n	831f4 <Cl_Alarm_TriggerAlarm+0xf0>
   831f0:	4b08      	ldr	r3, [pc, #32]	; (83214 <Cl_Alarm_TriggerAlarm+0x110>)
   831f2:	4798      	blx	r3
return CL_OK;
   831f4:	2300      	movs	r3, #0

}
   831f6:	4618      	mov	r0, r3
   831f8:	3710      	adds	r7, #16
   831fa:	46bd      	mov	sp, r7
   831fc:	bd80      	pop	{r7, pc}
   831fe:	bf00      	nop
   83200:	200728d0 	.word	0x200728d0
   83204:	20072eb4 	.word	0x20072eb4
   83208:	20071611 	.word	0x20071611
   8320c:	20072cf4 	.word	0x20072cf4
   83210:	00082ec9 	.word	0x00082ec9
   83214:	0008870d 	.word	0x0008870d

00083218 <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   83218:	b480      	push	{r7}
   8321a:	b083      	sub	sp, #12
   8321c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   8321e:	2300      	movs	r3, #0
   83220:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   83222:	4b0f      	ldr	r3, [pc, #60]	; (83260 <Cl_Alarm_timmer_50millisec+0x48>)
   83224:	881b      	ldrh	r3, [r3, #0]
   83226:	3301      	adds	r3, #1
   83228:	b29a      	uxth	r2, r3
   8322a:	4b0d      	ldr	r3, [pc, #52]	; (83260 <Cl_Alarm_timmer_50millisec+0x48>)
   8322c:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   8322e:	4b0d      	ldr	r3, [pc, #52]	; (83264 <Cl_Alarm_timmer_50millisec+0x4c>)
   83230:	2200      	movs	r2, #0
   83232:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   83234:	4b0c      	ldr	r3, [pc, #48]	; (83268 <Cl_Alarm_timmer_50millisec+0x50>)
   83236:	681b      	ldr	r3, [r3, #0]
   83238:	3301      	adds	r3, #1
   8323a:	4a0b      	ldr	r2, [pc, #44]	; (83268 <Cl_Alarm_timmer_50millisec+0x50>)
   8323c:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   8323e:	4b08      	ldr	r3, [pc, #32]	; (83260 <Cl_Alarm_timmer_50millisec+0x48>)
   83240:	881b      	ldrh	r3, [r3, #0]
   83242:	2b14      	cmp	r3, #20
   83244:	d905      	bls.n	83252 <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   83246:	4b09      	ldr	r3, [pc, #36]	; (8326c <Cl_Alarm_timmer_50millisec+0x54>)
   83248:	2200      	movs	r2, #0
   8324a:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   8324c:	4b04      	ldr	r3, [pc, #16]	; (83260 <Cl_Alarm_timmer_50millisec+0x48>)
   8324e:	2200      	movs	r2, #0
   83250:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   83252:	2300      	movs	r3, #0
	
}
   83254:	4618      	mov	r0, r3
   83256:	370c      	adds	r7, #12
   83258:	46bd      	mov	sp, r7
   8325a:	bc80      	pop	{r7}
   8325c:	4770      	bx	lr
   8325e:	bf00      	nop
   83260:	20071638 	.word	0x20071638
   83264:	20071608 	.word	0x20071608
   83268:	20071604 	.word	0x20071604
   8326c:	2007160c 	.word	0x2007160c

00083270 <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   83270:	b480      	push	{r7}
   83272:	b083      	sub	sp, #12
   83274:	af00      	add	r7, sp, #0
   83276:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   83278:	4b3b      	ldr	r3, [pc, #236]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   8327a:	881b      	ldrh	r3, [r3, #0]
   8327c:	461a      	mov	r2, r3
   8327e:	4613      	mov	r3, r2
   83280:	00db      	lsls	r3, r3, #3
   83282:	4413      	add	r3, r2
   83284:	4a39      	ldr	r2, [pc, #228]	; (8336c <cl_get_dac_conductivity_info+0xfc>)
   83286:	8e52      	ldrh	r2, [r2, #50]	; 0x32
   83288:	4413      	add	r3, r2
   8328a:	4a39      	ldr	r2, [pc, #228]	; (83370 <cl_get_dac_conductivity_info+0x100>)
   8328c:	fb82 1203 	smull	r1, r2, r2, r3
   83290:	1092      	asrs	r2, r2, #2
   83292:	17db      	asrs	r3, r3, #31
   83294:	1ad3      	subs	r3, r2, r3
   83296:	b29a      	uxth	r2, r3
   83298:	4b33      	ldr	r3, [pc, #204]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   8329a:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   8329c:	4b35      	ldr	r3, [pc, #212]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   8329e:	781b      	ldrb	r3, [r3, #0]
   832a0:	2b03      	cmp	r3, #3
   832a2:	d85b      	bhi.n	8335c <cl_get_dac_conductivity_info+0xec>
   832a4:	a201      	add	r2, pc, #4	; (adr r2, 832ac <cl_get_dac_conductivity_info+0x3c>)
   832a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832aa:	bf00      	nop
   832ac:	000832bd 	.word	0x000832bd
   832b0:	000832f3 	.word	0x000832f3
   832b4:	000832bd 	.word	0x000832bd
   832b8:	0008331f 	.word	0x0008331f
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   832bc:	4b2a      	ldr	r3, [pc, #168]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   832be:	881b      	ldrh	r3, [r3, #0]
   832c0:	2b32      	cmp	r3, #50	; 0x32
   832c2:	d90a      	bls.n	832da <cl_get_dac_conductivity_info+0x6a>
   832c4:	4b28      	ldr	r3, [pc, #160]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   832c6:	881b      	ldrh	r3, [r3, #0]
   832c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832cc:	d205      	bcs.n	832da <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   832ce:	687b      	ldr	r3, [r7, #4]
   832d0:	220a      	movs	r2, #10
   832d2:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   832d4:	4b27      	ldr	r3, [pc, #156]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   832d6:	2201      	movs	r2, #1
   832d8:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   832da:	4b23      	ldr	r3, [pc, #140]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   832dc:	881b      	ldrh	r3, [r3, #0]
   832de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832e2:	d936      	bls.n	83352 <cl_get_dac_conductivity_info+0xe2>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   832e4:	687b      	ldr	r3, [r7, #4]
   832e6:	220b      	movs	r2, #11
   832e8:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   832ea:	4b22      	ldr	r3, [pc, #136]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   832ec:	2203      	movs	r2, #3
   832ee:	701a      	strb	r2, [r3, #0]
		}
		break;
   832f0:	e02f      	b.n	83352 <cl_get_dac_conductivity_info+0xe2>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   832f2:	4b1d      	ldr	r3, [pc, #116]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   832f4:	881b      	ldrh	r3, [r3, #0]
   832f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832fa:	d905      	bls.n	83308 <cl_get_dac_conductivity_info+0x98>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   832fc:	687b      	ldr	r3, [r7, #4]
   832fe:	220b      	movs	r2, #11
   83300:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   83302:	4b1c      	ldr	r3, [pc, #112]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   83304:	2203      	movs	r2, #3
   83306:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   83308:	4b17      	ldr	r3, [pc, #92]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   8330a:	881b      	ldrh	r3, [r3, #0]
   8330c:	2b31      	cmp	r3, #49	; 0x31
   8330e:	d822      	bhi.n	83356 <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   83310:	687b      	ldr	r3, [r7, #4]
   83312:	2209      	movs	r2, #9
   83314:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   83316:	4b17      	ldr	r3, [pc, #92]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   83318:	2202      	movs	r2, #2
   8331a:	701a      	strb	r2, [r3, #0]
				}
		break;
   8331c:	e01b      	b.n	83356 <cl_get_dac_conductivity_info+0xe6>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   8331e:	4b12      	ldr	r3, [pc, #72]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   83320:	881b      	ldrh	r3, [r3, #0]
   83322:	2b32      	cmp	r3, #50	; 0x32
   83324:	d90a      	bls.n	8333c <cl_get_dac_conductivity_info+0xcc>
   83326:	4b10      	ldr	r3, [pc, #64]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   83328:	881b      	ldrh	r3, [r3, #0]
   8332a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8332e:	d205      	bcs.n	8333c <cl_get_dac_conductivity_info+0xcc>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   83330:	687b      	ldr	r3, [r7, #4]
   83332:	220a      	movs	r2, #10
   83334:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   83336:	4b0f      	ldr	r3, [pc, #60]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   83338:	2201      	movs	r2, #1
   8333a:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   8333c:	4b0a      	ldr	r3, [pc, #40]	; (83368 <cl_get_dac_conductivity_info+0xf8>)
   8333e:	881b      	ldrh	r3, [r3, #0]
   83340:	2b31      	cmp	r3, #49	; 0x31
   83342:	d80a      	bhi.n	8335a <cl_get_dac_conductivity_info+0xea>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   83344:	687b      	ldr	r3, [r7, #4]
   83346:	2209      	movs	r2, #9
   83348:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   8334a:	4b0a      	ldr	r3, [pc, #40]	; (83374 <cl_get_dac_conductivity_info+0x104>)
   8334c:	2202      	movs	r2, #2
   8334e:	701a      	strb	r2, [r3, #0]
				}
		break;
   83350:	e003      	b.n	8335a <cl_get_dac_conductivity_info+0xea>
		if(cl_ten_pt_dac_cond_avg > 2000)
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
		}
		break;
   83352:	bf00      	nop
   83354:	e002      	b.n	8335c <cl_get_dac_conductivity_info+0xec>
				if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
				}
		break;
   83356:	bf00      	nop
   83358:	e000      	b.n	8335c <cl_get_dac_conductivity_info+0xec>
		if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
				}
		break;
   8335a:	bf00      	nop
	}
return CL_OK;
   8335c:	2300      	movs	r3, #0
}
   8335e:	4618      	mov	r0, r3
   83360:	370c      	adds	r7, #12
   83362:	46bd      	mov	sp, r7
   83364:	bc80      	pop	{r7}
   83366:	4770      	bx	lr
   83368:	2007163a 	.word	0x2007163a
   8336c:	20072e18 	.word	0x20072e18
   83370:	66666667 	.word	0x66666667
   83374:	2007163c 	.word	0x2007163c

00083378 <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   83378:	b580      	push	{r7, lr}
   8337a:	b084      	sub	sp, #16
   8337c:	af00      	add	r7, sp, #0
   8337e:	4603      	mov	r3, r0
   83380:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   83382:	2300      	movs	r3, #0
   83384:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   83386:	79fb      	ldrb	r3, [r7, #7]
   83388:	3b04      	subs	r3, #4
   8338a:	2b0a      	cmp	r3, #10
   8338c:	d856      	bhi.n	8343c <Cl_bc_controller+0xc4>
   8338e:	a201      	add	r2, pc, #4	; (adr r2, 83394 <Cl_bc_controller+0x1c>)
   83390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83394:	000833c1 	.word	0x000833c1
   83398:	0008341f 	.word	0x0008341f
   8339c:	0008343d 	.word	0x0008343d
   833a0:	0008343d 	.word	0x0008343d
   833a4:	0008343d 	.word	0x0008343d
   833a8:	0008343d 	.word	0x0008343d
   833ac:	0008343d 	.word	0x0008343d
   833b0:	000833ef 	.word	0x000833ef
   833b4:	0008343d 	.word	0x0008343d
   833b8:	0008342d 	.word	0x0008342d
   833bc:	0008343d 	.word	0x0008343d
	{
		case	BC_EVENT_START:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833c0:	2007      	movs	r0, #7
   833c2:	4b83      	ldr	r3, [pc, #524]	; (835d0 <Cl_bc_controller+0x258>)
   833c4:	4798      	blx	r3
   833c6:	4603      	mov	r3, r0
   833c8:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   833ca:	f240 414c 	movw	r1, #1100	; 0x44c
   833ce:	2002      	movs	r0, #2
   833d0:	4b80      	ldr	r3, [pc, #512]	; (835d4 <Cl_bc_controller+0x25c>)
   833d2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   833d4:	f44f 7161 	mov.w	r1, #900	; 0x384
   833d8:	2001      	movs	r0, #1
   833da:	4b7e      	ldr	r3, [pc, #504]	; (835d4 <Cl_bc_controller+0x25c>)
   833dc:	4798      	blx	r3
				bc_laststate = bc_state;
   833de:	4b7e      	ldr	r3, [pc, #504]	; (835d8 <Cl_bc_controller+0x260>)
   833e0:	781a      	ldrb	r2, [r3, #0]
   833e2:	4b7e      	ldr	r3, [pc, #504]	; (835dc <Cl_bc_controller+0x264>)
   833e4:	701a      	strb	r2, [r3, #0]
				bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   833e6:	4b7c      	ldr	r3, [pc, #496]	; (835d8 <Cl_bc_controller+0x260>)
   833e8:	2202      	movs	r2, #2
   833ea:	701a      	strb	r2, [r3, #0]
		break;
   833ec:	e026      	b.n	8343c <Cl_bc_controller+0xc4>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   833ee:	4b7a      	ldr	r3, [pc, #488]	; (835d8 <Cl_bc_controller+0x260>)
   833f0:	781b      	ldrb	r3, [r3, #0]
   833f2:	2b00      	cmp	r3, #0
   833f4:	d121      	bne.n	8343a <Cl_bc_controller+0xc2>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833f6:	2007      	movs	r0, #7
   833f8:	4b75      	ldr	r3, [pc, #468]	; (835d0 <Cl_bc_controller+0x258>)
   833fa:	4798      	blx	r3
   833fc:	4603      	mov	r3, r0
   833fe:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   83400:	4b76      	ldr	r3, [pc, #472]	; (835dc <Cl_bc_controller+0x264>)
   83402:	781b      	ldrb	r3, [r3, #0]
   83404:	461a      	mov	r2, r3
   83406:	4b76      	ldr	r3, [pc, #472]	; (835e0 <Cl_bc_controller+0x268>)
   83408:	5c9b      	ldrb	r3, [r3, r2]
   8340a:	4618      	mov	r0, r3
   8340c:	4b70      	ldr	r3, [pc, #448]	; (835d0 <Cl_bc_controller+0x258>)
   8340e:	4798      	blx	r3
   83410:	4603      	mov	r3, r0
   83412:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   83414:	4b71      	ldr	r3, [pc, #452]	; (835dc <Cl_bc_controller+0x264>)
   83416:	781a      	ldrb	r2, [r3, #0]
   83418:	4b6f      	ldr	r3, [pc, #444]	; (835d8 <Cl_bc_controller+0x260>)
   8341a:	701a      	strb	r2, [r3, #0]
				}
		break;
   8341c:	e00d      	b.n	8343a <Cl_bc_controller+0xc2>
		case	BC_EVENT_STOP:
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8341e:	2011      	movs	r0, #17
   83420:	4b6b      	ldr	r3, [pc, #428]	; (835d0 <Cl_bc_controller+0x258>)
   83422:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   83424:	4b6c      	ldr	r3, [pc, #432]	; (835d8 <Cl_bc_controller+0x260>)
   83426:	2200      	movs	r2, #0
   83428:	701a      	strb	r2, [r3, #0]
			
		break;
   8342a:	e007      	b.n	8343c <Cl_bc_controller+0xc4>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   8342c:	4b6d      	ldr	r3, [pc, #436]	; (835e4 <Cl_bc_controller+0x26c>)
   8342e:	2200      	movs	r2, #0
   83430:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   83432:	4b69      	ldr	r3, [pc, #420]	; (835d8 <Cl_bc_controller+0x260>)
   83434:	2200      	movs	r2, #0
   83436:	701a      	strb	r2, [r3, #0]
		break;
   83438:	e000      	b.n	8343c <Cl_bc_controller+0xc4>
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
				}
		break;
   8343a:	bf00      	nop
		case	BC_EVENT_PAUSE:
		break;
		case	BC_EVENT_RESET:
		break;
	}
	switch (bc_state)
   8343c:	4b66      	ldr	r3, [pc, #408]	; (835d8 <Cl_bc_controller+0x260>)
   8343e:	781b      	ldrb	r3, [r3, #0]
   83440:	2b15      	cmp	r3, #21
   83442:	f200 85b3 	bhi.w	83fac <Cl_bc_controller+0xc34>
   83446:	a201      	add	r2, pc, #4	; (adr r2, 8344c <Cl_bc_controller+0xd4>)
   83448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8344c:	00083fad 	.word	0x00083fad
   83450:	00083fad 	.word	0x00083fad
   83454:	000834a5 	.word	0x000834a5
   83458:	0008355f 	.word	0x0008355f
   8345c:	00083789 	.word	0x00083789
   83460:	000837bd 	.word	0x000837bd
   83464:	000837d9 	.word	0x000837d9
   83468:	0008380d 	.word	0x0008380d
   8346c:	00083829 	.word	0x00083829
   83470:	0008384f 	.word	0x0008384f
   83474:	0008386b 	.word	0x0008386b
   83478:	00083905 	.word	0x00083905
   8347c:	00083921 	.word	0x00083921
   83480:	00083983 	.word	0x00083983
   83484:	00083c21 	.word	0x00083c21
   83488:	00083c83 	.word	0x00083c83
   8348c:	00083f25 	.word	0x00083f25
   83490:	00083fad 	.word	0x00083fad
   83494:	00083f69 	.word	0x00083f69
   83498:	00083fad 	.word	0x00083fad
   8349c:	00083fad 	.word	0x00083fad
   834a0:	00083fad 	.word	0x00083fad
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   834a4:	79fb      	ldrb	r3, [r7, #7]
   834a6:	3b01      	subs	r3, #1
   834a8:	2b07      	cmp	r3, #7
   834aa:	d84c      	bhi.n	83546 <Cl_bc_controller+0x1ce>
   834ac:	a201      	add	r2, pc, #4	; (adr r2, 834b4 <Cl_bc_controller+0x13c>)
   834ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   834b2:	bf00      	nop
   834b4:	000834d5 	.word	0x000834d5
   834b8:	000834dd 	.word	0x000834dd
   834bc:	00083547 	.word	0x00083547
   834c0:	00083547 	.word	0x00083547
   834c4:	00083547 	.word	0x00083547
   834c8:	000834fb 	.word	0x000834fb
   834cc:	00083547 	.word	0x00083547
   834d0:	00083521 	.word	0x00083521
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   834d4:	4b44      	ldr	r3, [pc, #272]	; (835e8 <Cl_bc_controller+0x270>)
   834d6:	2201      	movs	r2, #1
   834d8:	701a      	strb	r2, [r3, #0]
								break;
   834da:	e03e      	b.n	8355a <Cl_bc_controller+0x1e2>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   834dc:	4b42      	ldr	r3, [pc, #264]	; (835e8 <Cl_bc_controller+0x270>)
   834de:	781b      	ldrb	r3, [r3, #0]
   834e0:	2b00      	cmp	r3, #0
   834e2:	d033      	beq.n	8354c <Cl_bc_controller+0x1d4>
								{
									bc_laststate = bc_state;
   834e4:	4b3c      	ldr	r3, [pc, #240]	; (835d8 <Cl_bc_controller+0x260>)
   834e6:	781a      	ldrb	r2, [r3, #0]
   834e8:	4b3c      	ldr	r3, [pc, #240]	; (835dc <Cl_bc_controller+0x264>)
   834ea:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   834ec:	4b3a      	ldr	r3, [pc, #232]	; (835d8 <Cl_bc_controller+0x260>)
   834ee:	2203      	movs	r2, #3
   834f0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   834f2:	4b3d      	ldr	r3, [pc, #244]	; (835e8 <Cl_bc_controller+0x270>)
   834f4:	2200      	movs	r2, #0
   834f6:	701a      	strb	r2, [r3, #0]
								}
								break;
   834f8:	e028      	b.n	8354c <Cl_bc_controller+0x1d4>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   834fa:	4b3a      	ldr	r3, [pc, #232]	; (835e4 <Cl_bc_controller+0x26c>)
   834fc:	2200      	movs	r2, #0
   834fe:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   83500:	2005      	movs	r0, #5
   83502:	4b33      	ldr	r3, [pc, #204]	; (835d0 <Cl_bc_controller+0x258>)
   83504:	4798      	blx	r3
   83506:	4603      	mov	r3, r0
   83508:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   8350a:	7bfb      	ldrb	r3, [r7, #15]
   8350c:	2b00      	cmp	r3, #0
   8350e:	d120      	bne.n	83552 <Cl_bc_controller+0x1da>
								{
									bc_laststate = bc_state;
   83510:	4b31      	ldr	r3, [pc, #196]	; (835d8 <Cl_bc_controller+0x260>)
   83512:	781a      	ldrb	r2, [r3, #0]
   83514:	4b31      	ldr	r3, [pc, #196]	; (835dc <Cl_bc_controller+0x264>)
   83516:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   83518:	4b2f      	ldr	r3, [pc, #188]	; (835d8 <Cl_bc_controller+0x260>)
   8351a:	2210      	movs	r2, #16
   8351c:	701a      	strb	r2, [r3, #0]
								}
								break;
   8351e:	e018      	b.n	83552 <Cl_bc_controller+0x1da>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   83520:	4b30      	ldr	r3, [pc, #192]	; (835e4 <Cl_bc_controller+0x26c>)
   83522:	2200      	movs	r2, #0
   83524:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83526:	2006      	movs	r0, #6
   83528:	4b29      	ldr	r3, [pc, #164]	; (835d0 <Cl_bc_controller+0x258>)
   8352a:	4798      	blx	r3
   8352c:	4603      	mov	r3, r0
   8352e:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83530:	7bfb      	ldrb	r3, [r7, #15]
   83532:	2b00      	cmp	r3, #0
   83534:	d110      	bne.n	83558 <Cl_bc_controller+0x1e0>
								{
									bc_laststate = bc_state;
   83536:	4b28      	ldr	r3, [pc, #160]	; (835d8 <Cl_bc_controller+0x260>)
   83538:	781a      	ldrb	r2, [r3, #0]
   8353a:	4b28      	ldr	r3, [pc, #160]	; (835dc <Cl_bc_controller+0x264>)
   8353c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8353e:	4b26      	ldr	r3, [pc, #152]	; (835d8 <Cl_bc_controller+0x260>)
   83540:	2212      	movs	r2, #18
   83542:	701a      	strb	r2, [r3, #0]
								}
								break;
   83544:	e008      	b.n	83558 <Cl_bc_controller+0x1e0>
								default:break;
   83546:	bf00      	nop
   83548:	f000 bd31 	b.w	83fae <Cl_bc_controller+0xc36>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_OPENFILL;
									bc_wait = false;
								}
								break;
   8354c:	bf00      	nop
   8354e:	f000 bd2e 	b.w	83fae <Cl_bc_controller+0xc36>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   83552:	bf00      	nop
   83554:	f000 bd2b 	b.w	83fae <Cl_bc_controller+0xc36>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83558:	bf00      	nop
								default:break;
							}
			break;
   8355a:	f000 bd28 	b.w	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8355e:	79fb      	ldrb	r3, [r7, #7]
   83560:	3b01      	subs	r3, #1
   83562:	2b07      	cmp	r3, #7
   83564:	f200 8104 	bhi.w	83770 <Cl_bc_controller+0x3f8>
   83568:	a201      	add	r2, pc, #4	; (adr r2, 83570 <Cl_bc_controller+0x1f8>)
   8356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8356e:	bf00      	nop
   83570:	00083771 	.word	0x00083771
   83574:	00083591 	.word	0x00083591
   83578:	00083771 	.word	0x00083771
   8357c:	00083771 	.word	0x00083771
   83580:	00083771 	.word	0x00083771
   83584:	00083725 	.word	0x00083725
   83588:	00083771 	.word	0x00083771
   8358c:	0008374b 	.word	0x0008374b
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   83590:	4b14      	ldr	r3, [pc, #80]	; (835e4 <Cl_bc_controller+0x26c>)
   83592:	f9b3 3000 	ldrsh.w	r3, [r3]
   83596:	b29a      	uxth	r2, r3
   83598:	3201      	adds	r2, #1
   8359a:	b292      	uxth	r2, r2
   8359c:	b211      	sxth	r1, r2
   8359e:	4a11      	ldr	r2, [pc, #68]	; (835e4 <Cl_bc_controller+0x26c>)
   835a0:	8011      	strh	r1, [r2, #0]
   835a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   835a6:	f340 80e6 	ble.w	83776 <Cl_bc_controller+0x3fe>
								{
									if (openfill_flag == 1)
   835aa:	4b10      	ldr	r3, [pc, #64]	; (835ec <Cl_bc_controller+0x274>)
   835ac:	781b      	ldrb	r3, [r3, #0]
   835ae:	2b01      	cmp	r3, #1
   835b0:	d11e      	bne.n	835f0 <Cl_bc_controller+0x278>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   835b2:	4b0c      	ldr	r3, [pc, #48]	; (835e4 <Cl_bc_controller+0x26c>)
   835b4:	2200      	movs	r2, #0
   835b6:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   835b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   835bc:	2002      	movs	r0, #2
   835be:	4b05      	ldr	r3, [pc, #20]	; (835d4 <Cl_bc_controller+0x25c>)
   835c0:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,400);
   835c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
   835c6:	2001      	movs	r0, #1
   835c8:	4b02      	ldr	r3, [pc, #8]	; (835d4 <Cl_bc_controller+0x25c>)
   835ca:	4798      	blx	r3
   835cc:	e07e      	b.n	836cc <Cl_bc_controller+0x354>
   835ce:	bf00      	nop
   835d0:	000976e1 	.word	0x000976e1
   835d4:	00097569 	.word	0x00097569
   835d8:	2007163d 	.word	0x2007163d
   835dc:	2007163e 	.word	0x2007163e
   835e0:	20070104 	.word	0x20070104
   835e4:	20071642 	.word	0x20071642
   835e8:	2007163f 	.word	0x2007163f
   835ec:	200727da 	.word	0x200727da
										
									}
									else
									{
									sv_prop_stopopenfill();
   835f0:	4ba3      	ldr	r3, [pc, #652]	; (83880 <Cl_bc_controller+0x508>)
   835f2:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   835f4:	4ba3      	ldr	r3, [pc, #652]	; (83884 <Cl_bc_controller+0x50c>)
   835f6:	4798      	blx	r3
							
									openfillcounter = 0;
   835f8:	4ba3      	ldr	r3, [pc, #652]	; (83888 <Cl_bc_controller+0x510>)
   835fa:	2200      	movs	r2, #0
   835fc:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   835fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83602:	2002      	movs	r0, #2
   83604:	4ba1      	ldr	r3, [pc, #644]	; (8388c <Cl_bc_controller+0x514>)
   83606:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   83608:	f240 414c 	movw	r1, #1100	; 0x44c
   8360c:	2001      	movs	r0, #1
   8360e:	4b9f      	ldr	r3, [pc, #636]	; (8388c <Cl_bc_controller+0x514>)
   83610:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   83612:	4b9f      	ldr	r3, [pc, #636]	; (83890 <Cl_bc_controller+0x518>)
   83614:	2244      	movs	r2, #68	; 0x44
   83616:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   83618:	4b9d      	ldr	r3, [pc, #628]	; (83890 <Cl_bc_controller+0x518>)
   8361a:	881b      	ldrh	r3, [r3, #0]
   8361c:	4618      	mov	r0, r3
   8361e:	4b9d      	ldr	r3, [pc, #628]	; (83894 <Cl_bc_controller+0x51c>)
   83620:	4798      	blx	r3
										if (hotrinse_flag == 1)
   83622:	4b9d      	ldr	r3, [pc, #628]	; (83898 <Cl_bc_controller+0x520>)
   83624:	781b      	ldrb	r3, [r3, #0]
   83626:	2b01      	cmp	r3, #1
   83628:	d150      	bne.n	836cc <Cl_bc_controller+0x354>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   8362a:	f44f 7116 	mov.w	r1, #600	; 0x258
   8362e:	2002      	movs	r0, #2
   83630:	4b96      	ldr	r3, [pc, #600]	; (8388c <Cl_bc_controller+0x514>)
   83632:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   83634:	f240 414c 	movw	r1, #1100	; 0x44c
   83638:	2001      	movs	r0, #1
   8363a:	4b94      	ldr	r3, [pc, #592]	; (8388c <Cl_bc_controller+0x514>)
   8363c:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   8363e:	4b97      	ldr	r3, [pc, #604]	; (8389c <Cl_bc_controller+0x524>)
   83640:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											potvalue = (800 * 1024)/10000;                                 // added on 30.06.2017
   83642:	4b93      	ldr	r3, [pc, #588]	; (83890 <Cl_bc_controller+0x518>)
   83644:	2251      	movs	r2, #81	; 0x51
   83646:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   83648:	4b91      	ldr	r3, [pc, #580]	; (83890 <Cl_bc_controller+0x518>)
   8364a:	881b      	ldrh	r3, [r3, #0]
   8364c:	4618      	mov	r0, r3
   8364e:	4b91      	ldr	r3, [pc, #580]	; (83894 <Cl_bc_controller+0x51c>)
   83650:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   83652:	4b93      	ldr	r3, [pc, #588]	; (838a0 <Cl_bc_controller+0x528>)
   83654:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   83656:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   8365a:	4b92      	ldr	r3, [pc, #584]	; (838a4 <Cl_bc_controller+0x52c>)
   8365c:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   8365e:	2001      	movs	r0, #1
   83660:	4b91      	ldr	r3, [pc, #580]	; (838a8 <Cl_bc_controller+0x530>)
   83662:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);
   83664:	4991      	ldr	r1, [pc, #580]	; (838ac <Cl_bc_controller+0x534>)
   83666:	2005      	movs	r0, #5
   83668:	4b91      	ldr	r3, [pc, #580]	; (838b0 <Cl_bc_controller+0x538>)
   8366a:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   8366c:	2002      	movs	r0, #2
   8366e:	4b91      	ldr	r3, [pc, #580]	; (838b4 <Cl_bc_controller+0x53c>)
   83670:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   83672:	2003      	movs	r0, #3
   83674:	4b8f      	ldr	r3, [pc, #572]	; (838b4 <Cl_bc_controller+0x53c>)
   83676:	4798      	blx	r3
											sv_prop_startmixing();
   83678:	4b8f      	ldr	r3, [pc, #572]	; (838b8 <Cl_bc_controller+0x540>)
   8367a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   8367c:	2100      	movs	r1, #0
   8367e:	2002      	movs	r0, #2
   83680:	4b8e      	ldr	r3, [pc, #568]	; (838bc <Cl_bc_controller+0x544>)
   83682:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   83684:	4b8e      	ldr	r3, [pc, #568]	; (838c0 <Cl_bc_controller+0x548>)
   83686:	4798      	blx	r3
											cl_wait(100);
   83688:	2064      	movs	r0, #100	; 0x64
   8368a:	4b8e      	ldr	r3, [pc, #568]	; (838c4 <Cl_bc_controller+0x54c>)
   8368c:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,9000);
   8368e:	f242 3128 	movw	r1, #9000	; 0x2328
   83692:	2001      	movs	r0, #1
   83694:	4b89      	ldr	r3, [pc, #548]	; (838bc <Cl_bc_controller+0x544>)
   83696:	4798      	blx	r3
											cl_wait(200);
   83698:	20c8      	movs	r0, #200	; 0xc8
   8369a:	4b8a      	ldr	r3, [pc, #552]	; (838c4 <Cl_bc_controller+0x54c>)
   8369c:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   8369e:	f241 3188 	movw	r1, #5000	; 0x1388
   836a2:	2001      	movs	r0, #1
   836a4:	4b85      	ldr	r3, [pc, #532]	; (838bc <Cl_bc_controller+0x544>)
   836a6:	4798      	blx	r3
											cl_wait(600);
   836a8:	f44f 7016 	mov.w	r0, #600	; 0x258
   836ac:	4b85      	ldr	r3, [pc, #532]	; (838c4 <Cl_bc_controller+0x54c>)
   836ae:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
   836b0:	f640 31b8 	movw	r1, #3000	; 0xbb8
   836b4:	2001      	movs	r0, #1
   836b6:	4b81      	ldr	r3, [pc, #516]	; (838bc <Cl_bc_controller+0x544>)
   836b8:	4798      	blx	r3
											cl_wait(800);
   836ba:	f44f 7048 	mov.w	r0, #800	; 0x320
   836be:	4b81      	ldr	r3, [pc, #516]	; (838c4 <Cl_bc_controller+0x54c>)
   836c0:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   836c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
   836c6:	2001      	movs	r0, #1
   836c8:	4b7c      	ldr	r3, [pc, #496]	; (838bc <Cl_bc_controller+0x544>)
   836ca:	4798      	blx	r3
										
									}
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
//check	
									sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   836cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   836d0:	2002      	movs	r0, #2
   836d2:	4b6e      	ldr	r3, [pc, #440]	; (8388c <Cl_bc_controller+0x514>)
   836d4:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1000);  //960
   836d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   836da:	2001      	movs	r0, #1
   836dc:	4b6b      	ldr	r3, [pc, #428]	; (8388c <Cl_bc_controller+0x514>)
   836de:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   836e0:	2005      	movs	r0, #5
   836e2:	4b79      	ldr	r3, [pc, #484]	; (838c8 <Cl_bc_controller+0x550>)
   836e4:	4798      	blx	r3
   836e6:	4603      	mov	r3, r0
   836e8:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   836ea:	2013      	movs	r0, #19
   836ec:	4b77      	ldr	r3, [pc, #476]	; (838cc <Cl_bc_controller+0x554>)
   836ee:	4798      	blx	r3
   836f0:	4603      	mov	r3, r0
   836f2:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   836f4:	2051      	movs	r0, #81	; 0x51
   836f6:	4b76      	ldr	r3, [pc, #472]	; (838d0 <Cl_bc_controller+0x558>)
   836f8:	4798      	blx	r3
   836fa:	4603      	mov	r3, r0
   836fc:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   836fe:	7bfb      	ldrb	r3, [r7, #15]
   83700:	2b00      	cmp	r3, #0
   83702:	d138      	bne.n	83776 <Cl_bc_controller+0x3fe>
									{
										Cl_AlarmActivateAlarms(BC_ALARM,true);
   83704:	2101      	movs	r1, #1
   83706:	201a      	movs	r0, #26
   83708:	4b72      	ldr	r3, [pc, #456]	; (838d4 <Cl_bc_controller+0x55c>)
   8370a:	4798      	blx	r3
										bc_laststate = bc_state;
   8370c:	4b72      	ldr	r3, [pc, #456]	; (838d8 <Cl_bc_controller+0x560>)
   8370e:	781a      	ldrb	r2, [r3, #0]
   83710:	4b72      	ldr	r3, [pc, #456]	; (838dc <Cl_bc_controller+0x564>)
   83712:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83714:	4b70      	ldr	r3, [pc, #448]	; (838d8 <Cl_bc_controller+0x560>)
   83716:	220c      	movs	r2, #12
   83718:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   8371a:	4b6f      	ldr	r3, [pc, #444]	; (838d8 <Cl_bc_controller+0x560>)
   8371c:	781a      	ldrb	r2, [r3, #0]
   8371e:	4b6f      	ldr	r3, [pc, #444]	; (838dc <Cl_bc_controller+0x564>)
   83720:	701a      	strb	r2, [r3, #0]
									}
								}
								break;
   83722:	e028      	b.n	83776 <Cl_bc_controller+0x3fe>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   83724:	4b58      	ldr	r3, [pc, #352]	; (83888 <Cl_bc_controller+0x510>)
   83726:	2200      	movs	r2, #0
   83728:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   8372a:	2005      	movs	r0, #5
   8372c:	4b66      	ldr	r3, [pc, #408]	; (838c8 <Cl_bc_controller+0x550>)
   8372e:	4798      	blx	r3
   83730:	4603      	mov	r3, r0
   83732:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83734:	7bfb      	ldrb	r3, [r7, #15]
   83736:	2b00      	cmp	r3, #0
   83738:	d120      	bne.n	8377c <Cl_bc_controller+0x404>
								{
									bc_laststate = bc_state;
   8373a:	4b67      	ldr	r3, [pc, #412]	; (838d8 <Cl_bc_controller+0x560>)
   8373c:	781a      	ldrb	r2, [r3, #0]
   8373e:	4b67      	ldr	r3, [pc, #412]	; (838dc <Cl_bc_controller+0x564>)
   83740:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   83742:	4b65      	ldr	r3, [pc, #404]	; (838d8 <Cl_bc_controller+0x560>)
   83744:	2210      	movs	r2, #16
   83746:	701a      	strb	r2, [r3, #0]
								}
								break;
   83748:	e018      	b.n	8377c <Cl_bc_controller+0x404>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   8374a:	4b4f      	ldr	r3, [pc, #316]	; (83888 <Cl_bc_controller+0x510>)
   8374c:	2200      	movs	r2, #0
   8374e:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83750:	2006      	movs	r0, #6
   83752:	4b5d      	ldr	r3, [pc, #372]	; (838c8 <Cl_bc_controller+0x550>)
   83754:	4798      	blx	r3
   83756:	4603      	mov	r3, r0
   83758:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   8375a:	7bfb      	ldrb	r3, [r7, #15]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d110      	bne.n	83782 <Cl_bc_controller+0x40a>
								{
									bc_laststate = bc_state;
   83760:	4b5d      	ldr	r3, [pc, #372]	; (838d8 <Cl_bc_controller+0x560>)
   83762:	781a      	ldrb	r2, [r3, #0]
   83764:	4b5d      	ldr	r3, [pc, #372]	; (838dc <Cl_bc_controller+0x564>)
   83766:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   83768:	4b5b      	ldr	r3, [pc, #364]	; (838d8 <Cl_bc_controller+0x560>)
   8376a:	2212      	movs	r2, #18
   8376c:	701a      	strb	r2, [r3, #0]
								}
								break;
   8376e:	e008      	b.n	83782 <Cl_bc_controller+0x40a>
								default:break;
   83770:	bf00      	nop
   83772:	f000 bc1c 	b.w	83fae <Cl_bc_controller+0xc36>
										bc_laststate = bc_state;
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								break;
   83776:	bf00      	nop
   83778:	f000 bc19 	b.w	83fae <Cl_bc_controller+0xc36>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   8377c:	bf00      	nop
   8377e:	f000 bc16 	b.w	83fae <Cl_bc_controller+0xc36>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83782:	bf00      	nop
								default:break;
							}
			break;
   83784:	f000 bc13 	b.w	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   83788:	79fb      	ldrb	r3, [r7, #7]
   8378a:	2b01      	cmp	r3, #1
   8378c:	d002      	beq.n	83794 <Cl_bc_controller+0x41c>
   8378e:	2b02      	cmp	r3, #2
   83790:	d004      	beq.n	8379c <Cl_bc_controller+0x424>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83792:	e012      	b.n	837ba <Cl_bc_controller+0x442>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   83794:	4b52      	ldr	r3, [pc, #328]	; (838e0 <Cl_bc_controller+0x568>)
   83796:	2201      	movs	r2, #1
   83798:	701a      	strb	r2, [r3, #0]
								
								break;
   8379a:	e00e      	b.n	837ba <Cl_bc_controller+0x442>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   8379c:	4b50      	ldr	r3, [pc, #320]	; (838e0 <Cl_bc_controller+0x568>)
   8379e:	781b      	ldrb	r3, [r3, #0]
   837a0:	2b00      	cmp	r3, #0
   837a2:	d009      	beq.n	837b8 <Cl_bc_controller+0x440>
								{
									bc_laststate = bc_state;
   837a4:	4b4c      	ldr	r3, [pc, #304]	; (838d8 <Cl_bc_controller+0x560>)
   837a6:	781a      	ldrb	r2, [r3, #0]
   837a8:	4b4c      	ldr	r3, [pc, #304]	; (838dc <Cl_bc_controller+0x564>)
   837aa:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   837ac:	4b4a      	ldr	r3, [pc, #296]	; (838d8 <Cl_bc_controller+0x560>)
   837ae:	2205      	movs	r2, #5
   837b0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   837b2:	4b4b      	ldr	r3, [pc, #300]	; (838e0 <Cl_bc_controller+0x568>)
   837b4:	2200      	movs	r2, #0
   837b6:	701a      	strb	r2, [r3, #0]
								}
								break;
   837b8:	bf00      	nop
								default:break;
							}
			break;
   837ba:	e3f8      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   837bc:	79fb      	ldrb	r3, [r7, #7]
   837be:	2b02      	cmp	r3, #2
   837c0:	d004      	beq.n	837cc <Cl_bc_controller+0x454>
   837c2:	2b03      	cmp	r3, #3
   837c4:	d004      	beq.n	837d0 <Cl_bc_controller+0x458>
   837c6:	2b01      	cmp	r3, #1
   837c8:	d004      	beq.n	837d4 <Cl_bc_controller+0x45c>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   837ca:	e004      	b.n	837d6 <Cl_bc_controller+0x45e>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   837cc:	bf00      	nop
   837ce:	e3ee      	b.n	83fae <Cl_bc_controller+0xc36>
								case	BC_EVENT_CS:
								break;
   837d0:	bf00      	nop
   837d2:	e3ec      	b.n	83fae <Cl_bc_controller+0xc36>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   837d4:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   837d6:	e3ea      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   837d8:	79fb      	ldrb	r3, [r7, #7]
   837da:	2b01      	cmp	r3, #1
   837dc:	d002      	beq.n	837e4 <Cl_bc_controller+0x46c>
   837de:	2b02      	cmp	r3, #2
   837e0:	d004      	beq.n	837ec <Cl_bc_controller+0x474>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   837e2:	e012      	b.n	8380a <Cl_bc_controller+0x492>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   837e4:	4b3e      	ldr	r3, [pc, #248]	; (838e0 <Cl_bc_controller+0x568>)
   837e6:	2201      	movs	r2, #1
   837e8:	701a      	strb	r2, [r3, #0]
								
								break;
   837ea:	e00e      	b.n	8380a <Cl_bc_controller+0x492>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   837ec:	4b3c      	ldr	r3, [pc, #240]	; (838e0 <Cl_bc_controller+0x568>)
   837ee:	781b      	ldrb	r3, [r3, #0]
   837f0:	2b00      	cmp	r3, #0
   837f2:	d009      	beq.n	83808 <Cl_bc_controller+0x490>
								{
									bc_laststate = bc_state;
   837f4:	4b38      	ldr	r3, [pc, #224]	; (838d8 <Cl_bc_controller+0x560>)
   837f6:	781a      	ldrb	r2, [r3, #0]
   837f8:	4b38      	ldr	r3, [pc, #224]	; (838dc <Cl_bc_controller+0x564>)
   837fa:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   837fc:	4b36      	ldr	r3, [pc, #216]	; (838d8 <Cl_bc_controller+0x560>)
   837fe:	2207      	movs	r2, #7
   83800:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83802:	4b37      	ldr	r3, [pc, #220]	; (838e0 <Cl_bc_controller+0x568>)
   83804:	2200      	movs	r2, #0
   83806:	701a      	strb	r2, [r3, #0]
								}
								break;
   83808:	bf00      	nop
								default:break;
							}
			break;
   8380a:	e3d0      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   8380c:	79fb      	ldrb	r3, [r7, #7]
   8380e:	2b02      	cmp	r3, #2
   83810:	d004      	beq.n	8381c <Cl_bc_controller+0x4a4>
   83812:	2b03      	cmp	r3, #3
   83814:	d004      	beq.n	83820 <Cl_bc_controller+0x4a8>
   83816:	2b01      	cmp	r3, #1
   83818:	d004      	beq.n	83824 <Cl_bc_controller+0x4ac>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8381a:	e004      	b.n	83826 <Cl_bc_controller+0x4ae>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   8381c:	bf00      	nop
   8381e:	e3c6      	b.n	83fae <Cl_bc_controller+0xc36>
								case	BC_EVENT_CS:
								break;
   83820:	bf00      	nop
   83822:	e3c4      	b.n	83fae <Cl_bc_controller+0xc36>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83824:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83826:	e3c2      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   83828:	79fb      	ldrb	r3, [r7, #7]
   8382a:	2b01      	cmp	r3, #1
   8382c:	d002      	beq.n	83834 <Cl_bc_controller+0x4bc>
   8382e:	2b02      	cmp	r3, #2
   83830:	d00b      	beq.n	8384a <Cl_bc_controller+0x4d2>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   83832:	e00b      	b.n	8384c <Cl_bc_controller+0x4d4>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   83834:	4b28      	ldr	r3, [pc, #160]	; (838d8 <Cl_bc_controller+0x560>)
   83836:	781a      	ldrb	r2, [r3, #0]
   83838:	4b28      	ldr	r3, [pc, #160]	; (838dc <Cl_bc_controller+0x564>)
   8383a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   8383c:	4b26      	ldr	r3, [pc, #152]	; (838d8 <Cl_bc_controller+0x560>)
   8383e:	2209      	movs	r2, #9
   83840:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83842:	4b27      	ldr	r3, [pc, #156]	; (838e0 <Cl_bc_controller+0x568>)
   83844:	2200      	movs	r2, #0
   83846:	701a      	strb	r2, [r3, #0]
								break;
   83848:	e000      	b.n	8384c <Cl_bc_controller+0x4d4>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   8384a:	bf00      	nop
								default:break;
							}
			break;
   8384c:	e3af      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   8384e:	79fb      	ldrb	r3, [r7, #7]
   83850:	2b02      	cmp	r3, #2
   83852:	d004      	beq.n	8385e <Cl_bc_controller+0x4e6>
   83854:	2b03      	cmp	r3, #3
   83856:	d004      	beq.n	83862 <Cl_bc_controller+0x4ea>
   83858:	2b01      	cmp	r3, #1
   8385a:	d004      	beq.n	83866 <Cl_bc_controller+0x4ee>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8385c:	e004      	b.n	83868 <Cl_bc_controller+0x4f0>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   8385e:	bf00      	nop
   83860:	e3a5      	b.n	83fae <Cl_bc_controller+0xc36>
								case	BC_EVENT_CS:
								break;
   83862:	bf00      	nop
   83864:	e3a3      	b.n	83fae <Cl_bc_controller+0xc36>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83866:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83868:	e3a1      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   8386a:	79fb      	ldrb	r3, [r7, #7]
   8386c:	2b01      	cmp	r3, #1
   8386e:	d002      	beq.n	83876 <Cl_bc_controller+0x4fe>
   83870:	2b02      	cmp	r3, #2
   83872:	d037      	beq.n	838e4 <Cl_bc_controller+0x56c>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   83874:	e045      	b.n	83902 <Cl_bc_controller+0x58a>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   83876:	4b1a      	ldr	r3, [pc, #104]	; (838e0 <Cl_bc_controller+0x568>)
   83878:	2201      	movs	r2, #1
   8387a:	701a      	strb	r2, [r3, #0]
								
								break;
   8387c:	e041      	b.n	83902 <Cl_bc_controller+0x58a>
   8387e:	bf00      	nop
   83880:	00097971 	.word	0x00097971
   83884:	0009786d 	.word	0x0009786d
   83888:	20071642 	.word	0x20071642
   8388c:	00097569 	.word	0x00097569
   83890:	20071644 	.word	0x20071644
   83894:	00097999 	.word	0x00097999
   83898:	20072881 	.word	0x20072881
   8389c:	00097665 	.word	0x00097665
   838a0:	000974c9 	.word	0x000974c9
   838a4:	000975d1 	.word	0x000975d1
   838a8:	00088a8d 	.word	0x00088a8d
   838ac:	42960000 	.word	0x42960000
   838b0:	00088a01 	.word	0x00088a01
   838b4:	000974f1 	.word	0x000974f1
   838b8:	00097899 	.word	0x00097899
   838bc:	0009381d 	.word	0x0009381d
   838c0:	00093785 	.word	0x00093785
   838c4:	000918fd 	.word	0x000918fd
   838c8:	000976e1 	.word	0x000976e1
   838cc:	00097511 	.word	0x00097511
   838d0:	0008a479 	.word	0x0008a479
   838d4:	00082f5d 	.word	0x00082f5d
   838d8:	2007163d 	.word	0x2007163d
   838dc:	2007163e 	.word	0x2007163e
   838e0:	2007163f 	.word	0x2007163f
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   838e4:	4b9c      	ldr	r3, [pc, #624]	; (83b58 <Cl_bc_controller+0x7e0>)
   838e6:	781b      	ldrb	r3, [r3, #0]
   838e8:	2b00      	cmp	r3, #0
   838ea:	d009      	beq.n	83900 <Cl_bc_controller+0x588>
								{
									bc_laststate = bc_state;
   838ec:	4b9b      	ldr	r3, [pc, #620]	; (83b5c <Cl_bc_controller+0x7e4>)
   838ee:	781a      	ldrb	r2, [r3, #0]
   838f0:	4b9b      	ldr	r3, [pc, #620]	; (83b60 <Cl_bc_controller+0x7e8>)
   838f2:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   838f4:	4b99      	ldr	r3, [pc, #612]	; (83b5c <Cl_bc_controller+0x7e4>)
   838f6:	220b      	movs	r2, #11
   838f8:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   838fa:	4b97      	ldr	r3, [pc, #604]	; (83b58 <Cl_bc_controller+0x7e0>)
   838fc:	2200      	movs	r2, #0
   838fe:	701a      	strb	r2, [r3, #0]
								}
								break;
   83900:	bf00      	nop
								default:break;
							}
			break;
   83902:	e354      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   83904:	79fb      	ldrb	r3, [r7, #7]
   83906:	2b02      	cmp	r3, #2
   83908:	d004      	beq.n	83914 <Cl_bc_controller+0x59c>
   8390a:	2b03      	cmp	r3, #3
   8390c:	d004      	beq.n	83918 <Cl_bc_controller+0x5a0>
   8390e:	2b01      	cmp	r3, #1
   83910:	d004      	beq.n	8391c <Cl_bc_controller+0x5a4>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83912:	e004      	b.n	8391e <Cl_bc_controller+0x5a6>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83914:	bf00      	nop
   83916:	e34a      	b.n	83fae <Cl_bc_controller+0xc36>
								case	BC_EVENT_CS:
								break;
   83918:	bf00      	nop
   8391a:	e348      	b.n	83fae <Cl_bc_controller+0xc36>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8391c:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8391e:	e346      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   83920:	79fb      	ldrb	r3, [r7, #7]
   83922:	2b00      	cmp	r3, #0
   83924:	d001      	beq.n	8392a <Cl_bc_controller+0x5b2>
   83926:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   83928:	e02a      	b.n	83980 <Cl_bc_controller+0x608>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   8392a:	4b8e      	ldr	r3, [pc, #568]	; (83b64 <Cl_bc_controller+0x7ec>)
   8392c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83930:	b29b      	uxth	r3, r3
   83932:	3301      	adds	r3, #1
   83934:	b29b      	uxth	r3, r3
   83936:	b21a      	sxth	r2, r3
   83938:	4b8a      	ldr	r3, [pc, #552]	; (83b64 <Cl_bc_controller+0x7ec>)
   8393a:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   8393c:	4b8a      	ldr	r3, [pc, #552]	; (83b68 <Cl_bc_controller+0x7f0>)
   8393e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83942:	2b13      	cmp	r3, #19
   83944:	dc11      	bgt.n	8396a <Cl_bc_controller+0x5f2>
								{
									if(wait_counter == 2)
   83946:	4b88      	ldr	r3, [pc, #544]	; (83b68 <Cl_bc_controller+0x7f0>)
   83948:	f9b3 3000 	ldrsh.w	r3, [r3]
   8394c:	2b02      	cmp	r3, #2
   8394e:	d102      	bne.n	83956 <Cl_bc_controller+0x5de>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83950:	2013      	movs	r0, #19
   83952:	4b86      	ldr	r3, [pc, #536]	; (83b6c <Cl_bc_controller+0x7f4>)
   83954:	4798      	blx	r3
									}
									wait_counter ++;	// 1 sec wait
   83956:	4b84      	ldr	r3, [pc, #528]	; (83b68 <Cl_bc_controller+0x7f0>)
   83958:	f9b3 3000 	ldrsh.w	r3, [r3]
   8395c:	b29b      	uxth	r3, r3
   8395e:	3301      	adds	r3, #1
   83960:	b29b      	uxth	r3, r3
   83962:	b21a      	sxth	r2, r3
   83964:	4b80      	ldr	r3, [pc, #512]	; (83b68 <Cl_bc_controller+0x7f0>)
   83966:	801a      	strh	r2, [r3, #0]
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO1_V13V14;
									
								}
								break;
   83968:	e009      	b.n	8397e <Cl_bc_controller+0x606>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   8396a:	4b7f      	ldr	r3, [pc, #508]	; (83b68 <Cl_bc_controller+0x7f0>)
   8396c:	2200      	movs	r2, #0
   8396e:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83970:	4b7a      	ldr	r3, [pc, #488]	; (83b5c <Cl_bc_controller+0x7e4>)
   83972:	781a      	ldrb	r2, [r3, #0]
   83974:	4b7a      	ldr	r3, [pc, #488]	; (83b60 <Cl_bc_controller+0x7e8>)
   83976:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   83978:	4b78      	ldr	r3, [pc, #480]	; (83b5c <Cl_bc_controller+0x7e4>)
   8397a:	220d      	movs	r2, #13
   8397c:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   8397e:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   83980:	e315      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   83982:	79fb      	ldrb	r3, [r7, #7]
   83984:	2b03      	cmp	r3, #3
   83986:	f200 8145 	bhi.w	83c14 <Cl_bc_controller+0x89c>
   8398a:	a201      	add	r2, pc, #4	; (adr r2, 83990 <Cl_bc_controller+0x618>)
   8398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83990:	000839a1 	.word	0x000839a1
   83994:	00083c15 	.word	0x00083c15
   83998:	000839b5 	.word	0x000839b5
   8399c:	000839e7 	.word	0x000839e7
							{
								case BC_EVENT_50MS:
								fill_time++;
   839a0:	4b70      	ldr	r3, [pc, #448]	; (83b64 <Cl_bc_controller+0x7ec>)
   839a2:	f9b3 3000 	ldrsh.w	r3, [r3]
   839a6:	b29b      	uxth	r3, r3
   839a8:	3301      	adds	r3, #1
   839aa:	b29b      	uxth	r3, r3
   839ac:	b21a      	sxth	r2, r3
   839ae:	4b6d      	ldr	r3, [pc, #436]	; (83b64 <Cl_bc_controller+0x7ec>)
   839b0:	801a      	strh	r2, [r3, #0]
								break;
   839b2:	e134      	b.n	83c1e <Cl_bc_controller+0x8a6>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(fill_time > 150){
   839b4:	4b6b      	ldr	r3, [pc, #428]	; (83b64 <Cl_bc_controller+0x7ec>)
   839b6:	f9b3 3000 	ldrsh.w	r3, [r3]
   839ba:	2b96      	cmp	r3, #150	; 0x96
   839bc:	f340 812c 	ble.w	83c18 <Cl_bc_controller+0x8a0>
									
								sv_cntrl_setyellowalarm();
   839c0:	4b6b      	ldr	r3, [pc, #428]	; (83b70 <Cl_bc_controller+0x7f8>)
   839c2:	4798      	blx	r3
								sv_cntrl_activate_valve( VALVE_ID4);
   839c4:	2004      	movs	r0, #4
   839c6:	4b6b      	ldr	r3, [pc, #428]	; (83b74 <Cl_bc_controller+0x7fc>)
   839c8:	4798      	blx	r3
								cl_wait(50);
   839ca:	2032      	movs	r0, #50	; 0x32
   839cc:	4b6a      	ldr	r3, [pc, #424]	; (83b78 <Cl_bc_controller+0x800>)
   839ce:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   839d0:	2004      	movs	r0, #4
   839d2:	4b66      	ldr	r3, [pc, #408]	; (83b6c <Cl_bc_controller+0x7f4>)
   839d4:	4798      	blx	r3
								cl_wait(50);
   839d6:	2032      	movs	r0, #50	; 0x32
   839d8:	4b67      	ldr	r3, [pc, #412]	; (83b78 <Cl_bc_controller+0x800>)
   839da:	4798      	blx	r3
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   839dc:	2101      	movs	r1, #1
   839de:	201a      	movs	r0, #26
   839e0:	4b66      	ldr	r3, [pc, #408]	; (83b7c <Cl_bc_controller+0x804>)
   839e2:	4798      	blx	r3
													
								}
								
								break;
   839e4:	e118      	b.n	83c18 <Cl_bc_controller+0x8a0>
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   839e6:	4b66      	ldr	r3, [pc, #408]	; (83b80 <Cl_bc_controller+0x808>)
   839e8:	2201      	movs	r2, #1
   839ea:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   839ec:	4b65      	ldr	r3, [pc, #404]	; (83b84 <Cl_bc_controller+0x80c>)
   839ee:	2200      	movs	r2, #0
   839f0:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   839f2:	4b5c      	ldr	r3, [pc, #368]	; (83b64 <Cl_bc_controller+0x7ec>)
   839f4:	f9b3 3000 	ldrsh.w	r3, [r3]
   839f8:	b29a      	uxth	r2, r3
   839fa:	4b62      	ldr	r3, [pc, #392]	; (83b84 <Cl_bc_controller+0x80c>)
   839fc:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   839fe:	4b61      	ldr	r3, [pc, #388]	; (83b84 <Cl_bc_controller+0x80c>)
   83a00:	2216      	movs	r2, #22
   83a02:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   83a04:	4b57      	ldr	r3, [pc, #348]	; (83b64 <Cl_bc_controller+0x7ec>)
   83a06:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a0a:	b29a      	uxth	r2, r3
   83a0c:	4b5e      	ldr	r3, [pc, #376]	; (83b88 <Cl_bc_controller+0x810>)
   83a0e:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   83a10:	4b5e      	ldr	r3, [pc, #376]	; (83b8c <Cl_bc_controller+0x814>)
   83a12:	781b      	ldrb	r3, [r3, #0]
   83a14:	2b01      	cmp	r3, #1
   83a16:	f040 80dd 	bne.w	83bd4 <Cl_bc_controller+0x85c>
									{
										switch (flow_rate)
   83a1a:	4b5d      	ldr	r3, [pc, #372]	; (83b90 <Cl_bc_controller+0x818>)
   83a1c:	681b      	ldr	r3, [r3, #0]
   83a1e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83a22:	f000 80d6 	beq.w	83bd2 <Cl_bc_controller+0x85a>
   83a26:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83a2a:	d806      	bhi.n	83a3a <Cl_bc_controller+0x6c2>
   83a2c:	2bc8      	cmp	r3, #200	; 0xc8
   83a2e:	f000 80b5 	beq.w	83b9c <Cl_bc_controller+0x824>
   83a32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83a36:	d061      	beq.n	83afc <Cl_bc_controller+0x784>
   83a38:	e0cc      	b.n	83bd4 <Cl_bc_controller+0x85c>
   83a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83a3e:	d030      	beq.n	83aa2 <Cl_bc_controller+0x72a>
   83a40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83a44:	f040 80c6 	bne.w	83bd4 <Cl_bc_controller+0x85c>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83a48:	4b46      	ldr	r3, [pc, #280]	; (83b64 <Cl_bc_controller+0x7ec>)
   83a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a4e:	2b37      	cmp	r3, #55	; 0x37
   83a50:	dc04      	bgt.n	83a5c <Cl_bc_controller+0x6e4>
   83a52:	4b44      	ldr	r3, [pc, #272]	; (83b64 <Cl_bc_controller+0x7ec>)
   83a54:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a58:	2b2c      	cmp	r3, #44	; 0x2c
   83a5a:	dc1b      	bgt.n	83a94 <Cl_bc_controller+0x71c>
												{	
													
													switchb01alrcnt++ ;
   83a5c:	4b4d      	ldr	r3, [pc, #308]	; (83b94 <Cl_bc_controller+0x81c>)
   83a5e:	681b      	ldr	r3, [r3, #0]
   83a60:	3301      	adds	r3, #1
   83a62:	4a4c      	ldr	r2, [pc, #304]	; (83b94 <Cl_bc_controller+0x81c>)
   83a64:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83a66:	4b4b      	ldr	r3, [pc, #300]	; (83b94 <Cl_bc_controller+0x81c>)
   83a68:	681b      	ldr	r3, [r3, #0]
   83a6a:	2b03      	cmp	r3, #3
   83a6c:	dd18      	ble.n	83aa0 <Cl_bc_controller+0x728>
														
													sv_cntrl_setyellowalarm();
   83a6e:	4b40      	ldr	r3, [pc, #256]	; (83b70 <Cl_bc_controller+0x7f8>)
   83a70:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83a72:	2004      	movs	r0, #4
   83a74:	4b3f      	ldr	r3, [pc, #252]	; (83b74 <Cl_bc_controller+0x7fc>)
   83a76:	4798      	blx	r3
													cl_wait(50);
   83a78:	2032      	movs	r0, #50	; 0x32
   83a7a:	4b3f      	ldr	r3, [pc, #252]	; (83b78 <Cl_bc_controller+0x800>)
   83a7c:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83a7e:	2004      	movs	r0, #4
   83a80:	4b3a      	ldr	r3, [pc, #232]	; (83b6c <Cl_bc_controller+0x7f4>)
   83a82:	4798      	blx	r3
													cl_wait(50);
   83a84:	2032      	movs	r0, #50	; 0x32
   83a86:	4b3c      	ldr	r3, [pc, #240]	; (83b78 <Cl_bc_controller+0x800>)
   83a88:	4798      	blx	r3
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a8a:	2101      	movs	r1, #1
   83a8c:	201a      	movs	r0, #26
   83a8e:	4b3b      	ldr	r3, [pc, #236]	; (83b7c <Cl_bc_controller+0x804>)
   83a90:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{	
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83a92:	e005      	b.n	83aa0 <Cl_bc_controller+0x728>
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83a94:	4b3f      	ldr	r3, [pc, #252]	; (83b94 <Cl_bc_controller+0x81c>)
   83a96:	2200      	movs	r2, #0
   83a98:	601a      	str	r2, [r3, #0]
													sv_cntrl_resetyellowalarm();
   83a9a:	4b3f      	ldr	r3, [pc, #252]	; (83b98 <Cl_bc_controller+0x820>)
   83a9c:	4798      	blx	r3
												}
											break;
   83a9e:	e099      	b.n	83bd4 <Cl_bc_controller+0x85c>
   83aa0:	e098      	b.n	83bd4 <Cl_bc_controller+0x85c>
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83aa2:	4b30      	ldr	r3, [pc, #192]	; (83b64 <Cl_bc_controller+0x7ec>)
   83aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
   83aa8:	2b4d      	cmp	r3, #77	; 0x4d
   83aaa:	dc04      	bgt.n	83ab6 <Cl_bc_controller+0x73e>
   83aac:	4b2d      	ldr	r3, [pc, #180]	; (83b64 <Cl_bc_controller+0x7ec>)
   83aae:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ab2:	2b42      	cmp	r3, #66	; 0x42
   83ab4:	dc1b      	bgt.n	83aee <Cl_bc_controller+0x776>
												{
													switchb01alrcnt++ ;
   83ab6:	4b37      	ldr	r3, [pc, #220]	; (83b94 <Cl_bc_controller+0x81c>)
   83ab8:	681b      	ldr	r3, [r3, #0]
   83aba:	3301      	adds	r3, #1
   83abc:	4a35      	ldr	r2, [pc, #212]	; (83b94 <Cl_bc_controller+0x81c>)
   83abe:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83ac0:	4b34      	ldr	r3, [pc, #208]	; (83b94 <Cl_bc_controller+0x81c>)
   83ac2:	681b      	ldr	r3, [r3, #0]
   83ac4:	2b03      	cmp	r3, #3
   83ac6:	dd18      	ble.n	83afa <Cl_bc_controller+0x782>
														
																									
													sv_cntrl_setyellowalarm();
   83ac8:	4b29      	ldr	r3, [pc, #164]	; (83b70 <Cl_bc_controller+0x7f8>)
   83aca:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83acc:	2004      	movs	r0, #4
   83ace:	4b29      	ldr	r3, [pc, #164]	; (83b74 <Cl_bc_controller+0x7fc>)
   83ad0:	4798      	blx	r3
													cl_wait(50);
   83ad2:	2032      	movs	r0, #50	; 0x32
   83ad4:	4b28      	ldr	r3, [pc, #160]	; (83b78 <Cl_bc_controller+0x800>)
   83ad6:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83ad8:	2004      	movs	r0, #4
   83ada:	4b24      	ldr	r3, [pc, #144]	; (83b6c <Cl_bc_controller+0x7f4>)
   83adc:	4798      	blx	r3
													cl_wait(50);
   83ade:	2032      	movs	r0, #50	; 0x32
   83ae0:	4b25      	ldr	r3, [pc, #148]	; (83b78 <Cl_bc_controller+0x800>)
   83ae2:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83ae4:	2101      	movs	r1, #1
   83ae6:	201a      	movs	r0, #26
   83ae8:	4b24      	ldr	r3, [pc, #144]	; (83b7c <Cl_bc_controller+0x804>)
   83aea:	4798      	blx	r3
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
												{
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83aec:	e005      	b.n	83afa <Cl_bc_controller+0x782>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83aee:	4b29      	ldr	r3, [pc, #164]	; (83b94 <Cl_bc_controller+0x81c>)
   83af0:	2200      	movs	r2, #0
   83af2:	601a      	str	r2, [r3, #0]
													sv_cntrl_resetyellowalarm();
   83af4:	4b28      	ldr	r3, [pc, #160]	; (83b98 <Cl_bc_controller+0x820>)
   83af6:	4798      	blx	r3
												}
											break;
   83af8:	e06c      	b.n	83bd4 <Cl_bc_controller+0x85c>
   83afa:	e06b      	b.n	83bd4 <Cl_bc_controller+0x85c>
											
											case 400:
											break;
											
											case 300:
												if ((fill_time > 125) || (fill_time < 115))
   83afc:	4b19      	ldr	r3, [pc, #100]	; (83b64 <Cl_bc_controller+0x7ec>)
   83afe:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b02:	2b7d      	cmp	r3, #125	; 0x7d
   83b04:	dc04      	bgt.n	83b10 <Cl_bc_controller+0x798>
   83b06:	4b17      	ldr	r3, [pc, #92]	; (83b64 <Cl_bc_controller+0x7ec>)
   83b08:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b0c:	2b72      	cmp	r3, #114	; 0x72
   83b0e:	dc1b      	bgt.n	83b48 <Cl_bc_controller+0x7d0>
												{
													
													switchb01alrcnt++ ;
   83b10:	4b20      	ldr	r3, [pc, #128]	; (83b94 <Cl_bc_controller+0x81c>)
   83b12:	681b      	ldr	r3, [r3, #0]
   83b14:	3301      	adds	r3, #1
   83b16:	4a1f      	ldr	r2, [pc, #124]	; (83b94 <Cl_bc_controller+0x81c>)
   83b18:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83b1a:	4b1e      	ldr	r3, [pc, #120]	; (83b94 <Cl_bc_controller+0x81c>)
   83b1c:	681b      	ldr	r3, [r3, #0]
   83b1e:	2b03      	cmp	r3, #3
   83b20:	dd18      	ble.n	83b54 <Cl_bc_controller+0x7dc>
														
													
													sv_cntrl_setyellowalarm();
   83b22:	4b13      	ldr	r3, [pc, #76]	; (83b70 <Cl_bc_controller+0x7f8>)
   83b24:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83b26:	2004      	movs	r0, #4
   83b28:	4b12      	ldr	r3, [pc, #72]	; (83b74 <Cl_bc_controller+0x7fc>)
   83b2a:	4798      	blx	r3
													cl_wait(50);
   83b2c:	2032      	movs	r0, #50	; 0x32
   83b2e:	4b12      	ldr	r3, [pc, #72]	; (83b78 <Cl_bc_controller+0x800>)
   83b30:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83b32:	2004      	movs	r0, #4
   83b34:	4b0d      	ldr	r3, [pc, #52]	; (83b6c <Cl_bc_controller+0x7f4>)
   83b36:	4798      	blx	r3
													cl_wait(50);
   83b38:	2032      	movs	r0, #50	; 0x32
   83b3a:	4b0f      	ldr	r3, [pc, #60]	; (83b78 <Cl_bc_controller+0x800>)
   83b3c:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83b3e:	2101      	movs	r1, #1
   83b40:	201a      	movs	r0, #26
   83b42:	4b0e      	ldr	r3, [pc, #56]	; (83b7c <Cl_bc_controller+0x804>)
   83b44:	4798      	blx	r3
												if ((fill_time > 125) || (fill_time < 115))
												{
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83b46:	e005      	b.n	83b54 <Cl_bc_controller+0x7dc>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83b48:	4b12      	ldr	r3, [pc, #72]	; (83b94 <Cl_bc_controller+0x81c>)
   83b4a:	2200      	movs	r2, #0
   83b4c:	601a      	str	r2, [r3, #0]
													sv_cntrl_resetyellowalarm();
   83b4e:	4b12      	ldr	r3, [pc, #72]	; (83b98 <Cl_bc_controller+0x820>)
   83b50:	4798      	blx	r3
												}
											break;
   83b52:	e03f      	b.n	83bd4 <Cl_bc_controller+0x85c>
   83b54:	e03e      	b.n	83bd4 <Cl_bc_controller+0x85c>
   83b56:	bf00      	nop
   83b58:	2007163f 	.word	0x2007163f
   83b5c:	2007163d 	.word	0x2007163d
   83b60:	2007163e 	.word	0x2007163e
   83b64:	20071650 	.word	0x20071650
   83b68:	20071640 	.word	0x20071640
   83b6c:	00097511 	.word	0x00097511
   83b70:	0009775d 	.word	0x0009775d
   83b74:	000974f1 	.word	0x000974f1
   83b78:	000918fd 	.word	0x000918fd
   83b7c:	00083105 	.word	0x00083105
   83b80:	20072628 	.word	0x20072628
   83b84:	20071654 	.word	0x20071654
   83b88:	20071658 	.word	0x20071658
   83b8c:	200720ef 	.word	0x200720ef
   83b90:	200720f0 	.word	0x200720f0
   83b94:	20071648 	.word	0x20071648
   83b98:	000977ad 	.word	0x000977ad
											
											case 200:
												if (fill_time > 190)
   83b9c:	4b9a      	ldr	r3, [pc, #616]	; (83e08 <Cl_bc_controller+0xa90>)
   83b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ba2:	2bbe      	cmp	r3, #190	; 0xbe
   83ba4:	dd12      	ble.n	83bcc <Cl_bc_controller+0x854>
												{
													sv_cntrl_setyellowalarm();
   83ba6:	4b99      	ldr	r3, [pc, #612]	; (83e0c <Cl_bc_controller+0xa94>)
   83ba8:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83baa:	2004      	movs	r0, #4
   83bac:	4b98      	ldr	r3, [pc, #608]	; (83e10 <Cl_bc_controller+0xa98>)
   83bae:	4798      	blx	r3
													cl_wait(50);
   83bb0:	2032      	movs	r0, #50	; 0x32
   83bb2:	4b98      	ldr	r3, [pc, #608]	; (83e14 <Cl_bc_controller+0xa9c>)
   83bb4:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83bb6:	2004      	movs	r0, #4
   83bb8:	4b97      	ldr	r3, [pc, #604]	; (83e18 <Cl_bc_controller+0xaa0>)
   83bba:	4798      	blx	r3
													cl_wait(50);
   83bbc:	2032      	movs	r0, #50	; 0x32
   83bbe:	4b95      	ldr	r3, [pc, #596]	; (83e14 <Cl_bc_controller+0xa9c>)
   83bc0:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83bc2:	2101      	movs	r1, #1
   83bc4:	201a      	movs	r0, #26
   83bc6:	4b95      	ldr	r3, [pc, #596]	; (83e1c <Cl_bc_controller+0xaa4>)
   83bc8:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83bca:	e003      	b.n	83bd4 <Cl_bc_controller+0x85c>
													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83bcc:	4b94      	ldr	r3, [pc, #592]	; (83e20 <Cl_bc_controller+0xaa8>)
   83bce:	4798      	blx	r3
												}
											break;
   83bd0:	e000      	b.n	83bd4 <Cl_bc_controller+0x85c>
													sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83bd2:	bf00      	nop
												}
											break;
										}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83bd4:	2006      	movs	r0, #6
   83bd6:	4b93      	ldr	r3, [pc, #588]	; (83e24 <Cl_bc_controller+0xaac>)
   83bd8:	4798      	blx	r3
   83bda:	4603      	mov	r3, r0
   83bdc:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83bde:	2013      	movs	r0, #19
   83be0:	4b8b      	ldr	r3, [pc, #556]	; (83e10 <Cl_bc_controller+0xa98>)
   83be2:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83be4:	2204      	movs	r2, #4
   83be6:	4990      	ldr	r1, [pc, #576]	; (83e28 <Cl_bc_controller+0xab0>)
   83be8:	2037      	movs	r0, #55	; 0x37
   83bea:	4b90      	ldr	r3, [pc, #576]	; (83e2c <Cl_bc_controller+0xab4>)
   83bec:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,4);
   83bee:	2204      	movs	r2, #4
   83bf0:	498f      	ldr	r1, [pc, #572]	; (83e30 <Cl_bc_controller+0xab8>)
   83bf2:	2049      	movs	r0, #73	; 0x49
   83bf4:	4b8d      	ldr	r3, [pc, #564]	; (83e2c <Cl_bc_controller+0xab4>)
   83bf6:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   83bf8:	7bfb      	ldrb	r3, [r7, #15]
   83bfa:	2b00      	cmp	r3, #0
   83bfc:	d10e      	bne.n	83c1c <Cl_bc_controller+0x8a4>
								{
									bc_laststate = bc_state;
   83bfe:	4b8d      	ldr	r3, [pc, #564]	; (83e34 <Cl_bc_controller+0xabc>)
   83c00:	781a      	ldrb	r2, [r3, #0]
   83c02:	4b8d      	ldr	r3, [pc, #564]	; (83e38 <Cl_bc_controller+0xac0>)
   83c04:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83c06:	4b8b      	ldr	r3, [pc, #556]	; (83e34 <Cl_bc_controller+0xabc>)
   83c08:	220e      	movs	r2, #14
   83c0a:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83c0c:	4b7e      	ldr	r3, [pc, #504]	; (83e08 <Cl_bc_controller+0xa90>)
   83c0e:	2200      	movs	r2, #0
   83c10:	801a      	strh	r2, [r3, #0]
								}
								break;
   83c12:	e003      	b.n	83c1c <Cl_bc_controller+0x8a4>
								default:break;								
   83c14:	bf00      	nop
   83c16:	e1ca      	b.n	83fae <Cl_bc_controller+0xc36>
								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													
								}
								
								break;
   83c18:	bf00      	nop
   83c1a:	e1c8      	b.n	83fae <Cl_bc_controller+0xc36>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
									fill_time = 0;															
								}
								break;
   83c1c:	bf00      	nop
								default:break;								
							}
			break;
   83c1e:	e1c6      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83c20:	79fb      	ldrb	r3, [r7, #7]
   83c22:	2b00      	cmp	r3, #0
   83c24:	d001      	beq.n	83c2a <Cl_bc_controller+0x8b2>
   83c26:	2b02      	cmp	r3, #2
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
								
								break;
   83c28:	e02a      	b.n	83c80 <Cl_bc_controller+0x908>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83c2a:	4b77      	ldr	r3, [pc, #476]	; (83e08 <Cl_bc_controller+0xa90>)
   83c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c30:	b29b      	uxth	r3, r3
   83c32:	3301      	adds	r3, #1
   83c34:	b29b      	uxth	r3, r3
   83c36:	b21a      	sxth	r2, r3
   83c38:	4b73      	ldr	r3, [pc, #460]	; (83e08 <Cl_bc_controller+0xa90>)
   83c3a:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   83c3c:	4b7f      	ldr	r3, [pc, #508]	; (83e3c <Cl_bc_controller+0xac4>)
   83c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c42:	2b13      	cmp	r3, #19
   83c44:	dc11      	bgt.n	83c6a <Cl_bc_controller+0x8f2>
								{
									if(wait_counter == 2)
   83c46:	4b7d      	ldr	r3, [pc, #500]	; (83e3c <Cl_bc_controller+0xac4>)
   83c48:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c4c:	2b02      	cmp	r3, #2
   83c4e:	d102      	bne.n	83c56 <Cl_bc_controller+0x8de>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83c50:	2013      	movs	r0, #19
   83c52:	4b71      	ldr	r3, [pc, #452]	; (83e18 <Cl_bc_controller+0xaa0>)
   83c54:	4798      	blx	r3
									}
									
									wait_counter ++;	// 1 sec wait
   83c56:	4b79      	ldr	r3, [pc, #484]	; (83e3c <Cl_bc_controller+0xac4>)
   83c58:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c5c:	b29b      	uxth	r3, r3
   83c5e:	3301      	adds	r3, #1
   83c60:	b29b      	uxth	r3, r3
   83c62:	b21a      	sxth	r2, r3
   83c64:	4b75      	ldr	r3, [pc, #468]	; (83e3c <Cl_bc_controller+0xac4>)
   83c66:	801a      	strh	r2, [r3, #0]
								{
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
   83c68:	e009      	b.n	83c7e <Cl_bc_controller+0x906>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   83c6a:	4b74      	ldr	r3, [pc, #464]	; (83e3c <Cl_bc_controller+0xac4>)
   83c6c:	2200      	movs	r2, #0
   83c6e:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83c70:	4b70      	ldr	r3, [pc, #448]	; (83e34 <Cl_bc_controller+0xabc>)
   83c72:	781a      	ldrb	r2, [r3, #0]
   83c74:	4b70      	ldr	r3, [pc, #448]	; (83e38 <Cl_bc_controller+0xac0>)
   83c76:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   83c78:	4b6e      	ldr	r3, [pc, #440]	; (83e34 <Cl_bc_controller+0xabc>)
   83c7a:	220f      	movs	r2, #15
   83c7c:	701a      	strb	r2, [r3, #0]
								}
								break;case BC_EVENT_SECOND:
   83c7e:	bf00      	nop
								
								break;
								
							}
			break;
   83c80:	e195      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83c82:	79fb      	ldrb	r3, [r7, #7]
   83c84:	2b03      	cmp	r3, #3
   83c86:	f200 8147 	bhi.w	83f18 <Cl_bc_controller+0xba0>
   83c8a:	a201      	add	r2, pc, #4	; (adr r2, 83c90 <Cl_bc_controller+0x918>)
   83c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c90:	00083ca1 	.word	0x00083ca1
   83c94:	00083f19 	.word	0x00083f19
   83c98:	00083cb5 	.word	0x00083cb5
   83c9c:	00083ce7 	.word	0x00083ce7
							{
								case BC_EVENT_50MS:
								fill_time++;
   83ca0:	4b59      	ldr	r3, [pc, #356]	; (83e08 <Cl_bc_controller+0xa90>)
   83ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ca6:	b29b      	uxth	r3, r3
   83ca8:	3301      	adds	r3, #1
   83caa:	b29b      	uxth	r3, r3
   83cac:	b21a      	sxth	r2, r3
   83cae:	4b56      	ldr	r3, [pc, #344]	; (83e08 <Cl_bc_controller+0xa90>)
   83cb0:	801a      	strh	r2, [r3, #0]
								break;
   83cb2:	e136      	b.n	83f22 <Cl_bc_controller+0xbaa>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
									if(fill_time > 150){
   83cb4:	4b54      	ldr	r3, [pc, #336]	; (83e08 <Cl_bc_controller+0xa90>)
   83cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
   83cba:	2b96      	cmp	r3, #150	; 0x96
   83cbc:	f340 812e 	ble.w	83f1c <Cl_bc_controller+0xba4>
										
										sv_cntrl_setyellowalarm();
   83cc0:	4b52      	ldr	r3, [pc, #328]	; (83e0c <Cl_bc_controller+0xa94>)
   83cc2:	4798      	blx	r3
										sv_cntrl_activate_valve( VALVE_ID4);
   83cc4:	2004      	movs	r0, #4
   83cc6:	4b52      	ldr	r3, [pc, #328]	; (83e10 <Cl_bc_controller+0xa98>)
   83cc8:	4798      	blx	r3
										cl_wait(50);
   83cca:	2032      	movs	r0, #50	; 0x32
   83ccc:	4b51      	ldr	r3, [pc, #324]	; (83e14 <Cl_bc_controller+0xa9c>)
   83cce:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID4);
   83cd0:	2004      	movs	r0, #4
   83cd2:	4b51      	ldr	r3, [pc, #324]	; (83e18 <Cl_bc_controller+0xaa0>)
   83cd4:	4798      	blx	r3
										cl_wait(50);
   83cd6:	2032      	movs	r0, #50	; 0x32
   83cd8:	4b4e      	ldr	r3, [pc, #312]	; (83e14 <Cl_bc_controller+0xa9c>)
   83cda:	4798      	blx	r3
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83cdc:	2101      	movs	r1, #1
   83cde:	201a      	movs	r0, #26
   83ce0:	4b4e      	ldr	r3, [pc, #312]	; (83e1c <Cl_bc_controller+0xaa4>)
   83ce2:	4798      	blx	r3
										
									}
								
								break;
   83ce4:	e11a      	b.n	83f1c <Cl_bc_controller+0xba4>
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								 current_sense = true;
   83ce6:	4b56      	ldr	r3, [pc, #344]	; (83e40 <Cl_bc_controller+0xac8>)
   83ce8:	2201      	movs	r2, #1
   83cea:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83cec:	4b4e      	ldr	r3, [pc, #312]	; (83e28 <Cl_bc_controller+0xab0>)
   83cee:	2200      	movs	r2, #0
   83cf0:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83cf2:	4b45      	ldr	r3, [pc, #276]	; (83e08 <Cl_bc_controller+0xa90>)
   83cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
   83cf8:	b29a      	uxth	r2, r3
   83cfa:	4b4b      	ldr	r3, [pc, #300]	; (83e28 <Cl_bc_controller+0xab0>)
   83cfc:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   83cfe:	4b4a      	ldr	r3, [pc, #296]	; (83e28 <Cl_bc_controller+0xab0>)
   83d00:	2215      	movs	r2, #21
   83d02:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83d04:	4b40      	ldr	r3, [pc, #256]	; (83e08 <Cl_bc_controller+0xa90>)
   83d06:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d0a:	b29a      	uxth	r2, r3
   83d0c:	4b48      	ldr	r3, [pc, #288]	; (83e30 <Cl_bc_controller+0xab8>)
   83d0e:	801a      	strh	r2, [r3, #0]
								cl_tdata_temp.word = cl_tdata_temp.word << 16;
   83d10:	4b47      	ldr	r3, [pc, #284]	; (83e30 <Cl_bc_controller+0xab8>)
   83d12:	681b      	ldr	r3, [r3, #0]
   83d14:	041b      	lsls	r3, r3, #16
   83d16:	4a46      	ldr	r2, [pc, #280]	; (83e30 <Cl_bc_controller+0xab8>)
   83d18:	6013      	str	r3, [r2, #0]
									if (bc_flag == 1)
   83d1a:	4b4a      	ldr	r3, [pc, #296]	; (83e44 <Cl_bc_controller+0xacc>)
   83d1c:	781b      	ldrb	r3, [r3, #0]
   83d1e:	2b01      	cmp	r3, #1
   83d20:	f040 80df 	bne.w	83ee2 <Cl_bc_controller+0xb6a>
									{
										switch (flow_rate)
   83d24:	4b48      	ldr	r3, [pc, #288]	; (83e48 <Cl_bc_controller+0xad0>)
   83d26:	681b      	ldr	r3, [r3, #0]
   83d28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d2c:	f000 80d8 	beq.w	83ee0 <Cl_bc_controller+0xb68>
   83d30:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d34:	d807      	bhi.n	83d46 <Cl_bc_controller+0x9ce>
   83d36:	2bc8      	cmp	r3, #200	; 0xc8
   83d38:	f000 80b7 	beq.w	83eaa <Cl_bc_controller+0xb32>
   83d3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83d40:	f000 8086 	beq.w	83e50 <Cl_bc_controller+0xad8>
   83d44:	e0cd      	b.n	83ee2 <Cl_bc_controller+0xb6a>
   83d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83d4a:	d030      	beq.n	83dae <Cl_bc_controller+0xa36>
   83d4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83d50:	f040 80c7 	bne.w	83ee2 <Cl_bc_controller+0xb6a>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83d54:	4b2c      	ldr	r3, [pc, #176]	; (83e08 <Cl_bc_controller+0xa90>)
   83d56:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d5a:	2b37      	cmp	r3, #55	; 0x37
   83d5c:	dc04      	bgt.n	83d68 <Cl_bc_controller+0x9f0>
   83d5e:	4b2a      	ldr	r3, [pc, #168]	; (83e08 <Cl_bc_controller+0xa90>)
   83d60:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d64:	2b2c      	cmp	r3, #44	; 0x2c
   83d66:	dc1b      	bgt.n	83da0 <Cl_bc_controller+0xa28>
												{
													
													switchb02alrcnt++ ;
   83d68:	4b38      	ldr	r3, [pc, #224]	; (83e4c <Cl_bc_controller+0xad4>)
   83d6a:	681b      	ldr	r3, [r3, #0]
   83d6c:	3301      	adds	r3, #1
   83d6e:	4a37      	ldr	r2, [pc, #220]	; (83e4c <Cl_bc_controller+0xad4>)
   83d70:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83d72:	4b36      	ldr	r3, [pc, #216]	; (83e4c <Cl_bc_controller+0xad4>)
   83d74:	681b      	ldr	r3, [r3, #0]
   83d76:	2b03      	cmp	r3, #3
   83d78:	dd18      	ble.n	83dac <Cl_bc_controller+0xa34>
													sv_cntrl_setyellowalarm();
   83d7a:	4b24      	ldr	r3, [pc, #144]	; (83e0c <Cl_bc_controller+0xa94>)
   83d7c:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83d7e:	2004      	movs	r0, #4
   83d80:	4b23      	ldr	r3, [pc, #140]	; (83e10 <Cl_bc_controller+0xa98>)
   83d82:	4798      	blx	r3
													cl_wait(50);
   83d84:	2032      	movs	r0, #50	; 0x32
   83d86:	4b23      	ldr	r3, [pc, #140]	; (83e14 <Cl_bc_controller+0xa9c>)
   83d88:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83d8a:	2004      	movs	r0, #4
   83d8c:	4b22      	ldr	r3, [pc, #136]	; (83e18 <Cl_bc_controller+0xaa0>)
   83d8e:	4798      	blx	r3
													cl_wait(50);
   83d90:	2032      	movs	r0, #50	; 0x32
   83d92:	4b20      	ldr	r3, [pc, #128]	; (83e14 <Cl_bc_controller+0xa9c>)
   83d94:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83d96:	2101      	movs	r1, #1
   83d98:	201a      	movs	r0, #26
   83d9a:	4b20      	ldr	r3, [pc, #128]	; (83e1c <Cl_bc_controller+0xaa4>)
   83d9c:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83d9e:	e005      	b.n	83dac <Cl_bc_controller+0xa34>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83da0:	4b2a      	ldr	r3, [pc, #168]	; (83e4c <Cl_bc_controller+0xad4>)
   83da2:	2200      	movs	r2, #0
   83da4:	601a      	str	r2, [r3, #0]
													sv_cntrl_resetyellowalarm();
   83da6:	4b1e      	ldr	r3, [pc, #120]	; (83e20 <Cl_bc_controller+0xaa8>)
   83da8:	4798      	blx	r3
												}
											break;
   83daa:	e09a      	b.n	83ee2 <Cl_bc_controller+0xb6a>
   83dac:	e099      	b.n	83ee2 <Cl_bc_controller+0xb6a>
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83dae:	4b16      	ldr	r3, [pc, #88]	; (83e08 <Cl_bc_controller+0xa90>)
   83db0:	f9b3 3000 	ldrsh.w	r3, [r3]
   83db4:	2b4d      	cmp	r3, #77	; 0x4d
   83db6:	dc04      	bgt.n	83dc2 <Cl_bc_controller+0xa4a>
   83db8:	4b13      	ldr	r3, [pc, #76]	; (83e08 <Cl_bc_controller+0xa90>)
   83dba:	f9b3 3000 	ldrsh.w	r3, [r3]
   83dbe:	2b42      	cmp	r3, #66	; 0x42
   83dc0:	dc1b      	bgt.n	83dfa <Cl_bc_controller+0xa82>
												{
													
													switchb02alrcnt++ ;
   83dc2:	4b22      	ldr	r3, [pc, #136]	; (83e4c <Cl_bc_controller+0xad4>)
   83dc4:	681b      	ldr	r3, [r3, #0]
   83dc6:	3301      	adds	r3, #1
   83dc8:	4a20      	ldr	r2, [pc, #128]	; (83e4c <Cl_bc_controller+0xad4>)
   83dca:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83dcc:	4b1f      	ldr	r3, [pc, #124]	; (83e4c <Cl_bc_controller+0xad4>)
   83dce:	681b      	ldr	r3, [r3, #0]
   83dd0:	2b03      	cmp	r3, #3
   83dd2:	dd18      	ble.n	83e06 <Cl_bc_controller+0xa8e>
													sv_cntrl_setyellowalarm();
   83dd4:	4b0d      	ldr	r3, [pc, #52]	; (83e0c <Cl_bc_controller+0xa94>)
   83dd6:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83dd8:	2004      	movs	r0, #4
   83dda:	4b0d      	ldr	r3, [pc, #52]	; (83e10 <Cl_bc_controller+0xa98>)
   83ddc:	4798      	blx	r3
													cl_wait(50);
   83dde:	2032      	movs	r0, #50	; 0x32
   83de0:	4b0c      	ldr	r3, [pc, #48]	; (83e14 <Cl_bc_controller+0xa9c>)
   83de2:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83de4:	2004      	movs	r0, #4
   83de6:	4b0c      	ldr	r3, [pc, #48]	; (83e18 <Cl_bc_controller+0xaa0>)
   83de8:	4798      	blx	r3
													cl_wait(50);
   83dea:	2032      	movs	r0, #50	; 0x32
   83dec:	4b09      	ldr	r3, [pc, #36]	; (83e14 <Cl_bc_controller+0xa9c>)
   83dee:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83df0:	2101      	movs	r1, #1
   83df2:	201a      	movs	r0, #26
   83df4:	4b09      	ldr	r3, [pc, #36]	; (83e1c <Cl_bc_controller+0xaa4>)
   83df6:	4798      	blx	r3
												if ((fill_time > 77) || (fill_time < 67))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83df8:	e005      	b.n	83e06 <Cl_bc_controller+0xa8e>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83dfa:	4b14      	ldr	r3, [pc, #80]	; (83e4c <Cl_bc_controller+0xad4>)
   83dfc:	2200      	movs	r2, #0
   83dfe:	601a      	str	r2, [r3, #0]
													sv_cntrl_resetyellowalarm();
   83e00:	4b07      	ldr	r3, [pc, #28]	; (83e20 <Cl_bc_controller+0xaa8>)
   83e02:	4798      	blx	r3
												}
											break;
   83e04:	e06d      	b.n	83ee2 <Cl_bc_controller+0xb6a>
   83e06:	e06c      	b.n	83ee2 <Cl_bc_controller+0xb6a>
   83e08:	20071650 	.word	0x20071650
   83e0c:	0009775d 	.word	0x0009775d
   83e10:	000974f1 	.word	0x000974f1
   83e14:	000918fd 	.word	0x000918fd
   83e18:	00097511 	.word	0x00097511
   83e1c:	00083105 	.word	0x00083105
   83e20:	000977ad 	.word	0x000977ad
   83e24:	000976e1 	.word	0x000976e1
   83e28:	20071654 	.word	0x20071654
   83e2c:	0009926d 	.word	0x0009926d
   83e30:	20071658 	.word	0x20071658
   83e34:	2007163d 	.word	0x2007163d
   83e38:	2007163e 	.word	0x2007163e
   83e3c:	20071640 	.word	0x20071640
   83e40:	20072628 	.word	0x20072628
   83e44:	200720ef 	.word	0x200720ef
   83e48:	200720f0 	.word	0x200720f0
   83e4c:	2007164c 	.word	0x2007164c
											
											case 400:
											break;
											
											case 300:
											if ((fill_time > 125) || (fill_time < 115))
   83e50:	4b59      	ldr	r3, [pc, #356]	; (83fb8 <Cl_bc_controller+0xc40>)
   83e52:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e56:	2b7d      	cmp	r3, #125	; 0x7d
   83e58:	dc04      	bgt.n	83e64 <Cl_bc_controller+0xaec>
   83e5a:	4b57      	ldr	r3, [pc, #348]	; (83fb8 <Cl_bc_controller+0xc40>)
   83e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e60:	2b72      	cmp	r3, #114	; 0x72
   83e62:	dc1b      	bgt.n	83e9c <Cl_bc_controller+0xb24>
											{
												
												switchb02alrcnt++ ;
   83e64:	4b55      	ldr	r3, [pc, #340]	; (83fbc <Cl_bc_controller+0xc44>)
   83e66:	681b      	ldr	r3, [r3, #0]
   83e68:	3301      	adds	r3, #1
   83e6a:	4a54      	ldr	r2, [pc, #336]	; (83fbc <Cl_bc_controller+0xc44>)
   83e6c:	6013      	str	r3, [r2, #0]

												if(switchb02alrcnt >3){
   83e6e:	4b53      	ldr	r3, [pc, #332]	; (83fbc <Cl_bc_controller+0xc44>)
   83e70:	681b      	ldr	r3, [r3, #0]
   83e72:	2b03      	cmp	r3, #3
   83e74:	dd18      	ble.n	83ea8 <Cl_bc_controller+0xb30>
												sv_cntrl_setyellowalarm();
   83e76:	4b52      	ldr	r3, [pc, #328]	; (83fc0 <Cl_bc_controller+0xc48>)
   83e78:	4798      	blx	r3
												sv_cntrl_activate_valve( VALVE_ID4);
   83e7a:	2004      	movs	r0, #4
   83e7c:	4b51      	ldr	r3, [pc, #324]	; (83fc4 <Cl_bc_controller+0xc4c>)
   83e7e:	4798      	blx	r3
												cl_wait(50);
   83e80:	2032      	movs	r0, #50	; 0x32
   83e82:	4b51      	ldr	r3, [pc, #324]	; (83fc8 <Cl_bc_controller+0xc50>)
   83e84:	4798      	blx	r3
												sv_cntrl_deactivate_valve(VALVE_ID4);
   83e86:	2004      	movs	r0, #4
   83e88:	4b50      	ldr	r3, [pc, #320]	; (83fcc <Cl_bc_controller+0xc54>)
   83e8a:	4798      	blx	r3
												cl_wait(50);
   83e8c:	2032      	movs	r0, #50	; 0x32
   83e8e:	4b4e      	ldr	r3, [pc, #312]	; (83fc8 <Cl_bc_controller+0xc50>)
   83e90:	4798      	blx	r3
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83e92:	2101      	movs	r1, #1
   83e94:	201a      	movs	r0, #26
   83e96:	4b4e      	ldr	r3, [pc, #312]	; (83fd0 <Cl_bc_controller+0xc58>)
   83e98:	4798      	blx	r3
											if ((fill_time > 125) || (fill_time < 115))
											{
												
												switchb02alrcnt++ ;

												if(switchb02alrcnt >3){
   83e9a:	e005      	b.n	83ea8 <Cl_bc_controller+0xb30>
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
											}
											else
											{
												switchb02alrcnt = 0;
   83e9c:	4b47      	ldr	r3, [pc, #284]	; (83fbc <Cl_bc_controller+0xc44>)
   83e9e:	2200      	movs	r2, #0
   83ea0:	601a      	str	r2, [r3, #0]
												sv_cntrl_resetyellowalarm();
   83ea2:	4b4c      	ldr	r3, [pc, #304]	; (83fd4 <Cl_bc_controller+0xc5c>)
   83ea4:	4798      	blx	r3
											}
											break;
   83ea6:	e01c      	b.n	83ee2 <Cl_bc_controller+0xb6a>
   83ea8:	e01b      	b.n	83ee2 <Cl_bc_controller+0xb6a>
											
											case 200:
												if (fill_time > 190)
   83eaa:	4b43      	ldr	r3, [pc, #268]	; (83fb8 <Cl_bc_controller+0xc40>)
   83eac:	f9b3 3000 	ldrsh.w	r3, [r3]
   83eb0:	2bbe      	cmp	r3, #190	; 0xbe
   83eb2:	dd12      	ble.n	83eda <Cl_bc_controller+0xb62>
												{
													sv_cntrl_setyellowalarm();
   83eb4:	4b42      	ldr	r3, [pc, #264]	; (83fc0 <Cl_bc_controller+0xc48>)
   83eb6:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83eb8:	2004      	movs	r0, #4
   83eba:	4b42      	ldr	r3, [pc, #264]	; (83fc4 <Cl_bc_controller+0xc4c>)
   83ebc:	4798      	blx	r3
													cl_wait(50);
   83ebe:	2032      	movs	r0, #50	; 0x32
   83ec0:	4b41      	ldr	r3, [pc, #260]	; (83fc8 <Cl_bc_controller+0xc50>)
   83ec2:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83ec4:	2004      	movs	r0, #4
   83ec6:	4b41      	ldr	r3, [pc, #260]	; (83fcc <Cl_bc_controller+0xc54>)
   83ec8:	4798      	blx	r3
													cl_wait(50);
   83eca:	2032      	movs	r0, #50	; 0x32
   83ecc:	4b3e      	ldr	r3, [pc, #248]	; (83fc8 <Cl_bc_controller+0xc50>)
   83ece:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83ed0:	2101      	movs	r1, #1
   83ed2:	201a      	movs	r0, #26
   83ed4:	4b3e      	ldr	r3, [pc, #248]	; (83fd0 <Cl_bc_controller+0xc58>)
   83ed6:	4798      	blx	r3
												}
												else
												{
													sv_cntrl_resetyellowalarm();
												}
											break;
   83ed8:	e003      	b.n	83ee2 <Cl_bc_controller+0xb6a>
													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
												else
												{
													sv_cntrl_resetyellowalarm();
   83eda:	4b3e      	ldr	r3, [pc, #248]	; (83fd4 <Cl_bc_controller+0xc5c>)
   83edc:	4798      	blx	r3
												}
											break;
   83ede:	e000      	b.n	83ee2 <Cl_bc_controller+0xb6a>
													sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83ee0:	bf00      	nop
												}
											break;
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83ee2:	2005      	movs	r0, #5
   83ee4:	4b3c      	ldr	r3, [pc, #240]	; (83fd8 <Cl_bc_controller+0xc60>)
   83ee6:	4798      	blx	r3
   83ee8:	4603      	mov	r3, r0
   83eea:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83eec:	2013      	movs	r0, #19
   83eee:	4b35      	ldr	r3, [pc, #212]	; (83fc4 <Cl_bc_controller+0xc4c>)
   83ef0:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83ef2:	2204      	movs	r2, #4
   83ef4:	4939      	ldr	r1, [pc, #228]	; (83fdc <Cl_bc_controller+0xc64>)
   83ef6:	2037      	movs	r0, #55	; 0x37
   83ef8:	4b39      	ldr	r3, [pc, #228]	; (83fe0 <Cl_bc_controller+0xc68>)
   83efa:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   83efc:	7bfb      	ldrb	r3, [r7, #15]
   83efe:	2b00      	cmp	r3, #0
   83f00:	d10e      	bne.n	83f20 <Cl_bc_controller+0xba8>
								{
									bc_laststate = bc_state;
   83f02:	4b38      	ldr	r3, [pc, #224]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f04:	781a      	ldrb	r2, [r3, #0]
   83f06:	4b38      	ldr	r3, [pc, #224]	; (83fe8 <Cl_bc_controller+0xc70>)
   83f08:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83f0a:	4b2b      	ldr	r3, [pc, #172]	; (83fb8 <Cl_bc_controller+0xc40>)
   83f0c:	2200      	movs	r2, #0
   83f0e:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83f10:	4b34      	ldr	r3, [pc, #208]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f12:	220c      	movs	r2, #12
   83f14:	701a      	strb	r2, [r3, #0]
								}
								break;
   83f16:	e003      	b.n	83f20 <Cl_bc_controller+0xba8>
								default:break;
   83f18:	bf00      	nop
   83f1a:	e048      	b.n	83fae <Cl_bc_controller+0xc36>
										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
										
									}
								
								break;
   83f1c:	bf00      	nop
   83f1e:	e046      	b.n	83fae <Cl_bc_controller+0xc36>
								{
									bc_laststate = bc_state;
									fill_time = 0;
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
								}
								break;
   83f20:	bf00      	nop
								default:break;
							}
			break;
   83f22:	e044      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83f24:	79fb      	ldrb	r3, [r7, #7]
   83f26:	2b04      	cmp	r3, #4
   83f28:	d00b      	beq.n	83f42 <Cl_bc_controller+0xbca>
   83f2a:	2b07      	cmp	r3, #7
   83f2c:	d000      	beq.n	83f30 <Cl_bc_controller+0xbb8>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83f2e:	e01a      	b.n	83f66 <Cl_bc_controller+0xbee>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83f30:	2005      	movs	r0, #5
   83f32:	4b29      	ldr	r3, [pc, #164]	; (83fd8 <Cl_bc_controller+0xc60>)
   83f34:	4798      	blx	r3
   83f36:	4603      	mov	r3, r0
   83f38:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83f3a:	4b2a      	ldr	r3, [pc, #168]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f3c:	2211      	movs	r2, #17
   83f3e:	701a      	strb	r2, [r3, #0]
								break;
   83f40:	e011      	b.n	83f66 <Cl_bc_controller+0xbee>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f42:	2007      	movs	r0, #7
   83f44:	4b24      	ldr	r3, [pc, #144]	; (83fd8 <Cl_bc_controller+0xc60>)
   83f46:	4798      	blx	r3
   83f48:	4603      	mov	r3, r0
   83f4a:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f4c:	4b25      	ldr	r3, [pc, #148]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f4e:	781a      	ldrb	r2, [r3, #0]
   83f50:	4b25      	ldr	r3, [pc, #148]	; (83fe8 <Cl_bc_controller+0xc70>)
   83f52:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83f54:	4b23      	ldr	r3, [pc, #140]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f56:	2202      	movs	r2, #2
   83f58:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f5a:	2013      	movs	r0, #19
   83f5c:	4b19      	ldr	r3, [pc, #100]	; (83fc4 <Cl_bc_controller+0xc4c>)
   83f5e:	4798      	blx	r3
   83f60:	4603      	mov	r3, r0
   83f62:	73fb      	strb	r3, [r7, #15]
								break;
   83f64:	bf00      	nop
								default:break;
						
							}
						
			break;
   83f66:	e022      	b.n	83fae <Cl_bc_controller+0xc36>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83f68:	79fb      	ldrb	r3, [r7, #7]
   83f6a:	2b04      	cmp	r3, #4
   83f6c:	d00b      	beq.n	83f86 <Cl_bc_controller+0xc0e>
   83f6e:	2b09      	cmp	r3, #9
   83f70:	d000      	beq.n	83f74 <Cl_bc_controller+0xbfc>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83f72:	e01a      	b.n	83faa <Cl_bc_controller+0xc32>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83f74:	2006      	movs	r0, #6
   83f76:	4b18      	ldr	r3, [pc, #96]	; (83fd8 <Cl_bc_controller+0xc60>)
   83f78:	4798      	blx	r3
   83f7a:	4603      	mov	r3, r0
   83f7c:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83f7e:	4b19      	ldr	r3, [pc, #100]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f80:	2213      	movs	r2, #19
   83f82:	701a      	strb	r2, [r3, #0]
								break;
   83f84:	e011      	b.n	83faa <Cl_bc_controller+0xc32>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f86:	2007      	movs	r0, #7
   83f88:	4b13      	ldr	r3, [pc, #76]	; (83fd8 <Cl_bc_controller+0xc60>)
   83f8a:	4798      	blx	r3
   83f8c:	4603      	mov	r3, r0
   83f8e:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f90:	4b14      	ldr	r3, [pc, #80]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83f92:	781a      	ldrb	r2, [r3, #0]
   83f94:	4b14      	ldr	r3, [pc, #80]	; (83fe8 <Cl_bc_controller+0xc70>)
   83f96:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f98:	2013      	movs	r0, #19
   83f9a:	4b0a      	ldr	r3, [pc, #40]	; (83fc4 <Cl_bc_controller+0xc4c>)
   83f9c:	4798      	blx	r3
   83f9e:	4603      	mov	r3, r0
   83fa0:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83fa2:	4b10      	ldr	r3, [pc, #64]	; (83fe4 <Cl_bc_controller+0xc6c>)
   83fa4:	2202      	movs	r2, #2
   83fa6:	701a      	strb	r2, [r3, #0]
								break;
   83fa8:	bf00      	nop
								default:break;
								
							}
			break;
   83faa:	e000      	b.n	83fae <Cl_bc_controller+0xc36>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83fac:	bf00      	nop
	}

	
	return 0;
   83fae:	2300      	movs	r3, #0
}
   83fb0:	4618      	mov	r0, r3
   83fb2:	3710      	adds	r7, #16
   83fb4:	46bd      	mov	sp, r7
   83fb6:	bd80      	pop	{r7, pc}
   83fb8:	20071650 	.word	0x20071650
   83fbc:	2007164c 	.word	0x2007164c
   83fc0:	0009775d 	.word	0x0009775d
   83fc4:	000974f1 	.word	0x000974f1
   83fc8:	000918fd 	.word	0x000918fd
   83fcc:	00097511 	.word	0x00097511
   83fd0:	00083105 	.word	0x00083105
   83fd4:	000977ad 	.word	0x000977ad
   83fd8:	000976e1 	.word	0x000976e1
   83fdc:	20071654 	.word	0x20071654
   83fe0:	0009926d 	.word	0x0009926d
   83fe4:	2007163d 	.word	0x2007163d
   83fe8:	2007163e 	.word	0x2007163e

00083fec <hep_calibration>:

//*************************************************** till this************


void hep_calibration(Cl_Uint32Type inpt_ml)
{
   83fec:	b480      	push	{r7}
   83fee:	b085      	sub	sp, #20
   83ff0:	af00      	add	r7, sp, #0
   83ff2:	6078      	str	r0, [r7, #4]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<2;i++)
   83ff4:	2300      	movs	r3, #0
   83ff6:	60fb      	str	r3, [r7, #12]
   83ff8:	e05d      	b.n	840b6 <hep_calibration+0xca>
	{
		if (inpt_ml == hp[i].ml)
   83ffa:	4a33      	ldr	r2, [pc, #204]	; (840c8 <hep_calibration+0xdc>)
   83ffc:	68fb      	ldr	r3, [r7, #12]
   83ffe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84002:	b29b      	uxth	r3, r3
   84004:	461a      	mov	r2, r3
   84006:	687b      	ldr	r3, [r7, #4]
   84008:	429a      	cmp	r2, r3
   8400a:	d109      	bne.n	84020 <hep_calibration+0x34>
		{
			hep_speed=hp[i].speed;
   8400c:	4a2e      	ldr	r2, [pc, #184]	; (840c8 <hep_calibration+0xdc>)
   8400e:	68fb      	ldr	r3, [r7, #12]
   84010:	009b      	lsls	r3, r3, #2
   84012:	4413      	add	r3, r2
   84014:	885b      	ldrh	r3, [r3, #2]
   84016:	b29b      	uxth	r3, r3
   84018:	461a      	mov	r2, r3
   8401a:	4b2c      	ldr	r3, [pc, #176]	; (840cc <hep_calibration+0xe0>)
   8401c:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   8401e:	e04d      	b.n	840bc <hep_calibration+0xd0>
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   84020:	4a29      	ldr	r2, [pc, #164]	; (840c8 <hep_calibration+0xdc>)
   84022:	68fb      	ldr	r3, [r7, #12]
   84024:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84028:	b29b      	uxth	r3, r3
   8402a:	461a      	mov	r2, r3
   8402c:	687b      	ldr	r3, [r7, #4]
   8402e:	429a      	cmp	r2, r3
   84030:	d23e      	bcs.n	840b0 <hep_calibration+0xc4>
   84032:	68fb      	ldr	r3, [r7, #12]
   84034:	3301      	adds	r3, #1
   84036:	4a24      	ldr	r2, [pc, #144]	; (840c8 <hep_calibration+0xdc>)
   84038:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8403c:	b29b      	uxth	r3, r3
   8403e:	461a      	mov	r2, r3
   84040:	687b      	ldr	r3, [r7, #4]
   84042:	429a      	cmp	r2, r3
   84044:	d934      	bls.n	840b0 <hep_calibration+0xc4>
		{
			slope = ((hp[i+1].ml-hp[i].ml)/(hp[i+1].speed-hp[i].speed));
   84046:	68fb      	ldr	r3, [r7, #12]
   84048:	3301      	adds	r3, #1
   8404a:	4a1f      	ldr	r2, [pc, #124]	; (840c8 <hep_calibration+0xdc>)
   8404c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84050:	b29b      	uxth	r3, r3
   84052:	4619      	mov	r1, r3
   84054:	4a1c      	ldr	r2, [pc, #112]	; (840c8 <hep_calibration+0xdc>)
   84056:	68fb      	ldr	r3, [r7, #12]
   84058:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8405c:	b29b      	uxth	r3, r3
   8405e:	1aca      	subs	r2, r1, r3
   84060:	68fb      	ldr	r3, [r7, #12]
   84062:	3301      	adds	r3, #1
   84064:	4918      	ldr	r1, [pc, #96]	; (840c8 <hep_calibration+0xdc>)
   84066:	009b      	lsls	r3, r3, #2
   84068:	440b      	add	r3, r1
   8406a:	885b      	ldrh	r3, [r3, #2]
   8406c:	b29b      	uxth	r3, r3
   8406e:	4618      	mov	r0, r3
   84070:	4915      	ldr	r1, [pc, #84]	; (840c8 <hep_calibration+0xdc>)
   84072:	68fb      	ldr	r3, [r7, #12]
   84074:	009b      	lsls	r3, r3, #2
   84076:	440b      	add	r3, r1
   84078:	885b      	ldrh	r3, [r3, #2]
   8407a:	b29b      	uxth	r3, r3
   8407c:	1ac3      	subs	r3, r0, r3
   8407e:	fb92 f3f3 	sdiv	r3, r2, r3
   84082:	817b      	strh	r3, [r7, #10]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   84084:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84088:	490f      	ldr	r1, [pc, #60]	; (840c8 <hep_calibration+0xdc>)
   8408a:	68fa      	ldr	r2, [r7, #12]
   8408c:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84090:	b292      	uxth	r2, r2
   84092:	4611      	mov	r1, r2
   84094:	687a      	ldr	r2, [r7, #4]
   84096:	1a52      	subs	r2, r2, r1
   84098:	fb02 f203 	mul.w	r2, r2, r3
   8409c:	490a      	ldr	r1, [pc, #40]	; (840c8 <hep_calibration+0xdc>)
   8409e:	68fb      	ldr	r3, [r7, #12]
   840a0:	009b      	lsls	r3, r3, #2
   840a2:	440b      	add	r3, r1
   840a4:	885b      	ldrh	r3, [r3, #2]
   840a6:	b29b      	uxth	r3, r3
   840a8:	4413      	add	r3, r2
   840aa:	4a08      	ldr	r2, [pc, #32]	; (840cc <hep_calibration+0xe0>)
   840ac:	6013      	str	r3, [r2, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   840ae:	e005      	b.n	840bc <hep_calibration+0xd0>
void hep_calibration(Cl_Uint32Type inpt_ml)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<2;i++)
   840b0:	68fb      	ldr	r3, [r7, #12]
   840b2:	3301      	adds	r3, #1
   840b4:	60fb      	str	r3, [r7, #12]
   840b6:	68fb      	ldr	r3, [r7, #12]
   840b8:	2b01      	cmp	r3, #1
   840ba:	dd9e      	ble.n	83ffa <hep_calibration+0xe>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   840bc:	bf00      	nop
   840be:	3714      	adds	r7, #20
   840c0:	46bd      	mov	sp, r7
   840c2:	bc80      	pop	{r7}
   840c4:	4770      	bx	lr
   840c6:	bf00      	nop
   840c8:	20071f40 	.word	0x20071f40
   840cc:	20072d68 	.word	0x20072d68

000840d0 <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   840d0:	b590      	push	{r4, r7, lr}
   840d2:	b085      	sub	sp, #20
   840d4:	af00      	add	r7, sp, #0
   840d6:	4603      	mov	r3, r0
   840d8:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   840da:	2300      	movs	r3, #0
   840dc:	60fb      	str	r3, [r7, #12]
   840de:	e0a1      	b.n	84224 <calibration_apt+0x154>
	{
		if (sensordata == apt2[i].millivolt)
   840e0:	4a54      	ldr	r2, [pc, #336]	; (84234 <calibration_apt+0x164>)
   840e2:	68fb      	ldr	r3, [r7, #12]
   840e4:	009b      	lsls	r3, r3, #2
   840e6:	4413      	add	r3, r2
   840e8:	885b      	ldrh	r3, [r3, #2]
   840ea:	b21b      	sxth	r3, r3
   840ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840f0:	429a      	cmp	r2, r3
   840f2:	d10b      	bne.n	8410c <calibration_apt+0x3c>
		{
			pressure_final_apt=apt2[i].pressure;
   840f4:	4a4f      	ldr	r2, [pc, #316]	; (84234 <calibration_apt+0x164>)
   840f6:	68fb      	ldr	r3, [r7, #12]
   840f8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840fc:	b21a      	sxth	r2, r3
   840fe:	4b4e      	ldr	r3, [pc, #312]	; (84238 <calibration_apt+0x168>)
   84100:	4610      	mov	r0, r2
   84102:	4798      	blx	r3
   84104:	4602      	mov	r2, r0
   84106:	4b4d      	ldr	r3, [pc, #308]	; (8423c <calibration_apt+0x16c>)
   84108:	601a      	str	r2, [r3, #0]
   8410a:	e088      	b.n	8421e <calibration_apt+0x14e>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   8410c:	4a49      	ldr	r2, [pc, #292]	; (84234 <calibration_apt+0x164>)
   8410e:	68fb      	ldr	r3, [r7, #12]
   84110:	009b      	lsls	r3, r3, #2
   84112:	4413      	add	r3, r2
   84114:	885b      	ldrh	r3, [r3, #2]
   84116:	b21b      	sxth	r3, r3
   84118:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8411c:	429a      	cmp	r2, r3
   8411e:	dd5b      	ble.n	841d8 <calibration_apt+0x108>
   84120:	68fb      	ldr	r3, [r7, #12]
   84122:	3301      	adds	r3, #1
   84124:	4a43      	ldr	r2, [pc, #268]	; (84234 <calibration_apt+0x164>)
   84126:	009b      	lsls	r3, r3, #2
   84128:	4413      	add	r3, r2
   8412a:	885b      	ldrh	r3, [r3, #2]
   8412c:	b21b      	sxth	r3, r3
   8412e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84132:	429a      	cmp	r2, r3
   84134:	da50      	bge.n	841d8 <calibration_apt+0x108>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   84136:	68fb      	ldr	r3, [r7, #12]
   84138:	3301      	adds	r3, #1
   8413a:	4a3e      	ldr	r2, [pc, #248]	; (84234 <calibration_apt+0x164>)
   8413c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84140:	b21b      	sxth	r3, r3
   84142:	4619      	mov	r1, r3
   84144:	4a3b      	ldr	r2, [pc, #236]	; (84234 <calibration_apt+0x164>)
   84146:	68fb      	ldr	r3, [r7, #12]
   84148:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8414c:	b21b      	sxth	r3, r3
   8414e:	1acb      	subs	r3, r1, r3
   84150:	2264      	movs	r2, #100	; 0x64
   84152:	fb02 f203 	mul.w	r2, r2, r3
   84156:	68fb      	ldr	r3, [r7, #12]
   84158:	3301      	adds	r3, #1
   8415a:	4936      	ldr	r1, [pc, #216]	; (84234 <calibration_apt+0x164>)
   8415c:	009b      	lsls	r3, r3, #2
   8415e:	440b      	add	r3, r1
   84160:	885b      	ldrh	r3, [r3, #2]
   84162:	b21b      	sxth	r3, r3
   84164:	4618      	mov	r0, r3
   84166:	4933      	ldr	r1, [pc, #204]	; (84234 <calibration_apt+0x164>)
   84168:	68fb      	ldr	r3, [r7, #12]
   8416a:	009b      	lsls	r3, r3, #2
   8416c:	440b      	add	r3, r1
   8416e:	885b      	ldrh	r3, [r3, #2]
   84170:	b21b      	sxth	r3, r3
   84172:	1ac3      	subs	r3, r0, r3
   84174:	fb92 f2f3 	sdiv	r2, r2, r3
   84178:	4b2f      	ldr	r3, [pc, #188]	; (84238 <calibration_apt+0x168>)
   8417a:	4610      	mov	r0, r2
   8417c:	4798      	blx	r3
   8417e:	4603      	mov	r3, r0
   84180:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   84182:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84186:	492b      	ldr	r1, [pc, #172]	; (84234 <calibration_apt+0x164>)
   84188:	68fb      	ldr	r3, [r7, #12]
   8418a:	009b      	lsls	r3, r3, #2
   8418c:	440b      	add	r3, r1
   8418e:	885b      	ldrh	r3, [r3, #2]
   84190:	b21b      	sxth	r3, r3
   84192:	1ad2      	subs	r2, r2, r3
   84194:	4b28      	ldr	r3, [pc, #160]	; (84238 <calibration_apt+0x168>)
   84196:	4610      	mov	r0, r2
   84198:	4798      	blx	r3
   8419a:	4602      	mov	r2, r0
   8419c:	4b28      	ldr	r3, [pc, #160]	; (84240 <calibration_apt+0x170>)
   8419e:	68b9      	ldr	r1, [r7, #8]
   841a0:	4610      	mov	r0, r2
   841a2:	4798      	blx	r3
   841a4:	4603      	mov	r3, r0
   841a6:	461a      	mov	r2, r3
   841a8:	4b26      	ldr	r3, [pc, #152]	; (84244 <calibration_apt+0x174>)
   841aa:	4927      	ldr	r1, [pc, #156]	; (84248 <calibration_apt+0x178>)
   841ac:	4610      	mov	r0, r2
   841ae:	4798      	blx	r3
   841b0:	4603      	mov	r3, r0
   841b2:	461c      	mov	r4, r3
   841b4:	4a1f      	ldr	r2, [pc, #124]	; (84234 <calibration_apt+0x164>)
   841b6:	68fb      	ldr	r3, [r7, #12]
   841b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841bc:	b21a      	sxth	r2, r3
   841be:	4b1e      	ldr	r3, [pc, #120]	; (84238 <calibration_apt+0x168>)
   841c0:	4610      	mov	r0, r2
   841c2:	4798      	blx	r3
   841c4:	4602      	mov	r2, r0
   841c6:	4b21      	ldr	r3, [pc, #132]	; (8424c <calibration_apt+0x17c>)
   841c8:	4611      	mov	r1, r2
   841ca:	4620      	mov	r0, r4
   841cc:	4798      	blx	r3
   841ce:	4603      	mov	r3, r0
   841d0:	461a      	mov	r2, r3
   841d2:	4b1a      	ldr	r3, [pc, #104]	; (8423c <calibration_apt+0x16c>)
   841d4:	601a      	str	r2, [r3, #0]
   841d6:	e022      	b.n	8421e <calibration_apt+0x14e>
		}
		else if(sensordata < apt2[0].millivolt)
   841d8:	4b16      	ldr	r3, [pc, #88]	; (84234 <calibration_apt+0x164>)
   841da:	885b      	ldrh	r3, [r3, #2]
   841dc:	b21b      	sxth	r3, r3
   841de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841e2:	429a      	cmp	r2, r3
   841e4:	da09      	bge.n	841fa <calibration_apt+0x12a>
		{
			pressure_final_apt = apt2[0].pressure;
   841e6:	4b13      	ldr	r3, [pc, #76]	; (84234 <calibration_apt+0x164>)
   841e8:	881b      	ldrh	r3, [r3, #0]
   841ea:	b21a      	sxth	r2, r3
   841ec:	4b12      	ldr	r3, [pc, #72]	; (84238 <calibration_apt+0x168>)
   841ee:	4610      	mov	r0, r2
   841f0:	4798      	blx	r3
   841f2:	4602      	mov	r2, r0
   841f4:	4b11      	ldr	r3, [pc, #68]	; (8423c <calibration_apt+0x16c>)
   841f6:	601a      	str	r2, [r3, #0]
   841f8:	e011      	b.n	8421e <calibration_apt+0x14e>
		}
		else  if(sensordata > apt2[25].millivolt)
   841fa:	4b0e      	ldr	r3, [pc, #56]	; (84234 <calibration_apt+0x164>)
   841fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   84200:	b21b      	sxth	r3, r3
   84202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84206:	429a      	cmp	r2, r3
   84208:	dd09      	ble.n	8421e <calibration_apt+0x14e>
		{
			pressure_final_apt = apt2[25].pressure;
   8420a:	4b0a      	ldr	r3, [pc, #40]	; (84234 <calibration_apt+0x164>)
   8420c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   84210:	b21a      	sxth	r2, r3
   84212:	4b09      	ldr	r3, [pc, #36]	; (84238 <calibration_apt+0x168>)
   84214:	4610      	mov	r0, r2
   84216:	4798      	blx	r3
   84218:	4602      	mov	r2, r0
   8421a:	4b08      	ldr	r3, [pc, #32]	; (8423c <calibration_apt+0x16c>)
   8421c:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8421e:	68fb      	ldr	r3, [r7, #12]
   84220:	3301      	adds	r3, #1
   84222:	60fb      	str	r3, [r7, #12]
   84224:	68fb      	ldr	r3, [r7, #12]
   84226:	2b19      	cmp	r3, #25
   84228:	f77f af5a 	ble.w	840e0 <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   8422c:	bf00      	nop
   8422e:	3714      	adds	r7, #20
   84230:	46bd      	mov	sp, r7
   84232:	bd90      	pop	{r4, r7, pc}
   84234:	2007011c 	.word	0x2007011c
   84238:	000a33a9 	.word	0x000a33a9
   8423c:	20072d64 	.word	0x20072d64
   84240:	000a3451 	.word	0x000a3451
   84244:	000a35b9 	.word	0x000a35b9
   84248:	42c80000 	.word	0x42c80000
   8424c:	000a3241 	.word	0x000a3241

00084250 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   84250:	b590      	push	{r4, r7, lr}
   84252:	b085      	sub	sp, #20
   84254:	af00      	add	r7, sp, #0
   84256:	4603      	mov	r3, r0
   84258:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8425a:	2300      	movs	r3, #0
   8425c:	60fb      	str	r3, [r7, #12]
   8425e:	e0a1      	b.n	843a4 <calibration_vpt+0x154>
	{
		if (sensordata == vpt2[i].millivolt)
   84260:	4a54      	ldr	r2, [pc, #336]	; (843b4 <calibration_vpt+0x164>)
   84262:	68fb      	ldr	r3, [r7, #12]
   84264:	009b      	lsls	r3, r3, #2
   84266:	4413      	add	r3, r2
   84268:	885b      	ldrh	r3, [r3, #2]
   8426a:	b21b      	sxth	r3, r3
   8426c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84270:	429a      	cmp	r2, r3
   84272:	d10b      	bne.n	8428c <calibration_vpt+0x3c>
		{
			pressure_final_vpt=vpt2[i].pressure;
   84274:	4a4f      	ldr	r2, [pc, #316]	; (843b4 <calibration_vpt+0x164>)
   84276:	68fb      	ldr	r3, [r7, #12]
   84278:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8427c:	b21a      	sxth	r2, r3
   8427e:	4b4e      	ldr	r3, [pc, #312]	; (843b8 <calibration_vpt+0x168>)
   84280:	4610      	mov	r0, r2
   84282:	4798      	blx	r3
   84284:	4602      	mov	r2, r0
   84286:	4b4d      	ldr	r3, [pc, #308]	; (843bc <calibration_vpt+0x16c>)
   84288:	601a      	str	r2, [r3, #0]
			break;
   8428a:	e08f      	b.n	843ac <calibration_vpt+0x15c>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   8428c:	4a49      	ldr	r2, [pc, #292]	; (843b4 <calibration_vpt+0x164>)
   8428e:	68fb      	ldr	r3, [r7, #12]
   84290:	009b      	lsls	r3, r3, #2
   84292:	4413      	add	r3, r2
   84294:	885b      	ldrh	r3, [r3, #2]
   84296:	b21b      	sxth	r3, r3
   84298:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8429c:	429a      	cmp	r2, r3
   8429e:	dd5b      	ble.n	84358 <calibration_vpt+0x108>
   842a0:	68fb      	ldr	r3, [r7, #12]
   842a2:	3301      	adds	r3, #1
   842a4:	4a43      	ldr	r2, [pc, #268]	; (843b4 <calibration_vpt+0x164>)
   842a6:	009b      	lsls	r3, r3, #2
   842a8:	4413      	add	r3, r2
   842aa:	885b      	ldrh	r3, [r3, #2]
   842ac:	b21b      	sxth	r3, r3
   842ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842b2:	429a      	cmp	r2, r3
   842b4:	da50      	bge.n	84358 <calibration_vpt+0x108>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   842b6:	68fb      	ldr	r3, [r7, #12]
   842b8:	3301      	adds	r3, #1
   842ba:	4a3e      	ldr	r2, [pc, #248]	; (843b4 <calibration_vpt+0x164>)
   842bc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842c0:	b21b      	sxth	r3, r3
   842c2:	4619      	mov	r1, r3
   842c4:	4a3b      	ldr	r2, [pc, #236]	; (843b4 <calibration_vpt+0x164>)
   842c6:	68fb      	ldr	r3, [r7, #12]
   842c8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842cc:	b21b      	sxth	r3, r3
   842ce:	1acb      	subs	r3, r1, r3
   842d0:	2264      	movs	r2, #100	; 0x64
   842d2:	fb02 f203 	mul.w	r2, r2, r3
   842d6:	68fb      	ldr	r3, [r7, #12]
   842d8:	3301      	adds	r3, #1
   842da:	4936      	ldr	r1, [pc, #216]	; (843b4 <calibration_vpt+0x164>)
   842dc:	009b      	lsls	r3, r3, #2
   842de:	440b      	add	r3, r1
   842e0:	885b      	ldrh	r3, [r3, #2]
   842e2:	b21b      	sxth	r3, r3
   842e4:	4618      	mov	r0, r3
   842e6:	4933      	ldr	r1, [pc, #204]	; (843b4 <calibration_vpt+0x164>)
   842e8:	68fb      	ldr	r3, [r7, #12]
   842ea:	009b      	lsls	r3, r3, #2
   842ec:	440b      	add	r3, r1
   842ee:	885b      	ldrh	r3, [r3, #2]
   842f0:	b21b      	sxth	r3, r3
   842f2:	1ac3      	subs	r3, r0, r3
   842f4:	fb92 f2f3 	sdiv	r2, r2, r3
   842f8:	4b2f      	ldr	r3, [pc, #188]	; (843b8 <calibration_vpt+0x168>)
   842fa:	4610      	mov	r0, r2
   842fc:	4798      	blx	r3
   842fe:	4603      	mov	r3, r0
   84300:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   84302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84306:	492b      	ldr	r1, [pc, #172]	; (843b4 <calibration_vpt+0x164>)
   84308:	68fb      	ldr	r3, [r7, #12]
   8430a:	009b      	lsls	r3, r3, #2
   8430c:	440b      	add	r3, r1
   8430e:	885b      	ldrh	r3, [r3, #2]
   84310:	b21b      	sxth	r3, r3
   84312:	1ad2      	subs	r2, r2, r3
   84314:	4b28      	ldr	r3, [pc, #160]	; (843b8 <calibration_vpt+0x168>)
   84316:	4610      	mov	r0, r2
   84318:	4798      	blx	r3
   8431a:	4602      	mov	r2, r0
   8431c:	4b28      	ldr	r3, [pc, #160]	; (843c0 <calibration_vpt+0x170>)
   8431e:	68b9      	ldr	r1, [r7, #8]
   84320:	4610      	mov	r0, r2
   84322:	4798      	blx	r3
   84324:	4603      	mov	r3, r0
   84326:	461a      	mov	r2, r3
   84328:	4b26      	ldr	r3, [pc, #152]	; (843c4 <calibration_vpt+0x174>)
   8432a:	4927      	ldr	r1, [pc, #156]	; (843c8 <calibration_vpt+0x178>)
   8432c:	4610      	mov	r0, r2
   8432e:	4798      	blx	r3
   84330:	4603      	mov	r3, r0
   84332:	461c      	mov	r4, r3
   84334:	4a1f      	ldr	r2, [pc, #124]	; (843b4 <calibration_vpt+0x164>)
   84336:	68fb      	ldr	r3, [r7, #12]
   84338:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8433c:	b21a      	sxth	r2, r3
   8433e:	4b1e      	ldr	r3, [pc, #120]	; (843b8 <calibration_vpt+0x168>)
   84340:	4610      	mov	r0, r2
   84342:	4798      	blx	r3
   84344:	4602      	mov	r2, r0
   84346:	4b21      	ldr	r3, [pc, #132]	; (843cc <calibration_vpt+0x17c>)
   84348:	4611      	mov	r1, r2
   8434a:	4620      	mov	r0, r4
   8434c:	4798      	blx	r3
   8434e:	4603      	mov	r3, r0
   84350:	461a      	mov	r2, r3
   84352:	4b1a      	ldr	r3, [pc, #104]	; (843bc <calibration_vpt+0x16c>)
   84354:	601a      	str	r2, [r3, #0]
			break;
   84356:	e029      	b.n	843ac <calibration_vpt+0x15c>
		}
		else if(sensordata < vpt2[0].millivolt)
   84358:	4b16      	ldr	r3, [pc, #88]	; (843b4 <calibration_vpt+0x164>)
   8435a:	885b      	ldrh	r3, [r3, #2]
   8435c:	b21b      	sxth	r3, r3
   8435e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84362:	429a      	cmp	r2, r3
   84364:	da09      	bge.n	8437a <calibration_vpt+0x12a>
		{
			pressure_final_apt = vpt2[0].pressure;
   84366:	4b13      	ldr	r3, [pc, #76]	; (843b4 <calibration_vpt+0x164>)
   84368:	881b      	ldrh	r3, [r3, #0]
   8436a:	b21a      	sxth	r2, r3
   8436c:	4b12      	ldr	r3, [pc, #72]	; (843b8 <calibration_vpt+0x168>)
   8436e:	4610      	mov	r0, r2
   84370:	4798      	blx	r3
   84372:	4602      	mov	r2, r0
   84374:	4b16      	ldr	r3, [pc, #88]	; (843d0 <calibration_vpt+0x180>)
   84376:	601a      	str	r2, [r3, #0]
   84378:	e011      	b.n	8439e <calibration_vpt+0x14e>
		}
		else  if(sensordata > vpt2[25].millivolt)
   8437a:	4b0e      	ldr	r3, [pc, #56]	; (843b4 <calibration_vpt+0x164>)
   8437c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   84380:	b21b      	sxth	r3, r3
   84382:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84386:	429a      	cmp	r2, r3
   84388:	dd09      	ble.n	8439e <calibration_vpt+0x14e>
		{
			pressure_final_apt = vpt2[25].pressure;
   8438a:	4b0a      	ldr	r3, [pc, #40]	; (843b4 <calibration_vpt+0x164>)
   8438c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   84390:	b21a      	sxth	r2, r3
   84392:	4b09      	ldr	r3, [pc, #36]	; (843b8 <calibration_vpt+0x168>)
   84394:	4610      	mov	r0, r2
   84396:	4798      	blx	r3
   84398:	4602      	mov	r2, r0
   8439a:	4b0d      	ldr	r3, [pc, #52]	; (843d0 <calibration_vpt+0x180>)
   8439c:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8439e:	68fb      	ldr	r3, [r7, #12]
   843a0:	3301      	adds	r3, #1
   843a2:	60fb      	str	r3, [r7, #12]
   843a4:	68fb      	ldr	r3, [r7, #12]
   843a6:	2b19      	cmp	r3, #25
   843a8:	f77f af5a 	ble.w	84260 <calibration_vpt+0x10>
		{
			pressure_final_apt = vpt2[25].pressure;
		}
	}
	
}
   843ac:	bf00      	nop
   843ae:	3714      	adds	r7, #20
   843b0:	46bd      	mov	sp, r7
   843b2:	bd90      	pop	{r4, r7, pc}
   843b4:	20070184 	.word	0x20070184
   843b8:	000a33a9 	.word	0x000a33a9
   843bc:	2007165c 	.word	0x2007165c
   843c0:	000a3451 	.word	0x000a3451
   843c4:	000a35b9 	.word	0x000a35b9
   843c8:	42c80000 	.word	0x42c80000
   843cc:	000a3241 	.word	0x000a3241
   843d0:	20072d64 	.word	0x20072d64

000843d4 <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   843d4:	b580      	push	{r7, lr}
   843d6:	b084      	sub	sp, #16
   843d8:	af00      	add	r7, sp, #0
   843da:	4603      	mov	r3, r0
   843dc:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   843de:	2300      	movs	r3, #0
   843e0:	60fb      	str	r3, [r7, #12]
   843e2:	e06f      	b.n	844c4 <calibration_ps1+0xf0>
	{
		if (sensordata == ps_1_2[i].millivolt)
   843e4:	4a3b      	ldr	r2, [pc, #236]	; (844d4 <calibration_ps1+0x100>)
   843e6:	68fb      	ldr	r3, [r7, #12]
   843e8:	009b      	lsls	r3, r3, #2
   843ea:	4413      	add	r3, r2
   843ec:	885b      	ldrh	r3, [r3, #2]
   843ee:	b21b      	sxth	r3, r3
   843f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843f4:	429a      	cmp	r2, r3
   843f6:	d10b      	bne.n	84410 <calibration_ps1+0x3c>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   843f8:	4a36      	ldr	r2, [pc, #216]	; (844d4 <calibration_ps1+0x100>)
   843fa:	68fb      	ldr	r3, [r7, #12]
   843fc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84400:	b21a      	sxth	r2, r3
   84402:	4b35      	ldr	r3, [pc, #212]	; (844d8 <calibration_ps1+0x104>)
   84404:	4610      	mov	r0, r2
   84406:	4798      	blx	r3
   84408:	4602      	mov	r2, r0
   8440a:	4b34      	ldr	r3, [pc, #208]	; (844dc <calibration_ps1+0x108>)
   8440c:	601a      	str	r2, [r3, #0]
			break;
   8440e:	e05c      	b.n	844ca <calibration_ps1+0xf6>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   84410:	4a30      	ldr	r2, [pc, #192]	; (844d4 <calibration_ps1+0x100>)
   84412:	68fb      	ldr	r3, [r7, #12]
   84414:	009b      	lsls	r3, r3, #2
   84416:	4413      	add	r3, r2
   84418:	885b      	ldrh	r3, [r3, #2]
   8441a:	b21b      	sxth	r3, r3
   8441c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84420:	429a      	cmp	r2, r3
   84422:	dd4c      	ble.n	844be <calibration_ps1+0xea>
   84424:	68fb      	ldr	r3, [r7, #12]
   84426:	3301      	adds	r3, #1
   84428:	4a2a      	ldr	r2, [pc, #168]	; (844d4 <calibration_ps1+0x100>)
   8442a:	009b      	lsls	r3, r3, #2
   8442c:	4413      	add	r3, r2
   8442e:	885b      	ldrh	r3, [r3, #2]
   84430:	b21b      	sxth	r3, r3
   84432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84436:	429a      	cmp	r2, r3
   84438:	da41      	bge.n	844be <calibration_ps1+0xea>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   8443a:	68fb      	ldr	r3, [r7, #12]
   8443c:	3301      	adds	r3, #1
   8443e:	4a25      	ldr	r2, [pc, #148]	; (844d4 <calibration_ps1+0x100>)
   84440:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84444:	b21b      	sxth	r3, r3
   84446:	4619      	mov	r1, r3
   84448:	4a22      	ldr	r2, [pc, #136]	; (844d4 <calibration_ps1+0x100>)
   8444a:	68fb      	ldr	r3, [r7, #12]
   8444c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84450:	b21b      	sxth	r3, r3
   84452:	1acb      	subs	r3, r1, r3
   84454:	2264      	movs	r2, #100	; 0x64
   84456:	fb02 f203 	mul.w	r2, r2, r3
   8445a:	68fb      	ldr	r3, [r7, #12]
   8445c:	3301      	adds	r3, #1
   8445e:	491d      	ldr	r1, [pc, #116]	; (844d4 <calibration_ps1+0x100>)
   84460:	009b      	lsls	r3, r3, #2
   84462:	440b      	add	r3, r1
   84464:	885b      	ldrh	r3, [r3, #2]
   84466:	b21b      	sxth	r3, r3
   84468:	4618      	mov	r0, r3
   8446a:	491a      	ldr	r1, [pc, #104]	; (844d4 <calibration_ps1+0x100>)
   8446c:	68fb      	ldr	r3, [r7, #12]
   8446e:	009b      	lsls	r3, r3, #2
   84470:	440b      	add	r3, r1
   84472:	885b      	ldrh	r3, [r3, #2]
   84474:	b21b      	sxth	r3, r3
   84476:	1ac3      	subs	r3, r0, r3
   84478:	fb92 f3f3 	sdiv	r3, r2, r3
   8447c:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   8447e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84482:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84486:	4813      	ldr	r0, [pc, #76]	; (844d4 <calibration_ps1+0x100>)
   84488:	68fb      	ldr	r3, [r7, #12]
   8448a:	009b      	lsls	r3, r3, #2
   8448c:	4403      	add	r3, r0
   8448e:	885b      	ldrh	r3, [r3, #2]
   84490:	b21b      	sxth	r3, r3
   84492:	1acb      	subs	r3, r1, r3
   84494:	fb03 f302 	mul.w	r3, r3, r2
   84498:	4a11      	ldr	r2, [pc, #68]	; (844e0 <calibration_ps1+0x10c>)
   8449a:	fb82 1203 	smull	r1, r2, r2, r3
   8449e:	1152      	asrs	r2, r2, #5
   844a0:	17db      	asrs	r3, r3, #31
   844a2:	1ad3      	subs	r3, r2, r3
   844a4:	490b      	ldr	r1, [pc, #44]	; (844d4 <calibration_ps1+0x100>)
   844a6:	68fa      	ldr	r2, [r7, #12]
   844a8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   844ac:	b212      	sxth	r2, r2
   844ae:	441a      	add	r2, r3
   844b0:	4b09      	ldr	r3, [pc, #36]	; (844d8 <calibration_ps1+0x104>)
   844b2:	4610      	mov	r0, r2
   844b4:	4798      	blx	r3
   844b6:	4602      	mov	r2, r0
   844b8:	4b08      	ldr	r3, [pc, #32]	; (844dc <calibration_ps1+0x108>)
   844ba:	601a      	str	r2, [r3, #0]
			break;
   844bc:	e005      	b.n	844ca <calibration_ps1+0xf6>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   844be:	68fb      	ldr	r3, [r7, #12]
   844c0:	3301      	adds	r3, #1
   844c2:	60fb      	str	r3, [r7, #12]
   844c4:	68fb      	ldr	r3, [r7, #12]
   844c6:	2b1a      	cmp	r3, #26
   844c8:	dd8c      	ble.n	843e4 <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   844ca:	bf00      	nop
   844cc:	3710      	adds	r7, #16
   844ce:	46bd      	mov	sp, r7
   844d0:	bd80      	pop	{r7, pc}
   844d2:	bf00      	nop
   844d4:	20070224 	.word	0x20070224
   844d8:	000a33a9 	.word	0x000a33a9
   844dc:	20071660 	.word	0x20071660
   844e0:	51eb851f 	.word	0x51eb851f

000844e4 <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   844e4:	b580      	push	{r7, lr}
   844e6:	b084      	sub	sp, #16
   844e8:	af00      	add	r7, sp, #0
   844ea:	4603      	mov	r3, r0
   844ec:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   844ee:	2300      	movs	r3, #0
   844f0:	60fb      	str	r3, [r7, #12]
   844f2:	e06f      	b.n	845d4 <calibration_ps2+0xf0>
	{
		if (sensordata == ps_2_2[i].millivolt)
   844f4:	4a3b      	ldr	r2, [pc, #236]	; (845e4 <calibration_ps2+0x100>)
   844f6:	68fb      	ldr	r3, [r7, #12]
   844f8:	009b      	lsls	r3, r3, #2
   844fa:	4413      	add	r3, r2
   844fc:	885b      	ldrh	r3, [r3, #2]
   844fe:	b21b      	sxth	r3, r3
   84500:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84504:	429a      	cmp	r2, r3
   84506:	d10b      	bne.n	84520 <calibration_ps2+0x3c>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   84508:	4a36      	ldr	r2, [pc, #216]	; (845e4 <calibration_ps2+0x100>)
   8450a:	68fb      	ldr	r3, [r7, #12]
   8450c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84510:	b21a      	sxth	r2, r3
   84512:	4b35      	ldr	r3, [pc, #212]	; (845e8 <calibration_ps2+0x104>)
   84514:	4610      	mov	r0, r2
   84516:	4798      	blx	r3
   84518:	4602      	mov	r2, r0
   8451a:	4b34      	ldr	r3, [pc, #208]	; (845ec <calibration_ps2+0x108>)
   8451c:	601a      	str	r2, [r3, #0]
			break;
   8451e:	e05c      	b.n	845da <calibration_ps2+0xf6>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   84520:	4a30      	ldr	r2, [pc, #192]	; (845e4 <calibration_ps2+0x100>)
   84522:	68fb      	ldr	r3, [r7, #12]
   84524:	009b      	lsls	r3, r3, #2
   84526:	4413      	add	r3, r2
   84528:	885b      	ldrh	r3, [r3, #2]
   8452a:	b21b      	sxth	r3, r3
   8452c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84530:	429a      	cmp	r2, r3
   84532:	dd4c      	ble.n	845ce <calibration_ps2+0xea>
   84534:	68fb      	ldr	r3, [r7, #12]
   84536:	3301      	adds	r3, #1
   84538:	4a2a      	ldr	r2, [pc, #168]	; (845e4 <calibration_ps2+0x100>)
   8453a:	009b      	lsls	r3, r3, #2
   8453c:	4413      	add	r3, r2
   8453e:	885b      	ldrh	r3, [r3, #2]
   84540:	b21b      	sxth	r3, r3
   84542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84546:	429a      	cmp	r2, r3
   84548:	da41      	bge.n	845ce <calibration_ps2+0xea>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   8454a:	68fb      	ldr	r3, [r7, #12]
   8454c:	3301      	adds	r3, #1
   8454e:	4a25      	ldr	r2, [pc, #148]	; (845e4 <calibration_ps2+0x100>)
   84550:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84554:	b21b      	sxth	r3, r3
   84556:	4619      	mov	r1, r3
   84558:	4a22      	ldr	r2, [pc, #136]	; (845e4 <calibration_ps2+0x100>)
   8455a:	68fb      	ldr	r3, [r7, #12]
   8455c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84560:	b21b      	sxth	r3, r3
   84562:	1acb      	subs	r3, r1, r3
   84564:	2264      	movs	r2, #100	; 0x64
   84566:	fb02 f203 	mul.w	r2, r2, r3
   8456a:	68fb      	ldr	r3, [r7, #12]
   8456c:	3301      	adds	r3, #1
   8456e:	491d      	ldr	r1, [pc, #116]	; (845e4 <calibration_ps2+0x100>)
   84570:	009b      	lsls	r3, r3, #2
   84572:	440b      	add	r3, r1
   84574:	885b      	ldrh	r3, [r3, #2]
   84576:	b21b      	sxth	r3, r3
   84578:	4618      	mov	r0, r3
   8457a:	491a      	ldr	r1, [pc, #104]	; (845e4 <calibration_ps2+0x100>)
   8457c:	68fb      	ldr	r3, [r7, #12]
   8457e:	009b      	lsls	r3, r3, #2
   84580:	440b      	add	r3, r1
   84582:	885b      	ldrh	r3, [r3, #2]
   84584:	b21b      	sxth	r3, r3
   84586:	1ac3      	subs	r3, r0, r3
   84588:	fb92 f3f3 	sdiv	r3, r2, r3
   8458c:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   8458e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84592:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84596:	4813      	ldr	r0, [pc, #76]	; (845e4 <calibration_ps2+0x100>)
   84598:	68fb      	ldr	r3, [r7, #12]
   8459a:	009b      	lsls	r3, r3, #2
   8459c:	4403      	add	r3, r0
   8459e:	885b      	ldrh	r3, [r3, #2]
   845a0:	b21b      	sxth	r3, r3
   845a2:	1acb      	subs	r3, r1, r3
   845a4:	fb03 f302 	mul.w	r3, r3, r2
   845a8:	4a11      	ldr	r2, [pc, #68]	; (845f0 <calibration_ps2+0x10c>)
   845aa:	fb82 1203 	smull	r1, r2, r2, r3
   845ae:	1152      	asrs	r2, r2, #5
   845b0:	17db      	asrs	r3, r3, #31
   845b2:	1ad3      	subs	r3, r2, r3
   845b4:	490b      	ldr	r1, [pc, #44]	; (845e4 <calibration_ps2+0x100>)
   845b6:	68fa      	ldr	r2, [r7, #12]
   845b8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   845bc:	b212      	sxth	r2, r2
   845be:	441a      	add	r2, r3
   845c0:	4b09      	ldr	r3, [pc, #36]	; (845e8 <calibration_ps2+0x104>)
   845c2:	4610      	mov	r0, r2
   845c4:	4798      	blx	r3
   845c6:	4602      	mov	r2, r0
   845c8:	4b08      	ldr	r3, [pc, #32]	; (845ec <calibration_ps2+0x108>)
   845ca:	601a      	str	r2, [r3, #0]
			break;
   845cc:	e005      	b.n	845da <calibration_ps2+0xf6>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   845ce:	68fb      	ldr	r3, [r7, #12]
   845d0:	3301      	adds	r3, #1
   845d2:	60fb      	str	r3, [r7, #12]
   845d4:	68fb      	ldr	r3, [r7, #12]
   845d6:	2b1a      	cmp	r3, #26
   845d8:	dd8c      	ble.n	844f4 <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   845da:	bf00      	nop
   845dc:	3710      	adds	r7, #16
   845de:	46bd      	mov	sp, r7
   845e0:	bd80      	pop	{r7, pc}
   845e2:	bf00      	nop
   845e4:	20070290 	.word	0x20070290
   845e8:	000a33a9 	.word	0x000a33a9
   845ec:	20071664 	.word	0x20071664
   845f0:	51eb851f 	.word	0x51eb851f

000845f4 <calibration_ps3>:
void calibration_ps3(int16_t sensordata)
{
   845f4:	b580      	push	{r7, lr}
   845f6:	b084      	sub	sp, #16
   845f8:	af00      	add	r7, sp, #0
   845fa:	4603      	mov	r3, r0
   845fc:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   845fe:	2300      	movs	r3, #0
   84600:	60fb      	str	r3, [r7, #12]
   84602:	e06f      	b.n	846e4 <calibration_ps3+0xf0>
	{
		if (sensordata == ps_3_2[i].millivolt)
   84604:	4a3b      	ldr	r2, [pc, #236]	; (846f4 <calibration_ps3+0x100>)
   84606:	68fb      	ldr	r3, [r7, #12]
   84608:	009b      	lsls	r3, r3, #2
   8460a:	4413      	add	r3, r2
   8460c:	885b      	ldrh	r3, [r3, #2]
   8460e:	b21b      	sxth	r3, r3
   84610:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84614:	429a      	cmp	r2, r3
   84616:	d10b      	bne.n	84630 <calibration_ps3+0x3c>
		{
			pressure_final_ps3=ps_3_2[i].pressure;
   84618:	4a36      	ldr	r2, [pc, #216]	; (846f4 <calibration_ps3+0x100>)
   8461a:	68fb      	ldr	r3, [r7, #12]
   8461c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84620:	b21a      	sxth	r2, r3
   84622:	4b35      	ldr	r3, [pc, #212]	; (846f8 <calibration_ps3+0x104>)
   84624:	4610      	mov	r0, r2
   84626:	4798      	blx	r3
   84628:	4602      	mov	r2, r0
   8462a:	4b34      	ldr	r3, [pc, #208]	; (846fc <calibration_ps3+0x108>)
   8462c:	601a      	str	r2, [r3, #0]
			break;
   8462e:	e05c      	b.n	846ea <calibration_ps3+0xf6>
		}
		else if ((sensordata > ps_3_2[i].millivolt) && (sensordata < ps_3_2[i+1].millivolt))
   84630:	4a30      	ldr	r2, [pc, #192]	; (846f4 <calibration_ps3+0x100>)
   84632:	68fb      	ldr	r3, [r7, #12]
   84634:	009b      	lsls	r3, r3, #2
   84636:	4413      	add	r3, r2
   84638:	885b      	ldrh	r3, [r3, #2]
   8463a:	b21b      	sxth	r3, r3
   8463c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84640:	429a      	cmp	r2, r3
   84642:	dd4c      	ble.n	846de <calibration_ps3+0xea>
   84644:	68fb      	ldr	r3, [r7, #12]
   84646:	3301      	adds	r3, #1
   84648:	4a2a      	ldr	r2, [pc, #168]	; (846f4 <calibration_ps3+0x100>)
   8464a:	009b      	lsls	r3, r3, #2
   8464c:	4413      	add	r3, r2
   8464e:	885b      	ldrh	r3, [r3, #2]
   84650:	b21b      	sxth	r3, r3
   84652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84656:	429a      	cmp	r2, r3
   84658:	da41      	bge.n	846de <calibration_ps3+0xea>
		{
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
   8465a:	68fb      	ldr	r3, [r7, #12]
   8465c:	3301      	adds	r3, #1
   8465e:	4a25      	ldr	r2, [pc, #148]	; (846f4 <calibration_ps3+0x100>)
   84660:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84664:	b21b      	sxth	r3, r3
   84666:	4619      	mov	r1, r3
   84668:	4a22      	ldr	r2, [pc, #136]	; (846f4 <calibration_ps3+0x100>)
   8466a:	68fb      	ldr	r3, [r7, #12]
   8466c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84670:	b21b      	sxth	r3, r3
   84672:	1acb      	subs	r3, r1, r3
   84674:	2264      	movs	r2, #100	; 0x64
   84676:	fb02 f203 	mul.w	r2, r2, r3
   8467a:	68fb      	ldr	r3, [r7, #12]
   8467c:	3301      	adds	r3, #1
   8467e:	491d      	ldr	r1, [pc, #116]	; (846f4 <calibration_ps3+0x100>)
   84680:	009b      	lsls	r3, r3, #2
   84682:	440b      	add	r3, r1
   84684:	885b      	ldrh	r3, [r3, #2]
   84686:	b21b      	sxth	r3, r3
   84688:	4618      	mov	r0, r3
   8468a:	491a      	ldr	r1, [pc, #104]	; (846f4 <calibration_ps3+0x100>)
   8468c:	68fb      	ldr	r3, [r7, #12]
   8468e:	009b      	lsls	r3, r3, #2
   84690:	440b      	add	r3, r1
   84692:	885b      	ldrh	r3, [r3, #2]
   84694:	b21b      	sxth	r3, r3
   84696:	1ac3      	subs	r3, r0, r3
   84698:	fb92 f3f3 	sdiv	r3, r2, r3
   8469c:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
   8469e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   846a2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   846a6:	4813      	ldr	r0, [pc, #76]	; (846f4 <calibration_ps3+0x100>)
   846a8:	68fb      	ldr	r3, [r7, #12]
   846aa:	009b      	lsls	r3, r3, #2
   846ac:	4403      	add	r3, r0
   846ae:	885b      	ldrh	r3, [r3, #2]
   846b0:	b21b      	sxth	r3, r3
   846b2:	1acb      	subs	r3, r1, r3
   846b4:	fb03 f302 	mul.w	r3, r3, r2
   846b8:	4a11      	ldr	r2, [pc, #68]	; (84700 <calibration_ps3+0x10c>)
   846ba:	fb82 1203 	smull	r1, r2, r2, r3
   846be:	1152      	asrs	r2, r2, #5
   846c0:	17db      	asrs	r3, r3, #31
   846c2:	1ad3      	subs	r3, r2, r3
   846c4:	490f      	ldr	r1, [pc, #60]	; (84704 <calibration_ps3+0x110>)
   846c6:	68fa      	ldr	r2, [r7, #12]
   846c8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   846cc:	b212      	sxth	r2, r2
   846ce:	441a      	add	r2, r3
   846d0:	4b09      	ldr	r3, [pc, #36]	; (846f8 <calibration_ps3+0x104>)
   846d2:	4610      	mov	r0, r2
   846d4:	4798      	blx	r3
   846d6:	4602      	mov	r2, r0
   846d8:	4b08      	ldr	r3, [pc, #32]	; (846fc <calibration_ps3+0x108>)
   846da:	601a      	str	r2, [r3, #0]
			break;
   846dc:	e005      	b.n	846ea <calibration_ps3+0xf6>
void calibration_ps3(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   846de:	68fb      	ldr	r3, [r7, #12]
   846e0:	3301      	adds	r3, #1
   846e2:	60fb      	str	r3, [r7, #12]
   846e4:	68fb      	ldr	r3, [r7, #12]
   846e6:	2b31      	cmp	r3, #49	; 0x31
   846e8:	dd8c      	ble.n	84604 <calibration_ps3+0x10>
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
			break;
		}
	}
}
   846ea:	bf00      	nop
   846ec:	3710      	adds	r7, #16
   846ee:	46bd      	mov	sp, r7
   846f0:	bd80      	pop	{r7, pc}
   846f2:	bf00      	nop
   846f4:	200702fc 	.word	0x200702fc
   846f8:	000a33a9 	.word	0x000a33a9
   846fc:	20071668 	.word	0x20071668
   84700:	51eb851f 	.word	0x51eb851f
   84704:	20071e78 	.word	0x20071e78

00084708 <calibration_cond>:

void calibration_cond(float sensordata)
{
   84708:	b590      	push	{r4, r7, lr}
   8470a:	b087      	sub	sp, #28
   8470c:	af00      	add	r7, sp, #0
   8470e:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   84710:	f04f 0300 	mov.w	r3, #0
   84714:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   84716:	687b      	ldr	r3, [r7, #4]
   84718:	613b      	str	r3, [r7, #16]
	float slope=0;
   8471a:	f04f 0300 	mov.w	r3, #0
   8471e:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84720:	2300      	movs	r3, #0
   84722:	617b      	str	r3, [r7, #20]
   84724:	e08f      	b.n	84846 <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   84726:	4a4c      	ldr	r2, [pc, #304]	; (84858 <calibration_cond+0x150>)
   84728:	697b      	ldr	r3, [r7, #20]
   8472a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8472e:	b29b      	uxth	r3, r3
   84730:	461a      	mov	r2, r3
   84732:	4b4a      	ldr	r3, [pc, #296]	; (8485c <calibration_cond+0x154>)
   84734:	4610      	mov	r0, r2
   84736:	4798      	blx	r3
   84738:	4602      	mov	r2, r0
   8473a:	4b49      	ldr	r3, [pc, #292]	; (84860 <calibration_cond+0x158>)
   8473c:	6939      	ldr	r1, [r7, #16]
   8473e:	4610      	mov	r0, r2
   84740:	4798      	blx	r3
   84742:	4603      	mov	r3, r0
   84744:	2b00      	cmp	r3, #0
   84746:	d00c      	beq.n	84762 <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   84748:	4a43      	ldr	r2, [pc, #268]	; (84858 <calibration_cond+0x150>)
   8474a:	697b      	ldr	r3, [r7, #20]
   8474c:	009b      	lsls	r3, r3, #2
   8474e:	4413      	add	r3, r2
   84750:	885b      	ldrh	r3, [r3, #2]
   84752:	b29a      	uxth	r2, r3
   84754:	4b43      	ldr	r3, [pc, #268]	; (84864 <calibration_cond+0x15c>)
   84756:	4610      	mov	r0, r2
   84758:	4798      	blx	r3
   8475a:	4602      	mov	r2, r0
   8475c:	4b42      	ldr	r3, [pc, #264]	; (84868 <calibration_cond+0x160>)
   8475e:	601a      	str	r2, [r3, #0]
   84760:	e06e      	b.n	84840 <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   84762:	4a3d      	ldr	r2, [pc, #244]	; (84858 <calibration_cond+0x150>)
   84764:	697b      	ldr	r3, [r7, #20]
   84766:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8476a:	b29b      	uxth	r3, r3
   8476c:	461a      	mov	r2, r3
   8476e:	4b3b      	ldr	r3, [pc, #236]	; (8485c <calibration_cond+0x154>)
   84770:	4610      	mov	r0, r2
   84772:	4798      	blx	r3
   84774:	4602      	mov	r2, r0
   84776:	4b3d      	ldr	r3, [pc, #244]	; (8486c <calibration_cond+0x164>)
   84778:	6939      	ldr	r1, [r7, #16]
   8477a:	4610      	mov	r0, r2
   8477c:	4798      	blx	r3
   8477e:	4603      	mov	r3, r0
   84780:	2b00      	cmp	r3, #0
   84782:	d05d      	beq.n	84840 <calibration_cond+0x138>
   84784:	697b      	ldr	r3, [r7, #20]
   84786:	3301      	adds	r3, #1
   84788:	4a33      	ldr	r2, [pc, #204]	; (84858 <calibration_cond+0x150>)
   8478a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8478e:	b29b      	uxth	r3, r3
   84790:	461a      	mov	r2, r3
   84792:	4b32      	ldr	r3, [pc, #200]	; (8485c <calibration_cond+0x154>)
   84794:	4610      	mov	r0, r2
   84796:	4798      	blx	r3
   84798:	4602      	mov	r2, r0
   8479a:	4b35      	ldr	r3, [pc, #212]	; (84870 <calibration_cond+0x168>)
   8479c:	6939      	ldr	r1, [r7, #16]
   8479e:	4610      	mov	r0, r2
   847a0:	4798      	blx	r3
   847a2:	4603      	mov	r3, r0
   847a4:	2b00      	cmp	r3, #0
   847a6:	d04b      	beq.n	84840 <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   847a8:	697b      	ldr	r3, [r7, #20]
   847aa:	3301      	adds	r3, #1
   847ac:	4a2a      	ldr	r2, [pc, #168]	; (84858 <calibration_cond+0x150>)
   847ae:	009b      	lsls	r3, r3, #2
   847b0:	4413      	add	r3, r2
   847b2:	885b      	ldrh	r3, [r3, #2]
   847b4:	b29b      	uxth	r3, r3
   847b6:	4619      	mov	r1, r3
   847b8:	4a27      	ldr	r2, [pc, #156]	; (84858 <calibration_cond+0x150>)
   847ba:	697b      	ldr	r3, [r7, #20]
   847bc:	009b      	lsls	r3, r3, #2
   847be:	4413      	add	r3, r2
   847c0:	885b      	ldrh	r3, [r3, #2]
   847c2:	b29b      	uxth	r3, r3
   847c4:	1aca      	subs	r2, r1, r3
   847c6:	697b      	ldr	r3, [r7, #20]
   847c8:	3301      	adds	r3, #1
   847ca:	4923      	ldr	r1, [pc, #140]	; (84858 <calibration_cond+0x150>)
   847cc:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   847d0:	b29b      	uxth	r3, r3
   847d2:	4618      	mov	r0, r3
   847d4:	4920      	ldr	r1, [pc, #128]	; (84858 <calibration_cond+0x150>)
   847d6:	697b      	ldr	r3, [r7, #20]
   847d8:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   847dc:	b29b      	uxth	r3, r3
   847de:	1ac3      	subs	r3, r0, r3
   847e0:	fb92 f2f3 	sdiv	r2, r2, r3
   847e4:	4b1d      	ldr	r3, [pc, #116]	; (8485c <calibration_cond+0x154>)
   847e6:	4610      	mov	r0, r2
   847e8:	4798      	blx	r3
   847ea:	4603      	mov	r3, r0
   847ec:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   847ee:	4a1a      	ldr	r2, [pc, #104]	; (84858 <calibration_cond+0x150>)
   847f0:	697b      	ldr	r3, [r7, #20]
   847f2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   847f6:	b29b      	uxth	r3, r3
   847f8:	461a      	mov	r2, r3
   847fa:	4b18      	ldr	r3, [pc, #96]	; (8485c <calibration_cond+0x154>)
   847fc:	4610      	mov	r0, r2
   847fe:	4798      	blx	r3
   84800:	4602      	mov	r2, r0
   84802:	4b1c      	ldr	r3, [pc, #112]	; (84874 <calibration_cond+0x16c>)
   84804:	4611      	mov	r1, r2
   84806:	6938      	ldr	r0, [r7, #16]
   84808:	4798      	blx	r3
   8480a:	4603      	mov	r3, r0
   8480c:	461a      	mov	r2, r3
   8480e:	4b1a      	ldr	r3, [pc, #104]	; (84878 <calibration_cond+0x170>)
   84810:	68f9      	ldr	r1, [r7, #12]
   84812:	4610      	mov	r0, r2
   84814:	4798      	blx	r3
   84816:	4603      	mov	r3, r0
   84818:	461c      	mov	r4, r3
   8481a:	4a0f      	ldr	r2, [pc, #60]	; (84858 <calibration_cond+0x150>)
   8481c:	697b      	ldr	r3, [r7, #20]
   8481e:	009b      	lsls	r3, r3, #2
   84820:	4413      	add	r3, r2
   84822:	885b      	ldrh	r3, [r3, #2]
   84824:	b29b      	uxth	r3, r3
   84826:	461a      	mov	r2, r3
   84828:	4b0c      	ldr	r3, [pc, #48]	; (8485c <calibration_cond+0x154>)
   8482a:	4610      	mov	r0, r2
   8482c:	4798      	blx	r3
   8482e:	4602      	mov	r2, r0
   84830:	4b12      	ldr	r3, [pc, #72]	; (8487c <calibration_cond+0x174>)
   84832:	4611      	mov	r1, r2
   84834:	4620      	mov	r0, r4
   84836:	4798      	blx	r3
   84838:	4603      	mov	r3, r0
   8483a:	461a      	mov	r2, r3
   8483c:	4b0a      	ldr	r3, [pc, #40]	; (84868 <calibration_cond+0x160>)
   8483e:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84840:	697b      	ldr	r3, [r7, #20]
   84842:	3301      	adds	r3, #1
   84844:	617b      	str	r3, [r7, #20]
   84846:	697b      	ldr	r3, [r7, #20]
   84848:	2b31      	cmp	r3, #49	; 0x31
   8484a:	f77f af6c 	ble.w	84726 <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   8484e:	bf00      	nop
   84850:	371c      	adds	r7, #28
   84852:	46bd      	mov	sp, r7
   84854:	bd90      	pop	{r4, r7, pc}
   84856:	bf00      	nop
   84858:	20072008 	.word	0x20072008
   8485c:	000a33a9 	.word	0x000a33a9
   84860:	000a3779 	.word	0x000a3779
   84864:	000a33a1 	.word	0x000a33a1
   84868:	20071674 	.word	0x20071674
   8486c:	000a378d 	.word	0x000a378d
   84870:	000a37c9 	.word	0x000a37c9
   84874:	000a323d 	.word	0x000a323d
   84878:	000a3451 	.word	0x000a3451
   8487c:	000a3241 	.word	0x000a3241

00084880 <calibrate_uf>:


void calibrate_uf(int16_t ufrate){
   84880:	b590      	push	{r4, r7, lr}
   84882:	b087      	sub	sp, #28
   84884:	af00      	add	r7, sp, #0
   84886:	4603      	mov	r3, r0
   84888:	80fb      	strh	r3, [r7, #6]
	
	Cl_Uint16Type i;
	float dummy_var = ufrate;
   8488a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8488e:	4b51      	ldr	r3, [pc, #324]	; (849d4 <calibrate_uf+0x154>)
   84890:	4610      	mov	r0, r2
   84892:	4798      	blx	r3
   84894:	4603      	mov	r3, r0
   84896:	613b      	str	r3, [r7, #16]
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   84898:	2300      	movs	r3, #0
   8489a:	82fb      	strh	r3, [r7, #22]
   8489c:	e092      	b.n	849c4 <calibrate_uf+0x144>
		{
			if (dummy_var == ufp[i].rate)
   8489e:	8afb      	ldrh	r3, [r7, #22]
   848a0:	4a4d      	ldr	r2, [pc, #308]	; (849d8 <calibrate_uf+0x158>)
   848a2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   848a6:	b29b      	uxth	r3, r3
   848a8:	461a      	mov	r2, r3
   848aa:	4b4a      	ldr	r3, [pc, #296]	; (849d4 <calibrate_uf+0x154>)
   848ac:	4610      	mov	r0, r2
   848ae:	4798      	blx	r3
   848b0:	4602      	mov	r2, r0
   848b2:	4b4a      	ldr	r3, [pc, #296]	; (849dc <calibrate_uf+0x15c>)
   848b4:	6939      	ldr	r1, [r7, #16]
   848b6:	4610      	mov	r0, r2
   848b8:	4798      	blx	r3
   848ba:	4603      	mov	r3, r0
   848bc:	2b00      	cmp	r3, #0
   848be:	d00a      	beq.n	848d6 <calibrate_uf+0x56>
			{
				dummy_var1=ufp[i].speed;
   848c0:	8afb      	ldrh	r3, [r7, #22]
   848c2:	4a45      	ldr	r2, [pc, #276]	; (849d8 <calibrate_uf+0x158>)
   848c4:	009b      	lsls	r3, r3, #2
   848c6:	4413      	add	r3, r2
   848c8:	885b      	ldrh	r3, [r3, #2]
   848ca:	b29b      	uxth	r3, r3
   848cc:	60bb      	str	r3, [r7, #8]
				uf_final=dummy_var1;
   848ce:	4a44      	ldr	r2, [pc, #272]	; (849e0 <calibrate_uf+0x160>)
   848d0:	68bb      	ldr	r3, [r7, #8]
   848d2:	6013      	str	r3, [r2, #0]
				break;
   848d4:	e07a      	b.n	849cc <calibrate_uf+0x14c>
			}
			else if ((dummy_var > ufp[i].rate) && (dummy_var < ufp[i+1].rate))
   848d6:	8afb      	ldrh	r3, [r7, #22]
   848d8:	4a3f      	ldr	r2, [pc, #252]	; (849d8 <calibrate_uf+0x158>)
   848da:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   848de:	b29b      	uxth	r3, r3
   848e0:	461a      	mov	r2, r3
   848e2:	4b3c      	ldr	r3, [pc, #240]	; (849d4 <calibrate_uf+0x154>)
   848e4:	4610      	mov	r0, r2
   848e6:	4798      	blx	r3
   848e8:	4602      	mov	r2, r0
   848ea:	4b3e      	ldr	r3, [pc, #248]	; (849e4 <calibrate_uf+0x164>)
   848ec:	6939      	ldr	r1, [r7, #16]
   848ee:	4610      	mov	r0, r2
   848f0:	4798      	blx	r3
   848f2:	4603      	mov	r3, r0
   848f4:	2b00      	cmp	r3, #0
   848f6:	d062      	beq.n	849be <calibrate_uf+0x13e>
   848f8:	8afb      	ldrh	r3, [r7, #22]
   848fa:	3301      	adds	r3, #1
   848fc:	4a36      	ldr	r2, [pc, #216]	; (849d8 <calibrate_uf+0x158>)
   848fe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84902:	b29b      	uxth	r3, r3
   84904:	461a      	mov	r2, r3
   84906:	4b33      	ldr	r3, [pc, #204]	; (849d4 <calibrate_uf+0x154>)
   84908:	4610      	mov	r0, r2
   8490a:	4798      	blx	r3
   8490c:	4602      	mov	r2, r0
   8490e:	4b36      	ldr	r3, [pc, #216]	; (849e8 <calibrate_uf+0x168>)
   84910:	6939      	ldr	r1, [r7, #16]
   84912:	4610      	mov	r0, r2
   84914:	4798      	blx	r3
   84916:	4603      	mov	r3, r0
   84918:	2b00      	cmp	r3, #0
   8491a:	d050      	beq.n	849be <calibrate_uf+0x13e>
			{
				//temprature_final_value =dummy_var;
				slope = (((ufp[i+1].speed - ufp[i].speed))/(ufp[i+1].rate - ufp[i].rate));
   8491c:	8afb      	ldrh	r3, [r7, #22]
   8491e:	3301      	adds	r3, #1
   84920:	4a2d      	ldr	r2, [pc, #180]	; (849d8 <calibrate_uf+0x158>)
   84922:	009b      	lsls	r3, r3, #2
   84924:	4413      	add	r3, r2
   84926:	885b      	ldrh	r3, [r3, #2]
   84928:	b29b      	uxth	r3, r3
   8492a:	4619      	mov	r1, r3
   8492c:	8afb      	ldrh	r3, [r7, #22]
   8492e:	4a2a      	ldr	r2, [pc, #168]	; (849d8 <calibrate_uf+0x158>)
   84930:	009b      	lsls	r3, r3, #2
   84932:	4413      	add	r3, r2
   84934:	885b      	ldrh	r3, [r3, #2]
   84936:	b29b      	uxth	r3, r3
   84938:	1aca      	subs	r2, r1, r3
   8493a:	8afb      	ldrh	r3, [r7, #22]
   8493c:	3301      	adds	r3, #1
   8493e:	4926      	ldr	r1, [pc, #152]	; (849d8 <calibrate_uf+0x158>)
   84940:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84944:	b29b      	uxth	r3, r3
   84946:	4618      	mov	r0, r3
   84948:	8afb      	ldrh	r3, [r7, #22]
   8494a:	4923      	ldr	r1, [pc, #140]	; (849d8 <calibrate_uf+0x158>)
   8494c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84950:	b29b      	uxth	r3, r3
   84952:	1ac3      	subs	r3, r0, r3
   84954:	fb92 f2f3 	sdiv	r2, r2, r3
   84958:	4b1e      	ldr	r3, [pc, #120]	; (849d4 <calibrate_uf+0x154>)
   8495a:	4610      	mov	r0, r2
   8495c:	4798      	blx	r3
   8495e:	4603      	mov	r3, r0
   84960:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				uf_final = ((slope*(dummy_var - ufp[i].rate)) + ufp[i].speed);
   84962:	8afb      	ldrh	r3, [r7, #22]
   84964:	4a1c      	ldr	r2, [pc, #112]	; (849d8 <calibrate_uf+0x158>)
   84966:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8496a:	b29b      	uxth	r3, r3
   8496c:	461a      	mov	r2, r3
   8496e:	4b19      	ldr	r3, [pc, #100]	; (849d4 <calibrate_uf+0x154>)
   84970:	4610      	mov	r0, r2
   84972:	4798      	blx	r3
   84974:	4602      	mov	r2, r0
   84976:	4b1d      	ldr	r3, [pc, #116]	; (849ec <calibrate_uf+0x16c>)
   84978:	4611      	mov	r1, r2
   8497a:	6938      	ldr	r0, [r7, #16]
   8497c:	4798      	blx	r3
   8497e:	4603      	mov	r3, r0
   84980:	461a      	mov	r2, r3
   84982:	4b1b      	ldr	r3, [pc, #108]	; (849f0 <calibrate_uf+0x170>)
   84984:	68f9      	ldr	r1, [r7, #12]
   84986:	4610      	mov	r0, r2
   84988:	4798      	blx	r3
   8498a:	4603      	mov	r3, r0
   8498c:	461c      	mov	r4, r3
   8498e:	8afb      	ldrh	r3, [r7, #22]
   84990:	4a11      	ldr	r2, [pc, #68]	; (849d8 <calibrate_uf+0x158>)
   84992:	009b      	lsls	r3, r3, #2
   84994:	4413      	add	r3, r2
   84996:	885b      	ldrh	r3, [r3, #2]
   84998:	b29b      	uxth	r3, r3
   8499a:	461a      	mov	r2, r3
   8499c:	4b0d      	ldr	r3, [pc, #52]	; (849d4 <calibrate_uf+0x154>)
   8499e:	4610      	mov	r0, r2
   849a0:	4798      	blx	r3
   849a2:	4602      	mov	r2, r0
   849a4:	4b13      	ldr	r3, [pc, #76]	; (849f4 <calibrate_uf+0x174>)
   849a6:	4611      	mov	r1, r2
   849a8:	4620      	mov	r0, r4
   849aa:	4798      	blx	r3
   849ac:	4603      	mov	r3, r0
   849ae:	461a      	mov	r2, r3
   849b0:	4b11      	ldr	r3, [pc, #68]	; (849f8 <calibrate_uf+0x178>)
   849b2:	4610      	mov	r0, r2
   849b4:	4798      	blx	r3
   849b6:	4602      	mov	r2, r0
   849b8:	4b09      	ldr	r3, [pc, #36]	; (849e0 <calibrate_uf+0x160>)
   849ba:	601a      	str	r2, [r3, #0]
				//temprature_final_value_1 =temprature_final_value_1/100;
				//temprature_final_value =1500;
				break;
   849bc:	e006      	b.n	849cc <calibrate_uf+0x14c>
	float dummy_var = ufrate;
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   849be:	8afb      	ldrh	r3, [r7, #22]
   849c0:	3301      	adds	r3, #1
   849c2:	82fb      	strh	r3, [r7, #22]
   849c4:	8afb      	ldrh	r3, [r7, #22]
   849c6:	2b0d      	cmp	r3, #13
   849c8:	f67f af69 	bls.w	8489e <calibrate_uf+0x1e>
			}*/
			
		}
	
	
}
   849cc:	bf00      	nop
   849ce:	371c      	adds	r7, #28
   849d0:	46bd      	mov	sp, r7
   849d2:	bd90      	pop	{r4, r7, pc}
   849d4:	000a33a9 	.word	0x000a33a9
   849d8:	200701ec 	.word	0x200701ec
   849dc:	000a3779 	.word	0x000a3779
   849e0:	20071678 	.word	0x20071678
   849e4:	000a378d 	.word	0x000a378d
   849e8:	000a37c9 	.word	0x000a37c9
   849ec:	000a323d 	.word	0x000a323d
   849f0:	000a3451 	.word	0x000a3451
   849f4:	000a3241 	.word	0x000a3241
   849f8:	000a3829 	.word	0x000a3829

000849fc <cl_datamanager_init>:
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;


Cl_ReturnCodeType cl_datamanager_init()
{
   849fc:	b480      	push	{r7}
   849fe:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   84a00:	4b1e      	ldr	r3, [pc, #120]	; (84a7c <cl_datamanager_init+0x80>)
   84a02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   84a06:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   84a08:	4b1c      	ldr	r3, [pc, #112]	; (84a7c <cl_datamanager_init+0x80>)
   84a0a:	f44f 72b9 	mov.w	r2, #370	; 0x172
   84a0e:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 138;
   84a10:	4b1a      	ldr	r3, [pc, #104]	; (84a7c <cl_datamanager_init+0x80>)
   84a12:	228a      	movs	r2, #138	; 0x8a
   84a14:	62da      	str	r2, [r3, #44]	; 0x2c
	
	Treatdata[ID_tempulimit] = 375;
   84a16:	4b19      	ldr	r3, [pc, #100]	; (84a7c <cl_datamanager_init+0x80>)
   84a18:	f240 1277 	movw	r2, #375	; 0x177
   84a1c:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   84a1e:	4b17      	ldr	r3, [pc, #92]	; (84a7c <cl_datamanager_init+0x80>)
   84a20:	f240 126d 	movw	r2, #365	; 0x16d
   84a24:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 139;
   84a26:	4b15      	ldr	r3, [pc, #84]	; (84a7c <cl_datamanager_init+0x80>)
   84a28:	228b      	movs	r2, #139	; 0x8b
   84a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condulimit] = 137;
   84a2e:	4b13      	ldr	r3, [pc, #76]	; (84a7c <cl_datamanager_init+0x80>)
   84a30:	2289      	movs	r2, #137	; 0x89
   84a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_aptulimit] =  400;
   84a36:	4b11      	ldr	r3, [pc, #68]	; (84a7c <cl_datamanager_init+0x80>)
   84a38:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 0;
   84a40:	4b0e      	ldr	r3, [pc, #56]	; (84a7c <cl_datamanager_init+0x80>)
   84a42:	2200      	movs	r2, #0
   84a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 400;
   84a48:	4b0c      	ldr	r3, [pc, #48]	; (84a7c <cl_datamanager_init+0x80>)
   84a4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a4e:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 0;
   84a50:	4b0a      	ldr	r3, [pc, #40]	; (84a7c <cl_datamanager_init+0x80>)
   84a52:	2200      	movs	r2, #0
   84a54:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   84a56:	4b09      	ldr	r3, [pc, #36]	; (84a7c <cl_datamanager_init+0x80>)
   84a58:	2232      	movs	r2, #50	; 0x32
   84a5a:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   84a5c:	4b07      	ldr	r3, [pc, #28]	; (84a7c <cl_datamanager_init+0x80>)
   84a5e:	2200      	movs	r2, #0
   84a60:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 4800; // added default to check uf func
   84a62:	4b06      	ldr	r3, [pc, #24]	; (84a7c <cl_datamanager_init+0x80>)
   84a64:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   84a68:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   84a6a:	4b04      	ldr	r3, [pc, #16]	; (84a7c <cl_datamanager_init+0x80>)
   84a6c:	22f0      	movs	r2, #240	; 0xf0
   84a6e:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   84a70:	2300      	movs	r3, #0
	
}
   84a72:	4618      	mov	r0, r3
   84a74:	46bd      	mov	sp, r7
   84a76:	bc80      	pop	{r7}
   84a78:	4770      	bx	lr
   84a7a:	bf00      	nop
   84a7c:	20073194 	.word	0x20073194

00084a80 <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   84a80:	b580      	push	{r7, lr}
   84a82:	b092      	sub	sp, #72	; 0x48
   84a84:	af00      	add	r7, sp, #0
   84a86:	4603      	mov	r3, r0
   84a88:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84a8a:	2304      	movs	r3, #4
   84a8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84a90:	234d      	movs	r3, #77	; 0x4d
   84a92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84a96:	f107 030c 	add.w	r3, r7, #12
   84a9a:	2232      	movs	r2, #50	; 0x32
   84a9c:	2100      	movs	r1, #0
   84a9e:	4618      	mov	r0, r3
   84aa0:	4bbc      	ldr	r3, [pc, #752]	; (84d94 <cl_datamamanager+0x314>)
   84aa2:	4798      	blx	r3
	
	switch(cl_data_event)
   84aa4:	79fb      	ldrb	r3, [r7, #7]
   84aa6:	2b0d      	cmp	r3, #13
   84aa8:	f000 8361 	beq.w	8516e <cl_datamamanager+0x6ee>
   84aac:	2b0e      	cmp	r3, #14
   84aae:	d001      	beq.n	84ab4 <cl_datamamanager+0x34>
							
		}
		break;
		
		default:
		break;
   84ab0:	f000 bc54 	b.w	8535c <cl_datamamanager+0x8dc>
	Cl_Uint8Type dataarray[50] = {};
	
	switch(cl_data_event)
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84ab4:	4bb8      	ldr	r3, [pc, #736]	; (84d98 <cl_datamamanager+0x318>)
   84ab6:	7e1b      	ldrb	r3, [r3, #24]
   84ab8:	2b00      	cmp	r3, #0
   84aba:	f000 844c 	beq.w	85356 <cl_datamamanager+0x8d6>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   84abe:	4bb6      	ldr	r3, [pc, #728]	; (84d98 <cl_datamamanager+0x318>)
   84ac0:	791b      	ldrb	r3, [r3, #4]
   84ac2:	3b01      	subs	r3, #1
   84ac4:	2b20      	cmp	r3, #32
   84ac6:	f200 834e 	bhi.w	85166 <cl_datamamanager+0x6e6>
   84aca:	a201      	add	r2, pc, #4	; (adr r2, 84ad0 <cl_datamamanager+0x50>)
   84acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84ad0:	00084b55 	.word	0x00084b55
   84ad4:	00084b8b 	.word	0x00084b8b
   84ad8:	00084c2f 	.word	0x00084c2f
   84adc:	00084c55 	.word	0x00084c55
   84ae0:	00085167 	.word	0x00085167
   84ae4:	00085167 	.word	0x00085167
   84ae8:	00085167 	.word	0x00085167
   84aec:	00085167 	.word	0x00085167
   84af0:	00085167 	.word	0x00085167
   84af4:	00085167 	.word	0x00085167
   84af8:	00085167 	.word	0x00085167
   84afc:	00085167 	.word	0x00085167
   84b00:	00085167 	.word	0x00085167
   84b04:	00085167 	.word	0x00085167
   84b08:	00085167 	.word	0x00085167
   84b0c:	00085167 	.word	0x00085167
   84b10:	00085167 	.word	0x00085167
   84b14:	00084c8b 	.word	0x00084c8b
   84b18:	00085167 	.word	0x00085167
   84b1c:	00085167 	.word	0x00085167
   84b20:	00085167 	.word	0x00085167
   84b24:	00085167 	.word	0x00085167
   84b28:	00085167 	.word	0x00085167
   84b2c:	00085167 	.word	0x00085167
   84b30:	00085167 	.word	0x00085167
   84b34:	00085167 	.word	0x00085167
   84b38:	00085167 	.word	0x00085167
   84b3c:	00085167 	.word	0x00085167
   84b40:	00085167 	.word	0x00085167
   84b44:	00084bc1 	.word	0x00084bc1
   84b48:	00085167 	.word	0x00085167
   84b4c:	00084be7 	.word	0x00084be7
   84b50:	00084c0d 	.word	0x00084c0d
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b54:	2316      	movs	r3, #22
   84b56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84b5a:	2301      	movs	r3, #1
   84b5c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84b5e:	f107 030c 	add.w	r3, r7, #12
   84b62:	3301      	adds	r3, #1
   84b64:	4619      	mov	r1, r3
   84b66:	2001      	movs	r0, #1
   84b68:	4b8c      	ldr	r3, [pc, #560]	; (84d9c <cl_datamamanager+0x31c>)
   84b6a:	4798      	blx	r3
   84b6c:	4603      	mov	r3, r0
   84b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b72:	f107 010c 	add.w	r1, r7, #12
   84b76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b7a:	2202      	movs	r2, #2
   84b7c:	4618      	mov	r0, r3
   84b7e:	4b88      	ldr	r3, [pc, #544]	; (84da0 <cl_datamamanager+0x320>)
   84b80:	4798      	blx	r3
   84b82:	4603      	mov	r3, r0
   84b84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b88:	e2f0      	b.n	8516c <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b8a:	2316      	movs	r3, #22
   84b8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84b90:	2302      	movs	r3, #2
   84b92:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84b94:	f107 030c 	add.w	r3, r7, #12
   84b98:	3301      	adds	r3, #1
   84b9a:	4619      	mov	r1, r3
   84b9c:	2002      	movs	r0, #2
   84b9e:	4b7f      	ldr	r3, [pc, #508]	; (84d9c <cl_datamamanager+0x31c>)
   84ba0:	4798      	blx	r3
   84ba2:	4603      	mov	r3, r0
   84ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84ba8:	f107 010c 	add.w	r1, r7, #12
   84bac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bb0:	2202      	movs	r2, #2
   84bb2:	4618      	mov	r0, r3
   84bb4:	4b7a      	ldr	r3, [pc, #488]	; (84da0 <cl_datamamanager+0x320>)
   84bb6:	4798      	blx	r3
   84bb8:	4603      	mov	r3, r0
   84bba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bbe:	e2d5      	b.n	8516c <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84bc0:	2316      	movs	r3, #22
   84bc2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   84bc6:	2320      	movs	r3, #32
   84bc8:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84bca:	2300      	movs	r3, #0
   84bcc:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84bce:	f107 010c 	add.w	r1, r7, #12
   84bd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bd6:	2202      	movs	r2, #2
   84bd8:	4618      	mov	r0, r3
   84bda:	4b71      	ldr	r3, [pc, #452]	; (84da0 <cl_datamamanager+0x320>)
   84bdc:	4798      	blx	r3
   84bde:	4603      	mov	r3, r0
   84be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84be4:	e2c2      	b.n	8516c <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84be6:	2316      	movs	r3, #22
   84be8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84bec:	2321      	movs	r3, #33	; 0x21
   84bee:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84bf0:	2300      	movs	r3, #0
   84bf2:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84bf4:	f107 010c 	add.w	r1, r7, #12
   84bf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bfc:	2202      	movs	r2, #2
   84bfe:	4618      	mov	r0, r3
   84c00:	4b67      	ldr	r3, [pc, #412]	; (84da0 <cl_datamamanager+0x320>)
   84c02:	4798      	blx	r3
   84c04:	4603      	mov	r3, r0
   84c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c0a:	e2af      	b.n	8516c <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c0c:	2316      	movs	r3, #22
   84c0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84c12:	2323      	movs	r3, #35	; 0x23
   84c14:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c16:	f107 010c 	add.w	r1, r7, #12
   84c1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c1e:	2202      	movs	r2, #2
   84c20:	4618      	mov	r0, r3
   84c22:	4b5f      	ldr	r3, [pc, #380]	; (84da0 <cl_datamamanager+0x320>)
   84c24:	4798      	blx	r3
   84c26:	4603      	mov	r3, r0
   84c28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c2c:	e29e      	b.n	8516c <cl_datamamanager+0x6ec>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c2e:	2316      	movs	r3, #22
   84c30:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84c34:	2303      	movs	r3, #3
   84c36:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84c38:	2300      	movs	r3, #0
   84c3a:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c3c:	f107 010c 	add.w	r1, r7, #12
   84c40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c44:	2202      	movs	r2, #2
   84c46:	4618      	mov	r0, r3
   84c48:	4b55      	ldr	r3, [pc, #340]	; (84da0 <cl_datamamanager+0x320>)
   84c4a:	4798      	blx	r3
   84c4c:	4603      	mov	r3, r0
   84c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c52:	e28b      	b.n	8516c <cl_datamamanager+0x6ec>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c54:	2316      	movs	r3, #22
   84c56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84c5a:	2304      	movs	r3, #4
   84c5c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c5e:	f107 030c 	add.w	r3, r7, #12
   84c62:	3301      	adds	r3, #1
   84c64:	4619      	mov	r1, r3
   84c66:	2004      	movs	r0, #4
   84c68:	4b4c      	ldr	r3, [pc, #304]	; (84d9c <cl_datamamanager+0x31c>)
   84c6a:	4798      	blx	r3
   84c6c:	4603      	mov	r3, r0
   84c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c72:	f107 010c 	add.w	r1, r7, #12
   84c76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c7a:	2202      	movs	r2, #2
   84c7c:	4618      	mov	r0, r3
   84c7e:	4b48      	ldr	r3, [pc, #288]	; (84da0 <cl_datamamanager+0x320>)
   84c80:	4798      	blx	r3
   84c82:	4603      	mov	r3, r0
   84c84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c88:	e270      	b.n	8516c <cl_datamamanager+0x6ec>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84c8a:	2316      	movs	r3, #22
   84c8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   84c90:	2312      	movs	r3, #18
   84c92:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84c94:	4b40      	ldr	r3, [pc, #256]	; (84d98 <cl_datamamanager+0x318>)
   84c96:	795b      	ldrb	r3, [r3, #5]
   84c98:	2b25      	cmp	r3, #37	; 0x25
   84c9a:	d820      	bhi.n	84cde <cl_datamamanager+0x25e>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84c9c:	4b3e      	ldr	r3, [pc, #248]	; (84d98 <cl_datamamanager+0x318>)
   84c9e:	795b      	ldrb	r3, [r3, #5]
   84ca0:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   84ca2:	7b7b      	ldrb	r3, [r7, #13]
   84ca4:	461a      	mov	r2, r3
   84ca6:	4b3f      	ldr	r3, [pc, #252]	; (84da4 <cl_datamamanager+0x324>)
   84ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84cac:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   84cae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cb2:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84cb4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cb8:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84cba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84cbe:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   84cc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84cc4:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   84cc6:	f107 010c 	add.w	r1, r7, #12
   84cca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84cce:	2206      	movs	r2, #6
   84cd0:	4618      	mov	r0, r3
   84cd2:	4b33      	ldr	r3, [pc, #204]	; (84da0 <cl_datamamanager+0x320>)
   84cd4:	4798      	blx	r3
   84cd6:	4603      	mov	r3, r0
   84cd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
					
				}
		

				break;
   84cdc:	e245      	b.n	8516a <cl_datamamanager+0x6ea>
					dataarray[4] = datastream.bytearray[2];
					dataarray[5] = datastream.bytearray[3];

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   84cde:	4b2e      	ldr	r3, [pc, #184]	; (84d98 <cl_datamamanager+0x318>)
   84ce0:	795b      	ldrb	r3, [r3, #5]
   84ce2:	2b2d      	cmp	r3, #45	; 0x2d
   84ce4:	f200 8241 	bhi.w	8516a <cl_datamamanager+0x6ea>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84ce8:	4b2b      	ldr	r3, [pc, #172]	; (84d98 <cl_datamamanager+0x318>)
   84cea:	795b      	ldrb	r3, [r3, #5]
   84cec:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   84cee:	4b2a      	ldr	r3, [pc, #168]	; (84d98 <cl_datamamanager+0x318>)
   84cf0:	795b      	ldrb	r3, [r3, #5]
   84cf2:	3b26      	subs	r3, #38	; 0x26
   84cf4:	2b07      	cmp	r3, #7
   84cf6:	f200 8234 	bhi.w	85162 <cl_datamamanager+0x6e2>
   84cfa:	a201      	add	r2, pc, #4	; (adr r2, 84d00 <cl_datamamanager+0x280>)
   84cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d00:	00084d21 	.word	0x00084d21
   84d04:	00084e21 	.word	0x00084e21
   84d08:	00085163 	.word	0x00085163
   84d0c:	00084da9 	.word	0x00084da9
   84d10:	00084e93 	.word	0x00084e93
   84d14:	000850ed 	.word	0x000850ed
   84d18:	00085073 	.word	0x00085073
   84d1c:	00084f03 	.word	0x00084f03
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84d20:	4b20      	ldr	r3, [pc, #128]	; (84da4 <cl_datamamanager+0x324>)
   84d22:	695b      	ldr	r3, [r3, #20]
   84d24:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84d26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d2a:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84d2c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d30:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84d32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d36:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84d38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d3c:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84d3e:	4b19      	ldr	r3, [pc, #100]	; (84da4 <cl_datamamanager+0x324>)
   84d40:	699b      	ldr	r3, [r3, #24]
   84d42:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84d44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d48:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84d4a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d4e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84d50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d54:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d5a:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84d5c:	4b11      	ldr	r3, [pc, #68]	; (84da4 <cl_datamamanager+0x324>)
   84d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84d60:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d66:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d68:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d6c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d72:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d78:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84d7a:	f107 010c 	add.w	r1, r7, #12
   84d7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84d82:	220e      	movs	r2, #14
   84d84:	4618      	mov	r0, r3
   84d86:	4b06      	ldr	r3, [pc, #24]	; (84da0 <cl_datamamanager+0x320>)
   84d88:	4798      	blx	r3
   84d8a:	4603      	mov	r3, r0
   84d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84d90:	e1e8      	b.n	85164 <cl_datamamanager+0x6e4>
   84d92:	bf00      	nop
   84d94:	000a39a5 	.word	0x000a39a5
   84d98:	20072f88 	.word	0x20072f88
   84d9c:	00097d7d 	.word	0x00097d7d
   84da0:	0009926d 	.word	0x0009926d
   84da4:	20073194 	.word	0x20073194
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84da8:	4bce      	ldr	r3, [pc, #824]	; (850e4 <cl_datamamanager+0x664>)
   84daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   84dae:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84db0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84db4:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84db6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dba:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84dbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84dc0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84dc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84dc6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   84dc8:	4bc6      	ldr	r3, [pc, #792]	; (850e4 <cl_datamamanager+0x664>)
   84dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   84dce:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84dd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84dd4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84dd6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dda:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84ddc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84de0:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84de2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84de6:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84de8:	4bbe      	ldr	r3, [pc, #760]	; (850e4 <cl_datamamanager+0x664>)
   84dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84dee:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84df0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84df4:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84df6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dfa:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84dfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e00:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e06:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e08:	f107 010c 	add.w	r1, r7, #12
   84e0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84e10:	220e      	movs	r2, #14
   84e12:	4618      	mov	r0, r3
   84e14:	4bb4      	ldr	r3, [pc, #720]	; (850e8 <cl_datamamanager+0x668>)
   84e16:	4798      	blx	r3
   84e18:	4603      	mov	r3, r0
   84e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e1e:	e1a1      	b.n	85164 <cl_datamamanager+0x6e4>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84e20:	4bb0      	ldr	r3, [pc, #704]	; (850e4 <cl_datamamanager+0x664>)
   84e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84e24:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e2a:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e2c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e30:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84e32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e36:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84e38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e3c:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84e3e:	4ba9      	ldr	r3, [pc, #676]	; (850e4 <cl_datamamanager+0x664>)
   84e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84e42:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84e44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e48:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e4a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e4e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e54:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e5a:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84e5c:	4ba1      	ldr	r3, [pc, #644]	; (850e4 <cl_datamamanager+0x664>)
   84e5e:	699b      	ldr	r3, [r3, #24]
   84e60:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e66:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e68:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e6c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e72:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e78:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e7a:	f107 010c 	add.w	r1, r7, #12
   84e7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84e82:	220e      	movs	r2, #14
   84e84:	4618      	mov	r0, r3
   84e86:	4b98      	ldr	r3, [pc, #608]	; (850e8 <cl_datamamanager+0x668>)
   84e88:	4798      	blx	r3
   84e8a:	4603      	mov	r3, r0
   84e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e90:	e168      	b.n	85164 <cl_datamamanager+0x6e4>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84e92:	4b94      	ldr	r3, [pc, #592]	; (850e4 <cl_datamamanager+0x664>)
   84e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84e96:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e9c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e9e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ea2:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84ea4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ea8:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84eaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84eae:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84eb0:	4b8c      	ldr	r3, [pc, #560]	; (850e4 <cl_datamamanager+0x664>)
   84eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84eb4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84eb6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84eba:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84ebc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ec0:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84ec2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ec6:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84ec8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ecc:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84ece:	23c8      	movs	r3, #200	; 0xc8
   84ed0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84ed2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ed6:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84ed8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84edc:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84ede:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ee2:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ee4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ee8:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84eea:	f107 010c 	add.w	r1, r7, #12
   84eee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84ef2:	220e      	movs	r2, #14
   84ef4:	4618      	mov	r0, r3
   84ef6:	4b7c      	ldr	r3, [pc, #496]	; (850e8 <cl_datamamanager+0x668>)
   84ef8:	4798      	blx	r3
   84efa:	4603      	mov	r3, r0
   84efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84f00:	e130      	b.n	85164 <cl_datamamanager+0x6e4>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84f02:	4b78      	ldr	r3, [pc, #480]	; (850e4 <cl_datamamanager+0x664>)
   84f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f06:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84f08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f0c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84f0e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f12:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84f14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f18:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f1e:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84f20:	4b70      	ldr	r3, [pc, #448]	; (850e4 <cl_datamamanager+0x664>)
   84f22:	699b      	ldr	r3, [r3, #24]
   84f24:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84f26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f2a:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84f2c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f30:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84f32:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f36:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f3c:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84f3e:	4b69      	ldr	r3, [pc, #420]	; (850e4 <cl_datamamanager+0x664>)
   84f40:	695b      	ldr	r3, [r3, #20]
   84f42:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84f44:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f48:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84f4a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f4e:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84f50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f54:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84f56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f5a:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84f5c:	4b61      	ldr	r3, [pc, #388]	; (850e4 <cl_datamamanager+0x664>)
   84f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84f60:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84f62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f66:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84f68:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f6c:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84f6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f72:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84f74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f78:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84f7a:	4b5a      	ldr	r3, [pc, #360]	; (850e4 <cl_datamamanager+0x664>)
   84f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84f7e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84f80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f84:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84f86:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f8a:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84f8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f90:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84f94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84f9c:	4b51      	ldr	r3, [pc, #324]	; (850e4 <cl_datamamanager+0x664>)
   84f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84fa0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84fa2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84faa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84fb2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84fba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84fc2:	4b48      	ldr	r3, [pc, #288]	; (850e4 <cl_datamamanager+0x664>)
   84fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84fc6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84fc8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84fd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   84fd8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84fe0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fe4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   84fe8:	4b3e      	ldr	r3, [pc, #248]	; (850e4 <cl_datamamanager+0x664>)
   84fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   84fec:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84fee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84ff6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84ffe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85002:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   85006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8500a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   8500e:	4b35      	ldr	r3, [pc, #212]	; (850e4 <cl_datamamanager+0x664>)
   85010:	69db      	ldr	r3, [r3, #28]
   85012:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   85014:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85018:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   8501c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   85024:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85028:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   8502c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85030:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   85034:	4b2b      	ldr	r3, [pc, #172]	; (850e4 <cl_datamamanager+0x664>)
   85036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   85038:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   8503a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8503e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   85042:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   8504a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8504e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   85052:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85056:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   8505a:	f107 010c 	add.w	r1, r7, #12
   8505e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85062:	222a      	movs	r2, #42	; 0x2a
   85064:	4618      	mov	r0, r3
   85066:	4b20      	ldr	r3, [pc, #128]	; (850e8 <cl_datamamanager+0x668>)
   85068:	4798      	blx	r3
   8506a:	4603      	mov	r3, r0
   8506c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   85070:	e078      	b.n	85164 <cl_datamamanager+0x6e4>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   85072:	4b1c      	ldr	r3, [pc, #112]	; (850e4 <cl_datamamanager+0x664>)
   85074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85076:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85078:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8507c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8507e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85082:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   85084:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85088:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   8508a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8508e:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   85090:	4b14      	ldr	r3, [pc, #80]	; (850e4 <cl_datamamanager+0x664>)
   85092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   85094:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85096:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8509a:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8509c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850a0:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   850a2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850a6:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   850a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850ac:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   850ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
   850b2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   850b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850b8:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   850ba:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850be:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   850c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850c4:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   850c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850ca:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   850cc:	f107 010c 	add.w	r1, r7, #12
   850d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   850d4:	220e      	movs	r2, #14
   850d6:	4618      	mov	r0, r3
   850d8:	4b03      	ldr	r3, [pc, #12]	; (850e8 <cl_datamamanager+0x668>)
   850da:	4798      	blx	r3
   850dc:	4603      	mov	r3, r0
   850de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   850e2:	e03f      	b.n	85164 <cl_datamamanager+0x6e4>
   850e4:	20073194 	.word	0x20073194
   850e8:	0009926d 	.word	0x0009926d
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   850ec:	4b9e      	ldr	r3, [pc, #632]	; (85368 <cl_datamamanager+0x8e8>)
   850ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   850f2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   850f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850f8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   850fa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850fe:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   85100:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85104:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85106:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8510a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   8510c:	4b96      	ldr	r3, [pc, #600]	; (85368 <cl_datamamanager+0x8e8>)
   8510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   85112:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85114:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85118:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8511a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8511e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   85120:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85124:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8512a:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   8512c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   85130:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   85132:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85136:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85138:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8513c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8513e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85142:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85144:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85148:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8514a:	f107 010c 	add.w	r1, r7, #12
   8514e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85152:	220e      	movs	r2, #14
   85154:	4618      	mov	r0, r3
   85156:	4b85      	ldr	r3, [pc, #532]	; (8536c <cl_datamamanager+0x8ec>)
   85158:	4798      	blx	r3
   8515a:	4603      	mov	r3, r0
   8515c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   85160:	e000      	b.n	85164 <cl_datamamanager+0x6e4>
						
						default:break;
   85162:	bf00      	nop
					}
					
				}
		

				break;
   85164:	e001      	b.n	8516a <cl_datamamanager+0x6ea>
				
				default:
				break;
   85166:	bf00      	nop
   85168:	e0f5      	b.n	85356 <cl_datamamanager+0x8d6>
					}
					
				}
		

				break;
   8516a:	bf00      	nop
				
				default:
				break;
			}
		}
		break;
   8516c:	e0f3      	b.n	85356 <cl_datamamanager+0x8d6>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   8516e:	4b80      	ldr	r3, [pc, #512]	; (85370 <cl_datamamanager+0x8f0>)
   85170:	7e1b      	ldrb	r3, [r3, #24]
   85172:	2b00      	cmp	r3, #0
   85174:	f000 80f1 	beq.w	8535a <cl_datamamanager+0x8da>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   85178:	4b7d      	ldr	r3, [pc, #500]	; (85370 <cl_datamamanager+0x8f0>)
   8517a:	791b      	ldrb	r3, [r3, #4]
   8517c:	2b12      	cmp	r3, #18
   8517e:	d000      	beq.n	85182 <cl_datamamanager+0x702>
						break;

						default:break;
					}
				break;
				default:break;
   85180:	e0e8      	b.n	85354 <cl_datamamanager+0x8d4>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   85182:	4b7b      	ldr	r3, [pc, #492]	; (85370 <cl_datamamanager+0x8f0>)
   85184:	795b      	ldrb	r3, [r3, #5]
   85186:	2b25      	cmp	r3, #37	; 0x25
   85188:	d818      	bhi.n	851bc <cl_datamamanager+0x73c>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8518a:	4b79      	ldr	r3, [pc, #484]	; (85370 <cl_datamamanager+0x8f0>)
   8518c:	795b      	ldrb	r3, [r3, #5]
   8518e:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   85190:	4b77      	ldr	r3, [pc, #476]	; (85370 <cl_datamamanager+0x8f0>)
   85192:	799b      	ldrb	r3, [r3, #6]
   85194:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   85198:	4b75      	ldr	r3, [pc, #468]	; (85370 <cl_datamamanager+0x8f0>)
   8519a:	79db      	ldrb	r3, [r3, #7]
   8519c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   851a0:	4b73      	ldr	r3, [pc, #460]	; (85370 <cl_datamamanager+0x8f0>)
   851a2:	7a1b      	ldrb	r3, [r3, #8]
   851a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   851a8:	4b71      	ldr	r3, [pc, #452]	; (85370 <cl_datamamanager+0x8f0>)
   851aa:	7a5b      	ldrb	r3, [r3, #9]
   851ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   851b0:	7b7b      	ldrb	r3, [r7, #13]
   851b2:	4619      	mov	r1, r3
   851b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851b6:	4a6c      	ldr	r2, [pc, #432]	; (85368 <cl_datamamanager+0x8e8>)
   851b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   851bc:	4b6c      	ldr	r3, [pc, #432]	; (85370 <cl_datamamanager+0x8f0>)
   851be:	795b      	ldrb	r3, [r3, #5]
   851c0:	3b05      	subs	r3, #5
   851c2:	2b20      	cmp	r3, #32
   851c4:	f200 80c4 	bhi.w	85350 <cl_datamamanager+0x8d0>
   851c8:	a201      	add	r2, pc, #4	; (adr r2, 851d0 <cl_datamamanager+0x750>)
   851ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851ce:	bf00      	nop
   851d0:	00085255 	.word	0x00085255
   851d4:	0008525d 	.word	0x0008525d
   851d8:	00085351 	.word	0x00085351
   851dc:	00085351 	.word	0x00085351
   851e0:	00085351 	.word	0x00085351
   851e4:	00085351 	.word	0x00085351
   851e8:	00085265 	.word	0x00085265
   851ec:	0008526d 	.word	0x0008526d
   851f0:	0008527d 	.word	0x0008527d
   851f4:	00085351 	.word	0x00085351
   851f8:	00085351 	.word	0x00085351
   851fc:	00085351 	.word	0x00085351
   85200:	00085351 	.word	0x00085351
   85204:	00085351 	.word	0x00085351
   85208:	00085351 	.word	0x00085351
   8520c:	00085351 	.word	0x00085351
   85210:	00085285 	.word	0x00085285
   85214:	00085351 	.word	0x00085351
   85218:	00085351 	.word	0x00085351
   8521c:	0008528d 	.word	0x0008528d
   85220:	000852a5 	.word	0x000852a5
   85224:	000852bd 	.word	0x000852bd
   85228:	000852cd 	.word	0x000852cd
   8522c:	000852dd 	.word	0x000852dd
   85230:	000852ed 	.word	0x000852ed
   85234:	00085351 	.word	0x00085351
   85238:	00085351 	.word	0x00085351
   8523c:	00085351 	.word	0x00085351
   85240:	00085351 	.word	0x00085351
   85244:	00085305 	.word	0x00085305
   85248:	00085317 	.word	0x00085317
   8524c:	00085329 	.word	0x00085329
   85250:	00085339 	.word	0x00085339
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   85254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85256:	4a44      	ldr	r2, [pc, #272]	; (85368 <cl_datamamanager+0x8e8>)
   85258:	6153      	str	r3, [r2, #20]
						break;
   8525a:	e07a      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   8525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8525e:	4a42      	ldr	r2, [pc, #264]	; (85368 <cl_datamamanager+0x8e8>)
   85260:	6193      	str	r3, [r2, #24]
						break;
   85262:	e076      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   85264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85266:	4a40      	ldr	r2, [pc, #256]	; (85368 <cl_datamamanager+0x8e8>)
   85268:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   8526a:	e072      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   8526c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8526e:	4a41      	ldr	r2, [pc, #260]	; (85374 <cl_datamamanager+0x8f4>)
   85270:	fba2 2303 	umull	r2, r3, r2, r3
   85274:	08db      	lsrs	r3, r3, #3
   85276:	4a3c      	ldr	r2, [pc, #240]	; (85368 <cl_datamamanager+0x8e8>)
   85278:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   8527a:	e06a      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   8527c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8527e:	4a3a      	ldr	r2, [pc, #232]	; (85368 <cl_datamamanager+0x8e8>)
   85280:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   85282:	e066      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   85284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85286:	4a38      	ldr	r2, [pc, #224]	; (85368 <cl_datamamanager+0x8e8>)
   85288:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   8528a:	e062      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word)/10;
   8528c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8528e:	4a39      	ldr	r2, [pc, #228]	; (85374 <cl_datamamanager+0x8f4>)
   85290:	fba2 2303 	umull	r2, r3, r2, r3
   85294:	08da      	lsrs	r2, r3, #3
   85296:	4b38      	ldr	r3, [pc, #224]	; (85378 <cl_datamamanager+0x8f8>)
   85298:	4610      	mov	r0, r2
   8529a:	4798      	blx	r3
   8529c:	4602      	mov	r2, r0
   8529e:	4b37      	ldr	r3, [pc, #220]	; (8537c <cl_datamamanager+0x8fc>)
   852a0:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   852a2:	e056      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word)/10;
   852a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852a6:	4a33      	ldr	r2, [pc, #204]	; (85374 <cl_datamamanager+0x8f4>)
   852a8:	fba2 2303 	umull	r2, r3, r2, r3
   852ac:	08da      	lsrs	r2, r3, #3
   852ae:	4b32      	ldr	r3, [pc, #200]	; (85378 <cl_datamamanager+0x8f8>)
   852b0:	4610      	mov	r0, r2
   852b2:	4798      	blx	r3
   852b4:	4602      	mov	r2, r0
   852b6:	4b31      	ldr	r3, [pc, #196]	; (8537c <cl_datamamanager+0x8fc>)
   852b8:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   852ba:	e04a      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   852bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852be:	4b2e      	ldr	r3, [pc, #184]	; (85378 <cl_datamamanager+0x8f8>)
   852c0:	4610      	mov	r0, r2
   852c2:	4798      	blx	r3
   852c4:	4602      	mov	r2, r0
   852c6:	4b2d      	ldr	r3, [pc, #180]	; (8537c <cl_datamamanager+0x8fc>)
   852c8:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   852ca:	e042      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   852cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852ce:	4b2a      	ldr	r3, [pc, #168]	; (85378 <cl_datamamanager+0x8f8>)
   852d0:	4610      	mov	r0, r2
   852d2:	4798      	blx	r3
   852d4:	4602      	mov	r2, r0
   852d6:	4b29      	ldr	r3, [pc, #164]	; (8537c <cl_datamamanager+0x8fc>)
   852d8:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   852da:	e03a      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  (datastream.word);
   852dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852de:	4b26      	ldr	r3, [pc, #152]	; (85378 <cl_datamamanager+0x8f8>)
   852e0:	4610      	mov	r0, r2
   852e2:	4798      	blx	r3
   852e4:	4602      	mov	r2, r0
   852e6:	4b25      	ldr	r3, [pc, #148]	; (8537c <cl_datamamanager+0x8fc>)
   852e8:	615a      	str	r2, [r3, #20]
						break;
   852ea:	e032      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  (datastream.word)/100;
   852ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852ee:	4a24      	ldr	r2, [pc, #144]	; (85380 <cl_datamamanager+0x900>)
   852f0:	fba2 2303 	umull	r2, r3, r2, r3
   852f4:	095a      	lsrs	r2, r3, #5
   852f6:	4b20      	ldr	r3, [pc, #128]	; (85378 <cl_datamamanager+0x8f8>)
   852f8:	4610      	mov	r0, r2
   852fa:	4798      	blx	r3
   852fc:	4602      	mov	r2, r0
   852fe:	4b1f      	ldr	r3, [pc, #124]	; (8537c <cl_datamamanager+0x8fc>)
   85300:	611a      	str	r2, [r3, #16]
						break;
   85302:	e026      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word/10;
   85304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85306:	4a1b      	ldr	r2, [pc, #108]	; (85374 <cl_datamamanager+0x8f4>)
   85308:	fba2 2303 	umull	r2, r3, r2, r3
   8530c:	08db      	lsrs	r3, r3, #3
   8530e:	b21a      	sxth	r2, r3
   85310:	4b1a      	ldr	r3, [pc, #104]	; (8537c <cl_datamamanager+0x8fc>)
   85312:	801a      	strh	r2, [r3, #0]
						break;
   85314:	e01d      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word/10;
   85316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85318:	4a16      	ldr	r2, [pc, #88]	; (85374 <cl_datamamanager+0x8f4>)
   8531a:	fba2 2303 	umull	r2, r3, r2, r3
   8531e:	08db      	lsrs	r3, r3, #3
   85320:	b21a      	sxth	r2, r3
   85322:	4b16      	ldr	r3, [pc, #88]	; (8537c <cl_datamamanager+0x8fc>)
   85324:	805a      	strh	r2, [r3, #2]
						break;
   85326:	e014      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   85328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8532a:	4b13      	ldr	r3, [pc, #76]	; (85378 <cl_datamamanager+0x8f8>)
   8532c:	4610      	mov	r0, r2
   8532e:	4798      	blx	r3
   85330:	4602      	mov	r2, r0
   85332:	4b12      	ldr	r3, [pc, #72]	; (8537c <cl_datamamanager+0x8fc>)
   85334:	60da      	str	r2, [r3, #12]
						break;
   85336:	e00c      	b.n	85352 <cl_datamamanager+0x8d2>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word)/100;
   85338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8533a:	4a11      	ldr	r2, [pc, #68]	; (85380 <cl_datamamanager+0x900>)
   8533c:	fba2 2303 	umull	r2, r3, r2, r3
   85340:	095a      	lsrs	r2, r3, #5
   85342:	4b0d      	ldr	r3, [pc, #52]	; (85378 <cl_datamamanager+0x8f8>)
   85344:	4610      	mov	r0, r2
   85346:	4798      	blx	r3
   85348:	4602      	mov	r2, r0
   8534a:	4b0c      	ldr	r3, [pc, #48]	; (8537c <cl_datamamanager+0x8fc>)
   8534c:	609a      	str	r2, [r3, #8]
						break;
   8534e:	e000      	b.n	85352 <cl_datamamanager+0x8d2>

						default:break;
   85350:	bf00      	nop
					}
				break;
   85352:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   85354:	e001      	b.n	8535a <cl_datamamanager+0x8da>
				
				default:
				break;
			}
		}
		break;
   85356:	bf00      	nop
   85358:	e000      	b.n	8535c <cl_datamamanager+0x8dc>
				default:break;
			}
							
							
		}
		break;
   8535a:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   8535c:	2300      	movs	r3, #0
}
   8535e:	4618      	mov	r0, r3
   85360:	3748      	adds	r7, #72	; 0x48
   85362:	46bd      	mov	sp, r7
   85364:	bd80      	pop	{r7, pc}
   85366:	bf00      	nop
   85368:	20073194 	.word	0x20073194
   8536c:	0009926d 	.word	0x0009926d
   85370:	20072f88 	.word	0x20072f88
   85374:	cccccccd 	.word	0xcccccccd
   85378:	000a33a1 	.word	0x000a33a1
   8537c:	20072cf8 	.word	0x20072cf8
   85380:	51eb851f 	.word	0x51eb851f

00085384 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   85384:	b480      	push	{r7}
   85386:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   85388:	4b2a      	ldr	r3, [pc, #168]	; (85434 <Cl_dlsis_init+0xb0>)
   8538a:	2200      	movs	r2, #0
   8538c:	601a      	str	r2, [r3, #0]
   8538e:	4b2a      	ldr	r3, [pc, #168]	; (85438 <Cl_dlsis_init+0xb4>)
   85390:	2200      	movs	r2, #0
   85392:	601a      	str	r2, [r3, #0]
   85394:	4b29      	ldr	r3, [pc, #164]	; (8543c <Cl_dlsis_init+0xb8>)
   85396:	2200      	movs	r2, #0
   85398:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   8539a:	4b29      	ldr	r3, [pc, #164]	; (85440 <Cl_dlsis_init+0xbc>)
   8539c:	2200      	movs	r2, #0
   8539e:	601a      	str	r2, [r3, #0]
   853a0:	4b28      	ldr	r3, [pc, #160]	; (85444 <Cl_dlsis_init+0xc0>)
   853a2:	2200      	movs	r2, #0
   853a4:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   853a6:	4b28      	ldr	r3, [pc, #160]	; (85448 <Cl_dlsis_init+0xc4>)
   853a8:	2200      	movs	r2, #0
   853aa:	701a      	strb	r2, [r3, #0]
   853ac:	4b27      	ldr	r3, [pc, #156]	; (8544c <Cl_dlsis_init+0xc8>)
   853ae:	2200      	movs	r2, #0
   853b0:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   853b2:	4b27      	ldr	r3, [pc, #156]	; (85450 <Cl_dlsis_init+0xcc>)
   853b4:	2200      	movs	r2, #0
   853b6:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   853b8:	4b26      	ldr	r3, [pc, #152]	; (85454 <Cl_dlsis_init+0xd0>)
   853ba:	2200      	movs	r2, #0
   853bc:	801a      	strh	r2, [r3, #0]
   853be:	4b26      	ldr	r3, [pc, #152]	; (85458 <Cl_dlsis_init+0xd4>)
   853c0:	2200      	movs	r2, #0
   853c2:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   853c4:	4b25      	ldr	r3, [pc, #148]	; (8545c <Cl_dlsis_init+0xd8>)
   853c6:	2200      	movs	r2, #0
   853c8:	801a      	strh	r2, [r3, #0]
   853ca:	4b25      	ldr	r3, [pc, #148]	; (85460 <Cl_dlsis_init+0xdc>)
   853cc:	2200      	movs	r2, #0
   853ce:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   853d0:	4b24      	ldr	r3, [pc, #144]	; (85464 <Cl_dlsis_init+0xe0>)
   853d2:	2200      	movs	r2, #0
   853d4:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   853d6:	4b24      	ldr	r3, [pc, #144]	; (85468 <Cl_dlsis_init+0xe4>)
   853d8:	2201      	movs	r2, #1
   853da:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   853dc:	4b23      	ldr	r3, [pc, #140]	; (8546c <Cl_dlsis_init+0xe8>)
   853de:	2200      	movs	r2, #0
   853e0:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   853e2:	4b23      	ldr	r3, [pc, #140]	; (85470 <Cl_dlsis_init+0xec>)
   853e4:	f04f 0200 	mov.w	r2, #0
   853e8:	601a      	str	r2, [r3, #0]
   853ea:	4b22      	ldr	r3, [pc, #136]	; (85474 <Cl_dlsis_init+0xf0>)
   853ec:	f04f 0200 	mov.w	r2, #0
   853f0:	601a      	str	r2, [r3, #0]
   853f2:	4b21      	ldr	r3, [pc, #132]	; (85478 <Cl_dlsis_init+0xf4>)
   853f4:	f04f 0200 	mov.w	r2, #0
   853f8:	601a      	str	r2, [r3, #0]
   853fa:	4b20      	ldr	r3, [pc, #128]	; (8547c <Cl_dlsis_init+0xf8>)
   853fc:	f04f 0200 	mov.w	r2, #0
   85400:	601a      	str	r2, [r3, #0]
   85402:	4b1f      	ldr	r3, [pc, #124]	; (85480 <Cl_dlsis_init+0xfc>)
   85404:	f04f 0200 	mov.w	r2, #0
   85408:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   8540a:	4b1e      	ldr	r3, [pc, #120]	; (85484 <Cl_dlsis_init+0x100>)
   8540c:	f04f 0200 	mov.w	r2, #0
   85410:	601a      	str	r2, [r3, #0]
   85412:	4b1d      	ldr	r3, [pc, #116]	; (85488 <Cl_dlsis_init+0x104>)
   85414:	f04f 0200 	mov.w	r2, #0
   85418:	601a      	str	r2, [r3, #0]
   8541a:	4b1c      	ldr	r3, [pc, #112]	; (8548c <Cl_dlsis_init+0x108>)
   8541c:	f04f 0200 	mov.w	r2, #0
   85420:	601a      	str	r2, [r3, #0]
   85422:	4b1b      	ldr	r3, [pc, #108]	; (85490 <Cl_dlsis_init+0x10c>)
   85424:	f04f 0200 	mov.w	r2, #0
   85428:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   8542a:	2300      	movs	r3, #0
 }
   8542c:	4618      	mov	r0, r3
   8542e:	46bd      	mov	sp, r7
   85430:	bc80      	pop	{r7}
   85432:	4770      	bx	lr
   85434:	200720d4 	.word	0x200720d4
   85438:	200720d8 	.word	0x200720d8
   8543c:	200720dc 	.word	0x200720dc
   85440:	200720e0 	.word	0x200720e0
   85444:	200720e4 	.word	0x200720e4
   85448:	200720e8 	.word	0x200720e8
   8544c:	200720e9 	.word	0x200720e9
   85450:	20072d70 	.word	0x20072d70
   85454:	200720ea 	.word	0x200720ea
   85458:	200720ec 	.word	0x200720ec
   8545c:	20072d6c 	.word	0x20072d6c
   85460:	20072d72 	.word	0x20072d72
   85464:	200720ee 	.word	0x200720ee
   85468:	200720ef 	.word	0x200720ef
   8546c:	200720f0 	.word	0x200720f0
   85470:	200720f4 	.word	0x200720f4
   85474:	200720f8 	.word	0x200720f8
   85478:	200720fc 	.word	0x200720fc
   8547c:	20072100 	.word	0x20072100
   85480:	20072104 	.word	0x20072104
   85484:	20072108 	.word	0x20072108
   85488:	2007210c 	.word	0x2007210c
   8548c:	20072110 	.word	0x20072110
   85490:	20072114 	.word	0x20072114

00085494 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   85494:	b580      	push	{r7, lr}
   85496:	b092      	sub	sp, #72	; 0x48
   85498:	af00      	add	r7, sp, #0
   8549a:	4603      	mov	r3, r0
   8549c:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   8549e:	2300      	movs	r3, #0
   854a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   854a4:	2300      	movs	r3, #0
   854a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   854aa:	2300      	movs	r3, #0
   854ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   854b0:	2300      	movs	r3, #0
   854b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   854b6:	2300      	movs	r3, #0
   854b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   854bc:	2300      	movs	r3, #0
   854be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   854c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   854c6:	2200      	movs	r2, #0
   854c8:	601a      	str	r2, [r3, #0]
   854ca:	605a      	str	r2, [r3, #4]
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   854cc:	234d      	movs	r3, #77	; 0x4d
   854ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
Cl_Uint8Type data = 0;
   854d2:	2300      	movs	r3, #0
   854d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
Cl_Uint16Type tempcount=0;
   854d8:	2300      	movs	r3, #0
   854da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
float temp;
//static float apt=0, vpt=0;

Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   854de:	f107 023e 	add.w	r2, r7, #62	; 0x3e
   854e2:	79fb      	ldrb	r3, [r7, #7]
   854e4:	4611      	mov	r1, r2
   854e6:	4618      	mov	r0, r3
   854e8:	4bc4      	ldr	r3, [pc, #784]	; (857fc <Cl_Dlsis_controller+0x368>)
   854ea:	4798      	blx	r3
   854ec:	4603      	mov	r3, r0
   854ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	
	switch(cl_dlsis_event)
   854f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   854f6:	3b11      	subs	r3, #17
   854f8:	2b11      	cmp	r3, #17
   854fa:	f200 8086 	bhi.w	8560a <Cl_Dlsis_controller+0x176>
   854fe:	a201      	add	r2, pc, #4	; (adr r2, 85504 <Cl_Dlsis_controller+0x70>)
   85500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85504:	0008560b 	.word	0x0008560b
   85508:	0008560b 	.word	0x0008560b
   8550c:	0008554d 	.word	0x0008554d
   85510:	0008560b 	.word	0x0008560b
   85514:	0008560b 	.word	0x0008560b
   85518:	0008560b 	.word	0x0008560b
   8551c:	0008560b 	.word	0x0008560b
   85520:	0008560b 	.word	0x0008560b
   85524:	0008560b 	.word	0x0008560b
   85528:	0008560b 	.word	0x0008560b
   8552c:	0008560b 	.word	0x0008560b
   85530:	0008560b 	.word	0x0008560b
   85534:	000855cf 	.word	0x000855cf
   85538:	000855bb 	.word	0x000855bb
   8553c:	000855c5 	.word	0x000855c5
   85540:	0008555b 	.word	0x0008555b
   85544:	000855a3 	.word	0x000855a3
   85548:	000855b1 	.word	0x000855b1
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   8554c:	2002      	movs	r0, #2
   8554e:	4bac      	ldr	r3, [pc, #688]	; (85800 <Cl_Dlsis_controller+0x36c>)
   85550:	4798      	blx	r3
   85552:	4603      	mov	r3, r0
   85554:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
   85558:	e05c      	b.n	85614 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_TICK_50MS:
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   8555a:	4baa      	ldr	r3, [pc, #680]	; (85804 <Cl_Dlsis_controller+0x370>)
   8555c:	7e1b      	ldrb	r3, [r3, #24]
   8555e:	2b00      	cmp	r3, #0
   85560:	d055      	beq.n	8560e <Cl_Dlsis_controller+0x17a>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85562:	4ba8      	ldr	r3, [pc, #672]	; (85804 <Cl_Dlsis_controller+0x370>)
   85564:	791b      	ldrb	r3, [r3, #4]
   85566:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8556a:	4ba6      	ldr	r3, [pc, #664]	; (85804 <Cl_Dlsis_controller+0x370>)
   8556c:	795b      	ldrb	r3, [r3, #5]
   8556e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85572:	4ba4      	ldr	r3, [pc, #656]	; (85804 <Cl_Dlsis_controller+0x370>)
   85574:	799b      	ldrb	r3, [r3, #6]
   85576:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8557a:	4ba2      	ldr	r3, [pc, #648]	; (85804 <Cl_Dlsis_controller+0x370>)
   8557c:	79db      	ldrb	r3, [r3, #7]
   8557e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   85582:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   85584:	461a      	mov	r2, r3
   85586:	4ba0      	ldr	r3, [pc, #640]	; (85808 <Cl_Dlsis_controller+0x374>)
   85588:	61da      	str	r2, [r3, #28]
				hep_calibration(Treatdata[ID_heprate]);
   8558a:	4b9f      	ldr	r3, [pc, #636]	; (85808 <Cl_Dlsis_controller+0x374>)
   8558c:	69db      	ldr	r3, [r3, #28]
   8558e:	4618      	mov	r0, r3
   85590:	4b9e      	ldr	r3, [pc, #632]	; (8580c <Cl_Dlsis_controller+0x378>)
   85592:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   85594:	4b9e      	ldr	r3, [pc, #632]	; (85810 <Cl_Dlsis_controller+0x37c>)
   85596:	681b      	ldr	r3, [r3, #0]
   85598:	4619      	mov	r1, r3
   8559a:	2006      	movs	r0, #6
   8559c:	4b9d      	ldr	r3, [pc, #628]	; (85814 <Cl_Dlsis_controller+0x380>)
   8559e:	4798      	blx	r3
			}
		break;
   855a0:	e035      	b.n	8560e <Cl_Dlsis_controller+0x17a>
		case EVENT_DLSIS_HEP_ON:
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   855a2:	4b9b      	ldr	r3, [pc, #620]	; (85810 <Cl_Dlsis_controller+0x37c>)
   855a4:	681b      	ldr	r3, [r3, #0]
   855a6:	4619      	mov	r1, r3
   855a8:	200a      	movs	r0, #10
   855aa:	4b9a      	ldr	r3, [pc, #616]	; (85814 <Cl_Dlsis_controller+0x380>)
   855ac:	4798      	blx	r3
		break;
   855ae:	e031      	b.n	85614 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   855b0:	2100      	movs	r1, #0
   855b2:	2009      	movs	r0, #9
   855b4:	4b97      	ldr	r3, [pc, #604]	; (85814 <Cl_Dlsis_controller+0x380>)
   855b6:	4798      	blx	r3
		break;
   855b8:	e02c      	b.n	85614 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   855ba:	2100      	movs	r1, #0
   855bc:	2002      	movs	r0, #2
   855be:	4b96      	ldr	r3, [pc, #600]	; (85818 <Cl_Dlsis_controller+0x384>)
   855c0:	4798      	blx	r3
		break;
   855c2:	e027      	b.n	85614 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   855c4:	2100      	movs	r1, #0
   855c6:	2004      	movs	r0, #4
   855c8:	4b93      	ldr	r3, [pc, #588]	; (85818 <Cl_Dlsis_controller+0x384>)
   855ca:	4798      	blx	r3
		break;
   855cc:	e022      	b.n	85614 <Cl_Dlsis_controller+0x180>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   855ce:	4b8d      	ldr	r3, [pc, #564]	; (85804 <Cl_Dlsis_controller+0x370>)
   855d0:	7e1b      	ldrb	r3, [r3, #24]
   855d2:	2b00      	cmp	r3, #0
   855d4:	d01d      	beq.n	85612 <Cl_Dlsis_controller+0x17e>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   855d6:	4b8b      	ldr	r3, [pc, #556]	; (85804 <Cl_Dlsis_controller+0x370>)
   855d8:	791b      	ldrb	r3, [r3, #4]
   855da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   855de:	4b89      	ldr	r3, [pc, #548]	; (85804 <Cl_Dlsis_controller+0x370>)
   855e0:	795b      	ldrb	r3, [r3, #5]
   855e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   855e6:	4b87      	ldr	r3, [pc, #540]	; (85804 <Cl_Dlsis_controller+0x370>)
   855e8:	799b      	ldrb	r3, [r3, #6]
   855ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   855ee:	4b85      	ldr	r3, [pc, #532]	; (85804 <Cl_Dlsis_controller+0x370>)
   855f0:	79db      	ldrb	r3, [r3, #7]
   855f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   855f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   855f8:	4619      	mov	r1, r3
   855fa:	2001      	movs	r0, #1
   855fc:	4b86      	ldr	r3, [pc, #536]	; (85818 <Cl_Dlsis_controller+0x384>)
   855fe:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   85600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   85602:	461a      	mov	r2, r3
   85604:	4b80      	ldr	r3, [pc, #512]	; (85808 <Cl_Dlsis_controller+0x374>)
   85606:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   85608:	e003      	b.n	85612 <Cl_Dlsis_controller+0x17e>
		default:break;
   8560a:	bf00      	nop
   8560c:	e002      	b.n	85614 <Cl_Dlsis_controller+0x180>
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
				Treatdata[ID_heprate] = cl_temp.Twobyte;
				hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
			}
		break;
   8560e:	bf00      	nop
   85610:	e000      	b.n	85614 <Cl_Dlsis_controller+0x180>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   85612:	bf00      	nop
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   85614:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85618:	2b13      	cmp	r3, #19
   8561a:	d115      	bne.n	85648 <Cl_Dlsis_controller+0x1b4>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   8561c:	200c      	movs	r0, #12
   8561e:	4b7f      	ldr	r3, [pc, #508]	; (8581c <Cl_Dlsis_controller+0x388>)
   85620:	4798      	blx	r3
   85622:	4603      	mov	r3, r0
   85624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   85628:	200e      	movs	r0, #14
   8562a:	4b7c      	ldr	r3, [pc, #496]	; (8581c <Cl_Dlsis_controller+0x388>)
   8562c:	4798      	blx	r3
   8562e:	4603      	mov	r3, r0
   85630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   85634:	200d      	movs	r0, #13
   85636:	4b79      	ldr	r3, [pc, #484]	; (8581c <Cl_Dlsis_controller+0x388>)
   85638:	4798      	blx	r3
   8563a:	4603      	mov	r3, r0
   8563c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   85640:	4b77      	ldr	r3, [pc, #476]	; (85820 <Cl_Dlsis_controller+0x38c>)
   85642:	781a      	ldrb	r2, [r3, #0]
   85644:	4b77      	ldr	r3, [pc, #476]	; (85824 <Cl_Dlsis_controller+0x390>)
   85646:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   85648:	4b75      	ldr	r3, [pc, #468]	; (85820 <Cl_Dlsis_controller+0x38c>)
   8564a:	781b      	ldrb	r3, [r3, #0]
   8564c:	2b0a      	cmp	r3, #10
   8564e:	f200 864d 	bhi.w	862ec <Cl_Dlsis_controller+0xe58>
   85652:	a201      	add	r2, pc, #4	; (adr r2, 85658 <Cl_Dlsis_controller+0x1c4>)
   85654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85658:	00085685 	.word	0x00085685
   8565c:	000862ed 	.word	0x000862ed
   85660:	000858fd 	.word	0x000858fd
   85664:	00085929 	.word	0x00085929
   85668:	000859f9 	.word	0x000859f9
   8566c:	000859d5 	.word	0x000859d5
   85670:	00085fe3 	.word	0x00085fe3
   85674:	00085e99 	.word	0x00085e99
   85678:	00085e77 	.word	0x00085e77
   8567c:	00085eb5 	.word	0x00085eb5
   85680:	00085ed3 	.word	0x00085ed3
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   85684:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85688:	3b02      	subs	r3, #2
   8568a:	2b14      	cmp	r3, #20
   8568c:	f200 812d 	bhi.w	858ea <Cl_Dlsis_controller+0x456>
   85690:	a201      	add	r2, pc, #4	; (adr r2, 85698 <Cl_Dlsis_controller+0x204>)
   85692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85696:	bf00      	nop
   85698:	000856ed 	.word	0x000856ed
   8569c:	0008573b 	.word	0x0008573b
   856a0:	000858eb 	.word	0x000858eb
   856a4:	000858d9 	.word	0x000858d9
   856a8:	000858eb 	.word	0x000858eb
   856ac:	000858eb 	.word	0x000858eb
   856b0:	000858eb 	.word	0x000858eb
   856b4:	000858eb 	.word	0x000858eb
   856b8:	000858eb 	.word	0x000858eb
   856bc:	000858eb 	.word	0x000858eb
   856c0:	000858eb 	.word	0x000858eb
   856c4:	000858eb 	.word	0x000858eb
   856c8:	000858eb 	.word	0x000858eb
   856cc:	000858eb 	.word	0x000858eb
   856d0:	000858eb 	.word	0x000858eb
   856d4:	000858eb 	.word	0x000858eb
   856d8:	000858eb 	.word	0x000858eb
   856dc:	000858eb 	.word	0x000858eb
   856e0:	000858eb 	.word	0x000858eb
   856e4:	000858eb 	.word	0x000858eb
   856e8:	000858df 	.word	0x000858df
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   856ec:	4b45      	ldr	r3, [pc, #276]	; (85804 <Cl_Dlsis_controller+0x370>)
   856ee:	7e1b      	ldrb	r3, [r3, #24]
   856f0:	2b00      	cmp	r3, #0
   856f2:	f000 80fd 	beq.w	858f0 <Cl_Dlsis_controller+0x45c>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   856f6:	4b43      	ldr	r3, [pc, #268]	; (85804 <Cl_Dlsis_controller+0x370>)
   856f8:	791b      	ldrb	r3, [r3, #4]
   856fa:	2b04      	cmp	r3, #4
   856fc:	d000      	beq.n	85700 <Cl_Dlsis_controller+0x26c>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   856fe:	e01b      	b.n	85738 <Cl_Dlsis_controller+0x2a4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85700:	2316      	movs	r3, #22
   85702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85706:	2304      	movs	r3, #4
   85708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8570c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85710:	3301      	adds	r3, #1
   85712:	4619      	mov	r1, r3
   85714:	2004      	movs	r0, #4
   85716:	4b44      	ldr	r3, [pc, #272]	; (85828 <Cl_Dlsis_controller+0x394>)
   85718:	4798      	blx	r3
   8571a:	4603      	mov	r3, r0
   8571c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85720:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85724:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85728:	2202      	movs	r2, #2
   8572a:	4618      	mov	r0, r3
   8572c:	4b3f      	ldr	r3, [pc, #252]	; (8582c <Cl_Dlsis_controller+0x398>)
   8572e:	4798      	blx	r3
   85730:	4603      	mov	r3, r0
   85732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   85736:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   85738:	e0da      	b.n	858f0 <Cl_Dlsis_controller+0x45c>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   8573a:	4b32      	ldr	r3, [pc, #200]	; (85804 <Cl_Dlsis_controller+0x370>)
   8573c:	7e1b      	ldrb	r3, [r3, #24]
   8573e:	2b00      	cmp	r3, #0
   85740:	f000 80d9 	beq.w	858f6 <Cl_Dlsis_controller+0x462>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85744:	4b2f      	ldr	r3, [pc, #188]	; (85804 <Cl_Dlsis_controller+0x370>)
   85746:	795b      	ldrb	r3, [r3, #5]
   85748:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   8574c:	4b2d      	ldr	r3, [pc, #180]	; (85804 <Cl_Dlsis_controller+0x370>)
   8574e:	799b      	ldrb	r3, [r3, #6]
   85750:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85754:	4b2b      	ldr	r3, [pc, #172]	; (85804 <Cl_Dlsis_controller+0x370>)
   85756:	79db      	ldrb	r3, [r3, #7]
   85758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   8575c:	4b29      	ldr	r3, [pc, #164]	; (85804 <Cl_Dlsis_controller+0x370>)
   8575e:	7a1b      	ldrb	r3, [r3, #8]
   85760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   85764:	4b27      	ldr	r3, [pc, #156]	; (85804 <Cl_Dlsis_controller+0x370>)
   85766:	791b      	ldrb	r3, [r3, #4]
   85768:	3b05      	subs	r3, #5
   8576a:	2b20      	cmp	r3, #32
   8576c:	f200 80b2 	bhi.w	858d4 <Cl_Dlsis_controller+0x440>
   85770:	a201      	add	r2, pc, #4	; (adr r2, 85778 <Cl_Dlsis_controller+0x2e4>)
   85772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85776:	bf00      	nop
   85778:	000858d5 	.word	0x000858d5
   8577c:	000858d5 	.word	0x000858d5
   85780:	000858d5 	.word	0x000858d5
   85784:	000858d5 	.word	0x000858d5
   85788:	000858d5 	.word	0x000858d5
   8578c:	000858d5 	.word	0x000858d5
   85790:	000858d5 	.word	0x000858d5
   85794:	000858d5 	.word	0x000858d5
   85798:	000858d5 	.word	0x000858d5
   8579c:	000858d5 	.word	0x000858d5
   857a0:	000858d5 	.word	0x000858d5
   857a4:	000858d5 	.word	0x000858d5
   857a8:	000858d5 	.word	0x000858d5
   857ac:	000858d5 	.word	0x000858d5
   857b0:	000858d5 	.word	0x000858d5
   857b4:	000858d5 	.word	0x000858d5
   857b8:	000858d5 	.word	0x000858d5
   857bc:	000858d5 	.word	0x000858d5
   857c0:	000858d5 	.word	0x000858d5
   857c4:	00085831 	.word	0x00085831
   857c8:	00085849 	.word	0x00085849
   857cc:	00085861 	.word	0x00085861
   857d0:	00085871 	.word	0x00085871
   857d4:	00085881 	.word	0x00085881
   857d8:	00085891 	.word	0x00085891
   857dc:	000858d5 	.word	0x000858d5
   857e0:	000858d5 	.word	0x000858d5
   857e4:	000858d5 	.word	0x000858d5
   857e8:	000858d5 	.word	0x000858d5
   857ec:	000858a1 	.word	0x000858a1
   857f0:	000858ab 	.word	0x000858ab
   857f4:	000858b5 	.word	0x000858b5
   857f8:	000858c5 	.word	0x000858c5
   857fc:	00086315 	.word	0x00086315
   85800:	00083379 	.word	0x00083379
   85804:	20072f88 	.word	0x20072f88
   85808:	20073194 	.word	0x20073194
   8580c:	00083fed 	.word	0x00083fed
   85810:	20072d68 	.word	0x20072d68
   85814:	00092169 	.word	0x00092169
   85818:	00091a75 	.word	0x00091a75
   8581c:	00083051 	.word	0x00083051
   85820:	200720d0 	.word	0x200720d0
   85824:	2007318e 	.word	0x2007318e
   85828:	00097d7d 	.word	0x00097d7d
   8582c:	0009926d 	.word	0x0009926d
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85830:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85832:	4aab      	ldr	r2, [pc, #684]	; (85ae0 <Cl_Dlsis_controller+0x64c>)
   85834:	fba2 2303 	umull	r2, r3, r2, r3
   85838:	08da      	lsrs	r2, r3, #3
   8583a:	4baa      	ldr	r3, [pc, #680]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   8583c:	4610      	mov	r0, r2
   8583e:	4798      	blx	r3
   85840:	4602      	mov	r2, r0
   85842:	4ba9      	ldr	r3, [pc, #676]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   85844:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   85846:	e046      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85848:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8584a:	4aa5      	ldr	r2, [pc, #660]	; (85ae0 <Cl_Dlsis_controller+0x64c>)
   8584c:	fba2 2303 	umull	r2, r3, r2, r3
   85850:	08da      	lsrs	r2, r3, #3
   85852:	4ba4      	ldr	r3, [pc, #656]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   85854:	4610      	mov	r0, r2
   85856:	4798      	blx	r3
   85858:	4602      	mov	r2, r0
   8585a:	4ba3      	ldr	r3, [pc, #652]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   8585c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   8585e:	e03a      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85860:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85862:	4ba0      	ldr	r3, [pc, #640]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   85864:	4610      	mov	r0, r2
   85866:	4798      	blx	r3
   85868:	4602      	mov	r2, r0
   8586a:	4b9f      	ldr	r3, [pc, #636]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   8586c:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   8586e:	e032      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85870:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85872:	4b9c      	ldr	r3, [pc, #624]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   85874:	4610      	mov	r0, r2
   85876:	4798      	blx	r3
   85878:	4602      	mov	r2, r0
   8587a:	4b9b      	ldr	r3, [pc, #620]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   8587c:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   8587e:	e02a      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85880:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85882:	4b98      	ldr	r3, [pc, #608]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   85884:	4610      	mov	r0, r2
   85886:	4798      	blx	r3
   85888:	4602      	mov	r2, r0
   8588a:	4b97      	ldr	r3, [pc, #604]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   8588c:	615a      	str	r2, [r3, #20]
					break;
   8588e:	e022      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85890:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85892:	4b94      	ldr	r3, [pc, #592]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   85894:	4610      	mov	r0, r2
   85896:	4798      	blx	r3
   85898:	4602      	mov	r2, r0
   8589a:	4b93      	ldr	r3, [pc, #588]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   8589c:	611a      	str	r2, [r3, #16]
					break;
   8589e:	e01a      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   858a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   858a2:	b21a      	sxth	r2, r3
   858a4:	4b90      	ldr	r3, [pc, #576]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   858a6:	801a      	strh	r2, [r3, #0]
					break;
   858a8:	e015      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   858aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   858ac:	b21a      	sxth	r2, r3
   858ae:	4b8e      	ldr	r3, [pc, #568]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   858b0:	805a      	strh	r2, [r3, #2]
					break;
   858b2:	e010      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   858b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   858b6:	4b8b      	ldr	r3, [pc, #556]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   858b8:	4610      	mov	r0, r2
   858ba:	4798      	blx	r3
   858bc:	4602      	mov	r2, r0
   858be:	4b8a      	ldr	r3, [pc, #552]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   858c0:	60da      	str	r2, [r3, #12]
					break;
   858c2:	e008      	b.n	858d6 <Cl_Dlsis_controller+0x442>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   858c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   858c6:	4b87      	ldr	r3, [pc, #540]	; (85ae4 <Cl_Dlsis_controller+0x650>)
   858c8:	4610      	mov	r0, r2
   858ca:	4798      	blx	r3
   858cc:	4602      	mov	r2, r0
   858ce:	4b86      	ldr	r3, [pc, #536]	; (85ae8 <Cl_Dlsis_controller+0x654>)
   858d0:	609a      	str	r2, [r3, #8]
					break;
   858d2:	e000      	b.n	858d6 <Cl_Dlsis_controller+0x442>

					default:break;
   858d4:	bf00      	nop
				}
			}
			
			
			break;
   858d6:	e00e      	b.n	858f6 <Cl_Dlsis_controller+0x462>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   858d8:	4b84      	ldr	r3, [pc, #528]	; (85aec <Cl_Dlsis_controller+0x658>)
   858da:	4798      	blx	r3
			break;
   858dc:	e00c      	b.n	858f8 <Cl_Dlsis_controller+0x464>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   858de:	4b84      	ldr	r3, [pc, #528]	; (85af0 <Cl_Dlsis_controller+0x65c>)
   858e0:	4798      	blx	r3
   858e2:	4603      	mov	r3, r0
   858e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
   858e8:	e006      	b.n	858f8 <Cl_Dlsis_controller+0x464>
			default:
			break;
   858ea:	bf00      	nop
   858ec:	f000 bd01 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
							
						default:
						break;
					}
				}
			break;
   858f0:	bf00      	nop
   858f2:	f000 bcfe 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
					default:break;
				}
			}
			
			
			break;
   858f6:	bf00      	nop
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
		}
		break;
   858f8:	f000 bcfb 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   858fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85900:	2b12      	cmp	r3, #18
   85902:	d000      	beq.n	85906 <Cl_Dlsis_controller+0x472>
				
					}
				break;
				
				
				default:break;
   85904:	e00e      	b.n	85924 <Cl_Dlsis_controller+0x490>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
				
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   85906:	487b      	ldr	r0, [pc, #492]	; (85af4 <Cl_Dlsis_controller+0x660>)
   85908:	4b7b      	ldr	r3, [pc, #492]	; (85af8 <Cl_Dlsis_controller+0x664>)
   8590a:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   8590c:	2300      	movs	r3, #0
   8590e:	84fb      	strh	r3, [r7, #38]	; 0x26
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
   85910:	f107 0326 	add.w	r3, r7, #38	; 0x26
   85914:	4619      	mov	r1, r3
   85916:	2007      	movs	r0, #7
   85918:	4b78      	ldr	r3, [pc, #480]	; (85afc <Cl_Dlsis_controller+0x668>)
   8591a:	4798      	blx	r3
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					//if( (temp == 0))
					{
				
						cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   8591c:	4b78      	ldr	r3, [pc, #480]	; (85b00 <Cl_Dlsis_controller+0x66c>)
   8591e:	2203      	movs	r2, #3
   85920:	701a      	strb	r2, [r3, #0]
				
				

				
					}
				break;
   85922:	bf00      	nop
				
				
				default:break;
			}

		break;
   85924:	f000 bce5 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   85928:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   8592c:	2b12      	cmp	r3, #18
   8592e:	d000      	beq.n	85932 <Cl_Dlsis_controller+0x49e>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					}
			break;
			default:break;
   85930:	e04e      	b.n	859d0 <Cl_Dlsis_controller+0x53c>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   85932:	2300      	movs	r3, #0
   85934:	84bb      	strh	r3, [r7, #36]	; 0x24
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85936:	f107 0324 	add.w	r3, r7, #36	; 0x24
   8593a:	4619      	mov	r1, r3
   8593c:	200a      	movs	r0, #10
   8593e:	4b6f      	ldr	r3, [pc, #444]	; (85afc <Cl_Dlsis_controller+0x668>)
   85940:	4798      	blx	r3
					if( temp == 1)  // need to change as per the blood detector status
   85942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   85944:	2b01      	cmp	r3, #1
   85946:	d142      	bne.n	859ce <Cl_Dlsis_controller+0x53a>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   85948:	2208      	movs	r2, #8
   8594a:	496e      	ldr	r1, [pc, #440]	; (85b04 <Cl_Dlsis_controller+0x670>)
   8594c:	2018      	movs	r0, #24
   8594e:	4b6e      	ldr	r3, [pc, #440]	; (85b08 <Cl_Dlsis_controller+0x674>)
   85950:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,1000);
   85952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   85956:	2006      	movs	r0, #6
   85958:	4b6c      	ldr	r3, [pc, #432]	; (85b0c <Cl_Dlsis_controller+0x678>)
   8595a:	4798      	blx	r3
							cl_wait(100);
   8595c:	2064      	movs	r0, #100	; 0x64
   8595e:	4b6c      	ldr	r3, [pc, #432]	; (85b10 <Cl_Dlsis_controller+0x67c>)
   85960:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   85962:	2100      	movs	r1, #0
   85964:	200a      	movs	r0, #10
   85966:	4b69      	ldr	r3, [pc, #420]	; (85b0c <Cl_Dlsis_controller+0x678>)
   85968:	4798      	blx	r3
							cl_wait(100);
   8596a:	2064      	movs	r0, #100	; 0x64
   8596c:	4b68      	ldr	r3, [pc, #416]	; (85b10 <Cl_Dlsis_controller+0x67c>)
   8596e:	4798      	blx	r3
							Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   85970:	4b68      	ldr	r3, [pc, #416]	; (85b14 <Cl_Dlsis_controller+0x680>)
   85972:	69db      	ldr	r3, [r3, #28]
   85974:	623b      	str	r3, [r7, #32]
							hep_calibration(temp1);
   85976:	6a3b      	ldr	r3, [r7, #32]
   85978:	4618      	mov	r0, r3
   8597a:	4b67      	ldr	r3, [pc, #412]	; (85b18 <Cl_Dlsis_controller+0x684>)
   8597c:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8597e:	f107 0320 	add.w	r3, r7, #32
   85982:	2202      	movs	r2, #2
   85984:	4619      	mov	r1, r3
   85986:	2019      	movs	r0, #25
   85988:	4b5f      	ldr	r3, [pc, #380]	; (85b08 <Cl_Dlsis_controller+0x674>)
   8598a:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   8598c:	2202      	movs	r2, #2
   8598e:	4963      	ldr	r1, [pc, #396]	; (85b1c <Cl_Dlsis_controller+0x688>)
   85990:	2019      	movs	r0, #25
   85992:	4b5d      	ldr	r3, [pc, #372]	; (85b08 <Cl_Dlsis_controller+0x674>)
   85994:	4798      	blx	r3
							cl_wait(100);
   85996:	2064      	movs	r0, #100	; 0x64
   85998:	4b5d      	ldr	r3, [pc, #372]	; (85b10 <Cl_Dlsis_controller+0x67c>)
   8599a:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   8599c:	4b5f      	ldr	r3, [pc, #380]	; (85b1c <Cl_Dlsis_controller+0x688>)
   8599e:	681b      	ldr	r3, [r3, #0]
   859a0:	4619      	mov	r1, r3
   859a2:	2006      	movs	r0, #6
   859a4:	4b59      	ldr	r3, [pc, #356]	; (85b0c <Cl_Dlsis_controller+0x678>)
   859a6:	4798      	blx	r3
							cl_wait(100);
   859a8:	2064      	movs	r0, #100	; 0x64
   859aa:	4b59      	ldr	r3, [pc, #356]	; (85b10 <Cl_Dlsis_controller+0x67c>)
   859ac:	4798      	blx	r3
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   859ae:	2100      	movs	r1, #0
   859b0:	200a      	movs	r0, #10
   859b2:	4b56      	ldr	r3, [pc, #344]	; (85b0c <Cl_Dlsis_controller+0x678>)
   859b4:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   859b6:	4b5a      	ldr	r3, [pc, #360]	; (85b20 <Cl_Dlsis_controller+0x68c>)
   859b8:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   859ba:	2100      	movs	r1, #0
   859bc:	2002      	movs	r0, #2
   859be:	4b59      	ldr	r3, [pc, #356]	; (85b24 <Cl_Dlsis_controller+0x690>)
   859c0:	4798      	blx	r3
						cl_wait(100);
   859c2:	2064      	movs	r0, #100	; 0x64
   859c4:	4b52      	ldr	r3, [pc, #328]	; (85b10 <Cl_Dlsis_controller+0x67c>)
   859c6:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   859c8:	4b4d      	ldr	r3, [pc, #308]	; (85b00 <Cl_Dlsis_controller+0x66c>)
   859ca:	2204      	movs	r2, #4
   859cc:	701a      	strb	r2, [r3, #0]
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					}
			break;
   859ce:	bf00      	nop
			default:break;
		}
		break;
   859d0:	f000 bc8f 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   859d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   859d8:	2b13      	cmp	r3, #19
   859da:	d000      	beq.n	859de <Cl_Dlsis_controller+0x54a>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   859dc:	e00a      	b.n	859f4 <Cl_Dlsis_controller+0x560>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   859de:	4b52      	ldr	r3, [pc, #328]	; (85b28 <Cl_Dlsis_controller+0x694>)
   859e0:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   859e2:	f640 11c4 	movw	r1, #2500	; 0x9c4
   859e6:	2001      	movs	r0, #1
   859e8:	4b4e      	ldr	r3, [pc, #312]	; (85b24 <Cl_Dlsis_controller+0x690>)
   859ea:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   859ec:	4b44      	ldr	r3, [pc, #272]	; (85b00 <Cl_Dlsis_controller+0x66c>)
   859ee:	2204      	movs	r2, #4
   859f0:	701a      	strb	r2, [r3, #0]
			break;
   859f2:	bf00      	nop
			default:break;
		}
		
		break;
   859f4:	f000 bc7d 	b.w	862f2 <Cl_Dlsis_controller+0xe5e>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   859f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   859fc:	3b02      	subs	r3, #2
   859fe:	2b1d      	cmp	r3, #29
   85a00:	f200 8476 	bhi.w	862f0 <Cl_Dlsis_controller+0xe5c>
   85a04:	a201      	add	r2, pc, #4	; (adr r2, 85a0c <Cl_Dlsis_controller+0x578>)
   85a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a0a:	bf00      	nop
   85a0c:	00085a91 	.word	0x00085a91
   85a10:	00085b39 	.word	0x00085b39
   85a14:	000862f1 	.word	0x000862f1
   85a18:	000862f1 	.word	0x000862f1
   85a1c:	00085daf 	.word	0x00085daf
   85a20:	00085e29 	.word	0x00085e29
   85a24:	00085e35 	.word	0x00085e35
   85a28:	00085e3b 	.word	0x00085e3b
   85a2c:	000862f1 	.word	0x000862f1
   85a30:	000862f1 	.word	0x000862f1
   85a34:	000862f1 	.word	0x000862f1
   85a38:	000862f1 	.word	0x000862f1
   85a3c:	000862f1 	.word	0x000862f1
   85a40:	000862f1 	.word	0x000862f1
   85a44:	000862f1 	.word	0x000862f1
   85a48:	00085e67 	.word	0x00085e67
   85a4c:	00085e67 	.word	0x00085e67
   85a50:	00085cc7 	.word	0x00085cc7
   85a54:	000862f1 	.word	0x000862f1
   85a58:	000862f1 	.word	0x000862f1
   85a5c:	00085e41 	.word	0x00085e41
   85a60:	00085e4d 	.word	0x00085e4d
   85a64:	000862f1 	.word	0x000862f1
   85a68:	000862f1 	.word	0x000862f1
   85a6c:	000862f1 	.word	0x000862f1
   85a70:	00085e67 	.word	0x00085e67
   85a74:	00085e67 	.word	0x00085e67
   85a78:	000862f1 	.word	0x000862f1
   85a7c:	000862f1 	.word	0x000862f1
   85a80:	00085a85 	.word	0x00085a85
		{
			

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85a84:	4b29      	ldr	r3, [pc, #164]	; (85b2c <Cl_Dlsis_controller+0x698>)
   85a86:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85a88:	4b1d      	ldr	r3, [pc, #116]	; (85b00 <Cl_Dlsis_controller+0x66c>)
   85a8a:	2207      	movs	r2, #7
   85a8c:	701a      	strb	r2, [r3, #0]
			break;
   85a8e:	e1f1      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85a90:	4b27      	ldr	r3, [pc, #156]	; (85b30 <Cl_Dlsis_controller+0x69c>)
   85a92:	7e1b      	ldrb	r3, [r3, #24]
   85a94:	2b00      	cmp	r3, #0
   85a96:	f000 81e8 	beq.w	85e6a <Cl_Dlsis_controller+0x9d6>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85a9a:	4b25      	ldr	r3, [pc, #148]	; (85b30 <Cl_Dlsis_controller+0x69c>)
   85a9c:	791b      	ldrb	r3, [r3, #4]
   85a9e:	2b04      	cmp	r3, #4
   85aa0:	d000      	beq.n	85aa4 <Cl_Dlsis_controller+0x610>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85aa2:	e01b      	b.n	85adc <Cl_Dlsis_controller+0x648>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85aa4:	2316      	movs	r3, #22
   85aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85aaa:	2304      	movs	r3, #4
   85aac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85ab4:	3301      	adds	r3, #1
   85ab6:	4619      	mov	r1, r3
   85ab8:	2004      	movs	r0, #4
   85aba:	4b1e      	ldr	r3, [pc, #120]	; (85b34 <Cl_Dlsis_controller+0x6a0>)
   85abc:	4798      	blx	r3
   85abe:	4603      	mov	r3, r0
   85ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85ac4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85acc:	2202      	movs	r2, #2
   85ace:	4618      	mov	r0, r3
   85ad0:	4b0d      	ldr	r3, [pc, #52]	; (85b08 <Cl_Dlsis_controller+0x674>)
   85ad2:	4798      	blx	r3
   85ad4:	4603      	mov	r3, r0
   85ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   85ada:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85adc:	e1c5      	b.n	85e6a <Cl_Dlsis_controller+0x9d6>
   85ade:	bf00      	nop
   85ae0:	cccccccd 	.word	0xcccccccd
   85ae4:	000a33a1 	.word	0x000a33a1
   85ae8:	20072cf8 	.word	0x20072cf8
   85aec:	000877d9 	.word	0x000877d9
   85af0:	00086e19 	.word	0x00086e19
   85af4:	200720e9 	.word	0x200720e9
   85af8:	00088941 	.word	0x00088941
   85afc:	0008d61d 	.word	0x0008d61d
   85b00:	200720d0 	.word	0x200720d0
   85b04:	000a546c 	.word	0x000a546c
   85b08:	0009926d 	.word	0x0009926d
   85b0c:	00092169 	.word	0x00092169
   85b10:	000918fd 	.word	0x000918fd
   85b14:	20073194 	.word	0x20073194
   85b18:	00083fed 	.word	0x00083fed
   85b1c:	20072d68 	.word	0x20072d68
   85b20:	000976c5 	.word	0x000976c5
   85b24:	0009381d 	.word	0x0009381d
   85b28:	00086e61 	.word	0x00086e61
   85b2c:	00086dc5 	.word	0x00086dc5
   85b30:	20072f88 	.word	0x20072f88
   85b34:	00097d7d 	.word	0x00097d7d
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85b38:	4ba2      	ldr	r3, [pc, #648]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b3a:	7e1b      	ldrb	r3, [r3, #24]
   85b3c:	2b00      	cmp	r3, #0
   85b3e:	f000 8196 	beq.w	85e6e <Cl_Dlsis_controller+0x9da>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85b42:	4ba0      	ldr	r3, [pc, #640]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b44:	795b      	ldrb	r3, [r3, #5]
   85b46:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85b48:	4b9e      	ldr	r3, [pc, #632]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b4a:	799b      	ldrb	r3, [r3, #6]
   85b4c:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85b4e:	4b9d      	ldr	r3, [pc, #628]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b50:	79db      	ldrb	r3, [r3, #7]
   85b52:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85b54:	4b9b      	ldr	r3, [pc, #620]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b56:	7a1b      	ldrb	r3, [r3, #8]
   85b58:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85b5a:	4b9a      	ldr	r3, [pc, #616]	; (85dc4 <Cl_Dlsis_controller+0x930>)
   85b5c:	791b      	ldrb	r3, [r3, #4]
   85b5e:	3b05      	subs	r3, #5
   85b60:	2b20      	cmp	r3, #32
   85b62:	f200 80ae 	bhi.w	85cc2 <Cl_Dlsis_controller+0x82e>
   85b66:	a201      	add	r2, pc, #4	; (adr r2, 85b6c <Cl_Dlsis_controller+0x6d8>)
   85b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85b6c:	00085cc3 	.word	0x00085cc3
   85b70:	00085cc3 	.word	0x00085cc3
   85b74:	00085cc3 	.word	0x00085cc3
   85b78:	00085cc3 	.word	0x00085cc3
   85b7c:	00085cc3 	.word	0x00085cc3
   85b80:	00085cc3 	.word	0x00085cc3
   85b84:	00085cc3 	.word	0x00085cc3
   85b88:	00085cc3 	.word	0x00085cc3
   85b8c:	00085bf1 	.word	0x00085bf1
   85b90:	00085cc3 	.word	0x00085cc3
   85b94:	00085cc3 	.word	0x00085cc3
   85b98:	00085cc3 	.word	0x00085cc3
   85b9c:	00085cc3 	.word	0x00085cc3
   85ba0:	00085cc3 	.word	0x00085cc3
   85ba4:	00085cc3 	.word	0x00085cc3
   85ba8:	00085cc3 	.word	0x00085cc3
   85bac:	00085c0f 	.word	0x00085c0f
   85bb0:	00085cc3 	.word	0x00085cc3
   85bb4:	00085cc3 	.word	0x00085cc3
   85bb8:	00085c1f 	.word	0x00085c1f
   85bbc:	00085c37 	.word	0x00085c37
   85bc0:	00085c4f 	.word	0x00085c4f
   85bc4:	00085c5f 	.word	0x00085c5f
   85bc8:	00085c6f 	.word	0x00085c6f
   85bcc:	00085c7f 	.word	0x00085c7f
   85bd0:	00085cc3 	.word	0x00085cc3
   85bd4:	00085cc3 	.word	0x00085cc3
   85bd8:	00085cc3 	.word	0x00085cc3
   85bdc:	00085cc3 	.word	0x00085cc3
   85be0:	00085c8f 	.word	0x00085c8f
   85be4:	00085c99 	.word	0x00085c99
   85be8:	00085ca3 	.word	0x00085ca3
   85bec:	00085cb3 	.word	0x00085cb3
													case ID_setcond:
													break;
													case ID_ufrate:
													break;
													case ID_ufgoal:
													if(cl_temp.word == 0){
   85bf0:	69fb      	ldr	r3, [r7, #28]
   85bf2:	2b00      	cmp	r3, #0
   85bf4:	d103      	bne.n	85bfe <Cl_Dlsis_controller+0x76a>
														cl_uf_controller(CL_UF_EVENT_STOP,0);
   85bf6:	2100      	movs	r1, #0
   85bf8:	2004      	movs	r0, #4
   85bfa:	4b73      	ldr	r3, [pc, #460]	; (85dc8 <Cl_Dlsis_controller+0x934>)
   85bfc:	4798      	blx	r3
													}
													Treatdata[ID_ufgoal] = cl_temp.word;
   85bfe:	69fb      	ldr	r3, [r7, #28]
   85c00:	4a72      	ldr	r2, [pc, #456]	; (85dcc <Cl_Dlsis_controller+0x938>)
   85c02:	6353      	str	r3, [r2, #52]	; 0x34
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85c04:	2100      	movs	r1, #0
   85c06:	2008      	movs	r0, #8
   85c08:	4b6f      	ldr	r3, [pc, #444]	; (85dc8 <Cl_Dlsis_controller+0x934>)
   85c0a:	4798      	blx	r3
													
													break;
   85c0c:	e05a      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_heparincheck:
													break;
													case ID_minufrate:
													break;
													case ID_treattime:
													Treatdata[ID_treattime] = cl_temp.word;
   85c0e:	69fb      	ldr	r3, [r7, #28]
   85c10:	4a6e      	ldr	r2, [pc, #440]	; (85dcc <Cl_Dlsis_controller+0x938>)
   85c12:	6553      	str	r3, [r2, #84]	; 0x54
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85c14:	2100      	movs	r1, #0
   85c16:	2008      	movs	r0, #8
   85c18:	4b6b      	ldr	r3, [pc, #428]	; (85dc8 <Cl_Dlsis_controller+0x934>)
   85c1a:	4798      	blx	r3
													
													break;
   85c1c:	e052      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85c1e:	69fb      	ldr	r3, [r7, #28]
   85c20:	4a6b      	ldr	r2, [pc, #428]	; (85dd0 <Cl_Dlsis_controller+0x93c>)
   85c22:	fba2 2303 	umull	r2, r3, r2, r3
   85c26:	08da      	lsrs	r2, r3, #3
   85c28:	4b6a      	ldr	r3, [pc, #424]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c2a:	4610      	mov	r0, r2
   85c2c:	4798      	blx	r3
   85c2e:	4602      	mov	r2, r0
   85c30:	4b69      	ldr	r3, [pc, #420]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c32:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   85c34:	e046      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85c36:	69fb      	ldr	r3, [r7, #28]
   85c38:	4a65      	ldr	r2, [pc, #404]	; (85dd0 <Cl_Dlsis_controller+0x93c>)
   85c3a:	fba2 2303 	umull	r2, r3, r2, r3
   85c3e:	08da      	lsrs	r2, r3, #3
   85c40:	4b64      	ldr	r3, [pc, #400]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c42:	4610      	mov	r0, r2
   85c44:	4798      	blx	r3
   85c46:	4602      	mov	r2, r0
   85c48:	4b63      	ldr	r3, [pc, #396]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c4a:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   85c4c:	e03a      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85c4e:	69fa      	ldr	r2, [r7, #28]
   85c50:	4b60      	ldr	r3, [pc, #384]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c52:	4610      	mov	r0, r2
   85c54:	4798      	blx	r3
   85c56:	4602      	mov	r2, r0
   85c58:	4b5f      	ldr	r3, [pc, #380]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c5a:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   85c5c:	e032      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85c5e:	69fa      	ldr	r2, [r7, #28]
   85c60:	4b5c      	ldr	r3, [pc, #368]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c62:	4610      	mov	r0, r2
   85c64:	4798      	blx	r3
   85c66:	4602      	mov	r2, r0
   85c68:	4b5b      	ldr	r3, [pc, #364]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c6a:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   85c6c:	e02a      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85c6e:	69fa      	ldr	r2, [r7, #28]
   85c70:	4b58      	ldr	r3, [pc, #352]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c72:	4610      	mov	r0, r2
   85c74:	4798      	blx	r3
   85c76:	4602      	mov	r2, r0
   85c78:	4b57      	ldr	r3, [pc, #348]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c7a:	615a      	str	r2, [r3, #20]
													break;
   85c7c:	e022      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85c7e:	69fa      	ldr	r2, [r7, #28]
   85c80:	4b54      	ldr	r3, [pc, #336]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85c82:	4610      	mov	r0, r2
   85c84:	4798      	blx	r3
   85c86:	4602      	mov	r2, r0
   85c88:	4b53      	ldr	r3, [pc, #332]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c8a:	611a      	str	r2, [r3, #16]
													break;
   85c8c:	e01a      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85c8e:	69fb      	ldr	r3, [r7, #28]
   85c90:	b21a      	sxth	r2, r3
   85c92:	4b51      	ldr	r3, [pc, #324]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c94:	801a      	strh	r2, [r3, #0]
													break;
   85c96:	e015      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85c98:	69fb      	ldr	r3, [r7, #28]
   85c9a:	b21a      	sxth	r2, r3
   85c9c:	4b4e      	ldr	r3, [pc, #312]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85c9e:	805a      	strh	r2, [r3, #2]
													break;
   85ca0:	e010      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85ca2:	69fa      	ldr	r2, [r7, #28]
   85ca4:	4b4b      	ldr	r3, [pc, #300]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85ca6:	4610      	mov	r0, r2
   85ca8:	4798      	blx	r3
   85caa:	4602      	mov	r2, r0
   85cac:	4b4a      	ldr	r3, [pc, #296]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85cae:	60da      	str	r2, [r3, #12]
													break;
   85cb0:	e008      	b.n	85cc4 <Cl_Dlsis_controller+0x830>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85cb2:	69fa      	ldr	r2, [r7, #28]
   85cb4:	4b47      	ldr	r3, [pc, #284]	; (85dd4 <Cl_Dlsis_controller+0x940>)
   85cb6:	4610      	mov	r0, r2
   85cb8:	4798      	blx	r3
   85cba:	4602      	mov	r2, r0
   85cbc:	4b46      	ldr	r3, [pc, #280]	; (85dd8 <Cl_Dlsis_controller+0x944>)
   85cbe:	609a      	str	r2, [r3, #8]
													break;
   85cc0:	e000      	b.n	85cc4 <Cl_Dlsis_controller+0x830>

												default:break;
   85cc2:	bf00      	nop
											}
										}
						
			break;
   85cc4:	e0d3      	b.n	85e6e <Cl_Dlsis_controller+0x9da>
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85cc6:	4b45      	ldr	r3, [pc, #276]	; (85ddc <Cl_Dlsis_controller+0x948>)
   85cc8:	4798      	blx	r3
			//	UpdateHeaterControls();
				//cl_uf_controller(CL_UF_EVENT_SECOND,0);
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   85cca:	2100      	movs	r1, #0
   85ccc:	200d      	movs	r0, #13
   85cce:	4b44      	ldr	r3, [pc, #272]	; (85de0 <Cl_Dlsis_controller+0x94c>)
   85cd0:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   85cd2:	4b44      	ldr	r3, [pc, #272]	; (85de4 <Cl_Dlsis_controller+0x950>)
   85cd4:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   85cd6:	4b44      	ldr	r3, [pc, #272]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85cd8:	781b      	ldrb	r3, [r3, #0]
   85cda:	3301      	adds	r3, #1
   85cdc:	b2da      	uxtb	r2, r3
   85cde:	4b42      	ldr	r3, [pc, #264]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85ce0:	701a      	strb	r2, [r3, #0]
			/*	if ((DlsisTime.Cl_dlsissecondscounter == 30)&&(flag_bc == 1))
				{
					sv_cs_setpotvalue(1900);
					flag_bc =0 ;
				}*/
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   85ce2:	4b41      	ldr	r3, [pc, #260]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85ce4:	781b      	ldrb	r3, [r3, #0]
   85ce6:	2b3c      	cmp	r3, #60	; 0x3c
   85ce8:	d13f      	bne.n	85d6a <Cl_Dlsis_controller+0x8d6>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   85cea:	4b40      	ldr	r3, [pc, #256]	; (85dec <Cl_Dlsis_controller+0x958>)
   85cec:	4798      	blx	r3
   85cee:	4603      	mov	r3, r0
   85cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					DlsisTime.Cl_dlsissecondscounter = 0;
   85cf4:	4b3c      	ldr	r3, [pc, #240]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85cf6:	2200      	movs	r2, #0
   85cf8:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   85cfa:	4b3b      	ldr	r3, [pc, #236]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85cfc:	785b      	ldrb	r3, [r3, #1]
   85cfe:	3301      	adds	r3, #1
   85d00:	b2da      	uxtb	r2, r3
   85d02:	4b39      	ldr	r3, [pc, #228]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85d04:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   85d06:	4b38      	ldr	r3, [pc, #224]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85d08:	785b      	ldrb	r3, [r3, #1]
   85d0a:	2b01      	cmp	r3, #1
   85d0c:	d127      	bne.n	85d5e <Cl_Dlsis_controller+0x8ca>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   85d0e:	2300      	movs	r3, #0
   85d10:	837b      	strh	r3, [r7, #26]
   85d12:	2300      	movs	r3, #0
   85d14:	833b      	strh	r3, [r7, #24]
   85d16:	2300      	movs	r3, #0
   85d18:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   85d1a:	4b35      	ldr	r3, [pc, #212]	; (85df0 <Cl_Dlsis_controller+0x95c>)
   85d1c:	681a      	ldr	r2, [r3, #0]
   85d1e:	4b35      	ldr	r3, [pc, #212]	; (85df4 <Cl_Dlsis_controller+0x960>)
   85d20:	4610      	mov	r0, r2
   85d22:	4798      	blx	r3
   85d24:	4603      	mov	r3, r0
   85d26:	b29b      	uxth	r3, r3
   85d28:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   85d2a:	2204      	movs	r2, #4
   85d2c:	4932      	ldr	r1, [pc, #200]	; (85df8 <Cl_Dlsis_controller+0x964>)
   85d2e:	2018      	movs	r0, #24
   85d30:	4b32      	ldr	r3, [pc, #200]	; (85dfc <Cl_Dlsis_controller+0x968>)
   85d32:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   85d34:	f107 031a 	add.w	r3, r7, #26
   85d38:	2202      	movs	r2, #2
   85d3a:	4619      	mov	r1, r3
   85d3c:	2019      	movs	r0, #25
   85d3e:	4b2f      	ldr	r3, [pc, #188]	; (85dfc <Cl_Dlsis_controller+0x968>)
   85d40:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   85d42:	f107 0318 	add.w	r3, r7, #24
   85d46:	2202      	movs	r2, #2
   85d48:	4619      	mov	r1, r3
   85d4a:	2019      	movs	r0, #25
   85d4c:	4b2b      	ldr	r3, [pc, #172]	; (85dfc <Cl_Dlsis_controller+0x968>)
   85d4e:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   85d50:	f107 0316 	add.w	r3, r7, #22
   85d54:	2202      	movs	r2, #2
   85d56:	4619      	mov	r1, r3
   85d58:	2019      	movs	r0, #25
   85d5a:	4b28      	ldr	r3, [pc, #160]	; (85dfc <Cl_Dlsis_controller+0x968>)
   85d5c:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85d5e:	4b22      	ldr	r3, [pc, #136]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85d60:	78db      	ldrb	r3, [r3, #3]
   85d62:	3301      	adds	r3, #1
   85d64:	b2da      	uxtb	r2, r3
   85d66:	4b20      	ldr	r3, [pc, #128]	; (85de8 <Cl_Dlsis_controller+0x954>)
   85d68:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85d6a:	4b25      	ldr	r3, [pc, #148]	; (85e00 <Cl_Dlsis_controller+0x96c>)
   85d6c:	4798      	blx	r3
   85d6e:	4603      	mov	r3, r0
   85d70:	2b00      	cmp	r3, #0
   85d72:	d17e      	bne.n	85e72 <Cl_Dlsis_controller+0x9de>
				{
					sv_cntrl_setgreenalarm();
   85d74:	4b23      	ldr	r3, [pc, #140]	; (85e04 <Cl_Dlsis_controller+0x970>)
   85d76:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85d78:	4b23      	ldr	r3, [pc, #140]	; (85e08 <Cl_Dlsis_controller+0x974>)
   85d7a:	4798      	blx	r3
   85d7c:	4603      	mov	r3, r0
   85d7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					sv_cntrl_poweroffheater();
   85d82:	4b22      	ldr	r3, [pc, #136]	; (85e0c <Cl_Dlsis_controller+0x978>)
   85d84:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85d86:	2004      	movs	r0, #4
   85d88:	4b21      	ldr	r3, [pc, #132]	; (85e10 <Cl_Dlsis_controller+0x97c>)
   85d8a:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85d8c:	2011      	movs	r0, #17
   85d8e:	4b21      	ldr	r3, [pc, #132]	; (85e14 <Cl_Dlsis_controller+0x980>)
   85d90:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   85d92:	4b21      	ldr	r3, [pc, #132]	; (85e18 <Cl_Dlsis_controller+0x984>)
   85d94:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85d96:	2100      	movs	r1, #0
   85d98:	2004      	movs	r0, #4
   85d9a:	4b0b      	ldr	r3, [pc, #44]	; (85dc8 <Cl_Dlsis_controller+0x934>)
   85d9c:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85d9e:	2100      	movs	r1, #0
   85da0:	200c      	movs	r0, #12
   85da2:	4b0f      	ldr	r3, [pc, #60]	; (85de0 <Cl_Dlsis_controller+0x94c>)
   85da4:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85da6:	4b1d      	ldr	r3, [pc, #116]	; (85e1c <Cl_Dlsis_controller+0x988>)
   85da8:	2206      	movs	r2, #6
   85daa:	701a      	strb	r2, [r3, #0]
				}
			break;
   85dac:	e061      	b.n	85e72 <Cl_Dlsis_controller+0x9de>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   85dae:	4b1c      	ldr	r3, [pc, #112]	; (85e20 <Cl_Dlsis_controller+0x98c>)
   85db0:	4798      	blx	r3
   85db2:	4603      	mov	r3, r0
   85db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Cl_Dlsis_StopDialysis();
   85db8:	4b1a      	ldr	r3, [pc, #104]	; (85e24 <Cl_Dlsis_controller+0x990>)
   85dba:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85dbc:	4b17      	ldr	r3, [pc, #92]	; (85e1c <Cl_Dlsis_controller+0x988>)
   85dbe:	2209      	movs	r2, #9
   85dc0:	701a      	strb	r2, [r3, #0]
			break;
   85dc2:	e057      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
   85dc4:	20072f88 	.word	0x20072f88
   85dc8:	0009381d 	.word	0x0009381d
   85dcc:	20073194 	.word	0x20073194
   85dd0:	cccccccd 	.word	0xcccccccd
   85dd4:	000a33a1 	.word	0x000a33a1
   85dd8:	20072cf8 	.word	0x20072cf8
   85ddc:	00086e61 	.word	0x00086e61
   85de0:	00092169 	.word	0x00092169
   85de4:	00086fd1 	.word	0x00086fd1
   85de8:	20072d74 	.word	0x20072d74
   85dec:	000864f5 	.word	0x000864f5
   85df0:	20072cf0 	.word	0x20072cf0
   85df4:	000a3829 	.word	0x000a3829
   85df8:	000a5478 	.word	0x000a5478
   85dfc:	0009926d 	.word	0x0009926d
   85e00:	0008656d 	.word	0x0008656d
   85e04:	00097771 	.word	0x00097771
   85e08:	0008659d 	.word	0x0008659d
   85e0c:	000974dd 	.word	0x000974dd
   85e10:	00088a8d 	.word	0x00088a8d
   85e14:	000976e1 	.word	0x000976e1
   85e18:	00086e41 	.word	0x00086e41
   85e1c:	200720d0 	.word	0x200720d0
   85e20:	0009769d 	.word	0x0009769d
   85e24:	00086a19 	.word	0x00086a19
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   85e28:	4baf      	ldr	r3, [pc, #700]	; (860e8 <Cl_Dlsis_controller+0xc54>)
   85e2a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85e2c:	4baf      	ldr	r3, [pc, #700]	; (860ec <Cl_Dlsis_controller+0xc58>)
   85e2e:	2207      	movs	r2, #7
   85e30:	701a      	strb	r2, [r3, #0]
			break;
   85e32:	e01f      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   85e34:	4bae      	ldr	r3, [pc, #696]	; (860f0 <Cl_Dlsis_controller+0xc5c>)
   85e36:	4798      	blx	r3
			break;
   85e38:	e01c      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   85e3a:	4bae      	ldr	r3, [pc, #696]	; (860f4 <Cl_Dlsis_controller+0xc60>)
   85e3c:	4798      	blx	r3
			break;
   85e3e:	e019      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85e40:	4bad      	ldr	r3, [pc, #692]	; (860f8 <Cl_Dlsis_controller+0xc64>)
   85e42:	4798      	blx	r3
   85e44:	4603      	mov	r3, r0
   85e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
   85e4a:	e013      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   85e4c:	f107 033d 	add.w	r3, r7, #61	; 0x3d
   85e50:	4619      	mov	r1, r3
   85e52:	2011      	movs	r0, #17
   85e54:	4ba9      	ldr	r3, [pc, #676]	; (860fc <Cl_Dlsis_controller+0xc68>)
   85e56:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   85e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   85e5c:	4619      	mov	r1, r3
   85e5e:	200e      	movs	r0, #14
   85e60:	4ba6      	ldr	r3, [pc, #664]	; (860fc <Cl_Dlsis_controller+0xc68>)
   85e62:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   85e64:	e006      	b.n	85e74 <Cl_Dlsis_controller+0x9e0>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   85e66:	bf00      	nop
   85e68:	e242      	b.n	862f0 <Cl_Dlsis_controller+0xe5c>

						default:
						break;
					}
				}
			break;
   85e6a:	bf00      	nop
   85e6c:	e240      	b.n	862f0 <Cl_Dlsis_controller+0xe5c>

												default:break;
											}
										}
						
			break;
   85e6e:	bf00      	nop
   85e70:	e23e      	b.n	862f0 <Cl_Dlsis_controller+0xe5c>
					Cl_DlsisFillingFlowOff();
					cl_uf_controller(CL_UF_EVENT_STOP,0);
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
				}
			break;
   85e72:	bf00      	nop
					//	}
			break;


		}
		break;
   85e74:	e23c      	b.n	862f0 <Cl_Dlsis_controller+0xe5c>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   85e76:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e7a:	2b09      	cmp	r3, #9
   85e7c:	d008      	beq.n	85e90 <Cl_Dlsis_controller+0x9fc>
   85e7e:	2b16      	cmp	r3, #22
   85e80:	d000      	beq.n	85e84 <Cl_Dlsis_controller+0x9f0>
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
										break;
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
										break;
										default:break;
   85e82:	e008      	b.n	85e96 <Cl_Dlsis_controller+0xa02>
		break;
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85e84:	4b9c      	ldr	r3, [pc, #624]	; (860f8 <Cl_Dlsis_controller+0xc64>)
   85e86:	4798      	blx	r3
   85e88:	4603      	mov	r3, r0
   85e8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										break;
   85e8e:	e002      	b.n	85e96 <Cl_Dlsis_controller+0xa02>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   85e90:	4b98      	ldr	r3, [pc, #608]	; (860f4 <Cl_Dlsis_controller+0xc60>)
   85e92:	4798      	blx	r3
										break;
   85e94:	bf00      	nop
										default:break;
									}

					
		break;
   85e96:	e22c      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   85e98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85e9c:	2b05      	cmp	r3, #5
   85e9e:	d002      	beq.n	85ea6 <Cl_Dlsis_controller+0xa12>
   85ea0:	2b06      	cmp	r3, #6
   85ea2:	d003      	beq.n	85eac <Cl_Dlsis_controller+0xa18>
								Cl_Dlsis_ResumeDialysis();
								break;
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
								break;
								default:break;
   85ea4:	e005      	b.n	85eb2 <Cl_Dlsis_controller+0xa1e>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   85ea6:	4b96      	ldr	r3, [pc, #600]	; (86100 <Cl_Dlsis_controller+0xc6c>)
   85ea8:	4798      	blx	r3
								break;
   85eaa:	e002      	b.n	85eb2 <Cl_Dlsis_controller+0xa1e>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   85eac:	4b95      	ldr	r3, [pc, #596]	; (86104 <Cl_Dlsis_controller+0xc70>)
   85eae:	4798      	blx	r3
								break;
   85eb0:	bf00      	nop
								default:break;
							}
		
		break;
   85eb2:	e21e      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   85eb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85eb8:	2b04      	cmp	r3, #4
   85eba:	d005      	beq.n	85ec8 <Cl_Dlsis_controller+0xa34>
   85ebc:	2b05      	cmp	r3, #5
   85ebe:	d000      	beq.n	85ec2 <Cl_Dlsis_controller+0xa2e>
								Cl_Dlsis_StartDialysis();
								break;
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
								break;
								default:break;
   85ec0:	e006      	b.n	85ed0 <Cl_Dlsis_controller+0xa3c>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   85ec2:	4b91      	ldr	r3, [pc, #580]	; (86108 <Cl_Dlsis_controller+0xc74>)
   85ec4:	4798      	blx	r3
								break;
   85ec6:	e003      	b.n	85ed0 <Cl_Dlsis_controller+0xa3c>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   85ec8:	2056      	movs	r0, #86	; 0x56
   85eca:	4b90      	ldr	r3, [pc, #576]	; (8610c <Cl_Dlsis_controller+0xc78>)
   85ecc:	4798      	blx	r3
								break;
   85ece:	bf00      	nop
								default:break;
							}
							
		break;
   85ed0:	e20f      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   85ed2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85ed6:	3b01      	subs	r3, #1
   85ed8:	2b19      	cmp	r3, #25
   85eda:	d87e      	bhi.n	85fda <Cl_Dlsis_controller+0xb46>
   85edc:	a201      	add	r2, pc, #4	; (adr r2, 85ee4 <Cl_Dlsis_controller+0xa50>)
   85ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85ee2:	bf00      	nop
   85ee4:	00085fa5 	.word	0x00085fa5
   85ee8:	00085f53 	.word	0x00085f53
   85eec:	00085fdb 	.word	0x00085fdb
   85ef0:	00085fdb 	.word	0x00085fdb
   85ef4:	00085f4d 	.word	0x00085f4d
   85ef8:	00085fdb 	.word	0x00085fdb
   85efc:	00085fdb 	.word	0x00085fdb
   85f00:	00085fcf 	.word	0x00085fcf
   85f04:	00085fd5 	.word	0x00085fd5
   85f08:	00085fdb 	.word	0x00085fdb
   85f0c:	00085fdb 	.word	0x00085fdb
   85f10:	00085fdb 	.word	0x00085fdb
   85f14:	00085fdb 	.word	0x00085fdb
   85f18:	00085fdb 	.word	0x00085fdb
   85f1c:	00085fdb 	.word	0x00085fdb
   85f20:	00085fdb 	.word	0x00085fdb
   85f24:	00085fdb 	.word	0x00085fdb
   85f28:	00085fdb 	.word	0x00085fdb
   85f2c:	00085f9f 	.word	0x00085f9f
   85f30:	00085fdb 	.word	0x00085fdb
   85f34:	00085fdb 	.word	0x00085fdb
   85f38:	00085fc3 	.word	0x00085fc3
   85f3c:	00085fdb 	.word	0x00085fdb
   85f40:	00085fdb 	.word	0x00085fdb
   85f44:	00085fdb 	.word	0x00085fdb
   85f48:	00085fdb 	.word	0x00085fdb
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   85f4c:	4b6c      	ldr	r3, [pc, #432]	; (86100 <Cl_Dlsis_controller+0xc6c>)
   85f4e:	4798      	blx	r3
						break;
   85f50:	e046      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   85f52:	4b6f      	ldr	r3, [pc, #444]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   85f54:	7e1b      	ldrb	r3, [r3, #24]
   85f56:	2b00      	cmp	r3, #0
   85f58:	d041      	beq.n	85fde <Cl_Dlsis_controller+0xb4a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   85f5a:	4b6d      	ldr	r3, [pc, #436]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   85f5c:	791b      	ldrb	r3, [r3, #4]
   85f5e:	2b04      	cmp	r3, #4
   85f60:	d000      	beq.n	85f64 <Cl_Dlsis_controller+0xad0>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   85f62:	e01b      	b.n	85f9c <Cl_Dlsis_controller+0xb08>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   85f64:	2316      	movs	r3, #22
   85f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85f6a:	2304      	movs	r3, #4
   85f6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85f70:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85f74:	3301      	adds	r3, #1
   85f76:	4619      	mov	r1, r3
   85f78:	2004      	movs	r0, #4
   85f7a:	4b66      	ldr	r3, [pc, #408]	; (86114 <Cl_Dlsis_controller+0xc80>)
   85f7c:	4798      	blx	r3
   85f7e:	4603      	mov	r3, r0
   85f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85f84:	f107 0134 	add.w	r1, r7, #52	; 0x34
   85f88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85f8c:	2202      	movs	r2, #2
   85f8e:	4618      	mov	r0, r3
   85f90:	4b61      	ldr	r3, [pc, #388]	; (86118 <Cl_Dlsis_controller+0xc84>)
   85f92:	4798      	blx	r3
   85f94:	4603      	mov	r3, r0
   85f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
									break;
   85f9a:	bf00      	nop

									default:
									break;
								}
							}
						break;
   85f9c:	e01f      	b.n	85fde <Cl_Dlsis_controller+0xb4a>
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   85f9e:	4b5f      	ldr	r3, [pc, #380]	; (8611c <Cl_Dlsis_controller+0xc88>)
   85fa0:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   85fa2:	e01d      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_CLR_ALARM:
										sv_cntrl_resetredalarm();
   85fa4:	4b5e      	ldr	r3, [pc, #376]	; (86120 <Cl_Dlsis_controller+0xc8c>)
   85fa6:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   85fa8:	4b5e      	ldr	r3, [pc, #376]	; (86124 <Cl_Dlsis_controller+0xc90>)
   85faa:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   85fac:	4b5e      	ldr	r3, [pc, #376]	; (86128 <Cl_Dlsis_controller+0xc94>)
   85fae:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   85fb0:	2100      	movs	r1, #0
   85fb2:	2002      	movs	r0, #2
   85fb4:	4b5d      	ldr	r3, [pc, #372]	; (8612c <Cl_Dlsis_controller+0xc98>)
   85fb6:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   85fb8:	4b5d      	ldr	r3, [pc, #372]	; (86130 <Cl_Dlsis_controller+0xc9c>)
   85fba:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   85fbc:	4b4d      	ldr	r3, [pc, #308]	; (860f4 <Cl_Dlsis_controller+0xc60>)
   85fbe:	4798      	blx	r3
						break;
   85fc0:	e00e      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85fc2:	4b4d      	ldr	r3, [pc, #308]	; (860f8 <Cl_Dlsis_controller+0xc64>)
   85fc4:	4798      	blx	r3
   85fc6:	4603      	mov	r3, r0
   85fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   85fcc:	e008      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   85fce:	4b48      	ldr	r3, [pc, #288]	; (860f0 <Cl_Dlsis_controller+0xc5c>)
   85fd0:	4798      	blx	r3
						break;
   85fd2:	e005      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   85fd4:	4b47      	ldr	r3, [pc, #284]	; (860f4 <Cl_Dlsis_controller+0xc60>)
   85fd6:	4798      	blx	r3
						break;
   85fd8:	e002      	b.n	85fe0 <Cl_Dlsis_controller+0xb4c>
						
						default:break;
   85fda:	bf00      	nop
   85fdc:	e189      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>

									default:
									break;
								}
							}
						break;
   85fde:	bf00      	nop
						Cl_Dlsis_BypassOff();
						break;
						
						default:break;
					}
		break;
   85fe0:	e187      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   85fe2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   85fe6:	3b02      	subs	r3, #2
   85fe8:	2b20      	cmp	r3, #32
   85fea:	f200 8177 	bhi.w	862dc <Cl_Dlsis_controller+0xe48>
   85fee:	a201      	add	r2, pc, #4	; (adr r2, 85ff4 <Cl_Dlsis_controller+0xb60>)
   85ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85ff4:	00086079 	.word	0x00086079
   85ff8:	0008617b 	.word	0x0008617b
   85ffc:	000862dd 	.word	0x000862dd
   86000:	000862dd 	.word	0x000862dd
   86004:	000862dd 	.word	0x000862dd
   86008:	000862dd 	.word	0x000862dd
   8600c:	000862dd 	.word	0x000862dd
   86010:	000862dd 	.word	0x000862dd
   86014:	000862dd 	.word	0x000862dd
   86018:	000862dd 	.word	0x000862dd
   8601c:	000862dd 	.word	0x000862dd
   86020:	000862dd 	.word	0x000862dd
   86024:	000862dd 	.word	0x000862dd
   86028:	000862dd 	.word	0x000862dd
   8602c:	000862dd 	.word	0x000862dd
   86030:	000862dd 	.word	0x000862dd
   86034:	000862dd 	.word	0x000862dd
   86038:	000862dd 	.word	0x000862dd
   8603c:	000862dd 	.word	0x000862dd
   86040:	000862dd 	.word	0x000862dd
   86044:	000862dd 	.word	0x000862dd
   86048:	000862dd 	.word	0x000862dd
   8604c:	000862dd 	.word	0x000862dd
   86050:	000862dd 	.word	0x000862dd
   86054:	000862dd 	.word	0x000862dd
   86058:	000862dd 	.word	0x000862dd
   8605c:	000862dd 	.word	0x000862dd
   86060:	00086145 	.word	0x00086145
   86064:	000860d3 	.word	0x000860d3
   86068:	000860dd 	.word	0x000860dd
   8606c:	00086079 	.word	0x00086079
   86070:	000860bb 	.word	0x000860bb
   86074:	000860c9 	.word	0x000860c9
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   86078:	4b25      	ldr	r3, [pc, #148]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   8607a:	7e1b      	ldrb	r3, [r3, #24]
   8607c:	2b00      	cmp	r3, #0
   8607e:	f000 812f 	beq.w	862e0 <Cl_Dlsis_controller+0xe4c>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   86082:	4b23      	ldr	r3, [pc, #140]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   86084:	791b      	ldrb	r3, [r3, #4]
   86086:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86088:	4b21      	ldr	r3, [pc, #132]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   8608a:	795b      	ldrb	r3, [r3, #5]
   8608c:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8608e:	4b20      	ldr	r3, [pc, #128]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   86090:	799b      	ldrb	r3, [r3, #6]
   86092:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86094:	4b1e      	ldr	r3, [pc, #120]	; (86110 <Cl_Dlsis_controller+0xc7c>)
   86096:	79db      	ldrb	r3, [r3, #7]
   86098:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   8609a:	8a3b      	ldrh	r3, [r7, #16]
   8609c:	461a      	mov	r2, r3
   8609e:	4b25      	ldr	r3, [pc, #148]	; (86134 <Cl_Dlsis_controller+0xca0>)
   860a0:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   860a2:	4b24      	ldr	r3, [pc, #144]	; (86134 <Cl_Dlsis_controller+0xca0>)
   860a4:	69db      	ldr	r3, [r3, #28]
   860a6:	4618      	mov	r0, r3
   860a8:	4b23      	ldr	r3, [pc, #140]	; (86138 <Cl_Dlsis_controller+0xca4>)
   860aa:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   860ac:	4b23      	ldr	r3, [pc, #140]	; (8613c <Cl_Dlsis_controller+0xca8>)
   860ae:	681b      	ldr	r3, [r3, #0]
   860b0:	4619      	mov	r1, r3
   860b2:	2006      	movs	r0, #6
   860b4:	4b22      	ldr	r3, [pc, #136]	; (86140 <Cl_Dlsis_controller+0xcac>)
   860b6:	4798      	blx	r3
							}
						break;
   860b8:	e112      	b.n	862e0 <Cl_Dlsis_controller+0xe4c>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   860ba:	4b20      	ldr	r3, [pc, #128]	; (8613c <Cl_Dlsis_controller+0xca8>)
   860bc:	681b      	ldr	r3, [r3, #0]
   860be:	4619      	mov	r1, r3
   860c0:	200a      	movs	r0, #10
   860c2:	4b1f      	ldr	r3, [pc, #124]	; (86140 <Cl_Dlsis_controller+0xcac>)
   860c4:	4798      	blx	r3
						break;
   860c6:	e110      	b.n	862ea <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   860c8:	2100      	movs	r1, #0
   860ca:	2009      	movs	r0, #9
   860cc:	4b1c      	ldr	r3, [pc, #112]	; (86140 <Cl_Dlsis_controller+0xcac>)
   860ce:	4798      	blx	r3
						break;
   860d0:	e10b      	b.n	862ea <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   860d2:	2100      	movs	r1, #0
   860d4:	2002      	movs	r0, #2
   860d6:	4b15      	ldr	r3, [pc, #84]	; (8612c <Cl_Dlsis_controller+0xc98>)
   860d8:	4798      	blx	r3
						break;
   860da:	e106      	b.n	862ea <Cl_Dlsis_controller+0xe56>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   860dc:	2100      	movs	r1, #0
   860de:	2004      	movs	r0, #4
   860e0:	4b12      	ldr	r3, [pc, #72]	; (8612c <Cl_Dlsis_controller+0xc98>)
   860e2:	4798      	blx	r3
						break;
   860e4:	e101      	b.n	862ea <Cl_Dlsis_controller+0xe56>
   860e6:	bf00      	nop
   860e8:	00086dc5 	.word	0x00086dc5
   860ec:	200720d0 	.word	0x200720d0
   860f0:	00086af1 	.word	0x00086af1
   860f4:	00086c49 	.word	0x00086c49
   860f8:	00086e19 	.word	0x00086e19
   860fc:	00083095 	.word	0x00083095
   86100:	00087855 	.word	0x00087855
   86104:	00086a19 	.word	0x00086a19
   86108:	000877d9 	.word	0x000877d9
   8610c:	0008a479 	.word	0x0008a479
   86110:	20072f88 	.word	0x20072f88
   86114:	00097d7d 	.word	0x00097d7d
   86118:	0009926d 	.word	0x0009926d
   8611c:	00086fd1 	.word	0x00086fd1
   86120:	00097799 	.word	0x00097799
   86124:	000977ad 	.word	0x000977ad
   86128:	000977d5 	.word	0x000977d5
   8612c:	00091a75 	.word	0x00091a75
   86130:	0009763d 	.word	0x0009763d
   86134:	20073194 	.word	0x20073194
   86138:	00083fed 	.word	0x00083fed
   8613c:	20072d68 	.word	0x20072d68
   86140:	00092169 	.word	0x00092169
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   86144:	4b6d      	ldr	r3, [pc, #436]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86146:	7e1b      	ldrb	r3, [r3, #24]
   86148:	2b00      	cmp	r3, #0
   8614a:	f000 80cb 	beq.w	862e4 <Cl_Dlsis_controller+0xe50>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8614e:	4b6b      	ldr	r3, [pc, #428]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86150:	791b      	ldrb	r3, [r3, #4]
   86152:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86154:	4b69      	ldr	r3, [pc, #420]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86156:	795b      	ldrb	r3, [r3, #5]
   86158:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8615a:	4b68      	ldr	r3, [pc, #416]	; (862fc <Cl_Dlsis_controller+0xe68>)
   8615c:	799b      	ldrb	r3, [r3, #6]
   8615e:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86160:	4b66      	ldr	r3, [pc, #408]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86162:	79db      	ldrb	r3, [r3, #7]
   86164:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   86166:	89bb      	ldrh	r3, [r7, #12]
   86168:	4619      	mov	r1, r3
   8616a:	2001      	movs	r0, #1
   8616c:	4b64      	ldr	r3, [pc, #400]	; (86300 <Cl_Dlsis_controller+0xe6c>)
   8616e:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   86170:	89bb      	ldrh	r3, [r7, #12]
   86172:	461a      	mov	r2, r3
   86174:	4b63      	ldr	r3, [pc, #396]	; (86304 <Cl_Dlsis_controller+0xe70>)
   86176:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   86178:	e0b4      	b.n	862e4 <Cl_Dlsis_controller+0xe50>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   8617a:	4b60      	ldr	r3, [pc, #384]	; (862fc <Cl_Dlsis_controller+0xe68>)
   8617c:	7e1b      	ldrb	r3, [r3, #24]
   8617e:	2b00      	cmp	r3, #0
   86180:	f000 80b2 	beq.w	862e8 <Cl_Dlsis_controller+0xe54>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   86184:	4b5d      	ldr	r3, [pc, #372]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86186:	795b      	ldrb	r3, [r3, #5]
   86188:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   8618a:	4b5c      	ldr	r3, [pc, #368]	; (862fc <Cl_Dlsis_controller+0xe68>)
   8618c:	799b      	ldrb	r3, [r3, #6]
   8618e:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   86190:	4b5a      	ldr	r3, [pc, #360]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86192:	79db      	ldrb	r3, [r3, #7]
   86194:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   86196:	4b59      	ldr	r3, [pc, #356]	; (862fc <Cl_Dlsis_controller+0xe68>)
   86198:	7a1b      	ldrb	r3, [r3, #8]
   8619a:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   8619c:	4b57      	ldr	r3, [pc, #348]	; (862fc <Cl_Dlsis_controller+0xe68>)
   8619e:	791b      	ldrb	r3, [r3, #4]
   861a0:	3b05      	subs	r3, #5
   861a2:	2b20      	cmp	r3, #32
   861a4:	f200 8098 	bhi.w	862d8 <Cl_Dlsis_controller+0xe44>
   861a8:	a201      	add	r2, pc, #4	; (adr r2, 861b0 <Cl_Dlsis_controller+0xd1c>)
   861aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   861ae:	bf00      	nop
   861b0:	000862d9 	.word	0x000862d9
   861b4:	000862d9 	.word	0x000862d9
   861b8:	000862d9 	.word	0x000862d9
   861bc:	000862d9 	.word	0x000862d9
   861c0:	000862d9 	.word	0x000862d9
   861c4:	000862d9 	.word	0x000862d9
   861c8:	000862d9 	.word	0x000862d9
   861cc:	000862d9 	.word	0x000862d9
   861d0:	000862d9 	.word	0x000862d9
   861d4:	000862d9 	.word	0x000862d9
   861d8:	000862d9 	.word	0x000862d9
   861dc:	000862d9 	.word	0x000862d9
   861e0:	000862d9 	.word	0x000862d9
   861e4:	000862d9 	.word	0x000862d9
   861e8:	000862d9 	.word	0x000862d9
   861ec:	000862d9 	.word	0x000862d9
   861f0:	000862d9 	.word	0x000862d9
   861f4:	000862d9 	.word	0x000862d9
   861f8:	000862d9 	.word	0x000862d9
   861fc:	00086235 	.word	0x00086235
   86200:	0008624d 	.word	0x0008624d
   86204:	00086265 	.word	0x00086265
   86208:	00086275 	.word	0x00086275
   8620c:	00086285 	.word	0x00086285
   86210:	00086295 	.word	0x00086295
   86214:	000862d9 	.word	0x000862d9
   86218:	000862d9 	.word	0x000862d9
   8621c:	000862d9 	.word	0x000862d9
   86220:	000862d9 	.word	0x000862d9
   86224:	000862a5 	.word	0x000862a5
   86228:	000862af 	.word	0x000862af
   8622c:	000862b9 	.word	0x000862b9
   86230:	000862c9 	.word	0x000862c9
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   86234:	68bb      	ldr	r3, [r7, #8]
   86236:	4a34      	ldr	r2, [pc, #208]	; (86308 <Cl_Dlsis_controller+0xe74>)
   86238:	fba2 2303 	umull	r2, r3, r2, r3
   8623c:	08da      	lsrs	r2, r3, #3
   8623e:	4b33      	ldr	r3, [pc, #204]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86240:	4610      	mov	r0, r2
   86242:	4798      	blx	r3
   86244:	4602      	mov	r2, r0
   86246:	4b32      	ldr	r3, [pc, #200]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   86248:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   8624a:	e046      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   8624c:	68bb      	ldr	r3, [r7, #8]
   8624e:	4a2e      	ldr	r2, [pc, #184]	; (86308 <Cl_Dlsis_controller+0xe74>)
   86250:	fba2 2303 	umull	r2, r3, r2, r3
   86254:	08da      	lsrs	r2, r3, #3
   86256:	4b2d      	ldr	r3, [pc, #180]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86258:	4610      	mov	r0, r2
   8625a:	4798      	blx	r3
   8625c:	4602      	mov	r2, r0
   8625e:	4b2c      	ldr	r3, [pc, #176]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   86260:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   86262:	e03a      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   86264:	68ba      	ldr	r2, [r7, #8]
   86266:	4b29      	ldr	r3, [pc, #164]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86268:	4610      	mov	r0, r2
   8626a:	4798      	blx	r3
   8626c:	4602      	mov	r2, r0
   8626e:	4b28      	ldr	r3, [pc, #160]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   86270:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   86272:	e032      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   86274:	68ba      	ldr	r2, [r7, #8]
   86276:	4b25      	ldr	r3, [pc, #148]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86278:	4610      	mov	r0, r2
   8627a:	4798      	blx	r3
   8627c:	4602      	mov	r2, r0
   8627e:	4b24      	ldr	r3, [pc, #144]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   86280:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   86282:	e02a      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   86284:	68ba      	ldr	r2, [r7, #8]
   86286:	4b21      	ldr	r3, [pc, #132]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86288:	4610      	mov	r0, r2
   8628a:	4798      	blx	r3
   8628c:	4602      	mov	r2, r0
   8628e:	4b20      	ldr	r3, [pc, #128]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   86290:	615a      	str	r2, [r3, #20]
											break;
   86292:	e022      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86294:	68ba      	ldr	r2, [r7, #8]
   86296:	4b1d      	ldr	r3, [pc, #116]	; (8630c <Cl_Dlsis_controller+0xe78>)
   86298:	4610      	mov	r0, r2
   8629a:	4798      	blx	r3
   8629c:	4602      	mov	r2, r0
   8629e:	4b1c      	ldr	r3, [pc, #112]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   862a0:	611a      	str	r2, [r3, #16]
											break;
   862a2:	e01a      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   862a4:	68bb      	ldr	r3, [r7, #8]
   862a6:	b21a      	sxth	r2, r3
   862a8:	4b19      	ldr	r3, [pc, #100]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   862aa:	801a      	strh	r2, [r3, #0]
											break;
   862ac:	e015      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   862ae:	68bb      	ldr	r3, [r7, #8]
   862b0:	b21a      	sxth	r2, r3
   862b2:	4b17      	ldr	r3, [pc, #92]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   862b4:	805a      	strh	r2, [r3, #2]
											break;
   862b6:	e010      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   862b8:	68ba      	ldr	r2, [r7, #8]
   862ba:	4b14      	ldr	r3, [pc, #80]	; (8630c <Cl_Dlsis_controller+0xe78>)
   862bc:	4610      	mov	r0, r2
   862be:	4798      	blx	r3
   862c0:	4602      	mov	r2, r0
   862c2:	4b13      	ldr	r3, [pc, #76]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   862c4:	60da      	str	r2, [r3, #12]
											break;
   862c6:	e008      	b.n	862da <Cl_Dlsis_controller+0xe46>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   862c8:	68ba      	ldr	r2, [r7, #8]
   862ca:	4b10      	ldr	r3, [pc, #64]	; (8630c <Cl_Dlsis_controller+0xe78>)
   862cc:	4610      	mov	r0, r2
   862ce:	4798      	blx	r3
   862d0:	4602      	mov	r2, r0
   862d2:	4b0f      	ldr	r3, [pc, #60]	; (86310 <Cl_Dlsis_controller+0xe7c>)
   862d4:	609a      	str	r2, [r3, #8]
											
											break;
   862d6:	e000      	b.n	862da <Cl_Dlsis_controller+0xe46>

											default:break;
   862d8:	bf00      	nop
											}
										
										}
			
						break;
   862da:	e005      	b.n	862e8 <Cl_Dlsis_controller+0xe54>
						default:
						break;
   862dc:	bf00      	nop
   862de:	e008      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
								Treatdata[ID_heprate] = cl_temp.Twobyte;
								hep_calibration(Treatdata[ID_heprate]);
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
							}
						break;
   862e0:	bf00      	nop
   862e2:	e006      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
						}
						break;
   862e4:	bf00      	nop
   862e6:	e004      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
											default:break;
											}
										
										}
			
						break;
   862e8:	bf00      	nop
						default:
						break;
					}
		break;
   862ea:	e002      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
		default:break;
   862ec:	bf00      	nop
   862ee:	e000      	b.n	862f2 <Cl_Dlsis_controller+0xe5e>
					//	}
			break;


		}
		break;
   862f0:	bf00      	nop
		default:break;
	}



return CL_OK;
   862f2:	2300      	movs	r3, #0
}
   862f4:	4618      	mov	r0, r3
   862f6:	3748      	adds	r7, #72	; 0x48
   862f8:	46bd      	mov	sp, r7
   862fa:	bd80      	pop	{r7, pc}
   862fc:	20072f88 	.word	0x20072f88
   86300:	00091a75 	.word	0x00091a75
   86304:	20073194 	.word	0x20073194
   86308:	cccccccd 	.word	0xcccccccd
   8630c:	000a33a1 	.word	0x000a33a1
   86310:	20072cf8 	.word	0x20072cf8

00086314 <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   86314:	b480      	push	{r7}
   86316:	b083      	sub	sp, #12
   86318:	af00      	add	r7, sp, #0
   8631a:	4603      	mov	r3, r0
   8631c:	6039      	str	r1, [r7, #0]
   8631e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   86320:	79fb      	ldrb	r3, [r7, #7]
   86322:	3b07      	subs	r3, #7
   86324:	2b36      	cmp	r3, #54	; 0x36
   86326:	f200 80dd 	bhi.w	864e4 <cl_dlsis_translatemacevent+0x1d0>
   8632a:	a201      	add	r2, pc, #4	; (adr r2, 86330 <cl_dlsis_translatemacevent+0x1c>)
   8632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86330:	0008643d 	.word	0x0008643d
   86334:	000864e5 	.word	0x000864e5
   86338:	000864e5 	.word	0x000864e5
   8633c:	0008641d 	.word	0x0008641d
   86340:	00086425 	.word	0x00086425
   86344:	00086415 	.word	0x00086415
   86348:	00086435 	.word	0x00086435
   8634c:	0008642d 	.word	0x0008642d
   86350:	000864e5 	.word	0x000864e5
   86354:	000864e5 	.word	0x000864e5
   86358:	000864e5 	.word	0x000864e5
   8635c:	000864e5 	.word	0x000864e5
   86360:	000864e5 	.word	0x000864e5
   86364:	000864e5 	.word	0x000864e5
   86368:	000864cd 	.word	0x000864cd
   8636c:	000864e5 	.word	0x000864e5
   86370:	00086445 	.word	0x00086445
   86374:	0008644d 	.word	0x0008644d
   86378:	00086455 	.word	0x00086455
   8637c:	0008645d 	.word	0x0008645d
   86380:	00086465 	.word	0x00086465
   86384:	000864e5 	.word	0x000864e5
   86388:	000864e5 	.word	0x000864e5
   8638c:	000864e5 	.word	0x000864e5
   86390:	000864e5 	.word	0x000864e5
   86394:	000864e5 	.word	0x000864e5
   86398:	000864a5 	.word	0x000864a5
   8639c:	000864ad 	.word	0x000864ad
   863a0:	000864b5 	.word	0x000864b5
   863a4:	000864bd 	.word	0x000864bd
   863a8:	000864c5 	.word	0x000864c5
   863ac:	000864e5 	.word	0x000864e5
   863b0:	000864d5 	.word	0x000864d5
   863b4:	000864dd 	.word	0x000864dd
   863b8:	0008640d 	.word	0x0008640d
   863bc:	000864e5 	.word	0x000864e5
   863c0:	000864e5 	.word	0x000864e5
   863c4:	000864e5 	.word	0x000864e5
   863c8:	0008649d 	.word	0x0008649d
   863cc:	00086495 	.word	0x00086495
   863d0:	000864e5 	.word	0x000864e5
   863d4:	000864e5 	.word	0x000864e5
   863d8:	000864e5 	.word	0x000864e5
   863dc:	000864e5 	.word	0x000864e5
   863e0:	000864e5 	.word	0x000864e5
   863e4:	000864e5 	.word	0x000864e5
   863e8:	000864e5 	.word	0x000864e5
   863ec:	000864e5 	.word	0x000864e5
   863f0:	000864e5 	.word	0x000864e5
   863f4:	0008646d 	.word	0x0008646d
   863f8:	000864e5 	.word	0x000864e5
   863fc:	00086475 	.word	0x00086475
   86400:	0008647d 	.word	0x0008647d
   86404:	00086485 	.word	0x00086485
   86408:	0008648d 	.word	0x0008648d
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   8640c:	683b      	ldr	r3, [r7, #0]
   8640e:	2201      	movs	r2, #1
   86410:	701a      	strb	r2, [r3, #0]
		break;
   86412:	e068      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   86414:	683b      	ldr	r3, [r7, #0]
   86416:	221d      	movs	r2, #29
   86418:	701a      	strb	r2, [r3, #0]
		break;
   8641a:	e064      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   8641c:	683b      	ldr	r3, [r7, #0]
   8641e:	221e      	movs	r2, #30
   86420:	701a      	strb	r2, [r3, #0]
		break;
   86422:	e060      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   86424:	683b      	ldr	r3, [r7, #0]
   86426:	221f      	movs	r2, #31
   86428:	701a      	strb	r2, [r3, #0]
		break;
   8642a:	e05c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   8642c:	683b      	ldr	r3, [r7, #0]
   8642e:	2202      	movs	r2, #2
   86430:	701a      	strb	r2, [r3, #0]
		break;
   86432:	e058      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   86434:	683b      	ldr	r3, [r7, #0]
   86436:	2203      	movs	r2, #3
   86438:	701a      	strb	r2, [r3, #0]
		break;
   8643a:	e054      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   8643c:	683b      	ldr	r3, [r7, #0]
   8643e:	2204      	movs	r2, #4
   86440:	701a      	strb	r2, [r3, #0]
		break;
   86442:	e050      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   86444:	683b      	ldr	r3, [r7, #0]
   86446:	2205      	movs	r2, #5
   86448:	701a      	strb	r2, [r3, #0]
		break;
   8644a:	e04c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   8644c:	683b      	ldr	r3, [r7, #0]
   8644e:	2206      	movs	r2, #6
   86450:	701a      	strb	r2, [r3, #0]
		break;
   86452:	e048      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   86454:	683b      	ldr	r3, [r7, #0]
   86456:	2207      	movs	r2, #7
   86458:	701a      	strb	r2, [r3, #0]
		break;
   8645a:	e044      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   8645c:	683b      	ldr	r3, [r7, #0]
   8645e:	2208      	movs	r2, #8
   86460:	701a      	strb	r2, [r3, #0]
		break;
   86462:	e040      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86464:	683b      	ldr	r3, [r7, #0]
   86466:	2209      	movs	r2, #9
   86468:	701a      	strb	r2, [r3, #0]
		break;
   8646a:	e03c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   8646c:	683b      	ldr	r3, [r7, #0]
   8646e:	2211      	movs	r2, #17
   86470:	701a      	strb	r2, [r3, #0]
		break;
   86472:	e038      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86474:	683b      	ldr	r3, [r7, #0]
   86476:	2212      	movs	r2, #18
   86478:	701a      	strb	r2, [r3, #0]
		break;
   8647a:	e034      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   8647c:	683b      	ldr	r3, [r7, #0]
   8647e:	2213      	movs	r2, #19
   86480:	701a      	strb	r2, [r3, #0]
		break;
   86482:	e030      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   86484:	683b      	ldr	r3, [r7, #0]
   86486:	2214      	movs	r2, #20
   86488:	701a      	strb	r2, [r3, #0]
		break;
   8648a:	e02c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   8648c:	683b      	ldr	r3, [r7, #0]
   8648e:	2215      	movs	r2, #21
   86490:	701a      	strb	r2, [r3, #0]
		break;
   86492:	e028      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   86494:	683b      	ldr	r3, [r7, #0]
   86496:	2216      	movs	r2, #22
   86498:	701a      	strb	r2, [r3, #0]
		break;
   8649a:	e024      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   8649c:	683b      	ldr	r3, [r7, #0]
   8649e:	2217      	movs	r2, #23
   864a0:	701a      	strb	r2, [r3, #0]
		break;
   864a2:	e020      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   864a4:	683b      	ldr	r3, [r7, #0]
   864a6:	2219      	movs	r2, #25
   864a8:	701a      	strb	r2, [r3, #0]

		break;
   864aa:	e01c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   864ac:	683b      	ldr	r3, [r7, #0]
   864ae:	221a      	movs	r2, #26
   864b0:	701a      	strb	r2, [r3, #0]
		break;
   864b2:	e018      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   864b4:	683b      	ldr	r3, [r7, #0]
   864b6:	221a      	movs	r2, #26
   864b8:	701a      	strb	r2, [r3, #0]
		break;
   864ba:	e014      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   864bc:	683b      	ldr	r3, [r7, #0]
   864be:	221b      	movs	r2, #27
   864c0:	701a      	strb	r2, [r3, #0]
		break;
   864c2:	e010      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   864c4:	683b      	ldr	r3, [r7, #0]
   864c6:	221c      	movs	r2, #28
   864c8:	701a      	strb	r2, [r3, #0]
		break;
   864ca:	e00c      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   864cc:	683b      	ldr	r3, [r7, #0]
   864ce:	2220      	movs	r2, #32
   864d0:	701a      	strb	r2, [r3, #0]
		break;
   864d2:	e008      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   864d4:	683b      	ldr	r3, [r7, #0]
   864d6:	2221      	movs	r2, #33	; 0x21
   864d8:	701a      	strb	r2, [r3, #0]
		break;
   864da:	e004      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   864dc:	683b      	ldr	r3, [r7, #0]
   864de:	2222      	movs	r2, #34	; 0x22
   864e0:	701a      	strb	r2, [r3, #0]
		break;
   864e2:	e000      	b.n	864e6 <cl_dlsis_translatemacevent+0x1d2>
		default:
		break;
   864e4:	bf00      	nop
	}
	return CL_OK;
   864e6:	2300      	movs	r3, #0
}
   864e8:	4618      	mov	r0, r3
   864ea:	370c      	adds	r7, #12
   864ec:	46bd      	mov	sp, r7
   864ee:	bc80      	pop	{r7}
   864f0:	4770      	bx	lr
   864f2:	bf00      	nop

000864f4 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   864f4:	b580      	push	{r7, lr}
   864f6:	b084      	sub	sp, #16
   864f8:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   864fa:	2304      	movs	r3, #4
   864fc:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   864fe:	234d      	movs	r3, #77	; 0x4d
   86500:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   86502:	1d3b      	adds	r3, r7, #4
   86504:	2200      	movs	r2, #0
   86506:	601a      	str	r2, [r3, #0]
   86508:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   8650c:	230a      	movs	r3, #10
   8650e:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   86510:	2305      	movs	r3, #5
   86512:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   86514:	4b13      	ldr	r3, [pc, #76]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86516:	78db      	ldrb	r3, [r3, #3]
   86518:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   8651a:	4b12      	ldr	r3, [pc, #72]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   8651c:	791b      	ldrb	r3, [r3, #4]
   8651e:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   86520:	4b10      	ldr	r3, [pc, #64]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86522:	781b      	ldrb	r3, [r3, #0]
   86524:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   86526:	4b0f      	ldr	r3, [pc, #60]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86528:	78da      	ldrb	r2, [r3, #3]
   8652a:	f06f 030f 	mvn.w	r3, #15
   8652e:	1a9b      	subs	r3, r3, r2
   86530:	b2db      	uxtb	r3, r3
   86532:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   86534:	4b0b      	ldr	r3, [pc, #44]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86536:	791b      	ldrb	r3, [r3, #4]
   86538:	425b      	negs	r3, r3
   8653a:	b2db      	uxtb	r3, r3
   8653c:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   8653e:	4b09      	ldr	r3, [pc, #36]	; (86564 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86540:	781b      	ldrb	r3, [r3, #0]
   86542:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   86546:	b2db      	uxtb	r3, r3
   86548:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   8654a:	1d39      	adds	r1, r7, #4
   8654c:	7bbb      	ldrb	r3, [r7, #14]
   8654e:	2207      	movs	r2, #7
   86550:	4618      	mov	r0, r3
   86552:	4b05      	ldr	r3, [pc, #20]	; (86568 <Cl_Dlsis_UpdateTimeInfo+0x74>)
   86554:	4798      	blx	r3
   86556:	4603      	mov	r3, r0
   86558:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   8655a:	2300      	movs	r3, #0
	}
   8655c:	4618      	mov	r0, r3
   8655e:	3710      	adds	r7, #16
   86560:	46bd      	mov	sp, r7
   86562:	bd80      	pop	{r7, pc}
   86564:	20072d74 	.word	0x20072d74
   86568:	0009926d 	.word	0x0009926d

0008656c <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   8656c:	b480      	push	{r7}
   8656e:	b083      	sub	sp, #12
   86570:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86572:	2304      	movs	r3, #4
   86574:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   86576:	4b07      	ldr	r3, [pc, #28]	; (86594 <cl_Dlsis_CheckforDialysisCompletion+0x28>)
   86578:	78db      	ldrb	r3, [r3, #3]
   8657a:	461a      	mov	r2, r3
   8657c:	4b06      	ldr	r3, [pc, #24]	; (86598 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   8657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   86580:	429a      	cmp	r2, r3
   86582:	d901      	bls.n	86588 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   86584:	2300      	movs	r3, #0
   86586:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   86588:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   8658a:	4618      	mov	r0, r3
   8658c:	370c      	adds	r7, #12
   8658e:	46bd      	mov	sp, r7
   86590:	bc80      	pop	{r7}
   86592:	4770      	bx	lr
   86594:	20072d74 	.word	0x20072d74
   86598:	20073194 	.word	0x20073194

0008659c <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   8659c:	b580      	push	{r7, lr}
   8659e:	b082      	sub	sp, #8
   865a0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   865a2:	2300      	movs	r3, #0
   865a4:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   865a6:	2300      	movs	r3, #0
   865a8:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   865aa:	4b10      	ldr	r3, [pc, #64]	; (865ec <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   865ac:	2200      	movs	r2, #0
   865ae:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   865b0:	4b0e      	ldr	r3, [pc, #56]	; (865ec <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   865b2:	2200      	movs	r2, #0
   865b4:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   865b6:	4b0d      	ldr	r3, [pc, #52]	; (865ec <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   865b8:	2200      	movs	r2, #0
   865ba:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   865bc:	4b0b      	ldr	r3, [pc, #44]	; (865ec <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   865be:	2200      	movs	r2, #0
   865c0:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   865c2:	4b0a      	ldr	r3, [pc, #40]	; (865ec <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   865c4:	2200      	movs	r2, #0
   865c6:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   865c8:	1dbb      	adds	r3, r7, #6
   865ca:	2200      	movs	r2, #0
   865cc:	4619      	mov	r1, r3
   865ce:	2015      	movs	r0, #21
   865d0:	4b07      	ldr	r3, [pc, #28]	; (865f0 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   865d2:	4798      	blx	r3
   865d4:	4603      	mov	r3, r0
   865d6:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   865d8:	2050      	movs	r0, #80	; 0x50
   865da:	4b06      	ldr	r3, [pc, #24]	; (865f4 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   865dc:	4798      	blx	r3
   865de:	4603      	mov	r3, r0
   865e0:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   865e2:	79fb      	ldrb	r3, [r7, #7]
	}
   865e4:	4618      	mov	r0, r3
   865e6:	3708      	adds	r7, #8
   865e8:	46bd      	mov	sp, r7
   865ea:	bd80      	pop	{r7, pc}
   865ec:	20072d74 	.word	0x20072d74
   865f0:	0009926d 	.word	0x0009926d
   865f4:	0008a479 	.word	0x0008a479

000865f8 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   865f8:	b580      	push	{r7, lr}
   865fa:	b084      	sub	sp, #16
   865fc:	af00      	add	r7, sp, #0
   865fe:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86600:	2300      	movs	r3, #0
   86602:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   86604:	2300      	movs	r3, #0
   86606:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86608:	234d      	movs	r3, #77	; 0x4d
   8660a:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   8660c:	2300      	movs	r3, #0
   8660e:	73bb      	strb	r3, [r7, #14]
   86610:	e068      	b.n	866e4 <Cl_Dlsis_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86612:	7bba      	ldrb	r2, [r7, #14]
   86614:	4937      	ldr	r1, [pc, #220]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86616:	4613      	mov	r3, r2
   86618:	00db      	lsls	r3, r3, #3
   8661a:	1a9b      	subs	r3, r3, r2
   8661c:	440b      	add	r3, r1
   8661e:	7818      	ldrb	r0, [r3, #0]
   86620:	7bba      	ldrb	r2, [r7, #14]
   86622:	4613      	mov	r3, r2
   86624:	00db      	lsls	r3, r3, #3
   86626:	1a9b      	subs	r3, r3, r2
   86628:	4a32      	ldr	r2, [pc, #200]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   8662a:	4413      	add	r3, r2
   8662c:	3302      	adds	r3, #2
   8662e:	4619      	mov	r1, r3
   86630:	4b31      	ldr	r3, [pc, #196]	; (866f8 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   86632:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86634:	7bba      	ldrb	r2, [r7, #14]
   86636:	492f      	ldr	r1, [pc, #188]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86638:	4613      	mov	r3, r2
   8663a:	00db      	lsls	r3, r3, #3
   8663c:	1a9b      	subs	r3, r3, r2
   8663e:	440b      	add	r3, r1
   86640:	3302      	adds	r3, #2
   86642:	781b      	ldrb	r3, [r3, #0]
   86644:	2b00      	cmp	r3, #0
   86646:	d022      	beq.n	8668e <Cl_Dlsis_UpdateAlarmTable+0x96>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86648:	7bba      	ldrb	r2, [r7, #14]
   8664a:	492a      	ldr	r1, [pc, #168]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   8664c:	4613      	mov	r3, r2
   8664e:	00db      	lsls	r3, r3, #3
   86650:	1a9b      	subs	r3, r3, r2
   86652:	440b      	add	r3, r1
   86654:	3303      	adds	r3, #3
   86656:	781b      	ldrb	r3, [r3, #0]
   86658:	f083 0301 	eor.w	r3, r3, #1
   8665c:	b2db      	uxtb	r3, r3
   8665e:	2b00      	cmp	r3, #0
   86660:	d03d      	beq.n	866de <Cl_Dlsis_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   86662:	7bba      	ldrb	r2, [r7, #14]
   86664:	4923      	ldr	r1, [pc, #140]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86666:	4613      	mov	r3, r2
   86668:	00db      	lsls	r3, r3, #3
   8666a:	1a9b      	subs	r3, r3, r2
   8666c:	440b      	add	r3, r1
   8666e:	3303      	adds	r3, #3
   86670:	2201      	movs	r2, #1
   86672:	701a      	strb	r2, [r3, #0]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86674:	7bba      	ldrb	r2, [r7, #14]
   86676:	491f      	ldr	r1, [pc, #124]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86678:	4613      	mov	r3, r2
   8667a:	00db      	lsls	r3, r3, #3
   8667c:	1a9b      	subs	r3, r3, r2
   8667e:	440b      	add	r3, r1
   86680:	781b      	ldrb	r3, [r3, #0]
   86682:	4618      	mov	r0, r3
   86684:	4b1d      	ldr	r3, [pc, #116]	; (866fc <Cl_Dlsis_UpdateAlarmTable+0x104>)
   86686:	4798      	blx	r3
   86688:	4603      	mov	r3, r0
   8668a:	73fb      	strb	r3, [r7, #15]
   8668c:	e027      	b.n	866de <Cl_Dlsis_UpdateAlarmTable+0xe6>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   8668e:	7bba      	ldrb	r2, [r7, #14]
   86690:	4918      	ldr	r1, [pc, #96]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86692:	4613      	mov	r3, r2
   86694:	00db      	lsls	r3, r3, #3
   86696:	1a9b      	subs	r3, r3, r2
   86698:	440b      	add	r3, r1
   8669a:	3303      	adds	r3, #3
   8669c:	781b      	ldrb	r3, [r3, #0]
   8669e:	2b00      	cmp	r3, #0
   866a0:	d01d      	beq.n	866de <Cl_Dlsis_UpdateAlarmTable+0xe6>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   866a2:	7bba      	ldrb	r2, [r7, #14]
   866a4:	4913      	ldr	r1, [pc, #76]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   866a6:	4613      	mov	r3, r2
   866a8:	00db      	lsls	r3, r3, #3
   866aa:	1a9b      	subs	r3, r3, r2
   866ac:	440b      	add	r3, r1
   866ae:	3303      	adds	r3, #3
   866b0:	2200      	movs	r2, #0
   866b2:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   866b4:	2307      	movs	r3, #7
   866b6:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   866b8:	7bba      	ldrb	r2, [r7, #14]
   866ba:	490e      	ldr	r1, [pc, #56]	; (866f4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   866bc:	4613      	mov	r3, r2
   866be:	00db      	lsls	r3, r3, #3
   866c0:	1a9b      	subs	r3, r3, r2
   866c2:	440b      	add	r3, r1
   866c4:	781b      	ldrb	r3, [r3, #0]
   866c6:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   866c8:	2300      	movs	r3, #0
   866ca:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   866cc:	f107 0108 	add.w	r1, r7, #8
   866d0:	7b7b      	ldrb	r3, [r7, #13]
   866d2:	2202      	movs	r2, #2
   866d4:	4618      	mov	r0, r3
   866d6:	4b0a      	ldr	r3, [pc, #40]	; (86700 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   866d8:	4798      	blx	r3
   866da:	4603      	mov	r3, r0
   866dc:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   866de:	7bbb      	ldrb	r3, [r7, #14]
   866e0:	3301      	adds	r3, #1
   866e2:	73bb      	strb	r3, [r7, #14]
   866e4:	7bbb      	ldrb	r3, [r7, #14]
   866e6:	2b1d      	cmp	r3, #29
   866e8:	d993      	bls.n	86612 <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   866ea:	7bfb      	ldrb	r3, [r7, #15]
}
   866ec:	4618      	mov	r0, r3
   866ee:	3710      	adds	r7, #16
   866f0:	46bd      	mov	sp, r7
   866f2:	bd80      	pop	{r7, pc}
   866f4:	2007039c 	.word	0x2007039c
   866f8:	00083095 	.word	0x00083095
   866fc:	00086705 	.word	0x00086705
   86700:	0009926d 	.word	0x0009926d

00086704 <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   86704:	b580      	push	{r7, lr}
   86706:	b086      	sub	sp, #24
   86708:	af00      	add	r7, sp, #0
   8670a:	4603      	mov	r3, r0
   8670c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8670e:	2300      	movs	r3, #0
   86710:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   86712:	f107 0308 	add.w	r3, r7, #8
   86716:	2100      	movs	r1, #0
   86718:	460a      	mov	r2, r1
   8671a:	801a      	strh	r2, [r3, #0]
   8671c:	460a      	mov	r2, r1
   8671e:	709a      	strb	r2, [r3, #2]
   86720:	2300      	movs	r3, #0
   86722:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86724:	234d      	movs	r3, #77	; 0x4d
   86726:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   86728:	2300      	movs	r3, #0
   8672a:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   8672c:	2300      	movs	r3, #0
   8672e:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86730:	79fb      	ldrb	r3, [r7, #7]
   86732:	3b01      	subs	r3, #1
   86734:	2b3a      	cmp	r3, #58	; 0x3a
   86736:	f200 811d 	bhi.w	86974 <CL_DlsisAlarmActon+0x270>
   8673a:	a201      	add	r2, pc, #4	; (adr r2, 86740 <CL_DlsisAlarmActon+0x3c>)
   8673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86740:	0008682d 	.word	0x0008682d
   86744:	00086975 	.word	0x00086975
   86748:	00086975 	.word	0x00086975
   8674c:	00086975 	.word	0x00086975
   86750:	0008683b 	.word	0x0008683b
   86754:	00086849 	.word	0x00086849
   86758:	000868ff 	.word	0x000868ff
   8675c:	000868ff 	.word	0x000868ff
   86760:	0008690d 	.word	0x0008690d
   86764:	00086975 	.word	0x00086975
   86768:	00086975 	.word	0x00086975
   8676c:	000868c7 	.word	0x000868c7
   86770:	000868d3 	.word	0x000868d3
   86774:	000868e9 	.word	0x000868e9
   86778:	00086857 	.word	0x00086857
   8677c:	00086857 	.word	0x00086857
   86780:	00086865 	.word	0x00086865
   86784:	00086865 	.word	0x00086865
   86788:	00086873 	.word	0x00086873
   8678c:	00086873 	.word	0x00086873
   86790:	00086881 	.word	0x00086881
   86794:	00086881 	.word	0x00086881
   86798:	0008688f 	.word	0x0008688f
   8679c:	0008688f 	.word	0x0008688f
   867a0:	00086975 	.word	0x00086975
   867a4:	00086975 	.word	0x00086975
   867a8:	00086975 	.word	0x00086975
   867ac:	00086975 	.word	0x00086975
   867b0:	00086975 	.word	0x00086975
   867b4:	00086975 	.word	0x00086975
   867b8:	00086975 	.word	0x00086975
   867bc:	0008694f 	.word	0x0008694f
   867c0:	00086931 	.word	0x00086931
   867c4:	00086967 	.word	0x00086967
   867c8:	000868ab 	.word	0x000868ab
   867cc:	000868ab 	.word	0x000868ab
   867d0:	000868b9 	.word	0x000868b9
   867d4:	000868b9 	.word	0x000868b9
   867d8:	0008689d 	.word	0x0008689d
   867dc:	0008689d 	.word	0x0008689d
   867e0:	00086975 	.word	0x00086975
   867e4:	00086975 	.word	0x00086975
   867e8:	00086975 	.word	0x00086975
   867ec:	00086975 	.word	0x00086975
   867f0:	00086975 	.word	0x00086975
   867f4:	00086975 	.word	0x00086975
   867f8:	00086975 	.word	0x00086975
   867fc:	00086975 	.word	0x00086975
   86800:	00086975 	.word	0x00086975
   86804:	00086919 	.word	0x00086919
   86808:	00086919 	.word	0x00086919
   8680c:	00086975 	.word	0x00086975
   86810:	00086975 	.word	0x00086975
   86814:	00086975 	.word	0x00086975
   86818:	00086975 	.word	0x00086975
   8681c:	00086975 	.word	0x00086975
   86820:	00086925 	.word	0x00086925
   86824:	00086925 	.word	0x00086925
   86828:	00086925 	.word	0x00086925
		{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   8682c:	4b6b      	ldr	r3, [pc, #428]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   8682e:	4798      	blx	r3
				sv_cntrl_buzzer();
   86830:	4b6b      	ldr	r3, [pc, #428]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86832:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86834:	4b6b      	ldr	r3, [pc, #428]	; (869e4 <CL_DlsisAlarmActon+0x2e0>)
   86836:	4798      	blx	r3
			break;
   86838:	e09d      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			
			case HOLDER1STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   8683a:	4b6b      	ldr	r3, [pc, #428]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   8683c:	4798      	blx	r3
				sv_cntrl_buzzer();
   8683e:	4b68      	ldr	r3, [pc, #416]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86840:	4798      	blx	r3
				cl_temp_safestate();
   86842:	4b6a      	ldr	r3, [pc, #424]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   86844:	4798      	blx	r3
			break;
   86846:	e096      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case HOLDER2STATUS_CLOSED:
				sv_cntrl_setyellowalarm();
   86848:	4b67      	ldr	r3, [pc, #412]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   8684a:	4798      	blx	r3
				sv_cntrl_buzzer();
   8684c:	4b64      	ldr	r3, [pc, #400]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   8684e:	4798      	blx	r3
				cl_temp_safestate();
   86850:	4b66      	ldr	r3, [pc, #408]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   86852:	4798      	blx	r3
			break;
   86854:	e08f      	b.n	86976 <CL_DlsisAlarmActon+0x272>

			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86856:	4b64      	ldr	r3, [pc, #400]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86858:	4798      	blx	r3
				sv_cntrl_buzzer();
   8685a:	4b61      	ldr	r3, [pc, #388]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   8685c:	4798      	blx	r3
				cl_temp_safestate();
   8685e:	4b63      	ldr	r3, [pc, #396]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   86860:	4798      	blx	r3
			break;
   86862:	e088      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86864:	4b60      	ldr	r3, [pc, #384]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86866:	4798      	blx	r3
				sv_cntrl_buzzer();
   86868:	4b5d      	ldr	r3, [pc, #372]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   8686a:	4798      	blx	r3
				cl_temp_safestate();
   8686c:	4b5f      	ldr	r3, [pc, #380]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   8686e:	4798      	blx	r3
			break;
   86870:	e081      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86872:	4b5d      	ldr	r3, [pc, #372]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86874:	4798      	blx	r3
				sv_cntrl_buzzer();
   86876:	4b5a      	ldr	r3, [pc, #360]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86878:	4798      	blx	r3
				cl_temp_safestate();
   8687a:	4b5c      	ldr	r3, [pc, #368]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   8687c:	4798      	blx	r3
			break;
   8687e:	e07a      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case 	PS1_HIGH_THRESHOLD:
			case    PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86880:	4b59      	ldr	r3, [pc, #356]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86882:	4798      	blx	r3
				sv_cntrl_buzzer();
   86884:	4b56      	ldr	r3, [pc, #344]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86886:	4798      	blx	r3
				cl_temp_safestate();
   86888:	4b58      	ldr	r3, [pc, #352]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   8688a:	4798      	blx	r3
			break;
   8688c:	e073      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8688e:	4b56      	ldr	r3, [pc, #344]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86890:	4798      	blx	r3
				sv_cntrl_buzzer();
   86892:	4b53      	ldr	r3, [pc, #332]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86894:	4798      	blx	r3
				cl_temp_safestate();
   86896:	4b55      	ldr	r3, [pc, #340]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   86898:	4798      	blx	r3
			break;
   8689a:	e06c      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   8689c:	4b52      	ldr	r3, [pc, #328]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   8689e:	4798      	blx	r3
				sv_cntrl_buzzer();
   868a0:	4b4f      	ldr	r3, [pc, #316]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   868a2:	4798      	blx	r3
				cl_temp_safestate();
   868a4:	4b51      	ldr	r3, [pc, #324]	; (869ec <CL_DlsisAlarmActon+0x2e8>)
   868a6:	4798      	blx	r3
			break;
   868a8:	e065      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case APTSTATUS_LOW:
			case APTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   868aa:	4b4c      	ldr	r3, [pc, #304]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   868ac:	4798      	blx	r3
				sv_cntrl_buzzer();
   868ae:	4b4c      	ldr	r3, [pc, #304]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   868b0:	4798      	blx	r3
				Cl_Dlsis_safesate();
   868b2:	4b4c      	ldr	r3, [pc, #304]	; (869e4 <CL_DlsisAlarmActon+0x2e0>)
   868b4:	4798      	blx	r3
			break;
   868b6:	e05e      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   868b8:	4b48      	ldr	r3, [pc, #288]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   868ba:	4798      	blx	r3
				sv_cntrl_buzzer();
   868bc:	4b48      	ldr	r3, [pc, #288]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   868be:	4798      	blx	r3
				Cl_Dlsis_safesate();
   868c0:	4b48      	ldr	r3, [pc, #288]	; (869e4 <CL_DlsisAlarmActon+0x2e0>)
   868c2:	4798      	blx	r3
			break;
   868c4:	e057      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case FLOW_NO_FLOW:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
			Cl_Dlsis_StopDialysis();
   868c6:	4b4a      	ldr	r3, [pc, #296]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   868c8:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868ca:	4b4a      	ldr	r3, [pc, #296]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   868cc:	220a      	movs	r2, #10
   868ce:	701a      	strb	r2, [r3, #0]
			break;
   868d0:	e051      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			case FLOW_LOW_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   868d2:	2203      	movs	r2, #3
   868d4:	4948      	ldr	r1, [pc, #288]	; (869f8 <CL_DlsisAlarmActon+0x2f4>)
   868d6:	2018      	movs	r0, #24
   868d8:	4b48      	ldr	r3, [pc, #288]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   868da:	4798      	blx	r3
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   868dc:	4b44      	ldr	r3, [pc, #272]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   868de:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868e0:	4b44      	ldr	r3, [pc, #272]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   868e2:	220a      	movs	r2, #10
   868e4:	701a      	strb	r2, [r3, #0]
			break;
   868e6:	e046      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			case FLOW_HIGH_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   868e8:	2203      	movs	r2, #3
   868ea:	4943      	ldr	r1, [pc, #268]	; (869f8 <CL_DlsisAlarmActon+0x2f4>)
   868ec:	2018      	movs	r0, #24
   868ee:	4b43      	ldr	r3, [pc, #268]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   868f0:	4798      	blx	r3
			//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   868f2:	4b3f      	ldr	r3, [pc, #252]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   868f4:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   868f6:	4b3f      	ldr	r3, [pc, #252]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   868f8:	220a      	movs	r2, #10
   868fa:	701a      	strb	r2, [r3, #0]
			break;
   868fc:	e03b      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   868fe:	4b3a      	ldr	r3, [pc, #232]	; (869e8 <CL_DlsisAlarmActon+0x2e4>)
   86900:	4798      	blx	r3
				sv_cntrl_buzzer();
   86902:	4b37      	ldr	r3, [pc, #220]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86904:	4798      	blx	r3
				cl_cond_safestate();
   86906:	4b3e      	ldr	r3, [pc, #248]	; (86a00 <CL_DlsisAlarmActon+0x2fc>)
   86908:	4798      	blx	r3
			break;
   8690a:	e034      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
			//		NewAlarmId = _COND_DAC_OPEN;
					Cl_Dlsis_StopDialysis();
   8690c:	4b38      	ldr	r3, [pc, #224]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   8690e:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86910:	4b38      	ldr	r3, [pc, #224]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   86912:	220a      	movs	r2, #10
   86914:	701a      	strb	r2, [r3, #0]
			break;
   86916:	e02e      	b.n	86976 <CL_DlsisAlarmActon+0x272>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
			//		NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Dlsis_StopDialysis();
   86918:	4b35      	ldr	r3, [pc, #212]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   8691a:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8691c:	4b35      	ldr	r3, [pc, #212]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   8691e:	220a      	movs	r2, #10
   86920:	701a      	strb	r2, [r3, #0]
			break;
   86922:	e028      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Dlsis_StopDialysis();
   86924:	4b32      	ldr	r3, [pc, #200]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   86926:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86928:	4b32      	ldr	r3, [pc, #200]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   8692a:	220a      	movs	r2, #10
   8692c:	701a      	strb	r2, [r3, #0]
			break;
   8692e:	e022      	b.n	86976 <CL_DlsisAlarmActon+0x272>

			case WATCHDOG_TIMER: //27
			//	NewAlarmId = _WATCHDOG_TIMER;
			break;
			case BD_EVENT:
				sv_cntrl_setredalarm();
   86930:	4b2a      	ldr	r3, [pc, #168]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   86932:	4798      	blx	r3
				sv_cntrl_buzzer();
   86934:	4b2a      	ldr	r3, [pc, #168]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   86936:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   86938:	4b2d      	ldr	r3, [pc, #180]	; (869f0 <CL_DlsisAlarmActon+0x2ec>)
   8693a:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BD",2);
   8693c:	2202      	movs	r2, #2
   8693e:	4931      	ldr	r1, [pc, #196]	; (86a04 <CL_DlsisAlarmActon+0x300>)
   86940:	2018      	movs	r0, #24
   86942:	4b2e      	ldr	r3, [pc, #184]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   86944:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86946:	4b2b      	ldr	r3, [pc, #172]	; (869f4 <CL_DlsisAlarmActon+0x2f0>)
   86948:	220a      	movs	r2, #10
   8694a:	701a      	strb	r2, [r3, #0]
			break;
   8694c:	e013      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case ABD_EVENT:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ABD",3);
   8694e:	2203      	movs	r2, #3
   86950:	492d      	ldr	r1, [pc, #180]	; (86a08 <CL_DlsisAlarmActon+0x304>)
   86952:	2018      	movs	r0, #24
   86954:	4b29      	ldr	r3, [pc, #164]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   86956:	4798      	blx	r3
				sv_cntrl_setredalarm();
   86958:	4b20      	ldr	r3, [pc, #128]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   8695a:	4798      	blx	r3
				sv_cntrl_buzzer();
   8695c:	4b20      	ldr	r3, [pc, #128]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   8695e:	4798      	blx	r3
				Cl_Dlsis_safesate();
   86960:	4b20      	ldr	r3, [pc, #128]	; (869e4 <CL_DlsisAlarmActon+0x2e0>)
   86962:	4798      	blx	r3
			break;
   86964:	e007      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			
			case BLD_EVENT:
				sv_cntrl_setredalarm();
   86966:	4b1d      	ldr	r3, [pc, #116]	; (869dc <CL_DlsisAlarmActon+0x2d8>)
   86968:	4798      	blx	r3
				sv_cntrl_buzzer();
   8696a:	4b1d      	ldr	r3, [pc, #116]	; (869e0 <CL_DlsisAlarmActon+0x2dc>)
   8696c:	4798      	blx	r3
				Cl_Dlsis_safesate();
   8696e:	4b1d      	ldr	r3, [pc, #116]	; (869e4 <CL_DlsisAlarmActon+0x2e0>)
   86970:	4798      	blx	r3
			break;
   86972:	e000      	b.n	86976 <CL_DlsisAlarmActon+0x272>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86974:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86976:	79fb      	ldrb	r3, [r7, #7]
   86978:	2b00      	cmp	r3, #0
   8697a:	d029      	beq.n	869d0 <CL_DlsisAlarmActon+0x2cc>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   8697c:	4a23      	ldr	r2, [pc, #140]	; (86a0c <CL_DlsisAlarmActon+0x308>)
   8697e:	79fb      	ldrb	r3, [r7, #7]
   86980:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86982:	4b22      	ldr	r3, [pc, #136]	; (86a0c <CL_DlsisAlarmActon+0x308>)
   86984:	781a      	ldrb	r2, [r3, #0]
   86986:	4b22      	ldr	r3, [pc, #136]	; (86a10 <CL_DlsisAlarmActon+0x30c>)
   86988:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   8698a:	79fb      	ldrb	r3, [r7, #7]
   8698c:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   8698e:	2301      	movs	r3, #1
   86990:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   86992:	2302      	movs	r3, #2
   86994:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86996:	2307      	movs	r3, #7
   86998:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   8699a:	200a      	movs	r0, #10
   8699c:	4b1d      	ldr	r3, [pc, #116]	; (86a14 <CL_DlsisAlarmActon+0x310>)
   8699e:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   869a0:	f107 0108 	add.w	r1, r7, #8
   869a4:	7bfb      	ldrb	r3, [r7, #15]
   869a6:	2203      	movs	r2, #3
   869a8:	4618      	mov	r0, r3
   869aa:	4b14      	ldr	r3, [pc, #80]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   869ac:	4798      	blx	r3
   869ae:	4603      	mov	r3, r0
   869b0:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   869b2:	232b      	movs	r3, #43	; 0x2b
   869b4:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   869b6:	2301      	movs	r3, #1
   869b8:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   869ba:	2302      	movs	r3, #2
   869bc:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   869be:	f107 0108 	add.w	r1, r7, #8
   869c2:	7bfb      	ldrb	r3, [r7, #15]
   869c4:	2202      	movs	r2, #2
   869c6:	4618      	mov	r0, r3
   869c8:	4b0c      	ldr	r3, [pc, #48]	; (869fc <CL_DlsisAlarmActon+0x2f8>)
   869ca:	4798      	blx	r3
   869cc:	4603      	mov	r3, r0
   869ce:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   869d0:	2300      	movs	r3, #0
}
   869d2:	4618      	mov	r0, r3
   869d4:	3718      	adds	r7, #24
   869d6:	46bd      	mov	sp, r7
   869d8:	bd80      	pop	{r7, pc}
   869da:	bf00      	nop
   869dc:	00097749 	.word	0x00097749
   869e0:	00097785 	.word	0x00097785
   869e4:	00087b9d 	.word	0x00087b9d
   869e8:	0009775d 	.word	0x0009775d
   869ec:	00087be1 	.word	0x00087be1
   869f0:	00086a19 	.word	0x00086a19
   869f4:	200720d0 	.word	0x200720d0
   869f8:	000a5494 	.word	0x000a5494
   869fc:	0009926d 	.word	0x0009926d
   86a00:	00087c2d 	.word	0x00087c2d
   86a04:	000a5498 	.word	0x000a5498
   86a08:	000a549c 	.word	0x000a549c
   86a0c:	20072d79 	.word	0x20072d79
   86a10:	20072d6e 	.word	0x20072d6e
   86a14:	000918fd 	.word	0x000918fd

00086a18 <Cl_Dlsis_StopDialysis>:


Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   86a18:	b580      	push	{r7, lr}
   86a1a:	b082      	sub	sp, #8
   86a1c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86a1e:	2300      	movs	r3, #0
   86a20:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   86a22:	4b29      	ldr	r3, [pc, #164]	; (86ac8 <Cl_Dlsis_StopDialysis+0xb0>)
   86a24:	781b      	ldrb	r3, [r3, #0]
   86a26:	2b00      	cmp	r3, #0
   86a28:	d048      	beq.n	86abc <Cl_Dlsis_StopDialysis+0xa4>
   86a2a:	4b27      	ldr	r3, [pc, #156]	; (86ac8 <Cl_Dlsis_StopDialysis+0xb0>)
   86a2c:	781b      	ldrb	r3, [r3, #0]
   86a2e:	2b09      	cmp	r3, #9
   86a30:	d044      	beq.n	86abc <Cl_Dlsis_StopDialysis+0xa4>
   86a32:	4b25      	ldr	r3, [pc, #148]	; (86ac8 <Cl_Dlsis_StopDialysis+0xb0>)
   86a34:	781b      	ldrb	r3, [r3, #0]
   86a36:	2b07      	cmp	r3, #7
   86a38:	d040      	beq.n	86abc <Cl_Dlsis_StopDialysis+0xa4>
   86a3a:	4b23      	ldr	r3, [pc, #140]	; (86ac8 <Cl_Dlsis_StopDialysis+0xb0>)
   86a3c:	781b      	ldrb	r3, [r3, #0]
   86a3e:	2b0a      	cmp	r3, #10
   86a40:	d03c      	beq.n	86abc <Cl_Dlsis_StopDialysis+0xa4>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   86a42:	4b22      	ldr	r3, [pc, #136]	; (86acc <Cl_Dlsis_StopDialysis+0xb4>)
   86a44:	2200      	movs	r2, #0
   86a46:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   86a48:	4b20      	ldr	r3, [pc, #128]	; (86acc <Cl_Dlsis_StopDialysis+0xb4>)
   86a4a:	2200      	movs	r2, #0
   86a4c:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   86a4e:	4b1f      	ldr	r3, [pc, #124]	; (86acc <Cl_Dlsis_StopDialysis+0xb4>)
   86a50:	2200      	movs	r2, #0
   86a52:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86a54:	4b1d      	ldr	r3, [pc, #116]	; (86acc <Cl_Dlsis_StopDialysis+0xb4>)
   86a56:	2200      	movs	r2, #0
   86a58:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   86a5a:	4b1c      	ldr	r3, [pc, #112]	; (86acc <Cl_Dlsis_StopDialysis+0xb4>)
   86a5c:	2200      	movs	r2, #0
   86a5e:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   86a60:	4b1b      	ldr	r3, [pc, #108]	; (86ad0 <Cl_Dlsis_StopDialysis+0xb8>)
   86a62:	4798      	blx	r3
   86a64:	4603      	mov	r3, r0
   86a66:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86a68:	2004      	movs	r0, #4
   86a6a:	4b1a      	ldr	r3, [pc, #104]	; (86ad4 <Cl_Dlsis_StopDialysis+0xbc>)
   86a6c:	4798      	blx	r3
   86a6e:	4603      	mov	r3, r0
   86a70:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86a72:	2011      	movs	r0, #17
   86a74:	4b18      	ldr	r3, [pc, #96]	; (86ad8 <Cl_Dlsis_StopDialysis+0xc0>)
   86a76:	4798      	blx	r3
   86a78:	4603      	mov	r3, r0
   86a7a:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   86a7c:	4b17      	ldr	r3, [pc, #92]	; (86adc <Cl_Dlsis_StopDialysis+0xc4>)
   86a7e:	4798      	blx	r3
   86a80:	4603      	mov	r3, r0
   86a82:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   86a84:	2004      	movs	r0, #4
   86a86:	4b16      	ldr	r3, [pc, #88]	; (86ae0 <Cl_Dlsis_StopDialysis+0xc8>)
   86a88:	4798      	blx	r3
   86a8a:	4603      	mov	r3, r0
   86a8c:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   86a8e:	2100      	movs	r1, #0
   86a90:	2004      	movs	r0, #4
   86a92:	4b14      	ldr	r3, [pc, #80]	; (86ae4 <Cl_Dlsis_StopDialysis+0xcc>)
   86a94:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86a96:	2011      	movs	r0, #17
   86a98:	4b0f      	ldr	r3, [pc, #60]	; (86ad8 <Cl_Dlsis_StopDialysis+0xc0>)
   86a9a:	4798      	blx	r3
   86a9c:	4603      	mov	r3, r0
   86a9e:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   86aa0:	4b09      	ldr	r3, [pc, #36]	; (86ac8 <Cl_Dlsis_StopDialysis+0xb0>)
   86aa2:	2200      	movs	r2, #0
   86aa4:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   86aa6:	1dbb      	adds	r3, r7, #6
   86aa8:	2200      	movs	r2, #0
   86aaa:	4619      	mov	r1, r3
   86aac:	2014      	movs	r0, #20
   86aae:	4b0e      	ldr	r3, [pc, #56]	; (86ae8 <Cl_Dlsis_StopDialysis+0xd0>)
   86ab0:	4798      	blx	r3
   86ab2:	4603      	mov	r3, r0
   86ab4:	71fb      	strb	r3, [r7, #7]
				bc_flag = 0;
   86ab6:	4b0d      	ldr	r3, [pc, #52]	; (86aec <Cl_Dlsis_StopDialysis+0xd4>)
   86ab8:	2200      	movs	r2, #0
   86aba:	701a      	strb	r2, [r3, #0]
					
				}
				return CL_OK;
   86abc:	2300      	movs	r3, #0
}
   86abe:	4618      	mov	r0, r3
   86ac0:	3708      	adds	r7, #8
   86ac2:	46bd      	mov	sp, r7
   86ac4:	bd80      	pop	{r7, pc}
   86ac6:	bf00      	nop
   86ac8:	200720d0 	.word	0x200720d0
   86acc:	20072d74 	.word	0x20072d74
   86ad0:	00097651 	.word	0x00097651
   86ad4:	0009748d 	.word	0x0009748d
   86ad8:	000976e1 	.word	0x000976e1
   86adc:	000974dd 	.word	0x000974dd
   86ae0:	00088a8d 	.word	0x00088a8d
   86ae4:	00091a75 	.word	0x00091a75
   86ae8:	0009926d 	.word	0x0009926d
   86aec:	200720ef 	.word	0x200720ef

00086af0 <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   86af0:	b580      	push	{r7, lr}
   86af2:	b082      	sub	sp, #8
   86af4:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86af6:	2300      	movs	r3, #0
   86af8:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86afa:	4b48      	ldr	r3, [pc, #288]	; (86c1c <Cl_Dlsis_BypassDialysis+0x12c>)
   86afc:	4798      	blx	r3
   86afe:	4603      	mov	r3, r0
   86b00:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86b02:	2004      	movs	r0, #4
   86b04:	4b46      	ldr	r3, [pc, #280]	; (86c20 <Cl_Dlsis_BypassDialysis+0x130>)
   86b06:	4798      	blx	r3
   86b08:	4603      	mov	r3, r0
   86b0a:	71fb      	strb	r3, [r7, #7]
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   86b0c:	4b45      	ldr	r3, [pc, #276]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b0e:	781b      	ldrb	r3, [r3, #0]
   86b10:	461a      	mov	r2, r3
   86b12:	4b45      	ldr	r3, [pc, #276]	; (86c28 <Cl_Dlsis_BypassDialysis+0x138>)
   86b14:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   86b16:	4b43      	ldr	r3, [pc, #268]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b18:	789b      	ldrb	r3, [r3, #2]
   86b1a:	461a      	mov	r2, r3
   86b1c:	4b43      	ldr	r3, [pc, #268]	; (86c2c <Cl_Dlsis_BypassDialysis+0x13c>)
   86b1e:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   86b20:	4b40      	ldr	r3, [pc, #256]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b22:	785b      	ldrb	r3, [r3, #1]
   86b24:	461a      	mov	r2, r3
   86b26:	4b42      	ldr	r3, [pc, #264]	; (86c30 <Cl_Dlsis_BypassDialysis+0x140>)
   86b28:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   86b2a:	4b3e      	ldr	r3, [pc, #248]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b2c:	78db      	ldrb	r3, [r3, #3]
   86b2e:	461a      	mov	r2, r3
   86b30:	4b40      	ldr	r3, [pc, #256]	; (86c34 <Cl_Dlsis_BypassDialysis+0x144>)
   86b32:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   86b34:	4b3b      	ldr	r3, [pc, #236]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b36:	791b      	ldrb	r3, [r3, #4]
   86b38:	461a      	mov	r2, r3
   86b3a:	4b3f      	ldr	r3, [pc, #252]	; (86c38 <Cl_Dlsis_BypassDialysis+0x148>)
   86b3c:	601a      	str	r2, [r3, #0]
			DlsisTime.Cl_dlsissecondscounter = 0;
   86b3e:	4b39      	ldr	r3, [pc, #228]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b40:	2200      	movs	r2, #0
   86b42:	701a      	strb	r2, [r3, #0]
			DlsisTime.Cl_dlsishourscounter = 0;
   86b44:	4b37      	ldr	r3, [pc, #220]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b46:	2200      	movs	r2, #0
   86b48:	709a      	strb	r2, [r3, #2]
			DlsisTime.Cl_dlsisMinutescounter = 0;
   86b4a:	4b36      	ldr	r3, [pc, #216]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b4c:	2200      	movs	r2, #0
   86b4e:	705a      	strb	r2, [r3, #1]
			DlsisTime.Cl_dlsisTotalhourscounter = 0;
   86b50:	4b34      	ldr	r3, [pc, #208]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b52:	2200      	movs	r2, #0
   86b54:	711a      	strb	r2, [r3, #4]
			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   86b56:	4b33      	ldr	r3, [pc, #204]	; (86c24 <Cl_Dlsis_BypassDialysis+0x134>)
   86b58:	2200      	movs	r2, #0
   86b5a:	70da      	strb	r2, [r3, #3]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   86b5c:	2100      	movs	r1, #0
   86b5e:	2001      	movs	r0, #1
   86b60:	4b36      	ldr	r3, [pc, #216]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b62:	4798      	blx	r3
   86b64:	4603      	mov	r3, r0
   86b66:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86b68:	2100      	movs	r1, #0
   86b6a:	2005      	movs	r0, #5
   86b6c:	4b33      	ldr	r3, [pc, #204]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b6e:	4798      	blx	r3
   86b70:	4603      	mov	r3, r0
   86b72:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86b74:	2100      	movs	r1, #0
   86b76:	2006      	movs	r0, #6
   86b78:	4b30      	ldr	r3, [pc, #192]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b7a:	4798      	blx	r3
   86b7c:	4603      	mov	r3, r0
   86b7e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86b80:	2100      	movs	r1, #0
   86b82:	2003      	movs	r0, #3
   86b84:	4b2d      	ldr	r3, [pc, #180]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b86:	4798      	blx	r3
   86b88:	4603      	mov	r3, r0
   86b8a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86b8c:	2100      	movs	r1, #0
   86b8e:	2004      	movs	r0, #4
   86b90:	4b2a      	ldr	r3, [pc, #168]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b92:	4798      	blx	r3
   86b94:	4603      	mov	r3, r0
   86b96:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86b98:	2100      	movs	r1, #0
   86b9a:	2007      	movs	r0, #7
   86b9c:	4b27      	ldr	r3, [pc, #156]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86b9e:	4798      	blx	r3
   86ba0:	4603      	mov	r3, r0
   86ba2:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86ba4:	2100      	movs	r1, #0
   86ba6:	2008      	movs	r0, #8
   86ba8:	4b24      	ldr	r3, [pc, #144]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86baa:	4798      	blx	r3
   86bac:	4603      	mov	r3, r0
   86bae:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   86bb0:	2100      	movs	r1, #0
   86bb2:	2029      	movs	r0, #41	; 0x29
   86bb4:	4b21      	ldr	r3, [pc, #132]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86bb6:	4798      	blx	r3
   86bb8:	4603      	mov	r3, r0
   86bba:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   86bbc:	2100      	movs	r1, #0
   86bbe:	202b      	movs	r0, #43	; 0x2b
   86bc0:	4b1e      	ldr	r3, [pc, #120]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86bc2:	4798      	blx	r3
   86bc4:	4603      	mov	r3, r0
   86bc6:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86bc8:	2100      	movs	r1, #0
   86bca:	2021      	movs	r0, #33	; 0x21
   86bcc:	4b1b      	ldr	r3, [pc, #108]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86bce:	4798      	blx	r3
   86bd0:	4603      	mov	r3, r0
   86bd2:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86bd4:	2100      	movs	r1, #0
   86bd6:	2013      	movs	r0, #19
   86bd8:	4b18      	ldr	r3, [pc, #96]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86bda:	4798      	blx	r3
   86bdc:	4603      	mov	r3, r0
   86bde:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86be0:	2100      	movs	r1, #0
   86be2:	2014      	movs	r0, #20
   86be4:	4b15      	ldr	r3, [pc, #84]	; (86c3c <Cl_Dlsis_BypassDialysis+0x14c>)
   86be6:	4798      	blx	r3
   86be8:	4603      	mov	r3, r0
   86bea:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   86bec:	4b14      	ldr	r3, [pc, #80]	; (86c40 <Cl_Dlsis_BypassDialysis+0x150>)
   86bee:	2208      	movs	r2, #8
   86bf0:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   86bf2:	1dbb      	adds	r3, r7, #6
   86bf4:	2200      	movs	r2, #0
   86bf6:	4619      	mov	r1, r3
   86bf8:	2041      	movs	r0, #65	; 0x41
   86bfa:	4b12      	ldr	r3, [pc, #72]	; (86c44 <Cl_Dlsis_BypassDialysis+0x154>)
   86bfc:	4798      	blx	r3
   86bfe:	4603      	mov	r3, r0
   86c00:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86c02:	1dbb      	adds	r3, r7, #6
   86c04:	2200      	movs	r2, #0
   86c06:	4619      	mov	r1, r3
   86c08:	2040      	movs	r0, #64	; 0x40
   86c0a:	4b0e      	ldr	r3, [pc, #56]	; (86c44 <Cl_Dlsis_BypassDialysis+0x154>)
   86c0c:	4798      	blx	r3
   86c0e:	4603      	mov	r3, r0
   86c10:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   86c12:	2300      	movs	r3, #0
}
   86c14:	4618      	mov	r0, r3
   86c16:	3708      	adds	r7, #8
   86c18:	46bd      	mov	sp, r7
   86c1a:	bd80      	pop	{r7, pc}
   86c1c:	0009769d 	.word	0x0009769d
   86c20:	0009748d 	.word	0x0009748d
   86c24:	20072d74 	.word	0x20072d74
   86c28:	200720d4 	.word	0x200720d4
   86c2c:	200720dc 	.word	0x200720dc
   86c30:	200720d8 	.word	0x200720d8
   86c34:	200720e0 	.word	0x200720e0
   86c38:	200720e4 	.word	0x200720e4
   86c3c:	00082f5d 	.word	0x00082f5d
   86c40:	200720d0 	.word	0x200720d0
   86c44:	0009926d 	.word	0x0009926d

00086c48 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   86c48:	b580      	push	{r7, lr}
   86c4a:	b082      	sub	sp, #8
   86c4c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86c4e:	2300      	movs	r3, #0
   86c50:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   86c52:	4b4f      	ldr	r3, [pc, #316]	; (86d90 <Cl_Dlsis_BypassOff+0x148>)
   86c54:	4798      	blx	r3
   86c56:	4603      	mov	r3, r0
   86c58:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   86c5a:	4b4e      	ldr	r3, [pc, #312]	; (86d94 <Cl_Dlsis_BypassOff+0x14c>)
   86c5c:	681b      	ldr	r3, [r3, #0]
   86c5e:	b2da      	uxtb	r2, r3
   86c60:	4b4d      	ldr	r3, [pc, #308]	; (86d98 <Cl_Dlsis_BypassOff+0x150>)
   86c62:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   86c64:	4b4d      	ldr	r3, [pc, #308]	; (86d9c <Cl_Dlsis_BypassOff+0x154>)
   86c66:	681b      	ldr	r3, [r3, #0]
   86c68:	b2da      	uxtb	r2, r3
   86c6a:	4b4b      	ldr	r3, [pc, #300]	; (86d98 <Cl_Dlsis_BypassOff+0x150>)
   86c6c:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   86c6e:	4b4c      	ldr	r3, [pc, #304]	; (86da0 <Cl_Dlsis_BypassOff+0x158>)
   86c70:	681b      	ldr	r3, [r3, #0]
   86c72:	b2da      	uxtb	r2, r3
   86c74:	4b48      	ldr	r3, [pc, #288]	; (86d98 <Cl_Dlsis_BypassOff+0x150>)
   86c76:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   86c78:	4b4a      	ldr	r3, [pc, #296]	; (86da4 <Cl_Dlsis_BypassOff+0x15c>)
   86c7a:	681b      	ldr	r3, [r3, #0]
   86c7c:	b2da      	uxtb	r2, r3
   86c7e:	4b46      	ldr	r3, [pc, #280]	; (86d98 <Cl_Dlsis_BypassOff+0x150>)
   86c80:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   86c82:	4b49      	ldr	r3, [pc, #292]	; (86da8 <Cl_Dlsis_BypassOff+0x160>)
   86c84:	681b      	ldr	r3, [r3, #0]
   86c86:	b2da      	uxtb	r2, r3
   86c88:	4b43      	ldr	r3, [pc, #268]	; (86d98 <Cl_Dlsis_BypassOff+0x150>)
   86c8a:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   86c8c:	2101      	movs	r1, #1
   86c8e:	2001      	movs	r0, #1
   86c90:	4b46      	ldr	r3, [pc, #280]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86c92:	4798      	blx	r3
   86c94:	4603      	mov	r3, r0
   86c96:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86c98:	2101      	movs	r1, #1
   86c9a:	203d      	movs	r0, #61	; 0x3d
   86c9c:	4b43      	ldr	r3, [pc, #268]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86c9e:	4798      	blx	r3
   86ca0:	4603      	mov	r3, r0
   86ca2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   86ca4:	2101      	movs	r1, #1
   86ca6:	203e      	movs	r0, #62	; 0x3e
   86ca8:	4b40      	ldr	r3, [pc, #256]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86caa:	4798      	blx	r3
   86cac:	4603      	mov	r3, r0
   86cae:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   86cb0:	2101      	movs	r1, #1
   86cb2:	2005      	movs	r0, #5
   86cb4:	4b3d      	ldr	r3, [pc, #244]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cb6:	4798      	blx	r3
   86cb8:	4603      	mov	r3, r0
   86cba:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   86cbc:	2101      	movs	r1, #1
   86cbe:	2006      	movs	r0, #6
   86cc0:	4b3a      	ldr	r3, [pc, #232]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cc2:	4798      	blx	r3
   86cc4:	4603      	mov	r3, r0
   86cc6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86cc8:	2100      	movs	r1, #0
   86cca:	2003      	movs	r0, #3
   86ccc:	4b37      	ldr	r3, [pc, #220]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cce:	4798      	blx	r3
   86cd0:	4603      	mov	r3, r0
   86cd2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86cd4:	2100      	movs	r1, #0
   86cd6:	2004      	movs	r0, #4
   86cd8:	4b34      	ldr	r3, [pc, #208]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cda:	4798      	blx	r3
   86cdc:	4603      	mov	r3, r0
   86cde:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86ce0:	2100      	movs	r1, #0
   86ce2:	2007      	movs	r0, #7
   86ce4:	4b31      	ldr	r3, [pc, #196]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86ce6:	4798      	blx	r3
   86ce8:	4603      	mov	r3, r0
   86cea:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86cec:	2100      	movs	r1, #0
   86cee:	2008      	movs	r0, #8
   86cf0:	4b2e      	ldr	r3, [pc, #184]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cf2:	4798      	blx	r3
   86cf4:	4603      	mov	r3, r0
   86cf6:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   86cf8:	2101      	movs	r1, #1
   86cfa:	202a      	movs	r0, #42	; 0x2a
   86cfc:	4b2b      	ldr	r3, [pc, #172]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86cfe:	4798      	blx	r3
   86d00:	4603      	mov	r3, r0
   86d02:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   86d04:	2101      	movs	r1, #1
   86d06:	202c      	movs	r0, #44	; 0x2c
   86d08:	4b28      	ldr	r3, [pc, #160]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d0a:	4798      	blx	r3
   86d0c:	4603      	mov	r3, r0
   86d0e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   86d10:	2100      	movs	r1, #0
   86d12:	2029      	movs	r0, #41	; 0x29
   86d14:	4b25      	ldr	r3, [pc, #148]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d16:	4798      	blx	r3
   86d18:	4603      	mov	r3, r0
   86d1a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   86d1c:	2100      	movs	r1, #0
   86d1e:	202b      	movs	r0, #43	; 0x2b
   86d20:	4b22      	ldr	r3, [pc, #136]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d22:	4798      	blx	r3
   86d24:	4603      	mov	r3, r0
   86d26:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86d28:	2100      	movs	r1, #0
   86d2a:	2021      	movs	r0, #33	; 0x21
   86d2c:	4b1f      	ldr	r3, [pc, #124]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d2e:	4798      	blx	r3
   86d30:	4603      	mov	r3, r0
   86d32:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86d34:	2100      	movs	r1, #0
   86d36:	2013      	movs	r0, #19
   86d38:	4b1c      	ldr	r3, [pc, #112]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d3a:	4798      	blx	r3
   86d3c:	4603      	mov	r3, r0
   86d3e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86d40:	2100      	movs	r1, #0
   86d42:	2014      	movs	r0, #20
   86d44:	4b19      	ldr	r3, [pc, #100]	; (86dac <Cl_Dlsis_BypassOff+0x164>)
   86d46:	4798      	blx	r3
   86d48:	4603      	mov	r3, r0
   86d4a:	71fb      	strb	r3, [r7, #7]
	  
	Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
   86d4c:	2004      	movs	r0, #4
   86d4e:	4b18      	ldr	r3, [pc, #96]	; (86db0 <Cl_Dlsis_BypassOff+0x168>)
   86d50:	4798      	blx	r3
   86d52:	4603      	mov	r3, r0
   86d54:	71fb      	strb	r3, [r7, #7]
	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   86d56:	4b17      	ldr	r3, [pc, #92]	; (86db4 <Cl_Dlsis_BypassOff+0x16c>)
   86d58:	2204      	movs	r2, #4
   86d5a:	701a      	strb	r2, [r3, #0]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   86d5c:	1dbb      	adds	r3, r7, #6
   86d5e:	2200      	movs	r2, #0
   86d60:	4619      	mov	r1, r3
   86d62:	2042      	movs	r0, #66	; 0x42
   86d64:	4b14      	ldr	r3, [pc, #80]	; (86db8 <Cl_Dlsis_BypassOff+0x170>)
   86d66:	4798      	blx	r3
   86d68:	4603      	mov	r3, r0
   86d6a:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   86d6c:	1dbb      	adds	r3, r7, #6
   86d6e:	2200      	movs	r2, #0
   86d70:	4619      	mov	r1, r3
   86d72:	2043      	movs	r0, #67	; 0x43
   86d74:	4b10      	ldr	r3, [pc, #64]	; (86db8 <Cl_Dlsis_BypassOff+0x170>)
   86d76:	4798      	blx	r3
   86d78:	4603      	mov	r3, r0
   86d7a:	71fb      	strb	r3, [r7, #7]
		Cl_Dlsis_UpdateTimeInfo();
   86d7c:	4b0f      	ldr	r3, [pc, #60]	; (86dbc <Cl_Dlsis_BypassOff+0x174>)
   86d7e:	4798      	blx	r3
	bypass_flag = 1;
   86d80:	4b0f      	ldr	r3, [pc, #60]	; (86dc0 <Cl_Dlsis_BypassOff+0x178>)
   86d82:	2201      	movs	r2, #1
   86d84:	701a      	strb	r2, [r3, #0]
return CL_OK;
   86d86:	2300      	movs	r3, #0
}
   86d88:	4618      	mov	r0, r3
   86d8a:	3708      	adds	r7, #8
   86d8c:	46bd      	mov	sp, r7
   86d8e:	bd80      	pop	{r7, pc}
   86d90:	000976c5 	.word	0x000976c5
   86d94:	200720d4 	.word	0x200720d4
   86d98:	20072d74 	.word	0x20072d74
   86d9c:	200720dc 	.word	0x200720dc
   86da0:	200720d8 	.word	0x200720d8
   86da4:	200720e0 	.word	0x200720e0
   86da8:	200720e4 	.word	0x200720e4
   86dac:	00082f5d 	.word	0x00082f5d
   86db0:	00097451 	.word	0x00097451
   86db4:	200720d0 	.word	0x200720d0
   86db8:	0009926d 	.word	0x0009926d
   86dbc:	000864f5 	.word	0x000864f5
   86dc0:	200720ee 	.word	0x200720ee

00086dc4 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   86dc4:	b580      	push	{r7, lr}
   86dc6:	b082      	sub	sp, #8
   86dc8:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86dca:	2300      	movs	r3, #0
   86dcc:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   86dce:	4b0f      	ldr	r3, [pc, #60]	; (86e0c <Cl_Dlsis_PauseDialysis+0x48>)
   86dd0:	781b      	ldrb	r3, [r3, #0]
   86dd2:	2b00      	cmp	r3, #0
   86dd4:	d015      	beq.n	86e02 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   86dd6:	4b0d      	ldr	r3, [pc, #52]	; (86e0c <Cl_Dlsis_PauseDialysis+0x48>)
   86dd8:	781b      	ldrb	r3, [r3, #0]
   86dda:	3b02      	subs	r3, #2
   86ddc:	2b03      	cmp	r3, #3
   86dde:	d80f      	bhi.n	86e00 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86de0:	4b0b      	ldr	r3, [pc, #44]	; (86e10 <Cl_Dlsis_PauseDialysis+0x4c>)
   86de2:	4798      	blx	r3
   86de4:	4603      	mov	r3, r0
   86de6:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   86de8:	4b08      	ldr	r3, [pc, #32]	; (86e0c <Cl_Dlsis_PauseDialysis+0x48>)
   86dea:	2207      	movs	r2, #7
   86dec:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86dee:	1dbb      	adds	r3, r7, #6
   86df0:	2200      	movs	r2, #0
   86df2:	4619      	mov	r1, r3
   86df4:	2040      	movs	r0, #64	; 0x40
   86df6:	4b07      	ldr	r3, [pc, #28]	; (86e14 <Cl_Dlsis_PauseDialysis+0x50>)
   86df8:	4798      	blx	r3
   86dfa:	4603      	mov	r3, r0
   86dfc:	71fb      	strb	r3, [r7, #7]
			
			break;
   86dfe:	e000      	b.n	86e02 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   86e00:	bf00      	nop
		}
return CL_OK;
   86e02:	2300      	movs	r3, #0
	
}
   86e04:	4618      	mov	r0, r3
   86e06:	3708      	adds	r7, #8
   86e08:	46bd      	mov	sp, r7
   86e0a:	bd80      	pop	{r7, pc}
   86e0c:	200720d0 	.word	0x200720d0
   86e10:	0009769d 	.word	0x0009769d
   86e14:	0009926d 	.word	0x0009926d

00086e18 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   86e18:	b580      	push	{r7, lr}
   86e1a:	b082      	sub	sp, #8
   86e1c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86e1e:	2300      	movs	r3, #0
   86e20:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86e22:	234d      	movs	r3, #77	; 0x4d
   86e24:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   86e26:	1d7b      	adds	r3, r7, #5
   86e28:	4618      	mov	r0, r3
   86e2a:	4b04      	ldr	r3, [pc, #16]	; (86e3c <Cl_Dlsis_ProcessAlarms+0x24>)
   86e2c:	4798      	blx	r3
   86e2e:	4603      	mov	r3, r0
   86e30:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   86e32:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   86e34:	4618      	mov	r0, r3
   86e36:	3708      	adds	r7, #8
   86e38:	46bd      	mov	sp, r7
   86e3a:	bd80      	pop	{r7, pc}
   86e3c:	000865f9 	.word	0x000865f9

00086e40 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   86e40:	b580      	push	{r7, lr}
   86e42:	b082      	sub	sp, #8
   86e44:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   86e46:	2300      	movs	r3, #0
   86e48:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   86e4a:	2001      	movs	r0, #1
   86e4c:	4b03      	ldr	r3, [pc, #12]	; (86e5c <Cl_DlsisFillingFlowOff+0x1c>)
   86e4e:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   86e50:	79fb      	ldrb	r3, [r7, #7]
	
}
   86e52:	4618      	mov	r0, r3
   86e54:	3708      	adds	r7, #8
   86e56:	46bd      	mov	sp, r7
   86e58:	bd80      	pop	{r7, pc}
   86e5a:	bf00      	nop
   86e5c:	00097511 	.word	0x00097511

00086e60 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   86e60:	b580      	push	{r7, lr}
   86e62:	b082      	sub	sp, #8
   86e64:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86e66:	2300      	movs	r3, #0
   86e68:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86e6a:	234d      	movs	r3, #77	; 0x4d
   86e6c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   86e6e:	4b55      	ldr	r3, [pc, #340]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e70:	2200      	movs	r2, #0
   86e72:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   86e74:	4b53      	ldr	r3, [pc, #332]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e76:	2200      	movs	r2, #0
   86e78:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   86e7a:	2005      	movs	r0, #5
   86e7c:	4b52      	ldr	r3, [pc, #328]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e7e:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   86e80:	2006      	movs	r0, #6
   86e82:	4b51      	ldr	r3, [pc, #324]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e84:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   86e86:	4b4f      	ldr	r3, [pc, #316]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e88:	2200      	movs	r2, #0
   86e8a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   86e8e:	2001      	movs	r0, #1
   86e90:	4b4d      	ldr	r3, [pc, #308]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86e92:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   86e94:	4b4b      	ldr	r3, [pc, #300]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e96:	2200      	movs	r2, #0
   86e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   86e9c:	4b49      	ldr	r3, [pc, #292]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86e9e:	2200      	movs	r2, #0
   86ea0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   86ea4:	2015      	movs	r0, #21
   86ea6:	4b48      	ldr	r3, [pc, #288]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ea8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   86eaa:	2016      	movs	r0, #22
   86eac:	4b46      	ldr	r3, [pc, #280]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86eae:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   86eb0:	4b44      	ldr	r3, [pc, #272]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86eb2:	2200      	movs	r2, #0
   86eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   86eb8:	4b42      	ldr	r3, [pc, #264]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86eba:	2200      	movs	r2, #0
   86ebc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   86ec0:	2017      	movs	r0, #23
   86ec2:	4b41      	ldr	r3, [pc, #260]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ec4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   86ec6:	2018      	movs	r0, #24
   86ec8:	4b3f      	ldr	r3, [pc, #252]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86eca:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   86ecc:	4b3d      	ldr	r3, [pc, #244]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ece:	2200      	movs	r2, #0
   86ed0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   86ed4:	4b3b      	ldr	r3, [pc, #236]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ed6:	2200      	movs	r2, #0
   86ed8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   86edc:	2027      	movs	r0, #39	; 0x27
   86ede:	4b3a      	ldr	r3, [pc, #232]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ee0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   86ee2:	2028      	movs	r0, #40	; 0x28
   86ee4:	4b38      	ldr	r3, [pc, #224]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ee6:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   86ee8:	4b36      	ldr	r3, [pc, #216]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86eea:	2200      	movs	r2, #0
   86eec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   86ef0:	2021      	movs	r0, #33	; 0x21
   86ef2:	4b35      	ldr	r3, [pc, #212]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86ef4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   86ef6:	4b33      	ldr	r3, [pc, #204]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86ef8:	2200      	movs	r2, #0
   86efa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   86efe:	2020      	movs	r0, #32
   86f00:	4b31      	ldr	r3, [pc, #196]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f02:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   86f04:	4b2f      	ldr	r3, [pc, #188]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f06:	2200      	movs	r2, #0
   86f08:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   86f0c:	2022      	movs	r0, #34	; 0x22
   86f0e:	4b2e      	ldr	r3, [pc, #184]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f10:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   86f12:	4b2c      	ldr	r3, [pc, #176]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f14:	2200      	movs	r2, #0
   86f16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   86f1a:	4b2a      	ldr	r3, [pc, #168]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f1c:	2200      	movs	r2, #0
   86f1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   86f22:	2024      	movs	r0, #36	; 0x24
   86f24:	4b28      	ldr	r3, [pc, #160]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f26:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   86f28:	2023      	movs	r0, #35	; 0x23
   86f2a:	4b27      	ldr	r3, [pc, #156]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f2c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   86f2e:	4b25      	ldr	r3, [pc, #148]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f30:	2200      	movs	r2, #0
   86f32:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   86f36:	4b23      	ldr	r3, [pc, #140]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f38:	2200      	movs	r2, #0
   86f3a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   86f3e:	2026      	movs	r0, #38	; 0x26
   86f40:	4b21      	ldr	r3, [pc, #132]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f42:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   86f44:	2025      	movs	r0, #37	; 0x25
   86f46:	4b20      	ldr	r3, [pc, #128]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f48:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   86f4a:	4b1e      	ldr	r3, [pc, #120]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f4c:	2200      	movs	r2, #0
   86f4e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   86f52:	4b1c      	ldr	r3, [pc, #112]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f54:	2200      	movs	r2, #0
   86f56:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   86f5a:	2007      	movs	r0, #7
   86f5c:	4b1a      	ldr	r3, [pc, #104]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f5e:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   86f60:	2008      	movs	r0, #8
   86f62:	4b19      	ldr	r3, [pc, #100]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f64:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   86f66:	4b17      	ldr	r3, [pc, #92]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f68:	2200      	movs	r2, #0
   86f6a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   86f6e:	4b15      	ldr	r3, [pc, #84]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f70:	2200      	movs	r2, #0
   86f72:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   86f76:	2013      	movs	r0, #19
   86f78:	4b13      	ldr	r3, [pc, #76]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f7a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   86f7c:	2014      	movs	r0, #20
   86f7e:	4b12      	ldr	r3, [pc, #72]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f80:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   86f82:	4b10      	ldr	r3, [pc, #64]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f84:	2200      	movs	r2, #0
   86f86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   86f8a:	4b0e      	ldr	r3, [pc, #56]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f8c:	2200      	movs	r2, #0
   86f8e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   86f92:	2011      	movs	r0, #17
   86f94:	4b0c      	ldr	r3, [pc, #48]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f96:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   86f98:	2012      	movs	r0, #18
   86f9a:	4b0b      	ldr	r3, [pc, #44]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86f9c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   86f9e:	4b09      	ldr	r3, [pc, #36]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fa0:	2200      	movs	r2, #0
   86fa2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   86fa6:	4b07      	ldr	r3, [pc, #28]	; (86fc4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fa8:	2200      	movs	r2, #0
   86faa:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   86fae:	200f      	movs	r0, #15
   86fb0:	4b05      	ldr	r3, [pc, #20]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86fb2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   86fb4:	2010      	movs	r0, #16
   86fb6:	4b04      	ldr	r3, [pc, #16]	; (86fc8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   86fb8:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   86fba:	79fb      	ldrb	r3, [r7, #7]
}
   86fbc:	4618      	mov	r0, r3
   86fbe:	3708      	adds	r7, #8
   86fc0:	46bd      	mov	sp, r7
   86fc2:	bd80      	pop	{r7, pc}
   86fc4:	2007039c 	.word	0x2007039c
   86fc8:	00083051 	.word	0x00083051
   86fcc:	00000000 	.word	0x00000000

00086fd0 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   86fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   86fd2:	b095      	sub	sp, #84	; 0x54
   86fd4:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   86fd6:	f107 030c 	add.w	r3, r7, #12
   86fda:	2228      	movs	r2, #40	; 0x28
   86fdc:	2100      	movs	r1, #0
   86fde:	4618      	mov	r0, r3
   86fe0:	4ba9      	ldr	r3, [pc, #676]	; (87288 <Cl_Dlsis_SenddlsisData+0x2b8>)
   86fe2:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   86fe4:	2300      	movs	r3, #0
   86fe6:	807b      	strh	r3, [r7, #2]
   86fe8:	2300      	movs	r3, #0
   86fea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86fee:	2300      	movs	r3, #0
   86ff0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	Cl_Uint8Type count = 0;
   86ff4:	2300      	movs	r3, #0
   86ff6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86ffa:	234d      	movs	r3, #77	; 0x4d
   86ffc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   87000:	232a      	movs	r3, #42	; 0x2a
   87002:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	systemdataarray[0] = DIALYSIS_DATA;
   87006:	2305      	movs	r3, #5
   87008:	733b      	strb	r3, [r7, #12]
	count++;
   8700a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8700e:	3301      	adds	r3, #1
   87010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   87014:	1cbb      	adds	r3, r7, #2
   87016:	4619      	mov	r1, r3
   87018:	2014      	movs	r0, #20
   8701a:	4b9c      	ldr	r3, [pc, #624]	; (8728c <Cl_Dlsis_SenddlsisData+0x2bc>)
   8701c:	4798      	blx	r3
// 							res_temp_lookuptable(cal_data);
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// 							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
// 							temp1 = temp1 - 0.4;                                  // removed offset on 02.07.17
							temp1 = (float)temp/10;
   8701e:	887a      	ldrh	r2, [r7, #2]
   87020:	4b9b      	ldr	r3, [pc, #620]	; (87290 <Cl_Dlsis_SenddlsisData+0x2c0>)
   87022:	4610      	mov	r0, r2
   87024:	4798      	blx	r3
   87026:	4602      	mov	r2, r0
   87028:	4b9a      	ldr	r3, [pc, #616]	; (87294 <Cl_Dlsis_SenddlsisData+0x2c4>)
   8702a:	499b      	ldr	r1, [pc, #620]	; (87298 <Cl_Dlsis_SenddlsisData+0x2c8>)
   8702c:	4610      	mov	r0, r2
   8702e:	4798      	blx	r3
   87030:	4603      	mov	r3, r0
   87032:	461a      	mov	r2, r3
   87034:	4b99      	ldr	r3, [pc, #612]	; (8729c <Cl_Dlsis_SenddlsisData+0x2cc>)
   87036:	4610      	mov	r0, r2
   87038:	4798      	blx	r3
   8703a:	4603      	mov	r3, r0
   8703c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							avgtmp3 =(avgtmp3*5 + temp1)/6;
   87040:	4b97      	ldr	r3, [pc, #604]	; (872a0 <Cl_Dlsis_SenddlsisData+0x2d0>)
   87042:	681a      	ldr	r2, [r3, #0]
   87044:	4b97      	ldr	r3, [pc, #604]	; (872a4 <Cl_Dlsis_SenddlsisData+0x2d4>)
   87046:	4998      	ldr	r1, [pc, #608]	; (872a8 <Cl_Dlsis_SenddlsisData+0x2d8>)
   87048:	4610      	mov	r0, r2
   8704a:	4798      	blx	r3
   8704c:	4603      	mov	r3, r0
   8704e:	461c      	mov	r4, r3
   87050:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
   87054:	4b95      	ldr	r3, [pc, #596]	; (872ac <Cl_Dlsis_SenddlsisData+0x2dc>)
   87056:	4610      	mov	r0, r2
   87058:	4798      	blx	r3
   8705a:	4602      	mov	r2, r0
   8705c:	4b94      	ldr	r3, [pc, #592]	; (872b0 <Cl_Dlsis_SenddlsisData+0x2e0>)
   8705e:	4611      	mov	r1, r2
   87060:	4620      	mov	r0, r4
   87062:	4798      	blx	r3
   87064:	4603      	mov	r3, r0
   87066:	461a      	mov	r2, r3
   87068:	4b8a      	ldr	r3, [pc, #552]	; (87294 <Cl_Dlsis_SenddlsisData+0x2c4>)
   8706a:	4992      	ldr	r1, [pc, #584]	; (872b4 <Cl_Dlsis_SenddlsisData+0x2e4>)
   8706c:	4610      	mov	r0, r2
   8706e:	4798      	blx	r3
   87070:	4603      	mov	r3, r0
   87072:	461a      	mov	r2, r3
   87074:	4b8a      	ldr	r3, [pc, #552]	; (872a0 <Cl_Dlsis_SenddlsisData+0x2d0>)
   87076:	601a      	str	r2, [r3, #0]
							
							
		}
		
		uint16_t sensordata = 0;
   87078:	2300      	movs	r3, #0
   8707a:	803b      	strh	r3, [r7, #0]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   8707c:	463b      	mov	r3, r7
   8707e:	4619      	mov	r1, r3
   87080:	2007      	movs	r0, #7
   87082:	4b82      	ldr	r3, [pc, #520]	; (8728c <Cl_Dlsis_SenddlsisData+0x2bc>)
   87084:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				float	 cond1,	cond_final, cond1x100, cond_final_X10000;
				sensordata = sensordata/10;
   87086:	883b      	ldrh	r3, [r7, #0]
   87088:	4a8b      	ldr	r2, [pc, #556]	; (872b8 <Cl_Dlsis_SenddlsisData+0x2e8>)
   8708a:	fba2 2303 	umull	r2, r3, r2, r3
   8708e:	08db      	lsrs	r3, r3, #3
   87090:	b29b      	uxth	r3, r3
   87092:	803b      	strh	r3, [r7, #0]
				if (sensordata > 50)
   87094:	883b      	ldrh	r3, [r7, #0]
   87096:	2b32      	cmp	r3, #50	; 0x32
   87098:	f240 8126 	bls.w	872e8 <Cl_Dlsis_SenddlsisData+0x318>
				
											
											//	sensordata  = 25600;
											
											
											cond1 = sensordata/100;
   8709c:	883b      	ldrh	r3, [r7, #0]
   8709e:	4a87      	ldr	r2, [pc, #540]	; (872bc <Cl_Dlsis_SenddlsisData+0x2ec>)
   870a0:	fba2 2303 	umull	r2, r3, r2, r3
   870a4:	095b      	lsrs	r3, r3, #5
   870a6:	b29b      	uxth	r3, r3
   870a8:	461a      	mov	r2, r3
   870aa:	4b80      	ldr	r3, [pc, #512]	; (872ac <Cl_Dlsis_SenddlsisData+0x2dc>)
   870ac:	4610      	mov	r0, r2
   870ae:	4798      	blx	r3
   870b0:	4603      	mov	r3, r0
   870b2:	647b      	str	r3, [r7, #68]	; 0x44
											cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   870b4:	4b82      	ldr	r3, [pc, #520]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   870b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
   870b8:	4798      	blx	r3
   870ba:	4c82      	ldr	r4, [pc, #520]	; (872c4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   870bc:	a366      	add	r3, pc, #408	; (adr r3, 87258 <Cl_Dlsis_SenddlsisData+0x288>)
   870be:	e9d3 2300 	ldrd	r2, r3, [r3]
   870c2:	47a0      	blx	r4
   870c4:	4603      	mov	r3, r0
   870c6:	460c      	mov	r4, r1
   870c8:	461d      	mov	r5, r3
   870ca:	4626      	mov	r6, r4
   870cc:	4b7c      	ldr	r3, [pc, #496]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   870ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
   870d0:	4798      	blx	r3
   870d2:	4602      	mov	r2, r0
   870d4:	460b      	mov	r3, r1
   870d6:	4c7b      	ldr	r4, [pc, #492]	; (872c4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   870d8:	4628      	mov	r0, r5
   870da:	4631      	mov	r1, r6
   870dc:	47a0      	blx	r4
   870de:	4603      	mov	r3, r0
   870e0:	460c      	mov	r4, r1
   870e2:	461d      	mov	r5, r3
   870e4:	4626      	mov	r6, r4
   870e6:	4b76      	ldr	r3, [pc, #472]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   870e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   870ea:	4798      	blx	r3
   870ec:	4c75      	ldr	r4, [pc, #468]	; (872c4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   870ee:	a35c      	add	r3, pc, #368	; (adr r3, 87260 <Cl_Dlsis_SenddlsisData+0x290>)
   870f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   870f4:	47a0      	blx	r4
   870f6:	4603      	mov	r3, r0
   870f8:	460c      	mov	r4, r1
   870fa:	461a      	mov	r2, r3
   870fc:	4623      	mov	r3, r4
   870fe:	4c72      	ldr	r4, [pc, #456]	; (872c8 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87100:	4628      	mov	r0, r5
   87102:	4631      	mov	r1, r6
   87104:	47a0      	blx	r4
   87106:	4603      	mov	r3, r0
   87108:	460c      	mov	r4, r1
   8710a:	4618      	mov	r0, r3
   8710c:	4621      	mov	r1, r4
   8710e:	4c6e      	ldr	r4, [pc, #440]	; (872c8 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87110:	a355      	add	r3, pc, #340	; (adr r3, 87268 <Cl_Dlsis_SenddlsisData+0x298>)
   87112:	e9d3 2300 	ldrd	r2, r3, [r3]
   87116:	47a0      	blx	r4
   87118:	4603      	mov	r3, r0
   8711a:	460c      	mov	r4, r1
   8711c:	4618      	mov	r0, r3
   8711e:	4621      	mov	r1, r4
   87120:	4c69      	ldr	r4, [pc, #420]	; (872c8 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87122:	a353      	add	r3, pc, #332	; (adr r3, 87270 <Cl_Dlsis_SenddlsisData+0x2a0>)
   87124:	e9d3 2300 	ldrd	r2, r3, [r3]
   87128:	47a0      	blx	r4
   8712a:	4603      	mov	r3, r0
   8712c:	460c      	mov	r4, r1
   8712e:	4619      	mov	r1, r3
   87130:	4622      	mov	r2, r4
   87132:	4b66      	ldr	r3, [pc, #408]	; (872cc <Cl_Dlsis_SenddlsisData+0x2fc>)
   87134:	4608      	mov	r0, r1
   87136:	4611      	mov	r1, r2
   87138:	4798      	blx	r3
   8713a:	4603      	mov	r3, r0
   8713c:	643b      	str	r3, [r7, #64]	; 0x40
											cond1x100 = cond_final*100; ;
   8713e:	4b59      	ldr	r3, [pc, #356]	; (872a4 <Cl_Dlsis_SenddlsisData+0x2d4>)
   87140:	4963      	ldr	r1, [pc, #396]	; (872d0 <Cl_Dlsis_SenddlsisData+0x300>)
   87142:	6c38      	ldr	r0, [r7, #64]	; 0x40
   87144:	4798      	blx	r3
   87146:	4603      	mov	r3, r0
   87148:	63fb      	str	r3, [r7, #60]	; 0x3c
											cond_final_X10000= (cond1x100/(1+(avgtmp3/10  -25.0)*0.021));
   8714a:	4b5d      	ldr	r3, [pc, #372]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   8714c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   8714e:	4798      	blx	r3
   87150:	4605      	mov	r5, r0
   87152:	460e      	mov	r6, r1
   87154:	4b52      	ldr	r3, [pc, #328]	; (872a0 <Cl_Dlsis_SenddlsisData+0x2d0>)
   87156:	681a      	ldr	r2, [r3, #0]
   87158:	4b4e      	ldr	r3, [pc, #312]	; (87294 <Cl_Dlsis_SenddlsisData+0x2c4>)
   8715a:	494f      	ldr	r1, [pc, #316]	; (87298 <Cl_Dlsis_SenddlsisData+0x2c8>)
   8715c:	4610      	mov	r0, r2
   8715e:	4798      	blx	r3
   87160:	4603      	mov	r3, r0
   87162:	461a      	mov	r2, r3
   87164:	4b56      	ldr	r3, [pc, #344]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   87166:	4610      	mov	r0, r2
   87168:	4798      	blx	r3
   8716a:	4c5a      	ldr	r4, [pc, #360]	; (872d4 <Cl_Dlsis_SenddlsisData+0x304>)
   8716c:	f04f 0200 	mov.w	r2, #0
   87170:	4b59      	ldr	r3, [pc, #356]	; (872d8 <Cl_Dlsis_SenddlsisData+0x308>)
   87172:	47a0      	blx	r4
   87174:	4603      	mov	r3, r0
   87176:	460c      	mov	r4, r1
   87178:	4618      	mov	r0, r3
   8717a:	4621      	mov	r1, r4
   8717c:	4c51      	ldr	r4, [pc, #324]	; (872c4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   8717e:	a33e      	add	r3, pc, #248	; (adr r3, 87278 <Cl_Dlsis_SenddlsisData+0x2a8>)
   87180:	e9d3 2300 	ldrd	r2, r3, [r3]
   87184:	47a0      	blx	r4
   87186:	4603      	mov	r3, r0
   87188:	460c      	mov	r4, r1
   8718a:	4618      	mov	r0, r3
   8718c:	4621      	mov	r1, r4
   8718e:	4c4e      	ldr	r4, [pc, #312]	; (872c8 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87190:	f04f 0200 	mov.w	r2, #0
   87194:	4b51      	ldr	r3, [pc, #324]	; (872dc <Cl_Dlsis_SenddlsisData+0x30c>)
   87196:	47a0      	blx	r4
   87198:	4603      	mov	r3, r0
   8719a:	460c      	mov	r4, r1
   8719c:	461a      	mov	r2, r3
   8719e:	4623      	mov	r3, r4
   871a0:	4c4f      	ldr	r4, [pc, #316]	; (872e0 <Cl_Dlsis_SenddlsisData+0x310>)
   871a2:	4628      	mov	r0, r5
   871a4:	4631      	mov	r1, r6
   871a6:	47a0      	blx	r4
   871a8:	4603      	mov	r3, r0
   871aa:	460c      	mov	r4, r1
   871ac:	4619      	mov	r1, r3
   871ae:	4622      	mov	r2, r4
   871b0:	4b46      	ldr	r3, [pc, #280]	; (872cc <Cl_Dlsis_SenddlsisData+0x2fc>)
   871b2:	4608      	mov	r0, r1
   871b4:	4611      	mov	r1, r2
   871b6:	4798      	blx	r3
   871b8:	4603      	mov	r3, r0
   871ba:	63bb      	str	r3, [r7, #56]	; 0x38
											
											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
   871bc:	4b40      	ldr	r3, [pc, #256]	; (872c0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   871be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   871c0:	4798      	blx	r3
   871c2:	4c40      	ldr	r4, [pc, #256]	; (872c4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   871c4:	a32e      	add	r3, pc, #184	; (adr r3, 87280 <Cl_Dlsis_SenddlsisData+0x2b0>)
   871c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   871ca:	47a0      	blx	r4
   871cc:	4603      	mov	r3, r0
   871ce:	460c      	mov	r4, r1
   871d0:	4618      	mov	r0, r3
   871d2:	4621      	mov	r1, r4
   871d4:	4c42      	ldr	r4, [pc, #264]	; (872e0 <Cl_Dlsis_SenddlsisData+0x310>)
   871d6:	f04f 0200 	mov.w	r2, #0
   871da:	4b42      	ldr	r3, [pc, #264]	; (872e4 <Cl_Dlsis_SenddlsisData+0x314>)
   871dc:	47a0      	blx	r4
   871de:	4603      	mov	r3, r0
   871e0:	460c      	mov	r4, r1
   871e2:	4619      	mov	r1, r3
   871e4:	4622      	mov	r2, r4
   871e6:	4b39      	ldr	r3, [pc, #228]	; (872cc <Cl_Dlsis_SenddlsisData+0x2fc>)
   871e8:	4608      	mov	r0, r1
   871ea:	4611      	mov	r1, r2
   871ec:	4798      	blx	r3
   871ee:	4603      	mov	r3, r0
   871f0:	63bb      	str	r3, [r7, #56]	; 0x38
		
					
					tempdata.word = (cond_final_X10000);
   871f2:	4b2a      	ldr	r3, [pc, #168]	; (8729c <Cl_Dlsis_SenddlsisData+0x2cc>)
   871f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   871f6:	4798      	blx	r3
   871f8:	4603      	mov	r3, r0
   871fa:	607b      	str	r3, [r7, #4]
					systemdataarray[count++] = tempdata.bytearray[0];
   871fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87200:	1c5a      	adds	r2, r3, #1
   87202:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87206:	793a      	ldrb	r2, [r7, #4]
   87208:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8720c:	440b      	add	r3, r1
   8720e:	f803 2c44 	strb.w	r2, [r3, #-68]
					systemdataarray[count++] = tempdata.bytearray[1];
   87212:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87216:	1c5a      	adds	r2, r3, #1
   87218:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8721c:	797a      	ldrb	r2, [r7, #5]
   8721e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87222:	440b      	add	r3, r1
   87224:	f803 2c44 	strb.w	r2, [r3, #-68]
					systemdataarray[count++] = tempdata.bytearray[2];
   87228:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8722c:	1c5a      	adds	r2, r3, #1
   8722e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87232:	79ba      	ldrb	r2, [r7, #6]
   87234:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87238:	440b      	add	r3, r1
   8723a:	f803 2c44 	strb.w	r2, [r3, #-68]
					systemdataarray[count++] = tempdata.bytearray[3];
   8723e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87242:	1c5a      	adds	r2, r3, #1
   87244:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87248:	79fa      	ldrb	r2, [r7, #7]
   8724a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8724e:	440b      	add	r3, r1
   87250:	f803 2c44 	strb.w	r2, [r3, #-68]
   87254:	e076      	b.n	87344 <Cl_Dlsis_SenddlsisData+0x374>
   87256:	bf00      	nop
   87258:	eb1c432d 	.word	0xeb1c432d
   8725c:	3f1a36e2 	.word	0x3f1a36e2
   87260:	d2f1a9fc 	.word	0xd2f1a9fc
   87264:	3fa0624d 	.word	0x3fa0624d
   87268:	51eb851f 	.word	0x51eb851f
   8726c:	3fed1eb8 	.word	0x3fed1eb8
   87270:	9999999a 	.word	0x9999999a
   87274:	3fd99999 	.word	0x3fd99999
   87278:	24dd2f1b 	.word	0x24dd2f1b
   8727c:	3f958106 	.word	0x3f958106
   87280:	33333333 	.word	0x33333333
   87284:	40153333 	.word	0x40153333
   87288:	000a39a5 	.word	0x000a39a5
   8728c:	0008d61d 	.word	0x0008d61d
   87290:	000a33a1 	.word	0x000a33a1
   87294:	000a35b9 	.word	0x000a35b9
   87298:	41200000 	.word	0x41200000
   8729c:	000a3829 	.word	0x000a3829
   872a0:	20072118 	.word	0x20072118
   872a4:	000a3451 	.word	0x000a3451
   872a8:	40a00000 	.word	0x40a00000
   872ac:	000a33a9 	.word	0x000a33a9
   872b0:	000a3241 	.word	0x000a3241
   872b4:	40c00000 	.word	0x40c00000
   872b8:	cccccccd 	.word	0xcccccccd
   872bc:	51eb851f 	.word	0x51eb851f
   872c0:	000a2b29 	.word	0x000a2b29
   872c4:	000a2bd1 	.word	0x000a2bd1
   872c8:	000a286d 	.word	0x000a286d
   872cc:	000a3195 	.word	0x000a3195
   872d0:	42c80000 	.word	0x42c80000
   872d4:	000a2869 	.word	0x000a2869
   872d8:	40390000 	.word	0x40390000
   872dc:	3ff00000 	.word	0x3ff00000
   872e0:	000a2e25 	.word	0x000a2e25
   872e4:	40240000 	.word	0x40240000
			}
				else
				{
					tempdata.word = 0;
   872e8:	2300      	movs	r3, #0
   872ea:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   872ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   872f0:	1c5a      	adds	r2, r3, #1
   872f2:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   872f6:	793a      	ldrb	r2, [r7, #4]
   872f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   872fc:	440b      	add	r3, r1
   872fe:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[1];
   87302:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87306:	1c5a      	adds	r2, r3, #1
   87308:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8730c:	797a      	ldrb	r2, [r7, #5]
   8730e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87312:	440b      	add	r3, r1
   87314:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[2];
   87318:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8731c:	1c5a      	adds	r2, r3, #1
   8731e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87322:	79ba      	ldrb	r2, [r7, #6]
   87324:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87328:	440b      	add	r3, r1
   8732a:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[3];
   8732e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87332:	1c5a      	adds	r2, r3, #1
   87334:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87338:	79fa      	ldrb	r2, [r7, #7]
   8733a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8733e:	440b      	add	r3, r1
   87340:	f803 2c44 	strb.w	r2, [r3, #-68]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   87344:	4bae      	ldr	r3, [pc, #696]	; (87600 <Cl_Dlsis_SenddlsisData+0x630>)
   87346:	681a      	ldr	r2, [r3, #0]
   87348:	4bae      	ldr	r3, [pc, #696]	; (87604 <Cl_Dlsis_SenddlsisData+0x634>)
   8734a:	4610      	mov	r0, r2
   8734c:	4798      	blx	r3
   8734e:	4603      	mov	r3, r0
   87350:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   87352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87356:	1c5a      	adds	r2, r3, #1
   87358:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8735c:	793a      	ldrb	r2, [r7, #4]
   8735e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87362:	440b      	add	r3, r1
   87364:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[1];
   87368:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8736c:	1c5a      	adds	r2, r3, #1
   8736e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87372:	797a      	ldrb	r2, [r7, #5]
   87374:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87378:	440b      	add	r3, r1
   8737a:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[2];
   8737e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87382:	1c5a      	adds	r2, r3, #1
   87384:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87388:	79ba      	ldrb	r2, [r7, #6]
   8738a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8738e:	440b      	add	r3, r1
   87390:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[3];
   87394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87398:	1c5a      	adds	r2, r3, #1
   8739a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8739e:	79fa      	ldrb	r2, [r7, #7]
   873a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   873a4:	440b      	add	r3, r1
   873a6:	f803 2c44 	strb.w	r2, [r3, #-68]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   873aa:	1d3b      	adds	r3, r7, #4
   873ac:	4619      	mov	r1, r3
   873ae:	200b      	movs	r0, #11
   873b0:	4b95      	ldr	r3, [pc, #596]	; (87608 <Cl_Dlsis_SenddlsisData+0x638>)
   873b2:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   873b4:	88bb      	ldrh	r3, [r7, #4]
   873b6:	461a      	mov	r2, r3
   873b8:	4b94      	ldr	r3, [pc, #592]	; (8760c <Cl_Dlsis_SenddlsisData+0x63c>)
   873ba:	4610      	mov	r0, r2
   873bc:	4798      	blx	r3
   873be:	4c94      	ldr	r4, [pc, #592]	; (87610 <Cl_Dlsis_SenddlsisData+0x640>)
   873c0:	a38d      	add	r3, pc, #564	; (adr r3, 875f8 <Cl_Dlsis_SenddlsisData+0x628>)
   873c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   873c6:	47a0      	blx	r4
   873c8:	4603      	mov	r3, r0
   873ca:	460c      	mov	r4, r1
   873cc:	4619      	mov	r1, r3
   873ce:	4622      	mov	r2, r4
   873d0:	4b90      	ldr	r3, [pc, #576]	; (87614 <Cl_Dlsis_SenddlsisData+0x644>)
   873d2:	4608      	mov	r0, r1
   873d4:	4611      	mov	r1, r2
   873d6:	4798      	blx	r3
   873d8:	4603      	mov	r3, r0
   873da:	86fb      	strh	r3, [r7, #54]	; 0x36
			calibration_apt(sensordatamillivolts);
   873dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   873e0:	4618      	mov	r0, r3
   873e2:	4b8d      	ldr	r3, [pc, #564]	; (87618 <Cl_Dlsis_SenddlsisData+0x648>)
   873e4:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   873e6:	4b8d      	ldr	r3, [pc, #564]	; (8761c <Cl_Dlsis_SenddlsisData+0x64c>)
   873e8:	681a      	ldr	r2, [r3, #0]
   873ea:	4b8d      	ldr	r3, [pc, #564]	; (87620 <Cl_Dlsis_SenddlsisData+0x650>)
   873ec:	498d      	ldr	r1, [pc, #564]	; (87624 <Cl_Dlsis_SenddlsisData+0x654>)
   873ee:	4610      	mov	r0, r2
   873f0:	4798      	blx	r3
   873f2:	4603      	mov	r3, r0
   873f4:	4618      	mov	r0, r3
   873f6:	4b8c      	ldr	r3, [pc, #560]	; (87628 <Cl_Dlsis_SenddlsisData+0x658>)
   873f8:	681a      	ldr	r2, [r3, #0]
   873fa:	4b8c      	ldr	r3, [pc, #560]	; (8762c <Cl_Dlsis_SenddlsisData+0x65c>)
   873fc:	4611      	mov	r1, r2
   873fe:	4798      	blx	r3
   87400:	4603      	mov	r3, r0
   87402:	461a      	mov	r2, r3
   87404:	4b8a      	ldr	r3, [pc, #552]	; (87630 <Cl_Dlsis_SenddlsisData+0x660>)
   87406:	498b      	ldr	r1, [pc, #556]	; (87634 <Cl_Dlsis_SenddlsisData+0x664>)
   87408:	4610      	mov	r0, r2
   8740a:	4798      	blx	r3
   8740c:	4603      	mov	r3, r0
   8740e:	461a      	mov	r2, r3
   87410:	4b82      	ldr	r3, [pc, #520]	; (8761c <Cl_Dlsis_SenddlsisData+0x64c>)
   87412:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   87414:	4b81      	ldr	r3, [pc, #516]	; (8761c <Cl_Dlsis_SenddlsisData+0x64c>)
   87416:	681a      	ldr	r2, [r3, #0]
   87418:	4b7a      	ldr	r3, [pc, #488]	; (87604 <Cl_Dlsis_SenddlsisData+0x634>)
   8741a:	4610      	mov	r0, r2
   8741c:	4798      	blx	r3
   8741e:	4603      	mov	r3, r0
   87420:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87422:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87426:	1c5a      	adds	r2, r3, #1
   87428:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8742c:	793a      	ldrb	r2, [r7, #4]
   8742e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87432:	440b      	add	r3, r1
   87434:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87438:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8743c:	1c5a      	adds	r2, r3, #1
   8743e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87442:	797a      	ldrb	r2, [r7, #5]
   87444:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87448:	440b      	add	r3, r1
   8744a:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   8744e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87452:	1c5a      	adds	r2, r3, #1
   87454:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87458:	79ba      	ldrb	r2, [r7, #6]
   8745a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8745e:	440b      	add	r3, r1
   87460:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87464:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87468:	1c5a      	adds	r2, r3, #1
   8746a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8746e:	79fa      	ldrb	r2, [r7, #7]
   87470:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87474:	440b      	add	r3, r1
   87476:	f803 2c44 	strb.w	r2, [r3, #-68]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   8747a:	1d3b      	adds	r3, r7, #4
   8747c:	4619      	mov	r1, r3
   8747e:	200c      	movs	r0, #12
   87480:	4b61      	ldr	r3, [pc, #388]	; (87608 <Cl_Dlsis_SenddlsisData+0x638>)
   87482:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87484:	88bb      	ldrh	r3, [r7, #4]
   87486:	461a      	mov	r2, r3
   87488:	4b60      	ldr	r3, [pc, #384]	; (8760c <Cl_Dlsis_SenddlsisData+0x63c>)
   8748a:	4610      	mov	r0, r2
   8748c:	4798      	blx	r3
   8748e:	4c60      	ldr	r4, [pc, #384]	; (87610 <Cl_Dlsis_SenddlsisData+0x640>)
   87490:	a359      	add	r3, pc, #356	; (adr r3, 875f8 <Cl_Dlsis_SenddlsisData+0x628>)
   87492:	e9d3 2300 	ldrd	r2, r3, [r3]
   87496:	47a0      	blx	r4
   87498:	4603      	mov	r3, r0
   8749a:	460c      	mov	r4, r1
   8749c:	4619      	mov	r1, r3
   8749e:	4622      	mov	r2, r4
   874a0:	4b5c      	ldr	r3, [pc, #368]	; (87614 <Cl_Dlsis_SenddlsisData+0x644>)
   874a2:	4608      	mov	r0, r1
   874a4:	4611      	mov	r1, r2
   874a6:	4798      	blx	r3
   874a8:	4603      	mov	r3, r0
   874aa:	86fb      	strh	r3, [r7, #54]	; 0x36
			calibration_vpt(sensordatamillivolts);
   874ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   874b0:	4618      	mov	r0, r3
   874b2:	4b61      	ldr	r3, [pc, #388]	; (87638 <Cl_Dlsis_SenddlsisData+0x668>)
   874b4:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   874b6:	4b61      	ldr	r3, [pc, #388]	; (8763c <Cl_Dlsis_SenddlsisData+0x66c>)
   874b8:	681a      	ldr	r2, [r3, #0]
   874ba:	4b59      	ldr	r3, [pc, #356]	; (87620 <Cl_Dlsis_SenddlsisData+0x650>)
   874bc:	4959      	ldr	r1, [pc, #356]	; (87624 <Cl_Dlsis_SenddlsisData+0x654>)
   874be:	4610      	mov	r0, r2
   874c0:	4798      	blx	r3
   874c2:	4603      	mov	r3, r0
   874c4:	4618      	mov	r0, r3
   874c6:	4b5e      	ldr	r3, [pc, #376]	; (87640 <Cl_Dlsis_SenddlsisData+0x670>)
   874c8:	681a      	ldr	r2, [r3, #0]
   874ca:	4b58      	ldr	r3, [pc, #352]	; (8762c <Cl_Dlsis_SenddlsisData+0x65c>)
   874cc:	4611      	mov	r1, r2
   874ce:	4798      	blx	r3
   874d0:	4603      	mov	r3, r0
   874d2:	461a      	mov	r2, r3
   874d4:	4b56      	ldr	r3, [pc, #344]	; (87630 <Cl_Dlsis_SenddlsisData+0x660>)
   874d6:	4957      	ldr	r1, [pc, #348]	; (87634 <Cl_Dlsis_SenddlsisData+0x664>)
   874d8:	4610      	mov	r0, r2
   874da:	4798      	blx	r3
   874dc:	4603      	mov	r3, r0
   874de:	461a      	mov	r2, r3
   874e0:	4b56      	ldr	r3, [pc, #344]	; (8763c <Cl_Dlsis_SenddlsisData+0x66c>)
   874e2:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   874e4:	4b55      	ldr	r3, [pc, #340]	; (8763c <Cl_Dlsis_SenddlsisData+0x66c>)
   874e6:	681a      	ldr	r2, [r3, #0]
   874e8:	4b46      	ldr	r3, [pc, #280]	; (87604 <Cl_Dlsis_SenddlsisData+0x634>)
   874ea:	4610      	mov	r0, r2
   874ec:	4798      	blx	r3
   874ee:	4603      	mov	r3, r0
   874f0:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   874f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   874f6:	1c5a      	adds	r2, r3, #1
   874f8:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   874fc:	793a      	ldrb	r2, [r7, #4]
   874fe:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87502:	440b      	add	r3, r1
   87504:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87508:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8750c:	1c5a      	adds	r2, r3, #1
   8750e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87512:	797a      	ldrb	r2, [r7, #5]
   87514:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87518:	440b      	add	r3, r1
   8751a:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   8751e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87522:	1c5a      	adds	r2, r3, #1
   87524:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87528:	79ba      	ldrb	r2, [r7, #6]
   8752a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8752e:	440b      	add	r3, r1
   87530:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87534:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87538:	1c5a      	adds	r2, r3, #1
   8753a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8753e:	79fa      	ldrb	r2, [r7, #7]
   87540:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87544:	440b      	add	r3, r1
   87546:	f803 2c44 	strb.w	r2, [r3, #-68]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   8754a:	1d3b      	adds	r3, r7, #4
   8754c:	4619      	mov	r1, r3
   8754e:	200e      	movs	r0, #14
   87550:	4b2d      	ldr	r3, [pc, #180]	; (87608 <Cl_Dlsis_SenddlsisData+0x638>)
   87552:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87554:	88bb      	ldrh	r3, [r7, #4]
   87556:	461a      	mov	r2, r3
   87558:	4b2c      	ldr	r3, [pc, #176]	; (8760c <Cl_Dlsis_SenddlsisData+0x63c>)
   8755a:	4610      	mov	r0, r2
   8755c:	4798      	blx	r3
   8755e:	4c2c      	ldr	r4, [pc, #176]	; (87610 <Cl_Dlsis_SenddlsisData+0x640>)
   87560:	a325      	add	r3, pc, #148	; (adr r3, 875f8 <Cl_Dlsis_SenddlsisData+0x628>)
   87562:	e9d3 2300 	ldrd	r2, r3, [r3]
   87566:	47a0      	blx	r4
   87568:	4603      	mov	r3, r0
   8756a:	460c      	mov	r4, r1
   8756c:	4619      	mov	r1, r3
   8756e:	4622      	mov	r2, r4
   87570:	4b28      	ldr	r3, [pc, #160]	; (87614 <Cl_Dlsis_SenddlsisData+0x644>)
   87572:	4608      	mov	r0, r1
   87574:	4611      	mov	r1, r2
   87576:	4798      	blx	r3
   87578:	4603      	mov	r3, r0
   8757a:	86fb      	strh	r3, [r7, #54]	; 0x36
			calibration_ps1(sensordatamillivolts);
   8757c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   87580:	4618      	mov	r0, r3
   87582:	4b30      	ldr	r3, [pc, #192]	; (87644 <Cl_Dlsis_SenddlsisData+0x674>)
   87584:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   87586:	4b30      	ldr	r3, [pc, #192]	; (87648 <Cl_Dlsis_SenddlsisData+0x678>)
   87588:	681a      	ldr	r2, [r3, #0]
   8758a:	4b25      	ldr	r3, [pc, #148]	; (87620 <Cl_Dlsis_SenddlsisData+0x650>)
   8758c:	4925      	ldr	r1, [pc, #148]	; (87624 <Cl_Dlsis_SenddlsisData+0x654>)
   8758e:	4610      	mov	r0, r2
   87590:	4798      	blx	r3
   87592:	4603      	mov	r3, r0
   87594:	4618      	mov	r0, r3
   87596:	4b2d      	ldr	r3, [pc, #180]	; (8764c <Cl_Dlsis_SenddlsisData+0x67c>)
   87598:	681a      	ldr	r2, [r3, #0]
   8759a:	4b24      	ldr	r3, [pc, #144]	; (8762c <Cl_Dlsis_SenddlsisData+0x65c>)
   8759c:	4611      	mov	r1, r2
   8759e:	4798      	blx	r3
   875a0:	4603      	mov	r3, r0
   875a2:	461a      	mov	r2, r3
   875a4:	4b22      	ldr	r3, [pc, #136]	; (87630 <Cl_Dlsis_SenddlsisData+0x660>)
   875a6:	4923      	ldr	r1, [pc, #140]	; (87634 <Cl_Dlsis_SenddlsisData+0x664>)
   875a8:	4610      	mov	r0, r2
   875aa:	4798      	blx	r3
   875ac:	4603      	mov	r3, r0
   875ae:	461a      	mov	r2, r3
   875b0:	4b25      	ldr	r3, [pc, #148]	; (87648 <Cl_Dlsis_SenddlsisData+0x678>)
   875b2:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   875b4:	1d3b      	adds	r3, r7, #4
   875b6:	4619      	mov	r1, r3
   875b8:	200f      	movs	r0, #15
   875ba:	4b13      	ldr	r3, [pc, #76]	; (87608 <Cl_Dlsis_SenddlsisData+0x638>)
   875bc:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   875be:	88bb      	ldrh	r3, [r7, #4]
   875c0:	461a      	mov	r2, r3
   875c2:	4b12      	ldr	r3, [pc, #72]	; (8760c <Cl_Dlsis_SenddlsisData+0x63c>)
   875c4:	4610      	mov	r0, r2
   875c6:	4798      	blx	r3
   875c8:	4c11      	ldr	r4, [pc, #68]	; (87610 <Cl_Dlsis_SenddlsisData+0x640>)
   875ca:	a30b      	add	r3, pc, #44	; (adr r3, 875f8 <Cl_Dlsis_SenddlsisData+0x628>)
   875cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   875d0:	47a0      	blx	r4
   875d2:	4603      	mov	r3, r0
   875d4:	460c      	mov	r4, r1
   875d6:	4619      	mov	r1, r3
   875d8:	4622      	mov	r2, r4
   875da:	4b0e      	ldr	r3, [pc, #56]	; (87614 <Cl_Dlsis_SenddlsisData+0x644>)
   875dc:	4608      	mov	r0, r1
   875de:	4611      	mov	r1, r2
   875e0:	4798      	blx	r3
   875e2:	4603      	mov	r3, r0
   875e4:	86fb      	strh	r3, [r7, #54]	; 0x36
			calibration_ps2(sensordatamillivolts);
   875e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   875ea:	4618      	mov	r0, r3
   875ec:	4b18      	ldr	r3, [pc, #96]	; (87650 <Cl_Dlsis_SenddlsisData+0x680>)
   875ee:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   875f0:	4b18      	ldr	r3, [pc, #96]	; (87654 <Cl_Dlsis_SenddlsisData+0x684>)
   875f2:	681a      	ldr	r2, [r3, #0]
   875f4:	4b0a      	ldr	r3, [pc, #40]	; (87620 <Cl_Dlsis_SenddlsisData+0x650>)
   875f6:	e02f      	b.n	87658 <Cl_Dlsis_SenddlsisData+0x688>
   875f8:	58e21965 	.word	0x58e21965
   875fc:	3fe9b717 	.word	0x3fe9b717
   87600:	20072118 	.word	0x20072118
   87604:	000a3829 	.word	0x000a3829
   87608:	0008d61d 	.word	0x0008d61d
   8760c:	000a2b05 	.word	0x000a2b05
   87610:	000a2bd1 	.word	0x000a2bd1
   87614:	000a3155 	.word	0x000a3155
   87618:	000840d1 	.word	0x000840d1
   8761c:	2007211c 	.word	0x2007211c
   87620:	000a3451 	.word	0x000a3451
   87624:	40a00000 	.word	0x40a00000
   87628:	20072d64 	.word	0x20072d64
   8762c:	000a3241 	.word	0x000a3241
   87630:	000a35b9 	.word	0x000a35b9
   87634:	40c00000 	.word	0x40c00000
   87638:	00084251 	.word	0x00084251
   8763c:	20072120 	.word	0x20072120
   87640:	2007165c 	.word	0x2007165c
   87644:	000843d5 	.word	0x000843d5
   87648:	20072124 	.word	0x20072124
   8764c:	20071660 	.word	0x20071660
   87650:	000844e5 	.word	0x000844e5
   87654:	20072128 	.word	0x20072128
   87658:	4952      	ldr	r1, [pc, #328]	; (877a4 <Cl_Dlsis_SenddlsisData+0x7d4>)
   8765a:	4610      	mov	r0, r2
   8765c:	4798      	blx	r3
   8765e:	4603      	mov	r3, r0
   87660:	4618      	mov	r0, r3
   87662:	4b51      	ldr	r3, [pc, #324]	; (877a8 <Cl_Dlsis_SenddlsisData+0x7d8>)
   87664:	681a      	ldr	r2, [r3, #0]
   87666:	4b51      	ldr	r3, [pc, #324]	; (877ac <Cl_Dlsis_SenddlsisData+0x7dc>)
   87668:	4611      	mov	r1, r2
   8766a:	4798      	blx	r3
   8766c:	4603      	mov	r3, r0
   8766e:	461a      	mov	r2, r3
   87670:	4b4f      	ldr	r3, [pc, #316]	; (877b0 <Cl_Dlsis_SenddlsisData+0x7e0>)
   87672:	4950      	ldr	r1, [pc, #320]	; (877b4 <Cl_Dlsis_SenddlsisData+0x7e4>)
   87674:	4610      	mov	r0, r2
   87676:	4798      	blx	r3
   87678:	4603      	mov	r3, r0
   8767a:	461a      	mov	r2, r3
   8767c:	4b4e      	ldr	r3, [pc, #312]	; (877b8 <Cl_Dlsis_SenddlsisData+0x7e8>)
   8767e:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   87680:	4b4e      	ldr	r3, [pc, #312]	; (877bc <Cl_Dlsis_SenddlsisData+0x7ec>)
   87682:	681a      	ldr	r2, [r3, #0]
   87684:	4b4e      	ldr	r3, [pc, #312]	; (877c0 <Cl_Dlsis_SenddlsisData+0x7f0>)
   87686:	6819      	ldr	r1, [r3, #0]
   87688:	4b48      	ldr	r3, [pc, #288]	; (877ac <Cl_Dlsis_SenddlsisData+0x7dc>)
   8768a:	4610      	mov	r0, r2
   8768c:	4798      	blx	r3
   8768e:	4603      	mov	r3, r0
   87690:	461c      	mov	r4, r3
   87692:	4b4c      	ldr	r3, [pc, #304]	; (877c4 <Cl_Dlsis_SenddlsisData+0x7f4>)
   87694:	681a      	ldr	r2, [r3, #0]
   87696:	4b48      	ldr	r3, [pc, #288]	; (877b8 <Cl_Dlsis_SenddlsisData+0x7e8>)
   87698:	6819      	ldr	r1, [r3, #0]
   8769a:	4b44      	ldr	r3, [pc, #272]	; (877ac <Cl_Dlsis_SenddlsisData+0x7dc>)
   8769c:	4610      	mov	r0, r2
   8769e:	4798      	blx	r3
   876a0:	4603      	mov	r3, r0
   876a2:	461a      	mov	r2, r3
   876a4:	4b48      	ldr	r3, [pc, #288]	; (877c8 <Cl_Dlsis_SenddlsisData+0x7f8>)
   876a6:	4611      	mov	r1, r2
   876a8:	4620      	mov	r0, r4
   876aa:	4798      	blx	r3
   876ac:	4603      	mov	r3, r0
   876ae:	461a      	mov	r2, r3
   876b0:	4b3f      	ldr	r3, [pc, #252]	; (877b0 <Cl_Dlsis_SenddlsisData+0x7e0>)
   876b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   876b6:	4610      	mov	r0, r2
   876b8:	4798      	blx	r3
   876ba:	4603      	mov	r3, r0
   876bc:	461a      	mov	r2, r3
   876be:	4b42      	ldr	r3, [pc, #264]	; (877c8 <Cl_Dlsis_SenddlsisData+0x7f8>)
   876c0:	4942      	ldr	r1, [pc, #264]	; (877cc <Cl_Dlsis_SenddlsisData+0x7fc>)
   876c2:	4610      	mov	r0, r2
   876c4:	4798      	blx	r3
   876c6:	4603      	mov	r3, r0
   876c8:	461a      	mov	r2, r3
   876ca:	4b41      	ldr	r3, [pc, #260]	; (877d0 <Cl_Dlsis_SenddlsisData+0x800>)
   876cc:	4610      	mov	r0, r2
   876ce:	4798      	blx	r3
   876d0:	4603      	mov	r3, r0
   876d2:	607b      	str	r3, [r7, #4]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   876d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   876d8:	1c5a      	adds	r2, r3, #1
   876da:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   876de:	793a      	ldrb	r2, [r7, #4]
   876e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876e4:	440b      	add	r3, r1
   876e6:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   876ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   876ee:	1c5a      	adds	r2, r3, #1
   876f0:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   876f4:	797a      	ldrb	r2, [r7, #5]
   876f6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876fa:	440b      	add	r3, r1
   876fc:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87700:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87704:	1c5a      	adds	r2, r3, #1
   87706:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8770a:	79ba      	ldrb	r2, [r7, #6]
   8770c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87710:	440b      	add	r3, r1
   87712:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87716:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8771a:	1c5a      	adds	r2, r3, #1
   8771c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87720:	79fa      	ldrb	r2, [r7, #7]
   87722:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87726:	440b      	add	r3, r1
   87728:	f803 2c44 	strb.w	r2, [r3, #-68]
			
			systemdataarray[count++] = 0x0A; // tmp
   8772c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87730:	1c5a      	adds	r2, r3, #1
   87732:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87736:	f107 0250 	add.w	r2, r7, #80	; 0x50
   8773a:	4413      	add	r3, r2
   8773c:	220a      	movs	r2, #10
   8773e:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = 0x0A; // tmp
   87742:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87746:	1c5a      	adds	r2, r3, #1
   87748:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   8774c:	f107 0250 	add.w	r2, r7, #80	; 0x50
   87750:	4413      	add	r3, r2
   87752:	220a      	movs	r2, #10
   87754:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = 0x00;
   87758:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8775c:	1c5a      	adds	r2, r3, #1
   8775e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87762:	f107 0250 	add.w	r2, r7, #80	; 0x50
   87766:	4413      	add	r3, r2
   87768:	2200      	movs	r2, #0
   8776a:	f803 2c44 	strb.w	r2, [r3, #-68]
			systemdataarray[count++] = 0x00;
   8776e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   87772:	1c5a      	adds	r2, r3, #1
   87774:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   87778:	f107 0250 	add.w	r2, r7, #80	; 0x50
   8777c:	4413      	add	r3, r2
   8777e:	2200      	movs	r2, #0
   87780:	f803 2c44 	strb.w	r2, [r3, #-68]
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87784:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
   87788:	f107 030c 	add.w	r3, r7, #12
   8778c:	4619      	mov	r1, r3
   8778e:	202a      	movs	r0, #42	; 0x2a
   87790:	4b10      	ldr	r3, [pc, #64]	; (877d4 <Cl_Dlsis_SenddlsisData+0x804>)
   87792:	4798      	blx	r3
   87794:	4603      	mov	r3, r0
   87796:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   8779a:	2300      	movs	r3, #0
}
   8779c:	4618      	mov	r0, r3
   8779e:	3754      	adds	r7, #84	; 0x54
   877a0:	46bd      	mov	sp, r7
   877a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   877a4:	40a00000 	.word	0x40a00000
   877a8:	20071664 	.word	0x20071664
   877ac:	000a3241 	.word	0x000a3241
   877b0:	000a35b9 	.word	0x000a35b9
   877b4:	40c00000 	.word	0x40c00000
   877b8:	20072128 	.word	0x20072128
   877bc:	2007211c 	.word	0x2007211c
   877c0:	20072120 	.word	0x20072120
   877c4:	20072124 	.word	0x20072124
   877c8:	000a323d 	.word	0x000a323d
   877cc:	41c80000 	.word	0x41c80000
   877d0:	000a3829 	.word	0x000a3829
   877d4:	0009926d 	.word	0x0009926d

000877d8 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   877d8:	b580      	push	{r7, lr}
   877da:	b082      	sub	sp, #8
   877dc:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   877de:	4b18      	ldr	r3, [pc, #96]	; (87840 <Cl_Dlsis_StartDialysis+0x68>)
   877e0:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   877e2:	2300      	movs	r3, #0
   877e4:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   877e6:	234d      	movs	r3, #77	; 0x4d
   877e8:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   877ea:	2300      	movs	r3, #0
   877ec:	717b      	strb	r3, [r7, #5]
	
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   877ee:	4b15      	ldr	r3, [pc, #84]	; (87844 <Cl_Dlsis_StartDialysis+0x6c>)
   877f0:	2200      	movs	r2, #0
   877f2:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   877f4:	4b13      	ldr	r3, [pc, #76]	; (87844 <Cl_Dlsis_StartDialysis+0x6c>)
   877f6:	2200      	movs	r2, #0
   877f8:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   877fa:	4b13      	ldr	r3, [pc, #76]	; (87848 <Cl_Dlsis_StartDialysis+0x70>)
   877fc:	2200      	movs	r2, #0
   877fe:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   87800:	2312      	movs	r3, #18
   87802:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87804:	2301      	movs	r3, #1
   87806:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87808:	1d79      	adds	r1, r7, #5
   8780a:	79bb      	ldrb	r3, [r7, #6]
   8780c:	2201      	movs	r2, #1
   8780e:	4618      	mov	r0, r3
   87810:	4b0e      	ldr	r3, [pc, #56]	; (8784c <Cl_Dlsis_StartDialysis+0x74>)
   87812:	4798      	blx	r3
   87814:	4603      	mov	r3, r0
   87816:	71fb      	strb	r3, [r7, #7]
		command = CON_TX_COMMAND_DLSIS_STARTED;
   87818:	2313      	movs	r3, #19
   8781a:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   8781c:	2301      	movs	r3, #1
   8781e:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87820:	1d79      	adds	r1, r7, #5
   87822:	79bb      	ldrb	r3, [r7, #6]
   87824:	2201      	movs	r2, #1
   87826:	4618      	mov	r0, r3
   87828:	4b08      	ldr	r3, [pc, #32]	; (8784c <Cl_Dlsis_StartDialysis+0x74>)
   8782a:	4798      	blx	r3
   8782c:	4603      	mov	r3, r0
   8782e:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   87830:	4b07      	ldr	r3, [pc, #28]	; (87850 <Cl_Dlsis_StartDialysis+0x78>)
   87832:	4798      	blx	r3
	
	return 0;
   87834:	2300      	movs	r3, #0

}
   87836:	4618      	mov	r0, r3
   87838:	3708      	adds	r7, #8
   8783a:	46bd      	mov	sp, r7
   8783c:	bd80      	pop	{r7, pc}
   8783e:	bf00      	nop
   87840:	000977c1 	.word	0x000977c1
   87844:	20072d74 	.word	0x20072d74
   87848:	200720e8 	.word	0x200720e8
   8784c:	0009926d 	.word	0x0009926d
   87850:	00087855 	.word	0x00087855

00087854 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   87854:	b590      	push	{r4, r7, lr}
   87856:	b087      	sub	sp, #28
   87858:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8785a:	2300      	movs	r3, #0
   8785c:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8785e:	234d      	movs	r3, #77	; 0x4d
   87860:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   87862:	2300      	movs	r3, #0
   87864:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   87866:	2300      	movs	r3, #0
   87868:	9300      	str	r3, [sp, #0]
   8786a:	f04f 0300 	mov.w	r3, #0
   8786e:	f04f 0200 	mov.w	r2, #0
   87872:	2101      	movs	r1, #1
   87874:	2001      	movs	r0, #1
   87876:	4ca4      	ldr	r4, [pc, #656]	; (87b08 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   87878:	47a0      	blx	r4
   8787a:	4603      	mov	r3, r0
   8787c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   8787e:	2300      	movs	r3, #0
   87880:	9300      	str	r3, [sp, #0]
   87882:	f04f 0300 	mov.w	r3, #0
   87886:	f04f 0200 	mov.w	r2, #0
   8788a:	2100      	movs	r1, #0
   8788c:	2029      	movs	r0, #41	; 0x29
   8788e:	4c9e      	ldr	r4, [pc, #632]	; (87b08 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   87890:	47a0      	blx	r4
   87892:	4603      	mov	r3, r0
   87894:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   87896:	2300      	movs	r3, #0
   87898:	9300      	str	r3, [sp, #0]
   8789a:	f04f 0300 	mov.w	r3, #0
   8789e:	f04f 0200 	mov.w	r2, #0
   878a2:	2100      	movs	r1, #0
   878a4:	202b      	movs	r0, #43	; 0x2b
   878a6:	4c98      	ldr	r4, [pc, #608]	; (87b08 <Cl_Dlsis_ResumeDialysis+0x2b4>)
   878a8:	47a0      	blx	r4
   878aa:	4603      	mov	r3, r0
   878ac:	73fb      	strb	r3, [r7, #15]
									
									
									//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   878ae:	2101      	movs	r1, #1
   878b0:	203d      	movs	r0, #61	; 0x3d
   878b2:	4b96      	ldr	r3, [pc, #600]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878b4:	4798      	blx	r3
   878b6:	4603      	mov	r3, r0
   878b8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   878ba:	2101      	movs	r1, #1
   878bc:	203e      	movs	r0, #62	; 0x3e
   878be:	4b93      	ldr	r3, [pc, #588]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878c0:	4798      	blx	r3
   878c2:	4603      	mov	r3, r0
   878c4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   878c6:	2101      	movs	r1, #1
   878c8:	2005      	movs	r0, #5
   878ca:	4b90      	ldr	r3, [pc, #576]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878cc:	4798      	blx	r3
   878ce:	4603      	mov	r3, r0
   878d0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   878d2:	2101      	movs	r1, #1
   878d4:	2006      	movs	r0, #6
   878d6:	4b8d      	ldr	r3, [pc, #564]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878d8:	4798      	blx	r3
   878da:	4603      	mov	r3, r0
   878dc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   878de:	2100      	movs	r1, #0
   878e0:	2003      	movs	r0, #3
   878e2:	4b8a      	ldr	r3, [pc, #552]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878e4:	4798      	blx	r3
   878e6:	4603      	mov	r3, r0
   878e8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   878ea:	2100      	movs	r1, #0
   878ec:	2004      	movs	r0, #4
   878ee:	4b87      	ldr	r3, [pc, #540]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878f0:	4798      	blx	r3
   878f2:	4603      	mov	r3, r0
   878f4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   878f6:	2100      	movs	r1, #0
   878f8:	2007      	movs	r0, #7
   878fa:	4b84      	ldr	r3, [pc, #528]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   878fc:	4798      	blx	r3
   878fe:	4603      	mov	r3, r0
   87900:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   87902:	2100      	movs	r1, #0
   87904:	2008      	movs	r0, #8
   87906:	4b81      	ldr	r3, [pc, #516]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87908:	4798      	blx	r3
   8790a:	4603      	mov	r3, r0
   8790c:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   8790e:	2101      	movs	r1, #1
   87910:	2020      	movs	r0, #32
   87912:	4b7e      	ldr	r3, [pc, #504]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87914:	4798      	blx	r3
   87916:	4603      	mov	r3, r0
   87918:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   8791a:	2100      	movs	r1, #0
   8791c:	2021      	movs	r0, #33	; 0x21
   8791e:	4b7b      	ldr	r3, [pc, #492]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87920:	4798      	blx	r3
   87922:	4603      	mov	r3, r0
   87924:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   87926:	2100      	movs	r1, #0
   87928:	2024      	movs	r0, #36	; 0x24
   8792a:	4b78      	ldr	r3, [pc, #480]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8792c:	4798      	blx	r3
   8792e:	4603      	mov	r3, r0
   87930:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   87932:	2100      	movs	r1, #0
   87934:	2026      	movs	r0, #38	; 0x26
   87936:	4b75      	ldr	r3, [pc, #468]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87938:	4798      	blx	r3
   8793a:	4603      	mov	r3, r0
   8793c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   8793e:	2100      	movs	r1, #0
   87940:	2023      	movs	r0, #35	; 0x23
   87942:	4b72      	ldr	r3, [pc, #456]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87944:	4798      	blx	r3
   87946:	4603      	mov	r3, r0
   87948:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   8794a:	2100      	movs	r1, #0
   8794c:	2025      	movs	r0, #37	; 0x25
   8794e:	4b6f      	ldr	r3, [pc, #444]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87950:	4798      	blx	r3
   87952:	4603      	mov	r3, r0
   87954:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   87956:	2101      	movs	r1, #1
   87958:	2022      	movs	r0, #34	; 0x22
   8795a:	4b6c      	ldr	r3, [pc, #432]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8795c:	4798      	blx	r3
   8795e:	4603      	mov	r3, r0
   87960:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   87962:	2100      	movs	r1, #0
   87964:	2017      	movs	r0, #23
   87966:	4b69      	ldr	r3, [pc, #420]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87968:	4798      	blx	r3
   8796a:	4603      	mov	r3, r0
   8796c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   8796e:	2100      	movs	r1, #0
   87970:	2018      	movs	r0, #24
   87972:	4b66      	ldr	r3, [pc, #408]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87974:	4798      	blx	r3
   87976:	4603      	mov	r3, r0
   87978:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   8797a:	2100      	movs	r1, #0
   8797c:	2015      	movs	r0, #21
   8797e:	4b63      	ldr	r3, [pc, #396]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87980:	4798      	blx	r3
   87982:	4603      	mov	r3, r0
   87984:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   87986:	2100      	movs	r1, #0
   87988:	2016      	movs	r0, #22
   8798a:	4b60      	ldr	r3, [pc, #384]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   8798c:	4798      	blx	r3
   8798e:	4603      	mov	r3, r0
   87990:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   87992:	2100      	movs	r1, #0
   87994:	2027      	movs	r0, #39	; 0x27
   87996:	4b5d      	ldr	r3, [pc, #372]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87998:	4798      	blx	r3
   8799a:	4603      	mov	r3, r0
   8799c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   8799e:	2100      	movs	r1, #0
   879a0:	2028      	movs	r0, #40	; 0x28
   879a2:	4b5a      	ldr	r3, [pc, #360]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879a4:	4798      	blx	r3
   879a6:	4603      	mov	r3, r0
   879a8:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   879aa:	2100      	movs	r1, #0
   879ac:	2014      	movs	r0, #20
   879ae:	4b57      	ldr	r3, [pc, #348]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879b0:	4798      	blx	r3
   879b2:	4603      	mov	r3, r0
   879b4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   879b6:	2100      	movs	r1, #0
   879b8:	2013      	movs	r0, #19
   879ba:	4b54      	ldr	r3, [pc, #336]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879bc:	4798      	blx	r3
   879be:	4603      	mov	r3, r0
   879c0:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   879c2:	2100      	movs	r1, #0
   879c4:	200f      	movs	r0, #15
   879c6:	4b51      	ldr	r3, [pc, #324]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879c8:	4798      	blx	r3
   879ca:	4603      	mov	r3, r0
   879cc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   879ce:	2100      	movs	r1, #0
   879d0:	2010      	movs	r0, #16
   879d2:	4b4e      	ldr	r3, [pc, #312]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879d4:	4798      	blx	r3
   879d6:	4603      	mov	r3, r0
   879d8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   879da:	2100      	movs	r1, #0
   879dc:	2011      	movs	r0, #17
   879de:	4b4b      	ldr	r3, [pc, #300]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879e0:	4798      	blx	r3
   879e2:	4603      	mov	r3, r0
   879e4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   879e6:	2100      	movs	r1, #0
   879e8:	2012      	movs	r0, #18
   879ea:	4b48      	ldr	r3, [pc, #288]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879ec:	4798      	blx	r3
   879ee:	4603      	mov	r3, r0
   879f0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   879f2:	2100      	movs	r1, #0
   879f4:	2013      	movs	r0, #19
   879f6:	4b45      	ldr	r3, [pc, #276]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   879f8:	4798      	blx	r3
   879fa:	4603      	mov	r3, r0
   879fc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   879fe:	2100      	movs	r1, #0
   87a00:	2014      	movs	r0, #20
   87a02:	4b42      	ldr	r3, [pc, #264]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a04:	4798      	blx	r3
   87a06:	4603      	mov	r3, r0
   87a08:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   87a0a:	4b41      	ldr	r3, [pc, #260]	; (87b10 <Cl_Dlsis_ResumeDialysis+0x2bc>)
   87a0c:	781b      	ldrb	r3, [r3, #0]
   87a0e:	2b00      	cmp	r3, #0
   87a10:	d005      	beq.n	87a1e <Cl_Dlsis_ResumeDialysis+0x1ca>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   87a12:	2101      	movs	r1, #1
   87a14:	203c      	movs	r0, #60	; 0x3c
   87a16:	4b3d      	ldr	r3, [pc, #244]	; (87b0c <Cl_Dlsis_ResumeDialysis+0x2b8>)
   87a18:	4798      	blx	r3
   87a1a:	4603      	mov	r3, r0
   87a1c:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   87a1e:	4b3d      	ldr	r3, [pc, #244]	; (87b14 <Cl_Dlsis_ResumeDialysis+0x2c0>)
   87a20:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   87a22:	4b3d      	ldr	r3, [pc, #244]	; (87b18 <Cl_Dlsis_ResumeDialysis+0x2c4>)
   87a24:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   87a26:	2001      	movs	r0, #1
   87a28:	4b3c      	ldr	r3, [pc, #240]	; (87b1c <Cl_Dlsis_ResumeDialysis+0x2c8>)
   87a2a:	4798      	blx	r3
   87a2c:	4603      	mov	r3, r0
   87a2e:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   87a30:	2002      	movs	r0, #2
   87a32:	4b3a      	ldr	r3, [pc, #232]	; (87b1c <Cl_Dlsis_ResumeDialysis+0x2c8>)
   87a34:	4798      	blx	r3
   87a36:	4603      	mov	r3, r0
   87a38:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   87a3a:	200b      	movs	r0, #11
   87a3c:	4b38      	ldr	r3, [pc, #224]	; (87b20 <Cl_Dlsis_ResumeDialysis+0x2cc>)
   87a3e:	4798      	blx	r3
   87a40:	4603      	mov	r3, r0
   87a42:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   87a44:	2003      	movs	r0, #3
   87a46:	4b37      	ldr	r3, [pc, #220]	; (87b24 <Cl_Dlsis_ResumeDialysis+0x2d0>)
   87a48:	4798      	blx	r3
   87a4a:	4603      	mov	r3, r0
   87a4c:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   87a4e:	2100      	movs	r1, #0
   87a50:	2002      	movs	r0, #2
   87a52:	4b35      	ldr	r3, [pc, #212]	; (87b28 <Cl_Dlsis_ResumeDialysis+0x2d4>)
   87a54:	4798      	blx	r3
									cl_wait(100);
   87a56:	2064      	movs	r0, #100	; 0x64
   87a58:	4b34      	ldr	r3, [pc, #208]	; (87b2c <Cl_Dlsis_ResumeDialysis+0x2d8>)
   87a5a:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   87a5c:	4b34      	ldr	r3, [pc, #208]	; (87b30 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   87a60:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   87a62:	68b9      	ldr	r1, [r7, #8]
   87a64:	2001      	movs	r0, #1
   87a66:	4b30      	ldr	r3, [pc, #192]	; (87b28 <Cl_Dlsis_ResumeDialysis+0x2d4>)
   87a68:	4798      	blx	r3
									cl_wait(100);
   87a6a:	2064      	movs	r0, #100	; 0x64
   87a6c:	4b2f      	ldr	r3, [pc, #188]	; (87b2c <Cl_Dlsis_ResumeDialysis+0x2d8>)
   87a6e:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   87a70:	4b2f      	ldr	r3, [pc, #188]	; (87b30 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87a72:	695b      	ldr	r3, [r3, #20]
   87a74:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   87a76:	4a2f      	ldr	r2, [pc, #188]	; (87b34 <Cl_Dlsis_ResumeDialysis+0x2e0>)
   87a78:	687b      	ldr	r3, [r7, #4]
   87a7a:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   87a7c:	2300      	movs	r3, #0
   87a7e:	807b      	strh	r3, [r7, #2]
									switch (temp)
   87a80:	687b      	ldr	r3, [r7, #4]
   87a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   87a86:	d017      	beq.n	87ab8 <Cl_Dlsis_ResumeDialysis+0x264>
   87a88:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   87a8c:	d003      	beq.n	87a96 <Cl_Dlsis_ResumeDialysis+0x242>
   87a8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   87a92:	d027      	beq.n	87ae4 <Cl_Dlsis_ResumeDialysis+0x290>
   87a94:	e058      	b.n	87b48 <Cl_Dlsis_ResumeDialysis+0x2f4>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87a9a:	2002      	movs	r0, #2
   87a9c:	4b26      	ldr	r3, [pc, #152]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87a9e:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   87aa0:	f240 5173 	movw	r1, #1395	; 0x573
   87aa4:	2001      	movs	r0, #1
   87aa6:	4b24      	ldr	r3, [pc, #144]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87aa8:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   87aaa:	233e      	movs	r3, #62	; 0x3e
   87aac:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87aae:	887b      	ldrh	r3, [r7, #2]
   87ab0:	4618      	mov	r0, r3
   87ab2:	4b22      	ldr	r3, [pc, #136]	; (87b3c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87ab4:	4798      	blx	r3
										break;
   87ab6:	e058      	b.n	87b6a <Cl_Dlsis_ResumeDialysis+0x316>
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   87ab8:	2203      	movs	r2, #3
   87aba:	4921      	ldr	r1, [pc, #132]	; (87b40 <Cl_Dlsis_ResumeDialysis+0x2ec>)
   87abc:	2018      	movs	r0, #24
   87abe:	4b21      	ldr	r3, [pc, #132]	; (87b44 <Cl_Dlsis_ResumeDialysis+0x2f0>)
   87ac0:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ac6:	2002      	movs	r0, #2
   87ac8:	4b1b      	ldr	r3, [pc, #108]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87aca:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87acc:	f240 414c 	movw	r1, #1100	; 0x44c
   87ad0:	2001      	movs	r0, #1
   87ad2:	4b19      	ldr	r3, [pc, #100]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87ad4:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87ad6:	2344      	movs	r3, #68	; 0x44
   87ad8:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87ada:	887b      	ldrh	r3, [r7, #2]
   87adc:	4618      	mov	r0, r3
   87ade:	4b17      	ldr	r3, [pc, #92]	; (87b3c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87ae0:	4798      	blx	r3
										break;
   87ae2:	e042      	b.n	87b6a <Cl_Dlsis_ResumeDialysis+0x316>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   87ae4:	f44f 618c 	mov.w	r1, #1120	; 0x460
   87ae8:	2002      	movs	r0, #2
   87aea:	4b13      	ldr	r3, [pc, #76]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87aec:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,620);
   87aee:	f44f 711b 	mov.w	r1, #620	; 0x26c
   87af2:	2001      	movs	r0, #1
   87af4:	4b10      	ldr	r3, [pc, #64]	; (87b38 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87af6:	4798      	blx	r3
										potvalue = (800 * 1024)/10000;
   87af8:	2351      	movs	r3, #81	; 0x51
   87afa:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87afc:	887b      	ldrh	r3, [r7, #2]
   87afe:	4618      	mov	r0, r3
   87b00:	4b0e      	ldr	r3, [pc, #56]	; (87b3c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87b02:	4798      	blx	r3
										break;
   87b04:	e031      	b.n	87b6a <Cl_Dlsis_ResumeDialysis+0x316>
   87b06:	bf00      	nop
   87b08:	00082f01 	.word	0x00082f01
   87b0c:	00082f5d 	.word	0x00082f5d
   87b10:	200709ee 	.word	0x200709ee
   87b14:	00097681 	.word	0x00097681
   87b18:	0009763d 	.word	0x0009763d
   87b1c:	00097451 	.word	0x00097451
   87b20:	00083379 	.word	0x00083379
   87b24:	00088a8d 	.word	0x00088a8d
   87b28:	00091a75 	.word	0x00091a75
   87b2c:	000918fd 	.word	0x000918fd
   87b30:	20073194 	.word	0x20073194
   87b34:	200720f0 	.word	0x200720f0
   87b38:	00097569 	.word	0x00097569
   87b3c:	00097999 	.word	0x00097999
   87b40:	000a54a0 	.word	0x000a54a0
   87b44:	0009926d 	.word	0x0009926d
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87b4c:	2002      	movs	r0, #2
   87b4e:	4b0e      	ldr	r3, [pc, #56]	; (87b88 <Cl_Dlsis_ResumeDialysis+0x334>)
   87b50:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87b52:	f240 414c 	movw	r1, #1100	; 0x44c
   87b56:	2001      	movs	r0, #1
   87b58:	4b0b      	ldr	r3, [pc, #44]	; (87b88 <Cl_Dlsis_ResumeDialysis+0x334>)
   87b5a:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87b5c:	2344      	movs	r3, #68	; 0x44
   87b5e:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87b60:	887b      	ldrh	r3, [r7, #2]
   87b62:	4618      	mov	r0, r3
   87b64:	4b09      	ldr	r3, [pc, #36]	; (87b8c <Cl_Dlsis_ResumeDialysis+0x338>)
   87b66:	4798      	blx	r3
										break;
   87b68:	bf00      	nop
									}
									bc_flag = 1;
   87b6a:	4b09      	ldr	r3, [pc, #36]	; (87b90 <Cl_Dlsis_ResumeDialysis+0x33c>)
   87b6c:	2201      	movs	r2, #1
   87b6e:	701a      	strb	r2, [r3, #0]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   87b70:	4b08      	ldr	r3, [pc, #32]	; (87b94 <Cl_Dlsis_ResumeDialysis+0x340>)
   87b72:	4798      	blx	r3
   87b74:	4603      	mov	r3, r0
   87b76:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   87b78:	4b07      	ldr	r3, [pc, #28]	; (87b98 <Cl_Dlsis_ResumeDialysis+0x344>)
   87b7a:	2202      	movs	r2, #2
   87b7c:	701a      	strb	r2, [r3, #0]
									
									return 0;	
   87b7e:	2300      	movs	r3, #0
}
   87b80:	4618      	mov	r0, r3
   87b82:	3714      	adds	r7, #20
   87b84:	46bd      	mov	sp, r7
   87b86:	bd90      	pop	{r4, r7, pc}
   87b88:	00097569 	.word	0x00097569
   87b8c:	00097999 	.word	0x00097999
   87b90:	200720ef 	.word	0x200720ef
   87b94:	000864f5 	.word	0x000864f5
   87b98:	200720d0 	.word	0x200720d0

00087b9c <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   87b9c:	b580      	push	{r7, lr}
   87b9e:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   87ba0:	4b09      	ldr	r3, [pc, #36]	; (87bc8 <Cl_Dlsis_safesate+0x2c>)
   87ba2:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87ba4:	2100      	movs	r1, #0
   87ba6:	2004      	movs	r0, #4
   87ba8:	4b08      	ldr	r3, [pc, #32]	; (87bcc <Cl_Dlsis_safesate+0x30>)
   87baa:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   87bac:	2100      	movs	r1, #0
   87bae:	2004      	movs	r0, #4
   87bb0:	4b07      	ldr	r3, [pc, #28]	; (87bd0 <Cl_Dlsis_safesate+0x34>)
   87bb2:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87bb4:	4b07      	ldr	r3, [pc, #28]	; (87bd4 <Cl_Dlsis_safesate+0x38>)
   87bb6:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   87bb8:	4b07      	ldr	r3, [pc, #28]	; (87bd8 <Cl_Dlsis_safesate+0x3c>)
   87bba:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87bbc:	4b07      	ldr	r3, [pc, #28]	; (87bdc <Cl_Dlsis_safesate+0x40>)
   87bbe:	220a      	movs	r2, #10
   87bc0:	701a      	strb	r2, [r3, #0]
	
	return 0;
   87bc2:	2300      	movs	r3, #0
}
   87bc4:	4618      	mov	r0, r3
   87bc6:	bd80      	pop	{r7, pc}
   87bc8:	0009769d 	.word	0x0009769d
   87bcc:	0009381d 	.word	0x0009381d
   87bd0:	00091a75 	.word	0x00091a75
   87bd4:	00097651 	.word	0x00097651
   87bd8:	00086af1 	.word	0x00086af1
   87bdc:	200720d0 	.word	0x200720d0

00087be0 <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   87be0:	b580      	push	{r7, lr}
   87be2:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   87be4:	2206      	movs	r2, #6
   87be6:	490a      	ldr	r1, [pc, #40]	; (87c10 <cl_temp_safestate+0x30>)
   87be8:	2018      	movs	r0, #24
   87bea:	4b0a      	ldr	r3, [pc, #40]	; (87c14 <cl_temp_safestate+0x34>)
   87bec:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   87bee:	4b0a      	ldr	r3, [pc, #40]	; (87c18 <cl_temp_safestate+0x38>)
   87bf0:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87bf2:	2100      	movs	r1, #0
   87bf4:	2004      	movs	r0, #4
   87bf6:	4b09      	ldr	r3, [pc, #36]	; (87c1c <cl_temp_safestate+0x3c>)
   87bf8:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87bfa:	4b09      	ldr	r3, [pc, #36]	; (87c20 <cl_temp_safestate+0x40>)
   87bfc:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   87bfe:	4b09      	ldr	r3, [pc, #36]	; (87c24 <cl_temp_safestate+0x44>)
   87c00:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87c02:	4b09      	ldr	r3, [pc, #36]	; (87c28 <cl_temp_safestate+0x48>)
   87c04:	220a      	movs	r2, #10
   87c06:	701a      	strb	r2, [r3, #0]
	return 0;
   87c08:	2300      	movs	r3, #0
}
   87c0a:	4618      	mov	r0, r3
   87c0c:	bd80      	pop	{r7, pc}
   87c0e:	bf00      	nop
   87c10:	000a54a4 	.word	0x000a54a4
   87c14:	0009926d 	.word	0x0009926d
   87c18:	0009769d 	.word	0x0009769d
   87c1c:	0009381d 	.word	0x0009381d
   87c20:	00097651 	.word	0x00097651
   87c24:	00086af1 	.word	0x00086af1
   87c28:	200720d0 	.word	0x200720d0

00087c2c <cl_cond_safestate>:
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
	return 0;
}

Cl_ReturnCodeType cl_cond_safestate(void)
{
   87c2c:	b580      	push	{r7, lr}
   87c2e:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	Cl_Dlsis_BypassDialysis();
   87c30:	4b03      	ldr	r3, [pc, #12]	; (87c40 <cl_cond_safestate+0x14>)
   87c32:	4798      	blx	r3
	//sv_cntrl_deactivatepump(DCMOTOR1);
	//sv_cntrl_deactivatepump(DCMOTOR2);
	
	//sv_cntrl_setflowpath(FLOW_PATH_BC_ALARM);
	//SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87c34:	4b03      	ldr	r3, [pc, #12]	; (87c44 <cl_cond_safestate+0x18>)
   87c36:	220a      	movs	r2, #10
   87c38:	701a      	strb	r2, [r3, #0]
	return 0;
   87c3a:	2300      	movs	r3, #0
}
   87c3c:	4618      	mov	r0, r3
   87c3e:	bd80      	pop	{r7, pc}
   87c40:	00086af1 	.word	0x00086af1
   87c44:	200720d0 	.word	0x200720d0

00087c48 <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   87c48:	b480      	push	{r7}
   87c4a:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   87c4c:	4b0b      	ldr	r3, [pc, #44]	; (87c7c <cl_dprep_primeInit+0x34>)
   87c4e:	2200      	movs	r2, #0
   87c50:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   87c52:	4b0b      	ldr	r3, [pc, #44]	; (87c80 <cl_dprep_primeInit+0x38>)
   87c54:	2200      	movs	r2, #0
   87c56:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   87c58:	4b0a      	ldr	r3, [pc, #40]	; (87c84 <cl_dprep_primeInit+0x3c>)
   87c5a:	2200      	movs	r2, #0
   87c5c:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   87c5e:	4b0a      	ldr	r3, [pc, #40]	; (87c88 <cl_dprep_primeInit+0x40>)
   87c60:	2200      	movs	r2, #0
   87c62:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   87c64:	4b09      	ldr	r3, [pc, #36]	; (87c8c <cl_dprep_primeInit+0x44>)
   87c66:	2200      	movs	r2, #0
   87c68:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   87c6a:	4b09      	ldr	r3, [pc, #36]	; (87c90 <cl_dprep_primeInit+0x48>)
   87c6c:	2200      	movs	r2, #0
   87c6e:	701a      	strb	r2, [r3, #0]
	
}
   87c70:	bf00      	nop
   87c72:	4618      	mov	r0, r3
   87c74:	46bd      	mov	sp, r7
   87c76:	bc80      	pop	{r7}
   87c78:	4770      	bx	lr
   87c7a:	bf00      	nop
   87c7c:	2007212c 	.word	0x2007212c
   87c80:	2007212d 	.word	0x2007212d
   87c84:	2007212e 	.word	0x2007212e
   87c88:	2007212f 	.word	0x2007212f
   87c8c:	20072130 	.word	0x20072130
   87c90:	20072131 	.word	0x20072131

00087c94 <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   87c94:	b580      	push	{r7, lr}
   87c96:	b084      	sub	sp, #16
   87c98:	af00      	add	r7, sp, #0
   87c9a:	4603      	mov	r3, r0
   87c9c:	460a      	mov	r2, r1
   87c9e:	71fb      	strb	r3, [r7, #7]
   87ca0:	4613      	mov	r3, r2
   87ca2:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   87ca4:	2304      	movs	r3, #4
   87ca6:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   87ca8:	79fb      	ldrb	r3, [r7, #7]
   87caa:	2b0b      	cmp	r3, #11
   87cac:	d103      	bne.n	87cb6 <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   87cae:	4bbc      	ldr	r3, [pc, #752]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87cb0:	781a      	ldrb	r2, [r3, #0]
   87cb2:	4bbc      	ldr	r3, [pc, #752]	; (87fa4 <cl_dprep_primecontroller+0x310>)
   87cb4:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   87cb6:	4bba      	ldr	r3, [pc, #744]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87cb8:	781b      	ldrb	r3, [r3, #0]
   87cba:	2b0c      	cmp	r3, #12
   87cbc:	f200 849b 	bhi.w	885f6 <cl_dprep_primecontroller+0x962>
   87cc0:	a201      	add	r2, pc, #4	; (adr r2, 87cc8 <cl_dprep_primecontroller+0x34>)
   87cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87cc6:	bf00      	nop
   87cc8:	00087cfd 	.word	0x00087cfd
   87ccc:	00087d61 	.word	0x00087d61
   87cd0:	0008800d 	.word	0x0008800d
   87cd4:	00087e71 	.word	0x00087e71
   87cd8:	00087f21 	.word	0x00087f21
   87cdc:	0008812f 	.word	0x0008812f
   87ce0:	00088233 	.word	0x00088233
   87ce4:	000885f7 	.word	0x000885f7
   87ce8:	000882a1 	.word	0x000882a1
   87cec:	000883c3 	.word	0x000883c3
   87cf0:	000885f7 	.word	0x000885f7
   87cf4:	000884b1 	.word	0x000884b1
   87cf8:	0008852d 	.word	0x0008852d
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   87cfc:	79fb      	ldrb	r3, [r7, #7]
   87cfe:	2b01      	cmp	r3, #1
   87d00:	d009      	beq.n	87d16 <cl_dprep_primecontroller+0x82>
   87d02:	2b0e      	cmp	r3, #14
   87d04:	d000      	beq.n	87d08 <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   87d06:	e029      	b.n	87d5c <cl_dprep_primecontroller+0xc8>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87d08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87d0c:	4619      	mov	r1, r3
   87d0e:	2001      	movs	r0, #1
   87d10:	4ba5      	ldr	r3, [pc, #660]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87d12:	4798      	blx	r3
					break;
   87d14:	e022      	b.n	87d5c <cl_dprep_primecontroller+0xc8>
					case CL_DPREP_PRIME_PRIME_START:
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   87d16:	2206      	movs	r2, #6
   87d18:	49a4      	ldr	r1, [pc, #656]	; (87fac <cl_dprep_primecontroller+0x318>)
   87d1a:	2018      	movs	r0, #24
   87d1c:	4ba4      	ldr	r3, [pc, #656]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87d1e:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   87d20:	4ba4      	ldr	r3, [pc, #656]	; (87fb4 <cl_dprep_primecontroller+0x320>)
   87d22:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   87d24:	2100      	movs	r1, #0
   87d26:	2002      	movs	r0, #2
   87d28:	4b9f      	ldr	r3, [pc, #636]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87d2a:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87d2c:	1d3b      	adds	r3, r7, #4
   87d2e:	2200      	movs	r2, #0
   87d30:	4619      	mov	r1, r3
   87d32:	200d      	movs	r0, #13
   87d34:	4b9e      	ldr	r3, [pc, #632]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87d36:	4798      	blx	r3
   87d38:	4603      	mov	r3, r0
   87d3a:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87d3c:	1d3b      	adds	r3, r7, #4
   87d3e:	2200      	movs	r2, #0
   87d40:	4619      	mov	r1, r3
   87d42:	2024      	movs	r0, #36	; 0x24
   87d44:	4b9a      	ldr	r3, [pc, #616]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87d46:	4798      	blx	r3
   87d48:	4603      	mov	r3, r0
   87d4a:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87d4c:	4b9a      	ldr	r3, [pc, #616]	; (87fb8 <cl_dprep_primecontroller+0x324>)
   87d4e:	4798      	blx	r3
   87d50:	4603      	mov	r3, r0
   87d52:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87d54:	4b92      	ldr	r3, [pc, #584]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87d56:	2201      	movs	r2, #1
   87d58:	701a      	strb	r2, [r3, #0]
					break;
   87d5a:	bf00      	nop
					default:break;
				}
			break;
   87d5c:	f000 bc4b 	b.w	885f6 <cl_dprep_primecontroller+0x962>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   87d60:	79fb      	ldrb	r3, [r7, #7]
   87d62:	3b02      	subs	r3, #2
   87d64:	2b0c      	cmp	r3, #12
   87d66:	d87f      	bhi.n	87e68 <cl_dprep_primecontroller+0x1d4>
   87d68:	a201      	add	r2, pc, #4	; (adr r2, 87d70 <cl_dprep_primecontroller+0xdc>)
   87d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87d6e:	bf00      	nop
   87d70:	00087e17 	.word	0x00087e17
   87d74:	00087da5 	.word	0x00087da5
   87d78:	00087e37 	.word	0x00087e37
   87d7c:	00087e69 	.word	0x00087e69
   87d80:	00087e69 	.word	0x00087e69
   87d84:	00087e69 	.word	0x00087e69
   87d88:	00087e69 	.word	0x00087e69
   87d8c:	00087e69 	.word	0x00087e69
   87d90:	00087e69 	.word	0x00087e69
   87d94:	00087dad 	.word	0x00087dad
   87d98:	00087e47 	.word	0x00087e47
   87d9c:	00087e51 	.word	0x00087e51
   87da0:	00087e5b 	.word	0x00087e5b
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   87da4:	4b7e      	ldr	r3, [pc, #504]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87da6:	2203      	movs	r2, #3
   87da8:	701a      	strb	r2, [r3, #0]
					break;
   87daa:	e060      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   87dac:	2002      	movs	r0, #2
   87dae:	4b83      	ldr	r3, [pc, #524]	; (87fbc <cl_dprep_primecontroller+0x328>)
   87db0:	4798      	blx	r3
   87db2:	4603      	mov	r3, r0
   87db4:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   87db6:	4b82      	ldr	r3, [pc, #520]	; (87fc0 <cl_dprep_primecontroller+0x32c>)
   87db8:	f993 3000 	ldrsb.w	r3, [r3]
   87dbc:	b2da      	uxtb	r2, r3
   87dbe:	3201      	adds	r2, #1
   87dc0:	b2d2      	uxtb	r2, r2
   87dc2:	b251      	sxtb	r1, r2
   87dc4:	4a7e      	ldr	r2, [pc, #504]	; (87fc0 <cl_dprep_primecontroller+0x32c>)
   87dc6:	7011      	strb	r1, [r2, #0]
   87dc8:	2b3b      	cmp	r3, #59	; 0x3b
   87dca:	dd0f      	ble.n	87dec <cl_dprep_primecontroller+0x158>
					{
						cl_prime_sec = 0;
   87dcc:	4b7c      	ldr	r3, [pc, #496]	; (87fc0 <cl_dprep_primecontroller+0x32c>)
   87dce:	2200      	movs	r2, #0
   87dd0:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   87dd2:	4b7c      	ldr	r3, [pc, #496]	; (87fc4 <cl_dprep_primecontroller+0x330>)
   87dd4:	f993 3000 	ldrsb.w	r3, [r3]
   87dd8:	b2db      	uxtb	r3, r3
   87dda:	3301      	adds	r3, #1
   87ddc:	b2db      	uxtb	r3, r3
   87dde:	b25a      	sxtb	r2, r3
   87de0:	4b78      	ldr	r3, [pc, #480]	; (87fc4 <cl_dprep_primecontroller+0x330>)
   87de2:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87de4:	4b74      	ldr	r3, [pc, #464]	; (87fb8 <cl_dprep_primecontroller+0x324>)
   87de6:	4798      	blx	r3
   87de8:	4603      	mov	r3, r0
   87dea:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   87dec:	4b75      	ldr	r3, [pc, #468]	; (87fc4 <cl_dprep_primecontroller+0x330>)
   87dee:	f993 3000 	ldrsb.w	r3, [r3]
   87df2:	2b00      	cmp	r3, #0
   87df4:	dd3a      	ble.n	87e6c <cl_dprep_primecontroller+0x1d8>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   87df6:	2100      	movs	r1, #0
   87df8:	2004      	movs	r0, #4
   87dfa:	4b6b      	ldr	r3, [pc, #428]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87dfc:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   87dfe:	1d3b      	adds	r3, r7, #4
   87e00:	2200      	movs	r2, #0
   87e02:	4619      	mov	r1, r3
   87e04:	200f      	movs	r0, #15
   87e06:	4b6a      	ldr	r3, [pc, #424]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87e08:	4798      	blx	r3
   87e0a:	4603      	mov	r3, r0
   87e0c:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   87e0e:	4b64      	ldr	r3, [pc, #400]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87e10:	2202      	movs	r2, #2
   87e12:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   87e14:	e02a      	b.n	87e6c <cl_dprep_primecontroller+0x1d8>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   87e16:	2100      	movs	r1, #0
   87e18:	2004      	movs	r0, #4
   87e1a:	4b63      	ldr	r3, [pc, #396]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87e1c:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   87e1e:	1d3b      	adds	r3, r7, #4
   87e20:	2200      	movs	r2, #0
   87e22:	4619      	mov	r1, r3
   87e24:	2023      	movs	r0, #35	; 0x23
   87e26:	4b62      	ldr	r3, [pc, #392]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87e28:	4798      	blx	r3
   87e2a:	4603      	mov	r3, r0
   87e2c:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   87e2e:	4b5c      	ldr	r3, [pc, #368]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87e30:	2203      	movs	r2, #3
   87e32:	701a      	strb	r2, [r3, #0]
					break;
   87e34:	e01b      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   87e36:	2100      	movs	r1, #0
   87e38:	2004      	movs	r0, #4
   87e3a:	4b5b      	ldr	r3, [pc, #364]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87e3c:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   87e3e:	4b58      	ldr	r3, [pc, #352]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87e40:	2204      	movs	r2, #4
   87e42:	701a      	strb	r2, [r3, #0]
					break;
   87e44:	e013      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   87e46:	2100      	movs	r1, #0
   87e48:	2002      	movs	r0, #2
   87e4a:	4b57      	ldr	r3, [pc, #348]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87e4c:	4798      	blx	r3
					break;
   87e4e:	e00e      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   87e50:	2100      	movs	r1, #0
   87e52:	2004      	movs	r0, #4
   87e54:	4b54      	ldr	r3, [pc, #336]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87e56:	4798      	blx	r3
					break;
   87e58:	e009      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87e5e:	4619      	mov	r1, r3
   87e60:	2001      	movs	r0, #1
   87e62:	4b51      	ldr	r3, [pc, #324]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87e64:	4798      	blx	r3
					break;
   87e66:	e002      	b.n	87e6e <cl_dprep_primecontroller+0x1da>
					default:break;
   87e68:	bf00      	nop
   87e6a:	e3c4      	b.n	885f6 <cl_dprep_primecontroller+0x962>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   87e6c:	bf00      	nop
					break;
					default:break;
				}

			
			break;
   87e6e:	e3c2      	b.n	885f6 <cl_dprep_primecontroller+0x962>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   87e70:	79fb      	ldrb	r3, [r7, #7]
   87e72:	3b01      	subs	r3, #1
   87e74:	2b0d      	cmp	r3, #13
   87e76:	f200 8399 	bhi.w	885ac <cl_dprep_primecontroller+0x918>
   87e7a:	a201      	add	r2, pc, #4	; (adr r2, 87e80 <cl_dprep_primecontroller+0x1ec>)
   87e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87e80:	00087eb9 	.word	0x00087eb9
   87e84:	000885ad 	.word	0x000885ad
   87e88:	000885ad 	.word	0x000885ad
   87e8c:	000885ad 	.word	0x000885ad
   87e90:	000885ad 	.word	0x000885ad
   87e94:	000885ad 	.word	0x000885ad
   87e98:	000885ad 	.word	0x000885ad
   87e9c:	000885ad 	.word	0x000885ad
   87ea0:	000885ad 	.word	0x000885ad
   87ea4:	000885ad 	.word	0x000885ad
   87ea8:	000885ad 	.word	0x000885ad
   87eac:	00087efd 	.word	0x00087efd
   87eb0:	00087f07 	.word	0x00087f07
   87eb4:	00087f11 	.word	0x00087f11
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   87eb8:	2100      	movs	r1, #0
   87eba:	2002      	movs	r0, #2
   87ebc:	4b3a      	ldr	r3, [pc, #232]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87ebe:	4798      	blx	r3
								cl_prime_min = 0;
   87ec0:	4b40      	ldr	r3, [pc, #256]	; (87fc4 <cl_dprep_primecontroller+0x330>)
   87ec2:	2200      	movs	r2, #0
   87ec4:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   87ec6:	4b3e      	ldr	r3, [pc, #248]	; (87fc0 <cl_dprep_primecontroller+0x32c>)
   87ec8:	2200      	movs	r2, #0
   87eca:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87ecc:	1d3b      	adds	r3, r7, #4
   87ece:	2200      	movs	r2, #0
   87ed0:	4619      	mov	r1, r3
   87ed2:	200d      	movs	r0, #13
   87ed4:	4b36      	ldr	r3, [pc, #216]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87ed6:	4798      	blx	r3
   87ed8:	4603      	mov	r3, r0
   87eda:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87edc:	1d3b      	adds	r3, r7, #4
   87ede:	2200      	movs	r2, #0
   87ee0:	4619      	mov	r1, r3
   87ee2:	2024      	movs	r0, #36	; 0x24
   87ee4:	4b32      	ldr	r3, [pc, #200]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87ee6:	4798      	blx	r3
   87ee8:	4603      	mov	r3, r0
   87eea:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87eec:	4b32      	ldr	r3, [pc, #200]	; (87fb8 <cl_dprep_primecontroller+0x324>)
   87eee:	4798      	blx	r3
   87ef0:	4603      	mov	r3, r0
   87ef2:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87ef4:	4b2a      	ldr	r3, [pc, #168]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87ef6:	2201      	movs	r2, #1
   87ef8:	701a      	strb	r2, [r3, #0]
							break;
   87efa:	e010      	b.n	87f1e <cl_dprep_primecontroller+0x28a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   87efc:	2100      	movs	r1, #0
   87efe:	2002      	movs	r0, #2
   87f00:	4b29      	ldr	r3, [pc, #164]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87f02:	4798      	blx	r3
							break;
   87f04:	e00b      	b.n	87f1e <cl_dprep_primecontroller+0x28a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87f06:	2100      	movs	r1, #0
   87f08:	2004      	movs	r0, #4
   87f0a:	4b27      	ldr	r3, [pc, #156]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87f0c:	4798      	blx	r3
							break;
   87f0e:	e006      	b.n	87f1e <cl_dprep_primecontroller+0x28a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   87f14:	4619      	mov	r1, r3
   87f16:	2001      	movs	r0, #1
   87f18:	4b23      	ldr	r3, [pc, #140]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87f1a:	4798      	blx	r3
							break;
   87f1c:	bf00      	nop
						}
			break;
   87f1e:	e345      	b.n	885ac <cl_dprep_primecontroller+0x918>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   87f20:	79fb      	ldrb	r3, [r7, #7]
   87f22:	3b01      	subs	r3, #1
   87f24:	2b0d      	cmp	r3, #13
   87f26:	f200 8343 	bhi.w	885b0 <cl_dprep_primecontroller+0x91c>
   87f2a:	a201      	add	r2, pc, #4	; (adr r2, 87f30 <cl_dprep_primecontroller+0x29c>)
   87f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87f30:	00087f69 	.word	0x00087f69
   87f34:	00087fc9 	.word	0x00087fc9
   87f38:	000885b1 	.word	0x000885b1
   87f3c:	000885b1 	.word	0x000885b1
   87f40:	000885b1 	.word	0x000885b1
   87f44:	000885b1 	.word	0x000885b1
   87f48:	000885b1 	.word	0x000885b1
   87f4c:	000885b1 	.word	0x000885b1
   87f50:	000885b1 	.word	0x000885b1
   87f54:	000885b1 	.word	0x000885b1
   87f58:	000885b1 	.word	0x000885b1
   87f5c:	00087fe9 	.word	0x00087fe9
   87f60:	00087ff3 	.word	0x00087ff3
   87f64:	00087ffd 	.word	0x00087ffd
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   87f68:	2100      	movs	r1, #0
   87f6a:	2002      	movs	r0, #2
   87f6c:	4b0e      	ldr	r3, [pc, #56]	; (87fa8 <cl_dprep_primecontroller+0x314>)
   87f6e:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87f70:	1d3b      	adds	r3, r7, #4
   87f72:	2200      	movs	r2, #0
   87f74:	4619      	mov	r1, r3
   87f76:	200d      	movs	r0, #13
   87f78:	4b0d      	ldr	r3, [pc, #52]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87f7a:	4798      	blx	r3
   87f7c:	4603      	mov	r3, r0
   87f7e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87f80:	1d3b      	adds	r3, r7, #4
   87f82:	2200      	movs	r2, #0
   87f84:	4619      	mov	r1, r3
   87f86:	2024      	movs	r0, #36	; 0x24
   87f88:	4b09      	ldr	r3, [pc, #36]	; (87fb0 <cl_dprep_primecontroller+0x31c>)
   87f8a:	4798      	blx	r3
   87f8c:	4603      	mov	r3, r0
   87f8e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87f90:	4b09      	ldr	r3, [pc, #36]	; (87fb8 <cl_dprep_primecontroller+0x324>)
   87f92:	4798      	blx	r3
   87f94:	4603      	mov	r3, r0
   87f96:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87f98:	4b01      	ldr	r3, [pc, #4]	; (87fa0 <cl_dprep_primecontroller+0x30c>)
   87f9a:	2201      	movs	r2, #1
   87f9c:	701a      	strb	r2, [r3, #0]
							break;
   87f9e:	e034      	b.n	8800a <cl_dprep_primecontroller+0x376>
   87fa0:	2007212c 	.word	0x2007212c
   87fa4:	2007318c 	.word	0x2007318c
   87fa8:	00091a75 	.word	0x00091a75
   87fac:	000a54ac 	.word	0x000a54ac
   87fb0:	0009926d 	.word	0x0009926d
   87fb4:	000976c5 	.word	0x000976c5
   87fb8:	00088601 	.word	0x00088601
   87fbc:	0009d7c1 	.word	0x0009d7c1
   87fc0:	2007212e 	.word	0x2007212e
   87fc4:	2007212f 	.word	0x2007212f
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87fc8:	2100      	movs	r1, #0
   87fca:	2004      	movs	r0, #4
   87fcc:	4bab      	ldr	r3, [pc, #684]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   87fce:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   87fd0:	1d3b      	adds	r3, r7, #4
   87fd2:	2200      	movs	r2, #0
   87fd4:	4619      	mov	r1, r3
   87fd6:	2023      	movs	r0, #35	; 0x23
   87fd8:	4ba9      	ldr	r3, [pc, #676]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   87fda:	4798      	blx	r3
   87fdc:	4603      	mov	r3, r0
   87fde:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   87fe0:	4ba8      	ldr	r3, [pc, #672]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   87fe2:	2203      	movs	r2, #3
   87fe4:	701a      	strb	r2, [r3, #0]
							break;
   87fe6:	e010      	b.n	8800a <cl_dprep_primecontroller+0x376>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   87fe8:	2100      	movs	r1, #0
   87fea:	2002      	movs	r0, #2
   87fec:	4ba3      	ldr	r3, [pc, #652]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   87fee:	4798      	blx	r3
							break;
   87ff0:	e00b      	b.n	8800a <cl_dprep_primecontroller+0x376>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87ff2:	2100      	movs	r1, #0
   87ff4:	2004      	movs	r0, #4
   87ff6:	4ba1      	ldr	r3, [pc, #644]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   87ff8:	4798      	blx	r3
							break;
   87ffa:	e006      	b.n	8800a <cl_dprep_primecontroller+0x376>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87ffc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88000:	4619      	mov	r1, r3
   88002:	2001      	movs	r0, #1
   88004:	4b9d      	ldr	r3, [pc, #628]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88006:	4798      	blx	r3
							break;
   88008:	bf00      	nop
						}
			break;
   8800a:	e2d1      	b.n	885b0 <cl_dprep_primecontroller+0x91c>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   8800c:	79fb      	ldrb	r3, [r7, #7]
   8800e:	3b01      	subs	r3, #1
   88010:	2b0d      	cmp	r3, #13
   88012:	f200 82cf 	bhi.w	885b4 <cl_dprep_primecontroller+0x920>
   88016:	a201      	add	r2, pc, #4	; (adr r2, 8801c <cl_dprep_primecontroller+0x388>)
   88018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8801c:	00088093 	.word	0x00088093
   88020:	000885b5 	.word	0x000885b5
   88024:	000885b5 	.word	0x000885b5
   88028:	000885b5 	.word	0x000885b5
   8802c:	00088055 	.word	0x00088055
   88030:	0008812b 	.word	0x0008812b
   88034:	000885b5 	.word	0x000885b5
   88038:	000880e1 	.word	0x000880e1
   8803c:	000885b5 	.word	0x000885b5
   88040:	000885b5 	.word	0x000885b5
   88044:	000885b5 	.word	0x000885b5
   88048:	00088109 	.word	0x00088109
   8804c:	00088113 	.word	0x00088113
   88050:	0008811d 	.word	0x0008811d
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88054:	2206      	movs	r2, #6
   88056:	498c      	ldr	r1, [pc, #560]	; (88288 <cl_dprep_primecontroller+0x5f4>)
   88058:	2018      	movs	r0, #24
   8805a:	4b89      	ldr	r3, [pc, #548]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   8805c:	4798      	blx	r3
							cl_prime_min =  0;
   8805e:	4b8b      	ldr	r3, [pc, #556]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   88060:	2200      	movs	r2, #0
   88062:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88064:	4b8a      	ldr	r3, [pc, #552]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   88066:	2200      	movs	r2, #0
   88068:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   8806a:	2100      	movs	r1, #0
   8806c:	2002      	movs	r0, #2
   8806e:	4b83      	ldr	r3, [pc, #524]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88070:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88072:	1d3b      	adds	r3, r7, #4
   88074:	2200      	movs	r2, #0
   88076:	4619      	mov	r1, r3
   88078:	202f      	movs	r0, #47	; 0x2f
   8807a:	4b81      	ldr	r3, [pc, #516]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   8807c:	4798      	blx	r3
   8807e:	4603      	mov	r3, r0
   88080:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88082:	4b84      	ldr	r3, [pc, #528]	; (88294 <cl_dprep_primecontroller+0x600>)
   88084:	4798      	blx	r3
   88086:	4603      	mov	r3, r0
   88088:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   8808a:	4b7e      	ldr	r3, [pc, #504]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   8808c:	2205      	movs	r2, #5
   8808e:	701a      	strb	r2, [r3, #0]
							break;
   88090:	e04c      	b.n	8812c <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88092:	2206      	movs	r2, #6
   88094:	4980      	ldr	r1, [pc, #512]	; (88298 <cl_dprep_primecontroller+0x604>)
   88096:	2018      	movs	r0, #24
   88098:	4b79      	ldr	r3, [pc, #484]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   8809a:	4798      	blx	r3
							cl_prime_min =  0;
   8809c:	4b7b      	ldr	r3, [pc, #492]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   8809e:	2200      	movs	r2, #0
   880a0:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   880a2:	4b7b      	ldr	r3, [pc, #492]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   880a4:	2200      	movs	r2, #0
   880a6:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   880a8:	2100      	movs	r1, #0
   880aa:	2002      	movs	r0, #2
   880ac:	4b73      	ldr	r3, [pc, #460]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   880ae:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   880b0:	1d3b      	adds	r3, r7, #4
   880b2:	2200      	movs	r2, #0
   880b4:	4619      	mov	r1, r3
   880b6:	200d      	movs	r0, #13
   880b8:	4b71      	ldr	r3, [pc, #452]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   880ba:	4798      	blx	r3
   880bc:	4603      	mov	r3, r0
   880be:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   880c0:	1d3b      	adds	r3, r7, #4
   880c2:	2200      	movs	r2, #0
   880c4:	4619      	mov	r1, r3
   880c6:	2024      	movs	r0, #36	; 0x24
   880c8:	4b6d      	ldr	r3, [pc, #436]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   880ca:	4798      	blx	r3
   880cc:	4603      	mov	r3, r0
   880ce:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   880d0:	4b70      	ldr	r3, [pc, #448]	; (88294 <cl_dprep_primecontroller+0x600>)
   880d2:	4798      	blx	r3
   880d4:	4603      	mov	r3, r0
   880d6:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   880d8:	4b6a      	ldr	r3, [pc, #424]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   880da:	2201      	movs	r2, #1
   880dc:	701a      	strb	r2, [r3, #0]
							break;
   880de:	e025      	b.n	8812c <cl_dprep_primecontroller+0x498>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   880e0:	2100      	movs	r1, #0
   880e2:	2002      	movs	r0, #2
   880e4:	4b65      	ldr	r3, [pc, #404]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   880e6:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   880e8:	1d3b      	adds	r3, r7, #4
   880ea:	2200      	movs	r2, #0
   880ec:	4619      	mov	r1, r3
   880ee:	2028      	movs	r0, #40	; 0x28
   880f0:	4b63      	ldr	r3, [pc, #396]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   880f2:	4798      	blx	r3
   880f4:	4603      	mov	r3, r0
   880f6:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   880f8:	4b68      	ldr	r3, [pc, #416]	; (8829c <cl_dprep_primecontroller+0x608>)
   880fa:	4798      	blx	r3
   880fc:	4603      	mov	r3, r0
   880fe:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88100:	4b60      	ldr	r3, [pc, #384]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   88102:	2209      	movs	r2, #9
   88104:	701a      	strb	r2, [r3, #0]
							break;
   88106:	e011      	b.n	8812c <cl_dprep_primecontroller+0x498>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88108:	2100      	movs	r1, #0
   8810a:	2002      	movs	r0, #2
   8810c:	4b5b      	ldr	r3, [pc, #364]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   8810e:	4798      	blx	r3
							break;
   88110:	e00c      	b.n	8812c <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88112:	2100      	movs	r1, #0
   88114:	2004      	movs	r0, #4
   88116:	4b59      	ldr	r3, [pc, #356]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88118:	4798      	blx	r3
							break;
   8811a:	e007      	b.n	8812c <cl_dprep_primecontroller+0x498>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8811c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88120:	4619      	mov	r1, r3
   88122:	2001      	movs	r0, #1
   88124:	4b55      	ldr	r3, [pc, #340]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88126:	4798      	blx	r3
							break;
   88128:	e000      	b.n	8812c <cl_dprep_primecontroller+0x498>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   8812a:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   8812c:	e242      	b.n	885b4 <cl_dprep_primecontroller+0x920>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   8812e:	79fb      	ldrb	r3, [r7, #7]
   88130:	3b02      	subs	r3, #2
   88132:	2b0c      	cmp	r3, #12
   88134:	d879      	bhi.n	8822a <cl_dprep_primecontroller+0x596>
   88136:	a201      	add	r2, pc, #4	; (adr r2, 8813c <cl_dprep_primecontroller+0x4a8>)
   88138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8813c:	000881d9 	.word	0x000881d9
   88140:	00088171 	.word	0x00088171
   88144:	000881f9 	.word	0x000881f9
   88148:	0008822b 	.word	0x0008822b
   8814c:	0008822b 	.word	0x0008822b
   88150:	0008822b 	.word	0x0008822b
   88154:	0008822b 	.word	0x0008822b
   88158:	0008822b 	.word	0x0008822b
   8815c:	0008822b 	.word	0x0008822b
   88160:	00088179 	.word	0x00088179
   88164:	00088209 	.word	0x00088209
   88168:	00088213 	.word	0x00088213
   8816c:	0008821d 	.word	0x0008821d
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   88170:	4b44      	ldr	r3, [pc, #272]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   88172:	2206      	movs	r2, #6
   88174:	701a      	strb	r2, [r3, #0]
						break;
   88176:	e05b      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   88178:	4b45      	ldr	r3, [pc, #276]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   8817a:	f993 3000 	ldrsb.w	r3, [r3]
   8817e:	b2da      	uxtb	r2, r3
   88180:	3201      	adds	r2, #1
   88182:	b2d2      	uxtb	r2, r2
   88184:	b251      	sxtb	r1, r2
   88186:	4a42      	ldr	r2, [pc, #264]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   88188:	7011      	strb	r1, [r2, #0]
   8818a:	2b3b      	cmp	r3, #59	; 0x3b
   8818c:	dd0f      	ble.n	881ae <cl_dprep_primecontroller+0x51a>
						{
							cl_prime_sec = 0;
   8818e:	4b40      	ldr	r3, [pc, #256]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   88190:	2200      	movs	r2, #0
   88192:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   88194:	4b3d      	ldr	r3, [pc, #244]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   88196:	f993 3000 	ldrsb.w	r3, [r3]
   8819a:	b2db      	uxtb	r3, r3
   8819c:	3301      	adds	r3, #1
   8819e:	b2db      	uxtb	r3, r3
   881a0:	b25a      	sxtb	r2, r3
   881a2:	4b3a      	ldr	r3, [pc, #232]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   881a4:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   881a6:	4b3b      	ldr	r3, [pc, #236]	; (88294 <cl_dprep_primecontroller+0x600>)
   881a8:	4798      	blx	r3
   881aa:	4603      	mov	r3, r0
   881ac:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   881ae:	4b37      	ldr	r3, [pc, #220]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   881b0:	f993 3000 	ldrsb.w	r3, [r3]
   881b4:	2b00      	cmp	r3, #0
   881b6:	dd3a      	ble.n	8822e <cl_dprep_primecontroller+0x59a>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   881b8:	2100      	movs	r1, #0
   881ba:	2004      	movs	r0, #4
   881bc:	4b2f      	ldr	r3, [pc, #188]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   881be:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   881c0:	1d3b      	adds	r3, r7, #4
   881c2:	2200      	movs	r2, #0
   881c4:	4619      	mov	r1, r3
   881c6:	2031      	movs	r0, #49	; 0x31
   881c8:	4b2d      	ldr	r3, [pc, #180]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   881ca:	4798      	blx	r3
   881cc:	4603      	mov	r3, r0
   881ce:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   881d0:	4b2c      	ldr	r3, [pc, #176]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   881d2:	2208      	movs	r2, #8
   881d4:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   881d6:	e02a      	b.n	8822e <cl_dprep_primecontroller+0x59a>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   881d8:	2100      	movs	r1, #0
   881da:	2004      	movs	r0, #4
   881dc:	4b27      	ldr	r3, [pc, #156]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   881de:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   881e0:	1d3b      	adds	r3, r7, #4
   881e2:	2200      	movs	r2, #0
   881e4:	4619      	mov	r1, r3
   881e6:	2023      	movs	r0, #35	; 0x23
   881e8:	4b25      	ldr	r3, [pc, #148]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   881ea:	4798      	blx	r3
   881ec:	4603      	mov	r3, r0
   881ee:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   881f0:	4b24      	ldr	r3, [pc, #144]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   881f2:	2203      	movs	r2, #3
   881f4:	701a      	strb	r2, [r3, #0]
						break;
   881f6:	e01b      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   881f8:	2100      	movs	r1, #0
   881fa:	2004      	movs	r0, #4
   881fc:	4b1f      	ldr	r3, [pc, #124]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   881fe:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88200:	4b20      	ldr	r3, [pc, #128]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   88202:	2204      	movs	r2, #4
   88204:	701a      	strb	r2, [r3, #0]
						break;
   88206:	e013      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88208:	2100      	movs	r1, #0
   8820a:	2002      	movs	r0, #2
   8820c:	4b1b      	ldr	r3, [pc, #108]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   8820e:	4798      	blx	r3
						break;
   88210:	e00e      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88212:	2100      	movs	r1, #0
   88214:	2004      	movs	r0, #4
   88216:	4b19      	ldr	r3, [pc, #100]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88218:	4798      	blx	r3
						break;
   8821a:	e009      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8821c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88220:	4619      	mov	r1, r3
   88222:	2001      	movs	r0, #1
   88224:	4b15      	ldr	r3, [pc, #84]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88226:	4798      	blx	r3
						break;
   88228:	e002      	b.n	88230 <cl_dprep_primecontroller+0x59c>
						default:break;
   8822a:	bf00      	nop
   8822c:	e1e3      	b.n	885f6 <cl_dprep_primecontroller+0x962>
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
						
						}

						break;
   8822e:	bf00      	nop
						break;
						default:break;
					}

			
			break;
   88230:	e1e1      	b.n	885f6 <cl_dprep_primecontroller+0x962>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   88232:	79fb      	ldrb	r3, [r7, #7]
   88234:	2b05      	cmp	r3, #5
   88236:	d000      	beq.n	8823a <cl_dprep_primecontroller+0x5a6>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   88238:	e01e      	b.n	88278 <cl_dprep_primecontroller+0x5e4>
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   8823a:	2206      	movs	r2, #6
   8823c:	4912      	ldr	r1, [pc, #72]	; (88288 <cl_dprep_primecontroller+0x5f4>)
   8823e:	2018      	movs	r0, #24
   88240:	4b0f      	ldr	r3, [pc, #60]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   88242:	4798      	blx	r3
									cl_prime_min =  0;
   88244:	4b11      	ldr	r3, [pc, #68]	; (8828c <cl_dprep_primecontroller+0x5f8>)
   88246:	2200      	movs	r2, #0
   88248:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   8824a:	4b11      	ldr	r3, [pc, #68]	; (88290 <cl_dprep_primecontroller+0x5fc>)
   8824c:	2200      	movs	r2, #0
   8824e:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   88250:	2100      	movs	r1, #0
   88252:	2002      	movs	r0, #2
   88254:	4b09      	ldr	r3, [pc, #36]	; (8827c <cl_dprep_primecontroller+0x5e8>)
   88256:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88258:	1d3b      	adds	r3, r7, #4
   8825a:	2200      	movs	r2, #0
   8825c:	4619      	mov	r1, r3
   8825e:	202f      	movs	r0, #47	; 0x2f
   88260:	4b07      	ldr	r3, [pc, #28]	; (88280 <cl_dprep_primecontroller+0x5ec>)
   88262:	4798      	blx	r3
   88264:	4603      	mov	r3, r0
   88266:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88268:	4b0a      	ldr	r3, [pc, #40]	; (88294 <cl_dprep_primecontroller+0x600>)
   8826a:	4798      	blx	r3
   8826c:	4603      	mov	r3, r0
   8826e:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88270:	4b04      	ldr	r3, [pc, #16]	; (88284 <cl_dprep_primecontroller+0x5f0>)
   88272:	2205      	movs	r2, #5
   88274:	701a      	strb	r2, [r3, #0]
								break;
   88276:	bf00      	nop
								default:break;
									}
			break;
   88278:	e1bd      	b.n	885f6 <cl_dprep_primecontroller+0x962>
   8827a:	bf00      	nop
   8827c:	00091a75 	.word	0x00091a75
   88280:	0009926d 	.word	0x0009926d
   88284:	2007212c 	.word	0x2007212c
   88288:	000a54b4 	.word	0x000a54b4
   8828c:	2007212f 	.word	0x2007212f
   88290:	2007212e 	.word	0x2007212e
   88294:	00088601 	.word	0x00088601
   88298:	000a54ac 	.word	0x000a54ac
   8829c:	00088679 	.word	0x00088679
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   882a0:	79fb      	ldrb	r3, [r7, #7]
   882a2:	3b01      	subs	r3, #1
   882a4:	2b0d      	cmp	r3, #13
   882a6:	f200 8187 	bhi.w	885b8 <cl_dprep_primecontroller+0x924>
   882aa:	a201      	add	r2, pc, #4	; (adr r2, 882b0 <cl_dprep_primecontroller+0x61c>)
   882ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   882b0:	00088327 	.word	0x00088327
   882b4:	000885b9 	.word	0x000885b9
   882b8:	000885b9 	.word	0x000885b9
   882bc:	000885b9 	.word	0x000885b9
   882c0:	000882e9 	.word	0x000882e9
   882c4:	000883bf 	.word	0x000883bf
   882c8:	000885b9 	.word	0x000885b9
   882cc:	00088375 	.word	0x00088375
   882d0:	000885b9 	.word	0x000885b9
   882d4:	000885b9 	.word	0x000885b9
   882d8:	000885b9 	.word	0x000885b9
   882dc:	0008839d 	.word	0x0008839d
   882e0:	000883a7 	.word	0x000883a7
   882e4:	000883b1 	.word	0x000883b1
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   882e8:	2206      	movs	r2, #6
   882ea:	49b5      	ldr	r1, [pc, #724]	; (885c0 <cl_dprep_primecontroller+0x92c>)
   882ec:	2018      	movs	r0, #24
   882ee:	4bb5      	ldr	r3, [pc, #724]	; (885c4 <cl_dprep_primecontroller+0x930>)
   882f0:	4798      	blx	r3
							cl_prime_min =  0;
   882f2:	4bb5      	ldr	r3, [pc, #724]	; (885c8 <cl_dprep_primecontroller+0x934>)
   882f4:	2200      	movs	r2, #0
   882f6:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   882f8:	4bb4      	ldr	r3, [pc, #720]	; (885cc <cl_dprep_primecontroller+0x938>)
   882fa:	2200      	movs	r2, #0
   882fc:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   882fe:	2100      	movs	r1, #0
   88300:	2002      	movs	r0, #2
   88302:	4bb3      	ldr	r3, [pc, #716]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88304:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88306:	1d3b      	adds	r3, r7, #4
   88308:	2200      	movs	r2, #0
   8830a:	4619      	mov	r1, r3
   8830c:	202f      	movs	r0, #47	; 0x2f
   8830e:	4bad      	ldr	r3, [pc, #692]	; (885c4 <cl_dprep_primecontroller+0x930>)
   88310:	4798      	blx	r3
   88312:	4603      	mov	r3, r0
   88314:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88316:	4baf      	ldr	r3, [pc, #700]	; (885d4 <cl_dprep_primecontroller+0x940>)
   88318:	4798      	blx	r3
   8831a:	4603      	mov	r3, r0
   8831c:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   8831e:	4bae      	ldr	r3, [pc, #696]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88320:	2205      	movs	r2, #5
   88322:	701a      	strb	r2, [r3, #0]
							break;
   88324:	e04c      	b.n	883c0 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88326:	2206      	movs	r2, #6
   88328:	49ac      	ldr	r1, [pc, #688]	; (885dc <cl_dprep_primecontroller+0x948>)
   8832a:	2018      	movs	r0, #24
   8832c:	4ba5      	ldr	r3, [pc, #660]	; (885c4 <cl_dprep_primecontroller+0x930>)
   8832e:	4798      	blx	r3
							cl_prime_min =  0;
   88330:	4ba5      	ldr	r3, [pc, #660]	; (885c8 <cl_dprep_primecontroller+0x934>)
   88332:	2200      	movs	r2, #0
   88334:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88336:	4ba5      	ldr	r3, [pc, #660]	; (885cc <cl_dprep_primecontroller+0x938>)
   88338:	2200      	movs	r2, #0
   8833a:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   8833c:	2100      	movs	r1, #0
   8833e:	2002      	movs	r0, #2
   88340:	4ba3      	ldr	r3, [pc, #652]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88342:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88344:	1d3b      	adds	r3, r7, #4
   88346:	2200      	movs	r2, #0
   88348:	4619      	mov	r1, r3
   8834a:	200d      	movs	r0, #13
   8834c:	4b9d      	ldr	r3, [pc, #628]	; (885c4 <cl_dprep_primecontroller+0x930>)
   8834e:	4798      	blx	r3
   88350:	4603      	mov	r3, r0
   88352:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88354:	1d3b      	adds	r3, r7, #4
   88356:	2200      	movs	r2, #0
   88358:	4619      	mov	r1, r3
   8835a:	2024      	movs	r0, #36	; 0x24
   8835c:	4b99      	ldr	r3, [pc, #612]	; (885c4 <cl_dprep_primecontroller+0x930>)
   8835e:	4798      	blx	r3
   88360:	4603      	mov	r3, r0
   88362:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88364:	4b9b      	ldr	r3, [pc, #620]	; (885d4 <cl_dprep_primecontroller+0x940>)
   88366:	4798      	blx	r3
   88368:	4603      	mov	r3, r0
   8836a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   8836c:	4b9a      	ldr	r3, [pc, #616]	; (885d8 <cl_dprep_primecontroller+0x944>)
   8836e:	2201      	movs	r2, #1
   88370:	701a      	strb	r2, [r3, #0]
							break;
   88372:	e025      	b.n	883c0 <cl_dprep_primecontroller+0x72c>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88374:	2100      	movs	r1, #0
   88376:	2002      	movs	r0, #2
   88378:	4b95      	ldr	r3, [pc, #596]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8837a:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   8837c:	1d3b      	adds	r3, r7, #4
   8837e:	2200      	movs	r2, #0
   88380:	4619      	mov	r1, r3
   88382:	2028      	movs	r0, #40	; 0x28
   88384:	4b8f      	ldr	r3, [pc, #572]	; (885c4 <cl_dprep_primecontroller+0x930>)
   88386:	4798      	blx	r3
   88388:	4603      	mov	r3, r0
   8838a:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   8838c:	4b94      	ldr	r3, [pc, #592]	; (885e0 <cl_dprep_primecontroller+0x94c>)
   8838e:	4798      	blx	r3
   88390:	4603      	mov	r3, r0
   88392:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88394:	4b90      	ldr	r3, [pc, #576]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88396:	2209      	movs	r2, #9
   88398:	701a      	strb	r2, [r3, #0]
							break;
   8839a:	e011      	b.n	883c0 <cl_dprep_primecontroller+0x72c>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8839c:	2100      	movs	r1, #0
   8839e:	2002      	movs	r0, #2
   883a0:	4b8b      	ldr	r3, [pc, #556]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   883a2:	4798      	blx	r3
							break;
   883a4:	e00c      	b.n	883c0 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   883a6:	2100      	movs	r1, #0
   883a8:	2004      	movs	r0, #4
   883aa:	4b89      	ldr	r3, [pc, #548]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   883ac:	4798      	blx	r3
							break;
   883ae:	e007      	b.n	883c0 <cl_dprep_primecontroller+0x72c>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   883b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   883b4:	4619      	mov	r1, r3
   883b6:	2001      	movs	r0, #1
   883b8:	4b85      	ldr	r3, [pc, #532]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   883ba:	4798      	blx	r3
							break;
   883bc:	e000      	b.n	883c0 <cl_dprep_primecontroller+0x72c>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   883be:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   883c0:	e0fa      	b.n	885b8 <cl_dprep_primecontroller+0x924>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   883c2:	79fb      	ldrb	r3, [r7, #7]
   883c4:	3b02      	subs	r3, #2
   883c6:	2b0c      	cmp	r3, #12
   883c8:	d86e      	bhi.n	884a8 <cl_dprep_primecontroller+0x814>
   883ca:	a201      	add	r2, pc, #4	; (adr r2, 883d0 <cl_dprep_primecontroller+0x73c>)
   883cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   883d0:	0008843d 	.word	0x0008843d
   883d4:	00088405 	.word	0x00088405
   883d8:	000884a9 	.word	0x000884a9
   883dc:	000884a9 	.word	0x000884a9
   883e0:	000884a9 	.word	0x000884a9
   883e4:	000884a9 	.word	0x000884a9
   883e8:	000884a9 	.word	0x000884a9
   883ec:	0008843d 	.word	0x0008843d
   883f0:	0008847f 	.word	0x0008847f
   883f4:	0008840d 	.word	0x0008840d
   883f8:	00088487 	.word	0x00088487
   883fc:	00088491 	.word	0x00088491
   88400:	0008849b 	.word	0x0008849b
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88404:	4b74      	ldr	r3, [pc, #464]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88406:	220b      	movs	r2, #11
   88408:	701a      	strb	r2, [r3, #0]
							break;
   8840a:	e050      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   8840c:	4b75      	ldr	r3, [pc, #468]	; (885e4 <cl_dprep_primecontroller+0x950>)
   8840e:	f993 3000 	ldrsb.w	r3, [r3]
   88412:	b2da      	uxtb	r2, r3
   88414:	3201      	adds	r2, #1
   88416:	b2d2      	uxtb	r2, r2
   88418:	b251      	sxtb	r1, r2
   8841a:	4a72      	ldr	r2, [pc, #456]	; (885e4 <cl_dprep_primecontroller+0x950>)
   8841c:	7011      	strb	r1, [r2, #0]
   8841e:	2b3b      	cmp	r3, #59	; 0x3b
   88420:	dd44      	ble.n	884ac <cl_dprep_primecontroller+0x818>
							{
								cl_dialyser_prime_sec = 0;
   88422:	4b70      	ldr	r3, [pc, #448]	; (885e4 <cl_dprep_primecontroller+0x950>)
   88424:	2200      	movs	r2, #0
   88426:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   88428:	4b6f      	ldr	r3, [pc, #444]	; (885e8 <cl_dprep_primecontroller+0x954>)
   8842a:	f993 3000 	ldrsb.w	r3, [r3]
   8842e:	b2db      	uxtb	r3, r3
   88430:	3301      	adds	r3, #1
   88432:	b2db      	uxtb	r3, r3
   88434:	b25a      	sxtb	r2, r3
   88436:	4b6c      	ldr	r3, [pc, #432]	; (885e8 <cl_dprep_primecontroller+0x954>)
   88438:	701a      	strb	r2, [r3, #0]
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   8843a:	e037      	b.n	884ac <cl_dprep_primecontroller+0x818>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   8843c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88440:	2b01      	cmp	r3, #1
   88442:	d107      	bne.n	88454 <cl_dprep_primecontroller+0x7c0>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88444:	2100      	movs	r1, #0
   88446:	2004      	movs	r0, #4
   88448:	4b61      	ldr	r3, [pc, #388]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8844a:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8844c:	4b62      	ldr	r3, [pc, #392]	; (885d8 <cl_dprep_primecontroller+0x944>)
   8844e:	220a      	movs	r2, #10
   88450:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88452:	e02c      	b.n	884ae <cl_dprep_primecontroller+0x81a>
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									sv_cntrl_enable_bypass();
   88454:	4b65      	ldr	r3, [pc, #404]	; (885ec <cl_dprep_primecontroller+0x958>)
   88456:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88458:	2100      	movs	r1, #0
   8845a:	2004      	movs	r0, #4
   8845c:	4b5c      	ldr	r3, [pc, #368]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8845e:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   88460:	4b60      	ldr	r3, [pc, #384]	; (885e4 <cl_dprep_primecontroller+0x950>)
   88462:	2200      	movs	r2, #0
   88464:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   88466:	4b60      	ldr	r3, [pc, #384]	; (885e8 <cl_dprep_primecontroller+0x954>)
   88468:	2200      	movs	r2, #0
   8846a:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8846c:	4b5a      	ldr	r3, [pc, #360]	; (885d8 <cl_dprep_primecontroller+0x944>)
   8846e:	220b      	movs	r2, #11
   88470:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   88472:	2200      	movs	r2, #0
   88474:	2100      	movs	r1, #0
   88476:	2029      	movs	r0, #41	; 0x29
   88478:	4b52      	ldr	r3, [pc, #328]	; (885c4 <cl_dprep_primecontroller+0x930>)
   8847a:	4798      	blx	r3
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   8847c:	e017      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   8847e:	4b56      	ldr	r3, [pc, #344]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88480:	220c      	movs	r2, #12
   88482:	701a      	strb	r2, [r3, #0]
							break;
   88484:	e013      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88486:	2100      	movs	r1, #0
   88488:	2002      	movs	r0, #2
   8848a:	4b51      	ldr	r3, [pc, #324]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8848c:	4798      	blx	r3
							break;
   8848e:	e00e      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88490:	2100      	movs	r1, #0
   88492:	2004      	movs	r0, #4
   88494:	4b4e      	ldr	r3, [pc, #312]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88496:	4798      	blx	r3
							break;
   88498:	e009      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8849a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8849e:	4619      	mov	r1, r3
   884a0:	2001      	movs	r0, #1
   884a2:	4b4b      	ldr	r3, [pc, #300]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   884a4:	4798      	blx	r3
							break;
   884a6:	e002      	b.n	884ae <cl_dprep_primecontroller+0x81a>
							default:break;
   884a8:	bf00      	nop
   884aa:	e0a4      	b.n	885f6 <cl_dprep_primecontroller+0x962>
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   884ac:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							default:break;
						}
			break;
   884ae:	e0a2      	b.n	885f6 <cl_dprep_primecontroller+0x962>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   884b0:	79fb      	ldrb	r3, [r7, #7]
   884b2:	3b08      	subs	r3, #8
   884b4:	2b06      	cmp	r3, #6
   884b6:	f200 8081 	bhi.w	885bc <cl_dprep_primecontroller+0x928>
   884ba:	a201      	add	r2, pc, #4	; (adr r2, 884c0 <cl_dprep_primecontroller+0x82c>)
   884bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   884c0:	000884dd 	.word	0x000884dd
   884c4:	000885bd 	.word	0x000885bd
   884c8:	000885bd 	.word	0x000885bd
   884cc:	000885bd 	.word	0x000885bd
   884d0:	00088509 	.word	0x00088509
   884d4:	00088513 	.word	0x00088513
   884d8:	0008851d 	.word	0x0008851d
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   884dc:	4b44      	ldr	r3, [pc, #272]	; (885f0 <cl_dprep_primecontroller+0x95c>)
   884de:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   884e0:	2100      	movs	r1, #0
   884e2:	2002      	movs	r0, #2
   884e4:	4b3a      	ldr	r3, [pc, #232]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   884e6:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   884e8:	1d3b      	adds	r3, r7, #4
   884ea:	2200      	movs	r2, #0
   884ec:	4619      	mov	r1, r3
   884ee:	2028      	movs	r0, #40	; 0x28
   884f0:	4b34      	ldr	r3, [pc, #208]	; (885c4 <cl_dprep_primecontroller+0x930>)
   884f2:	4798      	blx	r3
   884f4:	4603      	mov	r3, r0
   884f6:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   884f8:	4b39      	ldr	r3, [pc, #228]	; (885e0 <cl_dprep_primecontroller+0x94c>)
   884fa:	4798      	blx	r3
   884fc:	4603      	mov	r3, r0
   884fe:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88500:	4b35      	ldr	r3, [pc, #212]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88502:	2209      	movs	r2, #9
   88504:	701a      	strb	r2, [r3, #0]
							break;
   88506:	e010      	b.n	8852a <cl_dprep_primecontroller+0x896>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88508:	2100      	movs	r1, #0
   8850a:	2002      	movs	r0, #2
   8850c:	4b30      	ldr	r3, [pc, #192]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8850e:	4798      	blx	r3
							break;
   88510:	e00b      	b.n	8852a <cl_dprep_primecontroller+0x896>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88512:	2100      	movs	r1, #0
   88514:	2004      	movs	r0, #4
   88516:	4b2e      	ldr	r3, [pc, #184]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88518:	4798      	blx	r3
							break;
   8851a:	e006      	b.n	8852a <cl_dprep_primecontroller+0x896>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8851c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88520:	4619      	mov	r1, r3
   88522:	2001      	movs	r0, #1
   88524:	4b2a      	ldr	r3, [pc, #168]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88526:	4798      	blx	r3
							break;
   88528:	bf00      	nop
						}
			break;
   8852a:	e047      	b.n	885bc <cl_dprep_primecontroller+0x928>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   8852c:	79fb      	ldrb	r3, [r7, #7]
   8852e:	3b08      	subs	r3, #8
   88530:	2b06      	cmp	r3, #6
   88532:	d85f      	bhi.n	885f4 <cl_dprep_primecontroller+0x960>
   88534:	a201      	add	r2, pc, #4	; (adr r2, 8853c <cl_dprep_primecontroller+0x8a8>)
   88536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8853a:	bf00      	nop
   8853c:	00088559 	.word	0x00088559
   88540:	00088581 	.word	0x00088581
   88544:	000885f5 	.word	0x000885f5
   88548:	000885f5 	.word	0x000885f5
   8854c:	00088589 	.word	0x00088589
   88550:	00088593 	.word	0x00088593
   88554:	0008859d 	.word	0x0008859d
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88558:	2100      	movs	r1, #0
   8855a:	2002      	movs	r0, #2
   8855c:	4b1c      	ldr	r3, [pc, #112]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8855e:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88560:	1d3b      	adds	r3, r7, #4
   88562:	2200      	movs	r2, #0
   88564:	4619      	mov	r1, r3
   88566:	2028      	movs	r0, #40	; 0x28
   88568:	4b16      	ldr	r3, [pc, #88]	; (885c4 <cl_dprep_primecontroller+0x930>)
   8856a:	4798      	blx	r3
   8856c:	4603      	mov	r3, r0
   8856e:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88570:	4b1b      	ldr	r3, [pc, #108]	; (885e0 <cl_dprep_primecontroller+0x94c>)
   88572:	4798      	blx	r3
   88574:	4603      	mov	r3, r0
   88576:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88578:	4b17      	ldr	r3, [pc, #92]	; (885d8 <cl_dprep_primecontroller+0x944>)
   8857a:	2209      	movs	r2, #9
   8857c:	701a      	strb	r2, [r3, #0]
							break;
   8857e:	e014      	b.n	885aa <cl_dprep_primecontroller+0x916>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88580:	4b15      	ldr	r3, [pc, #84]	; (885d8 <cl_dprep_primecontroller+0x944>)
   88582:	220b      	movs	r2, #11
   88584:	701a      	strb	r2, [r3, #0]
							break;
   88586:	e010      	b.n	885aa <cl_dprep_primecontroller+0x916>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88588:	2100      	movs	r1, #0
   8858a:	2002      	movs	r0, #2
   8858c:	4b10      	ldr	r3, [pc, #64]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   8858e:	4798      	blx	r3
							break;
   88590:	e00b      	b.n	885aa <cl_dprep_primecontroller+0x916>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88592:	2100      	movs	r1, #0
   88594:	2004      	movs	r0, #4
   88596:	4b0e      	ldr	r3, [pc, #56]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   88598:	4798      	blx	r3
							break;
   8859a:	e006      	b.n	885aa <cl_dprep_primecontroller+0x916>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8859c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   885a0:	4619      	mov	r1, r3
   885a2:	2001      	movs	r0, #1
   885a4:	4b0a      	ldr	r3, [pc, #40]	; (885d0 <cl_dprep_primecontroller+0x93c>)
   885a6:	4798      	blx	r3
							break;
   885a8:	bf00      	nop

						}
			break;
   885aa:	e023      	b.n	885f4 <cl_dprep_primecontroller+0x960>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   885ac:	bf00      	nop
   885ae:	e022      	b.n	885f6 <cl_dprep_primecontroller+0x962>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   885b0:	bf00      	nop
   885b2:	e020      	b.n	885f6 <cl_dprep_primecontroller+0x962>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   885b4:	bf00      	nop
   885b6:	e01e      	b.n	885f6 <cl_dprep_primecontroller+0x962>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   885b8:	bf00      	nop
   885ba:	e01c      	b.n	885f6 <cl_dprep_primecontroller+0x962>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   885bc:	bf00      	nop
   885be:	e01a      	b.n	885f6 <cl_dprep_primecontroller+0x962>
   885c0:	000a54b4 	.word	0x000a54b4
   885c4:	0009926d 	.word	0x0009926d
   885c8:	2007212f 	.word	0x2007212f
   885cc:	2007212e 	.word	0x2007212e
   885d0:	00091a75 	.word	0x00091a75
   885d4:	00088601 	.word	0x00088601
   885d8:	2007212c 	.word	0x2007212c
   885dc:	000a54ac 	.word	0x000a54ac
   885e0:	00088679 	.word	0x00088679
   885e4:	20072130 	.word	0x20072130
   885e8:	20072131 	.word	0x20072131
   885ec:	0009769d 	.word	0x0009769d
   885f0:	000976c5 	.word	0x000976c5
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   885f4:	bf00      	nop

		}
	

	
	return 0;
   885f6:	2300      	movs	r3, #0
}
   885f8:	4618      	mov	r0, r3
   885fa:	3710      	adds	r7, #16
   885fc:	46bd      	mov	sp, r7
   885fe:	bd80      	pop	{r7, pc}

00088600 <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   88600:	b580      	push	{r7, lr}
   88602:	b084      	sub	sp, #16
   88604:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88606:	2304      	movs	r3, #4
   88608:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8860a:	234d      	movs	r3, #77	; 0x4d
   8860c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   8860e:	1d3b      	adds	r3, r7, #4
   88610:	2200      	movs	r2, #0
   88612:	601a      	str	r2, [r3, #0]
   88614:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   88618:	230a      	movs	r3, #10
   8861a:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   8861c:	2302      	movs	r3, #2
   8861e:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   88620:	4b12      	ldr	r3, [pc, #72]	; (8866c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   88622:	f993 3000 	ldrsb.w	r3, [r3]
   88626:	b2db      	uxtb	r3, r3
   88628:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   8862a:	2300      	movs	r3, #0
   8862c:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   8862e:	4b10      	ldr	r3, [pc, #64]	; (88670 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x70>)
   88630:	f993 3000 	ldrsb.w	r3, [r3]
   88634:	b2db      	uxtb	r3, r3
   88636:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   88638:	4b0c      	ldr	r3, [pc, #48]	; (8866c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   8863a:	f993 3000 	ldrsb.w	r3, [r3]
   8863e:	b2db      	uxtb	r3, r3
   88640:	f1c3 0301 	rsb	r3, r3, #1
   88644:	b2db      	uxtb	r3, r3
   88646:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88648:	2300      	movs	r3, #0
   8864a:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   8864c:	2300      	movs	r3, #0
   8864e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88650:	1d39      	adds	r1, r7, #4
   88652:	7bbb      	ldrb	r3, [r7, #14]
   88654:	2207      	movs	r2, #7
   88656:	4618      	mov	r0, r3
   88658:	4b06      	ldr	r3, [pc, #24]	; (88674 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x74>)
   8865a:	4798      	blx	r3
   8865c:	4603      	mov	r3, r0
   8865e:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88660:	2300      	movs	r3, #0
}
   88662:	4618      	mov	r0, r3
   88664:	3710      	adds	r7, #16
   88666:	46bd      	mov	sp, r7
   88668:	bd80      	pop	{r7, pc}
   8866a:	bf00      	nop
   8866c:	2007212f 	.word	0x2007212f
   88670:	2007212e 	.word	0x2007212e
   88674:	0009926d 	.word	0x0009926d

00088678 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88678:	b580      	push	{r7, lr}
   8867a:	b084      	sub	sp, #16
   8867c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   8867e:	2304      	movs	r3, #4
   88680:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88682:	234d      	movs	r3, #77	; 0x4d
   88684:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88686:	1d3b      	adds	r3, r7, #4
   88688:	2200      	movs	r2, #0
   8868a:	601a      	str	r2, [r3, #0]
   8868c:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   88690:	230a      	movs	r3, #10
   88692:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   88694:	2303      	movs	r3, #3
   88696:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   88698:	4b12      	ldr	r3, [pc, #72]	; (886e4 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x6c>)
   8869a:	f993 3000 	ldrsb.w	r3, [r3]
   8869e:	b2db      	uxtb	r3, r3
   886a0:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   886a2:	2300      	movs	r3, #0
   886a4:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   886a6:	4b10      	ldr	r3, [pc, #64]	; (886e8 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x70>)
   886a8:	f993 3000 	ldrsb.w	r3, [r3]
   886ac:	b2db      	uxtb	r3, r3
   886ae:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   886b0:	4b0e      	ldr	r3, [pc, #56]	; (886ec <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x74>)
   886b2:	f993 3000 	ldrsb.w	r3, [r3]
   886b6:	b2db      	uxtb	r3, r3
   886b8:	f1c3 0301 	rsb	r3, r3, #1
   886bc:	b2db      	uxtb	r3, r3
   886be:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   886c0:	2300      	movs	r3, #0
   886c2:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   886c4:	2300      	movs	r3, #0
   886c6:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   886c8:	1d39      	adds	r1, r7, #4
   886ca:	7bbb      	ldrb	r3, [r7, #14]
   886cc:	2207      	movs	r2, #7
   886ce:	4618      	mov	r0, r3
   886d0:	4b07      	ldr	r3, [pc, #28]	; (886f0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   886d2:	4798      	blx	r3
   886d4:	4603      	mov	r3, r0
   886d6:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   886d8:	2300      	movs	r3, #0

}
   886da:	4618      	mov	r0, r3
   886dc:	3710      	adds	r7, #16
   886de:	46bd      	mov	sp, r7
   886e0:	bd80      	pop	{r7, pc}
   886e2:	bf00      	nop
   886e4:	20072131 	.word	0x20072131
   886e8:	20072130 	.word	0x20072130
   886ec:	2007212f 	.word	0x2007212f
   886f0:	0009926d 	.word	0x0009926d

000886f4 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   886f4:	b480      	push	{r7}
   886f6:	b083      	sub	sp, #12
   886f8:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   886fa:	2304      	movs	r3, #4
   886fc:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
	//		Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
	//		Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   886fe:	2300      	movs	r3, #0
}
   88700:	4618      	mov	r0, r3
   88702:	370c      	adds	r7, #12
   88704:	46bd      	mov	sp, r7
   88706:	bc80      	pop	{r7}
   88708:	4770      	bx	lr
   8870a:	bf00      	nop

0008870c <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   8870c:	b480      	push	{r7}
   8870e:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   88710:	2300      	movs	r3, #0
   88712:	4618      	mov	r0, r3
   88714:	46bd      	mov	sp, r7
   88716:	bc80      	pop	{r7}
   88718:	4770      	bx	lr
   8871a:	bf00      	nop

0008871c <cl_event_handler>:
extern volatile Cl_Uint32Type g_ul_ms_ticks ;
//extern Cl_ReturnCodeType cl_bp_event_handler(cl_bp_events bp_event );

static Cl_Uint32Type test_counter =0;
Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   8871c:	b580      	push	{r7, lr}
   8871e:	b084      	sub	sp, #16
   88720:	af00      	add	r7, sp, #0
   88722:	4603      	mov	r3, r0
   88724:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   88726:	79fb      	ldrb	r3, [r7, #7]
   88728:	3b0d      	subs	r3, #13
   8872a:	2b2f      	cmp	r3, #47	; 0x2f
   8872c:	f200 80dc 	bhi.w	888e8 <cl_event_handler+0x1cc>
   88730:	a201      	add	r2, pc, #4	; (adr r2, 88738 <cl_event_handler+0x1c>)
   88732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88736:	bf00      	nop
   88738:	000888df 	.word	0x000888df
   8873c:	000888df 	.word	0x000888df
   88740:	000888e9 	.word	0x000888e9
   88744:	000888e9 	.word	0x000888e9
   88748:	000888e9 	.word	0x000888e9
   8874c:	000888e9 	.word	0x000888e9
   88750:	000888e9 	.word	0x000888e9
   88754:	000888e9 	.word	0x000888e9
   88758:	000888e9 	.word	0x000888e9
   8875c:	000888e9 	.word	0x000888e9
   88760:	000888e9 	.word	0x000888e9
   88764:	000888e9 	.word	0x000888e9
   88768:	000888e9 	.word	0x000888e9
   8876c:	000888e9 	.word	0x000888e9
   88770:	000888e9 	.word	0x000888e9
   88774:	000888e9 	.word	0x000888e9
   88778:	000888e9 	.word	0x000888e9
   8877c:	000888e9 	.word	0x000888e9
   88780:	000888e9 	.word	0x000888e9
   88784:	000888e9 	.word	0x000888e9
   88788:	000888e9 	.word	0x000888e9
   8878c:	000888e9 	.word	0x000888e9
   88790:	000888e9 	.word	0x000888e9
   88794:	000888e9 	.word	0x000888e9
   88798:	000888e9 	.word	0x000888e9
   8879c:	000888e9 	.word	0x000888e9
   887a0:	000888e9 	.word	0x000888e9
   887a4:	000888e9 	.word	0x000888e9
   887a8:	000888e9 	.word	0x000888e9
   887ac:	000888e9 	.word	0x000888e9
   887b0:	000888e9 	.word	0x000888e9
   887b4:	000888e9 	.word	0x000888e9
   887b8:	000888e9 	.word	0x000888e9
   887bc:	000888e9 	.word	0x000888e9
   887c0:	000888d7 	.word	0x000888d7
   887c4:	000888e9 	.word	0x000888e9
   887c8:	000888e9 	.word	0x000888e9
   887cc:	000887f9 	.word	0x000887f9
   887d0:	000888e9 	.word	0x000888e9
   887d4:	000888e9 	.word	0x000888e9
   887d8:	000888e9 	.word	0x000888e9
   887dc:	000888e9 	.word	0x000888e9
   887e0:	00088807 	.word	0x00088807
   887e4:	0008880d 	.word	0x0008880d
   887e8:	00088815 	.word	0x00088815
   887ec:	00088827 	.word	0x00088827
   887f0:	0008884f 	.word	0x0008884f
   887f4:	000888cf 	.word	0x000888cf
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   887f8:	2004      	movs	r0, #4
   887fa:	4b3e      	ldr	r3, [pc, #248]	; (888f4 <cl_event_handler+0x1d8>)
   887fc:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   887fe:	2006      	movs	r0, #6
   88800:	4b3d      	ldr	r3, [pc, #244]	; (888f8 <cl_event_handler+0x1dc>)
   88802:	4798      	blx	r3

		//	sv_cs_setpotvalue(250);
		
		break;
   88804:	e071      	b.n	888ea <cl_event_handler+0x1ce>
		
		break;
		case EVT_TICK_20M:
		
				//cl_ufpumpFeedback_timer(); // commented for testing
				cl_hep_pumpFeedback_timer();
   88806:	4b3d      	ldr	r3, [pc, #244]	; (888fc <cl_event_handler+0x1e0>)
   88808:	4798      	blx	r3
//	toggle = false;
}
		
	
	
		break;		
   8880a:	e06e      	b.n	888ea <cl_event_handler+0x1ce>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   8880c:	2000      	movs	r0, #0
   8880e:	4b3c      	ldr	r3, [pc, #240]	; (88900 <cl_event_handler+0x1e4>)
   88810:	4798      	blx	r3
		}
		break;
   88812:	e06a      	b.n	888ea <cl_event_handler+0x1ce>
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);
   88814:	2001      	movs	r0, #1
   88816:	4b3b      	ldr	r3, [pc, #236]	; (88904 <cl_event_handler+0x1e8>)
   88818:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   8881a:	2001      	movs	r0, #1
   8881c:	4b3a      	ldr	r3, [pc, #232]	; (88908 <cl_event_handler+0x1ec>)
   8881e:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   88820:	4b3a      	ldr	r3, [pc, #232]	; (8890c <cl_event_handler+0x1f0>)
   88822:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   88824:	e061      	b.n	888ea <cl_event_handler+0x1ce>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   88826:	f04f 0100 	mov.w	r1, #0
   8882a:	2001      	movs	r0, #1
   8882c:	4b38      	ldr	r3, [pc, #224]	; (88910 <cl_event_handler+0x1f4>)
   8882e:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   88830:	2001      	movs	r0, #1
   88832:	4b33      	ldr	r3, [pc, #204]	; (88900 <cl_event_handler+0x1e4>)
   88834:	4798      	blx	r3
		if(  toggle_500)
   88836:	4b37      	ldr	r3, [pc, #220]	; (88914 <cl_event_handler+0x1f8>)
   88838:	781b      	ldrb	r3, [r3, #0]
   8883a:	2b00      	cmp	r3, #0
   8883c:	d003      	beq.n	88846 <cl_event_handler+0x12a>
		{
			toggle_500 = false;
   8883e:	4b35      	ldr	r3, [pc, #212]	; (88914 <cl_event_handler+0x1f8>)
   88840:	2200      	movs	r2, #0
   88842:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   88844:	e051      	b.n	888ea <cl_event_handler+0x1ce>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   88846:	4b33      	ldr	r3, [pc, #204]	; (88914 <cl_event_handler+0x1f8>)
   88848:	2201      	movs	r2, #1
   8884a:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   8884c:	e04d      	b.n	888ea <cl_event_handler+0x1ce>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   8884e:	2001      	movs	r0, #1
   88850:	4b28      	ldr	r3, [pc, #160]	; (888f4 <cl_event_handler+0x1d8>)
   88852:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   88854:	2003      	movs	r0, #3
   88856:	4b28      	ldr	r3, [pc, #160]	; (888f8 <cl_event_handler+0x1dc>)
   88858:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   8885a:	2100      	movs	r1, #0
   8885c:	200b      	movs	r0, #11
   8885e:	4b2e      	ldr	r3, [pc, #184]	; (88918 <cl_event_handler+0x1fc>)
   88860:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   88862:	2100      	movs	r1, #0
   88864:	200d      	movs	r0, #13
   88866:	4b2d      	ldr	r3, [pc, #180]	; (8891c <cl_event_handler+0x200>)
   88868:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   8886a:	2002      	movs	r0, #2
   8886c:	4b24      	ldr	r3, [pc, #144]	; (88900 <cl_event_handler+0x1e4>)
   8886e:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   88870:	f04f 0100 	mov.w	r1, #0
   88874:	2002      	movs	r0, #2
   88876:	4b26      	ldr	r3, [pc, #152]	; (88910 <cl_event_handler+0x1f4>)
   88878:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   8887a:	2002      	movs	r0, #2
   8887c:	4b28      	ldr	r3, [pc, #160]	; (88920 <cl_event_handler+0x204>)
   8887e:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   88880:	4b28      	ldr	r3, [pc, #160]	; (88924 <cl_event_handler+0x208>)
   88882:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   88884:	4b28      	ldr	r3, [pc, #160]	; (88928 <cl_event_handler+0x20c>)
   88886:	781b      	ldrb	r3, [r3, #0]
   88888:	3301      	adds	r3, #1
   8888a:	b2da      	uxtb	r2, r3
   8888c:	4b26      	ldr	r3, [pc, #152]	; (88928 <cl_event_handler+0x20c>)
   8888e:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   88890:	4b26      	ldr	r3, [pc, #152]	; (8892c <cl_event_handler+0x210>)
   88892:	781b      	ldrb	r3, [r3, #0]
   88894:	f083 0301 	eor.w	r3, r3, #1
   88898:	b2db      	uxtb	r3, r3
   8889a:	2b00      	cmp	r3, #0
   8889c:	d005      	beq.n	888aa <cl_event_handler+0x18e>
		{
		SV_CAN_READ_HEMO();
   8889e:	4b24      	ldr	r3, [pc, #144]	; (88930 <cl_event_handler+0x214>)
   888a0:	4798      	blx	r3
		
			toggle = true;
   888a2:	4b22      	ldr	r3, [pc, #136]	; (8892c <cl_event_handler+0x210>)
   888a4:	2201      	movs	r2, #1
   888a6:	701a      	strb	r2, [r3, #0]
   888a8:	e00b      	b.n	888c2 <cl_event_handler+0x1a6>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   888aa:	4b22      	ldr	r3, [pc, #136]	; (88934 <cl_event_handler+0x218>)
   888ac:	4798      	blx	r3
			toggle = false;
   888ae:	4b1f      	ldr	r3, [pc, #124]	; (8892c <cl_event_handler+0x210>)
   888b0:	2200      	movs	r2, #0
   888b2:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   888b4:	4b1c      	ldr	r3, [pc, #112]	; (88928 <cl_event_handler+0x20c>)
   888b6:	781b      	ldrb	r3, [r3, #0]
   888b8:	2b0a      	cmp	r3, #10
   888ba:	d102      	bne.n	888c2 <cl_event_handler+0x1a6>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   888bc:	4b1a      	ldr	r3, [pc, #104]	; (88928 <cl_event_handler+0x20c>)
   888be:	2200      	movs	r2, #0
   888c0:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   888c2:	4b1d      	ldr	r3, [pc, #116]	; (88938 <cl_event_handler+0x21c>)
   888c4:	681b      	ldr	r3, [r3, #0]
   888c6:	3301      	adds	r3, #1
   888c8:	4a1b      	ldr	r2, [pc, #108]	; (88938 <cl_event_handler+0x21c>)
   888ca:	6013      	str	r3, [r2, #0]
		}
		
		break;
   888cc:	e00d      	b.n	888ea <cl_event_handler+0x1ce>
		case EVT_TICK_MIN:
		{
			
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   888ce:	2002      	movs	r0, #2
   888d0:	4b0c      	ldr	r3, [pc, #48]	; (88904 <cl_event_handler+0x1e8>)
   888d2:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   888d4:	e009      	b.n	888ea <cl_event_handler+0x1ce>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   888d6:	2003      	movs	r0, #3
   888d8:	4b09      	ldr	r3, [pc, #36]	; (88900 <cl_event_handler+0x1e4>)
   888da:	4798      	blx	r3
		break;
   888dc:	e005      	b.n	888ea <cl_event_handler+0x1ce>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   888de:	79fb      	ldrb	r3, [r7, #7]
   888e0:	4618      	mov	r0, r3
   888e2:	4b16      	ldr	r3, [pc, #88]	; (8893c <cl_event_handler+0x220>)
   888e4:	4798      	blx	r3
		break;
   888e6:	e000      	b.n	888ea <cl_event_handler+0x1ce>
		default:
		break;
   888e8:	bf00      	nop
	}
	
	return 0;
   888ea:	2300      	movs	r3, #0
}
   888ec:	4618      	mov	r0, r3
   888ee:	3710      	adds	r7, #16
   888f0:	46bd      	mov	sp, r7
   888f2:	bd80      	pop	{r7, pc}
   888f4:	0009299d 	.word	0x0009299d
   888f8:	00091f6d 	.word	0x00091f6d
   888fc:	00092751 	.word	0x00092751
   88900:	00083379 	.word	0x00083379
   88904:	0008e669 	.word	0x0008e669
   88908:	0008e261 	.word	0x0008e261
   8890c:	00091cd9 	.word	0x00091cd9
   88910:	00088a01 	.word	0x00088a01
   88914:	20072138 	.word	0x20072138
   88918:	00087c95 	.word	0x00087c95
   8891c:	00092169 	.word	0x00092169
   88920:	0008e051 	.word	0x0008e051
   88924:	0008da0d 	.word	0x0008da0d
   88928:	20072139 	.word	0x20072139
   8892c:	2007213a 	.word	0x2007213a
   88930:	0009736d 	.word	0x0009736d
   88934:	000973a5 	.word	0x000973a5
   88938:	20072134 	.word	0x20072134
   8893c:	00084a81 	.word	0x00084a81

00088940 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   88940:	b5f0      	push	{r4, r5, r6, r7, lr}
   88942:	b083      	sub	sp, #12
   88944:	af00      	add	r7, sp, #0
   88946:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   88948:	4b25      	ldr	r3, [pc, #148]	; (889e0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8894a:	681a      	ldr	r2, [r3, #0]
   8894c:	4b25      	ldr	r3, [pc, #148]	; (889e4 <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8894e:	4610      	mov	r0, r2
   88950:	4798      	blx	r3
   88952:	4605      	mov	r5, r0
   88954:	460e      	mov	r6, r1
   88956:	4b24      	ldr	r3, [pc, #144]	; (889e8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88958:	681a      	ldr	r2, [r3, #0]
   8895a:	4b22      	ldr	r3, [pc, #136]	; (889e4 <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8895c:	4610      	mov	r0, r2
   8895e:	4798      	blx	r3
   88960:	4c22      	ldr	r4, [pc, #136]	; (889ec <Cl_Heater_GetHeaterStableStatus+0xac>)
   88962:	a31d      	add	r3, pc, #116	; (adr r3, 889d8 <Cl_Heater_GetHeaterStableStatus+0x98>)
   88964:	e9d3 2300 	ldrd	r2, r3, [r3]
   88968:	47a0      	blx	r4
   8896a:	4603      	mov	r3, r0
   8896c:	460c      	mov	r4, r1
   8896e:	461a      	mov	r2, r3
   88970:	4623      	mov	r3, r4
   88972:	4c1f      	ldr	r4, [pc, #124]	; (889f0 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   88974:	4628      	mov	r0, r5
   88976:	4631      	mov	r1, r6
   88978:	47a0      	blx	r4
   8897a:	4603      	mov	r3, r0
   8897c:	2b00      	cmp	r3, #0
   8897e:	d020      	beq.n	889c2 <Cl_Heater_GetHeaterStableStatus+0x82>
   88980:	4b17      	ldr	r3, [pc, #92]	; (889e0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   88982:	681a      	ldr	r2, [r3, #0]
   88984:	4b17      	ldr	r3, [pc, #92]	; (889e4 <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88986:	4610      	mov	r0, r2
   88988:	4798      	blx	r3
   8898a:	4605      	mov	r5, r0
   8898c:	460e      	mov	r6, r1
   8898e:	4b16      	ldr	r3, [pc, #88]	; (889e8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88990:	681a      	ldr	r2, [r3, #0]
   88992:	4b14      	ldr	r3, [pc, #80]	; (889e4 <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88994:	4610      	mov	r0, r2
   88996:	4798      	blx	r3
   88998:	4c16      	ldr	r4, [pc, #88]	; (889f4 <Cl_Heater_GetHeaterStableStatus+0xb4>)
   8899a:	a30f      	add	r3, pc, #60	; (adr r3, 889d8 <Cl_Heater_GetHeaterStableStatus+0x98>)
   8899c:	e9d3 2300 	ldrd	r2, r3, [r3]
   889a0:	47a0      	blx	r4
   889a2:	4603      	mov	r3, r0
   889a4:	460c      	mov	r4, r1
   889a6:	461a      	mov	r2, r3
   889a8:	4623      	mov	r3, r4
   889aa:	4c13      	ldr	r4, [pc, #76]	; (889f8 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   889ac:	4628      	mov	r0, r5
   889ae:	4631      	mov	r1, r6
   889b0:	47a0      	blx	r4
   889b2:	4603      	mov	r3, r0
   889b4:	2b00      	cmp	r3, #0
   889b6:	d004      	beq.n	889c2 <Cl_Heater_GetHeaterStableStatus+0x82>
	{
		*Stable =  cl_temp3_stable;
   889b8:	4b10      	ldr	r3, [pc, #64]	; (889fc <Cl_Heater_GetHeaterStableStatus+0xbc>)
   889ba:	781a      	ldrb	r2, [r3, #0]
   889bc:	687b      	ldr	r3, [r7, #4]
   889be:	701a      	strb	r2, [r3, #0]
   889c0:	e002      	b.n	889c8 <Cl_Heater_GetHeaterStableStatus+0x88>
	}
	else
	{
		*Stable =  false;
   889c2:	687b      	ldr	r3, [r7, #4]
   889c4:	2200      	movs	r2, #0
   889c6:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   889c8:	2300      	movs	r3, #0
}
   889ca:	4618      	mov	r0, r3
   889cc:	370c      	adds	r7, #12
   889ce:	46bd      	mov	sp, r7
   889d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   889d2:	bf00      	nop
   889d4:	f3af 8000 	nop.w
   889d8:	9999999a 	.word	0x9999999a
   889dc:	3fc99999 	.word	0x3fc99999
   889e0:	20072148 	.word	0x20072148
   889e4:	000a2b29 	.word	0x000a2b29
   889e8:	20070474 	.word	0x20070474
   889ec:	000a2869 	.word	0x000a2869
   889f0:	000a30f1 	.word	0x000a30f1
   889f4:	000a286d 	.word	0x000a286d
   889f8:	000a30b5 	.word	0x000a30b5
   889fc:	20072829 	.word	0x20072829

00088a00 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   88a00:	b580      	push	{r7, lr}
   88a02:	b084      	sub	sp, #16
   88a04:	af00      	add	r7, sp, #0
   88a06:	4603      	mov	r3, r0
   88a08:	6039      	str	r1, [r7, #0]
   88a0a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   88a0c:	2300      	movs	r3, #0
   88a0e:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   88a10:	f04f 0300 	mov.w	r3, #0
   88a14:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   88a16:	79fb      	ldrb	r3, [r7, #7]
   88a18:	2b03      	cmp	r3, #3
   88a1a:	d01e      	beq.n	88a5a <Cl_Heater_Event_Handler+0x5a>
   88a1c:	2b05      	cmp	r3, #5
   88a1e:	d010      	beq.n	88a42 <Cl_Heater_Event_Handler+0x42>
   88a20:	2b01      	cmp	r3, #1
   88a22:	d000      	beq.n	88a26 <Cl_Heater_Event_Handler+0x26>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
	break;
	default:break;
   88a24:	e020      	b.n	88a68 <Cl_Heater_Event_Handler+0x68>
{
	
	case CL_HEATER_EVENT_500MS:
										// maintaining coarse timer count, used in heater correction, for waiting temperature to stabilize.
//	UpdateHeaterControls();
		if (hotrinse_flag != 1)
   88a26:	4b13      	ldr	r3, [pc, #76]	; (88a74 <Cl_Heater_Event_Handler+0x74>)
   88a28:	781b      	ldrb	r3, [r3, #0]
   88a2a:	2b01      	cmp	r3, #1
   88a2c:	d002      	beq.n	88a34 <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   88a2e:	4b12      	ldr	r3, [pc, #72]	; (88a78 <Cl_Heater_Event_Handler+0x78>)
   88a30:	4798      	blx	r3
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a32:	e016      	b.n	88a62 <Cl_Heater_Event_Handler+0x62>
		if (hotrinse_flag != 1)
		{
			Heat_Correction();
		}
		
		else if (hotrinse_flag ==1)
   88a34:	4b0f      	ldr	r3, [pc, #60]	; (88a74 <Cl_Heater_Event_Handler+0x74>)
   88a36:	781b      	ldrb	r3, [r3, #0]
   88a38:	2b01      	cmp	r3, #1
   88a3a:	d112      	bne.n	88a62 <Cl_Heater_Event_Handler+0x62>
		{
			Hot_Rinse();
   88a3c:	4b0f      	ldr	r3, [pc, #60]	; (88a7c <Cl_Heater_Event_Handler+0x7c>)
   88a3e:	4798      	blx	r3
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a40:	e00f      	b.n	88a62 <Cl_Heater_Event_Handler+0x62>
	case CL_HEATER_EVENT_TARGET_TEMP:
	prescribed_temp = data;
   88a42:	4a0f      	ldr	r2, [pc, #60]	; (88a80 <Cl_Heater_Event_Handler+0x80>)
   88a44:	683b      	ldr	r3, [r7, #0]
   88a46:	6013      	str	r3, [r2, #0]
	if (hotrinse_flag == 1)
   88a48:	4b0a      	ldr	r3, [pc, #40]	; (88a74 <Cl_Heater_Event_Handler+0x74>)
   88a4a:	781b      	ldrb	r3, [r3, #0]
   88a4c:	2b01      	cmp	r3, #1
   88a4e:	d10a      	bne.n	88a66 <Cl_Heater_Event_Handler+0x66>
	{
		avg_duty = 4000;
   88a50:	4b0c      	ldr	r3, [pc, #48]	; (88a84 <Cl_Heater_Event_Handler+0x84>)
   88a52:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   88a56:	801a      	strh	r2, [r3, #0]
	}
 
	break;
   88a58:	e005      	b.n	88a66 <Cl_Heater_Event_Handler+0x66>
	case CL_HEATER_EVENT_ON:
// 	sec_clock  = 0;
// 	sec_clock_total = 0;
	cl_temp3_stable = false;
   88a5a:	4b0b      	ldr	r3, [pc, #44]	; (88a88 <Cl_Heater_Event_Handler+0x88>)
   88a5c:	2200      	movs	r2, #0
   88a5e:	701a      	strb	r2, [r3, #0]
	break;
   88a60:	e002      	b.n	88a68 <Cl_Heater_Event_Handler+0x68>
// 								
// 								temp3_cel_backup = avgtmp3_cel;
// 							}
							
							
	break;
   88a62:	bf00      	nop
   88a64:	e000      	b.n	88a68 <Cl_Heater_Event_Handler+0x68>
	if (hotrinse_flag == 1)
	{
		avg_duty = 4000;
	}
 
	break;
   88a66:	bf00      	nop
	cl_temp3_stable = false;
	break;
	default:break;
}
	
	return (Cl_heeater_retcode);
   88a68:	7bfb      	ldrb	r3, [r7, #15]
}
   88a6a:	4618      	mov	r0, r3
   88a6c:	3710      	adds	r7, #16
   88a6e:	46bd      	mov	sp, r7
   88a70:	bd80      	pop	{r7, pc}
   88a72:	bf00      	nop
   88a74:	20072881 	.word	0x20072881
   88a78:	00088ce9 	.word	0x00088ce9
   88a7c:	00089f91 	.word	0x00089f91
   88a80:	20070474 	.word	0x20070474
   88a84:	2007213e 	.word	0x2007213e
   88a88:	20072829 	.word	0x20072829

00088a8c <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   88a8c:	b580      	push	{r7, lr}
   88a8e:	b084      	sub	sp, #16
   88a90:	af00      	add	r7, sp, #0
   88a92:	4603      	mov	r3, r0
   88a94:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   88a96:	2300      	movs	r3, #0
   88a98:	73fb      	strb	r3, [r7, #15]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   88a9a:	4b73      	ldr	r3, [pc, #460]	; (88c68 <SetHeaterState+0x1dc>)
   88a9c:	781a      	ldrb	r2, [r3, #0]
   88a9e:	4b73      	ldr	r3, [pc, #460]	; (88c6c <SetHeaterState+0x1e0>)
   88aa0:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   88aa2:	4a71      	ldr	r2, [pc, #452]	; (88c68 <SetHeaterState+0x1dc>)
   88aa4:	79fb      	ldrb	r3, [r7, #7]
   88aa6:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   88aa8:	79fb      	ldrb	r3, [r7, #7]
   88aaa:	2b04      	cmp	r3, #4
   88aac:	d104      	bne.n	88ab8 <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   88aae:	4b70      	ldr	r3, [pc, #448]	; (88c70 <SetHeaterState+0x1e4>)
   88ab0:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   88ab2:	4b70      	ldr	r3, [pc, #448]	; (88c74 <SetHeaterState+0x1e8>)
   88ab4:	2200      	movs	r2, #0
   88ab6:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   88ab8:	79fb      	ldrb	r3, [r7, #7]
   88aba:	2b01      	cmp	r3, #1
   88abc:	d105      	bne.n	88aca <SetHeaterState+0x3e>
	{
// 				sec_clock  = 0;
// 				sec_clock_total = 0;
				cl_temp3_stable = false;
   88abe:	4b6e      	ldr	r3, [pc, #440]	; (88c78 <SetHeaterState+0x1ec>)
   88ac0:	2200      	movs	r2, #0
   88ac2:	701a      	strb	r2, [r3, #0]
				heater_substate = CL_HEATER_SUBSTATE_OFF;
   88ac4:	4b6b      	ldr	r3, [pc, #428]	; (88c74 <SetHeaterState+0x1e8>)
   88ac6:	2200      	movs	r2, #0
   88ac8:	701a      	strb	r2, [r3, #0]
	}	

		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   88aca:	f107 030c 	add.w	r3, r7, #12
   88ace:	4619      	mov	r1, r3
   88ad0:	2012      	movs	r0, #18
   88ad2:	4b6a      	ldr	r3, [pc, #424]	; (88c7c <SetHeaterState+0x1f0>)
   88ad4:	4798      	blx	r3

		if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   88ad6:	79fb      	ldrb	r3, [r7, #7]
   88ad8:	2b02      	cmp	r3, #2
   88ada:	d06b      	beq.n	88bb4 <SetHeaterState+0x128>
   88adc:	79fb      	ldrb	r3, [r7, #7]
   88ade:	2b03      	cmp	r3, #3
   88ae0:	d068      	beq.n	88bb4 <SetHeaterState+0x128>
// 		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
// 		res_temp_lookuptable(cal_data);
// 		Tmp1Val = res_temp_value/10;
// //		 Tmp1Val = Tmp1Val - 2.5 + 1.2 +0.25;
// 	//	 initial_temp1 = Tmp1Val;
		Tmp1Val = (float)sensordata /10;
   88ae2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   88ae6:	4b66      	ldr	r3, [pc, #408]	; (88c80 <SetHeaterState+0x1f4>)
   88ae8:	4610      	mov	r0, r2
   88aea:	4798      	blx	r3
   88aec:	4602      	mov	r2, r0
   88aee:	4b65      	ldr	r3, [pc, #404]	; (88c84 <SetHeaterState+0x1f8>)
   88af0:	4965      	ldr	r1, [pc, #404]	; (88c88 <SetHeaterState+0x1fc>)
   88af2:	4610      	mov	r0, r2
   88af4:	4798      	blx	r3
   88af6:	4603      	mov	r3, r0
   88af8:	461a      	mov	r2, r3
   88afa:	4b64      	ldr	r3, [pc, #400]	; (88c8c <SetHeaterState+0x200>)
   88afc:	601a      	str	r2, [r3, #0]
		 
	//	 avg_duty  = -84.24 * initial_temp1 + 5298;

 	//	 avg_duty = 2500;
	 
 SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   88afe:	4b64      	ldr	r3, [pc, #400]	; (88c90 <SetHeaterState+0x204>)
   88b00:	695b      	ldr	r3, [r3, #20]
   88b02:	4a64      	ldr	r2, [pc, #400]	; (88c94 <SetHeaterState+0x208>)
   88b04:	6013      	str	r3, [r2, #0]
 Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   88b06:	4b62      	ldr	r3, [pc, #392]	; (88c90 <SetHeaterState+0x204>)
   88b08:	699b      	ldr	r3, [r3, #24]
   88b0a:	4a63      	ldr	r2, [pc, #396]	; (88c98 <SetHeaterState+0x20c>)
   88b0c:	fba2 2303 	umull	r2, r3, r2, r3
   88b10:	08da      	lsrs	r2, r3, #3
   88b12:	4b62      	ldr	r3, [pc, #392]	; (88c9c <SetHeaterState+0x210>)
   88b14:	4610      	mov	r0, r2
   88b16:	4798      	blx	r3
   88b18:	4602      	mov	r2, r0
   88b1a:	4b61      	ldr	r3, [pc, #388]	; (88ca0 <SetHeaterState+0x214>)
   88b1c:	601a      	str	r2, [r3, #0]
 
//			  SYSTEM_FLOW = 300;					// Gopal: this shouldnot be hard coded... Flow rate from UI should be loaded to SYSTEM FLOW
	//	  Treatdata[ID_dflow] = 300; 
		  
		  if (hotrinse_flag == 1)
   88b1e:	4b61      	ldr	r3, [pc, #388]	; (88ca4 <SetHeaterState+0x218>)
   88b20:	781b      	ldrb	r3, [r3, #0]
   88b22:	2b01      	cmp	r3, #1
   88b24:	d103      	bne.n	88b2e <SetHeaterState+0xa2>
		  {
			  avg_duty = 4000;
   88b26:	4b60      	ldr	r3, [pc, #384]	; (88ca8 <SetHeaterState+0x21c>)
   88b28:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   88b2c:	801a      	strh	r2, [r3, #0]
		  }
		  
		  if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   88b2e:	4b59      	ldr	r3, [pc, #356]	; (88c94 <SetHeaterState+0x208>)
   88b30:	681b      	ldr	r3, [r3, #0]
   88b32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   88b36:	d113      	bne.n	88b60 <SetHeaterState+0xd4>
		  {
			  avg_duty = 2300;
   88b38:	4b5b      	ldr	r3, [pc, #364]	; (88ca8 <SetHeaterState+0x21c>)
   88b3a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   88b3e:	801a      	strh	r2, [r3, #0]
			 
			  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   88b40:	4b5a      	ldr	r3, [pc, #360]	; (88cac <SetHeaterState+0x220>)
   88b42:	22f0      	movs	r2, #240	; 0xf0
   88b44:	801a      	strh	r2, [r3, #0]
			  wait_4_stability = WAIT_4_TS3STABILITY_300;
   88b46:	4b5a      	ldr	r3, [pc, #360]	; (88cb0 <SetHeaterState+0x224>)
   88b48:	2278      	movs	r2, #120	; 0x78
   88b4a:	801a      	strh	r2, [r3, #0]
			  post_stability_count = TS2_STABILITY_COUNT_300;
   88b4c:	4b59      	ldr	r3, [pc, #356]	; (88cb4 <SetHeaterState+0x228>)
   88b4e:	221e      	movs	r2, #30
   88b50:	801a      	strh	r2, [r3, #0]
			  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   88b52:	4b59      	ldr	r3, [pc, #356]	; (88cb8 <SetHeaterState+0x22c>)
   88b54:	223c      	movs	r2, #60	; 0x3c
   88b56:	801a      	strh	r2, [r3, #0]
			  Prescribed_T2 = PRESCRIBED_TS2_300;
   88b58:	4b58      	ldr	r3, [pc, #352]	; (88cbc <SetHeaterState+0x230>)
   88b5a:	4a59      	ldr	r2, [pc, #356]	; (88cc0 <SetHeaterState+0x234>)
   88b5c:	601a      	str	r2, [r3, #0]
   88b5e:	e024      	b.n	88baa <SetHeaterState+0x11e>
		  }
		  else if (SYSTEM_FLOW == 500)
   88b60:	4b4c      	ldr	r3, [pc, #304]	; (88c94 <SetHeaterState+0x208>)
   88b62:	681b      	ldr	r3, [r3, #0]
   88b64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   88b68:	d11f      	bne.n	88baa <SetHeaterState+0x11e>
		  {
			  avg_duty = 2300;
   88b6a:	4b4f      	ldr	r3, [pc, #316]	; (88ca8 <SetHeaterState+0x21c>)
   88b6c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   88b70:	801a      	strh	r2, [r3, #0]
			  if (Tmp1Val <= 26)
   88b72:	4b46      	ldr	r3, [pc, #280]	; (88c8c <SetHeaterState+0x200>)
   88b74:	681a      	ldr	r2, [r3, #0]
   88b76:	4b53      	ldr	r3, [pc, #332]	; (88cc4 <SetHeaterState+0x238>)
   88b78:	4953      	ldr	r1, [pc, #332]	; (88cc8 <SetHeaterState+0x23c>)
   88b7a:	4610      	mov	r0, r2
   88b7c:	4798      	blx	r3
   88b7e:	4603      	mov	r3, r0
   88b80:	2b00      	cmp	r3, #0
   88b82:	d003      	beq.n	88b8c <SetHeaterState+0x100>
			  {
				  avg_duty = 2400;
   88b84:	4b48      	ldr	r3, [pc, #288]	; (88ca8 <SetHeaterState+0x21c>)
   88b86:	f44f 6216 	mov.w	r2, #2400	; 0x960
   88b8a:	801a      	strh	r2, [r3, #0]
			  }
			  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   88b8c:	4b47      	ldr	r3, [pc, #284]	; (88cac <SetHeaterState+0x220>)
   88b8e:	22b4      	movs	r2, #180	; 0xb4
   88b90:	801a      	strh	r2, [r3, #0]
			  wait_4_stability = WAIT_4_STABILITY_500;
   88b92:	4b47      	ldr	r3, [pc, #284]	; (88cb0 <SetHeaterState+0x224>)
   88b94:	22b4      	movs	r2, #180	; 0xb4
   88b96:	801a      	strh	r2, [r3, #0]
			  post_stability_count =  TS2_STABILITY_COUNT_500;
   88b98:	4b46      	ldr	r3, [pc, #280]	; (88cb4 <SetHeaterState+0x228>)
   88b9a:	221e      	movs	r2, #30
   88b9c:	801a      	strh	r2, [r3, #0]
			  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   88b9e:	4b46      	ldr	r3, [pc, #280]	; (88cb8 <SetHeaterState+0x22c>)
   88ba0:	223c      	movs	r2, #60	; 0x3c
   88ba2:	801a      	strh	r2, [r3, #0]
			  Prescribed_T2 = PRESCRIBED_TS2_500;
   88ba4:	4b45      	ldr	r3, [pc, #276]	; (88cbc <SetHeaterState+0x230>)
   88ba6:	4a49      	ldr	r2, [pc, #292]	; (88ccc <SetHeaterState+0x240>)
   88ba8:	601a      	str	r2, [r3, #0]
			  
		  }
		 //avg_duty_bak = avg_duty;
		 
		 avg_duty = avg_duty ;
   88baa:	4b3f      	ldr	r3, [pc, #252]	; (88ca8 <SetHeaterState+0x21c>)
   88bac:	f9b3 2000 	ldrsh.w	r2, [r3]
   88bb0:	4b3d      	ldr	r3, [pc, #244]	; (88ca8 <SetHeaterState+0x21c>)
   88bb2:	801a      	strh	r2, [r3, #0]
		 
		}

		 
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   88bb4:	f107 030c 	add.w	r3, r7, #12
   88bb8:	4619      	mov	r1, r3
   88bba:	2012      	movs	r0, #18
   88bbc:	4b2f      	ldr	r3, [pc, #188]	; (88c7c <SetHeaterState+0x1f0>)
   88bbe:	4798      	blx	r3
// 		 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
// 		 			res_temp_lookuptable(cal_data);
// 		 			 Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// //					 Tmp1Val = Tmp1Val - 2.5 + 1.2 +0.25;
// 			//		initial_temp1 = Tmp1Val;
					Tmp1Val = (float)sensordata /100;
   88bc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   88bc4:	4b2e      	ldr	r3, [pc, #184]	; (88c80 <SetHeaterState+0x1f4>)
   88bc6:	4610      	mov	r0, r2
   88bc8:	4798      	blx	r3
   88bca:	4602      	mov	r2, r0
   88bcc:	4b2d      	ldr	r3, [pc, #180]	; (88c84 <SetHeaterState+0x1f8>)
   88bce:	4940      	ldr	r1, [pc, #256]	; (88cd0 <SetHeaterState+0x244>)
   88bd0:	4610      	mov	r0, r2
   88bd2:	4798      	blx	r3
   88bd4:	4603      	mov	r3, r0
   88bd6:	461a      	mov	r2, r3
   88bd8:	4b2c      	ldr	r3, [pc, #176]	; (88c8c <SetHeaterState+0x200>)
   88bda:	601a      	str	r2, [r3, #0]
			 }
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   88bdc:	f107 030c 	add.w	r3, r7, #12
   88be0:	4619      	mov	r1, r3
   88be2:	2013      	movs	r0, #19
   88be4:	4b25      	ldr	r3, [pc, #148]	; (88c7c <SetHeaterState+0x1f0>)
   88be6:	4798      	blx	r3
// 				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
// 				 res_temp_lookuptable(cal_data);
// 				  Tmp2Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// //				  Tmp2Val = Tmp2Val - 2.5 + 1.2;
// 				  Tmp2Val = Tmp2Val - 0.4;
				Tmp2Val = (float)sensordata /100;
   88be8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   88bec:	4b24      	ldr	r3, [pc, #144]	; (88c80 <SetHeaterState+0x1f4>)
   88bee:	4610      	mov	r0, r2
   88bf0:	4798      	blx	r3
   88bf2:	4602      	mov	r2, r0
   88bf4:	4b23      	ldr	r3, [pc, #140]	; (88c84 <SetHeaterState+0x1f8>)
   88bf6:	4936      	ldr	r1, [pc, #216]	; (88cd0 <SetHeaterState+0x244>)
   88bf8:	4610      	mov	r0, r2
   88bfa:	4798      	blx	r3
   88bfc:	4603      	mov	r3, r0
   88bfe:	461a      	mov	r2, r3
   88c00:	4b34      	ldr	r3, [pc, #208]	; (88cd4 <SetHeaterState+0x248>)
   88c02:	601a      	str	r2, [r3, #0]
				 prev_temp2val = Tmp2Val;
   88c04:	4b33      	ldr	r3, [pc, #204]	; (88cd4 <SetHeaterState+0x248>)
   88c06:	681a      	ldr	r2, [r3, #0]
   88c08:	4b33      	ldr	r3, [pc, #204]	; (88cd8 <SetHeaterState+0x24c>)
   88c0a:	4610      	mov	r0, r2
   88c0c:	4798      	blx	r3
   88c0e:	4603      	mov	r3, r0
   88c10:	b21a      	sxth	r2, r3
   88c12:	4b32      	ldr	r3, [pc, #200]	; (88cdc <SetHeaterState+0x250>)
   88c14:	801a      	strh	r2, [r3, #0]
			 }
		 	
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   88c16:	f107 030c 	add.w	r3, r7, #12
   88c1a:	4619      	mov	r1, r3
   88c1c:	2014      	movs	r0, #20
   88c1e:	4b17      	ldr	r3, [pc, #92]	; (88c7c <SetHeaterState+0x1f0>)
   88c20:	4798      	blx	r3
// 				 uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
// 				 res_temp_lookuptable(cal_data);
// 				 Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //				 Tmp3Val = Tmp3Val - 3.1 + 1.4;
// 				 Tmp3Val = Tmp3Val - - 0.4;
				Tmp3Val = (float)sensordata /100;
   88c22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   88c26:	4b16      	ldr	r3, [pc, #88]	; (88c80 <SetHeaterState+0x1f4>)
   88c28:	4610      	mov	r0, r2
   88c2a:	4798      	blx	r3
   88c2c:	4602      	mov	r2, r0
   88c2e:	4b15      	ldr	r3, [pc, #84]	; (88c84 <SetHeaterState+0x1f8>)
   88c30:	4927      	ldr	r1, [pc, #156]	; (88cd0 <SetHeaterState+0x244>)
   88c32:	4610      	mov	r0, r2
   88c34:	4798      	blx	r3
   88c36:	4603      	mov	r3, r0
   88c38:	461a      	mov	r2, r3
   88c3a:	4b29      	ldr	r3, [pc, #164]	; (88ce0 <SetHeaterState+0x254>)
   88c3c:	601a      	str	r2, [r3, #0]
				 prev_temp3val = Tmp3Val;
   88c3e:	4b28      	ldr	r3, [pc, #160]	; (88ce0 <SetHeaterState+0x254>)
   88c40:	681a      	ldr	r2, [r3, #0]
   88c42:	4b25      	ldr	r3, [pc, #148]	; (88cd8 <SetHeaterState+0x24c>)
   88c44:	4610      	mov	r0, r2
   88c46:	4798      	blx	r3
   88c48:	4603      	mov	r3, r0
   88c4a:	b21a      	sxth	r2, r3
   88c4c:	4b25      	ldr	r3, [pc, #148]	; (88ce4 <SetHeaterState+0x258>)
   88c4e:	801a      	strh	r2, [r3, #0]
			 }
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   88c50:	4b05      	ldr	r3, [pc, #20]	; (88c68 <SetHeaterState+0x1dc>)
   88c52:	781b      	ldrb	r3, [r3, #0]
   88c54:	2b06      	cmp	r3, #6
   88c56:	d102      	bne.n	88c5e <SetHeaterState+0x1d2>
	{
		//stable_avg_dty = avg_duty;
		avg_duty = 100;
   88c58:	4b13      	ldr	r3, [pc, #76]	; (88ca8 <SetHeaterState+0x21c>)
   88c5a:	2264      	movs	r2, #100	; 0x64
   88c5c:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   88c5e:	7bfb      	ldrb	r3, [r7, #15]
}
   88c60:	4618      	mov	r0, r3
   88c62:	3710      	adds	r7, #16
   88c64:	46bd      	mov	sp, r7
   88c66:	bd80      	pop	{r7, pc}
   88c68:	2007213b 	.word	0x2007213b
   88c6c:	2007213c 	.word	0x2007213c
   88c70:	000974dd 	.word	0x000974dd
   88c74:	20072140 	.word	0x20072140
   88c78:	20072829 	.word	0x20072829
   88c7c:	0008d61d 	.word	0x0008d61d
   88c80:	000a33a9 	.word	0x000a33a9
   88c84:	000a35b9 	.word	0x000a35b9
   88c88:	41200000 	.word	0x41200000
   88c8c:	2007214c 	.word	0x2007214c
   88c90:	20073194 	.word	0x20073194
   88c94:	20070484 	.word	0x20070484
   88c98:	cccccccd 	.word	0xcccccccd
   88c9c:	000a33a1 	.word	0x000a33a1
   88ca0:	20070480 	.word	0x20070480
   88ca4:	20072881 	.word	0x20072881
   88ca8:	2007213e 	.word	0x2007213e
   88cac:	20070478 	.word	0x20070478
   88cb0:	2007047a 	.word	0x2007047a
   88cb4:	20072160 	.word	0x20072160
   88cb8:	20072162 	.word	0x20072162
   88cbc:	2007047c 	.word	0x2007047c
   88cc0:	42200000 	.word	0x42200000
   88cc4:	000a37a1 	.word	0x000a37a1
   88cc8:	41d00000 	.word	0x41d00000
   88ccc:	42140000 	.word	0x42140000
   88cd0:	42c80000 	.word	0x42c80000
   88cd4:	20072150 	.word	0x20072150
   88cd8:	000a37dd 	.word	0x000a37dd
   88cdc:	20072142 	.word	0x20072142
   88ce0:	20072154 	.word	0x20072154
   88ce4:	20072144 	.word	0x20072144

00088ce8 <Heat_Correction>:

int16_t Heat_Correction()
{
   88ce8:	b590      	push	{r4, r7, lr}
   88cea:	b083      	sub	sp, #12
   88cec:	af00      	add	r7, sp, #0
	count_500ms ++;
   88cee:	4b17      	ldr	r3, [pc, #92]	; (88d4c <Heat_Correction+0x64>)
   88cf0:	881b      	ldrh	r3, [r3, #0]
   88cf2:	3301      	adds	r3, #1
   88cf4:	b29a      	uxth	r2, r3
   88cf6:	4b15      	ldr	r3, [pc, #84]	; (88d4c <Heat_Correction+0x64>)
   88cf8:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   88cfa:	4b15      	ldr	r3, [pc, #84]	; (88d50 <Heat_Correction+0x68>)
   88cfc:	881b      	ldrh	r3, [r3, #0]
   88cfe:	3301      	adds	r3, #1
   88d00:	b29a      	uxth	r2, r3
   88d02:	4b13      	ldr	r3, [pc, #76]	; (88d50 <Heat_Correction+0x68>)
   88d04:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   88d06:	4b13      	ldr	r3, [pc, #76]	; (88d54 <Heat_Correction+0x6c>)
   88d08:	881b      	ldrh	r3, [r3, #0]
   88d0a:	3301      	adds	r3, #1
   88d0c:	b29a      	uxth	r2, r3
   88d0e:	4b11      	ldr	r3, [pc, #68]	; (88d54 <Heat_Correction+0x6c>)
   88d10:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   88d12:	4b0e      	ldr	r3, [pc, #56]	; (88d4c <Heat_Correction+0x64>)
   88d14:	881b      	ldrh	r3, [r3, #0]
   88d16:	4a10      	ldr	r2, [pc, #64]	; (88d58 <Heat_Correction+0x70>)
   88d18:	fba2 1203 	umull	r1, r2, r2, r3
   88d1c:	0992      	lsrs	r2, r2, #6
   88d1e:	f44f 7116 	mov.w	r1, #600	; 0x258
   88d22:	fb01 f202 	mul.w	r2, r1, r2
   88d26:	1a9b      	subs	r3, r3, r2
   88d28:	b29b      	uxth	r3, r3
   88d2a:	2b00      	cmp	r3, #0
   88d2c:	d107      	bne.n	88d3e <Heat_Correction+0x56>
	{
		Past_TS2 = Tmp2Val;
   88d2e:	4b0b      	ldr	r3, [pc, #44]	; (88d5c <Heat_Correction+0x74>)
   88d30:	681b      	ldr	r3, [r3, #0]
   88d32:	4a0b      	ldr	r2, [pc, #44]	; (88d60 <Heat_Correction+0x78>)
   88d34:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   88d36:	4b05      	ldr	r3, [pc, #20]	; (88d4c <Heat_Correction+0x64>)
   88d38:	881a      	ldrh	r2, [r3, #0]
   88d3a:	4b0a      	ldr	r3, [pc, #40]	; (88d64 <Heat_Correction+0x7c>)
   88d3c:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   88d3e:	4b0a      	ldr	r3, [pc, #40]	; (88d68 <Heat_Correction+0x80>)
   88d40:	781b      	ldrb	r3, [r3, #0]
   88d42:	2b04      	cmp	r3, #4
   88d44:	d114      	bne.n	88d70 <Heat_Correction+0x88>
	{
		sv_cntrl_poweroffheater();
   88d46:	4b09      	ldr	r3, [pc, #36]	; (88d6c <Heat_Correction+0x84>)
   88d48:	4798      	blx	r3
		return;
   88d4a:	e1eb      	b.n	89124 <Heat_Correction+0x43c>
   88d4c:	20072158 	.word	0x20072158
   88d50:	2007215a 	.word	0x2007215a
   88d54:	2007215c 	.word	0x2007215c
   88d58:	1b4e81b5 	.word	0x1b4e81b5
   88d5c:	20072150 	.word	0x20072150
   88d60:	20072168 	.word	0x20072168
   88d64:	2007215e 	.word	0x2007215e
   88d68:	2007213b 	.word	0x2007213b
   88d6c:	000974dd 	.word	0x000974dd
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   88d70:	4b83      	ldr	r3, [pc, #524]	; (88f80 <Heat_Correction+0x298>)
   88d72:	781b      	ldrb	r3, [r3, #0]
   88d74:	2b00      	cmp	r3, #0
   88d76:	f000 81d4 	beq.w	89122 <Heat_Correction+0x43a>
   88d7a:	4b81      	ldr	r3, [pc, #516]	; (88f80 <Heat_Correction+0x298>)
   88d7c:	781b      	ldrb	r3, [r3, #0]
   88d7e:	2b00      	cmp	r3, #0
   88d80:	f000 81cf 	beq.w	89122 <Heat_Correction+0x43a>
	}
//avg_duty is set to value 2240 for TS3 = 37.4 at global level
    
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   88d84:	4b7e      	ldr	r3, [pc, #504]	; (88f80 <Heat_Correction+0x298>)
   88d86:	781b      	ldrb	r3, [r3, #0]
   88d88:	2b01      	cmp	r3, #1
   88d8a:	d007      	beq.n	88d9c <Heat_Correction+0xb4>
   88d8c:	4b7c      	ldr	r3, [pc, #496]	; (88f80 <Heat_Correction+0x298>)
   88d8e:	781b      	ldrb	r3, [r3, #0]
   88d90:	2b02      	cmp	r3, #2
   88d92:	d003      	beq.n	88d9c <Heat_Correction+0xb4>
   88d94:	4b7a      	ldr	r3, [pc, #488]	; (88f80 <Heat_Correction+0x298>)
   88d96:	781b      	ldrb	r3, [r3, #0]
   88d98:	2b03      	cmp	r3, #3
   88d9a:	d107      	bne.n	88dac <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   88d9c:	4b79      	ldr	r3, [pc, #484]	; (88f84 <Heat_Correction+0x29c>)
   88d9e:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   88da0:	4b79      	ldr	r3, [pc, #484]	; (88f88 <Heat_Correction+0x2a0>)
   88da2:	f9b3 3000 	ldrsh.w	r3, [r3]
   88da6:	4618      	mov	r0, r3
   88da8:	4b78      	ldr	r3, [pc, #480]	; (88f8c <Heat_Correction+0x2a4>)
   88daa:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   88dac:	1dbb      	adds	r3, r7, #6
   88dae:	4619      	mov	r1, r3
   88db0:	2012      	movs	r0, #18
   88db2:	4b77      	ldr	r3, [pc, #476]	; (88f90 <Heat_Correction+0x2a8>)
   88db4:	4798      	blx	r3
	{
// 	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);             // resistance of PT100
// 	 	res_temp_lookuptable(cal_data);                                    // temperature from look up table in 4 digits
// 	 	Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// //		Tmp1Val = Tmp1Val - 2.5 + 1.2 +0.25; 
		Tmp1Val = (float)sensordata /100;
   88db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   88dba:	4b76      	ldr	r3, [pc, #472]	; (88f94 <Heat_Correction+0x2ac>)
   88dbc:	4610      	mov	r0, r2
   88dbe:	4798      	blx	r3
   88dc0:	4602      	mov	r2, r0
   88dc2:	4b75      	ldr	r3, [pc, #468]	; (88f98 <Heat_Correction+0x2b0>)
   88dc4:	4975      	ldr	r1, [pc, #468]	; (88f9c <Heat_Correction+0x2b4>)
   88dc6:	4610      	mov	r0, r2
   88dc8:	4798      	blx	r3
   88dca:	4603      	mov	r3, r0
   88dcc:	461a      	mov	r2, r3
   88dce:	4b74      	ldr	r3, [pc, #464]	; (88fa0 <Heat_Correction+0x2b8>)
   88dd0:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   88dd2:	4b74      	ldr	r3, [pc, #464]	; (88fa4 <Heat_Correction+0x2bc>)
   88dd4:	881a      	ldrh	r2, [r3, #0]
   88dd6:	4b74      	ldr	r3, [pc, #464]	; (88fa8 <Heat_Correction+0x2c0>)
   88dd8:	fba3 1302 	umull	r1, r3, r3, r2
   88ddc:	0959      	lsrs	r1, r3, #5
   88dde:	460b      	mov	r3, r1
   88de0:	009b      	lsls	r3, r3, #2
   88de2:	440b      	add	r3, r1
   88de4:	00db      	lsls	r3, r3, #3
   88de6:	1ad3      	subs	r3, r2, r3
   88de8:	b29b      	uxth	r3, r3
   88dea:	2b00      	cmp	r3, #0
   88dec:	d103      	bne.n	88df6 <Heat_Correction+0x10e>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   88dee:	4b6f      	ldr	r3, [pc, #444]	; (88fac <Heat_Correction+0x2c4>)
   88df0:	681b      	ldr	r3, [r3, #0]
   88df2:	4a6f      	ldr	r2, [pc, #444]	; (88fb0 <Heat_Correction+0x2c8>)
   88df4:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   88df6:	1dbb      	adds	r3, r7, #6
   88df8:	4619      	mov	r1, r3
   88dfa:	2013      	movs	r0, #19
   88dfc:	4b64      	ldr	r3, [pc, #400]	; (88f90 <Heat_Correction+0x2a8>)
   88dfe:	4798      	blx	r3
// 		uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 		res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 		Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// //		Tmp2Val = Tmp2Val - 2.5 + 1.2;                                     // sensor offset
// 		Tmp2Val = Tmp2Val - - 0.4 ;                                     // sensor offset
		Tmp2Val = (float)sensordata /100;
   88e00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   88e04:	4b63      	ldr	r3, [pc, #396]	; (88f94 <Heat_Correction+0x2ac>)
   88e06:	4610      	mov	r0, r2
   88e08:	4798      	blx	r3
   88e0a:	4602      	mov	r2, r0
   88e0c:	4b62      	ldr	r3, [pc, #392]	; (88f98 <Heat_Correction+0x2b0>)
   88e0e:	4963      	ldr	r1, [pc, #396]	; (88f9c <Heat_Correction+0x2b4>)
   88e10:	4610      	mov	r0, r2
   88e12:	4798      	blx	r3
   88e14:	4603      	mov	r3, r0
   88e16:	461a      	mov	r2, r3
   88e18:	4b64      	ldr	r3, [pc, #400]	; (88fac <Heat_Correction+0x2c4>)
   88e1a:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   88e1c:	4b61      	ldr	r3, [pc, #388]	; (88fa4 <Heat_Correction+0x2bc>)
   88e1e:	881a      	ldrh	r2, [r3, #0]
   88e20:	4b61      	ldr	r3, [pc, #388]	; (88fa8 <Heat_Correction+0x2c0>)
   88e22:	fba3 1302 	umull	r1, r3, r3, r2
   88e26:	0919      	lsrs	r1, r3, #4
   88e28:	460b      	mov	r3, r1
   88e2a:	009b      	lsls	r3, r3, #2
   88e2c:	440b      	add	r3, r1
   88e2e:	009b      	lsls	r3, r3, #2
   88e30:	1ad3      	subs	r3, r2, r3
   88e32:	b29b      	uxth	r3, r3
   88e34:	2b00      	cmp	r3, #0
   88e36:	d103      	bne.n	88e40 <Heat_Correction+0x158>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   88e38:	4b5e      	ldr	r3, [pc, #376]	; (88fb4 <Heat_Correction+0x2cc>)
   88e3a:	681b      	ldr	r3, [r3, #0]
   88e3c:	4a5e      	ldr	r2, [pc, #376]	; (88fb8 <Heat_Correction+0x2d0>)
   88e3e:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   88e40:	1dbb      	adds	r3, r7, #6
   88e42:	4619      	mov	r1, r3
   88e44:	2014      	movs	r0, #20
   88e46:	4b52      	ldr	r3, [pc, #328]	; (88f90 <Heat_Correction+0x2a8>)
   88e48:	4798      	blx	r3
// 	 	uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 	 	res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 	 	Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //	 	Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 		Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
		Tmp3Val = (float)sensordata /100;
   88e4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   88e4e:	4b51      	ldr	r3, [pc, #324]	; (88f94 <Heat_Correction+0x2ac>)
   88e50:	4610      	mov	r0, r2
   88e52:	4798      	blx	r3
   88e54:	4602      	mov	r2, r0
   88e56:	4b50      	ldr	r3, [pc, #320]	; (88f98 <Heat_Correction+0x2b0>)
   88e58:	4950      	ldr	r1, [pc, #320]	; (88f9c <Heat_Correction+0x2b4>)
   88e5a:	4610      	mov	r0, r2
   88e5c:	4798      	blx	r3
   88e5e:	4603      	mov	r3, r0
   88e60:	461a      	mov	r2, r3
   88e62:	4b54      	ldr	r3, [pc, #336]	; (88fb4 <Heat_Correction+0x2cc>)
   88e64:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   88e66:	4b55      	ldr	r3, [pc, #340]	; (88fbc <Heat_Correction+0x2d4>)
   88e68:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   88e6a:	4b55      	ldr	r3, [pc, #340]	; (88fc0 <Heat_Correction+0x2d8>)
   88e6c:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   88e6e:	4b55      	ldr	r3, [pc, #340]	; (88fc4 <Heat_Correction+0x2dc>)
   88e70:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   88e72:	4b55      	ldr	r3, [pc, #340]	; (88fc8 <Heat_Correction+0x2e0>)
   88e74:	4798      	blx	r3
   88e76:	4603      	mov	r3, r0
   88e78:	461a      	mov	r2, r3
   88e7a:	4b54      	ldr	r3, [pc, #336]	; (88fcc <Heat_Correction+0x2e4>)
   88e7c:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 500)
   88e7e:	4b54      	ldr	r3, [pc, #336]	; (88fd0 <Heat_Correction+0x2e8>)
   88e80:	681b      	ldr	r3, [r3, #0]
   88e82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   88e86:	d122      	bne.n	88ece <Heat_Correction+0x1e6>
	{
		if ((Tmp2Val >=37.5)  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   88e88:	4b48      	ldr	r3, [pc, #288]	; (88fac <Heat_Correction+0x2c4>)
   88e8a:	681a      	ldr	r2, [r3, #0]
   88e8c:	4b51      	ldr	r3, [pc, #324]	; (88fd4 <Heat_Correction+0x2ec>)
   88e8e:	4952      	ldr	r1, [pc, #328]	; (88fd8 <Heat_Correction+0x2f0>)
   88e90:	4610      	mov	r0, r2
   88e92:	4798      	blx	r3
   88e94:	4603      	mov	r3, r0
   88e96:	2b00      	cmp	r3, #0
   88e98:	d019      	beq.n	88ece <Heat_Correction+0x1e6>
   88e9a:	4b46      	ldr	r3, [pc, #280]	; (88fb4 <Heat_Correction+0x2cc>)
   88e9c:	681a      	ldr	r2, [r3, #0]
   88e9e:	4b4f      	ldr	r3, [pc, #316]	; (88fdc <Heat_Correction+0x2f4>)
   88ea0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   88ea4:	4610      	mov	r0, r2
   88ea6:	4798      	blx	r3
   88ea8:	4603      	mov	r3, r0
   88eaa:	2b00      	cmp	r3, #0
   88eac:	d00f      	beq.n	88ece <Heat_Correction+0x1e6>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   88eae:	4b3d      	ldr	r3, [pc, #244]	; (88fa4 <Heat_Correction+0x2bc>)
   88eb0:	881a      	ldrh	r2, [r3, #0]
   88eb2:	4b3d      	ldr	r3, [pc, #244]	; (88fa8 <Heat_Correction+0x2c0>)
   88eb4:	fba3 1302 	umull	r1, r3, r3, r2
   88eb8:	0919      	lsrs	r1, r3, #4
   88eba:	460b      	mov	r3, r1
   88ebc:	009b      	lsls	r3, r3, #2
   88ebe:	440b      	add	r3, r1
   88ec0:	009b      	lsls	r3, r3, #2
   88ec2:	1ad3      	subs	r3, r2, r3
   88ec4:	b29b      	uxth	r3, r3
   88ec6:	2b00      	cmp	r3, #0
   88ec8:	d101      	bne.n	88ece <Heat_Correction+0x1e6>
			{
				Coarse_DutyCorrection();
   88eca:	4b45      	ldr	r3, [pc, #276]	; (88fe0 <Heat_Correction+0x2f8>)
   88ecc:	4798      	blx	r3
			}
			
		}
	}
	
	if (SYSTEM_FLOW == 300)
   88ece:	4b40      	ldr	r3, [pc, #256]	; (88fd0 <Heat_Correction+0x2e8>)
   88ed0:	681b      	ldr	r3, [r3, #0]
   88ed2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   88ed6:	d122      	bne.n	88f1e <Heat_Correction+0x236>
	{
		if ((Tmp2Val >=40.5)  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   88ed8:	4b34      	ldr	r3, [pc, #208]	; (88fac <Heat_Correction+0x2c4>)
   88eda:	681a      	ldr	r2, [r3, #0]
   88edc:	4b3d      	ldr	r3, [pc, #244]	; (88fd4 <Heat_Correction+0x2ec>)
   88ede:	4941      	ldr	r1, [pc, #260]	; (88fe4 <Heat_Correction+0x2fc>)
   88ee0:	4610      	mov	r0, r2
   88ee2:	4798      	blx	r3
   88ee4:	4603      	mov	r3, r0
   88ee6:	2b00      	cmp	r3, #0
   88ee8:	d019      	beq.n	88f1e <Heat_Correction+0x236>
   88eea:	4b32      	ldr	r3, [pc, #200]	; (88fb4 <Heat_Correction+0x2cc>)
   88eec:	681a      	ldr	r2, [r3, #0]
   88eee:	4b3b      	ldr	r3, [pc, #236]	; (88fdc <Heat_Correction+0x2f4>)
   88ef0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   88ef4:	4610      	mov	r0, r2
   88ef6:	4798      	blx	r3
   88ef8:	4603      	mov	r3, r0
   88efa:	2b00      	cmp	r3, #0
   88efc:	d00f      	beq.n	88f1e <Heat_Correction+0x236>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   88efe:	4b29      	ldr	r3, [pc, #164]	; (88fa4 <Heat_Correction+0x2bc>)
   88f00:	881a      	ldrh	r2, [r3, #0]
   88f02:	4b29      	ldr	r3, [pc, #164]	; (88fa8 <Heat_Correction+0x2c0>)
   88f04:	fba3 1302 	umull	r1, r3, r3, r2
   88f08:	0919      	lsrs	r1, r3, #4
   88f0a:	460b      	mov	r3, r1
   88f0c:	009b      	lsls	r3, r3, #2
   88f0e:	440b      	add	r3, r1
   88f10:	009b      	lsls	r3, r3, #2
   88f12:	1ad3      	subs	r3, r2, r3
   88f14:	b29b      	uxth	r3, r3
   88f16:	2b00      	cmp	r3, #0
   88f18:	d101      	bne.n	88f1e <Heat_Correction+0x236>
			{
				Coarse_DutyCorrection();
   88f1a:	4b31      	ldr	r3, [pc, #196]	; (88fe0 <Heat_Correction+0x2f8>)
   88f1c:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   88f1e:	4b2c      	ldr	r3, [pc, #176]	; (88fd0 <Heat_Correction+0x2e8>)
   88f20:	681b      	ldr	r3, [r3, #0]
   88f22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   88f26:	f040 8099 	bne.w	8905c <Heat_Correction+0x374>
	{
		
	if(TS2_Stable)
   88f2a:	4b28      	ldr	r3, [pc, #160]	; (88fcc <Heat_Correction+0x2e4>)
   88f2c:	781b      	ldrb	r3, [r3, #0]
   88f2e:	2b00      	cmp	r3, #0
   88f30:	f000 8094 	beq.w	8905c <Heat_Correction+0x374>
	{
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   88f34:	4b1d      	ldr	r3, [pc, #116]	; (88fac <Heat_Correction+0x2c4>)
   88f36:	681a      	ldr	r2, [r3, #0]
   88f38:	4b2b      	ldr	r3, [pc, #172]	; (88fe8 <Heat_Correction+0x300>)
   88f3a:	6819      	ldr	r1, [r3, #0]
   88f3c:	4b2b      	ldr	r3, [pc, #172]	; (88fec <Heat_Correction+0x304>)
   88f3e:	4610      	mov	r0, r2
   88f40:	4798      	blx	r3
   88f42:	4603      	mov	r3, r0
   88f44:	461a      	mov	r2, r3
   88f46:	4b2a      	ldr	r3, [pc, #168]	; (88ff0 <Heat_Correction+0x308>)
   88f48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   88f4c:	4610      	mov	r0, r2
   88f4e:	4798      	blx	r3
   88f50:	4603      	mov	r3, r0
   88f52:	2b00      	cmp	r3, #0
   88f54:	d110      	bne.n	88f78 <Heat_Correction+0x290>
   88f56:	4b24      	ldr	r3, [pc, #144]	; (88fe8 <Heat_Correction+0x300>)
   88f58:	681a      	ldr	r2, [r3, #0]
   88f5a:	4b14      	ldr	r3, [pc, #80]	; (88fac <Heat_Correction+0x2c4>)
   88f5c:	6819      	ldr	r1, [r3, #0]
   88f5e:	4b23      	ldr	r3, [pc, #140]	; (88fec <Heat_Correction+0x304>)
   88f60:	4610      	mov	r0, r2
   88f62:	4798      	blx	r3
   88f64:	4603      	mov	r3, r0
   88f66:	461a      	mov	r2, r3
   88f68:	4b21      	ldr	r3, [pc, #132]	; (88ff0 <Heat_Correction+0x308>)
   88f6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   88f6e:	4610      	mov	r0, r2
   88f70:	4798      	blx	r3
   88f72:	4603      	mov	r3, r0
   88f74:	2b00      	cmp	r3, #0
   88f76:	d03d      	beq.n	88ff4 <Heat_Correction+0x30c>
		{
			Coarse_DutyCorrection(); 
   88f78:	4b19      	ldr	r3, [pc, #100]	; (88fe0 <Heat_Correction+0x2f8>)
   88f7a:	4798      	blx	r3
   88f7c:	e06e      	b.n	8905c <Heat_Correction+0x374>
   88f7e:	bf00      	nop
   88f80:	2007213b 	.word	0x2007213b
   88f84:	000974c9 	.word	0x000974c9
   88f88:	2007213e 	.word	0x2007213e
   88f8c:	000975d1 	.word	0x000975d1
   88f90:	0008d61d 	.word	0x0008d61d
   88f94:	000a33a9 	.word	0x000a33a9
   88f98:	000a35b9 	.word	0x000a35b9
   88f9c:	42c80000 	.word	0x42c80000
   88fa0:	2007214c 	.word	0x2007214c
   88fa4:	20072158 	.word	0x20072158
   88fa8:	cccccccd 	.word	0xcccccccd
   88fac:	20072150 	.word	0x20072150
   88fb0:	20072164 	.word	0x20072164
   88fb4:	20072154 	.word	0x20072154
   88fb8:	20072d7c 	.word	0x20072d7c
   88fbc:	00089ee1 	.word	0x00089ee1
   88fc0:	000892d1 	.word	0x000892d1
   88fc4:	00089339 	.word	0x00089339
   88fc8:	00089171 	.word	0x00089171
   88fcc:	20072d80 	.word	0x20072d80
   88fd0:	20070484 	.word	0x20070484
   88fd4:	000a37b5 	.word	0x000a37b5
   88fd8:	42160000 	.word	0x42160000
   88fdc:	000a37a1 	.word	0x000a37a1
   88fe0:	000893d9 	.word	0x000893d9
   88fe4:	42220000 	.word	0x42220000
   88fe8:	2007047c 	.word	0x2007047c
   88fec:	000a323d 	.word	0x000a323d
   88ff0:	000a37c9 	.word	0x000a37c9
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   88ff4:	4b50      	ldr	r3, [pc, #320]	; (89138 <Heat_Correction+0x450>)
   88ff6:	4798      	blx	r3
   88ff8:	4603      	mov	r3, r0
   88ffa:	461a      	mov	r2, r3
   88ffc:	4b4f      	ldr	r3, [pc, #316]	; (8913c <Heat_Correction+0x454>)
   88ffe:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89000:	4b4e      	ldr	r3, [pc, #312]	; (8913c <Heat_Correction+0x454>)
   89002:	781b      	ldrb	r3, [r3, #0]
   89004:	2b00      	cmp	r3, #0
   89006:	d029      	beq.n	8905c <Heat_Correction+0x374>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89008:	4b4d      	ldr	r3, [pc, #308]	; (89140 <Heat_Correction+0x458>)
   8900a:	681a      	ldr	r2, [r3, #0]
   8900c:	4b4d      	ldr	r3, [pc, #308]	; (89144 <Heat_Correction+0x45c>)
   8900e:	6819      	ldr	r1, [r3, #0]
   89010:	4b4d      	ldr	r3, [pc, #308]	; (89148 <Heat_Correction+0x460>)
   89012:	4610      	mov	r0, r2
   89014:	4798      	blx	r3
   89016:	4603      	mov	r3, r0
   89018:	461a      	mov	r2, r3
   8901a:	4b4c      	ldr	r3, [pc, #304]	; (8914c <Heat_Correction+0x464>)
   8901c:	4610      	mov	r0, r2
   8901e:	4798      	blx	r3
   89020:	4c4b      	ldr	r4, [pc, #300]	; (89150 <Heat_Correction+0x468>)
   89022:	a343      	add	r3, pc, #268	; (adr r3, 89130 <Heat_Correction+0x448>)
   89024:	e9d3 2300 	ldrd	r2, r3, [r3]
   89028:	47a0      	blx	r4
   8902a:	4603      	mov	r3, r0
   8902c:	2b00      	cmp	r3, #0
   8902e:	d113      	bne.n	89058 <Heat_Correction+0x370>
   89030:	4b44      	ldr	r3, [pc, #272]	; (89144 <Heat_Correction+0x45c>)
   89032:	681a      	ldr	r2, [r3, #0]
   89034:	4b42      	ldr	r3, [pc, #264]	; (89140 <Heat_Correction+0x458>)
   89036:	6819      	ldr	r1, [r3, #0]
   89038:	4b43      	ldr	r3, [pc, #268]	; (89148 <Heat_Correction+0x460>)
   8903a:	4610      	mov	r0, r2
   8903c:	4798      	blx	r3
   8903e:	4603      	mov	r3, r0
   89040:	461a      	mov	r2, r3
   89042:	4b42      	ldr	r3, [pc, #264]	; (8914c <Heat_Correction+0x464>)
   89044:	4610      	mov	r0, r2
   89046:	4798      	blx	r3
   89048:	4c41      	ldr	r4, [pc, #260]	; (89150 <Heat_Correction+0x468>)
   8904a:	a339      	add	r3, pc, #228	; (adr r3, 89130 <Heat_Correction+0x448>)
   8904c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89050:	47a0      	blx	r4
   89052:	4603      	mov	r3, r0
   89054:	2b00      	cmp	r3, #0
   89056:	d001      	beq.n	8905c <Heat_Correction+0x374>
			      Fine_DutyCorrection();
   89058:	4b3e      	ldr	r3, [pc, #248]	; (89154 <Heat_Correction+0x46c>)
   8905a:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	}	
	}
	
	if (SYSTEM_FLOW == 500)
   8905c:	4b3e      	ldr	r3, [pc, #248]	; (89158 <Heat_Correction+0x470>)
   8905e:	681b      	ldr	r3, [r3, #0]
   89060:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89064:	d15e      	bne.n	89124 <Heat_Correction+0x43c>
	{
		
			if(TS2_Stable)
   89066:	4b3d      	ldr	r3, [pc, #244]	; (8915c <Heat_Correction+0x474>)
   89068:	781b      	ldrb	r3, [r3, #0]
   8906a:	2b00      	cmp	r3, #0
   8906c:	d05a      	beq.n	89124 <Heat_Correction+0x43c>
	{
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   8906e:	4b3c      	ldr	r3, [pc, #240]	; (89160 <Heat_Correction+0x478>)
   89070:	681a      	ldr	r2, [r3, #0]
   89072:	4b3c      	ldr	r3, [pc, #240]	; (89164 <Heat_Correction+0x47c>)
   89074:	6819      	ldr	r1, [r3, #0]
   89076:	4b34      	ldr	r3, [pc, #208]	; (89148 <Heat_Correction+0x460>)
   89078:	4610      	mov	r0, r2
   8907a:	4798      	blx	r3
   8907c:	4603      	mov	r3, r0
   8907e:	461a      	mov	r2, r3
   89080:	4b39      	ldr	r3, [pc, #228]	; (89168 <Heat_Correction+0x480>)
   89082:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89086:	4610      	mov	r0, r2
   89088:	4798      	blx	r3
   8908a:	4603      	mov	r3, r0
   8908c:	2b00      	cmp	r3, #0
   8908e:	d110      	bne.n	890b2 <Heat_Correction+0x3ca>
   89090:	4b34      	ldr	r3, [pc, #208]	; (89164 <Heat_Correction+0x47c>)
   89092:	681a      	ldr	r2, [r3, #0]
   89094:	4b32      	ldr	r3, [pc, #200]	; (89160 <Heat_Correction+0x478>)
   89096:	6819      	ldr	r1, [r3, #0]
   89098:	4b2b      	ldr	r3, [pc, #172]	; (89148 <Heat_Correction+0x460>)
   8909a:	4610      	mov	r0, r2
   8909c:	4798      	blx	r3
   8909e:	4603      	mov	r3, r0
   890a0:	461a      	mov	r2, r3
   890a2:	4b31      	ldr	r3, [pc, #196]	; (89168 <Heat_Correction+0x480>)
   890a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   890a8:	4610      	mov	r0, r2
   890aa:	4798      	blx	r3
   890ac:	4603      	mov	r3, r0
   890ae:	2b00      	cmp	r3, #0
   890b0:	d002      	beq.n	890b8 <Heat_Correction+0x3d0>
		{
			Coarse_DutyCorrection(); 
   890b2:	4b2e      	ldr	r3, [pc, #184]	; (8916c <Heat_Correction+0x484>)
   890b4:	4798      	blx	r3
   890b6:	e035      	b.n	89124 <Heat_Correction+0x43c>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   890b8:	4b1f      	ldr	r3, [pc, #124]	; (89138 <Heat_Correction+0x450>)
   890ba:	4798      	blx	r3
   890bc:	4603      	mov	r3, r0
   890be:	461a      	mov	r2, r3
   890c0:	4b1e      	ldr	r3, [pc, #120]	; (8913c <Heat_Correction+0x454>)
   890c2:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   890c4:	4b1d      	ldr	r3, [pc, #116]	; (8913c <Heat_Correction+0x454>)
   890c6:	781b      	ldrb	r3, [r3, #0]
   890c8:	2b00      	cmp	r3, #0
   890ca:	d02b      	beq.n	89124 <Heat_Correction+0x43c>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   890cc:	4b1c      	ldr	r3, [pc, #112]	; (89140 <Heat_Correction+0x458>)
   890ce:	681a      	ldr	r2, [r3, #0]
   890d0:	4b1c      	ldr	r3, [pc, #112]	; (89144 <Heat_Correction+0x45c>)
   890d2:	6819      	ldr	r1, [r3, #0]
   890d4:	4b1c      	ldr	r3, [pc, #112]	; (89148 <Heat_Correction+0x460>)
   890d6:	4610      	mov	r0, r2
   890d8:	4798      	blx	r3
   890da:	4603      	mov	r3, r0
   890dc:	461a      	mov	r2, r3
   890de:	4b1b      	ldr	r3, [pc, #108]	; (8914c <Heat_Correction+0x464>)
   890e0:	4610      	mov	r0, r2
   890e2:	4798      	blx	r3
   890e4:	4c1a      	ldr	r4, [pc, #104]	; (89150 <Heat_Correction+0x468>)
   890e6:	a312      	add	r3, pc, #72	; (adr r3, 89130 <Heat_Correction+0x448>)
   890e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   890ec:	47a0      	blx	r4
   890ee:	4603      	mov	r3, r0
   890f0:	2b00      	cmp	r3, #0
   890f2:	d113      	bne.n	8911c <Heat_Correction+0x434>
   890f4:	4b13      	ldr	r3, [pc, #76]	; (89144 <Heat_Correction+0x45c>)
   890f6:	681a      	ldr	r2, [r3, #0]
   890f8:	4b11      	ldr	r3, [pc, #68]	; (89140 <Heat_Correction+0x458>)
   890fa:	6819      	ldr	r1, [r3, #0]
   890fc:	4b12      	ldr	r3, [pc, #72]	; (89148 <Heat_Correction+0x460>)
   890fe:	4610      	mov	r0, r2
   89100:	4798      	blx	r3
   89102:	4603      	mov	r3, r0
   89104:	461a      	mov	r2, r3
   89106:	4b11      	ldr	r3, [pc, #68]	; (8914c <Heat_Correction+0x464>)
   89108:	4610      	mov	r0, r2
   8910a:	4798      	blx	r3
   8910c:	4c10      	ldr	r4, [pc, #64]	; (89150 <Heat_Correction+0x468>)
   8910e:	a308      	add	r3, pc, #32	; (adr r3, 89130 <Heat_Correction+0x448>)
   89110:	e9d3 2300 	ldrd	r2, r3, [r3]
   89114:	47a0      	blx	r4
   89116:	4603      	mov	r3, r0
   89118:	2b00      	cmp	r3, #0
   8911a:	d003      	beq.n	89124 <Heat_Correction+0x43c>
			      Fine_DutyCorrection();
   8911c:	4b0d      	ldr	r3, [pc, #52]	; (89154 <Heat_Correction+0x46c>)
   8911e:	4798      	blx	r3
   89120:	e000      	b.n	89124 <Heat_Correction+0x43c>
		sv_cntrl_poweroffheater();
		return;
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
	{
		return;
   89122:	bf00      	nop
	  // Same avg_duty is being applied, no change till stability not achieved
	}	
	}
	

}
   89124:	4618      	mov	r0, r3
   89126:	370c      	adds	r7, #12
   89128:	46bd      	mov	sp, r7
   8912a:	bd90      	pop	{r4, r7, pc}
   8912c:	f3af 8000 	nop.w
   89130:	9999999a 	.word	0x9999999a
   89134:	3fb99999 	.word	0x3fb99999
   89138:	00089221 	.word	0x00089221
   8913c:	20072d89 	.word	0x20072d89
   89140:	20072154 	.word	0x20072154
   89144:	20070480 	.word	0x20070480
   89148:	000a323d 	.word	0x000a323d
   8914c:	000a2b29 	.word	0x000a2b29
   89150:	000a30f1 	.word	0x000a30f1
   89154:	000898e9 	.word	0x000898e9
   89158:	20070484 	.word	0x20070484
   8915c:	20072d80 	.word	0x20072d80
   89160:	20072150 	.word	0x20072150
   89164:	2007047c 	.word	0x2007047c
   89168:	000a37c9 	.word	0x000a37c9
   8916c:	000893d9 	.word	0x000893d9

00089170 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89170:	b580      	push	{r7, lr}
   89172:	b082      	sub	sp, #8
   89174:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89176:	2300      	movs	r3, #0
   89178:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   8917a:	4b21      	ldr	r3, [pc, #132]	; (89200 <Check_4_TS2_Stable+0x90>)
   8917c:	881a      	ldrh	r2, [r3, #0]
   8917e:	4b21      	ldr	r3, [pc, #132]	; (89204 <Check_4_TS2_Stable+0x94>)
   89180:	881b      	ldrh	r3, [r3, #0]
   89182:	429a      	cmp	r2, r3
   89184:	d337      	bcc.n	891f6 <Check_4_TS2_Stable+0x86>
	// TS2 is not increasing sharply
	{
		if (Tmp2Val_prev == Tmp2Val)
   89186:	4b20      	ldr	r3, [pc, #128]	; (89208 <Check_4_TS2_Stable+0x98>)
   89188:	681a      	ldr	r2, [r3, #0]
   8918a:	4b20      	ldr	r3, [pc, #128]	; (8920c <Check_4_TS2_Stable+0x9c>)
   8918c:	6819      	ldr	r1, [r3, #0]
   8918e:	4b20      	ldr	r3, [pc, #128]	; (89210 <Check_4_TS2_Stable+0xa0>)
   89190:	4610      	mov	r0, r2
   89192:	4798      	blx	r3
   89194:	4603      	mov	r3, r0
   89196:	2b00      	cmp	r3, #0
   89198:	d002      	beq.n	891a0 <Check_4_TS2_Stable+0x30>
		{
			ts2_stable = true;
   8919a:	2301      	movs	r3, #1
   8919c:	71fb      	strb	r3, [r7, #7]
   8919e:	e023      	b.n	891e8 <Check_4_TS2_Stable+0x78>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   891a0:	4b1a      	ldr	r3, [pc, #104]	; (8920c <Check_4_TS2_Stable+0x9c>)
   891a2:	681a      	ldr	r2, [r3, #0]
   891a4:	4b18      	ldr	r3, [pc, #96]	; (89208 <Check_4_TS2_Stable+0x98>)
   891a6:	6819      	ldr	r1, [r3, #0]
   891a8:	4b1a      	ldr	r3, [pc, #104]	; (89214 <Check_4_TS2_Stable+0xa4>)
   891aa:	4610      	mov	r0, r2
   891ac:	4798      	blx	r3
   891ae:	4603      	mov	r3, r0
   891b0:	461a      	mov	r2, r3
   891b2:	4b19      	ldr	r3, [pc, #100]	; (89218 <Check_4_TS2_Stable+0xa8>)
   891b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   891b8:	4610      	mov	r0, r2
   891ba:	4798      	blx	r3
   891bc:	4603      	mov	r3, r0
   891be:	2b00      	cmp	r3, #0
   891c0:	d110      	bne.n	891e4 <Check_4_TS2_Stable+0x74>
   891c2:	4b11      	ldr	r3, [pc, #68]	; (89208 <Check_4_TS2_Stable+0x98>)
   891c4:	681a      	ldr	r2, [r3, #0]
   891c6:	4b11      	ldr	r3, [pc, #68]	; (8920c <Check_4_TS2_Stable+0x9c>)
   891c8:	6819      	ldr	r1, [r3, #0]
   891ca:	4b12      	ldr	r3, [pc, #72]	; (89214 <Check_4_TS2_Stable+0xa4>)
   891cc:	4610      	mov	r0, r2
   891ce:	4798      	blx	r3
   891d0:	4603      	mov	r3, r0
   891d2:	461a      	mov	r2, r3
   891d4:	4b10      	ldr	r3, [pc, #64]	; (89218 <Check_4_TS2_Stable+0xa8>)
   891d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   891da:	4610      	mov	r0, r2
   891dc:	4798      	blx	r3
   891de:	4603      	mov	r3, r0
   891e0:	2b00      	cmp	r3, #0
   891e2:	d001      	beq.n	891e8 <Check_4_TS2_Stable+0x78>
		{
			ts2_stable = true;
   891e4:	2301      	movs	r3, #1
   891e6:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   891e8:	4b0c      	ldr	r3, [pc, #48]	; (8921c <Check_4_TS2_Stable+0xac>)
   891ea:	881a      	ldrh	r2, [r3, #0]
   891ec:	4b05      	ldr	r3, [pc, #20]	; (89204 <Check_4_TS2_Stable+0x94>)
   891ee:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   891f0:	4b03      	ldr	r3, [pc, #12]	; (89200 <Check_4_TS2_Stable+0x90>)
   891f2:	2200      	movs	r2, #0
   891f4:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   891f6:	79fb      	ldrb	r3, [r7, #7]
}
   891f8:	4618      	mov	r0, r3
   891fa:	3708      	adds	r7, #8
   891fc:	46bd      	mov	sp, r7
   891fe:	bd80      	pop	{r7, pc}
   89200:	2007215c 	.word	0x2007215c
   89204:	20070478 	.word	0x20070478
   89208:	20072164 	.word	0x20072164
   8920c:	20072150 	.word	0x20072150
   89210:	000a3779 	.word	0x000a3779
   89214:	000a323d 	.word	0x000a323d
   89218:	000a37a1 	.word	0x000a37a1
   8921c:	20072160 	.word	0x20072160

00089220 <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   89220:	b580      	push	{r7, lr}
   89222:	b082      	sub	sp, #8
   89224:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89226:	2300      	movs	r3, #0
   89228:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   8922a:	4b21      	ldr	r3, [pc, #132]	; (892b0 <Check_4_TS3_Stable+0x90>)
   8922c:	881a      	ldrh	r2, [r3, #0]
   8922e:	4b21      	ldr	r3, [pc, #132]	; (892b4 <Check_4_TS3_Stable+0x94>)
   89230:	881b      	ldrh	r3, [r3, #0]
   89232:	429a      	cmp	r2, r3
   89234:	d337      	bcc.n	892a6 <Check_4_TS3_Stable+0x86>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89236:	4b20      	ldr	r3, [pc, #128]	; (892b8 <Check_4_TS3_Stable+0x98>)
   89238:	681a      	ldr	r2, [r3, #0]
   8923a:	4b20      	ldr	r3, [pc, #128]	; (892bc <Check_4_TS3_Stable+0x9c>)
   8923c:	6819      	ldr	r1, [r3, #0]
   8923e:	4b20      	ldr	r3, [pc, #128]	; (892c0 <Check_4_TS3_Stable+0xa0>)
   89240:	4610      	mov	r0, r2
   89242:	4798      	blx	r3
   89244:	4603      	mov	r3, r0
   89246:	2b00      	cmp	r3, #0
   89248:	d002      	beq.n	89250 <Check_4_TS3_Stable+0x30>
		{
			ts3_stable = true;
   8924a:	2301      	movs	r3, #1
   8924c:	71fb      	strb	r3, [r7, #7]
   8924e:	e023      	b.n	89298 <Check_4_TS3_Stable+0x78>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   89250:	4b1a      	ldr	r3, [pc, #104]	; (892bc <Check_4_TS3_Stable+0x9c>)
   89252:	681a      	ldr	r2, [r3, #0]
   89254:	4b18      	ldr	r3, [pc, #96]	; (892b8 <Check_4_TS3_Stable+0x98>)
   89256:	6819      	ldr	r1, [r3, #0]
   89258:	4b1a      	ldr	r3, [pc, #104]	; (892c4 <Check_4_TS3_Stable+0xa4>)
   8925a:	4610      	mov	r0, r2
   8925c:	4798      	blx	r3
   8925e:	4603      	mov	r3, r0
   89260:	461a      	mov	r2, r3
   89262:	4b19      	ldr	r3, [pc, #100]	; (892c8 <Check_4_TS3_Stable+0xa8>)
   89264:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89268:	4610      	mov	r0, r2
   8926a:	4798      	blx	r3
   8926c:	4603      	mov	r3, r0
   8926e:	2b00      	cmp	r3, #0
   89270:	d110      	bne.n	89294 <Check_4_TS3_Stable+0x74>
   89272:	4b11      	ldr	r3, [pc, #68]	; (892b8 <Check_4_TS3_Stable+0x98>)
   89274:	681a      	ldr	r2, [r3, #0]
   89276:	4b11      	ldr	r3, [pc, #68]	; (892bc <Check_4_TS3_Stable+0x9c>)
   89278:	6819      	ldr	r1, [r3, #0]
   8927a:	4b12      	ldr	r3, [pc, #72]	; (892c4 <Check_4_TS3_Stable+0xa4>)
   8927c:	4610      	mov	r0, r2
   8927e:	4798      	blx	r3
   89280:	4603      	mov	r3, r0
   89282:	461a      	mov	r2, r3
   89284:	4b10      	ldr	r3, [pc, #64]	; (892c8 <Check_4_TS3_Stable+0xa8>)
   89286:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8928a:	4610      	mov	r0, r2
   8928c:	4798      	blx	r3
   8928e:	4603      	mov	r3, r0
   89290:	2b00      	cmp	r3, #0
   89292:	d001      	beq.n	89298 <Check_4_TS3_Stable+0x78>
		{
			ts3_stable = true;
   89294:	2301      	movs	r3, #1
   89296:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89298:	4b0c      	ldr	r3, [pc, #48]	; (892cc <Check_4_TS3_Stable+0xac>)
   8929a:	881a      	ldrh	r2, [r3, #0]
   8929c:	4b05      	ldr	r3, [pc, #20]	; (892b4 <Check_4_TS3_Stable+0x94>)
   8929e:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   892a0:	4b03      	ldr	r3, [pc, #12]	; (892b0 <Check_4_TS3_Stable+0x90>)
   892a2:	2200      	movs	r2, #0
   892a4:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   892a6:	79fb      	ldrb	r3, [r7, #7]
}
   892a8:	4618      	mov	r0, r3
   892aa:	3708      	adds	r7, #8
   892ac:	46bd      	mov	sp, r7
   892ae:	bd80      	pop	{r7, pc}
   892b0:	2007215a 	.word	0x2007215a
   892b4:	2007047a 	.word	0x2007047a
   892b8:	20072d7c 	.word	0x20072d7c
   892bc:	20072154 	.word	0x20072154
   892c0:	000a3779 	.word	0x000a3779
   892c4:	000a323d 	.word	0x000a323d
   892c8:	000a37a1 	.word	0x000a37a1
   892cc:	20072162 	.word	0x20072162

000892d0 <Calculate_slope>:

void Calculate_slope ()
{
   892d0:	b598      	push	{r3, r4, r7, lr}
   892d2:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   892d4:	4b10      	ldr	r3, [pc, #64]	; (89318 <Calculate_slope+0x48>)
   892d6:	f04f 0200 	mov.w	r2, #0
   892da:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   892dc:	4b0f      	ldr	r3, [pc, #60]	; (8931c <Calculate_slope+0x4c>)
   892de:	681a      	ldr	r2, [r3, #0]
   892e0:	4b0f      	ldr	r3, [pc, #60]	; (89320 <Calculate_slope+0x50>)
   892e2:	6819      	ldr	r1, [r3, #0]
   892e4:	4b0f      	ldr	r3, [pc, #60]	; (89324 <Calculate_slope+0x54>)
   892e6:	4610      	mov	r0, r2
   892e8:	4798      	blx	r3
   892ea:	4603      	mov	r3, r0
   892ec:	461c      	mov	r4, r3
   892ee:	4b0e      	ldr	r3, [pc, #56]	; (89328 <Calculate_slope+0x58>)
   892f0:	881b      	ldrh	r3, [r3, #0]
   892f2:	461a      	mov	r2, r3
   892f4:	4b0d      	ldr	r3, [pc, #52]	; (8932c <Calculate_slope+0x5c>)
   892f6:	881b      	ldrh	r3, [r3, #0]
   892f8:	1ad2      	subs	r2, r2, r3
   892fa:	4b0d      	ldr	r3, [pc, #52]	; (89330 <Calculate_slope+0x60>)
   892fc:	4610      	mov	r0, r2
   892fe:	4798      	blx	r3
   89300:	4602      	mov	r2, r0
   89302:	4b0c      	ldr	r3, [pc, #48]	; (89334 <Calculate_slope+0x64>)
   89304:	4611      	mov	r1, r2
   89306:	4620      	mov	r0, r4
   89308:	4798      	blx	r3
   8930a:	4603      	mov	r3, r0
   8930c:	461a      	mov	r2, r3
   8930e:	4b02      	ldr	r3, [pc, #8]	; (89318 <Calculate_slope+0x48>)
   89310:	601a      	str	r2, [r3, #0]
}
   89312:	bf00      	nop
   89314:	bd98      	pop	{r3, r4, r7, pc}
   89316:	bf00      	nop
   89318:	2007216c 	.word	0x2007216c
   8931c:	20072150 	.word	0x20072150
   89320:	20072168 	.word	0x20072168
   89324:	000a323d 	.word	0x000a323d
   89328:	20072158 	.word	0x20072158
   8932c:	2007215e 	.word	0x2007215e
   89330:	000a33a9 	.word	0x000a33a9
   89334:	000a35b9 	.word	0x000a35b9

00089338 <Calculate_direction>:

Calculate_direction()
{
   89338:	b580      	push	{r7, lr}
   8933a:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   8933c:	4b20      	ldr	r3, [pc, #128]	; (893c0 <Calculate_direction+0x88>)
   8933e:	681a      	ldr	r2, [r3, #0]
   89340:	4b20      	ldr	r3, [pc, #128]	; (893c4 <Calculate_direction+0x8c>)
   89342:	6819      	ldr	r1, [r3, #0]
   89344:	4b20      	ldr	r3, [pc, #128]	; (893c8 <Calculate_direction+0x90>)
   89346:	4610      	mov	r0, r2
   89348:	4798      	blx	r3
   8934a:	4603      	mov	r3, r0
   8934c:	461a      	mov	r2, r3
   8934e:	4b1f      	ldr	r3, [pc, #124]	; (893cc <Calculate_direction+0x94>)
   89350:	f04f 0100 	mov.w	r1, #0
   89354:	4610      	mov	r0, r2
   89356:	4798      	blx	r3
   89358:	4603      	mov	r3, r0
   8935a:	2b00      	cmp	r3, #0
   8935c:	d003      	beq.n	89366 <Calculate_direction+0x2e>
	    TS2_Direction = UP;
   8935e:	4b1c      	ldr	r3, [pc, #112]	; (893d0 <Calculate_direction+0x98>)
   89360:	2200      	movs	r2, #0
   89362:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   89364:	e029      	b.n	893ba <Calculate_direction+0x82>

Calculate_direction()
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   89366:	4b17      	ldr	r3, [pc, #92]	; (893c4 <Calculate_direction+0x8c>)
   89368:	681a      	ldr	r2, [r3, #0]
   8936a:	4b15      	ldr	r3, [pc, #84]	; (893c0 <Calculate_direction+0x88>)
   8936c:	6819      	ldr	r1, [r3, #0]
   8936e:	4b16      	ldr	r3, [pc, #88]	; (893c8 <Calculate_direction+0x90>)
   89370:	4610      	mov	r0, r2
   89372:	4798      	blx	r3
   89374:	4603      	mov	r3, r0
   89376:	461a      	mov	r2, r3
   89378:	4b14      	ldr	r3, [pc, #80]	; (893cc <Calculate_direction+0x94>)
   8937a:	f04f 0100 	mov.w	r1, #0
   8937e:	4610      	mov	r0, r2
   89380:	4798      	blx	r3
   89382:	4603      	mov	r3, r0
   89384:	2b00      	cmp	r3, #0
   89386:	d003      	beq.n	89390 <Calculate_direction+0x58>
	    TS2_Direction = DOWN;
   89388:	4b11      	ldr	r3, [pc, #68]	; (893d0 <Calculate_direction+0x98>)
   8938a:	2201      	movs	r2, #1
   8938c:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   8938e:	e014      	b.n	893ba <Calculate_direction+0x82>
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   89390:	4b0c      	ldr	r3, [pc, #48]	; (893c4 <Calculate_direction+0x8c>)
   89392:	681a      	ldr	r2, [r3, #0]
   89394:	4b0a      	ldr	r3, [pc, #40]	; (893c0 <Calculate_direction+0x88>)
   89396:	6819      	ldr	r1, [r3, #0]
   89398:	4b0b      	ldr	r3, [pc, #44]	; (893c8 <Calculate_direction+0x90>)
   8939a:	4610      	mov	r0, r2
   8939c:	4798      	blx	r3
   8939e:	4603      	mov	r3, r0
   893a0:	461a      	mov	r2, r3
   893a2:	4b0c      	ldr	r3, [pc, #48]	; (893d4 <Calculate_direction+0x9c>)
   893a4:	f04f 0100 	mov.w	r1, #0
   893a8:	4610      	mov	r0, r2
   893aa:	4798      	blx	r3
   893ac:	4603      	mov	r3, r0
   893ae:	2b00      	cmp	r3, #0
   893b0:	d100      	bne.n	893b4 <Calculate_direction+0x7c>
		TS2_Direction = NUETRAL;

}
   893b2:	e002      	b.n	893ba <Calculate_direction+0x82>
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
   893b4:	4b06      	ldr	r3, [pc, #24]	; (893d0 <Calculate_direction+0x98>)
   893b6:	2202      	movs	r2, #2
   893b8:	701a      	strb	r2, [r3, #0]

}
   893ba:	bf00      	nop
   893bc:	bd80      	pop	{r7, pc}
   893be:	bf00      	nop
   893c0:	20072150 	.word	0x20072150
   893c4:	20072164 	.word	0x20072164
   893c8:	000a323d 	.word	0x000a323d
   893cc:	000a37c9 	.word	0x000a37c9
   893d0:	20072d8a 	.word	0x20072d8a
   893d4:	000a3779 	.word	0x000a3779

000893d8 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   893d8:	b598      	push	{r3, r4, r7, lr}
   893da:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   893dc:	4b9a      	ldr	r3, [pc, #616]	; (89648 <Coarse_DutyCorrection+0x270>)
   893de:	681a      	ldr	r2, [r3, #0]
   893e0:	4b9a      	ldr	r3, [pc, #616]	; (8964c <Coarse_DutyCorrection+0x274>)
   893e2:	4610      	mov	r0, r2
   893e4:	4798      	blx	r3
   893e6:	4c9a      	ldr	r4, [pc, #616]	; (89650 <Coarse_DutyCorrection+0x278>)
   893e8:	a393      	add	r3, pc, #588	; (adr r3, 89638 <Coarse_DutyCorrection+0x260>)
   893ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   893ee:	47a0      	blx	r4
   893f0:	4603      	mov	r3, r0
   893f2:	2b00      	cmp	r3, #0
   893f4:	d002      	beq.n	893fc <Coarse_DutyCorrection+0x24>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   893f6:	4b97      	ldr	r3, [pc, #604]	; (89654 <Coarse_DutyCorrection+0x27c>)
   893f8:	223c      	movs	r2, #60	; 0x3c
   893fa:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   893fc:	4b92      	ldr	r3, [pc, #584]	; (89648 <Coarse_DutyCorrection+0x270>)
   893fe:	681a      	ldr	r2, [r3, #0]
   89400:	4b92      	ldr	r3, [pc, #584]	; (8964c <Coarse_DutyCorrection+0x274>)
   89402:	4610      	mov	r0, r2
   89404:	4798      	blx	r3
   89406:	4c92      	ldr	r4, [pc, #584]	; (89650 <Coarse_DutyCorrection+0x278>)
   89408:	a38d      	add	r3, pc, #564	; (adr r3, 89640 <Coarse_DutyCorrection+0x268>)
   8940a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8940e:	47a0      	blx	r4
   89410:	4603      	mov	r3, r0
   89412:	2b00      	cmp	r3, #0
   89414:	d00f      	beq.n	89436 <Coarse_DutyCorrection+0x5e>
   89416:	4b8c      	ldr	r3, [pc, #560]	; (89648 <Coarse_DutyCorrection+0x270>)
   89418:	681a      	ldr	r2, [r3, #0]
   8941a:	4b8c      	ldr	r3, [pc, #560]	; (8964c <Coarse_DutyCorrection+0x274>)
   8941c:	4610      	mov	r0, r2
   8941e:	4798      	blx	r3
   89420:	4c8d      	ldr	r4, [pc, #564]	; (89658 <Coarse_DutyCorrection+0x280>)
   89422:	a385      	add	r3, pc, #532	; (adr r3, 89638 <Coarse_DutyCorrection+0x260>)
   89424:	e9d3 2300 	ldrd	r2, r3, [r3]
   89428:	47a0      	blx	r4
   8942a:	4603      	mov	r3, r0
   8942c:	2b00      	cmp	r3, #0
   8942e:	d002      	beq.n	89436 <Coarse_DutyCorrection+0x5e>
	{
		duty_count = 40;
   89430:	4b88      	ldr	r3, [pc, #544]	; (89654 <Coarse_DutyCorrection+0x27c>)
   89432:	2228      	movs	r2, #40	; 0x28
   89434:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   89436:	4b84      	ldr	r3, [pc, #528]	; (89648 <Coarse_DutyCorrection+0x270>)
   89438:	681a      	ldr	r2, [r3, #0]
   8943a:	4b84      	ldr	r3, [pc, #528]	; (8964c <Coarse_DutyCorrection+0x274>)
   8943c:	4610      	mov	r0, r2
   8943e:	4798      	blx	r3
   89440:	4c86      	ldr	r4, [pc, #536]	; (8965c <Coarse_DutyCorrection+0x284>)
   89442:	a37f      	add	r3, pc, #508	; (adr r3, 89640 <Coarse_DutyCorrection+0x268>)
   89444:	e9d3 2300 	ldrd	r2, r3, [r3]
   89448:	47a0      	blx	r4
   8944a:	4603      	mov	r3, r0
   8944c:	2b00      	cmp	r3, #0
   8944e:	d002      	beq.n	89456 <Coarse_DutyCorrection+0x7e>
	{
		duty_count = 8;
   89450:	4b80      	ldr	r3, [pc, #512]	; (89654 <Coarse_DutyCorrection+0x27c>)
   89452:	2208      	movs	r2, #8
   89454:	701a      	strb	r2, [r3, #0]
	
	}
	
	if (SYSTEM_FLOW == 800)
   89456:	4b82      	ldr	r3, [pc, #520]	; (89660 <Coarse_DutyCorrection+0x288>)
   89458:	681b      	ldr	r3, [r3, #0]
   8945a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8945e:	f040 8086 	bne.w	8956e <Coarse_DutyCorrection+0x196>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
   89462:	4b80      	ldr	r3, [pc, #512]	; (89664 <Coarse_DutyCorrection+0x28c>)
   89464:	781b      	ldrb	r3, [r3, #0]
   89466:	2b00      	cmp	r3, #0
   89468:	d120      	bne.n	894ac <Coarse_DutyCorrection+0xd4>
   8946a:	4b7f      	ldr	r3, [pc, #508]	; (89668 <Coarse_DutyCorrection+0x290>)
   8946c:	681a      	ldr	r2, [r3, #0]
   8946e:	4b7f      	ldr	r3, [pc, #508]	; (8966c <Coarse_DutyCorrection+0x294>)
   89470:	497f      	ldr	r1, [pc, #508]	; (89670 <Coarse_DutyCorrection+0x298>)
   89472:	4610      	mov	r0, r2
   89474:	4798      	blx	r3
   89476:	4603      	mov	r3, r0
   89478:	2b00      	cmp	r3, #0
   8947a:	d017      	beq.n	894ac <Coarse_DutyCorrection+0xd4>
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8947c:	4b7d      	ldr	r3, [pc, #500]	; (89674 <Coarse_DutyCorrection+0x29c>)
   8947e:	f9b3 3000 	ldrsh.w	r3, [r3]
   89482:	b29a      	uxth	r2, r3
   89484:	4b73      	ldr	r3, [pc, #460]	; (89654 <Coarse_DutyCorrection+0x27c>)
   89486:	781b      	ldrb	r3, [r3, #0]
   89488:	b29b      	uxth	r3, r3
   8948a:	1ad3      	subs	r3, r2, r3
   8948c:	b29b      	uxth	r3, r3
   8948e:	b21a      	sxth	r2, r3
   89490:	4b78      	ldr	r3, [pc, #480]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89492:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89494:	4b77      	ldr	r3, [pc, #476]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89496:	f9b3 3000 	ldrsh.w	r3, [r3]
   8949a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8949e:	f300 81ff 	bgt.w	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   894a2:	4b74      	ldr	r3, [pc, #464]	; (89674 <Coarse_DutyCorrection+0x29c>)
   894a4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   894a8:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   894aa:	e1f9      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 36) && (Tmp2Val <= 37)))
   894ac:	4b6d      	ldr	r3, [pc, #436]	; (89664 <Coarse_DutyCorrection+0x28c>)
   894ae:	781b      	ldrb	r3, [r3, #0]
   894b0:	2b00      	cmp	r3, #0
   894b2:	d11e      	bne.n	894f2 <Coarse_DutyCorrection+0x11a>
   894b4:	4b6c      	ldr	r3, [pc, #432]	; (89668 <Coarse_DutyCorrection+0x290>)
   894b6:	681a      	ldr	r2, [r3, #0]
   894b8:	4b6c      	ldr	r3, [pc, #432]	; (8966c <Coarse_DutyCorrection+0x294>)
   894ba:	496f      	ldr	r1, [pc, #444]	; (89678 <Coarse_DutyCorrection+0x2a0>)
   894bc:	4610      	mov	r0, r2
   894be:	4798      	blx	r3
   894c0:	4603      	mov	r3, r0
   894c2:	2b00      	cmp	r3, #0
   894c4:	d015      	beq.n	894f2 <Coarse_DutyCorrection+0x11a>
   894c6:	4b68      	ldr	r3, [pc, #416]	; (89668 <Coarse_DutyCorrection+0x290>)
   894c8:	681a      	ldr	r2, [r3, #0]
   894ca:	4b6c      	ldr	r3, [pc, #432]	; (8967c <Coarse_DutyCorrection+0x2a4>)
   894cc:	496c      	ldr	r1, [pc, #432]	; (89680 <Coarse_DutyCorrection+0x2a8>)
   894ce:	4610      	mov	r0, r2
   894d0:	4798      	blx	r3
   894d2:	4603      	mov	r3, r0
   894d4:	2b00      	cmp	r3, #0
   894d6:	d00c      	beq.n	894f2 <Coarse_DutyCorrection+0x11a>
		{
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   894d8:	4b5e      	ldr	r3, [pc, #376]	; (89654 <Coarse_DutyCorrection+0x27c>)
   894da:	781b      	ldrb	r3, [r3, #0]
   894dc:	b29a      	uxth	r2, r3
   894de:	4b65      	ldr	r3, [pc, #404]	; (89674 <Coarse_DutyCorrection+0x29c>)
   894e0:	f9b3 3000 	ldrsh.w	r3, [r3]
   894e4:	b29b      	uxth	r3, r3
   894e6:	4413      	add	r3, r2
   894e8:	b29b      	uxth	r3, r3
   894ea:	b21a      	sxth	r2, r3
   894ec:	4b61      	ldr	r3, [pc, #388]	; (89674 <Coarse_DutyCorrection+0x29c>)
   894ee:	801a      	strh	r2, [r3, #0]
   894f0:	e1d6      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
   894f2:	4b5c      	ldr	r3, [pc, #368]	; (89664 <Coarse_DutyCorrection+0x28c>)
   894f4:	781b      	ldrb	r3, [r3, #0]
   894f6:	2b01      	cmp	r3, #1
   894f8:	d12e      	bne.n	89558 <Coarse_DutyCorrection+0x180>
   894fa:	4b5b      	ldr	r3, [pc, #364]	; (89668 <Coarse_DutyCorrection+0x290>)
   894fc:	681a      	ldr	r2, [r3, #0]
   894fe:	4b5f      	ldr	r3, [pc, #380]	; (8967c <Coarse_DutyCorrection+0x2a4>)
   89500:	495f      	ldr	r1, [pc, #380]	; (89680 <Coarse_DutyCorrection+0x2a8>)
   89502:	4610      	mov	r0, r2
   89504:	4798      	blx	r3
   89506:	4603      	mov	r3, r0
   89508:	2b00      	cmp	r3, #0
   8950a:	d025      	beq.n	89558 <Coarse_DutyCorrection+0x180>
		{
			avg_duty = avg_duty + duty_count;
   8950c:	4b51      	ldr	r3, [pc, #324]	; (89654 <Coarse_DutyCorrection+0x27c>)
   8950e:	781b      	ldrb	r3, [r3, #0]
   89510:	b29a      	uxth	r2, r3
   89512:	4b58      	ldr	r3, [pc, #352]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89514:	f9b3 3000 	ldrsh.w	r3, [r3]
   89518:	b29b      	uxth	r3, r3
   8951a:	4413      	add	r3, r2
   8951c:	b29b      	uxth	r3, r3
   8951e:	b21a      	sxth	r2, r3
   89520:	4b54      	ldr	r3, [pc, #336]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89522:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   89524:	4b53      	ldr	r3, [pc, #332]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89526:	f9b3 3000 	ldrsh.w	r3, [r3]
   8952a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8952e:	4293      	cmp	r3, r2
   89530:	f340 81b6 	ble.w	898a0 <Coarse_DutyCorrection+0x4c8>
   89534:	4b53      	ldr	r3, [pc, #332]	; (89684 <Coarse_DutyCorrection+0x2ac>)
   89536:	681a      	ldr	r2, [r3, #0]
   89538:	4b53      	ldr	r3, [pc, #332]	; (89688 <Coarse_DutyCorrection+0x2b0>)
   8953a:	6819      	ldr	r1, [r3, #0]
   8953c:	4b4b      	ldr	r3, [pc, #300]	; (8966c <Coarse_DutyCorrection+0x294>)
   8953e:	4610      	mov	r0, r2
   89540:	4798      	blx	r3
   89542:	4603      	mov	r3, r0
   89544:	2b00      	cmp	r3, #0
   89546:	d100      	bne.n	8954a <Coarse_DutyCorrection+0x172>
   89548:	e1aa      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 2300;
   8954a:	4b4a      	ldr	r3, [pc, #296]	; (89674 <Coarse_DutyCorrection+0x29c>)
   8954c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89550:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89552:	4b4e      	ldr	r3, [pc, #312]	; (8968c <Coarse_DutyCorrection+0x2b4>)
   89554:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   89556:	e1a3      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89558:	4b42      	ldr	r3, [pc, #264]	; (89664 <Coarse_DutyCorrection+0x28c>)
   8955a:	781b      	ldrb	r3, [r3, #0]
   8955c:	2b02      	cmp	r3, #2
   8955e:	f040 819f 	bne.w	898a0 <Coarse_DutyCorrection+0x4c8>
		avg_duty = avg_duty;
   89562:	4b44      	ldr	r3, [pc, #272]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89564:	f9b3 2000 	ldrsh.w	r2, [r3]
   89568:	4b42      	ldr	r3, [pc, #264]	; (89674 <Coarse_DutyCorrection+0x29c>)
   8956a:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
}
   8956c:	e198      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
		avg_duty = avg_duty;
		
	}

	
	else if (SYSTEM_FLOW == 500)
   8956e:	4b3c      	ldr	r3, [pc, #240]	; (89660 <Coarse_DutyCorrection+0x288>)
   89570:	681b      	ldr	r3, [r3, #0]
   89572:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89576:	f040 80e2 	bne.w	8973e <Coarse_DutyCorrection+0x366>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
   8957a:	4b3a      	ldr	r3, [pc, #232]	; (89664 <Coarse_DutyCorrection+0x28c>)
   8957c:	781b      	ldrb	r3, [r3, #0]
   8957e:	2b00      	cmp	r3, #0
   89580:	d120      	bne.n	895c4 <Coarse_DutyCorrection+0x1ec>
   89582:	4b39      	ldr	r3, [pc, #228]	; (89668 <Coarse_DutyCorrection+0x290>)
   89584:	681a      	ldr	r2, [r3, #0]
   89586:	4b39      	ldr	r3, [pc, #228]	; (8966c <Coarse_DutyCorrection+0x294>)
   89588:	4939      	ldr	r1, [pc, #228]	; (89670 <Coarse_DutyCorrection+0x298>)
   8958a:	4610      	mov	r0, r2
   8958c:	4798      	blx	r3
   8958e:	4603      	mov	r3, r0
   89590:	2b00      	cmp	r3, #0
   89592:	d017      	beq.n	895c4 <Coarse_DutyCorrection+0x1ec>
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   89594:	4b37      	ldr	r3, [pc, #220]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89596:	f9b3 3000 	ldrsh.w	r3, [r3]
   8959a:	b29a      	uxth	r2, r3
   8959c:	4b2d      	ldr	r3, [pc, #180]	; (89654 <Coarse_DutyCorrection+0x27c>)
   8959e:	781b      	ldrb	r3, [r3, #0]
   895a0:	b29b      	uxth	r3, r3
   895a2:	1ad3      	subs	r3, r2, r3
   895a4:	b29b      	uxth	r3, r3
   895a6:	b21a      	sxth	r2, r3
   895a8:	4b32      	ldr	r3, [pc, #200]	; (89674 <Coarse_DutyCorrection+0x29c>)
   895aa:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   895ac:	4b31      	ldr	r3, [pc, #196]	; (89674 <Coarse_DutyCorrection+0x29c>)
   895ae:	f9b3 3000 	ldrsh.w	r3, [r3]
   895b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   895b6:	f300 8173 	bgt.w	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   895ba:	4b2e      	ldr	r3, [pc, #184]	; (89674 <Coarse_DutyCorrection+0x29c>)
   895bc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   895c0:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= 40) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   895c2:	e16d      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 36) && (Tmp2Val <= 39)))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   895c4:	4b27      	ldr	r3, [pc, #156]	; (89664 <Coarse_DutyCorrection+0x28c>)
   895c6:	781b      	ldrb	r3, [r3, #0]
   895c8:	2b00      	cmp	r3, #0
   895ca:	d167      	bne.n	8969c <Coarse_DutyCorrection+0x2c4>
   895cc:	4b26      	ldr	r3, [pc, #152]	; (89668 <Coarse_DutyCorrection+0x290>)
   895ce:	681a      	ldr	r2, [r3, #0]
   895d0:	4b26      	ldr	r3, [pc, #152]	; (8966c <Coarse_DutyCorrection+0x294>)
   895d2:	4929      	ldr	r1, [pc, #164]	; (89678 <Coarse_DutyCorrection+0x2a0>)
   895d4:	4610      	mov	r0, r2
   895d6:	4798      	blx	r3
   895d8:	4603      	mov	r3, r0
   895da:	2b00      	cmp	r3, #0
   895dc:	d05e      	beq.n	8969c <Coarse_DutyCorrection+0x2c4>
   895de:	4b22      	ldr	r3, [pc, #136]	; (89668 <Coarse_DutyCorrection+0x290>)
   895e0:	681a      	ldr	r2, [r3, #0]
   895e2:	4b26      	ldr	r3, [pc, #152]	; (8967c <Coarse_DutyCorrection+0x2a4>)
   895e4:	492a      	ldr	r1, [pc, #168]	; (89690 <Coarse_DutyCorrection+0x2b8>)
   895e6:	4610      	mov	r0, r2
   895e8:	4798      	blx	r3
   895ea:	4603      	mov	r3, r0
   895ec:	2b00      	cmp	r3, #0
   895ee:	d055      	beq.n	8969c <Coarse_DutyCorrection+0x2c4>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   895f0:	4b28      	ldr	r3, [pc, #160]	; (89694 <Coarse_DutyCorrection+0x2bc>)
   895f2:	681a      	ldr	r2, [r3, #0]
   895f4:	4b21      	ldr	r3, [pc, #132]	; (8967c <Coarse_DutyCorrection+0x2a4>)
   895f6:	4920      	ldr	r1, [pc, #128]	; (89678 <Coarse_DutyCorrection+0x2a0>)
   895f8:	4610      	mov	r0, r2
   895fa:	4798      	blx	r3
   895fc:	4603      	mov	r3, r0
   895fe:	2b00      	cmp	r3, #0
   89600:	f000 814e 	beq.w	898a0 <Coarse_DutyCorrection+0x4c8>
   89604:	4b1f      	ldr	r3, [pc, #124]	; (89684 <Coarse_DutyCorrection+0x2ac>)
   89606:	681a      	ldr	r2, [r3, #0]
   89608:	4b1f      	ldr	r3, [pc, #124]	; (89688 <Coarse_DutyCorrection+0x2b0>)
   8960a:	6819      	ldr	r1, [r3, #0]
   8960c:	4b22      	ldr	r3, [pc, #136]	; (89698 <Coarse_DutyCorrection+0x2c0>)
   8960e:	4610      	mov	r0, r2
   89610:	4798      	blx	r3
   89612:	4603      	mov	r3, r0
   89614:	2b00      	cmp	r3, #0
   89616:	d100      	bne.n	8961a <Coarse_DutyCorrection+0x242>
   89618:	e142      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8961a:	4b0e      	ldr	r3, [pc, #56]	; (89654 <Coarse_DutyCorrection+0x27c>)
   8961c:	781b      	ldrb	r3, [r3, #0]
   8961e:	b29a      	uxth	r2, r3
   89620:	4b14      	ldr	r3, [pc, #80]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89622:	f9b3 3000 	ldrsh.w	r3, [r3]
   89626:	b29b      	uxth	r3, r3
   89628:	4413      	add	r3, r2
   8962a:	b29b      	uxth	r3, r3
   8962c:	b21a      	sxth	r2, r3
   8962e:	4b11      	ldr	r3, [pc, #68]	; (89674 <Coarse_DutyCorrection+0x29c>)
   89630:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 36) && (Tmp2Val <= 39)))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   89632:	e135      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
   89634:	f3af 8000 	nop.w
   89638:	eb851eb8 	.word	0xeb851eb8
   8963c:	3f9eb851 	.word	0x3f9eb851
   89640:	33333333 	.word	0x33333333
   89644:	3fd33333 	.word	0x3fd33333
   89648:	2007216c 	.word	0x2007216c
   8964c:	000a2b29 	.word	0x000a2b29
   89650:	000a30c9 	.word	0x000a30c9
   89654:	20072170 	.word	0x20072170
   89658:	000a30f1 	.word	0x000a30f1
   8965c:	000a30dd 	.word	0x000a30dd
   89660:	20070484 	.word	0x20070484
   89664:	20072d8a 	.word	0x20072d8a
   89668:	20072150 	.word	0x20072150
   8966c:	000a37b5 	.word	0x000a37b5
   89670:	42200000 	.word	0x42200000
   89674:	2007213e 	.word	0x2007213e
   89678:	42100000 	.word	0x42100000
   8967c:	000a37a1 	.word	0x000a37a1
   89680:	42140000 	.word	0x42140000
   89684:	20072154 	.word	0x20072154
   89688:	20070480 	.word	0x20070480
   8968c:	000974dd 	.word	0x000974dd
   89690:	421c0000 	.word	0x421c0000
   89694:	2007214c 	.word	0x2007214c
   89698:	000a378d 	.word	0x000a378d
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}           //To avoid TS2 getting stuck at 36 or 36.5
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 37) )  
   8969c:	4b81      	ldr	r3, [pc, #516]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   8969e:	781b      	ldrb	r3, [r3, #0]
   896a0:	2b01      	cmp	r3, #1
   896a2:	d141      	bne.n	89728 <Coarse_DutyCorrection+0x350>
   896a4:	4b80      	ldr	r3, [pc, #512]	; (898a8 <Coarse_DutyCorrection+0x4d0>)
   896a6:	681a      	ldr	r2, [r3, #0]
   896a8:	4b80      	ldr	r3, [pc, #512]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   896aa:	4981      	ldr	r1, [pc, #516]	; (898b0 <Coarse_DutyCorrection+0x4d8>)
   896ac:	4610      	mov	r0, r2
   896ae:	4798      	blx	r3
   896b0:	4603      	mov	r3, r0
   896b2:	2b00      	cmp	r3, #0
   896b4:	d038      	beq.n	89728 <Coarse_DutyCorrection+0x350>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   896b6:	4b7f      	ldr	r3, [pc, #508]	; (898b4 <Coarse_DutyCorrection+0x4dc>)
   896b8:	681a      	ldr	r2, [r3, #0]
   896ba:	4b7c      	ldr	r3, [pc, #496]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   896bc:	497e      	ldr	r1, [pc, #504]	; (898b8 <Coarse_DutyCorrection+0x4e0>)
   896be:	4610      	mov	r0, r2
   896c0:	4798      	blx	r3
   896c2:	4603      	mov	r3, r0
   896c4:	2b00      	cmp	r3, #0
   896c6:	d015      	beq.n	896f4 <Coarse_DutyCorrection+0x31c>
   896c8:	4b7c      	ldr	r3, [pc, #496]	; (898bc <Coarse_DutyCorrection+0x4e4>)
   896ca:	681a      	ldr	r2, [r3, #0]
   896cc:	4b7c      	ldr	r3, [pc, #496]	; (898c0 <Coarse_DutyCorrection+0x4e8>)
   896ce:	6819      	ldr	r1, [r3, #0]
   896d0:	4b7c      	ldr	r3, [pc, #496]	; (898c4 <Coarse_DutyCorrection+0x4ec>)
   896d2:	4610      	mov	r0, r2
   896d4:	4798      	blx	r3
   896d6:	4603      	mov	r3, r0
   896d8:	2b00      	cmp	r3, #0
   896da:	d00b      	beq.n	896f4 <Coarse_DutyCorrection+0x31c>
			{
				avg_duty = avg_duty + duty_count;            
   896dc:	4b7a      	ldr	r3, [pc, #488]	; (898c8 <Coarse_DutyCorrection+0x4f0>)
   896de:	781b      	ldrb	r3, [r3, #0]
   896e0:	b29a      	uxth	r2, r3
   896e2:	4b7a      	ldr	r3, [pc, #488]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   896e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   896e8:	b29b      	uxth	r3, r3
   896ea:	4413      	add	r3, r2
   896ec:	b29b      	uxth	r3, r3
   896ee:	b21a      	sxth	r2, r3
   896f0:	4b76      	ldr	r3, [pc, #472]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   896f2:	801a      	strh	r2, [r3, #0]
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   896f4:	4b75      	ldr	r3, [pc, #468]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   896f6:	f9b3 3000 	ldrsh.w	r3, [r3]
   896fa:	f640 02fc 	movw	r2, #2300	; 0x8fc
   896fe:	4293      	cmp	r3, r2
   89700:	f340 80ce 	ble.w	898a0 <Coarse_DutyCorrection+0x4c8>
   89704:	4b6d      	ldr	r3, [pc, #436]	; (898bc <Coarse_DutyCorrection+0x4e4>)
   89706:	681a      	ldr	r2, [r3, #0]
   89708:	4b6d      	ldr	r3, [pc, #436]	; (898c0 <Coarse_DutyCorrection+0x4e8>)
   8970a:	6819      	ldr	r1, [r3, #0]
   8970c:	4b70      	ldr	r3, [pc, #448]	; (898d0 <Coarse_DutyCorrection+0x4f8>)
   8970e:	4610      	mov	r0, r2
   89710:	4798      	blx	r3
   89712:	4603      	mov	r3, r0
   89714:	2b00      	cmp	r3, #0
   89716:	d100      	bne.n	8971a <Coarse_DutyCorrection+0x342>
   89718:	e0c2      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 2300;
   8971a:	4b6c      	ldr	r3, [pc, #432]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8971c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89720:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89722:	4b6c      	ldr	r3, [pc, #432]	; (898d4 <Coarse_DutyCorrection+0x4fc>)
   89724:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   89726:	e0bb      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89728:	4b5e      	ldr	r3, [pc, #376]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   8972a:	781b      	ldrb	r3, [r3, #0]
   8972c:	2b02      	cmp	r3, #2
   8972e:	f040 80b7 	bne.w	898a0 <Coarse_DutyCorrection+0x4c8>
		avg_duty = avg_duty;
   89732:	4b66      	ldr	r3, [pc, #408]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89734:	f9b3 2000 	ldrsh.w	r2, [r3]
   89738:	4b64      	ldr	r3, [pc, #400]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8973a:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
}
   8973c:	e0b0      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8973e:	4b66      	ldr	r3, [pc, #408]	; (898d8 <Coarse_DutyCorrection+0x500>)
   89740:	681b      	ldr	r3, [r3, #0]
   89742:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89746:	f040 80ab 	bne.w	898a0 <Coarse_DutyCorrection+0x4c8>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= 42)))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8974a:	4b56      	ldr	r3, [pc, #344]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   8974c:	781b      	ldrb	r3, [r3, #0]
   8974e:	2b00      	cmp	r3, #0
   89750:	d12b      	bne.n	897aa <Coarse_DutyCorrection+0x3d2>
   89752:	4b55      	ldr	r3, [pc, #340]	; (898a8 <Coarse_DutyCorrection+0x4d0>)
   89754:	681a      	ldr	r2, [r3, #0]
   89756:	4b5e      	ldr	r3, [pc, #376]	; (898d0 <Coarse_DutyCorrection+0x4f8>)
   89758:	4960      	ldr	r1, [pc, #384]	; (898dc <Coarse_DutyCorrection+0x504>)
   8975a:	4610      	mov	r0, r2
   8975c:	4798      	blx	r3
   8975e:	4603      	mov	r3, r0
   89760:	2b00      	cmp	r3, #0
   89762:	d022      	beq.n	897aa <Coarse_DutyCorrection+0x3d2>
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
   89764:	4b59      	ldr	r3, [pc, #356]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89766:	f9b3 3000 	ldrsh.w	r3, [r3]
   8976a:	b29a      	uxth	r2, r3
   8976c:	4b56      	ldr	r3, [pc, #344]	; (898c8 <Coarse_DutyCorrection+0x4f0>)
   8976e:	781b      	ldrb	r3, [r3, #0]
   89770:	b29b      	uxth	r3, r3
   89772:	1ad3      	subs	r3, r2, r3
   89774:	b29b      	uxth	r3, r3
   89776:	b21a      	sxth	r2, r3
   89778:	4b54      	ldr	r3, [pc, #336]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8977a:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8977c:	4b53      	ldr	r3, [pc, #332]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8977e:	f9b3 3000 	ldrsh.w	r3, [r3]
   89782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89786:	f300 808b 	bgt.w	898a0 <Coarse_DutyCorrection+0x4c8>
   8978a:	4b4c      	ldr	r3, [pc, #304]	; (898bc <Coarse_DutyCorrection+0x4e4>)
   8978c:	681a      	ldr	r2, [r3, #0]
   8978e:	4b4c      	ldr	r3, [pc, #304]	; (898c0 <Coarse_DutyCorrection+0x4e8>)
   89790:	6819      	ldr	r1, [r3, #0]
   89792:	4b4c      	ldr	r3, [pc, #304]	; (898c4 <Coarse_DutyCorrection+0x4ec>)
   89794:	4610      	mov	r0, r2
   89796:	4798      	blx	r3
   89798:	4603      	mov	r3, r0
   8979a:	2b00      	cmp	r3, #0
   8979c:	d100      	bne.n	897a0 <Coarse_DutyCorrection+0x3c8>
   8979e:	e07f      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   897a0:	4b4a      	ldr	r3, [pc, #296]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   897a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   897a6:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= 42)))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   897a8:	e07a      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 37) && (Tmp2Val <= 40)))      // last was 39
   897aa:	4b3e      	ldr	r3, [pc, #248]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   897ac:	781b      	ldrb	r3, [r3, #0]
   897ae:	2b00      	cmp	r3, #0
   897b0:	d132      	bne.n	89818 <Coarse_DutyCorrection+0x440>
   897b2:	4b3d      	ldr	r3, [pc, #244]	; (898a8 <Coarse_DutyCorrection+0x4d0>)
   897b4:	681a      	ldr	r2, [r3, #0]
   897b6:	4b46      	ldr	r3, [pc, #280]	; (898d0 <Coarse_DutyCorrection+0x4f8>)
   897b8:	493d      	ldr	r1, [pc, #244]	; (898b0 <Coarse_DutyCorrection+0x4d8>)
   897ba:	4610      	mov	r0, r2
   897bc:	4798      	blx	r3
   897be:	4603      	mov	r3, r0
   897c0:	2b00      	cmp	r3, #0
   897c2:	d029      	beq.n	89818 <Coarse_DutyCorrection+0x440>
   897c4:	4b38      	ldr	r3, [pc, #224]	; (898a8 <Coarse_DutyCorrection+0x4d0>)
   897c6:	681a      	ldr	r2, [r3, #0]
   897c8:	4b38      	ldr	r3, [pc, #224]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   897ca:	4945      	ldr	r1, [pc, #276]	; (898e0 <Coarse_DutyCorrection+0x508>)
   897cc:	4610      	mov	r0, r2
   897ce:	4798      	blx	r3
   897d0:	4603      	mov	r3, r0
   897d2:	2b00      	cmp	r3, #0
   897d4:	d020      	beq.n	89818 <Coarse_DutyCorrection+0x440>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   897d6:	4b37      	ldr	r3, [pc, #220]	; (898b4 <Coarse_DutyCorrection+0x4dc>)
   897d8:	681a      	ldr	r2, [r3, #0]
   897da:	4b34      	ldr	r3, [pc, #208]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   897dc:	4936      	ldr	r1, [pc, #216]	; (898b8 <Coarse_DutyCorrection+0x4e0>)
   897de:	4610      	mov	r0, r2
   897e0:	4798      	blx	r3
   897e2:	4603      	mov	r3, r0
   897e4:	2b00      	cmp	r3, #0
   897e6:	d05b      	beq.n	898a0 <Coarse_DutyCorrection+0x4c8>
   897e8:	4b34      	ldr	r3, [pc, #208]	; (898bc <Coarse_DutyCorrection+0x4e4>)
   897ea:	681a      	ldr	r2, [r3, #0]
   897ec:	4b34      	ldr	r3, [pc, #208]	; (898c0 <Coarse_DutyCorrection+0x4e8>)
   897ee:	6819      	ldr	r1, [r3, #0]
   897f0:	4b34      	ldr	r3, [pc, #208]	; (898c4 <Coarse_DutyCorrection+0x4ec>)
   897f2:	4610      	mov	r0, r2
   897f4:	4798      	blx	r3
   897f6:	4603      	mov	r3, r0
   897f8:	2b00      	cmp	r3, #0
   897fa:	d100      	bne.n	897fe <Coarse_DutyCorrection+0x426>
   897fc:	e050      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   897fe:	4b32      	ldr	r3, [pc, #200]	; (898c8 <Coarse_DutyCorrection+0x4f0>)
   89800:	781b      	ldrb	r3, [r3, #0]
   89802:	b29a      	uxth	r2, r3
   89804:	4b31      	ldr	r3, [pc, #196]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89806:	f9b3 3000 	ldrsh.w	r3, [r3]
   8980a:	b29b      	uxth	r3, r3
   8980c:	4413      	add	r3, r2
   8980e:	b29b      	uxth	r3, r3
   89810:	b21a      	sxth	r2, r3
   89812:	4b2e      	ldr	r3, [pc, #184]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89814:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 37) && (Tmp2Val <= 40)))      // last was 39
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   89816:	e043      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= 40) )        // last was 39
   89818:	4b22      	ldr	r3, [pc, #136]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   8981a:	781b      	ldrb	r3, [r3, #0]
   8981c:	2b01      	cmp	r3, #1
   8981e:	d135      	bne.n	8988c <Coarse_DutyCorrection+0x4b4>
   89820:	4b21      	ldr	r3, [pc, #132]	; (898a8 <Coarse_DutyCorrection+0x4d0>)
   89822:	681a      	ldr	r2, [r3, #0]
   89824:	4b21      	ldr	r3, [pc, #132]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   89826:	492e      	ldr	r1, [pc, #184]	; (898e0 <Coarse_DutyCorrection+0x508>)
   89828:	4610      	mov	r0, r2
   8982a:	4798      	blx	r3
   8982c:	4603      	mov	r3, r0
   8982e:	2b00      	cmp	r3, #0
   89830:	d02c      	beq.n	8988c <Coarse_DutyCorrection+0x4b4>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   89832:	4b20      	ldr	r3, [pc, #128]	; (898b4 <Coarse_DutyCorrection+0x4dc>)
   89834:	681a      	ldr	r2, [r3, #0]
   89836:	4b1d      	ldr	r3, [pc, #116]	; (898ac <Coarse_DutyCorrection+0x4d4>)
   89838:	491f      	ldr	r1, [pc, #124]	; (898b8 <Coarse_DutyCorrection+0x4e0>)
   8983a:	4610      	mov	r0, r2
   8983c:	4798      	blx	r3
   8983e:	4603      	mov	r3, r0
   89840:	2b00      	cmp	r3, #0
   89842:	d015      	beq.n	89870 <Coarse_DutyCorrection+0x498>
   89844:	4b1d      	ldr	r3, [pc, #116]	; (898bc <Coarse_DutyCorrection+0x4e4>)
   89846:	681a      	ldr	r2, [r3, #0]
   89848:	4b1d      	ldr	r3, [pc, #116]	; (898c0 <Coarse_DutyCorrection+0x4e8>)
   8984a:	6819      	ldr	r1, [r3, #0]
   8984c:	4b1d      	ldr	r3, [pc, #116]	; (898c4 <Coarse_DutyCorrection+0x4ec>)
   8984e:	4610      	mov	r0, r2
   89850:	4798      	blx	r3
   89852:	4603      	mov	r3, r0
   89854:	2b00      	cmp	r3, #0
   89856:	d00b      	beq.n	89870 <Coarse_DutyCorrection+0x498>
			{
				avg_duty = avg_duty + duty_count;            
   89858:	4b1b      	ldr	r3, [pc, #108]	; (898c8 <Coarse_DutyCorrection+0x4f0>)
   8985a:	781b      	ldrb	r3, [r3, #0]
   8985c:	b29a      	uxth	r2, r3
   8985e:	4b1b      	ldr	r3, [pc, #108]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89860:	f9b3 3000 	ldrsh.w	r3, [r3]
   89864:	b29b      	uxth	r3, r3
   89866:	4413      	add	r3, r2
   89868:	b29b      	uxth	r3, r3
   8986a:	b21a      	sxth	r2, r3
   8986c:	4b17      	ldr	r3, [pc, #92]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8986e:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89870:	4b16      	ldr	r3, [pc, #88]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89872:	f9b3 3000 	ldrsh.w	r3, [r3]
   89876:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8987a:	4293      	cmp	r3, r2
   8987c:	dd10      	ble.n	898a0 <Coarse_DutyCorrection+0x4c8>
			{
				avg_duty = 2500;
   8987e:	4b13      	ldr	r3, [pc, #76]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89880:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89884:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89886:	4b13      	ldr	r3, [pc, #76]	; (898d4 <Coarse_DutyCorrection+0x4fc>)
   89888:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8988a:	e009      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)
   8988c:	4b05      	ldr	r3, [pc, #20]	; (898a4 <Coarse_DutyCorrection+0x4cc>)
   8988e:	781b      	ldrb	r3, [r3, #0]
   89890:	2b02      	cmp	r3, #2
   89892:	d105      	bne.n	898a0 <Coarse_DutyCorrection+0x4c8>
// 			{
// 				avg_duty = avg_duty + 10;
// 			}
// 	   }
	
		avg_duty = avg_duty;
   89894:	4b0d      	ldr	r3, [pc, #52]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   89896:	f9b3 2000 	ldrsh.w	r2, [r3]
   8989a:	4b0c      	ldr	r3, [pc, #48]	; (898cc <Coarse_DutyCorrection+0x4f4>)
   8989c:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
}
   8989e:	e7ff      	b.n	898a0 <Coarse_DutyCorrection+0x4c8>
   898a0:	bf00      	nop
   898a2:	bd98      	pop	{r3, r4, r7, pc}
   898a4:	20072d8a 	.word	0x20072d8a
   898a8:	20072150 	.word	0x20072150
   898ac:	000a37a1 	.word	0x000a37a1
   898b0:	42140000 	.word	0x42140000
   898b4:	2007214c 	.word	0x2007214c
   898b8:	42100000 	.word	0x42100000
   898bc:	20072154 	.word	0x20072154
   898c0:	20070480 	.word	0x20070480
   898c4:	000a378d 	.word	0x000a378d
   898c8:	20072170 	.word	0x20072170
   898cc:	2007213e 	.word	0x2007213e
   898d0:	000a37b5 	.word	0x000a37b5
   898d4:	000974dd 	.word	0x000974dd
   898d8:	20070484 	.word	0x20070484
   898dc:	42280000 	.word	0x42280000
   898e0:	42200000 	.word	0x42200000
   898e4:	00000000 	.word	0x00000000

000898e8 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   898e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   898ea:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   898ec:	4b86      	ldr	r3, [pc, #536]	; (89b08 <Fine_DutyCorrection+0x220>)
   898ee:	681a      	ldr	r2, [r3, #0]
   898f0:	4b86      	ldr	r3, [pc, #536]	; (89b0c <Fine_DutyCorrection+0x224>)
   898f2:	4610      	mov	r0, r2
   898f4:	4798      	blx	r3
   898f6:	4c86      	ldr	r4, [pc, #536]	; (89b10 <Fine_DutyCorrection+0x228>)
   898f8:	a37f      	add	r3, pc, #508	; (adr r3, 89af8 <Fine_DutyCorrection+0x210>)
   898fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   898fe:	47a0      	blx	r4
   89900:	4603      	mov	r3, r0
   89902:	2b00      	cmp	r3, #0
   89904:	d002      	beq.n	8990c <Fine_DutyCorrection+0x24>
	{
		duty_count = 42;												
   89906:	4b83      	ldr	r3, [pc, #524]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89908:	222a      	movs	r2, #42	; 0x2a
   8990a:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8990c:	4b7e      	ldr	r3, [pc, #504]	; (89b08 <Fine_DutyCorrection+0x220>)
   8990e:	681a      	ldr	r2, [r3, #0]
   89910:	4b7e      	ldr	r3, [pc, #504]	; (89b0c <Fine_DutyCorrection+0x224>)
   89912:	4610      	mov	r0, r2
   89914:	4798      	blx	r3
   89916:	4c7e      	ldr	r4, [pc, #504]	; (89b10 <Fine_DutyCorrection+0x228>)
   89918:	a379      	add	r3, pc, #484	; (adr r3, 89b00 <Fine_DutyCorrection+0x218>)
   8991a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8991e:	47a0      	blx	r4
   89920:	4603      	mov	r3, r0
   89922:	2b00      	cmp	r3, #0
   89924:	d00f      	beq.n	89946 <Fine_DutyCorrection+0x5e>
   89926:	4b78      	ldr	r3, [pc, #480]	; (89b08 <Fine_DutyCorrection+0x220>)
   89928:	681a      	ldr	r2, [r3, #0]
   8992a:	4b78      	ldr	r3, [pc, #480]	; (89b0c <Fine_DutyCorrection+0x224>)
   8992c:	4610      	mov	r0, r2
   8992e:	4798      	blx	r3
   89930:	4c79      	ldr	r4, [pc, #484]	; (89b18 <Fine_DutyCorrection+0x230>)
   89932:	a371      	add	r3, pc, #452	; (adr r3, 89af8 <Fine_DutyCorrection+0x210>)
   89934:	e9d3 2300 	ldrd	r2, r3, [r3]
   89938:	47a0      	blx	r4
   8993a:	4603      	mov	r3, r0
   8993c:	2b00      	cmp	r3, #0
   8993e:	d002      	beq.n	89946 <Fine_DutyCorrection+0x5e>
	{
		duty_count = 20;
   89940:	4b74      	ldr	r3, [pc, #464]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89942:	2214      	movs	r2, #20
   89944:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   89946:	4b70      	ldr	r3, [pc, #448]	; (89b08 <Fine_DutyCorrection+0x220>)
   89948:	681a      	ldr	r2, [r3, #0]
   8994a:	4b70      	ldr	r3, [pc, #448]	; (89b0c <Fine_DutyCorrection+0x224>)
   8994c:	4610      	mov	r0, r2
   8994e:	4798      	blx	r3
   89950:	4c72      	ldr	r4, [pc, #456]	; (89b1c <Fine_DutyCorrection+0x234>)
   89952:	a36b      	add	r3, pc, #428	; (adr r3, 89b00 <Fine_DutyCorrection+0x218>)
   89954:	e9d3 2300 	ldrd	r2, r3, [r3]
   89958:	47a0      	blx	r4
   8995a:	4603      	mov	r3, r0
   8995c:	2b00      	cmp	r3, #0
   8995e:	d002      	beq.n	89966 <Fine_DutyCorrection+0x7e>
	{
		duty_count = 4;
   89960:	4b6c      	ldr	r3, [pc, #432]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89962:	2204      	movs	r2, #4
   89964:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 800)
   89966:	4b6e      	ldr	r3, [pc, #440]	; (89b20 <Fine_DutyCorrection+0x238>)
   89968:	681b      	ldr	r3, [r3, #0]
   8996a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8996e:	f040 808d 	bne.w	89a8c <Fine_DutyCorrection+0x1a4>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   89972:	4b6c      	ldr	r3, [pc, #432]	; (89b24 <Fine_DutyCorrection+0x23c>)
   89974:	781b      	ldrb	r3, [r3, #0]
   89976:	2b00      	cmp	r3, #0
   89978:	d129      	bne.n	899ce <Fine_DutyCorrection+0xe6>
   8997a:	4b6b      	ldr	r3, [pc, #428]	; (89b28 <Fine_DutyCorrection+0x240>)
   8997c:	681a      	ldr	r2, [r3, #0]
   8997e:	4b6b      	ldr	r3, [pc, #428]	; (89b2c <Fine_DutyCorrection+0x244>)
   89980:	496b      	ldr	r1, [pc, #428]	; (89b30 <Fine_DutyCorrection+0x248>)
   89982:	4610      	mov	r0, r2
   89984:	4798      	blx	r3
   89986:	4603      	mov	r3, r0
   89988:	2b00      	cmp	r3, #0
   8998a:	d020      	beq.n	899ce <Fine_DutyCorrection+0xe6>
   8998c:	4b69      	ldr	r3, [pc, #420]	; (89b34 <Fine_DutyCorrection+0x24c>)
   8998e:	681a      	ldr	r2, [r3, #0]
   89990:	4b66      	ldr	r3, [pc, #408]	; (89b2c <Fine_DutyCorrection+0x244>)
   89992:	4967      	ldr	r1, [pc, #412]	; (89b30 <Fine_DutyCorrection+0x248>)
   89994:	4610      	mov	r0, r2
   89996:	4798      	blx	r3
   89998:	4603      	mov	r3, r0
   8999a:	2b00      	cmp	r3, #0
   8999c:	d017      	beq.n	899ce <Fine_DutyCorrection+0xe6>
		{
			avg_duty = avg_duty - duty_count;
   8999e:	4b66      	ldr	r3, [pc, #408]	; (89b38 <Fine_DutyCorrection+0x250>)
   899a0:	f9b3 3000 	ldrsh.w	r3, [r3]
   899a4:	b29a      	uxth	r2, r3
   899a6:	4b5b      	ldr	r3, [pc, #364]	; (89b14 <Fine_DutyCorrection+0x22c>)
   899a8:	781b      	ldrb	r3, [r3, #0]
   899aa:	b29b      	uxth	r3, r3
   899ac:	1ad3      	subs	r3, r2, r3
   899ae:	b29b      	uxth	r3, r3
   899b0:	b21a      	sxth	r2, r3
   899b2:	4b61      	ldr	r3, [pc, #388]	; (89b38 <Fine_DutyCorrection+0x250>)
   899b4:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   899b6:	4b60      	ldr	r3, [pc, #384]	; (89b38 <Fine_DutyCorrection+0x250>)
   899b8:	f9b3 3000 	ldrsh.w	r3, [r3]
   899bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   899c0:	f300 826c 	bgt.w	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   899c4:	4b5c      	ldr	r3, [pc, #368]	; (89b38 <Fine_DutyCorrection+0x250>)
   899c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   899ca:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   899cc:	e266      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 35) && (Tmp2Val <= 38.5)) && (Tmp3Val <= 37.5) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   899ce:	4b55      	ldr	r3, [pc, #340]	; (89b24 <Fine_DutyCorrection+0x23c>)
   899d0:	781b      	ldrb	r3, [r3, #0]
   899d2:	2b00      	cmp	r3, #0
   899d4:	d127      	bne.n	89a26 <Fine_DutyCorrection+0x13e>
   899d6:	4b54      	ldr	r3, [pc, #336]	; (89b28 <Fine_DutyCorrection+0x240>)
   899d8:	681a      	ldr	r2, [r3, #0]
   899da:	4b54      	ldr	r3, [pc, #336]	; (89b2c <Fine_DutyCorrection+0x244>)
   899dc:	4957      	ldr	r1, [pc, #348]	; (89b3c <Fine_DutyCorrection+0x254>)
   899de:	4610      	mov	r0, r2
   899e0:	4798      	blx	r3
   899e2:	4603      	mov	r3, r0
   899e4:	2b00      	cmp	r3, #0
   899e6:	d01e      	beq.n	89a26 <Fine_DutyCorrection+0x13e>
   899e8:	4b4f      	ldr	r3, [pc, #316]	; (89b28 <Fine_DutyCorrection+0x240>)
   899ea:	681a      	ldr	r2, [r3, #0]
   899ec:	4b54      	ldr	r3, [pc, #336]	; (89b40 <Fine_DutyCorrection+0x258>)
   899ee:	4955      	ldr	r1, [pc, #340]	; (89b44 <Fine_DutyCorrection+0x25c>)
   899f0:	4610      	mov	r0, r2
   899f2:	4798      	blx	r3
   899f4:	4603      	mov	r3, r0
   899f6:	2b00      	cmp	r3, #0
   899f8:	d015      	beq.n	89a26 <Fine_DutyCorrection+0x13e>
   899fa:	4b4e      	ldr	r3, [pc, #312]	; (89b34 <Fine_DutyCorrection+0x24c>)
   899fc:	681a      	ldr	r2, [r3, #0]
   899fe:	4b50      	ldr	r3, [pc, #320]	; (89b40 <Fine_DutyCorrection+0x258>)
   89a00:	494b      	ldr	r1, [pc, #300]	; (89b30 <Fine_DutyCorrection+0x248>)
   89a02:	4610      	mov	r0, r2
   89a04:	4798      	blx	r3
   89a06:	4603      	mov	r3, r0
   89a08:	2b00      	cmp	r3, #0
   89a0a:	d00c      	beq.n	89a26 <Fine_DutyCorrection+0x13e>
		{																						// earlier value 38 chged on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89a0c:	4b41      	ldr	r3, [pc, #260]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89a0e:	781b      	ldrb	r3, [r3, #0]
   89a10:	b29a      	uxth	r2, r3
   89a12:	4b49      	ldr	r3, [pc, #292]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a14:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a18:	b29b      	uxth	r3, r3
   89a1a:	4413      	add	r3, r2
   89a1c:	b29b      	uxth	r3, r3
   89a1e:	b21a      	sxth	r2, r3
   89a20:	4b45      	ldr	r3, [pc, #276]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a22:	801a      	strh	r2, [r3, #0]
   89a24:	e23a      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
   89a26:	4b3f      	ldr	r3, [pc, #252]	; (89b24 <Fine_DutyCorrection+0x23c>)
   89a28:	781b      	ldrb	r3, [r3, #0]
   89a2a:	2b01      	cmp	r3, #1
   89a2c:	d123      	bne.n	89a76 <Fine_DutyCorrection+0x18e>
   89a2e:	4b3e      	ldr	r3, [pc, #248]	; (89b28 <Fine_DutyCorrection+0x240>)
   89a30:	681a      	ldr	r2, [r3, #0]
   89a32:	4b43      	ldr	r3, [pc, #268]	; (89b40 <Fine_DutyCorrection+0x258>)
   89a34:	493e      	ldr	r1, [pc, #248]	; (89b30 <Fine_DutyCorrection+0x248>)
   89a36:	4610      	mov	r0, r2
   89a38:	4798      	blx	r3
   89a3a:	4603      	mov	r3, r0
   89a3c:	2b00      	cmp	r3, #0
   89a3e:	d01a      	beq.n	89a76 <Fine_DutyCorrection+0x18e>
		{
			avg_duty = avg_duty + duty_count;
   89a40:	4b34      	ldr	r3, [pc, #208]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89a42:	781b      	ldrb	r3, [r3, #0]
   89a44:	b29a      	uxth	r2, r3
   89a46:	4b3c      	ldr	r3, [pc, #240]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a48:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a4c:	b29b      	uxth	r3, r3
   89a4e:	4413      	add	r3, r2
   89a50:	b29b      	uxth	r3, r3
   89a52:	b21a      	sxth	r2, r3
   89a54:	4b38      	ldr	r3, [pc, #224]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a56:	801a      	strh	r2, [r3, #0]
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89a58:	4b37      	ldr	r3, [pc, #220]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
   89a5e:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89a62:	4293      	cmp	r3, r2
   89a64:	f340 821a 	ble.w	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 2300;
   89a68:	4b33      	ldr	r3, [pc, #204]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a6a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89a6e:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89a70:	4b35      	ldr	r3, [pc, #212]	; (89b48 <Fine_DutyCorrection+0x260>)
   89a72:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )
		{
			avg_duty = avg_duty + duty_count;
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89a74:	e212      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89a76:	4b2b      	ldr	r3, [pc, #172]	; (89b24 <Fine_DutyCorrection+0x23c>)
   89a78:	781b      	ldrb	r3, [r3, #0]
   89a7a:	2b02      	cmp	r3, #2
   89a7c:	f040 820e 	bne.w	89e9c <Fine_DutyCorrection+0x5b4>
				avg_duty = avg_duty;
   89a80:	4b2d      	ldr	r3, [pc, #180]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a82:	f9b3 2000 	ldrsh.w	r2, [r3]
   89a86:	4b2c      	ldr	r3, [pc, #176]	; (89b38 <Fine_DutyCorrection+0x250>)
   89a88:	801a      	strh	r2, [r3, #0]
// 		}
	  avg_duty = avg_duty;
	}
	
	
}
   89a8a:	e207      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
				avg_duty = avg_duty;
	}
	else if (SYSTEM_FLOW == 500)
   89a8c:	4b24      	ldr	r3, [pc, #144]	; (89b20 <Fine_DutyCorrection+0x238>)
   89a8e:	681b      	ldr	r3, [r3, #0]
   89a90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89a94:	f040 80de 	bne.w	89c54 <Fine_DutyCorrection+0x36c>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   89a98:	4b22      	ldr	r3, [pc, #136]	; (89b24 <Fine_DutyCorrection+0x23c>)
   89a9a:	781b      	ldrb	r3, [r3, #0]
   89a9c:	2b00      	cmp	r3, #0
   89a9e:	d155      	bne.n	89b4c <Fine_DutyCorrection+0x264>
   89aa0:	4b21      	ldr	r3, [pc, #132]	; (89b28 <Fine_DutyCorrection+0x240>)
   89aa2:	681a      	ldr	r2, [r3, #0]
   89aa4:	4b21      	ldr	r3, [pc, #132]	; (89b2c <Fine_DutyCorrection+0x244>)
   89aa6:	4922      	ldr	r1, [pc, #136]	; (89b30 <Fine_DutyCorrection+0x248>)
   89aa8:	4610      	mov	r0, r2
   89aaa:	4798      	blx	r3
   89aac:	4603      	mov	r3, r0
   89aae:	2b00      	cmp	r3, #0
   89ab0:	d04c      	beq.n	89b4c <Fine_DutyCorrection+0x264>
   89ab2:	4b20      	ldr	r3, [pc, #128]	; (89b34 <Fine_DutyCorrection+0x24c>)
   89ab4:	681a      	ldr	r2, [r3, #0]
   89ab6:	4b1d      	ldr	r3, [pc, #116]	; (89b2c <Fine_DutyCorrection+0x244>)
   89ab8:	491d      	ldr	r1, [pc, #116]	; (89b30 <Fine_DutyCorrection+0x248>)
   89aba:	4610      	mov	r0, r2
   89abc:	4798      	blx	r3
   89abe:	4603      	mov	r3, r0
   89ac0:	2b00      	cmp	r3, #0
   89ac2:	d043      	beq.n	89b4c <Fine_DutyCorrection+0x264>
		{
			avg_duty = avg_duty - duty_count;
   89ac4:	4b1c      	ldr	r3, [pc, #112]	; (89b38 <Fine_DutyCorrection+0x250>)
   89ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
   89aca:	b29a      	uxth	r2, r3
   89acc:	4b11      	ldr	r3, [pc, #68]	; (89b14 <Fine_DutyCorrection+0x22c>)
   89ace:	781b      	ldrb	r3, [r3, #0]
   89ad0:	b29b      	uxth	r3, r3
   89ad2:	1ad3      	subs	r3, r2, r3
   89ad4:	b29b      	uxth	r3, r3
   89ad6:	b21a      	sxth	r2, r3
   89ad8:	4b17      	ldr	r3, [pc, #92]	; (89b38 <Fine_DutyCorrection+0x250>)
   89ada:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89adc:	4b16      	ldr	r3, [pc, #88]	; (89b38 <Fine_DutyCorrection+0x250>)
   89ade:	f9b3 3000 	ldrsh.w	r3, [r3]
   89ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89ae6:	f300 81d9 	bgt.w	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   89aea:	4b13      	ldr	r3, [pc, #76]	; (89b38 <Fine_DutyCorrection+0x250>)
   89aec:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89af0:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= 37.5) && (Tmp3Val >= 37.5))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89af2:	e1d3      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
   89af4:	f3af 8000 	nop.w
   89af8:	eb851eb8 	.word	0xeb851eb8
   89afc:	3f9eb851 	.word	0x3f9eb851
   89b00:	33333333 	.word	0x33333333
   89b04:	3fd33333 	.word	0x3fd33333
   89b08:	2007216c 	.word	0x2007216c
   89b0c:	000a2b29 	.word	0x000a2b29
   89b10:	000a30c9 	.word	0x000a30c9
   89b14:	20072170 	.word	0x20072170
   89b18:	000a30f1 	.word	0x000a30f1
   89b1c:	000a30dd 	.word	0x000a30dd
   89b20:	20070484 	.word	0x20070484
   89b24:	20072d8a 	.word	0x20072d8a
   89b28:	20072150 	.word	0x20072150
   89b2c:	000a37b5 	.word	0x000a37b5
   89b30:	42160000 	.word	0x42160000
   89b34:	20072154 	.word	0x20072154
   89b38:	2007213e 	.word	0x2007213e
   89b3c:	420c0000 	.word	0x420c0000
   89b40:	000a37a1 	.word	0x000a37a1
   89b44:	421a0000 	.word	0x421a0000
   89b48:	000974dd 	.word	0x000974dd
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 35) && (Tmp2Val <= 38.5)) && (Tmp3Val <= 37.5) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   89b4c:	4b92      	ldr	r3, [pc, #584]	; (89d98 <Fine_DutyCorrection+0x4b0>)
   89b4e:	781b      	ldrb	r3, [r3, #0]
   89b50:	2b00      	cmp	r3, #0
   89b52:	d127      	bne.n	89ba4 <Fine_DutyCorrection+0x2bc>
   89b54:	4b91      	ldr	r3, [pc, #580]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89b56:	681a      	ldr	r2, [r3, #0]
   89b58:	4b91      	ldr	r3, [pc, #580]	; (89da0 <Fine_DutyCorrection+0x4b8>)
   89b5a:	4992      	ldr	r1, [pc, #584]	; (89da4 <Fine_DutyCorrection+0x4bc>)
   89b5c:	4610      	mov	r0, r2
   89b5e:	4798      	blx	r3
   89b60:	4603      	mov	r3, r0
   89b62:	2b00      	cmp	r3, #0
   89b64:	d01e      	beq.n	89ba4 <Fine_DutyCorrection+0x2bc>
   89b66:	4b8d      	ldr	r3, [pc, #564]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89b68:	681a      	ldr	r2, [r3, #0]
   89b6a:	4b8f      	ldr	r3, [pc, #572]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89b6c:	498f      	ldr	r1, [pc, #572]	; (89dac <Fine_DutyCorrection+0x4c4>)
   89b6e:	4610      	mov	r0, r2
   89b70:	4798      	blx	r3
   89b72:	4603      	mov	r3, r0
   89b74:	2b00      	cmp	r3, #0
   89b76:	d015      	beq.n	89ba4 <Fine_DutyCorrection+0x2bc>
   89b78:	4b8d      	ldr	r3, [pc, #564]	; (89db0 <Fine_DutyCorrection+0x4c8>)
   89b7a:	681a      	ldr	r2, [r3, #0]
   89b7c:	4b8a      	ldr	r3, [pc, #552]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89b7e:	498d      	ldr	r1, [pc, #564]	; (89db4 <Fine_DutyCorrection+0x4cc>)
   89b80:	4610      	mov	r0, r2
   89b82:	4798      	blx	r3
   89b84:	4603      	mov	r3, r0
   89b86:	2b00      	cmp	r3, #0
   89b88:	d00c      	beq.n	89ba4 <Fine_DutyCorrection+0x2bc>
		{																                          //38    changed on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89b8a:	4b8b      	ldr	r3, [pc, #556]	; (89db8 <Fine_DutyCorrection+0x4d0>)
   89b8c:	781b      	ldrb	r3, [r3, #0]
   89b8e:	b29a      	uxth	r2, r3
   89b90:	4b8a      	ldr	r3, [pc, #552]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89b92:	f9b3 3000 	ldrsh.w	r3, [r3]
   89b96:	b29b      	uxth	r3, r3
   89b98:	4413      	add	r3, r2
   89b9a:	b29b      	uxth	r3, r3
   89b9c:	b21a      	sxth	r2, r3
   89b9e:	4b87      	ldr	r3, [pc, #540]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89ba0:	801a      	strh	r2, [r3, #0]
   89ba2:	e17b      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 37.5) )  
   89ba4:	4b7c      	ldr	r3, [pc, #496]	; (89d98 <Fine_DutyCorrection+0x4b0>)
   89ba6:	781b      	ldrb	r3, [r3, #0]
   89ba8:	2b01      	cmp	r3, #1
   89baa:	d148      	bne.n	89c3e <Fine_DutyCorrection+0x356>
   89bac:	4b7b      	ldr	r3, [pc, #492]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89bae:	681a      	ldr	r2, [r3, #0]
   89bb0:	4b7d      	ldr	r3, [pc, #500]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89bb2:	4980      	ldr	r1, [pc, #512]	; (89db4 <Fine_DutyCorrection+0x4cc>)
   89bb4:	4610      	mov	r0, r2
   89bb6:	4798      	blx	r3
   89bb8:	4603      	mov	r3, r0
   89bba:	2b00      	cmp	r3, #0
   89bbc:	d03f      	beq.n	89c3e <Fine_DutyCorrection+0x356>
		{
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89bbe:	4b80      	ldr	r3, [pc, #512]	; (89dc0 <Fine_DutyCorrection+0x4d8>)
   89bc0:	681a      	ldr	r2, [r3, #0]
   89bc2:	4b79      	ldr	r3, [pc, #484]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89bc4:	497f      	ldr	r1, [pc, #508]	; (89dc4 <Fine_DutyCorrection+0x4dc>)
   89bc6:	4610      	mov	r0, r2
   89bc8:	4798      	blx	r3
   89bca:	4603      	mov	r3, r0
   89bcc:	2b00      	cmp	r3, #0
   89bce:	d027      	beq.n	89c20 <Fine_DutyCorrection+0x338>
   89bd0:	4b77      	ldr	r3, [pc, #476]	; (89db0 <Fine_DutyCorrection+0x4c8>)
   89bd2:	681a      	ldr	r2, [r3, #0]
   89bd4:	4b7c      	ldr	r3, [pc, #496]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89bd6:	4610      	mov	r0, r2
   89bd8:	4798      	blx	r3
   89bda:	4605      	mov	r5, r0
   89bdc:	460e      	mov	r6, r1
   89bde:	4b7b      	ldr	r3, [pc, #492]	; (89dcc <Fine_DutyCorrection+0x4e4>)
   89be0:	681a      	ldr	r2, [r3, #0]
   89be2:	4b79      	ldr	r3, [pc, #484]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89be4:	4610      	mov	r0, r2
   89be6:	4798      	blx	r3
   89be8:	4c79      	ldr	r4, [pc, #484]	; (89dd0 <Fine_DutyCorrection+0x4e8>)
   89bea:	a369      	add	r3, pc, #420	; (adr r3, 89d90 <Fine_DutyCorrection+0x4a8>)
   89bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bf0:	47a0      	blx	r4
   89bf2:	4603      	mov	r3, r0
   89bf4:	460c      	mov	r4, r1
   89bf6:	461a      	mov	r2, r3
   89bf8:	4623      	mov	r3, r4
   89bfa:	4c76      	ldr	r4, [pc, #472]	; (89dd4 <Fine_DutyCorrection+0x4ec>)
   89bfc:	4628      	mov	r0, r5
   89bfe:	4631      	mov	r1, r6
   89c00:	47a0      	blx	r4
   89c02:	4603      	mov	r3, r0
   89c04:	2b00      	cmp	r3, #0
   89c06:	d00b      	beq.n	89c20 <Fine_DutyCorrection+0x338>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89c08:	4b6b      	ldr	r3, [pc, #428]	; (89db8 <Fine_DutyCorrection+0x4d0>)
   89c0a:	781b      	ldrb	r3, [r3, #0]
   89c0c:	b29a      	uxth	r2, r3
   89c0e:	4b6b      	ldr	r3, [pc, #428]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c10:	f9b3 3000 	ldrsh.w	r3, [r3]
   89c14:	b29b      	uxth	r3, r3
   89c16:	4413      	add	r3, r2
   89c18:	b29b      	uxth	r3, r3
   89c1a:	b21a      	sxth	r2, r3
   89c1c:	4b67      	ldr	r3, [pc, #412]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c1e:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89c20:	4b66      	ldr	r3, [pc, #408]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c22:	f9b3 3000 	ldrsh.w	r3, [r3]
   89c26:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89c2a:	4293      	cmp	r3, r2
   89c2c:	f340 8136 	ble.w	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 2300;
   89c30:	4b62      	ldr	r3, [pc, #392]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c32:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89c36:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89c38:	4b67      	ldr	r3, [pc, #412]	; (89dd8 <Fine_DutyCorrection+0x4f0>)
   89c3a:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   89c3c:	e12e      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89c3e:	4b56      	ldr	r3, [pc, #344]	; (89d98 <Fine_DutyCorrection+0x4b0>)
   89c40:	781b      	ldrb	r3, [r3, #0]
   89c42:	2b02      	cmp	r3, #2
   89c44:	f040 812a 	bne.w	89e9c <Fine_DutyCorrection+0x5b4>
				avg_duty = avg_duty;
   89c48:	4b5c      	ldr	r3, [pc, #368]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c4a:	f9b3 2000 	ldrsh.w	r2, [r3]
   89c4e:	4b5b      	ldr	r3, [pc, #364]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89c50:	801a      	strh	r2, [r3, #0]
// 		}
	  avg_duty = avg_duty;
	}
	
	
}
   89c52:	e123      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
				avg_duty = avg_duty;
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   89c54:	4b61      	ldr	r3, [pc, #388]	; (89ddc <Fine_DutyCorrection+0x4f4>)
   89c56:	681b      	ldr	r3, [r3, #0]
   89c58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89c5c:	f040 811e 	bne.w	89e9c <Fine_DutyCorrection+0x5b4>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= 41)) && (Tmp3Val >= (Prescribed_T3 + 0.2))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   89c60:	4b4d      	ldr	r3, [pc, #308]	; (89d98 <Fine_DutyCorrection+0x4b0>)
   89c62:	781b      	ldrb	r3, [r3, #0]
   89c64:	2b00      	cmp	r3, #0
   89c66:	d147      	bne.n	89cf8 <Fine_DutyCorrection+0x410>
   89c68:	4b4c      	ldr	r3, [pc, #304]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89c6a:	681a      	ldr	r2, [r3, #0]
   89c6c:	4b4c      	ldr	r3, [pc, #304]	; (89da0 <Fine_DutyCorrection+0x4b8>)
   89c6e:	495c      	ldr	r1, [pc, #368]	; (89de0 <Fine_DutyCorrection+0x4f8>)
   89c70:	4610      	mov	r0, r2
   89c72:	4798      	blx	r3
   89c74:	4603      	mov	r3, r0
   89c76:	2b00      	cmp	r3, #0
   89c78:	d03e      	beq.n	89cf8 <Fine_DutyCorrection+0x410>
   89c7a:	4b4d      	ldr	r3, [pc, #308]	; (89db0 <Fine_DutyCorrection+0x4c8>)
   89c7c:	681a      	ldr	r2, [r3, #0]
   89c7e:	4b52      	ldr	r3, [pc, #328]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89c80:	4610      	mov	r0, r2
   89c82:	4798      	blx	r3
   89c84:	4605      	mov	r5, r0
   89c86:	460e      	mov	r6, r1
   89c88:	4b50      	ldr	r3, [pc, #320]	; (89dcc <Fine_DutyCorrection+0x4e4>)
   89c8a:	681a      	ldr	r2, [r3, #0]
   89c8c:	4b4e      	ldr	r3, [pc, #312]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89c8e:	4610      	mov	r0, r2
   89c90:	4798      	blx	r3
   89c92:	4c4f      	ldr	r4, [pc, #316]	; (89dd0 <Fine_DutyCorrection+0x4e8>)
   89c94:	a33e      	add	r3, pc, #248	; (adr r3, 89d90 <Fine_DutyCorrection+0x4a8>)
   89c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c9a:	47a0      	blx	r4
   89c9c:	4603      	mov	r3, r0
   89c9e:	460c      	mov	r4, r1
   89ca0:	461a      	mov	r2, r3
   89ca2:	4623      	mov	r3, r4
   89ca4:	4c4f      	ldr	r4, [pc, #316]	; (89de4 <Fine_DutyCorrection+0x4fc>)
   89ca6:	4628      	mov	r0, r5
   89ca8:	4631      	mov	r1, r6
   89caa:	47a0      	blx	r4
   89cac:	4603      	mov	r3, r0
   89cae:	2b00      	cmp	r3, #0
   89cb0:	d022      	beq.n	89cf8 <Fine_DutyCorrection+0x410>
									     //Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
   89cb2:	4b42      	ldr	r3, [pc, #264]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
   89cb8:	b29a      	uxth	r2, r3
   89cba:	4b3f      	ldr	r3, [pc, #252]	; (89db8 <Fine_DutyCorrection+0x4d0>)
   89cbc:	781b      	ldrb	r3, [r3, #0]
   89cbe:	b29b      	uxth	r3, r3
   89cc0:	1ad3      	subs	r3, r2, r3
   89cc2:	b29b      	uxth	r3, r3
   89cc4:	b21a      	sxth	r2, r3
   89cc6:	4b3d      	ldr	r3, [pc, #244]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89cc8:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89cca:	4b3c      	ldr	r3, [pc, #240]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
   89cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89cd4:	f300 80e2 	bgt.w	89e9c <Fine_DutyCorrection+0x5b4>
   89cd8:	4b35      	ldr	r3, [pc, #212]	; (89db0 <Fine_DutyCorrection+0x4c8>)
   89cda:	681a      	ldr	r2, [r3, #0]
   89cdc:	4b3b      	ldr	r3, [pc, #236]	; (89dcc <Fine_DutyCorrection+0x4e4>)
   89cde:	6819      	ldr	r1, [r3, #0]
   89ce0:	4b41      	ldr	r3, [pc, #260]	; (89de8 <Fine_DutyCorrection+0x500>)
   89ce2:	4610      	mov	r0, r2
   89ce4:	4798      	blx	r3
   89ce6:	4603      	mov	r3, r0
   89ce8:	2b00      	cmp	r3, #0
   89cea:	d100      	bne.n	89cee <Fine_DutyCorrection+0x406>
   89cec:	e0d6      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   89cee:	4b33      	ldr	r3, [pc, #204]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89cf0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89cf4:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= 41)) && (Tmp3Val >= (Prescribed_T3 + 0.2))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
									     //Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89cf6:	e0d1      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 38) && (Tmp2Val <= 41)) && (Tmp3Val < (Prescribed_T3 +0.2))) // Gopal added TS3 check as to increase duty if ts3 goes below 38
   89cf8:	4b27      	ldr	r3, [pc, #156]	; (89d98 <Fine_DutyCorrection+0x4b0>)
   89cfa:	781b      	ldrb	r3, [r3, #0]
   89cfc:	2b00      	cmp	r3, #0
   89cfe:	d177      	bne.n	89df0 <Fine_DutyCorrection+0x508>
   89d00:	4b26      	ldr	r3, [pc, #152]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89d02:	681a      	ldr	r2, [r3, #0]
   89d04:	4b26      	ldr	r3, [pc, #152]	; (89da0 <Fine_DutyCorrection+0x4b8>)
   89d06:	4939      	ldr	r1, [pc, #228]	; (89dec <Fine_DutyCorrection+0x504>)
   89d08:	4610      	mov	r0, r2
   89d0a:	4798      	blx	r3
   89d0c:	4603      	mov	r3, r0
   89d0e:	2b00      	cmp	r3, #0
   89d10:	d06e      	beq.n	89df0 <Fine_DutyCorrection+0x508>
   89d12:	4b22      	ldr	r3, [pc, #136]	; (89d9c <Fine_DutyCorrection+0x4b4>)
   89d14:	681a      	ldr	r2, [r3, #0]
   89d16:	4b24      	ldr	r3, [pc, #144]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89d18:	4931      	ldr	r1, [pc, #196]	; (89de0 <Fine_DutyCorrection+0x4f8>)
   89d1a:	4610      	mov	r0, r2
   89d1c:	4798      	blx	r3
   89d1e:	4603      	mov	r3, r0
   89d20:	2b00      	cmp	r3, #0
   89d22:	d065      	beq.n	89df0 <Fine_DutyCorrection+0x508>
   89d24:	4b22      	ldr	r3, [pc, #136]	; (89db0 <Fine_DutyCorrection+0x4c8>)
   89d26:	681a      	ldr	r2, [r3, #0]
   89d28:	4b27      	ldr	r3, [pc, #156]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89d2a:	4610      	mov	r0, r2
   89d2c:	4798      	blx	r3
   89d2e:	4605      	mov	r5, r0
   89d30:	460e      	mov	r6, r1
   89d32:	4b26      	ldr	r3, [pc, #152]	; (89dcc <Fine_DutyCorrection+0x4e4>)
   89d34:	681a      	ldr	r2, [r3, #0]
   89d36:	4b24      	ldr	r3, [pc, #144]	; (89dc8 <Fine_DutyCorrection+0x4e0>)
   89d38:	4610      	mov	r0, r2
   89d3a:	4798      	blx	r3
   89d3c:	4c24      	ldr	r4, [pc, #144]	; (89dd0 <Fine_DutyCorrection+0x4e8>)
   89d3e:	a314      	add	r3, pc, #80	; (adr r3, 89d90 <Fine_DutyCorrection+0x4a8>)
   89d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   89d44:	47a0      	blx	r4
   89d46:	4603      	mov	r3, r0
   89d48:	460c      	mov	r4, r1
   89d4a:	461a      	mov	r2, r3
   89d4c:	4623      	mov	r3, r4
   89d4e:	4c21      	ldr	r4, [pc, #132]	; (89dd4 <Fine_DutyCorrection+0x4ec>)
   89d50:	4628      	mov	r0, r5
   89d52:	4631      	mov	r1, r6
   89d54:	47a0      	blx	r4
   89d56:	4603      	mov	r3, r0
   89d58:	2b00      	cmp	r3, #0
   89d5a:	d049      	beq.n	89df0 <Fine_DutyCorrection+0x508>
		{                                           // 37                  41 020817                  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89d5c:	4b18      	ldr	r3, [pc, #96]	; (89dc0 <Fine_DutyCorrection+0x4d8>)
   89d5e:	681a      	ldr	r2, [r3, #0]
   89d60:	4b11      	ldr	r3, [pc, #68]	; (89da8 <Fine_DutyCorrection+0x4c0>)
   89d62:	4918      	ldr	r1, [pc, #96]	; (89dc4 <Fine_DutyCorrection+0x4dc>)
   89d64:	4610      	mov	r0, r2
   89d66:	4798      	blx	r3
   89d68:	4603      	mov	r3, r0
   89d6a:	2b00      	cmp	r3, #0
   89d6c:	f000 8096 	beq.w	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89d70:	4b11      	ldr	r3, [pc, #68]	; (89db8 <Fine_DutyCorrection+0x4d0>)
   89d72:	781b      	ldrb	r3, [r3, #0]
   89d74:	b29a      	uxth	r2, r3
   89d76:	4b11      	ldr	r3, [pc, #68]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89d78:	f9b3 3000 	ldrsh.w	r3, [r3]
   89d7c:	b29b      	uxth	r3, r3
   89d7e:	4413      	add	r3, r2
   89d80:	b29b      	uxth	r3, r3
   89d82:	b21a      	sxth	r2, r3
   89d84:	4b0d      	ldr	r3, [pc, #52]	; (89dbc <Fine_DutyCorrection+0x4d4>)
   89d86:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= 38) && (Tmp2Val <= 41)) && (Tmp3Val < (Prescribed_T3 +0.2))) // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                           // 37                  41 020817                  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89d88:	e088      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
   89d8a:	bf00      	nop
   89d8c:	f3af 8000 	nop.w
   89d90:	9999999a 	.word	0x9999999a
   89d94:	3fc99999 	.word	0x3fc99999
   89d98:	20072d8a 	.word	0x20072d8a
   89d9c:	20072150 	.word	0x20072150
   89da0:	000a37b5 	.word	0x000a37b5
   89da4:	420c0000 	.word	0x420c0000
   89da8:	000a37a1 	.word	0x000a37a1
   89dac:	421a0000 	.word	0x421a0000
   89db0:	20072154 	.word	0x20072154
   89db4:	42160000 	.word	0x42160000
   89db8:	20072170 	.word	0x20072170
   89dbc:	2007213e 	.word	0x2007213e
   89dc0:	2007214c 	.word	0x2007214c
   89dc4:	42100000 	.word	0x42100000
   89dc8:	000a2b29 	.word	0x000a2b29
   89dcc:	20070480 	.word	0x20070480
   89dd0:	000a286d 	.word	0x000a286d
   89dd4:	000a30b5 	.word	0x000a30b5
   89dd8:	000974dd 	.word	0x000974dd
   89ddc:	20070484 	.word	0x20070484
   89de0:	42240000 	.word	0x42240000
   89de4:	000a30dd 	.word	0x000a30dd
   89de8:	000a378d 	.word	0x000a378d
   89dec:	42180000 	.word	0x42180000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= 41) )  // 39.5
   89df0:	4b2d      	ldr	r3, [pc, #180]	; (89ea8 <Fine_DutyCorrection+0x5c0>)
   89df2:	781b      	ldrb	r3, [r3, #0]
   89df4:	2b01      	cmp	r3, #1
   89df6:	d147      	bne.n	89e88 <Fine_DutyCorrection+0x5a0>
   89df8:	4b2c      	ldr	r3, [pc, #176]	; (89eac <Fine_DutyCorrection+0x5c4>)
   89dfa:	681a      	ldr	r2, [r3, #0]
   89dfc:	4b2c      	ldr	r3, [pc, #176]	; (89eb0 <Fine_DutyCorrection+0x5c8>)
   89dfe:	492d      	ldr	r1, [pc, #180]	; (89eb4 <Fine_DutyCorrection+0x5cc>)
   89e00:	4610      	mov	r0, r2
   89e02:	4798      	blx	r3
   89e04:	4603      	mov	r3, r0
   89e06:	2b00      	cmp	r3, #0
   89e08:	d03e      	beq.n	89e88 <Fine_DutyCorrection+0x5a0>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   89e0a:	4b2b      	ldr	r3, [pc, #172]	; (89eb8 <Fine_DutyCorrection+0x5d0>)
   89e0c:	681a      	ldr	r2, [r3, #0]
   89e0e:	4b28      	ldr	r3, [pc, #160]	; (89eb0 <Fine_DutyCorrection+0x5c8>)
   89e10:	492a      	ldr	r1, [pc, #168]	; (89ebc <Fine_DutyCorrection+0x5d4>)
   89e12:	4610      	mov	r0, r2
   89e14:	4798      	blx	r3
   89e16:	4603      	mov	r3, r0
   89e18:	2b00      	cmp	r3, #0
   89e1a:	d027      	beq.n	89e6c <Fine_DutyCorrection+0x584>
   89e1c:	4b28      	ldr	r3, [pc, #160]	; (89ec0 <Fine_DutyCorrection+0x5d8>)
   89e1e:	681a      	ldr	r2, [r3, #0]
   89e20:	4b28      	ldr	r3, [pc, #160]	; (89ec4 <Fine_DutyCorrection+0x5dc>)
   89e22:	4610      	mov	r0, r2
   89e24:	4798      	blx	r3
   89e26:	4605      	mov	r5, r0
   89e28:	460e      	mov	r6, r1
   89e2a:	4b27      	ldr	r3, [pc, #156]	; (89ec8 <Fine_DutyCorrection+0x5e0>)
   89e2c:	681a      	ldr	r2, [r3, #0]
   89e2e:	4b25      	ldr	r3, [pc, #148]	; (89ec4 <Fine_DutyCorrection+0x5dc>)
   89e30:	4610      	mov	r0, r2
   89e32:	4798      	blx	r3
   89e34:	4c25      	ldr	r4, [pc, #148]	; (89ecc <Fine_DutyCorrection+0x5e4>)
   89e36:	a31a      	add	r3, pc, #104	; (adr r3, 89ea0 <Fine_DutyCorrection+0x5b8>)
   89e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e3c:	47a0      	blx	r4
   89e3e:	4603      	mov	r3, r0
   89e40:	460c      	mov	r4, r1
   89e42:	461a      	mov	r2, r3
   89e44:	4623      	mov	r3, r4
   89e46:	4c22      	ldr	r4, [pc, #136]	; (89ed0 <Fine_DutyCorrection+0x5e8>)
   89e48:	4628      	mov	r0, r5
   89e4a:	4631      	mov	r1, r6
   89e4c:	47a0      	blx	r4
   89e4e:	4603      	mov	r3, r0
   89e50:	2b00      	cmp	r3, #0
   89e52:	d00b      	beq.n	89e6c <Fine_DutyCorrection+0x584>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   89e54:	4b1f      	ldr	r3, [pc, #124]	; (89ed4 <Fine_DutyCorrection+0x5ec>)
   89e56:	781b      	ldrb	r3, [r3, #0]
   89e58:	b29a      	uxth	r2, r3
   89e5a:	4b1f      	ldr	r3, [pc, #124]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
   89e60:	b29b      	uxth	r3, r3
   89e62:	4413      	add	r3, r2
   89e64:	b29b      	uxth	r3, r3
   89e66:	b21a      	sxth	r2, r3
   89e68:	4b1b      	ldr	r3, [pc, #108]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e6a:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89e6c:	4b1a      	ldr	r3, [pc, #104]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
   89e72:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89e76:	4293      	cmp	r3, r2
   89e78:	dd10      	ble.n	89e9c <Fine_DutyCorrection+0x5b4>
			{
				avg_duty = 2500;
   89e7a:	4b17      	ldr	r3, [pc, #92]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e7c:	f640 12c4 	movw	r2, #2500	; 0x9c4
   89e80:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   89e82:	4b16      	ldr	r3, [pc, #88]	; (89edc <Fine_DutyCorrection+0x5f4>)
   89e84:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   89e86:	e009      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   89e88:	4b07      	ldr	r3, [pc, #28]	; (89ea8 <Fine_DutyCorrection+0x5c0>)
   89e8a:	781b      	ldrb	r3, [r3, #0]
   89e8c:	2b02      	cmp	r3, #2
   89e8e:	d105      	bne.n	89e9c <Fine_DutyCorrection+0x5b4>
// 			else if (Tmp3Val <= (Prescribed_T3 +0.5))
// 			{
// 				avg_duty = avg_duty + 2;
// 			}
// 		}
	  avg_duty = avg_duty;
   89e90:	4b11      	ldr	r3, [pc, #68]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e92:	f9b3 2000 	ldrsh.w	r2, [r3]
   89e96:	4b10      	ldr	r3, [pc, #64]	; (89ed8 <Fine_DutyCorrection+0x5f0>)
   89e98:	801a      	strh	r2, [r3, #0]
	}
	
	
}
   89e9a:	e7ff      	b.n	89e9c <Fine_DutyCorrection+0x5b4>
   89e9c:	bf00      	nop
   89e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89ea0:	9999999a 	.word	0x9999999a
   89ea4:	3fc99999 	.word	0x3fc99999
   89ea8:	20072d8a 	.word	0x20072d8a
   89eac:	20072150 	.word	0x20072150
   89eb0:	000a37a1 	.word	0x000a37a1
   89eb4:	42240000 	.word	0x42240000
   89eb8:	2007214c 	.word	0x2007214c
   89ebc:	42100000 	.word	0x42100000
   89ec0:	20072154 	.word	0x20072154
   89ec4:	000a2b29 	.word	0x000a2b29
   89ec8:	20070480 	.word	0x20070480
   89ecc:	000a286d 	.word	0x000a286d
   89ed0:	000a30b5 	.word	0x000a30b5
   89ed4:	20072170 	.word	0x20072170
   89ed8:	2007213e 	.word	0x2007213e
   89edc:	000974dd 	.word	0x000974dd

00089ee0 <DataDisplay>:

DataDisplay()
{
   89ee0:	b580      	push	{r7, lr}
   89ee2:	b082      	sub	sp, #8
   89ee4:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   89ee6:	2300      	movs	r3, #0
   89ee8:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   89eea:	4b23      	ldr	r3, [pc, #140]	; (89f78 <DataDisplay+0x98>)
   89eec:	681a      	ldr	r2, [r3, #0]
   89eee:	4b23      	ldr	r3, [pc, #140]	; (89f7c <DataDisplay+0x9c>)
   89ef0:	4610      	mov	r0, r2
   89ef2:	4798      	blx	r3
   89ef4:	4603      	mov	r3, r0
   89ef6:	b29b      	uxth	r3, r3
   89ef8:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   89efa:	2304      	movs	r3, #4
   89efc:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89efe:	1d3b      	adds	r3, r7, #4
   89f00:	2204      	movs	r2, #4
   89f02:	4619      	mov	r1, r3
   89f04:	2037      	movs	r0, #55	; 0x37
   89f06:	4b1e      	ldr	r3, [pc, #120]	; (89f80 <DataDisplay+0xa0>)
   89f08:	4798      	blx	r3
	
	cl_tdata.word = 0;
   89f0a:	2300      	movs	r3, #0
   89f0c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   89f0e:	4b1d      	ldr	r3, [pc, #116]	; (89f84 <DataDisplay+0xa4>)
   89f10:	681a      	ldr	r2, [r3, #0]
   89f12:	4b1a      	ldr	r3, [pc, #104]	; (89f7c <DataDisplay+0x9c>)
   89f14:	4610      	mov	r0, r2
   89f16:	4798      	blx	r3
   89f18:	4603      	mov	r3, r0
   89f1a:	b29b      	uxth	r3, r3
   89f1c:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   89f1e:	2305      	movs	r3, #5
   89f20:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89f22:	1d3b      	adds	r3, r7, #4
   89f24:	2204      	movs	r2, #4
   89f26:	4619      	mov	r1, r3
   89f28:	2037      	movs	r0, #55	; 0x37
   89f2a:	4b15      	ldr	r3, [pc, #84]	; (89f80 <DataDisplay+0xa0>)
   89f2c:	4798      	blx	r3
	
	cl_tdata.word = 0;
   89f2e:	2300      	movs	r3, #0
   89f30:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   89f32:	4b15      	ldr	r3, [pc, #84]	; (89f88 <DataDisplay+0xa8>)
   89f34:	681a      	ldr	r2, [r3, #0]
   89f36:	4b11      	ldr	r3, [pc, #68]	; (89f7c <DataDisplay+0x9c>)
   89f38:	4610      	mov	r0, r2
   89f3a:	4798      	blx	r3
   89f3c:	4603      	mov	r3, r0
   89f3e:	b29b      	uxth	r3, r3
   89f40:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   89f42:	2306      	movs	r3, #6
   89f44:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89f46:	1d3b      	adds	r3, r7, #4
   89f48:	2204      	movs	r2, #4
   89f4a:	4619      	mov	r1, r3
   89f4c:	2037      	movs	r0, #55	; 0x37
   89f4e:	4b0c      	ldr	r3, [pc, #48]	; (89f80 <DataDisplay+0xa0>)
   89f50:	4798      	blx	r3
	
	cl_tdata.word = 0;
   89f52:	2300      	movs	r3, #0
   89f54:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   89f56:	4b0d      	ldr	r3, [pc, #52]	; (89f8c <DataDisplay+0xac>)
   89f58:	f9b3 3000 	ldrsh.w	r3, [r3]
   89f5c:	b29b      	uxth	r3, r3
   89f5e:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   89f60:	2307      	movs	r3, #7
   89f62:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89f64:	1d3b      	adds	r3, r7, #4
   89f66:	2204      	movs	r2, #4
   89f68:	4619      	mov	r1, r3
   89f6a:	2037      	movs	r0, #55	; 0x37
   89f6c:	4b04      	ldr	r3, [pc, #16]	; (89f80 <DataDisplay+0xa0>)
   89f6e:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   89f70:	bf00      	nop
   89f72:	3708      	adds	r7, #8
   89f74:	46bd      	mov	sp, r7
   89f76:	bd80      	pop	{r7, pc}
   89f78:	2007214c 	.word	0x2007214c
   89f7c:	000a3829 	.word	0x000a3829
   89f80:	0009926d 	.word	0x0009926d
   89f84:	20072150 	.word	0x20072150
   89f88:	20072154 	.word	0x20072154
   89f8c:	2007213e 	.word	0x2007213e

00089f90 <Hot_Rinse>:


void Hot_Rinse()
{
   89f90:	b580      	push	{r7, lr}
   89f92:	b082      	sub	sp, #8
   89f94:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   89f96:	4b65      	ldr	r3, [pc, #404]	; (8a12c <Hot_Rinse+0x19c>)
   89f98:	881b      	ldrh	r3, [r3, #0]
   89f9a:	3301      	adds	r3, #1
   89f9c:	b29a      	uxth	r2, r3
   89f9e:	4b63      	ldr	r3, [pc, #396]	; (8a12c <Hot_Rinse+0x19c>)
   89fa0:	801a      	strh	r2, [r3, #0]
		if(HeaterState == CL_HEATER_STATE_OFF  )
   89fa2:	4b63      	ldr	r3, [pc, #396]	; (8a130 <Hot_Rinse+0x1a0>)
   89fa4:	781b      	ldrb	r3, [r3, #0]
   89fa6:	2b04      	cmp	r3, #4
   89fa8:	d102      	bne.n	89fb0 <Hot_Rinse+0x20>
		{
			sv_cntrl_poweroffheater();
   89faa:	4b62      	ldr	r3, [pc, #392]	; (8a134 <Hot_Rinse+0x1a4>)
   89fac:	4798      	blx	r3
			return;
   89fae:	e0b9      	b.n	8a124 <Hot_Rinse+0x194>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   89fb0:	4b5f      	ldr	r3, [pc, #380]	; (8a130 <Hot_Rinse+0x1a0>)
   89fb2:	781b      	ldrb	r3, [r3, #0]
   89fb4:	2b00      	cmp	r3, #0
   89fb6:	f000 80b4 	beq.w	8a122 <Hot_Rinse+0x192>
   89fba:	4b5d      	ldr	r3, [pc, #372]	; (8a130 <Hot_Rinse+0x1a0>)
   89fbc:	781b      	ldrb	r3, [r3, #0]
   89fbe:	2b00      	cmp	r3, #0
   89fc0:	f000 80af 	beq.w	8a122 <Hot_Rinse+0x192>
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		// Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
		if(HeaterState == CL_HEATER_STATE_ON)
   89fc4:	4b5a      	ldr	r3, [pc, #360]	; (8a130 <Hot_Rinse+0x1a0>)
   89fc6:	781b      	ldrb	r3, [r3, #0]
   89fc8:	2b01      	cmp	r3, #1
   89fca:	d107      	bne.n	89fdc <Hot_Rinse+0x4c>
		{
			sv_cntrl_poweronheater();
   89fcc:	4b5a      	ldr	r3, [pc, #360]	; (8a138 <Hot_Rinse+0x1a8>)
   89fce:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   89fd0:	4b5a      	ldr	r3, [pc, #360]	; (8a13c <Hot_Rinse+0x1ac>)
   89fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
   89fd6:	4618      	mov	r0, r3
   89fd8:	4b59      	ldr	r3, [pc, #356]	; (8a140 <Hot_Rinse+0x1b0>)
   89fda:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   89fdc:	4b59      	ldr	r3, [pc, #356]	; (8a144 <Hot_Rinse+0x1b4>)
   89fde:	681b      	ldr	r3, [r3, #0]
   89fe0:	4a59      	ldr	r2, [pc, #356]	; (8a148 <Hot_Rinse+0x1b8>)
   89fe2:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   89fe4:	1dbb      	adds	r3, r7, #6
   89fe6:	4619      	mov	r1, r3
   89fe8:	2013      	movs	r0, #19
   89fea:	4b58      	ldr	r3, [pc, #352]	; (8a14c <Hot_Rinse+0x1bc>)
   89fec:	4798      	blx	r3
		{
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// 			Tmp2Val = Tmp2Val - - 0.4;                                     // sensor offset
			Tmp2Val = (float)sensordata/100;
   89fee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   89ff2:	4b57      	ldr	r3, [pc, #348]	; (8a150 <Hot_Rinse+0x1c0>)
   89ff4:	4610      	mov	r0, r2
   89ff6:	4798      	blx	r3
   89ff8:	4602      	mov	r2, r0
   89ffa:	4b56      	ldr	r3, [pc, #344]	; (8a154 <Hot_Rinse+0x1c4>)
   89ffc:	4956      	ldr	r1, [pc, #344]	; (8a158 <Hot_Rinse+0x1c8>)
   89ffe:	4610      	mov	r0, r2
   8a000:	4798      	blx	r3
   8a002:	4603      	mov	r3, r0
   8a004:	461a      	mov	r2, r3
   8a006:	4b4f      	ldr	r3, [pc, #316]	; (8a144 <Hot_Rinse+0x1b4>)
   8a008:	601a      	str	r2, [r3, #0]
		}
		
		if (!(count_500ms %20))
   8a00a:	4b48      	ldr	r3, [pc, #288]	; (8a12c <Hot_Rinse+0x19c>)
   8a00c:	881a      	ldrh	r2, [r3, #0]
   8a00e:	4b53      	ldr	r3, [pc, #332]	; (8a15c <Hot_Rinse+0x1cc>)
   8a010:	fba3 1302 	umull	r1, r3, r3, r2
   8a014:	0919      	lsrs	r1, r3, #4
   8a016:	460b      	mov	r3, r1
   8a018:	009b      	lsls	r3, r3, #2
   8a01a:	440b      	add	r3, r1
   8a01c:	009b      	lsls	r3, r3, #2
   8a01e:	1ad3      	subs	r3, r2, r3
   8a020:	b29b      	uxth	r3, r3
   8a022:	2b00      	cmp	r3, #0
   8a024:	d103      	bne.n	8a02e <Hot_Rinse+0x9e>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8a026:	4b4e      	ldr	r3, [pc, #312]	; (8a160 <Hot_Rinse+0x1d0>)
   8a028:	681b      	ldr	r3, [r3, #0]
   8a02a:	4a4e      	ldr	r2, [pc, #312]	; (8a164 <Hot_Rinse+0x1d4>)
   8a02c:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8a02e:	1dbb      	adds	r3, r7, #6
   8a030:	4619      	mov	r1, r3
   8a032:	2014      	movs	r0, #20
   8a034:	4b45      	ldr	r3, [pc, #276]	; (8a14c <Hot_Rinse+0x1bc>)
   8a036:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 			Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
			Tmp3Val = (float)sensordata /100;
   8a038:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8a03c:	4b44      	ldr	r3, [pc, #272]	; (8a150 <Hot_Rinse+0x1c0>)
   8a03e:	4610      	mov	r0, r2
   8a040:	4798      	blx	r3
   8a042:	4602      	mov	r2, r0
   8a044:	4b43      	ldr	r3, [pc, #268]	; (8a154 <Hot_Rinse+0x1c4>)
   8a046:	4944      	ldr	r1, [pc, #272]	; (8a158 <Hot_Rinse+0x1c8>)
   8a048:	4610      	mov	r0, r2
   8a04a:	4798      	blx	r3
   8a04c:	4603      	mov	r3, r0
   8a04e:	461a      	mov	r2, r3
   8a050:	4b43      	ldr	r3, [pc, #268]	; (8a160 <Hot_Rinse+0x1d0>)
   8a052:	601a      	str	r2, [r3, #0]
		}
		
		
		if (!(count_500ms %20))
   8a054:	4b35      	ldr	r3, [pc, #212]	; (8a12c <Hot_Rinse+0x19c>)
   8a056:	881a      	ldrh	r2, [r3, #0]
   8a058:	4b40      	ldr	r3, [pc, #256]	; (8a15c <Hot_Rinse+0x1cc>)
   8a05a:	fba3 1302 	umull	r1, r3, r3, r2
   8a05e:	0919      	lsrs	r1, r3, #4
   8a060:	460b      	mov	r3, r1
   8a062:	009b      	lsls	r3, r3, #2
   8a064:	440b      	add	r3, r1
   8a066:	009b      	lsls	r3, r3, #2
   8a068:	1ad3      	subs	r3, r2, r3
   8a06a:	b29b      	uxth	r3, r3
   8a06c:	2b00      	cmp	r3, #0
   8a06e:	d159      	bne.n	8a124 <Hot_Rinse+0x194>
		{
			
		
		if ((Tmp2Val - 80) > 5 )     
   8a070:	4b34      	ldr	r3, [pc, #208]	; (8a144 <Hot_Rinse+0x1b4>)
   8a072:	681a      	ldr	r2, [r3, #0]
   8a074:	4b3c      	ldr	r3, [pc, #240]	; (8a168 <Hot_Rinse+0x1d8>)
   8a076:	493d      	ldr	r1, [pc, #244]	; (8a16c <Hot_Rinse+0x1dc>)
   8a078:	4610      	mov	r0, r2
   8a07a:	4798      	blx	r3
   8a07c:	4603      	mov	r3, r0
   8a07e:	461a      	mov	r2, r3
   8a080:	4b3b      	ldr	r3, [pc, #236]	; (8a170 <Hot_Rinse+0x1e0>)
   8a082:	493c      	ldr	r1, [pc, #240]	; (8a174 <Hot_Rinse+0x1e4>)
   8a084:	4610      	mov	r0, r2
   8a086:	4798      	blx	r3
   8a088:	4603      	mov	r3, r0
   8a08a:	2b00      	cmp	r3, #0
   8a08c:	d009      	beq.n	8a0a2 <Hot_Rinse+0x112>
		{
			avg_duty = avg_duty - 40;
   8a08e:	4b2b      	ldr	r3, [pc, #172]	; (8a13c <Hot_Rinse+0x1ac>)
   8a090:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a094:	b29b      	uxth	r3, r3
   8a096:	3b28      	subs	r3, #40	; 0x28
   8a098:	b29b      	uxth	r3, r3
   8a09a:	b21a      	sxth	r2, r3
   8a09c:	4b27      	ldr	r3, [pc, #156]	; (8a13c <Hot_Rinse+0x1ac>)
   8a09e:	801a      	strh	r2, [r3, #0]
   8a0a0:	e038      	b.n	8a114 <Hot_Rinse+0x184>
			
		}
		else if ((80 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8a0a2:	4b28      	ldr	r3, [pc, #160]	; (8a144 <Hot_Rinse+0x1b4>)
   8a0a4:	681a      	ldr	r2, [r3, #0]
   8a0a6:	4b30      	ldr	r3, [pc, #192]	; (8a168 <Hot_Rinse+0x1d8>)
   8a0a8:	4611      	mov	r1, r2
   8a0aa:	4830      	ldr	r0, [pc, #192]	; (8a16c <Hot_Rinse+0x1dc>)
   8a0ac:	4798      	blx	r3
   8a0ae:	4603      	mov	r3, r0
   8a0b0:	461a      	mov	r2, r3
   8a0b2:	4b2f      	ldr	r3, [pc, #188]	; (8a170 <Hot_Rinse+0x1e0>)
   8a0b4:	492f      	ldr	r1, [pc, #188]	; (8a174 <Hot_Rinse+0x1e4>)
   8a0b6:	4610      	mov	r0, r2
   8a0b8:	4798      	blx	r3
   8a0ba:	4603      	mov	r3, r0
   8a0bc:	2b00      	cmp	r3, #0
   8a0be:	d012      	beq.n	8a0e6 <Hot_Rinse+0x156>
   8a0c0:	4b27      	ldr	r3, [pc, #156]	; (8a160 <Hot_Rinse+0x1d0>)
   8a0c2:	681a      	ldr	r2, [r3, #0]
   8a0c4:	4b2c      	ldr	r3, [pc, #176]	; (8a178 <Hot_Rinse+0x1e8>)
   8a0c6:	492d      	ldr	r1, [pc, #180]	; (8a17c <Hot_Rinse+0x1ec>)
   8a0c8:	4610      	mov	r0, r2
   8a0ca:	4798      	blx	r3
   8a0cc:	4603      	mov	r3, r0
   8a0ce:	2b00      	cmp	r3, #0
   8a0d0:	d009      	beq.n	8a0e6 <Hot_Rinse+0x156>
		{
			avg_duty = avg_duty + 40;
   8a0d2:	4b1a      	ldr	r3, [pc, #104]	; (8a13c <Hot_Rinse+0x1ac>)
   8a0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a0d8:	b29b      	uxth	r3, r3
   8a0da:	3328      	adds	r3, #40	; 0x28
   8a0dc:	b29b      	uxth	r3, r3
   8a0de:	b21a      	sxth	r2, r3
   8a0e0:	4b16      	ldr	r3, [pc, #88]	; (8a13c <Hot_Rinse+0x1ac>)
   8a0e2:	801a      	strh	r2, [r3, #0]
   8a0e4:	e016      	b.n	8a114 <Hot_Rinse+0x184>
		}
		
		else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8a0e6:	4b1e      	ldr	r3, [pc, #120]	; (8a160 <Hot_Rinse+0x1d0>)
   8a0e8:	681a      	ldr	r2, [r3, #0]
   8a0ea:	4b23      	ldr	r3, [pc, #140]	; (8a178 <Hot_Rinse+0x1e8>)
   8a0ec:	491f      	ldr	r1, [pc, #124]	; (8a16c <Hot_Rinse+0x1dc>)
   8a0ee:	4610      	mov	r0, r2
   8a0f0:	4798      	blx	r3
   8a0f2:	4603      	mov	r3, r0
   8a0f4:	2b00      	cmp	r3, #0
   8a0f6:	d00d      	beq.n	8a114 <Hot_Rinse+0x184>
   8a0f8:	4b19      	ldr	r3, [pc, #100]	; (8a160 <Hot_Rinse+0x1d0>)
   8a0fa:	681a      	ldr	r2, [r3, #0]
   8a0fc:	4b20      	ldr	r3, [pc, #128]	; (8a180 <Hot_Rinse+0x1f0>)
   8a0fe:	491f      	ldr	r1, [pc, #124]	; (8a17c <Hot_Rinse+0x1ec>)
   8a100:	4610      	mov	r0, r2
   8a102:	4798      	blx	r3
   8a104:	4603      	mov	r3, r0
   8a106:	2b00      	cmp	r3, #0
   8a108:	d004      	beq.n	8a114 <Hot_Rinse+0x184>
		{
			avg_duty = avg_duty;
   8a10a:	4b0c      	ldr	r3, [pc, #48]	; (8a13c <Hot_Rinse+0x1ac>)
   8a10c:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a110:	4b0a      	ldr	r3, [pc, #40]	; (8a13c <Hot_Rinse+0x1ac>)
   8a112:	801a      	strh	r2, [r3, #0]
		}
		
	sv_cntrl_incheater(avg_duty);
   8a114:	4b09      	ldr	r3, [pc, #36]	; (8a13c <Hot_Rinse+0x1ac>)
   8a116:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a11a:	4618      	mov	r0, r3
   8a11c:	4b08      	ldr	r3, [pc, #32]	; (8a140 <Hot_Rinse+0x1b0>)
   8a11e:	4798      	blx	r3
   8a120:	e000      	b.n	8a124 <Hot_Rinse+0x194>
			sv_cntrl_poweroffheater();
			return;
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
		{
			return;
   8a122:	bf00      	nop
		
	sv_cntrl_incheater(avg_duty);
		
		}
	
}
   8a124:	3708      	adds	r7, #8
   8a126:	46bd      	mov	sp, r7
   8a128:	bd80      	pop	{r7, pc}
   8a12a:	bf00      	nop
   8a12c:	20072158 	.word	0x20072158
   8a130:	2007213b 	.word	0x2007213b
   8a134:	000974dd 	.word	0x000974dd
   8a138:	000974c9 	.word	0x000974c9
   8a13c:	2007213e 	.word	0x2007213e
   8a140:	000975d1 	.word	0x000975d1
   8a144:	20072150 	.word	0x20072150
   8a148:	20072164 	.word	0x20072164
   8a14c:	0008d61d 	.word	0x0008d61d
   8a150:	000a33a9 	.word	0x000a33a9
   8a154:	000a35b9 	.word	0x000a35b9
   8a158:	42c80000 	.word	0x42c80000
   8a15c:	cccccccd 	.word	0xcccccccd
   8a160:	20072154 	.word	0x20072154
   8a164:	20072d7c 	.word	0x20072d7c
   8a168:	000a323d 	.word	0x000a323d
   8a16c:	42a00000 	.word	0x42a00000
   8a170:	000a37c9 	.word	0x000a37c9
   8a174:	40a00000 	.word	0x40a00000
   8a178:	000a37a1 	.word	0x000a37a1
   8a17c:	428c0000 	.word	0x428c0000
   8a180:	000a37b5 	.word	0x000a37b5

0008a184 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8a184:	b580      	push	{r7, lr}
   8a186:	b090      	sub	sp, #64	; 0x40
   8a188:	af00      	add	r7, sp, #0
   8a18a:	4603      	mov	r3, r0
   8a18c:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8a18e:	2300      	movs	r3, #0
   8a190:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8a194:	2300      	movs	r3, #0
   8a196:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8a19a:	2300      	movs	r3, #0
   8a19c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8a19e:	f107 0239 	add.w	r2, r7, #57	; 0x39
   8a1a2:	79fb      	ldrb	r3, [r7, #7]
   8a1a4:	4611      	mov	r1, r2
   8a1a6:	4618      	mov	r0, r3
   8a1a8:	4b82      	ldr	r3, [pc, #520]	; (8a3b4 <Cl_Init_Controller+0x230>)
   8a1aa:	4798      	blx	r3
	switch (Cl_Init_States)
   8a1ac:	4b82      	ldr	r3, [pc, #520]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a1ae:	781b      	ldrb	r3, [r3, #0]
   8a1b0:	2b08      	cmp	r3, #8
   8a1b2:	f200 80f8 	bhi.w	8a3a6 <Cl_Init_Controller+0x222>
   8a1b6:	a201      	add	r2, pc, #4	; (adr r2, 8a1bc <Cl_Init_Controller+0x38>)
   8a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a1bc:	0008a1e1 	.word	0x0008a1e1
   8a1c0:	0008a2ef 	.word	0x0008a2ef
   8a1c4:	0008a319 	.word	0x0008a319
   8a1c8:	0008a3a7 	.word	0x0008a3a7
   8a1cc:	0008a3a7 	.word	0x0008a3a7
   8a1d0:	0008a341 	.word	0x0008a341
   8a1d4:	0008a3a7 	.word	0x0008a3a7
   8a1d8:	0008a3a7 	.word	0x0008a3a7
   8a1dc:	0008a371 	.word	0x0008a371
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8a1e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a1e4:	2b01      	cmp	r3, #1
   8a1e6:	d000      	beq.n	8a1ea <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8a1e8:	e080      	b.n	8a2ec <Cl_Init_Controller+0x168>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8a1ea:	4b73      	ldr	r3, [pc, #460]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a1ec:	2201      	movs	r2, #1
   8a1ee:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8a1f0:	2302      	movs	r3, #2
   8a1f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a1f6:	231a      	movs	r3, #26
   8a1f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a1fc:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a200:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a204:	2201      	movs	r2, #1
   8a206:	4618      	mov	r0, r3
   8a208:	4b6c      	ldr	r3, [pc, #432]	; (8a3bc <Cl_Init_Controller+0x238>)
   8a20a:	4798      	blx	r3
   8a20c:	4603      	mov	r3, r0
   8a20e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8a212:	4b69      	ldr	r3, [pc, #420]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a214:	2205      	movs	r2, #5
   8a216:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8a218:	2305      	movs	r3, #5
   8a21a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a21e:	231a      	movs	r3, #26
   8a220:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a224:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a228:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a22c:	2201      	movs	r2, #1
   8a22e:	4618      	mov	r0, r3
   8a230:	4b62      	ldr	r3, [pc, #392]	; (8a3bc <Cl_Init_Controller+0x238>)
   8a232:	4798      	blx	r3
   8a234:	4603      	mov	r3, r0
   8a236:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8a23a:	e00d      	b.n	8a258 <Cl_Init_Controller+0xd4>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8a23c:	4a60      	ldr	r2, [pc, #384]	; (8a3c0 <Cl_Init_Controller+0x23c>)
   8a23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a246:	009b      	lsls	r3, r3, #2
   8a248:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8a24c:	440b      	add	r3, r1
   8a24e:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8a252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a254:	3301      	adds	r3, #1
   8a256:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a25a:	2b09      	cmp	r3, #9
   8a25c:	ddee      	ble.n	8a23c <Cl_Init_Controller+0xb8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8a25e:	2300      	movs	r3, #0
   8a260:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8a262:	e00f      	b.n	8a284 <Cl_Init_Controller+0x100>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a266:	009b      	lsls	r3, r3, #2
   8a268:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8a26c:	4413      	add	r3, r2
   8a26e:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8a272:	4953      	ldr	r1, [pc, #332]	; (8a3c0 <Cl_Init_Controller+0x23c>)
   8a274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8a27a:	429a      	cmp	r2, r3
   8a27c:	d106      	bne.n	8a28c <Cl_Init_Controller+0x108>
							{
								// test FAILed
								break;
							}
							count++;
   8a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a280:	3301      	adds	r3, #1
   8a282:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8a286:	2b09      	cmp	r3, #9
   8a288:	ddec      	ble.n	8a264 <Cl_Init_Controller+0xe0>
   8a28a:	e000      	b.n	8a28e <Cl_Init_Controller+0x10a>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
							{
								// test FAILed
								break;
   8a28c:	bf00      	nop
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8a28e:	4b4a      	ldr	r3, [pc, #296]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a290:	2207      	movs	r2, #7
   8a292:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8a294:	2307      	movs	r3, #7
   8a296:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8a29a:	231a      	movs	r3, #26
   8a29c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8a2a0:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a2a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a2a8:	2201      	movs	r2, #1
   8a2aa:	4618      	mov	r0, r3
   8a2ac:	4b43      	ldr	r3, [pc, #268]	; (8a3bc <Cl_Init_Controller+0x238>)
   8a2ae:	4798      	blx	r3
   8a2b0:	4603      	mov	r3, r0
   8a2b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8a2b6:	4b40      	ldr	r3, [pc, #256]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a2b8:	2208      	movs	r2, #8
   8a2ba:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8a2bc:	2308      	movs	r3, #8
   8a2be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8a2c2:	231b      	movs	r3, #27
   8a2c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8a2c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8a2cc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8a2d0:	2200      	movs	r2, #0
   8a2d2:	4618      	mov	r0, r3
   8a2d4:	4b39      	ldr	r3, [pc, #228]	; (8a3bc <Cl_Init_Controller+0x238>)
   8a2d6:	4798      	blx	r3
   8a2d8:	4603      	mov	r3, r0
   8a2da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8a2de:	2000      	movs	r0, #0
   8a2e0:	4b38      	ldr	r3, [pc, #224]	; (8a3c4 <Cl_Init_Controller+0x240>)
   8a2e2:	4798      	blx	r3
   8a2e4:	4603      	mov	r3, r0
   8a2e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8a2ea:	bf00      	nop
						default:break;
					}
		break;
   8a2ec:	e05c      	b.n	8a3a8 <Cl_Init_Controller+0x224>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8a2ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a2f2:	3b02      	subs	r3, #2
   8a2f4:	2b04      	cmp	r3, #4
   8a2f6:	d80d      	bhi.n	8a314 <Cl_Init_Controller+0x190>
   8a2f8:	a201      	add	r2, pc, #4	; (adr r2, 8a300 <Cl_Init_Controller+0x17c>)
   8a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a2fe:	bf00      	nop
   8a300:	0008a315 	.word	0x0008a315
   8a304:	0008a315 	.word	0x0008a315
   8a308:	0008a315 	.word	0x0008a315
   8a30c:	0008a315 	.word	0x0008a315
   8a310:	0008a315 	.word	0x0008a315
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a314:	bf00      	nop
					}
		break;
   8a316:	e047      	b.n	8a3a8 <Cl_Init_Controller+0x224>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8a318:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a31c:	3b02      	subs	r3, #2
   8a31e:	2b04      	cmp	r3, #4
   8a320:	d80c      	bhi.n	8a33c <Cl_Init_Controller+0x1b8>
   8a322:	a201      	add	r2, pc, #4	; (adr r2, 8a328 <Cl_Init_Controller+0x1a4>)
   8a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a328:	0008a33d 	.word	0x0008a33d
   8a32c:	0008a33d 	.word	0x0008a33d
   8a330:	0008a33d 	.word	0x0008a33d
   8a334:	0008a33d 	.word	0x0008a33d
   8a338:	0008a33d 	.word	0x0008a33d
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a33c:	bf00      	nop
					}
		break;
   8a33e:	e033      	b.n	8a3a8 <Cl_Init_Controller+0x224>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8a340:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a344:	3b02      	subs	r3, #2
   8a346:	2b04      	cmp	r3, #4
   8a348:	d810      	bhi.n	8a36c <Cl_Init_Controller+0x1e8>
   8a34a:	a201      	add	r2, pc, #4	; (adr r2, 8a350 <Cl_Init_Controller+0x1cc>)
   8a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a350:	0008a36d 	.word	0x0008a36d
   8a354:	0008a36d 	.word	0x0008a36d
   8a358:	0008a365 	.word	0x0008a365
   8a35c:	0008a36d 	.word	0x0008a36d
   8a360:	0008a36d 	.word	0x0008a36d
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8a364:	4b14      	ldr	r3, [pc, #80]	; (8a3b8 <Cl_Init_Controller+0x234>)
   8a366:	2208      	movs	r2, #8
   8a368:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8a36a:	e000      	b.n	8a36e <Cl_Init_Controller+0x1ea>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8a36c:	bf00      	nop
					}
		break;
   8a36e:	e01b      	b.n	8a3a8 <Cl_Init_Controller+0x224>
		case CL_INIT_READY:
							switch(cl_initevent)
   8a370:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8a374:	3b02      	subs	r3, #2
   8a376:	2b04      	cmp	r3, #4
   8a378:	d813      	bhi.n	8a3a2 <Cl_Init_Controller+0x21e>
   8a37a:	a201      	add	r2, pc, #4	; (adr r2, 8a380 <Cl_Init_Controller+0x1fc>)
   8a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a380:	0008a3a3 	.word	0x0008a3a3
   8a384:	0008a3a3 	.word	0x0008a3a3
   8a388:	0008a395 	.word	0x0008a395
   8a38c:	0008a3a3 	.word	0x0008a3a3
   8a390:	0008a3a3 	.word	0x0008a3a3
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8a394:	2043      	movs	r0, #67	; 0x43
   8a396:	4b0c      	ldr	r3, [pc, #48]	; (8a3c8 <Cl_Init_Controller+0x244>)
   8a398:	4798      	blx	r3
   8a39a:	4603      	mov	r3, r0
   8a39c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8a3a0:	e000      	b.n	8a3a4 <Cl_Init_Controller+0x220>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8a3a2:	bf00      	nop
							}
					

		break;
   8a3a4:	e000      	b.n	8a3a8 <Cl_Init_Controller+0x224>

			
			default: break;
   8a3a6:	bf00      	nop
	}
return CL_OK;	
   8a3a8:	2300      	movs	r3, #0
}
   8a3aa:	4618      	mov	r0, r3
   8a3ac:	3740      	adds	r7, #64	; 0x40
   8a3ae:	46bd      	mov	sp, r7
   8a3b0:	bd80      	pop	{r7, pc}
   8a3b2:	bf00      	nop
   8a3b4:	0008a3cd 	.word	0x0008a3cd
   8a3b8:	20072171 	.word	0x20072171
   8a3bc:	0009926d 	.word	0x0009926d
   8a3c0:	20070488 	.word	0x20070488
   8a3c4:	0008e051 	.word	0x0008e051
   8a3c8:	0008a479 	.word	0x0008a479

0008a3cc <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8a3cc:	b480      	push	{r7}
   8a3ce:	b083      	sub	sp, #12
   8a3d0:	af00      	add	r7, sp, #0
   8a3d2:	4603      	mov	r3, r0
   8a3d4:	6039      	str	r1, [r7, #0]
   8a3d6:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8a3d8:	79fb      	ldrb	r3, [r7, #7]
   8a3da:	3b2a      	subs	r3, #42	; 0x2a
   8a3dc:	2b13      	cmp	r3, #19
   8a3de:	d843      	bhi.n	8a468 <cl_init_translatemacevent+0x9c>
   8a3e0:	a201      	add	r2, pc, #4	; (adr r2, 8a3e8 <cl_init_translatemacevent+0x1c>)
   8a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a3e6:	bf00      	nop
   8a3e8:	0008a439 	.word	0x0008a439
   8a3ec:	0008a469 	.word	0x0008a469
   8a3f0:	0008a469 	.word	0x0008a469
   8a3f4:	0008a469 	.word	0x0008a469
   8a3f8:	0008a469 	.word	0x0008a469
   8a3fc:	0008a469 	.word	0x0008a469
   8a400:	0008a469 	.word	0x0008a469
   8a404:	0008a469 	.word	0x0008a469
   8a408:	0008a469 	.word	0x0008a469
   8a40c:	0008a469 	.word	0x0008a469
   8a410:	0008a469 	.word	0x0008a469
   8a414:	0008a469 	.word	0x0008a469
   8a418:	0008a469 	.word	0x0008a469
   8a41c:	0008a469 	.word	0x0008a469
   8a420:	0008a469 	.word	0x0008a469
   8a424:	0008a441 	.word	0x0008a441
   8a428:	0008a449 	.word	0x0008a449
   8a42c:	0008a451 	.word	0x0008a451
   8a430:	0008a459 	.word	0x0008a459
   8a434:	0008a461 	.word	0x0008a461
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8a438:	683b      	ldr	r3, [r7, #0]
   8a43a:	2201      	movs	r2, #1
   8a43c:	701a      	strb	r2, [r3, #0]
		break;
   8a43e:	e014      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8a440:	683b      	ldr	r3, [r7, #0]
   8a442:	2202      	movs	r2, #2
   8a444:	701a      	strb	r2, [r3, #0]
		break;
   8a446:	e010      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8a448:	683b      	ldr	r3, [r7, #0]
   8a44a:	2203      	movs	r2, #3
   8a44c:	701a      	strb	r2, [r3, #0]
		break;
   8a44e:	e00c      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8a450:	683b      	ldr	r3, [r7, #0]
   8a452:	2204      	movs	r2, #4
   8a454:	701a      	strb	r2, [r3, #0]
		break;		
   8a456:	e008      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8a458:	683b      	ldr	r3, [r7, #0]
   8a45a:	2205      	movs	r2, #5
   8a45c:	701a      	strb	r2, [r3, #0]
		break;	
   8a45e:	e004      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8a460:	683b      	ldr	r3, [r7, #0]
   8a462:	2206      	movs	r2, #6
   8a464:	701a      	strb	r2, [r3, #0]
		break;
   8a466:	e000      	b.n	8a46a <cl_init_translatemacevent+0x9e>
		default:
		break;
   8a468:	bf00      	nop
	}
	return CL_OK;
   8a46a:	2300      	movs	r3, #0
}
   8a46c:	4618      	mov	r0, r3
   8a46e:	370c      	adds	r7, #12
   8a470:	46bd      	mov	sp, r7
   8a472:	bc80      	pop	{r7}
   8a474:	4770      	bx	lr
   8a476:	bf00      	nop

0008a478 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8a478:	b480      	push	{r7}
   8a47a:	b085      	sub	sp, #20
   8a47c:	af00      	add	r7, sp, #0
   8a47e:	4603      	mov	r3, r0
   8a480:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8a482:	2300      	movs	r3, #0
   8a484:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8a486:	4b0d      	ldr	r3, [pc, #52]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a488:	781b      	ldrb	r3, [r3, #0]
   8a48a:	2b0a      	cmp	r3, #10
   8a48c:	d80f      	bhi.n	8a4ae <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8a48e:	4b0b      	ldr	r3, [pc, #44]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a490:	781b      	ldrb	r3, [r3, #0]
   8a492:	461a      	mov	r2, r3
   8a494:	4b09      	ldr	r3, [pc, #36]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a496:	4413      	add	r3, r2
   8a498:	79fa      	ldrb	r2, [r7, #7]
   8a49a:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8a49c:	4b07      	ldr	r3, [pc, #28]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a49e:	2201      	movs	r2, #1
   8a4a0:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8a4a2:	4b06      	ldr	r3, [pc, #24]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a4a4:	781b      	ldrb	r3, [r3, #0]
   8a4a6:	3301      	adds	r3, #1
   8a4a8:	b2da      	uxtb	r2, r3
   8a4aa:	4b04      	ldr	r3, [pc, #16]	; (8a4bc <Cl_mac_apprequesthandler+0x44>)
   8a4ac:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8a4ae:	7bfb      	ldrb	r3, [r7, #15]
   8a4b0:	4618      	mov	r0, r3
   8a4b2:	3714      	adds	r7, #20
   8a4b4:	46bd      	mov	sp, r7
   8a4b6:	bc80      	pop	{r7}
   8a4b8:	4770      	bx	lr
   8a4ba:	bf00      	nop
   8a4bc:	20072eb4 	.word	0x20072eb4

0008a4c0 <main>:
extern Cl_Uint8Type cur_data ;
extern Cl_Uint8Type cur_datasize;


int main(void)
   {
   8a4c0:	b580      	push	{r7, lr}
   8a4c2:	b082      	sub	sp, #8
   8a4c4:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8a4c6:	2304      	movs	r3, #4
   8a4c8:	71fb      	strb	r3, [r7, #7]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8a4ca:	2300      	movs	r3, #0
   8a4cc:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type Cl_MacEventData = 0;
   8a4ce:	2300      	movs	r3, #0
   8a4d0:	70bb      	strb	r3, [r7, #2]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   
	board_init();
   8a4d2:	4b96      	ldr	r3, [pc, #600]	; (8a72c <main+0x26c>)
   8a4d4:	4798      	blx	r3
	sysclk_init();	
   8a4d6:	4b96      	ldr	r3, [pc, #600]	; (8a730 <main+0x270>)
   8a4d8:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8a4da:	4b96      	ldr	r3, [pc, #600]	; (8a734 <main+0x274>)
   8a4dc:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8a4de:	200b      	movs	r0, #11
   8a4e0:	4b95      	ldr	r3, [pc, #596]	; (8a738 <main+0x278>)
   8a4e2:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8a4e4:	2016      	movs	r0, #22
   8a4e6:	4b94      	ldr	r3, [pc, #592]	; (8a738 <main+0x278>)
   8a4e8:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8a4ea:	2001      	movs	r0, #1
   8a4ec:	4b93      	ldr	r3, [pc, #588]	; (8a73c <main+0x27c>)
   8a4ee:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8a4f0:	2002      	movs	r0, #2
   8a4f2:	4b92      	ldr	r3, [pc, #584]	; (8a73c <main+0x27c>)
   8a4f4:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8a4f6:	2004      	movs	r0, #4
   8a4f8:	4b90      	ldr	r3, [pc, #576]	; (8a73c <main+0x27c>)
   8a4fa:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8a4fc:	2005      	movs	r0, #5
   8a4fe:	4b8f      	ldr	r3, [pc, #572]	; (8a73c <main+0x27c>)
   8a500:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8a502:	2001      	movs	r0, #1
   8a504:	4b8e      	ldr	r3, [pc, #568]	; (8a740 <main+0x280>)
   8a506:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8a508:	2002      	movs	r0, #2
   8a50a:	4b8d      	ldr	r3, [pc, #564]	; (8a740 <main+0x280>)
   8a50c:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8a50e:	2004      	movs	r0, #4
   8a510:	4b8b      	ldr	r3, [pc, #556]	; (8a740 <main+0x280>)
   8a512:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8a514:	2005      	movs	r0, #5
   8a516:	4b8a      	ldr	r3, [pc, #552]	; (8a740 <main+0x280>)
   8a518:	4798      	blx	r3
	
   
	Cl_MacRetval = Cl_MacInit(); 	
   8a51a:	4b8a      	ldr	r3, [pc, #552]	; (8a744 <main+0x284>)
   8a51c:	4798      	blx	r3
   8a51e:	4603      	mov	r3, r0
   8a520:	71fb      	strb	r3, [r7, #7]
	for(temp100 = 1;temp100<=20; temp100++)
   8a522:	2301      	movs	r3, #1
   8a524:	80bb      	strh	r3, [r7, #4]
   8a526:	e00a      	b.n	8a53e <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8a528:	88bb      	ldrh	r3, [r7, #4]
   8a52a:	b2db      	uxtb	r3, r3
   8a52c:	4618      	mov	r0, r3
   8a52e:	4b86      	ldr	r3, [pc, #536]	; (8a748 <main+0x288>)
   8a530:	4798      	blx	r3
		cl_wait(10);
   8a532:	200a      	movs	r0, #10
   8a534:	4b85      	ldr	r3, [pc, #532]	; (8a74c <main+0x28c>)
   8a536:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
	sv_cntrl_deactivatepump(HEPARINPUMP);
	
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8a538:	88bb      	ldrh	r3, [r7, #4]
   8a53a:	3301      	adds	r3, #1
   8a53c:	80bb      	strh	r3, [r7, #4]
   8a53e:	88bb      	ldrh	r3, [r7, #4]
   8a540:	2b14      	cmp	r3, #20
   8a542:	d9f1      	bls.n	8a528 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8a544:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8a548:	201d      	movs	r0, #29
   8a54a:	4b81      	ldr	r3, [pc, #516]	; (8a750 <main+0x290>)
   8a54c:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8a54e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8a552:	200a      	movs	r0, #10
   8a554:	4b7f      	ldr	r3, [pc, #508]	; (8a754 <main+0x294>)
   8a556:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8a558:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8a55c:	201b      	movs	r0, #27
   8a55e:	4b7c      	ldr	r3, [pc, #496]	; (8a750 <main+0x290>)
   8a560:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8a562:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8a566:	200e      	movs	r0, #14
   8a568:	4b7a      	ldr	r3, [pc, #488]	; (8a754 <main+0x294>)
   8a56a:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8a56c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8a570:	2002      	movs	r0, #2
   8a572:	4b78      	ldr	r3, [pc, #480]	; (8a754 <main+0x294>)
   8a574:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	Cl_MacRetval = Cl_App_init(); 
   8a576:	4b78      	ldr	r3, [pc, #480]	; (8a758 <main+0x298>)
   8a578:	4798      	blx	r3
   8a57a:	4603      	mov	r3, r0
   8a57c:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_MacRetval);
   8a57e:	79fb      	ldrb	r3, [r7, #7]
   8a580:	2b00      	cmp	r3, #0
   8a582:	d001      	beq.n	8a588 <main+0xc8>
   8a584:	4b75      	ldr	r3, [pc, #468]	; (8a75c <main+0x29c>)
   8a586:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8a588:	4b75      	ldr	r3, [pc, #468]	; (8a760 <main+0x2a0>)
   8a58a:	4798      	blx	r3
   8a58c:	4603      	mov	r3, r0
   8a58e:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_MacRetval);
   8a590:	79fb      	ldrb	r3, [r7, #7]
   8a592:	2b00      	cmp	r3, #0
   8a594:	d001      	beq.n	8a59a <main+0xda>
   8a596:	4b71      	ldr	r3, [pc, #452]	; (8a75c <main+0x29c>)
   8a598:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8a59a:	4b72      	ldr	r3, [pc, #456]	; (8a764 <main+0x2a4>)
   8a59c:	2204      	movs	r2, #4
   8a59e:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8a5a0:	2304      	movs	r3, #4
   8a5a2:	71fb      	strb	r3, [r7, #7]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8a5a4:	4b70      	ldr	r3, [pc, #448]	; (8a768 <main+0x2a8>)
   8a5a6:	4798      	blx	r3
   8a5a8:	4603      	mov	r3, r0
   8a5aa:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval);
   8a5ac:	79fb      	ldrb	r3, [r7, #7]
   8a5ae:	2b00      	cmp	r3, #0
   8a5b0:	d001      	beq.n	8a5b6 <main+0xf6>
   8a5b2:	4b6a      	ldr	r3, [pc, #424]	; (8a75c <main+0x29c>)
   8a5b4:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8a5b6:	79fb      	ldrb	r3, [r7, #7]
   8a5b8:	2b00      	cmp	r3, #0
   8a5ba:	d105      	bne.n	8a5c8 <main+0x108>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8a5bc:	4b6b      	ldr	r3, [pc, #428]	; (8a76c <main+0x2ac>)
   8a5be:	2201      	movs	r2, #1
   8a5c0:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8a5c2:	4b68      	ldr	r3, [pc, #416]	; (8a764 <main+0x2a4>)
   8a5c4:	2202      	movs	r2, #2
   8a5c6:	701a      	strb	r2, [r3, #0]
#endif
	while (FOREVER)  // LOOP MAIN
	{


	Cl_Mac_StateDummy = Cl_MacState;
   8a5c8:	4b66      	ldr	r3, [pc, #408]	; (8a764 <main+0x2a4>)
   8a5ca:	781a      	ldrb	r2, [r3, #0]
   8a5cc:	4b68      	ldr	r3, [pc, #416]	; (8a770 <main+0x2b0>)
   8a5ce:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8a5d0:	4b68      	ldr	r3, [pc, #416]	; (8a774 <main+0x2b4>)
   8a5d2:	681b      	ldr	r3, [r3, #0]
   8a5d4:	4a68      	ldr	r2, [pc, #416]	; (8a778 <main+0x2b8>)
   8a5d6:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8a5d8:	4b68      	ldr	r3, [pc, #416]	; (8a77c <main+0x2bc>)
   8a5da:	4798      	blx	r3
   8a5dc:	4603      	mov	r3, r0
   8a5de:	71fb      	strb	r3, [r7, #7]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8a5e0:	4b67      	ldr	r3, [pc, #412]	; (8a780 <main+0x2c0>)
   8a5e2:	4798      	blx	r3
   8a5e4:	4603      	mov	r3, r0
   8a5e6:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8a5e8:	79fb      	ldrb	r3, [r7, #7]
   8a5ea:	2b00      	cmp	r3, #0
   8a5ec:	d001      	beq.n	8a5f2 <main+0x132>
   8a5ee:	4b5b      	ldr	r3, [pc, #364]	; (8a75c <main+0x29c>)
   8a5f0:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8a5f2:	4b64      	ldr	r3, [pc, #400]	; (8a784 <main+0x2c4>)
   8a5f4:	4798      	blx	r3
   8a5f6:	4603      	mov	r3, r0
   8a5f8:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8a5fa:	79fb      	ldrb	r3, [r7, #7]
   8a5fc:	2b00      	cmp	r3, #0
   8a5fe:	d001      	beq.n	8a604 <main+0x144>
   8a600:	4b56      	ldr	r3, [pc, #344]	; (8a75c <main+0x29c>)
   8a602:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8a604:	4b5b      	ldr	r3, [pc, #364]	; (8a774 <main+0x2b4>)
   8a606:	681a      	ldr	r2, [r3, #0]
   8a608:	4b5b      	ldr	r3, [pc, #364]	; (8a778 <main+0x2b8>)
   8a60a:	681b      	ldr	r3, [r3, #0]
   8a60c:	1ad3      	subs	r3, r2, r3
   8a60e:	4a5e      	ldr	r2, [pc, #376]	; (8a788 <main+0x2c8>)
   8a610:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8a612:	2032      	movs	r0, #50	; 0x32
   8a614:	4b5d      	ldr	r3, [pc, #372]	; (8a78c <main+0x2cc>)
   8a616:	4798      	blx	r3
   8a618:	4603      	mov	r3, r0
   8a61a:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8a61c:	79fb      	ldrb	r3, [r7, #7]
   8a61e:	2b00      	cmp	r3, #0
   8a620:	f001 879e 	beq.w	8c560 <main+0x20a0>
   8a624:	4b4d      	ldr	r3, [pc, #308]	; (8a75c <main+0x29c>)
   8a626:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueue1.Cl_MacNewEventcount > 0) ||(Cl_MacEventQueue2.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8a628:	f001 bf9a 	b.w	8c560 <main+0x20a0>
		
		{
		Cl_MacEvent = EVT_NULL;
   8a62c:	4b58      	ldr	r3, [pc, #352]	; (8a790 <main+0x2d0>)
   8a62e:	2200      	movs	r2, #0
   8a630:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8a632:	4b58      	ldr	r3, [pc, #352]	; (8a794 <main+0x2d4>)
   8a634:	4798      	blx	r3
   8a636:	4603      	mov	r3, r0
   8a638:	71fb      	strb	r3, [r7, #7]
		ASSERT_ERROR(Cl_MacRetval);
   8a63a:	79fb      	ldrb	r3, [r7, #7]
   8a63c:	2b00      	cmp	r3, #0
   8a63e:	d001      	beq.n	8a644 <main+0x184>
   8a640:	4b46      	ldr	r3, [pc, #280]	; (8a75c <main+0x29c>)
   8a642:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8a644:	4b54      	ldr	r3, [pc, #336]	; (8a798 <main+0x2d8>)
   8a646:	781b      	ldrb	r3, [r3, #0]
   8a648:	2b00      	cmp	r3, #0
   8a64a:	f001 8789 	beq.w	8c560 <main+0x20a0>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8a64e:	4b50      	ldr	r3, [pc, #320]	; (8a790 <main+0x2d0>)
   8a650:	781b      	ldrb	r3, [r3, #0]
   8a652:	4618      	mov	r0, r3
   8a654:	4b4d      	ldr	r3, [pc, #308]	; (8a78c <main+0x2cc>)
   8a656:	4798      	blx	r3
   8a658:	4603      	mov	r3, r0
   8a65a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval);
   8a65c:	79fb      	ldrb	r3, [r7, #7]
   8a65e:	2b00      	cmp	r3, #0
   8a660:	d001      	beq.n	8a666 <main+0x1a6>
   8a662:	4b3e      	ldr	r3, [pc, #248]	; (8a75c <main+0x29c>)
   8a664:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8a666:	4b4a      	ldr	r3, [pc, #296]	; (8a790 <main+0x2d0>)
   8a668:	781b      	ldrb	r3, [r3, #0]
   8a66a:	2b02      	cmp	r3, #2
   8a66c:	d114      	bne.n	8a698 <main+0x1d8>
			{
				//send sync
				// save the data command 
				if(ackCommand = Cl_ConsoleRxMsg.data.byte[0]){
   8a66e:	4b4b      	ldr	r3, [pc, #300]	; (8a79c <main+0x2dc>)
   8a670:	791a      	ldrb	r2, [r3, #4]
   8a672:	4b4b      	ldr	r3, [pc, #300]	; (8a7a0 <main+0x2e0>)
   8a674:	701a      	strb	r2, [r3, #0]
   8a676:	4b4a      	ldr	r3, [pc, #296]	; (8a7a0 <main+0x2e0>)
   8a678:	781b      	ldrb	r3, [r3, #0]
   8a67a:	2b00      	cmp	r3, #0
   8a67c:	d109      	bne.n	8a692 <main+0x1d2>
					
				}
				else{
					// again send 
					Cl_SendDatatoconsole(cur_command, cur_data,cur_datasize);
   8a67e:	4b49      	ldr	r3, [pc, #292]	; (8a7a4 <main+0x2e4>)
   8a680:	7818      	ldrb	r0, [r3, #0]
   8a682:	4b49      	ldr	r3, [pc, #292]	; (8a7a8 <main+0x2e8>)
   8a684:	781b      	ldrb	r3, [r3, #0]
   8a686:	4619      	mov	r1, r3
   8a688:	4b48      	ldr	r3, [pc, #288]	; (8a7ac <main+0x2ec>)
   8a68a:	781b      	ldrb	r3, [r3, #0]
   8a68c:	461a      	mov	r2, r3
   8a68e:	4b48      	ldr	r3, [pc, #288]	; (8a7b0 <main+0x2f0>)
   8a690:	4798      	blx	r3
				}
				ConsoleSync = true;
   8a692:	4b48      	ldr	r3, [pc, #288]	; (8a7b4 <main+0x2f4>)
   8a694:	2201      	movs	r2, #1
   8a696:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8a698:	4b3d      	ldr	r3, [pc, #244]	; (8a790 <main+0x2d0>)
   8a69a:	781b      	ldrb	r3, [r3, #0]
   8a69c:	2b01      	cmp	r3, #1
   8a69e:	d111      	bne.n	8a6c4 <main+0x204>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8a6a0:	2303      	movs	r3, #3
   8a6a2:	703b      	strb	r3, [r7, #0]
				ConsoleSync = true;
   8a6a4:	4b43      	ldr	r3, [pc, #268]	; (8a7b4 <main+0x2f4>)
   8a6a6:	2201      	movs	r2, #1
   8a6a8:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8a6aa:	463b      	mov	r3, r7
   8a6ac:	2201      	movs	r2, #1
   8a6ae:	4619      	mov	r1, r3
   8a6b0:	2004      	movs	r0, #4
   8a6b2:	4b3f      	ldr	r3, [pc, #252]	; (8a7b0 <main+0x2f0>)
   8a6b4:	4798      	blx	r3
   8a6b6:	4603      	mov	r3, r0
   8a6b8:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval);
   8a6ba:	79fb      	ldrb	r3, [r7, #7]
   8a6bc:	2b00      	cmp	r3, #0
   8a6be:	d001      	beq.n	8a6c4 <main+0x204>
   8a6c0:	4b26      	ldr	r3, [pc, #152]	; (8a75c <main+0x29c>)
   8a6c2:	4798      	blx	r3
				}
				
			}			
			
			
				switch (Cl_MacState)
   8a6c4:	4b27      	ldr	r3, [pc, #156]	; (8a764 <main+0x2a4>)
   8a6c6:	781b      	ldrb	r3, [r3, #0]
   8a6c8:	3b01      	subs	r3, #1
   8a6ca:	2b14      	cmp	r3, #20
   8a6cc:	f201 873c 	bhi.w	8c548 <main+0x2088>
   8a6d0:	a201      	add	r2, pc, #4	; (adr r2, 8a6d8 <main+0x218>)
   8a6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a6d6:	bf00      	nop
   8a6d8:	0008c549 	.word	0x0008c549
   8a6dc:	0008a7b9 	.word	0x0008a7b9
   8a6e0:	0008c549 	.word	0x0008c549
   8a6e4:	0008c549 	.word	0x0008c549
   8a6e8:	0008a8db 	.word	0x0008a8db
   8a6ec:	0008adb9 	.word	0x0008adb9
   8a6f0:	0008ae6f 	.word	0x0008ae6f
   8a6f4:	0008ab85 	.word	0x0008ab85
   8a6f8:	0008c549 	.word	0x0008c549
   8a6fc:	0008b125 	.word	0x0008b125
   8a700:	0008b435 	.word	0x0008b435
   8a704:	0008b6a1 	.word	0x0008b6a1
   8a708:	0008b887 	.word	0x0008b887
   8a70c:	0008b8a1 	.word	0x0008b8a1
   8a710:	0008bfb9 	.word	0x0008bfb9
   8a714:	0008c22d 	.word	0x0008c22d
   8a718:	0008c391 	.word	0x0008c391
   8a71c:	0008c541 	.word	0x0008c541
   8a720:	0008c545 	.word	0x0008c545
   8a724:	0008baed 	.word	0x0008baed
   8a728:	0008bcf9 	.word	0x0008bcf9
   8a72c:	00097ead 	.word	0x00097ead
   8a730:	0008044d 	.word	0x0008044d
   8a734:	00097cb1 	.word	0x00097cb1
   8a738:	00098635 	.word	0x00098635
   8a73c:	00097451 	.word	0x00097451
   8a740:	0009748d 	.word	0x0009748d
   8a744:	0008c5a5 	.word	0x0008c5a5
   8a748:	00097511 	.word	0x00097511
   8a74c:	000918fd 	.word	0x000918fd
   8a750:	00097809 	.word	0x00097809
   8a754:	000977e9 	.word	0x000977e9
   8a758:	0008c641 	.word	0x0008c641
   8a75c:	0008870d 	.word	0x0008870d
   8a760:	0008c709 	.word	0x0008c709
   8a764:	200704b0 	.word	0x200704b0
   8a768:	0009961d 	.word	0x0009961d
   8a76c:	20072173 	.word	0x20072173
   8a770:	200730f9 	.word	0x200730f9
   8a774:	20072674 	.word	0x20072674
   8a778:	20072f10 	.word	0x20072f10
   8a77c:	0008c72d 	.word	0x0008c72d
   8a780:	0008c999 	.word	0x0008c999
   8a784:	0008c75d 	.word	0x0008c75d
   8a788:	20073074 	.word	0x20073074
   8a78c:	0008871d 	.word	0x0008871d
   8a790:	20072172 	.word	0x20072172
   8a794:	0008c7dd 	.word	0x0008c7dd
   8a798:	20072174 	.word	0x20072174
   8a79c:	20072f88 	.word	0x20072f88
   8a7a0:	2007334b 	.word	0x2007334b
   8a7a4:	20073349 	.word	0x20073349
   8a7a8:	2007334a 	.word	0x2007334a
   8a7ac:	20073348 	.word	0x20073348
   8a7b0:	0009926d 	.word	0x0009926d
   8a7b4:	200704b1 	.word	0x200704b1
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8a7b8:	4bb2      	ldr	r3, [pc, #712]	; (8aa84 <main+0x5c4>)
   8a7ba:	781b      	ldrb	r3, [r3, #0]
   8a7bc:	3b2a      	subs	r3, #42	; 0x2a
   8a7be:	2b19      	cmp	r3, #25
   8a7c0:	f200 8085 	bhi.w	8a8ce <main+0x40e>
   8a7c4:	a201      	add	r2, pc, #4	; (adr r2, 8a7cc <main+0x30c>)
   8a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a7ca:	bf00      	nop
   8a7cc:	0008a835 	.word	0x0008a835
   8a7d0:	0008a8cf 	.word	0x0008a8cf
   8a7d4:	0008a8cf 	.word	0x0008a8cf
   8a7d8:	0008a8cf 	.word	0x0008a8cf
   8a7dc:	0008a8cf 	.word	0x0008a8cf
   8a7e0:	0008a8cf 	.word	0x0008a8cf
   8a7e4:	0008a8cf 	.word	0x0008a8cf
   8a7e8:	0008a8cf 	.word	0x0008a8cf
   8a7ec:	0008a8cf 	.word	0x0008a8cf
   8a7f0:	0008a8cf 	.word	0x0008a8cf
   8a7f4:	0008a8cf 	.word	0x0008a8cf
   8a7f8:	0008a8cf 	.word	0x0008a8cf
   8a7fc:	0008a8cf 	.word	0x0008a8cf
   8a800:	0008a8cf 	.word	0x0008a8cf
   8a804:	0008a8cf 	.word	0x0008a8cf
   8a808:	0008a8af 	.word	0x0008a8af
   8a80c:	0008a8cf 	.word	0x0008a8cf
   8a810:	0008a8af 	.word	0x0008a8af
   8a814:	0008a8af 	.word	0x0008a8af
   8a818:	0008a8af 	.word	0x0008a8af
   8a81c:	0008a8cf 	.word	0x0008a8cf
   8a820:	0008a8cf 	.word	0x0008a8cf
   8a824:	0008a8cf 	.word	0x0008a8cf
   8a828:	0008a8cf 	.word	0x0008a8cf
   8a82c:	0008a8cf 	.word	0x0008a8cf
   8a830:	0008a855 	.word	0x0008a855
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8a834:	4b93      	ldr	r3, [pc, #588]	; (8aa84 <main+0x5c4>)
   8a836:	781b      	ldrb	r3, [r3, #0]
   8a838:	4618      	mov	r0, r3
   8a83a:	4b93      	ldr	r3, [pc, #588]	; (8aa88 <main+0x5c8>)
   8a83c:	4798      	blx	r3
   8a83e:	4603      	mov	r3, r0
   8a840:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8a842:	79fb      	ldrb	r3, [r7, #7]
   8a844:	2b00      	cmp	r3, #0
   8a846:	d001      	beq.n	8a84c <main+0x38c>
   8a848:	4b90      	ldr	r3, [pc, #576]	; (8aa8c <main+0x5cc>)
   8a84a:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8a84c:	4b8d      	ldr	r3, [pc, #564]	; (8aa84 <main+0x5c4>)
   8a84e:	2200      	movs	r2, #0
   8a850:	701a      	strb	r2, [r3, #0]
						break;
   8a852:	e040      	b.n	8a8d6 <main+0x416>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8a854:	202b      	movs	r0, #43	; 0x2b
   8a856:	4b8c      	ldr	r3, [pc, #560]	; (8aa88 <main+0x5c8>)
   8a858:	4798      	blx	r3
   8a85a:	4603      	mov	r3, r0
   8a85c:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8a85e:	79fb      	ldrb	r3, [r7, #7]
   8a860:	2b00      	cmp	r3, #0
   8a862:	d001      	beq.n	8a868 <main+0x3a8>
   8a864:	4b89      	ldr	r3, [pc, #548]	; (8aa8c <main+0x5cc>)
   8a866:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8a868:	79fb      	ldrb	r3, [r7, #7]
   8a86a:	2b00      	cmp	r3, #0
   8a86c:	d109      	bne.n	8a882 <main+0x3c2>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8a86e:	202b      	movs	r0, #43	; 0x2b
   8a870:	4b87      	ldr	r3, [pc, #540]	; (8aa90 <main+0x5d0>)
   8a872:	4798      	blx	r3
   8a874:	4603      	mov	r3, r0
   8a876:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8a878:	79fb      	ldrb	r3, [r7, #7]
   8a87a:	2b00      	cmp	r3, #0
   8a87c:	d001      	beq.n	8a882 <main+0x3c2>
   8a87e:	4b83      	ldr	r3, [pc, #524]	; (8aa8c <main+0x5cc>)
   8a880:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8a882:	79fb      	ldrb	r3, [r7, #7]
   8a884:	2b00      	cmp	r3, #0
   8a886:	d125      	bne.n	8a8d4 <main+0x414>
								{
									Cl_MacEvent = EVT_NULL;
   8a888:	4b7e      	ldr	r3, [pc, #504]	; (8aa84 <main+0x5c4>)
   8a88a:	2200      	movs	r2, #0
   8a88c:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8a88e:	4b81      	ldr	r3, [pc, #516]	; (8aa94 <main+0x5d4>)
   8a890:	2205      	movs	r2, #5
   8a892:	701a      	strb	r2, [r3, #0]
									Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
   8a894:	2201      	movs	r2, #1
   8a896:	2105      	movs	r1, #5
   8a898:	2045      	movs	r0, #69	; 0x45
   8a89a:	4b7f      	ldr	r3, [pc, #508]	; (8aa98 <main+0x5d8>)
   8a89c:	4798      	blx	r3
   8a89e:	4603      	mov	r3, r0
   8a8a0:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8a8a2:	79fb      	ldrb	r3, [r7, #7]
   8a8a4:	2b00      	cmp	r3, #0
   8a8a6:	d015      	beq.n	8a8d4 <main+0x414>
   8a8a8:	4b78      	ldr	r3, [pc, #480]	; (8aa8c <main+0x5cc>)
   8a8aa:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8a8ac:	e012      	b.n	8a8d4 <main+0x414>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8a8ae:	4b75      	ldr	r3, [pc, #468]	; (8aa84 <main+0x5c4>)
   8a8b0:	781b      	ldrb	r3, [r3, #0]
   8a8b2:	4618      	mov	r0, r3
   8a8b4:	4b74      	ldr	r3, [pc, #464]	; (8aa88 <main+0x5c8>)
   8a8b6:	4798      	blx	r3
   8a8b8:	4603      	mov	r3, r0
   8a8ba:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8a8bc:	79fb      	ldrb	r3, [r7, #7]
   8a8be:	2b00      	cmp	r3, #0
   8a8c0:	d001      	beq.n	8a8c6 <main+0x406>
   8a8c2:	4b72      	ldr	r3, [pc, #456]	; (8aa8c <main+0x5cc>)
   8a8c4:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8a8c6:	4b6f      	ldr	r3, [pc, #444]	; (8aa84 <main+0x5c4>)
   8a8c8:	2200      	movs	r2, #0
   8a8ca:	701a      	strb	r2, [r3, #0]

						break;
   8a8cc:	e003      	b.n	8a8d6 <main+0x416>
						default: break;
   8a8ce:	bf00      	nop
   8a8d0:	f001 be3d 	b.w	8c54e <main+0x208e>

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8a8d4:	bf00      	nop
							Cl_MacEvent = EVT_NULL;

						break;
						default: break;
					}
					break;
   8a8d6:	f001 be3a 	b.w	8c54e <main+0x208e>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8a8da:	4b6a      	ldr	r3, [pc, #424]	; (8aa84 <main+0x5c4>)
   8a8dc:	781b      	ldrb	r3, [r3, #0]
   8a8de:	3b07      	subs	r3, #7
   8a8e0:	2b38      	cmp	r3, #56	; 0x38
   8a8e2:	f200 8146 	bhi.w	8ab72 <main+0x6b2>
   8a8e6:	a201      	add	r2, pc, #4	; (adr r2, 8a8ec <main+0x42c>)
   8a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a8ec:	0008a9f1 	.word	0x0008a9f1
   8a8f0:	0008ab73 	.word	0x0008ab73
   8a8f4:	0008aaf7 	.word	0x0008aaf7
   8a8f8:	0008a9d1 	.word	0x0008a9d1
   8a8fc:	0008a9d1 	.word	0x0008a9d1
   8a900:	0008a9d1 	.word	0x0008a9d1
   8a904:	0008ab73 	.word	0x0008ab73
   8a908:	0008ab73 	.word	0x0008ab73
   8a90c:	0008aa5f 	.word	0x0008aa5f
   8a910:	0008ab73 	.word	0x0008ab73
   8a914:	0008ab73 	.word	0x0008ab73
   8a918:	0008ab73 	.word	0x0008ab73
   8a91c:	0008ab73 	.word	0x0008ab73
   8a920:	0008ab73 	.word	0x0008ab73
   8a924:	0008ab73 	.word	0x0008ab73
   8a928:	0008ab73 	.word	0x0008ab73
   8a92c:	0008ab73 	.word	0x0008ab73
   8a930:	0008ab73 	.word	0x0008ab73
   8a934:	0008ab73 	.word	0x0008ab73
   8a938:	0008ab73 	.word	0x0008ab73
   8a93c:	0008ab73 	.word	0x0008ab73
   8a940:	0008ab73 	.word	0x0008ab73
   8a944:	0008ab73 	.word	0x0008ab73
   8a948:	0008ab73 	.word	0x0008ab73
   8a94c:	0008ab73 	.word	0x0008ab73
   8a950:	0008ab73 	.word	0x0008ab73
   8a954:	0008ab73 	.word	0x0008ab73
   8a958:	0008ab73 	.word	0x0008ab73
   8a95c:	0008ab73 	.word	0x0008ab73
   8a960:	0008ab73 	.word	0x0008ab73
   8a964:	0008ab73 	.word	0x0008ab73
   8a968:	0008ab73 	.word	0x0008ab73
   8a96c:	0008ab73 	.word	0x0008ab73
   8a970:	0008ab73 	.word	0x0008ab73
   8a974:	0008ab73 	.word	0x0008ab73
   8a978:	0008ab73 	.word	0x0008ab73
   8a97c:	0008a9d1 	.word	0x0008a9d1
   8a980:	0008ab73 	.word	0x0008ab73
   8a984:	0008a9d1 	.word	0x0008a9d1
   8a988:	0008a9d1 	.word	0x0008a9d1
   8a98c:	0008ab73 	.word	0x0008ab73
   8a990:	0008ab73 	.word	0x0008ab73
   8a994:	0008ab73 	.word	0x0008ab73
   8a998:	0008ab73 	.word	0x0008ab73
   8a99c:	0008ab73 	.word	0x0008ab73
   8a9a0:	0008ab73 	.word	0x0008ab73
   8a9a4:	0008ab73 	.word	0x0008ab73
   8a9a8:	0008ab73 	.word	0x0008ab73
   8a9ac:	0008ab73 	.word	0x0008ab73
   8a9b0:	0008ab73 	.word	0x0008ab73
   8a9b4:	0008a9d1 	.word	0x0008a9d1
   8a9b8:	0008ab73 	.word	0x0008ab73
   8a9bc:	0008a9d1 	.word	0x0008a9d1
   8a9c0:	0008a9d1 	.word	0x0008a9d1
   8a9c4:	0008a9d1 	.word	0x0008a9d1
   8a9c8:	0008ab73 	.word	0x0008ab73
   8a9cc:	0008aaa5 	.word	0x0008aaa5
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a9d0:	4b2c      	ldr	r3, [pc, #176]	; (8aa84 <main+0x5c4>)
   8a9d2:	781b      	ldrb	r3, [r3, #0]
   8a9d4:	4618      	mov	r0, r3
   8a9d6:	4b2e      	ldr	r3, [pc, #184]	; (8aa90 <main+0x5d0>)
   8a9d8:	4798      	blx	r3
   8a9da:	4603      	mov	r3, r0
   8a9dc:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8a9de:	79fb      	ldrb	r3, [r7, #7]
   8a9e0:	2b00      	cmp	r3, #0
   8a9e2:	d001      	beq.n	8a9e8 <main+0x528>
   8a9e4:	4b29      	ldr	r3, [pc, #164]	; (8aa8c <main+0x5cc>)
   8a9e6:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8a9e8:	4b26      	ldr	r3, [pc, #152]	; (8aa84 <main+0x5c4>)
   8a9ea:	2200      	movs	r2, #0
   8a9ec:	701a      	strb	r2, [r3, #0]
							break;
   8a9ee:	e0c7      	b.n	8ab80 <main+0x6c0>

						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8a9f0:	4b2a      	ldr	r3, [pc, #168]	; (8aa9c <main+0x5dc>)
   8a9f2:	2200      	movs	r2, #0
   8a9f4:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a9f6:	4b23      	ldr	r3, [pc, #140]	; (8aa84 <main+0x5c4>)
   8a9f8:	781b      	ldrb	r3, [r3, #0]
   8a9fa:	4618      	mov	r0, r3
   8a9fc:	4b24      	ldr	r3, [pc, #144]	; (8aa90 <main+0x5d0>)
   8a9fe:	4798      	blx	r3
   8aa00:	4603      	mov	r3, r0
   8aa02:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8aa04:	79fb      	ldrb	r3, [r7, #7]
   8aa06:	2b00      	cmp	r3, #0
   8aa08:	d001      	beq.n	8aa0e <main+0x54e>
   8aa0a:	4b20      	ldr	r3, [pc, #128]	; (8aa8c <main+0x5cc>)
   8aa0c:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8aa0e:	79fb      	ldrb	r3, [r7, #7]
   8aa10:	2b00      	cmp	r3, #0
   8aa12:	d10e      	bne.n	8aa32 <main+0x572>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8aa14:	4b1b      	ldr	r3, [pc, #108]	; (8aa84 <main+0x5c4>)
   8aa16:	781b      	ldrb	r3, [r3, #0]
   8aa18:	4618      	mov	r0, r3
   8aa1a:	4b21      	ldr	r3, [pc, #132]	; (8aaa0 <main+0x5e0>)
   8aa1c:	4798      	blx	r3
   8aa1e:	4603      	mov	r3, r0
   8aa20:	71fb      	strb	r3, [r7, #7]
								if(Cl_MacRetval != CL_REJECTED)
   8aa22:	79fb      	ldrb	r3, [r7, #7]
   8aa24:	2b03      	cmp	r3, #3
   8aa26:	d004      	beq.n	8aa32 <main+0x572>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8aa28:	79fb      	ldrb	r3, [r7, #7]
   8aa2a:	2b00      	cmp	r3, #0
   8aa2c:	d001      	beq.n	8aa32 <main+0x572>
   8aa2e:	4b17      	ldr	r3, [pc, #92]	; (8aa8c <main+0x5cc>)
   8aa30:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8aa32:	79fb      	ldrb	r3, [r7, #7]
   8aa34:	2b00      	cmp	r3, #0
   8aa36:	d10e      	bne.n	8aa56 <main+0x596>
							{
								Cl_MacState = MAC_RINSE;
   8aa38:	4b16      	ldr	r3, [pc, #88]	; (8aa94 <main+0x5d4>)
   8aa3a:	2207      	movs	r2, #7
   8aa3c:	701a      	strb	r2, [r3, #0]
								Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8aa3e:	2201      	movs	r2, #1
   8aa40:	2107      	movs	r1, #7
   8aa42:	2045      	movs	r0, #69	; 0x45
   8aa44:	4b14      	ldr	r3, [pc, #80]	; (8aa98 <main+0x5d8>)
   8aa46:	4798      	blx	r3
   8aa48:	4603      	mov	r3, r0
   8aa4a:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);			
   8aa4c:	79fb      	ldrb	r3, [r7, #7]
   8aa4e:	2b00      	cmp	r3, #0
   8aa50:	d001      	beq.n	8aa56 <main+0x596>
   8aa52:	4b0e      	ldr	r3, [pc, #56]	; (8aa8c <main+0x5cc>)
   8aa54:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8aa56:	4b0b      	ldr	r3, [pc, #44]	; (8aa84 <main+0x5c4>)
   8aa58:	2200      	movs	r2, #0
   8aa5a:	701a      	strb	r2, [r3, #0]
						break;
   8aa5c:	e090      	b.n	8ab80 <main+0x6c0>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8aa5e:	4b09      	ldr	r3, [pc, #36]	; (8aa84 <main+0x5c4>)
   8aa60:	781b      	ldrb	r3, [r3, #0]
   8aa62:	4618      	mov	r0, r3
   8aa64:	4b0e      	ldr	r3, [pc, #56]	; (8aaa0 <main+0x5e0>)
   8aa66:	4798      	blx	r3
   8aa68:	4603      	mov	r3, r0
   8aa6a:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8aa6c:	79fb      	ldrb	r3, [r7, #7]
   8aa6e:	2b00      	cmp	r3, #0
   8aa70:	d001      	beq.n	8aa76 <main+0x5b6>
   8aa72:	4b06      	ldr	r3, [pc, #24]	; (8aa8c <main+0x5cc>)
   8aa74:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8aa76:	79fb      	ldrb	r3, [r7, #7]
   8aa78:	2b00      	cmp	r3, #0
   8aa7a:	d17d      	bne.n	8ab78 <main+0x6b8>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8aa7c:	4b05      	ldr	r3, [pc, #20]	; (8aa94 <main+0x5d4>)
   8aa7e:	220a      	movs	r2, #10
   8aa80:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8aa82:	e079      	b.n	8ab78 <main+0x6b8>
   8aa84:	20072172 	.word	0x20072172
   8aa88:	0008a185 	.word	0x0008a185
   8aa8c:	0008870d 	.word	0x0008870d
   8aa90:	000a1b89 	.word	0x000a1b89
   8aa94:	200704b0 	.word	0x200704b0
   8aa98:	0009926d 	.word	0x0009926d
   8aa9c:	20072178 	.word	0x20072178
   8aaa0:	0009f365 	.word	0x0009f365
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8aaa4:	4bbb      	ldr	r3, [pc, #748]	; (8ad94 <main+0x8d4>)
   8aaa6:	781b      	ldrb	r3, [r3, #0]
   8aaa8:	4618      	mov	r0, r3
   8aaaa:	4bbb      	ldr	r3, [pc, #748]	; (8ad98 <main+0x8d8>)
   8aaac:	4798      	blx	r3
   8aaae:	4603      	mov	r3, r0
   8aab0:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8aab2:	79fb      	ldrb	r3, [r7, #7]
   8aab4:	2b00      	cmp	r3, #0
   8aab6:	d001      	beq.n	8aabc <main+0x5fc>
   8aab8:	4bb8      	ldr	r3, [pc, #736]	; (8ad9c <main+0x8dc>)
   8aaba:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8aabc:	79fb      	ldrb	r3, [r7, #7]
   8aabe:	2b00      	cmp	r3, #0
   8aac0:	d15d      	bne.n	8ab7e <main+0x6be>
							{
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8aac2:	4bb4      	ldr	r3, [pc, #720]	; (8ad94 <main+0x8d4>)
   8aac4:	781b      	ldrb	r3, [r3, #0]
   8aac6:	4618      	mov	r0, r3
   8aac8:	4bb5      	ldr	r3, [pc, #724]	; (8ada0 <main+0x8e0>)
   8aaca:	4798      	blx	r3
   8aacc:	4603      	mov	r3, r0
   8aace:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8aad0:	79fb      	ldrb	r3, [r7, #7]
   8aad2:	2b00      	cmp	r3, #0
   8aad4:	d001      	beq.n	8aada <main+0x61a>
   8aad6:	4bb1      	ldr	r3, [pc, #708]	; (8ad9c <main+0x8dc>)
   8aad8:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8aada:	4bb2      	ldr	r3, [pc, #712]	; (8ada4 <main+0x8e4>)
   8aadc:	2208      	movs	r2, #8
   8aade:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
   8aae0:	2201      	movs	r2, #1
   8aae2:	2108      	movs	r1, #8
   8aae4:	2045      	movs	r0, #69	; 0x45
   8aae6:	4bb0      	ldr	r3, [pc, #704]	; (8ada8 <main+0x8e8>)
   8aae8:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8aaea:	79fb      	ldrb	r3, [r7, #7]
   8aaec:	2b00      	cmp	r3, #0
   8aaee:	d046      	beq.n	8ab7e <main+0x6be>
   8aaf0:	4baa      	ldr	r3, [pc, #680]	; (8ad9c <main+0x8dc>)
   8aaf2:	4798      	blx	r3
							{
								// Handle error
							}
							

						break;
   8aaf4:	e043      	b.n	8ab7e <main+0x6be>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8aaf6:	4ba7      	ldr	r3, [pc, #668]	; (8ad94 <main+0x8d4>)
   8aaf8:	781b      	ldrb	r3, [r3, #0]
   8aafa:	4618      	mov	r0, r3
   8aafc:	4bab      	ldr	r3, [pc, #684]	; (8adac <main+0x8ec>)
   8aafe:	4798      	blx	r3
   8ab00:	4603      	mov	r3, r0
   8ab02:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8ab04:	79fb      	ldrb	r3, [r7, #7]
   8ab06:	2b00      	cmp	r3, #0
   8ab08:	d001      	beq.n	8ab0e <main+0x64e>
   8ab0a:	4ba4      	ldr	r3, [pc, #656]	; (8ad9c <main+0x8dc>)
   8ab0c:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8ab0e:	79fb      	ldrb	r3, [r7, #7]
   8ab10:	2b02      	cmp	r3, #2
   8ab12:	d10b      	bne.n	8ab2c <main+0x66c>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ab14:	4b9f      	ldr	r3, [pc, #636]	; (8ad94 <main+0x8d4>)
   8ab16:	781b      	ldrb	r3, [r3, #0]
   8ab18:	4618      	mov	r0, r3
   8ab1a:	4ba5      	ldr	r3, [pc, #660]	; (8adb0 <main+0x8f0>)
   8ab1c:	4798      	blx	r3
   8ab1e:	4603      	mov	r3, r0
   8ab20:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ab22:	79fb      	ldrb	r3, [r7, #7]
   8ab24:	2b00      	cmp	r3, #0
   8ab26:	d001      	beq.n	8ab2c <main+0x66c>
   8ab28:	4b9c      	ldr	r3, [pc, #624]	; (8ad9c <main+0x8dc>)
   8ab2a:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8ab2c:	79fb      	ldrb	r3, [r7, #7]
   8ab2e:	2b02      	cmp	r3, #2
   8ab30:	d10b      	bne.n	8ab4a <main+0x68a>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ab32:	4b98      	ldr	r3, [pc, #608]	; (8ad94 <main+0x8d4>)
   8ab34:	781b      	ldrb	r3, [r3, #0]
   8ab36:	4618      	mov	r0, r3
   8ab38:	4b9e      	ldr	r3, [pc, #632]	; (8adb4 <main+0x8f4>)
   8ab3a:	4798      	blx	r3
   8ab3c:	4603      	mov	r3, r0
   8ab3e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ab40:	79fb      	ldrb	r3, [r7, #7]
   8ab42:	2b00      	cmp	r3, #0
   8ab44:	d001      	beq.n	8ab4a <main+0x68a>
   8ab46:	4b95      	ldr	r3, [pc, #596]	; (8ad9c <main+0x8dc>)
   8ab48:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8ab4a:	79fb      	ldrb	r3, [r7, #7]
   8ab4c:	2b00      	cmp	r3, #0
   8ab4e:	d10c      	bne.n	8ab6a <main+0x6aa>
							{
								Cl_MacState = MAC_DPREP;
   8ab50:	4b94      	ldr	r3, [pc, #592]	; (8ada4 <main+0x8e4>)
   8ab52:	220b      	movs	r2, #11
   8ab54:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8ab56:	2201      	movs	r2, #1
   8ab58:	210b      	movs	r1, #11
   8ab5a:	2045      	movs	r0, #69	; 0x45
   8ab5c:	4b92      	ldr	r3, [pc, #584]	; (8ada8 <main+0x8e8>)
   8ab5e:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8ab60:	79fb      	ldrb	r3, [r7, #7]
   8ab62:	2b00      	cmp	r3, #0
   8ab64:	d001      	beq.n	8ab6a <main+0x6aa>
   8ab66:	4b8d      	ldr	r3, [pc, #564]	; (8ad9c <main+0x8dc>)
   8ab68:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8ab6a:	4b8a      	ldr	r3, [pc, #552]	; (8ad94 <main+0x8d4>)
   8ab6c:	2200      	movs	r2, #0
   8ab6e:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8ab70:	e006      	b.n	8ab80 <main+0x6c0>

						
						default: break;
   8ab72:	bf00      	nop
   8ab74:	f001 bceb 	b.w	8c54e <main+0x208e>
							else
							{
									// Handle error
							}
							
						break;
   8ab78:	bf00      	nop
   8ab7a:	f001 bce8 	b.w	8c54e <main+0x208e>
							{
								// Handle error
							}
							

						break;
   8ab7e:	bf00      	nop
						break;

						
						default: break;
					}
					break;
   8ab80:	f001 bce5 	b.w	8c54e <main+0x208e>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8ab84:	4b83      	ldr	r3, [pc, #524]	; (8ad94 <main+0x8d4>)
   8ab86:	781b      	ldrb	r3, [r3, #0]
   8ab88:	3b07      	subs	r3, #7
   8ab8a:	2b4d      	cmp	r3, #77	; 0x4d
   8ab8c:	f200 80f4 	bhi.w	8ad78 <main+0x8b8>
   8ab90:	a201      	add	r2, pc, #4	; (adr r2, 8ab98 <main+0x6d8>)
   8ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ab96:	bf00      	nop
   8ab98:	0008ad09 	.word	0x0008ad09
   8ab9c:	0008ad79 	.word	0x0008ad79
   8aba0:	0008ad79 	.word	0x0008ad79
   8aba4:	0008ad09 	.word	0x0008ad09
   8aba8:	0008ad09 	.word	0x0008ad09
   8abac:	0008ad09 	.word	0x0008ad09
   8abb0:	0008ad79 	.word	0x0008ad79
   8abb4:	0008ad79 	.word	0x0008ad79
   8abb8:	0008ad79 	.word	0x0008ad79
   8abbc:	0008ad79 	.word	0x0008ad79
   8abc0:	0008ad79 	.word	0x0008ad79
   8abc4:	0008ad79 	.word	0x0008ad79
   8abc8:	0008ad79 	.word	0x0008ad79
   8abcc:	0008ad79 	.word	0x0008ad79
   8abd0:	0008ad79 	.word	0x0008ad79
   8abd4:	0008ad79 	.word	0x0008ad79
   8abd8:	0008ad79 	.word	0x0008ad79
   8abdc:	0008ad79 	.word	0x0008ad79
   8abe0:	0008ad79 	.word	0x0008ad79
   8abe4:	0008ad79 	.word	0x0008ad79
   8abe8:	0008ad79 	.word	0x0008ad79
   8abec:	0008ad79 	.word	0x0008ad79
   8abf0:	0008ad79 	.word	0x0008ad79
   8abf4:	0008ad79 	.word	0x0008ad79
   8abf8:	0008ad79 	.word	0x0008ad79
   8abfc:	0008ad79 	.word	0x0008ad79
   8ac00:	0008ad79 	.word	0x0008ad79
   8ac04:	0008ad79 	.word	0x0008ad79
   8ac08:	0008ad79 	.word	0x0008ad79
   8ac0c:	0008ad79 	.word	0x0008ad79
   8ac10:	0008ad79 	.word	0x0008ad79
   8ac14:	0008ad79 	.word	0x0008ad79
   8ac18:	0008ad79 	.word	0x0008ad79
   8ac1c:	0008ad79 	.word	0x0008ad79
   8ac20:	0008acd1 	.word	0x0008acd1
   8ac24:	0008ad79 	.word	0x0008ad79
   8ac28:	0008ad79 	.word	0x0008ad79
   8ac2c:	0008ad79 	.word	0x0008ad79
   8ac30:	0008ad79 	.word	0x0008ad79
   8ac34:	0008acd1 	.word	0x0008acd1
   8ac38:	0008ad79 	.word	0x0008ad79
   8ac3c:	0008ad79 	.word	0x0008ad79
   8ac40:	0008ad79 	.word	0x0008ad79
   8ac44:	0008ad79 	.word	0x0008ad79
   8ac48:	0008ad79 	.word	0x0008ad79
   8ac4c:	0008ad79 	.word	0x0008ad79
   8ac50:	0008ad79 	.word	0x0008ad79
   8ac54:	0008ad79 	.word	0x0008ad79
   8ac58:	0008ad79 	.word	0x0008ad79
   8ac5c:	0008acd1 	.word	0x0008acd1
   8ac60:	0008acd1 	.word	0x0008acd1
   8ac64:	0008acd1 	.word	0x0008acd1
   8ac68:	0008acd1 	.word	0x0008acd1
   8ac6c:	0008acd1 	.word	0x0008acd1
   8ac70:	0008ad79 	.word	0x0008ad79
   8ac74:	0008ad79 	.word	0x0008ad79
   8ac78:	0008ad09 	.word	0x0008ad09
   8ac7c:	0008ad09 	.word	0x0008ad09
   8ac80:	0008ad09 	.word	0x0008ad09
   8ac84:	0008ad79 	.word	0x0008ad79
   8ac88:	0008ad79 	.word	0x0008ad79
   8ac8c:	0008ad23 	.word	0x0008ad23
   8ac90:	0008ad23 	.word	0x0008ad23
   8ac94:	0008ad79 	.word	0x0008ad79
   8ac98:	0008ad79 	.word	0x0008ad79
   8ac9c:	0008ad79 	.word	0x0008ad79
   8aca0:	0008ad79 	.word	0x0008ad79
   8aca4:	0008ad79 	.word	0x0008ad79
   8aca8:	0008ad79 	.word	0x0008ad79
   8acac:	0008ad79 	.word	0x0008ad79
   8acb0:	0008ad79 	.word	0x0008ad79
   8acb4:	0008ad79 	.word	0x0008ad79
   8acb8:	0008ad79 	.word	0x0008ad79
   8acbc:	0008ad79 	.word	0x0008ad79
   8acc0:	0008ad09 	.word	0x0008ad09
   8acc4:	0008ad3d 	.word	0x0008ad3d
   8acc8:	0008ad3d 	.word	0x0008ad3d
   8accc:	0008ad57 	.word	0x0008ad57
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8acd0:	4b30      	ldr	r3, [pc, #192]	; (8ad94 <main+0x8d4>)
   8acd2:	781b      	ldrb	r3, [r3, #0]
   8acd4:	4618      	mov	r0, r3
   8acd6:	4b32      	ldr	r3, [pc, #200]	; (8ada0 <main+0x8e0>)
   8acd8:	4798      	blx	r3
   8acda:	4603      	mov	r3, r0
   8acdc:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8acde:	79fb      	ldrb	r3, [r7, #7]
   8ace0:	2b00      	cmp	r3, #0
   8ace2:	d001      	beq.n	8ace8 <main+0x828>
   8ace4:	4b2d      	ldr	r3, [pc, #180]	; (8ad9c <main+0x8dc>)
   8ace6:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8ace8:	79fb      	ldrb	r3, [r7, #7]
   8acea:	2b00      	cmp	r3, #0
   8acec:	d146      	bne.n	8ad7c <main+0x8bc>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8acee:	4b29      	ldr	r3, [pc, #164]	; (8ad94 <main+0x8d4>)
   8acf0:	781b      	ldrb	r3, [r3, #0]
   8acf2:	4618      	mov	r0, r3
   8acf4:	4b2e      	ldr	r3, [pc, #184]	; (8adb0 <main+0x8f0>)
   8acf6:	4798      	blx	r3
   8acf8:	4603      	mov	r3, r0
   8acfa:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8acfc:	79fb      	ldrb	r3, [r7, #7]
   8acfe:	2b00      	cmp	r3, #0
   8ad00:	d03c      	beq.n	8ad7c <main+0x8bc>
   8ad02:	4b26      	ldr	r3, [pc, #152]	; (8ad9c <main+0x8dc>)
   8ad04:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad06:	e039      	b.n	8ad7c <main+0x8bc>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8ad08:	4b22      	ldr	r3, [pc, #136]	; (8ad94 <main+0x8d4>)
   8ad0a:	781b      	ldrb	r3, [r3, #0]
   8ad0c:	4618      	mov	r0, r3
   8ad0e:	4b24      	ldr	r3, [pc, #144]	; (8ada0 <main+0x8e0>)
   8ad10:	4798      	blx	r3
   8ad12:	4603      	mov	r3, r0
   8ad14:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ad16:	79fb      	ldrb	r3, [r7, #7]
   8ad18:	2b00      	cmp	r3, #0
   8ad1a:	d031      	beq.n	8ad80 <main+0x8c0>
   8ad1c:	4b1f      	ldr	r3, [pc, #124]	; (8ad9c <main+0x8dc>)
   8ad1e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad20:	e02e      	b.n	8ad80 <main+0x8c0>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ad22:	4b1c      	ldr	r3, [pc, #112]	; (8ad94 <main+0x8d4>)
   8ad24:	781b      	ldrb	r3, [r3, #0]
   8ad26:	4618      	mov	r0, r3
   8ad28:	4b21      	ldr	r3, [pc, #132]	; (8adb0 <main+0x8f0>)
   8ad2a:	4798      	blx	r3
   8ad2c:	4603      	mov	r3, r0
   8ad2e:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ad30:	79fb      	ldrb	r3, [r7, #7]
   8ad32:	2b00      	cmp	r3, #0
   8ad34:	d026      	beq.n	8ad84 <main+0x8c4>
   8ad36:	4b19      	ldr	r3, [pc, #100]	; (8ad9c <main+0x8dc>)
   8ad38:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad3a:	e023      	b.n	8ad84 <main+0x8c4>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8ad3c:	4b15      	ldr	r3, [pc, #84]	; (8ad94 <main+0x8d4>)
   8ad3e:	781b      	ldrb	r3, [r3, #0]
   8ad40:	4618      	mov	r0, r3
   8ad42:	4b17      	ldr	r3, [pc, #92]	; (8ada0 <main+0x8e0>)
   8ad44:	4798      	blx	r3
   8ad46:	4603      	mov	r3, r0
   8ad48:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ad4a:	79fb      	ldrb	r3, [r7, #7]
   8ad4c:	2b00      	cmp	r3, #0
   8ad4e:	d01b      	beq.n	8ad88 <main+0x8c8>
   8ad50:	4b12      	ldr	r3, [pc, #72]	; (8ad9c <main+0x8dc>)
   8ad52:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad54:	e018      	b.n	8ad88 <main+0x8c8>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8ad56:	202b      	movs	r0, #43	; 0x2b
   8ad58:	4b14      	ldr	r3, [pc, #80]	; (8adac <main+0x8ec>)
   8ad5a:	4798      	blx	r3
   8ad5c:	4603      	mov	r3, r0
   8ad5e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ad60:	79fb      	ldrb	r3, [r7, #7]
   8ad62:	2b00      	cmp	r3, #0
   8ad64:	d001      	beq.n	8ad6a <main+0x8aa>
   8ad66:	4b0d      	ldr	r3, [pc, #52]	; (8ad9c <main+0x8dc>)
   8ad68:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8ad6a:	4b0e      	ldr	r3, [pc, #56]	; (8ada4 <main+0x8e4>)
   8ad6c:	2205      	movs	r2, #5
   8ad6e:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8ad70:	4b08      	ldr	r3, [pc, #32]	; (8ad94 <main+0x8d4>)
   8ad72:	2200      	movs	r2, #0
   8ad74:	701a      	strb	r2, [r3, #0]
						break;
   8ad76:	e008      	b.n	8ad8a <main+0x8ca>
						default:break;
   8ad78:	bf00      	nop
   8ad7a:	e006      	b.n	8ad8a <main+0x8ca>
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad7c:	bf00      	nop
   8ad7e:	e004      	b.n	8ad8a <main+0x8ca>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad80:	bf00      	nop
   8ad82:	e002      	b.n	8ad8a <main+0x8ca>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad84:	bf00      	nop
   8ad86:	e000      	b.n	8ad8a <main+0x8ca>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8ad88:	bf00      	nop
						Cl_MacEvent = EVT_NULL;
						break;
						default:break;
					}
	
					Cl_MacEvent = EVT_NULL;
   8ad8a:	4b02      	ldr	r3, [pc, #8]	; (8ad94 <main+0x8d4>)
   8ad8c:	2200      	movs	r2, #0
   8ad8e:	701a      	strb	r2, [r3, #0]
					break;
   8ad90:	f001 bbdd 	b.w	8c54e <main+0x208e>
   8ad94:	20072172 	.word	0x20072172
   8ad98:	00085495 	.word	0x00085495
   8ad9c:	0008870d 	.word	0x0008870d
   8ada0:	00099a01 	.word	0x00099a01
   8ada4:	200704b0 	.word	0x200704b0
   8ada8:	0009926d 	.word	0x0009926d
   8adac:	000a1b89 	.word	0x000a1b89
   8adb0:	0009f365 	.word	0x0009f365
   8adb4:	0009b671 	.word	0x0009b671
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8adb8:	4bc7      	ldr	r3, [pc, #796]	; (8b0d8 <main+0xc18>)
   8adba:	781b      	ldrb	r3, [r3, #0]
   8adbc:	3b07      	subs	r3, #7
   8adbe:	2b27      	cmp	r3, #39	; 0x27
   8adc0:	d852      	bhi.n	8ae68 <main+0x9a8>
   8adc2:	a201      	add	r2, pc, #4	; (adr r2, 8adc8 <main+0x908>)
   8adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8adc8:	0008ae69 	.word	0x0008ae69
   8adcc:	0008ae69 	.word	0x0008ae69
   8add0:	0008ae69 	.word	0x0008ae69
   8add4:	0008ae69 	.word	0x0008ae69
   8add8:	0008ae69 	.word	0x0008ae69
   8addc:	0008ae69 	.word	0x0008ae69
   8ade0:	0008ae69 	.word	0x0008ae69
   8ade4:	0008ae69 	.word	0x0008ae69
   8ade8:	0008ae69 	.word	0x0008ae69
   8adec:	0008ae69 	.word	0x0008ae69
   8adf0:	0008ae69 	.word	0x0008ae69
   8adf4:	0008ae69 	.word	0x0008ae69
   8adf8:	0008ae69 	.word	0x0008ae69
   8adfc:	0008ae69 	.word	0x0008ae69
   8ae00:	0008ae69 	.word	0x0008ae69
   8ae04:	0008ae69 	.word	0x0008ae69
   8ae08:	0008ae69 	.word	0x0008ae69
   8ae0c:	0008ae69 	.word	0x0008ae69
   8ae10:	0008ae69 	.word	0x0008ae69
   8ae14:	0008ae69 	.word	0x0008ae69
   8ae18:	0008ae69 	.word	0x0008ae69
   8ae1c:	0008ae69 	.word	0x0008ae69
   8ae20:	0008ae69 	.word	0x0008ae69
   8ae24:	0008ae69 	.word	0x0008ae69
   8ae28:	0008ae69 	.word	0x0008ae69
   8ae2c:	0008ae69 	.word	0x0008ae69
   8ae30:	0008ae69 	.word	0x0008ae69
   8ae34:	0008ae69 	.word	0x0008ae69
   8ae38:	0008ae69 	.word	0x0008ae69
   8ae3c:	0008ae69 	.word	0x0008ae69
   8ae40:	0008ae69 	.word	0x0008ae69
   8ae44:	0008ae69 	.word	0x0008ae69
   8ae48:	0008ae69 	.word	0x0008ae69
   8ae4c:	0008ae69 	.word	0x0008ae69
   8ae50:	0008ae69 	.word	0x0008ae69
   8ae54:	0008ae69 	.word	0x0008ae69
   8ae58:	0008ae69 	.word	0x0008ae69
   8ae5c:	0008ae69 	.word	0x0008ae69
   8ae60:	0008ae69 	.word	0x0008ae69
   8ae64:	0008ae69 	.word	0x0008ae69
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8ae68:	bf00      	nop
					}
					break;
   8ae6a:	f001 bb70 	b.w	8c54e <main+0x208e>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8ae6e:	4b9a      	ldr	r3, [pc, #616]	; (8b0d8 <main+0xc18>)
   8ae70:	781b      	ldrb	r3, [r3, #0]
   8ae72:	3b07      	subs	r3, #7
   8ae74:	2b4a      	cmp	r3, #74	; 0x4a
   8ae76:	f200 814c 	bhi.w	8b112 <main+0xc52>
   8ae7a:	a201      	add	r2, pc, #4	; (adr r2, 8ae80 <main+0x9c0>)
   8ae7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ae80:	0008afad 	.word	0x0008afad
   8ae84:	0008b09f 	.word	0x0008b09f
   8ae88:	0008b031 	.word	0x0008b031
   8ae8c:	0008b0f9 	.word	0x0008b0f9
   8ae90:	0008b0f9 	.word	0x0008b0f9
   8ae94:	0008b0f9 	.word	0x0008b0f9
   8ae98:	0008b113 	.word	0x0008b113
   8ae9c:	0008b113 	.word	0x0008b113
   8aea0:	0008b0bf 	.word	0x0008b0bf
   8aea4:	0008b0bf 	.word	0x0008b0bf
   8aea8:	0008b113 	.word	0x0008b113
   8aeac:	0008b113 	.word	0x0008b113
   8aeb0:	0008b113 	.word	0x0008b113
   8aeb4:	0008b113 	.word	0x0008b113
   8aeb8:	0008b113 	.word	0x0008b113
   8aebc:	0008b113 	.word	0x0008b113
   8aec0:	0008b113 	.word	0x0008b113
   8aec4:	0008b113 	.word	0x0008b113
   8aec8:	0008b113 	.word	0x0008b113
   8aecc:	0008b113 	.word	0x0008b113
   8aed0:	0008b113 	.word	0x0008b113
   8aed4:	0008b113 	.word	0x0008b113
   8aed8:	0008b113 	.word	0x0008b113
   8aedc:	0008b113 	.word	0x0008b113
   8aee0:	0008b0bf 	.word	0x0008b0bf
   8aee4:	0008b0bf 	.word	0x0008b0bf
   8aee8:	0008b113 	.word	0x0008b113
   8aeec:	0008b113 	.word	0x0008b113
   8aef0:	0008b113 	.word	0x0008b113
   8aef4:	0008b113 	.word	0x0008b113
   8aef8:	0008b113 	.word	0x0008b113
   8aefc:	0008b0f9 	.word	0x0008b0f9
   8af00:	0008b0f9 	.word	0x0008b0f9
   8af04:	0008b0f9 	.word	0x0008b0f9
   8af08:	0008b031 	.word	0x0008b031
   8af0c:	0008b113 	.word	0x0008b113
   8af10:	0008b113 	.word	0x0008b113
   8af14:	0008b113 	.word	0x0008b113
   8af18:	0008b031 	.word	0x0008b031
   8af1c:	0008b031 	.word	0x0008b031
   8af20:	0008b113 	.word	0x0008b113
   8af24:	0008b113 	.word	0x0008b113
   8af28:	0008b011 	.word	0x0008b011
   8af2c:	0008b113 	.word	0x0008b113
   8af30:	0008b113 	.word	0x0008b113
   8af34:	0008b113 	.word	0x0008b113
   8af38:	0008b113 	.word	0x0008b113
   8af3c:	0008b113 	.word	0x0008b113
   8af40:	0008b113 	.word	0x0008b113
   8af44:	0008b031 	.word	0x0008b031
   8af48:	0008b031 	.word	0x0008b031
   8af4c:	0008b031 	.word	0x0008b031
   8af50:	0008b031 	.word	0x0008b031
   8af54:	0008b031 	.word	0x0008b031
   8af58:	0008b031 	.word	0x0008b031
   8af5c:	0008b113 	.word	0x0008b113
   8af60:	0008b113 	.word	0x0008b113
   8af64:	0008b113 	.word	0x0008b113
   8af68:	0008b113 	.word	0x0008b113
   8af6c:	0008b113 	.word	0x0008b113
   8af70:	0008b113 	.word	0x0008b113
   8af74:	0008b113 	.word	0x0008b113
   8af78:	0008b113 	.word	0x0008b113
   8af7c:	0008b113 	.word	0x0008b113
   8af80:	0008b113 	.word	0x0008b113
   8af84:	0008b051 	.word	0x0008b051
   8af88:	0008b113 	.word	0x0008b113
   8af8c:	0008b113 	.word	0x0008b113
   8af90:	0008b113 	.word	0x0008b113
   8af94:	0008b113 	.word	0x0008b113
   8af98:	0008b113 	.word	0x0008b113
   8af9c:	0008b113 	.word	0x0008b113
   8afa0:	0008b113 	.word	0x0008b113
   8afa4:	0008b113 	.word	0x0008b113
   8afa8:	0008b031 	.word	0x0008b031
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8afac:	4b4b      	ldr	r3, [pc, #300]	; (8b0dc <main+0xc1c>)
   8afae:	2200      	movs	r2, #0
   8afb0:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8afb2:	4b49      	ldr	r3, [pc, #292]	; (8b0d8 <main+0xc18>)
   8afb4:	781b      	ldrb	r3, [r3, #0]
   8afb6:	4618      	mov	r0, r3
   8afb8:	4b49      	ldr	r3, [pc, #292]	; (8b0e0 <main+0xc20>)
   8afba:	4798      	blx	r3
   8afbc:	4603      	mov	r3, r0
   8afbe:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8afc0:	79fb      	ldrb	r3, [r7, #7]
   8afc2:	2b00      	cmp	r3, #0
   8afc4:	d001      	beq.n	8afca <main+0xb0a>
   8afc6:	4b47      	ldr	r3, [pc, #284]	; (8b0e4 <main+0xc24>)
   8afc8:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8afca:	79fb      	ldrb	r3, [r7, #7]
   8afcc:	2b00      	cmp	r3, #0
   8afce:	d10c      	bne.n	8afea <main+0xb2a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8afd0:	4b41      	ldr	r3, [pc, #260]	; (8b0d8 <main+0xc18>)
   8afd2:	781b      	ldrb	r3, [r3, #0]
   8afd4:	4618      	mov	r0, r3
   8afd6:	4b44      	ldr	r3, [pc, #272]	; (8b0e8 <main+0xc28>)
   8afd8:	4798      	blx	r3
   8afda:	4603      	mov	r3, r0
   8afdc:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);	
   8afde:	79fb      	ldrb	r3, [r7, #7]
   8afe0:	2b00      	cmp	r3, #0
   8afe2:	d011      	beq.n	8b008 <main+0xb48>
   8afe4:	4b3f      	ldr	r3, [pc, #252]	; (8b0e4 <main+0xc24>)
   8afe6:	4798      	blx	r3
   8afe8:	e00e      	b.n	8b008 <main+0xb48>
							}
							else if(Cl_MacRetval == CL_OK)
   8afea:	79fb      	ldrb	r3, [r7, #7]
   8afec:	2b00      	cmp	r3, #0
   8afee:	d10b      	bne.n	8b008 <main+0xb48>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8aff0:	4b39      	ldr	r3, [pc, #228]	; (8b0d8 <main+0xc18>)
   8aff2:	781b      	ldrb	r3, [r3, #0]
   8aff4:	4618      	mov	r0, r3
   8aff6:	4b3c      	ldr	r3, [pc, #240]	; (8b0e8 <main+0xc28>)
   8aff8:	4798      	blx	r3
   8affa:	4603      	mov	r3, r0
   8affc:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8affe:	79fb      	ldrb	r3, [r7, #7]
   8b000:	2b00      	cmp	r3, #0
   8b002:	d001      	beq.n	8b008 <main+0xb48>
   8b004:	4b37      	ldr	r3, [pc, #220]	; (8b0e4 <main+0xc24>)
   8b006:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8b008:	4b33      	ldr	r3, [pc, #204]	; (8b0d8 <main+0xc18>)
   8b00a:	2200      	movs	r2, #0
   8b00c:	701a      	strb	r2, [r3, #0]
						break;
   8b00e:	e087      	b.n	8b120 <main+0xc60>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b010:	4b31      	ldr	r3, [pc, #196]	; (8b0d8 <main+0xc18>)
   8b012:	781b      	ldrb	r3, [r3, #0]
   8b014:	4618      	mov	r0, r3
   8b016:	4b34      	ldr	r3, [pc, #208]	; (8b0e8 <main+0xc28>)
   8b018:	4798      	blx	r3
   8b01a:	4603      	mov	r3, r0
   8b01c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b01e:	79fb      	ldrb	r3, [r7, #7]
   8b020:	2b00      	cmp	r3, #0
   8b022:	d001      	beq.n	8b028 <main+0xb68>
   8b024:	4b2f      	ldr	r3, [pc, #188]	; (8b0e4 <main+0xc24>)
   8b026:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8b028:	4b2b      	ldr	r3, [pc, #172]	; (8b0d8 <main+0xc18>)
   8b02a:	2200      	movs	r2, #0
   8b02c:	701a      	strb	r2, [r3, #0]
						break;
   8b02e:	e077      	b.n	8b120 <main+0xc60>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b030:	4b29      	ldr	r3, [pc, #164]	; (8b0d8 <main+0xc18>)
   8b032:	781b      	ldrb	r3, [r3, #0]
   8b034:	4618      	mov	r0, r3
   8b036:	4b2c      	ldr	r3, [pc, #176]	; (8b0e8 <main+0xc28>)
   8b038:	4798      	blx	r3
   8b03a:	4603      	mov	r3, r0
   8b03c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b03e:	79fb      	ldrb	r3, [r7, #7]
   8b040:	2b00      	cmp	r3, #0
   8b042:	d001      	beq.n	8b048 <main+0xb88>
   8b044:	4b27      	ldr	r3, [pc, #156]	; (8b0e4 <main+0xc24>)
   8b046:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8b048:	4b23      	ldr	r3, [pc, #140]	; (8b0d8 <main+0xc18>)
   8b04a:	2200      	movs	r2, #0
   8b04c:	701a      	strb	r2, [r3, #0]
						break;
   8b04e:	e067      	b.n	8b120 <main+0xc60>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b050:	4b21      	ldr	r3, [pc, #132]	; (8b0d8 <main+0xc18>)
   8b052:	781b      	ldrb	r3, [r3, #0]
   8b054:	4618      	mov	r0, r3
   8b056:	4b24      	ldr	r3, [pc, #144]	; (8b0e8 <main+0xc28>)
   8b058:	4798      	blx	r3
   8b05a:	4603      	mov	r3, r0
   8b05c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b05e:	79fb      	ldrb	r3, [r7, #7]
   8b060:	2b00      	cmp	r3, #0
   8b062:	d001      	beq.n	8b068 <main+0xba8>
   8b064:	4b1f      	ldr	r3, [pc, #124]	; (8b0e4 <main+0xc24>)
   8b066:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8b068:	79fb      	ldrb	r3, [r7, #7]
   8b06a:	2b00      	cmp	r3, #0
   8b06c:	d10f      	bne.n	8b08e <main+0xbce>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8b06e:	4b1f      	ldr	r3, [pc, #124]	; (8b0ec <main+0xc2c>)
   8b070:	220a      	movs	r2, #10
   8b072:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8b074:	230a      	movs	r3, #10
   8b076:	707b      	strb	r3, [r7, #1]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
   8b078:	787b      	ldrb	r3, [r7, #1]
   8b07a:	2201      	movs	r2, #1
   8b07c:	4619      	mov	r1, r3
   8b07e:	2045      	movs	r0, #69	; 0x45
   8b080:	4b1b      	ldr	r3, [pc, #108]	; (8b0f0 <main+0xc30>)
   8b082:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8b084:	79fb      	ldrb	r3, [r7, #7]
   8b086:	2b00      	cmp	r3, #0
   8b088:	d001      	beq.n	8b08e <main+0xbce>
   8b08a:	4b16      	ldr	r3, [pc, #88]	; (8b0e4 <main+0xc24>)
   8b08c:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8b08e:	4b19      	ldr	r3, [pc, #100]	; (8b0f4 <main+0xc34>)
   8b090:	4798      	blx	r3
   8b092:	4603      	mov	r3, r0
   8b094:	71fb      	strb	r3, [r7, #7]
							
							Cl_MacEvent = EVT_NULL;
   8b096:	4b10      	ldr	r3, [pc, #64]	; (8b0d8 <main+0xc18>)
   8b098:	2200      	movs	r2, #0
   8b09a:	701a      	strb	r2, [r3, #0]
						break;
   8b09c:	e040      	b.n	8b120 <main+0xc60>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b09e:	4b0e      	ldr	r3, [pc, #56]	; (8b0d8 <main+0xc18>)
   8b0a0:	781b      	ldrb	r3, [r3, #0]
   8b0a2:	4618      	mov	r0, r3
   8b0a4:	4b10      	ldr	r3, [pc, #64]	; (8b0e8 <main+0xc28>)
   8b0a6:	4798      	blx	r3
   8b0a8:	4603      	mov	r3, r0
   8b0aa:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b0ac:	79fb      	ldrb	r3, [r7, #7]
   8b0ae:	2b00      	cmp	r3, #0
   8b0b0:	d001      	beq.n	8b0b6 <main+0xbf6>
   8b0b2:	4b0c      	ldr	r3, [pc, #48]	; (8b0e4 <main+0xc24>)
   8b0b4:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8b0b6:	4b08      	ldr	r3, [pc, #32]	; (8b0d8 <main+0xc18>)
   8b0b8:	2200      	movs	r2, #0
   8b0ba:	701a      	strb	r2, [r3, #0]
						break;
   8b0bc:	e030      	b.n	8b120 <main+0xc60>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b0be:	4b06      	ldr	r3, [pc, #24]	; (8b0d8 <main+0xc18>)
   8b0c0:	781b      	ldrb	r3, [r3, #0]
   8b0c2:	4618      	mov	r0, r3
   8b0c4:	4b08      	ldr	r3, [pc, #32]	; (8b0e8 <main+0xc28>)
   8b0c6:	4798      	blx	r3
   8b0c8:	4603      	mov	r3, r0
   8b0ca:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b0cc:	79fb      	ldrb	r3, [r7, #7]
   8b0ce:	2b00      	cmp	r3, #0
   8b0d0:	d022      	beq.n	8b118 <main+0xc58>
   8b0d2:	4b04      	ldr	r3, [pc, #16]	; (8b0e4 <main+0xc24>)
   8b0d4:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8b0d6:	e01f      	b.n	8b118 <main+0xc58>
   8b0d8:	20072172 	.word	0x20072172
   8b0dc:	20072178 	.word	0x20072178
   8b0e0:	000a1b89 	.word	0x000a1b89
   8b0e4:	0008870d 	.word	0x0008870d
   8b0e8:	0009f365 	.word	0x0009f365
   8b0ec:	200704b0 	.word	0x200704b0
   8b0f0:	0009926d 	.word	0x0009926d
   8b0f4:	00085385 	.word	0x00085385
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b0f8:	4bb1      	ldr	r3, [pc, #708]	; (8b3c0 <main+0xf00>)
   8b0fa:	781b      	ldrb	r3, [r3, #0]
   8b0fc:	4618      	mov	r0, r3
   8b0fe:	4bb1      	ldr	r3, [pc, #708]	; (8b3c4 <main+0xf04>)
   8b100:	4798      	blx	r3
   8b102:	4603      	mov	r3, r0
   8b104:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b106:	79fb      	ldrb	r3, [r7, #7]
   8b108:	2b00      	cmp	r3, #0
   8b10a:	d008      	beq.n	8b11e <main+0xc5e>
   8b10c:	4bae      	ldr	r3, [pc, #696]	; (8b3c8 <main+0xf08>)
   8b10e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8b110:	e005      	b.n	8b11e <main+0xc5e>
						default: break;
   8b112:	bf00      	nop
   8b114:	f001 ba1b 	b.w	8c54e <main+0x208e>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8b118:	bf00      	nop
   8b11a:	f001 ba18 	b.w	8c54e <main+0x208e>
						ASSERT_ERROR(Cl_MacRetval);
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8b11e:	bf00      	nop
						default: break;
					}
					break;
   8b120:	f001 ba15 	b.w	8c54e <main+0x208e>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8b124:	4ba6      	ldr	r3, [pc, #664]	; (8b3c0 <main+0xf00>)
   8b126:	781b      	ldrb	r3, [r3, #0]
   8b128:	3b07      	subs	r3, #7
   8b12a:	2b38      	cmp	r3, #56	; 0x38
   8b12c:	f200 816d 	bhi.w	8b40a <main+0xf4a>
   8b130:	a201      	add	r2, pc, #4	; (adr r2, 8b138 <main+0xc78>)
   8b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b136:	bf00      	nop
   8b138:	0008b273 	.word	0x0008b273
   8b13c:	0008b40b 	.word	0x0008b40b
   8b140:	0008b2db 	.word	0x0008b2db
   8b144:	0008b3e5 	.word	0x0008b3e5
   8b148:	0008b3e5 	.word	0x0008b3e5
   8b14c:	0008b3e5 	.word	0x0008b3e5
   8b150:	0008b40b 	.word	0x0008b40b
   8b154:	0008b40b 	.word	0x0008b40b
   8b158:	0008b3a7 	.word	0x0008b3a7
   8b15c:	0008b3a7 	.word	0x0008b3a7
   8b160:	0008b40b 	.word	0x0008b40b
   8b164:	0008b40b 	.word	0x0008b40b
   8b168:	0008b40b 	.word	0x0008b40b
   8b16c:	0008b40b 	.word	0x0008b40b
   8b170:	0008b40b 	.word	0x0008b40b
   8b174:	0008b40b 	.word	0x0008b40b
   8b178:	0008b40b 	.word	0x0008b40b
   8b17c:	0008b40b 	.word	0x0008b40b
   8b180:	0008b40b 	.word	0x0008b40b
   8b184:	0008b40b 	.word	0x0008b40b
   8b188:	0008b40b 	.word	0x0008b40b
   8b18c:	0008b40b 	.word	0x0008b40b
   8b190:	0008b35b 	.word	0x0008b35b
   8b194:	0008b40b 	.word	0x0008b40b
   8b198:	0008b381 	.word	0x0008b381
   8b19c:	0008b381 	.word	0x0008b381
   8b1a0:	0008b40b 	.word	0x0008b40b
   8b1a4:	0008b40b 	.word	0x0008b40b
   8b1a8:	0008b40b 	.word	0x0008b40b
   8b1ac:	0008b40b 	.word	0x0008b40b
   8b1b0:	0008b40b 	.word	0x0008b40b
   8b1b4:	0008b3e5 	.word	0x0008b3e5
   8b1b8:	0008b3e5 	.word	0x0008b3e5
   8b1bc:	0008b3e5 	.word	0x0008b3e5
   8b1c0:	0008b40b 	.word	0x0008b40b
   8b1c4:	0008b40b 	.word	0x0008b40b
   8b1c8:	0008b40b 	.word	0x0008b40b
   8b1cc:	0008b40b 	.word	0x0008b40b
   8b1d0:	0008b21d 	.word	0x0008b21d
   8b1d4:	0008b21d 	.word	0x0008b21d
   8b1d8:	0008b40b 	.word	0x0008b40b
   8b1dc:	0008b40b 	.word	0x0008b40b
   8b1e0:	0008b40b 	.word	0x0008b40b
   8b1e4:	0008b40b 	.word	0x0008b40b
   8b1e8:	0008b40b 	.word	0x0008b40b
   8b1ec:	0008b40b 	.word	0x0008b40b
   8b1f0:	0008b40b 	.word	0x0008b40b
   8b1f4:	0008b40b 	.word	0x0008b40b
   8b1f8:	0008b40b 	.word	0x0008b40b
   8b1fc:	0008b40b 	.word	0x0008b40b
   8b200:	0008b40b 	.word	0x0008b40b
   8b204:	0008b40b 	.word	0x0008b40b
   8b208:	0008b40b 	.word	0x0008b40b
   8b20c:	0008b40b 	.word	0x0008b40b
   8b210:	0008b40b 	.word	0x0008b40b
   8b214:	0008b40b 	.word	0x0008b40b
   8b218:	0008b22d 	.word	0x0008b22d
				
					{
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b21c:	4b68      	ldr	r3, [pc, #416]	; (8b3c0 <main+0xf00>)
   8b21e:	781b      	ldrb	r3, [r3, #0]
   8b220:	4618      	mov	r0, r3
   8b222:	4b68      	ldr	r3, [pc, #416]	; (8b3c4 <main+0xf04>)
   8b224:	4798      	blx	r3
   8b226:	4603      	mov	r3, r0
   8b228:	71fb      	strb	r3, [r7, #7]
						break;
   8b22a:	e101      	b.n	8b430 <main+0xf70>

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8b22c:	4b64      	ldr	r3, [pc, #400]	; (8b3c0 <main+0xf00>)
   8b22e:	781b      	ldrb	r3, [r3, #0]
   8b230:	4618      	mov	r0, r3
   8b232:	4b66      	ldr	r3, [pc, #408]	; (8b3cc <main+0xf0c>)
   8b234:	4798      	blx	r3
   8b236:	4603      	mov	r3, r0
   8b238:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b23a:	79fb      	ldrb	r3, [r7, #7]
   8b23c:	2b00      	cmp	r3, #0
   8b23e:	d001      	beq.n	8b244 <main+0xd84>
   8b240:	4b61      	ldr	r3, [pc, #388]	; (8b3c8 <main+0xf08>)
   8b242:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b244:	79fb      	ldrb	r3, [r7, #7]
   8b246:	2b00      	cmp	r3, #0
   8b248:	d10b      	bne.n	8b262 <main+0xda2>
							{
							Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b24a:	4b5d      	ldr	r3, [pc, #372]	; (8b3c0 <main+0xf00>)
   8b24c:	781b      	ldrb	r3, [r3, #0]
   8b24e:	4618      	mov	r0, r3
   8b250:	4b5f      	ldr	r3, [pc, #380]	; (8b3d0 <main+0xf10>)
   8b252:	4798      	blx	r3
   8b254:	4603      	mov	r3, r0
   8b256:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b258:	79fb      	ldrb	r3, [r7, #7]
   8b25a:	2b00      	cmp	r3, #0
   8b25c:	d001      	beq.n	8b262 <main+0xda2>
   8b25e:	4b5a      	ldr	r3, [pc, #360]	; (8b3c8 <main+0xf08>)
   8b260:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b262:	79fb      	ldrb	r3, [r7, #7]
   8b264:	2b00      	cmp	r3, #0
   8b266:	f040 80d3 	bne.w	8b410 <main+0xf50>
							{
								Cl_MacState = MAC_DISINFECT;
   8b26a:	4b5a      	ldr	r3, [pc, #360]	; (8b3d4 <main+0xf14>)
   8b26c:	2208      	movs	r2, #8
   8b26e:	701a      	strb	r2, [r3, #0]
							else
							{
								// handdle error
							}
						
						break;
   8b270:	e0ce      	b.n	8b410 <main+0xf50>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b272:	4b53      	ldr	r3, [pc, #332]	; (8b3c0 <main+0xf00>)
   8b274:	781b      	ldrb	r3, [r3, #0]
   8b276:	4618      	mov	r0, r3
   8b278:	4b57      	ldr	r3, [pc, #348]	; (8b3d8 <main+0xf18>)
   8b27a:	4798      	blx	r3
   8b27c:	4603      	mov	r3, r0
   8b27e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b280:	79fb      	ldrb	r3, [r7, #7]
   8b282:	2b00      	cmp	r3, #0
   8b284:	d001      	beq.n	8b28a <main+0xdca>
   8b286:	4b50      	ldr	r3, [pc, #320]	; (8b3c8 <main+0xf08>)
   8b288:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8b28a:	79fb      	ldrb	r3, [r7, #7]
   8b28c:	2b00      	cmp	r3, #0
   8b28e:	d10b      	bne.n	8b2a8 <main+0xde8>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b290:	4b4b      	ldr	r3, [pc, #300]	; (8b3c0 <main+0xf00>)
   8b292:	781b      	ldrb	r3, [r3, #0]
   8b294:	4618      	mov	r0, r3
   8b296:	4b4b      	ldr	r3, [pc, #300]	; (8b3c4 <main+0xf04>)
   8b298:	4798      	blx	r3
   8b29a:	4603      	mov	r3, r0
   8b29c:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8b29e:	79fb      	ldrb	r3, [r7, #7]
   8b2a0:	2b00      	cmp	r3, #0
   8b2a2:	d001      	beq.n	8b2a8 <main+0xde8>
   8b2a4:	4b48      	ldr	r3, [pc, #288]	; (8b3c8 <main+0xf08>)
   8b2a6:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8b2a8:	79fb      	ldrb	r3, [r7, #7]
   8b2aa:	2b00      	cmp	r3, #0
   8b2ac:	d102      	bne.n	8b2b4 <main+0xdf4>
								{
									Cl_MacState = MAC_RINSE;
   8b2ae:	4b49      	ldr	r3, [pc, #292]	; (8b3d4 <main+0xf14>)
   8b2b0:	2207      	movs	r2, #7
   8b2b2:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8b2b4:	79fb      	ldrb	r3, [r7, #7]
   8b2b6:	2b00      	cmp	r3, #0
   8b2b8:	d10b      	bne.n	8b2d2 <main+0xe12>
								{
									Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8b2ba:	2201      	movs	r2, #1
   8b2bc:	2107      	movs	r1, #7
   8b2be:	2045      	movs	r0, #69	; 0x45
   8b2c0:	4b46      	ldr	r3, [pc, #280]	; (8b3dc <main+0xf1c>)
   8b2c2:	4798      	blx	r3
   8b2c4:	4603      	mov	r3, r0
   8b2c6:	71fb      	strb	r3, [r7, #7]
									ASSERT_ERROR(Cl_MacRetval);
   8b2c8:	79fb      	ldrb	r3, [r7, #7]
   8b2ca:	2b00      	cmp	r3, #0
   8b2cc:	d001      	beq.n	8b2d2 <main+0xe12>
   8b2ce:	4b3e      	ldr	r3, [pc, #248]	; (8b3c8 <main+0xf08>)
   8b2d0:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8b2d2:	4b3b      	ldr	r3, [pc, #236]	; (8b3c0 <main+0xf00>)
   8b2d4:	2200      	movs	r2, #0
   8b2d6:	701a      	strb	r2, [r3, #0]
						break;
   8b2d8:	e0aa      	b.n	8b430 <main+0xf70>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b2da:	4b39      	ldr	r3, [pc, #228]	; (8b3c0 <main+0xf00>)
   8b2dc:	781b      	ldrb	r3, [r3, #0]
   8b2de:	4618      	mov	r0, r3
   8b2e0:	4b3d      	ldr	r3, [pc, #244]	; (8b3d8 <main+0xf18>)
   8b2e2:	4798      	blx	r3
   8b2e4:	4603      	mov	r3, r0
   8b2e6:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b2e8:	79fb      	ldrb	r3, [r7, #7]
   8b2ea:	2b00      	cmp	r3, #0
   8b2ec:	d001      	beq.n	8b2f2 <main+0xe32>
   8b2ee:	4b36      	ldr	r3, [pc, #216]	; (8b3c8 <main+0xf08>)
   8b2f0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b2f2:	79fb      	ldrb	r3, [r7, #7]
   8b2f4:	2b00      	cmp	r3, #0
   8b2f6:	d10b      	bne.n	8b310 <main+0xe50>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b2f8:	4b31      	ldr	r3, [pc, #196]	; (8b3c0 <main+0xf00>)
   8b2fa:	781b      	ldrb	r3, [r3, #0]
   8b2fc:	4618      	mov	r0, r3
   8b2fe:	4b31      	ldr	r3, [pc, #196]	; (8b3c4 <main+0xf04>)
   8b300:	4798      	blx	r3
   8b302:	4603      	mov	r3, r0
   8b304:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b306:	79fb      	ldrb	r3, [r7, #7]
   8b308:	2b00      	cmp	r3, #0
   8b30a:	d001      	beq.n	8b310 <main+0xe50>
   8b30c:	4b2e      	ldr	r3, [pc, #184]	; (8b3c8 <main+0xf08>)
   8b30e:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b310:	79fb      	ldrb	r3, [r7, #7]
   8b312:	2b00      	cmp	r3, #0
   8b314:	d10b      	bne.n	8b32e <main+0xe6e>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b316:	4b2a      	ldr	r3, [pc, #168]	; (8b3c0 <main+0xf00>)
   8b318:	781b      	ldrb	r3, [r3, #0]
   8b31a:	4618      	mov	r0, r3
   8b31c:	4b30      	ldr	r3, [pc, #192]	; (8b3e0 <main+0xf20>)
   8b31e:	4798      	blx	r3
   8b320:	4603      	mov	r3, r0
   8b322:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8b324:	79fb      	ldrb	r3, [r7, #7]
   8b326:	2b00      	cmp	r3, #0
   8b328:	d001      	beq.n	8b32e <main+0xe6e>
   8b32a:	4b27      	ldr	r3, [pc, #156]	; (8b3c8 <main+0xf08>)
   8b32c:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8b32e:	79fb      	ldrb	r3, [r7, #7]
   8b330:	2b00      	cmp	r3, #0
   8b332:	d102      	bne.n	8b33a <main+0xe7a>
							{
									Cl_MacState = MAC_DPREP;
   8b334:	4b27      	ldr	r3, [pc, #156]	; (8b3d4 <main+0xf14>)
   8b336:	220b      	movs	r2, #11
   8b338:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8b33a:	79fb      	ldrb	r3, [r7, #7]
   8b33c:	2b00      	cmp	r3, #0
   8b33e:	d16a      	bne.n	8b416 <main+0xf56>
							{
							Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8b340:	2201      	movs	r2, #1
   8b342:	210b      	movs	r1, #11
   8b344:	2045      	movs	r0, #69	; 0x45
   8b346:	4b25      	ldr	r3, [pc, #148]	; (8b3dc <main+0xf1c>)
   8b348:	4798      	blx	r3
   8b34a:	4603      	mov	r3, r0
   8b34c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8b34e:	79fb      	ldrb	r3, [r7, #7]
   8b350:	2b00      	cmp	r3, #0
   8b352:	d060      	beq.n	8b416 <main+0xf56>
   8b354:	4b1c      	ldr	r3, [pc, #112]	; (8b3c8 <main+0xf08>)
   8b356:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8b358:	e05d      	b.n	8b416 <main+0xf56>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b35a:	4b19      	ldr	r3, [pc, #100]	; (8b3c0 <main+0xf00>)
   8b35c:	781b      	ldrb	r3, [r3, #0]
   8b35e:	4618      	mov	r0, r3
   8b360:	4b1f      	ldr	r3, [pc, #124]	; (8b3e0 <main+0xf20>)
   8b362:	4798      	blx	r3
   8b364:	4603      	mov	r3, r0
   8b366:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b368:	79fb      	ldrb	r3, [r7, #7]
   8b36a:	2b00      	cmp	r3, #0
   8b36c:	d001      	beq.n	8b372 <main+0xeb2>
   8b36e:	4b16      	ldr	r3, [pc, #88]	; (8b3c8 <main+0xf08>)
   8b370:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b372:	79fb      	ldrb	r3, [r7, #7]
   8b374:	2b00      	cmp	r3, #0
   8b376:	d151      	bne.n	8b41c <main+0xf5c>
							{
									Cl_MacState = MAC_DPREP;
   8b378:	4b16      	ldr	r3, [pc, #88]	; (8b3d4 <main+0xf14>)
   8b37a:	220b      	movs	r2, #11
   8b37c:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8b37e:	e04d      	b.n	8b41c <main+0xf5c>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b380:	4b0f      	ldr	r3, [pc, #60]	; (8b3c0 <main+0xf00>)
   8b382:	781b      	ldrb	r3, [r3, #0]
   8b384:	4618      	mov	r0, r3
   8b386:	4b0f      	ldr	r3, [pc, #60]	; (8b3c4 <main+0xf04>)
   8b388:	4798      	blx	r3
   8b38a:	4603      	mov	r3, r0
   8b38c:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b38e:	79fb      	ldrb	r3, [r7, #7]
   8b390:	2b00      	cmp	r3, #0
   8b392:	d001      	beq.n	8b398 <main+0xed8>
   8b394:	4b0c      	ldr	r3, [pc, #48]	; (8b3c8 <main+0xf08>)
   8b396:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b398:	79fb      	ldrb	r3, [r7, #7]
   8b39a:	2b00      	cmp	r3, #0
   8b39c:	d141      	bne.n	8b422 <main+0xf62>
							{
								Cl_MacState = MAC_DPREP;
   8b39e:	4b0d      	ldr	r3, [pc, #52]	; (8b3d4 <main+0xf14>)
   8b3a0:	220b      	movs	r2, #11
   8b3a2:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8b3a4:	e03d      	b.n	8b422 <main+0xf62>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b3a6:	4b06      	ldr	r3, [pc, #24]	; (8b3c0 <main+0xf00>)
   8b3a8:	781b      	ldrb	r3, [r3, #0]
   8b3aa:	4618      	mov	r0, r3
   8b3ac:	4b05      	ldr	r3, [pc, #20]	; (8b3c4 <main+0xf04>)
   8b3ae:	4798      	blx	r3
   8b3b0:	4603      	mov	r3, r0
   8b3b2:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b3b4:	79fb      	ldrb	r3, [r7, #7]
   8b3b6:	2b00      	cmp	r3, #0
   8b3b8:	d036      	beq.n	8b428 <main+0xf68>
   8b3ba:	4b03      	ldr	r3, [pc, #12]	; (8b3c8 <main+0xf08>)
   8b3bc:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8b3be:	e033      	b.n	8b428 <main+0xf68>
   8b3c0:	20072172 	.word	0x20072172
   8b3c4:	0009f365 	.word	0x0009f365
   8b3c8:	0008870d 	.word	0x0008870d
   8b3cc:	00085495 	.word	0x00085495
   8b3d0:	00099a01 	.word	0x00099a01
   8b3d4:	200704b0 	.word	0x200704b0
   8b3d8:	000a1b89 	.word	0x000a1b89
   8b3dc:	0009926d 	.word	0x0009926d
   8b3e0:	0009b671 	.word	0x0009b671
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8b3e4:	4ba8      	ldr	r3, [pc, #672]	; (8b688 <main+0x11c8>)
   8b3e6:	781b      	ldrb	r3, [r3, #0]
   8b3e8:	4618      	mov	r0, r3
   8b3ea:	4ba8      	ldr	r3, [pc, #672]	; (8b68c <main+0x11cc>)
   8b3ec:	4798      	blx	r3
   8b3ee:	4603      	mov	r3, r0
   8b3f0:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b3f2:	79fb      	ldrb	r3, [r7, #7]
   8b3f4:	2b00      	cmp	r3, #0
   8b3f6:	d001      	beq.n	8b3fc <main+0xf3c>
   8b3f8:	4ba5      	ldr	r3, [pc, #660]	; (8b690 <main+0x11d0>)
   8b3fa:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b3fc:	79fb      	ldrb	r3, [r7, #7]
   8b3fe:	2b00      	cmp	r3, #0
   8b400:	d115      	bne.n	8b42e <main+0xf6e>
							{
								Cl_MacState = MAC_DPREP;
   8b402:	4ba4      	ldr	r3, [pc, #656]	; (8b694 <main+0x11d4>)
   8b404:	220b      	movs	r2, #11
   8b406:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
																		
						break;
   8b408:	e011      	b.n	8b42e <main+0xf6e>
						default: break;
   8b40a:	bf00      	nop
   8b40c:	f001 b89f 	b.w	8c54e <main+0x208e>
							else
							{
								// handdle error
							}
						
						break;
   8b410:	bf00      	nop
   8b412:	f001 b89c 	b.w	8c54e <main+0x208e>
							}
							else
							{
								// handle error
							}
						break;
   8b416:	bf00      	nop
   8b418:	f001 b899 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}
						
						break;
   8b41c:	bf00      	nop
   8b41e:	f001 b896 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}
													
						break;
   8b422:	bf00      	nop
   8b424:	f001 b893 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}
													
						break;
   8b428:	bf00      	nop
   8b42a:	f001 b890 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}
																		
						break;
   8b42e:	bf00      	nop
						default: break;
					}
					break;
   8b430:	f001 b88d 	b.w	8c54e <main+0x208e>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8b434:	4b94      	ldr	r3, [pc, #592]	; (8b688 <main+0x11c8>)
   8b436:	781b      	ldrb	r3, [r3, #0]
   8b438:	3b09      	subs	r3, #9
   8b43a:	2b43      	cmp	r3, #67	; 0x43
   8b43c:	f200 810f 	bhi.w	8b65e <main+0x119e>
   8b440:	a201      	add	r2, pc, #4	; (adr r2, 8b448 <main+0xf88>)
   8b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b446:	bf00      	nop
   8b448:	0008b559 	.word	0x0008b559
   8b44c:	0008b559 	.word	0x0008b559
   8b450:	0008b559 	.word	0x0008b559
   8b454:	0008b559 	.word	0x0008b559
   8b458:	0008b65f 	.word	0x0008b65f
   8b45c:	0008b65f 	.word	0x0008b65f
   8b460:	0008b57f 	.word	0x0008b57f
   8b464:	0008b559 	.word	0x0008b559
   8b468:	0008b559 	.word	0x0008b559
   8b46c:	0008b645 	.word	0x0008b645
   8b470:	0008b559 	.word	0x0008b559
   8b474:	0008b559 	.word	0x0008b559
   8b478:	0008b559 	.word	0x0008b559
   8b47c:	0008b5cb 	.word	0x0008b5cb
   8b480:	0008b65f 	.word	0x0008b65f
   8b484:	0008b65f 	.word	0x0008b65f
   8b488:	0008b65f 	.word	0x0008b65f
   8b48c:	0008b65f 	.word	0x0008b65f
   8b490:	0008b65f 	.word	0x0008b65f
   8b494:	0008b65f 	.word	0x0008b65f
   8b498:	0008b559 	.word	0x0008b559
   8b49c:	0008b559 	.word	0x0008b559
   8b4a0:	0008b5a5 	.word	0x0008b5a5
   8b4a4:	0008b65f 	.word	0x0008b65f
   8b4a8:	0008b65f 	.word	0x0008b65f
   8b4ac:	0008b65f 	.word	0x0008b65f
   8b4b0:	0008b65f 	.word	0x0008b65f
   8b4b4:	0008b65f 	.word	0x0008b65f
   8b4b8:	0008b65f 	.word	0x0008b65f
   8b4bc:	0008b559 	.word	0x0008b559
   8b4c0:	0008b559 	.word	0x0008b559
   8b4c4:	0008b559 	.word	0x0008b559
   8b4c8:	0008b559 	.word	0x0008b559
   8b4cc:	0008b65f 	.word	0x0008b65f
   8b4d0:	0008b65f 	.word	0x0008b65f
   8b4d4:	0008b65f 	.word	0x0008b65f
   8b4d8:	0008b559 	.word	0x0008b559
   8b4dc:	0008b559 	.word	0x0008b559
   8b4e0:	0008b65f 	.word	0x0008b65f
   8b4e4:	0008b65f 	.word	0x0008b65f
   8b4e8:	0008b65f 	.word	0x0008b65f
   8b4ec:	0008b65f 	.word	0x0008b65f
   8b4f0:	0008b65f 	.word	0x0008b65f
   8b4f4:	0008b65f 	.word	0x0008b65f
   8b4f8:	0008b65f 	.word	0x0008b65f
   8b4fc:	0008b65f 	.word	0x0008b65f
   8b500:	0008b65f 	.word	0x0008b65f
   8b504:	0008b559 	.word	0x0008b559
   8b508:	0008b559 	.word	0x0008b559
   8b50c:	0008b559 	.word	0x0008b559
   8b510:	0008b559 	.word	0x0008b559
   8b514:	0008b559 	.word	0x0008b559
   8b518:	0008b559 	.word	0x0008b559
   8b51c:	0008b65f 	.word	0x0008b65f
   8b520:	0008b65f 	.word	0x0008b65f
   8b524:	0008b65f 	.word	0x0008b65f
   8b528:	0008b65f 	.word	0x0008b65f
   8b52c:	0008b65f 	.word	0x0008b65f
   8b530:	0008b65f 	.word	0x0008b65f
   8b534:	0008b65f 	.word	0x0008b65f
   8b538:	0008b65f 	.word	0x0008b65f
   8b53c:	0008b65f 	.word	0x0008b65f
   8b540:	0008b65f 	.word	0x0008b65f
   8b544:	0008b65f 	.word	0x0008b65f
   8b548:	0008b65f 	.word	0x0008b65f
   8b54c:	0008b65f 	.word	0x0008b65f
   8b550:	0008b65f 	.word	0x0008b65f
   8b554:	0008b60b 	.word	0x0008b60b
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b558:	4b4b      	ldr	r3, [pc, #300]	; (8b688 <main+0x11c8>)
   8b55a:	781b      	ldrb	r3, [r3, #0]
   8b55c:	4618      	mov	r0, r3
   8b55e:	4b4e      	ldr	r3, [pc, #312]	; (8b698 <main+0x11d8>)
   8b560:	4798      	blx	r3
   8b562:	4603      	mov	r3, r0
   8b564:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b566:	79fb      	ldrb	r3, [r7, #7]
   8b568:	2b00      	cmp	r3, #0
   8b56a:	d001      	beq.n	8b570 <main+0x10b0>
   8b56c:	4b48      	ldr	r3, [pc, #288]	; (8b690 <main+0x11d0>)
   8b56e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b570:	79fb      	ldrb	r3, [r7, #7]
   8b572:	2b00      	cmp	r3, #0
   8b574:	d176      	bne.n	8b664 <main+0x11a4>
							{
								Cl_MacState = MAC_DPREP;
   8b576:	4b47      	ldr	r3, [pc, #284]	; (8b694 <main+0x11d4>)
   8b578:	220b      	movs	r2, #11
   8b57a:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8b57c:	e072      	b.n	8b664 <main+0x11a4>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b57e:	4b42      	ldr	r3, [pc, #264]	; (8b688 <main+0x11c8>)
   8b580:	781b      	ldrb	r3, [r3, #0]
   8b582:	4618      	mov	r0, r3
   8b584:	4b44      	ldr	r3, [pc, #272]	; (8b698 <main+0x11d8>)
   8b586:	4798      	blx	r3
   8b588:	4603      	mov	r3, r0
   8b58a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b58c:	79fb      	ldrb	r3, [r7, #7]
   8b58e:	2b00      	cmp	r3, #0
   8b590:	d001      	beq.n	8b596 <main+0x10d6>
   8b592:	4b3f      	ldr	r3, [pc, #252]	; (8b690 <main+0x11d0>)
   8b594:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b596:	79fb      	ldrb	r3, [r7, #7]
   8b598:	2b00      	cmp	r3, #0
   8b59a:	d166      	bne.n	8b66a <main+0x11aa>
							{
								Cl_MacState = MAC_DPREP;
   8b59c:	4b3d      	ldr	r3, [pc, #244]	; (8b694 <main+0x11d4>)
   8b59e:	220b      	movs	r2, #11
   8b5a0:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8b5a2:	e062      	b.n	8b66a <main+0x11aa>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b5a4:	4b38      	ldr	r3, [pc, #224]	; (8b688 <main+0x11c8>)
   8b5a6:	781b      	ldrb	r3, [r3, #0]
   8b5a8:	4618      	mov	r0, r3
   8b5aa:	4b3b      	ldr	r3, [pc, #236]	; (8b698 <main+0x11d8>)
   8b5ac:	4798      	blx	r3
   8b5ae:	4603      	mov	r3, r0
   8b5b0:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b5b2:	79fb      	ldrb	r3, [r7, #7]
   8b5b4:	2b00      	cmp	r3, #0
   8b5b6:	d001      	beq.n	8b5bc <main+0x10fc>
   8b5b8:	4b35      	ldr	r3, [pc, #212]	; (8b690 <main+0x11d0>)
   8b5ba:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b5bc:	79fb      	ldrb	r3, [r7, #7]
   8b5be:	2b00      	cmp	r3, #0
   8b5c0:	d156      	bne.n	8b670 <main+0x11b0>
							{
								Cl_MacState = MAC_DPREP;
   8b5c2:	4b34      	ldr	r3, [pc, #208]	; (8b694 <main+0x11d4>)
   8b5c4:	220b      	movs	r2, #11
   8b5c6:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8b5c8:	e052      	b.n	8b670 <main+0x11b0>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b5ca:	4b2f      	ldr	r3, [pc, #188]	; (8b688 <main+0x11c8>)
   8b5cc:	781b      	ldrb	r3, [r3, #0]
   8b5ce:	4618      	mov	r0, r3
   8b5d0:	4b31      	ldr	r3, [pc, #196]	; (8b698 <main+0x11d8>)
   8b5d2:	4798      	blx	r3
   8b5d4:	4603      	mov	r3, r0
   8b5d6:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b5d8:	79fb      	ldrb	r3, [r7, #7]
   8b5da:	2b00      	cmp	r3, #0
   8b5dc:	d001      	beq.n	8b5e2 <main+0x1122>
   8b5de:	4b2c      	ldr	r3, [pc, #176]	; (8b690 <main+0x11d0>)
   8b5e0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b5e2:	79fb      	ldrb	r3, [r7, #7]
   8b5e4:	2b00      	cmp	r3, #0
   8b5e6:	d102      	bne.n	8b5ee <main+0x112e>
							{
								Cl_MacState = MAC_DPREP;
   8b5e8:	4b2a      	ldr	r3, [pc, #168]	; (8b694 <main+0x11d4>)
   8b5ea:	220b      	movs	r2, #11
   8b5ec:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8b5ee:	4b29      	ldr	r3, [pc, #164]	; (8b694 <main+0x11d4>)
   8b5f0:	220c      	movs	r2, #12
   8b5f2:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8b5f4:	2201      	movs	r2, #1
   8b5f6:	210c      	movs	r1, #12
   8b5f8:	2045      	movs	r0, #69	; 0x45
   8b5fa:	4b28      	ldr	r3, [pc, #160]	; (8b69c <main+0x11dc>)
   8b5fc:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8b5fe:	79fb      	ldrb	r3, [r7, #7]
   8b600:	2b00      	cmp	r3, #0
   8b602:	d038      	beq.n	8b676 <main+0x11b6>
   8b604:	4b22      	ldr	r3, [pc, #136]	; (8b690 <main+0x11d0>)
   8b606:	4798      	blx	r3
						
						break;
   8b608:	e035      	b.n	8b676 <main+0x11b6>
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b60a:	4b1f      	ldr	r3, [pc, #124]	; (8b688 <main+0x11c8>)
   8b60c:	781b      	ldrb	r3, [r3, #0]
   8b60e:	4618      	mov	r0, r3
   8b610:	4b21      	ldr	r3, [pc, #132]	; (8b698 <main+0x11d8>)
   8b612:	4798      	blx	r3
   8b614:	4603      	mov	r3, r0
   8b616:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b618:	79fb      	ldrb	r3, [r7, #7]
   8b61a:	2b00      	cmp	r3, #0
   8b61c:	d001      	beq.n	8b622 <main+0x1162>
   8b61e:	4b1c      	ldr	r3, [pc, #112]	; (8b690 <main+0x11d0>)
   8b620:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8b622:	79fb      	ldrb	r3, [r7, #7]
   8b624:	2b00      	cmp	r3, #0
   8b626:	d129      	bne.n	8b67c <main+0x11bc>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8b628:	4b1a      	ldr	r3, [pc, #104]	; (8b694 <main+0x11d4>)
   8b62a:	220e      	movs	r2, #14
   8b62c:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8b62e:	2201      	movs	r2, #1
   8b630:	210e      	movs	r1, #14
   8b632:	2045      	movs	r0, #69	; 0x45
   8b634:	4b19      	ldr	r3, [pc, #100]	; (8b69c <main+0x11dc>)
   8b636:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8b638:	79fb      	ldrb	r3, [r7, #7]
   8b63a:	2b00      	cmp	r3, #0
   8b63c:	d01e      	beq.n	8b67c <main+0x11bc>
   8b63e:	4b14      	ldr	r3, [pc, #80]	; (8b690 <main+0x11d0>)
   8b640:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8b642:	e01b      	b.n	8b67c <main+0x11bc>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b644:	4b10      	ldr	r3, [pc, #64]	; (8b688 <main+0x11c8>)
   8b646:	781b      	ldrb	r3, [r3, #0]
   8b648:	4618      	mov	r0, r3
   8b64a:	4b13      	ldr	r3, [pc, #76]	; (8b698 <main+0x11d8>)
   8b64c:	4798      	blx	r3
   8b64e:	4603      	mov	r3, r0
   8b650:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b652:	79fb      	ldrb	r3, [r7, #7]
   8b654:	2b00      	cmp	r3, #0
   8b656:	d014      	beq.n	8b682 <main+0x11c2>
   8b658:	4b0d      	ldr	r3, [pc, #52]	; (8b690 <main+0x11d0>)
   8b65a:	4798      	blx	r3



						break;
   8b65c:	e011      	b.n	8b682 <main+0x11c2>

						default: break;
   8b65e:	bf00      	nop
   8b660:	f000 bf75 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}
							
						break;
   8b664:	bf00      	nop
   8b666:	f000 bf72 	b.w	8c54e <main+0x208e>
							}
							else
							{
								// handle error
							}
						break;
   8b66a:	bf00      	nop
   8b66c:	f000 bf6f 	b.w	8c54e <main+0x208e>
							}
							else
							{
								// handle error
							}
						break;
   8b670:	bf00      	nop
   8b672:	f000 bf6c 	b.w	8c54e <main+0x208e>
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
						
						break;
   8b676:	bf00      	nop
   8b678:	f000 bf69 	b.w	8c54e <main+0x208e>
						}
						else
						{
							// handle error
						}
						break;
   8b67c:	bf00      	nop
   8b67e:	f000 bf66 	b.w	8c54e <main+0x208e>
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);



						break;
   8b682:	bf00      	nop

						default: break;
					}
					break;
   8b684:	f000 bf63 	b.w	8c54e <main+0x208e>
   8b688:	20072172 	.word	0x20072172
   8b68c:	0009f365 	.word	0x0009f365
   8b690:	0008870d 	.word	0x0008870d
   8b694:	200704b0 	.word	0x200704b0
   8b698:	0009b671 	.word	0x0009b671
   8b69c:	0009926d 	.word	0x0009926d
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8b6a0:	4bd3      	ldr	r3, [pc, #844]	; (8b9f0 <main+0x1530>)
   8b6a2:	781b      	ldrb	r3, [r3, #0]
   8b6a4:	3b0a      	subs	r3, #10
   8b6a6:	2b42      	cmp	r3, #66	; 0x42
   8b6a8:	f200 80de 	bhi.w	8b868 <main+0x13a8>
   8b6ac:	a201      	add	r2, pc, #4	; (adr r2, 8b6b4 <main+0x11f4>)
   8b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b6b2:	bf00      	nop
   8b6b4:	0008b7c1 	.word	0x0008b7c1
   8b6b8:	0008b7c1 	.word	0x0008b7c1
   8b6bc:	0008b7c1 	.word	0x0008b7c1
   8b6c0:	0008b869 	.word	0x0008b869
   8b6c4:	0008b869 	.word	0x0008b869
   8b6c8:	0008b7db 	.word	0x0008b7db
   8b6cc:	0008b869 	.word	0x0008b869
   8b6d0:	0008b7c1 	.word	0x0008b7c1
   8b6d4:	0008b7c1 	.word	0x0008b7c1
   8b6d8:	0008b7c1 	.word	0x0008b7c1
   8b6dc:	0008b7c1 	.word	0x0008b7c1
   8b6e0:	0008b869 	.word	0x0008b869
   8b6e4:	0008b7c1 	.word	0x0008b7c1
   8b6e8:	0008b869 	.word	0x0008b869
   8b6ec:	0008b869 	.word	0x0008b869
   8b6f0:	0008b869 	.word	0x0008b869
   8b6f4:	0008b869 	.word	0x0008b869
   8b6f8:	0008b869 	.word	0x0008b869
   8b6fc:	0008b869 	.word	0x0008b869
   8b700:	0008b869 	.word	0x0008b869
   8b704:	0008b869 	.word	0x0008b869
   8b708:	0008b869 	.word	0x0008b869
   8b70c:	0008b869 	.word	0x0008b869
   8b710:	0008b869 	.word	0x0008b869
   8b714:	0008b869 	.word	0x0008b869
   8b718:	0008b869 	.word	0x0008b869
   8b71c:	0008b869 	.word	0x0008b869
   8b720:	0008b869 	.word	0x0008b869
   8b724:	0008b7c1 	.word	0x0008b7c1
   8b728:	0008b7c1 	.word	0x0008b7c1
   8b72c:	0008b7c1 	.word	0x0008b7c1
   8b730:	0008b869 	.word	0x0008b869
   8b734:	0008b869 	.word	0x0008b869
   8b738:	0008b869 	.word	0x0008b869
   8b73c:	0008b869 	.word	0x0008b869
   8b740:	0008b7c1 	.word	0x0008b7c1
   8b744:	0008b7c1 	.word	0x0008b7c1
   8b748:	0008b869 	.word	0x0008b869
   8b74c:	0008b869 	.word	0x0008b869
   8b750:	0008b869 	.word	0x0008b869
   8b754:	0008b869 	.word	0x0008b869
   8b758:	0008b869 	.word	0x0008b869
   8b75c:	0008b869 	.word	0x0008b869
   8b760:	0008b869 	.word	0x0008b869
   8b764:	0008b869 	.word	0x0008b869
   8b768:	0008b869 	.word	0x0008b869
   8b76c:	0008b869 	.word	0x0008b869
   8b770:	0008b869 	.word	0x0008b869
   8b774:	0008b7c1 	.word	0x0008b7c1
   8b778:	0008b7c1 	.word	0x0008b7c1
   8b77c:	0008b7c1 	.word	0x0008b7c1
   8b780:	0008b7c1 	.word	0x0008b7c1
   8b784:	0008b869 	.word	0x0008b869
   8b788:	0008b869 	.word	0x0008b869
   8b78c:	0008b869 	.word	0x0008b869
   8b790:	0008b869 	.word	0x0008b869
   8b794:	0008b869 	.word	0x0008b869
   8b798:	0008b869 	.word	0x0008b869
   8b79c:	0008b869 	.word	0x0008b869
   8b7a0:	0008b869 	.word	0x0008b869
   8b7a4:	0008b869 	.word	0x0008b869
   8b7a8:	0008b869 	.word	0x0008b869
   8b7ac:	0008b869 	.word	0x0008b869
   8b7b0:	0008b815 	.word	0x0008b815
   8b7b4:	0008b869 	.word	0x0008b869
   8b7b8:	0008b869 	.word	0x0008b869
   8b7bc:	0008b82f 	.word	0x0008b82f
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b7c0:	4b8b      	ldr	r3, [pc, #556]	; (8b9f0 <main+0x1530>)
   8b7c2:	781b      	ldrb	r3, [r3, #0]
   8b7c4:	4618      	mov	r0, r3
   8b7c6:	4b8b      	ldr	r3, [pc, #556]	; (8b9f4 <main+0x1534>)
   8b7c8:	4798      	blx	r3
   8b7ca:	4603      	mov	r3, r0
   8b7cc:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b7ce:	79fb      	ldrb	r3, [r7, #7]
   8b7d0:	2b00      	cmp	r3, #0
   8b7d2:	d04c      	beq.n	8b86e <main+0x13ae>
   8b7d4:	4b88      	ldr	r3, [pc, #544]	; (8b9f8 <main+0x1538>)
   8b7d6:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8b7d8:	e049      	b.n	8b86e <main+0x13ae>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b7da:	4b85      	ldr	r3, [pc, #532]	; (8b9f0 <main+0x1530>)
   8b7dc:	781b      	ldrb	r3, [r3, #0]
   8b7de:	4618      	mov	r0, r3
   8b7e0:	4b84      	ldr	r3, [pc, #528]	; (8b9f4 <main+0x1534>)
   8b7e2:	4798      	blx	r3
   8b7e4:	4603      	mov	r3, r0
   8b7e6:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b7e8:	79fb      	ldrb	r3, [r7, #7]
   8b7ea:	2b00      	cmp	r3, #0
   8b7ec:	d001      	beq.n	8b7f2 <main+0x1332>
   8b7ee:	4b82      	ldr	r3, [pc, #520]	; (8b9f8 <main+0x1538>)
   8b7f0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b7f2:	79fb      	ldrb	r3, [r7, #7]
   8b7f4:	2b00      	cmp	r3, #0
   8b7f6:	d13d      	bne.n	8b874 <main+0x13b4>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8b7f8:	4b80      	ldr	r3, [pc, #512]	; (8b9fc <main+0x153c>)
   8b7fa:	220c      	movs	r2, #12
   8b7fc:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8b7fe:	2201      	movs	r2, #1
   8b800:	210c      	movs	r1, #12
   8b802:	2045      	movs	r0, #69	; 0x45
   8b804:	4b7e      	ldr	r3, [pc, #504]	; (8ba00 <main+0x1540>)
   8b806:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8b808:	79fb      	ldrb	r3, [r7, #7]
   8b80a:	2b00      	cmp	r3, #0
   8b80c:	d032      	beq.n	8b874 <main+0x13b4>
   8b80e:	4b7a      	ldr	r3, [pc, #488]	; (8b9f8 <main+0x1538>)
   8b810:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8b812:	e02f      	b.n	8b874 <main+0x13b4>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b814:	4b76      	ldr	r3, [pc, #472]	; (8b9f0 <main+0x1530>)
   8b816:	781b      	ldrb	r3, [r3, #0]
   8b818:	4618      	mov	r0, r3
   8b81a:	4b76      	ldr	r3, [pc, #472]	; (8b9f4 <main+0x1534>)
   8b81c:	4798      	blx	r3
   8b81e:	4603      	mov	r3, r0
   8b820:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b822:	79fb      	ldrb	r3, [r7, #7]
   8b824:	2b00      	cmp	r3, #0
   8b826:	d028      	beq.n	8b87a <main+0x13ba>
   8b828:	4b73      	ldr	r3, [pc, #460]	; (8b9f8 <main+0x1538>)
   8b82a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8b82c:	e025      	b.n	8b87a <main+0x13ba>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b82e:	4b70      	ldr	r3, [pc, #448]	; (8b9f0 <main+0x1530>)
   8b830:	781b      	ldrb	r3, [r3, #0]
   8b832:	4618      	mov	r0, r3
   8b834:	4b6f      	ldr	r3, [pc, #444]	; (8b9f4 <main+0x1534>)
   8b836:	4798      	blx	r3
   8b838:	4603      	mov	r3, r0
   8b83a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8b83c:	79fb      	ldrb	r3, [r7, #7]
   8b83e:	2b00      	cmp	r3, #0
   8b840:	d001      	beq.n	8b846 <main+0x1386>
   8b842:	4b6d      	ldr	r3, [pc, #436]	; (8b9f8 <main+0x1538>)
   8b844:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8b846:	79fb      	ldrb	r3, [r7, #7]
   8b848:	2b00      	cmp	r3, #0
   8b84a:	d119      	bne.n	8b880 <main+0x13c0>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8b84c:	4b6b      	ldr	r3, [pc, #428]	; (8b9fc <main+0x153c>)
   8b84e:	220e      	movs	r2, #14
   8b850:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8b852:	2201      	movs	r2, #1
   8b854:	210e      	movs	r1, #14
   8b856:	2045      	movs	r0, #69	; 0x45
   8b858:	4b69      	ldr	r3, [pc, #420]	; (8ba00 <main+0x1540>)
   8b85a:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8b85c:	79fb      	ldrb	r3, [r7, #7]
   8b85e:	2b00      	cmp	r3, #0
   8b860:	d00e      	beq.n	8b880 <main+0x13c0>
   8b862:	4b65      	ldr	r3, [pc, #404]	; (8b9f8 <main+0x1538>)
   8b864:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8b866:	e00b      	b.n	8b880 <main+0x13c0>
					

						default: break;
   8b868:	bf00      	nop
   8b86a:	f000 be70 	b.w	8c54e <main+0x208e>
						ASSERT_ERROR(Cl_MacRetval);
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8b86e:	bf00      	nop
   8b870:	f000 be6d 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}

						break;
   8b874:	bf00      	nop
   8b876:	f000 be6a 	b.w	8c54e <main+0x208e>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8b87a:	bf00      	nop
   8b87c:	f000 be67 	b.w	8c54e <main+0x208e>
							else
							{
								// handle error
							}

						break;
   8b880:	bf00      	nop
					

						default: break;
					}
					break;
   8b882:	f000 be64 	b.w	8c54e <main+0x208e>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8b886:	4b5a      	ldr	r3, [pc, #360]	; (8b9f0 <main+0x1530>)
   8b888:	781b      	ldrb	r3, [r3, #0]
   8b88a:	2b07      	cmp	r3, #7
   8b88c:	d002      	beq.n	8b894 <main+0x13d4>
   8b88e:	2b09      	cmp	r3, #9
   8b890:	d003      	beq.n	8b89a <main+0x13da>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8b892:	e003      	b.n	8b89c <main+0x13dc>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8b894:	bf00      	nop
   8b896:	f000 be5a 	b.w	8c54e <main+0x208e>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8b89a:	bf00      	nop
						default: break;
					}
					break;
   8b89c:	f000 be57 	b.w	8c54e <main+0x208e>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8b8a0:	4b53      	ldr	r3, [pc, #332]	; (8b9f0 <main+0x1530>)
   8b8a2:	781b      	ldrb	r3, [r3, #0]
   8b8a4:	3b0a      	subs	r3, #10
   8b8a6:	2b4e      	cmp	r3, #78	; 0x4e
   8b8a8:	f200 8117 	bhi.w	8bada <main+0x161a>
   8b8ac:	a201      	add	r2, pc, #4	; (adr r2, 8b8b4 <main+0x13f4>)
   8b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b8b2:	bf00      	nop
   8b8b4:	0008ba05 	.word	0x0008ba05
   8b8b8:	0008ba05 	.word	0x0008ba05
   8b8bc:	0008ba05 	.word	0x0008ba05
   8b8c0:	0008badb 	.word	0x0008badb
   8b8c4:	0008badb 	.word	0x0008badb
   8b8c8:	0008badb 	.word	0x0008badb
   8b8cc:	0008badb 	.word	0x0008badb
   8b8d0:	0008badb 	.word	0x0008badb
   8b8d4:	0008badb 	.word	0x0008badb
   8b8d8:	0008badb 	.word	0x0008badb
   8b8dc:	0008badb 	.word	0x0008badb
   8b8e0:	0008ba05 	.word	0x0008ba05
   8b8e4:	0008badb 	.word	0x0008badb
   8b8e8:	0008ba1f 	.word	0x0008ba1f
   8b8ec:	0008badb 	.word	0x0008badb
   8b8f0:	0008badb 	.word	0x0008badb
   8b8f4:	0008ba05 	.word	0x0008ba05
   8b8f8:	0008ba05 	.word	0x0008ba05
   8b8fc:	0008ba05 	.word	0x0008ba05
   8b900:	0008badb 	.word	0x0008badb
   8b904:	0008badb 	.word	0x0008badb
   8b908:	0008badb 	.word	0x0008badb
   8b90c:	0008badb 	.word	0x0008badb
   8b910:	0008ba05 	.word	0x0008ba05
   8b914:	0008badb 	.word	0x0008badb
   8b918:	0008badb 	.word	0x0008badb
   8b91c:	0008badb 	.word	0x0008badb
   8b920:	0008badb 	.word	0x0008badb
   8b924:	0008badb 	.word	0x0008badb
   8b928:	0008ba05 	.word	0x0008ba05
   8b92c:	0008ba05 	.word	0x0008ba05
   8b930:	0008badb 	.word	0x0008badb
   8b934:	0008badb 	.word	0x0008badb
   8b938:	0008badb 	.word	0x0008badb
   8b93c:	0008badb 	.word	0x0008badb
   8b940:	0008ba05 	.word	0x0008ba05
   8b944:	0008ba05 	.word	0x0008ba05
   8b948:	0008badb 	.word	0x0008badb
   8b94c:	0008badb 	.word	0x0008badb
   8b950:	0008badb 	.word	0x0008badb
   8b954:	0008badb 	.word	0x0008badb
   8b958:	0008badb 	.word	0x0008badb
   8b95c:	0008badb 	.word	0x0008badb
   8b960:	0008badb 	.word	0x0008badb
   8b964:	0008badb 	.word	0x0008badb
   8b968:	0008badb 	.word	0x0008badb
   8b96c:	0008ba05 	.word	0x0008ba05
   8b970:	0008badb 	.word	0x0008badb
   8b974:	0008ba05 	.word	0x0008ba05
   8b978:	0008ba05 	.word	0x0008ba05
   8b97c:	0008badb 	.word	0x0008badb
   8b980:	0008badb 	.word	0x0008badb
   8b984:	0008badb 	.word	0x0008badb
   8b988:	0008badb 	.word	0x0008badb
   8b98c:	0008badb 	.word	0x0008badb
   8b990:	0008badb 	.word	0x0008badb
   8b994:	0008badb 	.word	0x0008badb
   8b998:	0008badb 	.word	0x0008badb
   8b99c:	0008badb 	.word	0x0008badb
   8b9a0:	0008badb 	.word	0x0008badb
   8b9a4:	0008badb 	.word	0x0008badb
   8b9a8:	0008badb 	.word	0x0008badb
   8b9ac:	0008badb 	.word	0x0008badb
   8b9b0:	0008badb 	.word	0x0008badb
   8b9b4:	0008badb 	.word	0x0008badb
   8b9b8:	0008badb 	.word	0x0008badb
   8b9bc:	0008badb 	.word	0x0008badb
   8b9c0:	0008badb 	.word	0x0008badb
   8b9c4:	0008badb 	.word	0x0008badb
   8b9c8:	0008badb 	.word	0x0008badb
   8b9cc:	0008badb 	.word	0x0008badb
   8b9d0:	0008badb 	.word	0x0008badb
   8b9d4:	0008badb 	.word	0x0008badb
   8b9d8:	0008badb 	.word	0x0008badb
   8b9dc:	0008badb 	.word	0x0008badb
   8b9e0:	0008ba05 	.word	0x0008ba05
   8b9e4:	0008badb 	.word	0x0008badb
   8b9e8:	0008badb 	.word	0x0008badb
   8b9ec:	0008bac5 	.word	0x0008bac5
   8b9f0:	20072172 	.word	0x20072172
   8b9f4:	0009b671 	.word	0x0009b671
   8b9f8:	0008870d 	.word	0x0008870d
   8b9fc:	200704b0 	.word	0x200704b0
   8ba00:	0009926d 	.word	0x0009926d
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ba04:	4bb2      	ldr	r3, [pc, #712]	; (8bcd0 <main+0x1810>)
   8ba06:	781b      	ldrb	r3, [r3, #0]
   8ba08:	4618      	mov	r0, r3
   8ba0a:	4bb2      	ldr	r3, [pc, #712]	; (8bcd4 <main+0x1814>)
   8ba0c:	4798      	blx	r3
   8ba0e:	4603      	mov	r3, r0
   8ba10:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8ba12:	79fb      	ldrb	r3, [r7, #7]
   8ba14:	2b00      	cmp	r3, #0
   8ba16:	d063      	beq.n	8bae0 <main+0x1620>
   8ba18:	4baf      	ldr	r3, [pc, #700]	; (8bcd8 <main+0x1818>)
   8ba1a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8ba1c:	e060      	b.n	8bae0 <main+0x1620>
						//case EVT_CONSOLE_COMMAND_GET_DATA:
					//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
					//	ASSERT_ERROR(Cl_MacRetval);
					//	break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8ba1e:	4bac      	ldr	r3, [pc, #688]	; (8bcd0 <main+0x1810>)
   8ba20:	781b      	ldrb	r3, [r3, #0]
   8ba22:	4618      	mov	r0, r3
   8ba24:	4bad      	ldr	r3, [pc, #692]	; (8bcdc <main+0x181c>)
   8ba26:	4798      	blx	r3
   8ba28:	4603      	mov	r3, r0
   8ba2a:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8ba2c:	79fb      	ldrb	r3, [r7, #7]
   8ba2e:	2b00      	cmp	r3, #0
   8ba30:	d001      	beq.n	8ba36 <main+0x1576>
   8ba32:	4ba9      	ldr	r3, [pc, #676]	; (8bcd8 <main+0x1818>)
   8ba34:	4798      	blx	r3
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8ba36:	79fb      	ldrb	r3, [r7, #7]
   8ba38:	2b00      	cmp	r3, #0
   8ba3a:	d002      	beq.n	8ba42 <main+0x1582>
   8ba3c:	79fb      	ldrb	r3, [r7, #7]
   8ba3e:	2b03      	cmp	r3, #3
   8ba40:	d10b      	bne.n	8ba5a <main+0x159a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba42:	4ba3      	ldr	r3, [pc, #652]	; (8bcd0 <main+0x1810>)
   8ba44:	781b      	ldrb	r3, [r3, #0]
   8ba46:	4618      	mov	r0, r3
   8ba48:	4ba5      	ldr	r3, [pc, #660]	; (8bce0 <main+0x1820>)
   8ba4a:	4798      	blx	r3
   8ba4c:	4603      	mov	r3, r0
   8ba4e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ba50:	79fb      	ldrb	r3, [r7, #7]
   8ba52:	2b00      	cmp	r3, #0
   8ba54:	d001      	beq.n	8ba5a <main+0x159a>
   8ba56:	4ba0      	ldr	r3, [pc, #640]	; (8bcd8 <main+0x1818>)
   8ba58:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8ba5a:	79fb      	ldrb	r3, [r7, #7]
   8ba5c:	2b00      	cmp	r3, #0
   8ba5e:	d002      	beq.n	8ba66 <main+0x15a6>
   8ba60:	79fb      	ldrb	r3, [r7, #7]
   8ba62:	2b03      	cmp	r3, #3
   8ba64:	d10b      	bne.n	8ba7e <main+0x15be>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ba66:	4b9a      	ldr	r3, [pc, #616]	; (8bcd0 <main+0x1810>)
   8ba68:	781b      	ldrb	r3, [r3, #0]
   8ba6a:	4618      	mov	r0, r3
   8ba6c:	4b99      	ldr	r3, [pc, #612]	; (8bcd4 <main+0x1814>)
   8ba6e:	4798      	blx	r3
   8ba70:	4603      	mov	r3, r0
   8ba72:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ba74:	79fb      	ldrb	r3, [r7, #7]
   8ba76:	2b00      	cmp	r3, #0
   8ba78:	d001      	beq.n	8ba7e <main+0x15be>
   8ba7a:	4b97      	ldr	r3, [pc, #604]	; (8bcd8 <main+0x1818>)
   8ba7c:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8ba7e:	79fb      	ldrb	r3, [r7, #7]
   8ba80:	2b00      	cmp	r3, #0
   8ba82:	d002      	beq.n	8ba8a <main+0x15ca>
   8ba84:	79fb      	ldrb	r3, [r7, #7]
   8ba86:	2b03      	cmp	r3, #3
   8ba88:	d10b      	bne.n	8baa2 <main+0x15e2>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8ba8a:	4b91      	ldr	r3, [pc, #580]	; (8bcd0 <main+0x1810>)
   8ba8c:	781b      	ldrb	r3, [r3, #0]
   8ba8e:	4618      	mov	r0, r3
   8ba90:	4b94      	ldr	r3, [pc, #592]	; (8bce4 <main+0x1824>)
   8ba92:	4798      	blx	r3
   8ba94:	4603      	mov	r3, r0
   8ba96:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8ba98:	79fb      	ldrb	r3, [r7, #7]
   8ba9a:	2b00      	cmp	r3, #0
   8ba9c:	d001      	beq.n	8baa2 <main+0x15e2>
   8ba9e:	4b8e      	ldr	r3, [pc, #568]	; (8bcd8 <main+0x1818>)
   8baa0:	4798      	blx	r3
							else
							{
								//handle error
							}

						if(Cl_MacRetval == CL_OK)
   8baa2:	79fb      	ldrb	r3, [r7, #7]
   8baa4:	2b00      	cmp	r3, #0
   8baa6:	d11e      	bne.n	8bae6 <main+0x1626>
						{
							Cl_MacState = MAC_DIALYSIS;
   8baa8:	4b8f      	ldr	r3, [pc, #572]	; (8bce8 <main+0x1828>)
   8baaa:	220f      	movs	r2, #15
   8baac:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8baae:	2201      	movs	r2, #1
   8bab0:	210f      	movs	r1, #15
   8bab2:	2045      	movs	r0, #69	; 0x45
   8bab4:	4b8d      	ldr	r3, [pc, #564]	; (8bcec <main+0x182c>)
   8bab6:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bab8:	79fb      	ldrb	r3, [r7, #7]
   8baba:	2b00      	cmp	r3, #0
   8babc:	d013      	beq.n	8bae6 <main+0x1626>
   8babe:	4b86      	ldr	r3, [pc, #536]	; (8bcd8 <main+0x1818>)
   8bac0:	4798      	blx	r3
						}
						break;
   8bac2:	e010      	b.n	8bae6 <main+0x1626>
						
						// add case for isouf start event
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8bac4:	4b88      	ldr	r3, [pc, #544]	; (8bce8 <main+0x1828>)
   8bac6:	2214      	movs	r2, #20
   8bac8:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8baca:	4b81      	ldr	r3, [pc, #516]	; (8bcd0 <main+0x1810>)
   8bacc:	781b      	ldrb	r3, [r3, #0]
   8bace:	4618      	mov	r0, r3
   8bad0:	4b87      	ldr	r3, [pc, #540]	; (8bcf0 <main+0x1830>)
   8bad2:	4798      	blx	r3
   8bad4:	4603      	mov	r3, r0
   8bad6:	71fb      	strb	r3, [r7, #7]
						
						
						break;
   8bad8:	e006      	b.n	8bae8 <main+0x1628>
						
						default: break;
   8bada:	bf00      	nop
   8badc:	f000 bd37 	b.w	8c54e <main+0x208e>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8bae0:	bf00      	nop
   8bae2:	f000 bd34 	b.w	8c54e <main+0x208e>
						{
							Cl_MacState = MAC_DIALYSIS;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8bae6:	bf00      	nop
						
						break;
						
						default: break;
					}
					break;
   8bae8:	f000 bd31 	b.w	8c54e <main+0x208e>
					
					case MAC_ISOUF:
					
					switch(Cl_MacEvent){
   8baec:	4b78      	ldr	r3, [pc, #480]	; (8bcd0 <main+0x1810>)
   8baee:	781b      	ldrb	r3, [r3, #0]
   8baf0:	3b0a      	subs	r3, #10
   8baf2:	2b50      	cmp	r3, #80	; 0x50
   8baf4:	f200 852a 	bhi.w	8c54c <main+0x208c>
   8baf8:	a201      	add	r2, pc, #4	; (adr r2, 8bb00 <main+0x1640>)
   8bafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bafe:	bf00      	nop
   8bb00:	0008bc45 	.word	0x0008bc45
   8bb04:	0008bc45 	.word	0x0008bc45
   8bb08:	0008bc45 	.word	0x0008bc45
   8bb0c:	0008c54d 	.word	0x0008c54d
   8bb10:	0008c54d 	.word	0x0008c54d
   8bb14:	0008c54d 	.word	0x0008c54d
   8bb18:	0008c54d 	.word	0x0008c54d
   8bb1c:	0008c54d 	.word	0x0008c54d
   8bb20:	0008c54d 	.word	0x0008c54d
   8bb24:	0008c54d 	.word	0x0008c54d
   8bb28:	0008c54d 	.word	0x0008c54d
   8bb2c:	0008bc45 	.word	0x0008bc45
   8bb30:	0008c54d 	.word	0x0008c54d
   8bb34:	0008c54d 	.word	0x0008c54d
   8bb38:	0008c54d 	.word	0x0008c54d
   8bb3c:	0008c54d 	.word	0x0008c54d
   8bb40:	0008c54d 	.word	0x0008c54d
   8bb44:	0008c54d 	.word	0x0008c54d
   8bb48:	0008c54d 	.word	0x0008c54d
   8bb4c:	0008c54d 	.word	0x0008c54d
   8bb50:	0008c54d 	.word	0x0008c54d
   8bb54:	0008c54d 	.word	0x0008c54d
   8bb58:	0008c54d 	.word	0x0008c54d
   8bb5c:	0008c54d 	.word	0x0008c54d
   8bb60:	0008c54d 	.word	0x0008c54d
   8bb64:	0008c54d 	.word	0x0008c54d
   8bb68:	0008c54d 	.word	0x0008c54d
   8bb6c:	0008c54d 	.word	0x0008c54d
   8bb70:	0008c54d 	.word	0x0008c54d
   8bb74:	0008bc45 	.word	0x0008bc45
   8bb78:	0008bc45 	.word	0x0008bc45
   8bb7c:	0008bc45 	.word	0x0008bc45
   8bb80:	0008c54d 	.word	0x0008c54d
   8bb84:	0008c54d 	.word	0x0008c54d
   8bb88:	0008c54d 	.word	0x0008c54d
   8bb8c:	0008bc45 	.word	0x0008bc45
   8bb90:	0008bc45 	.word	0x0008bc45
   8bb94:	0008c54d 	.word	0x0008c54d
   8bb98:	0008c54d 	.word	0x0008c54d
   8bb9c:	0008c54d 	.word	0x0008c54d
   8bba0:	0008c54d 	.word	0x0008c54d
   8bba4:	0008c54d 	.word	0x0008c54d
   8bba8:	0008c54d 	.word	0x0008c54d
   8bbac:	0008c54d 	.word	0x0008c54d
   8bbb0:	0008c54d 	.word	0x0008c54d
   8bbb4:	0008c54d 	.word	0x0008c54d
   8bbb8:	0008bc45 	.word	0x0008bc45
   8bbbc:	0008c54d 	.word	0x0008c54d
   8bbc0:	0008bc45 	.word	0x0008bc45
   8bbc4:	0008bc45 	.word	0x0008bc45
   8bbc8:	0008bc45 	.word	0x0008bc45
   8bbcc:	0008bc45 	.word	0x0008bc45
   8bbd0:	0008c54d 	.word	0x0008c54d
   8bbd4:	0008c54d 	.word	0x0008c54d
   8bbd8:	0008c54d 	.word	0x0008c54d
   8bbdc:	0008c54d 	.word	0x0008c54d
   8bbe0:	0008c54d 	.word	0x0008c54d
   8bbe4:	0008c54d 	.word	0x0008c54d
   8bbe8:	0008c54d 	.word	0x0008c54d
   8bbec:	0008c54d 	.word	0x0008c54d
   8bbf0:	0008c54d 	.word	0x0008c54d
   8bbf4:	0008c54d 	.word	0x0008c54d
   8bbf8:	0008c54d 	.word	0x0008c54d
   8bbfc:	0008c54d 	.word	0x0008c54d
   8bc00:	0008c54d 	.word	0x0008c54d
   8bc04:	0008c54d 	.word	0x0008c54d
   8bc08:	0008c54d 	.word	0x0008c54d
   8bc0c:	0008c54d 	.word	0x0008c54d
   8bc10:	0008c54d 	.word	0x0008c54d
   8bc14:	0008c54d 	.word	0x0008c54d
   8bc18:	0008c54d 	.word	0x0008c54d
   8bc1c:	0008c54d 	.word	0x0008c54d
   8bc20:	0008c54d 	.word	0x0008c54d
   8bc24:	0008c54d 	.word	0x0008c54d
   8bc28:	0008c54d 	.word	0x0008c54d
   8bc2c:	0008c54d 	.word	0x0008c54d
   8bc30:	0008c54d 	.word	0x0008c54d
   8bc34:	0008c54d 	.word	0x0008c54d
   8bc38:	0008c54d 	.word	0x0008c54d
   8bc3c:	0008bcb1 	.word	0x0008bcb1
   8bc40:	0008bc65 	.word	0x0008bc65
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8bc44:	4b22      	ldr	r3, [pc, #136]	; (8bcd0 <main+0x1810>)
   8bc46:	781b      	ldrb	r3, [r3, #0]
   8bc48:	4618      	mov	r0, r3
   8bc4a:	4b29      	ldr	r3, [pc, #164]	; (8bcf0 <main+0x1830>)
   8bc4c:	4798      	blx	r3
   8bc4e:	4603      	mov	r3, r0
   8bc50:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc52:	79fb      	ldrb	r3, [r7, #7]
   8bc54:	2b00      	cmp	r3, #0
   8bc56:	d001      	beq.n	8bc5c <main+0x179c>
   8bc58:	4b1f      	ldr	r3, [pc, #124]	; (8bcd8 <main+0x1818>)
   8bc5a:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8bc5c:	4b1c      	ldr	r3, [pc, #112]	; (8bcd0 <main+0x1810>)
   8bc5e:	2200      	movs	r2, #0
   8bc60:	701a      	strb	r2, [r3, #0]
						break;
   8bc62:	e032      	b.n	8bcca <main+0x180a>
						
						case MACREQ_ISOUF_COMPLETED:
						
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8bc64:	4b1a      	ldr	r3, [pc, #104]	; (8bcd0 <main+0x1810>)
   8bc66:	781b      	ldrb	r3, [r3, #0]
   8bc68:	4618      	mov	r0, r3
   8bc6a:	4b21      	ldr	r3, [pc, #132]	; (8bcf0 <main+0x1830>)
   8bc6c:	4798      	blx	r3
   8bc6e:	4603      	mov	r3, r0
   8bc70:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bc72:	79fb      	ldrb	r3, [r7, #7]
   8bc74:	2b00      	cmp	r3, #0
   8bc76:	d001      	beq.n	8bc7c <main+0x17bc>
   8bc78:	4b17      	ldr	r3, [pc, #92]	; (8bcd8 <main+0x1818>)
   8bc7a:	4798      	blx	r3
						if( Cl_MacRetval == CL_OK)
   8bc7c:	79fb      	ldrb	r3, [r7, #7]
   8bc7e:	2b00      	cmp	r3, #0
   8bc80:	d112      	bne.n	8bca8 <main+0x17e8>
						{
							
						//	Cl_MacRetval = Cl_rinse_init();
						//	Cl_MacRetval = Cl_stby_init();
						//	Cl_MacRetval = Cl_dprep_init();
							Cl_MacRetval =Cl_isouf_init();
   8bc82:	4b1c      	ldr	r3, [pc, #112]	; (8bcf4 <main+0x1834>)
   8bc84:	4798      	blx	r3
   8bc86:	4603      	mov	r3, r0
   8bc88:	71fb      	strb	r3, [r7, #7]
							
							Cl_MacState = MAC_POST_ISOUF_STANDBY;
   8bc8a:	4b17      	ldr	r3, [pc, #92]	; (8bce8 <main+0x1828>)
   8bc8c:	2215      	movs	r2, #21
   8bc8e:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
   8bc90:	4b15      	ldr	r3, [pc, #84]	; (8bce8 <main+0x1828>)
   8bc92:	781b      	ldrb	r3, [r3, #0]
   8bc94:	2201      	movs	r2, #1
   8bc96:	4619      	mov	r1, r3
   8bc98:	2045      	movs	r0, #69	; 0x45
   8bc9a:	4b14      	ldr	r3, [pc, #80]	; (8bcec <main+0x182c>)
   8bc9c:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bc9e:	79fb      	ldrb	r3, [r7, #7]
   8bca0:	2b00      	cmp	r3, #0
   8bca2:	d001      	beq.n	8bca8 <main+0x17e8>
   8bca4:	4b0c      	ldr	r3, [pc, #48]	; (8bcd8 <main+0x1818>)
   8bca6:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						Cl_MacEvent = EVT_NULL;
   8bca8:	4b09      	ldr	r3, [pc, #36]	; (8bcd0 <main+0x1810>)
   8bcaa:	2200      	movs	r2, #0
   8bcac:	701a      	strb	r2, [r3, #0]
						break;
   8bcae:	e00c      	b.n	8bcca <main+0x180a>
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8bcb0:	4b07      	ldr	r3, [pc, #28]	; (8bcd0 <main+0x1810>)
   8bcb2:	781b      	ldrb	r3, [r3, #0]
   8bcb4:	4618      	mov	r0, r3
   8bcb6:	4b0e      	ldr	r3, [pc, #56]	; (8bcf0 <main+0x1830>)
   8bcb8:	4798      	blx	r3
   8bcba:	4603      	mov	r3, r0
   8bcbc:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bcbe:	79fb      	ldrb	r3, [r7, #7]
   8bcc0:	2b00      	cmp	r3, #0
   8bcc2:	d001      	beq.n	8bcc8 <main+0x1808>
   8bcc4:	4b04      	ldr	r3, [pc, #16]	; (8bcd8 <main+0x1818>)
   8bcc6:	4798      	blx	r3
						break;
   8bcc8:	bf00      	nop
						
					}
					
					break;
   8bcca:	f000 bc3f 	b.w	8c54c <main+0x208c>
   8bcce:	bf00      	nop
   8bcd0:	20072172 	.word	0x20072172
   8bcd4:	0009b671 	.word	0x0009b671
   8bcd8:	0008870d 	.word	0x0008870d
   8bcdc:	000a1b89 	.word	0x000a1b89
   8bce0:	0009f365 	.word	0x0009f365
   8bce4:	00085495 	.word	0x00085495
   8bce8:	200704b0 	.word	0x200704b0
   8bcec:	0009926d 	.word	0x0009926d
   8bcf0:	00092a85 	.word	0x00092a85
   8bcf4:	00093761 	.word	0x00093761
					
					case MAC_POST_ISOUF_STANDBY:
					
					switch(Cl_MacEvent){
   8bcf8:	4ba6      	ldr	r3, [pc, #664]	; (8bf94 <main+0x1ad4>)
   8bcfa:	781b      	ldrb	r3, [r3, #0]
   8bcfc:	3b07      	subs	r3, #7
   8bcfe:	2b51      	cmp	r3, #81	; 0x51
   8bd00:	f200 8142 	bhi.w	8bf88 <main+0x1ac8>
   8bd04:	a201      	add	r2, pc, #4	; (adr r2, 8bd0c <main+0x184c>)
   8bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bd0a:	bf00      	nop
   8bd0c:	0008bf1b 	.word	0x0008bf1b
   8bd10:	0008bf89 	.word	0x0008bf89
   8bd14:	0008bf89 	.word	0x0008bf89
   8bd18:	0008be55 	.word	0x0008be55
   8bd1c:	0008be55 	.word	0x0008be55
   8bd20:	0008be55 	.word	0x0008be55
   8bd24:	0008bf89 	.word	0x0008bf89
   8bd28:	0008bf89 	.word	0x0008bf89
   8bd2c:	0008bf89 	.word	0x0008bf89
   8bd30:	0008bf89 	.word	0x0008bf89
   8bd34:	0008bf89 	.word	0x0008bf89
   8bd38:	0008bf89 	.word	0x0008bf89
   8bd3c:	0008bf89 	.word	0x0008bf89
   8bd40:	0008bf89 	.word	0x0008bf89
   8bd44:	0008be55 	.word	0x0008be55
   8bd48:	0008bf89 	.word	0x0008bf89
   8bd4c:	0008be75 	.word	0x0008be75
   8bd50:	0008bf89 	.word	0x0008bf89
   8bd54:	0008bf89 	.word	0x0008bf89
   8bd58:	0008bf89 	.word	0x0008bf89
   8bd5c:	0008bf89 	.word	0x0008bf89
   8bd60:	0008bf89 	.word	0x0008bf89
   8bd64:	0008bf89 	.word	0x0008bf89
   8bd68:	0008bf89 	.word	0x0008bf89
   8bd6c:	0008bf89 	.word	0x0008bf89
   8bd70:	0008bf89 	.word	0x0008bf89
   8bd74:	0008bf89 	.word	0x0008bf89
   8bd78:	0008bf89 	.word	0x0008bf89
   8bd7c:	0008bf89 	.word	0x0008bf89
   8bd80:	0008bf89 	.word	0x0008bf89
   8bd84:	0008bf89 	.word	0x0008bf89
   8bd88:	0008bf89 	.word	0x0008bf89
   8bd8c:	0008be55 	.word	0x0008be55
   8bd90:	0008be55 	.word	0x0008be55
   8bd94:	0008be55 	.word	0x0008be55
   8bd98:	0008bf89 	.word	0x0008bf89
   8bd9c:	0008bf89 	.word	0x0008bf89
   8bda0:	0008bf89 	.word	0x0008bf89
   8bda4:	0008be55 	.word	0x0008be55
   8bda8:	0008be55 	.word	0x0008be55
   8bdac:	0008bf89 	.word	0x0008bf89
   8bdb0:	0008bf89 	.word	0x0008bf89
   8bdb4:	0008bf89 	.word	0x0008bf89
   8bdb8:	0008bf89 	.word	0x0008bf89
   8bdbc:	0008bf89 	.word	0x0008bf89
   8bdc0:	0008bf89 	.word	0x0008bf89
   8bdc4:	0008bf89 	.word	0x0008bf89
   8bdc8:	0008bf89 	.word	0x0008bf89
   8bdcc:	0008bf89 	.word	0x0008bf89
   8bdd0:	0008be55 	.word	0x0008be55
   8bdd4:	0008bf89 	.word	0x0008bf89
   8bdd8:	0008be55 	.word	0x0008be55
   8bddc:	0008be55 	.word	0x0008be55
   8bde0:	0008be55 	.word	0x0008be55
   8bde4:	0008be55 	.word	0x0008be55
   8bde8:	0008bf89 	.word	0x0008bf89
   8bdec:	0008bf89 	.word	0x0008bf89
   8bdf0:	0008bf89 	.word	0x0008bf89
   8bdf4:	0008bf89 	.word	0x0008bf89
   8bdf8:	0008bf89 	.word	0x0008bf89
   8bdfc:	0008bf89 	.word	0x0008bf89
   8be00:	0008bf89 	.word	0x0008bf89
   8be04:	0008bf89 	.word	0x0008bf89
   8be08:	0008bf89 	.word	0x0008bf89
   8be0c:	0008bf89 	.word	0x0008bf89
   8be10:	0008bf89 	.word	0x0008bf89
   8be14:	0008bf89 	.word	0x0008bf89
   8be18:	0008bf89 	.word	0x0008bf89
   8be1c:	0008bf89 	.word	0x0008bf89
   8be20:	0008bf89 	.word	0x0008bf89
   8be24:	0008bf89 	.word	0x0008bf89
   8be28:	0008bf89 	.word	0x0008bf89
   8be2c:	0008bf89 	.word	0x0008bf89
   8be30:	0008bf89 	.word	0x0008bf89
   8be34:	0008bf89 	.word	0x0008bf89
   8be38:	0008bf89 	.word	0x0008bf89
   8be3c:	0008bf89 	.word	0x0008bf89
   8be40:	0008bf89 	.word	0x0008bf89
   8be44:	0008bf89 	.word	0x0008bf89
   8be48:	0008bf89 	.word	0x0008bf89
   8be4c:	0008bf89 	.word	0x0008bf89
   8be50:	0008bf73 	.word	0x0008bf73
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8be54:	4b4f      	ldrvs	r3, [pc, #316]	; (8bf94 <main+0x1ad4>)
   8be56:	781b      	ldrbvs	r3, [r3, #0]
   8be58:	4618      	movvc	r0, r3
   8be5a:	4b4f      	ldr	r3, [pc, #316]	; (8bf98 <main+0x1ad8>)
   8be5c:	4798      	blx	r3
   8be5e:	4603      	mov	r3, r0
   8be60:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8be62:	79fb      	ldrb	r3, [r7, #7]
   8be64:	2b00      	cmp	r3, #0
   8be66:	d001      	beq.n	8be6c <main+0x19ac>
   8be68:	4b4c      	ldr	r3, [pc, #304]	; (8bf9c <main+0x1adc>)
   8be6a:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8be6c:	4b49      	ldr	r3, [pc, #292]	; (8bf94 <main+0x1ad4>)
   8be6e:	2200      	movs	r2, #0
   8be70:	701a      	strb	r2, [r3, #0]
						break;
   8be72:	e08e      	b.n	8bf92 <main+0x1ad2>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8be74:	4b47      	ldr	r3, [pc, #284]	; (8bf94 <main+0x1ad4>)
   8be76:	781b      	ldrb	r3, [r3, #0]
   8be78:	4618      	mov	r0, r3
   8be7a:	4b49      	ldr	r3, [pc, #292]	; (8bfa0 <main+0x1ae0>)
   8be7c:	4798      	blx	r3
   8be7e:	4603      	mov	r3, r0
   8be80:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8be82:	79fb      	ldrb	r3, [r7, #7]
   8be84:	2b00      	cmp	r3, #0
   8be86:	d001      	beq.n	8be8c <main+0x19cc>
   8be88:	4b44      	ldr	r3, [pc, #272]	; (8bf9c <main+0x1adc>)
   8be8a:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8be8c:	79fb      	ldrb	r3, [r7, #7]
   8be8e:	2b00      	cmp	r3, #0
   8be90:	d002      	beq.n	8be98 <main+0x19d8>
   8be92:	79fb      	ldrb	r3, [r7, #7]
   8be94:	2b03      	cmp	r3, #3
   8be96:	d10b      	bne.n	8beb0 <main+0x19f0>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8be98:	4b3e      	ldr	r3, [pc, #248]	; (8bf94 <main+0x1ad4>)
   8be9a:	781b      	ldrb	r3, [r3, #0]
   8be9c:	4618      	mov	r0, r3
   8be9e:	4b41      	ldr	r3, [pc, #260]	; (8bfa4 <main+0x1ae4>)
   8bea0:	4798      	blx	r3
   8bea2:	4603      	mov	r3, r0
   8bea4:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8bea6:	79fb      	ldrb	r3, [r7, #7]
   8bea8:	2b00      	cmp	r3, #0
   8beaa:	d001      	beq.n	8beb0 <main+0x19f0>
   8beac:	4b3b      	ldr	r3, [pc, #236]	; (8bf9c <main+0x1adc>)
   8beae:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8beb0:	79fb      	ldrb	r3, [r7, #7]
   8beb2:	2b00      	cmp	r3, #0
   8beb4:	d002      	beq.n	8bebc <main+0x19fc>
   8beb6:	79fb      	ldrb	r3, [r7, #7]
   8beb8:	2b03      	cmp	r3, #3
   8beba:	d10b      	bne.n	8bed4 <main+0x1a14>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bebc:	4b35      	ldr	r3, [pc, #212]	; (8bf94 <main+0x1ad4>)
   8bebe:	781b      	ldrb	r3, [r3, #0]
   8bec0:	4618      	mov	r0, r3
   8bec2:	4b39      	ldr	r3, [pc, #228]	; (8bfa8 <main+0x1ae8>)
   8bec4:	4798      	blx	r3
   8bec6:	4603      	mov	r3, r0
   8bec8:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8beca:	79fb      	ldrb	r3, [r7, #7]
   8becc:	2b00      	cmp	r3, #0
   8bece:	d001      	beq.n	8bed4 <main+0x1a14>
   8bed0:	4b32      	ldr	r3, [pc, #200]	; (8bf9c <main+0x1adc>)
   8bed2:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8bed4:	79fb      	ldrb	r3, [r7, #7]
   8bed6:	2b00      	cmp	r3, #0
   8bed8:	d002      	beq.n	8bee0 <main+0x1a20>
   8beda:	79fb      	ldrb	r3, [r7, #7]
   8bedc:	2b03      	cmp	r3, #3
   8bede:	d10b      	bne.n	8bef8 <main+0x1a38>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8bee0:	4b2c      	ldr	r3, [pc, #176]	; (8bf94 <main+0x1ad4>)
   8bee2:	781b      	ldrb	r3, [r3, #0]
   8bee4:	4618      	mov	r0, r3
   8bee6:	4b31      	ldr	r3, [pc, #196]	; (8bfac <main+0x1aec>)
   8bee8:	4798      	blx	r3
   8beea:	4603      	mov	r3, r0
   8beec:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8beee:	79fb      	ldrb	r3, [r7, #7]
   8bef0:	2b00      	cmp	r3, #0
   8bef2:	d001      	beq.n	8bef8 <main+0x1a38>
   8bef4:	4b29      	ldr	r3, [pc, #164]	; (8bf9c <main+0x1adc>)
   8bef6:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8bef8:	79fb      	ldrb	r3, [r7, #7]
   8befa:	2b00      	cmp	r3, #0
   8befc:	d146      	bne.n	8bf8c <main+0x1acc>
						{
							Cl_MacState = MAC_DIALYSIS;
   8befe:	4b2c      	ldr	r3, [pc, #176]	; (8bfb0 <main+0x1af0>)
   8bf00:	220f      	movs	r2, #15
   8bf02:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8bf04:	2201      	movs	r2, #1
   8bf06:	210f      	movs	r1, #15
   8bf08:	2045      	movs	r0, #69	; 0x45
   8bf0a:	4b2a      	ldr	r3, [pc, #168]	; (8bfb4 <main+0x1af4>)
   8bf0c:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bf0e:	79fb      	ldrb	r3, [r7, #7]
   8bf10:	2b00      	cmp	r3, #0
   8bf12:	d03b      	beq.n	8bf8c <main+0x1acc>
   8bf14:	4b21      	ldr	r3, [pc, #132]	; (8bf9c <main+0x1adc>)
   8bf16:	4798      	blx	r3
						}
						break;
   8bf18:	e038      	b.n	8bf8c <main+0x1acc>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bf1a:	4b1e      	ldr	r3, [pc, #120]	; (8bf94 <main+0x1ad4>)
   8bf1c:	781b      	ldrb	r3, [r3, #0]
   8bf1e:	4618      	mov	r0, r3
   8bf20:	4b1f      	ldr	r3, [pc, #124]	; (8bfa0 <main+0x1ae0>)
   8bf22:	4798      	blx	r3
   8bf24:	4603      	mov	r3, r0
   8bf26:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8bf28:	79fb      	ldrb	r3, [r7, #7]
   8bf2a:	2b00      	cmp	r3, #0
   8bf2c:	d001      	beq.n	8bf32 <main+0x1a72>
   8bf2e:	4b1b      	ldr	r3, [pc, #108]	; (8bf9c <main+0x1adc>)
   8bf30:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8bf32:	79fb      	ldrb	r3, [r7, #7]
   8bf34:	2b00      	cmp	r3, #0
   8bf36:	d10b      	bne.n	8bf50 <main+0x1a90>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bf38:	4b16      	ldr	r3, [pc, #88]	; (8bf94 <main+0x1ad4>)
   8bf3a:	781b      	ldrb	r3, [r3, #0]
   8bf3c:	4618      	mov	r0, r3
   8bf3e:	4b19      	ldr	r3, [pc, #100]	; (8bfa4 <main+0x1ae4>)
   8bf40:	4798      	blx	r3
   8bf42:	4603      	mov	r3, r0
   8bf44:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8bf46:	79fb      	ldrb	r3, [r7, #7]
   8bf48:	2b00      	cmp	r3, #0
   8bf4a:	d001      	beq.n	8bf50 <main+0x1a90>
   8bf4c:	4b13      	ldr	r3, [pc, #76]	; (8bf9c <main+0x1adc>)
   8bf4e:	4798      	blx	r3
						else
						{
							//handle error
						}
						
						if( Cl_MacRetval == CL_OK)
   8bf50:	79fb      	ldrb	r3, [r7, #7]
   8bf52:	2b00      	cmp	r3, #0
   8bf54:	d11c      	bne.n	8bf90 <main+0x1ad0>
						{
							Cl_MacState = MAC_RINSE;
   8bf56:	4b16      	ldr	r3, [pc, #88]	; (8bfb0 <main+0x1af0>)
   8bf58:	2207      	movs	r2, #7
   8bf5a:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8bf5c:	2201      	movs	r2, #1
   8bf5e:	2107      	movs	r1, #7
   8bf60:	2045      	movs	r0, #69	; 0x45
   8bf62:	4b14      	ldr	r3, [pc, #80]	; (8bfb4 <main+0x1af4>)
   8bf64:	4798      	blx	r3
							ASSERT_ERROR(Cl_MacRetval);
   8bf66:	79fb      	ldrb	r3, [r7, #7]
   8bf68:	2b00      	cmp	r3, #0
   8bf6a:	d011      	beq.n	8bf90 <main+0x1ad0>
   8bf6c:	4b0b      	ldr	r3, [pc, #44]	; (8bf9c <main+0x1adc>)
   8bf6e:	4798      	blx	r3
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8bf70:	e00e      	b.n	8bf90 <main+0x1ad0>
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8bf72:	4b0f      	ldr	r3, [pc, #60]	; (8bfb0 <main+0x1af0>)
   8bf74:	2214      	movs	r2, #20
   8bf76:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8bf78:	4b06      	ldr	r3, [pc, #24]	; (8bf94 <main+0x1ad4>)
   8bf7a:	781b      	ldrb	r3, [r3, #0]
   8bf7c:	4618      	mov	r0, r3
   8bf7e:	4b06      	ldr	r3, [pc, #24]	; (8bf98 <main+0x1ad8>)
   8bf80:	4798      	blx	r3
   8bf82:	4603      	mov	r3, r0
   8bf84:	71fb      	strb	r3, [r7, #7]
						
						
						break;
   8bf86:	e004      	b.n	8bf92 <main+0x1ad2>
						
						
						default: break;
   8bf88:	bf00      	nop
   8bf8a:	e2e0      	b.n	8c54e <main+0x208e>
						{
							Cl_MacState = MAC_DIALYSIS;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8bf8c:	bf00      	nop
   8bf8e:	e2de      	b.n	8c54e <main+0x208e>
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8bf90:	bf00      	nop
						break;
						
						
						default: break;
					}
					break;
   8bf92:	e2dc      	b.n	8c54e <main+0x208e>
   8bf94:	20072172 	.word	0x20072172
   8bf98:	00092a85 	.word	0x00092a85
   8bf9c:	0008870d 	.word	0x0008870d
   8bfa0:	000a1b89 	.word	0x000a1b89
   8bfa4:	0009f365 	.word	0x0009f365
   8bfa8:	0009b671 	.word	0x0009b671
   8bfac:	00085495 	.word	0x00085495
   8bfb0:	200704b0 	.word	0x200704b0
   8bfb4:	0009926d 	.word	0x0009926d
					
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8bfb8:	4bc3      	ldr	r3, [pc, #780]	; (8c2c8 <main+0x1e08>)
   8bfba:	781b      	ldrb	r3, [r3, #0]
   8bfbc:	3b07      	subs	r3, #7
   8bfbe:	2b49      	cmp	r3, #73	; 0x49
   8bfc0:	f200 812c 	bhi.w	8c21c <main+0x1d5c>
   8bfc4:	a201      	add	r2, pc, #4	; (adr r2, 8bfcc <main+0x1b0c>)
   8bfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bfca:	bf00      	nop
   8bfcc:	0008c169 	.word	0x0008c169
   8bfd0:	0008c21d 	.word	0x0008c21d
   8bfd4:	0008c21d 	.word	0x0008c21d
   8bfd8:	0008c0f5 	.word	0x0008c0f5
   8bfdc:	0008c0f5 	.word	0x0008c0f5
   8bfe0:	0008c0f5 	.word	0x0008c0f5
   8bfe4:	0008c21d 	.word	0x0008c21d
   8bfe8:	0008c21d 	.word	0x0008c21d
   8bfec:	0008c21d 	.word	0x0008c21d
   8bff0:	0008c21d 	.word	0x0008c21d
   8bff4:	0008c21d 	.word	0x0008c21d
   8bff8:	0008c21d 	.word	0x0008c21d
   8bffc:	0008c21d 	.word	0x0008c21d
   8c000:	0008c21d 	.word	0x0008c21d
   8c004:	0008c0f5 	.word	0x0008c0f5
   8c008:	0008c21d 	.word	0x0008c21d
   8c00c:	0008c21d 	.word	0x0008c21d
   8c010:	0008c14f 	.word	0x0008c14f
   8c014:	0008c115 	.word	0x0008c115
   8c018:	0008c115 	.word	0x0008c115
   8c01c:	0008c115 	.word	0x0008c115
   8c020:	0008c21d 	.word	0x0008c21d
   8c024:	0008c21d 	.word	0x0008c21d
   8c028:	0008c21d 	.word	0x0008c21d
   8c02c:	0008c21d 	.word	0x0008c21d
   8c030:	0008c21d 	.word	0x0008c21d
   8c034:	0008c21d 	.word	0x0008c21d
   8c038:	0008c21d 	.word	0x0008c21d
   8c03c:	0008c21d 	.word	0x0008c21d
   8c040:	0008c21d 	.word	0x0008c21d
   8c044:	0008c21d 	.word	0x0008c21d
   8c048:	0008c21d 	.word	0x0008c21d
   8c04c:	0008c0f5 	.word	0x0008c0f5
   8c050:	0008c0f5 	.word	0x0008c0f5
   8c054:	0008c0f5 	.word	0x0008c0f5
   8c058:	0008c21d 	.word	0x0008c21d
   8c05c:	0008c21d 	.word	0x0008c21d
   8c060:	0008c21d 	.word	0x0008c21d
   8c064:	0008c0f5 	.word	0x0008c0f5
   8c068:	0008c0f5 	.word	0x0008c0f5
   8c06c:	0008c21d 	.word	0x0008c21d
   8c070:	0008c21d 	.word	0x0008c21d
   8c074:	0008c21d 	.word	0x0008c21d
   8c078:	0008c21d 	.word	0x0008c21d
   8c07c:	0008c21d 	.word	0x0008c21d
   8c080:	0008c21d 	.word	0x0008c21d
   8c084:	0008c21d 	.word	0x0008c21d
   8c088:	0008c21d 	.word	0x0008c21d
   8c08c:	0008c21d 	.word	0x0008c21d
   8c090:	0008c0f5 	.word	0x0008c0f5
   8c094:	0008c21d 	.word	0x0008c21d
   8c098:	0008c0f5 	.word	0x0008c0f5
   8c09c:	0008c0f5 	.word	0x0008c0f5
   8c0a0:	0008c0f5 	.word	0x0008c0f5
   8c0a4:	0008c0f5 	.word	0x0008c0f5
   8c0a8:	0008c21d 	.word	0x0008c21d
   8c0ac:	0008c21d 	.word	0x0008c21d
   8c0b0:	0008c21d 	.word	0x0008c21d
   8c0b4:	0008c21d 	.word	0x0008c21d
   8c0b8:	0008c21d 	.word	0x0008c21d
   8c0bc:	0008c21d 	.word	0x0008c21d
   8c0c0:	0008c21d 	.word	0x0008c21d
   8c0c4:	0008c21d 	.word	0x0008c21d
   8c0c8:	0008c21d 	.word	0x0008c21d
   8c0cc:	0008c21d 	.word	0x0008c21d
   8c0d0:	0008c21d 	.word	0x0008c21d
   8c0d4:	0008c21d 	.word	0x0008c21d
   8c0d8:	0008c21d 	.word	0x0008c21d
   8c0dc:	0008c21d 	.word	0x0008c21d
   8c0e0:	0008c21d 	.word	0x0008c21d
   8c0e4:	0008c21d 	.word	0x0008c21d
   8c0e8:	0008c21d 	.word	0x0008c21d
   8c0ec:	0008c21d 	.word	0x0008c21d
   8c0f0:	0008c1c1 	.word	0x0008c1c1
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c0f4:	4b74      	ldr	r3, [pc, #464]	; (8c2c8 <main+0x1e08>)
   8c0f6:	781b      	ldrb	r3, [r3, #0]
   8c0f8:	4618      	mov	r0, r3
   8c0fa:	4b74      	ldr	r3, [pc, #464]	; (8c2cc <main+0x1e0c>)
   8c0fc:	4798      	blx	r3
   8c0fe:	4603      	mov	r3, r0
   8c100:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c102:	79fb      	ldrb	r3, [r7, #7]
   8c104:	2b00      	cmp	r3, #0
   8c106:	d001      	beq.n	8c10c <main+0x1c4c>
   8c108:	4b71      	ldr	r3, [pc, #452]	; (8c2d0 <main+0x1e10>)
   8c10a:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8c10c:	4b6e      	ldr	r3, [pc, #440]	; (8c2c8 <main+0x1e08>)
   8c10e:	2200      	movs	r2, #0
   8c110:	701a      	strb	r2, [r3, #0]
						break;
   8c112:	e08a      	b.n	8c22a <main+0x1d6a>
						//case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c114:	4b6c      	ldr	r3, [pc, #432]	; (8c2c8 <main+0x1e08>)
   8c116:	781b      	ldrb	r3, [r3, #0]
   8c118:	4618      	mov	r0, r3
   8c11a:	4b6c      	ldr	r3, [pc, #432]	; (8c2cc <main+0x1e0c>)
   8c11c:	4798      	blx	r3
   8c11e:	4603      	mov	r3, r0
   8c120:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c122:	79fb      	ldrb	r3, [r7, #7]
   8c124:	2b00      	cmp	r3, #0
   8c126:	d001      	beq.n	8c12c <main+0x1c6c>
   8c128:	4b69      	ldr	r3, [pc, #420]	; (8c2d0 <main+0x1e10>)
   8c12a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c12c:	79fb      	ldrb	r3, [r7, #7]
   8c12e:	2b00      	cmp	r3, #0
   8c130:	d176      	bne.n	8c220 <main+0x1d60>
							{
								Cl_MacState = MAC_SAFE_DIALYSIS;
   8c132:	4b68      	ldr	r3, [pc, #416]	; (8c2d4 <main+0x1e14>)
   8c134:	2210      	movs	r2, #16
   8c136:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_SAFE_DIALYSIS,1);
   8c138:	2201      	movs	r2, #1
   8c13a:	2110      	movs	r1, #16
   8c13c:	2045      	movs	r0, #69	; 0x45
   8c13e:	4b66      	ldr	r3, [pc, #408]	; (8c2d8 <main+0x1e18>)
   8c140:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8c142:	79fb      	ldrb	r3, [r7, #7]
   8c144:	2b00      	cmp	r3, #0
   8c146:	d06b      	beq.n	8c220 <main+0x1d60>
   8c148:	4b61      	ldr	r3, [pc, #388]	; (8c2d0 <main+0x1e10>)
   8c14a:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8c14c:	e068      	b.n	8c220 <main+0x1d60>
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c14e:	4b5e      	ldr	r3, [pc, #376]	; (8c2c8 <main+0x1e08>)
   8c150:	781b      	ldrb	r3, [r3, #0]
   8c152:	4618      	mov	r0, r3
   8c154:	4b5d      	ldr	r3, [pc, #372]	; (8c2cc <main+0x1e0c>)
   8c156:	4798      	blx	r3
   8c158:	4603      	mov	r3, r0
   8c15a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c15c:	79fb      	ldrb	r3, [r7, #7]
   8c15e:	2b00      	cmp	r3, #0
   8c160:	d060      	beq.n	8c224 <main+0x1d64>
   8c162:	4b5b      	ldr	r3, [pc, #364]	; (8c2d0 <main+0x1e10>)
   8c164:	4798      	blx	r3
						break;
   8c166:	e05d      	b.n	8c224 <main+0x1d64>
							// handle error
						}
						break;
						#endif
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c168:	4b57      	ldr	r3, [pc, #348]	; (8c2c8 <main+0x1e08>)
   8c16a:	781b      	ldrb	r3, [r3, #0]
   8c16c:	4618      	mov	r0, r3
   8c16e:	4b5b      	ldr	r3, [pc, #364]	; (8c2dc <main+0x1e1c>)
   8c170:	4798      	blx	r3
   8c172:	4603      	mov	r3, r0
   8c174:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c176:	79fb      	ldrb	r3, [r7, #7]
   8c178:	2b00      	cmp	r3, #0
   8c17a:	d001      	beq.n	8c180 <main+0x1cc0>
   8c17c:	4b54      	ldr	r3, [pc, #336]	; (8c2d0 <main+0x1e10>)
   8c17e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c180:	79fb      	ldrb	r3, [r7, #7]
   8c182:	2b00      	cmp	r3, #0
   8c184:	d10b      	bne.n	8c19e <main+0x1cde>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c186:	4b50      	ldr	r3, [pc, #320]	; (8c2c8 <main+0x1e08>)
   8c188:	781b      	ldrb	r3, [r3, #0]
   8c18a:	4618      	mov	r0, r3
   8c18c:	4b54      	ldr	r3, [pc, #336]	; (8c2e0 <main+0x1e20>)
   8c18e:	4798      	blx	r3
   8c190:	4603      	mov	r3, r0
   8c192:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8c194:	79fb      	ldrb	r3, [r7, #7]
   8c196:	2b00      	cmp	r3, #0
   8c198:	d001      	beq.n	8c19e <main+0x1cde>
   8c19a:	4b4d      	ldr	r3, [pc, #308]	; (8c2d0 <main+0x1e10>)
   8c19c:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8c19e:	79fb      	ldrb	r3, [r7, #7]
   8c1a0:	2b00      	cmp	r3, #0
   8c1a2:	d141      	bne.n	8c228 <main+0x1d68>
							{
								Cl_MacState = MAC_RINSE;
   8c1a4:	4b4b      	ldr	r3, [pc, #300]	; (8c2d4 <main+0x1e14>)
   8c1a6:	2207      	movs	r2, #7
   8c1a8:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c1aa:	2201      	movs	r2, #1
   8c1ac:	2107      	movs	r1, #7
   8c1ae:	2045      	movs	r0, #69	; 0x45
   8c1b0:	4b49      	ldr	r3, [pc, #292]	; (8c2d8 <main+0x1e18>)
   8c1b2:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8c1b4:	79fb      	ldrb	r3, [r7, #7]
   8c1b6:	2b00      	cmp	r3, #0
   8c1b8:	d036      	beq.n	8c228 <main+0x1d68>
   8c1ba:	4b45      	ldr	r3, [pc, #276]	; (8c2d0 <main+0x1e10>)
   8c1bc:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8c1be:	e033      	b.n	8c228 <main+0x1d68>
		
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c1c0:	4b41      	ldr	r3, [pc, #260]	; (8c2c8 <main+0x1e08>)
   8c1c2:	781b      	ldrb	r3, [r3, #0]
   8c1c4:	4618      	mov	r0, r3
   8c1c6:	4b41      	ldr	r3, [pc, #260]	; (8c2cc <main+0x1e0c>)
   8c1c8:	4798      	blx	r3
   8c1ca:	4603      	mov	r3, r0
   8c1cc:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c1ce:	79fb      	ldrb	r3, [r7, #7]
   8c1d0:	2b00      	cmp	r3, #0
   8c1d2:	d001      	beq.n	8c1d8 <main+0x1d18>
   8c1d4:	4b3e      	ldr	r3, [pc, #248]	; (8c2d0 <main+0x1e10>)
   8c1d6:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c1d8:	79fb      	ldrb	r3, [r7, #7]
   8c1da:	2b00      	cmp	r3, #0
   8c1dc:	d11a      	bne.n	8c214 <main+0x1d54>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8c1de:	4b41      	ldr	r3, [pc, #260]	; (8c2e4 <main+0x1e24>)
   8c1e0:	4798      	blx	r3
   8c1e2:	4603      	mov	r3, r0
   8c1e4:	71fb      	strb	r3, [r7, #7]
								Cl_MacRetval = Cl_stby_init();
   8c1e6:	4b40      	ldr	r3, [pc, #256]	; (8c2e8 <main+0x1e28>)
   8c1e8:	4798      	blx	r3
   8c1ea:	4603      	mov	r3, r0
   8c1ec:	71fb      	strb	r3, [r7, #7]
								Cl_MacRetval = Cl_dprep_init();
   8c1ee:	4b3f      	ldr	r3, [pc, #252]	; (8c2ec <main+0x1e2c>)
   8c1f0:	4798      	blx	r3
   8c1f2:	4603      	mov	r3, r0
   8c1f4:	71fb      	strb	r3, [r7, #7]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8c1f6:	4b37      	ldr	r3, [pc, #220]	; (8c2d4 <main+0x1e14>)
   8c1f8:	2211      	movs	r2, #17
   8c1fa:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
   8c1fc:	4b35      	ldr	r3, [pc, #212]	; (8c2d4 <main+0x1e14>)
   8c1fe:	781b      	ldrb	r3, [r3, #0]
   8c200:	2201      	movs	r2, #1
   8c202:	4619      	mov	r1, r3
   8c204:	2045      	movs	r0, #69	; 0x45
   8c206:	4b34      	ldr	r3, [pc, #208]	; (8c2d8 <main+0x1e18>)
   8c208:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c20a:	79fb      	ldrb	r3, [r7, #7]
   8c20c:	2b00      	cmp	r3, #0
   8c20e:	d001      	beq.n	8c214 <main+0x1d54>
   8c210:	4b2f      	ldr	r3, [pc, #188]	; (8c2d0 <main+0x1e10>)
   8c212:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c214:	4b2c      	ldr	r3, [pc, #176]	; (8c2c8 <main+0x1e08>)
   8c216:	2200      	movs	r2, #0
   8c218:	701a      	strb	r2, [r3, #0]
						break;
   8c21a:	e006      	b.n	8c22a <main+0x1d6a>
						default: break;
   8c21c:	bf00      	nop
   8c21e:	e196      	b.n	8c54e <main+0x208e>
							}
							else
							{
								// handle error
							}
						break;
   8c220:	bf00      	nop
   8c222:	e194      	b.n	8c54e <main+0x208e>
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8c224:	bf00      	nop
   8c226:	e192      	b.n	8c54e <main+0x208e>
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8c228:	bf00      	nop
							}
							Cl_MacEvent = EVT_NULL;
						break;
						default: break;
					}
					break;
   8c22a:	e190      	b.n	8c54e <main+0x208e>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8c22c:	4b26      	ldr	r3, [pc, #152]	; (8c2c8 <main+0x1e08>)
   8c22e:	781b      	ldrb	r3, [r3, #0]
   8c230:	3b07      	subs	r3, #7
   8c232:	2b21      	cmp	r3, #33	; 0x21
   8c234:	f200 80a8 	bhi.w	8c388 <main+0x1ec8>
   8c238:	a201      	add	r2, pc, #4	; (adr r2, 8c240 <main+0x1d80>)
   8c23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c23e:	bf00      	nop
   8c240:	0008c301 	.word	0x0008c301
   8c244:	0008c389 	.word	0x0008c389
   8c248:	0008c389 	.word	0x0008c389
   8c24c:	0008c2f1 	.word	0x0008c2f1
   8c250:	0008c2f1 	.word	0x0008c2f1
   8c254:	0008c2f1 	.word	0x0008c2f1
   8c258:	0008c389 	.word	0x0008c389
   8c25c:	0008c389 	.word	0x0008c389
   8c260:	0008c389 	.word	0x0008c389
   8c264:	0008c389 	.word	0x0008c389
   8c268:	0008c389 	.word	0x0008c389
   8c26c:	0008c389 	.word	0x0008c389
   8c270:	0008c389 	.word	0x0008c389
   8c274:	0008c389 	.word	0x0008c389
   8c278:	0008c389 	.word	0x0008c389
   8c27c:	0008c389 	.word	0x0008c389
   8c280:	0008c389 	.word	0x0008c389
   8c284:	0008c389 	.word	0x0008c389
   8c288:	0008c389 	.word	0x0008c389
   8c28c:	0008c363 	.word	0x0008c363
   8c290:	0008c363 	.word	0x0008c363
   8c294:	0008c389 	.word	0x0008c389
   8c298:	0008c389 	.word	0x0008c389
   8c29c:	0008c389 	.word	0x0008c389
   8c2a0:	0008c389 	.word	0x0008c389
   8c2a4:	0008c389 	.word	0x0008c389
   8c2a8:	0008c389 	.word	0x0008c389
   8c2ac:	0008c389 	.word	0x0008c389
   8c2b0:	0008c389 	.word	0x0008c389
   8c2b4:	0008c389 	.word	0x0008c389
   8c2b8:	0008c389 	.word	0x0008c389
   8c2bc:	0008c389 	.word	0x0008c389
   8c2c0:	0008c2f1 	.word	0x0008c2f1
   8c2c4:	0008c2f1 	.word	0x0008c2f1
   8c2c8:	20072172 	.word	0x20072172
   8c2cc:	00085495 	.word	0x00085495
   8c2d0:	0008870d 	.word	0x0008870d
   8c2d4:	200704b0 	.word	0x200704b0
   8c2d8:	0009926d 	.word	0x0009926d
   8c2dc:	000a1b89 	.word	0x000a1b89
   8c2e0:	0009f365 	.word	0x0009f365
   8c2e4:	000a0ae9 	.word	0x000a0ae9
   8c2e8:	000a2519 	.word	0x000a2519
   8c2ec:	0009b52d 	.word	0x0009b52d
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c2f0:	4ba1      	ldr	r3, [pc, #644]	; (8c578 <main+0x20b8>)
   8c2f2:	781b      	ldrb	r3, [r3, #0]
   8c2f4:	4618      	mov	r0, r3
   8c2f6:	4ba1      	ldr	r3, [pc, #644]	; (8c57c <main+0x20bc>)
   8c2f8:	4798      	blx	r3
   8c2fa:	4603      	mov	r3, r0
   8c2fc:	71fb      	strb	r3, [r7, #7]
						break;
   8c2fe:	e046      	b.n	8c38e <main+0x1ece>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c300:	4b9d      	ldr	r3, [pc, #628]	; (8c578 <main+0x20b8>)
   8c302:	781b      	ldrb	r3, [r3, #0]
   8c304:	4618      	mov	r0, r3
   8c306:	4b9d      	ldr	r3, [pc, #628]	; (8c57c <main+0x20bc>)
   8c308:	4798      	blx	r3
   8c30a:	4603      	mov	r3, r0
   8c30c:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c30e:	79fb      	ldrb	r3, [r7, #7]
   8c310:	2b00      	cmp	r3, #0
   8c312:	d001      	beq.n	8c318 <main+0x1e58>
   8c314:	4b9a      	ldr	r3, [pc, #616]	; (8c580 <main+0x20c0>)
   8c316:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c318:	79fb      	ldrb	r3, [r7, #7]
   8c31a:	2b00      	cmp	r3, #0
   8c31c:	d10b      	bne.n	8c336 <main+0x1e76>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8c31e:	4b96      	ldr	r3, [pc, #600]	; (8c578 <main+0x20b8>)
   8c320:	781b      	ldrb	r3, [r3, #0]
   8c322:	4618      	mov	r0, r3
   8c324:	4b97      	ldr	r3, [pc, #604]	; (8c584 <main+0x20c4>)
   8c326:	4798      	blx	r3
   8c328:	4603      	mov	r3, r0
   8c32a:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);
   8c32c:	79fb      	ldrb	r3, [r7, #7]
   8c32e:	2b00      	cmp	r3, #0
   8c330:	d001      	beq.n	8c336 <main+0x1e76>
   8c332:	4b93      	ldr	r3, [pc, #588]	; (8c580 <main+0x20c0>)
   8c334:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8c336:	79fb      	ldrb	r3, [r7, #7]
   8c338:	2b00      	cmp	r3, #0
   8c33a:	d10e      	bne.n	8c35a <main+0x1e9a>
							{
								Cl_MacState = MAC_RINSE;
   8c33c:	4b92      	ldr	r3, [pc, #584]	; (8c588 <main+0x20c8>)
   8c33e:	2207      	movs	r2, #7
   8c340:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
   8c342:	4b91      	ldr	r3, [pc, #580]	; (8c588 <main+0x20c8>)
   8c344:	781b      	ldrb	r3, [r3, #0]
   8c346:	2201      	movs	r2, #1
   8c348:	4619      	mov	r1, r3
   8c34a:	2045      	movs	r0, #69	; 0x45
   8c34c:	4b8f      	ldr	r3, [pc, #572]	; (8c58c <main+0x20cc>)
   8c34e:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c350:	79fb      	ldrb	r3, [r7, #7]
   8c352:	2b00      	cmp	r3, #0
   8c354:	d001      	beq.n	8c35a <main+0x1e9a>
   8c356:	4b8a      	ldr	r3, [pc, #552]	; (8c580 <main+0x20c0>)
   8c358:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c35a:	4b87      	ldr	r3, [pc, #540]	; (8c578 <main+0x20b8>)
   8c35c:	2200      	movs	r2, #0
   8c35e:	701a      	strb	r2, [r3, #0]
						break;
   8c360:	e015      	b.n	8c38e <main+0x1ece>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c362:	4b85      	ldr	r3, [pc, #532]	; (8c578 <main+0x20b8>)
   8c364:	781b      	ldrb	r3, [r3, #0]
   8c366:	4618      	mov	r0, r3
   8c368:	4b89      	ldr	r3, [pc, #548]	; (8c590 <main+0x20d0>)
   8c36a:	4798      	blx	r3
   8c36c:	4603      	mov	r3, r0
   8c36e:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c370:	79fb      	ldrb	r3, [r7, #7]
   8c372:	2b00      	cmp	r3, #0
   8c374:	d001      	beq.n	8c37a <main+0x1eba>
   8c376:	4b82      	ldr	r3, [pc, #520]	; (8c580 <main+0x20c0>)
   8c378:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8c37a:	79fb      	ldrb	r3, [r7, #7]
   8c37c:	2b00      	cmp	r3, #0
   8c37e:	d105      	bne.n	8c38c <main+0x1ecc>
								{
									Cl_MacState = MAC_DIALYSIS;
   8c380:	4b81      	ldr	r3, [pc, #516]	; (8c588 <main+0x20c8>)
   8c382:	220f      	movs	r2, #15
   8c384:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8c386:	e001      	b.n	8c38c <main+0x1ecc>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8c388:	bf00      	nop
   8c38a:	e0e0      	b.n	8c54e <main+0x208e>
								else
								{
									//handle error
								}
						
						break;
   8c38c:	bf00      	nop
						}
						break;
						#endif
						default: break;
					}
					break;
   8c38e:	e0de      	b.n	8c54e <main+0x208e>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8c390:	4b79      	ldr	r3, [pc, #484]	; (8c578 <main+0x20b8>)
   8c392:	781b      	ldrb	r3, [r3, #0]
   8c394:	3b07      	subs	r3, #7
   8c396:	2b38      	cmp	r3, #56	; 0x38
   8c398:	f200 80ce 	bhi.w	8c538 <main+0x2078>
   8c39c:	a201      	add	r2, pc, #4	; (adr r2, 8c3a4 <main+0x1ee4>)
   8c39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c3a2:	bf00      	nop
   8c3a4:	0008c4db 	.word	0x0008c4db
   8c3a8:	0008c539 	.word	0x0008c539
   8c3ac:	0008c539 	.word	0x0008c539
   8c3b0:	0008c489 	.word	0x0008c489
   8c3b4:	0008c489 	.word	0x0008c489
   8c3b8:	0008c489 	.word	0x0008c489
   8c3bc:	0008c539 	.word	0x0008c539
   8c3c0:	0008c539 	.word	0x0008c539
   8c3c4:	0008c539 	.word	0x0008c539
   8c3c8:	0008c539 	.word	0x0008c539
   8c3cc:	0008c539 	.word	0x0008c539
   8c3d0:	0008c539 	.word	0x0008c539
   8c3d4:	0008c539 	.word	0x0008c539
   8c3d8:	0008c539 	.word	0x0008c539
   8c3dc:	0008c539 	.word	0x0008c539
   8c3e0:	0008c539 	.word	0x0008c539
   8c3e4:	0008c539 	.word	0x0008c539
   8c3e8:	0008c539 	.word	0x0008c539
   8c3ec:	0008c539 	.word	0x0008c539
   8c3f0:	0008c489 	.word	0x0008c489
   8c3f4:	0008c489 	.word	0x0008c489
   8c3f8:	0008c539 	.word	0x0008c539
   8c3fc:	0008c539 	.word	0x0008c539
   8c400:	0008c539 	.word	0x0008c539
   8c404:	0008c539 	.word	0x0008c539
   8c408:	0008c539 	.word	0x0008c539
   8c40c:	0008c539 	.word	0x0008c539
   8c410:	0008c539 	.word	0x0008c539
   8c414:	0008c539 	.word	0x0008c539
   8c418:	0008c539 	.word	0x0008c539
   8c41c:	0008c539 	.word	0x0008c539
   8c420:	0008c539 	.word	0x0008c539
   8c424:	0008c489 	.word	0x0008c489
   8c428:	0008c489 	.word	0x0008c489
   8c42c:	0008c539 	.word	0x0008c539
   8c430:	0008c539 	.word	0x0008c539
   8c434:	0008c539 	.word	0x0008c539
   8c438:	0008c539 	.word	0x0008c539
   8c43c:	0008c539 	.word	0x0008c539
   8c440:	0008c539 	.word	0x0008c539
   8c444:	0008c539 	.word	0x0008c539
   8c448:	0008c539 	.word	0x0008c539
   8c44c:	0008c539 	.word	0x0008c539
   8c450:	0008c539 	.word	0x0008c539
   8c454:	0008c539 	.word	0x0008c539
   8c458:	0008c539 	.word	0x0008c539
   8c45c:	0008c539 	.word	0x0008c539
   8c460:	0008c539 	.word	0x0008c539
   8c464:	0008c539 	.word	0x0008c539
   8c468:	0008c539 	.word	0x0008c539
   8c46c:	0008c539 	.word	0x0008c539
   8c470:	0008c539 	.word	0x0008c539
   8c474:	0008c539 	.word	0x0008c539
   8c478:	0008c539 	.word	0x0008c539
   8c47c:	0008c539 	.word	0x0008c539
   8c480:	0008c539 	.word	0x0008c539
   8c484:	0008c4a3 	.word	0x0008c4a3
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c488:	4b3b      	ldr	r3, [pc, #236]	; (8c578 <main+0x20b8>)
   8c48a:	781b      	ldrb	r3, [r3, #0]
   8c48c:	4618      	mov	r0, r3
   8c48e:	4b40      	ldr	r3, [pc, #256]	; (8c590 <main+0x20d0>)
   8c490:	4798      	blx	r3
   8c492:	4603      	mov	r3, r0
   8c494:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c496:	79fb      	ldrb	r3, [r7, #7]
   8c498:	2b00      	cmp	r3, #0
   8c49a:	d04f      	beq.n	8c53c <main+0x207c>
   8c49c:	4b38      	ldr	r3, [pc, #224]	; (8c580 <main+0x20c0>)
   8c49e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8c4a0:	e04c      	b.n	8c53c <main+0x207c>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c4a2:	4b35      	ldr	r3, [pc, #212]	; (8c578 <main+0x20b8>)
   8c4a4:	781b      	ldrb	r3, [r3, #0]
   8c4a6:	4618      	mov	r0, r3
   8c4a8:	4b39      	ldr	r3, [pc, #228]	; (8c590 <main+0x20d0>)
   8c4aa:	4798      	blx	r3
   8c4ac:	4603      	mov	r3, r0
   8c4ae:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c4b0:	79fb      	ldrb	r3, [r7, #7]
   8c4b2:	2b00      	cmp	r3, #0
   8c4b4:	d001      	beq.n	8c4ba <main+0x1ffa>
   8c4b6:	4b32      	ldr	r3, [pc, #200]	; (8c580 <main+0x20c0>)
   8c4b8:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c4ba:	4b2f      	ldr	r3, [pc, #188]	; (8c578 <main+0x20b8>)
   8c4bc:	781b      	ldrb	r3, [r3, #0]
   8c4be:	4618      	mov	r0, r3
   8c4c0:	4b34      	ldr	r3, [pc, #208]	; (8c594 <main+0x20d4>)
   8c4c2:	4798      	blx	r3
   8c4c4:	4603      	mov	r3, r0
   8c4c6:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_MacRetval);
   8c4c8:	79fb      	ldrb	r3, [r7, #7]
   8c4ca:	2b00      	cmp	r3, #0
   8c4cc:	d001      	beq.n	8c4d2 <main+0x2012>
   8c4ce:	4b2c      	ldr	r3, [pc, #176]	; (8c580 <main+0x20c0>)
   8c4d0:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8c4d2:	4b2d      	ldr	r3, [pc, #180]	; (8c588 <main+0x20c8>)
   8c4d4:	2208      	movs	r2, #8
   8c4d6:	701a      	strb	r2, [r3, #0]
						
						break;
   8c4d8:	e031      	b.n	8c53e <main+0x207e>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c4da:	4b27      	ldr	r3, [pc, #156]	; (8c578 <main+0x20b8>)
   8c4dc:	781b      	ldrb	r3, [r3, #0]
   8c4de:	4618      	mov	r0, r3
   8c4e0:	4b26      	ldr	r3, [pc, #152]	; (8c57c <main+0x20bc>)
   8c4e2:	4798      	blx	r3
   8c4e4:	4603      	mov	r3, r0
   8c4e6:	71fb      	strb	r3, [r7, #7]
							ASSERT_ERROR(Cl_MacRetval);
   8c4e8:	79fb      	ldrb	r3, [r7, #7]
   8c4ea:	2b00      	cmp	r3, #0
   8c4ec:	d001      	beq.n	8c4f2 <main+0x2032>
   8c4ee:	4b24      	ldr	r3, [pc, #144]	; (8c580 <main+0x20c0>)
   8c4f0:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c4f2:	79fb      	ldrb	r3, [r7, #7]
   8c4f4:	2b00      	cmp	r3, #0
   8c4f6:	d10b      	bne.n	8c510 <main+0x2050>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c4f8:	4b1f      	ldr	r3, [pc, #124]	; (8c578 <main+0x20b8>)
   8c4fa:	781b      	ldrb	r3, [r3, #0]
   8c4fc:	4618      	mov	r0, r3
   8c4fe:	4b21      	ldr	r3, [pc, #132]	; (8c584 <main+0x20c4>)
   8c500:	4798      	blx	r3
   8c502:	4603      	mov	r3, r0
   8c504:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_MacRetval);	
   8c506:	79fb      	ldrb	r3, [r7, #7]
   8c508:	2b00      	cmp	r3, #0
   8c50a:	d001      	beq.n	8c510 <main+0x2050>
   8c50c:	4b1c      	ldr	r3, [pc, #112]	; (8c580 <main+0x20c0>)
   8c50e:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8c510:	79fb      	ldrb	r3, [r7, #7]
   8c512:	2b00      	cmp	r3, #0
   8c514:	d10c      	bne.n	8c530 <main+0x2070>
							{
								Cl_MacState = MAC_RINSE;
   8c516:	4b1c      	ldr	r3, [pc, #112]	; (8c588 <main+0x20c8>)
   8c518:	2207      	movs	r2, #7
   8c51a:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c51c:	2201      	movs	r2, #1
   8c51e:	2107      	movs	r1, #7
   8c520:	2045      	movs	r0, #69	; 0x45
   8c522:	4b1a      	ldr	r3, [pc, #104]	; (8c58c <main+0x20cc>)
   8c524:	4798      	blx	r3
									ASSERT_ERROR(Cl_MacRetval);
   8c526:	79fb      	ldrb	r3, [r7, #7]
   8c528:	2b00      	cmp	r3, #0
   8c52a:	d001      	beq.n	8c530 <main+0x2070>
   8c52c:	4b14      	ldr	r3, [pc, #80]	; (8c580 <main+0x20c0>)
   8c52e:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c530:	4b11      	ldr	r3, [pc, #68]	; (8c578 <main+0x20b8>)
   8c532:	2200      	movs	r2, #0
   8c534:	701a      	strb	r2, [r3, #0]
						break;
   8c536:	e002      	b.n	8c53e <main+0x207e>
						

						default: break;
   8c538:	bf00      	nop
   8c53a:	e008      	b.n	8c54e <main+0x208e>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8c53c:	bf00      	nop
						break;
						

						default: break;
					}
					break;
   8c53e:	e006      	b.n	8c54e <main+0x208e>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c540:	bf00      	nop
					}
					break;
   8c542:	e004      	b.n	8c54e <main+0x208e>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c544:	bf00      	nop
					}
					break;
   8c546:	e002      	b.n	8c54e <main+0x208e>
					default :
					break;
   8c548:	bf00      	nop
   8c54a:	e000      	b.n	8c54e <main+0x208e>
						ASSERT_ERROR(Cl_MacRetval);
						break;
						
					}
					
					break;
   8c54c:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8c54e:	4b12      	ldr	r3, [pc, #72]	; (8c598 <main+0x20d8>)
   8c550:	4798      	blx	r3
   8c552:	4603      	mov	r3, r0
   8c554:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval);
   8c556:	79fb      	ldrb	r3, [r7, #7]
   8c558:	2b00      	cmp	r3, #0
   8c55a:	d001      	beq.n	8c560 <main+0x20a0>
   8c55c:	4b08      	ldr	r3, [pc, #32]	; (8c580 <main+0x20c0>)
   8c55e:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueue1.Cl_MacNewEventcount > 0) ||(Cl_MacEventQueue2.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8c560:	4b0e      	ldr	r3, [pc, #56]	; (8c59c <main+0x20dc>)
   8c562:	781b      	ldrb	r3, [r3, #0]
   8c564:	2b00      	cmp	r3, #0
   8c566:	f47e a861 	bne.w	8a62c <main+0x16c>
   8c56a:	4b0d      	ldr	r3, [pc, #52]	; (8c5a0 <main+0x20e0>)
   8c56c:	781b      	ldrb	r3, [r3, #0]
   8c56e:	2b00      	cmp	r3, #0
   8c570:	f47e a85c 	bne.w	8a62c <main+0x16c>
			
		}
		
		}

	}
   8c574:	f7fe b828 	b.w	8a5c8 <main+0x108>
   8c578:	20072172 	.word	0x20072172
   8c57c:	000a1b89 	.word	0x000a1b89
   8c580:	0008870d 	.word	0x0008870d
   8c584:	0009f365 	.word	0x0009f365
   8c588:	200704b0 	.word	0x200704b0
   8c58c:	0009926d 	.word	0x0009926d
   8c590:	00085495 	.word	0x00085495
   8c594:	00099a01 	.word	0x00099a01
   8c598:	0008c989 	.word	0x0008c989
   8c59c:	20072eb4 	.word	0x20072eb4
   8c5a0:	20072d8c 	.word	0x20072d8c

0008c5a4 <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8c5a4:	b580      	push	{r7, lr}
   8c5a6:	b082      	sub	sp, #8
   8c5a8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8c5aa:	2300      	movs	r3, #0
   8c5ac:	71fb      	strb	r3, [r7, #7]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8c5ae:	4b1d      	ldr	r3, [pc, #116]	; (8c624 <Cl_MacInit+0x80>)
   8c5b0:	2200      	movs	r2, #0
   8c5b2:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8c5b4:	4b1b      	ldr	r3, [pc, #108]	; (8c624 <Cl_MacInit+0x80>)
   8c5b6:	2200      	movs	r2, #0
   8c5b8:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8c5ba:	4b1a      	ldr	r3, [pc, #104]	; (8c624 <Cl_MacInit+0x80>)
   8c5bc:	2200      	movs	r2, #0
   8c5be:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8c5c0:	4b19      	ldr	r3, [pc, #100]	; (8c628 <Cl_MacInit+0x84>)
   8c5c2:	2214      	movs	r2, #20
   8c5c4:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8c5c6:	4b19      	ldr	r3, [pc, #100]	; (8c62c <Cl_MacInit+0x88>)
   8c5c8:	2228      	movs	r2, #40	; 0x28
   8c5ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8c5ce:	4b18      	ldr	r3, [pc, #96]	; (8c630 <Cl_MacInit+0x8c>)
   8c5d0:	2201      	movs	r2, #1
   8c5d2:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8c5d4:	4b16      	ldr	r3, [pc, #88]	; (8c630 <Cl_MacInit+0x8c>)
   8c5d6:	2200      	movs	r2, #0
   8c5d8:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8c5da:	4b15      	ldr	r3, [pc, #84]	; (8c630 <Cl_MacInit+0x8c>)
   8c5dc:	2200      	movs	r2, #0
   8c5de:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8c5e0:	4b13      	ldr	r3, [pc, #76]	; (8c630 <Cl_MacInit+0x8c>)
   8c5e2:	2201      	movs	r2, #1
   8c5e4:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8c5e6:	4b12      	ldr	r3, [pc, #72]	; (8c630 <Cl_MacInit+0x8c>)
   8c5e8:	2200      	movs	r2, #0
   8c5ea:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8c5ec:	4b11      	ldr	r3, [pc, #68]	; (8c634 <Cl_MacInit+0x90>)
   8c5ee:	2201      	movs	r2, #1
   8c5f0:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8c5f2:	4b10      	ldr	r3, [pc, #64]	; (8c634 <Cl_MacInit+0x90>)
   8c5f4:	2200      	movs	r2, #0
   8c5f6:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8c5f8:	4b0e      	ldr	r3, [pc, #56]	; (8c634 <Cl_MacInit+0x90>)
   8c5fa:	2200      	movs	r2, #0
   8c5fc:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8c5fe:	4b0d      	ldr	r3, [pc, #52]	; (8c634 <Cl_MacInit+0x90>)
   8c600:	2200      	movs	r2, #0
   8c602:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8c604:	4b0b      	ldr	r3, [pc, #44]	; (8c634 <Cl_MacInit+0x90>)
   8c606:	2200      	movs	r2, #0
   8c608:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8c60a:	4b0b      	ldr	r3, [pc, #44]	; (8c638 <Cl_MacInit+0x94>)
   8c60c:	2202      	movs	r2, #2
   8c60e:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8c610:	79fb      	ldrb	r3, [r7, #7]
   8c612:	2b00      	cmp	r3, #0
   8c614:	d001      	beq.n	8c61a <Cl_MacInit+0x76>
   8c616:	4b09      	ldr	r3, [pc, #36]	; (8c63c <Cl_MacInit+0x98>)
   8c618:	4798      	blx	r3
		return Cl_MacRetval;
   8c61a:	79fb      	ldrb	r3, [r7, #7]
}
   8c61c:	4618      	mov	r0, r3
   8c61e:	3708      	adds	r7, #8
   8c620:	46bd      	mov	sp, r7
   8c622:	bd80      	pop	{r7, pc}
   8c624:	20072eb4 	.word	0x20072eb4
   8c628:	20072f68 	.word	0x20072f68
   8c62c:	20072de8 	.word	0x20072de8
   8c630:	20072fa4 	.word	0x20072fa4
   8c634:	20072e6c 	.word	0x20072e6c
   8c638:	200704b0 	.word	0x200704b0
   8c63c:	0008870d 	.word	0x0008870d

0008c640 <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8c640:	b580      	push	{r7, lr}
   8c642:	b082      	sub	sp, #8
   8c644:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8c646:	2304      	movs	r3, #4
   8c648:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8c64a:	4b26      	ldr	r3, [pc, #152]	; (8c6e4 <Cl_App_init+0xa4>)
   8c64c:	4798      	blx	r3
   8c64e:	4603      	mov	r3, r0
   8c650:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c652:	79fb      	ldrb	r3, [r7, #7]
   8c654:	2b00      	cmp	r3, #0
   8c656:	d001      	beq.n	8c65c <Cl_App_init+0x1c>
   8c658:	4b23      	ldr	r3, [pc, #140]	; (8c6e8 <Cl_App_init+0xa8>)
   8c65a:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8c65c:	4b23      	ldr	r3, [pc, #140]	; (8c6ec <Cl_App_init+0xac>)
   8c65e:	4798      	blx	r3
   8c660:	4603      	mov	r3, r0
   8c662:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c664:	79fb      	ldrb	r3, [r7, #7]
   8c666:	2b00      	cmp	r3, #0
   8c668:	d001      	beq.n	8c66e <Cl_App_init+0x2e>
   8c66a:	4b1f      	ldr	r3, [pc, #124]	; (8c6e8 <Cl_App_init+0xa8>)
   8c66c:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8c66e:	4b20      	ldr	r3, [pc, #128]	; (8c6f0 <Cl_App_init+0xb0>)
   8c670:	4798      	blx	r3
   8c672:	4603      	mov	r3, r0
   8c674:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c676:	79fb      	ldrb	r3, [r7, #7]
   8c678:	2b00      	cmp	r3, #0
   8c67a:	d001      	beq.n	8c680 <Cl_App_init+0x40>
   8c67c:	4b1a      	ldr	r3, [pc, #104]	; (8c6e8 <Cl_App_init+0xa8>)
   8c67e:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8c680:	4b1c      	ldr	r3, [pc, #112]	; (8c6f4 <Cl_App_init+0xb4>)
   8c682:	4798      	blx	r3
   8c684:	4603      	mov	r3, r0
   8c686:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c688:	79fb      	ldrb	r3, [r7, #7]
   8c68a:	2b00      	cmp	r3, #0
   8c68c:	d001      	beq.n	8c692 <Cl_App_init+0x52>
   8c68e:	4b16      	ldr	r3, [pc, #88]	; (8c6e8 <Cl_App_init+0xa8>)
   8c690:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8c692:	4b19      	ldr	r3, [pc, #100]	; (8c6f8 <Cl_App_init+0xb8>)
   8c694:	4798      	blx	r3
   8c696:	4603      	mov	r3, r0
   8c698:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c69a:	79fb      	ldrb	r3, [r7, #7]
   8c69c:	2b00      	cmp	r3, #0
   8c69e:	d001      	beq.n	8c6a4 <Cl_App_init+0x64>
   8c6a0:	4b11      	ldr	r3, [pc, #68]	; (8c6e8 <Cl_App_init+0xa8>)
   8c6a2:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8c6a4:	4b15      	ldr	r3, [pc, #84]	; (8c6fc <Cl_App_init+0xbc>)
   8c6a6:	4798      	blx	r3
   8c6a8:	4603      	mov	r3, r0
   8c6aa:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c6ac:	79fb      	ldrb	r3, [r7, #7]
   8c6ae:	2b00      	cmp	r3, #0
   8c6b0:	d001      	beq.n	8c6b6 <Cl_App_init+0x76>
   8c6b2:	4b0d      	ldr	r3, [pc, #52]	; (8c6e8 <Cl_App_init+0xa8>)
   8c6b4:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8c6b6:	4b12      	ldr	r3, [pc, #72]	; (8c700 <Cl_App_init+0xc0>)
   8c6b8:	4798      	blx	r3
   8c6ba:	4603      	mov	r3, r0
   8c6bc:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c6be:	79fb      	ldrb	r3, [r7, #7]
   8c6c0:	2b00      	cmp	r3, #0
   8c6c2:	d001      	beq.n	8c6c8 <Cl_App_init+0x88>
   8c6c4:	4b08      	ldr	r3, [pc, #32]	; (8c6e8 <Cl_App_init+0xa8>)
   8c6c6:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8c6c8:	4b0e      	ldr	r3, [pc, #56]	; (8c704 <Cl_App_init+0xc4>)
   8c6ca:	4798      	blx	r3
   8c6cc:	4603      	mov	r3, r0
   8c6ce:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8c6d0:	79fb      	ldrb	r3, [r7, #7]
   8c6d2:	2b00      	cmp	r3, #0
   8c6d4:	d001      	beq.n	8c6da <Cl_App_init+0x9a>
   8c6d6:	4b04      	ldr	r3, [pc, #16]	; (8c6e8 <Cl_App_init+0xa8>)
   8c6d8:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8c6da:	2300      	movs	r3, #0
	
}
   8c6dc:	4618      	mov	r0, r3
   8c6de:	3708      	adds	r7, #8
   8c6e0:	46bd      	mov	sp, r7
   8c6e2:	bd80      	pop	{r7, pc}
   8c6e4:	00080ce1 	.word	0x00080ce1
   8c6e8:	0008870d 	.word	0x0008870d
   8c6ec:	0009976d 	.word	0x0009976d
   8c6f0:	000999f1 	.word	0x000999f1
   8c6f4:	00085385 	.word	0x00085385
   8c6f8:	0009b52d 	.word	0x0009b52d
   8c6fc:	000a0ae9 	.word	0x000a0ae9
   8c700:	000a2519 	.word	0x000a2519
   8c704:	000849fd 	.word	0x000849fd

0008c708 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8c708:	b580      	push	{r7, lr}
   8c70a:	b082      	sub	sp, #8
   8c70c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8c70e:	2304      	movs	r3, #4
   8c710:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8c712:	79fb      	ldrb	r3, [r7, #7]
   8c714:	2b00      	cmp	r3, #0
   8c716:	d001      	beq.n	8c71c <Cl_Mac_Configure+0x14>
   8c718:	4b03      	ldr	r3, [pc, #12]	; (8c728 <Cl_Mac_Configure+0x20>)
   8c71a:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8c71c:	2300      	movs	r3, #0
}
   8c71e:	4618      	mov	r0, r3
   8c720:	3708      	adds	r7, #8
   8c722:	46bd      	mov	sp, r7
   8c724:	bd80      	pop	{r7, pc}
   8c726:	bf00      	nop
   8c728:	0008870d 	.word	0x0008870d

0008c72c <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8c72c:	b580      	push	{r7, lr}
   8c72e:	b082      	sub	sp, #8
   8c730:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8c732:	2304      	movs	r3, #4
   8c734:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8c736:	4b07      	ldr	r3, [pc, #28]	; (8c754 <Cl_Mac_GetSystem_Status_Query+0x28>)
   8c738:	4798      	blx	r3
   8c73a:	4603      	mov	r3, r0
   8c73c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8c73e:	79fb      	ldrb	r3, [r7, #7]
   8c740:	2b00      	cmp	r3, #0
   8c742:	d001      	beq.n	8c748 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8c744:	4b04      	ldr	r3, [pc, #16]	; (8c758 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8c746:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8c748:	2300      	movs	r3, #0
}
   8c74a:	4618      	mov	r0, r3
   8c74c:	3708      	adds	r7, #8
   8c74e:	46bd      	mov	sp, r7
   8c750:	bd80      	pop	{r7, pc}
   8c752:	bf00      	nop
   8c754:	0008d36d 	.word	0x0008d36d
   8c758:	0008870d 	.word	0x0008870d

0008c75c <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8c75c:	b580      	push	{r7, lr}
   8c75e:	b082      	sub	sp, #8
   8c760:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c762:	4b19      	ldr	r3, [pc, #100]	; (8c7c8 <Cl_MacCheckforConsoleMessage+0x6c>)
   8c764:	4798      	blx	r3
   8c766:	4603      	mov	r3, r0
   8c768:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8c76a:	79fb      	ldrb	r3, [r7, #7]
   8c76c:	2b00      	cmp	r3, #0
   8c76e:	d001      	beq.n	8c774 <Cl_MacCheckforConsoleMessage+0x18>
   8c770:	4b16      	ldr	r3, [pc, #88]	; (8c7cc <Cl_MacCheckforConsoleMessage+0x70>)
   8c772:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8c774:	79fb      	ldrb	r3, [r7, #7]
   8c776:	2b00      	cmp	r3, #0
   8c778:	d108      	bne.n	8c78c <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8c77a:	4b15      	ldr	r3, [pc, #84]	; (8c7d0 <Cl_MacCheckforConsoleMessage+0x74>)
   8c77c:	4798      	blx	r3
   8c77e:	4603      	mov	r3, r0
   8c780:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8c782:	79fb      	ldrb	r3, [r7, #7]
   8c784:	2b00      	cmp	r3, #0
   8c786:	d001      	beq.n	8c78c <Cl_MacCheckforConsoleMessage+0x30>
   8c788:	4b10      	ldr	r3, [pc, #64]	; (8c7cc <Cl_MacCheckforConsoleMessage+0x70>)
   8c78a:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8c78c:	79fb      	ldrb	r3, [r7, #7]
   8c78e:	2b00      	cmp	r3, #0
   8c790:	d108      	bne.n	8c7a4 <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c792:	4b10      	ldr	r3, [pc, #64]	; (8c7d4 <Cl_MacCheckforConsoleMessage+0x78>)
   8c794:	4798      	blx	r3
   8c796:	4603      	mov	r3, r0
   8c798:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8c79a:	79fb      	ldrb	r3, [r7, #7]
   8c79c:	2b00      	cmp	r3, #0
   8c79e:	d001      	beq.n	8c7a4 <Cl_MacCheckforConsoleMessage+0x48>
   8c7a0:	4b0a      	ldr	r3, [pc, #40]	; (8c7cc <Cl_MacCheckforConsoleMessage+0x70>)
   8c7a2:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8c7a4:	79fb      	ldrb	r3, [r7, #7]
   8c7a6:	2b00      	cmp	r3, #0
   8c7a8:	d108      	bne.n	8c7bc <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8c7aa:	4b0b      	ldr	r3, [pc, #44]	; (8c7d8 <Cl_MacCheckforConsoleMessage+0x7c>)
   8c7ac:	4798      	blx	r3
   8c7ae:	4603      	mov	r3, r0
   8c7b0:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8c7b2:	79fb      	ldrb	r3, [r7, #7]
   8c7b4:	2b00      	cmp	r3, #0
   8c7b6:	d001      	beq.n	8c7bc <Cl_MacCheckforConsoleMessage+0x60>
   8c7b8:	4b04      	ldr	r3, [pc, #16]	; (8c7cc <Cl_MacCheckforConsoleMessage+0x70>)
   8c7ba:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8c7bc:	2300      	movs	r3, #0
}
   8c7be:	4618      	mov	r0, r3
   8c7c0:	3708      	adds	r7, #8
   8c7c2:	46bd      	mov	sp, r7
   8c7c4:	bd80      	pop	{r7, pc}
   8c7c6:	bf00      	nop
   8c7c8:	00098ec1 	.word	0x00098ec1
   8c7cc:	0008870d 	.word	0x0008870d
   8c7d0:	00098f21 	.word	0x00098f21
   8c7d4:	00098f01 	.word	0x00098f01
   8c7d8:	00099089 	.word	0x00099089

0008c7dc <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8c7dc:	b480      	push	{r7}
   8c7de:	b083      	sub	sp, #12
   8c7e0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8c7e2:	2300      	movs	r3, #0
   8c7e4:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8c7e6:	4b63      	ldr	r3, [pc, #396]	; (8c974 <Cl_MacCreate_Macevent+0x198>)
   8c7e8:	2200      	movs	r2, #0
   8c7ea:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8c7ec:	4b62      	ldr	r3, [pc, #392]	; (8c978 <Cl_MacCreate_Macevent+0x19c>)
   8c7ee:	2200      	movs	r2, #0
   8c7f0:	701a      	strb	r2, [r3, #0]
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c7f2:	4b62      	ldr	r3, [pc, #392]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c7f4:	785b      	ldrb	r3, [r3, #1]
   8c7f6:	2b00      	cmp	r3, #0
   8c7f8:	d035      	beq.n	8c866 <Cl_MacCreate_Macevent+0x8a>
   8c7fa:	4b60      	ldr	r3, [pc, #384]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c7fc:	781b      	ldrb	r3, [r3, #0]
   8c7fe:	2b00      	cmp	r3, #0
   8c800:	d031      	beq.n	8c866 <Cl_MacCreate_Macevent+0x8a>
		{
	

			Cl_MacNewEvent = true;
   8c802:	4b5c      	ldr	r3, [pc, #368]	; (8c974 <Cl_MacCreate_Macevent+0x198>)
   8c804:	2201      	movs	r2, #1
   8c806:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8c808:	4b5c      	ldr	r3, [pc, #368]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c80a:	789a      	ldrb	r2, [r3, #2]
   8c80c:	4b5a      	ldr	r3, [pc, #360]	; (8c978 <Cl_MacCreate_Macevent+0x19c>)
   8c80e:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8c810:	4b5a      	ldr	r3, [pc, #360]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c812:	781b      	ldrb	r3, [r3, #0]
   8c814:	3b01      	subs	r3, #1
   8c816:	b2da      	uxtb	r2, r3
   8c818:	4b58      	ldr	r3, [pc, #352]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c81a:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8c81c:	2300      	movs	r3, #0
   8c81e:	71fb      	strb	r3, [r7, #7]
   8c820:	e019      	b.n	8c856 <Cl_MacCreate_Macevent+0x7a>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c822:	79fb      	ldrb	r3, [r7, #7]
   8c824:	2b09      	cmp	r3, #9
   8c826:	d80a      	bhi.n	8c83e <Cl_MacCreate_Macevent+0x62>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8c828:	79fb      	ldrb	r3, [r7, #7]
   8c82a:	79fa      	ldrb	r2, [r7, #7]
   8c82c:	3201      	adds	r2, #1
   8c82e:	4953      	ldr	r1, [pc, #332]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c830:	440a      	add	r2, r1
   8c832:	7891      	ldrb	r1, [r2, #2]
   8c834:	4a51      	ldr	r2, [pc, #324]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c836:	4413      	add	r3, r2
   8c838:	460a      	mov	r2, r1
   8c83a:	709a      	strb	r2, [r3, #2]
   8c83c:	e008      	b.n	8c850 <Cl_MacCreate_Macevent+0x74>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c83e:	79fb      	ldrb	r3, [r7, #7]
   8c840:	2b09      	cmp	r3, #9
   8c842:	d90e      	bls.n	8c862 <Cl_MacCreate_Macevent+0x86>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8c844:	79fb      	ldrb	r3, [r7, #7]
   8c846:	4a4d      	ldr	r2, [pc, #308]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c848:	4413      	add	r3, r2
   8c84a:	2200      	movs	r2, #0
   8c84c:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c84e:	e008      	b.n	8c862 <Cl_MacCreate_Macevent+0x86>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8c850:	79fb      	ldrb	r3, [r7, #7]
   8c852:	3301      	adds	r3, #1
   8c854:	71fb      	strb	r3, [r7, #7]
   8c856:	4b49      	ldr	r3, [pc, #292]	; (8c97c <Cl_MacCreate_Macevent+0x1a0>)
   8c858:	781b      	ldrb	r3, [r3, #0]
   8c85a:	79fa      	ldrb	r2, [r7, #7]
   8c85c:	429a      	cmp	r2, r3
   8c85e:	d3e0      	bcc.n	8c822 <Cl_MacCreate_Macevent+0x46>
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c860:	e082      	b.n	8c968 <Cl_MacCreate_Macevent+0x18c>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c862:	bf00      	nop
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8c864:	e080      	b.n	8c968 <Cl_MacCreate_Macevent+0x18c>
				}
			}
	
	
		}
		else if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8c866:	4b46      	ldr	r3, [pc, #280]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c868:	785b      	ldrb	r3, [r3, #1]
   8c86a:	2b00      	cmp	r3, #0
   8c86c:	d03c      	beq.n	8c8e8 <Cl_MacCreate_Macevent+0x10c>
   8c86e:	4b44      	ldr	r3, [pc, #272]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c870:	781b      	ldrb	r3, [r3, #0]
   8c872:	2b00      	cmp	r3, #0
   8c874:	d038      	beq.n	8c8e8 <Cl_MacCreate_Macevent+0x10c>
		{
			

			Cl_MacNewEvent = true;
   8c876:	4b3f      	ldr	r3, [pc, #252]	; (8c974 <Cl_MacCreate_Macevent+0x198>)
   8c878:	2201      	movs	r2, #1
   8c87a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8c87c:	4b40      	ldr	r3, [pc, #256]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c87e:	789a      	ldrb	r2, [r3, #2]
   8c880:	4b3d      	ldr	r3, [pc, #244]	; (8c978 <Cl_MacCreate_Macevent+0x19c>)
   8c882:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8c884:	4b3e      	ldr	r3, [pc, #248]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c886:	781b      	ldrb	r3, [r3, #0]
   8c888:	3b01      	subs	r3, #1
   8c88a:	b2da      	uxtb	r2, r3
   8c88c:	4b3c      	ldr	r3, [pc, #240]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c88e:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8c890:	2300      	movs	r3, #0
   8c892:	71fb      	strb	r3, [r7, #7]
   8c894:	e019      	b.n	8c8ca <Cl_MacCreate_Macevent+0xee>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c896:	79fb      	ldrb	r3, [r7, #7]
   8c898:	2b09      	cmp	r3, #9
   8c89a:	d80a      	bhi.n	8c8b2 <Cl_MacCreate_Macevent+0xd6>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8c89c:	79fb      	ldrb	r3, [r7, #7]
   8c89e:	79fa      	ldrb	r2, [r7, #7]
   8c8a0:	3201      	adds	r2, #1
   8c8a2:	4937      	ldr	r1, [pc, #220]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8a4:	440a      	add	r2, r1
   8c8a6:	7891      	ldrb	r1, [r2, #2]
   8c8a8:	4a35      	ldr	r2, [pc, #212]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8aa:	4413      	add	r3, r2
   8c8ac:	460a      	mov	r2, r1
   8c8ae:	709a      	strb	r2, [r3, #2]
   8c8b0:	e008      	b.n	8c8c4 <Cl_MacCreate_Macevent+0xe8>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c8b2:	79fb      	ldrb	r3, [r7, #7]
   8c8b4:	2b09      	cmp	r3, #9
   8c8b6:	d90e      	bls.n	8c8d6 <Cl_MacCreate_Macevent+0xfa>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8c8b8:	79fb      	ldrb	r3, [r7, #7]
   8c8ba:	4a31      	ldr	r2, [pc, #196]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8bc:	4413      	add	r3, r2
   8c8be:	2200      	movs	r2, #0
   8c8c0:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c8c2:	e008      	b.n	8c8d6 <Cl_MacCreate_Macevent+0xfa>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8c8c4:	79fb      	ldrb	r3, [r7, #7]
   8c8c6:	3301      	adds	r3, #1
   8c8c8:	71fb      	strb	r3, [r7, #7]
   8c8ca:	4b2d      	ldr	r3, [pc, #180]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8cc:	781b      	ldrb	r3, [r3, #0]
   8c8ce:	79fa      	ldrb	r2, [r7, #7]
   8c8d0:	429a      	cmp	r2, r3
   8c8d2:	d3e0      	bcc.n	8c896 <Cl_MacCreate_Macevent+0xba>
   8c8d4:	e000      	b.n	8c8d8 <Cl_MacCreate_Macevent+0xfc>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c8d6:	bf00      	nop
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8c8d8:	4b29      	ldr	r3, [pc, #164]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8da:	781b      	ldrb	r3, [r3, #0]
   8c8dc:	461a      	mov	r2, r3
   8c8de:	4b28      	ldr	r3, [pc, #160]	; (8c980 <Cl_MacCreate_Macevent+0x1a4>)
   8c8e0:	4413      	add	r3, r2
   8c8e2:	2200      	movs	r2, #0
   8c8e4:	709a      	strb	r2, [r3, #2]
   8c8e6:	e03f      	b.n	8c968 <Cl_MacCreate_Macevent+0x18c>
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c8e8:	4b26      	ldr	r3, [pc, #152]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c8ea:	785b      	ldrb	r3, [r3, #1]
   8c8ec:	2b00      	cmp	r3, #0
   8c8ee:	d035      	beq.n	8c95c <Cl_MacCreate_Macevent+0x180>
   8c8f0:	4b24      	ldr	r3, [pc, #144]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c8f2:	781b      	ldrb	r3, [r3, #0]
   8c8f4:	2b00      	cmp	r3, #0
   8c8f6:	d031      	beq.n	8c95c <Cl_MacCreate_Macevent+0x180>
		{
			

			Cl_MacNewEvent = true;
   8c8f8:	4b1e      	ldr	r3, [pc, #120]	; (8c974 <Cl_MacCreate_Macevent+0x198>)
   8c8fa:	2201      	movs	r2, #1
   8c8fc:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8c8fe:	4b21      	ldr	r3, [pc, #132]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c900:	789a      	ldrb	r2, [r3, #2]
   8c902:	4b1d      	ldr	r3, [pc, #116]	; (8c978 <Cl_MacCreate_Macevent+0x19c>)
   8c904:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8c906:	4b1f      	ldr	r3, [pc, #124]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c908:	781b      	ldrb	r3, [r3, #0]
   8c90a:	3b01      	subs	r3, #1
   8c90c:	b2da      	uxtb	r2, r3
   8c90e:	4b1d      	ldr	r3, [pc, #116]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c910:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8c912:	2300      	movs	r3, #0
   8c914:	71fb      	strb	r3, [r7, #7]
   8c916:	e019      	b.n	8c94c <Cl_MacCreate_Macevent+0x170>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c918:	79fb      	ldrb	r3, [r7, #7]
   8c91a:	2b09      	cmp	r3, #9
   8c91c:	d80a      	bhi.n	8c934 <Cl_MacCreate_Macevent+0x158>
				{
					Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8c91e:	79fb      	ldrb	r3, [r7, #7]
   8c920:	79fa      	ldrb	r2, [r7, #7]
   8c922:	3201      	adds	r2, #1
   8c924:	4917      	ldr	r1, [pc, #92]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c926:	440a      	add	r2, r1
   8c928:	7891      	ldrb	r1, [r2, #2]
   8c92a:	4a16      	ldr	r2, [pc, #88]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c92c:	4413      	add	r3, r2
   8c92e:	460a      	mov	r2, r1
   8c930:	709a      	strb	r2, [r3, #2]
   8c932:	e008      	b.n	8c946 <Cl_MacCreate_Macevent+0x16a>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8c934:	79fb      	ldrb	r3, [r7, #7]
   8c936:	2b09      	cmp	r3, #9
   8c938:	d90e      	bls.n	8c958 <Cl_MacCreate_Macevent+0x17c>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;	
   8c93a:	79fb      	ldrb	r3, [r7, #7]
   8c93c:	4a11      	ldr	r2, [pc, #68]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c93e:	4413      	add	r3, r2
   8c940:	2200      	movs	r2, #0
   8c942:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c944:	e008      	b.n	8c958 <Cl_MacCreate_Macevent+0x17c>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
			Cl_MacEventQueue1.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8c946:	79fb      	ldrb	r3, [r7, #7]
   8c948:	3301      	adds	r3, #1
   8c94a:	71fb      	strb	r3, [r7, #7]
   8c94c:	4b0d      	ldr	r3, [pc, #52]	; (8c984 <Cl_MacCreate_Macevent+0x1a8>)
   8c94e:	781b      	ldrb	r3, [r3, #0]
   8c950:	79fa      	ldrb	r2, [r7, #7]
   8c952:	429a      	cmp	r2, r3
   8c954:	d3e0      	bcc.n	8c918 <Cl_MacCreate_Macevent+0x13c>
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c956:	e007      	b.n	8c968 <Cl_MacCreate_Macevent+0x18c>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;	
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8c958:	bf00      	nop
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8c95a:	e005      	b.n	8c968 <Cl_MacCreate_Macevent+0x18c>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8c95c:	4b05      	ldr	r3, [pc, #20]	; (8c974 <Cl_MacCreate_Macevent+0x198>)
   8c95e:	2200      	movs	r2, #0
   8c960:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8c962:	4b05      	ldr	r3, [pc, #20]	; (8c978 <Cl_MacCreate_Macevent+0x19c>)
   8c964:	2200      	movs	r2, #0
   8c966:	701a      	strb	r2, [r3, #0]
			
			
		}
	

	return CL_OK;
   8c968:	2300      	movs	r3, #0
}
   8c96a:	4618      	mov	r0, r3
   8c96c:	370c      	adds	r7, #12
   8c96e:	46bd      	mov	sp, r7
   8c970:	bc80      	pop	{r7}
   8c972:	4770      	bx	lr
   8c974:	20072174 	.word	0x20072174
   8c978:	20072172 	.word	0x20072172
   8c97c:	20072fc4 	.word	0x20072fc4
   8c980:	20072d8c 	.word	0x20072d8c
   8c984:	20072eb4 	.word	0x20072eb4

0008c988 <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8c988:	b480      	push	{r7}
   8c98a:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8c98c:	2300      	movs	r3, #0
	
}
   8c98e:	4618      	mov	r0, r3
   8c990:	46bd      	mov	sp, r7
   8c992:	bc80      	pop	{r7}
   8c994:	4770      	bx	lr
   8c996:	bf00      	nop

0008c998 <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8c998:	b580      	push	{r7, lr}
   8c99a:	b082      	sub	sp, #8
   8c99c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8c99e:	4b07      	ldr	r3, [pc, #28]	; (8c9bc <Cl_Mac_CheckforAlarms+0x24>)
   8c9a0:	4798      	blx	r3
   8c9a2:	4603      	mov	r3, r0
   8c9a4:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8c9a6:	79fb      	ldrb	r3, [r7, #7]
   8c9a8:	2b00      	cmp	r3, #0
   8c9aa:	d001      	beq.n	8c9b0 <Cl_Mac_CheckforAlarms+0x18>
   8c9ac:	4b04      	ldr	r3, [pc, #16]	; (8c9c0 <Cl_Mac_CheckforAlarms+0x28>)
   8c9ae:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8c9b0:	2300      	movs	r3, #0
}
   8c9b2:	4618      	mov	r0, r3
   8c9b4:	3708      	adds	r7, #8
   8c9b6:	46bd      	mov	sp, r7
   8c9b8:	bd80      	pop	{r7, pc}
   8c9ba:	bf00      	nop
   8c9bc:	00081681 	.word	0x00081681
   8c9c0:	0008870d 	.word	0x0008870d

0008c9c4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8c9c4:	b480      	push	{r7}
   8c9c6:	b083      	sub	sp, #12
   8c9c8:	af00      	add	r7, sp, #0
   8c9ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8c9cc:	687b      	ldr	r3, [r7, #4]
   8c9ce:	2b07      	cmp	r3, #7
   8c9d0:	d825      	bhi.n	8ca1e <osc_get_rate+0x5a>
   8c9d2:	a201      	add	r2, pc, #4	; (adr r2, 8c9d8 <osc_get_rate+0x14>)
   8c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c9d8:	0008c9f9 	.word	0x0008c9f9
   8c9dc:	0008c9ff 	.word	0x0008c9ff
   8c9e0:	0008ca05 	.word	0x0008ca05
   8c9e4:	0008ca0b 	.word	0x0008ca0b
   8c9e8:	0008ca0f 	.word	0x0008ca0f
   8c9ec:	0008ca13 	.word	0x0008ca13
   8c9f0:	0008ca17 	.word	0x0008ca17
   8c9f4:	0008ca1b 	.word	0x0008ca1b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8c9f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8c9fc:	e010      	b.n	8ca20 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8c9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8ca02:	e00d      	b.n	8ca20 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8ca04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8ca08:	e00a      	b.n	8ca20 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8ca0a:	4b08      	ldr	r3, [pc, #32]	; (8ca2c <osc_get_rate+0x68>)
   8ca0c:	e008      	b.n	8ca20 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8ca0e:	4b08      	ldr	r3, [pc, #32]	; (8ca30 <osc_get_rate+0x6c>)
   8ca10:	e006      	b.n	8ca20 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8ca12:	4b08      	ldr	r3, [pc, #32]	; (8ca34 <osc_get_rate+0x70>)
   8ca14:	e004      	b.n	8ca20 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8ca16:	4b07      	ldr	r3, [pc, #28]	; (8ca34 <osc_get_rate+0x70>)
   8ca18:	e002      	b.n	8ca20 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8ca1a:	4b06      	ldr	r3, [pc, #24]	; (8ca34 <osc_get_rate+0x70>)
   8ca1c:	e000      	b.n	8ca20 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8ca1e:	2300      	movs	r3, #0
}
   8ca20:	4618      	mov	r0, r3
   8ca22:	370c      	adds	r7, #12
   8ca24:	46bd      	mov	sp, r7
   8ca26:	bc80      	pop	{r7}
   8ca28:	4770      	bx	lr
   8ca2a:	bf00      	nop
   8ca2c:	003d0900 	.word	0x003d0900
   8ca30:	007a1200 	.word	0x007a1200
   8ca34:	00b71b00 	.word	0x00b71b00

0008ca38 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8ca38:	b580      	push	{r7, lr}
   8ca3a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8ca3c:	2006      	movs	r0, #6
   8ca3e:	4b04      	ldr	r3, [pc, #16]	; (8ca50 <sysclk_get_main_hz+0x18>)
   8ca40:	4798      	blx	r3
   8ca42:	4602      	mov	r2, r0
   8ca44:	4613      	mov	r3, r2
   8ca46:	00db      	lsls	r3, r3, #3
   8ca48:	1a9b      	subs	r3, r3, r2
   8ca4a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8ca4c:	4618      	mov	r0, r3
   8ca4e:	bd80      	pop	{r7, pc}
   8ca50:	0008c9c5 	.word	0x0008c9c5

0008ca54 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8ca54:	b580      	push	{r7, lr}
   8ca56:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8ca58:	4b02      	ldr	r3, [pc, #8]	; (8ca64 <sysclk_get_cpu_hz+0x10>)
   8ca5a:	4798      	blx	r3
   8ca5c:	4603      	mov	r3, r0
   8ca5e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8ca60:	4618      	mov	r0, r3
   8ca62:	bd80      	pop	{r7, pc}
   8ca64:	0008ca39 	.word	0x0008ca39

0008ca68 <nvram_read>:
uint8_t sum[11]={0};
uint8_t checksum_all[11]={0};
extern Cl_ReturnCodeType cl_wait(uint32_t );
void checksum_cal(uint32_t val);
void nvram_read(ID_NAME module_id)
{
   8ca68:	b580      	push	{r7, lr}
   8ca6a:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
   8ca6e:	af00      	add	r7, sp, #0
   8ca70:	4602      	mov	r2, r0
   8ca72:	1dfb      	adds	r3, r7, #7
   8ca74:	701a      	strb	r2, [r3, #0]
	static lut ps_1_1[40]={0,0};
	static lut ps_2_1[40]={0,0};
	static lut ps_3_1[40]={0,0};
	static hep hp_1[40]={0,0};
	static conduc cond_1[40]={0,0};
	size_var = 0;
   8ca76:	4bb8      	ldr	r3, [pc, #736]	; (8cd58 <nvram_read+0x2f0>)
   8ca78:	2200      	movs	r2, #0
   8ca7a:	601a      	str	r2, [r3, #0]
	addr_var = 0;
   8ca7c:	4bb7      	ldr	r3, [pc, #732]	; (8cd5c <nvram_read+0x2f4>)
   8ca7e:	2200      	movs	r2, #0
   8ca80:	601a      	str	r2, [r3, #0]
	uint32_t i=0;
   8ca82:	2300      	movs	r3, #0
   8ca84:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
	//static uint32_t j =0;
	int16_t data_received[400] = {0};
   8ca88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8ca8c:	4618      	mov	r0, r3
   8ca8e:	f44f 7348 	mov.w	r3, #800	; 0x320
   8ca92:	461a      	mov	r2, r3
   8ca94:	2100      	movs	r1, #0
   8ca96:	4bb2      	ldr	r3, [pc, #712]	; (8cd60 <nvram_read+0x2f8>)
   8ca98:	4798      	blx	r3
	for (i=0;i<400;i++)
   8ca9a:	2300      	movs	r3, #0
   8ca9c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8caa0:	e00b      	b.n	8caba <nvram_read+0x52>
	{
		data_received[i]=0;
   8caa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8caa6:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8caaa:	2100      	movs	r1, #0
   8caac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	size_var = 0;
	addr_var = 0;
	uint32_t i=0;
	//static uint32_t j =0;
	int16_t data_received[400] = {0};
	for (i=0;i<400;i++)
   8cab0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cab4:	3301      	adds	r3, #1
   8cab6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8caba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cabe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8cac2:	d3ee      	bcc.n	8caa2 <nvram_read+0x3a>
	{
		data_received[i]=0;
	}
	//printf("read\n");
	addr_var = array[module_id].addr;
   8cac4:	1dfb      	adds	r3, r7, #7
   8cac6:	781a      	ldrb	r2, [r3, #0]
   8cac8:	49a6      	ldr	r1, [pc, #664]	; (8cd64 <nvram_read+0x2fc>)
   8caca:	4613      	mov	r3, r2
   8cacc:	005b      	lsls	r3, r3, #1
   8cace:	4413      	add	r3, r2
   8cad0:	009b      	lsls	r3, r3, #2
   8cad2:	440b      	add	r3, r1
   8cad4:	3304      	adds	r3, #4
   8cad6:	681b      	ldr	r3, [r3, #0]
   8cad8:	4aa0      	ldr	r2, [pc, #640]	; (8cd5c <nvram_read+0x2f4>)
   8cada:	6013      	str	r3, [r2, #0]
	size_var = array[module_id].size;
   8cadc:	1dfb      	adds	r3, r7, #7
   8cade:	781a      	ldrb	r2, [r3, #0]
   8cae0:	49a0      	ldr	r1, [pc, #640]	; (8cd64 <nvram_read+0x2fc>)
   8cae2:	4613      	mov	r3, r2
   8cae4:	005b      	lsls	r3, r3, #1
   8cae6:	4413      	add	r3, r2
   8cae8:	009b      	lsls	r3, r3, #2
   8caea:	440b      	add	r3, r1
   8caec:	3308      	adds	r3, #8
   8caee:	681b      	ldr	r3, [r3, #0]
   8caf0:	4a99      	ldr	r2, [pc, #612]	; (8cd58 <nvram_read+0x2f0>)
   8caf2:	6013      	str	r3, [r2, #0]
	
	twi_options_t opt = {
   8caf4:	f107 0320 	add.w	r3, r7, #32
   8caf8:	461a      	mov	r2, r3
   8cafa:	2300      	movs	r3, #0
   8cafc:	6013      	str	r3, [r2, #0]
   8cafe:	6053      	str	r3, [r2, #4]
   8cb00:	6093      	str	r3, [r2, #8]
		.master_clk = sysclk_get_cpu_hz(),
   8cb02:	4b99      	ldr	r3, [pc, #612]	; (8cd68 <nvram_read+0x300>)
   8cb04:	4798      	blx	r3
   8cb06:	4602      	mov	r2, r0
	}
	//printf("read\n");
	addr_var = array[module_id].addr;
	size_var = array[module_id].size;
	
	twi_options_t opt = {
   8cb08:	f107 0320 	add.w	r3, r7, #32
   8cb0c:	601a      	str	r2, [r3, #0]
   8cb0e:	f107 0320 	add.w	r3, r7, #32
   8cb12:	4a96      	ldr	r2, [pc, #600]	; (8cd6c <nvram_read+0x304>)
   8cb14:	605a      	str	r2, [r3, #4]
   8cb16:	f107 0320 	add.w	r3, r7, #32
   8cb1a:	2251      	movs	r2, #81	; 0x51
   8cb1c:	721a      	strb	r2, [r3, #8]
		.master_clk = sysclk_get_cpu_hz(),
		.speed = TWI_SPEED,
		.chip  = NVRAM_BUS_ADDR
	};

	twi_master_init(TWI_EXAMPLE, &opt);
   8cb1e:	f107 0320 	add.w	r3, r7, #32
   8cb22:	4619      	mov	r1, r3
   8cb24:	4892      	ldr	r0, [pc, #584]	; (8cd70 <nvram_read+0x308>)
   8cb26:	4b93      	ldr	r3, [pc, #588]	; (8cd74 <nvram_read+0x30c>)
   8cb28:	4798      	blx	r3
	
	twi_packet_t packet_received = {
   8cb2a:	f107 030c 	add.w	r3, r7, #12
   8cb2e:	461a      	mov	r2, r3
   8cb30:	2300      	movs	r3, #0
   8cb32:	6013      	str	r3, [r2, #0]
   8cb34:	6053      	str	r3, [r2, #4]
   8cb36:	6093      	str	r3, [r2, #8]
   8cb38:	60d3      	str	r3, [r2, #12]
   8cb3a:	6113      	str	r3, [r2, #16]
		#if SAM
		.addr[0]      = addr_var >> 8, // TWI slave memory address data MSB
   8cb3c:	4b87      	ldr	r3, [pc, #540]	; (8cd5c <nvram_read+0x2f4>)
   8cb3e:	681b      	ldr	r3, [r3, #0]
   8cb40:	0a1b      	lsrs	r3, r3, #8
		.chip  = NVRAM_BUS_ADDR
	};

	twi_master_init(TWI_EXAMPLE, &opt);
	
	twi_packet_t packet_received = {
   8cb42:	b2da      	uxtb	r2, r3
   8cb44:	f107 030c 	add.w	r3, r7, #12
   8cb48:	701a      	strb	r2, [r3, #0]
   8cb4a:	4b84      	ldr	r3, [pc, #528]	; (8cd5c <nvram_read+0x2f4>)
   8cb4c:	681b      	ldr	r3, [r3, #0]
   8cb4e:	b2da      	uxtb	r2, r3
   8cb50:	f107 030c 	add.w	r3, r7, #12
   8cb54:	705a      	strb	r2, [r3, #1]
   8cb56:	f107 030c 	add.w	r3, r7, #12
   8cb5a:	2202      	movs	r2, #2
   8cb5c:	605a      	str	r2, [r3, #4]
   8cb5e:	f107 030c 	add.w	r3, r7, #12
   8cb62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   8cb66:	609a      	str	r2, [r3, #8]
   8cb68:	4b7b      	ldr	r3, [pc, #492]	; (8cd58 <nvram_read+0x2f0>)
   8cb6a:	681a      	ldr	r2, [r3, #0]
   8cb6c:	f107 030c 	add.w	r3, r7, #12
   8cb70:	60da      	str	r2, [r3, #12]
   8cb72:	f107 030c 	add.w	r3, r7, #12
   8cb76:	2251      	movs	r2, #81	; 0x51
   8cb78:	741a      	strb	r2, [r3, #16]
		// TWI slave bus address
		.buffer       = data_received,        // transfer data destination buffer
		.length       = size_var   // transfer data size (bytes)
	};
	// Perform a multi-byte read access then check the result.
	while (twi_master_read(TWI_EXAMPLE, &packet_received) != TWI_SUCCESS);
   8cb7a:	bf00      	nop
   8cb7c:	f107 030c 	add.w	r3, r7, #12
   8cb80:	4619      	mov	r1, r3
   8cb82:	487b      	ldr	r0, [pc, #492]	; (8cd70 <nvram_read+0x308>)
   8cb84:	4b7c      	ldr	r3, [pc, #496]	; (8cd78 <nvram_read+0x310>)
   8cb86:	4798      	blx	r3
   8cb88:	4603      	mov	r3, r0
   8cb8a:	2b00      	cmp	r3, #0
   8cb8c:	d1f6      	bne.n	8cb7c <nvram_read+0x114>

	// Verify that the received data matches the sent data.
	switch (module_id)
   8cb8e:	1dfb      	adds	r3, r7, #7
   8cb90:	781b      	ldrb	r3, [r3, #0]
   8cb92:	2b0a      	cmp	r3, #10
   8cb94:	f200 8397 	bhi.w	8d2c6 <nvram_read+0x85e>
   8cb98:	a201      	add	r2, pc, #4	; (adr r2, 8cba0 <nvram_read+0x138>)
   8cb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cb9e:	bf00      	nop
   8cba0:	0008cbcd 	.word	0x0008cbcd
   8cba4:	0008d2c7 	.word	0x0008d2c7
   8cba8:	0008d2c7 	.word	0x0008d2c7
   8cbac:	0008cd51 	.word	0x0008cd51
   8cbb0:	0008d2c7 	.word	0x0008d2c7
   8cbb4:	0008d2c7 	.word	0x0008d2c7
   8cbb8:	0008cf09 	.word	0x0008cf09
   8cbbc:	0008d2c7 	.word	0x0008d2c7
   8cbc0:	0008d053 	.word	0x0008d053
   8cbc4:	0008d185 	.word	0x0008d185
   8cbc8:	0008d28b 	.word	0x0008d28b
	{
		case CAL_TEMP_TS1:
		
		for (i=0;i<size_var/2;i++)
   8cbcc:	2300      	movs	r3, #0
   8cbce:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cbd2:	e021      	b.n	8cc18 <nvram_read+0x1b0>
		{
			Temp1_1[i].volts = data_received[i*2];
   8cbd4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbd8:	005a      	lsls	r2, r3, #1
   8cbda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cbde:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cbe2:	b299      	uxth	r1, r3
   8cbe4:	4a65      	ldr	r2, [pc, #404]	; (8cd7c <nvram_read+0x314>)
   8cbe6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbea:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp1_1[i].temperature = data_received[(i*2)+1];
   8cbee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cbf2:	005b      	lsls	r3, r3, #1
   8cbf4:	1c5a      	adds	r2, r3, #1
   8cbf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cbfa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8cbfe:	b299      	uxth	r1, r3
   8cc00:	4a5e      	ldr	r2, [pc, #376]	; (8cd7c <nvram_read+0x314>)
   8cc02:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc06:	009b      	lsls	r3, r3, #2
   8cc08:	4413      	add	r3, r2
   8cc0a:	460a      	mov	r2, r1
   8cc0c:	805a      	strh	r2, [r3, #2]
	// Verify that the received data matches the sent data.
	switch (module_id)
	{
		case CAL_TEMP_TS1:
		
		for (i=0;i<size_var/2;i++)
   8cc0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc12:	3301      	adds	r3, #1
   8cc14:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc18:	4b4f      	ldr	r3, [pc, #316]	; (8cd58 <nvram_read+0x2f0>)
   8cc1a:	681b      	ldr	r3, [r3, #0]
   8cc1c:	085a      	lsrs	r2, r3, #1
   8cc1e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc22:	429a      	cmp	r2, r3
   8cc24:	d8d6      	bhi.n	8cbd4 <nvram_read+0x16c>
		{
			Temp1_1[i].volts = data_received[i*2];
			Temp1_1[i].temperature = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8cc26:	2300      	movs	r3, #0
   8cc28:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc2c:	e01b      	b.n	8cc66 <nvram_read+0x1fe>
		{
			Temp1[i].volts = Temp1_1[i].volts;
   8cc2e:	4a53      	ldr	r2, [pc, #332]	; (8cd7c <nvram_read+0x314>)
   8cc30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc34:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8cc38:	4a51      	ldr	r2, [pc, #324]	; (8cd80 <nvram_read+0x318>)
   8cc3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc3e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp1[i].temperature = Temp1_1[i].temperature;
   8cc42:	4a4e      	ldr	r2, [pc, #312]	; (8cd7c <nvram_read+0x314>)
   8cc44:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc48:	009b      	lsls	r3, r3, #2
   8cc4a:	4413      	add	r3, r2
   8cc4c:	8859      	ldrh	r1, [r3, #2]
   8cc4e:	4a4c      	ldr	r2, [pc, #304]	; (8cd80 <nvram_read+0x318>)
   8cc50:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc54:	009b      	lsls	r3, r3, #2
   8cc56:	4413      	add	r3, r2
   8cc58:	460a      	mov	r2, r1
   8cc5a:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			Temp1_1[i].volts = data_received[i*2];
			Temp1_1[i].temperature = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8cc5c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc60:	3301      	adds	r3, #1
   8cc62:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc66:	4b3c      	ldr	r3, [pc, #240]	; (8cd58 <nvram_read+0x2f0>)
   8cc68:	681b      	ldr	r3, [r3, #0]
   8cc6a:	085a      	lsrs	r2, r3, #1
   8cc6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc70:	429a      	cmp	r2, r3
   8cc72:	d8dc      	bhi.n	8cc2e <nvram_read+0x1c6>
		{
			Temp1[i].volts = Temp1_1[i].volts;
			Temp1[i].temperature = Temp1_1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cc74:	2300      	movs	r3, #0
   8cc76:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cc7a:	e036      	b.n	8ccea <nvram_read+0x282>
		{
			Temp2[i].volts = Temp1[i].volts;
   8cc7c:	4a40      	ldr	r2, [pc, #256]	; (8cd80 <nvram_read+0x318>)
   8cc7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc82:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cc86:	b299      	uxth	r1, r3
   8cc88:	4a3e      	ldr	r2, [pc, #248]	; (8cd84 <nvram_read+0x31c>)
   8cc8a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc8e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp2[i].temperature = Temp1[i].temperature;
   8cc92:	4a3b      	ldr	r2, [pc, #236]	; (8cd80 <nvram_read+0x318>)
   8cc94:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cc98:	009b      	lsls	r3, r3, #2
   8cc9a:	4413      	add	r3, r2
   8cc9c:	885b      	ldrh	r3, [r3, #2]
   8cc9e:	b299      	uxth	r1, r3
   8cca0:	4a38      	ldr	r2, [pc, #224]	; (8cd84 <nvram_read+0x31c>)
   8cca2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cca6:	009b      	lsls	r3, r3, #2
   8cca8:	4413      	add	r3, r2
   8ccaa:	460a      	mov	r2, r1
   8ccac:	805a      	strh	r2, [r3, #2]
			Temp3[i].volts = Temp1[i].volts;
   8ccae:	4a34      	ldr	r2, [pc, #208]	; (8cd80 <nvram_read+0x318>)
   8ccb0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccb4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ccb8:	b299      	uxth	r1, r3
   8ccba:	4a33      	ldr	r2, [pc, #204]	; (8cd88 <nvram_read+0x320>)
   8ccbc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccc0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			Temp3[i].temperature = Temp1[i].temperature;
   8ccc4:	4a2e      	ldr	r2, [pc, #184]	; (8cd80 <nvram_read+0x318>)
   8ccc6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccca:	009b      	lsls	r3, r3, #2
   8cccc:	4413      	add	r3, r2
   8ccce:	885b      	ldrh	r3, [r3, #2]
   8ccd0:	b299      	uxth	r1, r3
   8ccd2:	4a2d      	ldr	r2, [pc, #180]	; (8cd88 <nvram_read+0x320>)
   8ccd4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccd8:	009b      	lsls	r3, r3, #2
   8ccda:	4413      	add	r3, r2
   8ccdc:	460a      	mov	r2, r1
   8ccde:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			Temp1[i].volts = Temp1_1[i].volts;
			Temp1[i].temperature = Temp1_1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cce0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cce4:	3301      	adds	r3, #1
   8cce6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ccea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ccee:	2b74      	cmp	r3, #116	; 0x74
   8ccf0:	d9c4      	bls.n	8cc7c <nvram_read+0x214>
			Temp2[i].volts = Temp1[i].volts;
			Temp2[i].temperature = Temp1[i].temperature;
			Temp3[i].volts = Temp1[i].volts;
			Temp3[i].temperature = Temp1[i].temperature;
		}
		for (i=0;i<117;i++)
   8ccf2:	2300      	movs	r3, #0
   8ccf4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ccf8:	e01d      	b.n	8cd36 <nvram_read+0x2ce>
		{
			checksum = checksum+Temp1[i].volts;
   8ccfa:	4a21      	ldr	r2, [pc, #132]	; (8cd80 <nvram_read+0x318>)
   8ccfc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd00:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cd04:	b29b      	uxth	r3, r3
   8cd06:	461a      	mov	r2, r3
   8cd08:	4b20      	ldr	r3, [pc, #128]	; (8cd8c <nvram_read+0x324>)
   8cd0a:	681b      	ldr	r3, [r3, #0]
   8cd0c:	4413      	add	r3, r2
   8cd0e:	4a1f      	ldr	r2, [pc, #124]	; (8cd8c <nvram_read+0x324>)
   8cd10:	6013      	str	r3, [r2, #0]
			checksum = checksum+Temp1[i].temperature;
   8cd12:	4a1b      	ldr	r2, [pc, #108]	; (8cd80 <nvram_read+0x318>)
   8cd14:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd18:	009b      	lsls	r3, r3, #2
   8cd1a:	4413      	add	r3, r2
   8cd1c:	885b      	ldrh	r3, [r3, #2]
   8cd1e:	b29b      	uxth	r3, r3
   8cd20:	461a      	mov	r2, r3
   8cd22:	4b1a      	ldr	r3, [pc, #104]	; (8cd8c <nvram_read+0x324>)
   8cd24:	681b      	ldr	r3, [r3, #0]
   8cd26:	4413      	add	r3, r2
   8cd28:	4a18      	ldr	r2, [pc, #96]	; (8cd8c <nvram_read+0x324>)
   8cd2a:	6013      	str	r3, [r2, #0]
			Temp2[i].volts = Temp1[i].volts;
			Temp2[i].temperature = Temp1[i].temperature;
			Temp3[i].volts = Temp1[i].volts;
			Temp3[i].temperature = Temp1[i].temperature;
		}
		for (i=0;i<117;i++)
   8cd2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd30:	3301      	adds	r3, #1
   8cd32:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cd36:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd3a:	2b74      	cmp	r3, #116	; 0x74
   8cd3c:	d9dd      	bls.n	8ccfa <nvram_read+0x292>
		{
			checksum = checksum+Temp1[i].volts;
			checksum = checksum+Temp1[i].temperature;
		}
		checksum_cal(checksum);
   8cd3e:	4b13      	ldr	r3, [pc, #76]	; (8cd8c <nvram_read+0x324>)
   8cd40:	681b      	ldr	r3, [r3, #0]
   8cd42:	4618      	mov	r0, r3
   8cd44:	4b12      	ldr	r3, [pc, #72]	; (8cd90 <nvram_read+0x328>)
   8cd46:	4798      	blx	r3
		checksum = 0;
   8cd48:	4b10      	ldr	r3, [pc, #64]	; (8cd8c <nvram_read+0x324>)
   8cd4a:	2200      	movs	r2, #0
   8cd4c:	601a      	str	r2, [r3, #0]
		break;
   8cd4e:	e2bb      	b.n	8d2c8 <nvram_read+0x860>
		case CAL_PS1:
		
		for (i=0;i<size_var/2;i++)
   8cd50:	2300      	movs	r3, #0
   8cd52:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cd56:	e03d      	b.n	8cdd4 <nvram_read+0x36c>
   8cd58:	2007217c 	.word	0x2007217c
   8cd5c:	200730a0 	.word	0x200730a0
   8cd60:	000a39a5 	.word	0x000a39a5
   8cd64:	200704b4 	.word	0x200704b4
   8cd68:	0008ca55 	.word	0x0008ca55
   8cd6c:	000186a0 	.word	0x000186a0
   8cd70:	4008c000 	.word	0x4008c000
   8cd74:	00080629 	.word	0x00080629
   8cd78:	00080761 	.word	0x00080761
   8cd7c:	2007219c 	.word	0x2007219c
   8cd80:	2007167c 	.word	0x2007167c
   8cd84:	20071850 	.word	0x20071850
   8cd88:	20071a24 	.word	0x20071a24
   8cd8c:	20072180 	.word	0x20072180
   8cd90:	0008d2f5 	.word	0x0008d2f5
		{
			ps_1_1[i].pressure = data_received[i*2];
   8cd94:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cd98:	005a      	lsls	r2, r3, #1
   8cd9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cd9e:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cda2:	4ac4      	ldr	r2, [pc, #784]	; (8d0b4 <nvram_read+0x64c>)
   8cda4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cda8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_1_1[i].millivolt = data_received[(i*2)+1];
   8cdac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdb0:	005b      	lsls	r3, r3, #1
   8cdb2:	1c5a      	adds	r2, r3, #1
   8cdb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cdb8:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cdbc:	4abd      	ldr	r2, [pc, #756]	; (8d0b4 <nvram_read+0x64c>)
   8cdbe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdc2:	009b      	lsls	r3, r3, #2
   8cdc4:	4413      	add	r3, r2
   8cdc6:	460a      	mov	r2, r1
   8cdc8:	805a      	strh	r2, [r3, #2]
		checksum_cal(checksum);
		checksum = 0;
		break;
		case CAL_PS1:
		
		for (i=0;i<size_var/2;i++)
   8cdca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdce:	3301      	adds	r3, #1
   8cdd0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cdd4:	4bb8      	ldr	r3, [pc, #736]	; (8d0b8 <nvram_read+0x650>)
   8cdd6:	681b      	ldr	r3, [r3, #0]
   8cdd8:	085a      	lsrs	r2, r3, #1
   8cdda:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdde:	429a      	cmp	r2, r3
   8cde0:	d8d8      	bhi.n	8cd94 <nvram_read+0x32c>
		{
			ps_1_1[i].pressure = data_received[i*2];
			ps_1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<40;i++)
   8cde2:	2300      	movs	r3, #0
   8cde4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cde8:	e01c      	b.n	8ce24 <nvram_read+0x3bc>
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
   8cdea:	4ab2      	ldr	r2, [pc, #712]	; (8d0b4 <nvram_read+0x64c>)
   8cdec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdf0:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8cdf4:	4ab1      	ldr	r2, [pc, #708]	; (8d0bc <nvram_read+0x654>)
   8cdf6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cdfa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_1[i].millivolt = ps_1_1[i].millivolt;
   8cdfe:	4aad      	ldr	r2, [pc, #692]	; (8d0b4 <nvram_read+0x64c>)
   8ce00:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce04:	009b      	lsls	r3, r3, #2
   8ce06:	4413      	add	r3, r2
   8ce08:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8ce0c:	4aab      	ldr	r2, [pc, #684]	; (8d0bc <nvram_read+0x654>)
   8ce0e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce12:	009b      	lsls	r3, r3, #2
   8ce14:	4413      	add	r3, r2
   8ce16:	460a      	mov	r2, r1
   8ce18:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			ps_1_1[i].pressure = data_received[i*2];
			ps_1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<40;i++)
   8ce1a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce1e:	3301      	adds	r3, #1
   8ce20:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce24:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce28:	2b27      	cmp	r3, #39	; 0x27
   8ce2a:	d9de      	bls.n	8cdea <nvram_read+0x382>
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
			ps_1[i].millivolt = ps_1_1[i].millivolt;
		}
		for (i=0;i<40;i++)
   8ce2c:	2300      	movs	r3, #0
   8ce2e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ce32:	e036      	b.n	8cea2 <nvram_read+0x43a>
		{
			ps_2[i].pressure = ps_1[i].pressure;
   8ce34:	4aa1      	ldr	r2, [pc, #644]	; (8d0bc <nvram_read+0x654>)
   8ce36:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce3a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce3e:	b219      	sxth	r1, r3
   8ce40:	4a9f      	ldr	r2, [pc, #636]	; (8d0c0 <nvram_read+0x658>)
   8ce42:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_2[i].millivolt = ps_1[i].millivolt;
   8ce4a:	4a9c      	ldr	r2, [pc, #624]	; (8d0bc <nvram_read+0x654>)
   8ce4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce50:	009b      	lsls	r3, r3, #2
   8ce52:	4413      	add	r3, r2
   8ce54:	885b      	ldrh	r3, [r3, #2]
   8ce56:	b219      	sxth	r1, r3
   8ce58:	4a99      	ldr	r2, [pc, #612]	; (8d0c0 <nvram_read+0x658>)
   8ce5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce5e:	009b      	lsls	r3, r3, #2
   8ce60:	4413      	add	r3, r2
   8ce62:	460a      	mov	r2, r1
   8ce64:	805a      	strh	r2, [r3, #2]
			ps_3[i].pressure = ps_1[i].pressure;
   8ce66:	4a95      	ldr	r2, [pc, #596]	; (8d0bc <nvram_read+0x654>)
   8ce68:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce6c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8ce70:	b219      	sxth	r1, r3
   8ce72:	4a94      	ldr	r2, [pc, #592]	; (8d0c4 <nvram_read+0x65c>)
   8ce74:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce78:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			ps_3[i].millivolt = ps_1[i].millivolt;
   8ce7c:	4a8f      	ldr	r2, [pc, #572]	; (8d0bc <nvram_read+0x654>)
   8ce7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce82:	009b      	lsls	r3, r3, #2
   8ce84:	4413      	add	r3, r2
   8ce86:	885b      	ldrh	r3, [r3, #2]
   8ce88:	b219      	sxth	r1, r3
   8ce8a:	4a8e      	ldr	r2, [pc, #568]	; (8d0c4 <nvram_read+0x65c>)
   8ce8c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce90:	009b      	lsls	r3, r3, #2
   8ce92:	4413      	add	r3, r2
   8ce94:	460a      	mov	r2, r1
   8ce96:	805a      	strh	r2, [r3, #2]
		for (i=0;i<40;i++)
		{
			ps_1[i].pressure = ps_1_1[i].pressure;
			ps_1[i].millivolt = ps_1_1[i].millivolt;
		}
		for (i=0;i<40;i++)
   8ce98:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ce9c:	3301      	adds	r3, #1
   8ce9e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cea2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cea6:	2b27      	cmp	r3, #39	; 0x27
   8cea8:	d9c4      	bls.n	8ce34 <nvram_read+0x3cc>
			ps_2[i].millivolt = ps_1[i].millivolt;
			ps_3[i].pressure = ps_1[i].pressure;
			ps_3[i].millivolt = ps_1[i].millivolt;
			
		}
		for (i=0;i<40;i++)
   8ceaa:	2300      	movs	r3, #0
   8ceac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ceb0:	e01d      	b.n	8ceee <nvram_read+0x486>
		{
			checksum = checksum+ps_1[i].pressure;
   8ceb2:	4a82      	ldr	r2, [pc, #520]	; (8d0bc <nvram_read+0x654>)
   8ceb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ceb8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cebc:	b21b      	sxth	r3, r3
   8cebe:	461a      	mov	r2, r3
   8cec0:	4b81      	ldr	r3, [pc, #516]	; (8d0c8 <nvram_read+0x660>)
   8cec2:	681b      	ldr	r3, [r3, #0]
   8cec4:	4413      	add	r3, r2
   8cec6:	4a80      	ldr	r2, [pc, #512]	; (8d0c8 <nvram_read+0x660>)
   8cec8:	6013      	str	r3, [r2, #0]
			checksum = checksum+ps_1[i].millivolt;
   8ceca:	4a7c      	ldr	r2, [pc, #496]	; (8d0bc <nvram_read+0x654>)
   8cecc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8ced0:	009b      	lsls	r3, r3, #2
   8ced2:	4413      	add	r3, r2
   8ced4:	885b      	ldrh	r3, [r3, #2]
   8ced6:	b21b      	sxth	r3, r3
   8ced8:	461a      	mov	r2, r3
   8ceda:	4b7b      	ldr	r3, [pc, #492]	; (8d0c8 <nvram_read+0x660>)
   8cedc:	681b      	ldr	r3, [r3, #0]
   8cede:	4413      	add	r3, r2
   8cee0:	4a79      	ldr	r2, [pc, #484]	; (8d0c8 <nvram_read+0x660>)
   8cee2:	6013      	str	r3, [r2, #0]
			ps_2[i].millivolt = ps_1[i].millivolt;
			ps_3[i].pressure = ps_1[i].pressure;
			ps_3[i].millivolt = ps_1[i].millivolt;
			
		}
		for (i=0;i<40;i++)
   8cee4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cee8:	3301      	adds	r3, #1
   8ceea:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8ceee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cef2:	2b27      	cmp	r3, #39	; 0x27
   8cef4:	d9dd      	bls.n	8ceb2 <nvram_read+0x44a>
		{
			checksum = checksum+ps_1[i].pressure;
			checksum = checksum+ps_1[i].millivolt;
		}
		checksum_cal(checksum);
   8cef6:	4b74      	ldr	r3, [pc, #464]	; (8d0c8 <nvram_read+0x660>)
   8cef8:	681b      	ldr	r3, [r3, #0]
   8cefa:	4618      	mov	r0, r3
   8cefc:	4b73      	ldr	r3, [pc, #460]	; (8d0cc <nvram_read+0x664>)
   8cefe:	4798      	blx	r3
		checksum=0;
   8cf00:	4b71      	ldr	r3, [pc, #452]	; (8d0c8 <nvram_read+0x660>)
   8cf02:	2200      	movs	r2, #0
   8cf04:	601a      	str	r2, [r3, #0]
		break;
   8cf06:	e1df      	b.n	8d2c8 <nvram_read+0x860>
		case CAL_APT:
		for (i=0;i<size_var/2;i++)
   8cf08:	2300      	movs	r3, #0
   8cf0a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf0e:	e01f      	b.n	8cf50 <nvram_read+0x4e8>
		{
			apt1_1[i].pressure = data_received[i*2];
   8cf10:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf14:	005a      	lsls	r2, r3, #1
   8cf16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cf1a:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cf1e:	4a6c      	ldr	r2, [pc, #432]	; (8d0d0 <nvram_read+0x668>)
   8cf20:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf24:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			apt1_1[i].millivolt = data_received[(i*2)+1];
   8cf28:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf2c:	005b      	lsls	r3, r3, #1
   8cf2e:	1c5a      	adds	r2, r3, #1
   8cf30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8cf34:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8cf38:	4a65      	ldr	r2, [pc, #404]	; (8d0d0 <nvram_read+0x668>)
   8cf3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf3e:	009b      	lsls	r3, r3, #2
   8cf40:	4413      	add	r3, r2
   8cf42:	460a      	mov	r2, r1
   8cf44:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_APT:
		for (i=0;i<size_var/2;i++)
   8cf46:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf4a:	3301      	adds	r3, #1
   8cf4c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf50:	4b59      	ldr	r3, [pc, #356]	; (8d0b8 <nvram_read+0x650>)
   8cf52:	681b      	ldr	r3, [r3, #0]
   8cf54:	085a      	lsrs	r2, r3, #1
   8cf56:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf5a:	429a      	cmp	r2, r3
   8cf5c:	d8d8      	bhi.n	8cf10 <nvram_read+0x4a8>
		{
			apt1_1[i].pressure = data_received[i*2];
			apt1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<30;i++)
   8cf5e:	2300      	movs	r3, #0
   8cf60:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cf64:	e01c      	b.n	8cfa0 <nvram_read+0x538>
		{
			apt1[i].pressure = apt1_1[i].pressure;
   8cf66:	4a5a      	ldr	r2, [pc, #360]	; (8d0d0 <nvram_read+0x668>)
   8cf68:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf6c:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
   8cf70:	4a58      	ldr	r2, [pc, #352]	; (8d0d4 <nvram_read+0x66c>)
   8cf72:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf76:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			apt1[i].millivolt = apt1_1[i].millivolt;
   8cf7a:	4a55      	ldr	r2, [pc, #340]	; (8d0d0 <nvram_read+0x668>)
   8cf7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf80:	009b      	lsls	r3, r3, #2
   8cf82:	4413      	add	r3, r2
   8cf84:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   8cf88:	4a52      	ldr	r2, [pc, #328]	; (8d0d4 <nvram_read+0x66c>)
   8cf8a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf8e:	009b      	lsls	r3, r3, #2
   8cf90:	4413      	add	r3, r2
   8cf92:	460a      	mov	r2, r1
   8cf94:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			apt1_1[i].pressure = data_received[i*2];
			apt1_1[i].millivolt = data_received[(i*2)+1];
		}
		for (i=0;i<30;i++)
   8cf96:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cf9a:	3301      	adds	r3, #1
   8cf9c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfa0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfa4:	2b1d      	cmp	r3, #29
   8cfa6:	d9de      	bls.n	8cf66 <nvram_read+0x4fe>
		{
			apt1[i].pressure = apt1_1[i].pressure;
			apt1[i].millivolt = apt1_1[i].millivolt;
		}
		for (i=0;i<30;i++)
   8cfa8:	2300      	movs	r3, #0
   8cfaa:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfae:	e01d      	b.n	8cfec <nvram_read+0x584>
		{
			vpt1[i].pressure = apt1[i].pressure;
   8cfb0:	4a48      	ldr	r2, [pc, #288]	; (8d0d4 <nvram_read+0x66c>)
   8cfb2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfb6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8cfba:	b219      	sxth	r1, r3
   8cfbc:	4a46      	ldr	r2, [pc, #280]	; (8d0d8 <nvram_read+0x670>)
   8cfbe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfc2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			vpt1[i].millivolt = apt1[i].millivolt;
   8cfc6:	4a43      	ldr	r2, [pc, #268]	; (8d0d4 <nvram_read+0x66c>)
   8cfc8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfcc:	009b      	lsls	r3, r3, #2
   8cfce:	4413      	add	r3, r2
   8cfd0:	885b      	ldrh	r3, [r3, #2]
   8cfd2:	b219      	sxth	r1, r3
   8cfd4:	4a40      	ldr	r2, [pc, #256]	; (8d0d8 <nvram_read+0x670>)
   8cfd6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfda:	009b      	lsls	r3, r3, #2
   8cfdc:	4413      	add	r3, r2
   8cfde:	460a      	mov	r2, r1
   8cfe0:	805a      	strh	r2, [r3, #2]
		for (i=0;i<30;i++)
		{
			apt1[i].pressure = apt1_1[i].pressure;
			apt1[i].millivolt = apt1_1[i].millivolt;
		}
		for (i=0;i<30;i++)
   8cfe2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cfe6:	3301      	adds	r3, #1
   8cfe8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cfec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8cff0:	2b1d      	cmp	r3, #29
   8cff2:	d9dd      	bls.n	8cfb0 <nvram_read+0x548>
		{
			vpt1[i].pressure = apt1[i].pressure;
			vpt1[i].millivolt = apt1[i].millivolt;
		}
		for (i=0;i<20;i++)
   8cff4:	2300      	movs	r3, #0
   8cff6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8cffa:	e01d      	b.n	8d038 <nvram_read+0x5d0>
		{
			checksum = checksum+apt1[i].pressure;
   8cffc:	4a35      	ldr	r2, [pc, #212]	; (8d0d4 <nvram_read+0x66c>)
   8cffe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d002:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d006:	b21b      	sxth	r3, r3
   8d008:	461a      	mov	r2, r3
   8d00a:	4b2f      	ldr	r3, [pc, #188]	; (8d0c8 <nvram_read+0x660>)
   8d00c:	681b      	ldr	r3, [r3, #0]
   8d00e:	4413      	add	r3, r2
   8d010:	4a2d      	ldr	r2, [pc, #180]	; (8d0c8 <nvram_read+0x660>)
   8d012:	6013      	str	r3, [r2, #0]
			checksum = checksum+apt1[i].millivolt;
   8d014:	4a2f      	ldr	r2, [pc, #188]	; (8d0d4 <nvram_read+0x66c>)
   8d016:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d01a:	009b      	lsls	r3, r3, #2
   8d01c:	4413      	add	r3, r2
   8d01e:	885b      	ldrh	r3, [r3, #2]
   8d020:	b21b      	sxth	r3, r3
   8d022:	461a      	mov	r2, r3
   8d024:	4b28      	ldr	r3, [pc, #160]	; (8d0c8 <nvram_read+0x660>)
   8d026:	681b      	ldr	r3, [r3, #0]
   8d028:	4413      	add	r3, r2
   8d02a:	4a27      	ldr	r2, [pc, #156]	; (8d0c8 <nvram_read+0x660>)
   8d02c:	6013      	str	r3, [r2, #0]
		for (i=0;i<30;i++)
		{
			vpt1[i].pressure = apt1[i].pressure;
			vpt1[i].millivolt = apt1[i].millivolt;
		}
		for (i=0;i<20;i++)
   8d02e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d032:	3301      	adds	r3, #1
   8d034:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d038:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d03c:	2b13      	cmp	r3, #19
   8d03e:	d9dd      	bls.n	8cffc <nvram_read+0x594>
		{
			checksum = checksum+apt1[i].pressure;
			checksum = checksum+apt1[i].millivolt;
		}
		checksum_cal(checksum);
   8d040:	4b21      	ldr	r3, [pc, #132]	; (8d0c8 <nvram_read+0x660>)
   8d042:	681b      	ldr	r3, [r3, #0]
   8d044:	4618      	mov	r0, r3
   8d046:	4b21      	ldr	r3, [pc, #132]	; (8d0cc <nvram_read+0x664>)
   8d048:	4798      	blx	r3
		checksum=0;
   8d04a:	4b1f      	ldr	r3, [pc, #124]	; (8d0c8 <nvram_read+0x660>)
   8d04c:	2200      	movs	r2, #0
   8d04e:	601a      	str	r2, [r3, #0]
		break;
   8d050:	e13a      	b.n	8d2c8 <nvram_read+0x860>
		case CAL_COND:
		for (i=0;i<size_var/2;i++)
   8d052:	2300      	movs	r3, #0
   8d054:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d058:	e021      	b.n	8d09e <nvram_read+0x636>
		{
			cond_1[i].volts = data_received[i*2];
   8d05a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d05e:	005a      	lsls	r2, r3, #1
   8d060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d064:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d068:	b299      	uxth	r1, r3
   8d06a:	4a1c      	ldr	r2, [pc, #112]	; (8d0dc <nvram_read+0x674>)
   8d06c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d070:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			cond_1[i].conductivity = data_received[(i*2)+1];
   8d074:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d078:	005b      	lsls	r3, r3, #1
   8d07a:	1c5a      	adds	r2, r3, #1
   8d07c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d080:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d084:	b299      	uxth	r1, r3
   8d086:	4a15      	ldr	r2, [pc, #84]	; (8d0dc <nvram_read+0x674>)
   8d088:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d08c:	009b      	lsls	r3, r3, #2
   8d08e:	4413      	add	r3, r2
   8d090:	460a      	mov	r2, r1
   8d092:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_COND:
		for (i=0;i<size_var/2;i++)
   8d094:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d098:	3301      	adds	r3, #1
   8d09a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d09e:	4b06      	ldr	r3, [pc, #24]	; (8d0b8 <nvram_read+0x650>)
   8d0a0:	681b      	ldr	r3, [r3, #0]
   8d0a2:	085a      	lsrs	r2, r3, #1
   8d0a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0a8:	429a      	cmp	r2, r3
   8d0aa:	d8d6      	bhi.n	8d05a <nvram_read+0x5f2>
		{
			cond_1[i].volts = data_received[i*2];
			cond_1[i].conductivity = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d0ac:	2300      	movs	r3, #0
   8d0ae:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d0b2:	e031      	b.n	8d118 <nvram_read+0x6b0>
   8d0b4:	20072370 	.word	0x20072370
   8d0b8:	2007217c 	.word	0x2007217c
   8d0bc:	20071ce8 	.word	0x20071ce8
   8d0c0:	20071db0 	.word	0x20071db0
   8d0c4:	20071e78 	.word	0x20071e78
   8d0c8:	20072180 	.word	0x20072180
   8d0cc:	0008d2f5 	.word	0x0008d2f5
   8d0d0:	20072410 	.word	0x20072410
   8d0d4:	20071bf8 	.word	0x20071bf8
   8d0d8:	20071c70 	.word	0x20071c70
   8d0dc:	20072488 	.word	0x20072488
		{
			cond[i].volts = cond_1[i].volts;
   8d0e0:	4a7c      	ldr	r2, [pc, #496]	; (8d2d4 <nvram_read+0x86c>)
   8d0e2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d0ea:	4a7b      	ldr	r2, [pc, #492]	; (8d2d8 <nvram_read+0x870>)
   8d0ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0f0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			cond[i].conductivity = cond_1[i].conductivity;
   8d0f4:	4a77      	ldr	r2, [pc, #476]	; (8d2d4 <nvram_read+0x86c>)
   8d0f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d0fa:	009b      	lsls	r3, r3, #2
   8d0fc:	4413      	add	r3, r2
   8d0fe:	8859      	ldrh	r1, [r3, #2]
   8d100:	4a75      	ldr	r2, [pc, #468]	; (8d2d8 <nvram_read+0x870>)
   8d102:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d106:	009b      	lsls	r3, r3, #2
   8d108:	4413      	add	r3, r2
   8d10a:	460a      	mov	r2, r1
   8d10c:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			cond_1[i].volts = data_received[i*2];
			cond_1[i].conductivity = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d10e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d112:	3301      	adds	r3, #1
   8d114:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d118:	4b70      	ldr	r3, [pc, #448]	; (8d2dc <nvram_read+0x874>)
   8d11a:	681b      	ldr	r3, [r3, #0]
   8d11c:	085a      	lsrs	r2, r3, #1
   8d11e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d122:	429a      	cmp	r2, r3
   8d124:	d8dc      	bhi.n	8d0e0 <nvram_read+0x678>
		{
			cond[i].volts = cond_1[i].volts;
			cond[i].conductivity = cond_1[i].conductivity;
		}
		for (i=0;i<50;i++)
   8d126:	2300      	movs	r3, #0
   8d128:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d12c:	e01d      	b.n	8d16a <nvram_read+0x702>
		{
			checksum = checksum + cond[i].volts;
   8d12e:	4a6a      	ldr	r2, [pc, #424]	; (8d2d8 <nvram_read+0x870>)
   8d130:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d134:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d138:	b29b      	uxth	r3, r3
   8d13a:	461a      	mov	r2, r3
   8d13c:	4b68      	ldr	r3, [pc, #416]	; (8d2e0 <nvram_read+0x878>)
   8d13e:	681b      	ldr	r3, [r3, #0]
   8d140:	4413      	add	r3, r2
   8d142:	4a67      	ldr	r2, [pc, #412]	; (8d2e0 <nvram_read+0x878>)
   8d144:	6013      	str	r3, [r2, #0]
			checksum = checksum + cond[i].conductivity;
   8d146:	4a64      	ldr	r2, [pc, #400]	; (8d2d8 <nvram_read+0x870>)
   8d148:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d14c:	009b      	lsls	r3, r3, #2
   8d14e:	4413      	add	r3, r2
   8d150:	885b      	ldrh	r3, [r3, #2]
   8d152:	b29b      	uxth	r3, r3
   8d154:	461a      	mov	r2, r3
   8d156:	4b62      	ldr	r3, [pc, #392]	; (8d2e0 <nvram_read+0x878>)
   8d158:	681b      	ldr	r3, [r3, #0]
   8d15a:	4413      	add	r3, r2
   8d15c:	4a60      	ldr	r2, [pc, #384]	; (8d2e0 <nvram_read+0x878>)
   8d15e:	6013      	str	r3, [r2, #0]
		for (i=0;i<size_var/2;i++)
		{
			cond[i].volts = cond_1[i].volts;
			cond[i].conductivity = cond_1[i].conductivity;
		}
		for (i=0;i<50;i++)
   8d160:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d164:	3301      	adds	r3, #1
   8d166:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d16a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d16e:	2b31      	cmp	r3, #49	; 0x31
   8d170:	d9dd      	bls.n	8d12e <nvram_read+0x6c6>
		{
			checksum = checksum + cond[i].volts;
			checksum = checksum + cond[i].conductivity;
		}
		checksum_cal(checksum);
   8d172:	4b5b      	ldr	r3, [pc, #364]	; (8d2e0 <nvram_read+0x878>)
   8d174:	681b      	ldr	r3, [r3, #0]
   8d176:	4618      	mov	r0, r3
   8d178:	4b5a      	ldr	r3, [pc, #360]	; (8d2e4 <nvram_read+0x87c>)
   8d17a:	4798      	blx	r3
		checksum=0;
   8d17c:	4b58      	ldr	r3, [pc, #352]	; (8d2e0 <nvram_read+0x878>)
   8d17e:	2200      	movs	r2, #0
   8d180:	601a      	str	r2, [r3, #0]
		break;
   8d182:	e0a1      	b.n	8d2c8 <nvram_read+0x860>
		case CAL_HEP:
		for (i=0;i<size_var/2;i++)
   8d184:	2300      	movs	r3, #0
   8d186:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d18a:	e021      	b.n	8d1d0 <nvram_read+0x768>
		{
			hp_1[i].ml = data_received[i*2];
   8d18c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d190:	005a      	lsls	r2, r3, #1
   8d192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d196:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d19a:	b299      	uxth	r1, r3
   8d19c:	4a52      	ldr	r2, [pc, #328]	; (8d2e8 <nvram_read+0x880>)
   8d19e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1a2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			hp_1[i].speed = data_received[(i*2)+1];
   8d1a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1aa:	005b      	lsls	r3, r3, #1
   8d1ac:	1c5a      	adds	r2, r3, #1
   8d1ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d1b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d1b6:	b299      	uxth	r1, r3
   8d1b8:	4a4b      	ldr	r2, [pc, #300]	; (8d2e8 <nvram_read+0x880>)
   8d1ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1be:	009b      	lsls	r3, r3, #2
   8d1c0:	4413      	add	r3, r2
   8d1c2:	460a      	mov	r2, r1
   8d1c4:	805a      	strh	r2, [r3, #2]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_HEP:
		for (i=0;i<size_var/2;i++)
   8d1c6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1ca:	3301      	adds	r3, #1
   8d1cc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1d0:	4b42      	ldr	r3, [pc, #264]	; (8d2dc <nvram_read+0x874>)
   8d1d2:	681b      	ldr	r3, [r3, #0]
   8d1d4:	085a      	lsrs	r2, r3, #1
   8d1d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1da:	429a      	cmp	r2, r3
   8d1dc:	d8d6      	bhi.n	8d18c <nvram_read+0x724>
		{
			hp_1[i].ml = data_received[i*2];
			hp_1[i].speed = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d1de:	2300      	movs	r3, #0
   8d1e0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d1e4:	e01b      	b.n	8d21e <nvram_read+0x7b6>
		{
			hp[i].ml = hp_1[i].ml;
   8d1e6:	4a40      	ldr	r2, [pc, #256]	; (8d2e8 <nvram_read+0x880>)
   8d1e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1ec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   8d1f0:	4a3e      	ldr	r2, [pc, #248]	; (8d2ec <nvram_read+0x884>)
   8d1f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d1f6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			hp[i].speed = hp_1[i].speed;
   8d1fa:	4a3b      	ldr	r2, [pc, #236]	; (8d2e8 <nvram_read+0x880>)
   8d1fc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d200:	009b      	lsls	r3, r3, #2
   8d202:	4413      	add	r3, r2
   8d204:	8859      	ldrh	r1, [r3, #2]
   8d206:	4a39      	ldr	r2, [pc, #228]	; (8d2ec <nvram_read+0x884>)
   8d208:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d20c:	009b      	lsls	r3, r3, #2
   8d20e:	4413      	add	r3, r2
   8d210:	460a      	mov	r2, r1
   8d212:	805a      	strh	r2, [r3, #2]
		for (i=0;i<size_var/2;i++)
		{
			hp_1[i].ml = data_received[i*2];
			hp_1[i].speed = data_received[(i*2)+1];
		}
		for (i=0;i<size_var/2;i++)
   8d214:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d218:	3301      	adds	r3, #1
   8d21a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d21e:	4b2f      	ldr	r3, [pc, #188]	; (8d2dc <nvram_read+0x874>)
   8d220:	681b      	ldr	r3, [r3, #0]
   8d222:	085a      	lsrs	r2, r3, #1
   8d224:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d228:	429a      	cmp	r2, r3
   8d22a:	d8dc      	bhi.n	8d1e6 <nvram_read+0x77e>
		{
			hp[i].ml = hp_1[i].ml;
			hp[i].speed = hp_1[i].speed;
		}
		for (i=0;i<20;i++)
   8d22c:	2300      	movs	r3, #0
   8d22e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d232:	e01d      	b.n	8d270 <nvram_read+0x808>
		{
			checksum = checksum + hp[i].ml;
   8d234:	4a2d      	ldr	r2, [pc, #180]	; (8d2ec <nvram_read+0x884>)
   8d236:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d23a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8d23e:	b29b      	uxth	r3, r3
   8d240:	461a      	mov	r2, r3
   8d242:	4b27      	ldr	r3, [pc, #156]	; (8d2e0 <nvram_read+0x878>)
   8d244:	681b      	ldr	r3, [r3, #0]
   8d246:	4413      	add	r3, r2
   8d248:	4a25      	ldr	r2, [pc, #148]	; (8d2e0 <nvram_read+0x878>)
   8d24a:	6013      	str	r3, [r2, #0]
			checksum = checksum + hp[i].speed;
   8d24c:	4a27      	ldr	r2, [pc, #156]	; (8d2ec <nvram_read+0x884>)
   8d24e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d252:	009b      	lsls	r3, r3, #2
   8d254:	4413      	add	r3, r2
   8d256:	885b      	ldrh	r3, [r3, #2]
   8d258:	b29b      	uxth	r3, r3
   8d25a:	461a      	mov	r2, r3
   8d25c:	4b20      	ldr	r3, [pc, #128]	; (8d2e0 <nvram_read+0x878>)
   8d25e:	681b      	ldr	r3, [r3, #0]
   8d260:	4413      	add	r3, r2
   8d262:	4a1f      	ldr	r2, [pc, #124]	; (8d2e0 <nvram_read+0x878>)
   8d264:	6013      	str	r3, [r2, #0]
		for (i=0;i<size_var/2;i++)
		{
			hp[i].ml = hp_1[i].ml;
			hp[i].speed = hp_1[i].speed;
		}
		for (i=0;i<20;i++)
   8d266:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d26a:	3301      	adds	r3, #1
   8d26c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d270:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d274:	2b13      	cmp	r3, #19
   8d276:	d9dd      	bls.n	8d234 <nvram_read+0x7cc>
		{
			checksum = checksum + hp[i].ml;
			checksum = checksum + hp[i].speed;
		}
		checksum_cal(checksum);
   8d278:	4b19      	ldr	r3, [pc, #100]	; (8d2e0 <nvram_read+0x878>)
   8d27a:	681b      	ldr	r3, [r3, #0]
   8d27c:	4618      	mov	r0, r3
   8d27e:	4b19      	ldr	r3, [pc, #100]	; (8d2e4 <nvram_read+0x87c>)
   8d280:	4798      	blx	r3
		checksum=0;
   8d282:	4b17      	ldr	r3, [pc, #92]	; (8d2e0 <nvram_read+0x878>)
   8d284:	2200      	movs	r2, #0
   8d286:	601a      	str	r2, [r3, #0]
		break;
   8d288:	e01e      	b.n	8d2c8 <nvram_read+0x860>
		case CAL_CHECKSUM:
		for (i=0;i<size_var/2;i++)
   8d28a:	2300      	movs	r3, #0
   8d28c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d290:	e011      	b.n	8d2b6 <nvram_read+0x84e>
		{
			checksum_all[i] = data_received[i];
   8d292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d296:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
   8d29a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
   8d29e:	b2d9      	uxtb	r1, r3
   8d2a0:	4a13      	ldr	r2, [pc, #76]	; (8d2f0 <nvram_read+0x888>)
   8d2a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2a6:	4413      	add	r3, r2
   8d2a8:	460a      	mov	r2, r1
   8d2aa:	701a      	strb	r2, [r3, #0]
		}
		checksum_cal(checksum);
		checksum=0;
		break;
		case CAL_CHECKSUM:
		for (i=0;i<size_var/2;i++)
   8d2ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2b0:	3301      	adds	r3, #1
   8d2b2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
   8d2b6:	4b09      	ldr	r3, [pc, #36]	; (8d2dc <nvram_read+0x874>)
   8d2b8:	681b      	ldr	r3, [r3, #0]
   8d2ba:	085a      	lsrs	r2, r3, #1
   8d2bc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
   8d2c0:	429a      	cmp	r2, r3
   8d2c2:	d8e6      	bhi.n	8d292 <nvram_read+0x82a>
		{
			checksum_all[i] = data_received[i];
		}
		break;
   8d2c4:	e000      	b.n	8d2c8 <nvram_read+0x860>
		default:
		break;
   8d2c6:	bf00      	nop
	}
	
}
   8d2c8:	bf00      	nop
   8d2ca:	f507 7754 	add.w	r7, r7, #848	; 0x350
   8d2ce:	46bd      	mov	sp, r7
   8d2d0:	bd80      	pop	{r7, pc}
   8d2d2:	bf00      	nop
   8d2d4:	20072488 	.word	0x20072488
   8d2d8:	20072008 	.word	0x20072008
   8d2dc:	2007217c 	.word	0x2007217c
   8d2e0:	20072180 	.word	0x20072180
   8d2e4:	0008d2f5 	.word	0x0008d2f5
   8d2e8:	20072528 	.word	0x20072528
   8d2ec:	20071f40 	.word	0x20071f40
   8d2f0:	20072190 	.word	0x20072190

0008d2f4 <checksum_cal>:

void checksum_cal(uint32_t val)
{
   8d2f4:	b480      	push	{r7}
   8d2f6:	b085      	sub	sp, #20
   8d2f8:	af00      	add	r7, sp, #0
   8d2fa:	6078      	str	r0, [r7, #4]
	static uint8_t i=0;
	uint32_t val1, rem=0;
   8d2fc:	2300      	movs	r3, #0
   8d2fe:	60bb      	str	r3, [r7, #8]
	val1=val;
   8d300:	687b      	ldr	r3, [r7, #4]
   8d302:	60fb      	str	r3, [r7, #12]
	
	while (val1>10)
   8d304:	e01e      	b.n	8d344 <checksum_cal+0x50>
	{
		val1 = val1/10;
   8d306:	68fb      	ldr	r3, [r7, #12]
   8d308:	4a15      	ldr	r2, [pc, #84]	; (8d360 <checksum_cal+0x6c>)
   8d30a:	fba2 2303 	umull	r2, r3, r2, r3
   8d30e:	08db      	lsrs	r3, r3, #3
   8d310:	60fb      	str	r3, [r7, #12]
		rem = val1%10;
   8d312:	68fa      	ldr	r2, [r7, #12]
   8d314:	4b12      	ldr	r3, [pc, #72]	; (8d360 <checksum_cal+0x6c>)
   8d316:	fba3 1302 	umull	r1, r3, r3, r2
   8d31a:	08d9      	lsrs	r1, r3, #3
   8d31c:	460b      	mov	r3, r1
   8d31e:	009b      	lsls	r3, r3, #2
   8d320:	440b      	add	r3, r1
   8d322:	005b      	lsls	r3, r3, #1
   8d324:	1ad3      	subs	r3, r2, r3
   8d326:	60bb      	str	r3, [r7, #8]
		sum[i]=sum[i]+rem;
   8d328:	4b0e      	ldr	r3, [pc, #56]	; (8d364 <checksum_cal+0x70>)
   8d32a:	781b      	ldrb	r3, [r3, #0]
   8d32c:	4619      	mov	r1, r3
   8d32e:	4b0d      	ldr	r3, [pc, #52]	; (8d364 <checksum_cal+0x70>)
   8d330:	781b      	ldrb	r3, [r3, #0]
   8d332:	461a      	mov	r2, r3
   8d334:	4b0c      	ldr	r3, [pc, #48]	; (8d368 <checksum_cal+0x74>)
   8d336:	5c9a      	ldrb	r2, [r3, r2]
   8d338:	68bb      	ldr	r3, [r7, #8]
   8d33a:	b2db      	uxtb	r3, r3
   8d33c:	4413      	add	r3, r2
   8d33e:	b2da      	uxtb	r2, r3
   8d340:	4b09      	ldr	r3, [pc, #36]	; (8d368 <checksum_cal+0x74>)
   8d342:	545a      	strb	r2, [r3, r1]
{
	static uint8_t i=0;
	uint32_t val1, rem=0;
	val1=val;
	
	while (val1>10)
   8d344:	68fb      	ldr	r3, [r7, #12]
   8d346:	2b0a      	cmp	r3, #10
   8d348:	d8dd      	bhi.n	8d306 <checksum_cal+0x12>
	{
		val1 = val1/10;
		rem = val1%10;
		sum[i]=sum[i]+rem;
	}
	i++;
   8d34a:	4b06      	ldr	r3, [pc, #24]	; (8d364 <checksum_cal+0x70>)
   8d34c:	781b      	ldrb	r3, [r3, #0]
   8d34e:	3301      	adds	r3, #1
   8d350:	b2da      	uxtb	r2, r3
   8d352:	4b04      	ldr	r3, [pc, #16]	; (8d364 <checksum_cal+0x70>)
   8d354:	701a      	strb	r2, [r3, #0]
	//printf("%d\n",sum);
}
   8d356:	bf00      	nop
   8d358:	3714      	adds	r7, #20
   8d35a:	46bd      	mov	sp, r7
   8d35c:	bc80      	pop	{r7}
   8d35e:	4770      	bx	lr
   8d360:	cccccccd 	.word	0xcccccccd
   8d364:	200725c8 	.word	0x200725c8
   8d368:	20072184 	.word	0x20072184

0008d36c <Cl_SysStat_System_Status_Query>:
volatile float avgtemp2_dummy=0,avgtemp3_dummy=0,cond_dummy=0;

extern float cl_utilities_CalConductivity(uint16_t ,float);

Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8d36c:	b580      	push	{r7, lr}
   8d36e:	b098      	sub	sp, #96	; 0x60
   8d370:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1, raw_data =0, cal_temp =0;
   8d372:	2300      	movs	r3, #0
   8d374:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   8d378:	2300      	movs	r3, #0
   8d37a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8d37e:	1d3b      	adds	r3, r7, #4
   8d380:	2154      	movs	r1, #84	; 0x54
   8d382:	4618      	mov	r0, r3
   8d384:	4b9b      	ldr	r3, [pc, #620]	; (8d5f4 <Cl_SysStat_System_Status_Query+0x288>)
   8d386:	4798      	blx	r3
   8d388:	4603      	mov	r3, r0
   8d38a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8d38e:	4b9a      	ldr	r3, [pc, #616]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d390:	2201      	movs	r2, #1
   8d392:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8d394:	4b98      	ldr	r3, [pc, #608]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d396:	2201      	movs	r2, #1
   8d398:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8d39a:	1d3b      	adds	r3, r7, #4
   8d39c:	4618      	mov	r0, r3
   8d39e:	4b97      	ldr	r3, [pc, #604]	; (8d5fc <Cl_SysStat_System_Status_Query+0x290>)
   8d3a0:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8d3a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8d3a4:	4b94      	ldr	r3, [pc, #592]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3a6:	869a      	strh	r2, [r3, #52]	; 0x34
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8d3a8:	8bfa      	ldrh	r2, [r7, #30]
   8d3aa:	4b93      	ldr	r3, [pc, #588]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3ac:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8d3ae:	8abb      	ldrh	r3, [r7, #20]
   8d3b0:	2b00      	cmp	r3, #0
   8d3b2:	d007      	beq.n	8d3c4 <Cl_SysStat_System_Status_Query+0x58>
   8d3b4:	8abb      	ldrh	r3, [r7, #20]
   8d3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d3ba:	4293      	cmp	r3, r2
   8d3bc:	d002      	beq.n	8d3c4 <Cl_SysStat_System_Status_Query+0x58>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8d3be:	8aba      	ldrh	r2, [r7, #20]
   8d3c0:	4b8d      	ldr	r3, [pc, #564]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3c2:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8d3c4:	8afb      	ldrh	r3, [r7, #22]
   8d3c6:	2b00      	cmp	r3, #0
   8d3c8:	d007      	beq.n	8d3da <Cl_SysStat_System_Status_Query+0x6e>
   8d3ca:	8afb      	ldrh	r3, [r7, #22]
   8d3cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8d3d0:	4293      	cmp	r3, r2
   8d3d2:	d002      	beq.n	8d3da <Cl_SysStat_System_Status_Query+0x6e>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8d3d4:	8afa      	ldrh	r2, [r7, #22]
   8d3d6:	4b88      	ldr	r3, [pc, #544]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3d8:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8d3da:	8bba      	ldrh	r2, [r7, #28]
   8d3dc:	4b86      	ldr	r3, [pc, #536]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3de:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8d3e0:	89ba      	ldrh	r2, [r7, #12]
   8d3e2:	4b85      	ldr	r3, [pc, #532]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3e4:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8d3e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8d3ea:	4b83      	ldr	r3, [pc, #524]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3ec:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8d3ee:	88fa      	ldrh	r2, [r7, #6]
   8d3f0:	4b81      	ldr	r3, [pc, #516]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3f2:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8d3f4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   8d3f6:	4b80      	ldr	r3, [pc, #512]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3f8:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8d3fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8d3fc:	4b7e      	ldr	r3, [pc, #504]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d3fe:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8d400:	4b7d      	ldr	r3, [pc, #500]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d402:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   8d404:	4b7c      	ldr	r3, [pc, #496]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d406:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8d408:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   8d40a:	4b7b      	ldr	r3, [pc, #492]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d40c:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8d40e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8d410:	4b79      	ldr	r3, [pc, #484]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d412:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8d414:	8c3a      	ldrh	r2, [r7, #32]
   8d416:	4b78      	ldr	r3, [pc, #480]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d418:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8d41a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
   8d41e:	4b76      	ldr	r3, [pc, #472]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d420:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8d422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8d424:	4b74      	ldr	r3, [pc, #464]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d426:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8d428:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8d42c:	2b00      	cmp	r3, #0
   8d42e:	bf14      	ite	ne
   8d430:	2301      	movne	r3, #1
   8d432:	2300      	moveq	r3, #0
   8d434:	b2da      	uxtb	r2, r3
   8d436:	4b70      	ldr	r3, [pc, #448]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8d43c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8d440:	2b00      	cmp	r3, #0
   8d442:	bf14      	ite	ne
   8d444:	2301      	movne	r3, #1
   8d446:	2300      	moveq	r3, #0
   8d448:	b2da      	uxtb	r2, r3
   8d44a:	4b6b      	ldr	r3, [pc, #428]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8d450:	793b      	ldrb	r3, [r7, #4]
   8d452:	2b00      	cmp	r3, #0
   8d454:	bf14      	ite	ne
   8d456:	2301      	movne	r3, #1
   8d458:	2300      	moveq	r3, #0
   8d45a:	b2da      	uxtb	r2, r3
   8d45c:	4b66      	ldr	r3, [pc, #408]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d45e:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8d460:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8d464:	2b00      	cmp	r3, #0
   8d466:	bf14      	ite	ne
   8d468:	2301      	movne	r3, #1
   8d46a:	2300      	moveq	r3, #0
   8d46c:	b2da      	uxtb	r2, r3
   8d46e:	4b62      	ldr	r3, [pc, #392]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8d474:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8d476:	4b60      	ldr	r3, [pc, #384]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d478:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8d47a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8d47c:	4b5e      	ldr	r3, [pc, #376]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d47e:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8d480:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8d482:	4b5d      	ldr	r3, [pc, #372]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d484:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8d486:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
   8d48a:	4b5b      	ldr	r3, [pc, #364]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d48c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8d490:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8d492:	4b59      	ldr	r3, [pc, #356]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d494:	841a      	strh	r2, [r3, #32]
//	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
	raw_data = sv_sys_statbuffer.Temp1status;
   8d496:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8d498:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768); 
   8d49c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8d4a0:	f649 5208 	movw	r2, #40200	; 0x9d08
   8d4a4:	fb02 f303 	mul.w	r3, r2, r3
   8d4a8:	2b00      	cmp	r3, #0
   8d4aa:	da02      	bge.n	8d4b2 <Cl_SysStat_System_Status_Query+0x146>
   8d4ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d4b0:	33ff      	adds	r3, #255	; 0xff
   8d4b2:	141b      	asrs	r3, r3, #16
   8d4b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8d4b8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8d4bc:	4618      	mov	r0, r3
   8d4be:	4b50      	ldr	r3, [pc, #320]	; (8d600 <Cl_SysStat_System_Status_Query+0x294>)
   8d4c0:	4798      	blx	r3
	cl_sys_statbuffer.Temp1status = res_temp_value -80 ;
   8d4c2:	4b50      	ldr	r3, [pc, #320]	; (8d604 <Cl_SysStat_System_Status_Query+0x298>)
   8d4c4:	681a      	ldr	r2, [r3, #0]
   8d4c6:	4b50      	ldr	r3, [pc, #320]	; (8d608 <Cl_SysStat_System_Status_Query+0x29c>)
   8d4c8:	4950      	ldr	r1, [pc, #320]	; (8d60c <Cl_SysStat_System_Status_Query+0x2a0>)
   8d4ca:	4610      	mov	r0, r2
   8d4cc:	4798      	blx	r3
   8d4ce:	4603      	mov	r3, r0
   8d4d0:	461a      	mov	r2, r3
   8d4d2:	4b4f      	ldr	r3, [pc, #316]	; (8d610 <Cl_SysStat_System_Status_Query+0x2a4>)
   8d4d4:	4610      	mov	r0, r2
   8d4d6:	4798      	blx	r3
   8d4d8:	4603      	mov	r3, r0
   8d4da:	b29a      	uxth	r2, r3
   8d4dc:	4b46      	ldr	r3, [pc, #280]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d4de:	851a      	strh	r2, [r3, #40]	; 0x28
				
				
//	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
	raw_data = sv_sys_statbuffer.Temp2status;
   8d4e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8d4e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8d4e6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8d4ea:	f649 5208 	movw	r2, #40200	; 0x9d08
   8d4ee:	fb02 f303 	mul.w	r3, r2, r3
   8d4f2:	2b00      	cmp	r3, #0
   8d4f4:	da02      	bge.n	8d4fc <Cl_SysStat_System_Status_Query+0x190>
   8d4f6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d4fa:	33ff      	adds	r3, #255	; 0xff
   8d4fc:	141b      	asrs	r3, r3, #16
   8d4fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8d502:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8d506:	4618      	mov	r0, r3
   8d508:	4b3d      	ldr	r3, [pc, #244]	; (8d600 <Cl_SysStat_System_Status_Query+0x294>)
   8d50a:	4798      	blx	r3
	cl_sys_statbuffer.Temp2status = res_temp_value +20;
   8d50c:	4b3d      	ldr	r3, [pc, #244]	; (8d604 <Cl_SysStat_System_Status_Query+0x298>)
   8d50e:	681a      	ldr	r2, [r3, #0]
   8d510:	4b40      	ldr	r3, [pc, #256]	; (8d614 <Cl_SysStat_System_Status_Query+0x2a8>)
   8d512:	4941      	ldr	r1, [pc, #260]	; (8d618 <Cl_SysStat_System_Status_Query+0x2ac>)
   8d514:	4610      	mov	r0, r2
   8d516:	4798      	blx	r3
   8d518:	4603      	mov	r3, r0
   8d51a:	461a      	mov	r2, r3
   8d51c:	4b3c      	ldr	r3, [pc, #240]	; (8d610 <Cl_SysStat_System_Status_Query+0x2a4>)
   8d51e:	4610      	mov	r0, r2
   8d520:	4798      	blx	r3
   8d522:	4603      	mov	r3, r0
   8d524:	b29a      	uxth	r2, r3
   8d526:	4b34      	ldr	r3, [pc, #208]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d528:	855a      	strh	r2, [r3, #42]	; 0x2a
	
//	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
	raw_data = sv_sys_statbuffer.Temp3status;
   8d52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8d52c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8d530:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8d534:	f649 5208 	movw	r2, #40200	; 0x9d08
   8d538:	fb02 f303 	mul.w	r3, r2, r3
   8d53c:	2b00      	cmp	r3, #0
   8d53e:	da02      	bge.n	8d546 <Cl_SysStat_System_Status_Query+0x1da>
   8d540:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d544:	33ff      	adds	r3, #255	; 0xff
   8d546:	141b      	asrs	r3, r3, #16
   8d548:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8d54c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8d550:	4618      	mov	r0, r3
   8d552:	4b2b      	ldr	r3, [pc, #172]	; (8d600 <Cl_SysStat_System_Status_Query+0x294>)
   8d554:	4798      	blx	r3
	cl_sys_statbuffer.Temp3status = res_temp_value + 20 ;
   8d556:	4b2b      	ldr	r3, [pc, #172]	; (8d604 <Cl_SysStat_System_Status_Query+0x298>)
   8d558:	681a      	ldr	r2, [r3, #0]
   8d55a:	4b2e      	ldr	r3, [pc, #184]	; (8d614 <Cl_SysStat_System_Status_Query+0x2a8>)
   8d55c:	492e      	ldr	r1, [pc, #184]	; (8d618 <Cl_SysStat_System_Status_Query+0x2ac>)
   8d55e:	4610      	mov	r0, r2
   8d560:	4798      	blx	r3
   8d562:	4603      	mov	r3, r0
   8d564:	461a      	mov	r2, r3
   8d566:	4b2a      	ldr	r3, [pc, #168]	; (8d610 <Cl_SysStat_System_Status_Query+0x2a4>)
   8d568:	4610      	mov	r0, r2
   8d56a:	4798      	blx	r3
   8d56c:	4603      	mov	r3, r0
   8d56e:	b29a      	uxth	r2, r3
   8d570:	4b21      	ldr	r3, [pc, #132]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d572:	859a      	strh	r2, [r3, #44]	; 0x2c
	
//	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
	raw_data = sv_sys_statbuffer.Temp4status;
   8d574:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   8d576:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8d57a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8d57e:	f649 5208 	movw	r2, #40200	; 0x9d08
   8d582:	fb02 f303 	mul.w	r3, r2, r3
   8d586:	2b00      	cmp	r3, #0
   8d588:	da02      	bge.n	8d590 <Cl_SysStat_System_Status_Query+0x224>
   8d58a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8d58e:	33ff      	adds	r3, #255	; 0xff
   8d590:	141b      	asrs	r3, r3, #16
   8d592:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8d596:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8d59a:	4618      	mov	r0, r3
   8d59c:	4b18      	ldr	r3, [pc, #96]	; (8d600 <Cl_SysStat_System_Status_Query+0x294>)
   8d59e:	4798      	blx	r3
	cl_sys_statbuffer.Temp4status = res_temp_value;
   8d5a0:	4b18      	ldr	r3, [pc, #96]	; (8d604 <Cl_SysStat_System_Status_Query+0x298>)
   8d5a2:	681a      	ldr	r2, [r3, #0]
   8d5a4:	4b1a      	ldr	r3, [pc, #104]	; (8d610 <Cl_SysStat_System_Status_Query+0x2a4>)
   8d5a6:	4610      	mov	r0, r2
   8d5a8:	4798      	blx	r3
   8d5aa:	4603      	mov	r3, r0
   8d5ac:	b29a      	uxth	r2, r3
   8d5ae:	4b12      	ldr	r3, [pc, #72]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5b0:	85da      	strh	r2, [r3, #46]	; 0x2e
	
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8d5b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   8d5b4:	4b10      	ldr	r3, [pc, #64]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5b6:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8d5b8:	8a3a      	ldrh	r2, [r7, #16]
   8d5ba:	4b0f      	ldr	r3, [pc, #60]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5bc:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8d5be:	8a7a      	ldrh	r2, [r7, #18]
   8d5c0:	4b0d      	ldr	r3, [pc, #52]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5c2:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8d5c4:	89fa      	ldrh	r2, [r7, #14]
   8d5c6:	4b0c      	ldr	r3, [pc, #48]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5c8:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8d5ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
   8d5ce:	4b0a      	ldr	r3, [pc, #40]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8d5d4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8d5d8:	4b07      	ldr	r3, [pc, #28]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8d5de:	897a      	ldrh	r2, [r7, #10]
   8d5e0:	4b05      	ldr	r3, [pc, #20]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5e2:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8d5e4:	893a      	ldrh	r2, [r7, #8]
   8d5e6:	4b04      	ldr	r3, [pc, #16]	; (8d5f8 <Cl_SysStat_System_Status_Query+0x28c>)
   8d5e8:	809a      	strh	r2, [r3, #4]
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8d5ea:	2300      	movs	r3, #0
}
   8d5ec:	4618      	mov	r0, r3
   8d5ee:	3760      	adds	r7, #96	; 0x60
   8d5f0:	46bd      	mov	sp, r7
   8d5f2:	bd80      	pop	{r7, pc}
   8d5f4:	00091945 	.word	0x00091945
   8d5f8:	20072e18 	.word	0x20072e18
   8d5fc:	00097a1d 	.word	0x00097a1d
   8d600:	0008e531 	.word	0x0008e531
   8d604:	20072624 	.word	0x20072624
   8d608:	000a323d 	.word	0x000a323d
   8d60c:	42a00000 	.word	0x42a00000
   8d610:	000a3829 	.word	0x000a3829
   8d614:	000a3241 	.word	0x000a3241
   8d618:	41a00000 	.word	0x41a00000

0008d61c <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8d61c:	b480      	push	{r7}
   8d61e:	b085      	sub	sp, #20
   8d620:	af00      	add	r7, sp, #0
   8d622:	4603      	mov	r3, r0
   8d624:	6039      	str	r1, [r7, #0]
   8d626:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8d628:	2300      	movs	r3, #0
   8d62a:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8d62c:	79fb      	ldrb	r3, [r7, #7]
   8d62e:	3b01      	subs	r3, #1
   8d630:	2b2f      	cmp	r3, #47	; 0x2f
   8d632:	f200 81dd 	bhi.w	8d9f0 <Cl_SysStat_GetSensor_Status_Query+0x3d4>
   8d636:	a201      	add	r2, pc, #4	; (adr r2, 8d63c <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d63c:	0008d9e3 	.word	0x0008d9e3
   8d640:	0008d9f1 	.word	0x0008d9f1
   8d644:	0008d763 	.word	0x0008d763
   8d648:	0008d773 	.word	0x0008d773
   8d64c:	0008d783 	.word	0x0008d783
   8d650:	0008d7bf 	.word	0x0008d7bf
   8d654:	0008d793 	.word	0x0008d793
   8d658:	0008d7cd 	.word	0x0008d7cd
   8d65c:	0008d7f7 	.word	0x0008d7f7
   8d660:	0008d805 	.word	0x0008d805
   8d664:	0008d813 	.word	0x0008d813
   8d668:	0008d841 	.word	0x0008d841
   8d66c:	0008d86f 	.word	0x0008d86f
   8d670:	0008d87d 	.word	0x0008d87d
   8d674:	0008d8ab 	.word	0x0008d8ab
   8d678:	0008d8d9 	.word	0x0008d8d9
   8d67c:	0008d9f1 	.word	0x0008d9f1
   8d680:	0008d907 	.word	0x0008d907
   8d684:	0008d93d 	.word	0x0008d93d
   8d688:	0008d96b 	.word	0x0008d96b
   8d68c:	0008d7db 	.word	0x0008d7db
   8d690:	0008d9f1 	.word	0x0008d9f1
   8d694:	0008d99d 	.word	0x0008d99d
   8d698:	0008d9ab 	.word	0x0008d9ab
   8d69c:	0008d9d5 	.word	0x0008d9d5
   8d6a0:	0008d7e9 	.word	0x0008d7e9
   8d6a4:	0008d9b9 	.word	0x0008d9b9
   8d6a8:	0008d9c7 	.word	0x0008d9c7
   8d6ac:	0008d739 	.word	0x0008d739
   8d6b0:	0008d747 	.word	0x0008d747
   8d6b4:	0008d755 	.word	0x0008d755
   8d6b8:	0008d719 	.word	0x0008d719
   8d6bc:	0008d729 	.word	0x0008d729
   8d6c0:	0008d6fd 	.word	0x0008d6fd
   8d6c4:	0008d70b 	.word	0x0008d70b
   8d6c8:	0008d9f1 	.word	0x0008d9f1
   8d6cc:	0008d9f1 	.word	0x0008d9f1
   8d6d0:	0008d9f1 	.word	0x0008d9f1
   8d6d4:	0008d9f1 	.word	0x0008d9f1
   8d6d8:	0008d9f1 	.word	0x0008d9f1
   8d6dc:	0008d9f1 	.word	0x0008d9f1
   8d6e0:	0008d9f1 	.word	0x0008d9f1
   8d6e4:	0008d9f1 	.word	0x0008d9f1
   8d6e8:	0008d9f1 	.word	0x0008d9f1
   8d6ec:	0008d9f1 	.word	0x0008d9f1
   8d6f0:	0008d9f1 	.word	0x0008d9f1
   8d6f4:	0008d9f1 	.word	0x0008d9f1
   8d6f8:	0008d98f 	.word	0x0008d98f
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8d6fc:	4b89      	ldr	r3, [pc, #548]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8d700:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d702:	683b      	ldr	r3, [r7, #0]
   8d704:	89fa      	ldrh	r2, [r7, #14]
   8d706:	801a      	strh	r2, [r3, #0]
			break;
   8d708:	e173      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8d70a:	4b86      	ldr	r3, [pc, #536]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d70c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8d70e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d710:	683b      	ldr	r3, [r7, #0]
   8d712:	89fa      	ldrh	r2, [r7, #14]
   8d714:	801a      	strh	r2, [r3, #0]
			break;
   8d716:	e16c      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8d718:	4b82      	ldr	r3, [pc, #520]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8d71e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d720:	683b      	ldr	r3, [r7, #0]
   8d722:	89fa      	ldrh	r2, [r7, #14]
   8d724:	801a      	strh	r2, [r3, #0]
			break;
   8d726:	e164      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8d728:	4b7e      	ldr	r3, [pc, #504]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d72a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8d72e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d730:	683b      	ldr	r3, [r7, #0]
   8d732:	89fa      	ldrh	r2, [r7, #14]
   8d734:	801a      	strh	r2, [r3, #0]
			
			break;
   8d736:	e15c      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8d738:	4b7a      	ldr	r3, [pc, #488]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d73a:	889b      	ldrh	r3, [r3, #4]
   8d73c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d73e:	683b      	ldr	r3, [r7, #0]
   8d740:	89fa      	ldrh	r2, [r7, #14]
   8d742:	801a      	strh	r2, [r3, #0]
			break;
   8d744:	e155      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8d746:	4b77      	ldr	r3, [pc, #476]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d748:	88db      	ldrh	r3, [r3, #6]
   8d74a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d74c:	683b      	ldr	r3, [r7, #0]
   8d74e:	89fa      	ldrh	r2, [r7, #14]
   8d750:	801a      	strh	r2, [r3, #0]
			break;
   8d752:	e14e      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8d754:	4b73      	ldr	r3, [pc, #460]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d756:	891b      	ldrh	r3, [r3, #8]
   8d758:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d75a:	683b      	ldr	r3, [r7, #0]
   8d75c:	89fa      	ldrh	r2, [r7, #14]
   8d75e:	801a      	strh	r2, [r3, #0]
			break;
   8d760:	e147      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8d762:	4b70      	ldr	r3, [pc, #448]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8d768:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d76a:	683b      	ldr	r3, [r7, #0]
   8d76c:	89fa      	ldrh	r2, [r7, #14]
   8d76e:	801a      	strh	r2, [r3, #0]
			break;
   8d770:	e13f      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8d772:	4b6c      	ldr	r3, [pc, #432]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   8d778:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d77a:	683b      	ldr	r3, [r7, #0]
   8d77c:	89fa      	ldrh	r2, [r7, #14]
   8d77e:	801a      	strh	r2, [r3, #0]
			break;
   8d780:	e137      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8d782:	4b68      	ldr	r3, [pc, #416]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d784:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d788:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d78a:	683b      	ldr	r3, [r7, #0]
   8d78c:	89fa      	ldrh	r2, [r7, #14]
   8d78e:	801a      	strh	r2, [r3, #0]
			break;
   8d790:	e12f      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8d792:	4b65      	ldr	r3, [pc, #404]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d794:	7f9b      	ldrb	r3, [r3, #30]
   8d796:	f083 0301 	eor.w	r3, r3, #1
   8d79a:	b2db      	uxtb	r3, r3
   8d79c:	2b00      	cmp	r3, #0
   8d79e:	d006      	beq.n	8d7ae <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8d7a0:	4b60      	ldr	r3, [pc, #384]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8d7a4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d7a6:	683b      	ldr	r3, [r7, #0]
   8d7a8:	89fa      	ldrh	r2, [r7, #14]
   8d7aa:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d7ac:	e121      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8d7ae:	4b5e      	ldr	r3, [pc, #376]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d7b0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
   8d7b4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d7b6:	683b      	ldr	r3, [r7, #0]
   8d7b8:	89fa      	ldrh	r2, [r7, #14]
   8d7ba:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d7bc:	e119      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8d7be:	4b59      	ldr	r3, [pc, #356]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   8d7c2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d7c4:	683b      	ldr	r3, [r7, #0]
   8d7c6:	89fa      	ldrh	r2, [r7, #14]
   8d7c8:	801a      	strh	r2, [r3, #0]
			break;
   8d7ca:	e112      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8d7cc:	4b55      	ldr	r3, [pc, #340]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8d7d0:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d7d2:	683b      	ldr	r3, [r7, #0]
   8d7d4:	89fa      	ldrh	r2, [r7, #14]
   8d7d6:	801a      	strh	r2, [r3, #0]
			break;
   8d7d8:	e10b      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8d7da:	4b52      	ldr	r3, [pc, #328]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7dc:	8b9b      	ldrh	r3, [r3, #28]
   8d7de:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d7e0:	683b      	ldr	r3, [r7, #0]
   8d7e2:	89fa      	ldrh	r2, [r7, #14]
   8d7e4:	801a      	strh	r2, [r3, #0]
			break;
   8d7e6:	e104      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8d7e8:	4b4e      	ldr	r3, [pc, #312]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7ea:	8c1b      	ldrh	r3, [r3, #32]
   8d7ec:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d7ee:	683b      	ldr	r3, [r7, #0]
   8d7f0:	89fa      	ldrh	r2, [r7, #14]
   8d7f2:	801a      	strh	r2, [r3, #0]
			break;
   8d7f4:	e0fd      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8d7f6:	4b4b      	ldr	r3, [pc, #300]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d7f8:	8b1b      	ldrh	r3, [r3, #24]
   8d7fa:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d7fc:	683b      	ldr	r3, [r7, #0]
   8d7fe:	89fa      	ldrh	r2, [r7, #14]
   8d800:	801a      	strh	r2, [r3, #0]
			break;
   8d802:	e0f6      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8d804:	4b47      	ldr	r3, [pc, #284]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d806:	8b5b      	ldrh	r3, [r3, #26]
   8d808:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d80a:	683b      	ldr	r3, [r7, #0]
   8d80c:	89fa      	ldrh	r2, [r7, #14]
   8d80e:	801a      	strh	r2, [r3, #0]
			break;
   8d810:	e0ef      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8d812:	4b45      	ldr	r3, [pc, #276]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d814:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8d818:	f083 0301 	eor.w	r3, r3, #1
   8d81c:	b2db      	uxtb	r3, r3
   8d81e:	2b00      	cmp	r3, #0
   8d820:	d006      	beq.n	8d830 <Cl_SysStat_GetSensor_Status_Query+0x214>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8d822:	4b40      	ldr	r3, [pc, #256]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d824:	8a1b      	ldrh	r3, [r3, #16]
   8d826:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d828:	683b      	ldr	r3, [r7, #0]
   8d82a:	89fa      	ldrh	r2, [r7, #14]
   8d82c:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8d82e:	e0e0      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8d830:	4b3d      	ldr	r3, [pc, #244]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d832:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
   8d836:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d838:	683b      	ldr	r3, [r7, #0]
   8d83a:	89fa      	ldrh	r2, [r7, #14]
   8d83c:	801a      	strh	r2, [r3, #0]
			}

			break;
   8d83e:	e0d8      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8d840:	4b39      	ldr	r3, [pc, #228]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d842:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8d846:	f083 0301 	eor.w	r3, r3, #1
   8d84a:	b2db      	uxtb	r3, r3
   8d84c:	2b00      	cmp	r3, #0
   8d84e:	d006      	beq.n	8d85e <Cl_SysStat_GetSensor_Status_Query+0x242>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8d850:	4b34      	ldr	r3, [pc, #208]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d852:	8a5b      	ldrh	r3, [r3, #18]
   8d854:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d856:	683b      	ldr	r3, [r7, #0]
   8d858:	89fa      	ldrh	r2, [r7, #14]
   8d85a:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d85c:	e0c9      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8d85e:	4b32      	ldr	r3, [pc, #200]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   8d864:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d866:	683b      	ldr	r3, [r7, #0]
   8d868:	89fa      	ldrh	r2, [r7, #14]
   8d86a:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d86c:	e0c1      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8d86e:	4b2d      	ldr	r3, [pc, #180]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8d872:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8d874:	683b      	ldr	r3, [r7, #0]
   8d876:	89fa      	ldrh	r2, [r7, #14]
   8d878:	801a      	strh	r2, [r3, #0]
			break;
   8d87a:	e0ba      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8d87c:	4b2a      	ldr	r3, [pc, #168]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d87e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8d882:	f083 0301 	eor.w	r3, r3, #1
   8d886:	b2db      	uxtb	r3, r3
   8d888:	2b00      	cmp	r3, #0
   8d88a:	d006      	beq.n	8d89a <Cl_SysStat_GetSensor_Status_Query+0x27e>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8d88c:	4b25      	ldr	r3, [pc, #148]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d88e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8d890:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d892:	683b      	ldr	r3, [r7, #0]
   8d894:	89fa      	ldrh	r2, [r7, #14]
   8d896:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8d898:	e0ab      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8d89a:	4b23      	ldr	r3, [pc, #140]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d89c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
   8d8a0:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d8a2:	683b      	ldr	r3, [r7, #0]
   8d8a4:	89fa      	ldrh	r2, [r7, #14]
   8d8a6:	801a      	strh	r2, [r3, #0]
					}
			break;
   8d8a8:	e0a3      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8d8aa:	4b1f      	ldr	r3, [pc, #124]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8d8b0:	f083 0301 	eor.w	r3, r3, #1
   8d8b4:	b2db      	uxtb	r3, r3
   8d8b6:	2b00      	cmp	r3, #0
   8d8b8:	d006      	beq.n	8d8c8 <Cl_SysStat_GetSensor_Status_Query+0x2ac>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8d8ba:	4b1a      	ldr	r3, [pc, #104]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d8bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8d8be:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d8c0:	683b      	ldr	r3, [r7, #0]
   8d8c2:	89fa      	ldrh	r2, [r7, #14]
   8d8c4:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8d8c6:	e094      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8d8c8:	4b17      	ldr	r3, [pc, #92]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
   8d8ce:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8d8d0:	683b      	ldr	r3, [r7, #0]
   8d8d2:	89fa      	ldrh	r2, [r7, #14]
   8d8d4:	801a      	strh	r2, [r3, #0]
					}
			break;
   8d8d6:	e08c      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8d8d8:	4b13      	ldr	r3, [pc, #76]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8d8de:	f083 0301 	eor.w	r3, r3, #1
   8d8e2:	b2db      	uxtb	r3, r3
   8d8e4:	2b00      	cmp	r3, #0
   8d8e6:	d006      	beq.n	8d8f6 <Cl_SysStat_GetSensor_Status_Query+0x2da>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8d8e8:	4b0e      	ldr	r3, [pc, #56]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d8ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8d8ec:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8d8ee:	683b      	ldr	r3, [r7, #0]
   8d8f0:	89fa      	ldrh	r2, [r7, #14]
   8d8f2:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8d8f4:	e07d      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8d8f6:	4b0c      	ldr	r3, [pc, #48]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d8f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
   8d8fc:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8d8fe:	683b      	ldr	r3, [r7, #0]
   8d900:	89fa      	ldrh	r2, [r7, #14]
   8d902:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8d904:	e075      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8d906:	4b08      	ldr	r3, [pc, #32]	; (8d928 <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8d908:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8d90c:	f083 0301 	eor.w	r3, r3, #1
   8d910:	b2db      	uxtb	r3, r3
   8d912:	2b00      	cmp	r3, #0
   8d914:	d00a      	beq.n	8d92c <Cl_SysStat_GetSensor_Status_Query+0x310>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8d916:	4b03      	ldr	r3, [pc, #12]	; (8d924 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8d918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8d91a:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d91c:	683b      	ldr	r3, [r7, #0]
   8d91e:	89fa      	ldrh	r2, [r7, #14]
   8d920:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8d922:	e066      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
   8d924:	20072e18 	.word	0x20072e18
   8d928:	200730fc 	.word	0x200730fc
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8d92c:	4b34      	ldr	r3, [pc, #208]	; (8da00 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d92e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
   8d932:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8d934:	683b      	ldr	r3, [r7, #0]
   8d936:	89fa      	ldrh	r2, [r7, #14]
   8d938:	801a      	strh	r2, [r3, #0]
						}


			break;
   8d93a:	e05a      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8d93c:	4b30      	ldr	r3, [pc, #192]	; (8da00 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d93e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8d942:	f083 0301 	eor.w	r3, r3, #1
   8d946:	b2db      	uxtb	r3, r3
   8d948:	2b00      	cmp	r3, #0
   8d94a:	d006      	beq.n	8d95a <Cl_SysStat_GetSensor_Status_Query+0x33e>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8d94c:	4b2d      	ldr	r3, [pc, #180]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d94e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8d950:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d952:	683b      	ldr	r3, [r7, #0]
   8d954:	89fa      	ldrh	r2, [r7, #14]
   8d956:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8d958:	e04b      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8d95a:	4b29      	ldr	r3, [pc, #164]	; (8da00 <Cl_SysStat_GetSensor_Status_Query+0x3e4>)
   8d95c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
   8d960:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d962:	683b      	ldr	r3, [r7, #0]
   8d964:	89fa      	ldrh	r2, [r7, #14]
   8d966:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d968:	e043      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   8d96a:	4b27      	ldr	r3, [pc, #156]	; (8da08 <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8d96c:	781b      	ldrb	r3, [r3, #0]
   8d96e:	2b00      	cmp	r3, #0
   8d970:	d106      	bne.n	8d980 <Cl_SysStat_GetSensor_Status_Query+0x364>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8d972:	4b24      	ldr	r3, [pc, #144]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8d976:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   8d978:	683b      	ldr	r3, [r7, #0]
   8d97a:	89fa      	ldrh	r2, [r7, #14]
   8d97c:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   8d97e:	e038      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   8d980:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8d984:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d986:	683b      	ldr	r3, [r7, #0]
   8d988:	89fa      	ldrh	r2, [r7, #14]
   8d98a:	801a      	strh	r2, [r3, #0]
			}
			break;
   8d98c:	e031      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8d98e:	4b1d      	ldr	r3, [pc, #116]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8d992:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d994:	683b      	ldr	r3, [r7, #0]
   8d996:	89fa      	ldrh	r2, [r7, #14]
   8d998:	801a      	strh	r2, [r3, #0]
			break;
   8d99a:	e02a      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8d99c:	4b19      	ldr	r3, [pc, #100]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d99e:	899b      	ldrh	r3, [r3, #12]
   8d9a0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9a2:	683b      	ldr	r3, [r7, #0]
   8d9a4:	89fa      	ldrh	r2, [r7, #14]
   8d9a6:	801a      	strh	r2, [r3, #0]
			break;
   8d9a8:	e023      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8d9aa:	4b16      	ldr	r3, [pc, #88]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9ac:	89db      	ldrh	r3, [r3, #14]
   8d9ae:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9b0:	683b      	ldr	r3, [r7, #0]
   8d9b2:	89fa      	ldrh	r2, [r7, #14]
   8d9b4:	801a      	strh	r2, [r3, #0]
			break;
   8d9b6:	e01c      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8d9b8:	4b12      	ldr	r3, [pc, #72]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9ba:	895b      	ldrh	r3, [r3, #10]
   8d9bc:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9be:	683b      	ldr	r3, [r7, #0]
   8d9c0:	89fa      	ldrh	r2, [r7, #14]
   8d9c2:	801a      	strh	r2, [r3, #0]
			break;
   8d9c4:	e015      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8d9c6:	4b0f      	ldr	r3, [pc, #60]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9c8:	885b      	ldrh	r3, [r3, #2]
   8d9ca:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9cc:	683b      	ldr	r3, [r7, #0]
   8d9ce:	89fa      	ldrh	r2, [r7, #14]
   8d9d0:	801a      	strh	r2, [r3, #0]
			break;
   8d9d2:	e00e      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8d9d4:	4b0b      	ldr	r3, [pc, #44]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8d9d8:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9da:	683b      	ldr	r3, [r7, #0]
   8d9dc:	89fa      	ldrh	r2, [r7, #14]
   8d9de:	801a      	strh	r2, [r3, #0]
			break;
   8d9e0:	e007      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8d9e2:	4b08      	ldr	r3, [pc, #32]	; (8da04 <Cl_SysStat_GetSensor_Status_Query+0x3e8>)
   8d9e4:	781b      	ldrb	r3, [r3, #0]
   8d9e6:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8d9e8:	683b      	ldr	r3, [r7, #0]
   8d9ea:	89fa      	ldrh	r2, [r7, #14]
   8d9ec:	801a      	strh	r2, [r3, #0]
			break;
   8d9ee:	e000      	b.n	8d9f2 <Cl_SysStat_GetSensor_Status_Query+0x3d6>
			default:
			break;
   8d9f0:	bf00      	nop
		}
	return CL_OK;
   8d9f2:	2300      	movs	r3, #0
}
   8d9f4:	4618      	mov	r0, r3
   8d9f6:	3714      	adds	r7, #20
   8d9f8:	46bd      	mov	sp, r7
   8d9fa:	bc80      	pop	{r7}
   8d9fc:	4770      	bx	lr
   8d9fe:	bf00      	nop
   8da00:	200730fc 	.word	0x200730fc
   8da04:	20072e18 	.word	0x20072e18
   8da08:	200720d1 	.word	0x200720d1

0008da0c <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8da0c:	b590      	push	{r4, r7, lr}
   8da0e:	b095      	sub	sp, #84	; 0x54
   8da10:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8da12:	2304      	movs	r3, #4
   8da14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8da18:	2300      	movs	r3, #0
   8da1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t sensordata=0,temp2=0;
   8da1e:	2300      	movs	r3, #0
   8da20:	85bb      	strh	r3, [r7, #44]	; 0x2c
   8da22:	2300      	movs	r3, #0
   8da24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8da28:	2300      	movs	r3, #0
   8da2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t sensordatamillivolts =0;
   8da2e:	2300      	movs	r3, #0
   8da30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t tempdata =0,count1;
   8da34:	2300      	movs	r3, #0
   8da36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t Pressuredatainmillibars =0;
   8da3a:	2300      	movs	r3, #0
   8da3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	uint16_t raw_cond =0;
   8da40:	2300      	movs	r3, #0
   8da42:	817b      	strh	r3, [r7, #10]
	
	float TS3;
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8da44:	4b82      	ldr	r3, [pc, #520]	; (8dc50 <Cl_SysStat_mean_status_update+0x244>)
   8da46:	781b      	ldrb	r3, [r3, #0]
   8da48:	2b00      	cmp	r3, #0
   8da4a:	f000 82e2 	beq.w	8e012 <Cl_SysStat_mean_status_update+0x606>
	{
	
		if(syncdone)
   8da4e:	4b80      	ldr	r3, [pc, #512]	; (8dc50 <Cl_SysStat_mean_status_update+0x244>)
   8da50:	781b      	ldrb	r3, [r3, #0]
   8da52:	2b00      	cmp	r3, #0
   8da54:	f000 82dd 	beq.w	8e012 <Cl_SysStat_mean_status_update+0x606>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8da58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8da5c:	4619      	mov	r1, r3
   8da5e:	2012      	movs	r0, #18
   8da60:	4b7c      	ldr	r3, [pc, #496]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8da62:	4798      	blx	r3
// //				avgtmp1 =	(avgtmp1*5 + res_temp_value)/6;
// //				uint16_t temp = avgtmp1/10;
// //				temp = temp - 25 +12 + 2.5;
// 				bulk_data[0] = res_temp_value/10;
// 				//bulk_data[0] = toggle_count_flow;
				bulk_data[0] = sensordata/10;
   8da64:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8da68:	4a7b      	ldr	r2, [pc, #492]	; (8dc58 <Cl_SysStat_mean_status_update+0x24c>)
   8da6a:	fb82 1203 	smull	r1, r2, r2, r3
   8da6e:	1092      	asrs	r2, r2, #2
   8da70:	17db      	asrs	r3, r3, #31
   8da72:	1ad3      	subs	r3, r2, r3
   8da74:	b21b      	sxth	r3, r3
   8da76:	81bb      	strh	r3, [r7, #12]
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8da78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8da7c:	4619      	mov	r1, r3
   8da7e:	2013      	movs	r0, #19
   8da80:	4b74      	ldr	r3, [pc, #464]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8da82:	4798      	blx	r3
// 				
// 			//	temp = temp -45;                                      // commented for machine 2
// 			//	temp = temp - 25 +12;
// //				temp = temp - 25 + 8.1 ;
// 				bulk_data[1] = (res_temp_value- 4)/10;
				bulk_data[1] = sensordata /10;
   8da84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8da88:	4a73      	ldr	r2, [pc, #460]	; (8dc58 <Cl_SysStat_mean_status_update+0x24c>)
   8da8a:	fb82 1203 	smull	r1, r2, r2, r3
   8da8e:	1092      	asrs	r2, r2, #2
   8da90:	17db      	asrs	r3, r3, #31
   8da92:	1ad3      	subs	r3, r2, r3
   8da94:	b21b      	sxth	r3, r3
   8da96:	81fb      	strh	r3, [r7, #14]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8da98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8da9c:	4619      	mov	r1, r3
   8da9e:	2014      	movs	r0, #20
   8daa0:	4b6c      	ldr	r3, [pc, #432]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8daa2:	4798      	blx	r3
// //				float temp = avgtmp3/10;
// 				TS3 = (res_temp_value/10) - 0.4;
// //				TS3 = (res_temp_value/100) - 3.1 - 2;
// //				TS3 = (avgtmp3/10) - 0.4;
// 				bulk_data[2] =  (uint16_t)(TS3); // * 10);
				bulk_data[2] = sensordata/10;
   8daa4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8daa8:	4a6b      	ldr	r2, [pc, #428]	; (8dc58 <Cl_SysStat_mean_status_update+0x24c>)
   8daaa:	fb82 1203 	smull	r1, r2, r2, r3
   8daae:	1092      	asrs	r2, r2, #2
   8dab0:	17db      	asrs	r3, r3, #31
   8dab2:	1ad3      	subs	r3, r2, r3
   8dab4:	b21b      	sxth	r3, r3
   8dab6:	823b      	strh	r3, [r7, #16]
				TS3 = (float)sensordata /100;
   8dab8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8dabc:	4b67      	ldr	r3, [pc, #412]	; (8dc5c <Cl_SysStat_mean_status_update+0x250>)
   8dabe:	4610      	mov	r0, r2
   8dac0:	4798      	blx	r3
   8dac2:	4602      	mov	r2, r0
   8dac4:	4b66      	ldr	r3, [pc, #408]	; (8dc60 <Cl_SysStat_mean_status_update+0x254>)
   8dac6:	4967      	ldr	r1, [pc, #412]	; (8dc64 <Cl_SysStat_mean_status_update+0x258>)
   8dac8:	4610      	mov	r0, r2
   8daca:	4798      	blx	r3
   8dacc:	4603      	mov	r3, r0
   8dace:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&raw_cond);
   8dad0:	f107 030a 	add.w	r3, r7, #10
   8dad4:	4619      	mov	r1, r3
   8dad6:	2007      	movs	r0, #7
   8dad8:	4b5e      	ldr	r3, [pc, #376]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8dada:	4798      	blx	r3
			{
			float conductivity_CS3;
			conductivity_CS3 = cl_utilities_CalConductivity(raw_cond,TS3);
   8dadc:	897b      	ldrh	r3, [r7, #10]
   8dade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   8dae0:	4618      	mov	r0, r3
   8dae2:	4b61      	ldr	r3, [pc, #388]	; (8dc68 <Cl_SysStat_mean_status_update+0x25c>)
   8dae4:	4798      	blx	r3
   8dae6:	63b8      	str	r0, [r7, #56]	; 0x38
			bulk_data[3] = conductivity_CS3;								// multiplication for display purpose
   8dae8:	4b60      	ldr	r3, [pc, #384]	; (8dc6c <Cl_SysStat_mean_status_update+0x260>)
   8daea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   8daec:	4798      	blx	r3
   8daee:	4603      	mov	r3, r0
   8daf0:	b21b      	sxth	r3, r3
   8daf2:	827b      	strh	r3, [r7, #18]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
		
//				bulk_data[3] = raw_cond;
***********************************************************************/	
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   8daf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8daf8:	4619      	mov	r1, r3
   8dafa:	2022      	movs	r0, #34	; 0x22
   8dafc:	4b55      	ldr	r3, [pc, #340]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8dafe:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   8db00:	4b5b      	ldr	r3, [pc, #364]	; (8dc70 <Cl_SysStat_mean_status_update+0x264>)
   8db02:	681a      	ldr	r2, [r3, #0]
   8db04:	4b5b      	ldr	r3, [pc, #364]	; (8dc74 <Cl_SysStat_mean_status_update+0x268>)
   8db06:	f04f 0100 	mov.w	r1, #0
   8db0a:	4610      	mov	r0, r2
   8db0c:	4798      	blx	r3
   8db0e:	4603      	mov	r3, r0
   8db10:	2b00      	cmp	r3, #0
   8db12:	d008      	beq.n	8db26 <Cl_SysStat_mean_status_update+0x11a>
				{
					avgcond_acid = sensordata;
   8db14:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8db18:	4b50      	ldr	r3, [pc, #320]	; (8dc5c <Cl_SysStat_mean_status_update+0x250>)
   8db1a:	4610      	mov	r0, r2
   8db1c:	4798      	blx	r3
   8db1e:	4602      	mov	r2, r0
   8db20:	4b55      	ldr	r3, [pc, #340]	; (8dc78 <Cl_SysStat_mean_status_update+0x26c>)
   8db22:	601a      	str	r2, [r3, #0]
   8db24:	e01b      	b.n	8db5e <Cl_SysStat_mean_status_update+0x152>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   8db26:	4b54      	ldr	r3, [pc, #336]	; (8dc78 <Cl_SysStat_mean_status_update+0x26c>)
   8db28:	681a      	ldr	r2, [r3, #0]
   8db2a:	4b54      	ldr	r3, [pc, #336]	; (8dc7c <Cl_SysStat_mean_status_update+0x270>)
   8db2c:	4954      	ldr	r1, [pc, #336]	; (8dc80 <Cl_SysStat_mean_status_update+0x274>)
   8db2e:	4610      	mov	r0, r2
   8db30:	4798      	blx	r3
   8db32:	4603      	mov	r3, r0
   8db34:	461c      	mov	r4, r3
   8db36:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8db3a:	4b48      	ldr	r3, [pc, #288]	; (8dc5c <Cl_SysStat_mean_status_update+0x250>)
   8db3c:	4610      	mov	r0, r2
   8db3e:	4798      	blx	r3
   8db40:	4602      	mov	r2, r0
   8db42:	4b50      	ldr	r3, [pc, #320]	; (8dc84 <Cl_SysStat_mean_status_update+0x278>)
   8db44:	4611      	mov	r1, r2
   8db46:	4620      	mov	r0, r4
   8db48:	4798      	blx	r3
   8db4a:	4603      	mov	r3, r0
   8db4c:	461a      	mov	r2, r3
   8db4e:	4b44      	ldr	r3, [pc, #272]	; (8dc60 <Cl_SysStat_mean_status_update+0x254>)
   8db50:	494d      	ldr	r1, [pc, #308]	; (8dc88 <Cl_SysStat_mean_status_update+0x27c>)
   8db52:	4610      	mov	r0, r2
   8db54:	4798      	blx	r3
   8db56:	4603      	mov	r3, r0
   8db58:	461a      	mov	r2, r3
   8db5a:	4b47      	ldr	r3, [pc, #284]	; (8dc78 <Cl_SysStat_mean_status_update+0x26c>)
   8db5c:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8db5e:	2300      	movs	r3, #0
   8db60:	607b      	str	r3, [r7, #4]
				cl_tdata.Twobyte = avgcond_acid;
   8db62:	4b45      	ldr	r3, [pc, #276]	; (8dc78 <Cl_SysStat_mean_status_update+0x26c>)
   8db64:	681a      	ldr	r2, [r3, #0]
   8db66:	4b49      	ldr	r3, [pc, #292]	; (8dc8c <Cl_SysStat_mean_status_update+0x280>)
   8db68:	4610      	mov	r0, r2
   8db6a:	4798      	blx	r3
   8db6c:	4603      	mov	r3, r0
   8db6e:	b29b      	uxth	r3, r3
   8db70:	80bb      	strh	r3, [r7, #4]
				cl_tdata.bytearray[2] = 4;
   8db72:	2304      	movs	r3, #4
   8db74:	71bb      	strb	r3, [r7, #6]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8db76:	1d3b      	adds	r3, r7, #4
   8db78:	2204      	movs	r2, #4
   8db7a:	4619      	mov	r1, r3
   8db7c:	2037      	movs	r0, #55	; 0x37
   8db7e:	4b44      	ldr	r3, [pc, #272]	; (8dc90 <Cl_SysStat_mean_status_update+0x284>)
   8db80:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&sensordata);
   8db82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8db86:	4619      	mov	r1, r3
   8db88:	2023      	movs	r0, #35	; 0x23
   8db8a:	4b32      	ldr	r3, [pc, #200]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8db8c:	4798      	blx	r3
				
			}
			#endif
		//	bulk_data[1] = sensordata;
		
					if(avgcond == 0)
   8db8e:	4b38      	ldr	r3, [pc, #224]	; (8dc70 <Cl_SysStat_mean_status_update+0x264>)
   8db90:	681a      	ldr	r2, [r3, #0]
   8db92:	4b38      	ldr	r3, [pc, #224]	; (8dc74 <Cl_SysStat_mean_status_update+0x268>)
   8db94:	f04f 0100 	mov.w	r1, #0
   8db98:	4610      	mov	r0, r2
   8db9a:	4798      	blx	r3
   8db9c:	4603      	mov	r3, r0
   8db9e:	2b00      	cmp	r3, #0
   8dba0:	d008      	beq.n	8dbb4 <Cl_SysStat_mean_status_update+0x1a8>
				{
					avgcond_bicarb = sensordata;
   8dba2:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8dba6:	4b2d      	ldr	r3, [pc, #180]	; (8dc5c <Cl_SysStat_mean_status_update+0x250>)
   8dba8:	4610      	mov	r0, r2
   8dbaa:	4798      	blx	r3
   8dbac:	4602      	mov	r2, r0
   8dbae:	4b39      	ldr	r3, [pc, #228]	; (8dc94 <Cl_SysStat_mean_status_update+0x288>)
   8dbb0:	601a      	str	r2, [r3, #0]
   8dbb2:	e01b      	b.n	8dbec <Cl_SysStat_mean_status_update+0x1e0>
				}
				else
				{
					avgcond_bicarb =(avgcond_bicarb*5 + sensordata)/6;
   8dbb4:	4b37      	ldr	r3, [pc, #220]	; (8dc94 <Cl_SysStat_mean_status_update+0x288>)
   8dbb6:	681a      	ldr	r2, [r3, #0]
   8dbb8:	4b30      	ldr	r3, [pc, #192]	; (8dc7c <Cl_SysStat_mean_status_update+0x270>)
   8dbba:	4931      	ldr	r1, [pc, #196]	; (8dc80 <Cl_SysStat_mean_status_update+0x274>)
   8dbbc:	4610      	mov	r0, r2
   8dbbe:	4798      	blx	r3
   8dbc0:	4603      	mov	r3, r0
   8dbc2:	461c      	mov	r4, r3
   8dbc4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8dbc8:	4b24      	ldr	r3, [pc, #144]	; (8dc5c <Cl_SysStat_mean_status_update+0x250>)
   8dbca:	4610      	mov	r0, r2
   8dbcc:	4798      	blx	r3
   8dbce:	4602      	mov	r2, r0
   8dbd0:	4b2c      	ldr	r3, [pc, #176]	; (8dc84 <Cl_SysStat_mean_status_update+0x278>)
   8dbd2:	4611      	mov	r1, r2
   8dbd4:	4620      	mov	r0, r4
   8dbd6:	4798      	blx	r3
   8dbd8:	4603      	mov	r3, r0
   8dbda:	461a      	mov	r2, r3
   8dbdc:	4b20      	ldr	r3, [pc, #128]	; (8dc60 <Cl_SysStat_mean_status_update+0x254>)
   8dbde:	492a      	ldr	r1, [pc, #168]	; (8dc88 <Cl_SysStat_mean_status_update+0x27c>)
   8dbe0:	4610      	mov	r0, r2
   8dbe2:	4798      	blx	r3
   8dbe4:	4603      	mov	r3, r0
   8dbe6:	461a      	mov	r2, r3
   8dbe8:	4b2a      	ldr	r3, [pc, #168]	; (8dc94 <Cl_SysStat_mean_status_update+0x288>)
   8dbea:	601a      	str	r2, [r3, #0]
				}
				
				 // remove comment after  removing heter data updates
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8dbec:	2300      	movs	r3, #0
   8dbee:	603b      	str	r3, [r7, #0]
				cl_tdata.Twobyte = avgcond_bicarb;
   8dbf0:	4b28      	ldr	r3, [pc, #160]	; (8dc94 <Cl_SysStat_mean_status_update+0x288>)
   8dbf2:	681a      	ldr	r2, [r3, #0]
   8dbf4:	4b25      	ldr	r3, [pc, #148]	; (8dc8c <Cl_SysStat_mean_status_update+0x280>)
   8dbf6:	4610      	mov	r0, r2
   8dbf8:	4798      	blx	r3
   8dbfa:	4603      	mov	r3, r0
   8dbfc:	b29b      	uxth	r3, r3
   8dbfe:	803b      	strh	r3, [r7, #0]
				cl_tdata.bytearray[2] = 6;
   8dc00:	2306      	movs	r3, #6
   8dc02:	70bb      	strb	r3, [r7, #2]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8dc04:	463b      	mov	r3, r7
   8dc06:	2204      	movs	r2, #4
   8dc08:	4619      	mov	r1, r3
   8dc0a:	2037      	movs	r0, #55	; 0x37
   8dc0c:	4b20      	ldr	r3, [pc, #128]	; (8dc90 <Cl_SysStat_mean_status_update+0x284>)
   8dc0e:	4798      	blx	r3
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8dc10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8dc14:	4619      	mov	r1, r3
   8dc16:	2019      	movs	r0, #25
   8dc18:	4b0e      	ldr	r3, [pc, #56]	; (8dc54 <Cl_SysStat_mean_status_update+0x248>)
   8dc1a:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8dc1c:	2300      	movs	r3, #0
   8dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
				cl_tdata.Twobyte = sensordata;
   8dc20:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8dc24:	b29b      	uxth	r3, r3
   8dc26:	853b      	strh	r3, [r7, #40]	; 0x28
				cl_tdata.bytearray[2] = 3;
   8dc28:	2303      	movs	r3, #3
   8dc2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				bulk_data[4] = sensordata;
   8dc2e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8dc32:	82bb      	strh	r3, [r7, #20]
				if(prev_flow_status == sensordata)
   8dc34:	4b18      	ldr	r3, [pc, #96]	; (8dc98 <Cl_SysStat_mean_status_update+0x28c>)
   8dc36:	f9b3 2000 	ldrsh.w	r2, [r3]
   8dc3a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
   8dc3e:	429a      	cmp	r2, r3
   8dc40:	d12e      	bne.n	8dca0 <Cl_SysStat_mean_status_update+0x294>
				{
					if(flow_counter++ > 10)
   8dc42:	4b16      	ldr	r3, [pc, #88]	; (8dc9c <Cl_SysStat_mean_status_update+0x290>)
   8dc44:	781b      	ldrb	r3, [r3, #0]
   8dc46:	3301      	adds	r3, #1
   8dc48:	b2da      	uxtb	r2, r3
   8dc4a:	4b14      	ldr	r3, [pc, #80]	; (8dc9c <Cl_SysStat_mean_status_update+0x290>)
   8dc4c:	701a      	strb	r2, [r3, #0]
   8dc4e:	e02a      	b.n	8dca6 <Cl_SysStat_mean_status_update+0x29a>
   8dc50:	200727a0 	.word	0x200727a0
   8dc54:	0008d61d 	.word	0x0008d61d
   8dc58:	66666667 	.word	0x66666667
   8dc5c:	000a33a9 	.word	0x000a33a9
   8dc60:	000a35b9 	.word	0x000a35b9
   8dc64:	42c80000 	.word	0x42c80000
   8dc68:	00091989 	.word	0x00091989
   8dc6c:	000a37dd 	.word	0x000a37dd
   8dc70:	200725e8 	.word	0x200725e8
   8dc74:	000a3779 	.word	0x000a3779
   8dc78:	200725ec 	.word	0x200725ec
   8dc7c:	000a3451 	.word	0x000a3451
   8dc80:	40a00000 	.word	0x40a00000
   8dc84:	000a3241 	.word	0x000a3241
   8dc88:	40c00000 	.word	0x40c00000
   8dc8c:	000a3829 	.word	0x000a3829
   8dc90:	0009926d 	.word	0x0009926d
   8dc94:	200725f0 	.word	0x200725f0
   8dc98:	200725fc 	.word	0x200725fc
   8dc9c:	200725fe 	.word	0x200725fe
					}
					
				}
				else
				{
					flow_counter = 0;
   8dca0:	4b8c      	ldr	r3, [pc, #560]	; (8ded4 <Cl_SysStat_mean_status_update+0x4c8>)
   8dca2:	2200      	movs	r2, #0
   8dca4:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8dca6:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
   8dcaa:	4b8b      	ldr	r3, [pc, #556]	; (8ded8 <Cl_SysStat_mean_status_update+0x4cc>)
   8dcac:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   8dcae:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8dcb2:	4619      	mov	r1, r3
   8dcb4:	200b      	movs	r0, #11
   8dcb6:	4b89      	ldr	r3, [pc, #548]	; (8dedc <Cl_SysStat_mean_status_update+0x4d0>)
   8dcb8:	4798      	blx	r3
			

				calibration_apt(Atp);
   8dcba:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
   8dcbe:	4618      	mov	r0, r3
   8dcc0:	4b87      	ldr	r3, [pc, #540]	; (8dee0 <Cl_SysStat_mean_status_update+0x4d4>)
   8dcc2:	4798      	blx	r3
				aptavg = ((aptavg* 2) + pressure_final_apt)/3;
   8dcc4:	4b87      	ldr	r3, [pc, #540]	; (8dee4 <Cl_SysStat_mean_status_update+0x4d8>)
   8dcc6:	681a      	ldr	r2, [r3, #0]
   8dcc8:	4b87      	ldr	r3, [pc, #540]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dcca:	4611      	mov	r1, r2
   8dccc:	4610      	mov	r0, r2
   8dcce:	4798      	blx	r3
   8dcd0:	4603      	mov	r3, r0
   8dcd2:	4618      	mov	r0, r3
   8dcd4:	4b85      	ldr	r3, [pc, #532]	; (8deec <Cl_SysStat_mean_status_update+0x4e0>)
   8dcd6:	681a      	ldr	r2, [r3, #0]
   8dcd8:	4b83      	ldr	r3, [pc, #524]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dcda:	4611      	mov	r1, r2
   8dcdc:	4798      	blx	r3
   8dcde:	4603      	mov	r3, r0
   8dce0:	461a      	mov	r2, r3
   8dce2:	4b83      	ldr	r3, [pc, #524]	; (8def0 <Cl_SysStat_mean_status_update+0x4e4>)
   8dce4:	4983      	ldr	r1, [pc, #524]	; (8def4 <Cl_SysStat_mean_status_update+0x4e8>)
   8dce6:	4610      	mov	r0, r2
   8dce8:	4798      	blx	r3
   8dcea:	4603      	mov	r3, r0
   8dcec:	461a      	mov	r2, r3
   8dcee:	4b7d      	ldr	r3, [pc, #500]	; (8dee4 <Cl_SysStat_mean_status_update+0x4d8>)
   8dcf0:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8dcf2:	2300      	movs	r3, #0
   8dcf4:	62bb      	str	r3, [r7, #40]	; 0x28
				cl_tdata.Twobyte = aptavg + 1000;
   8dcf6:	4b7b      	ldr	r3, [pc, #492]	; (8dee4 <Cl_SysStat_mean_status_update+0x4d8>)
   8dcf8:	681a      	ldr	r2, [r3, #0]
   8dcfa:	4b7b      	ldr	r3, [pc, #492]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dcfc:	497e      	ldr	r1, [pc, #504]	; (8def8 <Cl_SysStat_mean_status_update+0x4ec>)
   8dcfe:	4610      	mov	r0, r2
   8dd00:	4798      	blx	r3
   8dd02:	4603      	mov	r3, r0
   8dd04:	461a      	mov	r2, r3
   8dd06:	4b7d      	ldr	r3, [pc, #500]	; (8defc <Cl_SysStat_mean_status_update+0x4f0>)
   8dd08:	4610      	mov	r0, r2
   8dd0a:	4798      	blx	r3
   8dd0c:	4603      	mov	r3, r0
   8dd0e:	b29b      	uxth	r3, r3
   8dd10:	853b      	strh	r3, [r7, #40]	; 0x28
				cl_tdata.bytearray[2] = 14;
   8dd12:	230e      	movs	r3, #14
   8dd14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				bulk_data[5] = cl_tdata.Twobyte;
   8dd18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8dd1a:	b21b      	sxth	r3, r3
   8dd1c:	82fb      	strh	r3, [r7, #22]
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   8dd1e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   8dd22:	4619      	mov	r1, r3
   8dd24:	200c      	movs	r0, #12
   8dd26:	4b6d      	ldr	r3, [pc, #436]	; (8dedc <Cl_SysStat_mean_status_update+0x4d0>)
   8dd28:	4798      	blx	r3
			
			calibration_vpt(Vtp);
   8dd2a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
   8dd2e:	4618      	mov	r0, r3
   8dd30:	4b73      	ldr	r3, [pc, #460]	; (8df00 <Cl_SysStat_mean_status_update+0x4f4>)
   8dd32:	4798      	blx	r3
			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
   8dd34:	4b73      	ldr	r3, [pc, #460]	; (8df04 <Cl_SysStat_mean_status_update+0x4f8>)
   8dd36:	681a      	ldr	r2, [r3, #0]
   8dd38:	4b6b      	ldr	r3, [pc, #428]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dd3a:	4611      	mov	r1, r2
   8dd3c:	4610      	mov	r0, r2
   8dd3e:	4798      	blx	r3
   8dd40:	4603      	mov	r3, r0
   8dd42:	4618      	mov	r0, r3
   8dd44:	4b70      	ldr	r3, [pc, #448]	; (8df08 <Cl_SysStat_mean_status_update+0x4fc>)
   8dd46:	681a      	ldr	r2, [r3, #0]
   8dd48:	4b67      	ldr	r3, [pc, #412]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dd4a:	4611      	mov	r1, r2
   8dd4c:	4798      	blx	r3
   8dd4e:	4603      	mov	r3, r0
   8dd50:	461a      	mov	r2, r3
   8dd52:	4b67      	ldr	r3, [pc, #412]	; (8def0 <Cl_SysStat_mean_status_update+0x4e4>)
   8dd54:	4967      	ldr	r1, [pc, #412]	; (8def4 <Cl_SysStat_mean_status_update+0x4e8>)
   8dd56:	4610      	mov	r0, r2
   8dd58:	4798      	blx	r3
   8dd5a:	4603      	mov	r3, r0
   8dd5c:	461a      	mov	r2, r3
   8dd5e:	4b69      	ldr	r3, [pc, #420]	; (8df04 <Cl_SysStat_mean_status_update+0x4f8>)
   8dd60:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8dd62:	2300      	movs	r3, #0
   8dd64:	62bb      	str	r3, [r7, #40]	; 0x28
			cl_tdata.Twobyte = vptavg + 1000;
   8dd66:	4b67      	ldr	r3, [pc, #412]	; (8df04 <Cl_SysStat_mean_status_update+0x4f8>)
   8dd68:	681a      	ldr	r2, [r3, #0]
   8dd6a:	4b5f      	ldr	r3, [pc, #380]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dd6c:	4962      	ldr	r1, [pc, #392]	; (8def8 <Cl_SysStat_mean_status_update+0x4ec>)
   8dd6e:	4610      	mov	r0, r2
   8dd70:	4798      	blx	r3
   8dd72:	4603      	mov	r3, r0
   8dd74:	461a      	mov	r2, r3
   8dd76:	4b61      	ldr	r3, [pc, #388]	; (8defc <Cl_SysStat_mean_status_update+0x4f0>)
   8dd78:	4610      	mov	r0, r2
   8dd7a:	4798      	blx	r3
   8dd7c:	4603      	mov	r3, r0
   8dd7e:	b29b      	uxth	r3, r3
   8dd80:	853b      	strh	r3, [r7, #40]	; 0x28
			cl_tdata.bytearray[2] = 15;
   8dd82:	230f      	movs	r3, #15
   8dd84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bulk_data[6] = cl_tdata.Twobyte;
   8dd88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8dd8a:	b21b      	sxth	r3, r3
   8dd8c:	833b      	strh	r3, [r7, #24]
	
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8dd8e:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8dd92:	4619      	mov	r1, r3
   8dd94:	2010      	movs	r0, #16
   8dd96:	4b51      	ldr	r3, [pc, #324]	; (8dedc <Cl_SysStat_mean_status_update+0x4d0>)
   8dd98:	4798      	blx	r3
	
			calibration_ps3(Ps3);
   8dd9a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
   8dd9e:	4618      	mov	r0, r3
   8dda0:	4b5a      	ldr	r3, [pc, #360]	; (8df0c <Cl_SysStat_mean_status_update+0x500>)
   8dda2:	4798      	blx	r3
			ps3avg = ((ps3avg* 2) + pressure_final_ps3)/3;
   8dda4:	4b5a      	ldr	r3, [pc, #360]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8dda6:	681a      	ldr	r2, [r3, #0]
   8dda8:	4b4f      	ldr	r3, [pc, #316]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8ddaa:	4611      	mov	r1, r2
   8ddac:	4610      	mov	r0, r2
   8ddae:	4798      	blx	r3
   8ddb0:	4603      	mov	r3, r0
   8ddb2:	4618      	mov	r0, r3
   8ddb4:	4b57      	ldr	r3, [pc, #348]	; (8df14 <Cl_SysStat_mean_status_update+0x508>)
   8ddb6:	681a      	ldr	r2, [r3, #0]
   8ddb8:	4b4b      	ldr	r3, [pc, #300]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8ddba:	4611      	mov	r1, r2
   8ddbc:	4798      	blx	r3
   8ddbe:	4603      	mov	r3, r0
   8ddc0:	461a      	mov	r2, r3
   8ddc2:	4b4b      	ldr	r3, [pc, #300]	; (8def0 <Cl_SysStat_mean_status_update+0x4e4>)
   8ddc4:	494b      	ldr	r1, [pc, #300]	; (8def4 <Cl_SysStat_mean_status_update+0x4e8>)
   8ddc6:	4610      	mov	r0, r2
   8ddc8:	4798      	blx	r3
   8ddca:	4603      	mov	r3, r0
   8ddcc:	461a      	mov	r2, r3
   8ddce:	4b50      	ldr	r3, [pc, #320]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8ddd0:	601a      	str	r2, [r3, #0]
			ps3avg_1sec = ((ps3avg_1sec* 2) + Pressuredatainmillibars) /3;
   8ddd2:	4b51      	ldr	r3, [pc, #324]	; (8df18 <Cl_SysStat_mean_status_update+0x50c>)
   8ddd4:	681a      	ldr	r2, [r3, #0]
   8ddd6:	4b44      	ldr	r3, [pc, #272]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8ddd8:	4611      	mov	r1, r2
   8ddda:	4610      	mov	r0, r2
   8dddc:	4798      	blx	r3
   8ddde:	4603      	mov	r3, r0
   8dde0:	461c      	mov	r4, r3
   8dde2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
   8dde6:	4b4d      	ldr	r3, [pc, #308]	; (8df1c <Cl_SysStat_mean_status_update+0x510>)
   8dde8:	4610      	mov	r0, r2
   8ddea:	4798      	blx	r3
   8ddec:	4602      	mov	r2, r0
   8ddee:	4b3e      	ldr	r3, [pc, #248]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8ddf0:	4611      	mov	r1, r2
   8ddf2:	4620      	mov	r0, r4
   8ddf4:	4798      	blx	r3
   8ddf6:	4603      	mov	r3, r0
   8ddf8:	461a      	mov	r2, r3
   8ddfa:	4b3d      	ldr	r3, [pc, #244]	; (8def0 <Cl_SysStat_mean_status_update+0x4e4>)
   8ddfc:	493d      	ldr	r1, [pc, #244]	; (8def4 <Cl_SysStat_mean_status_update+0x4e8>)
   8ddfe:	4610      	mov	r0, r2
   8de00:	4798      	blx	r3
   8de02:	4603      	mov	r3, r0
   8de04:	461a      	mov	r2, r3
   8de06:	4b44      	ldr	r3, [pc, #272]	; (8df18 <Cl_SysStat_mean_status_update+0x50c>)
   8de08:	601a      	str	r2, [r3, #0]
			if ( ps3avg_1sec < (ps3avg ))
   8de0a:	4b43      	ldr	r3, [pc, #268]	; (8df18 <Cl_SysStat_mean_status_update+0x50c>)
   8de0c:	681a      	ldr	r2, [r3, #0]
   8de0e:	4b40      	ldr	r3, [pc, #256]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de10:	6819      	ldr	r1, [r3, #0]
   8de12:	4b43      	ldr	r3, [pc, #268]	; (8df20 <Cl_SysStat_mean_status_update+0x514>)
   8de14:	4610      	mov	r0, r2
   8de16:	4798      	blx	r3
   8de18:	4603      	mov	r3, r0
   8de1a:	2b00      	cmp	r3, #0
   8de1c:	d009      	beq.n	8de32 <Cl_SysStat_mean_status_update+0x426>
			{
				
				if(ps3avg_1sec < (ps3avg - 5) )
   8de1e:	4b3c      	ldr	r3, [pc, #240]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de20:	681a      	ldr	r2, [r3, #0]
   8de22:	4b40      	ldr	r3, [pc, #256]	; (8df24 <Cl_SysStat_mean_status_update+0x518>)
   8de24:	4940      	ldr	r1, [pc, #256]	; (8df28 <Cl_SysStat_mean_status_update+0x51c>)
   8de26:	4610      	mov	r0, r2
   8de28:	4798      	blx	r3
				{
					//switch chamber
				//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
					
				}
				ps3avg_max = ps3avg;
   8de2a:	4b39      	ldr	r3, [pc, #228]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de2c:	681b      	ldr	r3, [r3, #0]
   8de2e:	4a3f      	ldr	r2, [pc, #252]	; (8df2c <Cl_SysStat_mean_status_update+0x520>)
   8de30:	6013      	str	r3, [r2, #0]
			}
			if ( ps3avg < ps3avg_max)
   8de32:	4b37      	ldr	r3, [pc, #220]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de34:	681a      	ldr	r2, [r3, #0]
   8de36:	4b3d      	ldr	r3, [pc, #244]	; (8df2c <Cl_SysStat_mean_status_update+0x520>)
   8de38:	6819      	ldr	r1, [r3, #0]
   8de3a:	4b39      	ldr	r3, [pc, #228]	; (8df20 <Cl_SysStat_mean_status_update+0x514>)
   8de3c:	4610      	mov	r0, r2
   8de3e:	4798      	blx	r3
   8de40:	4603      	mov	r3, r0
   8de42:	2b00      	cmp	r3, #0
   8de44:	d003      	beq.n	8de4e <Cl_SysStat_mean_status_update+0x442>
			{
				

				ps3avg_max = ps3avg;
   8de46:	4b32      	ldr	r3, [pc, #200]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de48:	681b      	ldr	r3, [r3, #0]
   8de4a:	4a38      	ldr	r2, [pc, #224]	; (8df2c <Cl_SysStat_mean_status_update+0x520>)
   8de4c:	6013      	str	r3, [r2, #0]
			}			
			cl_tdata.word = 0;
   8de4e:	2300      	movs	r3, #0
   8de50:	62bb      	str	r3, [r7, #40]	; 0x28
			cl_tdata.Twobyte = 1000 + ps3avg;
   8de52:	4b2f      	ldr	r3, [pc, #188]	; (8df10 <Cl_SysStat_mean_status_update+0x504>)
   8de54:	681a      	ldr	r2, [r3, #0]
   8de56:	4b24      	ldr	r3, [pc, #144]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8de58:	4927      	ldr	r1, [pc, #156]	; (8def8 <Cl_SysStat_mean_status_update+0x4ec>)
   8de5a:	4610      	mov	r0, r2
   8de5c:	4798      	blx	r3
   8de5e:	4603      	mov	r3, r0
   8de60:	461a      	mov	r2, r3
   8de62:	4b26      	ldr	r3, [pc, #152]	; (8defc <Cl_SysStat_mean_status_update+0x4f0>)
   8de64:	4610      	mov	r0, r2
   8de66:	4798      	blx	r3
   8de68:	4603      	mov	r3, r0
   8de6a:	b29b      	uxth	r3, r3
   8de6c:	853b      	strh	r3, [r7, #40]	; 0x28
			cl_tdata.bytearray[2] = 20;
   8de6e:	2314      	movs	r3, #20
   8de70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bulk_data[7] = cl_tdata.Twobyte;
   8de74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8de76:	b21b      	sxth	r3, r3
   8de78:	837b      	strh	r3, [r7, #26]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8de7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8de7e:	4619      	mov	r1, r3
   8de80:	200f      	movs	r0, #15
   8de82:	4b16      	ldr	r3, [pc, #88]	; (8dedc <Cl_SysStat_mean_status_update+0x4d0>)
   8de84:	4798      	blx	r3
	
		calibration_ps2(Ps2);
   8de86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
   8de8a:	4618      	mov	r0, r3
   8de8c:	4b28      	ldr	r3, [pc, #160]	; (8df30 <Cl_SysStat_mean_status_update+0x524>)
   8de8e:	4798      	blx	r3
		ps2avg = ((ps2avg* 2) + pressure_final_ps2)/3;
   8de90:	4b28      	ldr	r3, [pc, #160]	; (8df34 <Cl_SysStat_mean_status_update+0x528>)
   8de92:	681a      	ldr	r2, [r3, #0]
   8de94:	4b14      	ldr	r3, [pc, #80]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8de96:	4611      	mov	r1, r2
   8de98:	4610      	mov	r0, r2
   8de9a:	4798      	blx	r3
   8de9c:	4603      	mov	r3, r0
   8de9e:	4618      	mov	r0, r3
   8dea0:	4b25      	ldr	r3, [pc, #148]	; (8df38 <Cl_SysStat_mean_status_update+0x52c>)
   8dea2:	681a      	ldr	r2, [r3, #0]
   8dea4:	4b10      	ldr	r3, [pc, #64]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dea6:	4611      	mov	r1, r2
   8dea8:	4798      	blx	r3
   8deaa:	4603      	mov	r3, r0
   8deac:	461a      	mov	r2, r3
   8deae:	4b10      	ldr	r3, [pc, #64]	; (8def0 <Cl_SysStat_mean_status_update+0x4e4>)
   8deb0:	4910      	ldr	r1, [pc, #64]	; (8def4 <Cl_SysStat_mean_status_update+0x4e8>)
   8deb2:	4610      	mov	r0, r2
   8deb4:	4798      	blx	r3
   8deb6:	4603      	mov	r3, r0
   8deb8:	461a      	mov	r2, r3
   8deba:	4b1e      	ldr	r3, [pc, #120]	; (8df34 <Cl_SysStat_mean_status_update+0x528>)
   8debc:	601a      	str	r2, [r3, #0]
			

			cl_tdata.word = 0;
   8debe:	2300      	movs	r3, #0
   8dec0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl_tdata.Twobyte = 1000 + ps2avg;
   8dec2:	4b1c      	ldr	r3, [pc, #112]	; (8df34 <Cl_SysStat_mean_status_update+0x528>)
   8dec4:	681a      	ldr	r2, [r3, #0]
   8dec6:	4b08      	ldr	r3, [pc, #32]	; (8dee8 <Cl_SysStat_mean_status_update+0x4dc>)
   8dec8:	490b      	ldr	r1, [pc, #44]	; (8def8 <Cl_SysStat_mean_status_update+0x4ec>)
   8deca:	4610      	mov	r0, r2
   8decc:	4798      	blx	r3
   8dece:	4603      	mov	r3, r0
   8ded0:	461a      	mov	r2, r3
   8ded2:	e033      	b.n	8df3c <Cl_SysStat_mean_status_update+0x530>
   8ded4:	200725fe 	.word	0x200725fe
   8ded8:	200725fc 	.word	0x200725fc
   8dedc:	0008d61d 	.word	0x0008d61d
   8dee0:	000840d1 	.word	0x000840d1
   8dee4:	200725dc 	.word	0x200725dc
   8dee8:	000a3241 	.word	0x000a3241
   8deec:	20072d64 	.word	0x20072d64
   8def0:	000a35b9 	.word	0x000a35b9
   8def4:	40400000 	.word	0x40400000
   8def8:	447a0000 	.word	0x447a0000
   8defc:	000a3829 	.word	0x000a3829
   8df00:	00084251 	.word	0x00084251
   8df04:	200725e0 	.word	0x200725e0
   8df08:	2007165c 	.word	0x2007165c
   8df0c:	000845f5 	.word	0x000845f5
   8df10:	200725d4 	.word	0x200725d4
   8df14:	20071668 	.word	0x20071668
   8df18:	200725d8 	.word	0x200725d8
   8df1c:	000a33a9 	.word	0x000a33a9
   8df20:	000a378d 	.word	0x000a378d
   8df24:	000a323d 	.word	0x000a323d
   8df28:	40a00000 	.word	0x40a00000
   8df2c:	200725e4 	.word	0x200725e4
   8df30:	000844e5 	.word	0x000844e5
   8df34:	200725d0 	.word	0x200725d0
   8df38:	20071664 	.word	0x20071664
   8df3c:	4b37      	ldr	r3, [pc, #220]	; (8e01c <Cl_SysStat_mean_status_update+0x610>)
   8df3e:	4610      	mov	r0, r2
   8df40:	4798      	blx	r3
   8df42:	4603      	mov	r3, r0
   8df44:	b29b      	uxth	r3, r3
   8df46:	853b      	strh	r3, [r7, #40]	; 0x28
			cl_tdata.bytearray[2] = 19;
   8df48:	2313      	movs	r3, #19
   8df4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	
			bulk_data[8] = cl_tdata.Twobyte;
   8df4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8df50:	b21b      	sxth	r3, r3
   8df52:	83bb      	strh	r3, [r7, #28]

		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8df54:	f107 0336 	add.w	r3, r7, #54	; 0x36
   8df58:	4619      	mov	r1, r3
   8df5a:	200e      	movs	r0, #14
   8df5c:	4b30      	ldr	r3, [pc, #192]	; (8e020 <Cl_SysStat_mean_status_update+0x614>)
   8df5e:	4798      	blx	r3

			calibration_ps1(Ps1);
   8df60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
   8df64:	4618      	mov	r0, r3
   8df66:	4b2f      	ldr	r3, [pc, #188]	; (8e024 <Cl_SysStat_mean_status_update+0x618>)
   8df68:	4798      	blx	r3
			ps1avg = ((ps1avg* 2) + pressure_final_ps1)/3;
   8df6a:	4b2f      	ldr	r3, [pc, #188]	; (8e028 <Cl_SysStat_mean_status_update+0x61c>)
   8df6c:	681a      	ldr	r2, [r3, #0]
   8df6e:	4b2f      	ldr	r3, [pc, #188]	; (8e02c <Cl_SysStat_mean_status_update+0x620>)
   8df70:	4611      	mov	r1, r2
   8df72:	4610      	mov	r0, r2
   8df74:	4798      	blx	r3
   8df76:	4603      	mov	r3, r0
   8df78:	4618      	mov	r0, r3
   8df7a:	4b2d      	ldr	r3, [pc, #180]	; (8e030 <Cl_SysStat_mean_status_update+0x624>)
   8df7c:	681a      	ldr	r2, [r3, #0]
   8df7e:	4b2b      	ldr	r3, [pc, #172]	; (8e02c <Cl_SysStat_mean_status_update+0x620>)
   8df80:	4611      	mov	r1, r2
   8df82:	4798      	blx	r3
   8df84:	4603      	mov	r3, r0
   8df86:	461a      	mov	r2, r3
   8df88:	4b2a      	ldr	r3, [pc, #168]	; (8e034 <Cl_SysStat_mean_status_update+0x628>)
   8df8a:	492b      	ldr	r1, [pc, #172]	; (8e038 <Cl_SysStat_mean_status_update+0x62c>)
   8df8c:	4610      	mov	r0, r2
   8df8e:	4798      	blx	r3
   8df90:	4603      	mov	r3, r0
   8df92:	461a      	mov	r2, r3
   8df94:	4b24      	ldr	r3, [pc, #144]	; (8e028 <Cl_SysStat_mean_status_update+0x61c>)
   8df96:	601a      	str	r2, [r3, #0]
			
			cl_tdata.word = 0;
   8df98:	2300      	movs	r3, #0
   8df9a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl_tdata.Twobyte = 1000 + ps1avg;
   8df9c:	4b22      	ldr	r3, [pc, #136]	; (8e028 <Cl_SysStat_mean_status_update+0x61c>)
   8df9e:	681a      	ldr	r2, [r3, #0]
   8dfa0:	4b22      	ldr	r3, [pc, #136]	; (8e02c <Cl_SysStat_mean_status_update+0x620>)
   8dfa2:	4926      	ldr	r1, [pc, #152]	; (8e03c <Cl_SysStat_mean_status_update+0x630>)
   8dfa4:	4610      	mov	r0, r2
   8dfa6:	4798      	blx	r3
   8dfa8:	4603      	mov	r3, r0
   8dfaa:	461a      	mov	r2, r3
   8dfac:	4b1b      	ldr	r3, [pc, #108]	; (8e01c <Cl_SysStat_mean_status_update+0x610>)
   8dfae:	4610      	mov	r0, r2
   8dfb0:	4798      	blx	r3
   8dfb2:	4603      	mov	r3, r0
   8dfb4:	b29b      	uxth	r3, r3
   8dfb6:	853b      	strh	r3, [r7, #40]	; 0x28
			cl_tdata.bytearray[2] = 18;
   8dfb8:	2312      	movs	r3, #18
   8dfba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bulk_data[9] = cl_tdata.Twobyte;
   8dfbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8dfc0:	b21b      	sxth	r3, r3
   8dfc2:	83fb      	strh	r3, [r7, #30]
	
			if(ps1avg > 300)
   8dfc4:	4b18      	ldr	r3, [pc, #96]	; (8e028 <Cl_SysStat_mean_status_update+0x61c>)
   8dfc6:	681a      	ldr	r2, [r3, #0]
   8dfc8:	4b1d      	ldr	r3, [pc, #116]	; (8e040 <Cl_SysStat_mean_status_update+0x634>)
   8dfca:	491e      	ldr	r1, [pc, #120]	; (8e044 <Cl_SysStat_mean_status_update+0x638>)
   8dfcc:	4610      	mov	r0, r2
   8dfce:	4798      	blx	r3
   8dfd0:	4603      	mov	r3, r0
   8dfd2:	2b00      	cmp	r3, #0
   8dfd4:	d006      	beq.n	8dfe4 <Cl_SysStat_mean_status_update+0x5d8>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8dfd6:	4b1c      	ldr	r3, [pc, #112]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dfd8:	881b      	ldrh	r3, [r3, #0]
   8dfda:	3301      	adds	r3, #1
   8dfdc:	b29a      	uxth	r2, r3
   8dfde:	4b1a      	ldr	r3, [pc, #104]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dfe0:	801a      	strh	r2, [r3, #0]
   8dfe2:	e00c      	b.n	8dffe <Cl_SysStat_mean_status_update+0x5f2>
			}
			else
			{
				 valve_4_count++;
   8dfe4:	4b18      	ldr	r3, [pc, #96]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dfe6:	881b      	ldrh	r3, [r3, #0]
   8dfe8:	3301      	adds	r3, #1
   8dfea:	b29a      	uxth	r2, r3
   8dfec:	4b16      	ldr	r3, [pc, #88]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dfee:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8dff0:	4b15      	ldr	r3, [pc, #84]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dff2:	881b      	ldrh	r3, [r3, #0]
   8dff4:	2b00      	cmp	r3, #0
   8dff6:	d002      	beq.n	8dffe <Cl_SysStat_mean_status_update+0x5f2>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8dff8:	4b13      	ldr	r3, [pc, #76]	; (8e048 <Cl_SysStat_mean_status_update+0x63c>)
   8dffa:	2200      	movs	r2, #0
   8dffc:	801a      	strh	r2, [r3, #0]
				}
			}
	
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
   8dffe:	f107 030c 	add.w	r3, r7, #12
   8e002:	221e      	movs	r2, #30
   8e004:	4619      	mov	r1, r3
   8e006:	203e      	movs	r0, #62	; 0x3e
   8e008:	4b10      	ldr	r3, [pc, #64]	; (8e04c <Cl_SysStat_mean_status_update+0x640>)
   8e00a:	4798      	blx	r3
   8e00c:	4603      	mov	r3, r0
   8e00e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			}
		
	}
}
   8e012:	bf00      	nop
   8e014:	3754      	adds	r7, #84	; 0x54
   8e016:	46bd      	mov	sp, r7
   8e018:	bd90      	pop	{r4, r7, pc}
   8e01a:	bf00      	nop
   8e01c:	000a3829 	.word	0x000a3829
   8e020:	0008d61d 	.word	0x0008d61d
   8e024:	000843d5 	.word	0x000843d5
   8e028:	200725cc 	.word	0x200725cc
   8e02c:	000a3241 	.word	0x000a3241
   8e030:	20071660 	.word	0x20071660
   8e034:	000a35b9 	.word	0x000a35b9
   8e038:	40400000 	.word	0x40400000
   8e03c:	447a0000 	.word	0x447a0000
   8e040:	000a37c9 	.word	0x000a37c9
   8e044:	43960000 	.word	0x43960000
   8e048:	200725f4 	.word	0x200725f4
   8e04c:	0009926d 	.word	0x0009926d

0008e050 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8e050:	b590      	push	{r4, r7, lr}
   8e052:	b085      	sub	sp, #20
   8e054:	af00      	add	r7, sp, #0
   8e056:	4603      	mov	r3, r0
   8e058:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   8e05a:	2300      	movs	r3, #0
   8e05c:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   8e05e:	2300      	movs	r3, #0
   8e060:	817b      	strh	r3, [r7, #10]
   8e062:	2300      	movs	r3, #0
   8e064:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   8e066:	4b72      	ldr	r3, [pc, #456]	; (8e230 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e068:	781b      	ldrb	r3, [r3, #0]
   8e06a:	2b00      	cmp	r3, #0
   8e06c:	d002      	beq.n	8e074 <Cl_Conductivity_Sensor_Controller+0x24>
   8e06e:	2b02      	cmp	r3, #2
   8e070:	d060      	beq.n	8e134 <Cl_Conductivity_Sensor_Controller+0xe4>
					break;
					default:break;
				}
				
			break;
			default:break;
   8e072:	e0d1      	b.n	8e218 <Cl_Conductivity_Sensor_Controller+0x1c8>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8e074:	79fb      	ldrb	r3, [r7, #7]
   8e076:	2b00      	cmp	r3, #0
   8e078:	d003      	beq.n	8e082 <Cl_Conductivity_Sensor_Controller+0x32>
   8e07a:	2b02      	cmp	r3, #2
   8e07c:	d023      	beq.n	8e0c6 <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   8e07e:	bf00      	nop
					}
			break;
   8e080:	e0ca      	b.n	8e218 <Cl_Conductivity_Sensor_Controller+0x1c8>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8e082:	4b6c      	ldr	r3, [pc, #432]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e084:	881b      	ldrh	r3, [r3, #0]
   8e086:	4618      	mov	r0, r3
   8e088:	4b6b      	ldr	r3, [pc, #428]	; (8e238 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e08a:	4798      	blx	r3
						cl_wait(100);
   8e08c:	2064      	movs	r0, #100	; 0x64
   8e08e:	4b6b      	ldr	r3, [pc, #428]	; (8e23c <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8e090:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e092:	f107 030a 	add.w	r3, r7, #10
   8e096:	4619      	mov	r1, r3
   8e098:	2006      	movs	r0, #6
   8e09a:	4b69      	ldr	r3, [pc, #420]	; (8e240 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e09c:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8e09e:	897b      	ldrh	r3, [r7, #10]
   8e0a0:	461a      	mov	r2, r3
   8e0a2:	0092      	lsls	r2, r2, #2
   8e0a4:	4413      	add	r3, r2
   8e0a6:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e0a8:	4b66      	ldr	r3, [pc, #408]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e0aa:	881b      	ldrh	r3, [r3, #0]
   8e0ac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e0b0:	d907      	bls.n	8e0c2 <Cl_Conductivity_Sensor_Controller+0x72>
   8e0b2:	4b64      	ldr	r3, [pc, #400]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e0b4:	881b      	ldrh	r3, [r3, #0]
   8e0b6:	f640 0297 	movw	r2, #2199	; 0x897
   8e0ba:	4293      	cmp	r3, r2
   8e0bc:	d801      	bhi.n	8e0c2 <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   8e0be:	2300      	movs	r3, #0
   8e0c0:	e0ab      	b.n	8e21a <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							return CL_ERROR;
   8e0c2:	2304      	movs	r3, #4
   8e0c4:	e0a9      	b.n	8e21a <Cl_Conductivity_Sensor_Controller+0x1ca>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e0c6:	f107 030a 	add.w	r3, r7, #10
   8e0ca:	4619      	mov	r1, r3
   8e0cc:	2006      	movs	r0, #6
   8e0ce:	4b5c      	ldr	r3, [pc, #368]	; (8e240 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e0d0:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   8e0d2:	897b      	ldrh	r3, [r7, #10]
   8e0d4:	461a      	mov	r2, r3
   8e0d6:	4b5c      	ldr	r3, [pc, #368]	; (8e248 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e0d8:	4610      	mov	r0, r2
   8e0da:	4798      	blx	r3
   8e0dc:	4c5b      	ldr	r4, [pc, #364]	; (8e24c <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e0de:	a352      	add	r3, pc, #328	; (adr r3, 8e228 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e0e4:	47a0      	blx	r4
   8e0e6:	4603      	mov	r3, r0
   8e0e8:	460c      	mov	r4, r1
   8e0ea:	4619      	mov	r1, r3
   8e0ec:	4622      	mov	r2, r4
   8e0ee:	4b58      	ldr	r3, [pc, #352]	; (8e250 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e0f0:	4608      	mov	r0, r1
   8e0f2:	4611      	mov	r1, r2
   8e0f4:	4798      	blx	r3
   8e0f6:	4603      	mov	r3, r0
   8e0f8:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8e0fa:	4a52      	ldr	r2, [pc, #328]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e0fc:	89bb      	ldrh	r3, [r7, #12]
   8e0fe:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   8e100:	4a54      	ldr	r2, [pc, #336]	; (8e254 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e102:	89bb      	ldrh	r3, [r7, #12]
   8e104:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   8e106:	4b4a      	ldr	r3, [pc, #296]	; (8e230 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8e108:	2202      	movs	r2, #2
   8e10a:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e10c:	4b4d      	ldr	r3, [pc, #308]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e10e:	881b      	ldrh	r3, [r3, #0]
   8e110:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e114:	d907      	bls.n	8e126 <Cl_Conductivity_Sensor_Controller+0xd6>
   8e116:	4b4b      	ldr	r3, [pc, #300]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e118:	881b      	ldrh	r3, [r3, #0]
   8e11a:	f640 0297 	movw	r2, #2199	; 0x897
   8e11e:	4293      	cmp	r3, r2
   8e120:	d801      	bhi.n	8e126 <Cl_Conductivity_Sensor_Controller+0xd6>
						{
							return CL_OK;
   8e122:	2300      	movs	r3, #0
   8e124:	e079      	b.n	8e21a <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8e126:	4b43      	ldr	r3, [pc, #268]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e128:	881b      	ldrh	r3, [r3, #0]
   8e12a:	4618      	mov	r0, r3
   8e12c:	4b42      	ldr	r3, [pc, #264]	; (8e238 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e12e:	4798      	blx	r3
							return CL_OK;
   8e130:	2300      	movs	r3, #0
   8e132:	e072      	b.n	8e21a <Cl_Conductivity_Sensor_Controller+0x1ca>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8e134:	79fb      	ldrb	r3, [r7, #7]
   8e136:	2b02      	cmp	r3, #2
   8e138:	d000      	beq.n	8e13c <Cl_Conductivity_Sensor_Controller+0xec>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8e13a:	e06c      	b.n	8e216 <Cl_Conductivity_Sensor_Controller+0x1c6>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8e13c:	f107 030a 	add.w	r3, r7, #10
   8e140:	4619      	mov	r1, r3
   8e142:	2006      	movs	r0, #6
   8e144:	4b3e      	ldr	r3, [pc, #248]	; (8e240 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8e146:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   8e148:	897b      	ldrh	r3, [r7, #10]
   8e14a:	461a      	mov	r2, r3
   8e14c:	4b3e      	ldr	r3, [pc, #248]	; (8e248 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8e14e:	4610      	mov	r0, r2
   8e150:	4798      	blx	r3
   8e152:	4c3e      	ldr	r4, [pc, #248]	; (8e24c <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8e154:	a334      	add	r3, pc, #208	; (adr r3, 8e228 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8e156:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e15a:	47a0      	blx	r4
   8e15c:	4603      	mov	r3, r0
   8e15e:	460c      	mov	r4, r1
   8e160:	4619      	mov	r1, r3
   8e162:	4622      	mov	r2, r4
   8e164:	4b3a      	ldr	r3, [pc, #232]	; (8e250 <Cl_Conductivity_Sensor_Controller+0x200>)
   8e166:	4608      	mov	r0, r1
   8e168:	4611      	mov	r1, r2
   8e16a:	4798      	blx	r3
   8e16c:	4603      	mov	r3, r0
   8e16e:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8e170:	4b34      	ldr	r3, [pc, #208]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e172:	881b      	ldrh	r3, [r3, #0]
   8e174:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8e178:	d949      	bls.n	8e20e <Cl_Conductivity_Sensor_Controller+0x1be>
   8e17a:	4b32      	ldr	r3, [pc, #200]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e17c:	881b      	ldrh	r3, [r3, #0]
   8e17e:	f640 0297 	movw	r2, #2199	; 0x897
   8e182:	4293      	cmp	r3, r2
   8e184:	d843      	bhi.n	8e20e <Cl_Conductivity_Sensor_Controller+0x1be>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8e186:	4b2f      	ldr	r3, [pc, #188]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e188:	881b      	ldrh	r3, [r3, #0]
   8e18a:	461a      	mov	r2, r3
   8e18c:	4613      	mov	r3, r2
   8e18e:	00db      	lsls	r3, r3, #3
   8e190:	4413      	add	r3, r2
   8e192:	005b      	lsls	r3, r3, #1
   8e194:	441a      	add	r2, r3
   8e196:	89bb      	ldrh	r3, [r7, #12]
   8e198:	4413      	add	r3, r2
   8e19a:	4a2f      	ldr	r2, [pc, #188]	; (8e258 <Cl_Conductivity_Sensor_Controller+0x208>)
   8e19c:	fb82 1203 	smull	r1, r2, r2, r3
   8e1a0:	10d2      	asrs	r2, r2, #3
   8e1a2:	17db      	asrs	r3, r3, #31
   8e1a4:	1ad3      	subs	r3, r2, r3
   8e1a6:	b29a      	uxth	r2, r3
   8e1a8:	4b26      	ldr	r3, [pc, #152]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e1aa:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   8e1ac:	4b25      	ldr	r3, [pc, #148]	; (8e244 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8e1ae:	881b      	ldrh	r3, [r3, #0]
   8e1b0:	005a      	lsls	r2, r3, #1
   8e1b2:	89bb      	ldrh	r3, [r7, #12]
   8e1b4:	4413      	add	r3, r2
   8e1b6:	4a29      	ldr	r2, [pc, #164]	; (8e25c <Cl_Conductivity_Sensor_Controller+0x20c>)
   8e1b8:	fb82 1203 	smull	r1, r2, r2, r3
   8e1bc:	17db      	asrs	r3, r3, #31
   8e1be:	1ad3      	subs	r3, r2, r3
   8e1c0:	b29a      	uxth	r2, r3
   8e1c2:	4b24      	ldr	r3, [pc, #144]	; (8e254 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e1c4:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e1c6:	4b23      	ldr	r3, [pc, #140]	; (8e254 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e1c8:	881b      	ldrh	r3, [r3, #0]
   8e1ca:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8e1ce:	4293      	cmp	r3, r2
   8e1d0:	d90b      	bls.n	8e1ea <Cl_Conductivity_Sensor_Controller+0x19a>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8e1d2:	4b18      	ldr	r3, [pc, #96]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e1d4:	881b      	ldrh	r3, [r3, #0]
   8e1d6:	3b01      	subs	r3, #1
   8e1d8:	b29a      	uxth	r2, r3
   8e1da:	4b16      	ldr	r3, [pc, #88]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e1dc:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8e1de:	4b15      	ldr	r3, [pc, #84]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e1e0:	881b      	ldrh	r3, [r3, #0]
   8e1e2:	4618      	mov	r0, r3
   8e1e4:	4b14      	ldr	r3, [pc, #80]	; (8e238 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e1e6:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e1e8:	e013      	b.n	8e212 <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
						}
						else if (cond_3sec_avg < 1995 )
   8e1ea:	4b1a      	ldr	r3, [pc, #104]	; (8e254 <Cl_Conductivity_Sensor_Controller+0x204>)
   8e1ec:	881b      	ldrh	r3, [r3, #0]
   8e1ee:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8e1f2:	4293      	cmp	r3, r2
   8e1f4:	d80d      	bhi.n	8e212 <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8e1f6:	4b0f      	ldr	r3, [pc, #60]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e1f8:	881b      	ldrh	r3, [r3, #0]
   8e1fa:	3301      	adds	r3, #1
   8e1fc:	b29a      	uxth	r2, r3
   8e1fe:	4b0d      	ldr	r3, [pc, #52]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e200:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8e202:	4b0c      	ldr	r3, [pc, #48]	; (8e234 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8e204:	881b      	ldrh	r3, [r3, #0]
   8e206:	4618      	mov	r0, r3
   8e208:	4b0b      	ldr	r3, [pc, #44]	; (8e238 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8e20a:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e20c:	e001      	b.n	8e212 <Cl_Conductivity_Sensor_Controller+0x1c2>
			
						}
					}
					else
					{
						return CL_ERROR;
   8e20e:	2304      	movs	r3, #4
   8e210:	e003      	b.n	8e21a <Cl_Conductivity_Sensor_Controller+0x1ca>
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8e212:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8e214:	bf00      	nop
					default:break;
				}
				
			break;
   8e216:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   8e218:	2300      	movs	r3, #0
   8e21a:	4618      	mov	r0, r3
   8e21c:	3714      	adds	r7, #20
   8e21e:	46bd      	mov	sp, r7
   8e220:	bd90      	pop	{r4, r7, pc}
   8e222:	bf00      	nop
   8e224:	f3af 8000 	nop.w
   8e228:	58e21965 	.word	0x58e21965
   8e22c:	3fe9b717 	.word	0x3fe9b717
   8e230:	200725ff 	.word	0x200725ff
   8e234:	20070538 	.word	0x20070538
   8e238:	000979b9 	.word	0x000979b9
   8e23c:	000918fd 	.word	0x000918fd
   8e240:	0008d61d 	.word	0x0008d61d
   8e244:	20072600 	.word	0x20072600
   8e248:	000a2b05 	.word	0x000a2b05
   8e24c:	000a2bd1 	.word	0x000a2bd1
   8e250:	000a3155 	.word	0x000a3155
   8e254:	20072602 	.word	0x20072602
   8e258:	66666667 	.word	0x66666667
   8e25c:	55555556 	.word	0x55555556

0008e260 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8e260:	b580      	push	{r7, lr}
   8e262:	b084      	sub	sp, #16
   8e264:	af00      	add	r7, sp, #0
   8e266:	4603      	mov	r3, r0
   8e268:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8e26a:	2300      	movs	r3, #0
   8e26c:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   8e26e:	2300      	movs	r3, #0
   8e270:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8e272:	4b91      	ldr	r3, [pc, #580]	; (8e4b8 <Cl_Pressure_Controller_Handler+0x258>)
   8e274:	781b      	ldrb	r3, [r3, #0]
   8e276:	2b01      	cmp	r3, #1
   8e278:	f040 8096 	bne.w	8e3a8 <Cl_Pressure_Controller_Handler+0x148>
	{
		switch(Cl_Ps_Event)
   8e27c:	79fb      	ldrb	r3, [r7, #7]
   8e27e:	2b00      	cmp	r3, #0
   8e280:	f000 8110 	beq.w	8e4a4 <Cl_Pressure_Controller_Handler+0x244>
   8e284:	2b01      	cmp	r3, #1
   8e286:	d000      	beq.n	8e28a <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8e288:	e111      	b.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8e28a:	4b8c      	ldr	r3, [pc, #560]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e28c:	881b      	ldrh	r3, [r3, #0]
   8e28e:	2b00      	cmp	r3, #0
   8e290:	d114      	bne.n	8e2bc <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8e292:	498b      	ldr	r1, [pc, #556]	; (8e4c0 <Cl_Pressure_Controller_Handler+0x260>)
   8e294:	200e      	movs	r0, #14
   8e296:	4b8b      	ldr	r3, [pc, #556]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e298:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8e29a:	498b      	ldr	r1, [pc, #556]	; (8e4c8 <Cl_Pressure_Controller_Handler+0x268>)
   8e29c:	200f      	movs	r0, #15
   8e29e:	4b89      	ldr	r3, [pc, #548]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2a0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8e2a2:	498a      	ldr	r1, [pc, #552]	; (8e4cc <Cl_Pressure_Controller_Handler+0x26c>)
   8e2a4:	2010      	movs	r0, #16
   8e2a6:	4b87      	ldr	r3, [pc, #540]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2a8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8e2aa:	4989      	ldr	r1, [pc, #548]	; (8e4d0 <Cl_Pressure_Controller_Handler+0x270>)
   8e2ac:	200b      	movs	r0, #11
   8e2ae:	4b85      	ldr	r3, [pc, #532]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2b0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8e2b2:	4988      	ldr	r1, [pc, #544]	; (8e4d4 <Cl_Pressure_Controller_Handler+0x274>)
   8e2b4:	200b      	movs	r0, #11
   8e2b6:	4b83      	ldr	r3, [pc, #524]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2b8:	4798      	blx	r3
   8e2ba:	e063      	b.n	8e384 <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e2bc:	f107 030c 	add.w	r3, r7, #12
   8e2c0:	4619      	mov	r1, r3
   8e2c2:	200e      	movs	r0, #14
   8e2c4:	4b7f      	ldr	r3, [pc, #508]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2c6:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8e2c8:	4b7d      	ldr	r3, [pc, #500]	; (8e4c0 <Cl_Pressure_Controller_Handler+0x260>)
   8e2ca:	881b      	ldrh	r3, [r3, #0]
   8e2cc:	461a      	mov	r2, r3
   8e2ce:	89bb      	ldrh	r3, [r7, #12]
   8e2d0:	4413      	add	r3, r2
   8e2d2:	4a7a      	ldr	r2, [pc, #488]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e2d4:	8812      	ldrh	r2, [r2, #0]
   8e2d6:	fb93 f3f2 	sdiv	r3, r3, r2
   8e2da:	b29b      	uxth	r3, r3
   8e2dc:	3301      	adds	r3, #1
   8e2de:	b29a      	uxth	r2, r3
   8e2e0:	4b77      	ldr	r3, [pc, #476]	; (8e4c0 <Cl_Pressure_Controller_Handler+0x260>)
   8e2e2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e2e4:	f107 030c 	add.w	r3, r7, #12
   8e2e8:	4619      	mov	r1, r3
   8e2ea:	200f      	movs	r0, #15
   8e2ec:	4b75      	ldr	r3, [pc, #468]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e2ee:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8e2f0:	4b75      	ldr	r3, [pc, #468]	; (8e4c8 <Cl_Pressure_Controller_Handler+0x268>)
   8e2f2:	881b      	ldrh	r3, [r3, #0]
   8e2f4:	461a      	mov	r2, r3
   8e2f6:	89bb      	ldrh	r3, [r7, #12]
   8e2f8:	4413      	add	r3, r2
   8e2fa:	4a70      	ldr	r2, [pc, #448]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e2fc:	8812      	ldrh	r2, [r2, #0]
   8e2fe:	fb93 f3f2 	sdiv	r3, r3, r2
   8e302:	b29b      	uxth	r3, r3
   8e304:	3301      	adds	r3, #1
   8e306:	b29a      	uxth	r2, r3
   8e308:	4b6f      	ldr	r3, [pc, #444]	; (8e4c8 <Cl_Pressure_Controller_Handler+0x268>)
   8e30a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e30c:	f107 030c 	add.w	r3, r7, #12
   8e310:	4619      	mov	r1, r3
   8e312:	2010      	movs	r0, #16
   8e314:	4b6b      	ldr	r3, [pc, #428]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e316:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8e318:	4b6c      	ldr	r3, [pc, #432]	; (8e4cc <Cl_Pressure_Controller_Handler+0x26c>)
   8e31a:	881b      	ldrh	r3, [r3, #0]
   8e31c:	461a      	mov	r2, r3
   8e31e:	89bb      	ldrh	r3, [r7, #12]
   8e320:	4413      	add	r3, r2
   8e322:	4a66      	ldr	r2, [pc, #408]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e324:	8812      	ldrh	r2, [r2, #0]
   8e326:	fb93 f3f2 	sdiv	r3, r3, r2
   8e32a:	b29b      	uxth	r3, r3
   8e32c:	3301      	adds	r3, #1
   8e32e:	b29a      	uxth	r2, r3
   8e330:	4b66      	ldr	r3, [pc, #408]	; (8e4cc <Cl_Pressure_Controller_Handler+0x26c>)
   8e332:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e334:	f107 030c 	add.w	r3, r7, #12
   8e338:	4619      	mov	r1, r3
   8e33a:	200b      	movs	r0, #11
   8e33c:	4b61      	ldr	r3, [pc, #388]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e33e:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8e340:	4b63      	ldr	r3, [pc, #396]	; (8e4d0 <Cl_Pressure_Controller_Handler+0x270>)
   8e342:	881b      	ldrh	r3, [r3, #0]
   8e344:	461a      	mov	r2, r3
   8e346:	89bb      	ldrh	r3, [r7, #12]
   8e348:	4413      	add	r3, r2
   8e34a:	4a5c      	ldr	r2, [pc, #368]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e34c:	8812      	ldrh	r2, [r2, #0]
   8e34e:	fb93 f3f2 	sdiv	r3, r3, r2
   8e352:	b29b      	uxth	r3, r3
   8e354:	3301      	adds	r3, #1
   8e356:	b29a      	uxth	r2, r3
   8e358:	4b5d      	ldr	r3, [pc, #372]	; (8e4d0 <Cl_Pressure_Controller_Handler+0x270>)
   8e35a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e35c:	f107 030c 	add.w	r3, r7, #12
   8e360:	4619      	mov	r1, r3
   8e362:	200b      	movs	r0, #11
   8e364:	4b57      	ldr	r3, [pc, #348]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e366:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8e368:	4b5a      	ldr	r3, [pc, #360]	; (8e4d4 <Cl_Pressure_Controller_Handler+0x274>)
   8e36a:	881b      	ldrh	r3, [r3, #0]
   8e36c:	461a      	mov	r2, r3
   8e36e:	89bb      	ldrh	r3, [r7, #12]
   8e370:	4413      	add	r3, r2
   8e372:	4a52      	ldr	r2, [pc, #328]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e374:	8812      	ldrh	r2, [r2, #0]
   8e376:	fb93 f3f2 	sdiv	r3, r3, r2
   8e37a:	b29b      	uxth	r3, r3
   8e37c:	3301      	adds	r3, #1
   8e37e:	b29a      	uxth	r2, r3
   8e380:	4b54      	ldr	r3, [pc, #336]	; (8e4d4 <Cl_Pressure_Controller_Handler+0x274>)
   8e382:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8e384:	4b4d      	ldr	r3, [pc, #308]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e386:	881b      	ldrh	r3, [r3, #0]
   8e388:	3301      	adds	r3, #1
   8e38a:	b29a      	uxth	r2, r3
   8e38c:	4b4b      	ldr	r3, [pc, #300]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e38e:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8e390:	4b4a      	ldr	r3, [pc, #296]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e392:	881b      	ldrh	r3, [r3, #0]
   8e394:	2b0a      	cmp	r3, #10
   8e396:	f240 8087 	bls.w	8e4a8 <Cl_Pressure_Controller_Handler+0x248>
			{
				counter = 0;
   8e39a:	4b48      	ldr	r3, [pc, #288]	; (8e4bc <Cl_Pressure_Controller_Handler+0x25c>)
   8e39c:	2200      	movs	r2, #0
   8e39e:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8e3a0:	4b45      	ldr	r3, [pc, #276]	; (8e4b8 <Cl_Pressure_Controller_Handler+0x258>)
   8e3a2:	2202      	movs	r2, #2
   8e3a4:	701a      	strb	r2, [r3, #0]
			}
			break;
   8e3a6:	e07f      	b.n	8e4a8 <Cl_Pressure_Controller_Handler+0x248>
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8e3a8:	4b43      	ldr	r3, [pc, #268]	; (8e4b8 <Cl_Pressure_Controller_Handler+0x258>)
   8e3aa:	781b      	ldrb	r3, [r3, #0]
   8e3ac:	2b02      	cmp	r3, #2
   8e3ae:	d17e      	bne.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
   8e3b0:	79fb      	ldrb	r3, [r7, #7]
   8e3b2:	2b00      	cmp	r3, #0
   8e3b4:	d07a      	beq.n	8e4ac <Cl_Pressure_Controller_Handler+0x24c>
   8e3b6:	2b01      	cmp	r3, #1
   8e3b8:	d000      	beq.n	8e3bc <Cl_Pressure_Controller_Handler+0x15c>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8e3ba:	e078      	b.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8e3bc:	f107 030c 	add.w	r3, r7, #12
   8e3c0:	4619      	mov	r1, r3
   8e3c2:	200e      	movs	r0, #14
   8e3c4:	4b3f      	ldr	r3, [pc, #252]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e3c6:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8e3c8:	4b3d      	ldr	r3, [pc, #244]	; (8e4c0 <Cl_Pressure_Controller_Handler+0x260>)
   8e3ca:	881b      	ldrh	r3, [r3, #0]
   8e3cc:	461a      	mov	r2, r3
   8e3ce:	4613      	mov	r3, r2
   8e3d0:	00db      	lsls	r3, r3, #3
   8e3d2:	4413      	add	r3, r2
   8e3d4:	89ba      	ldrh	r2, [r7, #12]
   8e3d6:	4413      	add	r3, r2
   8e3d8:	4a3f      	ldr	r2, [pc, #252]	; (8e4d8 <Cl_Pressure_Controller_Handler+0x278>)
   8e3da:	fb82 1203 	smull	r1, r2, r2, r3
   8e3de:	1092      	asrs	r2, r2, #2
   8e3e0:	17db      	asrs	r3, r3, #31
   8e3e2:	1ad3      	subs	r3, r2, r3
   8e3e4:	b29a      	uxth	r2, r3
   8e3e6:	4b36      	ldr	r3, [pc, #216]	; (8e4c0 <Cl_Pressure_Controller_Handler+0x260>)
   8e3e8:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8e3ea:	f107 030c 	add.w	r3, r7, #12
   8e3ee:	4619      	mov	r1, r3
   8e3f0:	200f      	movs	r0, #15
   8e3f2:	4b34      	ldr	r3, [pc, #208]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e3f4:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8e3f6:	4b34      	ldr	r3, [pc, #208]	; (8e4c8 <Cl_Pressure_Controller_Handler+0x268>)
   8e3f8:	881b      	ldrh	r3, [r3, #0]
   8e3fa:	461a      	mov	r2, r3
   8e3fc:	4613      	mov	r3, r2
   8e3fe:	00db      	lsls	r3, r3, #3
   8e400:	4413      	add	r3, r2
   8e402:	89ba      	ldrh	r2, [r7, #12]
   8e404:	4413      	add	r3, r2
   8e406:	4a34      	ldr	r2, [pc, #208]	; (8e4d8 <Cl_Pressure_Controller_Handler+0x278>)
   8e408:	fb82 1203 	smull	r1, r2, r2, r3
   8e40c:	1092      	asrs	r2, r2, #2
   8e40e:	17db      	asrs	r3, r3, #31
   8e410:	1ad3      	subs	r3, r2, r3
   8e412:	b29a      	uxth	r2, r3
   8e414:	4b2c      	ldr	r3, [pc, #176]	; (8e4c8 <Cl_Pressure_Controller_Handler+0x268>)
   8e416:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8e418:	f107 030c 	add.w	r3, r7, #12
   8e41c:	4619      	mov	r1, r3
   8e41e:	2010      	movs	r0, #16
   8e420:	4b28      	ldr	r3, [pc, #160]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e422:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8e424:	4b29      	ldr	r3, [pc, #164]	; (8e4cc <Cl_Pressure_Controller_Handler+0x26c>)
   8e426:	881b      	ldrh	r3, [r3, #0]
   8e428:	461a      	mov	r2, r3
   8e42a:	4613      	mov	r3, r2
   8e42c:	00db      	lsls	r3, r3, #3
   8e42e:	4413      	add	r3, r2
   8e430:	89ba      	ldrh	r2, [r7, #12]
   8e432:	4413      	add	r3, r2
   8e434:	4a28      	ldr	r2, [pc, #160]	; (8e4d8 <Cl_Pressure_Controller_Handler+0x278>)
   8e436:	fb82 1203 	smull	r1, r2, r2, r3
   8e43a:	1092      	asrs	r2, r2, #2
   8e43c:	17db      	asrs	r3, r3, #31
   8e43e:	1ad3      	subs	r3, r2, r3
   8e440:	b29a      	uxth	r2, r3
   8e442:	4b22      	ldr	r3, [pc, #136]	; (8e4cc <Cl_Pressure_Controller_Handler+0x26c>)
   8e444:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8e446:	f107 030c 	add.w	r3, r7, #12
   8e44a:	4619      	mov	r1, r3
   8e44c:	200b      	movs	r0, #11
   8e44e:	4b1d      	ldr	r3, [pc, #116]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e450:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8e452:	4b1f      	ldr	r3, [pc, #124]	; (8e4d0 <Cl_Pressure_Controller_Handler+0x270>)
   8e454:	881b      	ldrh	r3, [r3, #0]
   8e456:	461a      	mov	r2, r3
   8e458:	4613      	mov	r3, r2
   8e45a:	00db      	lsls	r3, r3, #3
   8e45c:	4413      	add	r3, r2
   8e45e:	89ba      	ldrh	r2, [r7, #12]
   8e460:	4413      	add	r3, r2
   8e462:	4a1d      	ldr	r2, [pc, #116]	; (8e4d8 <Cl_Pressure_Controller_Handler+0x278>)
   8e464:	fb82 1203 	smull	r1, r2, r2, r3
   8e468:	1092      	asrs	r2, r2, #2
   8e46a:	17db      	asrs	r3, r3, #31
   8e46c:	1ad3      	subs	r3, r2, r3
   8e46e:	b29a      	uxth	r2, r3
   8e470:	4b17      	ldr	r3, [pc, #92]	; (8e4d0 <Cl_Pressure_Controller_Handler+0x270>)
   8e472:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8e474:	f107 030c 	add.w	r3, r7, #12
   8e478:	4619      	mov	r1, r3
   8e47a:	200c      	movs	r0, #12
   8e47c:	4b11      	ldr	r3, [pc, #68]	; (8e4c4 <Cl_Pressure_Controller_Handler+0x264>)
   8e47e:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8e480:	4b14      	ldr	r3, [pc, #80]	; (8e4d4 <Cl_Pressure_Controller_Handler+0x274>)
   8e482:	881b      	ldrh	r3, [r3, #0]
   8e484:	461a      	mov	r2, r3
   8e486:	4613      	mov	r3, r2
   8e488:	00db      	lsls	r3, r3, #3
   8e48a:	4413      	add	r3, r2
   8e48c:	89ba      	ldrh	r2, [r7, #12]
   8e48e:	4413      	add	r3, r2
   8e490:	4a11      	ldr	r2, [pc, #68]	; (8e4d8 <Cl_Pressure_Controller_Handler+0x278>)
   8e492:	fb82 1203 	smull	r1, r2, r2, r3
   8e496:	1092      	asrs	r2, r2, #2
   8e498:	17db      	asrs	r3, r3, #31
   8e49a:	1ad3      	subs	r3, r2, r3
   8e49c:	b29a      	uxth	r2, r3
   8e49e:	4b0d      	ldr	r3, [pc, #52]	; (8e4d4 <Cl_Pressure_Controller_Handler+0x274>)
   8e4a0:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8e4a2:	e004      	b.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e4a4:	bf00      	nop
   8e4a6:	e002      	b.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
			if(counter > 10)
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
   8e4a8:	bf00      	nop
   8e4aa:	e000      	b.n	8e4ae <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8e4ac:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8e4ae:	7bfb      	ldrb	r3, [r7, #15]
}
   8e4b0:	4618      	mov	r0, r3
   8e4b2:	3710      	adds	r7, #16
   8e4b4:	46bd      	mov	sp, r7
   8e4b6:	bd80      	pop	{r7, pc}
   8e4b8:	20072610 	.word	0x20072610
   8e4bc:	2007260e 	.word	0x2007260e
   8e4c0:	20072604 	.word	0x20072604
   8e4c4:	0008d61d 	.word	0x0008d61d
   8e4c8:	20072606 	.word	0x20072606
   8e4cc:	20072608 	.word	0x20072608
   8e4d0:	2007260a 	.word	0x2007260a
   8e4d4:	2007260c 	.word	0x2007260c
   8e4d8:	66666667 	.word	0x66666667

0008e4dc <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   8e4dc:	b480      	push	{r7}
   8e4de:	b083      	sub	sp, #12
   8e4e0:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8e4e2:	2300      	movs	r3, #0
   8e4e4:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8e4e6:	4b0c      	ldr	r3, [pc, #48]	; (8e518 <Cl_Pressure_Controller_Init+0x3c>)
   8e4e8:	2200      	movs	r2, #0
   8e4ea:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8e4ec:	4b0b      	ldr	r3, [pc, #44]	; (8e51c <Cl_Pressure_Controller_Init+0x40>)
   8e4ee:	2200      	movs	r2, #0
   8e4f0:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8e4f2:	4b0b      	ldr	r3, [pc, #44]	; (8e520 <Cl_Pressure_Controller_Init+0x44>)
   8e4f4:	2200      	movs	r2, #0
   8e4f6:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8e4f8:	4b0a      	ldr	r3, [pc, #40]	; (8e524 <Cl_Pressure_Controller_Init+0x48>)
   8e4fa:	2200      	movs	r2, #0
   8e4fc:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8e4fe:	4b0a      	ldr	r3, [pc, #40]	; (8e528 <Cl_Pressure_Controller_Init+0x4c>)
   8e500:	2200      	movs	r2, #0
   8e502:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8e504:	4b09      	ldr	r3, [pc, #36]	; (8e52c <Cl_Pressure_Controller_Init+0x50>)
   8e506:	2201      	movs	r2, #1
   8e508:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8e50a:	79fb      	ldrb	r3, [r7, #7]
   8e50c:	4618      	mov	r0, r3
   8e50e:	370c      	adds	r7, #12
   8e510:	46bd      	mov	sp, r7
   8e512:	bc80      	pop	{r7}
   8e514:	4770      	bx	lr
   8e516:	bf00      	nop
   8e518:	20072604 	.word	0x20072604
   8e51c:	20072606 	.word	0x20072606
   8e520:	20072608 	.word	0x20072608
   8e524:	2007260a 	.word	0x2007260a
   8e528:	2007260c 	.word	0x2007260c
   8e52c:	20072610 	.word	0x20072610

0008e530 <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   8e530:	b590      	push	{r4, r7, lr}
   8e532:	b085      	sub	sp, #20
   8e534:	af00      	add	r7, sp, #0
   8e536:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   8e538:	f04f 0300 	mov.w	r3, #0
   8e53c:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8e53e:	2300      	movs	r3, #0
   8e540:	60fb      	str	r3, [r7, #12]
   8e542:	e075      	b.n	8e630 <res_temp_lookuptable+0x100>
	{
		if (res == res_temp[i].resistance)
   8e544:	4b3e      	ldr	r3, [pc, #248]	; (8e640 <res_temp_lookuptable+0x110>)
   8e546:	6878      	ldr	r0, [r7, #4]
   8e548:	4798      	blx	r3
   8e54a:	4a3e      	ldr	r2, [pc, #248]	; (8e644 <res_temp_lookuptable+0x114>)
   8e54c:	68fb      	ldr	r3, [r7, #12]
   8e54e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e552:	4b3d      	ldr	r3, [pc, #244]	; (8e648 <res_temp_lookuptable+0x118>)
   8e554:	4611      	mov	r1, r2
   8e556:	4798      	blx	r3
   8e558:	4603      	mov	r3, r0
   8e55a:	2b00      	cmp	r3, #0
   8e55c:	d007      	beq.n	8e56e <res_temp_lookuptable+0x3e>
		{
			res_temp_value=res_temp[i].temperature;
   8e55e:	4a39      	ldr	r2, [pc, #228]	; (8e644 <res_temp_lookuptable+0x114>)
   8e560:	68fb      	ldr	r3, [r7, #12]
   8e562:	00db      	lsls	r3, r3, #3
   8e564:	4413      	add	r3, r2
   8e566:	685b      	ldr	r3, [r3, #4]
   8e568:	4a38      	ldr	r2, [pc, #224]	; (8e64c <res_temp_lookuptable+0x11c>)
   8e56a:	6013      	str	r3, [r2, #0]
			break;
   8e56c:	e063      	b.n	8e636 <res_temp_lookuptable+0x106>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   8e56e:	4b34      	ldr	r3, [pc, #208]	; (8e640 <res_temp_lookuptable+0x110>)
   8e570:	6878      	ldr	r0, [r7, #4]
   8e572:	4798      	blx	r3
   8e574:	4a33      	ldr	r2, [pc, #204]	; (8e644 <res_temp_lookuptable+0x114>)
   8e576:	68fb      	ldr	r3, [r7, #12]
   8e578:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e57c:	4b34      	ldr	r3, [pc, #208]	; (8e650 <res_temp_lookuptable+0x120>)
   8e57e:	4611      	mov	r1, r2
   8e580:	4798      	blx	r3
   8e582:	4603      	mov	r3, r0
   8e584:	2b00      	cmp	r3, #0
   8e586:	d050      	beq.n	8e62a <res_temp_lookuptable+0xfa>
   8e588:	4b2d      	ldr	r3, [pc, #180]	; (8e640 <res_temp_lookuptable+0x110>)
   8e58a:	6878      	ldr	r0, [r7, #4]
   8e58c:	4798      	blx	r3
   8e58e:	68fb      	ldr	r3, [r7, #12]
   8e590:	3301      	adds	r3, #1
   8e592:	4a2c      	ldr	r2, [pc, #176]	; (8e644 <res_temp_lookuptable+0x114>)
   8e594:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e598:	4b2e      	ldr	r3, [pc, #184]	; (8e654 <res_temp_lookuptable+0x124>)
   8e59a:	4611      	mov	r1, r2
   8e59c:	4798      	blx	r3
   8e59e:	4603      	mov	r3, r0
   8e5a0:	2b00      	cmp	r3, #0
   8e5a2:	d042      	beq.n	8e62a <res_temp_lookuptable+0xfa>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   8e5a4:	68fb      	ldr	r3, [r7, #12]
   8e5a6:	3301      	adds	r3, #1
   8e5a8:	4a26      	ldr	r2, [pc, #152]	; (8e644 <res_temp_lookuptable+0x114>)
   8e5aa:	00db      	lsls	r3, r3, #3
   8e5ac:	4413      	add	r3, r2
   8e5ae:	6858      	ldr	r0, [r3, #4]
   8e5b0:	4a24      	ldr	r2, [pc, #144]	; (8e644 <res_temp_lookuptable+0x114>)
   8e5b2:	68fb      	ldr	r3, [r7, #12]
   8e5b4:	00db      	lsls	r3, r3, #3
   8e5b6:	4413      	add	r3, r2
   8e5b8:	685a      	ldr	r2, [r3, #4]
   8e5ba:	4b27      	ldr	r3, [pc, #156]	; (8e658 <res_temp_lookuptable+0x128>)
   8e5bc:	4611      	mov	r1, r2
   8e5be:	4798      	blx	r3
   8e5c0:	4603      	mov	r3, r0
   8e5c2:	461c      	mov	r4, r3
   8e5c4:	68fb      	ldr	r3, [r7, #12]
   8e5c6:	3301      	adds	r3, #1
   8e5c8:	4a1e      	ldr	r2, [pc, #120]	; (8e644 <res_temp_lookuptable+0x114>)
   8e5ca:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   8e5ce:	4a1d      	ldr	r2, [pc, #116]	; (8e644 <res_temp_lookuptable+0x114>)
   8e5d0:	68fb      	ldr	r3, [r7, #12]
   8e5d2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e5d6:	4b20      	ldr	r3, [pc, #128]	; (8e658 <res_temp_lookuptable+0x128>)
   8e5d8:	4611      	mov	r1, r2
   8e5da:	4798      	blx	r3
   8e5dc:	4603      	mov	r3, r0
   8e5de:	461a      	mov	r2, r3
   8e5e0:	4b1e      	ldr	r3, [pc, #120]	; (8e65c <res_temp_lookuptable+0x12c>)
   8e5e2:	4611      	mov	r1, r2
   8e5e4:	4620      	mov	r0, r4
   8e5e6:	4798      	blx	r3
   8e5e8:	4603      	mov	r3, r0
   8e5ea:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   8e5ec:	4b14      	ldr	r3, [pc, #80]	; (8e640 <res_temp_lookuptable+0x110>)
   8e5ee:	6878      	ldr	r0, [r7, #4]
   8e5f0:	4798      	blx	r3
   8e5f2:	4a14      	ldr	r2, [pc, #80]	; (8e644 <res_temp_lookuptable+0x114>)
   8e5f4:	68fb      	ldr	r3, [r7, #12]
   8e5f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8e5fa:	4b17      	ldr	r3, [pc, #92]	; (8e658 <res_temp_lookuptable+0x128>)
   8e5fc:	4611      	mov	r1, r2
   8e5fe:	4798      	blx	r3
   8e600:	4603      	mov	r3, r0
   8e602:	461a      	mov	r2, r3
   8e604:	4b16      	ldr	r3, [pc, #88]	; (8e660 <res_temp_lookuptable+0x130>)
   8e606:	68b9      	ldr	r1, [r7, #8]
   8e608:	4610      	mov	r0, r2
   8e60a:	4798      	blx	r3
   8e60c:	4603      	mov	r3, r0
   8e60e:	4618      	mov	r0, r3
   8e610:	4a0c      	ldr	r2, [pc, #48]	; (8e644 <res_temp_lookuptable+0x114>)
   8e612:	68fb      	ldr	r3, [r7, #12]
   8e614:	00db      	lsls	r3, r3, #3
   8e616:	4413      	add	r3, r2
   8e618:	685a      	ldr	r2, [r3, #4]
   8e61a:	4b12      	ldr	r3, [pc, #72]	; (8e664 <res_temp_lookuptable+0x134>)
   8e61c:	4611      	mov	r1, r2
   8e61e:	4798      	blx	r3
   8e620:	4603      	mov	r3, r0
   8e622:	461a      	mov	r2, r3
   8e624:	4b09      	ldr	r3, [pc, #36]	; (8e64c <res_temp_lookuptable+0x11c>)
   8e626:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   8e628:	e005      	b.n	8e636 <res_temp_lookuptable+0x106>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8e62a:	68fb      	ldr	r3, [r7, #12]
   8e62c:	3301      	adds	r3, #1
   8e62e:	60fb      	str	r3, [r7, #12]
   8e630:	68fb      	ldr	r3, [r7, #12]
   8e632:	2b95      	cmp	r3, #149	; 0x95
   8e634:	dd86      	ble.n	8e544 <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   8e636:	bf00      	nop
   8e638:	3714      	adds	r7, #20
   8e63a:	46bd      	mov	sp, r7
   8e63c:	bd90      	pop	{r4, r7, pc}
   8e63e:	bf00      	nop
   8e640:	000a33a1 	.word	0x000a33a1
   8e644:	2007053c 	.word	0x2007053c
   8e648:	000a3779 	.word	0x000a3779
   8e64c:	20072624 	.word	0x20072624
   8e650:	000a37c9 	.word	0x000a37c9
   8e654:	000a378d 	.word	0x000a378d
   8e658:	000a323d 	.word	0x000a323d
   8e65c:	000a35b9 	.word	0x000a35b9
   8e660:	000a3451 	.word	0x000a3451
   8e664:	000a3241 	.word	0x000a3241

0008e668 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8e668:	b590      	push	{r4, r7, lr}
   8e66a:	b08b      	sub	sp, #44	; 0x2c
   8e66c:	af00      	add	r7, sp, #0
   8e66e:	4603      	mov	r3, r0
   8e670:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   8e672:	f04f 0300 	mov.w	r3, #0
   8e676:	627b      	str	r3, [r7, #36]	; 0x24
   8e678:	f04f 0300 	mov.w	r3, #0
   8e67c:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8e67e:	2300      	movs	r3, #0
   8e680:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   8e682:	2300      	movs	r3, #0
   8e684:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   8e686:	2300      	movs	r3, #0
   8e688:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8e68a:	4b90      	ldr	r3, [pc, #576]	; (8e8cc <Cl_Temperature_Controller_Handler+0x264>)
   8e68c:	781b      	ldrb	r3, [r3, #0]
   8e68e:	2b01      	cmp	r3, #1
   8e690:	f040 8090 	bne.w	8e7b4 <Cl_Temperature_Controller_Handler+0x14c>
	{
			switch(Cl_Tc_Event)
   8e694:	79fb      	ldrb	r3, [r7, #7]
   8e696:	2b01      	cmp	r3, #1
   8e698:	d005      	beq.n	8e6a6 <Cl_Temperature_Controller_Handler+0x3e>
   8e69a:	2b03      	cmp	r3, #3
   8e69c:	d076      	beq.n	8e78c <Cl_Temperature_Controller_Handler+0x124>
   8e69e:	2b00      	cmp	r3, #0
   8e6a0:	f000 8166 	beq.w	8e970 <Cl_Temperature_Controller_Handler+0x308>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   8e6a4:	e169      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8e6a6:	4b8a      	ldr	r3, [pc, #552]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e6a8:	881b      	ldrh	r3, [r3, #0]
   8e6aa:	2b00      	cmp	r3, #0
   8e6ac:	d10c      	bne.n	8e6c8 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8e6ae:	4989      	ldr	r1, [pc, #548]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e6b0:	2012      	movs	r0, #18
   8e6b2:	4b89      	ldr	r3, [pc, #548]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e6b4:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8e6b6:	4989      	ldr	r1, [pc, #548]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e6b8:	2013      	movs	r0, #19
   8e6ba:	4b87      	ldr	r3, [pc, #540]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e6bc:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8e6be:	4988      	ldr	r1, [pc, #544]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e6c0:	2014      	movs	r0, #20
   8e6c2:	4b85      	ldr	r3, [pc, #532]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e6c4:	4798      	blx	r3
   8e6c6:	e04f      	b.n	8e768 <Cl_Temperature_Controller_Handler+0x100>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8e6c8:	f107 0314 	add.w	r3, r7, #20
   8e6cc:	4619      	mov	r1, r3
   8e6ce:	2012      	movs	r0, #18
   8e6d0:	4b81      	ldr	r3, [pc, #516]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e6d2:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8e6d4:	4b7f      	ldr	r3, [pc, #508]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e6d6:	881b      	ldrh	r3, [r3, #0]
   8e6d8:	461a      	mov	r2, r3
   8e6da:	8abb      	ldrh	r3, [r7, #20]
   8e6dc:	4413      	add	r3, r2
   8e6de:	4a7c      	ldr	r2, [pc, #496]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e6e0:	8812      	ldrh	r2, [r2, #0]
   8e6e2:	fb93 f3f2 	sdiv	r3, r3, r2
   8e6e6:	b29b      	uxth	r3, r3
   8e6e8:	3301      	adds	r3, #1
   8e6ea:	b29a      	uxth	r2, r3
   8e6ec:	4b79      	ldr	r3, [pc, #484]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e6ee:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8e6f0:	f107 0314 	add.w	r3, r7, #20
   8e6f4:	4619      	mov	r1, r3
   8e6f6:	2013      	movs	r0, #19
   8e6f8:	4b77      	ldr	r3, [pc, #476]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e6fa:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8e6fc:	4b77      	ldr	r3, [pc, #476]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e6fe:	881b      	ldrh	r3, [r3, #0]
   8e700:	461a      	mov	r2, r3
   8e702:	8abb      	ldrh	r3, [r7, #20]
   8e704:	4413      	add	r3, r2
   8e706:	4a72      	ldr	r2, [pc, #456]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e708:	8812      	ldrh	r2, [r2, #0]
   8e70a:	fb93 f3f2 	sdiv	r3, r3, r2
   8e70e:	b29b      	uxth	r3, r3
   8e710:	3301      	adds	r3, #1
   8e712:	b29a      	uxth	r2, r3
   8e714:	4b71      	ldr	r3, [pc, #452]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e716:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8e718:	f107 0314 	add.w	r3, r7, #20
   8e71c:	4619      	mov	r1, r3
   8e71e:	2014      	movs	r0, #20
   8e720:	4b6d      	ldr	r3, [pc, #436]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e722:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8e724:	8abb      	ldrh	r3, [r7, #20]
   8e726:	461a      	mov	r2, r3
   8e728:	4b6e      	ldr	r3, [pc, #440]	; (8e8e4 <Cl_Temperature_Controller_Handler+0x27c>)
   8e72a:	4610      	mov	r0, r2
   8e72c:	4798      	blx	r3
   8e72e:	4b6c      	ldr	r3, [pc, #432]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e730:	681a      	ldr	r2, [r3, #0]
   8e732:	4b6d      	ldr	r3, [pc, #436]	; (8e8e8 <Cl_Temperature_Controller_Handler+0x280>)
   8e734:	4611      	mov	r1, r2
   8e736:	4798      	blx	r3
   8e738:	4603      	mov	r3, r0
   8e73a:	461c      	mov	r4, r3
   8e73c:	4b64      	ldr	r3, [pc, #400]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e73e:	881b      	ldrh	r3, [r3, #0]
   8e740:	461a      	mov	r2, r3
   8e742:	4b68      	ldr	r3, [pc, #416]	; (8e8e4 <Cl_Temperature_Controller_Handler+0x27c>)
   8e744:	4610      	mov	r0, r2
   8e746:	4798      	blx	r3
   8e748:	4602      	mov	r2, r0
   8e74a:	4b68      	ldr	r3, [pc, #416]	; (8e8ec <Cl_Temperature_Controller_Handler+0x284>)
   8e74c:	4611      	mov	r1, r2
   8e74e:	4620      	mov	r0, r4
   8e750:	4798      	blx	r3
   8e752:	4603      	mov	r3, r0
   8e754:	461a      	mov	r2, r3
   8e756:	4b64      	ldr	r3, [pc, #400]	; (8e8e8 <Cl_Temperature_Controller_Handler+0x280>)
   8e758:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8e75c:	4610      	mov	r0, r2
   8e75e:	4798      	blx	r3
   8e760:	4603      	mov	r3, r0
   8e762:	461a      	mov	r2, r3
   8e764:	4b5e      	ldr	r3, [pc, #376]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e766:	601a      	str	r2, [r3, #0]
				}

				counter++;
   8e768:	4b59      	ldr	r3, [pc, #356]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e76a:	881b      	ldrh	r3, [r3, #0]
   8e76c:	3301      	adds	r3, #1
   8e76e:	b29a      	uxth	r2, r3
   8e770:	4b57      	ldr	r3, [pc, #348]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e772:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   8e774:	4b56      	ldr	r3, [pc, #344]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e776:	881b      	ldrh	r3, [r3, #0]
   8e778:	2b0a      	cmp	r3, #10
   8e77a:	f240 80fb 	bls.w	8e974 <Cl_Temperature_Controller_Handler+0x30c>
				{
					counter = 0;
   8e77e:	4b54      	ldr	r3, [pc, #336]	; (8e8d0 <Cl_Temperature_Controller_Handler+0x268>)
   8e780:	2200      	movs	r2, #0
   8e782:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   8e784:	4b51      	ldr	r3, [pc, #324]	; (8e8cc <Cl_Temperature_Controller_Handler+0x264>)
   8e786:	2202      	movs	r2, #2
   8e788:	701a      	strb	r2, [r3, #0]
				}
				break;
   8e78a:	e0f3      	b.n	8e974 <Cl_Temperature_Controller_Handler+0x30c>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   8e78c:	f107 0312 	add.w	r3, r7, #18
   8e790:	4618      	mov	r0, r3
   8e792:	4b57      	ldr	r3, [pc, #348]	; (8e8f0 <Cl_Temperature_Controller_Handler+0x288>)
   8e794:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   8e796:	8a7b      	ldrh	r3, [r7, #18]
   8e798:	461a      	mov	r2, r3
   8e79a:	4b52      	ldr	r3, [pc, #328]	; (8e8e4 <Cl_Temperature_Controller_Handler+0x27c>)
   8e79c:	4610      	mov	r0, r2
   8e79e:	4798      	blx	r3
   8e7a0:	4b4f      	ldr	r3, [pc, #316]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e7a2:	681a      	ldr	r2, [r3, #0]
   8e7a4:	4b53      	ldr	r3, [pc, #332]	; (8e8f4 <Cl_Temperature_Controller_Handler+0x28c>)
   8e7a6:	4611      	mov	r1, r2
   8e7a8:	4798      	blx	r3
   8e7aa:	4603      	mov	r3, r0
   8e7ac:	461a      	mov	r2, r3
   8e7ae:	4b52      	ldr	r3, [pc, #328]	; (8e8f8 <Cl_Temperature_Controller_Handler+0x290>)
   8e7b0:	601a      	str	r2, [r3, #0]
				break;
   8e7b2:	e0e2      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   8e7b4:	4b45      	ldr	r3, [pc, #276]	; (8e8cc <Cl_Temperature_Controller_Handler+0x264>)
   8e7b6:	781b      	ldrb	r3, [r3, #0]
   8e7b8:	2b02      	cmp	r3, #2
   8e7ba:	f040 80de 	bne.w	8e97a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
   8e7be:	79fb      	ldrb	r3, [r7, #7]
   8e7c0:	2b01      	cmp	r3, #1
   8e7c2:	d006      	beq.n	8e7d2 <Cl_Temperature_Controller_Handler+0x16a>
   8e7c4:	2b03      	cmp	r3, #3
   8e7c6:	f000 80a9 	beq.w	8e91c <Cl_Temperature_Controller_Handler+0x2b4>
   8e7ca:	2b00      	cmp	r3, #0
   8e7cc:	f000 80d4 	beq.w	8e978 <Cl_Temperature_Controller_Handler+0x310>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   8e7d0:	e0d3      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8e7d2:	f107 0314 	add.w	r3, r7, #20
   8e7d6:	4619      	mov	r1, r3
   8e7d8:	2012      	movs	r0, #18
   8e7da:	4b3f      	ldr	r3, [pc, #252]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e7dc:	4798      	blx	r3
				
////				(402 *100* temp_val)/(2*32768);								// resistance of PT100
//				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
//				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
//				Temp1 = Temp1 - 2.5 + 0.25;										// sensor offset 
				Temp1 = (float)temp_val /100;
   8e7de:	8aba      	ldrh	r2, [r7, #20]
   8e7e0:	4b46      	ldr	r3, [pc, #280]	; (8e8fc <Cl_Temperature_Controller_Handler+0x294>)
   8e7e2:	4610      	mov	r0, r2
   8e7e4:	4798      	blx	r3
   8e7e6:	4602      	mov	r2, r0
   8e7e8:	4b40      	ldr	r3, [pc, #256]	; (8e8ec <Cl_Temperature_Controller_Handler+0x284>)
   8e7ea:	4945      	ldr	r1, [pc, #276]	; (8e900 <Cl_Temperature_Controller_Handler+0x298>)
   8e7ec:	4610      	mov	r0, r2
   8e7ee:	4798      	blx	r3
   8e7f0:	4603      	mov	r3, r0
   8e7f2:	461a      	mov	r2, r3
   8e7f4:	4b43      	ldr	r3, [pc, #268]	; (8e904 <Cl_Temperature_Controller_Handler+0x29c>)
   8e7f6:	4610      	mov	r0, r2
   8e7f8:	4798      	blx	r3
   8e7fa:	4603      	mov	r3, r0
   8e7fc:	b29a      	uxth	r2, r3
   8e7fe:	4b35      	ldr	r3, [pc, #212]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e800:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   8e802:	4b34      	ldr	r3, [pc, #208]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e804:	881b      	ldrh	r3, [r3, #0]
   8e806:	461a      	mov	r2, r3
   8e808:	4613      	mov	r3, r2
   8e80a:	00db      	lsls	r3, r3, #3
   8e80c:	4413      	add	r3, r2
   8e80e:	8aba      	ldrh	r2, [r7, #20]
   8e810:	4413      	add	r3, r2
   8e812:	4a3d      	ldr	r2, [pc, #244]	; (8e908 <Cl_Temperature_Controller_Handler+0x2a0>)
   8e814:	fb82 1203 	smull	r1, r2, r2, r3
   8e818:	1092      	asrs	r2, r2, #2
   8e81a:	17db      	asrs	r3, r3, #31
   8e81c:	1ad3      	subs	r3, r2, r3
   8e81e:	b29a      	uxth	r2, r3
   8e820:	4b2c      	ldr	r3, [pc, #176]	; (8e8d4 <Cl_Temperature_Controller_Handler+0x26c>)
   8e822:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8e824:	f107 0314 	add.w	r3, r7, #20
   8e828:	4619      	mov	r1, r3
   8e82a:	2013      	movs	r0, #19
   8e82c:	4b2a      	ldr	r3, [pc, #168]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e82e:	4798      	blx	r3
// 				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
// 				Temp2 = Temp2 - 0.4;                                            // sensor offset
				Temp2 = (float)temp_val /100;
   8e830:	8aba      	ldrh	r2, [r7, #20]
   8e832:	4b32      	ldr	r3, [pc, #200]	; (8e8fc <Cl_Temperature_Controller_Handler+0x294>)
   8e834:	4610      	mov	r0, r2
   8e836:	4798      	blx	r3
   8e838:	4602      	mov	r2, r0
   8e83a:	4b2c      	ldr	r3, [pc, #176]	; (8e8ec <Cl_Temperature_Controller_Handler+0x284>)
   8e83c:	4930      	ldr	r1, [pc, #192]	; (8e900 <Cl_Temperature_Controller_Handler+0x298>)
   8e83e:	4610      	mov	r0, r2
   8e840:	4798      	blx	r3
   8e842:	4603      	mov	r3, r0
   8e844:	461a      	mov	r2, r3
   8e846:	4b2f      	ldr	r3, [pc, #188]	; (8e904 <Cl_Temperature_Controller_Handler+0x29c>)
   8e848:	4610      	mov	r0, r2
   8e84a:	4798      	blx	r3
   8e84c:	4603      	mov	r3, r0
   8e84e:	b29a      	uxth	r2, r3
   8e850:	4b22      	ldr	r3, [pc, #136]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e852:	801a      	strh	r2, [r3, #0]
				Temp2 = (Temp2 *9 + temp_val)/10;
   8e854:	4b21      	ldr	r3, [pc, #132]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e856:	881b      	ldrh	r3, [r3, #0]
   8e858:	461a      	mov	r2, r3
   8e85a:	4613      	mov	r3, r2
   8e85c:	00db      	lsls	r3, r3, #3
   8e85e:	4413      	add	r3, r2
   8e860:	8aba      	ldrh	r2, [r7, #20]
   8e862:	4413      	add	r3, r2
   8e864:	4a28      	ldr	r2, [pc, #160]	; (8e908 <Cl_Temperature_Controller_Handler+0x2a0>)
   8e866:	fb82 1203 	smull	r1, r2, r2, r3
   8e86a:	1092      	asrs	r2, r2, #2
   8e86c:	17db      	asrs	r3, r3, #31
   8e86e:	1ad3      	subs	r3, r2, r3
   8e870:	b29a      	uxth	r2, r3
   8e872:	4b1a      	ldr	r3, [pc, #104]	; (8e8dc <Cl_Temperature_Controller_Handler+0x274>)
   8e874:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8e876:	f107 0314 	add.w	r3, r7, #20
   8e87a:	4619      	mov	r1, r3
   8e87c:	2014      	movs	r0, #20
   8e87e:	4b16      	ldr	r3, [pc, #88]	; (8e8d8 <Cl_Temperature_Controller_Handler+0x270>)
   8e880:	4798      	blx	r3
// 				Temp3 = Temp3 - 0.4 ;										// sensor offset 
// 				
// 				
// // 				temp = temp_val * 0.8036;
// // 				calibration_tmp(temp,TS3);
				Temp3 = (float)temp_val /100;
   8e882:	8aba      	ldrh	r2, [r7, #20]
   8e884:	4b1d      	ldr	r3, [pc, #116]	; (8e8fc <Cl_Temperature_Controller_Handler+0x294>)
   8e886:	4610      	mov	r0, r2
   8e888:	4798      	blx	r3
   8e88a:	4602      	mov	r2, r0
   8e88c:	4b17      	ldr	r3, [pc, #92]	; (8e8ec <Cl_Temperature_Controller_Handler+0x284>)
   8e88e:	491c      	ldr	r1, [pc, #112]	; (8e900 <Cl_Temperature_Controller_Handler+0x298>)
   8e890:	4610      	mov	r0, r2
   8e892:	4798      	blx	r3
   8e894:	4603      	mov	r3, r0
   8e896:	461a      	mov	r2, r3
   8e898:	4b11      	ldr	r3, [pc, #68]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e89a:	601a      	str	r2, [r3, #0]
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   8e89c:	4b10      	ldr	r3, [pc, #64]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e89e:	681a      	ldr	r2, [r3, #0]
   8e8a0:	4b1a      	ldr	r3, [pc, #104]	; (8e90c <Cl_Temperature_Controller_Handler+0x2a4>)
   8e8a2:	491b      	ldr	r1, [pc, #108]	; (8e910 <Cl_Temperature_Controller_Handler+0x2a8>)
   8e8a4:	4610      	mov	r0, r2
   8e8a6:	4798      	blx	r3
   8e8a8:	4603      	mov	r3, r0
   8e8aa:	4618      	mov	r0, r3
   8e8ac:	4b19      	ldr	r3, [pc, #100]	; (8e914 <Cl_Temperature_Controller_Handler+0x2ac>)
   8e8ae:	681a      	ldr	r2, [r3, #0]
   8e8b0:	4b0d      	ldr	r3, [pc, #52]	; (8e8e8 <Cl_Temperature_Controller_Handler+0x280>)
   8e8b2:	4611      	mov	r1, r2
   8e8b4:	4798      	blx	r3
   8e8b6:	4603      	mov	r3, r0
   8e8b8:	461a      	mov	r2, r3
   8e8ba:	4b0c      	ldr	r3, [pc, #48]	; (8e8ec <Cl_Temperature_Controller_Handler+0x284>)
   8e8bc:	4916      	ldr	r1, [pc, #88]	; (8e918 <Cl_Temperature_Controller_Handler+0x2b0>)
   8e8be:	4610      	mov	r0, r2
   8e8c0:	4798      	blx	r3
   8e8c2:	4603      	mov	r3, r0
   8e8c4:	461a      	mov	r2, r3
   8e8c6:	4b06      	ldr	r3, [pc, #24]	; (8e8e0 <Cl_Temperature_Controller_Handler+0x278>)
   8e8c8:	601a      	str	r2, [r3, #0]
				break;
   8e8ca:	e056      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
   8e8cc:	20072620 	.word	0x20072620
   8e8d0:	20072616 	.word	0x20072616
   8e8d4:	20072612 	.word	0x20072612
   8e8d8:	0008d61d 	.word	0x0008d61d
   8e8dc:	20072614 	.word	0x20072614
   8e8e0:	20072618 	.word	0x20072618
   8e8e4:	000a33a9 	.word	0x000a33a9
   8e8e8:	000a3241 	.word	0x000a3241
   8e8ec:	000a35b9 	.word	0x000a35b9
   8e8f0:	000975bd 	.word	0x000975bd
   8e8f4:	000a323d 	.word	0x000a323d
   8e8f8:	2007261c 	.word	0x2007261c
   8e8fc:	000a33a1 	.word	0x000a33a1
   8e900:	42c80000 	.word	0x42c80000
   8e904:	000a3829 	.word	0x000a3829
   8e908:	66666667 	.word	0x66666667
   8e90c:	000a3451 	.word	0x000a3451
   8e910:	40a00000 	.word	0x40a00000
   8e914:	20071670 	.word	0x20071670
   8e918:	40c00000 	.word	0x40c00000
				case TS_EVENT_5SEC:
				data = 0;
   8e91c:	2300      	movs	r3, #0
   8e91e:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   8e920:	f04f 0300 	mov.w	r3, #0
   8e924:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   8e926:	2300      	movs	r3, #0
   8e928:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   8e92a:	f107 0312 	add.w	r3, r7, #18
   8e92e:	4619      	mov	r1, r3
   8e930:	2014      	movs	r0, #20
   8e932:	4b14      	ldr	r3, [pc, #80]	; (8e984 <Cl_Temperature_Controller_Handler+0x31c>)
   8e934:	4798      	blx	r3
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				temp = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4;										// sensor offset
				temp = (float)data /100;
   8e936:	8a7a      	ldrh	r2, [r7, #18]
   8e938:	4b13      	ldr	r3, [pc, #76]	; (8e988 <Cl_Temperature_Controller_Handler+0x320>)
   8e93a:	4610      	mov	r0, r2
   8e93c:	4798      	blx	r3
   8e93e:	4602      	mov	r2, r0
   8e940:	4b12      	ldr	r3, [pc, #72]	; (8e98c <Cl_Temperature_Controller_Handler+0x324>)
   8e942:	4913      	ldr	r1, [pc, #76]	; (8e990 <Cl_Temperature_Controller_Handler+0x328>)
   8e944:	4610      	mov	r0, r2
   8e946:	4798      	blx	r3
   8e948:	4603      	mov	r3, r0
   8e94a:	61bb      	str	r3, [r7, #24]
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8e94c:	2300      	movs	r3, #0
   8e94e:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   8e950:	4b10      	ldr	r3, [pc, #64]	; (8e994 <Cl_Temperature_Controller_Handler+0x32c>)
   8e952:	69b8      	ldr	r0, [r7, #24]
   8e954:	4798      	blx	r3
   8e956:	4603      	mov	r3, r0
   8e958:	b29b      	uxth	r3, r3
   8e95a:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   8e95c:	231f      	movs	r3, #31
   8e95e:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8e960:	f107 030c 	add.w	r3, r7, #12
   8e964:	2204      	movs	r2, #4
   8e966:	4619      	mov	r1, r3
   8e968:	2037      	movs	r0, #55	; 0x37
   8e96a:	4b0b      	ldr	r3, [pc, #44]	; (8e998 <Cl_Temperature_Controller_Handler+0x330>)
   8e96c:	4798      	blx	r3
				
				}
				
				break;
   8e96e:	e004      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8e970:	bf00      	nop
   8e972:	e002      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
				if(counter > 10)
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
   8e974:	bf00      	nop
   8e976:	e000      	b.n	8e97a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8e978:	bf00      	nop
			
	}

	
	
	return cl_retval;
   8e97a:	7ffb      	ldrb	r3, [r7, #31]
}
   8e97c:	4618      	mov	r0, r3
   8e97e:	372c      	adds	r7, #44	; 0x2c
   8e980:	46bd      	mov	sp, r7
   8e982:	bd90      	pop	{r4, r7, pc}
   8e984:	0008d61d 	.word	0x0008d61d
   8e988:	000a33a1 	.word	0x000a33a1
   8e98c:	000a35b9 	.word	0x000a35b9
   8e990:	42c80000 	.word	0x42c80000
   8e994:	000a3829 	.word	0x000a3829
   8e998:	0009926d 	.word	0x0009926d

0008e99c <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   8e99c:	b480      	push	{r7}
   8e99e:	b083      	sub	sp, #12
   8e9a0:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8e9a2:	2300      	movs	r3, #0
   8e9a4:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   8e9a6:	4b09      	ldr	r3, [pc, #36]	; (8e9cc <Cl_Temperature_Controller_Init+0x30>)
   8e9a8:	2200      	movs	r2, #0
   8e9aa:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   8e9ac:	4b08      	ldr	r3, [pc, #32]	; (8e9d0 <Cl_Temperature_Controller_Init+0x34>)
   8e9ae:	2200      	movs	r2, #0
   8e9b0:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   8e9b2:	4b08      	ldr	r3, [pc, #32]	; (8e9d4 <Cl_Temperature_Controller_Init+0x38>)
   8e9b4:	f04f 0200 	mov.w	r2, #0
   8e9b8:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   8e9ba:	4b07      	ldr	r3, [pc, #28]	; (8e9d8 <Cl_Temperature_Controller_Init+0x3c>)
   8e9bc:	2201      	movs	r2, #1
   8e9be:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   8e9c0:	79fb      	ldrb	r3, [r7, #7]
}
   8e9c2:	4618      	mov	r0, r3
   8e9c4:	370c      	adds	r7, #12
   8e9c6:	46bd      	mov	sp, r7
   8e9c8:	bc80      	pop	{r7}
   8e9ca:	4770      	bx	lr
   8e9cc:	20072612 	.word	0x20072612
   8e9d0:	20072614 	.word	0x20072614
   8e9d4:	20072618 	.word	0x20072618
   8e9d8:	20072620 	.word	0x20072620
   8e9dc:	00000000 	.word	0x00000000

0008e9e0 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   8e9e0:	b590      	push	{r4, r7, lr}
   8e9e2:	b0c9      	sub	sp, #292	; 0x124
   8e9e4:	af00      	add	r7, sp, #0
   8e9e6:	1d3b      	adds	r3, r7, #4
   8e9e8:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8e9ea:	2304      	movs	r3, #4
   8e9ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   8e9f0:	2300      	movs	r3, #0
   8e9f2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   8e9f6:	2300      	movs	r3, #0
   8e9f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   8e9fc:	2300      	movs	r3, #0
   8e9fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   8ea02:	2300      	movs	r3, #0
   8ea04:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   8ea08:	2300      	movs	r3, #0
   8ea0a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   8ea0e:	2300      	movs	r3, #0
   8ea10:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   8ea14:	2300      	movs	r3, #0
   8ea16:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   8ea1a:	2300      	movs	r3, #0
   8ea1c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   8ea20:	2300      	movs	r3, #0
   8ea22:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   8ea26:	2300      	movs	r3, #0
   8ea28:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   8ea2c:	2300      	movs	r3, #0
   8ea2e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   8ea32:	2300      	movs	r3, #0
   8ea34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8ea38:	2300      	movs	r3, #0
   8ea3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ea3e:	e01c      	b.n	8ea7a <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   8ea40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea44:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ea48:	4413      	add	r3, r2
   8ea4a:	2200      	movs	r2, #0
   8ea4c:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   8ea50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea54:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ea58:	4413      	add	r3, r2
   8ea5a:	2200      	movs	r2, #0
   8ea5c:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   8ea60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea64:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8ea68:	4413      	add	r3, r2
   8ea6a:	2200      	movs	r2, #0
   8ea6c:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8ea70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea74:	3301      	adds	r3, #1
   8ea76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ea7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea7e:	2b13      	cmp	r3, #19
   8ea80:	d9de      	bls.n	8ea40 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   8ea82:	1d3b      	adds	r3, r7, #4
   8ea84:	681b      	ldr	r3, [r3, #0]
   8ea86:	78db      	ldrb	r3, [r3, #3]
   8ea88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8ea8c:	2300      	movs	r3, #0
   8ea8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ea92:	e01e      	b.n	8ead2 <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   8ea94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ea98:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8ea9c:	1d39      	adds	r1, r7, #4
   8ea9e:	6809      	ldr	r1, [r1, #0]
   8eaa0:	440a      	add	r2, r1
   8eaa2:	7912      	ldrb	r2, [r2, #4]
   8eaa4:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8eaa8:	440b      	add	r3, r1
   8eaaa:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   8eaae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8eab2:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8eab6:	1d39      	adds	r1, r7, #4
   8eab8:	6809      	ldr	r1, [r1, #0]
   8eaba:	440a      	add	r2, r1
   8eabc:	7912      	ldrb	r2, [r2, #4]
   8eabe:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8eac2:	440b      	add	r3, r1
   8eac4:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8eac8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8eacc:	3301      	adds	r3, #1
   8eace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ead2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ead6:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8eada:	429a      	cmp	r2, r3
   8eadc:	d3da      	bcc.n	8ea94 <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   8eade:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   8eae2:	2b6e      	cmp	r3, #110	; 0x6e
   8eae4:	f202 83f6 	bhi.w	912d4 <cl_testharnesscommandhandler+0x28f4>
   8eae8:	a201      	add	r2, pc, #4	; (adr r2, 8eaf0 <cl_testharnesscommandhandler+0x110>)
   8eaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8eaee:	bf00      	nop
   8eaf0:	0008edf7 	.word	0x0008edf7
   8eaf4:	0008ee0b 	.word	0x0008ee0b
   8eaf8:	0008ee21 	.word	0x0008ee21
   8eafc:	000912d5 	.word	0x000912d5
   8eb00:	000912d5 	.word	0x000912d5
   8eb04:	000912d5 	.word	0x000912d5
   8eb08:	000912d5 	.word	0x000912d5
   8eb0c:	0008ee37 	.word	0x0008ee37
   8eb10:	0008ee57 	.word	0x0008ee57
   8eb14:	0008ee77 	.word	0x0008ee77
   8eb18:	0008ee97 	.word	0x0008ee97
   8eb1c:	0008eeb7 	.word	0x0008eeb7
   8eb20:	0008eec5 	.word	0x0008eec5
   8eb24:	0008eed3 	.word	0x0008eed3
   8eb28:	0008ef7d 	.word	0x0008ef7d
   8eb2c:	0008ef8b 	.word	0x0008ef8b
   8eb30:	0008ef9f 	.word	0x0008ef9f
   8eb34:	0008efe5 	.word	0x0008efe5
   8eb38:	0008eff3 	.word	0x0008eff3
   8eb3c:	0008eef5 	.word	0x0008eef5
   8eb40:	0008ef29 	.word	0x0008ef29
   8eb44:	0008f043 	.word	0x0008f043
   8eb48:	0008f091 	.word	0x0008f091
   8eb4c:	0008f2bf 	.word	0x0008f2bf
   8eb50:	0008f3c1 	.word	0x0008f3c1
   8eb54:	0008f3e3 	.word	0x0008f3e3
   8eb58:	0008f405 	.word	0x0008f405
   8eb5c:	0008f503 	.word	0x0008f503
   8eb60:	0008f547 	.word	0x0008f547
   8eb64:	0008f569 	.word	0x0008f569
   8eb68:	0008f5bb 	.word	0x0008f5bb
   8eb6c:	0008f613 	.word	0x0008f613
   8eb70:	0008f695 	.word	0x0008f695
   8eb74:	0008f6b7 	.word	0x0008f6b7
   8eb78:	0008f77b 	.word	0x0008f77b
   8eb7c:	0008f78f 	.word	0x0008f78f
   8eb80:	0008f7a9 	.word	0x0008f7a9
   8eb84:	0008f7c3 	.word	0x0008f7c3
   8eb88:	0008f7d9 	.word	0x0008f7d9
   8eb8c:	0008f8c3 	.word	0x0008f8c3
   8eb90:	000912d5 	.word	0x000912d5
   8eb94:	0008f87f 	.word	0x0008f87f
   8eb98:	0008f8a3 	.word	0x0008f8a3
   8eb9c:	0008f903 	.word	0x0008f903
   8eba0:	0008f925 	.word	0x0008f925
   8eba4:	0008f947 	.word	0x0008f947
   8eba8:	0008fa05 	.word	0x0008fa05
   8ebac:	0008f375 	.word	0x0008f375
   8ebb0:	0008f457 	.word	0x0008f457
   8ebb4:	000912d5 	.word	0x000912d5
   8ebb8:	000912d5 	.word	0x000912d5
   8ebbc:	0008fa69 	.word	0x0008fa69
   8ebc0:	0008faa3 	.word	0x0008faa3
   8ebc4:	0008fc01 	.word	0x0008fc01
   8ebc8:	0008fadd 	.word	0x0008fadd
   8ebcc:	0008fb23 	.word	0x0008fb23
   8ebd0:	0008fb69 	.word	0x0008fb69
   8ebd4:	0008fbb5 	.word	0x0008fbb5
   8ebd8:	0008fc91 	.word	0x0008fc91
   8ebdc:	0008fce9 	.word	0x0008fce9
   8ebe0:	0008fd6f 	.word	0x0008fd6f
   8ebe4:	0008fd17 	.word	0x0008fd17
   8ebe8:	00090c8f 	.word	0x00090c8f
   8ebec:	0008f001 	.word	0x0008f001
   8ebf0:	0008f01d 	.word	0x0008f01d
   8ebf4:	0008fd85 	.word	0x0008fd85
   8ebf8:	0008fd91 	.word	0x0008fd91
   8ebfc:	0008fde3 	.word	0x0008fde3
   8ec00:	0008fe05 	.word	0x0008fe05
   8ec04:	0008fe13 	.word	0x0008fe13
   8ec08:	0008fe39 	.word	0x0008fe39
   8ec0c:	0008fe43 	.word	0x0008fe43
   8ec10:	0008f4a3 	.word	0x0008f4a3
   8ec14:	0008fe6b 	.word	0x0008fe6b
   8ec18:	000912d5 	.word	0x000912d5
   8ec1c:	0008fe87 	.word	0x0008fe87
   8ec20:	0008fe9d 	.word	0x0008fe9d
   8ec24:	0008eee1 	.word	0x0008eee1
   8ec28:	0008eeeb 	.word	0x0008eeeb
   8ec2c:	0008fd9d 	.word	0x0008fd9d
   8ec30:	0008fea5 	.word	0x0008fea5
   8ec34:	0008f5cf 	.word	0x0008f5cf
   8ec38:	0008f5f1 	.word	0x0008f5f1
   8ec3c:	0008f9ed 	.word	0x0008f9ed
   8ec40:	0008f065 	.word	0x0008f065
   8ec44:	0008f0b3 	.word	0x0008f0b3
   8ec48:	0008f70b 	.word	0x0008f70b
   8ec4c:	0008f743 	.word	0x0008f743
   8ec50:	000912d5 	.word	0x000912d5
   8ec54:	0008ed69 	.word	0x0008ed69
   8ec58:	0008ecc1 	.word	0x0008ecc1
   8ec5c:	0008ecef 	.word	0x0008ecef
   8ec60:	0008ed1d 	.word	0x0008ed1d
   8ec64:	0008fee5 	.word	0x0008fee5
   8ec68:	0008fef9 	.word	0x0008fef9
   8ec6c:	0008fecd 	.word	0x0008fecd
   8ec70:	0008fed5 	.word	0x0008fed5
   8ec74:	0008ecad 	.word	0x0008ecad
   8ec78:	0008ecb7 	.word	0x0008ecb7
   8ec7c:	0008f7ef 	.word	0x0008f7ef
   8ec80:	0008f811 	.word	0x0008f811
   8ec84:	0008ff07 	.word	0x0008ff07
   8ec88:	0008ff0f 	.word	0x0008ff0f
   8ec8c:	0008ff17 	.word	0x0008ff17
   8ec90:	0008ff23 	.word	0x0008ff23
   8ec94:	0008ff2f 	.word	0x0008ff2f
   8ec98:	0008f12f 	.word	0x0008f12f
   8ec9c:	0008f1fb 	.word	0x0008f1fb
   8eca0:	0008f1ab 	.word	0x0008f1ab
   8eca4:	000912d5 	.word	0x000912d5
   8eca8:	000912d5 	.word	0x000912d5
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   8ecac:	4bbf      	ldr	r3, [pc, #764]	; (8efac <cl_testharnesscommandhandler+0x5cc>)
   8ecae:	2201      	movs	r2, #1
   8ecb0:	701a      	strb	r2, [r3, #0]
		break;
   8ecb2:	f002 bb16 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   8ecb6:	4bbd      	ldr	r3, [pc, #756]	; (8efac <cl_testharnesscommandhandler+0x5cc>)
   8ecb8:	2200      	movs	r2, #0
   8ecba:	701a      	strb	r2, [r3, #0]
		break;
   8ecbc:	f002 bb11 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8ecc0:	4bbb      	ldr	r3, [pc, #748]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ecc2:	781a      	ldrb	r2, [r3, #0]
   8ecc4:	4bbb      	ldr	r3, [pc, #748]	; (8efb4 <cl_testharnesscommandhandler+0x5d4>)
   8ecc6:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8ecc8:	4bb9      	ldr	r3, [pc, #740]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ecca:	2201      	movs	r2, #1
   8eccc:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   8ecce:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8ecd2:	4bb9      	ldr	r3, [pc, #740]	; (8efb8 <cl_testharnesscommandhandler+0x5d8>)
   8ecd4:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   8ecd6:	4bb8      	ldr	r3, [pc, #736]	; (8efb8 <cl_testharnesscommandhandler+0x5d8>)
   8ecd8:	781b      	ldrb	r3, [r3, #0]
   8ecda:	2101      	movs	r1, #1
   8ecdc:	4618      	mov	r0, r3
   8ecde:	4bb7      	ldr	r3, [pc, #732]	; (8efbc <cl_testharnesscommandhandler+0x5dc>)
   8ece0:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8ece2:	4bb4      	ldr	r3, [pc, #720]	; (8efb4 <cl_testharnesscommandhandler+0x5d4>)
   8ece4:	781a      	ldrb	r2, [r3, #0]
   8ece6:	4bb2      	ldr	r3, [pc, #712]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ece8:	701a      	strb	r2, [r3, #0]
		break;
   8ecea:	f002 bafa 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8ecee:	4bb0      	ldr	r3, [pc, #704]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ecf0:	781a      	ldrb	r2, [r3, #0]
   8ecf2:	4bb0      	ldr	r3, [pc, #704]	; (8efb4 <cl_testharnesscommandhandler+0x5d4>)
   8ecf4:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8ecf6:	4bae      	ldr	r3, [pc, #696]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ecf8:	2201      	movs	r2, #1
   8ecfa:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   8ecfc:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8ed00:	4bad      	ldr	r3, [pc, #692]	; (8efb8 <cl_testharnesscommandhandler+0x5d8>)
   8ed02:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   8ed04:	4bac      	ldr	r3, [pc, #688]	; (8efb8 <cl_testharnesscommandhandler+0x5d8>)
   8ed06:	781b      	ldrb	r3, [r3, #0]
   8ed08:	2100      	movs	r1, #0
   8ed0a:	4618      	mov	r0, r3
   8ed0c:	4bab      	ldr	r3, [pc, #684]	; (8efbc <cl_testharnesscommandhandler+0x5dc>)
   8ed0e:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8ed10:	4ba8      	ldr	r3, [pc, #672]	; (8efb4 <cl_testharnesscommandhandler+0x5d4>)
   8ed12:	781a      	ldrb	r2, [r3, #0]
   8ed14:	4ba6      	ldr	r3, [pc, #664]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ed16:	701a      	strb	r2, [r3, #0]
		
		break;
   8ed18:	f002 bae3 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8ed1c:	4ba4      	ldr	r3, [pc, #656]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ed1e:	781a      	ldrb	r2, [r3, #0]
   8ed20:	4ba4      	ldr	r3, [pc, #656]	; (8efb4 <cl_testharnesscommandhandler+0x5d4>)
   8ed22:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8ed24:	4ba2      	ldr	r3, [pc, #648]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ed26:	2201      	movs	r2, #1
   8ed28:	701a      	strb	r2, [r3, #0]
		temp = 0;
   8ed2a:	2300      	movs	r3, #0
   8ed2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   8ed30:	e008      	b.n	8ed44 <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   8ed32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed36:	1c5a      	adds	r2, r3, #1
   8ed38:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   8ed3c:	2100      	movs	r1, #0
   8ed3e:	4618      	mov	r0, r3
   8ed40:	4b9e      	ldr	r3, [pc, #632]	; (8efbc <cl_testharnesscommandhandler+0x5dc>)
   8ed42:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   8ed44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed48:	2b41      	cmp	r3, #65	; 0x41
   8ed4a:	d9f2      	bls.n	8ed32 <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   8ed4c:	4b98      	ldr	r3, [pc, #608]	; (8efb0 <cl_testharnesscommandhandler+0x5d0>)
   8ed4e:	2200      	movs	r2, #0
   8ed50:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   8ed52:	4b9b      	ldr	r3, [pc, #620]	; (8efc0 <cl_testharnesscommandhandler+0x5e0>)
   8ed54:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ed58:	b29b      	uxth	r3, r3
   8ed5a:	3301      	adds	r3, #1
   8ed5c:	b29b      	uxth	r3, r3
   8ed5e:	b21a      	sxth	r2, r3
   8ed60:	4b97      	ldr	r3, [pc, #604]	; (8efc0 <cl_testharnesscommandhandler+0x5e0>)
   8ed62:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   8ed64:	f002 babd 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8ed68:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ed6c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8ed70:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ed74:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   8ed78:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8ed7c:	f003 0301 	and.w	r3, r3, #1
   8ed80:	2b00      	cmp	r3, #0
   8ed82:	d004      	beq.n	8ed8e <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   8ed84:	4b8f      	ldr	r3, [pc, #572]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8ed86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8ed8a:	631a      	str	r2, [r3, #48]	; 0x30
   8ed8c:	e003      	b.n	8ed96 <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   8ed8e:	4b8d      	ldr	r3, [pc, #564]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8ed90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8ed94:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   8ed96:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8ed9a:	f003 0302 	and.w	r3, r3, #2
   8ed9e:	2b00      	cmp	r3, #0
   8eda0:	d004      	beq.n	8edac <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   8eda2:	4b88      	ldr	r3, [pc, #544]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8eda4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8eda8:	631a      	str	r2, [r3, #48]	; 0x30
   8edaa:	e003      	b.n	8edb4 <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   8edac:	4b85      	ldr	r3, [pc, #532]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8edae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8edb2:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   8edb4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8edb8:	f003 0304 	and.w	r3, r3, #4
   8edbc:	2b00      	cmp	r3, #0
   8edbe:	d004      	beq.n	8edca <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   8edc0:	4b80      	ldr	r3, [pc, #512]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8edc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8edc6:	631a      	str	r2, [r3, #48]	; 0x30
   8edc8:	e003      	b.n	8edd2 <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   8edca:	4b7e      	ldr	r3, [pc, #504]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8edcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8edd0:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   8edd2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8edd6:	f003 0308 	and.w	r3, r3, #8
   8edda:	2b00      	cmp	r3, #0
   8eddc:	d005      	beq.n	8edea <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   8edde:	4b79      	ldr	r3, [pc, #484]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8ede0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8ede4:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   8ede6:	f002 ba7c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   8edea:	4b76      	ldr	r3, [pc, #472]	; (8efc4 <cl_testharnesscommandhandler+0x5e4>)
   8edec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8edf0:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   8edf2:	f002 ba76 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   8edf6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8edfa:	b29a      	uxth	r2, r3
   8edfc:	4b72      	ldr	r3, [pc, #456]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8edfe:	861a      	strh	r2, [r3, #48]	; 0x30
		
		cl_thretval = CL_OK;
   8ee00:	2300      	movs	r3, #0
   8ee02:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8ee06:	f002 ba6c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   8ee0a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee0e:	b29a      	uxth	r2, r3
   8ee10:	4b6d      	ldr	r3, [pc, #436]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				cl_thretval = CL_OK;
   8ee16:	2300      	movs	r3, #0
   8ee18:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8ee1c:	f002 ba61 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   8ee20:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee24:	b29a      	uxth	r2, r3
   8ee26:	4b68      	ldr	r3, [pc, #416]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				cl_thretval = CL_OK;
   8ee2c:	2300      	movs	r3, #0
   8ee2e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8ee32:	f002 ba56 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   8ee36:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee3a:	2b00      	cmp	r3, #0
   8ee3c:	d105      	bne.n	8ee4a <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   8ee3e:	4b62      	ldr	r3, [pc, #392]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee40:	2200      	movs	r2, #0
   8ee42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   8ee46:	f002 ba4c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   8ee4a:	4b5f      	ldr	r3, [pc, #380]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee4c:	2201      	movs	r2, #1
   8ee4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   8ee52:	f002 ba46 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   8ee56:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee5a:	2b00      	cmp	r3, #0
   8ee5c:	d105      	bne.n	8ee6a <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   8ee5e:	4b5a      	ldr	r3, [pc, #360]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee60:	2200      	movs	r2, #0
   8ee62:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   8ee66:	f002 ba3c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   8ee6a:	4b57      	ldr	r3, [pc, #348]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee6c:	2201      	movs	r2, #1
   8ee6e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   8ee72:	f002 ba36 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   8ee76:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee7a:	2b00      	cmp	r3, #0
   8ee7c:	d105      	bne.n	8ee8a <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   8ee7e:	4b52      	ldr	r3, [pc, #328]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee80:	2200      	movs	r2, #0
   8ee82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   8ee86:	f002 ba2c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   8ee8a:	4b4f      	ldr	r3, [pc, #316]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ee8c:	2201      	movs	r2, #1
   8ee8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   8ee92:	f002 ba26 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   8ee96:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ee9a:	2b00      	cmp	r3, #0
   8ee9c:	d105      	bne.n	8eeaa <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   8ee9e:	4b4a      	ldr	r3, [pc, #296]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8eea0:	2200      	movs	r2, #0
   8eea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   8eea6:	f002 ba1c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   8eeaa:	4b47      	ldr	r3, [pc, #284]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8eeac:	2201      	movs	r2, #1
   8eeae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   8eeb2:	f002 ba16 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   8eeb6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eeba:	b29a      	uxth	r2, r3
   8eebc:	4b42      	ldr	r3, [pc, #264]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8eebe:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   8eec0:	f002 ba0f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   8eec4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eec8:	b29a      	uxth	r2, r3
   8eeca:	4b3f      	ldr	r3, [pc, #252]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8eecc:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   8eece:	f002 ba08 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   8eed2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eed6:	b29a      	uxth	r2, r3
   8eed8:	4b3b      	ldr	r3, [pc, #236]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8eeda:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   8eedc:	f002 ba01 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   8eee0:	4b3a      	ldr	r3, [pc, #232]	; (8efcc <cl_testharnesscommandhandler+0x5ec>)
   8eee2:	2201      	movs	r2, #1
   8eee4:	701a      	strb	r2, [r3, #0]
		break;
   8eee6:	f002 b9fc 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   8eeea:	4b38      	ldr	r3, [pc, #224]	; (8efcc <cl_testharnesscommandhandler+0x5ec>)
   8eeec:	2200      	movs	r2, #0
   8eeee:	701a      	strb	r2, [r3, #0]
		break;
   8eef0:	f002 b9f7 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   8eef4:	f897 0099 	ldrb.w	r0, [r7, #153]	; 0x99
   8eef8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   8eefc:	f107 0378 	add.w	r3, r7, #120	; 0x78
   8ef00:	3302      	adds	r3, #2
   8ef02:	4619      	mov	r1, r3
   8ef04:	4b32      	ldr	r3, [pc, #200]	; (8efd0 <cl_testharnesscommandhandler+0x5f0>)
   8ef06:	4798      	blx	r3
   8ef08:	4603      	mov	r3, r0
   8ef0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8ef0e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef12:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8ef16:	4611      	mov	r1, r2
   8ef18:	4618      	mov	r0, r3
   8ef1a:	4b2e      	ldr	r3, [pc, #184]	; (8efd4 <cl_testharnesscommandhandler+0x5f4>)
   8ef1c:	4798      	blx	r3
   8ef1e:	4603      	mov	r3, r0
   8ef20:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   8ef24:	f002 b9dd 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   8ef28:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef2c:	2b06      	cmp	r3, #6
   8ef2e:	d00b      	beq.n	8ef48 <cl_testharnesscommandhandler+0x568>
   8ef30:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef34:	2b07      	cmp	r3, #7
   8ef36:	d007      	beq.n	8ef48 <cl_testharnesscommandhandler+0x568>
   8ef38:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef3c:	2b08      	cmp	r3, #8
   8ef3e:	d003      	beq.n	8ef48 <cl_testharnesscommandhandler+0x568>
   8ef40:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef44:	2b0a      	cmp	r3, #10
   8ef46:	d10c      	bne.n	8ef62 <cl_testharnesscommandhandler+0x582>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   8ef48:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef4c:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8ef50:	4611      	mov	r1, r2
   8ef52:	4618      	mov	r0, r3
   8ef54:	4b20      	ldr	r3, [pc, #128]	; (8efd8 <cl_testharnesscommandhandler+0x5f8>)
   8ef56:	4798      	blx	r3
   8ef58:	4603      	mov	r3, r0
   8ef5a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8ef5e:	f002 b9c0 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8ef62:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8ef66:	f107 0264 	add.w	r2, r7, #100	; 0x64
   8ef6a:	4611      	mov	r1, r2
   8ef6c:	4618      	mov	r0, r3
   8ef6e:	4b19      	ldr	r3, [pc, #100]	; (8efd4 <cl_testharnesscommandhandler+0x5f4>)
   8ef70:	4798      	blx	r3
   8ef72:	4603      	mov	r3, r0
   8ef74:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8ef78:	f002 b9b3 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   8ef7c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ef80:	b29a      	uxth	r2, r3
   8ef82:	4b11      	ldr	r3, [pc, #68]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8ef84:	831a      	strh	r2, [r3, #24]
		break;
   8ef86:	f002 b9ac 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   8ef8a:	4b14      	ldr	r3, [pc, #80]	; (8efdc <cl_testharnesscommandhandler+0x5fc>)
   8ef8c:	2200      	movs	r2, #0
   8ef8e:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   8ef90:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ef94:	b29a      	uxth	r2, r3
   8ef96:	4b12      	ldr	r3, [pc, #72]	; (8efe0 <cl_testharnesscommandhandler+0x600>)
   8ef98:	835a      	strh	r2, [r3, #26]
		break;
   8ef9a:	f002 b9a2 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   8ef9e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8efa2:	b29a      	uxth	r2, r3
   8efa4:	4b08      	ldr	r3, [pc, #32]	; (8efc8 <cl_testharnesscommandhandler+0x5e8>)
   8efa6:	821a      	strh	r2, [r3, #16]
		break;
   8efa8:	f002 b99b 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
   8efac:	2007262a 	.word	0x2007262a
   8efb0:	200709ec 	.word	0x200709ec
   8efb4:	200709ed 	.word	0x200709ed
   8efb8:	200730f6 	.word	0x200730f6
   8efbc:	00082f5d 	.word	0x00082f5d
   8efc0:	20072640 	.word	0x20072640
   8efc4:	400e1200 	.word	0x400e1200
   8efc8:	20072e18 	.word	0x20072e18
   8efcc:	20072632 	.word	0x20072632
   8efd0:	00097db5 	.word	0x00097db5
   8efd4:	00097d7d 	.word	0x00097d7d
   8efd8:	00091341 	.word	0x00091341
   8efdc:	20072629 	.word	0x20072629
   8efe0:	200730a4 	.word	0x200730a4
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   8efe4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8efe8:	b29a      	uxth	r2, r3
   8efea:	4bbc      	ldr	r3, [pc, #752]	; (8f2dc <cl_testharnesscommandhandler+0x8fc>)
   8efec:	825a      	strh	r2, [r3, #18]
		break;
   8efee:	f002 b978 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   8eff2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eff6:	b29a      	uxth	r2, r3
   8eff8:	4bb8      	ldr	r3, [pc, #736]	; (8f2dc <cl_testharnesscommandhandler+0x8fc>)
   8effa:	87da      	strh	r2, [r3, #62]	; 0x3e
		break;
   8effc:	f002 b971 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   8f000:	2064      	movs	r0, #100	; 0x64
   8f002:	4bb7      	ldr	r3, [pc, #732]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f004:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   8f006:	4bb7      	ldr	r3, [pc, #732]	; (8f2e4 <cl_testharnesscommandhandler+0x904>)
   8f008:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   8f00c:	2001      	movs	r0, #1
   8f00e:	4bb6      	ldr	r3, [pc, #728]	; (8f2e8 <cl_testharnesscommandhandler+0x908>)
   8f010:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f012:	2064      	movs	r0, #100	; 0x64
   8f014:	4bb2      	ldr	r3, [pc, #712]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f016:	4798      	blx	r3
		break;
   8f018:	f002 b963 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   8f01c:	2064      	movs	r0, #100	; 0x64
   8f01e:	4bb0      	ldr	r3, [pc, #704]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f020:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   8f022:	4bb2      	ldr	r3, [pc, #712]	; (8f2ec <cl_testharnesscommandhandler+0x90c>)
   8f024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   8f028:	4bb1      	ldr	r3, [pc, #708]	; (8f2f0 <cl_testharnesscommandhandler+0x910>)
   8f02a:	4798      	blx	r3
   8f02c:	4603      	mov	r3, r0
   8f02e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   8f032:	2004      	movs	r0, #4
   8f034:	4bac      	ldr	r3, [pc, #688]	; (8f2e8 <cl_testharnesscommandhandler+0x908>)
   8f036:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f038:	2064      	movs	r0, #100	; 0x64
   8f03a:	4ba9      	ldr	r3, [pc, #676]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f03c:	4798      	blx	r3
		break;
   8f03e:	f002 b950 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   8f042:	2064      	movs	r0, #100	; 0x64
   8f044:	4ba6      	ldr	r3, [pc, #664]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f046:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   8f048:	4baa      	ldr	r3, [pc, #680]	; (8f2f4 <cl_testharnesscommandhandler+0x914>)
   8f04a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   8f04e:	2001      	movs	r0, #1
   8f050:	4ba9      	ldr	r3, [pc, #676]	; (8f2f8 <cl_testharnesscommandhandler+0x918>)
   8f052:	4798      	blx	r3
   8f054:	4603      	mov	r3, r0
   8f056:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f05a:	2064      	movs	r0, #100	; 0x64
   8f05c:	4ba0      	ldr	r3, [pc, #640]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f05e:	4798      	blx	r3
		break;
   8f060:	f002 b93f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   8f064:	2064      	movs	r0, #100	; 0x64
   8f066:	4b9e      	ldr	r3, [pc, #632]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f068:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   8f06a:	4ba2      	ldr	r3, [pc, #648]	; (8f2f4 <cl_testharnesscommandhandler+0x914>)
   8f06c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   8f070:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8f074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   8f078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8f07c:	4b98      	ldr	r3, [pc, #608]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f07e:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   8f080:	2001      	movs	r0, #1
   8f082:	4b9e      	ldr	r3, [pc, #632]	; (8f2fc <cl_testharnesscommandhandler+0x91c>)
   8f084:	4798      	blx	r3
   8f086:	4603      	mov	r3, r0
   8f088:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   8f08c:	f002 b929 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   8f090:	2064      	movs	r0, #100	; 0x64
   8f092:	4b93      	ldr	r3, [pc, #588]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f094:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   8f096:	4b9a      	ldr	r3, [pc, #616]	; (8f300 <cl_testharnesscommandhandler+0x920>)
   8f098:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8f09c:	2001      	movs	r0, #1
   8f09e:	4b97      	ldr	r3, [pc, #604]	; (8f2fc <cl_testharnesscommandhandler+0x91c>)
   8f0a0:	4798      	blx	r3
   8f0a2:	4603      	mov	r3, r0
   8f0a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   8f0a8:	2064      	movs	r0, #100	; 0x64
   8f0aa:	4b8d      	ldr	r3, [pc, #564]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f0ac:	4798      	blx	r3
	break;	
   8f0ae:	f002 b918 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   8f0b2:	200a      	movs	r0, #10
   8f0b4:	4b8a      	ldr	r3, [pc, #552]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f0b6:	4798      	blx	r3
			if(iic_nack)
   8f0b8:	4b92      	ldr	r3, [pc, #584]	; (8f304 <cl_testharnesscommandhandler+0x924>)
   8f0ba:	781b      	ldrb	r3, [r3, #0]
   8f0bc:	2b00      	cmp	r3, #0
   8f0be:	d002      	beq.n	8f0c6 <cl_testharnesscommandhandler+0x6e6>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   8f0c0:	4b90      	ldr	r3, [pc, #576]	; (8f304 <cl_testharnesscommandhandler+0x924>)
   8f0c2:	2200      	movs	r2, #0
   8f0c4:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   8f0c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f0ca:	2b03      	cmp	r3, #3
   8f0cc:	d104      	bne.n	8f0d8 <cl_testharnesscommandhandler+0x6f8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f0ce:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f0d2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f0d6:	e00b      	b.n	8f0f0 <cl_testharnesscommandhandler+0x710>
		
			
		}
		else if(TestMsg.datasize == 4)
   8f0d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f0dc:	2b04      	cmp	r3, #4
   8f0de:	d107      	bne.n	8f0f0 <cl_testharnesscommandhandler+0x710>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8f0e0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f0e4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8f0e8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f0ec:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8f0f0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f0f4:	2b02      	cmp	r3, #2
   8f0f6:	d115      	bne.n	8f124 <cl_testharnesscommandhandler+0x744>
		{
			Cl_Uint16Type potvalue = 0;
   8f0f8:	2300      	movs	r3, #0
   8f0fa:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   8f0fe:	4b82      	ldr	r3, [pc, #520]	; (8f308 <cl_testharnesscommandhandler+0x928>)
   8f100:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   8f104:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f108:	029b      	lsls	r3, r3, #10
   8f10a:	4a80      	ldr	r2, [pc, #512]	; (8f30c <cl_testharnesscommandhandler+0x92c>)
   8f10c:	fb82 1203 	smull	r1, r2, r2, r3
   8f110:	1312      	asrs	r2, r2, #12
   8f112:	17db      	asrs	r3, r3, #31
   8f114:	1ad3      	subs	r3, r2, r3
   8f116:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   8f11a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   8f11e:	4618      	mov	r0, r3
   8f120:	4b7b      	ldr	r3, [pc, #492]	; (8f310 <cl_testharnesscommandhandler+0x930>)
   8f122:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   8f124:	2300      	movs	r3, #0
   8f126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   8f12a:	f002 b8da 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   8f12e:	200a      	movs	r0, #10
   8f130:	4b6b      	ldr	r3, [pc, #428]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f132:	4798      	blx	r3
		if(iic_nack)
   8f134:	4b73      	ldr	r3, [pc, #460]	; (8f304 <cl_testharnesscommandhandler+0x924>)
   8f136:	781b      	ldrb	r3, [r3, #0]
   8f138:	2b00      	cmp	r3, #0
   8f13a:	d002      	beq.n	8f142 <cl_testharnesscommandhandler+0x762>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   8f13c:	4b71      	ldr	r3, [pc, #452]	; (8f304 <cl_testharnesscommandhandler+0x924>)
   8f13e:	2200      	movs	r2, #0
   8f140:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   8f142:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f146:	2b03      	cmp	r3, #3
   8f148:	d104      	bne.n	8f154 <cl_testharnesscommandhandler+0x774>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f14a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f14e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f152:	e00b      	b.n	8f16c <cl_testharnesscommandhandler+0x78c>
			
			
		}
		else if(TestMsg.datasize == 4)
   8f154:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f158:	2b04      	cmp	r3, #4
   8f15a:	d107      	bne.n	8f16c <cl_testharnesscommandhandler+0x78c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8f15c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f160:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8f164:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f168:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8f16c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f170:	2b02      	cmp	r3, #2
   8f172:	d115      	bne.n	8f1a0 <cl_testharnesscommandhandler+0x7c0>
		{
			Cl_Uint16Type potvalue = 0;
   8f174:	2300      	movs	r3, #0
   8f176:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   8f17a:	4b63      	ldr	r3, [pc, #396]	; (8f308 <cl_testharnesscommandhandler+0x928>)
   8f17c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   8f180:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f184:	029b      	lsls	r3, r3, #10
   8f186:	4a61      	ldr	r2, [pc, #388]	; (8f30c <cl_testharnesscommandhandler+0x92c>)
   8f188:	fb82 1203 	smull	r1, r2, r2, r3
   8f18c:	1312      	asrs	r2, r2, #12
   8f18e:	17db      	asrs	r3, r3, #31
   8f190:	1ad3      	subs	r3, r2, r3
   8f192:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   8f196:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   8f19a:	4618      	mov	r0, r3
   8f19c:	4b5d      	ldr	r3, [pc, #372]	; (8f314 <cl_testharnesscommandhandler+0x934>)
   8f19e:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   8f1a0:	2300      	movs	r3, #0
   8f1a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   8f1a6:	f002 b89c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   8f1aa:	4b5b      	ldr	r3, [pc, #364]	; (8f318 <cl_testharnesscommandhandler+0x938>)
   8f1ac:	781b      	ldrb	r3, [r3, #0]
   8f1ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   8f1b2:	4b5a      	ldr	r3, [pc, #360]	; (8f31c <cl_testharnesscommandhandler+0x93c>)
   8f1b4:	781b      	ldrb	r3, [r3, #0]
   8f1b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   8f1ba:	4b59      	ldr	r3, [pc, #356]	; (8f320 <cl_testharnesscommandhandler+0x940>)
   8f1bc:	781b      	ldrb	r3, [r3, #0]
   8f1be:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   8f1c2:	4b58      	ldr	r3, [pc, #352]	; (8f324 <cl_testharnesscommandhandler+0x944>)
   8f1c4:	781b      	ldrb	r3, [r3, #0]
   8f1c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   8f1ca:	4b57      	ldr	r3, [pc, #348]	; (8f328 <cl_testharnesscommandhandler+0x948>)
   8f1cc:	781b      	ldrb	r3, [r3, #0]
   8f1ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   8f1d2:	4b56      	ldr	r3, [pc, #344]	; (8f32c <cl_testharnesscommandhandler+0x94c>)
   8f1d4:	781b      	ldrb	r3, [r3, #0]
   8f1d6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   8f1da:	4b55      	ldr	r3, [pc, #340]	; (8f330 <cl_testharnesscommandhandler+0x950>)
   8f1dc:	781b      	ldrb	r3, [r3, #0]
   8f1de:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   8f1e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f1e6:	2207      	movs	r2, #7
   8f1e8:	4619      	mov	r1, r3
   8f1ea:	2047      	movs	r0, #71	; 0x47
   8f1ec:	4b51      	ldr	r3, [pc, #324]	; (8f334 <cl_testharnesscommandhandler+0x954>)
   8f1ee:	4798      	blx	r3
   8f1f0:	4603      	mov	r3, r0
   8f1f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   8f1f6:	f002 b874 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   8f1fa:	2300      	movs	r3, #0
   8f1fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f200:	2300      	movs	r3, #0
   8f202:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8f206:	2300      	movs	r3, #0
   8f208:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f20c:	e051      	b.n	8f2b2 <cl_testharnesscommandhandler+0x8d2>
		{
				temparray[cntr_1++] = cntr;
   8f20e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f212:	1c5a      	adds	r2, r3, #1
   8f214:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f218:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8f21c:	4413      	add	r3, r2
   8f21e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f222:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   8f226:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f22a:	1c5a      	adds	r2, r3, #1
   8f22c:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f230:	4619      	mov	r1, r3
   8f232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f236:	4a40      	ldr	r2, [pc, #256]	; (8f338 <cl_testharnesscommandhandler+0x958>)
   8f238:	011b      	lsls	r3, r3, #4
   8f23a:	4413      	add	r3, r2
   8f23c:	330e      	adds	r3, #14
   8f23e:	781b      	ldrb	r3, [r3, #0]
   8f240:	461a      	mov	r2, r3
   8f242:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f246:	440b      	add	r3, r1
   8f248:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   8f24c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f250:	1c5a      	adds	r2, r3, #1
   8f252:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8f256:	4619      	mov	r1, r3
   8f258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f25c:	4a36      	ldr	r2, [pc, #216]	; (8f338 <cl_testharnesscommandhandler+0x958>)
   8f25e:	011b      	lsls	r3, r3, #4
   8f260:	4413      	add	r3, r2
   8f262:	330f      	adds	r3, #15
   8f264:	781b      	ldrb	r3, [r3, #0]
   8f266:	461a      	mov	r2, r3
   8f268:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8f26c:	440b      	add	r3, r1
   8f26e:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   8f272:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8f276:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8f27a:	492f      	ldr	r1, [pc, #188]	; (8f338 <cl_testharnesscommandhandler+0x958>)
   8f27c:	0112      	lsls	r2, r2, #4
   8f27e:	440a      	add	r2, r1
   8f280:	3202      	adds	r2, #2
   8f282:	7812      	ldrb	r2, [r2, #0]
   8f284:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8f288:	440b      	add	r3, r1
   8f28a:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   8f28e:	2300      	movs	r3, #0
   8f290:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   8f294:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8f298:	2204      	movs	r2, #4
   8f29a:	4619      	mov	r1, r3
   8f29c:	2048      	movs	r0, #72	; 0x48
   8f29e:	4b25      	ldr	r3, [pc, #148]	; (8f334 <cl_testharnesscommandhandler+0x954>)
   8f2a0:	4798      	blx	r3
   8f2a2:	4603      	mov	r3, r0
   8f2a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8f2a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f2ac:	3301      	adds	r3, #1
   8f2ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8f2b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8f2b6:	2b41      	cmp	r3, #65	; 0x41
   8f2b8:	d9a9      	bls.n	8f20e <cl_testharnesscommandhandler+0x82e>
		
		}
			
	}
	
	break;
   8f2ba:	f002 b812 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   8f2be:	2064      	movs	r0, #100	; 0x64
   8f2c0:	4b07      	ldr	r3, [pc, #28]	; (8f2e0 <cl_testharnesscommandhandler+0x900>)
   8f2c2:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   8f2c4:	4b1d      	ldr	r3, [pc, #116]	; (8f33c <cl_testharnesscommandhandler+0x95c>)
   8f2c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f2ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f2ce:	2b02      	cmp	r3, #2
   8f2d0:	d136      	bne.n	8f340 <cl_testharnesscommandhandler+0x960>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f2d2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f2d6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f2da:	e03d      	b.n	8f358 <cl_testharnesscommandhandler+0x978>
   8f2dc:	20072e18 	.word	0x20072e18
   8f2e0:	000918fd 	.word	0x000918fd
   8f2e4:	000a54bc 	.word	0x000a54bc
   8f2e8:	00088a8d 	.word	0x00088a8d
   8f2ec:	000a54c4 	.word	0x000a54c4
   8f2f0:	000974dd 	.word	0x000974dd
   8f2f4:	000a54cc 	.word	0x000a54cc
   8f2f8:	00097451 	.word	0x00097451
   8f2fc:	0009748d 	.word	0x0009748d
   8f300:	000a54d4 	.word	0x000a54d4
   8f304:	2007263d 	.word	0x2007263d
   8f308:	000a54dc 	.word	0x000a54dc
   8f30c:	68db8bad 	.word	0x68db8bad
   8f310:	00097999 	.word	0x00097999
   8f314:	000979b9 	.word	0x000979b9
   8f318:	200730f9 	.word	0x200730f9
   8f31c:	200730f8 	.word	0x200730f8
   8f320:	2007318c 	.word	0x2007318c
   8f324:	2007318f 	.word	0x2007318f
   8f328:	2007318e 	.word	0x2007318e
   8f32c:	200730f7 	.word	0x200730f7
   8f330:	2007318d 	.word	0x2007318d
   8f334:	0009926d 	.word	0x0009926d
   8f338:	200728d0 	.word	0x200728d0
   8f33c:	000a54e8 	.word	0x000a54e8
		}
		else if(TestMsg.datasize == 3)
   8f340:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f344:	2b03      	cmp	r3, #3
   8f346:	d107      	bne.n	8f358 <cl_testharnesscommandhandler+0x978>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f348:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f34c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f350:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f354:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   8f358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f35c:	4619      	mov	r1, r3
   8f35e:	2001      	movs	r0, #1
   8f360:	4bb5      	ldr	r3, [pc, #724]	; (8f638 <cl_testharnesscommandhandler+0xc58>)
   8f362:	4798      	blx	r3
   8f364:	4603      	mov	r3, r0
   8f366:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8f36a:	2064      	movs	r0, #100	; 0x64
   8f36c:	4bb3      	ldr	r3, [pc, #716]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f36e:	4798      	blx	r3
		break;
   8f370:	f001 bfb7 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   8f374:	2064      	movs	r0, #100	; 0x64
   8f376:	4bb1      	ldr	r3, [pc, #708]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f378:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   8f37a:	4bb1      	ldr	r3, [pc, #708]	; (8f640 <cl_testharnesscommandhandler+0xc60>)
   8f37c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f380:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f384:	2b02      	cmp	r3, #2
   8f386:	d104      	bne.n	8f392 <cl_testharnesscommandhandler+0x9b2>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f388:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f38c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f390:	e00b      	b.n	8f3aa <cl_testharnesscommandhandler+0x9ca>
		}
		else if(TestMsg.datasize == 3)
   8f392:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f396:	2b03      	cmp	r3, #3
   8f398:	d107      	bne.n	8f3aa <cl_testharnesscommandhandler+0x9ca>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f39a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f39e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f3a2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f3a6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   8f3aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f3ae:	4619      	mov	r1, r3
   8f3b0:	2001      	movs	r0, #1
   8f3b2:	4ba4      	ldr	r3, [pc, #656]	; (8f644 <cl_testharnesscommandhandler+0xc64>)
   8f3b4:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f3b6:	2064      	movs	r0, #100	; 0x64
   8f3b8:	4ba0      	ldr	r3, [pc, #640]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f3ba:	4798      	blx	r3
		break;
   8f3bc:	f001 bf91 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   8f3c0:	2064      	movs	r0, #100	; 0x64
   8f3c2:	4b9e      	ldr	r3, [pc, #632]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f3c4:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   8f3c6:	2002      	movs	r0, #2
   8f3c8:	4b9f      	ldr	r3, [pc, #636]	; (8f648 <cl_testharnesscommandhandler+0xc68>)
   8f3ca:	4798      	blx	r3
   8f3cc:	4603      	mov	r3, r0
   8f3ce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   8f3d2:	4b9e      	ldr	r3, [pc, #632]	; (8f64c <cl_testharnesscommandhandler+0xc6c>)
   8f3d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f3d8:	2064      	movs	r0, #100	; 0x64
   8f3da:	4b98      	ldr	r3, [pc, #608]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f3dc:	4798      	blx	r3
		break;
   8f3de:	f001 bf80 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   8f3e2:	2064      	movs	r0, #100	; 0x64
   8f3e4:	4b95      	ldr	r3, [pc, #596]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f3e6:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8f3e8:	2002      	movs	r0, #2
   8f3ea:	4b99      	ldr	r3, [pc, #612]	; (8f650 <cl_testharnesscommandhandler+0xc70>)
   8f3ec:	4798      	blx	r3
   8f3ee:	4603      	mov	r3, r0
   8f3f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   8f3f4:	4b97      	ldr	r3, [pc, #604]	; (8f654 <cl_testharnesscommandhandler+0xc74>)
   8f3f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f3fa:	2064      	movs	r0, #100	; 0x64
   8f3fc:	4b8f      	ldr	r3, [pc, #572]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f3fe:	4798      	blx	r3
		break;
   8f400:	f001 bf6f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   8f404:	2064      	movs	r0, #100	; 0x64
   8f406:	4b8d      	ldr	r3, [pc, #564]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f408:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   8f40a:	4b93      	ldr	r3, [pc, #588]	; (8f658 <cl_testharnesscommandhandler+0xc78>)
   8f40c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f410:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f414:	2b02      	cmp	r3, #2
   8f416:	d104      	bne.n	8f422 <cl_testharnesscommandhandler+0xa42>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f418:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f41c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f420:	e00b      	b.n	8f43a <cl_testharnesscommandhandler+0xa5a>
		}
		else if(TestMsg.datasize == 3)
   8f422:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f426:	2b03      	cmp	r3, #3
   8f428:	d107      	bne.n	8f43a <cl_testharnesscommandhandler+0xa5a>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f42a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f42e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f432:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f436:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   8f43a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f43e:	4619      	mov	r1, r3
   8f440:	2002      	movs	r0, #2
   8f442:	4b7d      	ldr	r3, [pc, #500]	; (8f638 <cl_testharnesscommandhandler+0xc58>)
   8f444:	4798      	blx	r3
   8f446:	4603      	mov	r3, r0
   8f448:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8f44c:	2064      	movs	r0, #100	; 0x64
   8f44e:	4b7b      	ldr	r3, [pc, #492]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f450:	4798      	blx	r3
		break;
   8f452:	f001 bf46 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   8f456:	2064      	movs	r0, #100	; 0x64
   8f458:	4b78      	ldr	r3, [pc, #480]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f45a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   8f45c:	4b7f      	ldr	r3, [pc, #508]	; (8f65c <cl_testharnesscommandhandler+0xc7c>)
   8f45e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8f462:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f466:	2b02      	cmp	r3, #2
   8f468:	d104      	bne.n	8f474 <cl_testharnesscommandhandler+0xa94>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f46a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f46e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f472:	e00b      	b.n	8f48c <cl_testharnesscommandhandler+0xaac>
		}
		else if(TestMsg.datasize == 3)
   8f474:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f478:	2b03      	cmp	r3, #3
   8f47a:	d107      	bne.n	8f48c <cl_testharnesscommandhandler+0xaac>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f47c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f480:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f484:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f488:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   8f48c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f490:	4619      	mov	r1, r3
   8f492:	2002      	movs	r0, #2
   8f494:	4b6b      	ldr	r3, [pc, #428]	; (8f644 <cl_testharnesscommandhandler+0xc64>)
   8f496:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f498:	2064      	movs	r0, #100	; 0x64
   8f49a:	4b68      	ldr	r3, [pc, #416]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f49c:	4798      	blx	r3
		break;
   8f49e:	f001 bf20 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   8f4a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f4a6:	2b02      	cmp	r3, #2
   8f4a8:	d104      	bne.n	8f4b4 <cl_testharnesscommandhandler+0xad4>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f4aa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f4ae:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f4b2:	e00b      	b.n	8f4cc <cl_testharnesscommandhandler+0xaec>
		}
		else if(TestMsg.datasize == 3)
   8f4b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f4b8:	2b03      	cmp	r3, #3
   8f4ba:	d107      	bne.n	8f4cc <cl_testharnesscommandhandler+0xaec>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f4bc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f4c0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f4c4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f4c8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   8f4cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   8f4d0:	4b63      	ldr	r3, [pc, #396]	; (8f660 <cl_testharnesscommandhandler+0xc80>)
   8f4d2:	4610      	mov	r0, r2
   8f4d4:	4798      	blx	r3
   8f4d6:	4c63      	ldr	r4, [pc, #396]	; (8f664 <cl_testharnesscommandhandler+0xc84>)
   8f4d8:	a355      	add	r3, pc, #340	; (adr r3, 8f630 <cl_testharnesscommandhandler+0xc50>)
   8f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f4de:	47a0      	blx	r4
   8f4e0:	4603      	mov	r3, r0
   8f4e2:	460c      	mov	r4, r1
   8f4e4:	4619      	mov	r1, r3
   8f4e6:	4622      	mov	r2, r4
   8f4e8:	4b5f      	ldr	r3, [pc, #380]	; (8f668 <cl_testharnesscommandhandler+0xc88>)
   8f4ea:	4608      	mov	r0, r1
   8f4ec:	4611      	mov	r1, r2
   8f4ee:	4798      	blx	r3
   8f4f0:	4603      	mov	r3, r0
   8f4f2:	b21a      	sxth	r2, r3
   8f4f4:	4b5d      	ldr	r3, [pc, #372]	; (8f66c <cl_testharnesscommandhandler+0xc8c>)
   8f4f6:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   8f4f8:	4b5d      	ldr	r3, [pc, #372]	; (8f670 <cl_testharnesscommandhandler+0xc90>)
   8f4fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   8f4fe:	f001 bef0 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   8f502:	2064      	movs	r0, #100	; 0x64
   8f504:	4b4d      	ldr	r3, [pc, #308]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f506:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   8f508:	2100      	movs	r1, #0
   8f50a:	2002      	movs	r0, #2
   8f50c:	4b59      	ldr	r3, [pc, #356]	; (8f674 <cl_testharnesscommandhandler+0xc94>)
   8f50e:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   8f510:	4b59      	ldr	r3, [pc, #356]	; (8f678 <cl_testharnesscommandhandler+0xc98>)
   8f512:	4798      	blx	r3
				cl_wait(100);
   8f514:	2064      	movs	r0, #100	; 0x64
   8f516:	4b49      	ldr	r3, [pc, #292]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f518:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   8f51a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   8f51e:	2001      	movs	r0, #1
   8f520:	4b54      	ldr	r3, [pc, #336]	; (8f674 <cl_testharnesscommandhandler+0xc94>)
   8f522:	4798      	blx	r3
				cl_wait(100);
   8f524:	2064      	movs	r0, #100	; 0x64
   8f526:	4b45      	ldr	r3, [pc, #276]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f528:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   8f52a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8f52e:	2001      	movs	r0, #1
   8f530:	4b50      	ldr	r3, [pc, #320]	; (8f674 <cl_testharnesscommandhandler+0xc94>)
   8f532:	4798      	blx	r3
				cl_wait(100);
   8f534:	2064      	movs	r0, #100	; 0x64
   8f536:	4b41      	ldr	r3, [pc, #260]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f538:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   8f53a:	2196      	movs	r1, #150	; 0x96
   8f53c:	2001      	movs	r0, #1
   8f53e:	4b4d      	ldr	r3, [pc, #308]	; (8f674 <cl_testharnesscommandhandler+0xc94>)
   8f540:	4798      	blx	r3
				
		break;
   8f542:	f001 bece 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   8f546:	2064      	movs	r0, #100	; 0x64
   8f548:	4b3c      	ldr	r3, [pc, #240]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f54a:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8f54c:	2004      	movs	r0, #4
   8f54e:	4b40      	ldr	r3, [pc, #256]	; (8f650 <cl_testharnesscommandhandler+0xc70>)
   8f550:	4798      	blx	r3
   8f552:	4603      	mov	r3, r0
   8f554:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   8f558:	4b48      	ldr	r3, [pc, #288]	; (8f67c <cl_testharnesscommandhandler+0xc9c>)
   8f55a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f55e:	2064      	movs	r0, #100	; 0x64
   8f560:	4b36      	ldr	r3, [pc, #216]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f562:	4798      	blx	r3
		break;
   8f564:	f001 bebd 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   8f568:	2064      	movs	r0, #100	; 0x64
   8f56a:	4b34      	ldr	r3, [pc, #208]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f56c:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f56e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f572:	2b02      	cmp	r3, #2
   8f574:	d104      	bne.n	8f580 <cl_testharnesscommandhandler+0xba0>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f576:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f57a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f57e:	e00b      	b.n	8f598 <cl_testharnesscommandhandler+0xbb8>
		}
		else if(TestMsg.datasize == 3)
   8f580:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f584:	2b03      	cmp	r3, #3
   8f586:	d107      	bne.n	8f598 <cl_testharnesscommandhandler+0xbb8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f588:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f58c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f590:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f594:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   8f598:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f59c:	4619      	mov	r1, r3
   8f59e:	2004      	movs	r0, #4
   8f5a0:	4b25      	ldr	r3, [pc, #148]	; (8f638 <cl_testharnesscommandhandler+0xc58>)
   8f5a2:	4798      	blx	r3
		uf_rotation_counter = 0;
   8f5a4:	4b36      	ldr	r3, [pc, #216]	; (8f680 <cl_testharnesscommandhandler+0xca0>)
   8f5a6:	2200      	movs	r2, #0
   8f5a8:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   8f5aa:	4b36      	ldr	r3, [pc, #216]	; (8f684 <cl_testharnesscommandhandler+0xca4>)
   8f5ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f5b0:	2064      	movs	r0, #100	; 0x64
   8f5b2:	4b22      	ldr	r3, [pc, #136]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5b4:	4798      	blx	r3
		break;
   8f5b6:	f001 be94 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   8f5ba:	2064      	movs	r0, #100	; 0x64
   8f5bc:	4b1f      	ldr	r3, [pc, #124]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5be:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   8f5c0:	4b31      	ldr	r3, [pc, #196]	; (8f688 <cl_testharnesscommandhandler+0xca8>)
   8f5c2:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   8f5c4:	2064      	movs	r0, #100	; 0x64
   8f5c6:	4b1d      	ldr	r3, [pc, #116]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5c8:	4798      	blx	r3
		break;
   8f5ca:	f001 be8a 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   8f5ce:	2064      	movs	r0, #100	; 0x64
   8f5d0:	4b1a      	ldr	r3, [pc, #104]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5d2:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   8f5d4:	2006      	movs	r0, #6
   8f5d6:	4b1c      	ldr	r3, [pc, #112]	; (8f648 <cl_testharnesscommandhandler+0xc68>)
   8f5d8:	4798      	blx	r3
   8f5da:	4603      	mov	r3, r0
   8f5dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   8f5e0:	4b2a      	ldr	r3, [pc, #168]	; (8f68c <cl_testharnesscommandhandler+0xcac>)
   8f5e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f5e6:	2064      	movs	r0, #100	; 0x64
   8f5e8:	4b14      	ldr	r3, [pc, #80]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5ea:	4798      	blx	r3
		break;
   8f5ec:	f001 be79 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   8f5f0:	2064      	movs	r0, #100	; 0x64
   8f5f2:	4b12      	ldr	r3, [pc, #72]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f5f4:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   8f5f6:	2006      	movs	r0, #6
   8f5f8:	4b15      	ldr	r3, [pc, #84]	; (8f650 <cl_testharnesscommandhandler+0xc70>)
   8f5fa:	4798      	blx	r3
   8f5fc:	4603      	mov	r3, r0
   8f5fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   8f602:	4b23      	ldr	r3, [pc, #140]	; (8f690 <cl_testharnesscommandhandler+0xcb0>)
   8f604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f608:	2064      	movs	r0, #100	; 0x64
   8f60a:	4b0c      	ldr	r3, [pc, #48]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f60c:	4798      	blx	r3
		break;
   8f60e:	f001 be68 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   8f612:	2064      	movs	r0, #100	; 0x64
   8f614:	4b09      	ldr	r3, [pc, #36]	; (8f63c <cl_testharnesscommandhandler+0xc5c>)
   8f616:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   8f618:	2300      	movs	r3, #0
   8f61a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   8f61e:	2003      	movs	r0, #3
   8f620:	4b09      	ldr	r3, [pc, #36]	; (8f648 <cl_testharnesscommandhandler+0xc68>)
   8f622:	4798      	blx	r3
   8f624:	4603      	mov	r3, r0
   8f626:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   8f62a:	f001 be5a 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
   8f62e:	bf00      	nop
   8f630:	487fcb92 	.word	0x487fcb92
   8f634:	3ffd7dbf 	.word	0x3ffd7dbf
   8f638:	00097569 	.word	0x00097569
   8f63c:	000918fd 	.word	0x000918fd
   8f640:	000a54f0 	.word	0x000a54f0
   8f644:	00097725 	.word	0x00097725
   8f648:	00097451 	.word	0x00097451
   8f64c:	000a54f8 	.word	0x000a54f8
   8f650:	0009748d 	.word	0x0009748d
   8f654:	000a5500 	.word	0x000a5500
   8f658:	000a5508 	.word	0x000a5508
   8f65c:	000a5514 	.word	0x000a5514
   8f660:	000a2ae5 	.word	0x000a2ae5
   8f664:	000a2bd1 	.word	0x000a2bd1
   8f668:	000a3105 	.word	0x000a3105
   8f66c:	20070102 	.word	0x20070102
   8f670:	000a551c 	.word	0x000a551c
   8f674:	0009381d 	.word	0x0009381d
   8f678:	00093785 	.word	0x00093785
   8f67c:	000a5524 	.word	0x000a5524
   8f680:	2007263e 	.word	0x2007263e
   8f684:	000a552c 	.word	0x000a552c
   8f688:	0009763d 	.word	0x0009763d
   8f68c:	000a5538 	.word	0x000a5538
   8f690:	000a5544 	.word	0x000a5544

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   8f694:	2064      	movs	r0, #100	; 0x64
   8f696:	4bb2      	ldr	r3, [pc, #712]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f698:	4798      	blx	r3
		Cl_Uint8Type data =0;
   8f69a:	2300      	movs	r3, #0
   8f69c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8f6a0:	2003      	movs	r0, #3
   8f6a2:	4bb0      	ldr	r3, [pc, #704]	; (8f964 <cl_testharnesscommandhandler+0xf84>)
   8f6a4:	4798      	blx	r3
   8f6a6:	4603      	mov	r3, r0
   8f6a8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f6ac:	2064      	movs	r0, #100	; 0x64
   8f6ae:	4bac      	ldr	r3, [pc, #688]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f6b0:	4798      	blx	r3
		break;
   8f6b2:	f001 be16 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   8f6b6:	2064      	movs	r0, #100	; 0x64
   8f6b8:	4ba9      	ldr	r3, [pc, #676]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f6ba:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8f6bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f6c0:	2b02      	cmp	r3, #2
   8f6c2:	d104      	bne.n	8f6ce <cl_testharnesscommandhandler+0xcee>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f6c4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f6c8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f6cc:	e00b      	b.n	8f6e6 <cl_testharnesscommandhandler+0xd06>
		}
		else if(TestMsg.datasize == 3)
   8f6ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f6d2:	2b03      	cmp	r3, #3
   8f6d4:	d107      	bne.n	8f6e6 <cl_testharnesscommandhandler+0xd06>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f6d6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f6da:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f6de:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f6e2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   8f6e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f6ea:	4a9f      	ldr	r2, [pc, #636]	; (8f968 <cl_testharnesscommandhandler+0xf88>)
   8f6ec:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   8f6ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f6f2:	4619      	mov	r1, r3
   8f6f4:	2003      	movs	r0, #3
   8f6f6:	4b9d      	ldr	r3, [pc, #628]	; (8f96c <cl_testharnesscommandhandler+0xf8c>)
   8f6f8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   8f6fa:	4b9d      	ldr	r3, [pc, #628]	; (8f970 <cl_testharnesscommandhandler+0xf90>)
   8f6fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f700:	2064      	movs	r0, #100	; 0x64
   8f702:	4b97      	ldr	r3, [pc, #604]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f704:	4798      	blx	r3
		break;
   8f706:	f001 bdec 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   8f70a:	2064      	movs	r0, #100	; 0x64
   8f70c:	4b94      	ldr	r3, [pc, #592]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f70e:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f710:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f714:	2b02      	cmp	r3, #2
   8f716:	d105      	bne.n	8f724 <cl_testharnesscommandhandler+0xd44>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f718:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f71c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   8f720:	f001 bdda 	b.w	912d8 <cl_testharnesscommandhandler+0x28f8>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   8f724:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f728:	2b03      	cmp	r3, #3
   8f72a:	f041 85d5 	bne.w	912d8 <cl_testharnesscommandhandler+0x28f8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f72e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f732:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f736:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f73a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   8f73e:	f001 bdcb 	b.w	912d8 <cl_testharnesscommandhandler+0x28f8>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   8f742:	2064      	movs	r0, #100	; 0x64
   8f744:	4b86      	ldr	r3, [pc, #536]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f746:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8f748:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f74c:	2b02      	cmp	r3, #2
   8f74e:	d105      	bne.n	8f75c <cl_testharnesscommandhandler+0xd7c>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f750:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f754:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   8f758:	f001 bdc0 	b.w	912dc <cl_testharnesscommandhandler+0x28fc>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   8f75c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f760:	2b03      	cmp	r3, #3
   8f762:	f041 85bb 	bne.w	912dc <cl_testharnesscommandhandler+0x28fc>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f766:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f76a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f76e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f772:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   8f776:	f001 bdb1 	b.w	912dc <cl_testharnesscommandhandler+0x28fc>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   8f77a:	2064      	movs	r0, #100	; 0x64
   8f77c:	4b78      	ldr	r3, [pc, #480]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f77e:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   8f780:	4b7c      	ldr	r3, [pc, #496]	; (8f974 <cl_testharnesscommandhandler+0xf94>)
   8f782:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   8f784:	4b7c      	ldr	r3, [pc, #496]	; (8f978 <cl_testharnesscommandhandler+0xf98>)
   8f786:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   8f78a:	f001 bdaa 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   8f78e:	2064      	movs	r0, #100	; 0x64
   8f790:	4b73      	ldr	r3, [pc, #460]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f792:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   8f794:	4b79      	ldr	r3, [pc, #484]	; (8f97c <cl_testharnesscommandhandler+0xf9c>)
   8f796:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   8f798:	4b79      	ldr	r3, [pc, #484]	; (8f980 <cl_testharnesscommandhandler+0xfa0>)
   8f79a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f79e:	2064      	movs	r0, #100	; 0x64
   8f7a0:	4b6f      	ldr	r3, [pc, #444]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7a2:	4798      	blx	r3
		break;
   8f7a4:	f001 bd9d 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   8f7a8:	2064      	movs	r0, #100	; 0x64
   8f7aa:	4b6d      	ldr	r3, [pc, #436]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7ac:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   8f7ae:	4b75      	ldr	r3, [pc, #468]	; (8f984 <cl_testharnesscommandhandler+0xfa4>)
   8f7b0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   8f7b2:	4b75      	ldr	r3, [pc, #468]	; (8f988 <cl_testharnesscommandhandler+0xfa8>)
   8f7b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f7b8:	2064      	movs	r0, #100	; 0x64
   8f7ba:	4b69      	ldr	r3, [pc, #420]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7bc:	4798      	blx	r3
		break;
   8f7be:	f001 bd90 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   8f7c2:	2064      	movs	r0, #100	; 0x64
   8f7c4:	4b66      	ldr	r3, [pc, #408]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7c6:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   8f7c8:	4b70      	ldr	r3, [pc, #448]	; (8f98c <cl_testharnesscommandhandler+0xfac>)
   8f7ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f7ce:	2064      	movs	r0, #100	; 0x64
   8f7d0:	4b63      	ldr	r3, [pc, #396]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7d2:	4798      	blx	r3
		break;
   8f7d4:	f001 bd85 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   8f7d8:	2064      	movs	r0, #100	; 0x64
   8f7da:	4b61      	ldr	r3, [pc, #388]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7dc:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   8f7de:	4b6c      	ldr	r3, [pc, #432]	; (8f990 <cl_testharnesscommandhandler+0xfb0>)
   8f7e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f7e4:	2064      	movs	r0, #100	; 0x64
   8f7e6:	4b5e      	ldr	r3, [pc, #376]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7e8:	4798      	blx	r3
		break;
   8f7ea:	f001 bd7a 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   8f7ee:	4b69      	ldr	r3, [pc, #420]	; (8f994 <cl_testharnesscommandhandler+0xfb4>)
   8f7f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   8f7f4:	2004      	movs	r0, #4
   8f7f6:	4b68      	ldr	r3, [pc, #416]	; (8f998 <cl_testharnesscommandhandler+0xfb8>)
   8f7f8:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f7fa:	2064      	movs	r0, #100	; 0x64
   8f7fc:	4b58      	ldr	r3, [pc, #352]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f7fe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   8f800:	2004      	movs	r0, #4
   8f802:	4b66      	ldr	r3, [pc, #408]	; (8f99c <cl_testharnesscommandhandler+0xfbc>)
   8f804:	4798      	blx	r3
		cl_wait(100);
   8f806:	2064      	movs	r0, #100	; 0x64
   8f808:	4b55      	ldr	r3, [pc, #340]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f80a:	4798      	blx	r3
		break;
   8f80c:	f001 bd69 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   8f810:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f814:	2b00      	cmp	r3, #0
   8f816:	d10d      	bne.n	8f834 <cl_testharnesscommandhandler+0xe54>
		{
			sv_cs_setpotvalue(3800);
   8f818:	f640 60d8 	movw	r0, #3800	; 0xed8
   8f81c:	4b60      	ldr	r3, [pc, #384]	; (8f9a0 <cl_testharnesscommandhandler+0xfc0>)
   8f81e:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   8f820:	f240 411a 	movw	r1, #1050	; 0x41a
   8f824:	2001      	movs	r0, #1
   8f826:	4b51      	ldr	r3, [pc, #324]	; (8f96c <cl_testharnesscommandhandler+0xf8c>)
   8f828:	4798      	blx	r3
   8f82a:	4603      	mov	r3, r0
   8f82c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   8f830:	f001 bd56 	b.w	912e0 <cl_testharnesscommandhandler+0x2900>
		{
			sv_cs_setpotvalue(3800);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
			
		}
		else if(TestMsg.data.byte[1] == 1)
   8f834:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f838:	2b01      	cmp	r3, #1
   8f83a:	d10d      	bne.n	8f858 <cl_testharnesscommandhandler+0xe78>
		{
						sv_cs_setpotvalue(2450);
   8f83c:	f640 1092 	movw	r0, #2450	; 0x992
   8f840:	4b57      	ldr	r3, [pc, #348]	; (8f9a0 <cl_testharnesscommandhandler+0xfc0>)
   8f842:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   8f844:	f240 21e9 	movw	r1, #745	; 0x2e9
   8f848:	2001      	movs	r0, #1
   8f84a:	4b48      	ldr	r3, [pc, #288]	; (8f96c <cl_testharnesscommandhandler+0xf8c>)
   8f84c:	4798      	blx	r3
   8f84e:	4603      	mov	r3, r0
   8f850:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   8f854:	f001 bd44 	b.w	912e0 <cl_testharnesscommandhandler+0x2900>
		else if(TestMsg.data.byte[1] == 1)
		{
						sv_cs_setpotvalue(2450);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
		}
		else if(TestMsg.data.byte[1] == 2)
   8f858:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f85c:	2b02      	cmp	r3, #2
   8f85e:	f041 853f 	bne.w	912e0 <cl_testharnesscommandhandler+0x2900>
		{
						sv_cs_setpotvalue(1090);
   8f862:	f240 4042 	movw	r0, #1090	; 0x442
   8f866:	4b4e      	ldr	r3, [pc, #312]	; (8f9a0 <cl_testharnesscommandhandler+0xfc0>)
   8f868:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   8f86a:	f44f 71b9 	mov.w	r1, #370	; 0x172
   8f86e:	2001      	movs	r0, #1
   8f870:	4b3e      	ldr	r3, [pc, #248]	; (8f96c <cl_testharnesscommandhandler+0xf8c>)
   8f872:	4798      	blx	r3
   8f874:	4603      	mov	r3, r0
   8f876:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   8f87a:	f001 bd31 	b.w	912e0 <cl_testharnesscommandhandler+0x2900>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   8f87e:	2300      	movs	r3, #0
   8f880:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   8f882:	2064      	movs	r0, #100	; 0x64
   8f884:	4b36      	ldr	r3, [pc, #216]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f886:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   8f888:	4b42      	ldr	r3, [pc, #264]	; (8f994 <cl_testharnesscommandhandler+0xfb4>)
   8f88a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8f88e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f892:	4618      	mov	r0, r3
   8f894:	4b40      	ldr	r3, [pc, #256]	; (8f998 <cl_testharnesscommandhandler+0xfb8>)
   8f896:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   8f898:	2064      	movs	r0, #100	; 0x64
   8f89a:	4b31      	ldr	r3, [pc, #196]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f89c:	4798      	blx	r3
					
		}
		}
		break;
   8f89e:	f001 bd20 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   8f8a2:	2064      	movs	r0, #100	; 0x64
   8f8a4:	4b2e      	ldr	r3, [pc, #184]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f8a6:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8f8a8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f8ac:	4618      	mov	r0, r3
   8f8ae:	4b3b      	ldr	r3, [pc, #236]	; (8f99c <cl_testharnesscommandhandler+0xfbc>)
   8f8b0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   8f8b2:	4b3c      	ldr	r3, [pc, #240]	; (8f9a4 <cl_testharnesscommandhandler+0xfc4>)
   8f8b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f8b8:	2064      	movs	r0, #100	; 0x64
   8f8ba:	4b29      	ldr	r3, [pc, #164]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f8bc:	4798      	blx	r3
		break;
   8f8be:	f001 bd10 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   8f8c2:	2064      	movs	r0, #100	; 0x64
   8f8c4:	4b26      	ldr	r3, [pc, #152]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f8c6:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   8f8c8:	4b37      	ldr	r3, [pc, #220]	; (8f9a8 <cl_testharnesscommandhandler+0xfc8>)
   8f8ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   8f8ce:	2301      	movs	r3, #1
   8f8d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8f8d4:	e00c      	b.n	8f8f0 <cl_testharnesscommandhandler+0xf10>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   8f8d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8f8da:	4618      	mov	r0, r3
   8f8dc:	4b2e      	ldr	r3, [pc, #184]	; (8f998 <cl_testharnesscommandhandler+0xfb8>)
   8f8de:	4798      	blx	r3
				cl_wait(10);
   8f8e0:	200a      	movs	r0, #10
   8f8e2:	4b1f      	ldr	r3, [pc, #124]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f8e4:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   8f8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8f8ea:	3301      	adds	r3, #1
   8f8ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8f8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8f8f4:	2b14      	cmp	r3, #20
   8f8f6:	d9ee      	bls.n	8f8d6 <cl_testharnesscommandhandler+0xef6>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   8f8f8:	2064      	movs	r0, #100	; 0x64
   8f8fa:	4b19      	ldr	r3, [pc, #100]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f8fc:	4798      	blx	r3
		break;
   8f8fe:	f001 bcf0 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   8f902:	2064      	movs	r0, #100	; 0x64
   8f904:	4b16      	ldr	r3, [pc, #88]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f906:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   8f908:	2005      	movs	r0, #5
   8f90a:	4b28      	ldr	r3, [pc, #160]	; (8f9ac <cl_testharnesscommandhandler+0xfcc>)
   8f90c:	4798      	blx	r3
   8f90e:	4603      	mov	r3, r0
   8f910:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   8f914:	4b26      	ldr	r3, [pc, #152]	; (8f9b0 <cl_testharnesscommandhandler+0xfd0>)
   8f916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f91a:	2064      	movs	r0, #100	; 0x64
   8f91c:	4b10      	ldr	r3, [pc, #64]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f91e:	4798      	blx	r3
		break;
   8f920:	f001 bcdf 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   8f924:	2064      	movs	r0, #100	; 0x64
   8f926:	4b0e      	ldr	r3, [pc, #56]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f928:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8f92a:	2005      	movs	r0, #5
   8f92c:	4b0d      	ldr	r3, [pc, #52]	; (8f964 <cl_testharnesscommandhandler+0xf84>)
   8f92e:	4798      	blx	r3
   8f930:	4603      	mov	r3, r0
   8f932:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   8f936:	4b1f      	ldr	r3, [pc, #124]	; (8f9b4 <cl_testharnesscommandhandler+0xfd4>)
   8f938:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f93c:	2064      	movs	r0, #100	; 0x64
   8f93e:	4b08      	ldr	r3, [pc, #32]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f940:	4798      	blx	r3
		break;
   8f942:	f001 bcce 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   8f946:	2064      	movs	r0, #100	; 0x64
   8f948:	4b05      	ldr	r3, [pc, #20]	; (8f960 <cl_testharnesscommandhandler+0xf80>)
   8f94a:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   8f94c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f950:	2b02      	cmp	r3, #2
   8f952:	d131      	bne.n	8f9b8 <cl_testharnesscommandhandler+0xfd8>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f954:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f958:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f95c:	e038      	b.n	8f9d0 <cl_testharnesscommandhandler+0xff0>
   8f95e:	bf00      	nop
   8f960:	000918fd 	.word	0x000918fd
   8f964:	0009748d 	.word	0x0009748d
   8f968:	20073194 	.word	0x20073194
   8f96c:	00097569 	.word	0x00097569
   8f970:	000a5554 	.word	0x000a5554
   8f974:	00097651 	.word	0x00097651
   8f978:	000a555c 	.word	0x000a555c
   8f97c:	00097541 	.word	0x00097541
   8f980:	000a5564 	.word	0x000a5564
   8f984:	00097555 	.word	0x00097555
   8f988:	000a556c 	.word	0x000a556c
   8f98c:	000a5574 	.word	0x000a5574
   8f990:	000a5580 	.word	0x000a5580
   8f994:	000a558c 	.word	0x000a558c
   8f998:	000974f1 	.word	0x000974f1
   8f99c:	00097511 	.word	0x00097511
   8f9a0:	00097999 	.word	0x00097999
   8f9a4:	000a5594 	.word	0x000a5594
   8f9a8:	000a559c 	.word	0x000a559c
   8f9ac:	00097451 	.word	0x00097451
   8f9b0:	000a55a8 	.word	0x000a55a8
   8f9b4:	000a55b0 	.word	0x000a55b0
						}
						else if(TestMsg.datasize == 3)
   8f9b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f9bc:	2b03      	cmp	r3, #3
   8f9be:	d107      	bne.n	8f9d0 <cl_testharnesscommandhandler+0xff0>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f9c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9c4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f9c8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f9cc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   8f9d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f9d4:	4619      	mov	r1, r3
   8f9d6:	2005      	movs	r0, #5
   8f9d8:	4b9e      	ldr	r3, [pc, #632]	; (8fc54 <cl_testharnesscommandhandler+0x1274>)
   8f9da:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   8f9dc:	4b9e      	ldr	r3, [pc, #632]	; (8fc58 <cl_testharnesscommandhandler+0x1278>)
   8f9de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8f9e2:	2064      	movs	r0, #100	; 0x64
   8f9e4:	4b9d      	ldr	r3, [pc, #628]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8f9e6:	4798      	blx	r3
		break;
   8f9e8:	f001 bc7b 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   8f9ec:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f9f0:	2b00      	cmp	r3, #0
   8f9f2:	d003      	beq.n	8f9fc <cl_testharnesscommandhandler+0x101c>
		{
			sv_cntrl_setHepa_dir();
   8f9f4:	4b9a      	ldr	r3, [pc, #616]	; (8fc60 <cl_testharnesscommandhandler+0x1280>)
   8f9f6:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   8f9f8:	f001 bc73 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   8f9fc:	4b99      	ldr	r3, [pc, #612]	; (8fc64 <cl_testharnesscommandhandler+0x1284>)
   8f9fe:	4798      	blx	r3
		}
		break;
   8fa00:	f001 bc6f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   8fa04:	2032      	movs	r0, #50	; 0x32
   8fa06:	4b95      	ldr	r3, [pc, #596]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa08:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8fa0a:	2001      	movs	r0, #1
   8fa0c:	4b96      	ldr	r3, [pc, #600]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fa0e:	4798      	blx	r3
   8fa10:	4603      	mov	r3, r0
   8fa12:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fa16:	200a      	movs	r0, #10
   8fa18:	4b90      	ldr	r3, [pc, #576]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa1a:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8fa1c:	2002      	movs	r0, #2
   8fa1e:	4b92      	ldr	r3, [pc, #584]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fa20:	4798      	blx	r3
   8fa22:	4603      	mov	r3, r0
   8fa24:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fa28:	200a      	movs	r0, #10
   8fa2a:	4b8c      	ldr	r3, [pc, #560]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa2c:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8fa2e:	2003      	movs	r0, #3
   8fa30:	4b8d      	ldr	r3, [pc, #564]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fa32:	4798      	blx	r3
   8fa34:	4603      	mov	r3, r0
   8fa36:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fa3a:	200a      	movs	r0, #10
   8fa3c:	4b87      	ldr	r3, [pc, #540]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa3e:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8fa40:	2004      	movs	r0, #4
   8fa42:	4b89      	ldr	r3, [pc, #548]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fa44:	4798      	blx	r3
   8fa46:	4603      	mov	r3, r0
   8fa48:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8fa4c:	200a      	movs	r0, #10
   8fa4e:	4b83      	ldr	r3, [pc, #524]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa50:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8fa52:	2005      	movs	r0, #5
   8fa54:	4b84      	ldr	r3, [pc, #528]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fa56:	4798      	blx	r3
   8fa58:	4603      	mov	r3, r0
   8fa5a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   8fa5e:	2032      	movs	r0, #50	; 0x32
   8fa60:	4b7e      	ldr	r3, [pc, #504]	; (8fc5c <cl_testharnesscommandhandler+0x127c>)
   8fa62:	4798      	blx	r3
		break;
   8fa64:	f001 bc3d 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   8fa68:	2006      	movs	r0, #6
   8fa6a:	4b80      	ldr	r3, [pc, #512]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fa6c:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fa6e:	2007      	movs	r0, #7
   8fa70:	4b7e      	ldr	r3, [pc, #504]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fa72:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fa74:	200c      	movs	r0, #12
   8fa76:	4b7d      	ldr	r3, [pc, #500]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fa78:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8fa7a:	2009      	movs	r0, #9
   8fa7c:	4b7b      	ldr	r3, [pc, #492]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fa7e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8fa80:	2005      	movs	r0, #5
   8fa82:	4b7b      	ldr	r3, [pc, #492]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fa84:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fa86:	2008      	movs	r0, #8
   8fa88:	4b79      	ldr	r3, [pc, #484]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fa8a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fa8c:	200a      	movs	r0, #10
   8fa8e:	4b78      	ldr	r3, [pc, #480]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fa90:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fa92:	200b      	movs	r0, #11
   8fa94:	4b76      	ldr	r3, [pc, #472]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fa96:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   8fa98:	4b76      	ldr	r3, [pc, #472]	; (8fc74 <cl_testharnesscommandhandler+0x1294>)
   8fa9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8fa9e:	f001 bc20 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   8faa2:	2005      	movs	r0, #5
   8faa4:	4b71      	ldr	r3, [pc, #452]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8faa6:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8faa8:	2008      	movs	r0, #8
   8faaa:	4b70      	ldr	r3, [pc, #448]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8faac:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8faae:	200a      	movs	r0, #10
   8fab0:	4b6e      	ldr	r3, [pc, #440]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fab2:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fab4:	200b      	movs	r0, #11
   8fab6:	4b6d      	ldr	r3, [pc, #436]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fab8:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8faba:	200c      	movs	r0, #12
   8fabc:	4b6c      	ldr	r3, [pc, #432]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fabe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fac0:	2009      	movs	r0, #9
   8fac2:	4b6b      	ldr	r3, [pc, #428]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fac4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fac6:	2006      	movs	r0, #6
   8fac8:	4b69      	ldr	r3, [pc, #420]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8faca:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8facc:	2007      	movs	r0, #7
   8face:	4b68      	ldr	r3, [pc, #416]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fad0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   8fad2:	4b69      	ldr	r3, [pc, #420]	; (8fc78 <cl_testharnesscommandhandler+0x1298>)
   8fad4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8fad8:	f001 bc03 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   8fadc:	2006      	movs	r0, #6
   8fade:	4b63      	ldr	r3, [pc, #396]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fae0:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fae2:	2007      	movs	r0, #7
   8fae4:	4b61      	ldr	r3, [pc, #388]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fae6:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fae8:	200c      	movs	r0, #12
   8faea:	4b60      	ldr	r3, [pc, #384]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8faec:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8faee:	2009      	movs	r0, #9
   8faf0:	4b5e      	ldr	r3, [pc, #376]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8faf2:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8faf4:	2005      	movs	r0, #5
   8faf6:	4b5e      	ldr	r3, [pc, #376]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8faf8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fafa:	2008      	movs	r0, #8
   8fafc:	4b5c      	ldr	r3, [pc, #368]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fafe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fb00:	200a      	movs	r0, #10
   8fb02:	4b5b      	ldr	r3, [pc, #364]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb04:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fb06:	200b      	movs	r0, #11
   8fb08:	4b59      	ldr	r3, [pc, #356]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb0a:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8fb0c:	200d      	movs	r0, #13
   8fb0e:	4b57      	ldr	r3, [pc, #348]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb10:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8fb12:	200e      	movs	r0, #14
   8fb14:	4b55      	ldr	r3, [pc, #340]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb16:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   8fb18:	4b58      	ldr	r3, [pc, #352]	; (8fc7c <cl_testharnesscommandhandler+0x129c>)
   8fb1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8fb1e:	f001 bbe0 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   8fb22:	2005      	movs	r0, #5
   8fb24:	4b51      	ldr	r3, [pc, #324]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb26:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8fb28:	2008      	movs	r0, #8
   8fb2a:	4b50      	ldr	r3, [pc, #320]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb2c:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8fb2e:	200a      	movs	r0, #10
   8fb30:	4b4e      	ldr	r3, [pc, #312]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb32:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fb34:	200b      	movs	r0, #11
   8fb36:	4b4d      	ldr	r3, [pc, #308]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb38:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fb3a:	200c      	movs	r0, #12
   8fb3c:	4b4c      	ldr	r3, [pc, #304]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb3e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fb40:	2009      	movs	r0, #9
   8fb42:	4b4b      	ldr	r3, [pc, #300]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb44:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fb46:	2006      	movs	r0, #6
   8fb48:	4b49      	ldr	r3, [pc, #292]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb4a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fb4c:	2007      	movs	r0, #7
   8fb4e:	4b48      	ldr	r3, [pc, #288]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb50:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8fb52:	200d      	movs	r0, #13
   8fb54:	4b45      	ldr	r3, [pc, #276]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb56:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8fb58:	200e      	movs	r0, #14
   8fb5a:	4b44      	ldr	r3, [pc, #272]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb5c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   8fb5e:	4b48      	ldr	r3, [pc, #288]	; (8fc80 <cl_testharnesscommandhandler+0x12a0>)
   8fb60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8fb64:	f001 bbbd 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   8fb68:	2006      	movs	r0, #6
   8fb6a:	4b40      	ldr	r3, [pc, #256]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb6c:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8fb6e:	2007      	movs	r0, #7
   8fb70:	4b3e      	ldr	r3, [pc, #248]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb72:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8fb74:	200c      	movs	r0, #12
   8fb76:	4b3d      	ldr	r3, [pc, #244]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb78:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8fb7a:	2009      	movs	r0, #9
   8fb7c:	4b3b      	ldr	r3, [pc, #236]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb7e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8fb80:	2005      	movs	r0, #5
   8fb82:	4b3b      	ldr	r3, [pc, #236]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb84:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fb86:	2008      	movs	r0, #8
   8fb88:	4b39      	ldr	r3, [pc, #228]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb8a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fb8c:	200a      	movs	r0, #10
   8fb8e:	4b38      	ldr	r3, [pc, #224]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb90:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fb92:	200b      	movs	r0, #11
   8fb94:	4b36      	ldr	r3, [pc, #216]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fb96:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8fb98:	2004      	movs	r0, #4
   8fb9a:	4b34      	ldr	r3, [pc, #208]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fb9c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8fb9e:	200d      	movs	r0, #13
   8fba0:	4b33      	ldr	r3, [pc, #204]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fba2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8fba4:	200e      	movs	r0, #14
   8fba6:	4b32      	ldr	r3, [pc, #200]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fba8:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   8fbaa:	4b36      	ldr	r3, [pc, #216]	; (8fc84 <cl_testharnesscommandhandler+0x12a4>)
   8fbac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8fbb0:	f001 bb97 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   8fbb4:	2005      	movs	r0, #5
   8fbb6:	4b2d      	ldr	r3, [pc, #180]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fbb8:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8fbba:	2008      	movs	r0, #8
   8fbbc:	4b2b      	ldr	r3, [pc, #172]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fbbe:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8fbc0:	200a      	movs	r0, #10
   8fbc2:	4b2a      	ldr	r3, [pc, #168]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fbc4:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8fbc6:	200b      	movs	r0, #11
   8fbc8:	4b28      	ldr	r3, [pc, #160]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fbca:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fbcc:	200c      	movs	r0, #12
   8fbce:	4b28      	ldr	r3, [pc, #160]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbd0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fbd2:	2009      	movs	r0, #9
   8fbd4:	4b26      	ldr	r3, [pc, #152]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbd6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fbd8:	2006      	movs	r0, #6
   8fbda:	4b25      	ldr	r3, [pc, #148]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbdc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fbde:	2007      	movs	r0, #7
   8fbe0:	4b23      	ldr	r3, [pc, #140]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbe2:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8fbe4:	2004      	movs	r0, #4
   8fbe6:	4b21      	ldr	r3, [pc, #132]	; (8fc6c <cl_testharnesscommandhandler+0x128c>)
   8fbe8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8fbea:	200d      	movs	r0, #13
   8fbec:	4b20      	ldr	r3, [pc, #128]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbee:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8fbf0:	200e      	movs	r0, #14
   8fbf2:	4b1f      	ldr	r3, [pc, #124]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fbf4:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   8fbf6:	4b24      	ldr	r3, [pc, #144]	; (8fc88 <cl_testharnesscommandhandler+0x12a8>)
   8fbf8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8fbfc:	f001 bb71 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   8fc00:	2005      	movs	r0, #5
   8fc02:	4b1b      	ldr	r3, [pc, #108]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc04:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8fc06:	2008      	movs	r0, #8
   8fc08:	4b19      	ldr	r3, [pc, #100]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc0a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8fc0c:	200a      	movs	r0, #10
   8fc0e:	4b18      	ldr	r3, [pc, #96]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc10:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8fc12:	200b      	movs	r0, #11
   8fc14:	4b16      	ldr	r3, [pc, #88]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc16:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8fc18:	200c      	movs	r0, #12
   8fc1a:	4b15      	ldr	r3, [pc, #84]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc1c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8fc1e:	2009      	movs	r0, #9
   8fc20:	4b13      	ldr	r3, [pc, #76]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc22:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8fc24:	2006      	movs	r0, #6
   8fc26:	4b12      	ldr	r3, [pc, #72]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc28:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8fc2a:	2007      	movs	r0, #7
   8fc2c:	4b10      	ldr	r3, [pc, #64]	; (8fc70 <cl_testharnesscommandhandler+0x1290>)
   8fc2e:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8fc30:	2001      	movs	r0, #1
   8fc32:	4b0d      	ldr	r3, [pc, #52]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fc34:	4798      	blx	r3
   8fc36:	4603      	mov	r3, r0
   8fc38:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8fc3c:	2002      	movs	r0, #2
   8fc3e:	4b0a      	ldr	r3, [pc, #40]	; (8fc68 <cl_testharnesscommandhandler+0x1288>)
   8fc40:	4798      	blx	r3
   8fc42:	4603      	mov	r3, r0
   8fc44:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   8fc48:	4b10      	ldr	r3, [pc, #64]	; (8fc8c <cl_testharnesscommandhandler+0x12ac>)
   8fc4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   8fc4e:	f001 bb48 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
   8fc52:	bf00      	nop
   8fc54:	00097569 	.word	0x00097569
   8fc58:	000a55b8 	.word	0x000a55b8
   8fc5c:	000918fd 	.word	0x000918fd
   8fc60:	00097541 	.word	0x00097541
   8fc64:	00097555 	.word	0x00097555
   8fc68:	0009748d 	.word	0x0009748d
   8fc6c:	000974f1 	.word	0x000974f1
   8fc70:	00097511 	.word	0x00097511
   8fc74:	000a55c0 	.word	0x000a55c0
   8fc78:	000a55cc 	.word	0x000a55cc
   8fc7c:	000a55d8 	.word	0x000a55d8
   8fc80:	000a55e8 	.word	0x000a55e8
   8fc84:	000a55f8 	.word	0x000a55f8
   8fc88:	000a5604 	.word	0x000a5604
   8fc8c:	000a5610 	.word	0x000a5610
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   8fc90:	4bb2      	ldr	r3, [pc, #712]	; (8ff5c <cl_testharnesscommandhandler+0x157c>)
   8fc92:	2201      	movs	r2, #1
   8fc94:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   8fc96:	2005      	movs	r0, #5
   8fc98:	4bb1      	ldr	r3, [pc, #708]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fc9a:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   8fc9c:	2008      	movs	r0, #8
   8fc9e:	4bb0      	ldr	r3, [pc, #704]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fca0:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   8fca2:	200a      	movs	r0, #10
   8fca4:	4bae      	ldr	r3, [pc, #696]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fca6:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   8fca8:	200b      	movs	r0, #11
   8fcaa:	4bad      	ldr	r3, [pc, #692]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fcac:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   8fcae:	200c      	movs	r0, #12
   8fcb0:	4bab      	ldr	r3, [pc, #684]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fcb2:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   8fcb4:	2009      	movs	r0, #9
   8fcb6:	4baa      	ldr	r3, [pc, #680]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fcb8:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   8fcba:	2006      	movs	r0, #6
   8fcbc:	4ba8      	ldr	r3, [pc, #672]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fcbe:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   8fcc0:	2007      	movs	r0, #7
   8fcc2:	4ba7      	ldr	r3, [pc, #668]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fcc4:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8fcc6:	2001      	movs	r0, #1
   8fcc8:	4ba6      	ldr	r3, [pc, #664]	; (8ff64 <cl_testharnesscommandhandler+0x1584>)
   8fcca:	4798      	blx	r3
   8fccc:	4603      	mov	r3, r0
   8fcce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8fcd2:	2002      	movs	r0, #2
   8fcd4:	4ba3      	ldr	r3, [pc, #652]	; (8ff64 <cl_testharnesscommandhandler+0x1584>)
   8fcd6:	4798      	blx	r3
   8fcd8:	4603      	mov	r3, r0
   8fcda:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   8fcde:	4ba2      	ldr	r3, [pc, #648]	; (8ff68 <cl_testharnesscommandhandler+0x1588>)
   8fce0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8fce4:	f001 bafd 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   8fce8:	4b9c      	ldr	r3, [pc, #624]	; (8ff5c <cl_testharnesscommandhandler+0x157c>)
   8fcea:	2200      	movs	r2, #0
   8fcec:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   8fcee:	4b9f      	ldr	r3, [pc, #636]	; (8ff6c <cl_testharnesscommandhandler+0x158c>)
   8fcf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8fcf4:	2001      	movs	r0, #1
   8fcf6:	4b9e      	ldr	r3, [pc, #632]	; (8ff70 <cl_testharnesscommandhandler+0x1590>)
   8fcf8:	4798      	blx	r3
   8fcfa:	4603      	mov	r3, r0
   8fcfc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8fd00:	2002      	movs	r0, #2
   8fd02:	4b9b      	ldr	r3, [pc, #620]	; (8ff70 <cl_testharnesscommandhandler+0x1590>)
   8fd04:	4798      	blx	r3
   8fd06:	4603      	mov	r3, r0
   8fd08:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   8fd0c:	4b93      	ldr	r3, [pc, #588]	; (8ff5c <cl_testharnesscommandhandler+0x157c>)
   8fd0e:	2200      	movs	r2, #0
   8fd10:	701a      	strb	r2, [r3, #0]
		break;
   8fd12:	f001 bae6 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   8fd16:	4b97      	ldr	r3, [pc, #604]	; (8ff74 <cl_testharnesscommandhandler+0x1594>)
   8fd18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   8fd1c:	2005      	movs	r0, #5
   8fd1e:	4b96      	ldr	r3, [pc, #600]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd20:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   8fd22:	2008      	movs	r0, #8
   8fd24:	4b94      	ldr	r3, [pc, #592]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd26:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   8fd28:	200a      	movs	r0, #10
   8fd2a:	4b93      	ldr	r3, [pc, #588]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd2c:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   8fd2e:	200b      	movs	r0, #11
   8fd30:	4b91      	ldr	r3, [pc, #580]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd32:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   8fd34:	200c      	movs	r0, #12
   8fd36:	4b90      	ldr	r3, [pc, #576]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd38:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   8fd3a:	2009      	movs	r0, #9
   8fd3c:	4b8e      	ldr	r3, [pc, #568]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd3e:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   8fd40:	2006      	movs	r0, #6
   8fd42:	4b8d      	ldr	r3, [pc, #564]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd44:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   8fd46:	2007      	movs	r0, #7
   8fd48:	4b8b      	ldr	r3, [pc, #556]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fd4a:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8fd4c:	2001      	movs	r0, #1
   8fd4e:	4b88      	ldr	r3, [pc, #544]	; (8ff70 <cl_testharnesscommandhandler+0x1590>)
   8fd50:	4798      	blx	r3
   8fd52:	4603      	mov	r3, r0
   8fd54:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8fd58:	2002      	movs	r0, #2
   8fd5a:	4b85      	ldr	r3, [pc, #532]	; (8ff70 <cl_testharnesscommandhandler+0x1590>)
   8fd5c:	4798      	blx	r3
   8fd5e:	4603      	mov	r3, r0
   8fd60:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   8fd64:	4b7d      	ldr	r3, [pc, #500]	; (8ff5c <cl_testharnesscommandhandler+0x157c>)
   8fd66:	2200      	movs	r2, #0
   8fd68:	701a      	strb	r2, [r3, #0]
					break;
   8fd6a:	f001 baba 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   8fd6e:	4b83      	ldr	r3, [pc, #524]	; (8ff7c <cl_testharnesscommandhandler+0x159c>)
   8fd70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   8fd74:	4b82      	ldr	r3, [pc, #520]	; (8ff80 <cl_testharnesscommandhandler+0x15a0>)
   8fd76:	2205      	movs	r2, #5
   8fd78:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   8fd7a:	4b78      	ldr	r3, [pc, #480]	; (8ff5c <cl_testharnesscommandhandler+0x157c>)
   8fd7c:	2200      	movs	r2, #0
   8fd7e:	701a      	strb	r2, [r3, #0]
			break;
   8fd80:	f001 baaf 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   8fd84:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8fd88:	4b7e      	ldr	r3, [pc, #504]	; (8ff84 <cl_testharnesscommandhandler+0x15a4>)
   8fd8a:	4798      	blx	r3
			
			break;
   8fd8c:	f001 baa9 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   8fd90:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   8fd94:	4b7b      	ldr	r3, [pc, #492]	; (8ff84 <cl_testharnesscommandhandler+0x15a4>)
   8fd96:	4798      	blx	r3
			break;
   8fd98:	f001 baa3 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   8fd9c:	2064      	movs	r0, #100	; 0x64
   8fd9e:	4b7a      	ldr	r3, [pc, #488]	; (8ff88 <cl_testharnesscommandhandler+0x15a8>)
   8fda0:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8fda2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fda6:	2b02      	cmp	r3, #2
   8fda8:	d104      	bne.n	8fdb4 <cl_testharnesscommandhandler+0x13d4>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8fdaa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fdae:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8fdb2:	e00b      	b.n	8fdcc <cl_testharnesscommandhandler+0x13ec>
				}
				else if(TestMsg.datasize == 3)
   8fdb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8fdb8:	2b03      	cmp	r3, #3
   8fdba:	d107      	bne.n	8fdcc <cl_testharnesscommandhandler+0x13ec>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8fdbc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fdc0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8fdc4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fdc8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   8fdcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8fdd0:	4a6e      	ldr	r2, [pc, #440]	; (8ff8c <cl_testharnesscommandhandler+0x15ac>)
   8fdd2:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   8fdd4:	4b6d      	ldr	r3, [pc, #436]	; (8ff8c <cl_testharnesscommandhandler+0x15ac>)
   8fdd6:	681b      	ldr	r3, [r3, #0]
   8fdd8:	4618      	mov	r0, r3
   8fdda:	4b6a      	ldr	r3, [pc, #424]	; (8ff84 <cl_testharnesscommandhandler+0x15a4>)
   8fddc:	4798      	blx	r3
			break;
   8fdde:	f001 ba80 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   8fde2:	4b6b      	ldr	r3, [pc, #428]	; (8ff90 <cl_testharnesscommandhandler+0x15b0>)
   8fde4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   8fde8:	2004      	movs	r0, #4
   8fdea:	4b63      	ldr	r3, [pc, #396]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fdec:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   8fdee:	2032      	movs	r0, #50	; 0x32
   8fdf0:	4b65      	ldr	r3, [pc, #404]	; (8ff88 <cl_testharnesscommandhandler+0x15a8>)
   8fdf2:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   8fdf4:	2004      	movs	r0, #4
   8fdf6:	4b5a      	ldr	r3, [pc, #360]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fdf8:	4798      	blx	r3
						cl_wait(50);
   8fdfa:	2032      	movs	r0, #50	; 0x32
   8fdfc:	4b62      	ldr	r3, [pc, #392]	; (8ff88 <cl_testharnesscommandhandler+0x15a8>)
   8fdfe:	4798      	blx	r3
			break;
   8fe00:	f001 ba6f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   8fe04:	4b63      	ldr	r3, [pc, #396]	; (8ff94 <cl_testharnesscommandhandler+0x15b4>)
   8fe06:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   8fe08:	4b63      	ldr	r3, [pc, #396]	; (8ff98 <cl_testharnesscommandhandler+0x15b8>)
   8fe0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   8fe0e:	f001 ba68 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8fe12:	2300      	movs	r3, #0
   8fe14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   8fe18:	e008      	b.n	8fe2c <cl_testharnesscommandhandler+0x144c>
			{
							cl_indata.word = count1;
   8fe1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8fe1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8fe22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8fe26:	3301      	adds	r3, #1
   8fe28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   8fe2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8fe30:	2b0f      	cmp	r3, #15
   8fe32:	d9f2      	bls.n	8fe1a <cl_testharnesscommandhandler+0x143a>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   8fe34:	f001 ba55 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   8fe38:	4b58      	ldr	r3, [pc, #352]	; (8ff9c <cl_testharnesscommandhandler+0x15bc>)
   8fe3a:	2201      	movs	r2, #1
   8fe3c:	701a      	strb	r2, [r3, #0]
			break;
   8fe3e:	f001 ba50 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   8fe42:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fe46:	2b01      	cmp	r3, #1
   8fe48:	d107      	bne.n	8fe5a <cl_testharnesscommandhandler+0x147a>
				{
					Current_sense_trigger = true;
   8fe4a:	4b55      	ldr	r3, [pc, #340]	; (8ffa0 <cl_testharnesscommandhandler+0x15c0>)
   8fe4c:	2201      	movs	r2, #1
   8fe4e:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   8fe50:	4b54      	ldr	r3, [pc, #336]	; (8ffa4 <cl_testharnesscommandhandler+0x15c4>)
   8fe52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8fe56:	f001 ba44 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   8fe5a:	4b51      	ldr	r3, [pc, #324]	; (8ffa0 <cl_testharnesscommandhandler+0x15c0>)
   8fe5c:	2200      	movs	r2, #0
   8fe5e:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   8fe60:	4b51      	ldr	r3, [pc, #324]	; (8ffa8 <cl_testharnesscommandhandler+0x15c8>)
   8fe62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8fe66:	f001 ba3c 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   8fe6a:	4b50      	ldr	r3, [pc, #320]	; (8ffac <cl_testharnesscommandhandler+0x15cc>)
   8fe6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   8fe70:	2207      	movs	r2, #7
   8fe72:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   8fe76:	2018      	movs	r0, #24
   8fe78:	4b4d      	ldr	r3, [pc, #308]	; (8ffb0 <cl_testharnesscommandhandler+0x15d0>)
   8fe7a:	4798      	blx	r3
   8fe7c:	4603      	mov	r3, r0
   8fe7e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   8fe82:	f001 ba2e 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   8fe86:	2004      	movs	r0, #4
   8fe88:	4b3b      	ldr	r3, [pc, #236]	; (8ff78 <cl_testharnesscommandhandler+0x1598>)
   8fe8a:	4798      	blx	r3
							cl_wait(50);
   8fe8c:	2032      	movs	r0, #50	; 0x32
   8fe8e:	4b3e      	ldr	r3, [pc, #248]	; (8ff88 <cl_testharnesscommandhandler+0x15a8>)
   8fe90:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   8fe92:	2004      	movs	r0, #4
   8fe94:	4b32      	ldr	r3, [pc, #200]	; (8ff60 <cl_testharnesscommandhandler+0x1580>)
   8fe96:	4798      	blx	r3
						break;
   8fe98:	f001 ba23 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   8fe9c:	4b45      	ldr	r3, [pc, #276]	; (8ffb4 <cl_testharnesscommandhandler+0x15d4>)
   8fe9e:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   8fea0:	f001 ba1f 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   8fea4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fea8:	2b01      	cmp	r3, #1
   8feaa:	d107      	bne.n	8febc <cl_testharnesscommandhandler+0x14dc>
				{
						gflow_en = true;
   8feac:	4b42      	ldr	r3, [pc, #264]	; (8ffb8 <cl_testharnesscommandhandler+0x15d8>)
   8feae:	2201      	movs	r2, #1
   8feb0:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   8feb2:	4b42      	ldr	r3, [pc, #264]	; (8ffbc <cl_testharnesscommandhandler+0x15dc>)
   8feb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8feb8:	f001 ba13 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   8febc:	4b3e      	ldr	r3, [pc, #248]	; (8ffb8 <cl_testharnesscommandhandler+0x15d8>)
   8febe:	2200      	movs	r2, #0
   8fec0:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   8fec2:	4b3f      	ldr	r3, [pc, #252]	; (8ffc0 <cl_testharnesscommandhandler+0x15e0>)
   8fec4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8fec8:	f001 ba0b 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   8fecc:	4b3d      	ldr	r3, [pc, #244]	; (8ffc4 <cl_testharnesscommandhandler+0x15e4>)
   8fece:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   8fed0:	f001 ba07 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propo_ACIDrc( TestMsg.data.byte[1]);
   8fed4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fed8:	b29b      	uxth	r3, r3
   8feda:	4618      	mov	r0, r3
   8fedc:	4b3a      	ldr	r3, [pc, #232]	; (8ffc8 <cl_testharnesscommandhandler+0x15e8>)
   8fede:	4798      	blx	r3
		break;
   8fee0:	f001 b9ff 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   8fee4:	4b39      	ldr	r3, [pc, #228]	; (8ffcc <cl_testharnesscommandhandler+0x15ec>)
   8fee6:	2200      	movs	r2, #0
   8fee8:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   8feea:	2300      	movs	r3, #0
   8feec:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   8fef0:	4b37      	ldr	r3, [pc, #220]	; (8ffd0 <cl_testharnesscommandhandler+0x15f0>)
   8fef2:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   8fef4:	f001 b9f5 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_STOP_PROPO:
			cl_wait(100);
   8fef8:	2064      	movs	r0, #100	; 0x64
   8fefa:	4b23      	ldr	r3, [pc, #140]	; (8ff88 <cl_testharnesscommandhandler+0x15a8>)
   8fefc:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   8fefe:	4b35      	ldr	r3, [pc, #212]	; (8ffd4 <cl_testharnesscommandhandler+0x15f4>)
   8ff00:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   8ff02:	f001 b9ee 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   8ff06:	4b34      	ldr	r3, [pc, #208]	; (8ffd8 <cl_testharnesscommandhandler+0x15f8>)
   8ff08:	4798      	blx	r3
		break;
   8ff0a:	f001 b9ea 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   8ff0e:	4b33      	ldr	r3, [pc, #204]	; (8ffdc <cl_testharnesscommandhandler+0x15fc>)
   8ff10:	4798      	blx	r3
		break;
   8ff12:	f001 b9e6 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   8ff16:	4b32      	ldr	r3, [pc, #200]	; (8ffe0 <cl_testharnesscommandhandler+0x1600>)
   8ff18:	4798      	blx	r3
		 sv_prop_stopmixing();
   8ff1a:	4b2e      	ldr	r3, [pc, #184]	; (8ffd4 <cl_testharnesscommandhandler+0x15f4>)
   8ff1c:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   8ff1e:	f001 b9e0 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   8ff22:	4b30      	ldr	r3, [pc, #192]	; (8ffe4 <cl_testharnesscommandhandler+0x1604>)
   8ff24:	4798      	blx	r3
		 sv_prop_stopmixing();
   8ff26:	4b2b      	ldr	r3, [pc, #172]	; (8ffd4 <cl_testharnesscommandhandler+0x15f4>)
   8ff28:	4798      	blx	r3
		break;
   8ff2a:	f001 b9da 	b.w	912e2 <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   8ff2e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ff32:	2b02      	cmp	r3, #2
   8ff34:	d104      	bne.n	8ff40 <cl_testharnesscommandhandler+0x1560>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8ff36:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ff3a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8ff3e:	e078      	b.n	90032 <cl_testharnesscommandhandler+0x1652>
						}
						else if(TestMsg.datasize == 3)
   8ff40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ff44:	2b03      	cmp	r3, #3
   8ff46:	d14f      	bne.n	8ffe8 <cl_testharnesscommandhandler+0x1608>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8ff48:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ff4c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8ff50:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8ff54:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8ff58:	e06b      	b.n	90032 <cl_testharnesscommandhandler+0x1652>
   8ff5a:	bf00      	nop
   8ff5c:	20072631 	.word	0x20072631
   8ff60:	00097511 	.word	0x00097511
   8ff64:	0009748d 	.word	0x0009748d
   8ff68:	000a561c 	.word	0x000a561c
   8ff6c:	000a5628 	.word	0x000a5628
   8ff70:	00097451 	.word	0x00097451
   8ff74:	000a5634 	.word	0x000a5634
   8ff78:	000974f1 	.word	0x000974f1
   8ff7c:	000a5640 	.word	0x000a5640
   8ff80:	20072864 	.word	0x20072864
   8ff84:	000975d1 	.word	0x000975d1
   8ff88:	000918fd 	.word	0x000918fd
   8ff8c:	20070470 	.word	0x20070470
   8ff90:	000a5644 	.word	0x000a5644
   8ff94:	00097651 	.word	0x00097651
   8ff98:	000a555c 	.word	0x000a555c
   8ff9c:	20072630 	.word	0x20072630
   8ffa0:	200709ee 	.word	0x200709ee
   8ffa4:	000a564c 	.word	0x000a564c
   8ffa8:	000a5658 	.word	0x000a5658
   8ffac:	000a5664 	.word	0x000a5664
   8ffb0:	0009926d 	.word	0x0009926d
   8ffb4:	000978ad 	.word	0x000978ad
   8ffb8:	20072633 	.word	0x20072633
   8ffbc:	000a566c 	.word	0x000a566c
   8ffc0:	000a5674 	.word	0x000a5674
   8ffc4:	00097899 	.word	0x00097899
   8ffc8:	000978c1 	.word	0x000978c1
   8ffcc:	2007262e 	.word	0x2007262e
   8ffd0:	0009786d 	.word	0x0009786d
   8ffd4:	000978e5 	.word	0x000978e5
   8ffd8:	0009769d 	.word	0x0009769d
   8ffdc:	000976c5 	.word	0x000976c5
   8ffe0:	00097665 	.word	0x00097665
   8ffe4:	00097681 	.word	0x00097681
							
						}
							else if(TestMsg.datasize == 4)
   8ffe8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ffec:	2b04      	cmp	r3, #4
   8ffee:	d10c      	bne.n	9000a <cl_testharnesscommandhandler+0x162a>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   8fff0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8fff4:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8fff8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8fffc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   90000:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90004:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90008:	e013      	b.n	90032 <cl_testharnesscommandhandler+0x1652>
							
						}
							else if(TestMsg.datasize == 5)
   9000a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9000e:	2b05      	cmp	r3, #5
   90010:	d10f      	bne.n	90032 <cl_testharnesscommandhandler+0x1652>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   90012:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90016:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   9001a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9001e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   90022:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90026:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   9002a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9002e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   90032:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   90036:	2b0c      	cmp	r3, #12
   90038:	d028      	beq.n	9008c <cl_testharnesscommandhandler+0x16ac>
   9003a:	2b0c      	cmp	r3, #12
   9003c:	dc11      	bgt.n	90062 <cl_testharnesscommandhandler+0x1682>
   9003e:	2b05      	cmp	r3, #5
   90040:	f000 83fe 	beq.w	90840 <cl_testharnesscommandhandler+0x1e60>
   90044:	2b05      	cmp	r3, #5
   90046:	dc04      	bgt.n	90052 <cl_testharnesscommandhandler+0x1672>
   90048:	2b01      	cmp	r3, #1
   9004a:	f000 8365 	beq.w	90718 <cl_testharnesscommandhandler+0x1d38>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9004e:	f000 be1d 	b.w	90c8c <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   90052:	2b06      	cmp	r3, #6
   90054:	f000 8497 	beq.w	90986 <cl_testharnesscommandhandler+0x1fa6>
   90058:	2b07      	cmp	r3, #7
   9005a:	f000 8553 	beq.w	90b04 <cl_testharnesscommandhandler+0x2124>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9005e:	f000 be15 	b.w	90c8c <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   90062:	2b11      	cmp	r3, #17
   90064:	f000 820c 	beq.w	90480 <cl_testharnesscommandhandler+0x1aa0>
   90068:	2b11      	cmp	r3, #17
   9006a:	dc07      	bgt.n	9007c <cl_testharnesscommandhandler+0x169c>
   9006c:	2b0d      	cmp	r3, #13
   9006e:	f000 80b1 	beq.w	901d4 <cl_testharnesscommandhandler+0x17f4>
   90072:	2b0e      	cmp	r3, #14
   90074:	f000 814e 	beq.w	90314 <cl_testharnesscommandhandler+0x1934>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   90078:	f000 be08 	b.w	90c8c <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   9007c:	2b12      	cmp	r3, #18
   9007e:	f000 8298 	beq.w	905b2 <cl_testharnesscommandhandler+0x1bd2>
   90082:	2bff      	cmp	r3, #255	; 0xff
   90084:	f000 85e1 	beq.w	90c4a <cl_testharnesscommandhandler+0x226a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   90088:	f000 be00 	b.w	90c8c <cl_testharnesscommandhandler+0x22ac>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   9008c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90090:	2b01      	cmp	r3, #1
   90092:	d11f      	bne.n	900d4 <cl_testharnesscommandhandler+0x16f4>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   90094:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90098:	4bc4      	ldr	r3, [pc, #784]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   9009a:	4610      	mov	r0, r2
   9009c:	4798      	blx	r3
   9009e:	4602      	mov	r2, r0
   900a0:	4bc3      	ldr	r3, [pc, #780]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   900a2:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   900a4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   900a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   900ac:	220a      	movs	r2, #10
   900ae:	49c1      	ldr	r1, [pc, #772]	; (903b4 <cl_testharnesscommandhandler+0x19d4>)
   900b0:	2018      	movs	r0, #24
   900b2:	4bc1      	ldr	r3, [pc, #772]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   900b4:	4798      	blx	r3
   900b6:	4603      	mov	r3, r0
   900b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   900bc:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   900c0:	2202      	movs	r2, #2
   900c2:	4619      	mov	r1, r3
   900c4:	2019      	movs	r0, #25
   900c6:	4bbc      	ldr	r3, [pc, #752]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   900c8:	4798      	blx	r3
   900ca:	4603      	mov	r3, r0
   900cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   900d0:	f000 bdcb 	b.w	90c6a <cl_testharnesscommandhandler+0x228a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   900d4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   900d8:	2b00      	cmp	r3, #0
   900da:	d126      	bne.n	9012a <cl_testharnesscommandhandler+0x174a>
							{
								int16_t temp=0,temp1=0;
   900dc:	2300      	movs	r3, #0
   900de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   900e2:	2300      	movs	r3, #0
   900e4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   900e8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   900ec:	4baf      	ldr	r3, [pc, #700]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   900ee:	4610      	mov	r0, r2
   900f0:	4798      	blx	r3
   900f2:	4602      	mov	r2, r0
   900f4:	4bae      	ldr	r3, [pc, #696]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   900f6:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   900f8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   900fc:	b21b      	sxth	r3, r3
   900fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   90102:	2209      	movs	r2, #9
   90104:	49ad      	ldr	r1, [pc, #692]	; (903bc <cl_testharnesscommandhandler+0x19dc>)
   90106:	2018      	movs	r0, #24
   90108:	4bab      	ldr	r3, [pc, #684]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   9010a:	4798      	blx	r3
   9010c:	4603      	mov	r3, r0
   9010e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90112:	f107 0348 	add.w	r3, r7, #72	; 0x48
   90116:	2202      	movs	r2, #2
   90118:	4619      	mov	r1, r3
   9011a:	2019      	movs	r0, #25
   9011c:	4ba6      	ldr	r3, [pc, #664]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   9011e:	4798      	blx	r3
   90120:	4603      	mov	r3, r0
   90122:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90126:	f000 bda0 	b.w	90c6a <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   9012a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9012e:	2b02      	cmp	r3, #2
   90130:	d128      	bne.n	90184 <cl_testharnesscommandhandler+0x17a4>
							{
								int16_t temp=0,temp1=0;
   90132:	2300      	movs	r3, #0
   90134:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   90138:	2300      	movs	r3, #0
   9013a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   9013e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90142:	b21a      	sxth	r2, r3
   90144:	4b9e      	ldr	r3, [pc, #632]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   90146:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   9014a:	4b9d      	ldr	r3, [pc, #628]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   9014c:	2201      	movs	r2, #1
   9014e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90152:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90156:	b21b      	sxth	r3, r3
   90158:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   9015c:	2209      	movs	r2, #9
   9015e:	4997      	ldr	r1, [pc, #604]	; (903bc <cl_testharnesscommandhandler+0x19dc>)
   90160:	2018      	movs	r0, #24
   90162:	4b95      	ldr	r3, [pc, #596]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90164:	4798      	blx	r3
   90166:	4603      	mov	r3, r0
   90168:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9016c:	f107 0346 	add.w	r3, r7, #70	; 0x46
   90170:	2202      	movs	r2, #2
   90172:	4619      	mov	r1, r3
   90174:	2019      	movs	r0, #25
   90176:	4b90      	ldr	r3, [pc, #576]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90178:	4798      	blx	r3
   9017a:	4603      	mov	r3, r0
   9017c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90180:	f000 bd73 	b.w	90c6a <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90184:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90188:	2b03      	cmp	r3, #3
   9018a:	f040 856e 	bne.w	90c6a <cl_testharnesscommandhandler+0x228a>
							{
								int16_t temp=0,temp1=0;
   9018e:	2300      	movs	r3, #0
   90190:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   90194:	2300      	movs	r3, #0
   90196:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   9019a:	4b89      	ldr	r3, [pc, #548]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   9019c:	2200      	movs	r2, #0
   9019e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   901a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   901a6:	b21b      	sxth	r3, r3
   901a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   901ac:	2205      	movs	r2, #5
   901ae:	4985      	ldr	r1, [pc, #532]	; (903c4 <cl_testharnesscommandhandler+0x19e4>)
   901b0:	2018      	movs	r0, #24
   901b2:	4b81      	ldr	r3, [pc, #516]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   901b4:	4798      	blx	r3
   901b6:	4603      	mov	r3, r0
   901b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   901bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
   901c0:	2202      	movs	r2, #2
   901c2:	4619      	mov	r1, r3
   901c4:	2019      	movs	r0, #25
   901c6:	4b7c      	ldr	r3, [pc, #496]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   901c8:	4798      	blx	r3
   901ca:	4603      	mov	r3, r0
   901cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   901d0:	f000 bd4b 	b.w	90c6a <cl_testharnesscommandhandler+0x228a>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   901d4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   901d8:	2b01      	cmp	r3, #1
   901da:	d11f      	bne.n	9021c <cl_testharnesscommandhandler+0x183c>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   901dc:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   901e0:	4b72      	ldr	r3, [pc, #456]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   901e2:	4610      	mov	r0, r2
   901e4:	4798      	blx	r3
   901e6:	4602      	mov	r2, r0
   901e8:	4b71      	ldr	r3, [pc, #452]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   901ea:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   901ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   901f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   901f4:	220a      	movs	r2, #10
   901f6:	4974      	ldr	r1, [pc, #464]	; (903c8 <cl_testharnesscommandhandler+0x19e8>)
   901f8:	2018      	movs	r0, #24
   901fa:	4b6f      	ldr	r3, [pc, #444]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   901fc:	4798      	blx	r3
   901fe:	4603      	mov	r3, r0
   90200:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90204:	f107 0342 	add.w	r3, r7, #66	; 0x42
   90208:	2202      	movs	r2, #2
   9020a:	4619      	mov	r1, r3
   9020c:	2019      	movs	r0, #25
   9020e:	4b6a      	ldr	r3, [pc, #424]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90210:	4798      	blx	r3
   90212:	4603      	mov	r3, r0
   90214:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90218:	f000 bd29 	b.w	90c6e <cl_testharnesscommandhandler+0x228e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   9021c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90220:	2b00      	cmp	r3, #0
   90222:	d126      	bne.n	90272 <cl_testharnesscommandhandler+0x1892>
							{
								int16_t temp=0,temp1=0;
   90224:	2300      	movs	r3, #0
   90226:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   9022a:	2300      	movs	r3, #0
   9022c:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   90230:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90234:	4b5d      	ldr	r3, [pc, #372]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   90236:	4610      	mov	r0, r2
   90238:	4798      	blx	r3
   9023a:	4602      	mov	r2, r0
   9023c:	4b5c      	ldr	r3, [pc, #368]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   9023e:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90240:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90244:	b21b      	sxth	r3, r3
   90246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   9024a:	2209      	movs	r2, #9
   9024c:	495f      	ldr	r1, [pc, #380]	; (903cc <cl_testharnesscommandhandler+0x19ec>)
   9024e:	2018      	movs	r0, #24
   90250:	4b59      	ldr	r3, [pc, #356]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90252:	4798      	blx	r3
   90254:	4603      	mov	r3, r0
   90256:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9025a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   9025e:	2202      	movs	r2, #2
   90260:	4619      	mov	r1, r3
   90262:	2019      	movs	r0, #25
   90264:	4b54      	ldr	r3, [pc, #336]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90266:	4798      	blx	r3
   90268:	4603      	mov	r3, r0
   9026a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9026e:	f000 bcfe 	b.w	90c6e <cl_testharnesscommandhandler+0x228e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   90272:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90276:	2b02      	cmp	r3, #2
   90278:	d126      	bne.n	902c8 <cl_testharnesscommandhandler+0x18e8>
							{
								int16_t temp=0,temp1=0;
   9027a:	2300      	movs	r3, #0
   9027c:	87fb      	strh	r3, [r7, #62]	; 0x3e
   9027e:	2300      	movs	r3, #0
   90280:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   90284:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90288:	b21a      	sxth	r2, r3
   9028a:	4b4d      	ldr	r3, [pc, #308]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   9028c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   90290:	4b4b      	ldr	r3, [pc, #300]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   90292:	2201      	movs	r2, #1
   90294:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90298:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9029c:	b21b      	sxth	r3, r3
   9029e:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   902a0:	2209      	movs	r2, #9
   902a2:	494b      	ldr	r1, [pc, #300]	; (903d0 <cl_testharnesscommandhandler+0x19f0>)
   902a4:	2018      	movs	r0, #24
   902a6:	4b44      	ldr	r3, [pc, #272]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   902a8:	4798      	blx	r3
   902aa:	4603      	mov	r3, r0
   902ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   902b0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   902b4:	2202      	movs	r2, #2
   902b6:	4619      	mov	r1, r3
   902b8:	2019      	movs	r0, #25
   902ba:	4b3f      	ldr	r3, [pc, #252]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   902bc:	4798      	blx	r3
   902be:	4603      	mov	r3, r0
   902c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   902c4:	f000 bcd3 	b.w	90c6e <cl_testharnesscommandhandler+0x228e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   902c8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   902cc:	2b03      	cmp	r3, #3
   902ce:	f040 84ce 	bne.w	90c6e <cl_testharnesscommandhandler+0x228e>
							{
								int16_t temp=0,temp1=0;
   902d2:	2300      	movs	r3, #0
   902d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
   902d6:	2300      	movs	r3, #0
   902d8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   902dc:	4b38      	ldr	r3, [pc, #224]	; (903c0 <cl_testharnesscommandhandler+0x19e0>)
   902de:	2200      	movs	r2, #0
   902e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   902e4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   902e8:	b21b      	sxth	r3, r3
   902ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   902ec:	2205      	movs	r2, #5
   902ee:	4939      	ldr	r1, [pc, #228]	; (903d4 <cl_testharnesscommandhandler+0x19f4>)
   902f0:	2018      	movs	r0, #24
   902f2:	4b31      	ldr	r3, [pc, #196]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   902f4:	4798      	blx	r3
   902f6:	4603      	mov	r3, r0
   902f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   902fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   90300:	2202      	movs	r2, #2
   90302:	4619      	mov	r1, r3
   90304:	2019      	movs	r0, #25
   90306:	4b2c      	ldr	r3, [pc, #176]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   90308:	4798      	blx	r3
   9030a:	4603      	mov	r3, r0
   9030c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90310:	f000 bcad 	b.w	90c6e <cl_testharnesscommandhandler+0x228e>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   90314:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90318:	2b01      	cmp	r3, #1
   9031a:	d11e      	bne.n	9035a <cl_testharnesscommandhandler+0x197a>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   9031c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90320:	4b22      	ldr	r3, [pc, #136]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   90322:	4610      	mov	r0, r2
   90324:	4798      	blx	r3
   90326:	4602      	mov	r2, r0
   90328:	4b21      	ldr	r3, [pc, #132]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   9032a:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9032c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90330:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   90332:	2208      	movs	r2, #8
   90334:	4928      	ldr	r1, [pc, #160]	; (903d8 <cl_testharnesscommandhandler+0x19f8>)
   90336:	2018      	movs	r0, #24
   90338:	4b1f      	ldr	r3, [pc, #124]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   9033a:	4798      	blx	r3
   9033c:	4603      	mov	r3, r0
   9033e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   90342:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   90346:	2202      	movs	r2, #2
   90348:	4619      	mov	r1, r3
   9034a:	2019      	movs	r0, #25
   9034c:	4b1a      	ldr	r3, [pc, #104]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   9034e:	4798      	blx	r3
   90350:	4603      	mov	r3, r0
   90352:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90356:	f000 bc8c 	b.w	90c72 <cl_testharnesscommandhandler+0x2292>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
							}
							else if (cl_indata.bytearray[2]== 0)
   9035a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9035e:	2b00      	cmp	r3, #0
   90360:	d13e      	bne.n	903e0 <cl_testharnesscommandhandler+0x1a00>
							{
								int16_t temp=0,temp1=0;
   90362:	2300      	movs	r3, #0
   90364:	873b      	strh	r3, [r7, #56]	; 0x38
   90366:	2300      	movs	r3, #0
   90368:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   9036c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90370:	4b0e      	ldr	r3, [pc, #56]	; (903ac <cl_testharnesscommandhandler+0x19cc>)
   90372:	4610      	mov	r0, r2
   90374:	4798      	blx	r3
   90376:	4602      	mov	r2, r0
   90378:	4b0d      	ldr	r3, [pc, #52]	; (903b0 <cl_testharnesscommandhandler+0x19d0>)
   9037a:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9037c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90380:	b21b      	sxth	r3, r3
   90382:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   90384:	2207      	movs	r2, #7
   90386:	4915      	ldr	r1, [pc, #84]	; (903dc <cl_testharnesscommandhandler+0x19fc>)
   90388:	2018      	movs	r0, #24
   9038a:	4b0b      	ldr	r3, [pc, #44]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   9038c:	4798      	blx	r3
   9038e:	4603      	mov	r3, r0
   90390:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90394:	f107 0338 	add.w	r3, r7, #56	; 0x38
   90398:	2202      	movs	r2, #2
   9039a:	4619      	mov	r1, r3
   9039c:	2019      	movs	r0, #25
   9039e:	4b06      	ldr	r3, [pc, #24]	; (903b8 <cl_testharnesscommandhandler+0x19d8>)
   903a0:	4798      	blx	r3
   903a2:	4603      	mov	r3, r0
   903a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   903a8:	f000 bc63 	b.w	90c72 <cl_testharnesscommandhandler+0x2292>
   903ac:	000a33a1 	.word	0x000a33a1
   903b0:	20072cf8 	.word	0x20072cf8
   903b4:	000a5680 	.word	0x000a5680
   903b8:	0009926d 	.word	0x0009926d
   903bc:	000a568c 	.word	0x000a568c
   903c0:	200730fc 	.word	0x200730fc
   903c4:	000a5698 	.word	0x000a5698
   903c8:	000a56a0 	.word	0x000a56a0
   903cc:	000a56ac 	.word	0x000a56ac
   903d0:	000a56b8 	.word	0x000a56b8
   903d4:	000a56c0 	.word	0x000a56c0
   903d8:	000a56c8 	.word	0x000a56c8
   903dc:	000a56d4 	.word	0x000a56d4
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   903e0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   903e4:	2b02      	cmp	r3, #2
   903e6:	d126      	bne.n	90436 <cl_testharnesscommandhandler+0x1a56>
							{
								int16_t temp=0,temp1=0;
   903e8:	2300      	movs	r3, #0
   903ea:	86fb      	strh	r3, [r7, #54]	; 0x36
   903ec:	2300      	movs	r3, #0
   903ee:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   903f2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   903f6:	b21a      	sxth	r2, r3
   903f8:	4bba      	ldr	r3, [pc, #744]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   903fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   903fe:	4bb9      	ldr	r3, [pc, #740]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   90400:	2201      	movs	r2, #1
   90402:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90406:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9040a:	b21b      	sxth	r3, r3
   9040c:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9040e:	2209      	movs	r2, #9
   90410:	49b5      	ldr	r1, [pc, #724]	; (906e8 <cl_testharnesscommandhandler+0x1d08>)
   90412:	2018      	movs	r0, #24
   90414:	4bb5      	ldr	r3, [pc, #724]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   90416:	4798      	blx	r3
   90418:	4603      	mov	r3, r0
   9041a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9041e:	f107 0336 	add.w	r3, r7, #54	; 0x36
   90422:	2202      	movs	r2, #2
   90424:	4619      	mov	r1, r3
   90426:	2019      	movs	r0, #25
   90428:	4bb0      	ldr	r3, [pc, #704]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9042a:	4798      	blx	r3
   9042c:	4603      	mov	r3, r0
   9042e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90432:	f000 bc1e 	b.w	90c72 <cl_testharnesscommandhandler+0x2292>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90436:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9043a:	2b03      	cmp	r3, #3
   9043c:	f040 8419 	bne.w	90c72 <cl_testharnesscommandhandler+0x2292>
							{
								int16_t temp=0,temp1=0;
   90440:	2300      	movs	r3, #0
   90442:	86bb      	strh	r3, [r7, #52]	; 0x34
   90444:	2300      	movs	r3, #0
   90446:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   9044a:	4ba6      	ldr	r3, [pc, #664]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   9044c:	2200      	movs	r2, #0
   9044e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90452:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90456:	b21b      	sxth	r3, r3
   90458:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   9045a:	2205      	movs	r2, #5
   9045c:	49a4      	ldr	r1, [pc, #656]	; (906f0 <cl_testharnesscommandhandler+0x1d10>)
   9045e:	2018      	movs	r0, #24
   90460:	4ba2      	ldr	r3, [pc, #648]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   90462:	4798      	blx	r3
   90464:	4603      	mov	r3, r0
   90466:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9046a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9046e:	2202      	movs	r2, #2
   90470:	4619      	mov	r1, r3
   90472:	2019      	movs	r0, #25
   90474:	4b9d      	ldr	r3, [pc, #628]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   90476:	4798      	blx	r3
   90478:	4603      	mov	r3, r0
   9047a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9047e:	e3f8      	b.n	90c72 <cl_testharnesscommandhandler+0x2292>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   90480:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90484:	2b01      	cmp	r3, #1
   90486:	d11d      	bne.n	904c4 <cl_testharnesscommandhandler+0x1ae4>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   90488:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9048c:	4b99      	ldr	r3, [pc, #612]	; (906f4 <cl_testharnesscommandhandler+0x1d14>)
   9048e:	4610      	mov	r0, r2
   90490:	4798      	blx	r3
   90492:	4602      	mov	r2, r0
   90494:	4b98      	ldr	r3, [pc, #608]	; (906f8 <cl_testharnesscommandhandler+0x1d18>)
   90496:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90498:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9049c:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   9049e:	2208      	movs	r2, #8
   904a0:	4996      	ldr	r1, [pc, #600]	; (906fc <cl_testharnesscommandhandler+0x1d1c>)
   904a2:	2018      	movs	r0, #24
   904a4:	4b91      	ldr	r3, [pc, #580]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   904a6:	4798      	blx	r3
   904a8:	4603      	mov	r3, r0
   904aa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   904ae:	f107 0332 	add.w	r3, r7, #50	; 0x32
   904b2:	2202      	movs	r2, #2
   904b4:	4619      	mov	r1, r3
   904b6:	2019      	movs	r0, #25
   904b8:	4b8c      	ldr	r3, [pc, #560]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   904ba:	4798      	blx	r3
   904bc:	4603      	mov	r3, r0
   904be:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   904c2:	e3d8      	b.n	90c76 <cl_testharnesscommandhandler+0x2296>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								}
								else if (cl_indata.bytearray[2]== 0)
   904c4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   904c8:	2b00      	cmp	r3, #0
   904ca:	d124      	bne.n	90516 <cl_testharnesscommandhandler+0x1b36>
								{
									int16_t temp=0,temp1=0;
   904cc:	2300      	movs	r3, #0
   904ce:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   904d2:	2300      	movs	r3, #0
   904d4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   904d8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   904dc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   904e0:	b29b      	uxth	r3, r3
   904e2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   904e6:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   904ea:	4b85      	ldr	r3, [pc, #532]	; (90700 <cl_testharnesscommandhandler+0x1d20>)
   904ec:	4610      	mov	r0, r2
   904ee:	4798      	blx	r3
   904f0:	4602      	mov	r2, r0
   904f2:	4b81      	ldr	r3, [pc, #516]	; (906f8 <cl_testharnesscommandhandler+0x1d18>)
   904f4:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   904f6:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   904fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   904fe:	b29b      	uxth	r3, r3
   90500:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   90504:	220c      	movs	r2, #12
   90506:	497f      	ldr	r1, [pc, #508]	; (90704 <cl_testharnesscommandhandler+0x1d24>)
   90508:	2018      	movs	r0, #24
   9050a:	4b78      	ldr	r3, [pc, #480]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9050c:	4798      	blx	r3
   9050e:	4603      	mov	r3, r0
   90510:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90514:	e3af      	b.n	90c76 <cl_testharnesscommandhandler+0x2296>
									temp1=temp+1000;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   90516:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9051a:	2b02      	cmp	r3, #2
   9051c:	d124      	bne.n	90568 <cl_testharnesscommandhandler+0x1b88>
								{
									int16_t temp=0,temp1=0;
   9051e:	2300      	movs	r3, #0
   90520:	863b      	strh	r3, [r7, #48]	; 0x30
   90522:	2300      	movs	r3, #0
   90524:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   90528:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9052c:	b21a      	sxth	r2, r3
   9052e:	4b6d      	ldr	r3, [pc, #436]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   90530:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   90532:	4b6c      	ldr	r3, [pc, #432]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   90534:	2201      	movs	r2, #1
   90536:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   9053a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9053e:	b21b      	sxth	r3, r3
   90540:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90542:	2209      	movs	r2, #9
   90544:	4968      	ldr	r1, [pc, #416]	; (906e8 <cl_testharnesscommandhandler+0x1d08>)
   90546:	2018      	movs	r0, #24
   90548:	4b68      	ldr	r3, [pc, #416]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9054a:	4798      	blx	r3
   9054c:	4603      	mov	r3, r0
   9054e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90552:	f107 0330 	add.w	r3, r7, #48	; 0x30
   90556:	2202      	movs	r2, #2
   90558:	4619      	mov	r1, r3
   9055a:	2019      	movs	r0, #25
   9055c:	4b63      	ldr	r3, [pc, #396]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9055e:	4798      	blx	r3
   90560:	4603      	mov	r3, r0
   90562:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90566:	e386      	b.n	90c76 <cl_testharnesscommandhandler+0x2296>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   90568:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9056c:	2b03      	cmp	r3, #3
   9056e:	f040 8382 	bne.w	90c76 <cl_testharnesscommandhandler+0x2296>
								{
									int16_t temp=0,temp1=0;
   90572:	2300      	movs	r3, #0
   90574:	85fb      	strh	r3, [r7, #46]	; 0x2e
   90576:	2300      	movs	r3, #0
   90578:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   9057c:	4b59      	ldr	r3, [pc, #356]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   9057e:	2200      	movs	r2, #0
   90580:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   90584:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90588:	b21b      	sxth	r3, r3
   9058a:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   9058c:	2209      	movs	r2, #9
   9058e:	495e      	ldr	r1, [pc, #376]	; (90708 <cl_testharnesscommandhandler+0x1d28>)
   90590:	2018      	movs	r0, #24
   90592:	4b56      	ldr	r3, [pc, #344]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   90594:	4798      	blx	r3
   90596:	4603      	mov	r3, r0
   90598:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9059c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   905a0:	2202      	movs	r2, #2
   905a2:	4619      	mov	r1, r3
   905a4:	2019      	movs	r0, #25
   905a6:	4b51      	ldr	r3, [pc, #324]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   905a8:	4798      	blx	r3
   905aa:	4603      	mov	r3, r0
   905ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   905b0:	e361      	b.n	90c76 <cl_testharnesscommandhandler+0x2296>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   905b2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   905b6:	2b01      	cmp	r3, #1
   905b8:	d11d      	bne.n	905f6 <cl_testharnesscommandhandler+0x1c16>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   905ba:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   905be:	4b4d      	ldr	r3, [pc, #308]	; (906f4 <cl_testharnesscommandhandler+0x1d14>)
   905c0:	4610      	mov	r0, r2
   905c2:	4798      	blx	r3
   905c4:	4602      	mov	r2, r0
   905c6:	4b4c      	ldr	r3, [pc, #304]	; (906f8 <cl_testharnesscommandhandler+0x1d18>)
   905c8:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   905ca:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   905ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   905d0:	2208      	movs	r2, #8
   905d2:	494e      	ldr	r1, [pc, #312]	; (9070c <cl_testharnesscommandhandler+0x1d2c>)
   905d4:	2018      	movs	r0, #24
   905d6:	4b45      	ldr	r3, [pc, #276]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   905d8:	4798      	blx	r3
   905da:	4603      	mov	r3, r0
   905dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   905e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   905e4:	2202      	movs	r2, #2
   905e6:	4619      	mov	r1, r3
   905e8:	2019      	movs	r0, #25
   905ea:	4b40      	ldr	r3, [pc, #256]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   905ec:	4798      	blx	r3
   905ee:	4603      	mov	r3, r0
   905f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   905f4:	e341      	b.n	90c7a <cl_testharnesscommandhandler+0x229a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   905f6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   905fa:	2b00      	cmp	r3, #0
   905fc:	d124      	bne.n	90648 <cl_testharnesscommandhandler+0x1c68>
							{
								int16_t temp=0,temp1=0;
   905fe:	2300      	movs	r3, #0
   90600:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   90604:	2300      	movs	r3, #0
   90606:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   9060a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9060e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90612:	b29b      	uxth	r3, r3
   90614:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   90618:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   9061c:	4b38      	ldr	r3, [pc, #224]	; (90700 <cl_testharnesscommandhandler+0x1d20>)
   9061e:	4610      	mov	r0, r2
   90620:	4798      	blx	r3
   90622:	4602      	mov	r2, r0
   90624:	4b34      	ldr	r3, [pc, #208]	; (906f8 <cl_testharnesscommandhandler+0x1d18>)
   90626:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   90628:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   9062c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90630:	b29b      	uxth	r3, r3
   90632:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   90636:	220c      	movs	r2, #12
   90638:	4935      	ldr	r1, [pc, #212]	; (90710 <cl_testharnesscommandhandler+0x1d30>)
   9063a:	2018      	movs	r0, #24
   9063c:	4b2b      	ldr	r3, [pc, #172]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9063e:	4798      	blx	r3
   90640:	4603      	mov	r3, r0
   90642:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90646:	e318      	b.n	90c7a <cl_testharnesscommandhandler+0x229a>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   90648:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9064c:	2b02      	cmp	r3, #2
   9064e:	d124      	bne.n	9069a <cl_testharnesscommandhandler+0x1cba>
							{
								int16_t temp=0,temp1=0;
   90650:	2300      	movs	r3, #0
   90652:	857b      	strh	r3, [r7, #42]	; 0x2a
   90654:	2300      	movs	r3, #0
   90656:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   9065a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9065e:	b21a      	sxth	r2, r3
   90660:	4b20      	ldr	r3, [pc, #128]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   90662:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   90664:	4b1f      	ldr	r3, [pc, #124]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   90666:	2201      	movs	r2, #1
   90668:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9066c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90670:	b21b      	sxth	r3, r3
   90672:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90674:	2209      	movs	r2, #9
   90676:	491c      	ldr	r1, [pc, #112]	; (906e8 <cl_testharnesscommandhandler+0x1d08>)
   90678:	2018      	movs	r0, #24
   9067a:	4b1c      	ldr	r3, [pc, #112]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   9067c:	4798      	blx	r3
   9067e:	4603      	mov	r3, r0
   90680:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90684:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   90688:	2202      	movs	r2, #2
   9068a:	4619      	mov	r1, r3
   9068c:	2019      	movs	r0, #25
   9068e:	4b17      	ldr	r3, [pc, #92]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   90690:	4798      	blx	r3
   90692:	4603      	mov	r3, r0
   90694:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90698:	e2ef      	b.n	90c7a <cl_testharnesscommandhandler+0x229a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9069a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9069e:	2b03      	cmp	r3, #3
   906a0:	f040 82eb 	bne.w	90c7a <cl_testharnesscommandhandler+0x229a>
							{
								int16_t temp=0,temp1=0;
   906a4:	2300      	movs	r3, #0
   906a6:	853b      	strh	r3, [r7, #40]	; 0x28
   906a8:	2300      	movs	r3, #0
   906aa:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   906ae:	4b0d      	ldr	r3, [pc, #52]	; (906e4 <cl_testharnesscommandhandler+0x1d04>)
   906b0:	2200      	movs	r2, #0
   906b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   906b6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   906ba:	b21b      	sxth	r3, r3
   906bc:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   906be:	2209      	movs	r2, #9
   906c0:	4914      	ldr	r1, [pc, #80]	; (90714 <cl_testharnesscommandhandler+0x1d34>)
   906c2:	2018      	movs	r0, #24
   906c4:	4b09      	ldr	r3, [pc, #36]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   906c6:	4798      	blx	r3
   906c8:	4603      	mov	r3, r0
   906ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   906ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
   906d2:	2202      	movs	r2, #2
   906d4:	4619      	mov	r1, r3
   906d6:	2019      	movs	r0, #25
   906d8:	4b04      	ldr	r3, [pc, #16]	; (906ec <cl_testharnesscommandhandler+0x1d0c>)
   906da:	4798      	blx	r3
   906dc:	4603      	mov	r3, r0
   906de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   906e2:	e2ca      	b.n	90c7a <cl_testharnesscommandhandler+0x229a>
   906e4:	200730fc 	.word	0x200730fc
   906e8:	000a56b8 	.word	0x000a56b8
   906ec:	0009926d 	.word	0x0009926d
   906f0:	000a56e0 	.word	0x000a56e0
   906f4:	000a33a1 	.word	0x000a33a1
   906f8:	20072cf8 	.word	0x20072cf8
   906fc:	000a56e8 	.word	0x000a56e8
   90700:	000a33a9 	.word	0x000a33a9
   90704:	000a56f4 	.word	0x000a56f4
   90708:	000a5704 	.word	0x000a5704
   9070c:	000a570c 	.word	0x000a570c
   90710:	000a5718 	.word	0x000a5718
   90714:	000a5728 	.word	0x000a5728
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   90718:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9071c:	2b01      	cmp	r3, #1
   9071e:	d11a      	bne.n	90756 <cl_testharnesscommandhandler+0x1d76>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   90720:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90724:	b21a      	sxth	r2, r3
   90726:	4bbe      	ldr	r3, [pc, #760]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   90728:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9072a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9072e:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   90730:	2208      	movs	r2, #8
   90732:	49bc      	ldr	r1, [pc, #752]	; (90a24 <cl_testharnesscommandhandler+0x2044>)
   90734:	2018      	movs	r0, #24
   90736:	4bbc      	ldr	r3, [pc, #752]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90738:	4798      	blx	r3
   9073a:	4603      	mov	r3, r0
   9073c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90740:	f107 0326 	add.w	r3, r7, #38	; 0x26
   90744:	2202      	movs	r2, #2
   90746:	4619      	mov	r1, r3
   90748:	2019      	movs	r0, #25
   9074a:	4bb7      	ldr	r3, [pc, #732]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   9074c:	4798      	blx	r3
   9074e:	4603      	mov	r3, r0
   90750:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90754:	e293      	b.n	90c7e <cl_testharnesscommandhandler+0x229e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   90756:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9075a:	2b00      	cmp	r3, #0
   9075c:	d120      	bne.n	907a0 <cl_testharnesscommandhandler+0x1dc0>
							{
								
								int16_t temp=0,temp1=0;
   9075e:	2300      	movs	r3, #0
   90760:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   90764:	2300      	movs	r3, #0
   90766:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   90768:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9076c:	b21a      	sxth	r2, r3
   9076e:	4bac      	ldr	r3, [pc, #688]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   90770:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   90772:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90776:	b21b      	sxth	r3, r3
   90778:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   9077a:	2208      	movs	r2, #8
   9077c:	49ab      	ldr	r1, [pc, #684]	; (90a2c <cl_testharnesscommandhandler+0x204c>)
   9077e:	2018      	movs	r0, #24
   90780:	4ba9      	ldr	r3, [pc, #676]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90782:	4798      	blx	r3
   90784:	4603      	mov	r3, r0
   90786:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9078e:	2202      	movs	r2, #2
   90790:	4619      	mov	r1, r3
   90792:	2019      	movs	r0, #25
   90794:	4ba4      	ldr	r3, [pc, #656]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90796:	4798      	blx	r3
   90798:	4603      	mov	r3, r0
   9079a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9079e:	e26e      	b.n	90c7e <cl_testharnesscommandhandler+0x229e>
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
								temp1=cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   907a0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   907a4:	2b02      	cmp	r3, #2
   907a6:	d123      	bne.n	907f0 <cl_testharnesscommandhandler+0x1e10>
							{
								int16_t temp=0,temp1=0;
   907a8:	2300      	movs	r3, #0
   907aa:	847b      	strh	r3, [r7, #34]	; 0x22
   907ac:	2300      	movs	r3, #0
   907ae:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   907b2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907b6:	b21a      	sxth	r2, r3
   907b8:	4b9d      	ldr	r3, [pc, #628]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   907ba:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   907bc:	4b9c      	ldr	r3, [pc, #624]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   907be:	2201      	movs	r2, #1
   907c0:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   907c2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   907c6:	b21b      	sxth	r3, r3
   907c8:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   907ca:	2209      	movs	r2, #9
   907cc:	4999      	ldr	r1, [pc, #612]	; (90a34 <cl_testharnesscommandhandler+0x2054>)
   907ce:	2018      	movs	r0, #24
   907d0:	4b95      	ldr	r3, [pc, #596]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   907d2:	4798      	blx	r3
   907d4:	4603      	mov	r3, r0
   907d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   907da:	f107 0322 	add.w	r3, r7, #34	; 0x22
   907de:	2202      	movs	r2, #2
   907e0:	4619      	mov	r1, r3
   907e2:	2019      	movs	r0, #25
   907e4:	4b90      	ldr	r3, [pc, #576]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   907e6:	4798      	blx	r3
   907e8:	4603      	mov	r3, r0
   907ea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   907ee:	e246      	b.n	90c7e <cl_testharnesscommandhandler+0x229e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   907f0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   907f4:	2b03      	cmp	r3, #3
   907f6:	f040 8242 	bne.w	90c7e <cl_testharnesscommandhandler+0x229e>
							{
								int16_t temp=0,temp1=0;
   907fa:	f107 0320 	add.w	r3, r7, #32
   907fe:	2200      	movs	r2, #0
   90800:	801a      	strh	r2, [r3, #0]
   90802:	2300      	movs	r3, #0
   90804:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   90808:	4b89      	ldr	r3, [pc, #548]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   9080a:	2200      	movs	r2, #0
   9080c:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9080e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90812:	b21a      	sxth	r2, r3
   90814:	f107 0320 	add.w	r3, r7, #32
   90818:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   9081a:	2207      	movs	r2, #7
   9081c:	4986      	ldr	r1, [pc, #536]	; (90a38 <cl_testharnesscommandhandler+0x2058>)
   9081e:	2018      	movs	r0, #24
   90820:	4b81      	ldr	r3, [pc, #516]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90822:	4798      	blx	r3
   90824:	4603      	mov	r3, r0
   90826:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9082a:	f107 0320 	add.w	r3, r7, #32
   9082e:	2202      	movs	r2, #2
   90830:	4619      	mov	r1, r3
   90832:	2019      	movs	r0, #25
   90834:	4b7c      	ldr	r3, [pc, #496]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90836:	4798      	blx	r3
   90838:	4603      	mov	r3, r0
   9083a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9083e:	e21e      	b.n	90c7e <cl_testharnesscommandhandler+0x229e>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   90840:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90844:	2b01      	cmp	r3, #1
   90846:	d11f      	bne.n	90888 <cl_testharnesscommandhandler+0x1ea8>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   90848:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9084c:	4b7b      	ldr	r3, [pc, #492]	; (90a3c <cl_testharnesscommandhandler+0x205c>)
   9084e:	4610      	mov	r0, r2
   90850:	4798      	blx	r3
   90852:	4602      	mov	r2, r0
   90854:	4b72      	ldr	r3, [pc, #456]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   90856:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90858:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9085c:	f107 031e 	add.w	r3, r7, #30
   90860:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   90862:	2208      	movs	r2, #8
   90864:	4976      	ldr	r1, [pc, #472]	; (90a40 <cl_testharnesscommandhandler+0x2060>)
   90866:	2018      	movs	r0, #24
   90868:	4b6f      	ldr	r3, [pc, #444]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   9086a:	4798      	blx	r3
   9086c:	4603      	mov	r3, r0
   9086e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90872:	f107 031e 	add.w	r3, r7, #30
   90876:	2202      	movs	r2, #2
   90878:	4619      	mov	r1, r3
   9087a:	2019      	movs	r0, #25
   9087c:	4b6a      	ldr	r3, [pc, #424]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   9087e:	4798      	blx	r3
   90880:	4603      	mov	r3, r0
   90882:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90886:	e1fc      	b.n	90c82 <cl_testharnesscommandhandler+0x22a2>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   90888:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9088c:	2b00      	cmp	r3, #0
   9088e:	d124      	bne.n	908da <cl_testharnesscommandhandler+0x1efa>
							{
								int16_t temp=0,temp1=0;
   90890:	2300      	movs	r3, #0
   90892:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   90896:	2300      	movs	r3, #0
   90898:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   9089c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   908a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   908a4:	b29b      	uxth	r3, r3
   908a6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   908aa:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   908ae:	4b65      	ldr	r3, [pc, #404]	; (90a44 <cl_testharnesscommandhandler+0x2064>)
   908b0:	4610      	mov	r0, r2
   908b2:	4798      	blx	r3
   908b4:	4602      	mov	r2, r0
   908b6:	4b5a      	ldr	r3, [pc, #360]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   908b8:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   908ba:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   908be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   908c2:	b29b      	uxth	r3, r3
   908c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   908c8:	220c      	movs	r2, #12
   908ca:	495f      	ldr	r1, [pc, #380]	; (90a48 <cl_testharnesscommandhandler+0x2068>)
   908cc:	2018      	movs	r0, #24
   908ce:	4b56      	ldr	r3, [pc, #344]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   908d0:	4798      	blx	r3
   908d2:	4603      	mov	r3, r0
   908d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   908d8:	e1d3      	b.n	90c82 <cl_testharnesscommandhandler+0x22a2>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   908da:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   908de:	2b02      	cmp	r3, #2
   908e0:	d128      	bne.n	90934 <cl_testharnesscommandhandler+0x1f54>
							{
								int16_t temp=0,temp1=0;
   908e2:	f107 031c 	add.w	r3, r7, #28
   908e6:	2200      	movs	r2, #0
   908e8:	801a      	strh	r2, [r3, #0]
   908ea:	2300      	movs	r3, #0
   908ec:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   908f0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   908f4:	b21a      	sxth	r2, r3
   908f6:	4b4e      	ldr	r3, [pc, #312]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   908f8:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   908fa:	4b4d      	ldr	r3, [pc, #308]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   908fc:	2201      	movs	r2, #1
   908fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90902:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90906:	b21a      	sxth	r2, r3
   90908:	f107 031c 	add.w	r3, r7, #28
   9090c:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9090e:	2209      	movs	r2, #9
   90910:	4948      	ldr	r1, [pc, #288]	; (90a34 <cl_testharnesscommandhandler+0x2054>)
   90912:	2018      	movs	r0, #24
   90914:	4b44      	ldr	r3, [pc, #272]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90916:	4798      	blx	r3
   90918:	4603      	mov	r3, r0
   9091a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9091e:	f107 031c 	add.w	r3, r7, #28
   90922:	2202      	movs	r2, #2
   90924:	4619      	mov	r1, r3
   90926:	2019      	movs	r0, #25
   90928:	4b3f      	ldr	r3, [pc, #252]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   9092a:	4798      	blx	r3
   9092c:	4603      	mov	r3, r0
   9092e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90932:	e1a6      	b.n	90c82 <cl_testharnesscommandhandler+0x22a2>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90934:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90938:	2b03      	cmp	r3, #3
   9093a:	f040 81a2 	bne.w	90c82 <cl_testharnesscommandhandler+0x22a2>
							{
								int16_t temp=0,temp1=0;
   9093e:	f107 031a 	add.w	r3, r7, #26
   90942:	2200      	movs	r2, #0
   90944:	801a      	strh	r2, [r3, #0]
   90946:	2300      	movs	r3, #0
   90948:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   9094c:	4b38      	ldr	r3, [pc, #224]	; (90a30 <cl_testharnesscommandhandler+0x2050>)
   9094e:	2200      	movs	r2, #0
   90950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90954:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90958:	b21a      	sxth	r2, r3
   9095a:	f107 031a 	add.w	r3, r7, #26
   9095e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   90960:	2209      	movs	r2, #9
   90962:	493a      	ldr	r1, [pc, #232]	; (90a4c <cl_testharnesscommandhandler+0x206c>)
   90964:	2018      	movs	r0, #24
   90966:	4b30      	ldr	r3, [pc, #192]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90968:	4798      	blx	r3
   9096a:	4603      	mov	r3, r0
   9096c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90970:	f107 031a 	add.w	r3, r7, #26
   90974:	2202      	movs	r2, #2
   90976:	4619      	mov	r1, r3
   90978:	2019      	movs	r0, #25
   9097a:	4b2b      	ldr	r3, [pc, #172]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   9097c:	4798      	blx	r3
   9097e:	4603      	mov	r3, r0
   90980:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90984:	e17d      	b.n	90c82 <cl_testharnesscommandhandler+0x22a2>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   90986:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9098a:	2b01      	cmp	r3, #1
   9098c:	d11f      	bne.n	909ce <cl_testharnesscommandhandler+0x1fee>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   9098e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90992:	4b2a      	ldr	r3, [pc, #168]	; (90a3c <cl_testharnesscommandhandler+0x205c>)
   90994:	4610      	mov	r0, r2
   90996:	4798      	blx	r3
   90998:	4602      	mov	r2, r0
   9099a:	4b21      	ldr	r3, [pc, #132]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   9099c:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9099e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   909a2:	f107 0318 	add.w	r3, r7, #24
   909a6:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   909a8:	2203      	movs	r2, #3
   909aa:	4929      	ldr	r1, [pc, #164]	; (90a50 <cl_testharnesscommandhandler+0x2070>)
   909ac:	2018      	movs	r0, #24
   909ae:	4b1e      	ldr	r3, [pc, #120]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   909b0:	4798      	blx	r3
   909b2:	4603      	mov	r3, r0
   909b4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   909b8:	f107 0318 	add.w	r3, r7, #24
   909bc:	2202      	movs	r2, #2
   909be:	4619      	mov	r1, r3
   909c0:	2019      	movs	r0, #25
   909c2:	4b19      	ldr	r3, [pc, #100]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   909c4:	4798      	blx	r3
   909c6:	4603      	mov	r3, r0
   909c8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   909cc:	e15b      	b.n	90c86 <cl_testharnesscommandhandler+0x22a6>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   909ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   909d2:	2b00      	cmp	r3, #0
   909d4:	d140      	bne.n	90a58 <cl_testharnesscommandhandler+0x2078>
							{
								int16_t temp=0,temp1=0;
   909d6:	2300      	movs	r3, #0
   909d8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   909dc:	2300      	movs	r3, #0
   909de:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   909e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   909e6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   909ea:	b29b      	uxth	r3, r3
   909ec:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   909f0:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   909f4:	4b13      	ldr	r3, [pc, #76]	; (90a44 <cl_testharnesscommandhandler+0x2064>)
   909f6:	4610      	mov	r0, r2
   909f8:	4798      	blx	r3
   909fa:	4602      	mov	r2, r0
   909fc:	4b08      	ldr	r3, [pc, #32]	; (90a20 <cl_testharnesscommandhandler+0x2040>)
   909fe:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   90a00:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   90a04:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90a08:	b29b      	uxth	r3, r3
   90a0a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   90a0e:	220c      	movs	r2, #12
   90a10:	4910      	ldr	r1, [pc, #64]	; (90a54 <cl_testharnesscommandhandler+0x2074>)
   90a12:	2018      	movs	r0, #24
   90a14:	4b04      	ldr	r3, [pc, #16]	; (90a28 <cl_testharnesscommandhandler+0x2048>)
   90a16:	4798      	blx	r3
   90a18:	4603      	mov	r3, r0
   90a1a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90a1e:	e132      	b.n	90c86 <cl_testharnesscommandhandler+0x22a6>
   90a20:	20072cf8 	.word	0x20072cf8
   90a24:	000a5730 	.word	0x000a5730
   90a28:	0009926d 	.word	0x0009926d
   90a2c:	000a573c 	.word	0x000a573c
   90a30:	200730fc 	.word	0x200730fc
   90a34:	000a56b8 	.word	0x000a56b8
   90a38:	000a5748 	.word	0x000a5748
   90a3c:	000a33a1 	.word	0x000a33a1
   90a40:	000a5750 	.word	0x000a5750
   90a44:	000a33a9 	.word	0x000a33a9
   90a48:	000a575c 	.word	0x000a575c
   90a4c:	000a5728 	.word	0x000a5728
   90a50:	000a576c 	.word	0x000a576c
   90a54:	000a5770 	.word	0x000a5770
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   90a58:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90a5c:	2b02      	cmp	r3, #2
   90a5e:	d128      	bne.n	90ab2 <cl_testharnesscommandhandler+0x20d2>
							{
								int16_t temp=0,temp1=0;
   90a60:	f107 0316 	add.w	r3, r7, #22
   90a64:	2200      	movs	r2, #0
   90a66:	801a      	strh	r2, [r3, #0]
   90a68:	2300      	movs	r3, #0
   90a6a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   90a6e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a72:	b21a      	sxth	r2, r3
   90a74:	4ba6      	ldr	r3, [pc, #664]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90a76:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   90a78:	4ba5      	ldr	r3, [pc, #660]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90a7a:	2201      	movs	r2, #1
   90a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90a80:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a84:	b21a      	sxth	r2, r3
   90a86:	f107 0316 	add.w	r3, r7, #22
   90a8a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90a8c:	2209      	movs	r2, #9
   90a8e:	49a1      	ldr	r1, [pc, #644]	; (90d14 <cl_testharnesscommandhandler+0x2334>)
   90a90:	2018      	movs	r0, #24
   90a92:	4ba1      	ldr	r3, [pc, #644]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90a94:	4798      	blx	r3
   90a96:	4603      	mov	r3, r0
   90a98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90a9c:	f107 0316 	add.w	r3, r7, #22
   90aa0:	2202      	movs	r2, #2
   90aa2:	4619      	mov	r1, r3
   90aa4:	2019      	movs	r0, #25
   90aa6:	4b9c      	ldr	r3, [pc, #624]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90aa8:	4798      	blx	r3
   90aaa:	4603      	mov	r3, r0
   90aac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90ab0:	e0e9      	b.n	90c86 <cl_testharnesscommandhandler+0x22a6>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90ab2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ab6:	2b03      	cmp	r3, #3
   90ab8:	f040 80e5 	bne.w	90c86 <cl_testharnesscommandhandler+0x22a6>
							{
								int16_t temp=0,temp1=0;
   90abc:	f107 0314 	add.w	r3, r7, #20
   90ac0:	2200      	movs	r2, #0
   90ac2:	801a      	strh	r2, [r3, #0]
   90ac4:	2300      	movs	r3, #0
   90ac6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   90aca:	4b91      	ldr	r3, [pc, #580]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90acc:	2200      	movs	r2, #0
   90ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90ad2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90ad6:	b21a      	sxth	r2, r3
   90ad8:	f107 0314 	add.w	r3, r7, #20
   90adc:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   90ade:	2209      	movs	r2, #9
   90ae0:	498e      	ldr	r1, [pc, #568]	; (90d1c <cl_testharnesscommandhandler+0x233c>)
   90ae2:	2018      	movs	r0, #24
   90ae4:	4b8c      	ldr	r3, [pc, #560]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90ae6:	4798      	blx	r3
   90ae8:	4603      	mov	r3, r0
   90aea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90aee:	f107 0314 	add.w	r3, r7, #20
   90af2:	2202      	movs	r2, #2
   90af4:	4619      	mov	r1, r3
   90af6:	2019      	movs	r0, #25
   90af8:	4b87      	ldr	r3, [pc, #540]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90afa:	4798      	blx	r3
   90afc:	4603      	mov	r3, r0
   90afe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90b02:	e0c0      	b.n	90c86 <cl_testharnesscommandhandler+0x22a6>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   90b04:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b08:	2b01      	cmp	r3, #1
   90b0a:	d11f      	bne.n	90b4c <cl_testharnesscommandhandler+0x216c>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   90b0c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90b10:	4b83      	ldr	r3, [pc, #524]	; (90d20 <cl_testharnesscommandhandler+0x2340>)
   90b12:	4610      	mov	r0, r2
   90b14:	4798      	blx	r3
   90b16:	4602      	mov	r2, r0
   90b18:	4b82      	ldr	r3, [pc, #520]	; (90d24 <cl_testharnesscommandhandler+0x2344>)
   90b1a:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90b1c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   90b20:	f107 0312 	add.w	r3, r7, #18
   90b24:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   90b26:	2203      	movs	r2, #3
   90b28:	497f      	ldr	r1, [pc, #508]	; (90d28 <cl_testharnesscommandhandler+0x2348>)
   90b2a:	2018      	movs	r0, #24
   90b2c:	4b7a      	ldr	r3, [pc, #488]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90b2e:	4798      	blx	r3
   90b30:	4603      	mov	r3, r0
   90b32:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90b36:	f107 0312 	add.w	r3, r7, #18
   90b3a:	2202      	movs	r2, #2
   90b3c:	4619      	mov	r1, r3
   90b3e:	2019      	movs	r0, #25
   90b40:	4b75      	ldr	r3, [pc, #468]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90b42:	4798      	blx	r3
   90b44:	4603      	mov	r3, r0
   90b46:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90b4a:	e09e      	b.n	90c8a <cl_testharnesscommandhandler+0x22aa>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   90b4c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90b50:	2b00      	cmp	r3, #0
   90b52:	d124      	bne.n	90b9e <cl_testharnesscommandhandler+0x21be>
							{
								int16_t temp=0,temp1=0;
   90b54:	2300      	movs	r3, #0
   90b56:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   90b5a:	2300      	movs	r3, #0
   90b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   90b60:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90b64:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   90b68:	b29b      	uxth	r3, r3
   90b6a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   90b6e:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   90b72:	4b6e      	ldr	r3, [pc, #440]	; (90d2c <cl_testharnesscommandhandler+0x234c>)
   90b74:	4610      	mov	r0, r2
   90b76:	4798      	blx	r3
   90b78:	4602      	mov	r2, r0
   90b7a:	4b6a      	ldr	r3, [pc, #424]	; (90d24 <cl_testharnesscommandhandler+0x2344>)
   90b7c:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   90b7e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   90b82:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   90b86:	b29b      	uxth	r3, r3
   90b88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   90b8c:	220c      	movs	r2, #12
   90b8e:	4968      	ldr	r1, [pc, #416]	; (90d30 <cl_testharnesscommandhandler+0x2350>)
   90b90:	2018      	movs	r0, #24
   90b92:	4b61      	ldr	r3, [pc, #388]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90b94:	4798      	blx	r3
   90b96:	4603      	mov	r3, r0
   90b98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90b9c:	e075      	b.n	90c8a <cl_testharnesscommandhandler+0x22aa>
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   90b9e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90ba2:	2b02      	cmp	r3, #2
   90ba4:	d129      	bne.n	90bfa <cl_testharnesscommandhandler+0x221a>
							{
								int16_t temp=0,temp1=0;
   90ba6:	f107 0310 	add.w	r3, r7, #16
   90baa:	2200      	movs	r2, #0
   90bac:	801a      	strh	r2, [r3, #0]
   90bae:	2300      	movs	r3, #0
   90bb0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   90bb4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90bb8:	b21a      	sxth	r2, r3
   90bba:	4b55      	ldr	r3, [pc, #340]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   90bc0:	4b53      	ldr	r3, [pc, #332]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90bc2:	2201      	movs	r2, #1
   90bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90bc8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90bcc:	b21a      	sxth	r2, r3
   90bce:	f107 0310 	add.w	r3, r7, #16
   90bd2:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   90bd4:	2209      	movs	r2, #9
   90bd6:	494f      	ldr	r1, [pc, #316]	; (90d14 <cl_testharnesscommandhandler+0x2334>)
   90bd8:	2018      	movs	r0, #24
   90bda:	4b4f      	ldr	r3, [pc, #316]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90bdc:	4798      	blx	r3
   90bde:	4603      	mov	r3, r0
   90be0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90be4:	f107 0310 	add.w	r3, r7, #16
   90be8:	2202      	movs	r2, #2
   90bea:	4619      	mov	r1, r3
   90bec:	2019      	movs	r0, #25
   90bee:	4b4a      	ldr	r3, [pc, #296]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90bf0:	4798      	blx	r3
   90bf2:	4603      	mov	r3, r0
   90bf4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90bf8:	e047      	b.n	90c8a <cl_testharnesscommandhandler+0x22aa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90bfa:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90bfe:	2b03      	cmp	r3, #3
   90c00:	d143      	bne.n	90c8a <cl_testharnesscommandhandler+0x22aa>
							{
								int16_t temp=0,temp1=0;
   90c02:	f107 030e 	add.w	r3, r7, #14
   90c06:	2200      	movs	r2, #0
   90c08:	801a      	strh	r2, [r3, #0]
   90c0a:	2300      	movs	r3, #0
   90c0c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   90c10:	4b3f      	ldr	r3, [pc, #252]	; (90d10 <cl_testharnesscommandhandler+0x2330>)
   90c12:	2200      	movs	r2, #0
   90c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   90c18:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c1c:	b21a      	sxth	r2, r3
   90c1e:	f107 030e 	add.w	r3, r7, #14
   90c22:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   90c24:	2209      	movs	r2, #9
   90c26:	4943      	ldr	r1, [pc, #268]	; (90d34 <cl_testharnesscommandhandler+0x2354>)
   90c28:	2018      	movs	r0, #24
   90c2a:	4b3b      	ldr	r3, [pc, #236]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90c2c:	4798      	blx	r3
   90c2e:	4603      	mov	r3, r0
   90c30:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   90c34:	f107 030e 	add.w	r3, r7, #14
   90c38:	2202      	movs	r2, #2
   90c3a:	4619      	mov	r1, r3
   90c3c:	2019      	movs	r0, #25
   90c3e:	4b36      	ldr	r3, [pc, #216]	; (90d18 <cl_testharnesscommandhandler+0x2338>)
   90c40:	4798      	blx	r3
   90c42:	4603      	mov	r3, r0
   90c44:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c48:	e01f      	b.n	90c8a <cl_testharnesscommandhandler+0x22aa>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   90c4a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90c4e:	2b01      	cmp	r3, #1
   90c50:	d105      	bne.n	90c5e <cl_testharnesscommandhandler+0x227e>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   90c52:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c56:	b21a      	sxth	r2, r3
   90c58:	4b32      	ldr	r3, [pc, #200]	; (90d24 <cl_testharnesscommandhandler+0x2344>)
   90c5a:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c5c:	e016      	b.n	90c8c <cl_testharnesscommandhandler+0x22ac>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   90c5e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90c62:	b21a      	sxth	r2, r3
   90c64:	4b2f      	ldr	r3, [pc, #188]	; (90d24 <cl_testharnesscommandhandler+0x2344>)
   90c66:	801a      	strh	r2, [r3, #0]
							}
							break;
   90c68:	e010      	b.n	90c8c <cl_testharnesscommandhandler+0x22ac>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c6a:	bf00      	nop
   90c6c:	e339      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c6e:	bf00      	nop
   90c70:	e337      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c72:	bf00      	nop
   90c74:	e335      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   90c76:	bf00      	nop
   90c78:	e333      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c7a:	bf00      	nop
   90c7c:	e331      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c7e:	bf00      	nop
   90c80:	e32f      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c82:	bf00      	nop
   90c84:	e32d      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c86:	bf00      	nop
   90c88:	e32b      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90c8a:	bf00      	nop
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
						}
		break;
   90c8c:	e329      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   90c8e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c92:	3b05      	subs	r3, #5
   90c94:	2b11      	cmp	r3, #17
   90c96:	f200 8317 	bhi.w	912c8 <cl_testharnesscommandhandler+0x28e8>
   90c9a:	a201      	add	r2, pc, #4	; (adr r2, 90ca0 <cl_testharnesscommandhandler+0x22c0>)
   90c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   90ca0:	00090d45 	.word	0x00090d45
   90ca4:	00090ddf 	.word	0x00090ddf
   90ca8:	00090e79 	.word	0x00090e79
   90cac:	000912c9 	.word	0x000912c9
   90cb0:	000912c9 	.word	0x000912c9
   90cb4:	000912c9 	.word	0x000912c9
   90cb8:	000912c9 	.word	0x000912c9
   90cbc:	000910ef 	.word	0x000910ef
   90cc0:	0009118d 	.word	0x0009118d
   90cc4:	0009122b 	.word	0x0009122b
   90cc8:	000912c9 	.word	0x000912c9
   90ccc:	000912c9 	.word	0x000912c9
   90cd0:	00090ef1 	.word	0x00090ef1
   90cd4:	00090f51 	.word	0x00090f51
   90cd8:	000912c9 	.word	0x000912c9
   90cdc:	0009101d 	.word	0x0009101d
   90ce0:	00090ce9 	.word	0x00090ce9
   90ce4:	00090cfd 	.word	0x00090cfd
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   90ce8:	4b13      	ldr	r3, [pc, #76]	; (90d38 <cl_testharnesscommandhandler+0x2358>)
   90cea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   90cee:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90cf2:	4619      	mov	r1, r3
   90cf4:	2017      	movs	r0, #23
   90cf6:	4b11      	ldr	r3, [pc, #68]	; (90d3c <cl_testharnesscommandhandler+0x235c>)
   90cf8:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   90cfa:	e2ea      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   90cfc:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90d00:	4619      	mov	r1, r3
   90d02:	2018      	movs	r0, #24
   90d04:	4b0d      	ldr	r3, [pc, #52]	; (90d3c <cl_testharnesscommandhandler+0x235c>)
   90d06:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   90d08:	4b0d      	ldr	r3, [pc, #52]	; (90d40 <cl_testharnesscommandhandler+0x2360>)
   90d0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   90d0e:	e2e0      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
   90d10:	200730fc 	.word	0x200730fc
   90d14:	000a56b8 	.word	0x000a56b8
   90d18:	0009926d 	.word	0x0009926d
   90d1c:	000a5728 	.word	0x000a5728
   90d20:	000a33a1 	.word	0x000a33a1
   90d24:	20072cf8 	.word	0x20072cf8
   90d28:	000a5780 	.word	0x000a5780
   90d2c:	000a33a9 	.word	0x000a33a9
   90d30:	000a5784 	.word	0x000a5784
   90d34:	000a5794 	.word	0x000a5794
   90d38:	000a579c 	.word	0x000a579c
   90d3c:	00091341 	.word	0x00091341
   90d40:	000a57a8 	.word	0x000a57a8
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   90d44:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90d48:	4619      	mov	r1, r3
   90d4a:	200e      	movs	r0, #14
   90d4c:	4ba8      	ldr	r3, [pc, #672]	; (90ff0 <cl_testharnesscommandhandler+0x2610>)
   90d4e:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   90d50:	4ba8      	ldr	r3, [pc, #672]	; (90ff4 <cl_testharnesscommandhandler+0x2614>)
   90d52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90d56:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90d5a:	461a      	mov	r2, r3
   90d5c:	f640 43e4 	movw	r3, #3300	; 0xce4
   90d60:	fb03 f302 	mul.w	r3, r3, r2
   90d64:	2b00      	cmp	r3, #0
   90d66:	da01      	bge.n	90d6c <cl_testharnesscommandhandler+0x238c>
   90d68:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90d6c:	131b      	asrs	r3, r3, #12
   90d6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   90d72:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90d76:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   90d7a:	4b9f      	ldr	r3, [pc, #636]	; (90ff8 <cl_testharnesscommandhandler+0x2618>)
   90d7c:	4610      	mov	r0, r2
   90d7e:	4798      	blx	r3
   90d80:	4c9e      	ldr	r4, [pc, #632]	; (90ffc <cl_testharnesscommandhandler+0x261c>)
   90d82:	a397      	add	r3, pc, #604	; (adr r3, 90fe0 <cl_testharnesscommandhandler+0x2600>)
   90d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   90d88:	47a0      	blx	r4
   90d8a:	4603      	mov	r3, r0
   90d8c:	460c      	mov	r4, r1
   90d8e:	4619      	mov	r1, r3
   90d90:	4622      	mov	r2, r4
   90d92:	4b9b      	ldr	r3, [pc, #620]	; (91000 <cl_testharnesscommandhandler+0x2620>)
   90d94:	4608      	mov	r0, r1
   90d96:	4611      	mov	r1, r2
   90d98:	4798      	blx	r3
   90d9a:	4603      	mov	r3, r0
   90d9c:	b21b      	sxth	r3, r3
   90d9e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   90da2:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90da6:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   90daa:	da08      	bge.n	90dbe <cl_testharnesscommandhandler+0x23de>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   90dac:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   90db0:	b29b      	uxth	r3, r3
   90db2:	3b32      	subs	r3, #50	; 0x32
   90db4:	b29b      	uxth	r3, r3
   90db6:	b21b      	sxth	r3, r3
   90db8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   90dbc:	e286      	b.n	912cc <cl_testharnesscommandhandler+0x28ec>
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
				if (  sensordatamillivolts < 1360 )
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
				}
				else if(  sensordatamillivolts < 1650 )
   90dbe:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90dc2:	f240 6271 	movw	r2, #1649	; 0x671
   90dc6:	4293      	cmp	r3, r2
   90dc8:	f300 8280 	bgt.w	912cc <cl_testharnesscommandhandler+0x28ec>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   90dcc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   90dd0:	b29b      	uxth	r3, r3
   90dd2:	3b19      	subs	r3, #25
   90dd4:	b29b      	uxth	r3, r3
   90dd6:	b21b      	sxth	r3, r3
   90dd8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   90ddc:	e276      	b.n	912cc <cl_testharnesscommandhandler+0x28ec>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   90dde:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90de2:	4619      	mov	r1, r3
   90de4:	200f      	movs	r0, #15
   90de6:	4b82      	ldr	r3, [pc, #520]	; (90ff0 <cl_testharnesscommandhandler+0x2610>)
   90de8:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   90dea:	4b86      	ldr	r3, [pc, #536]	; (91004 <cl_testharnesscommandhandler+0x2624>)
   90dec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90df0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90df4:	461a      	mov	r2, r3
   90df6:	f640 43e4 	movw	r3, #3300	; 0xce4
   90dfa:	fb03 f302 	mul.w	r3, r3, r2
   90dfe:	2b00      	cmp	r3, #0
   90e00:	da01      	bge.n	90e06 <cl_testharnesscommandhandler+0x2426>
   90e02:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90e06:	131b      	asrs	r3, r3, #12
   90e08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   90e0c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90e10:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   90e14:	4b78      	ldr	r3, [pc, #480]	; (90ff8 <cl_testharnesscommandhandler+0x2618>)
   90e16:	4610      	mov	r0, r2
   90e18:	4798      	blx	r3
   90e1a:	4c78      	ldr	r4, [pc, #480]	; (90ffc <cl_testharnesscommandhandler+0x261c>)
   90e1c:	a370      	add	r3, pc, #448	; (adr r3, 90fe0 <cl_testharnesscommandhandler+0x2600>)
   90e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   90e22:	47a0      	blx	r4
   90e24:	4603      	mov	r3, r0
   90e26:	460c      	mov	r4, r1
   90e28:	4619      	mov	r1, r3
   90e2a:	4622      	mov	r2, r4
   90e2c:	4b74      	ldr	r3, [pc, #464]	; (91000 <cl_testharnesscommandhandler+0x2620>)
   90e2e:	4608      	mov	r0, r1
   90e30:	4611      	mov	r1, r2
   90e32:	4798      	blx	r3
   90e34:	4603      	mov	r3, r0
   90e36:	b21b      	sxth	r3, r3
   90e38:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   90e3c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90e40:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   90e44:	da08      	bge.n	90e58 <cl_testharnesscommandhandler+0x2478>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   90e46:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   90e4a:	b29b      	uxth	r3, r3
   90e4c:	3b32      	subs	r3, #50	; 0x32
   90e4e:	b29b      	uxth	r3, r3
   90e50:	b21b      	sxth	r3, r3
   90e52:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   90e56:	e23b      	b.n	912d0 <cl_testharnesscommandhandler+0x28f0>
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
			if (  sensordatamillivolts < 1360 )
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
			}
			else if(  sensordatamillivolts < 1650 )
   90e58:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90e5c:	f240 6271 	movw	r2, #1649	; 0x671
   90e60:	4293      	cmp	r3, r2
   90e62:	f300 8235 	bgt.w	912d0 <cl_testharnesscommandhandler+0x28f0>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   90e66:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   90e6a:	b29b      	uxth	r3, r3
   90e6c:	3b19      	subs	r3, #25
   90e6e:	b29b      	uxth	r3, r3
   90e70:	b21b      	sxth	r3, r3
   90e72:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   90e76:	e22b      	b.n	912d0 <cl_testharnesscommandhandler+0x28f0>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   90e78:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90e7c:	4619      	mov	r1, r3
   90e7e:	2027      	movs	r0, #39	; 0x27
   90e80:	4b5b      	ldr	r3, [pc, #364]	; (90ff0 <cl_testharnesscommandhandler+0x2610>)
   90e82:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   90e84:	4b60      	ldr	r3, [pc, #384]	; (91008 <cl_testharnesscommandhandler+0x2628>)
   90e86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90e8a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90e8e:	461a      	mov	r2, r3
   90e90:	f640 43e4 	movw	r3, #3300	; 0xce4
   90e94:	fb03 f302 	mul.w	r3, r3, r2
   90e98:	2b00      	cmp	r3, #0
   90e9a:	da01      	bge.n	90ea0 <cl_testharnesscommandhandler+0x24c0>
   90e9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90ea0:	131b      	asrs	r3, r3, #12
   90ea2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   90ea6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90eaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   90eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   90eb2:	fb02 f303 	mul.w	r3, r2, r3
   90eb6:	4a55      	ldr	r2, [pc, #340]	; (9100c <cl_testharnesscommandhandler+0x262c>)
   90eb8:	fb82 1203 	smull	r1, r2, r2, r3
   90ebc:	1252      	asrs	r2, r2, #9
   90ebe:	17db      	asrs	r3, r3, #31
   90ec0:	1ad3      	subs	r3, r2, r3
   90ec2:	b21b      	sxth	r3, r3
   90ec4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   90ec8:	2204      	movs	r2, #4
   90eca:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   90ece:	2018      	movs	r0, #24
   90ed0:	4b4f      	ldr	r3, [pc, #316]	; (91010 <cl_testharnesscommandhandler+0x2630>)
   90ed2:	4798      	blx	r3
   90ed4:	4603      	mov	r3, r0
   90ed6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   90eda:	f107 0390 	add.w	r3, r7, #144	; 0x90
   90ede:	2202      	movs	r2, #2
   90ee0:	4619      	mov	r1, r3
   90ee2:	2019      	movs	r0, #25
   90ee4:	4b4a      	ldr	r3, [pc, #296]	; (91010 <cl_testharnesscommandhandler+0x2630>)
   90ee6:	4798      	blx	r3
   90ee8:	4603      	mov	r3, r0
   90eea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   90eee:	e1f0      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   90ef0:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90ef4:	4619      	mov	r1, r3
   90ef6:	2024      	movs	r0, #36	; 0x24
   90ef8:	4b3d      	ldr	r3, [pc, #244]	; (90ff0 <cl_testharnesscommandhandler+0x2610>)
   90efa:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90efc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90f00:	461a      	mov	r2, r3
   90f02:	f640 43e4 	movw	r3, #3300	; 0xce4
   90f06:	fb03 f302 	mul.w	r3, r3, r2
   90f0a:	2b00      	cmp	r3, #0
   90f0c:	da01      	bge.n	90f12 <cl_testharnesscommandhandler+0x2532>
   90f0e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90f12:	131b      	asrs	r3, r3, #12
   90f14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   90f18:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90f1c:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   90f20:	4b35      	ldr	r3, [pc, #212]	; (90ff8 <cl_testharnesscommandhandler+0x2618>)
   90f22:	4610      	mov	r0, r2
   90f24:	4798      	blx	r3
   90f26:	4c35      	ldr	r4, [pc, #212]	; (90ffc <cl_testharnesscommandhandler+0x261c>)
   90f28:	a32f      	add	r3, pc, #188	; (adr r3, 90fe8 <cl_testharnesscommandhandler+0x2608>)
   90f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   90f2e:	47a0      	blx	r4
   90f30:	4603      	mov	r3, r0
   90f32:	460c      	mov	r4, r1
   90f34:	4619      	mov	r1, r3
   90f36:	4622      	mov	r2, r4
   90f38:	4b31      	ldr	r3, [pc, #196]	; (91000 <cl_testharnesscommandhandler+0x2620>)
   90f3a:	4608      	mov	r0, r1
   90f3c:	4611      	mov	r1, r2
   90f3e:	4798      	blx	r3
   90f40:	4603      	mov	r3, r0
   90f42:	b21b      	sxth	r3, r3
   90f44:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   90f48:	4b32      	ldr	r3, [pc, #200]	; (91014 <cl_testharnesscommandhandler+0x2634>)
   90f4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   90f4e:	e1c0      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   90f50:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90f54:	4619      	mov	r1, r3
   90f56:	2026      	movs	r0, #38	; 0x26
   90f58:	4b25      	ldr	r3, [pc, #148]	; (90ff0 <cl_testharnesscommandhandler+0x2610>)
   90f5a:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   90f5c:	4b2e      	ldr	r3, [pc, #184]	; (91018 <cl_testharnesscommandhandler+0x2638>)
   90f5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90f62:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   90f66:	461a      	mov	r2, r3
   90f68:	f640 43e4 	movw	r3, #3300	; 0xce4
   90f6c:	fb03 f302 	mul.w	r3, r3, r2
   90f70:	2b00      	cmp	r3, #0
   90f72:	da01      	bge.n	90f78 <cl_testharnesscommandhandler+0x2598>
   90f74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90f78:	131b      	asrs	r3, r3, #12
   90f7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   90f7e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90f82:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   90f86:	4b1c      	ldr	r3, [pc, #112]	; (90ff8 <cl_testharnesscommandhandler+0x2618>)
   90f88:	4610      	mov	r0, r2
   90f8a:	4798      	blx	r3
   90f8c:	4c1b      	ldr	r4, [pc, #108]	; (90ffc <cl_testharnesscommandhandler+0x261c>)
   90f8e:	a316      	add	r3, pc, #88	; (adr r3, 90fe8 <cl_testharnesscommandhandler+0x2608>)
   90f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   90f94:	47a0      	blx	r4
   90f96:	4603      	mov	r3, r0
   90f98:	460c      	mov	r4, r1
   90f9a:	4619      	mov	r1, r3
   90f9c:	4622      	mov	r2, r4
   90f9e:	4b18      	ldr	r3, [pc, #96]	; (91000 <cl_testharnesscommandhandler+0x2620>)
   90fa0:	4608      	mov	r0, r1
   90fa2:	4611      	mov	r1, r2
   90fa4:	4798      	blx	r3
   90fa6:	4603      	mov	r3, r0
   90fa8:	b21b      	sxth	r3, r3
   90faa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   90fae:	4b1a      	ldr	r3, [pc, #104]	; (91018 <cl_testharnesscommandhandler+0x2638>)
   90fb0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   90fb4:	2204      	movs	r2, #4
   90fb6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   90fba:	2018      	movs	r0, #24
   90fbc:	4b14      	ldr	r3, [pc, #80]	; (91010 <cl_testharnesscommandhandler+0x2630>)
   90fbe:	4798      	blx	r3
   90fc0:	4603      	mov	r3, r0
   90fc2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   90fc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
   90fca:	2202      	movs	r2, #2
   90fcc:	4619      	mov	r1, r3
   90fce:	2019      	movs	r0, #25
   90fd0:	4b0f      	ldr	r3, [pc, #60]	; (91010 <cl_testharnesscommandhandler+0x2630>)
   90fd2:	4798      	blx	r3
   90fd4:	4603      	mov	r3, r0
   90fd6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   90fda:	e17a      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
   90fdc:	f3af 8000 	nop.w
   90fe0:	8f5c28f6 	.word	0x8f5c28f6
   90fe4:	3fe8f5c2 	.word	0x3fe8f5c2
   90fe8:	33333333 	.word	0x33333333
   90fec:	3fe33333 	.word	0x3fe33333
   90ff0:	00091341 	.word	0x00091341
   90ff4:	000a57b0 	.word	0x000a57b0
   90ff8:	000a2b05 	.word	0x000a2b05
   90ffc:	000a2e25 	.word	0x000a2e25
   91000:	000a3105 	.word	0x000a3105
   91004:	000a57b8 	.word	0x000a57b8
   91008:	000a57c0 	.word	0x000a57c0
   9100c:	77280773 	.word	0x77280773
   91010:	0009926d 	.word	0x0009926d
   91014:	000a57c8 	.word	0x000a57c8
   91018:	000a57d0 	.word	0x000a57d0
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   9101c:	4bb8      	ldr	r3, [pc, #736]	; (91300 <cl_testharnesscommandhandler+0x2920>)
   9101e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91022:	b29a      	uxth	r2, r3
   91024:	4bb7      	ldr	r3, [pc, #732]	; (91304 <cl_testharnesscommandhandler+0x2924>)
   91026:	f9b3 3000 	ldrsh.w	r3, [r3]
   9102a:	b29b      	uxth	r3, r3
   9102c:	1ad3      	subs	r3, r2, r3
   9102e:	b29b      	uxth	r3, r3
   91030:	b21b      	sxth	r3, r3
   91032:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   91036:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   9103a:	b29b      	uxth	r3, r3
   9103c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91040:	b29b      	uxth	r3, r3
   91042:	b21b      	sxth	r3, r3
   91044:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   91048:	4baf      	ldr	r3, [pc, #700]	; (91308 <cl_testharnesscommandhandler+0x2928>)
   9104a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9104e:	2204      	movs	r2, #4
   91050:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91054:	2018      	movs	r0, #24
   91056:	4bad      	ldr	r3, [pc, #692]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   91058:	4798      	blx	r3
   9105a:	4603      	mov	r3, r0
   9105c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   91060:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   91064:	2202      	movs	r2, #2
   91066:	4619      	mov	r1, r3
   91068:	2019      	movs	r0, #25
   9106a:	4ba8      	ldr	r3, [pc, #672]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   9106c:	4798      	blx	r3
   9106e:	4603      	mov	r3, r0
   91070:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   91074:	4ba2      	ldr	r3, [pc, #648]	; (91300 <cl_testharnesscommandhandler+0x2920>)
   91076:	f9b3 3000 	ldrsh.w	r3, [r3]
   9107a:	461a      	mov	r2, r3
   9107c:	4ba4      	ldr	r3, [pc, #656]	; (91310 <cl_testharnesscommandhandler+0x2930>)
   9107e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91082:	4413      	add	r3, r2
   91084:	0fda      	lsrs	r2, r3, #31
   91086:	4413      	add	r3, r2
   91088:	105b      	asrs	r3, r3, #1
   9108a:	b29a      	uxth	r2, r3
   9108c:	4b9d      	ldr	r3, [pc, #628]	; (91304 <cl_testharnesscommandhandler+0x2924>)
   9108e:	f9b3 3000 	ldrsh.w	r3, [r3]
   91092:	4619      	mov	r1, r3
   91094:	4b9f      	ldr	r3, [pc, #636]	; (91314 <cl_testharnesscommandhandler+0x2934>)
   91096:	f9b3 3000 	ldrsh.w	r3, [r3]
   9109a:	440b      	add	r3, r1
   9109c:	0fd9      	lsrs	r1, r3, #31
   9109e:	440b      	add	r3, r1
   910a0:	105b      	asrs	r3, r3, #1
   910a2:	b29b      	uxth	r3, r3
   910a4:	1ad3      	subs	r3, r2, r3
   910a6:	b29b      	uxth	r3, r3
   910a8:	b21b      	sxth	r3, r3
   910aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   910ae:	4b9a      	ldr	r3, [pc, #616]	; (91318 <cl_testharnesscommandhandler+0x2938>)
   910b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   910b4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   910b8:	b29b      	uxth	r3, r3
   910ba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   910be:	b29b      	uxth	r3, r3
   910c0:	b21b      	sxth	r3, r3
   910c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   910c6:	2204      	movs	r2, #4
   910c8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   910cc:	2018      	movs	r0, #24
   910ce:	4b8f      	ldr	r3, [pc, #572]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   910d0:	4798      	blx	r3
   910d2:	4603      	mov	r3, r0
   910d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   910d8:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   910dc:	2202      	movs	r2, #2
   910de:	4619      	mov	r1, r3
   910e0:	2019      	movs	r0, #25
   910e2:	4b8a      	ldr	r3, [pc, #552]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   910e4:	4798      	blx	r3
   910e6:	4603      	mov	r3, r0
   910e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   910ec:	e0f1      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   910ee:	f107 0392 	add.w	r3, r7, #146	; 0x92
   910f2:	4619      	mov	r1, r3
   910f4:	2012      	movs	r0, #18
   910f6:	4b89      	ldr	r3, [pc, #548]	; (9131c <cl_testharnesscommandhandler+0x293c>)
   910f8:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   910fa:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   910fe:	4b88      	ldr	r3, [pc, #544]	; (91320 <cl_testharnesscommandhandler+0x2940>)
   91100:	4610      	mov	r0, r2
   91102:	4798      	blx	r3
   91104:	4c87      	ldr	r4, [pc, #540]	; (91324 <cl_testharnesscommandhandler+0x2944>)
   91106:	a37a      	add	r3, pc, #488	; (adr r3, 912f0 <cl_testharnesscommandhandler+0x2910>)
   91108:	e9d3 2300 	ldrd	r2, r3, [r3]
   9110c:	47a0      	blx	r4
   9110e:	4603      	mov	r3, r0
   91110:	460c      	mov	r4, r1
   91112:	4618      	mov	r0, r3
   91114:	4621      	mov	r1, r4
   91116:	4c84      	ldr	r4, [pc, #528]	; (91328 <cl_testharnesscommandhandler+0x2948>)
   91118:	a377      	add	r3, pc, #476	; (adr r3, 912f8 <cl_testharnesscommandhandler+0x2918>)
   9111a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9111e:	47a0      	blx	r4
   91120:	4603      	mov	r3, r0
   91122:	460c      	mov	r4, r1
   91124:	4619      	mov	r1, r3
   91126:	4622      	mov	r2, r4
   91128:	4b80      	ldr	r3, [pc, #512]	; (9132c <cl_testharnesscommandhandler+0x294c>)
   9112a:	4608      	mov	r0, r1
   9112c:	4611      	mov	r1, r2
   9112e:	4798      	blx	r3
   91130:	4603      	mov	r3, r0
   91132:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   91136:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   9113a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9113e:	fb02 f303 	mul.w	r3, r2, r3
   91142:	4a7b      	ldr	r2, [pc, #492]	; (91330 <cl_testharnesscommandhandler+0x2950>)
   91144:	fb82 1203 	smull	r1, r2, r2, r3
   91148:	11d2      	asrs	r2, r2, #7
   9114a:	17db      	asrs	r3, r3, #31
   9114c:	1ad3      	subs	r3, r2, r3
   9114e:	b29b      	uxth	r3, r3
   91150:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91154:	b29b      	uxth	r3, r3
   91156:	b21a      	sxth	r2, r3
   91158:	f107 030c 	add.w	r3, r7, #12
   9115c:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   9115e:	4b75      	ldr	r3, [pc, #468]	; (91334 <cl_testharnesscommandhandler+0x2954>)
   91160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   91164:	2206      	movs	r2, #6
   91166:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9116a:	2018      	movs	r0, #24
   9116c:	4b67      	ldr	r3, [pc, #412]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   9116e:	4798      	blx	r3
   91170:	4603      	mov	r3, r0
   91172:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   91176:	f107 030c 	add.w	r3, r7, #12
   9117a:	2202      	movs	r2, #2
   9117c:	4619      	mov	r1, r3
   9117e:	2019      	movs	r0, #25
   91180:	4b62      	ldr	r3, [pc, #392]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   91182:	4798      	blx	r3
   91184:	4603      	mov	r3, r0
   91186:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   9118a:	e0a2      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   9118c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   91190:	4619      	mov	r1, r3
   91192:	2013      	movs	r0, #19
   91194:	4b61      	ldr	r3, [pc, #388]	; (9131c <cl_testharnesscommandhandler+0x293c>)
   91196:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   91198:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9119c:	4b60      	ldr	r3, [pc, #384]	; (91320 <cl_testharnesscommandhandler+0x2940>)
   9119e:	4610      	mov	r0, r2
   911a0:	4798      	blx	r3
   911a2:	4c60      	ldr	r4, [pc, #384]	; (91324 <cl_testharnesscommandhandler+0x2944>)
   911a4:	a352      	add	r3, pc, #328	; (adr r3, 912f0 <cl_testharnesscommandhandler+0x2910>)
   911a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   911aa:	47a0      	blx	r4
   911ac:	4603      	mov	r3, r0
   911ae:	460c      	mov	r4, r1
   911b0:	4618      	mov	r0, r3
   911b2:	4621      	mov	r1, r4
   911b4:	4c5c      	ldr	r4, [pc, #368]	; (91328 <cl_testharnesscommandhandler+0x2948>)
   911b6:	a350      	add	r3, pc, #320	; (adr r3, 912f8 <cl_testharnesscommandhandler+0x2918>)
   911b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   911bc:	47a0      	blx	r4
   911be:	4603      	mov	r3, r0
   911c0:	460c      	mov	r4, r1
   911c2:	4619      	mov	r1, r3
   911c4:	4622      	mov	r2, r4
   911c6:	4b59      	ldr	r3, [pc, #356]	; (9132c <cl_testharnesscommandhandler+0x294c>)
   911c8:	4608      	mov	r0, r1
   911ca:	4611      	mov	r1, r2
   911cc:	4798      	blx	r3
   911ce:	4603      	mov	r3, r0
   911d0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   911d4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   911d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   911dc:	fb02 f303 	mul.w	r3, r2, r3
   911e0:	4a53      	ldr	r2, [pc, #332]	; (91330 <cl_testharnesscommandhandler+0x2950>)
   911e2:	fb82 1203 	smull	r1, r2, r2, r3
   911e6:	11d2      	asrs	r2, r2, #7
   911e8:	17db      	asrs	r3, r3, #31
   911ea:	1ad3      	subs	r3, r2, r3
   911ec:	b29b      	uxth	r3, r3
   911ee:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   911f2:	b29b      	uxth	r3, r3
   911f4:	b21a      	sxth	r2, r3
   911f6:	f107 030a 	add.w	r3, r7, #10
   911fa:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   911fc:	4b4e      	ldr	r3, [pc, #312]	; (91338 <cl_testharnesscommandhandler+0x2958>)
   911fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   91202:	2206      	movs	r2, #6
   91204:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   91208:	2018      	movs	r0, #24
   9120a:	4b40      	ldr	r3, [pc, #256]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   9120c:	4798      	blx	r3
   9120e:	4603      	mov	r3, r0
   91210:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   91214:	f107 030a 	add.w	r3, r7, #10
   91218:	2202      	movs	r2, #2
   9121a:	4619      	mov	r1, r3
   9121c:	2019      	movs	r0, #25
   9121e:	4b3b      	ldr	r3, [pc, #236]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   91220:	4798      	blx	r3
   91222:	4603      	mov	r3, r0
   91224:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   91228:	e053      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   9122a:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9122e:	4619      	mov	r1, r3
   91230:	2014      	movs	r0, #20
   91232:	4b3a      	ldr	r3, [pc, #232]	; (9131c <cl_testharnesscommandhandler+0x293c>)
   91234:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   91236:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   9123a:	4b39      	ldr	r3, [pc, #228]	; (91320 <cl_testharnesscommandhandler+0x2940>)
   9123c:	4610      	mov	r0, r2
   9123e:	4798      	blx	r3
   91240:	4c38      	ldr	r4, [pc, #224]	; (91324 <cl_testharnesscommandhandler+0x2944>)
   91242:	a32b      	add	r3, pc, #172	; (adr r3, 912f0 <cl_testharnesscommandhandler+0x2910>)
   91244:	e9d3 2300 	ldrd	r2, r3, [r3]
   91248:	47a0      	blx	r4
   9124a:	4603      	mov	r3, r0
   9124c:	460c      	mov	r4, r1
   9124e:	4618      	mov	r0, r3
   91250:	4621      	mov	r1, r4
   91252:	4c35      	ldr	r4, [pc, #212]	; (91328 <cl_testharnesscommandhandler+0x2948>)
   91254:	a328      	add	r3, pc, #160	; (adr r3, 912f8 <cl_testharnesscommandhandler+0x2918>)
   91256:	e9d3 2300 	ldrd	r2, r3, [r3]
   9125a:	47a0      	blx	r4
   9125c:	4603      	mov	r3, r0
   9125e:	460c      	mov	r4, r1
   91260:	4619      	mov	r1, r3
   91262:	4622      	mov	r2, r4
   91264:	4b31      	ldr	r3, [pc, #196]	; (9132c <cl_testharnesscommandhandler+0x294c>)
   91266:	4608      	mov	r0, r1
   91268:	4611      	mov	r1, r2
   9126a:	4798      	blx	r3
   9126c:	4603      	mov	r3, r0
   9126e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   91272:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   91276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9127a:	fb02 f303 	mul.w	r3, r2, r3
   9127e:	4a2c      	ldr	r2, [pc, #176]	; (91330 <cl_testharnesscommandhandler+0x2950>)
   91280:	fb82 1203 	smull	r1, r2, r2, r3
   91284:	11d2      	asrs	r2, r2, #7
   91286:	17db      	asrs	r3, r3, #31
   91288:	1ad3      	subs	r3, r2, r3
   9128a:	b29b      	uxth	r3, r3
   9128c:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   91290:	b29b      	uxth	r3, r3
   91292:	b21a      	sxth	r2, r3
   91294:	f107 0308 	add.w	r3, r7, #8
   91298:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   9129a:	4b28      	ldr	r3, [pc, #160]	; (9133c <cl_testharnesscommandhandler+0x295c>)
   9129c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   912a0:	2206      	movs	r2, #6
   912a2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   912a6:	2018      	movs	r0, #24
   912a8:	4b18      	ldr	r3, [pc, #96]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   912aa:	4798      	blx	r3
   912ac:	4603      	mov	r3, r0
   912ae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   912b2:	f107 0308 	add.w	r3, r7, #8
   912b6:	2202      	movs	r2, #2
   912b8:	4619      	mov	r1, r3
   912ba:	2019      	movs	r0, #25
   912bc:	4b13      	ldr	r3, [pc, #76]	; (9130c <cl_testharnesscommandhandler+0x292c>)
   912be:	4798      	blx	r3
   912c0:	4603      	mov	r3, r0
   912c2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   912c6:	e004      	b.n	912d2 <cl_testharnesscommandhandler+0x28f2>


			
			default: break;
   912c8:	bf00      	nop
   912ca:	e00a      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
				
			}
			#endif

			
			break;
   912cc:	bf00      	nop
   912ce:	e008      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   912d0:	bf00      	nop

			
			default: break;
		}

		break;
   912d2:	e006      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
		default:
		
		break;
   912d4:	bf00      	nop
   912d6:	e004      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   912d8:	bf00      	nop
   912da:	e002      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   912dc:	bf00      	nop
   912de:	e000      	b.n	912e2 <cl_testharnesscommandhandler+0x2902>
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   912e0:	bf00      	nop
		break;
	}
	
	
	
	return CL_OK;
   912e2:	2300      	movs	r3, #0
	
}
   912e4:	4618      	mov	r0, r3
   912e6:	f507 7792 	add.w	r7, r7, #292	; 0x124
   912ea:	46bd      	mov	sp, r7
   912ec:	bd90      	pop	{r4, r7, pc}
   912ee:	bf00      	nop
   912f0:	a6b50b0f 	.word	0xa6b50b0f
   912f4:	3fe9c779 	.word	0x3fe9c779
   912f8:	00000000 	.word	0x00000000
   912fc:	4096a800 	.word	0x4096a800
   91300:	2007263a 	.word	0x2007263a
   91304:	20072634 	.word	0x20072634
   91308:	000a57d8 	.word	0x000a57d8
   9130c:	0009926d 	.word	0x0009926d
   91310:	20072638 	.word	0x20072638
   91314:	20072636 	.word	0x20072636
   91318:	000a57e0 	.word	0x000a57e0
   9131c:	00091341 	.word	0x00091341
   91320:	000a2b05 	.word	0x000a2b05
   91324:	000a2bd1 	.word	0x000a2bd1
   91328:	000a2869 	.word	0x000a2869
   9132c:	000a3105 	.word	0x000a3105
   91330:	60606061 	.word	0x60606061
   91334:	000a57e8 	.word	0x000a57e8
   91338:	000a57f0 	.word	0x000a57f0
   9133c:	000a57f8 	.word	0x000a57f8

00091340 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   91340:	b580      	push	{r7, lr}
   91342:	b086      	sub	sp, #24
   91344:	af00      	add	r7, sp, #0
   91346:	4603      	mov	r3, r0
   91348:	6039      	str	r1, [r7, #0]
   9134a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   9134c:	2304      	movs	r3, #4
   9134e:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   91350:	2300      	movs	r3, #0
   91352:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   91354:	2300      	movs	r3, #0
   91356:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   91358:	2300      	movs	r3, #0
   9135a:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   9135c:	f107 030f 	add.w	r3, r7, #15
   91360:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   91362:	f107 030c 	add.w	r3, r7, #12
   91366:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   91368:	f107 0308 	add.w	r3, r7, #8
   9136c:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   9136e:	79fb      	ldrb	r3, [r7, #7]
   91370:	6839      	ldr	r1, [r7, #0]
   91372:	4618      	mov	r0, r3
   91374:	4b03      	ldr	r3, [pc, #12]	; (91384 <cl_testgetsensordata+0x44>)
   91376:	4798      	blx	r3
	
return CL_OK;	
   91378:	2300      	movs	r3, #0
}
   9137a:	4618      	mov	r0, r3
   9137c:	3718      	adds	r7, #24
   9137e:	46bd      	mov	sp, r7
   91380:	bd80      	pop	{r7, pc}
   91382:	bf00      	nop
   91384:	0008d61d 	.word	0x0008d61d

00091388 <pinclock>:
	#endif

}

void pinclock(void)
{
   91388:	b480      	push	{r7}
   9138a:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   9138c:	bf00      	nop
   9138e:	46bd      	mov	sp, r7
   91390:	bc80      	pop	{r7}
   91392:	4770      	bx	lr

00091394 <tg_timer_minute>:
				
				}

}
void tg_timer_minute(void)
{
   91394:	b480      	push	{r7}
   91396:	b085      	sub	sp, #20
   91398:	af00      	add	r7, sp, #0
	
//	if(!(minute_count % 5 ))
//	{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_R_COUNT",10);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_rotation_counter,2);
		temp3 = uf_rotation_counter * 1000;
   9139a:	4b0e      	ldr	r3, [pc, #56]	; (913d4 <tg_timer_minute+0x40>)
   9139c:	881b      	ldrh	r3, [r3, #0]
   9139e:	461a      	mov	r2, r3
   913a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   913a4:	fb03 f302 	mul.w	r3, r3, r2
   913a8:	60fb      	str	r3, [r7, #12]
	//	dataarray[1] = cl_data.bytearray[0];
	//	dataarray[2] = cl_data.bytearray[1];
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_SYSDATA,&dataarray,3);

//	}
	if(minute_count == 180)
   913aa:	4b0b      	ldr	r3, [pc, #44]	; (913d8 <tg_timer_minute+0x44>)
   913ac:	681b      	ldr	r3, [r3, #0]
   913ae:	2bb4      	cmp	r3, #180	; 0xb4
   913b0:	d105      	bne.n	913be <tg_timer_minute+0x2a>
	{
		uf_rotation_counter =0;
   913b2:	4b08      	ldr	r3, [pc, #32]	; (913d4 <tg_timer_minute+0x40>)
   913b4:	2200      	movs	r2, #0
   913b6:	801a      	strh	r2, [r3, #0]
		minute_count = 0;
   913b8:	4b07      	ldr	r3, [pc, #28]	; (913d8 <tg_timer_minute+0x44>)
   913ba:	2200      	movs	r2, #0
   913bc:	601a      	str	r2, [r3, #0]
	}
	
	minute_count++;
   913be:	4b06      	ldr	r3, [pc, #24]	; (913d8 <tg_timer_minute+0x44>)
   913c0:	681b      	ldr	r3, [r3, #0]
   913c2:	3301      	adds	r3, #1
   913c4:	4a04      	ldr	r2, [pc, #16]	; (913d8 <tg_timer_minute+0x44>)
   913c6:	6013      	str	r3, [r2, #0]
}
   913c8:	bf00      	nop
   913ca:	3714      	adds	r7, #20
   913cc:	46bd      	mov	sp, r7
   913ce:	bc80      	pop	{r7}
   913d0:	4770      	bx	lr
   913d2:	bf00      	nop
   913d4:	2007263e 	.word	0x2007263e
   913d8:	20072644 	.word	0x20072644

000913dc <testsectclock>:


void testsectclock(void)
{
   913dc:	b580      	push	{r7, lr}
   913de:	b086      	sub	sp, #24
   913e0:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   913e2:	2300      	movs	r3, #0
   913e4:	82fb      	strh	r3, [r7, #22]
   913e6:	2300      	movs	r3, #0
   913e8:	82bb      	strh	r3, [r7, #20]
   913ea:	2300      	movs	r3, #0
   913ec:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   913ee:	2300      	movs	r3, #0
   913f0:	823b      	strh	r3, [r7, #16]
   913f2:	2300      	movs	r3, #0
   913f4:	81fb      	strh	r3, [r7, #14]
   913f6:	2300      	movs	r3, #0
   913f8:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   913fa:	f04f 0300 	mov.w	r3, #0
   913fe:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   91400:	1dbb      	adds	r3, r7, #6
   91402:	4619      	mov	r1, r3
   91404:	2013      	movs	r0, #19
   91406:	4b0f      	ldr	r3, [pc, #60]	; (91444 <testsectclock+0x68>)
   91408:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   9140a:	4b0f      	ldr	r3, [pc, #60]	; (91448 <testsectclock+0x6c>)
   9140c:	681a      	ldr	r2, [r3, #0]
   9140e:	4b0f      	ldr	r3, [pc, #60]	; (9144c <testsectclock+0x70>)
   91410:	490f      	ldr	r1, [pc, #60]	; (91450 <testsectclock+0x74>)
   91412:	4610      	mov	r0, r2
   91414:	4798      	blx	r3
   91416:	4603      	mov	r3, r0
   91418:	2b00      	cmp	r3, #0
   9141a:	d100      	bne.n	9141e <testsectclock+0x42>
	}
		
	}
		
	
}
   9141c:	e00d      	b.n	9143a <testsectclock+0x5e>
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   9141e:	4b0d      	ldr	r3, [pc, #52]	; (91454 <testsectclock+0x78>)
   91420:	781b      	ldrb	r3, [r3, #0]
   91422:	b2db      	uxtb	r3, r3
   91424:	2b01      	cmp	r3, #1
   91426:	d008      	beq.n	9143a <testsectclock+0x5e>
   91428:	4b0b      	ldr	r3, [pc, #44]	; (91458 <testsectclock+0x7c>)
   9142a:	781b      	ldrb	r3, [r3, #0]
   9142c:	2b01      	cmp	r3, #1
   9142e:	d004      	beq.n	9143a <testsectclock+0x5e>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   91430:	4b0a      	ldr	r3, [pc, #40]	; (9145c <testsectclock+0x80>)
   91432:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   91434:	2004      	movs	r0, #4
   91436:	4b0a      	ldr	r3, [pc, #40]	; (91460 <testsectclock+0x84>)
   91438:	4798      	blx	r3
	}
		
	}
		
	
}
   9143a:	bf00      	nop
   9143c:	3718      	adds	r7, #24
   9143e:	46bd      	mov	sp, r7
   91440:	bd80      	pop	{r7, pc}
   91442:	bf00      	nop
   91444:	0008d61d 	.word	0x0008d61d
   91448:	2007166c 	.word	0x2007166c
   9144c:	000a37c9 	.word	0x000a37c9
   91450:	471c4000 	.word	0x471c4000
   91454:	2007262b 	.word	0x2007262b
   91458:	20072881 	.word	0x20072881
   9145c:	000974dd 	.word	0x000974dd
   91460:	00088a8d 	.word	0x00088a8d

00091464 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   91464:	b580      	push	{r7, lr}
   91466:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   91468:	4b1c      	ldr	r3, [pc, #112]	; (914dc <Cl_TimerTickCallback+0x78>)
   9146a:	681b      	ldr	r3, [r3, #0]
   9146c:	3301      	adds	r3, #1
   9146e:	4a1b      	ldr	r2, [pc, #108]	; (914dc <Cl_TimerTickCallback+0x78>)
   91470:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   91472:	4b1a      	ldr	r3, [pc, #104]	; (914dc <Cl_TimerTickCallback+0x78>)
   91474:	681b      	ldr	r3, [r3, #0]
   91476:	2b00      	cmp	r3, #0
   91478:	dd07      	ble.n	9148a <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   9147a:	4b18      	ldr	r3, [pc, #96]	; (914dc <Cl_TimerTickCallback+0x78>)
   9147c:	2200      	movs	r2, #0
   9147e:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   91480:	4b17      	ldr	r3, [pc, #92]	; (914e0 <Cl_TimerTickCallback+0x7c>)
   91482:	681b      	ldr	r3, [r3, #0]
   91484:	3301      	adds	r3, #1
   91486:	4a16      	ldr	r2, [pc, #88]	; (914e0 <Cl_TimerTickCallback+0x7c>)
   91488:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   9148a:	4b15      	ldr	r3, [pc, #84]	; (914e0 <Cl_TimerTickCallback+0x7c>)
   9148c:	681b      	ldr	r3, [r3, #0]
   9148e:	2b3b      	cmp	r3, #59	; 0x3b
   91490:	dd07      	ble.n	914a2 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   91492:	4b13      	ldr	r3, [pc, #76]	; (914e0 <Cl_TimerTickCallback+0x7c>)
   91494:	2200      	movs	r2, #0
   91496:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   91498:	4b12      	ldr	r3, [pc, #72]	; (914e4 <Cl_TimerTickCallback+0x80>)
   9149a:	681b      	ldr	r3, [r3, #0]
   9149c:	3301      	adds	r3, #1
   9149e:	4a11      	ldr	r2, [pc, #68]	; (914e4 <Cl_TimerTickCallback+0x80>)
   914a0:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   914a2:	4b10      	ldr	r3, [pc, #64]	; (914e4 <Cl_TimerTickCallback+0x80>)
   914a4:	681b      	ldr	r3, [r3, #0]
   914a6:	2b3b      	cmp	r3, #59	; 0x3b
   914a8:	dd0d      	ble.n	914c6 <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   914aa:	4b0e      	ldr	r3, [pc, #56]	; (914e4 <Cl_TimerTickCallback+0x80>)
   914ac:	2200      	movs	r2, #0
   914ae:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   914b0:	4b0d      	ldr	r3, [pc, #52]	; (914e8 <Cl_TimerTickCallback+0x84>)
   914b2:	681b      	ldr	r3, [r3, #0]
   914b4:	3301      	adds	r3, #1
   914b6:	4a0c      	ldr	r2, [pc, #48]	; (914e8 <Cl_TimerTickCallback+0x84>)
   914b8:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   914ba:	4b0c      	ldr	r3, [pc, #48]	; (914ec <Cl_TimerTickCallback+0x88>)
   914bc:	4798      	blx	r3
   914be:	4603      	mov	r3, r0
   914c0:	461a      	mov	r2, r3
   914c2:	4b0b      	ldr	r3, [pc, #44]	; (914f0 <Cl_TimerTickCallback+0x8c>)
   914c4:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   914c6:	4b08      	ldr	r3, [pc, #32]	; (914e8 <Cl_TimerTickCallback+0x84>)
   914c8:	681b      	ldr	r3, [r3, #0]
   914ca:	2b17      	cmp	r3, #23
   914cc:	dd02      	ble.n	914d4 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   914ce:	4b06      	ldr	r3, [pc, #24]	; (914e8 <Cl_TimerTickCallback+0x84>)
   914d0:	2200      	movs	r2, #0
   914d2:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   914d4:	2300      	movs	r3, #0
}
   914d6:	4618      	mov	r0, r3
   914d8:	bd80      	pop	{r7, pc}
   914da:	bf00      	nop
   914dc:	20072650 	.word	0x20072650
   914e0:	20072654 	.word	0x20072654
   914e4:	20072658 	.word	0x20072658
   914e8:	2007265c 	.word	0x2007265c
   914ec:	00091895 	.word	0x00091895
   914f0:	20073190 	.word	0x20073190

000914f4 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   914f4:	b580      	push	{r7, lr}
   914f6:	b082      	sub	sp, #8
   914f8:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   914fa:	4b5e      	ldr	r3, [pc, #376]	; (91674 <Cl_MilliTickcallBack+0x180>)
   914fc:	681b      	ldr	r3, [r3, #0]
   914fe:	2b01      	cmp	r3, #1
   91500:	d10d      	bne.n	9151e <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   91502:	4b5d      	ldr	r3, [pc, #372]	; (91678 <Cl_MilliTickcallBack+0x184>)
   91504:	681b      	ldr	r3, [r3, #0]
   91506:	3301      	adds	r3, #1
   91508:	4a5b      	ldr	r2, [pc, #364]	; (91678 <Cl_MilliTickcallBack+0x184>)
   9150a:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   9150c:	4b5a      	ldr	r3, [pc, #360]	; (91678 <Cl_MilliTickcallBack+0x184>)
   9150e:	681b      	ldr	r3, [r3, #0]
   91510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   91514:	dd06      	ble.n	91524 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   91516:	4b58      	ldr	r3, [pc, #352]	; (91678 <Cl_MilliTickcallBack+0x184>)
   91518:	2200      	movs	r2, #0
   9151a:	601a      	str	r2, [r3, #0]
   9151c:	e002      	b.n	91524 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   9151e:	4b56      	ldr	r3, [pc, #344]	; (91678 <Cl_MilliTickcallBack+0x184>)
   91520:	2200      	movs	r2, #0
   91522:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   91524:	4b55      	ldr	r3, [pc, #340]	; (9167c <Cl_MilliTickcallBack+0x188>)
   91526:	681b      	ldr	r3, [r3, #0]
   91528:	3301      	adds	r3, #1
   9152a:	4a54      	ldr	r2, [pc, #336]	; (9167c <Cl_MilliTickcallBack+0x188>)
   9152c:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   9152e:	4b53      	ldr	r3, [pc, #332]	; (9167c <Cl_MilliTickcallBack+0x188>)
   91530:	681b      	ldr	r3, [r3, #0]
   91532:	2b32      	cmp	r3, #50	; 0x32
   91534:	dd02      	ble.n	9153c <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   91536:	4b51      	ldr	r3, [pc, #324]	; (9167c <Cl_MilliTickcallBack+0x188>)
   91538:	2200      	movs	r2, #0
   9153a:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   9153c:	4b50      	ldr	r3, [pc, #320]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   9153e:	681b      	ldr	r3, [r3, #0]
   91540:	3301      	adds	r3, #1
   91542:	4a4f      	ldr	r2, [pc, #316]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   91544:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   91546:	4b4e      	ldr	r3, [pc, #312]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   91548:	6819      	ldr	r1, [r3, #0]
   9154a:	4b4e      	ldr	r3, [pc, #312]	; (91684 <Cl_MilliTickcallBack+0x190>)
   9154c:	fb83 2301 	smull	r2, r3, r3, r1
   91550:	10da      	asrs	r2, r3, #3
   91552:	17cb      	asrs	r3, r1, #31
   91554:	1ad2      	subs	r2, r2, r3
   91556:	4613      	mov	r3, r2
   91558:	009b      	lsls	r3, r3, #2
   9155a:	4413      	add	r3, r2
   9155c:	009b      	lsls	r3, r3, #2
   9155e:	1aca      	subs	r2, r1, r3
   91560:	2a00      	cmp	r2, #0
   91562:	d103      	bne.n	9156c <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   91564:	4b48      	ldr	r3, [pc, #288]	; (91688 <Cl_MilliTickcallBack+0x194>)
   91566:	4798      	blx	r3
   91568:	4603      	mov	r3, r0
   9156a:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   9156c:	4b44      	ldr	r3, [pc, #272]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   9156e:	681b      	ldr	r3, [r3, #0]
   91570:	f003 0301 	and.w	r3, r3, #1
   91574:	2b00      	cmp	r3, #0
   91576:	d105      	bne.n	91584 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   91578:	4b44      	ldr	r3, [pc, #272]	; (9168c <Cl_MilliTickcallBack+0x198>)
   9157a:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   9157c:	4b44      	ldr	r3, [pc, #272]	; (91690 <Cl_MilliTickcallBack+0x19c>)
   9157e:	4798      	blx	r3
   91580:	4603      	mov	r3, r0
   91582:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   91584:	4b3e      	ldr	r3, [pc, #248]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   91586:	6819      	ldr	r1, [r3, #0]
   91588:	4b3e      	ldr	r3, [pc, #248]	; (91684 <Cl_MilliTickcallBack+0x190>)
   9158a:	fb83 2301 	smull	r2, r3, r3, r1
   9158e:	105a      	asrs	r2, r3, #1
   91590:	17cb      	asrs	r3, r1, #31
   91592:	1ad2      	subs	r2, r2, r3
   91594:	4613      	mov	r3, r2
   91596:	009b      	lsls	r3, r3, #2
   91598:	4413      	add	r3, r2
   9159a:	1aca      	subs	r2, r1, r3
   9159c:	2a00      	cmp	r2, #0
   9159e:	d103      	bne.n	915a8 <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   915a0:	4b3c      	ldr	r3, [pc, #240]	; (91694 <Cl_MilliTickcallBack+0x1a0>)
   915a2:	4798      	blx	r3
   915a4:	4603      	mov	r3, r0
   915a6:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   915a8:	4b35      	ldr	r3, [pc, #212]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   915aa:	6819      	ldr	r1, [r3, #0]
   915ac:	4b35      	ldr	r3, [pc, #212]	; (91684 <Cl_MilliTickcallBack+0x190>)
   915ae:	fb83 2301 	smull	r2, r3, r3, r1
   915b2:	109a      	asrs	r2, r3, #2
   915b4:	17cb      	asrs	r3, r1, #31
   915b6:	1ad2      	subs	r2, r2, r3
   915b8:	4613      	mov	r3, r2
   915ba:	009b      	lsls	r3, r3, #2
   915bc:	4413      	add	r3, r2
   915be:	005b      	lsls	r3, r3, #1
   915c0:	1aca      	subs	r2, r1, r3
   915c2:	2a00      	cmp	r2, #0
   915c4:	d103      	bne.n	915ce <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   915c6:	4b34      	ldr	r3, [pc, #208]	; (91698 <Cl_MilliTickcallBack+0x1a4>)
   915c8:	4798      	blx	r3
   915ca:	4603      	mov	r3, r0
   915cc:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   915ce:	4b2c      	ldr	r3, [pc, #176]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   915d0:	681a      	ldr	r2, [r3, #0]
   915d2:	4b32      	ldr	r3, [pc, #200]	; (9169c <Cl_MilliTickcallBack+0x1a8>)
   915d4:	fb83 1302 	smull	r1, r3, r3, r2
   915d8:	1119      	asrs	r1, r3, #4
   915da:	17d3      	asrs	r3, r2, #31
   915dc:	1acb      	subs	r3, r1, r3
   915de:	2132      	movs	r1, #50	; 0x32
   915e0:	fb01 f303 	mul.w	r3, r1, r3
   915e4:	1ad3      	subs	r3, r2, r3
   915e6:	2b00      	cmp	r3, #0
   915e8:	d103      	bne.n	915f2 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   915ea:	4b2d      	ldr	r3, [pc, #180]	; (916a0 <Cl_MilliTickcallBack+0x1ac>)
   915ec:	4798      	blx	r3
   915ee:	4603      	mov	r3, r0
   915f0:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   915f2:	4b23      	ldr	r3, [pc, #140]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   915f4:	681b      	ldr	r3, [r3, #0]
   915f6:	2b64      	cmp	r3, #100	; 0x64
   915f8:	d10d      	bne.n	91616 <Cl_MilliTickcallBack+0x122>
		{
			Cl_msticks = 0;
   915fa:	4b21      	ldr	r3, [pc, #132]	; (91680 <Cl_MilliTickcallBack+0x18c>)
   915fc:	2200      	movs	r2, #0
   915fe:	601a      	str	r2, [r3, #0]
			Cl_ms100ticks++;
   91600:	4b28      	ldr	r3, [pc, #160]	; (916a4 <Cl_MilliTickcallBack+0x1b0>)
   91602:	681b      	ldr	r3, [r3, #0]
   91604:	3301      	adds	r3, #1
   91606:	4a27      	ldr	r2, [pc, #156]	; (916a4 <Cl_MilliTickcallBack+0x1b0>)
   91608:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   9160a:	4b27      	ldr	r3, [pc, #156]	; (916a8 <Cl_MilliTickcallBack+0x1b4>)
   9160c:	4798      	blx	r3
   9160e:	4603      	mov	r3, r0
   91610:	71fb      	strb	r3, [r7, #7]

				cl_hep_pump_enddetction_timer();
   91612:	4b26      	ldr	r3, [pc, #152]	; (916ac <Cl_MilliTickcallBack+0x1b8>)
   91614:	4798      	blx	r3


		}


		if(Cl_ms100ticks == 5 )
   91616:	4b23      	ldr	r3, [pc, #140]	; (916a4 <Cl_MilliTickcallBack+0x1b0>)
   91618:	681b      	ldr	r3, [r3, #0]
   9161a:	2b05      	cmp	r3, #5
   9161c:	d11d      	bne.n	9165a <Cl_MilliTickcallBack+0x166>
		{
			Cl_ms100ticks = 0;
   9161e:	4b21      	ldr	r3, [pc, #132]	; (916a4 <Cl_MilliTickcallBack+0x1b0>)
   91620:	2200      	movs	r2, #0
   91622:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   91624:	4b22      	ldr	r3, [pc, #136]	; (916b0 <Cl_MilliTickcallBack+0x1bc>)
   91626:	681b      	ldr	r3, [r3, #0]
   91628:	3301      	adds	r3, #1
   9162a:	4a21      	ldr	r2, [pc, #132]	; (916b0 <Cl_MilliTickcallBack+0x1bc>)
   9162c:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   9162e:	4b20      	ldr	r3, [pc, #128]	; (916b0 <Cl_MilliTickcallBack+0x1bc>)
   91630:	681b      	ldr	r3, [r3, #0]
   91632:	2b02      	cmp	r3, #2
   91634:	d10d      	bne.n	91652 <Cl_MilliTickcallBack+0x15e>
			{
				Cl_ms500ticks = 0;
   91636:	4b1e      	ldr	r3, [pc, #120]	; (916b0 <Cl_MilliTickcallBack+0x1bc>)
   91638:	2200      	movs	r2, #0
   9163a:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   9163c:	4b1d      	ldr	r3, [pc, #116]	; (916b4 <Cl_MilliTickcallBack+0x1c0>)
   9163e:	4798      	blx	r3
   91640:	4603      	mov	r3, r0
   91642:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   91644:	4b1c      	ldr	r3, [pc, #112]	; (916b8 <Cl_MilliTickcallBack+0x1c4>)
   91646:	681b      	ldr	r3, [r3, #0]
   91648:	3301      	adds	r3, #1
   9164a:	4a1b      	ldr	r2, [pc, #108]	; (916b8 <Cl_MilliTickcallBack+0x1c4>)
   9164c:	6013      	str	r3, [r2, #0]
				testsectclock();
   9164e:	4b1b      	ldr	r3, [pc, #108]	; (916bc <Cl_MilliTickcallBack+0x1c8>)
   91650:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   91652:	4b1b      	ldr	r3, [pc, #108]	; (916c0 <Cl_MilliTickcallBack+0x1cc>)
   91654:	4798      	blx	r3
   91656:	4603      	mov	r3, r0
   91658:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   9165a:	4b17      	ldr	r3, [pc, #92]	; (916b8 <Cl_MilliTickcallBack+0x1c4>)
   9165c:	681b      	ldr	r3, [r3, #0]
   9165e:	2b02      	cmp	r3, #2
   91660:	d102      	bne.n	91668 <Cl_MilliTickcallBack+0x174>
		{
			Cl_ms1000ticks =0;
   91662:	4b15      	ldr	r3, [pc, #84]	; (916b8 <Cl_MilliTickcallBack+0x1c4>)
   91664:	2200      	movs	r2, #0
   91666:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   91668:	2300      	movs	r3, #0
}
   9166a:	4618      	mov	r0, r3
   9166c:	3708      	adds	r7, #8
   9166e:	46bd      	mov	sp, r7
   91670:	bd80      	pop	{r7, pc}
   91672:	bf00      	nop
   91674:	20072700 	.word	0x20072700
   91678:	2007264c 	.word	0x2007264c
   9167c:	20072648 	.word	0x20072648
   91680:	20072660 	.word	0x20072660
   91684:	66666667 	.word	0x66666667
   91688:	000916f5 	.word	0x000916f5
   9168c:	00091389 	.word	0x00091389
   91690:	000916c5 	.word	0x000916c5
   91694:	000916d5 	.word	0x000916d5
   91698:	000916e5 	.word	0x000916e5
   9169c:	51eb851f 	.word	0x51eb851f
   916a0:	00091731 	.word	0x00091731
   916a4:	20072664 	.word	0x20072664
   916a8:	00091771 	.word	0x00091771
   916ac:	00092925 	.word	0x00092925
   916b0:	20072668 	.word	0x20072668
   916b4:	000917e9 	.word	0x000917e9
   916b8:	2007266c 	.word	0x2007266c
   916bc:	000913dd 	.word	0x000913dd
   916c0:	000917ad 	.word	0x000917ad

000916c4 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   916c4:	b480      	push	{r7}
   916c6:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   916c8:	2300      	movs	r3, #0
	 
 }
   916ca:	4618      	mov	r0, r3
   916cc:	46bd      	mov	sp, r7
   916ce:	bc80      	pop	{r7}
   916d0:	4770      	bx	lr
   916d2:	bf00      	nop

000916d4 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   916d4:	b480      	push	{r7}
   916d6:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   916d8:	2300      	movs	r3, #0
	 
 }
   916da:	4618      	mov	r0, r3
   916dc:	46bd      	mov	sp, r7
   916de:	bc80      	pop	{r7}
   916e0:	4770      	bx	lr
   916e2:	bf00      	nop

000916e4 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   916e4:	b480      	push	{r7}
   916e6:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   916e8:	2300      	movs	r3, #0
	 
 }
   916ea:	4618      	mov	r0, r3
   916ec:	46bd      	mov	sp, r7
   916ee:	bc80      	pop	{r7}
   916f0:	4770      	bx	lr
   916f2:	bf00      	nop

000916f4 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   916f4:	b480      	push	{r7}
   916f6:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   916f8:	4b0c      	ldr	r3, [pc, #48]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   916fa:	781b      	ldrb	r3, [r3, #0]
   916fc:	2b09      	cmp	r3, #9
   916fe:	d80f      	bhi.n	91720 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
	 	 
	 	 
	 	 {
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   91700:	4b0a      	ldr	r3, [pc, #40]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91702:	781b      	ldrb	r3, [r3, #0]
   91704:	461a      	mov	r2, r3
   91706:	4b09      	ldr	r3, [pc, #36]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91708:	4413      	add	r3, r2
   9170a:	2237      	movs	r2, #55	; 0x37
   9170c:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9170e:	4b07      	ldr	r3, [pc, #28]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91710:	2201      	movs	r2, #1
   91712:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91714:	4b05      	ldr	r3, [pc, #20]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   91716:	781b      	ldrb	r3, [r3, #0]
   91718:	3301      	adds	r3, #1
   9171a:	b2da      	uxtb	r2, r3
   9171c:	4b03      	ldr	r3, [pc, #12]	; (9172c <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   9171e:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   91720:	2300      	movs	r3, #0
	 	 
 }
   91722:	4618      	mov	r0, r3
   91724:	46bd      	mov	sp, r7
   91726:	bc80      	pop	{r7}
   91728:	4770      	bx	lr
   9172a:	bf00      	nop
   9172c:	20072d8c 	.word	0x20072d8c

00091730 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   91730:	b580      	push	{r7, lr}
   91732:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   91734:	4b0c      	ldr	r3, [pc, #48]	; (91768 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   91736:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91738:	4b0c      	ldr	r3, [pc, #48]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   9173a:	781b      	ldrb	r3, [r3, #0]
   9173c:	2b09      	cmp	r3, #9
   9173e:	d80f      	bhi.n	91760 <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   91740:	4b0a      	ldr	r3, [pc, #40]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91742:	781b      	ldrb	r3, [r3, #0]
   91744:	461a      	mov	r2, r3
   91746:	4b09      	ldr	r3, [pc, #36]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91748:	4413      	add	r3, r2
   9174a:	2238      	movs	r2, #56	; 0x38
   9174c:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9174e:	4b07      	ldr	r3, [pc, #28]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91750:	2201      	movs	r2, #1
   91752:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91754:	4b05      	ldr	r3, [pc, #20]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   91756:	781b      	ldrb	r3, [r3, #0]
   91758:	3301      	adds	r3, #1
   9175a:	b2da      	uxtb	r2, r3
   9175c:	4b03      	ldr	r3, [pc, #12]	; (9176c <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   9175e:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   91760:	2300      	movs	r3, #0
	 
	 
 }
   91762:	4618      	mov	r0, r3
   91764:	bd80      	pop	{r7, pc}
   91766:	bf00      	nop
   91768:	00083219 	.word	0x00083219
   9176c:	20072d8c 	.word	0x20072d8c

00091770 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   91770:	b480      	push	{r7}
   91772:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   91774:	4b0c      	ldr	r3, [pc, #48]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91776:	781b      	ldrb	r3, [r3, #0]
   91778:	2b09      	cmp	r3, #9
   9177a:	d80f      	bhi.n	9179c <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   9177c:	4b0a      	ldr	r3, [pc, #40]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   9177e:	781b      	ldrb	r3, [r3, #0]
   91780:	461a      	mov	r2, r3
   91782:	4b09      	ldr	r3, [pc, #36]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91784:	4413      	add	r3, r2
   91786:	2239      	movs	r2, #57	; 0x39
   91788:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9178a:	4b07      	ldr	r3, [pc, #28]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   9178c:	2201      	movs	r2, #1
   9178e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91790:	4b05      	ldr	r3, [pc, #20]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   91792:	781b      	ldrb	r3, [r3, #0]
   91794:	3301      	adds	r3, #1
   91796:	b2da      	uxtb	r2, r3
   91798:	4b03      	ldr	r3, [pc, #12]	; (917a8 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   9179a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   9179c:	2300      	movs	r3, #0
		 
		 
	 }
   9179e:	4618      	mov	r0, r3
   917a0:	46bd      	mov	sp, r7
   917a2:	bc80      	pop	{r7}
   917a4:	4770      	bx	lr
   917a6:	bf00      	nop
   917a8:	20072d8c 	.word	0x20072d8c

000917ac <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   917ac:	b480      	push	{r7}
   917ae:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   917b0:	4b0c      	ldr	r3, [pc, #48]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917b2:	781b      	ldrb	r3, [r3, #0]
   917b4:	2b09      	cmp	r3, #9
   917b6:	d80f      	bhi.n	917d8 <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   917b8:	4b0a      	ldr	r3, [pc, #40]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917ba:	781b      	ldrb	r3, [r3, #0]
   917bc:	461a      	mov	r2, r3
   917be:	4b09      	ldr	r3, [pc, #36]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917c0:	4413      	add	r3, r2
   917c2:	223a      	movs	r2, #58	; 0x3a
   917c4:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   917c6:	4b07      	ldr	r3, [pc, #28]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917c8:	2201      	movs	r2, #1
   917ca:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   917cc:	4b05      	ldr	r3, [pc, #20]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917ce:	781b      	ldrb	r3, [r3, #0]
   917d0:	3301      	adds	r3, #1
   917d2:	b2da      	uxtb	r2, r3
   917d4:	4b03      	ldr	r3, [pc, #12]	; (917e4 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   917d6:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   917d8:	2300      	movs	r3, #0
		 
		 
	 }
   917da:	4618      	mov	r0, r3
   917dc:	46bd      	mov	sp, r7
   917de:	bc80      	pop	{r7}
   917e0:	4770      	bx	lr
   917e2:	bf00      	nop
   917e4:	20072d8c 	.word	0x20072d8c

000917e8 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   917e8:	b580      	push	{r7, lr}
   917ea:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   917ec:	4b15      	ldr	r3, [pc, #84]	; (91844 <Cl_Timer_Create_TickSec_Event+0x5c>)
   917ee:	781b      	ldrb	r3, [r3, #0]
   917f0:	3301      	adds	r3, #1
   917f2:	b2da      	uxtb	r2, r3
   917f4:	4b13      	ldr	r3, [pc, #76]	; (91844 <Cl_Timer_Create_TickSec_Event+0x5c>)
   917f6:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   917f8:	4b13      	ldr	r3, [pc, #76]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   917fa:	781b      	ldrb	r3, [r3, #0]
   917fc:	2b09      	cmp	r3, #9
   917fe:	d80f      	bhi.n	91820 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   91800:	4b11      	ldr	r3, [pc, #68]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   91802:	781b      	ldrb	r3, [r3, #0]
   91804:	461a      	mov	r2, r3
   91806:	4b10      	ldr	r3, [pc, #64]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   91808:	4413      	add	r3, r2
   9180a:	223b      	movs	r2, #59	; 0x3b
   9180c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9180e:	4b0e      	ldr	r3, [pc, #56]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   91810:	2201      	movs	r2, #1
   91812:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91814:	4b0c      	ldr	r3, [pc, #48]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   91816:	781b      	ldrb	r3, [r3, #0]
   91818:	3301      	adds	r3, #1
   9181a:	b2da      	uxtb	r2, r3
   9181c:	4b0a      	ldr	r3, [pc, #40]	; (91848 <Cl_Timer_Create_TickSec_Event+0x60>)
   9181e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= SIXTY)
   91820:	4b08      	ldr	r3, [pc, #32]	; (91844 <Cl_Timer_Create_TickSec_Event+0x5c>)
   91822:	781b      	ldrb	r3, [r3, #0]
   91824:	2b3b      	cmp	r3, #59	; 0x3b
   91826:	d90a      	bls.n	9183e <Cl_Timer_Create_TickSec_Event+0x56>
		 {
			 Cl_Secondscnt = 0;
   91828:	4b06      	ldr	r3, [pc, #24]	; (91844 <Cl_Timer_Create_TickSec_Event+0x5c>)
   9182a:	2200      	movs	r2, #0
   9182c:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   9182e:	4b07      	ldr	r3, [pc, #28]	; (9184c <Cl_Timer_Create_TickSec_Event+0x64>)
   91830:	4798      	blx	r3
   91832:	4603      	mov	r3, r0
   91834:	461a      	mov	r2, r3
   91836:	4b06      	ldr	r3, [pc, #24]	; (91850 <Cl_Timer_Create_TickSec_Event+0x68>)
   91838:	701a      	strb	r2, [r3, #0]
			 tg_timer_minute();
   9183a:	4b06      	ldr	r3, [pc, #24]	; (91854 <Cl_Timer_Create_TickSec_Event+0x6c>)
   9183c:	4798      	blx	r3
		 }
			 return CL_OK;
   9183e:	2300      	movs	r3, #0
		 
		
		 }
   91840:	4618      	mov	r0, r3
   91842:	bd80      	pop	{r7, pc}
   91844:	20072670 	.word	0x20072670
   91848:	20072d8c 	.word	0x20072d8c
   9184c:	00091859 	.word	0x00091859
   91850:	20073190 	.word	0x20073190
   91854:	00091395 	.word	0x00091395

00091858 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   91858:	b480      	push	{r7}
   9185a:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   9185c:	4b0c      	ldr	r3, [pc, #48]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   9185e:	781b      	ldrb	r3, [r3, #0]
   91860:	2b09      	cmp	r3, #9
   91862:	d80f      	bhi.n	91884 <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   91864:	4b0a      	ldr	r3, [pc, #40]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   91866:	781b      	ldrb	r3, [r3, #0]
   91868:	461a      	mov	r2, r3
   9186a:	4b09      	ldr	r3, [pc, #36]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   9186c:	4413      	add	r3, r2
   9186e:	223c      	movs	r2, #60	; 0x3c
   91870:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   91872:	4b07      	ldr	r3, [pc, #28]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   91874:	2201      	movs	r2, #1
   91876:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   91878:	4b05      	ldr	r3, [pc, #20]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   9187a:	781b      	ldrb	r3, [r3, #0]
   9187c:	3301      	adds	r3, #1
   9187e:	b2da      	uxtb	r2, r3
   91880:	4b03      	ldr	r3, [pc, #12]	; (91890 <Cl_Timer_Create_TickMin_Event+0x38>)
   91882:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   91884:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   91886:	4618      	mov	r0, r3
   91888:	46bd      	mov	sp, r7
   9188a:	bc80      	pop	{r7}
   9188c:	4770      	bx	lr
   9188e:	bf00      	nop
   91890:	20072d8c 	.word	0x20072d8c

00091894 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   91894:	b480      	push	{r7}
   91896:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   91898:	4b0c      	ldr	r3, [pc, #48]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   9189a:	781b      	ldrb	r3, [r3, #0]
   9189c:	2b0a      	cmp	r3, #10
   9189e:	d80f      	bhi.n	918c0 <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   918a0:	4b0a      	ldr	r3, [pc, #40]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   918a2:	781b      	ldrb	r3, [r3, #0]
   918a4:	461a      	mov	r2, r3
   918a6:	4b09      	ldr	r3, [pc, #36]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   918a8:	4413      	add	r3, r2
   918aa:	223d      	movs	r2, #61	; 0x3d
   918ac:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   918ae:	4b07      	ldr	r3, [pc, #28]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   918b0:	2201      	movs	r2, #1
   918b2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   918b4:	4b05      	ldr	r3, [pc, #20]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   918b6:	781b      	ldrb	r3, [r3, #0]
   918b8:	3301      	adds	r3, #1
   918ba:	b2da      	uxtb	r2, r3
   918bc:	4b03      	ldr	r3, [pc, #12]	; (918cc <Cl_Timer_Create_TickHour_Event+0x38>)
   918be:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   918c0:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   918c2:	4618      	mov	r0, r3
   918c4:	46bd      	mov	sp, r7
   918c6:	bc80      	pop	{r7}
   918c8:	4770      	bx	lr
   918ca:	bf00      	nop
   918cc:	20072d8c 	.word	0x20072d8c

000918d0 <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   918d0:	b480      	push	{r7}
   918d2:	b085      	sub	sp, #20
   918d4:	af00      	add	r7, sp, #0
   918d6:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   918d8:	4b07      	ldr	r3, [pc, #28]	; (918f8 <mdelay+0x28>)
   918da:	681b      	ldr	r3, [r3, #0]
   918dc:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   918de:	bf00      	nop
   918e0:	4b05      	ldr	r3, [pc, #20]	; (918f8 <mdelay+0x28>)
   918e2:	681a      	ldr	r2, [r3, #0]
   918e4:	68fb      	ldr	r3, [r7, #12]
   918e6:	1ad2      	subs	r2, r2, r3
   918e8:	687b      	ldr	r3, [r7, #4]
   918ea:	429a      	cmp	r2, r3
   918ec:	d3f8      	bcc.n	918e0 <mdelay+0x10>
}
   918ee:	bf00      	nop
   918f0:	3714      	adds	r7, #20
   918f2:	46bd      	mov	sp, r7
   918f4:	bc80      	pop	{r7}
   918f6:	4770      	bx	lr
   918f8:	20072674 	.word	0x20072674

000918fc <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   918fc:	b580      	push	{r7, lr}
   918fe:	b082      	sub	sp, #8
   91900:	af00      	add	r7, sp, #0
   91902:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   91904:	6878      	ldr	r0, [r7, #4]
   91906:	4b03      	ldr	r3, [pc, #12]	; (91914 <cl_wait+0x18>)
   91908:	4798      	blx	r3
	return CL_OK;
   9190a:	2300      	movs	r3, #0
}
   9190c:	4618      	mov	r0, r3
   9190e:	3708      	adds	r7, #8
   91910:	46bd      	mov	sp, r7
   91912:	bd80      	pop	{r7, pc}
   91914:	000918d1 	.word	0x000918d1

00091918 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   91918:	b580      	push	{r7, lr}
   9191a:	b082      	sub	sp, #8
   9191c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   9191e:	4b07      	ldr	r3, [pc, #28]	; (9193c <cl_systemtickcallback+0x24>)
   91920:	4798      	blx	r3
   91922:	4603      	mov	r3, r0
   91924:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   91926:	4b06      	ldr	r3, [pc, #24]	; (91940 <cl_systemtickcallback+0x28>)
   91928:	681b      	ldr	r3, [r3, #0]
   9192a:	3301      	adds	r3, #1
   9192c:	4a04      	ldr	r2, [pc, #16]	; (91940 <cl_systemtickcallback+0x28>)
   9192e:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   91930:	2300      	movs	r3, #0
}
   91932:	4618      	mov	r0, r3
   91934:	3708      	adds	r7, #8
   91936:	46bd      	mov	sp, r7
   91938:	bd80      	pop	{r7, pc}
   9193a:	bf00      	nop
   9193c:	000914f5 	.word	0x000914f5
   91940:	20072674 	.word	0x20072674

00091944 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   91944:	b480      	push	{r7}
   91946:	b085      	sub	sp, #20
   91948:	af00      	add	r7, sp, #0
   9194a:	6078      	str	r0, [r7, #4]
   9194c:	460b      	mov	r3, r1
   9194e:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   91950:	2300      	movs	r3, #0
   91952:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   91954:	687b      	ldr	r3, [r7, #4]
   91956:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91958:	2300      	movs	r3, #0
   9195a:	73fb      	strb	r3, [r7, #15]
   9195c:	e007      	b.n	9196e <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   9195e:	7bfb      	ldrb	r3, [r7, #15]
   91960:	687a      	ldr	r2, [r7, #4]
   91962:	4413      	add	r3, r2
   91964:	2200      	movs	r2, #0
   91966:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   91968:	7bfb      	ldrb	r3, [r7, #15]
   9196a:	3301      	adds	r3, #1
   9196c:	73fb      	strb	r3, [r7, #15]
   9196e:	7bfa      	ldrb	r2, [r7, #15]
   91970:	78fb      	ldrb	r3, [r7, #3]
   91972:	429a      	cmp	r2, r3
   91974:	d3f3      	bcc.n	9195e <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   91976:	2300      	movs	r3, #0
}
   91978:	4618      	mov	r0, r3
   9197a:	3714      	adds	r7, #20
   9197c:	46bd      	mov	sp, r7
   9197e:	bc80      	pop	{r7}
   91980:	4770      	bx	lr
   91982:	bf00      	nop
   91984:	0000      	movs	r0, r0
	...

00091988 <cl_utilities_CalConductivity>:

float cl_utilities_CalConductivity(uint16_t raw_cond,float temperature)
{
   91988:	b5f0      	push	{r4, r5, r6, r7, lr}
   9198a:	b085      	sub	sp, #20
   9198c:	af00      	add	r7, sp, #0
   9198e:	4603      	mov	r3, r0
   91990:	6039      	str	r1, [r7, #0]
   91992:	80fb      	strh	r3, [r7, #6]
			float conductivity, conductance;
			conductance = raw_cond;// /1000; 
   91994:	88fa      	ldrh	r2, [r7, #6]
   91996:	4b2c      	ldr	r3, [pc, #176]	; (91a48 <cl_utilities_CalConductivity+0xc0>)
   91998:	4610      	mov	r0, r2
   9199a:	4798      	blx	r3
   9199c:	4603      	mov	r3, r0
   9199e:	60fb      	str	r3, [r7, #12]
//			conductivity = (raw_cond -66.67)/100;                                 // raw conductance contains conductance of fixed 150 ohm resistance
	//		cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
			conductivity = conductance * 0.9;                             // Conductance * cell constant = conductivity
   919a0:	4b2a      	ldr	r3, [pc, #168]	; (91a4c <cl_utilities_CalConductivity+0xc4>)
   919a2:	68f8      	ldr	r0, [r7, #12]
   919a4:	4798      	blx	r3
   919a6:	4c2a      	ldr	r4, [pc, #168]	; (91a50 <cl_utilities_CalConductivity+0xc8>)
   919a8:	a323      	add	r3, pc, #140	; (adr r3, 91a38 <cl_utilities_CalConductivity+0xb0>)
   919aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   919ae:	47a0      	blx	r4
   919b0:	4603      	mov	r3, r0
   919b2:	460c      	mov	r4, r1
   919b4:	4619      	mov	r1, r3
   919b6:	4622      	mov	r2, r4
   919b8:	4b26      	ldr	r3, [pc, #152]	; (91a54 <cl_utilities_CalConductivity+0xcc>)
   919ba:	4608      	mov	r0, r1
   919bc:	4611      	mov	r1, r2
   919be:	4798      	blx	r3
   919c0:	4603      	mov	r3, r0
   919c2:	60bb      	str	r3, [r7, #8]
	//		conductivity = (0.0001*conductivity*conductivity + 0.032*conductivity) * 100;                          // Gopal: Need to check for offset if required based on the observations in IBP 02082017
 			conductivity = (conductivity/(1+(temperature  -25.0)*0.021));                    // conductivity compensated at 25 degrees using win-situ formula
   919c4:	4b21      	ldr	r3, [pc, #132]	; (91a4c <cl_utilities_CalConductivity+0xc4>)
   919c6:	68b8      	ldr	r0, [r7, #8]
   919c8:	4798      	blx	r3
   919ca:	4605      	mov	r5, r0
   919cc:	460e      	mov	r6, r1
   919ce:	4b1f      	ldr	r3, [pc, #124]	; (91a4c <cl_utilities_CalConductivity+0xc4>)
   919d0:	6838      	ldr	r0, [r7, #0]
   919d2:	4798      	blx	r3
   919d4:	4c20      	ldr	r4, [pc, #128]	; (91a58 <cl_utilities_CalConductivity+0xd0>)
   919d6:	f04f 0200 	mov.w	r2, #0
   919da:	4b20      	ldr	r3, [pc, #128]	; (91a5c <cl_utilities_CalConductivity+0xd4>)
   919dc:	47a0      	blx	r4
   919de:	4603      	mov	r3, r0
   919e0:	460c      	mov	r4, r1
   919e2:	4618      	mov	r0, r3
   919e4:	4621      	mov	r1, r4
   919e6:	4c1a      	ldr	r4, [pc, #104]	; (91a50 <cl_utilities_CalConductivity+0xc8>)
   919e8:	a315      	add	r3, pc, #84	; (adr r3, 91a40 <cl_utilities_CalConductivity+0xb8>)
   919ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   919ee:	47a0      	blx	r4
   919f0:	4603      	mov	r3, r0
   919f2:	460c      	mov	r4, r1
   919f4:	4618      	mov	r0, r3
   919f6:	4621      	mov	r1, r4
   919f8:	4c19      	ldr	r4, [pc, #100]	; (91a60 <cl_utilities_CalConductivity+0xd8>)
   919fa:	f04f 0200 	mov.w	r2, #0
   919fe:	4b19      	ldr	r3, [pc, #100]	; (91a64 <cl_utilities_CalConductivity+0xdc>)
   91a00:	47a0      	blx	r4
   91a02:	4603      	mov	r3, r0
   91a04:	460c      	mov	r4, r1
   91a06:	461a      	mov	r2, r3
   91a08:	4623      	mov	r3, r4
   91a0a:	4c17      	ldr	r4, [pc, #92]	; (91a68 <cl_utilities_CalConductivity+0xe0>)
   91a0c:	4628      	mov	r0, r5
   91a0e:	4631      	mov	r1, r6
   91a10:	47a0      	blx	r4
   91a12:	4603      	mov	r3, r0
   91a14:	460c      	mov	r4, r1
   91a16:	4619      	mov	r1, r3
   91a18:	4622      	mov	r2, r4
   91a1a:	4b0e      	ldr	r3, [pc, #56]	; (91a54 <cl_utilities_CalConductivity+0xcc>)
   91a1c:	4608      	mov	r0, r1
   91a1e:	4611      	mov	r1, r2
   91a20:	4798      	blx	r3
   91a22:	4603      	mov	r3, r0
   91a24:	60bb      	str	r3, [r7, #8]
//			return conductivity;
			return conductivity/10;
   91a26:	4b11      	ldr	r3, [pc, #68]	; (91a6c <cl_utilities_CalConductivity+0xe4>)
   91a28:	4911      	ldr	r1, [pc, #68]	; (91a70 <cl_utilities_CalConductivity+0xe8>)
   91a2a:	68b8      	ldr	r0, [r7, #8]
   91a2c:	4798      	blx	r3
   91a2e:	4603      	mov	r3, r0
   91a30:	4618      	mov	r0, r3
   91a32:	3714      	adds	r7, #20
   91a34:	46bd      	mov	sp, r7
   91a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   91a38:	cccccccd 	.word	0xcccccccd
   91a3c:	3feccccc 	.word	0x3feccccc
   91a40:	24dd2f1b 	.word	0x24dd2f1b
   91a44:	3f958106 	.word	0x3f958106
   91a48:	000a33a1 	.word	0x000a33a1
   91a4c:	000a2b29 	.word	0x000a2b29
   91a50:	000a2bd1 	.word	0x000a2bd1
   91a54:	000a3195 	.word	0x000a3195
   91a58:	000a2869 	.word	0x000a2869
   91a5c:	40390000 	.word	0x40390000
   91a60:	000a286d 	.word	0x000a286d
   91a64:	3ff00000 	.word	0x3ff00000
   91a68:	000a2e25 	.word	0x000a2e25
   91a6c:	000a35b9 	.word	0x000a35b9
   91a70:	41200000 	.word	0x41200000

00091a74 <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   91a74:	b580      	push	{r7, lr}
   91a76:	b084      	sub	sp, #16
   91a78:	af00      	add	r7, sp, #0
   91a7a:	4603      	mov	r3, r0
   91a7c:	6039      	str	r1, [r7, #0]
   91a7e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   91a80:	2300      	movs	r3, #0
   91a82:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   91a84:	2300      	movs	r3, #0
   91a86:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   91a88:	2300      	movs	r3, #0
   91a8a:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   91a8c:	4b7e      	ldr	r3, [pc, #504]	; (91c88 <cl_bp_controller+0x214>)
   91a8e:	781b      	ldrb	r3, [r3, #0]
   91a90:	2b04      	cmp	r3, #4
   91a92:	f200 80f2 	bhi.w	91c7a <cl_bp_controller+0x206>
   91a96:	a201      	add	r2, pc, #4	; (adr r2, 91a9c <cl_bp_controller+0x28>)
   91a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91a9c:	00091ab1 	.word	0x00091ab1
   91aa0:	00091b0d 	.word	0x00091b0d
   91aa4:	00091bb7 	.word	0x00091bb7
   91aa8:	00091c09 	.word	0x00091c09
   91aac:	00091c7b 	.word	0x00091c7b
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   91ab0:	79fb      	ldrb	r3, [r7, #7]
   91ab2:	2b01      	cmp	r3, #1
   91ab4:	d002      	beq.n	91abc <cl_bp_controller+0x48>
   91ab6:	2b02      	cmp	r3, #2
   91ab8:	d00e      	beq.n	91ad8 <cl_bp_controller+0x64>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   91aba:	e026      	b.n	91b0a <cl_bp_controller+0x96>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91abc:	683b      	ldr	r3, [r7, #0]
   91abe:	4a73      	ldr	r2, [pc, #460]	; (91c8c <cl_bp_controller+0x218>)
   91ac0:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   91ac2:	4b72      	ldr	r3, [pc, #456]	; (91c8c <cl_bp_controller+0x218>)
   91ac4:	681b      	ldr	r3, [r3, #0]
   91ac6:	4a72      	ldr	r2, [pc, #456]	; (91c90 <cl_bp_controller+0x21c>)
   91ac8:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   91aca:	4b71      	ldr	r3, [pc, #452]	; (91c90 <cl_bp_controller+0x21c>)
   91acc:	681b      	ldr	r3, [r3, #0]
   91ace:	4619      	mov	r1, r3
   91ad0:	2003      	movs	r0, #3
   91ad2:	4b70      	ldr	r3, [pc, #448]	; (91c94 <cl_bp_controller+0x220>)
   91ad4:	4798      	blx	r3
			break;
   91ad6:	e018      	b.n	91b0a <cl_bp_controller+0x96>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91ad8:	2101      	movs	r1, #1
   91ada:	2001      	movs	r0, #1
   91adc:	4b6e      	ldr	r3, [pc, #440]	; (91c98 <cl_bp_controller+0x224>)
   91ade:	4798      	blx	r3
   91ae0:	4603      	mov	r3, r0
   91ae2:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91ae4:	2003      	movs	r0, #3
   91ae6:	4b6d      	ldr	r3, [pc, #436]	; (91c9c <cl_bp_controller+0x228>)
   91ae8:	4798      	blx	r3
   91aea:	4603      	mov	r3, r0
   91aec:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91aee:	4b6c      	ldr	r3, [pc, #432]	; (91ca0 <cl_bp_controller+0x22c>)
   91af0:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91af2:	463b      	mov	r3, r7
   91af4:	2200      	movs	r2, #0
   91af6:	4619      	mov	r1, r3
   91af8:	2035      	movs	r0, #53	; 0x35
   91afa:	4b6a      	ldr	r3, [pc, #424]	; (91ca4 <cl_bp_controller+0x230>)
   91afc:	4798      	blx	r3
   91afe:	4603      	mov	r3, r0
   91b00:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91b02:	4b61      	ldr	r3, [pc, #388]	; (91c88 <cl_bp_controller+0x214>)
   91b04:	2201      	movs	r2, #1
   91b06:	701a      	strb	r2, [r3, #0]
			break;
   91b08:	bf00      	nop
			
			default:break;
			
		}
		break;
   91b0a:	e0b7      	b.n	91c7c <cl_bp_controller+0x208>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   91b0c:	79fb      	ldrb	r3, [r7, #7]
   91b0e:	3b01      	subs	r3, #1
   91b10:	2b06      	cmp	r3, #6
   91b12:	d84e      	bhi.n	91bb2 <cl_bp_controller+0x13e>
   91b14:	a201      	add	r2, pc, #4	; (adr r2, 91b1c <cl_bp_controller+0xa8>)
   91b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91b1a:	bf00      	nop
   91b1c:	00091b6b 	.word	0x00091b6b
   91b20:	00091b39 	.word	0x00091b39
   91b24:	00091bb3 	.word	0x00091bb3
   91b28:	00091b7d 	.word	0x00091b7d
   91b2c:	00091bab 	.word	0x00091bab
   91b30:	00091bb3 	.word	0x00091bb3
   91b34:	00091bb3 	.word	0x00091bb3
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91b38:	2003      	movs	r0, #3
   91b3a:	4b58      	ldr	r3, [pc, #352]	; (91c9c <cl_bp_controller+0x228>)
   91b3c:	4798      	blx	r3
   91b3e:	4603      	mov	r3, r0
   91b40:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91b42:	2101      	movs	r1, #1
   91b44:	2001      	movs	r0, #1
   91b46:	4b54      	ldr	r3, [pc, #336]	; (91c98 <cl_bp_controller+0x224>)
   91b48:	4798      	blx	r3
   91b4a:	4603      	mov	r3, r0
   91b4c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91b4e:	4b54      	ldr	r3, [pc, #336]	; (91ca0 <cl_bp_controller+0x22c>)
   91b50:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91b52:	463b      	mov	r3, r7
   91b54:	2200      	movs	r2, #0
   91b56:	4619      	mov	r1, r3
   91b58:	2035      	movs	r0, #53	; 0x35
   91b5a:	4b52      	ldr	r3, [pc, #328]	; (91ca4 <cl_bp_controller+0x230>)
   91b5c:	4798      	blx	r3
   91b5e:	4603      	mov	r3, r0
   91b60:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91b62:	4b49      	ldr	r3, [pc, #292]	; (91c88 <cl_bp_controller+0x214>)
   91b64:	2201      	movs	r2, #1
   91b66:	701a      	strb	r2, [r3, #0]
			
			break;
   91b68:	e024      	b.n	91bb4 <cl_bp_controller+0x140>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   91b6a:	683b      	ldr	r3, [r7, #0]
   91b6c:	4619      	mov	r1, r3
   91b6e:	2003      	movs	r0, #3
   91b70:	4b48      	ldr	r3, [pc, #288]	; (91c94 <cl_bp_controller+0x220>)
   91b72:	4798      	blx	r3
			bp_state =  CL_BP_STATE_STARTED;
   91b74:	4b44      	ldr	r3, [pc, #272]	; (91c88 <cl_bp_controller+0x214>)
   91b76:	2201      	movs	r2, #1
   91b78:	701a      	strb	r2, [r3, #0]
			break;
   91b7a:	e01b      	b.n	91bb4 <cl_bp_controller+0x140>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   91b7c:	2003      	movs	r0, #3
   91b7e:	4b4a      	ldr	r3, [pc, #296]	; (91ca8 <cl_bp_controller+0x234>)
   91b80:	4798      	blx	r3
   91b82:	4603      	mov	r3, r0
   91b84:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91b86:	4b46      	ldr	r3, [pc, #280]	; (91ca0 <cl_bp_controller+0x22c>)
   91b88:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   91b8a:	463b      	mov	r3, r7
   91b8c:	2200      	movs	r2, #0
   91b8e:	4619      	mov	r1, r3
   91b90:	2036      	movs	r0, #54	; 0x36
   91b92:	4b44      	ldr	r3, [pc, #272]	; (91ca4 <cl_bp_controller+0x230>)
   91b94:	4798      	blx	r3
   91b96:	4603      	mov	r3, r0
   91b98:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   91b9a:	4b44      	ldr	r3, [pc, #272]	; (91cac <cl_bp_controller+0x238>)
   91b9c:	4798      	blx	r3
   91b9e:	4603      	mov	r3, r0
   91ba0:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   91ba2:	4b39      	ldr	r3, [pc, #228]	; (91c88 <cl_bp_controller+0x214>)
   91ba4:	2202      	movs	r2, #2
   91ba6:	701a      	strb	r2, [r3, #0]
			break;
   91ba8:	e004      	b.n	91bb4 <cl_bp_controller+0x140>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   91baa:	4b37      	ldr	r3, [pc, #220]	; (91c88 <cl_bp_controller+0x214>)
   91bac:	2200      	movs	r2, #0
   91bae:	701a      	strb	r2, [r3, #0]
			break;
   91bb0:	e000      	b.n	91bb4 <cl_bp_controller+0x140>
			default:break;
   91bb2:	bf00      	nop
			
		}
		break;
   91bb4:	e062      	b.n	91c7c <cl_bp_controller+0x208>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   91bb6:	79fb      	ldrb	r3, [r7, #7]
   91bb8:	2b01      	cmp	r3, #1
   91bba:	d002      	beq.n	91bc2 <cl_bp_controller+0x14e>
   91bbc:	2b02      	cmp	r3, #2
   91bbe:	d009      	beq.n	91bd4 <cl_bp_controller+0x160>
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   91bc0:	e021      	b.n	91c06 <cl_bp_controller+0x192>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91bc2:	683b      	ldr	r3, [r7, #0]
   91bc4:	4a31      	ldr	r2, [pc, #196]	; (91c8c <cl_bp_controller+0x218>)
   91bc6:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   91bc8:	683b      	ldr	r3, [r7, #0]
   91bca:	4619      	mov	r1, r3
   91bcc:	2003      	movs	r0, #3
   91bce:	4b31      	ldr	r3, [pc, #196]	; (91c94 <cl_bp_controller+0x220>)
   91bd0:	4798      	blx	r3
			break;
   91bd2:	e018      	b.n	91c06 <cl_bp_controller+0x192>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91bd4:	2003      	movs	r0, #3
   91bd6:	4b31      	ldr	r3, [pc, #196]	; (91c9c <cl_bp_controller+0x228>)
   91bd8:	4798      	blx	r3
   91bda:	4603      	mov	r3, r0
   91bdc:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91bde:	2101      	movs	r1, #1
   91be0:	2001      	movs	r0, #1
   91be2:	4b2d      	ldr	r3, [pc, #180]	; (91c98 <cl_bp_controller+0x224>)
   91be4:	4798      	blx	r3
   91be6:	4603      	mov	r3, r0
   91be8:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91bea:	4b2d      	ldr	r3, [pc, #180]	; (91ca0 <cl_bp_controller+0x22c>)
   91bec:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91bee:	463b      	mov	r3, r7
   91bf0:	2200      	movs	r2, #0
   91bf2:	4619      	mov	r1, r3
   91bf4:	2035      	movs	r0, #53	; 0x35
   91bf6:	4b2b      	ldr	r3, [pc, #172]	; (91ca4 <cl_bp_controller+0x230>)
   91bf8:	4798      	blx	r3
   91bfa:	4603      	mov	r3, r0
   91bfc:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91bfe:	4b22      	ldr	r3, [pc, #136]	; (91c88 <cl_bp_controller+0x214>)
   91c00:	2201      	movs	r2, #1
   91c02:	701a      	strb	r2, [r3, #0]
			break;
   91c04:	bf00      	nop
			default:break;
			
		}
		break;
   91c06:	e039      	b.n	91c7c <cl_bp_controller+0x208>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   91c08:	79fb      	ldrb	r3, [r7, #7]
   91c0a:	2b02      	cmp	r3, #2
   91c0c:	d008      	beq.n	91c20 <cl_bp_controller+0x1ac>
   91c0e:	2b04      	cmp	r3, #4
   91c10:	d01f      	beq.n	91c52 <cl_bp_controller+0x1de>
   91c12:	2b01      	cmp	r3, #1
   91c14:	d000      	beq.n	91c18 <cl_bp_controller+0x1a4>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   91c16:	e02f      	b.n	91c78 <cl_bp_controller+0x204>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   91c18:	683b      	ldr	r3, [r7, #0]
   91c1a:	4a1c      	ldr	r2, [pc, #112]	; (91c8c <cl_bp_controller+0x218>)
   91c1c:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   91c1e:	e02b      	b.n	91c78 <cl_bp_controller+0x204>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   91c20:	2003      	movs	r0, #3
   91c22:	4b1e      	ldr	r3, [pc, #120]	; (91c9c <cl_bp_controller+0x228>)
   91c24:	4798      	blx	r3
   91c26:	4603      	mov	r3, r0
   91c28:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   91c2a:	2101      	movs	r1, #1
   91c2c:	2001      	movs	r0, #1
   91c2e:	4b1a      	ldr	r3, [pc, #104]	; (91c98 <cl_bp_controller+0x224>)
   91c30:	4798      	blx	r3
   91c32:	4603      	mov	r3, r0
   91c34:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91c36:	4b1a      	ldr	r3, [pc, #104]	; (91ca0 <cl_bp_controller+0x22c>)
   91c38:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   91c3a:	463b      	mov	r3, r7
   91c3c:	2200      	movs	r2, #0
   91c3e:	4619      	mov	r1, r3
   91c40:	2035      	movs	r0, #53	; 0x35
   91c42:	4b18      	ldr	r3, [pc, #96]	; (91ca4 <cl_bp_controller+0x230>)
   91c44:	4798      	blx	r3
   91c46:	4603      	mov	r3, r0
   91c48:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   91c4a:	4b0f      	ldr	r3, [pc, #60]	; (91c88 <cl_bp_controller+0x214>)
   91c4c:	2201      	movs	r2, #1
   91c4e:	701a      	strb	r2, [r3, #0]
			break;
   91c50:	e012      	b.n	91c78 <cl_bp_controller+0x204>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   91c52:	2003      	movs	r0, #3
   91c54:	4b14      	ldr	r3, [pc, #80]	; (91ca8 <cl_bp_controller+0x234>)
   91c56:	4798      	blx	r3
   91c58:	4603      	mov	r3, r0
   91c5a:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   91c5c:	4b10      	ldr	r3, [pc, #64]	; (91ca0 <cl_bp_controller+0x22c>)
   91c5e:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   91c60:	4b09      	ldr	r3, [pc, #36]	; (91c88 <cl_bp_controller+0x214>)
   91c62:	2202      	movs	r2, #2
   91c64:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   91c66:	463b      	mov	r3, r7
   91c68:	2200      	movs	r2, #0
   91c6a:	4619      	mov	r1, r3
   91c6c:	2036      	movs	r0, #54	; 0x36
   91c6e:	4b0d      	ldr	r3, [pc, #52]	; (91ca4 <cl_bp_controller+0x230>)
   91c70:	4798      	blx	r3
   91c72:	4603      	mov	r3, r0
   91c74:	73fb      	strb	r3, [r7, #15]
			break;
   91c76:	bf00      	nop
			default:break;
			
		}
		break;
   91c78:	e000      	b.n	91c7c <cl_bp_controller+0x208>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   91c7a:	bf00      	nop
		
		
	}
	return CL_OK;
   91c7c:	2300      	movs	r3, #0
   91c7e:	4618      	mov	r0, r3
   91c80:	3710      	adds	r7, #16
   91c82:	46bd      	mov	sp, r7
   91c84:	bd80      	pop	{r7, pc}
   91c86:	bf00      	nop
   91c88:	20072678 	.word	0x20072678
   91c8c:	2007267c 	.word	0x2007267c
   91c90:	200709f0 	.word	0x200709f0
   91c94:	00097569 	.word	0x00097569
   91c98:	00082f5d 	.word	0x00082f5d
   91c9c:	00097451 	.word	0x00097451
   91ca0:	00091cb1 	.word	0x00091cb1
   91ca4:	0009926d 	.word	0x0009926d
   91ca8:	0009748d 	.word	0x0009748d
   91cac:	00091cc9 	.word	0x00091cc9

00091cb0 <cl_bp_pumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,bp_period = 0,bp_avg_period = 0, bp_freq_in_min = 0;
static Cl_Uint16Type bp_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   91cb0:	b480      	push	{r7}
   91cb2:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   91cb4:	4b03      	ldr	r3, [pc, #12]	; (91cc4 <cl_bp_pumpFeedback_start+0x14>)
   91cb6:	2201      	movs	r2, #1
   91cb8:	701a      	strb	r2, [r3, #0]
	return 0;
   91cba:	2300      	movs	r3, #0
}
   91cbc:	4618      	mov	r0, r3
   91cbe:	46bd      	mov	sp, r7
   91cc0:	bc80      	pop	{r7}
   91cc2:	4770      	bx	lr
   91cc4:	20072682 	.word	0x20072682

00091cc8 <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   91cc8:	b480      	push	{r7}
   91cca:	af00      	add	r7, sp, #0
	
	return 0;
   91ccc:	2300      	movs	r3, #0
}
   91cce:	4618      	mov	r0, r3
   91cd0:	46bd      	mov	sp, r7
   91cd2:	bc80      	pop	{r7}
   91cd4:	4770      	bx	lr
   91cd6:	bf00      	nop

00091cd8 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   91cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   91cda:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   91cdc:	4b64      	ldr	r3, [pc, #400]	; (91e70 <cl_bp_pumpFeedback_timer+0x198>)
   91cde:	781b      	ldrb	r3, [r3, #0]
   91ce0:	2b00      	cmp	r3, #0
   91ce2:	f000 80b9 	beq.w	91e58 <cl_bp_pumpFeedback_timer+0x180>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   91ce6:	4963      	ldr	r1, [pc, #396]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91ce8:	201c      	movs	r0, #28
   91cea:	4b63      	ldr	r3, [pc, #396]	; (91e78 <cl_bp_pumpFeedback_timer+0x1a0>)
   91cec:	4798      	blx	r3

	fivemscounter++;
   91cee:	4b63      	ldr	r3, [pc, #396]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91cf0:	881b      	ldrh	r3, [r3, #0]
   91cf2:	3301      	adds	r3, #1
   91cf4:	b29a      	uxth	r2, r3
   91cf6:	4b61      	ldr	r3, [pc, #388]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91cf8:	801a      	strh	r2, [r3, #0]
			if(fivemscounter > 1000)
   91cfa:	4b60      	ldr	r3, [pc, #384]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91cfc:	881b      	ldrh	r3, [r3, #0]
   91cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   91d02:	d903      	bls.n	91d0c <cl_bp_pumpFeedback_timer+0x34>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   91d04:	2101      	movs	r1, #1
   91d06:	2037      	movs	r0, #55	; 0x37
   91d08:	4b5d      	ldr	r3, [pc, #372]	; (91e80 <cl_bp_pumpFeedback_timer+0x1a8>)
   91d0a:	4798      	blx	r3
			}
			if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   91d0c:	4b58      	ldr	r3, [pc, #352]	; (91e70 <cl_bp_pumpFeedback_timer+0x198>)
   91d0e:	781b      	ldrb	r3, [r3, #0]
   91d10:	2b01      	cmp	r3, #1
   91d12:	d106      	bne.n	91d22 <cl_bp_pumpFeedback_timer+0x4a>
   91d14:	4b5b      	ldr	r3, [pc, #364]	; (91e84 <cl_bp_pumpFeedback_timer+0x1ac>)
   91d16:	881b      	ldrh	r3, [r3, #0]
   91d18:	2b02      	cmp	r3, #2
   91d1a:	d902      	bls.n	91d22 <cl_bp_pumpFeedback_timer+0x4a>
			{
				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   91d1c:	4b54      	ldr	r3, [pc, #336]	; (91e70 <cl_bp_pumpFeedback_timer+0x198>)
   91d1e:	2202      	movs	r2, #2
   91d20:	701a      	strb	r2, [r3, #0]
			}
	
			//#if 0
			if(count_state == false)
   91d22:	4b59      	ldr	r3, [pc, #356]	; (91e88 <cl_bp_pumpFeedback_timer+0x1b0>)
   91d24:	781b      	ldrb	r3, [r3, #0]
   91d26:	f083 0301 	eor.w	r3, r3, #1
   91d2a:	b2db      	uxtb	r3, r3
   91d2c:	2b00      	cmp	r3, #0
   91d2e:	d012      	beq.n	91d56 <cl_bp_pumpFeedback_timer+0x7e>
			{
				if(bp_rotataion_marker == 0 )
   91d30:	4b50      	ldr	r3, [pc, #320]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91d32:	881b      	ldrh	r3, [r3, #0]
   91d34:	2b00      	cmp	r3, #0
   91d36:	f040 808b 	bne.w	91e50 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   91d3a:	4b54      	ldr	r3, [pc, #336]	; (91e8c <cl_bp_pumpFeedback_timer+0x1b4>)
   91d3c:	881a      	ldrh	r2, [r3, #0]
   91d3e:	4b4d      	ldr	r3, [pc, #308]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91d40:	881b      	ldrh	r3, [r3, #0]
   91d42:	429a      	cmp	r2, r3
   91d44:	f000 8084 	beq.w	91e50 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   91d48:	4b4f      	ldr	r3, [pc, #316]	; (91e88 <cl_bp_pumpFeedback_timer+0x1b0>)
   91d4a:	2201      	movs	r2, #1
   91d4c:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						fivemscounter = 0;
   91d4e:	4b4b      	ldr	r3, [pc, #300]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91d50:	2200      	movs	r2, #0
   91d52:	801a      	strh	r2, [r3, #0]
   91d54:	e07c      	b.n	91e50 <cl_bp_pumpFeedback_timer+0x178>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   91d56:	4b47      	ldr	r3, [pc, #284]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91d58:	881b      	ldrh	r3, [r3, #0]
   91d5a:	2b00      	cmp	r3, #0
   91d5c:	d178      	bne.n	91e50 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   91d5e:	4b4b      	ldr	r3, [pc, #300]	; (91e8c <cl_bp_pumpFeedback_timer+0x1b4>)
   91d60:	881a      	ldrh	r2, [r3, #0]
   91d62:	4b44      	ldr	r3, [pc, #272]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91d64:	881b      	ldrh	r3, [r3, #0]
   91d66:	429a      	cmp	r2, r3
   91d68:	d072      	beq.n	91e50 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   91d6a:	4b47      	ldr	r3, [pc, #284]	; (91e88 <cl_bp_pumpFeedback_timer+0x1b0>)
   91d6c:	2201      	movs	r2, #1
   91d6e:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   91d70:	4b44      	ldr	r3, [pc, #272]	; (91e84 <cl_bp_pumpFeedback_timer+0x1ac>)
   91d72:	881b      	ldrh	r3, [r3, #0]
   91d74:	3301      	adds	r3, #1
   91d76:	b29a      	uxth	r2, r3
   91d78:	4b42      	ldr	r3, [pc, #264]	; (91e84 <cl_bp_pumpFeedback_timer+0x1ac>)
   91d7a:	801a      	strh	r2, [r3, #0]
						bp_period = fivemscounter*100;
   91d7c:	4b3f      	ldr	r3, [pc, #252]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91d7e:	881b      	ldrh	r3, [r3, #0]
   91d80:	461a      	mov	r2, r3
   91d82:	0092      	lsls	r2, r2, #2
   91d84:	4413      	add	r3, r2
   91d86:	461a      	mov	r2, r3
   91d88:	0091      	lsls	r1, r2, #2
   91d8a:	461a      	mov	r2, r3
   91d8c:	460b      	mov	r3, r1
   91d8e:	4413      	add	r3, r2
   91d90:	009b      	lsls	r3, r3, #2
   91d92:	b29a      	uxth	r2, r3
   91d94:	4b3e      	ldr	r3, [pc, #248]	; (91e90 <cl_bp_pumpFeedback_timer+0x1b8>)
   91d96:	801a      	strh	r2, [r3, #0]
				
						if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   91d98:	4b35      	ldr	r3, [pc, #212]	; (91e70 <cl_bp_pumpFeedback_timer+0x198>)
   91d9a:	781b      	ldrb	r3, [r3, #0]
   91d9c:	2b01      	cmp	r3, #1
   91d9e:	d04a      	beq.n	91e36 <cl_bp_pumpFeedback_timer+0x15e>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   91da0:	4b3b      	ldr	r3, [pc, #236]	; (91e90 <cl_bp_pumpFeedback_timer+0x1b8>)
   91da2:	881b      	ldrh	r3, [r3, #0]
   91da4:	461a      	mov	r2, r3
   91da6:	4b3b      	ldr	r3, [pc, #236]	; (91e94 <cl_bp_pumpFeedback_timer+0x1bc>)
   91da8:	4610      	mov	r0, r2
   91daa:	4798      	blx	r3
   91dac:	4605      	mov	r5, r0
   91dae:	460e      	mov	r6, r1
   91db0:	4b39      	ldr	r3, [pc, #228]	; (91e98 <cl_bp_pumpFeedback_timer+0x1c0>)
   91db2:	881b      	ldrh	r3, [r3, #0]
   91db4:	461a      	mov	r2, r3
   91db6:	4b37      	ldr	r3, [pc, #220]	; (91e94 <cl_bp_pumpFeedback_timer+0x1bc>)
   91db8:	4610      	mov	r0, r2
   91dba:	4798      	blx	r3
   91dbc:	4c37      	ldr	r4, [pc, #220]	; (91e9c <cl_bp_pumpFeedback_timer+0x1c4>)
   91dbe:	a328      	add	r3, pc, #160	; (adr r3, 91e60 <cl_bp_pumpFeedback_timer+0x188>)
   91dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   91dc4:	47a0      	blx	r4
   91dc6:	4603      	mov	r3, r0
   91dc8:	460c      	mov	r4, r1
   91dca:	461a      	mov	r2, r3
   91dcc:	4623      	mov	r3, r4
   91dce:	4c34      	ldr	r4, [pc, #208]	; (91ea0 <cl_bp_pumpFeedback_timer+0x1c8>)
   91dd0:	4628      	mov	r0, r5
   91dd2:	4631      	mov	r1, r6
   91dd4:	47a0      	blx	r4
   91dd6:	4603      	mov	r3, r0
   91dd8:	2b00      	cmp	r3, #0
   91dda:	d105      	bne.n	91de8 <cl_bp_pumpFeedback_timer+0x110>
   91ddc:	4b2c      	ldr	r3, [pc, #176]	; (91e90 <cl_bp_pumpFeedback_timer+0x1b8>)
   91dde:	881b      	ldrh	r3, [r3, #0]
   91de0:	f640 32b8 	movw	r2, #3000	; 0xbb8
   91de4:	4293      	cmp	r3, r2
   91de6:	d904      	bls.n	91df2 <cl_bp_pumpFeedback_timer+0x11a>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
							Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   91de8:	2101      	movs	r1, #1
   91dea:	2037      	movs	r0, #55	; 0x37
   91dec:	4b24      	ldr	r3, [pc, #144]	; (91e80 <cl_bp_pumpFeedback_timer+0x1a8>)
   91dee:	4798      	blx	r3
   91df0:	e021      	b.n	91e36 <cl_bp_pumpFeedback_timer+0x15e>
							}
							else if(bp_period < (0.99 *bp_expected_period))
   91df2:	4b27      	ldr	r3, [pc, #156]	; (91e90 <cl_bp_pumpFeedback_timer+0x1b8>)
   91df4:	881b      	ldrh	r3, [r3, #0]
   91df6:	461a      	mov	r2, r3
   91df8:	4b26      	ldr	r3, [pc, #152]	; (91e94 <cl_bp_pumpFeedback_timer+0x1bc>)
   91dfa:	4610      	mov	r0, r2
   91dfc:	4798      	blx	r3
   91dfe:	4605      	mov	r5, r0
   91e00:	460e      	mov	r6, r1
   91e02:	4b25      	ldr	r3, [pc, #148]	; (91e98 <cl_bp_pumpFeedback_timer+0x1c0>)
   91e04:	881b      	ldrh	r3, [r3, #0]
   91e06:	461a      	mov	r2, r3
   91e08:	4b22      	ldr	r3, [pc, #136]	; (91e94 <cl_bp_pumpFeedback_timer+0x1bc>)
   91e0a:	4610      	mov	r0, r2
   91e0c:	4798      	blx	r3
   91e0e:	4c23      	ldr	r4, [pc, #140]	; (91e9c <cl_bp_pumpFeedback_timer+0x1c4>)
   91e10:	a315      	add	r3, pc, #84	; (adr r3, 91e68 <cl_bp_pumpFeedback_timer+0x190>)
   91e12:	e9d3 2300 	ldrd	r2, r3, [r3]
   91e16:	47a0      	blx	r4
   91e18:	4603      	mov	r3, r0
   91e1a:	460c      	mov	r4, r1
   91e1c:	461a      	mov	r2, r3
   91e1e:	4623      	mov	r3, r4
   91e20:	4c20      	ldr	r4, [pc, #128]	; (91ea4 <cl_bp_pumpFeedback_timer+0x1cc>)
   91e22:	4628      	mov	r0, r5
   91e24:	4631      	mov	r1, r6
   91e26:	47a0      	blx	r4
   91e28:	4603      	mov	r3, r0
   91e2a:	2b00      	cmp	r3, #0
   91e2c:	d003      	beq.n	91e36 <cl_bp_pumpFeedback_timer+0x15e>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_FAST;
							Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   91e2e:	2101      	movs	r1, #1
   91e30:	2036      	movs	r0, #54	; 0x36
   91e32:	4b13      	ldr	r3, [pc, #76]	; (91e80 <cl_bp_pumpFeedback_timer+0x1a8>)
   91e34:	4798      	blx	r3
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   91e36:	4b16      	ldr	r3, [pc, #88]	; (91e90 <cl_bp_pumpFeedback_timer+0x1b8>)
   91e38:	881b      	ldrh	r3, [r3, #0]
   91e3a:	461a      	mov	r2, r3
   91e3c:	f64e 2360 	movw	r3, #60000	; 0xea60
   91e40:	fb93 f3f2 	sdiv	r3, r3, r2
   91e44:	b29a      	uxth	r2, r3
   91e46:	4b18      	ldr	r3, [pc, #96]	; (91ea8 <cl_bp_pumpFeedback_timer+0x1d0>)
   91e48:	801a      	strh	r2, [r3, #0]
						fivemscounter = 0;
   91e4a:	4b0c      	ldr	r3, [pc, #48]	; (91e7c <cl_bp_pumpFeedback_timer+0x1a4>)
   91e4c:	2200      	movs	r2, #0
   91e4e:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   91e50:	4b08      	ldr	r3, [pc, #32]	; (91e74 <cl_bp_pumpFeedback_timer+0x19c>)
   91e52:	881a      	ldrh	r2, [r3, #0]
   91e54:	4b0d      	ldr	r3, [pc, #52]	; (91e8c <cl_bp_pumpFeedback_timer+0x1b4>)
   91e56:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   91e58:	2300      	movs	r3, #0
}
   91e5a:	4618      	mov	r0, r3
   91e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   91e5e:	bf00      	nop
   91e60:	c28f5c29 	.word	0xc28f5c29
   91e64:	3ff028f5 	.word	0x3ff028f5
   91e68:	7ae147ae 	.word	0x7ae147ae
   91e6c:	3fefae14 	.word	0x3fefae14
   91e70:	20072682 	.word	0x20072682
   91e74:	200709f4 	.word	0x200709f4
   91e78:	0008d61d 	.word	0x0008d61d
   91e7c:	20072684 	.word	0x20072684
   91e80:	00083105 	.word	0x00083105
   91e84:	2007268a 	.word	0x2007268a
   91e88:	2007268c 	.word	0x2007268c
   91e8c:	200709f6 	.word	0x200709f6
   91e90:	20072686 	.word	0x20072686
   91e94:	000a2b05 	.word	0x000a2b05
   91e98:	20072680 	.word	0x20072680
   91e9c:	000a2bd1 	.word	0x000a2bd1
   91ea0:	000a30f1 	.word	0x000a30f1
   91ea4:	000a30b5 	.word	0x000a30b5
   91ea8:	20072688 	.word	0x20072688

00091eac <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   91eac:	b580      	push	{r7, lr}
   91eae:	b084      	sub	sp, #16
   91eb0:	af00      	add	r7, sp, #0
   91eb2:	4603      	mov	r3, r0
   91eb4:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   91eb6:	2300      	movs	r3, #0
   91eb8:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   91eba:	4b28      	ldr	r3, [pc, #160]	; (91f5c <cl_deaeration_controller+0xb0>)
   91ebc:	781b      	ldrb	r3, [r3, #0]
   91ebe:	2b01      	cmp	r3, #1
   91ec0:	d00d      	beq.n	91ede <cl_deaeration_controller+0x32>
   91ec2:	2b02      	cmp	r3, #2
   91ec4:	d02a      	beq.n	91f1c <cl_deaeration_controller+0x70>
   91ec6:	2b00      	cmp	r3, #0
   91ec8:	d000      	beq.n	91ecc <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   91eca:	e042      	b.n	91f52 <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   91ecc:	79fb      	ldrb	r3, [r7, #7]
   91ece:	2b00      	cmp	r3, #0
   91ed0:	d000      	beq.n	91ed4 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   91ed2:	e003      	b.n	91edc <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   91ed4:	4b21      	ldr	r3, [pc, #132]	; (91f5c <cl_deaeration_controller+0xb0>)
   91ed6:	2201      	movs	r2, #1
   91ed8:	701a      	strb	r2, [r3, #0]
					break;
   91eda:	bf00      	nop
					default:break;
				}
		break;
   91edc:	e039      	b.n	91f52 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   91ede:	79fb      	ldrb	r3, [r7, #7]
   91ee0:	2b01      	cmp	r3, #1
   91ee2:	d002      	beq.n	91eea <cl_deaeration_controller+0x3e>
   91ee4:	2b02      	cmp	r3, #2
   91ee6:	d004      	beq.n	91ef2 <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   91ee8:	e017      	b.n	91f1a <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   91eea:	4b1c      	ldr	r3, [pc, #112]	; (91f5c <cl_deaeration_controller+0xb0>)
   91eec:	2200      	movs	r2, #0
   91eee:	701a      	strb	r2, [r3, #0]
				break;
   91ef0:	e013      	b.n	91f1a <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   91ef2:	f107 030c 	add.w	r3, r7, #12
   91ef6:	4619      	mov	r1, r3
   91ef8:	200a      	movs	r0, #10
   91efa:	4b19      	ldr	r3, [pc, #100]	; (91f60 <cl_deaeration_controller+0xb4>)
   91efc:	4798      	blx	r3
				if (dac2_status < 10)
   91efe:	89bb      	ldrh	r3, [r7, #12]
   91f00:	2b09      	cmp	r3, #9
   91f02:	d806      	bhi.n	91f12 <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   91f04:	2013      	movs	r0, #19
   91f06:	4b17      	ldr	r3, [pc, #92]	; (91f64 <cl_deaeration_controller+0xb8>)
   91f08:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   91f0a:	4b14      	ldr	r3, [pc, #80]	; (91f5c <cl_deaeration_controller+0xb0>)
   91f0c:	2202      	movs	r2, #2
   91f0e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   91f10:	e002      	b.n	91f18 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   91f12:	2013      	movs	r0, #19
   91f14:	4b14      	ldr	r3, [pc, #80]	; (91f68 <cl_deaeration_controller+0xbc>)
   91f16:	4798      	blx	r3
				}
				break;
   91f18:	bf00      	nop
				default:
				break;
			}
		break;
   91f1a:	e01a      	b.n	91f52 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   91f1c:	79fb      	ldrb	r3, [r7, #7]
   91f1e:	2b01      	cmp	r3, #1
   91f20:	d002      	beq.n	91f28 <cl_deaeration_controller+0x7c>
   91f22:	2b03      	cmp	r3, #3
   91f24:	d005      	beq.n	91f32 <cl_deaeration_controller+0x86>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   91f26:	e013      	b.n	91f50 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   91f28:	4b0c      	ldr	r3, [pc, #48]	; (91f5c <cl_deaeration_controller+0xb0>)
   91f2a:	2200      	movs	r2, #0
   91f2c:	701a      	strb	r2, [r3, #0]
						break;
   91f2e:	bf00      	nop
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   91f30:	e00e      	b.n	91f50 <cl_deaeration_controller+0xa4>
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
						break;
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   91f32:	f107 030c 	add.w	r3, r7, #12
   91f36:	4619      	mov	r1, r3
   91f38:	200a      	movs	r0, #10
   91f3a:	4b09      	ldr	r3, [pc, #36]	; (91f60 <cl_deaeration_controller+0xb4>)
   91f3c:	4798      	blx	r3
						if (dac2_status > 5)
   91f3e:	89bb      	ldrh	r3, [r7, #12]
   91f40:	2b05      	cmp	r3, #5
   91f42:	d905      	bls.n	91f50 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   91f44:	2013      	movs	r0, #19
   91f46:	4b08      	ldr	r3, [pc, #32]	; (91f68 <cl_deaeration_controller+0xbc>)
   91f48:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   91f4a:	4b04      	ldr	r3, [pc, #16]	; (91f5c <cl_deaeration_controller+0xb0>)
   91f4c:	2201      	movs	r2, #1
   91f4e:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   91f50:	bf00      	nop
		default:break;
	}

	return CL_OK;
   91f52:	2300      	movs	r3, #0
   91f54:	4618      	mov	r0, r3
   91f56:	3710      	adds	r7, #16
   91f58:	46bd      	mov	sp, r7
   91f5a:	bd80      	pop	{r7, pc}
   91f5c:	2007268d 	.word	0x2007268d
   91f60:	0008d61d 	.word	0x0008d61d
   91f64:	000974f1 	.word	0x000974f1
   91f68:	00097511 	.word	0x00097511

00091f6c <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static Cl_Uint16Type toggle_count_flow = 0;
	
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   91f6c:	b580      	push	{r7, lr}
   91f6e:	b084      	sub	sp, #16
   91f70:	af00      	add	r7, sp, #0
   91f72:	4603      	mov	r3, r0
   91f74:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   91f76:	4b74      	ldr	r3, [pc, #464]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   91f78:	781b      	ldrb	r3, [r3, #0]
   91f7a:	2b03      	cmp	r3, #3
   91f7c:	f200 80de 	bhi.w	9213c <cl_flow_switchcontroller+0x1d0>
   91f80:	a201      	add	r2, pc, #4	; (adr r2, 91f88 <cl_flow_switchcontroller+0x1c>)
   91f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91f86:	bf00      	nop
   91f88:	000920ab 	.word	0x000920ab
   91f8c:	000920bf 	.word	0x000920bf
   91f90:	00091f99 	.word	0x00091f99
   91f94:	00092129 	.word	0x00092129
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   91f98:	79fb      	ldrb	r3, [r7, #7]
   91f9a:	3b01      	subs	r3, #1
   91f9c:	2b05      	cmp	r3, #5
   91f9e:	d87e      	bhi.n	9209e <cl_flow_switchcontroller+0x132>
   91fa0:	a201      	add	r2, pc, #4	; (adr r2, 91fa8 <cl_flow_switchcontroller+0x3c>)
   91fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91fa6:	bf00      	nop
   91fa8:	00091fc1 	.word	0x00091fc1
   91fac:	00091fc9 	.word	0x00091fc9
   91fb0:	00091fe1 	.word	0x00091fe1
   91fb4:	0009209f 	.word	0x0009209f
   91fb8:	0009204b 	.word	0x0009204b
   91fbc:	0009204b 	.word	0x0009204b
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   91fc0:	4b61      	ldr	r3, [pc, #388]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   91fc2:	2201      	movs	r2, #1
   91fc4:	701a      	strb	r2, [r3, #0]
			
						break;
   91fc6:	e06f      	b.n	920a8 <cl_flow_switchcontroller+0x13c>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   91fc8:	2100      	movs	r1, #0
   91fca:	200d      	movs	r0, #13
   91fcc:	4b5f      	ldr	r3, [pc, #380]	; (9214c <cl_flow_switchcontroller+0x1e0>)
   91fce:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   91fd0:	2100      	movs	r1, #0
   91fd2:	200e      	movs	r0, #14
   91fd4:	4b5d      	ldr	r3, [pc, #372]	; (9214c <cl_flow_switchcontroller+0x1e0>)
   91fd6:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   91fd8:	4b5b      	ldr	r3, [pc, #364]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   91fda:	2200      	movs	r2, #0
   91fdc:	701a      	strb	r2, [r3, #0]
						break;
   91fde:	e063      	b.n	920a8 <cl_flow_switchcontroller+0x13c>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   91fe0:	4b5b      	ldr	r3, [pc, #364]	; (92150 <cl_flow_switchcontroller+0x1e4>)
   91fe2:	781b      	ldrb	r3, [r3, #0]
   91fe4:	3301      	adds	r3, #1
   91fe6:	b2da      	uxtb	r2, r3
   91fe8:	4b59      	ldr	r3, [pc, #356]	; (92150 <cl_flow_switchcontroller+0x1e4>)
   91fea:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   91fec:	4b58      	ldr	r3, [pc, #352]	; (92150 <cl_flow_switchcontroller+0x1e4>)
   91fee:	781b      	ldrb	r3, [r3, #0]
   91ff0:	2b03      	cmp	r3, #3
   91ff2:	d956      	bls.n	920a2 <cl_flow_switchcontroller+0x136>
						{
							three_sec_count = 0;
   91ff4:	4b56      	ldr	r3, [pc, #344]	; (92150 <cl_flow_switchcontroller+0x1e4>)
   91ff6:	2200      	movs	r2, #0
   91ff8:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   91ffa:	200c      	movs	r0, #12
   91ffc:	4b55      	ldr	r3, [pc, #340]	; (92154 <cl_flow_switchcontroller+0x1e8>)
   91ffe:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   92000:	200d      	movs	r0, #13
   92002:	4b54      	ldr	r3, [pc, #336]	; (92154 <cl_flow_switchcontroller+0x1e8>)
   92004:	4798      	blx	r3
						
										cl_tdata.word = 0;
   92006:	2300      	movs	r3, #0
   92008:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   9200a:	4b53      	ldr	r3, [pc, #332]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   9200c:	881b      	ldrh	r3, [r3, #0]
   9200e:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   92010:	2315      	movs	r3, #21
   92012:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count_flow < 2 )
   92014:	4b50      	ldr	r3, [pc, #320]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92016:	881b      	ldrh	r3, [r3, #0]
   92018:	2b01      	cmp	r3, #1
   9201a:	d803      	bhi.n	92024 <cl_flow_switchcontroller+0xb8>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   9201c:	2101      	movs	r1, #1
   9201e:	200d      	movs	r0, #13
   92020:	4b4a      	ldr	r3, [pc, #296]	; (9214c <cl_flow_switchcontroller+0x1e0>)
   92022:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						if(toggle_count_flow > 1500 )
   92024:	4b4c      	ldr	r3, [pc, #304]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92026:	881b      	ldrh	r3, [r3, #0]
   92028:	f240 52dc 	movw	r2, #1500	; 0x5dc
   9202c:	4293      	cmp	r3, r2
   9202e:	d903      	bls.n	92038 <cl_flow_switchcontroller+0xcc>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   92030:	2101      	movs	r1, #1
   92032:	200e      	movs	r0, #14
   92034:	4b45      	ldr	r3, [pc, #276]	; (9214c <cl_flow_switchcontroller+0x1e0>)
   92036:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   92038:	2202      	movs	r2, #2
   9203a:	4947      	ldr	r1, [pc, #284]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   9203c:	2019      	movs	r0, #25
   9203e:	4b47      	ldr	r3, [pc, #284]	; (9215c <cl_flow_switchcontroller+0x1f0>)
   92040:	4798      	blx	r3
						toggle_count_flow = 0;
   92042:	4b45      	ldr	r3, [pc, #276]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92044:	2200      	movs	r2, #0
   92046:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   92048:	e02b      	b.n	920a2 <cl_flow_switchcontroller+0x136>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   9204a:	4b45      	ldr	r3, [pc, #276]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   9204c:	781b      	ldrb	r3, [r3, #0]
   9204e:	2b01      	cmp	r3, #1
   92050:	d110      	bne.n	92074 <cl_flow_switchcontroller+0x108>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   92052:	4b43      	ldr	r3, [pc, #268]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   92054:	2200      	movs	r2, #0
   92056:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   92058:	4b42      	ldr	r3, [pc, #264]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   9205a:	781b      	ldrb	r3, [r3, #0]
   9205c:	2b01      	cmp	r3, #1
   9205e:	d022      	beq.n	920a6 <cl_flow_switchcontroller+0x13a>
								{
									
									toggle_count_flow++;
   92060:	4b3d      	ldr	r3, [pc, #244]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92062:	881b      	ldrh	r3, [r3, #0]
   92064:	3301      	adds	r3, #1
   92066:	b29a      	uxth	r2, r3
   92068:	4b3b      	ldr	r3, [pc, #236]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   9206a:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   9206c:	4b3d      	ldr	r3, [pc, #244]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   9206e:	2201      	movs	r2, #1
   92070:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   92072:	e018      	b.n	920a6 <cl_flow_switchcontroller+0x13a>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   92074:	4b3a      	ldr	r3, [pc, #232]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   92076:	781b      	ldrb	r3, [r3, #0]
   92078:	2b02      	cmp	r3, #2
   9207a:	d114      	bne.n	920a6 <cl_flow_switchcontroller+0x13a>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9207c:	4b38      	ldr	r3, [pc, #224]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   9207e:	2200      	movs	r2, #0
   92080:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   92082:	4b38      	ldr	r3, [pc, #224]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   92084:	781b      	ldrb	r3, [r3, #0]
   92086:	2b02      	cmp	r3, #2
   92088:	d00d      	beq.n	920a6 <cl_flow_switchcontroller+0x13a>
								{
									toggle_count_flow++;
   9208a:	4b33      	ldr	r3, [pc, #204]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   9208c:	881b      	ldrh	r3, [r3, #0]
   9208e:	3301      	adds	r3, #1
   92090:	b29a      	uxth	r2, r3
   92092:	4b31      	ldr	r3, [pc, #196]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92094:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   92096:	4b33      	ldr	r3, [pc, #204]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   92098:	2202      	movs	r2, #2
   9209a:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   9209c:	e003      	b.n	920a6 <cl_flow_switchcontroller+0x13a>
						
						default:break;
   9209e:	bf00      	nop
   920a0:	e04c      	b.n	9213c <cl_flow_switchcontroller+0x1d0>
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
						toggle_count_flow = 0;
						}
						
						break;
   920a2:	bf00      	nop
   920a4:	e04a      	b.n	9213c <cl_flow_switchcontroller+0x1d0>
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   920a6:	bf00      	nop
						
						default:break;
					}
			break;
   920a8:	e048      	b.n	9213c <cl_flow_switchcontroller+0x1d0>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   920aa:	79fb      	ldrb	r3, [r7, #7]
   920ac:	2b01      	cmp	r3, #1
   920ae:	d001      	beq.n	920b4 <cl_flow_switchcontroller+0x148>
   920b0:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   920b2:	e003      	b.n	920bc <cl_flow_switchcontroller+0x150>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   920b4:	4b24      	ldr	r3, [pc, #144]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   920b6:	2201      	movs	r2, #1
   920b8:	701a      	strb	r2, [r3, #0]
									break;
   920ba:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   920bc:	e03e      	b.n	9213c <cl_flow_switchcontroller+0x1d0>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   920be:	79fb      	ldrb	r3, [r7, #7]
   920c0:	2b03      	cmp	r3, #3
   920c2:	d002      	beq.n	920ca <cl_flow_switchcontroller+0x15e>
   920c4:	2b06      	cmp	r3, #6
   920c6:	d004      	beq.n	920d2 <cl_flow_switchcontroller+0x166>
										}

					
									}
								break;
									default:break;
   920c8:	e02d      	b.n	92126 <cl_flow_switchcontroller+0x1ba>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   920ca:	4b1f      	ldr	r3, [pc, #124]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   920cc:	2202      	movs	r2, #2
   920ce:	701a      	strb	r2, [r3, #0]
									break;
   920d0:	e029      	b.n	92126 <cl_flow_switchcontroller+0x1ba>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   920d2:	4b23      	ldr	r3, [pc, #140]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   920d4:	781b      	ldrb	r3, [r3, #0]
   920d6:	2b01      	cmp	r3, #1
   920d8:	d110      	bne.n	920fc <cl_flow_switchcontroller+0x190>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   920da:	4b21      	ldr	r3, [pc, #132]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   920dc:	2200      	movs	r2, #0
   920de:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   920e0:	4b20      	ldr	r3, [pc, #128]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   920e2:	781b      	ldrb	r3, [r3, #0]
   920e4:	2b01      	cmp	r3, #1
   920e6:	d01d      	beq.n	92124 <cl_flow_switchcontroller+0x1b8>
										{
									
											toggle_count_flow++;
   920e8:	4b1b      	ldr	r3, [pc, #108]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   920ea:	881b      	ldrh	r3, [r3, #0]
   920ec:	3301      	adds	r3, #1
   920ee:	b29a      	uxth	r2, r3
   920f0:	4b19      	ldr	r3, [pc, #100]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   920f2:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   920f4:	4b1b      	ldr	r3, [pc, #108]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   920f6:	2201      	movs	r2, #1
   920f8:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   920fa:	e013      	b.n	92124 <cl_flow_switchcontroller+0x1b8>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   920fc:	4b18      	ldr	r3, [pc, #96]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   920fe:	781b      	ldrb	r3, [r3, #0]
   92100:	2b02      	cmp	r3, #2
   92102:	d10f      	bne.n	92124 <cl_flow_switchcontroller+0x1b8>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   92104:	4b16      	ldr	r3, [pc, #88]	; (92160 <cl_flow_switchcontroller+0x1f4>)
   92106:	2200      	movs	r2, #0
   92108:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   9210a:	4b16      	ldr	r3, [pc, #88]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   9210c:	781b      	ldrb	r3, [r3, #0]
   9210e:	2b02      	cmp	r3, #2
   92110:	d008      	beq.n	92124 <cl_flow_switchcontroller+0x1b8>
										{
											toggle_count_flow++;
   92112:	4b11      	ldr	r3, [pc, #68]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   92114:	881b      	ldrh	r3, [r3, #0]
   92116:	3301      	adds	r3, #1
   92118:	b29a      	uxth	r2, r3
   9211a:	4b0f      	ldr	r3, [pc, #60]	; (92158 <cl_flow_switchcontroller+0x1ec>)
   9211c:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   9211e:	4b11      	ldr	r3, [pc, #68]	; (92164 <cl_flow_switchcontroller+0x1f8>)
   92120:	2202      	movs	r2, #2
   92122:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   92124:	bf00      	nop
									default:break;
								}
			break;
   92126:	e009      	b.n	9213c <cl_flow_switchcontroller+0x1d0>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   92128:	79fb      	ldrb	r3, [r7, #7]
   9212a:	2b01      	cmp	r3, #1
   9212c:	d001      	beq.n	92132 <cl_flow_switchcontroller+0x1c6>
   9212e:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   92130:	e003      	b.n	9213a <cl_flow_switchcontroller+0x1ce>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   92132:	4b05      	ldr	r3, [pc, #20]	; (92148 <cl_flow_switchcontroller+0x1dc>)
   92134:	2202      	movs	r2, #2
   92136:	701a      	strb	r2, [r3, #0]
									
									break;
   92138:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   9213a:	bf00      	nop
		}
		return CL_OK;
   9213c:	2300      	movs	r3, #0
   9213e:	4618      	mov	r0, r3
   92140:	3710      	adds	r7, #16
   92142:	46bd      	mov	sp, r7
   92144:	bd80      	pop	{r7, pc}
   92146:	bf00      	nop
   92148:	20072693 	.word	0x20072693
   9214c:	00083105 	.word	0x00083105
   92150:	20072696 	.word	0x20072696
   92154:	00083051 	.word	0x00083051
   92158:	20072694 	.word	0x20072694
   9215c:	0009926d 	.word	0x0009926d
   92160:	20072690 	.word	0x20072690
   92164:	20072692 	.word	0x20072692

00092168 <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   92168:	b580      	push	{r7, lr}
   9216a:	b084      	sub	sp, #16
   9216c:	af00      	add	r7, sp, #0
   9216e:	4603      	mov	r3, r0
   92170:	6039      	str	r1, [r7, #0]
   92172:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   92174:	2300      	movs	r3, #0
   92176:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   92178:	2300      	movs	r3, #0
   9217a:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   9217c:	2300      	movs	r3, #0
   9217e:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	
	switch(hp_State)
   92180:	4bab      	ldr	r3, [pc, #684]	; (92430 <cl_hep_controller+0x2c8>)
   92182:	781b      	ldrb	r3, [r3, #0]
   92184:	2b10      	cmp	r3, #16
   92186:	f200 828d 	bhi.w	926a4 <cl_hep_controller+0x53c>
   9218a:	a201      	add	r2, pc, #4	; (adr r2, 92190 <cl_hep_controller+0x28>)
   9218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92190:	000921d5 	.word	0x000921d5
   92194:	0009231f 	.word	0x0009231f
   92198:	000923b7 	.word	0x000923b7
   9219c:	00092495 	.word	0x00092495
   921a0:	00092479 	.word	0x00092479
   921a4:	000924c7 	.word	0x000924c7
   921a8:	00092531 	.word	0x00092531
   921ac:	000926a5 	.word	0x000926a5
   921b0:	000925ed 	.word	0x000925ed
   921b4:	000926a5 	.word	0x000926a5
   921b8:	000926a5 	.word	0x000926a5
   921bc:	000926a5 	.word	0x000926a5
   921c0:	000926a5 	.word	0x000926a5
   921c4:	000926a5 	.word	0x000926a5
   921c8:	000926a5 	.word	0x000926a5
   921cc:	000926a5 	.word	0x000926a5
   921d0:	000926a5 	.word	0x000926a5
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   921d4:	79fb      	ldrb	r3, [r7, #7]
   921d6:	3b01      	subs	r3, #1
   921d8:	2b0b      	cmp	r3, #11
   921da:	f200 8265 	bhi.w	926a8 <cl_hep_controller+0x540>
   921de:	a201      	add	r2, pc, #4	; (adr r2, 921e4 <cl_hep_controller+0x7c>)
   921e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   921e4:	0009228d 	.word	0x0009228d
   921e8:	000922e9 	.word	0x000922e9
   921ec:	000922f1 	.word	0x000922f1
   921f0:	000922bb 	.word	0x000922bb
   921f4:	000922f9 	.word	0x000922f9
   921f8:	0009230d 	.word	0x0009230d
   921fc:	00092215 	.word	0x00092215
   92200:	000926a9 	.word	0x000926a9
   92204:	0009224b 	.word	0x0009224b
   92208:	0009225d 	.word	0x0009225d
   9220c:	000926a9 	.word	0x000926a9
   92210:	00092285 	.word	0x00092285
			{
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   92214:	4b87      	ldr	r3, [pc, #540]	; (92434 <cl_hep_controller+0x2cc>)
   92216:	681b      	ldr	r3, [r3, #0]
   92218:	4a87      	ldr	r2, [pc, #540]	; (92438 <cl_hep_controller+0x2d0>)
   9221a:	6013      	str	r3, [r2, #0]
					pwm_period = 5;
   9221c:	4b86      	ldr	r3, [pc, #536]	; (92438 <cl_hep_controller+0x2d0>)
   9221e:	2205      	movs	r2, #5
   92220:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   92222:	2005      	movs	r0, #5
   92224:	4b85      	ldr	r3, [pc, #532]	; (9243c <cl_hep_controller+0x2d4>)
   92226:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   92228:	4b85      	ldr	r3, [pc, #532]	; (92440 <cl_hep_controller+0x2d8>)
   9222a:	4798      	blx	r3
					cl_wait(100);
   9222c:	2064      	movs	r0, #100	; 0x64
   9222e:	4b85      	ldr	r3, [pc, #532]	; (92444 <cl_hep_controller+0x2dc>)
   92230:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   92232:	4b81      	ldr	r3, [pc, #516]	; (92438 <cl_hep_controller+0x2d0>)
   92234:	681b      	ldr	r3, [r3, #0]
   92236:	4619      	mov	r1, r3
   92238:	2005      	movs	r0, #5
   9223a:	4b83      	ldr	r3, [pc, #524]	; (92448 <cl_hep_controller+0x2e0>)
   9223c:	4798      	blx	r3
					cl_hep_pumpFeedback_start();
   9223e:	4b83      	ldr	r3, [pc, #524]	; (9244c <cl_hep_controller+0x2e4>)
   92240:	4798      	blx	r3
				hp_State = CL_HEP_STATE_BOLUS_ON;
   92242:	4b7b      	ldr	r3, [pc, #492]	; (92430 <cl_hep_controller+0x2c8>)
   92244:	2206      	movs	r2, #6
   92246:	701a      	strb	r2, [r3, #0]
				break;
   92248:	e068      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9224a:	2005      	movs	r0, #5
   9224c:	4b80      	ldr	r3, [pc, #512]	; (92450 <cl_hep_controller+0x2e8>)
   9224e:	4798      	blx	r3
   92250:	4603      	mov	r3, r0
   92252:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   92254:	4b76      	ldr	r3, [pc, #472]	; (92430 <cl_hep_controller+0x2c8>)
   92256:	2200      	movs	r2, #0
   92258:	701a      	strb	r2, [r3, #0]
				break;
   9225a:	e05f      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
						sv_cntrl_setHepa_dir();
   9225c:	4b78      	ldr	r3, [pc, #480]	; (92440 <cl_hep_controller+0x2d8>)
   9225e:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   92260:	2005      	movs	r0, #5
   92262:	4b76      	ldr	r3, [pc, #472]	; (9243c <cl_hep_controller+0x2d4>)
   92264:	4798      	blx	r3
						pwm_period = 10 ;
   92266:	4b74      	ldr	r3, [pc, #464]	; (92438 <cl_hep_controller+0x2d0>)
   92268:	220a      	movs	r2, #10
   9226a:	601a      	str	r2, [r3, #0]
						cl_wait(100);
   9226c:	2064      	movs	r0, #100	; 0x64
   9226e:	4b75      	ldr	r3, [pc, #468]	; (92444 <cl_hep_controller+0x2dc>)
   92270:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   92272:	4b71      	ldr	r3, [pc, #452]	; (92438 <cl_hep_controller+0x2d0>)
   92274:	681b      	ldr	r3, [r3, #0]
   92276:	4619      	mov	r1, r3
   92278:	2005      	movs	r0, #5
   9227a:	4b73      	ldr	r3, [pc, #460]	; (92448 <cl_hep_controller+0x2e0>)
   9227c:	4798      	blx	r3
						cl_hep_pumpFeedback_start();
   9227e:	4b73      	ldr	r3, [pc, #460]	; (9244c <cl_hep_controller+0x2e4>)
   92280:	4798      	blx	r3
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;

				break;
   92282:	e04b      	b.n	9231c <cl_hep_controller+0x1b4>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   92284:	2005      	movs	r0, #5
   92286:	4b72      	ldr	r3, [pc, #456]	; (92450 <cl_hep_controller+0x2e8>)
   92288:	4798      	blx	r3
				break;
   9228a:	e047      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 5 ;
   9228c:	4b6a      	ldr	r3, [pc, #424]	; (92438 <cl_hep_controller+0x2d0>)
   9228e:	2205      	movs	r2, #5
   92290:	601a      	str	r2, [r3, #0]
				;
				sv_cntrl_setHepa_dir();
   92292:	4b6b      	ldr	r3, [pc, #428]	; (92440 <cl_hep_controller+0x2d8>)
   92294:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   92296:	2005      	movs	r0, #5
   92298:	4b68      	ldr	r3, [pc, #416]	; (9243c <cl_hep_controller+0x2d4>)
   9229a:	4798      	blx	r3
				cl_hep_pumpFeedback_start();
   9229c:	4b6b      	ldr	r3, [pc, #428]	; (9244c <cl_hep_controller+0x2e4>)
   9229e:	4798      	blx	r3
				cl_wait(100);
   922a0:	2064      	movs	r0, #100	; 0x64
   922a2:	4b68      	ldr	r3, [pc, #416]	; (92444 <cl_hep_controller+0x2dc>)
   922a4:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   922a6:	4b64      	ldr	r3, [pc, #400]	; (92438 <cl_hep_controller+0x2d0>)
   922a8:	681b      	ldr	r3, [r3, #0]
   922aa:	4619      	mov	r1, r3
   922ac:	2005      	movs	r0, #5
   922ae:	4b66      	ldr	r3, [pc, #408]	; (92448 <cl_hep_controller+0x2e0>)
   922b0:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   922b2:	4b5f      	ldr	r3, [pc, #380]	; (92430 <cl_hep_controller+0x2c8>)
   922b4:	2203      	movs	r2, #3
   922b6:	701a      	strb	r2, [r3, #0]
				break;
   922b8:	e030      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 5 ;
   922ba:	4b5f      	ldr	r3, [pc, #380]	; (92438 <cl_hep_controller+0x2d0>)
   922bc:	2205      	movs	r2, #5
   922be:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   922c0:	4b64      	ldr	r3, [pc, #400]	; (92454 <cl_hep_controller+0x2ec>)
   922c2:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   922c4:	2005      	movs	r0, #5
   922c6:	4b5d      	ldr	r3, [pc, #372]	; (9243c <cl_hep_controller+0x2d4>)
   922c8:	4798      	blx	r3
					cl_hep_pumpFeedback_start();
   922ca:	4b60      	ldr	r3, [pc, #384]	; (9244c <cl_hep_controller+0x2e4>)
   922cc:	4798      	blx	r3
					cl_wait(100);
   922ce:	2064      	movs	r0, #100	; 0x64
   922d0:	4b5c      	ldr	r3, [pc, #368]	; (92444 <cl_hep_controller+0x2dc>)
   922d2:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   922d4:	4b58      	ldr	r3, [pc, #352]	; (92438 <cl_hep_controller+0x2d0>)
   922d6:	681b      	ldr	r3, [r3, #0]
   922d8:	4619      	mov	r1, r3
   922da:	2005      	movs	r0, #5
   922dc:	4b5a      	ldr	r3, [pc, #360]	; (92448 <cl_hep_controller+0x2e0>)
   922de:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   922e0:	4b53      	ldr	r3, [pc, #332]	; (92430 <cl_hep_controller+0x2c8>)
   922e2:	2204      	movs	r2, #4
   922e4:	701a      	strb	r2, [r3, #0]
				break;
   922e6:	e019      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   922e8:	4b51      	ldr	r3, [pc, #324]	; (92430 <cl_hep_controller+0x2c8>)
   922ea:	2201      	movs	r2, #1
   922ec:	701a      	strb	r2, [r3, #0]
				break;
   922ee:	e015      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   922f0:	4b4f      	ldr	r3, [pc, #316]	; (92430 <cl_hep_controller+0x2c8>)
   922f2:	2202      	movs	r2, #2
   922f4:	701a      	strb	r2, [r3, #0]
				break;
   922f6:	e011      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				
				cl_hep_bolusrate = data;
   922f8:	683b      	ldr	r3, [r7, #0]
   922fa:	b29a      	uxth	r2, r3
   922fc:	4b56      	ldr	r3, [pc, #344]	; (92458 <cl_hep_controller+0x2f0>)
   922fe:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_bolusrate ;
   92300:	4b55      	ldr	r3, [pc, #340]	; (92458 <cl_hep_controller+0x2f0>)
   92302:	881b      	ldrh	r3, [r3, #0]
   92304:	461a      	mov	r2, r3
   92306:	4b4c      	ldr	r3, [pc, #304]	; (92438 <cl_hep_controller+0x2d0>)
   92308:	601a      	str	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				break;
   9230a:	e007      	b.n	9231c <cl_hep_controller+0x1b4>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   9230c:	683b      	ldr	r3, [r7, #0]
   9230e:	4a49      	ldr	r2, [pc, #292]	; (92434 <cl_hep_controller+0x2cc>)
   92310:	6013      	str	r3, [r2, #0]
				pwm_period =  cl_hep_deliveryrate ;
   92312:	4b48      	ldr	r3, [pc, #288]	; (92434 <cl_hep_controller+0x2cc>)
   92314:	681b      	ldr	r3, [r3, #0]
   92316:	4a48      	ldr	r2, [pc, #288]	; (92438 <cl_hep_controller+0x2d0>)
   92318:	6013      	str	r3, [r2, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
   9231a:	bf00      	nop
			}
		break;
   9231c:	e1c4      	b.n	926a8 <cl_hep_controller+0x540>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   9231e:	79fb      	ldrb	r3, [r7, #7]
   92320:	3b02      	subs	r3, #2
   92322:	2b08      	cmp	r3, #8
   92324:	f200 81c2 	bhi.w	926ac <cl_hep_controller+0x544>
   92328:	a201      	add	r2, pc, #4	; (adr r2, 92330 <cl_hep_controller+0x1c8>)
   9232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9232e:	bf00      	nop
   92330:	00092393 	.word	0x00092393
   92334:	0009239b 	.word	0x0009239b
   92338:	00092365 	.word	0x00092365
   9233c:	000923a3 	.word	0x000923a3
   92340:	000923ad 	.word	0x000923ad
   92344:	00092355 	.word	0x00092355
   92348:	000926ad 	.word	0x000926ad
   9234c:	000926ad 	.word	0x000926ad
   92350:	0009235d 	.word	0x0009235d
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   92354:	4b36      	ldr	r3, [pc, #216]	; (92430 <cl_hep_controller+0x2c8>)
   92356:	2206      	movs	r2, #6
   92358:	701a      	strb	r2, [r3, #0]
			break;
   9235a:	e02b      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   9235c:	4b34      	ldr	r3, [pc, #208]	; (92430 <cl_hep_controller+0x2c8>)
   9235e:	2208      	movs	r2, #8
   92360:	701a      	strb	r2, [r3, #0]
			break;
   92362:	e027      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_setHepa_dir();
   92364:	4b36      	ldr	r3, [pc, #216]	; (92440 <cl_hep_controller+0x2d8>)
   92366:	4798      	blx	r3
			pwm_period = 5;
   92368:	4b33      	ldr	r3, [pc, #204]	; (92438 <cl_hep_controller+0x2d0>)
   9236a:	2205      	movs	r2, #5
   9236c:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   9236e:	2005      	movs	r0, #5
   92370:	4b32      	ldr	r3, [pc, #200]	; (9243c <cl_hep_controller+0x2d4>)
   92372:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   92374:	4b35      	ldr	r3, [pc, #212]	; (9244c <cl_hep_controller+0x2e4>)
   92376:	4798      	blx	r3
			cl_wait(100);
   92378:	2064      	movs	r0, #100	; 0x64
   9237a:	4b32      	ldr	r3, [pc, #200]	; (92444 <cl_hep_controller+0x2dc>)
   9237c:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9237e:	4b2e      	ldr	r3, [pc, #184]	; (92438 <cl_hep_controller+0x2d0>)
   92380:	681b      	ldr	r3, [r3, #0]
   92382:	4619      	mov	r1, r3
   92384:	2005      	movs	r0, #5
   92386:	4b30      	ldr	r3, [pc, #192]	; (92448 <cl_hep_controller+0x2e0>)
   92388:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   9238a:	4b29      	ldr	r3, [pc, #164]	; (92430 <cl_hep_controller+0x2c8>)
   9238c:	2204      	movs	r2, #4
   9238e:	701a      	strb	r2, [r3, #0]
			break;
   92390:	e010      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92392:	4b27      	ldr	r3, [pc, #156]	; (92430 <cl_hep_controller+0x2c8>)
   92394:	2201      	movs	r2, #1
   92396:	701a      	strb	r2, [r3, #0]
			break;
   92398:	e00c      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9239a:	4b25      	ldr	r3, [pc, #148]	; (92430 <cl_hep_controller+0x2c8>)
   9239c:	2202      	movs	r2, #2
   9239e:	701a      	strb	r2, [r3, #0]
			break;
   923a0:	e008      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   923a2:	683b      	ldr	r3, [r7, #0]
   923a4:	b29a      	uxth	r2, r3
   923a6:	4b2c      	ldr	r3, [pc, #176]	; (92458 <cl_hep_controller+0x2f0>)
   923a8:	801a      	strh	r2, [r3, #0]
			break;
   923aa:	e003      	b.n	923b4 <cl_hep_controller+0x24c>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   923ac:	683b      	ldr	r3, [r7, #0]
   923ae:	4a21      	ldr	r2, [pc, #132]	; (92434 <cl_hep_controller+0x2cc>)
   923b0:	6013      	str	r3, [r2, #0]
			break;
   923b2:	bf00      	nop
		}
		break;
   923b4:	e17a      	b.n	926ac <cl_hep_controller+0x544>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   923b6:	79fb      	ldrb	r3, [r7, #7]
   923b8:	3b01      	subs	r3, #1
   923ba:	2b09      	cmp	r3, #9
   923bc:	f200 8178 	bhi.w	926b0 <cl_hep_controller+0x548>
   923c0:	a201      	add	r2, pc, #4	; (adr r2, 923c8 <cl_hep_controller+0x260>)
   923c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   923c6:	bf00      	nop
   923c8:	00092401 	.word	0x00092401
   923cc:	00092429 	.word	0x00092429
   923d0:	0009245d 	.word	0x0009245d
   923d4:	000926b1 	.word	0x000926b1
   923d8:	00092465 	.word	0x00092465
   923dc:	0009246f 	.word	0x0009246f
   923e0:	000923f1 	.word	0x000923f1
   923e4:	000926b1 	.word	0x000926b1
   923e8:	000926b1 	.word	0x000926b1
   923ec:	000923f9 	.word	0x000923f9
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   923f0:	4b0f      	ldr	r3, [pc, #60]	; (92430 <cl_hep_controller+0x2c8>)
   923f2:	2206      	movs	r2, #6
   923f4:	701a      	strb	r2, [r3, #0]
			break;
   923f6:	e03e      	b.n	92476 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   923f8:	4b0d      	ldr	r3, [pc, #52]	; (92430 <cl_hep_controller+0x2c8>)
   923fa:	2208      	movs	r2, #8
   923fc:	701a      	strb	r2, [r3, #0]
			break;
   923fe:	e03a      	b.n	92476 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_resetHepa_dir();
   92400:	4b14      	ldr	r3, [pc, #80]	; (92454 <cl_hep_controller+0x2ec>)
   92402:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   92404:	2005      	movs	r0, #5
   92406:	4b0d      	ldr	r3, [pc, #52]	; (9243c <cl_hep_controller+0x2d4>)
   92408:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   9240a:	4b10      	ldr	r3, [pc, #64]	; (9244c <cl_hep_controller+0x2e4>)
   9240c:	4798      	blx	r3
			cl_wait(100);
   9240e:	2064      	movs	r0, #100	; 0x64
   92410:	4b0c      	ldr	r3, [pc, #48]	; (92444 <cl_hep_controller+0x2dc>)
   92412:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   92414:	4b08      	ldr	r3, [pc, #32]	; (92438 <cl_hep_controller+0x2d0>)
   92416:	681b      	ldr	r3, [r3, #0]
   92418:	4619      	mov	r1, r3
   9241a:	2005      	movs	r0, #5
   9241c:	4b0a      	ldr	r3, [pc, #40]	; (92448 <cl_hep_controller+0x2e0>)
   9241e:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   92420:	4b03      	ldr	r3, [pc, #12]	; (92430 <cl_hep_controller+0x2c8>)
   92422:	2203      	movs	r2, #3
   92424:	701a      	strb	r2, [r3, #0]
			break;
   92426:	e026      	b.n	92476 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92428:	4b01      	ldr	r3, [pc, #4]	; (92430 <cl_hep_controller+0x2c8>)
   9242a:	2201      	movs	r2, #1
   9242c:	701a      	strb	r2, [r3, #0]
			break;
   9242e:	e022      	b.n	92476 <cl_hep_controller+0x30e>
   92430:	20072697 	.word	0x20072697
   92434:	200709f8 	.word	0x200709f8
   92438:	200726a0 	.word	0x200726a0
   9243c:	00097451 	.word	0x00097451
   92440:	00097541 	.word	0x00097541
   92444:	000918fd 	.word	0x000918fd
   92448:	00097569 	.word	0x00097569
   9244c:	000926e9 	.word	0x000926e9
   92450:	0009748d 	.word	0x0009748d
   92454:	00097555 	.word	0x00097555
   92458:	20072698 	.word	0x20072698
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9245c:	4b9a      	ldr	r3, [pc, #616]	; (926c8 <cl_hep_controller+0x560>)
   9245e:	2202      	movs	r2, #2
   92460:	701a      	strb	r2, [r3, #0]
			break;
   92462:	e008      	b.n	92476 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   92464:	683b      	ldr	r3, [r7, #0]
   92466:	b29a      	uxth	r2, r3
   92468:	4b98      	ldr	r3, [pc, #608]	; (926cc <cl_hep_controller+0x564>)
   9246a:	801a      	strh	r2, [r3, #0]
			break;
   9246c:	e003      	b.n	92476 <cl_hep_controller+0x30e>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   9246e:	683b      	ldr	r3, [r7, #0]
   92470:	4a97      	ldr	r2, [pc, #604]	; (926d0 <cl_hep_controller+0x568>)
   92472:	6013      	str	r3, [r2, #0]
			break;
   92474:	bf00      	nop
		}
		break;
   92476:	e11b      	b.n	926b0 <cl_hep_controller+0x548>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   92478:	79fb      	ldrb	r3, [r7, #7]
   9247a:	2b0c      	cmp	r3, #12
   9247c:	d000      	beq.n	92480 <cl_hep_controller+0x318>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
			default:break;
   9247e:	e008      	b.n	92492 <cl_hep_controller+0x32a>
		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
		{

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   92480:	2005      	movs	r0, #5
   92482:	4b94      	ldr	r3, [pc, #592]	; (926d4 <cl_hep_controller+0x56c>)
   92484:	4798      	blx	r3
   92486:	4603      	mov	r3, r0
   92488:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   9248a:	4b8f      	ldr	r3, [pc, #572]	; (926c8 <cl_hep_controller+0x560>)
   9248c:	2200      	movs	r2, #0
   9248e:	701a      	strb	r2, [r3, #0]
			break;
   92490:	bf00      	nop
			default:break;

		}
		break;
   92492:	e114      	b.n	926be <cl_hep_controller+0x556>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   92494:	79fb      	ldrb	r3, [r7, #7]
   92496:	2b0c      	cmp	r3, #12
   92498:	d00b      	beq.n	924b2 <cl_hep_controller+0x34a>
   9249a:	2b0d      	cmp	r3, #13
   9249c:	d000      	beq.n	924a0 <cl_hep_controller+0x338>
			break;
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
			default:break;
   9249e:	e011      	b.n	924c4 <cl_hep_controller+0x35c>
		break;
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
		{
			case CL_HEP_EVENT_SEC_TICK:
			cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   924a0:	f107 030e 	add.w	r3, r7, #14
   924a4:	4618      	mov	r0, r3
   924a6:	4b8c      	ldr	r3, [pc, #560]	; (926d8 <cl_hep_controller+0x570>)
   924a8:	4798      	blx	r3
			switch(hep_pumpstate)
   924aa:	7bbb      	ldrb	r3, [r7, #14]
   924ac:	2b01      	cmp	r3, #1
			{
				case CL_HEP_P_STATE_READY_AT_START:
		////		sv_cntrl_setHepa_dir();
			//	sv_cntrl_deactivatepump(HEPARINPUMP);
			//	hp_State = CL_HEP_STATE_REACHED_LEFTEND;
				break;
   924ae:	bf00      	nop
			}
			break;
   924b0:	e008      	b.n	924c4 <cl_hep_controller+0x35c>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   924b2:	2005      	movs	r0, #5
   924b4:	4b87      	ldr	r3, [pc, #540]	; (926d4 <cl_hep_controller+0x56c>)
   924b6:	4798      	blx	r3
   924b8:	4603      	mov	r3, r0
   924ba:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   924bc:	4b82      	ldr	r3, [pc, #520]	; (926c8 <cl_hep_controller+0x560>)
   924be:	2200      	movs	r2, #0
   924c0:	701a      	strb	r2, [r3, #0]
			break;
   924c2:	bf00      	nop
			default:break;

		}
		break;
   924c4:	e0fb      	b.n	926be <cl_hep_controller+0x556>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   924c6:	79fb      	ldrb	r3, [r7, #7]
   924c8:	3b01      	subs	r3, #1
   924ca:	2b06      	cmp	r3, #6
   924cc:	f200 80f2 	bhi.w	926b4 <cl_hep_controller+0x54c>
   924d0:	a201      	add	r2, pc, #4	; (adr r2, 924d8 <cl_hep_controller+0x370>)
   924d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   924d6:	bf00      	nop
   924d8:	000924fd 	.word	0x000924fd
   924dc:	0009250d 	.word	0x0009250d
   924e0:	00092515 	.word	0x00092515
   924e4:	00092505 	.word	0x00092505
   924e8:	0009251d 	.word	0x0009251d
   924ec:	00092527 	.word	0x00092527
   924f0:	000924f5 	.word	0x000924f5
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   924f4:	4b74      	ldr	r3, [pc, #464]	; (926c8 <cl_hep_controller+0x560>)
   924f6:	2206      	movs	r2, #6
   924f8:	701a      	strb	r2, [r3, #0]
			break;
   924fa:	e018      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   924fc:	4b72      	ldr	r3, [pc, #456]	; (926c8 <cl_hep_controller+0x560>)
   924fe:	2203      	movs	r2, #3
   92500:	701a      	strb	r2, [r3, #0]
			break;
   92502:	e014      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   92504:	4b70      	ldr	r3, [pc, #448]	; (926c8 <cl_hep_controller+0x560>)
   92506:	2204      	movs	r2, #4
   92508:	701a      	strb	r2, [r3, #0]
			break;
   9250a:	e010      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   9250c:	4b6e      	ldr	r3, [pc, #440]	; (926c8 <cl_hep_controller+0x560>)
   9250e:	2201      	movs	r2, #1
   92510:	701a      	strb	r2, [r3, #0]
			break;
   92512:	e00c      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92514:	4b6c      	ldr	r3, [pc, #432]	; (926c8 <cl_hep_controller+0x560>)
   92516:	2202      	movs	r2, #2
   92518:	701a      	strb	r2, [r3, #0]
			break;
   9251a:	e008      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   9251c:	683b      	ldr	r3, [r7, #0]
   9251e:	b29a      	uxth	r2, r3
   92520:	4b6a      	ldr	r3, [pc, #424]	; (926cc <cl_hep_controller+0x564>)
   92522:	801a      	strh	r2, [r3, #0]
			break;
   92524:	e003      	b.n	9252e <cl_hep_controller+0x3c6>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   92526:	683b      	ldr	r3, [r7, #0]
   92528:	4a69      	ldr	r2, [pc, #420]	; (926d0 <cl_hep_controller+0x568>)
   9252a:	6013      	str	r3, [r2, #0]
			break;
   9252c:	bf00      	nop
		}
		break;
   9252e:	e0c1      	b.n	926b4 <cl_hep_controller+0x54c>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   92530:	79fb      	ldrb	r3, [r7, #7]
   92532:	3b02      	subs	r3, #2
   92534:	2b0b      	cmp	r3, #11
   92536:	f200 80bf 	bhi.w	926b8 <cl_hep_controller+0x550>
   9253a:	a201      	add	r2, pc, #4	; (adr r2, 92540 <cl_hep_controller+0x3d8>)
   9253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92540:	000925ad 	.word	0x000925ad
   92544:	000925b5 	.word	0x000925b5
   92548:	000926b9 	.word	0x000926b9
   9254c:	000925bd 	.word	0x000925bd
   92550:	000925c7 	.word	0x000925c7
   92554:	000926b9 	.word	0x000926b9
   92558:	000925cf 	.word	0x000925cf
   9255c:	000925d7 	.word	0x000925d7
   92560:	000926b9 	.word	0x000926b9
   92564:	000926b9 	.word	0x000926b9
   92568:	000925d7 	.word	0x000925d7
   9256c:	00092571 	.word	0x00092571
		{
			case CL_HEP_EVENT_SEC_TICK:
			if(++cl_hep_seconds > 60)
   92570:	4b5a      	ldr	r3, [pc, #360]	; (926dc <cl_hep_controller+0x574>)
   92572:	881b      	ldrh	r3, [r3, #0]
   92574:	3301      	adds	r3, #1
   92576:	b29a      	uxth	r2, r3
   92578:	4b58      	ldr	r3, [pc, #352]	; (926dc <cl_hep_controller+0x574>)
   9257a:	801a      	strh	r2, [r3, #0]
   9257c:	4b57      	ldr	r3, [pc, #348]	; (926dc <cl_hep_controller+0x574>)
   9257e:	881b      	ldrh	r3, [r3, #0]
   92580:	2b3c      	cmp	r3, #60	; 0x3c
   92582:	d931      	bls.n	925e8 <cl_hep_controller+0x480>
			{
				cl_hep_seconds = 0;
   92584:	4b55      	ldr	r3, [pc, #340]	; (926dc <cl_hep_controller+0x574>)
   92586:	2200      	movs	r2, #0
   92588:	801a      	strh	r2, [r3, #0]
				if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
   9258a:	4b55      	ldr	r3, [pc, #340]	; (926e0 <cl_hep_controller+0x578>)
   9258c:	881b      	ldrh	r3, [r3, #0]
   9258e:	3301      	adds	r3, #1
   92590:	b29a      	uxth	r2, r3
   92592:	4b53      	ldr	r3, [pc, #332]	; (926e0 <cl_hep_controller+0x578>)
   92594:	801a      	strh	r2, [r3, #0]
   92596:	4b52      	ldr	r3, [pc, #328]	; (926e0 <cl_hep_controller+0x578>)
   92598:	881b      	ldrh	r3, [r3, #0]
   9259a:	2b01      	cmp	r3, #1
   9259c:	d924      	bls.n	925e8 <cl_hep_controller+0x480>
				{
					hp_State = CL_HEP_STATE_IDLE;
   9259e:	4b4a      	ldr	r3, [pc, #296]	; (926c8 <cl_hep_controller+0x560>)
   925a0:	2200      	movs	r2, #0
   925a2:	701a      	strb	r2, [r3, #0]
					cl_hep_minutes = 0;
   925a4:	4b4e      	ldr	r3, [pc, #312]	; (926e0 <cl_hep_controller+0x578>)
   925a6:	2200      	movs	r2, #0
   925a8:	801a      	strh	r2, [r3, #0]
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
				}
			}

			break;
   925aa:	e01d      	b.n	925e8 <cl_hep_controller+0x480>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   925ac:	4b46      	ldr	r3, [pc, #280]	; (926c8 <cl_hep_controller+0x560>)
   925ae:	2201      	movs	r2, #1
   925b0:	701a      	strb	r2, [r3, #0]
			break;
   925b2:	e01a      	b.n	925ea <cl_hep_controller+0x482>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   925b4:	4b44      	ldr	r3, [pc, #272]	; (926c8 <cl_hep_controller+0x560>)
   925b6:	2202      	movs	r2, #2
   925b8:	701a      	strb	r2, [r3, #0]
			break;
   925ba:	e016      	b.n	925ea <cl_hep_controller+0x482>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   925bc:	683b      	ldr	r3, [r7, #0]
   925be:	b29a      	uxth	r2, r3
   925c0:	4b42      	ldr	r3, [pc, #264]	; (926cc <cl_hep_controller+0x564>)
   925c2:	801a      	strh	r2, [r3, #0]
			break;
   925c4:	e011      	b.n	925ea <cl_hep_controller+0x482>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   925c6:	683b      	ldr	r3, [r7, #0]
   925c8:	4a41      	ldr	r2, [pc, #260]	; (926d0 <cl_hep_controller+0x568>)
   925ca:	6013      	str	r3, [r2, #0]
			break;
   925cc:	e00d      	b.n	925ea <cl_hep_controller+0x482>
			case 	CL_HEP_EVENT_PAUSEBOLUS:
			hp_State = CL_HEP_STATE_PAUSED;
   925ce:	4b3e      	ldr	r3, [pc, #248]	; (926c8 <cl_hep_controller+0x560>)
   925d0:	220e      	movs	r2, #14
   925d2:	701a      	strb	r2, [r3, #0]
			break;
   925d4:	e009      	b.n	925ea <cl_hep_controller+0x482>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   925d6:	2005      	movs	r0, #5
   925d8:	4b3e      	ldr	r3, [pc, #248]	; (926d4 <cl_hep_controller+0x56c>)
   925da:	4798      	blx	r3
   925dc:	4603      	mov	r3, r0
   925de:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   925e0:	4b39      	ldr	r3, [pc, #228]	; (926c8 <cl_hep_controller+0x560>)
   925e2:	2200      	movs	r2, #0
   925e4:	701a      	strb	r2, [r3, #0]
			break;
   925e6:	e000      	b.n	925ea <cl_hep_controller+0x482>
					cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
				}
			}

			break;
   925e8:	bf00      	nop
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   925ea:	e065      	b.n	926b8 <cl_hep_controller+0x550>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   925ec:	79fb      	ldrb	r3, [r7, #7]
   925ee:	3b02      	subs	r3, #2
   925f0:	2b0b      	cmp	r3, #11
   925f2:	d863      	bhi.n	926bc <cl_hep_controller+0x554>
   925f4:	a201      	add	r2, pc, #4	; (adr r2, 925fc <cl_hep_controller+0x494>)
   925f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   925fa:	bf00      	nop
   925fc:	0009265d 	.word	0x0009265d
   92600:	0009266f 	.word	0x0009266f
   92604:	000926bd 	.word	0x000926bd
   92608:	00092681 	.word	0x00092681
   9260c:	0009268b 	.word	0x0009268b
   92610:	000926bd 	.word	0x000926bd
   92614:	00092693 	.word	0x00092693
   92618:	0009269b 	.word	0x0009269b
   9261c:	000926bd 	.word	0x000926bd
   92620:	000926bd 	.word	0x000926bd
   92624:	000926bd 	.word	0x000926bd
   92628:	0009262d 	.word	0x0009262d
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   9262c:	f107 030e 	add.w	r3, r7, #14
   92630:	4618      	mov	r0, r3
   92632:	4b29      	ldr	r3, [pc, #164]	; (926d8 <cl_hep_controller+0x570>)
   92634:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   92636:	f107 030c 	add.w	r3, r7, #12
   9263a:	4618      	mov	r0, r3
   9263c:	4b29      	ldr	r3, [pc, #164]	; (926e4 <cl_hep_controller+0x57c>)
   9263e:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   92640:	7bbb      	ldrb	r3, [r7, #14]
   92642:	2b06      	cmp	r3, #6
   92644:	d004      	beq.n	92650 <cl_hep_controller+0x4e8>
   92646:	2b07      	cmp	r3, #7
   92648:	d004      	beq.n	92654 <cl_hep_controller+0x4ec>
   9264a:	2b02      	cmp	r3, #2
   9264c:	d004      	beq.n	92658 <cl_hep_controller+0x4f0>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   9264e:	e004      	b.n	9265a <cl_hep_controller+0x4f2>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   92650:	bf00      	nop
   92652:	e026      	b.n	926a2 <cl_hep_controller+0x53a>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   92654:	bf00      	nop
   92656:	e024      	b.n	926a2 <cl_hep_controller+0x53a>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   92658:	bf00      	nop
						default:break;
					}


				break;
   9265a:	e022      	b.n	926a2 <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9265c:	2005      	movs	r0, #5
   9265e:	4b1d      	ldr	r3, [pc, #116]	; (926d4 <cl_hep_controller+0x56c>)
   92660:	4798      	blx	r3
   92662:	4603      	mov	r3, r0
   92664:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   92666:	4b18      	ldr	r3, [pc, #96]	; (926c8 <cl_hep_controller+0x560>)
   92668:	2201      	movs	r2, #1
   9266a:	701a      	strb	r2, [r3, #0]
				break;
   9266c:	e019      	b.n	926a2 <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9266e:	2005      	movs	r0, #5
   92670:	4b18      	ldr	r3, [pc, #96]	; (926d4 <cl_hep_controller+0x56c>)
   92672:	4798      	blx	r3
   92674:	4603      	mov	r3, r0
   92676:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   92678:	4b13      	ldr	r3, [pc, #76]	; (926c8 <cl_hep_controller+0x560>)
   9267a:	2202      	movs	r2, #2
   9267c:	701a      	strb	r2, [r3, #0]
				break;
   9267e:	e010      	b.n	926a2 <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				cl_hep_bolusrate = data ;
   92680:	683b      	ldr	r3, [r7, #0]
   92682:	b29a      	uxth	r2, r3
   92684:	4b11      	ldr	r3, [pc, #68]	; (926cc <cl_hep_controller+0x564>)
   92686:	801a      	strh	r2, [r3, #0]
				break;
   92688:	e00b      	b.n	926a2 <cl_hep_controller+0x53a>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   9268a:	683b      	ldr	r3, [r7, #0]
   9268c:	4a10      	ldr	r2, [pc, #64]	; (926d0 <cl_hep_controller+0x568>)
   9268e:	6013      	str	r3, [r2, #0]
				break;
   92690:	e007      	b.n	926a2 <cl_hep_controller+0x53a>
				case 	CL_HEP_EVENT_PAUSEBOLUS:
				hp_State = CL_HEP_STATE_PAUSED;
   92692:	4b0d      	ldr	r3, [pc, #52]	; (926c8 <cl_hep_controller+0x560>)
   92694:	220e      	movs	r2, #14
   92696:	701a      	strb	r2, [r3, #0]
				break;
   92698:	e003      	b.n	926a2 <cl_hep_controller+0x53a>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
   9269a:	4b0b      	ldr	r3, [pc, #44]	; (926c8 <cl_hep_controller+0x560>)
   9269c:	220f      	movs	r2, #15
   9269e:	701a      	strb	r2, [r3, #0]
				break;
   926a0:	bf00      	nop
			}
		
		break;
   926a2:	e00b      	b.n	926bc <cl_hep_controller+0x554>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   926a4:	bf00      	nop
   926a6:	e00a      	b.n	926be <cl_hep_controller+0x556>
				pwm_period =  cl_hep_deliveryrate ;
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
			}
		break;
   926a8:	bf00      	nop
   926aa:	e008      	b.n	926be <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   926ac:	bf00      	nop
   926ae:	e006      	b.n	926be <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   926b0:	bf00      	nop
   926b2:	e004      	b.n	926be <cl_hep_controller+0x556>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   926b4:	bf00      	nop
   926b6:	e002      	b.n	926be <cl_hep_controller+0x556>
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   926b8:	bf00      	nop
   926ba:	e000      	b.n	926be <cl_hep_controller+0x556>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
				break;
			}
		
		break;
   926bc:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   926be:	2300      	movs	r3, #0
   926c0:	4618      	mov	r0, r3
   926c2:	3710      	adds	r7, #16
   926c4:	46bd      	mov	sp, r7
   926c6:	bd80      	pop	{r7, pc}
   926c8:	20072697 	.word	0x20072697
   926cc:	20072698 	.word	0x20072698
   926d0:	200709f8 	.word	0x200709f8
   926d4:	0009748d 	.word	0x0009748d
   926d8:	00092701 	.word	0x00092701
   926dc:	2007269a 	.word	0x2007269a
   926e0:	2007269c 	.word	0x2007269c
   926e4:	00092721 	.word	0x00092721

000926e8 <cl_hep_pumpFeedback_start>:

static Cl_Uint16Type pin_status = 1,hp_start_status = 0,prev_hp_start_status = 0,hp_end_status = 0,prev_hp_end_status = 0;
//static Cl_Uint16Type counter = 0;

Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   926e8:	b480      	push	{r7}
   926ea:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   926ec:	4b03      	ldr	r3, [pc, #12]	; (926fc <cl_hep_pumpFeedback_start+0x14>)
   926ee:	2203      	movs	r2, #3
   926f0:	701a      	strb	r2, [r3, #0]
	return 0;
   926f2:	2300      	movs	r3, #0
}
   926f4:	4618      	mov	r0, r3
   926f6:	46bd      	mov	sp, r7
   926f8:	bc80      	pop	{r7}
   926fa:	4770      	bx	lr
   926fc:	200726a6 	.word	0x200726a6

00092700 <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   92700:	b480      	push	{r7}
   92702:	b083      	sub	sp, #12
   92704:	af00      	add	r7, sp, #0
   92706:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   92708:	4b04      	ldr	r3, [pc, #16]	; (9271c <cl_hep_pumpFeedback_get_state+0x1c>)
   9270a:	781a      	ldrb	r2, [r3, #0]
   9270c:	687b      	ldr	r3, [r7, #4]
   9270e:	701a      	strb	r2, [r3, #0]
	return 0;
   92710:	2300      	movs	r3, #0
}
   92712:	4618      	mov	r0, r3
   92714:	370c      	adds	r7, #12
   92716:	46bd      	mov	sp, r7
   92718:	bc80      	pop	{r7}
   9271a:	4770      	bx	lr
   9271c:	200726a6 	.word	0x200726a6

00092720 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   92720:	b480      	push	{r7}
   92722:	b083      	sub	sp, #12
   92724:	af00      	add	r7, sp, #0
   92726:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   92728:	4b07      	ldr	r3, [pc, #28]	; (92748 <cl_hep_pumpFeedback_get_delta+0x28>)
   9272a:	881a      	ldrh	r2, [r3, #0]
   9272c:	4b07      	ldr	r3, [pc, #28]	; (9274c <cl_hep_pumpFeedback_get_delta+0x2c>)
   9272e:	881b      	ldrh	r3, [r3, #0]
   92730:	1ad3      	subs	r3, r2, r3
   92732:	b29b      	uxth	r3, r3
   92734:	b21a      	sxth	r2, r3
   92736:	687b      	ldr	r3, [r7, #4]
   92738:	801a      	strh	r2, [r3, #0]
	return 0;
   9273a:	2300      	movs	r3, #0
}
   9273c:	4618      	mov	r0, r3
   9273e:	370c      	adds	r7, #12
   92740:	46bd      	mov	sp, r7
   92742:	bc80      	pop	{r7}
   92744:	4770      	bx	lr
   92746:	bf00      	nop
   92748:	200726aa 	.word	0x200726aa
   9274c:	200726a4 	.word	0x200726a4

00092750 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 5 ms clock
{
   92750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   92752:	af00      	add	r7, sp, #0
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   92754:	4b64      	ldr	r3, [pc, #400]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   92756:	781b      	ldrb	r3, [r3, #0]
   92758:	2b00      	cmp	r3, #0
   9275a:	f000 80b8 	beq.w	928ce <cl_hep_pumpFeedback_timer+0x17e>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   9275e:	4963      	ldr	r1, [pc, #396]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   92760:	201b      	movs	r0, #27
   92762:	4b63      	ldr	r3, [pc, #396]	; (928f0 <cl_hep_pumpFeedback_timer+0x1a0>)
   92764:	4798      	blx	r3

		fivemscounter++;
   92766:	4b63      	ldr	r3, [pc, #396]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92768:	881b      	ldrh	r3, [r3, #0]
   9276a:	3301      	adds	r3, #1
   9276c:	b29a      	uxth	r2, r3
   9276e:	4b61      	ldr	r3, [pc, #388]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92770:	801a      	strh	r2, [r3, #0]
		if(fivemscounter > 10000)
   92772:	4b60      	ldr	r3, [pc, #384]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   92774:	881b      	ldrh	r3, [r3, #0]
   92776:	f242 7210 	movw	r2, #10000	; 0x2710
   9277a:	4293      	cmp	r3, r2
   9277c:	d903      	bls.n	92786 <cl_hep_pumpFeedback_timer+0x36>
		{
			Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   9277e:	2101      	movs	r1, #1
   92780:	2035      	movs	r0, #53	; 0x35
   92782:	4b5d      	ldr	r3, [pc, #372]	; (928f8 <cl_hep_pumpFeedback_timer+0x1a8>)
   92784:	4798      	blx	r3
		}
		if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   92786:	4b58      	ldr	r3, [pc, #352]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   92788:	781b      	ldrb	r3, [r3, #0]
   9278a:	2b03      	cmp	r3, #3
   9278c:	d106      	bne.n	9279c <cl_hep_pumpFeedback_timer+0x4c>
   9278e:	4b5b      	ldr	r3, [pc, #364]	; (928fc <cl_hep_pumpFeedback_timer+0x1ac>)
   92790:	881b      	ldrh	r3, [r3, #0]
   92792:	2b02      	cmp	r3, #2
   92794:	d902      	bls.n	9279c <cl_hep_pumpFeedback_timer+0x4c>
		{
			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   92796:	4b54      	ldr	r3, [pc, #336]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   92798:	2204      	movs	r2, #4
   9279a:	701a      	strb	r2, [r3, #0]
		}

		if(count_state == false)
   9279c:	4b58      	ldr	r3, [pc, #352]	; (92900 <cl_hep_pumpFeedback_timer+0x1b0>)
   9279e:	781b      	ldrb	r3, [r3, #0]
   927a0:	f083 0301 	eor.w	r3, r3, #1
   927a4:	b2db      	uxtb	r3, r3
   927a6:	2b00      	cmp	r3, #0
   927a8:	d012      	beq.n	927d0 <cl_hep_pumpFeedback_timer+0x80>
		{
			if(hep_rotataion_marker == 0 )
   927aa:	4b50      	ldr	r3, [pc, #320]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   927ac:	881b      	ldrh	r3, [r3, #0]
   927ae:	2b00      	cmp	r3, #0
   927b0:	f040 8089 	bne.w	928c6 <cl_hep_pumpFeedback_timer+0x176>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   927b4:	4b53      	ldr	r3, [pc, #332]	; (92904 <cl_hep_pumpFeedback_timer+0x1b4>)
   927b6:	881a      	ldrh	r2, [r3, #0]
   927b8:	4b4c      	ldr	r3, [pc, #304]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   927ba:	881b      	ldrh	r3, [r3, #0]
   927bc:	429a      	cmp	r2, r3
   927be:	f000 8082 	beq.w	928c6 <cl_hep_pumpFeedback_timer+0x176>
				{
					count_state = true;
   927c2:	4b4f      	ldr	r3, [pc, #316]	; (92900 <cl_hep_pumpFeedback_timer+0x1b0>)
   927c4:	2201      	movs	r2, #1
   927c6:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					fivemscounter = 0;
   927c8:	4b4a      	ldr	r3, [pc, #296]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   927ca:	2200      	movs	r2, #0
   927cc:	801a      	strh	r2, [r3, #0]
   927ce:	e07a      	b.n	928c6 <cl_hep_pumpFeedback_timer+0x176>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   927d0:	4b46      	ldr	r3, [pc, #280]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   927d2:	881b      	ldrh	r3, [r3, #0]
   927d4:	2b00      	cmp	r3, #0
   927d6:	d176      	bne.n	928c6 <cl_hep_pumpFeedback_timer+0x176>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   927d8:	4b4a      	ldr	r3, [pc, #296]	; (92904 <cl_hep_pumpFeedback_timer+0x1b4>)
   927da:	881a      	ldrh	r2, [r3, #0]
   927dc:	4b43      	ldr	r3, [pc, #268]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   927de:	881b      	ldrh	r3, [r3, #0]
   927e0:	429a      	cmp	r2, r3
   927e2:	d070      	beq.n	928c6 <cl_hep_pumpFeedback_timer+0x176>
				{
					count_state = true;
   927e4:	4b46      	ldr	r3, [pc, #280]	; (92900 <cl_hep_pumpFeedback_timer+0x1b0>)
   927e6:	2201      	movs	r2, #1
   927e8:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   927ea:	4b44      	ldr	r3, [pc, #272]	; (928fc <cl_hep_pumpFeedback_timer+0x1ac>)
   927ec:	881b      	ldrh	r3, [r3, #0]
   927ee:	3301      	adds	r3, #1
   927f0:	b29a      	uxth	r2, r3
   927f2:	4b42      	ldr	r3, [pc, #264]	; (928fc <cl_hep_pumpFeedback_timer+0x1ac>)
   927f4:	801a      	strh	r2, [r3, #0]
					hep_period = fivemscounter*5;
   927f6:	4b3f      	ldr	r3, [pc, #252]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   927f8:	881b      	ldrh	r3, [r3, #0]
   927fa:	461a      	mov	r2, r3
   927fc:	0092      	lsls	r2, r2, #2
   927fe:	4413      	add	r3, r2
   92800:	b29a      	uxth	r2, r3
   92802:	4b41      	ldr	r3, [pc, #260]	; (92908 <cl_hep_pumpFeedback_timer+0x1b8>)
   92804:	801a      	strh	r2, [r3, #0]
				
					
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
					if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   92806:	4b38      	ldr	r3, [pc, #224]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   92808:	781b      	ldrb	r3, [r3, #0]
   9280a:	2b03      	cmp	r3, #3
   9280c:	d04e      	beq.n	928ac <cl_hep_pumpFeedback_timer+0x15c>
					{
						if(hep_period > (1.01 *hep_expected_period))
   9280e:	4b3e      	ldr	r3, [pc, #248]	; (92908 <cl_hep_pumpFeedback_timer+0x1b8>)
   92810:	881b      	ldrh	r3, [r3, #0]
   92812:	461a      	mov	r2, r3
   92814:	4b3d      	ldr	r3, [pc, #244]	; (9290c <cl_hep_pumpFeedback_timer+0x1bc>)
   92816:	4610      	mov	r0, r2
   92818:	4798      	blx	r3
   9281a:	4605      	mov	r5, r0
   9281c:	460e      	mov	r6, r1
   9281e:	4b3c      	ldr	r3, [pc, #240]	; (92910 <cl_hep_pumpFeedback_timer+0x1c0>)
   92820:	881b      	ldrh	r3, [r3, #0]
   92822:	461a      	mov	r2, r3
   92824:	4b39      	ldr	r3, [pc, #228]	; (9290c <cl_hep_pumpFeedback_timer+0x1bc>)
   92826:	4610      	mov	r0, r2
   92828:	4798      	blx	r3
   9282a:	4c3a      	ldr	r4, [pc, #232]	; (92914 <cl_hep_pumpFeedback_timer+0x1c4>)
   9282c:	a32a      	add	r3, pc, #168	; (adr r3, 928d8 <cl_hep_pumpFeedback_timer+0x188>)
   9282e:	e9d3 2300 	ldrd	r2, r3, [r3]
   92832:	47a0      	blx	r4
   92834:	4603      	mov	r3, r0
   92836:	460c      	mov	r4, r1
   92838:	461a      	mov	r2, r3
   9283a:	4623      	mov	r3, r4
   9283c:	4c36      	ldr	r4, [pc, #216]	; (92918 <cl_hep_pumpFeedback_timer+0x1c8>)
   9283e:	4628      	mov	r0, r5
   92840:	4631      	mov	r1, r6
   92842:	47a0      	blx	r4
   92844:	4603      	mov	r3, r0
   92846:	2b00      	cmp	r3, #0
   92848:	d007      	beq.n	9285a <cl_hep_pumpFeedback_timer+0x10a>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   9284a:	4b27      	ldr	r3, [pc, #156]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   9284c:	2206      	movs	r2, #6
   9284e:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   92850:	2101      	movs	r1, #1
   92852:	2035      	movs	r0, #53	; 0x35
   92854:	4b28      	ldr	r3, [pc, #160]	; (928f8 <cl_hep_pumpFeedback_timer+0x1a8>)
   92856:	4798      	blx	r3
   92858:	e028      	b.n	928ac <cl_hep_pumpFeedback_timer+0x15c>
						}
						else if(hep_period < (0.99 *hep_expected_period))
   9285a:	4b2b      	ldr	r3, [pc, #172]	; (92908 <cl_hep_pumpFeedback_timer+0x1b8>)
   9285c:	881b      	ldrh	r3, [r3, #0]
   9285e:	461a      	mov	r2, r3
   92860:	4b2a      	ldr	r3, [pc, #168]	; (9290c <cl_hep_pumpFeedback_timer+0x1bc>)
   92862:	4610      	mov	r0, r2
   92864:	4798      	blx	r3
   92866:	4605      	mov	r5, r0
   92868:	460e      	mov	r6, r1
   9286a:	4b29      	ldr	r3, [pc, #164]	; (92910 <cl_hep_pumpFeedback_timer+0x1c0>)
   9286c:	881b      	ldrh	r3, [r3, #0]
   9286e:	461a      	mov	r2, r3
   92870:	4b26      	ldr	r3, [pc, #152]	; (9290c <cl_hep_pumpFeedback_timer+0x1bc>)
   92872:	4610      	mov	r0, r2
   92874:	4798      	blx	r3
   92876:	4c27      	ldr	r4, [pc, #156]	; (92914 <cl_hep_pumpFeedback_timer+0x1c4>)
   92878:	a319      	add	r3, pc, #100	; (adr r3, 928e0 <cl_hep_pumpFeedback_timer+0x190>)
   9287a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9287e:	47a0      	blx	r4
   92880:	4603      	mov	r3, r0
   92882:	460c      	mov	r4, r1
   92884:	461a      	mov	r2, r3
   92886:	4623      	mov	r3, r4
   92888:	4c24      	ldr	r4, [pc, #144]	; (9291c <cl_hep_pumpFeedback_timer+0x1cc>)
   9288a:	4628      	mov	r0, r5
   9288c:	4631      	mov	r1, r6
   9288e:	47a0      	blx	r4
   92890:	4603      	mov	r3, r0
   92892:	2b00      	cmp	r3, #0
   92894:	d007      	beq.n	928a6 <cl_hep_pumpFeedback_timer+0x156>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   92896:	4b14      	ldr	r3, [pc, #80]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   92898:	2207      	movs	r2, #7
   9289a:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   9289c:	2101      	movs	r1, #1
   9289e:	2034      	movs	r0, #52	; 0x34
   928a0:	4b15      	ldr	r3, [pc, #84]	; (928f8 <cl_hep_pumpFeedback_timer+0x1a8>)
   928a2:	4798      	blx	r3
   928a4:	e002      	b.n	928ac <cl_hep_pumpFeedback_timer+0x15c>
						}
						else
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   928a6:	4b10      	ldr	r3, [pc, #64]	; (928e8 <cl_hep_pumpFeedback_timer+0x198>)
   928a8:	2205      	movs	r2, #5
   928aa:	701a      	strb	r2, [r3, #0]
						}
					}

				
					hep_freq_in_min  = ( 60000) / hep_period;
   928ac:	4b16      	ldr	r3, [pc, #88]	; (92908 <cl_hep_pumpFeedback_timer+0x1b8>)
   928ae:	881b      	ldrh	r3, [r3, #0]
   928b0:	461a      	mov	r2, r3
   928b2:	f64e 2360 	movw	r3, #60000	; 0xea60
   928b6:	fb93 f3f2 	sdiv	r3, r3, r2
   928ba:	b29a      	uxth	r2, r3
   928bc:	4b18      	ldr	r3, [pc, #96]	; (92920 <cl_hep_pumpFeedback_timer+0x1d0>)
   928be:	801a      	strh	r2, [r3, #0]
					fivemscounter = 0;
   928c0:	4b0c      	ldr	r3, [pc, #48]	; (928f4 <cl_hep_pumpFeedback_timer+0x1a4>)
   928c2:	2200      	movs	r2, #0
   928c4:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   928c6:	4b09      	ldr	r3, [pc, #36]	; (928ec <cl_hep_pumpFeedback_timer+0x19c>)
   928c8:	881a      	ldrh	r2, [r3, #0]
   928ca:	4b0e      	ldr	r3, [pc, #56]	; (92904 <cl_hep_pumpFeedback_timer+0x1b4>)
   928cc:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   928ce:	2300      	movs	r3, #0
}
   928d0:	4618      	mov	r0, r3
   928d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   928d4:	f3af 8000 	nop.w
   928d8:	c28f5c29 	.word	0xc28f5c29
   928dc:	3ff028f5 	.word	0x3ff028f5
   928e0:	7ae147ae 	.word	0x7ae147ae
   928e4:	3fefae14 	.word	0x3fefae14
   928e8:	200726a6 	.word	0x200726a6
   928ec:	200709fc 	.word	0x200709fc
   928f0:	0008d61d 	.word	0x0008d61d
   928f4:	200726a8 	.word	0x200726a8
   928f8:	00083105 	.word	0x00083105
   928fc:	200726ae 	.word	0x200726ae
   92900:	200726b0 	.word	0x200726b0
   92904:	200709fe 	.word	0x200709fe
   92908:	200726aa 	.word	0x200726aa
   9290c:	000a2b05 	.word	0x000a2b05
   92910:	200726a4 	.word	0x200726a4
   92914:	000a2bd1 	.word	0x000a2bd1
   92918:	000a30f1 	.word	0x000a30f1
   9291c:	000a30b5 	.word	0x000a30b5
   92920:	200726ac 	.word	0x200726ac

00092924 <cl_hep_pump_enddetction_timer>:

Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
{
   92924:	b580      	push	{r7, lr}
   92926:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   92928:	4915      	ldr	r1, [pc, #84]	; (92980 <cl_hep_pump_enddetction_timer+0x5c>)
   9292a:	2017      	movs	r0, #23
   9292c:	4b15      	ldr	r3, [pc, #84]	; (92984 <cl_hep_pump_enddetction_timer+0x60>)
   9292e:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   92930:	4b15      	ldr	r3, [pc, #84]	; (92988 <cl_hep_pump_enddetction_timer+0x64>)
   92932:	881a      	ldrh	r2, [r3, #0]
   92934:	4b12      	ldr	r3, [pc, #72]	; (92980 <cl_hep_pump_enddetction_timer+0x5c>)
   92936:	881b      	ldrh	r3, [r3, #0]
   92938:	429a      	cmp	r2, r3
   9293a:	d009      	beq.n	92950 <cl_hep_pump_enddetction_timer+0x2c>
			{
				prev_hp_start_status = hp_start_status;
   9293c:	4b10      	ldr	r3, [pc, #64]	; (92980 <cl_hep_pump_enddetction_timer+0x5c>)
   9293e:	881a      	ldrh	r2, [r3, #0]
   92940:	4b11      	ldr	r3, [pc, #68]	; (92988 <cl_hep_pump_enddetction_timer+0x64>)
   92942:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   92944:	4b0e      	ldr	r3, [pc, #56]	; (92980 <cl_hep_pump_enddetction_timer+0x5c>)
   92946:	881b      	ldrh	r3, [r3, #0]
   92948:	2b00      	cmp	r3, #0
   9294a:	d101      	bne.n	92950 <cl_hep_pump_enddetction_timer+0x2c>
				{
					sv_cntrl_resetHepa_dir();
   9294c:	4b0f      	ldr	r3, [pc, #60]	; (9298c <cl_hep_pump_enddetction_timer+0x68>)
   9294e:	4798      	blx	r3
			}
			



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   92950:	490f      	ldr	r1, [pc, #60]	; (92990 <cl_hep_pump_enddetction_timer+0x6c>)
   92952:	2018      	movs	r0, #24
   92954:	4b0b      	ldr	r3, [pc, #44]	; (92984 <cl_hep_pump_enddetction_timer+0x60>)
   92956:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   92958:	4b0e      	ldr	r3, [pc, #56]	; (92994 <cl_hep_pump_enddetction_timer+0x70>)
   9295a:	881a      	ldrh	r2, [r3, #0]
   9295c:	4b0c      	ldr	r3, [pc, #48]	; (92990 <cl_hep_pump_enddetction_timer+0x6c>)
   9295e:	881b      	ldrh	r3, [r3, #0]
   92960:	429a      	cmp	r2, r3
   92962:	d009      	beq.n	92978 <cl_hep_pump_enddetction_timer+0x54>
			{
				prev_hp_end_status = hp_end_status;
   92964:	4b0a      	ldr	r3, [pc, #40]	; (92990 <cl_hep_pump_enddetction_timer+0x6c>)
   92966:	881a      	ldrh	r2, [r3, #0]
   92968:	4b0a      	ldr	r3, [pc, #40]	; (92994 <cl_hep_pump_enddetction_timer+0x70>)
   9296a:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 1)
   9296c:	4b08      	ldr	r3, [pc, #32]	; (92990 <cl_hep_pump_enddetction_timer+0x6c>)
   9296e:	881b      	ldrh	r3, [r3, #0]
   92970:	2b01      	cmp	r3, #1
   92972:	d101      	bne.n	92978 <cl_hep_pump_enddetction_timer+0x54>
				{
						sv_cntrl_setHepa_dir();
   92974:	4b08      	ldr	r3, [pc, #32]	; (92998 <cl_hep_pump_enddetction_timer+0x74>)
   92976:	4798      	blx	r3
				}
			}
			
		}
		
		return 0;
   92978:	2300      	movs	r3, #0
   9297a:	4618      	mov	r0, r3
   9297c:	bd80      	pop	{r7, pc}
   9297e:	bf00      	nop
   92980:	200726b2 	.word	0x200726b2
   92984:	0008d61d 	.word	0x0008d61d
   92988:	200726b4 	.word	0x200726b4
   9298c:	00097555 	.word	0x00097555
   92990:	200726b6 	.word	0x200726b6
   92994:	200726b8 	.word	0x200726b8
   92998:	00097541 	.word	0x00097541

0009299c <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   9299c:	b580      	push	{r7, lr}
   9299e:	b084      	sub	sp, #16
   929a0:	af00      	add	r7, sp, #0
   929a2:	4603      	mov	r3, r0
   929a4:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   929a6:	79fb      	ldrb	r3, [r7, #7]
   929a8:	3b01      	subs	r3, #1
   929aa:	2b03      	cmp	r3, #3
   929ac:	d851      	bhi.n	92a52 <cl_level_switchcontroller+0xb6>
   929ae:	a201      	add	r2, pc, #4	; (adr r2, 929b4 <cl_level_switchcontroller+0x18>)
   929b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   929b4:	000929c5 	.word	0x000929c5
   929b8:	00092a53 	.word	0x00092a53
   929bc:	00092a53 	.word	0x00092a53
   929c0:	000929f3 	.word	0x000929f3
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   929c4:	203e      	movs	r0, #62	; 0x3e
   929c6:	4b27      	ldr	r3, [pc, #156]	; (92a64 <cl_level_switchcontroller+0xc8>)
   929c8:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   929ca:	203d      	movs	r0, #61	; 0x3d
   929cc:	4b25      	ldr	r3, [pc, #148]	; (92a64 <cl_level_switchcontroller+0xc8>)
   929ce:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   929d0:	202d      	movs	r0, #45	; 0x2d
   929d2:	4b24      	ldr	r3, [pc, #144]	; (92a64 <cl_level_switchcontroller+0xc8>)
   929d4:	4798      	blx	r3
		
		toggle_count++;
   929d6:	4b24      	ldr	r3, [pc, #144]	; (92a68 <cl_level_switchcontroller+0xcc>)
   929d8:	881b      	ldrh	r3, [r3, #0]
   929da:	3301      	adds	r3, #1
   929dc:	b29a      	uxth	r2, r3
   929de:	4b22      	ldr	r3, [pc, #136]	; (92a68 <cl_level_switchcontroller+0xcc>)
   929e0:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   929e2:	2300      	movs	r3, #0
   929e4:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   929e6:	4b20      	ldr	r3, [pc, #128]	; (92a68 <cl_level_switchcontroller+0xcc>)
   929e8:	881b      	ldrh	r3, [r3, #0]
   929ea:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   929ec:	2315      	movs	r3, #21
   929ee:	73bb      	strb	r3, [r7, #14]
			// low inlet flow alarm or level switch  malfunction
	//		Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);    commented
		}

	
		break;
   929f0:	e032      	b.n	92a58 <cl_level_switchcontroller+0xbc>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   929f2:	4b1e      	ldr	r3, [pc, #120]	; (92a6c <cl_level_switchcontroller+0xd0>)
   929f4:	781b      	ldrb	r3, [r3, #0]
   929f6:	2b01      	cmp	r3, #1
   929f8:	d113      	bne.n	92a22 <cl_level_switchcontroller+0x86>
		{
			//stop flow
			sv_cntrl_deactivate_valve(VALVE_ID1);
   929fa:	2001      	movs	r0, #1
   929fc:	4b1c      	ldr	r3, [pc, #112]	; (92a70 <cl_level_switchcontroller+0xd4>)
   929fe:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   92a00:	4b1a      	ldr	r3, [pc, #104]	; (92a6c <cl_level_switchcontroller+0xd0>)
   92a02:	2200      	movs	r2, #0
   92a04:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   92a06:	4b1b      	ldr	r3, [pc, #108]	; (92a74 <cl_level_switchcontroller+0xd8>)
   92a08:	2200      	movs	r2, #0
   92a0a:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   92a0c:	4b1a      	ldr	r3, [pc, #104]	; (92a78 <cl_level_switchcontroller+0xdc>)
   92a0e:	781b      	ldrb	r3, [r3, #0]
   92a10:	2b02      	cmp	r3, #2
   92a12:	d020      	beq.n	92a56 <cl_level_switchcontroller+0xba>
			{
				toggle_count = 0;
   92a14:	4b14      	ldr	r3, [pc, #80]	; (92a68 <cl_level_switchcontroller+0xcc>)
   92a16:	2200      	movs	r2, #0
   92a18:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   92a1a:	4b17      	ldr	r3, [pc, #92]	; (92a78 <cl_level_switchcontroller+0xdc>)
   92a1c:	2202      	movs	r2, #2
   92a1e:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   92a20:	e019      	b.n	92a56 <cl_level_switchcontroller+0xba>
				toggle_count = 0;
				v1_status = V1_OFF;
			}

		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   92a22:	4b12      	ldr	r3, [pc, #72]	; (92a6c <cl_level_switchcontroller+0xd0>)
   92a24:	781b      	ldrb	r3, [r3, #0]
   92a26:	2b02      	cmp	r3, #2
   92a28:	d115      	bne.n	92a56 <cl_level_switchcontroller+0xba>
		{
			//start flow
			sv_cntrl_activate_valve(VALVE_ID1);
   92a2a:	2001      	movs	r0, #1
   92a2c:	4b13      	ldr	r3, [pc, #76]	; (92a7c <cl_level_switchcontroller+0xe0>)
   92a2e:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   92a30:	4b0e      	ldr	r3, [pc, #56]	; (92a6c <cl_level_switchcontroller+0xd0>)
   92a32:	2200      	movs	r2, #0
   92a34:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   92a36:	4b12      	ldr	r3, [pc, #72]	; (92a80 <cl_level_switchcontroller+0xe4>)
   92a38:	2200      	movs	r2, #0
   92a3a:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   92a3c:	4b0e      	ldr	r3, [pc, #56]	; (92a78 <cl_level_switchcontroller+0xdc>)
   92a3e:	781b      	ldrb	r3, [r3, #0]
   92a40:	2b01      	cmp	r3, #1
   92a42:	d008      	beq.n	92a56 <cl_level_switchcontroller+0xba>
			{
				toggle_count = 0;
   92a44:	4b08      	ldr	r3, [pc, #32]	; (92a68 <cl_level_switchcontroller+0xcc>)
   92a46:	2200      	movs	r2, #0
   92a48:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   92a4a:	4b0b      	ldr	r3, [pc, #44]	; (92a78 <cl_level_switchcontroller+0xdc>)
   92a4c:	2201      	movs	r2, #1
   92a4e:	701a      	strb	r2, [r3, #0]
			}
			
		}
		break;
   92a50:	e001      	b.n	92a56 <cl_level_switchcontroller+0xba>
		default:break;
   92a52:	bf00      	nop
   92a54:	e000      	b.n	92a58 <cl_level_switchcontroller+0xbc>
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   92a56:	bf00      	nop
		default:break;
		
	}
	return CL_OK;
   92a58:	2300      	movs	r3, #0
   92a5a:	4618      	mov	r0, r3
   92a5c:	3710      	adds	r7, #16
   92a5e:	46bd      	mov	sp, r7
   92a60:	bd80      	pop	{r7, pc}
   92a62:	bf00      	nop
   92a64:	00083051 	.word	0x00083051
   92a68:	200726c2 	.word	0x200726c2
   92a6c:	200726bc 	.word	0x200726bc
   92a70:	00097511 	.word	0x00097511
   92a74:	200726c0 	.word	0x200726c0
   92a78:	200726c4 	.word	0x200726c4
   92a7c:	000974f1 	.word	0x000974f1
   92a80:	200726be 	.word	0x200726be

00092a84 <cl_isouf_controller>:
int Cl_ISOufTotalSecondscounter=0 ;

bool isouf = false;

Cl_ReturnCodeType cl_isouf_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   92a84:	b580      	push	{r7, lr}
   92a86:	b088      	sub	sp, #32
   92a88:	af00      	add	r7, sp, #0
   92a8a:	4603      	mov	r3, r0
   92a8c:	71fb      	strb	r3, [r7, #7]
	
//	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
	Cl_Uint16Type uf_delta_value = 0 ;
   92a8e:	2300      	movs	r3, #0
   92a90:	83fb      	strh	r3, [r7, #30]
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   92a92:	2300      	movs	r3, #0
   92a94:	61bb      	str	r3, [r7, #24]
	Cl_Uint32Type temptime = 0;
   92a96:	2300      	movs	r3, #0
   92a98:	617b      	str	r3, [r7, #20]
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   92a9a:	234d      	movs	r3, #77	; 0x4d
   92a9c:	74fb      	strb	r3, [r7, #19]
	Cl_Uint8Type data = 0;
   92a9e:	2300      	movs	r3, #0
   92aa0:	747b      	strb	r3, [r7, #17]
	Cl_Uint8Type datasize = 0;
   92aa2:	2300      	movs	r3, #0
   92aa4:	74bb      	strb	r3, [r7, #18]
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   92aa6:	2300      	movs	r3, #0
   92aa8:	60fb      	str	r3, [r7, #12]
	
	cl_isouf_events cl_isouf_event = EVENT_ISOUF_NULL_EVENT;
   92aaa:	2300      	movs	r3, #0
   92aac:	72fb      	strb	r3, [r7, #11]
	
	cl_isouf_retcode =  cl_isouf_translatemacevent( Cl_MacDlsisEvent, &cl_isouf_event);
   92aae:	f107 020b 	add.w	r2, r7, #11
   92ab2:	79fb      	ldrb	r3, [r7, #7]
   92ab4:	4611      	mov	r1, r2
   92ab6:	4618      	mov	r0, r3
   92ab8:	4b50      	ldr	r3, [pc, #320]	; (92bfc <cl_isouf_controller+0x178>)
   92aba:	4798      	blx	r3
   92abc:	4603      	mov	r3, r0
   92abe:	461a      	mov	r2, r3
   92ac0:	4b4f      	ldr	r3, [pc, #316]	; (92c00 <cl_isouf_controller+0x17c>)
   92ac2:	701a      	strb	r2, [r3, #0]
	
	switch(cl_isouf_state)
   92ac4:	4b4f      	ldr	r3, [pc, #316]	; (92c04 <cl_isouf_controller+0x180>)
   92ac6:	781b      	ldrb	r3, [r3, #0]
   92ac8:	2b07      	cmp	r3, #7
   92aca:	f200 8090 	bhi.w	92bee <cl_isouf_controller+0x16a>
   92ace:	a201      	add	r2, pc, #4	; (adr r2, 92ad4 <cl_isouf_controller+0x50>)
   92ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92ad4:	00092af5 	.word	0x00092af5
   92ad8:	00092b0b 	.word	0x00092b0b
   92adc:	00092ba9 	.word	0x00092ba9
   92ae0:	00092bef 	.word	0x00092bef
   92ae4:	00092bbf 	.word	0x00092bbf
   92ae8:	00092bef 	.word	0x00092bef
   92aec:	00092bef 	.word	0x00092bef
   92af0:	00092bdb 	.word	0x00092bdb
	{
			case CL_ISOUF_STATE_IDLE:
			switch (cl_isouf_event)
   92af4:	7afb      	ldrb	r3, [r7, #11]
   92af6:	2b16      	cmp	r3, #22
   92af8:	d000      	beq.n	92afc <cl_isouf_controller+0x78>
					
					Cl_Isouf_start();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
					break;
					default: break;
   92afa:	e005      	b.n	92b08 <cl_isouf_controller+0x84>
			switch (cl_isouf_event)
				
				{
					case EVENT_ISOUF_START:
					
					Cl_Isouf_start();
   92afc:	4b42      	ldr	r3, [pc, #264]	; (92c08 <cl_isouf_controller+0x184>)
   92afe:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   92b00:	4b40      	ldr	r3, [pc, #256]	; (92c04 <cl_isouf_controller+0x180>)
   92b02:	2201      	movs	r2, #1
   92b04:	701a      	strb	r2, [r3, #0]
					break;
   92b06:	bf00      	nop
					default: break;
				}
				break;
   92b08:	e072      	b.n	92bf0 <cl_isouf_controller+0x16c>
				
					
			case CL_ISOUF_STATE_STARTED:
			
			switch(cl_isouf_event){
   92b0a:	7afb      	ldrb	r3, [r7, #11]
   92b0c:	2b09      	cmp	r3, #9
   92b0e:	d007      	beq.n	92b20 <cl_isouf_controller+0x9c>
   92b10:	2b18      	cmp	r3, #24
   92b12:	d03e      	beq.n	92b92 <cl_isouf_controller+0x10e>
   92b14:	2b08      	cmp	r3, #8
   92b16:	d000      	beq.n	92b1a <cl_isouf_controller+0x96>
				// implement iso uf stop state
				// implement bp on event
				// implement bp off event  , iso uf should stop
				
				
				default: break;
   92b18:	e045      	b.n	92ba6 <cl_isouf_controller+0x122>
// 				cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
// 				break;
				
				case EVENT_ISOUF_TICK_500MS :
				
					cl_isouf_retcode == cl_checkforblooddetection();
   92b1a:	4b3c      	ldr	r3, [pc, #240]	; (92c0c <cl_isouf_controller+0x188>)
   92b1c:	4798      	blx	r3
				
				break;
   92b1e:	e042      	b.n	92ba6 <cl_isouf_controller+0x122>
				
				case EVENT_ISOUF_TICK_SECOND :
				
					Cl_ISOufTotalSecondscounter ++ ;
   92b20:	4b3b      	ldr	r3, [pc, #236]	; (92c10 <cl_isouf_controller+0x18c>)
   92b22:	681b      	ldr	r3, [r3, #0]
   92b24:	3301      	adds	r3, #1
   92b26:	4a3a      	ldr	r2, [pc, #232]	; (92c10 <cl_isouf_controller+0x18c>)
   92b28:	6013      	str	r3, [r2, #0]
				
					if(cl_isouf_retcode == CL_OK){
   92b2a:	4b35      	ldr	r3, [pc, #212]	; (92c00 <cl_isouf_controller+0x17c>)
   92b2c:	781b      	ldrb	r3, [r3, #0]
   92b2e:	2b00      	cmp	r3, #0
   92b30:	d138      	bne.n	92ba4 <cl_isouf_controller+0x120>
					
					// check for completion
					//cl_sendisoufdata();
						Cl_Iso_Senddata();
   92b32:	4b38      	ldr	r3, [pc, #224]	; (92c14 <cl_isouf_controller+0x190>)
   92b34:	4798      	blx	r3
						if(Cl_ISOufTotalSecondscounter >= Treatdata[ID_treattime]*60){
   92b36:	4b38      	ldr	r3, [pc, #224]	; (92c18 <cl_isouf_controller+0x194>)
   92b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   92b3a:	4613      	mov	r3, r2
   92b3c:	011b      	lsls	r3, r3, #4
   92b3e:	1a9b      	subs	r3, r3, r2
   92b40:	009b      	lsls	r3, r3, #2
   92b42:	461a      	mov	r2, r3
   92b44:	4b32      	ldr	r3, [pc, #200]	; (92c10 <cl_isouf_controller+0x18c>)
   92b46:	681b      	ldr	r3, [r3, #0]
   92b48:	429a      	cmp	r2, r3
   92b4a:	d82b      	bhi.n	92ba4 <cl_isouf_controller+0x120>
						
						// complete
						cl_isouf_retcode == cl_isoufcompleted();
   92b4c:	4b33      	ldr	r3, [pc, #204]	; (92c1c <cl_isouf_controller+0x198>)
   92b4e:	4798      	blx	r3
						if(cl_isouf_retcode == CL_OK){
   92b50:	4b2b      	ldr	r3, [pc, #172]	; (92c00 <cl_isouf_controller+0x17c>)
   92b52:	781b      	ldrb	r3, [r3, #0]
   92b54:	2b00      	cmp	r3, #0
   92b56:	d125      	bne.n	92ba4 <cl_isouf_controller+0x120>
							
												
							cl_isouf_state = CL_ISOUF_STATE_COMPLETED;
   92b58:	4b2a      	ldr	r3, [pc, #168]	; (92c04 <cl_isouf_controller+0x180>)
   92b5a:	2204      	movs	r2, #4
   92b5c:	701a      	strb	r2, [r3, #0]
							isouf = false;
   92b5e:	4b30      	ldr	r3, [pc, #192]	; (92c20 <cl_isouf_controller+0x19c>)
   92b60:	2200      	movs	r2, #0
   92b62:	701a      	strb	r2, [r3, #0]
							command = CON_TX_COMMAND_COMMAND_ISOUF_COMPLETED;
   92b64:	234a      	movs	r3, #74	; 0x4a
   92b66:	74fb      	strb	r3, [r7, #19]
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   92b68:	2301      	movs	r3, #1
   92b6a:	747b      	strb	r3, [r7, #17]
							cl_isouf_retcode = Cl_SendDatatoconsole(command,&data,1);
   92b6c:	f107 0111 	add.w	r1, r7, #17
   92b70:	7cfb      	ldrb	r3, [r7, #19]
   92b72:	2201      	movs	r2, #1
   92b74:	4618      	mov	r0, r3
   92b76:	4b2b      	ldr	r3, [pc, #172]	; (92c24 <cl_isouf_controller+0x1a0>)
   92b78:	4798      	blx	r3
   92b7a:	4603      	mov	r3, r0
   92b7c:	461a      	mov	r2, r3
   92b7e:	4b20      	ldr	r3, [pc, #128]	; (92c00 <cl_isouf_controller+0x17c>)
   92b80:	701a      	strb	r2, [r3, #0]
							cl_isouf_retcode = Cl_mac_apprequesthandler(MACREQ_ISOUF_COMPLETED);
   92b82:	205a      	movs	r0, #90	; 0x5a
   92b84:	4b28      	ldr	r3, [pc, #160]	; (92c28 <cl_isouf_controller+0x1a4>)
   92b86:	4798      	blx	r3
   92b88:	4603      	mov	r3, r0
   92b8a:	461a      	mov	r2, r3
   92b8c:	4b1c      	ldr	r3, [pc, #112]	; (92c00 <cl_isouf_controller+0x17c>)
   92b8e:	701a      	strb	r2, [r3, #0]
				}	
				else{
					// raise alarm
				}
				
				break;
   92b90:	e008      	b.n	92ba4 <cl_isouf_controller+0x120>
				
				
				case EVENT_ISOUF_STOP :
				
					Cl_Isouf_stop();
   92b92:	4b26      	ldr	r3, [pc, #152]	; (92c2c <cl_isouf_controller+0x1a8>)
   92b94:	4798      	blx	r3
				// stop uf pump
					isouf = false;
   92b96:	4b22      	ldr	r3, [pc, #136]	; (92c20 <cl_isouf_controller+0x19c>)
   92b98:	2200      	movs	r2, #0
   92b9a:	701a      	strb	r2, [r3, #0]
					cl_isouf_state = CL_ISOUF_STATE_STOPPED;
   92b9c:	4b19      	ldr	r3, [pc, #100]	; (92c04 <cl_isouf_controller+0x180>)
   92b9e:	2202      	movs	r2, #2
   92ba0:	701a      	strb	r2, [r3, #0]
				
				break;
   92ba2:	e000      	b.n	92ba6 <cl_isouf_controller+0x122>
				}	
				else{
					// raise alarm
				}
				
				break;
   92ba4:	bf00      	nop
				
				default: break;
				
			}
			
			break;
   92ba6:	e023      	b.n	92bf0 <cl_isouf_controller+0x16c>
			
			case CL_ISOUF_STATE_STOPPED:
			
				switch(cl_isouf_event){
   92ba8:	7afb      	ldrb	r3, [r7, #11]
   92baa:	2b16      	cmp	r3, #22
   92bac:	d000      	beq.n	92bb0 <cl_isouf_controller+0x12c>
					cl_dialysate_ready_isouf();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
					
				default: break;	
   92bae:	e005      	b.n	92bbc <cl_isouf_controller+0x138>
				switch(cl_isouf_event){
					
					case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					cl_dialysate_ready_isouf();
   92bb0:	4b1f      	ldr	r3, [pc, #124]	; (92c30 <cl_isouf_controller+0x1ac>)
   92bb2:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   92bb4:	4b13      	ldr	r3, [pc, #76]	; (92c04 <cl_isouf_controller+0x180>)
   92bb6:	2201      	movs	r2, #1
   92bb8:	701a      	strb	r2, [r3, #0]
				break;
   92bba:	bf00      	nop
				default: break;	
					
					
				}
			
			break;
   92bbc:	e018      	b.n	92bf0 <cl_isouf_controller+0x16c>
			
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
   92bbe:	7afb      	ldrb	r3, [r7, #11]
   92bc0:	2b09      	cmp	r3, #9
   92bc2:	d008      	beq.n	92bd6 <cl_isouf_controller+0x152>
   92bc4:	2b16      	cmp	r3, #22
   92bc6:	d000      	beq.n	92bca <cl_isouf_controller+0x146>
					cl_dialysate_ready_isouf();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
			
			default : break;	
   92bc8:	e006      	b.n	92bd8 <cl_isouf_controller+0x154>
				break;
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					cl_dialysate_ready_isouf();
   92bca:	4b19      	ldr	r3, [pc, #100]	; (92c30 <cl_isouf_controller+0x1ac>)
   92bcc:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   92bce:	4b0d      	ldr	r3, [pc, #52]	; (92c04 <cl_isouf_controller+0x180>)
   92bd0:	2201      	movs	r2, #1
   92bd2:	701a      	strb	r2, [r3, #0]
				break;
   92bd4:	e000      	b.n	92bd8 <cl_isouf_controller+0x154>
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   92bd6:	bf00      	nop
				break;
			
			default : break;	
			
			}
			break;
   92bd8:	e00a      	b.n	92bf0 <cl_isouf_controller+0x16c>
			
			case CL_ISOUF_STATE_POST_COMPLETION:
			
			switch(cl_isouf_event){
   92bda:	7afb      	ldrb	r3, [r7, #11]
   92bdc:	2b09      	cmp	r3, #9
   92bde:	d002      	beq.n	92be6 <cl_isouf_controller+0x162>
   92be0:	2b0e      	cmp	r3, #14
   92be2:	d002      	beq.n	92bea <cl_isouf_controller+0x166>
				
				break;
				
				
				
				default:break;
   92be4:	e002      	b.n	92bec <cl_isouf_controller+0x168>
			
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   92be6:	bf00      	nop
   92be8:	e002      	b.n	92bf0 <cl_isouf_controller+0x16c>
				
				case EVENT_ISOUF_START_RETURN:
				
				break;
   92bea:	bf00      	nop
				
				
				default:break;
			}
			
			break;
   92bec:	e000      	b.n	92bf0 <cl_isouf_controller+0x16c>
			
			default:break;
   92bee:	bf00      	nop
			
			
	}
	return CL_OK;
   92bf0:	2300      	movs	r3, #0
	
	
}
   92bf2:	4618      	mov	r0, r3
   92bf4:	3720      	adds	r7, #32
   92bf6:	46bd      	mov	sp, r7
   92bf8:	bd80      	pop	{r7, pc}
   92bfa:	bf00      	nop
   92bfc:	000934a5 	.word	0x000934a5
   92c00:	200726c6 	.word	0x200726c6
   92c04:	200726c5 	.word	0x200726c5
   92c08:	00092c6d 	.word	0x00092c6d
   92c0c:	00093479 	.word	0x00093479
   92c10:	200726c8 	.word	0x200726c8
   92c14:	00092ce9 	.word	0x00092ce9
   92c18:	20073194 	.word	0x20073194
   92c1c:	000936d9 	.word	0x000936d9
   92c20:	200726cc 	.word	0x200726cc
   92c24:	0009926d 	.word	0x0009926d
   92c28:	0008a479 	.word	0x0008a479
   92c2c:	00092c35 	.word	0x00092c35
   92c30:	000936f1 	.word	0x000936f1

00092c34 <Cl_Isouf_stop>:

Cl_ReturnCodeType Cl_Isouf_stop(){
   92c34:	b580      	push	{r7, lr}
   92c36:	b082      	sub	sp, #8
   92c38:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   92c3a:	2100      	movs	r1, #0
   92c3c:	2004      	movs	r0, #4
   92c3e:	4b08      	ldr	r3, [pc, #32]	; (92c60 <Cl_Isouf_stop+0x2c>)
   92c40:	4798      	blx	r3
	
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STOPPED,&data,0);
   92c42:	1dfb      	adds	r3, r7, #7
   92c44:	2200      	movs	r2, #0
   92c46:	4619      	mov	r1, r3
   92c48:	204c      	movs	r0, #76	; 0x4c
   92c4a:	4b06      	ldr	r3, [pc, #24]	; (92c64 <Cl_Isouf_stop+0x30>)
   92c4c:	4798      	blx	r3
   92c4e:	4603      	mov	r3, r0
   92c50:	461a      	mov	r2, r3
   92c52:	4b05      	ldr	r3, [pc, #20]	; (92c68 <Cl_Isouf_stop+0x34>)
   92c54:	701a      	strb	r2, [r3, #0]
	
}
   92c56:	bf00      	nop
   92c58:	4618      	mov	r0, r3
   92c5a:	3708      	adds	r7, #8
   92c5c:	46bd      	mov	sp, r7
   92c5e:	bd80      	pop	{r7, pc}
   92c60:	0009381d 	.word	0x0009381d
   92c64:	0009926d 	.word	0x0009926d
   92c68:	200726c6 	.word	0x200726c6

00092c6c <Cl_Isouf_start>:

Cl_ReturnCodeType Cl_Isouf_start(){
   92c6c:	b580      	push	{r7, lr}
   92c6e:	b082      	sub	sp, #8
   92c70:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	Cl_ISOufTotalSecondscounter = 0;
   92c72:	4b14      	ldr	r3, [pc, #80]	; (92cc4 <Cl_Isouf_start+0x58>)
   92c74:	2200      	movs	r2, #0
   92c76:	601a      	str	r2, [r3, #0]
	//	cl_dialysate_ready_isouf();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   92c78:	200d      	movs	r0, #13
   92c7a:	4b13      	ldr	r3, [pc, #76]	; (92cc8 <Cl_Isouf_start+0x5c>)
   92c7c:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID14);
   92c7e:	200e      	movs	r0, #14
   92c80:	4b12      	ldr	r3, [pc, #72]	; (92ccc <Cl_Isouf_start+0x60>)
   92c82:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID15);
   92c84:	200f      	movs	r0, #15
   92c86:	4b11      	ldr	r3, [pc, #68]	; (92ccc <Cl_Isouf_start+0x60>)
   92c88:	4798      	blx	r3
	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   92c8a:	2100      	movs	r1, #0
   92c8c:	200a      	movs	r0, #10
   92c8e:	4b10      	ldr	r3, [pc, #64]	; (92cd0 <Cl_Isouf_start+0x64>)
   92c90:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   92c92:	2100      	movs	r1, #0
   92c94:	2002      	movs	r0, #2
   92c96:	4b0f      	ldr	r3, [pc, #60]	; (92cd4 <Cl_Isouf_start+0x68>)
   92c98:	4798      	blx	r3
	
	isouf = true;
   92c9a:	4b0f      	ldr	r3, [pc, #60]	; (92cd8 <Cl_Isouf_start+0x6c>)
   92c9c:	2201      	movs	r2, #1
   92c9e:	701a      	strb	r2, [r3, #0]
	//cl_sendisoufdata();

	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STARTED,&data,0);
   92ca0:	1dfb      	adds	r3, r7, #7
   92ca2:	2200      	movs	r2, #0
   92ca4:	4619      	mov	r1, r3
   92ca6:	204b      	movs	r0, #75	; 0x4b
   92ca8:	4b0c      	ldr	r3, [pc, #48]	; (92cdc <Cl_Isouf_start+0x70>)
   92caa:	4798      	blx	r3
   92cac:	4603      	mov	r3, r0
   92cae:	461a      	mov	r2, r3
   92cb0:	4b0b      	ldr	r3, [pc, #44]	; (92ce0 <Cl_Isouf_start+0x74>)
   92cb2:	701a      	strb	r2, [r3, #0]
	
		Cl_Iso_UpdateTimeInfo();
   92cb4:	4b0b      	ldr	r3, [pc, #44]	; (92ce4 <Cl_Isouf_start+0x78>)
   92cb6:	4798      	blx	r3
}
   92cb8:	bf00      	nop
   92cba:	4618      	mov	r0, r3
   92cbc:	3708      	adds	r7, #8
   92cbe:	46bd      	mov	sp, r7
   92cc0:	bd80      	pop	{r7, pc}
   92cc2:	bf00      	nop
   92cc4:	200726c8 	.word	0x200726c8
   92cc8:	00097511 	.word	0x00097511
   92ccc:	000974f1 	.word	0x000974f1
   92cd0:	00092169 	.word	0x00092169
   92cd4:	0009381d 	.word	0x0009381d
   92cd8:	200726cc 	.word	0x200726cc
   92cdc:	0009926d 	.word	0x0009926d
   92ce0:	200726c6 	.word	0x200726c6
   92ce4:	00093435 	.word	0x00093435

00092ce8 <Cl_Iso_Senddata>:

Cl_ReturnCodeType Cl_Iso_Senddata(){
   92ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   92cea:	b093      	sub	sp, #76	; 0x4c
   92cec:	af00      	add	r7, sp, #0
	
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   92cee:	f107 0310 	add.w	r3, r7, #16
   92cf2:	2228      	movs	r2, #40	; 0x28
   92cf4:	2100      	movs	r1, #0
   92cf6:	4618      	mov	r0, r3
   92cf8:	4b7b      	ldr	r3, [pc, #492]	; (92ee8 <Cl_Iso_Senddata+0x200>)
   92cfa:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   92cfc:	2300      	movs	r3, #0
   92cfe:	80fb      	strh	r3, [r7, #6]
   92d00:	2300      	movs	r3, #0
   92d02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   92d06:	2300      	movs	r3, #0
   92d08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	Cl_Uint8Type count = 0;
   92d0c:	2300      	movs	r3, #0
   92d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   92d12:	234d      	movs	r3, #77	; 0x4d
   92d14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   92d18:	232a      	movs	r3, #42	; 0x2a
   92d1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	systemdataarray[0] = ISOUF_DATA;
   92d1e:	230c      	movs	r3, #12
   92d20:	743b      	strb	r3, [r7, #16]
	count++;
   92d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92d26:	3301      	adds	r3, #1
   92d28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   92d2c:	1dbb      	adds	r3, r7, #6
   92d2e:	4619      	mov	r1, r3
   92d30:	2014      	movs	r0, #20
   92d32:	4b6e      	ldr	r3, [pc, #440]	; (92eec <Cl_Iso_Senddata+0x204>)
   92d34:	4798      	blx	r3
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// //							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 31 -20;
// //							avgtmp3 =(avgtmp3*5 + temp1)/6;
// 							avgtmp3 = (res_temp_value  - 0.4)/10;
							avgtmp3 = (float)temp/10;
   92d36:	88fa      	ldrh	r2, [r7, #6]
   92d38:	4b6d      	ldr	r3, [pc, #436]	; (92ef0 <Cl_Iso_Senddata+0x208>)
   92d3a:	4610      	mov	r0, r2
   92d3c:	4798      	blx	r3
   92d3e:	4602      	mov	r2, r0
   92d40:	4b6c      	ldr	r3, [pc, #432]	; (92ef4 <Cl_Iso_Senddata+0x20c>)
   92d42:	496d      	ldr	r1, [pc, #436]	; (92ef8 <Cl_Iso_Senddata+0x210>)
   92d44:	4610      	mov	r0, r2
   92d46:	4798      	blx	r3
   92d48:	4603      	mov	r3, r0
   92d4a:	461a      	mov	r2, r3
   92d4c:	4b6b      	ldr	r3, [pc, #428]	; (92efc <Cl_Iso_Senddata+0x214>)
   92d4e:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   92d50:	1dbb      	adds	r3, r7, #6
   92d52:	4619      	mov	r1, r3
   92d54:	2007      	movs	r0, #7
   92d56:	4b65      	ldr	r3, [pc, #404]	; (92eec <Cl_Iso_Senddata+0x204>)
   92d58:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				
				if (temp > 50)
   92d5a:	88fb      	ldrh	r3, [r7, #6]
   92d5c:	2b32      	cmp	r3, #50	; 0x32
   92d5e:	f240 80e5 	bls.w	92f2c <Cl_Iso_Senddata+0x244>
			{
				//	calibration_cond(temp);
					cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   92d62:	88fb      	ldrh	r3, [r7, #6]
   92d64:	461a      	mov	r2, r3
   92d66:	4b66      	ldr	r3, [pc, #408]	; (92f00 <Cl_Iso_Senddata+0x218>)
   92d68:	4610      	mov	r0, r2
   92d6a:	4798      	blx	r3
   92d6c:	4c65      	ldr	r4, [pc, #404]	; (92f04 <Cl_Iso_Senddata+0x21c>)
   92d6e:	a356      	add	r3, pc, #344	; (adr r3, 92ec8 <Cl_Iso_Senddata+0x1e0>)
   92d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   92d74:	47a0      	blx	r4
   92d76:	4603      	mov	r3, r0
   92d78:	460c      	mov	r4, r1
   92d7a:	461d      	mov	r5, r3
   92d7c:	4626      	mov	r6, r4
   92d7e:	88fb      	ldrh	r3, [r7, #6]
   92d80:	461a      	mov	r2, r3
   92d82:	4b5f      	ldr	r3, [pc, #380]	; (92f00 <Cl_Iso_Senddata+0x218>)
   92d84:	4610      	mov	r0, r2
   92d86:	4798      	blx	r3
   92d88:	4602      	mov	r2, r0
   92d8a:	460b      	mov	r3, r1
   92d8c:	4c5d      	ldr	r4, [pc, #372]	; (92f04 <Cl_Iso_Senddata+0x21c>)
   92d8e:	4628      	mov	r0, r5
   92d90:	4631      	mov	r1, r6
   92d92:	47a0      	blx	r4
   92d94:	4603      	mov	r3, r0
   92d96:	460c      	mov	r4, r1
   92d98:	461d      	mov	r5, r3
   92d9a:	4626      	mov	r6, r4
   92d9c:	88fb      	ldrh	r3, [r7, #6]
   92d9e:	461a      	mov	r2, r3
   92da0:	4b57      	ldr	r3, [pc, #348]	; (92f00 <Cl_Iso_Senddata+0x218>)
   92da2:	4610      	mov	r0, r2
   92da4:	4798      	blx	r3
   92da6:	4c57      	ldr	r4, [pc, #348]	; (92f04 <Cl_Iso_Senddata+0x21c>)
   92da8:	a349      	add	r3, pc, #292	; (adr r3, 92ed0 <Cl_Iso_Senddata+0x1e8>)
   92daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   92dae:	47a0      	blx	r4
   92db0:	4603      	mov	r3, r0
   92db2:	460c      	mov	r4, r1
   92db4:	461a      	mov	r2, r3
   92db6:	4623      	mov	r3, r4
   92db8:	4c53      	ldr	r4, [pc, #332]	; (92f08 <Cl_Iso_Senddata+0x220>)
   92dba:	4628      	mov	r0, r5
   92dbc:	4631      	mov	r1, r6
   92dbe:	47a0      	blx	r4
   92dc0:	4603      	mov	r3, r0
   92dc2:	460c      	mov	r4, r1
   92dc4:	4618      	mov	r0, r3
   92dc6:	4621      	mov	r1, r4
   92dc8:	4c50      	ldr	r4, [pc, #320]	; (92f0c <Cl_Iso_Senddata+0x224>)
   92dca:	a343      	add	r3, pc, #268	; (adr r3, 92ed8 <Cl_Iso_Senddata+0x1f0>)
   92dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   92dd0:	47a0      	blx	r4
   92dd2:	4603      	mov	r3, r0
   92dd4:	460c      	mov	r4, r1
   92dd6:	4619      	mov	r1, r3
   92dd8:	4622      	mov	r2, r4
   92dda:	4b4d      	ldr	r3, [pc, #308]	; (92f10 <Cl_Iso_Senddata+0x228>)
   92ddc:	4608      	mov	r0, r1
   92dde:	4611      	mov	r1, r2
   92de0:	4798      	blx	r3
   92de2:	4602      	mov	r2, r0
   92de4:	4b4b      	ldr	r3, [pc, #300]	; (92f14 <Cl_Iso_Senddata+0x22c>)
   92de6:	601a      	str	r2, [r3, #0]
				//	cond =(cond*5 + cond_final_cs3)/6;
					cond_comp= cond/(1+(avgtmp3/10-25.0)*0.020);
   92de8:	4b4a      	ldr	r3, [pc, #296]	; (92f14 <Cl_Iso_Senddata+0x22c>)
   92dea:	681a      	ldr	r2, [r3, #0]
   92dec:	4b4a      	ldr	r3, [pc, #296]	; (92f18 <Cl_Iso_Senddata+0x230>)
   92dee:	4610      	mov	r0, r2
   92df0:	4798      	blx	r3
   92df2:	4605      	mov	r5, r0
   92df4:	460e      	mov	r6, r1
   92df6:	4b41      	ldr	r3, [pc, #260]	; (92efc <Cl_Iso_Senddata+0x214>)
   92df8:	681a      	ldr	r2, [r3, #0]
   92dfa:	4b3e      	ldr	r3, [pc, #248]	; (92ef4 <Cl_Iso_Senddata+0x20c>)
   92dfc:	493e      	ldr	r1, [pc, #248]	; (92ef8 <Cl_Iso_Senddata+0x210>)
   92dfe:	4610      	mov	r0, r2
   92e00:	4798      	blx	r3
   92e02:	4603      	mov	r3, r0
   92e04:	461a      	mov	r2, r3
   92e06:	4b44      	ldr	r3, [pc, #272]	; (92f18 <Cl_Iso_Senddata+0x230>)
   92e08:	4610      	mov	r0, r2
   92e0a:	4798      	blx	r3
   92e0c:	4c3f      	ldr	r4, [pc, #252]	; (92f0c <Cl_Iso_Senddata+0x224>)
   92e0e:	f04f 0200 	mov.w	r2, #0
   92e12:	4b42      	ldr	r3, [pc, #264]	; (92f1c <Cl_Iso_Senddata+0x234>)
   92e14:	47a0      	blx	r4
   92e16:	4603      	mov	r3, r0
   92e18:	460c      	mov	r4, r1
   92e1a:	4618      	mov	r0, r3
   92e1c:	4621      	mov	r1, r4
   92e1e:	4c39      	ldr	r4, [pc, #228]	; (92f04 <Cl_Iso_Senddata+0x21c>)
   92e20:	a32f      	add	r3, pc, #188	; (adr r3, 92ee0 <Cl_Iso_Senddata+0x1f8>)
   92e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   92e26:	47a0      	blx	r4
   92e28:	4603      	mov	r3, r0
   92e2a:	460c      	mov	r4, r1
   92e2c:	4618      	mov	r0, r3
   92e2e:	4621      	mov	r1, r4
   92e30:	4c35      	ldr	r4, [pc, #212]	; (92f08 <Cl_Iso_Senddata+0x220>)
   92e32:	f04f 0200 	mov.w	r2, #0
   92e36:	4b3a      	ldr	r3, [pc, #232]	; (92f20 <Cl_Iso_Senddata+0x238>)
   92e38:	47a0      	blx	r4
   92e3a:	4603      	mov	r3, r0
   92e3c:	460c      	mov	r4, r1
   92e3e:	461a      	mov	r2, r3
   92e40:	4623      	mov	r3, r4
   92e42:	4c38      	ldr	r4, [pc, #224]	; (92f24 <Cl_Iso_Senddata+0x23c>)
   92e44:	4628      	mov	r0, r5
   92e46:	4631      	mov	r1, r6
   92e48:	47a0      	blx	r4
   92e4a:	4603      	mov	r3, r0
   92e4c:	460c      	mov	r4, r1
   92e4e:	4619      	mov	r1, r3
   92e50:	4622      	mov	r2, r4
   92e52:	4b2f      	ldr	r3, [pc, #188]	; (92f10 <Cl_Iso_Senddata+0x228>)
   92e54:	4608      	mov	r0, r1
   92e56:	4611      	mov	r1, r2
   92e58:	4798      	blx	r3
   92e5a:	4603      	mov	r3, r0
   92e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
				
					
					tempdata.word = (cond_comp);
   92e5e:	4b32      	ldr	r3, [pc, #200]	; (92f28 <Cl_Iso_Senddata+0x240>)
   92e60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   92e62:	4798      	blx	r3
   92e64:	4603      	mov	r3, r0
   92e66:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   92e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92e6c:	1c5a      	adds	r2, r3, #1
   92e6e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92e72:	7a3a      	ldrb	r2, [r7, #8]
   92e74:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92e78:	440b      	add	r3, r1
   92e7a:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[1];
   92e7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92e82:	1c5a      	adds	r2, r3, #1
   92e84:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92e88:	7a7a      	ldrb	r2, [r7, #9]
   92e8a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92e8e:	440b      	add	r3, r1
   92e90:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[2];
   92e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92e98:	1c5a      	adds	r2, r3, #1
   92e9a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92e9e:	7aba      	ldrb	r2, [r7, #10]
   92ea0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92ea4:	440b      	add	r3, r1
   92ea6:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[3];
   92eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92eae:	1c5a      	adds	r2, r3, #1
   92eb0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92eb4:	7afa      	ldrb	r2, [r7, #11]
   92eb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92eba:	440b      	add	r3, r1
   92ebc:	f803 2c38 	strb.w	r2, [r3, #-56]
   92ec0:	e062      	b.n	92f88 <Cl_Iso_Senddata+0x2a0>
   92ec2:	bf00      	nop
   92ec4:	f3af 8000 	nop.w
   92ec8:	eb1c432d 	.word	0xeb1c432d
   92ecc:	bf1a36e2 	.word	0xbf1a36e2
   92ed0:	70a3d70a 	.word	0x70a3d70a
   92ed4:	3fd70a3d 	.word	0x3fd70a3d
   92ed8:	851eb852 	.word	0x851eb852
   92edc:	404331eb 	.word	0x404331eb
   92ee0:	47ae147b 	.word	0x47ae147b
   92ee4:	3f947ae1 	.word	0x3f947ae1
   92ee8:	000a39a5 	.word	0x000a39a5
   92eec:	0008d61d 	.word	0x0008d61d
   92ef0:	000a33a1 	.word	0x000a33a1
   92ef4:	000a35b9 	.word	0x000a35b9
   92ef8:	41200000 	.word	0x41200000
   92efc:	200726d0 	.word	0x200726d0
   92f00:	000a2b05 	.word	0x000a2b05
   92f04:	000a2bd1 	.word	0x000a2bd1
   92f08:	000a286d 	.word	0x000a286d
   92f0c:	000a2869 	.word	0x000a2869
   92f10:	000a3195 	.word	0x000a3195
   92f14:	200726d4 	.word	0x200726d4
   92f18:	000a2b29 	.word	0x000a2b29
   92f1c:	40390000 	.word	0x40390000
   92f20:	3ff00000 	.word	0x3ff00000
   92f24:	000a2e25 	.word	0x000a2e25
   92f28:	000a3829 	.word	0x000a3829
			}
				else
				{
					tempdata.word = 0;
   92f2c:	2300      	movs	r3, #0
   92f2e:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   92f30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92f34:	1c5a      	adds	r2, r3, #1
   92f36:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92f3a:	7a3a      	ldrb	r2, [r7, #8]
   92f3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92f40:	440b      	add	r3, r1
   92f42:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1];
   92f46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92f4a:	1c5a      	adds	r2, r3, #1
   92f4c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92f50:	7a7a      	ldrb	r2, [r7, #9]
   92f52:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92f56:	440b      	add	r3, r1
   92f58:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2];
   92f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92f60:	1c5a      	adds	r2, r3, #1
   92f62:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92f66:	7aba      	ldrb	r2, [r7, #10]
   92f68:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92f6c:	440b      	add	r3, r1
   92f6e:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3];
   92f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92f76:	1c5a      	adds	r2, r3, #1
   92f78:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92f7c:	7afa      	ldrb	r2, [r7, #11]
   92f7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92f82:	440b      	add	r3, r1
   92f84:	f803 2c38 	strb.w	r2, [r3, #-56]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   92f88:	4bb1      	ldr	r3, [pc, #708]	; (93250 <Cl_Iso_Senddata+0x568>)
   92f8a:	681a      	ldr	r2, [r3, #0]
   92f8c:	4bb1      	ldr	r3, [pc, #708]	; (93254 <Cl_Iso_Senddata+0x56c>)
   92f8e:	4610      	mov	r0, r2
   92f90:	4798      	blx	r3
   92f92:	4603      	mov	r3, r0
   92f94:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   92f96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92f9a:	1c5a      	adds	r2, r3, #1
   92f9c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92fa0:	7a3a      	ldrb	r2, [r7, #8]
   92fa2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92fa6:	440b      	add	r3, r1
   92fa8:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1];
   92fac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92fb0:	1c5a      	adds	r2, r3, #1
   92fb2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92fb6:	7a7a      	ldrb	r2, [r7, #9]
   92fb8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92fbc:	440b      	add	r3, r1
   92fbe:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2];
   92fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92fc6:	1c5a      	adds	r2, r3, #1
   92fc8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92fcc:	7aba      	ldrb	r2, [r7, #10]
   92fce:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92fd2:	440b      	add	r3, r1
   92fd4:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3];
   92fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   92fdc:	1c5a      	adds	r2, r3, #1
   92fde:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   92fe2:	7afa      	ldrb	r2, [r7, #11]
   92fe4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   92fe8:	440b      	add	r3, r1
   92fea:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   92fee:	f107 0308 	add.w	r3, r7, #8
   92ff2:	4619      	mov	r1, r3
   92ff4:	200b      	movs	r0, #11
   92ff6:	4b98      	ldr	r3, [pc, #608]	; (93258 <Cl_Iso_Senddata+0x570>)
   92ff8:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   92ffa:	893b      	ldrh	r3, [r7, #8]
   92ffc:	461a      	mov	r2, r3
   92ffe:	4b97      	ldr	r3, [pc, #604]	; (9325c <Cl_Iso_Senddata+0x574>)
   93000:	4610      	mov	r0, r2
   93002:	4798      	blx	r3
   93004:	4c96      	ldr	r4, [pc, #600]	; (93260 <Cl_Iso_Senddata+0x578>)
   93006:	a390      	add	r3, pc, #576	; (adr r3, 93248 <Cl_Iso_Senddata+0x560>)
   93008:	e9d3 2300 	ldrd	r2, r3, [r3]
   9300c:	47a0      	blx	r4
   9300e:	4603      	mov	r3, r0
   93010:	460c      	mov	r4, r1
   93012:	4619      	mov	r1, r3
   93014:	4622      	mov	r2, r4
   93016:	4b93      	ldr	r3, [pc, #588]	; (93264 <Cl_Iso_Senddata+0x57c>)
   93018:	4608      	mov	r0, r1
   9301a:	4611      	mov	r1, r2
   9301c:	4798      	blx	r3
   9301e:	4603      	mov	r3, r0
   93020:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   93022:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   93026:	4618      	mov	r0, r3
   93028:	4b8f      	ldr	r3, [pc, #572]	; (93268 <Cl_Iso_Senddata+0x580>)
   9302a:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   9302c:	4b8f      	ldr	r3, [pc, #572]	; (9326c <Cl_Iso_Senddata+0x584>)
   9302e:	681a      	ldr	r2, [r3, #0]
   93030:	4b8f      	ldr	r3, [pc, #572]	; (93270 <Cl_Iso_Senddata+0x588>)
   93032:	4990      	ldr	r1, [pc, #576]	; (93274 <Cl_Iso_Senddata+0x58c>)
   93034:	4610      	mov	r0, r2
   93036:	4798      	blx	r3
   93038:	4603      	mov	r3, r0
   9303a:	4618      	mov	r0, r3
   9303c:	4b8e      	ldr	r3, [pc, #568]	; (93278 <Cl_Iso_Senddata+0x590>)
   9303e:	681a      	ldr	r2, [r3, #0]
   93040:	4b8e      	ldr	r3, [pc, #568]	; (9327c <Cl_Iso_Senddata+0x594>)
   93042:	4611      	mov	r1, r2
   93044:	4798      	blx	r3
   93046:	4603      	mov	r3, r0
   93048:	461a      	mov	r2, r3
   9304a:	4b8d      	ldr	r3, [pc, #564]	; (93280 <Cl_Iso_Senddata+0x598>)
   9304c:	498d      	ldr	r1, [pc, #564]	; (93284 <Cl_Iso_Senddata+0x59c>)
   9304e:	4610      	mov	r0, r2
   93050:	4798      	blx	r3
   93052:	4603      	mov	r3, r0
   93054:	461a      	mov	r2, r3
   93056:	4b85      	ldr	r3, [pc, #532]	; (9326c <Cl_Iso_Senddata+0x584>)
   93058:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   9305a:	4b84      	ldr	r3, [pc, #528]	; (9326c <Cl_Iso_Senddata+0x584>)
   9305c:	681a      	ldr	r2, [r3, #0]
   9305e:	4b7d      	ldr	r3, [pc, #500]	; (93254 <Cl_Iso_Senddata+0x56c>)
   93060:	4610      	mov	r0, r2
   93062:	4798      	blx	r3
   93064:	4603      	mov	r3, r0
   93066:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   93068:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9306c:	1c5a      	adds	r2, r3, #1
   9306e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93072:	7a3a      	ldrb	r2, [r7, #8]
   93074:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93078:	440b      	add	r3, r1
   9307a:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9307e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93082:	1c5a      	adds	r2, r3, #1
   93084:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93088:	7a7a      	ldrb	r2, [r7, #9]
   9308a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9308e:	440b      	add	r3, r1
   93090:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   93094:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93098:	1c5a      	adds	r2, r3, #1
   9309a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9309e:	7aba      	ldrb	r2, [r7, #10]
   930a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   930a4:	440b      	add	r3, r1
   930a6:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   930aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930ae:	1c5a      	adds	r2, r3, #1
   930b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   930b4:	7afa      	ldrb	r2, [r7, #11]
   930b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   930ba:	440b      	add	r3, r1
   930bc:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   930c0:	f107 0308 	add.w	r3, r7, #8
   930c4:	4619      	mov	r1, r3
   930c6:	200c      	movs	r0, #12
   930c8:	4b63      	ldr	r3, [pc, #396]	; (93258 <Cl_Iso_Senddata+0x570>)
   930ca:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   930cc:	893b      	ldrh	r3, [r7, #8]
   930ce:	461a      	mov	r2, r3
   930d0:	4b62      	ldr	r3, [pc, #392]	; (9325c <Cl_Iso_Senddata+0x574>)
   930d2:	4610      	mov	r0, r2
   930d4:	4798      	blx	r3
   930d6:	4c62      	ldr	r4, [pc, #392]	; (93260 <Cl_Iso_Senddata+0x578>)
   930d8:	a35b      	add	r3, pc, #364	; (adr r3, 93248 <Cl_Iso_Senddata+0x560>)
   930da:	e9d3 2300 	ldrd	r2, r3, [r3]
   930de:	47a0      	blx	r4
   930e0:	4603      	mov	r3, r0
   930e2:	460c      	mov	r4, r1
   930e4:	4619      	mov	r1, r3
   930e6:	4622      	mov	r2, r4
   930e8:	4b5e      	ldr	r3, [pc, #376]	; (93264 <Cl_Iso_Senddata+0x57c>)
   930ea:	4608      	mov	r0, r1
   930ec:	4611      	mov	r1, r2
   930ee:	4798      	blx	r3
   930f0:	4603      	mov	r3, r0
   930f2:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   930f4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   930f8:	4618      	mov	r0, r3
   930fa:	4b63      	ldr	r3, [pc, #396]	; (93288 <Cl_Iso_Senddata+0x5a0>)
   930fc:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   930fe:	4b63      	ldr	r3, [pc, #396]	; (9328c <Cl_Iso_Senddata+0x5a4>)
   93100:	681a      	ldr	r2, [r3, #0]
   93102:	4b5b      	ldr	r3, [pc, #364]	; (93270 <Cl_Iso_Senddata+0x588>)
   93104:	495b      	ldr	r1, [pc, #364]	; (93274 <Cl_Iso_Senddata+0x58c>)
   93106:	4610      	mov	r0, r2
   93108:	4798      	blx	r3
   9310a:	4603      	mov	r3, r0
   9310c:	4618      	mov	r0, r3
   9310e:	4b60      	ldr	r3, [pc, #384]	; (93290 <Cl_Iso_Senddata+0x5a8>)
   93110:	681a      	ldr	r2, [r3, #0]
   93112:	4b5a      	ldr	r3, [pc, #360]	; (9327c <Cl_Iso_Senddata+0x594>)
   93114:	4611      	mov	r1, r2
   93116:	4798      	blx	r3
   93118:	4603      	mov	r3, r0
   9311a:	461a      	mov	r2, r3
   9311c:	4b58      	ldr	r3, [pc, #352]	; (93280 <Cl_Iso_Senddata+0x598>)
   9311e:	4959      	ldr	r1, [pc, #356]	; (93284 <Cl_Iso_Senddata+0x59c>)
   93120:	4610      	mov	r0, r2
   93122:	4798      	blx	r3
   93124:	4603      	mov	r3, r0
   93126:	461a      	mov	r2, r3
   93128:	4b58      	ldr	r3, [pc, #352]	; (9328c <Cl_Iso_Senddata+0x5a4>)
   9312a:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   9312c:	4b57      	ldr	r3, [pc, #348]	; (9328c <Cl_Iso_Senddata+0x5a4>)
   9312e:	681a      	ldr	r2, [r3, #0]
   93130:	4b48      	ldr	r3, [pc, #288]	; (93254 <Cl_Iso_Senddata+0x56c>)
   93132:	4610      	mov	r0, r2
   93134:	4798      	blx	r3
   93136:	4603      	mov	r3, r0
   93138:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   9313a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9313e:	1c5a      	adds	r2, r3, #1
   93140:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93144:	7a3a      	ldrb	r2, [r7, #8]
   93146:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9314a:	440b      	add	r3, r1
   9314c:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   93150:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93154:	1c5a      	adds	r2, r3, #1
   93156:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9315a:	7a7a      	ldrb	r2, [r7, #9]
   9315c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93160:	440b      	add	r3, r1
   93162:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   93166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9316a:	1c5a      	adds	r2, r3, #1
   9316c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93170:	7aba      	ldrb	r2, [r7, #10]
   93172:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93176:	440b      	add	r3, r1
   93178:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   9317c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93180:	1c5a      	adds	r2, r3, #1
   93182:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93186:	7afa      	ldrb	r2, [r7, #11]
   93188:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9318c:	440b      	add	r3, r1
   9318e:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   93192:	f107 0308 	add.w	r3, r7, #8
   93196:	4619      	mov	r1, r3
   93198:	200e      	movs	r0, #14
   9319a:	4b2f      	ldr	r3, [pc, #188]	; (93258 <Cl_Iso_Senddata+0x570>)
   9319c:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9319e:	893b      	ldrh	r3, [r7, #8]
   931a0:	461a      	mov	r2, r3
   931a2:	4b2e      	ldr	r3, [pc, #184]	; (9325c <Cl_Iso_Senddata+0x574>)
   931a4:	4610      	mov	r0, r2
   931a6:	4798      	blx	r3
   931a8:	4c2d      	ldr	r4, [pc, #180]	; (93260 <Cl_Iso_Senddata+0x578>)
   931aa:	a327      	add	r3, pc, #156	; (adr r3, 93248 <Cl_Iso_Senddata+0x560>)
   931ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   931b0:	47a0      	blx	r4
   931b2:	4603      	mov	r3, r0
   931b4:	460c      	mov	r4, r1
   931b6:	4619      	mov	r1, r3
   931b8:	4622      	mov	r2, r4
   931ba:	4b2a      	ldr	r3, [pc, #168]	; (93264 <Cl_Iso_Senddata+0x57c>)
   931bc:	4608      	mov	r0, r1
   931be:	4611      	mov	r1, r2
   931c0:	4798      	blx	r3
   931c2:	4603      	mov	r3, r0
   931c4:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   931c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   931ca:	4618      	mov	r0, r3
   931cc:	4b31      	ldr	r3, [pc, #196]	; (93294 <Cl_Iso_Senddata+0x5ac>)
   931ce:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   931d0:	4b31      	ldr	r3, [pc, #196]	; (93298 <Cl_Iso_Senddata+0x5b0>)
   931d2:	681a      	ldr	r2, [r3, #0]
   931d4:	4b26      	ldr	r3, [pc, #152]	; (93270 <Cl_Iso_Senddata+0x588>)
   931d6:	4927      	ldr	r1, [pc, #156]	; (93274 <Cl_Iso_Senddata+0x58c>)
   931d8:	4610      	mov	r0, r2
   931da:	4798      	blx	r3
   931dc:	4603      	mov	r3, r0
   931de:	4618      	mov	r0, r3
   931e0:	4b2e      	ldr	r3, [pc, #184]	; (9329c <Cl_Iso_Senddata+0x5b4>)
   931e2:	681a      	ldr	r2, [r3, #0]
   931e4:	4b25      	ldr	r3, [pc, #148]	; (9327c <Cl_Iso_Senddata+0x594>)
   931e6:	4611      	mov	r1, r2
   931e8:	4798      	blx	r3
   931ea:	4603      	mov	r3, r0
   931ec:	461a      	mov	r2, r3
   931ee:	4b24      	ldr	r3, [pc, #144]	; (93280 <Cl_Iso_Senddata+0x598>)
   931f0:	4924      	ldr	r1, [pc, #144]	; (93284 <Cl_Iso_Senddata+0x59c>)
   931f2:	4610      	mov	r0, r2
   931f4:	4798      	blx	r3
   931f6:	4603      	mov	r3, r0
   931f8:	461a      	mov	r2, r3
   931fa:	4b27      	ldr	r3, [pc, #156]	; (93298 <Cl_Iso_Senddata+0x5b0>)
   931fc:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   931fe:	f107 0308 	add.w	r3, r7, #8
   93202:	4619      	mov	r1, r3
   93204:	200f      	movs	r0, #15
   93206:	4b14      	ldr	r3, [pc, #80]	; (93258 <Cl_Iso_Senddata+0x570>)
   93208:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9320a:	893b      	ldrh	r3, [r7, #8]
   9320c:	461a      	mov	r2, r3
   9320e:	4b13      	ldr	r3, [pc, #76]	; (9325c <Cl_Iso_Senddata+0x574>)
   93210:	4610      	mov	r0, r2
   93212:	4798      	blx	r3
   93214:	4c12      	ldr	r4, [pc, #72]	; (93260 <Cl_Iso_Senddata+0x578>)
   93216:	a30c      	add	r3, pc, #48	; (adr r3, 93248 <Cl_Iso_Senddata+0x560>)
   93218:	e9d3 2300 	ldrd	r2, r3, [r3]
   9321c:	47a0      	blx	r4
   9321e:	4603      	mov	r3, r0
   93220:	460c      	mov	r4, r1
   93222:	4619      	mov	r1, r3
   93224:	4622      	mov	r2, r4
   93226:	4b0f      	ldr	r3, [pc, #60]	; (93264 <Cl_Iso_Senddata+0x57c>)
   93228:	4608      	mov	r0, r1
   9322a:	4611      	mov	r1, r2
   9322c:	4798      	blx	r3
   9322e:	4603      	mov	r3, r0
   93230:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   93232:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   93236:	4618      	mov	r0, r3
   93238:	4b19      	ldr	r3, [pc, #100]	; (932a0 <Cl_Iso_Senddata+0x5b8>)
   9323a:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   9323c:	4b19      	ldr	r3, [pc, #100]	; (932a4 <Cl_Iso_Senddata+0x5bc>)
   9323e:	681a      	ldr	r2, [r3, #0]
   93240:	e032      	b.n	932a8 <Cl_Iso_Senddata+0x5c0>
   93242:	bf00      	nop
   93244:	f3af 8000 	nop.w
   93248:	58e21965 	.word	0x58e21965
   9324c:	3fe9b717 	.word	0x3fe9b717
   93250:	200726d0 	.word	0x200726d0
   93254:	000a3829 	.word	0x000a3829
   93258:	0008d61d 	.word	0x0008d61d
   9325c:	000a2b05 	.word	0x000a2b05
   93260:	000a2bd1 	.word	0x000a2bd1
   93264:	000a3155 	.word	0x000a3155
   93268:	000840d1 	.word	0x000840d1
   9326c:	200726d8 	.word	0x200726d8
   93270:	000a3451 	.word	0x000a3451
   93274:	40a00000 	.word	0x40a00000
   93278:	20072d64 	.word	0x20072d64
   9327c:	000a3241 	.word	0x000a3241
   93280:	000a35b9 	.word	0x000a35b9
   93284:	40c00000 	.word	0x40c00000
   93288:	00084251 	.word	0x00084251
   9328c:	200726dc 	.word	0x200726dc
   93290:	2007165c 	.word	0x2007165c
   93294:	000843d5 	.word	0x000843d5
   93298:	200726e0 	.word	0x200726e0
   9329c:	20071660 	.word	0x20071660
   932a0:	000844e5 	.word	0x000844e5
   932a4:	200726e4 	.word	0x200726e4
   932a8:	4b53      	ldr	r3, [pc, #332]	; (933f8 <Cl_Iso_Senddata+0x710>)
   932aa:	4954      	ldr	r1, [pc, #336]	; (933fc <Cl_Iso_Senddata+0x714>)
   932ac:	4610      	mov	r0, r2
   932ae:	4798      	blx	r3
   932b0:	4603      	mov	r3, r0
   932b2:	4618      	mov	r0, r3
   932b4:	4b52      	ldr	r3, [pc, #328]	; (93400 <Cl_Iso_Senddata+0x718>)
   932b6:	681a      	ldr	r2, [r3, #0]
   932b8:	4b52      	ldr	r3, [pc, #328]	; (93404 <Cl_Iso_Senddata+0x71c>)
   932ba:	4611      	mov	r1, r2
   932bc:	4798      	blx	r3
   932be:	4603      	mov	r3, r0
   932c0:	461a      	mov	r2, r3
   932c2:	4b51      	ldr	r3, [pc, #324]	; (93408 <Cl_Iso_Senddata+0x720>)
   932c4:	4951      	ldr	r1, [pc, #324]	; (9340c <Cl_Iso_Senddata+0x724>)
   932c6:	4610      	mov	r0, r2
   932c8:	4798      	blx	r3
   932ca:	4603      	mov	r3, r0
   932cc:	461a      	mov	r2, r3
   932ce:	4b50      	ldr	r3, [pc, #320]	; (93410 <Cl_Iso_Senddata+0x728>)
   932d0:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   932d2:	4b50      	ldr	r3, [pc, #320]	; (93414 <Cl_Iso_Senddata+0x72c>)
   932d4:	681a      	ldr	r2, [r3, #0]
   932d6:	4b50      	ldr	r3, [pc, #320]	; (93418 <Cl_Iso_Senddata+0x730>)
   932d8:	6819      	ldr	r1, [r3, #0]
   932da:	4b4a      	ldr	r3, [pc, #296]	; (93404 <Cl_Iso_Senddata+0x71c>)
   932dc:	4610      	mov	r0, r2
   932de:	4798      	blx	r3
   932e0:	4603      	mov	r3, r0
   932e2:	461c      	mov	r4, r3
   932e4:	4b4d      	ldr	r3, [pc, #308]	; (9341c <Cl_Iso_Senddata+0x734>)
   932e6:	681a      	ldr	r2, [r3, #0]
   932e8:	4b49      	ldr	r3, [pc, #292]	; (93410 <Cl_Iso_Senddata+0x728>)
   932ea:	6819      	ldr	r1, [r3, #0]
   932ec:	4b45      	ldr	r3, [pc, #276]	; (93404 <Cl_Iso_Senddata+0x71c>)
   932ee:	4610      	mov	r0, r2
   932f0:	4798      	blx	r3
   932f2:	4603      	mov	r3, r0
   932f4:	461a      	mov	r2, r3
   932f6:	4b4a      	ldr	r3, [pc, #296]	; (93420 <Cl_Iso_Senddata+0x738>)
   932f8:	4611      	mov	r1, r2
   932fa:	4620      	mov	r0, r4
   932fc:	4798      	blx	r3
   932fe:	4603      	mov	r3, r0
   93300:	461a      	mov	r2, r3
   93302:	4b41      	ldr	r3, [pc, #260]	; (93408 <Cl_Iso_Senddata+0x720>)
   93304:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   93308:	4610      	mov	r0, r2
   9330a:	4798      	blx	r3
   9330c:	4603      	mov	r3, r0
   9330e:	461a      	mov	r2, r3
   93310:	4b43      	ldr	r3, [pc, #268]	; (93420 <Cl_Iso_Senddata+0x738>)
   93312:	4944      	ldr	r1, [pc, #272]	; (93424 <Cl_Iso_Senddata+0x73c>)
   93314:	4610      	mov	r0, r2
   93316:	4798      	blx	r3
   93318:	4603      	mov	r3, r0
   9331a:	461a      	mov	r2, r3
   9331c:	4b42      	ldr	r3, [pc, #264]	; (93428 <Cl_Iso_Senddata+0x740>)
   9331e:	4610      	mov	r0, r2
   93320:	4798      	blx	r3
   93322:	4603      	mov	r3, r0
   93324:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   93326:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9332a:	1c5a      	adds	r2, r3, #1
   9332c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93330:	7a3a      	ldrb	r2, [r7, #8]
   93332:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93336:	440b      	add	r3, r1
   93338:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9333c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93340:	1c5a      	adds	r2, r3, #1
   93342:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93346:	7a7a      	ldrb	r2, [r7, #9]
   93348:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9334c:	440b      	add	r3, r1
   9334e:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   93352:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93356:	1c5a      	adds	r2, r3, #1
   93358:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9335c:	7aba      	ldrb	r2, [r7, #10]
   9335e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93362:	440b      	add	r3, r1
   93364:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   93368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9336c:	1c5a      	adds	r2, r3, #1
   9336e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93372:	7afa      	ldrb	r2, [r7, #11]
   93374:	f107 0148 	add.w	r1, r7, #72	; 0x48
   93378:	440b      	add	r3, r1
   9337a:	f803 2c38 	strb.w	r2, [r3, #-56]
			
			systemdataarray[count++] = 0x0A; // tmp
   9337e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93382:	1c5a      	adds	r2, r3, #1
   93384:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   93388:	f107 0248 	add.w	r2, r7, #72	; 0x48
   9338c:	4413      	add	r3, r2
   9338e:	220a      	movs	r2, #10
   93390:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x0A; // tmp
   93394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93398:	1c5a      	adds	r2, r3, #1
   9339a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9339e:	f107 0248 	add.w	r2, r7, #72	; 0x48
   933a2:	4413      	add	r3, r2
   933a4:	220a      	movs	r2, #10
   933a6:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x00;
   933aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   933ae:	1c5a      	adds	r2, r3, #1
   933b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   933b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
   933b8:	4413      	add	r3, r2
   933ba:	2200      	movs	r2, #0
   933bc:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x00;
   933c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   933c4:	1c5a      	adds	r2, r3, #1
   933c6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   933ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
   933ce:	4413      	add	r3, r2
   933d0:	2200      	movs	r2, #0
   933d2:	f803 2c38 	strb.w	r2, [r3, #-56]
			cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   933d6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   933da:	f107 0310 	add.w	r3, r7, #16
   933de:	4619      	mov	r1, r3
   933e0:	202a      	movs	r0, #42	; 0x2a
   933e2:	4b12      	ldr	r3, [pc, #72]	; (9342c <Cl_Iso_Senddata+0x744>)
   933e4:	4798      	blx	r3
   933e6:	4603      	mov	r3, r0
   933e8:	461a      	mov	r2, r3
   933ea:	4b11      	ldr	r3, [pc, #68]	; (93430 <Cl_Iso_Senddata+0x748>)
   933ec:	701a      	strb	r2, [r3, #0]
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   933ee:	2300      	movs	r3, #0
	
	
}
   933f0:	4618      	mov	r0, r3
   933f2:	374c      	adds	r7, #76	; 0x4c
   933f4:	46bd      	mov	sp, r7
   933f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   933f8:	000a3451 	.word	0x000a3451
   933fc:	40a00000 	.word	0x40a00000
   93400:	20071664 	.word	0x20071664
   93404:	000a3241 	.word	0x000a3241
   93408:	000a35b9 	.word	0x000a35b9
   9340c:	40c00000 	.word	0x40c00000
   93410:	200726e4 	.word	0x200726e4
   93414:	200726d8 	.word	0x200726d8
   93418:	200726dc 	.word	0x200726dc
   9341c:	200726e0 	.word	0x200726e0
   93420:	000a323d 	.word	0x000a323d
   93424:	41c80000 	.word	0x41c80000
   93428:	000a3829 	.word	0x000a3829
   9342c:	0009926d 	.word	0x0009926d
   93430:	200726c6 	.word	0x200726c6

00093434 <Cl_Iso_UpdateTimeInfo>:

Cl_ReturnCodeType Cl_Iso_UpdateTimeInfo(void)
{
   93434:	b580      	push	{r7, lr}
   93436:	b084      	sub	sp, #16
   93438:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   9343a:	2304      	movs	r3, #4
   9343c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9343e:	234d      	movs	r3, #77	; 0x4d
   93440:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   93442:	1d3b      	adds	r3, r7, #4
   93444:	2200      	movs	r2, #0
   93446:	601a      	str	r2, [r3, #0]
   93448:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9344c:	230a      	movs	r3, #10
   9344e:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)ISOUF_DATA;
   93450:	230c      	movs	r3, #12
   93452:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)1;
   93454:	2301      	movs	r3, #1
   93456:	717b      	strb	r3, [r7, #5]

	
	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   93458:	1d39      	adds	r1, r7, #4
   9345a:	7bbb      	ldrb	r3, [r7, #14]
   9345c:	2202      	movs	r2, #2
   9345e:	4618      	mov	r0, r3
   93460:	4b04      	ldr	r3, [pc, #16]	; (93474 <Cl_Iso_UpdateTimeInfo+0x40>)
   93462:	4798      	blx	r3
   93464:	4603      	mov	r3, r0
   93466:	73fb      	strb	r3, [r7, #15]
	return CL_OK;
   93468:	2300      	movs	r3, #0
	
}
   9346a:	4618      	mov	r0, r3
   9346c:	3710      	adds	r7, #16
   9346e:	46bd      	mov	sp, r7
   93470:	bd80      	pop	{r7, pc}
   93472:	bf00      	nop
   93474:	0009926d 	.word	0x0009926d

00093478 <cl_checkforblooddetection>:

Cl_ReturnCodeType cl_checkforblooddetection(){
   93478:	b580      	push	{r7, lr}
   9347a:	b082      	sub	sp, #8
   9347c:	af00      	add	r7, sp, #0
	
	Cl_Uint16Type bldtemp = 0;
   9347e:	2300      	movs	r3, #0
   93480:	80fb      	strh	r3, [r7, #6]
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &bldtemp);
   93482:	1dbb      	adds	r3, r7, #6
   93484:	4619      	mov	r1, r3
   93486:	200a      	movs	r0, #10
   93488:	4b05      	ldr	r3, [pc, #20]	; (934a0 <cl_checkforblooddetection+0x28>)
   9348a:	4798      	blx	r3
	
	if(bldtemp == 1){
   9348c:	88fb      	ldrh	r3, [r7, #6]
   9348e:	2b01      	cmp	r3, #1
   93490:	d101      	bne.n	93496 <cl_checkforblooddetection+0x1e>
		return CL_OK;
   93492:	2300      	movs	r3, #0
   93494:	e000      	b.n	93498 <cl_checkforblooddetection+0x20>
	}
	else{
		return CL_OK; // should be CL_REJECTED
   93496:	2300      	movs	r3, #0
	}
	
	
}
   93498:	4618      	mov	r0, r3
   9349a:	3708      	adds	r7, #8
   9349c:	46bd      	mov	sp, r7
   9349e:	bd80      	pop	{r7, pc}
   934a0:	0008d61d 	.word	0x0008d61d

000934a4 <cl_isouf_translatemacevent>:

Cl_ReturnCodeType  cl_isouf_translatemacevent(Cl_Mac_EventsType Cl_MacISOufEvt,cl_isouf_events* cl_isouf_event)
{
   934a4:	b480      	push	{r7}
   934a6:	b083      	sub	sp, #12
   934a8:	af00      	add	r7, sp, #0
   934aa:	4603      	mov	r3, r0
   934ac:	6039      	str	r1, [r7, #0]
   934ae:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacISOufEvt)
   934b0:	79fb      	ldrb	r3, [r7, #7]
   934b2:	3b07      	subs	r3, #7
   934b4:	2b53      	cmp	r3, #83	; 0x53
   934b6:	f200 8107 	bhi.w	936c8 <cl_isouf_translatemacevent+0x224>
   934ba:	a201      	add	r2, pc, #4	; (adr r2, 934c0 <cl_isouf_translatemacevent+0x1c>)
   934bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   934c0:	00093651 	.word	0x00093651
   934c4:	000936c9 	.word	0x000936c9
   934c8:	000936c9 	.word	0x000936c9
   934cc:	00093631 	.word	0x00093631
   934d0:	00093639 	.word	0x00093639
   934d4:	00093629 	.word	0x00093629
   934d8:	00093649 	.word	0x00093649
   934dc:	00093641 	.word	0x00093641
   934e0:	000936c9 	.word	0x000936c9
   934e4:	000936c9 	.word	0x000936c9
   934e8:	000936c9 	.word	0x000936c9
   934ec:	000936c9 	.word	0x000936c9
   934f0:	000936c9 	.word	0x000936c9
   934f4:	000936c9 	.word	0x000936c9
   934f8:	000936a9 	.word	0x000936a9
   934fc:	000936c9 	.word	0x000936c9
   93500:	00093659 	.word	0x00093659
   93504:	000936c9 	.word	0x000936c9
   93508:	000936c9 	.word	0x000936c9
   9350c:	000936c9 	.word	0x000936c9
   93510:	000936c9 	.word	0x000936c9
   93514:	000936c9 	.word	0x000936c9
   93518:	000936c9 	.word	0x000936c9
   9351c:	000936c9 	.word	0x000936c9
   93520:	000936c9 	.word	0x000936c9
   93524:	000936c9 	.word	0x000936c9
   93528:	000936c9 	.word	0x000936c9
   9352c:	00093699 	.word	0x00093699
   93530:	000936a1 	.word	0x000936a1
   93534:	000936c9 	.word	0x000936c9
   93538:	000936c9 	.word	0x000936c9
   9353c:	000936c9 	.word	0x000936c9
   93540:	000936b1 	.word	0x000936b1
   93544:	000936b9 	.word	0x000936b9
   93548:	00093621 	.word	0x00093621
   9354c:	000936c9 	.word	0x000936c9
   93550:	000936c9 	.word	0x000936c9
   93554:	000936c9 	.word	0x000936c9
   93558:	00093691 	.word	0x00093691
   9355c:	00093689 	.word	0x00093689
   93560:	000936c9 	.word	0x000936c9
   93564:	000936c9 	.word	0x000936c9
   93568:	000936c9 	.word	0x000936c9
   9356c:	000936c9 	.word	0x000936c9
   93570:	000936c9 	.word	0x000936c9
   93574:	000936c9 	.word	0x000936c9
   93578:	000936c9 	.word	0x000936c9
   9357c:	000936c9 	.word	0x000936c9
   93580:	000936c9 	.word	0x000936c9
   93584:	00093661 	.word	0x00093661
   93588:	000936c9 	.word	0x000936c9
   9358c:	00093669 	.word	0x00093669
   93590:	00093671 	.word	0x00093671
   93594:	00093679 	.word	0x00093679
   93598:	00093681 	.word	0x00093681
   9359c:	000936c9 	.word	0x000936c9
   935a0:	000936c9 	.word	0x000936c9
   935a4:	000936c9 	.word	0x000936c9
   935a8:	000936c9 	.word	0x000936c9
   935ac:	000936c9 	.word	0x000936c9
   935b0:	000936c9 	.word	0x000936c9
   935b4:	000936c9 	.word	0x000936c9
   935b8:	000936c9 	.word	0x000936c9
   935bc:	000936c9 	.word	0x000936c9
   935c0:	000936c9 	.word	0x000936c9
   935c4:	000936c9 	.word	0x000936c9
   935c8:	000936c9 	.word	0x000936c9
   935cc:	000936c9 	.word	0x000936c9
   935d0:	000936c9 	.word	0x000936c9
   935d4:	000936c9 	.word	0x000936c9
   935d8:	000936c9 	.word	0x000936c9
   935dc:	000936c9 	.word	0x000936c9
   935e0:	000936c9 	.word	0x000936c9
   935e4:	000936c9 	.word	0x000936c9
   935e8:	000936c9 	.word	0x000936c9
   935ec:	000936c9 	.word	0x000936c9
   935f0:	000936c9 	.word	0x000936c9
   935f4:	000936c9 	.word	0x000936c9
   935f8:	000936c9 	.word	0x000936c9
   935fc:	000936c9 	.word	0x000936c9
   93600:	000936c9 	.word	0x000936c9
   93604:	00093611 	.word	0x00093611
   93608:	00093619 	.word	0x00093619
   9360c:	000936c1 	.word	0x000936c1
	{
		
		case EVT_CONSOLE_COMMAND_ISOUF_START :
		*cl_isouf_event = EVENT_ISOUF_START;
   93610:	683b      	ldr	r3, [r7, #0]
   93612:	2216      	movs	r2, #22
   93614:	701a      	strb	r2, [r3, #0]
		break;
   93616:	e058      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_ISOUF_STOP :
		*cl_isouf_event = EVENT_ISOUF_STOP;
   93618:	683b      	ldr	r3, [r7, #0]
   9361a:	2218      	movs	r2, #24
   9361c:	701a      	strb	r2, [r3, #0]
		break;
   9361e:	e054      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_isouf_event = EVENT_ISOUF_CLR_ALARM;
   93620:	683b      	ldr	r3, [r7, #0]
   93622:	2201      	movs	r2, #1
   93624:	701a      	strb	r2, [r3, #0]
		break;
   93626:	e050      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE;
   93628:	683b      	ldr	r3, [r7, #0]
   9362a:	2210      	movs	r2, #16
   9362c:	701a      	strb	r2, [r3, #0]
		break;
   9362e:	e04c      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_ON;
   93630:	683b      	ldr	r3, [r7, #0]
   93632:	2211      	movs	r2, #17
   93634:	701a      	strb	r2, [r3, #0]
		break;
   93636:	e048      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF;
   93638:	683b      	ldr	r3, [r7, #0]
   9363a:	2212      	movs	r2, #18
   9363c:	701a      	strb	r2, [r3, #0]
		break;
   9363e:	e044      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_isouf_event = EVENT_ISOUF_GET_DATA;
   93640:	683b      	ldr	r3, [r7, #0]
   93642:	2202      	movs	r2, #2
   93644:	701a      	strb	r2, [r3, #0]
		break;
   93646:	e040      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_isouf_event = EVENT_ISOUF_SET_DATA;
   93648:	683b      	ldr	r3, [r7, #0]
   9364a:	2203      	movs	r2, #3
   9364c:	701a      	strb	r2, [r3, #0]
		break;
   9364e:	e03c      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_isouf_event= EVENT_ISOUF_START_RINSE;
   93650:	683b      	ldr	r3, [r7, #0]
   93652:	2204      	movs	r2, #4
   93654:	701a      	strb	r2, [r3, #0]
		break;
   93656:	e038      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_isouf_event= EVENT_ISOUF_START_DIALYSIS;
   93658:	683b      	ldr	r3, [r7, #0]
   9365a:	2205      	movs	r2, #5
   9365c:	701a      	strb	r2, [r3, #0]
		break;
   9365e:	e034      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_isouf_event =   EVENT_ISOUF_TICK_50MS;
   93660:	683b      	ldr	r3, [r7, #0]
   93662:	2207      	movs	r2, #7
   93664:	701a      	strb	r2, [r3, #0]
		break;
   93666:	e030      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_isouf_event = EVENT_ISOUF_TICK_500MS;
   93668:	683b      	ldr	r3, [r7, #0]
   9366a:	2208      	movs	r2, #8
   9366c:	701a      	strb	r2, [r3, #0]
		break;
   9366e:	e02c      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_isouf_event =   EVENT_ISOUF_TICK_SECOND;
   93670:	683b      	ldr	r3, [r7, #0]
   93672:	2209      	movs	r2, #9
   93674:	701a      	strb	r2, [r3, #0]
		break;
   93676:	e028      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_isouf_event =   EVENT_ISOUF_TICK_MINUTE;
   93678:	683b      	ldr	r3, [r7, #0]
   9367a:	220a      	movs	r2, #10
   9367c:	701a      	strb	r2, [r3, #0]
		break;
   9367e:	e024      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_isouf_event =   EVENT_ISOUF_TICK_HOUR;
   93680:	683b      	ldr	r3, [r7, #0]
   93682:	220b      	movs	r2, #11
   93684:	701a      	strb	r2, [r3, #0]
		break;
   93686:	e020      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALARM;
   93688:	683b      	ldr	r3, [r7, #0]
   9368a:	220c      	movs	r2, #12
   9368c:	701a      	strb	r2, [r3, #0]
		break;
   9368e:	e01c      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_ALERT_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALERT;
   93690:	683b      	ldr	r3, [r7, #0]
   93692:	220d      	movs	r2, #13
   93694:	701a      	strb	r2, [r3, #0]
		break;
   93696:	e018      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_START_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   93698:	683b      	ldr	r3, [r7, #0]
   9369a:	220f      	movs	r2, #15
   9369c:	701a      	strb	r2, [r3, #0]
		break;
   9369e:	e014      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   936a0:	683b      	ldr	r3, [r7, #0]
   936a2:	220f      	movs	r2, #15
   936a4:	701a      	strb	r2, [r3, #0]
		break;
   936a6:	e010      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_isouf_event =   EVENT_ISOUF_HEP_RATE;
   936a8:	683b      	ldr	r3, [r7, #0]
   936aa:	2213      	movs	r2, #19
   936ac:	701a      	strb	r2, [r3, #0]
		break;
   936ae:	e00c      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_isouf_event =   EVENT_ISOUF_HEP_ON;
   936b0:	683b      	ldr	r3, [r7, #0]
   936b2:	2214      	movs	r2, #20
   936b4:	701a      	strb	r2, [r3, #0]
		break;
   936b6:	e008      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_isouf_event =   EVENT_ISOUF_HEP_OFF;
   936b8:	683b      	ldr	r3, [r7, #0]
   936ba:	2215      	movs	r2, #21
   936bc:	701a      	strb	r2, [r3, #0]
		
		break;
   936be:	e004      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		case MACREQ_ISOUF_COMPLETED:
		*cl_isouf_event =   CL_ISOUF_STATE_POST_COMPLETION;
   936c0:	683b      	ldr	r3, [r7, #0]
   936c2:	2207      	movs	r2, #7
   936c4:	701a      	strb	r2, [r3, #0]
		break;
   936c6:	e000      	b.n	936ca <cl_isouf_translatemacevent+0x226>
		
		
		default:
		break;
   936c8:	bf00      	nop
	}
	return CL_OK;
   936ca:	2300      	movs	r3, #0
}
   936cc:	4618      	mov	r0, r3
   936ce:	370c      	adds	r7, #12
   936d0:	46bd      	mov	sp, r7
   936d2:	bc80      	pop	{r7}
   936d4:	4770      	bx	lr
   936d6:	bf00      	nop

000936d8 <cl_isoufcompleted>:


Cl_ReturnCodeType cl_isoufcompleted(){
   936d8:	b580      	push	{r7, lr}
   936da:	af00      	add	r7, sp, #0
	
	// stop uf pump
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   936dc:	2100      	movs	r1, #0
   936de:	2004      	movs	r0, #4
   936e0:	4b02      	ldr	r3, [pc, #8]	; (936ec <cl_isoufcompleted+0x14>)
   936e2:	4798      	blx	r3
	
	return CL_OK;
   936e4:	2300      	movs	r3, #0
}
   936e6:	4618      	mov	r0, r3
   936e8:	bd80      	pop	{r7, pc}
   936ea:	bf00      	nop
   936ec:	0009381d 	.word	0x0009381d

000936f0 <cl_dialysate_ready_isouf>:

Cl_ReturnCodeType cl_dialysate_ready_isouf(){
   936f0:	b580      	push	{r7, lr}
   936f2:	af00      	add	r7, sp, #0

						sv_cntrl_deactivatepump(DCMOTOR1 );
   936f4:	2001      	movs	r0, #1
   936f6:	4b11      	ldr	r3, [pc, #68]	; (9373c <cl_dialysate_ready_isouf+0x4c>)
   936f8:	4798      	blx	r3
						sv_cntrl_deactivatepump(DCMOTOR2 );
   936fa:	2002      	movs	r0, #2
   936fc:	4b0f      	ldr	r3, [pc, #60]	; (9373c <cl_dialysate_ready_isouf+0x4c>)
   936fe:	4798      	blx	r3
						Cl_bc_controller(BC_EVENT_STOP);
   93700:	2005      	movs	r0, #5
   93702:	4b0f      	ldr	r3, [pc, #60]	; (93740 <cl_dialysate_ready_isouf+0x50>)
   93704:	4798      	blx	r3
						
						
						
						sv_cntrl_poweroffheater();
   93706:	4b0f      	ldr	r3, [pc, #60]	; (93744 <cl_dialysate_ready_isouf+0x54>)
   93708:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID1);
   9370a:	2001      	movs	r0, #1
   9370c:	4b0e      	ldr	r3, [pc, #56]	; (93748 <cl_dialysate_ready_isouf+0x58>)
   9370e:	4798      	blx	r3
						cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   93710:	2002      	movs	r0, #2
   93712:	4b0e      	ldr	r3, [pc, #56]	; (9374c <cl_dialysate_ready_isouf+0x5c>)
   93714:	4798      	blx	r3

						sv_cntrl_deactivate_valve(VALVE_ID1);
   93716:	2001      	movs	r0, #1
   93718:	4b0b      	ldr	r3, [pc, #44]	; (93748 <cl_dialysate_ready_isouf+0x58>)
   9371a:	4798      	blx	r3
						sv_cntrl_activate_valve(VALVE_ID18);
   9371c:	2012      	movs	r0, #18
   9371e:	4b0c      	ldr	r3, [pc, #48]	; (93750 <cl_dialysate_ready_isouf+0x60>)
   93720:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   93722:	2100      	movs	r1, #0
   93724:	200a      	movs	r0, #10
   93726:	4b0b      	ldr	r3, [pc, #44]	; (93754 <cl_dialysate_ready_isouf+0x64>)
   93728:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_START,0);
   9372a:	2100      	movs	r1, #0
   9372c:	2002      	movs	r0, #2
   9372e:	4b0a      	ldr	r3, [pc, #40]	; (93758 <cl_dialysate_ready_isouf+0x68>)
   93730:	4798      	blx	r3
						
						Cl_Isouf_start();
   93732:	4b0a      	ldr	r3, [pc, #40]	; (9375c <cl_dialysate_ready_isouf+0x6c>)
   93734:	4798      	blx	r3


return CL_OK;
   93736:	2300      	movs	r3, #0

}
   93738:	4618      	mov	r0, r3
   9373a:	bd80      	pop	{r7, pc}
   9373c:	0009748d 	.word	0x0009748d
   93740:	00083379 	.word	0x00083379
   93744:	000974dd 	.word	0x000974dd
   93748:	00097511 	.word	0x00097511
   9374c:	00091f6d 	.word	0x00091f6d
   93750:	000974f1 	.word	0x000974f1
   93754:	00092169 	.word	0x00092169
   93758:	0009381d 	.word	0x0009381d
   9375c:	00092c6d 	.word	0x00092c6d

00093760 <Cl_isouf_init>:

 Cl_ReturnCodeType Cl_isouf_init(void)
 {
   93760:	b480      	push	{r7}
   93762:	af00      	add	r7, sp, #0
	 
	 cl_isouf_state = CL_ISOUF_STATE_IDLE;
   93764:	4b05      	ldr	r3, [pc, #20]	; (9377c <Cl_isouf_init+0x1c>)
   93766:	2200      	movs	r2, #0
   93768:	701a      	strb	r2, [r3, #0]

	 //cl_isouf_event = EVENT_NULL_EVENT;
	 
	 Cl_ISOufTotalSecondscounter=0 ;
   9376a:	4b05      	ldr	r3, [pc, #20]	; (93780 <Cl_isouf_init+0x20>)
   9376c:	2200      	movs	r2, #0
   9376e:	601a      	str	r2, [r3, #0]
	 return CL_OK;
   93770:	2300      	movs	r3, #0
 }
   93772:	4618      	mov	r0, r3
   93774:	46bd      	mov	sp, r7
   93776:	bc80      	pop	{r7}
   93778:	4770      	bx	lr
   9377a:	bf00      	nop
   9377c:	200726c5 	.word	0x200726c5
   93780:	200726c8 	.word	0x200726c8

00093784 <cl_ufpumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   93784:	b480      	push	{r7}
   93786:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   93788:	4b03      	ldr	r3, [pc, #12]	; (93798 <cl_ufpumpFeedback_start+0x14>)
   9378a:	2201      	movs	r2, #1
   9378c:	701a      	strb	r2, [r3, #0]
	return 0;
   9378e:	2300      	movs	r3, #0
}
   93790:	4618      	mov	r0, r3
   93792:	46bd      	mov	sp, r7
   93794:	bc80      	pop	{r7}
   93796:	4770      	bx	lr
   93798:	200726ea 	.word	0x200726ea

0009379c <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   9379c:	b480      	push	{r7}
   9379e:	af00      	add	r7, sp, #0
	
	return 0;
   937a0:	2300      	movs	r3, #0
}
   937a2:	4618      	mov	r0, r3
   937a4:	46bd      	mov	sp, r7
   937a6:	bc80      	pop	{r7}
   937a8:	4770      	bx	lr
   937aa:	bf00      	nop

000937ac <cl_ufpumpFeedback_get_state>:
Cl_ReturnCodeType cl_ufpumpFeedback_get_state(cl_ufpump_states* pstate)
{
   937ac:	b480      	push	{r7}
   937ae:	b083      	sub	sp, #12
   937b0:	af00      	add	r7, sp, #0
   937b2:	6078      	str	r0, [r7, #4]
	*pstate = cl_ufpump_state;
   937b4:	4b04      	ldr	r3, [pc, #16]	; (937c8 <cl_ufpumpFeedback_get_state+0x1c>)
   937b6:	781a      	ldrb	r2, [r3, #0]
   937b8:	687b      	ldr	r3, [r7, #4]
   937ba:	701a      	strb	r2, [r3, #0]
	return 0;
   937bc:	2300      	movs	r3, #0
}
   937be:	4618      	mov	r0, r3
   937c0:	370c      	adds	r7, #12
   937c2:	46bd      	mov	sp, r7
   937c4:	bc80      	pop	{r7}
   937c6:	4770      	bx	lr
   937c8:	200726ea 	.word	0x200726ea

000937cc <cl_ufpumpFeedback_get_delta>:
Cl_ReturnCodeType cl_ufpumpFeedback_get_delta(int16_t* pdelta)
{
   937cc:	b480      	push	{r7}
   937ce:	b083      	sub	sp, #12
   937d0:	af00      	add	r7, sp, #0
   937d2:	6078      	str	r0, [r7, #4]
	*pdelta = uf_period - uf_expected_period;
   937d4:	4b07      	ldr	r3, [pc, #28]	; (937f4 <cl_ufpumpFeedback_get_delta+0x28>)
   937d6:	881a      	ldrh	r2, [r3, #0]
   937d8:	4b07      	ldr	r3, [pc, #28]	; (937f8 <cl_ufpumpFeedback_get_delta+0x2c>)
   937da:	881b      	ldrh	r3, [r3, #0]
   937dc:	1ad3      	subs	r3, r2, r3
   937de:	b29b      	uxth	r3, r3
   937e0:	b21a      	sxth	r2, r3
   937e2:	687b      	ldr	r3, [r7, #4]
   937e4:	801a      	strh	r2, [r3, #0]
	return 0;
   937e6:	2300      	movs	r3, #0
}
   937e8:	4618      	mov	r0, r3
   937ea:	370c      	adds	r7, #12
   937ec:	46bd      	mov	sp, r7
   937ee:	bc80      	pop	{r7}
   937f0:	4770      	bx	lr
   937f2:	bf00      	nop
   937f4:	200726ec 	.word	0x200726ec
   937f8:	200726e8 	.word	0x200726e8

000937fc <cl_ufpumpFeedback_set_expected_period>:
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   937fc:	b480      	push	{r7}
   937fe:	b083      	sub	sp, #12
   93800:	af00      	add	r7, sp, #0
   93802:	4603      	mov	r3, r0
   93804:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   93806:	88fa      	ldrh	r2, [r7, #6]
   93808:	4b03      	ldr	r3, [pc, #12]	; (93818 <cl_ufpumpFeedback_set_expected_period+0x1c>)
   9380a:	801a      	strh	r2, [r3, #0]
	return 0;
   9380c:	2300      	movs	r3, #0
}
   9380e:	4618      	mov	r0, r3
   93810:	370c      	adds	r7, #12
   93812:	46bd      	mov	sp, r7
   93814:	bc80      	pop	{r7}
   93816:	4770      	bx	lr
   93818:	200726e8 	.word	0x200726e8

0009381c <cl_uf_controller>:
extern Cl_ReturnCodeType cl_ufpumpFeedback_start(void);
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , Cl_Uint8Type* ,Cl_Uint8Type );
extern Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period);

Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data )
{
   9381c:	b580      	push	{r7, lr}
   9381e:	b08e      	sub	sp, #56	; 0x38
   93820:	af00      	add	r7, sp, #0
   93822:	4603      	mov	r3, r0
   93824:	6039      	str	r1, [r7, #0]
   93826:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   93828:	2300      	movs	r3, #0
   9382a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   9382e:	2300      	movs	r3, #0
   93830:	737b      	strb	r3, [r7, #13]
	Cl_Uint16Type uf_delta_value = 0 ;
   93832:	2300      	movs	r3, #0
   93834:	817b      	strh	r3, [r7, #10]
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   93836:	2300      	movs	r3, #0
   93838:	633b      	str	r3, [r7, #48]	; 0x30
	Cl_Uint32Type temptime = 0;
   9383a:	2300      	movs	r3, #0
   9383c:	62fb      	str	r3, [r7, #44]	; 0x2c
	switch(uf_state)
   9383e:	4b9e      	ldr	r3, [pc, #632]	; (93ab8 <cl_uf_controller+0x29c>)
   93840:	781b      	ldrb	r3, [r3, #0]
   93842:	2b04      	cmp	r3, #4
   93844:	f200 81b6 	bhi.w	93bb4 <cl_uf_controller+0x398>
   93848:	a201      	add	r2, pc, #4	; (adr r2, 93850 <cl_uf_controller+0x34>)
   9384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9384e:	bf00      	nop
   93850:	00093865 	.word	0x00093865
   93854:	0009399f 	.word	0x0009399f
   93858:	00093a99 	.word	0x00093a99
   9385c:	00093b69 	.word	0x00093b69
   93860:	00093bb5 	.word	0x00093bb5
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   93864:	79fb      	ldrb	r3, [r7, #7]
   93866:	2b02      	cmp	r3, #2
   93868:	d013      	beq.n	93892 <cl_uf_controller+0x76>
   9386a:	2b08      	cmp	r3, #8
   9386c:	d05a      	beq.n	93924 <cl_uf_controller+0x108>
   9386e:	2b01      	cmp	r3, #1
   93870:	d000      	beq.n	93874 <cl_uf_controller+0x58>
					}
					
				
					break;
					
					default:break;
   93872:	e093      	b.n	9399c <cl_uf_controller+0x180>
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					
					cl_uf_rate = data;
   93874:	683b      	ldr	r3, [r7, #0]
   93876:	4a91      	ldr	r2, [pc, #580]	; (93abc <cl_uf_controller+0x2a0>)
   93878:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   9387a:	4b90      	ldr	r3, [pc, #576]	; (93abc <cl_uf_controller+0x2a0>)
   9387c:	681b      	ldr	r3, [r3, #0]
   9387e:	b29a      	uxth	r2, r3
   93880:	4b8f      	ldr	r3, [pc, #572]	; (93ac0 <cl_uf_controller+0x2a4>)
   93882:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   93884:	4b8e      	ldr	r3, [pc, #568]	; (93ac0 <cl_uf_controller+0x2a4>)
   93886:	881b      	ldrh	r3, [r3, #0]
   93888:	4619      	mov	r1, r3
   9388a:	2004      	movs	r0, #4
   9388c:	4b8d      	ldr	r3, [pc, #564]	; (93ac4 <cl_uf_controller+0x2a8>)
   9388e:	4798      	blx	r3
					break;
   93890:	e084      	b.n	9399c <cl_uf_controller+0x180>
					case CL_UF_EVENT_START:
				
				if(Cl_MacState == MAC_DIALYSIS)
   93892:	4b8d      	ldr	r3, [pc, #564]	; (93ac8 <cl_uf_controller+0x2ac>)
   93894:	781b      	ldrb	r3, [r3, #0]
   93896:	2b0f      	cmp	r3, #15
   93898:	d132      	bne.n	93900 <cl_uf_controller+0xe4>
				{
					 temp = Treatdata[ID_ufgoal];
   9389a:	4b8c      	ldr	r3, [pc, #560]	; (93acc <cl_uf_controller+0x2b0>)
   9389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   9389e:	633b      	str	r3, [r7, #48]	; 0x30
					
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   938a0:	23f0      	movs	r3, #240	; 0xf0
   938a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/temptime;
   938a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   938a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   938a8:	fbb2 f2f3 	udiv	r2, r2, r3
   938ac:	4b88      	ldr	r3, [pc, #544]	; (93ad0 <cl_uf_controller+0x2b4>)
   938ae:	4610      	mov	r0, r2
   938b0:	4798      	blx	r3
   938b2:	4603      	mov	r3, r0
   938b4:	62bb      	str	r3, [r7, #40]	; 0x28
					int16_t intufrate =tempUfRate * 10;
   938b6:	4b87      	ldr	r3, [pc, #540]	; (93ad4 <cl_uf_controller+0x2b8>)
   938b8:	4987      	ldr	r1, [pc, #540]	; (93ad8 <cl_uf_controller+0x2bc>)
   938ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   938bc:	4798      	blx	r3
   938be:	4603      	mov	r3, r0
   938c0:	461a      	mov	r2, r3
   938c2:	4b86      	ldr	r3, [pc, #536]	; (93adc <cl_uf_controller+0x2c0>)
   938c4:	4610      	mov	r0, r2
   938c6:	4798      	blx	r3
   938c8:	4603      	mov	r3, r0
   938ca:	84fb      	strh	r3, [r7, #38]	; 0x26
					
					calibrate_uf(intufrate);
   938cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   938d0:	4618      	mov	r0, r3
   938d2:	4b83      	ldr	r3, [pc, #524]	; (93ae0 <cl_uf_controller+0x2c4>)
   938d4:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   938d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   938d8:	2b00      	cmp	r3, #0
   938da:	d05c      	beq.n	93996 <cl_uf_controller+0x17a>
	
					
					sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   938dc:	4b81      	ldr	r3, [pc, #516]	; (93ae4 <cl_uf_controller+0x2c8>)
   938de:	681b      	ldr	r3, [r3, #0]
   938e0:	4619      	mov	r1, r3
   938e2:	2004      	movs	r0, #4
   938e4:	4b77      	ldr	r3, [pc, #476]	; (93ac4 <cl_uf_controller+0x2a8>)
   938e6:	4798      	blx	r3
				//	cl_ufpumpFeedback_set_expected_period(uf_final); // not required for now
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   938e8:	2004      	movs	r0, #4
   938ea:	4b7f      	ldr	r3, [pc, #508]	; (93ae8 <cl_uf_controller+0x2cc>)
   938ec:	4798      	blx	r3
   938ee:	4603      	mov	r3, r0
   938f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   938f4:	4b7d      	ldr	r3, [pc, #500]	; (93aec <cl_uf_controller+0x2d0>)
   938f6:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   938f8:	4b6f      	ldr	r3, [pc, #444]	; (93ab8 <cl_uf_controller+0x29c>)
   938fa:	2201      	movs	r2, #1
   938fc:	701a      	strb	r2, [r3, #0]
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   938fe:	e04a      	b.n	93996 <cl_uf_controller+0x17a>
					}
					
				}
					else{
				
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period); // enter pwm data from the lookuop table
   93900:	4b6f      	ldr	r3, [pc, #444]	; (93ac0 <cl_uf_controller+0x2a4>)
   93902:	881b      	ldrh	r3, [r3, #0]
   93904:	4619      	mov	r1, r3
   93906:	2004      	movs	r0, #4
   93908:	4b6e      	ldr	r3, [pc, #440]	; (93ac4 <cl_uf_controller+0x2a8>)
   9390a:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   9390c:	2004      	movs	r0, #4
   9390e:	4b76      	ldr	r3, [pc, #472]	; (93ae8 <cl_uf_controller+0x2cc>)
   93910:	4798      	blx	r3
   93912:	4603      	mov	r3, r0
   93914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   93918:	4b74      	ldr	r3, [pc, #464]	; (93aec <cl_uf_controller+0x2d0>)
   9391a:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   9391c:	4b66      	ldr	r3, [pc, #408]	; (93ab8 <cl_uf_controller+0x29c>)
   9391e:	2201      	movs	r2, #1
   93920:	701a      	strb	r2, [r3, #0]
				
						
					}
					
					break;
   93922:	e038      	b.n	93996 <cl_uf_controller+0x17a>
					
					case CL_UF_EVENT_RESET:
					
					
					 temp = Treatdata[ID_ufgoal];
   93924:	4b69      	ldr	r3, [pc, #420]	; (93acc <cl_uf_controller+0x2b0>)
   93926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93928:	633b      	str	r3, [r7, #48]	; 0x30
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   9392a:	23f0      	movs	r3, #240	; 0xf0
   9392c:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate2 = temp/temptime;
   9392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93932:	fbb2 f2f3 	udiv	r2, r2, r3
   93936:	4b66      	ldr	r3, [pc, #408]	; (93ad0 <cl_uf_controller+0x2b4>)
   93938:	4610      	mov	r0, r2
   9393a:	4798      	blx	r3
   9393c:	4603      	mov	r3, r0
   9393e:	623b      	str	r3, [r7, #32]
					int16_t intufrate2 =tempUfRate2 * 10;
   93940:	4b64      	ldr	r3, [pc, #400]	; (93ad4 <cl_uf_controller+0x2b8>)
   93942:	4965      	ldr	r1, [pc, #404]	; (93ad8 <cl_uf_controller+0x2bc>)
   93944:	6a38      	ldr	r0, [r7, #32]
   93946:	4798      	blx	r3
   93948:	4603      	mov	r3, r0
   9394a:	461a      	mov	r2, r3
   9394c:	4b63      	ldr	r3, [pc, #396]	; (93adc <cl_uf_controller+0x2c0>)
   9394e:	4610      	mov	r0, r2
   93950:	4798      	blx	r3
   93952:	4603      	mov	r3, r0
   93954:	83fb      	strh	r3, [r7, #30]
					
					calibrate_uf(intufrate2);
   93956:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
   9395a:	4618      	mov	r0, r3
   9395c:	4b60      	ldr	r3, [pc, #384]	; (93ae0 <cl_uf_controller+0x2c4>)
   9395e:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   93960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93962:	2b00      	cmp	r3, #0
   93964:	d019      	beq.n	9399a <cl_uf_controller+0x17e>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   93966:	4b5f      	ldr	r3, [pc, #380]	; (93ae4 <cl_uf_controller+0x2c8>)
   93968:	681b      	ldr	r3, [r3, #0]
   9396a:	4619      	mov	r1, r3
   9396c:	2004      	movs	r0, #4
   9396e:	4b55      	ldr	r3, [pc, #340]	; (93ac4 <cl_uf_controller+0x2a8>)
   93970:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   93972:	4b5c      	ldr	r3, [pc, #368]	; (93ae4 <cl_uf_controller+0x2c8>)
   93974:	681b      	ldr	r3, [r3, #0]
   93976:	b21b      	sxth	r3, r3
   93978:	4618      	mov	r0, r3
   9397a:	4b5d      	ldr	r3, [pc, #372]	; (93af0 <cl_uf_controller+0x2d4>)
   9397c:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   9397e:	2004      	movs	r0, #4
   93980:	4b59      	ldr	r3, [pc, #356]	; (93ae8 <cl_uf_controller+0x2cc>)
   93982:	4798      	blx	r3
   93984:	4603      	mov	r3, r0
   93986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   9398a:	4b58      	ldr	r3, [pc, #352]	; (93aec <cl_uf_controller+0x2d0>)
   9398c:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   9398e:	4b4a      	ldr	r3, [pc, #296]	; (93ab8 <cl_uf_controller+0x29c>)
   93990:	2201      	movs	r2, #1
   93992:	701a      	strb	r2, [r3, #0]
					}
					
				
					break;
   93994:	e001      	b.n	9399a <cl_uf_controller+0x17e>
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   93996:	bf00      	nop
   93998:	e10d      	b.n	93bb6 <cl_uf_controller+0x39a>
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				
					break;
   9399a:	bf00      	nop
					
					default:break;
					
				}
			break;
   9399c:	e10b      	b.n	93bb6 <cl_uf_controller+0x39a>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   9399e:	79fb      	ldrb	r3, [r7, #7]
   939a0:	3b01      	subs	r3, #1
   939a2:	2b07      	cmp	r3, #7
   939a4:	d874      	bhi.n	93a90 <cl_uf_controller+0x274>
   939a6:	a201      	add	r2, pc, #4	; (adr r2, 939ac <cl_uf_controller+0x190>)
   939a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   939ac:	000939e7 	.word	0x000939e7
   939b0:	00093a91 	.word	0x00093a91
   939b4:	00093a91 	.word	0x00093a91
   939b8:	000939f9 	.word	0x000939f9
   939bc:	00093a17 	.word	0x00093a17
   939c0:	000939cd 	.word	0x000939cd
   939c4:	00093a91 	.word	0x00093a91
   939c8:	00093a1f 	.word	0x00093a1f
			{
				case CL_UF_EVENT_SECOND:
				cl_ufpumpFeedback_get_state(&uf_pumpstate);
   939cc:	f107 030d 	add.w	r3, r7, #13
   939d0:	4618      	mov	r0, r3
   939d2:	4b48      	ldr	r3, [pc, #288]	; (93af4 <cl_uf_controller+0x2d8>)
   939d4:	4798      	blx	r3
				cl_ufpumpFeedback_get_delta(&uf_delta_value);
   939d6:	f107 030a 	add.w	r3, r7, #10
   939da:	4618      	mov	r0, r3
   939dc:	4b46      	ldr	r3, [pc, #280]	; (93af8 <cl_uf_controller+0x2dc>)
   939de:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_RPM",6);
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_delta_value,2);

				if(uf_pumpstate == CL_UFP_STATE_RUNNING_FAST )
   939e0:	7b7b      	ldrb	r3, [r7, #13]
   939e2:	2b05      	cmp	r3, #5
				}
				else
				{
					
				}
				break;
   939e4:	e057      	b.n	93a96 <cl_uf_controller+0x27a>
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   939e6:	683b      	ldr	r3, [r7, #0]
   939e8:	4a34      	ldr	r2, [pc, #208]	; (93abc <cl_uf_controller+0x2a0>)
   939ea:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   939ec:	683b      	ldr	r3, [r7, #0]
   939ee:	4619      	mov	r1, r3
   939f0:	2004      	movs	r0, #4
   939f2:	4b34      	ldr	r3, [pc, #208]	; (93ac4 <cl_uf_controller+0x2a8>)
   939f4:	4798      	blx	r3
				break;
   939f6:	e04e      	b.n	93a96 <cl_uf_controller+0x27a>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   939f8:	2004      	movs	r0, #4
   939fa:	4b40      	ldr	r3, [pc, #256]	; (93afc <cl_uf_controller+0x2e0>)
   939fc:	4798      	blx	r3
   939fe:	4603      	mov	r3, r0
   93a00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   93a04:	4b3e      	ldr	r3, [pc, #248]	; (93b00 <cl_uf_controller+0x2e4>)
   93a06:	4798      	blx	r3
   93a08:	4603      	mov	r3, r0
   93a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   93a0e:	4b2a      	ldr	r3, [pc, #168]	; (93ab8 <cl_uf_controller+0x29c>)
   93a10:	2202      	movs	r2, #2
   93a12:	701a      	strb	r2, [r3, #0]
				break;
   93a14:	e03f      	b.n	93a96 <cl_uf_controller+0x27a>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   93a16:	4b28      	ldr	r3, [pc, #160]	; (93ab8 <cl_uf_controller+0x29c>)
   93a18:	2200      	movs	r2, #0
   93a1a:	701a      	strb	r2, [r3, #0]
				break;
   93a1c:	e03b      	b.n	93a96 <cl_uf_controller+0x27a>
				case CL_UF_EVENT_RESET:										// added this event
					temp = Treatdata[ID_ufgoal];
   93a1e:	4b2b      	ldr	r3, [pc, #172]	; (93acc <cl_uf_controller+0x2b0>)
   93a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93a22:	633b      	str	r3, [r7, #48]	; 0x30
					temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   93a24:	23f0      	movs	r3, #240	; 0xf0
   93a26:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/temptime;
   93a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93a2c:	fbb2 f2f3 	udiv	r2, r2, r3
   93a30:	4b27      	ldr	r3, [pc, #156]	; (93ad0 <cl_uf_controller+0x2b4>)
   93a32:	4610      	mov	r0, r2
   93a34:	4798      	blx	r3
   93a36:	4603      	mov	r3, r0
   93a38:	61bb      	str	r3, [r7, #24]
					int16_t intufrate =tempUfRate * 10;
   93a3a:	4b26      	ldr	r3, [pc, #152]	; (93ad4 <cl_uf_controller+0x2b8>)
   93a3c:	4926      	ldr	r1, [pc, #152]	; (93ad8 <cl_uf_controller+0x2bc>)
   93a3e:	69b8      	ldr	r0, [r7, #24]
   93a40:	4798      	blx	r3
   93a42:	4603      	mov	r3, r0
   93a44:	461a      	mov	r2, r3
   93a46:	4b25      	ldr	r3, [pc, #148]	; (93adc <cl_uf_controller+0x2c0>)
   93a48:	4610      	mov	r0, r2
   93a4a:	4798      	blx	r3
   93a4c:	4603      	mov	r3, r0
   93a4e:	82fb      	strh	r3, [r7, #22]
					
					calibrate_uf(intufrate);
   93a50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   93a54:	4618      	mov	r0, r3
   93a56:	4b22      	ldr	r3, [pc, #136]	; (93ae0 <cl_uf_controller+0x2c4>)
   93a58:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   93a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93a5c:	2b00      	cmp	r3, #0
   93a5e:	d019      	beq.n	93a94 <cl_uf_controller+0x278>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   93a60:	4b20      	ldr	r3, [pc, #128]	; (93ae4 <cl_uf_controller+0x2c8>)
   93a62:	681b      	ldr	r3, [r3, #0]
   93a64:	4619      	mov	r1, r3
   93a66:	2004      	movs	r0, #4
   93a68:	4b16      	ldr	r3, [pc, #88]	; (93ac4 <cl_uf_controller+0x2a8>)
   93a6a:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   93a6c:	4b1d      	ldr	r3, [pc, #116]	; (93ae4 <cl_uf_controller+0x2c8>)
   93a6e:	681b      	ldr	r3, [r3, #0]
   93a70:	b21b      	sxth	r3, r3
   93a72:	4618      	mov	r0, r3
   93a74:	4b1e      	ldr	r3, [pc, #120]	; (93af0 <cl_uf_controller+0x2d4>)
   93a76:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   93a78:	2004      	movs	r0, #4
   93a7a:	4b1b      	ldr	r3, [pc, #108]	; (93ae8 <cl_uf_controller+0x2cc>)
   93a7c:	4798      	blx	r3
   93a7e:	4603      	mov	r3, r0
   93a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   93a84:	4b19      	ldr	r3, [pc, #100]	; (93aec <cl_uf_controller+0x2d0>)
   93a86:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   93a88:	4b0b      	ldr	r3, [pc, #44]	; (93ab8 <cl_uf_controller+0x29c>)
   93a8a:	2201      	movs	r2, #1
   93a8c:	701a      	strb	r2, [r3, #0]
					}
					
				break;
   93a8e:	e001      	b.n	93a94 <cl_uf_controller+0x278>
				default:break;
   93a90:	bf00      	nop
   93a92:	e090      	b.n	93bb6 <cl_uf_controller+0x39a>
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				break;
   93a94:	bf00      	nop
				default:break;
				
			}
			break;
   93a96:	e08e      	b.n	93bb6 <cl_uf_controller+0x39a>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   93a98:	79fb      	ldrb	r3, [r7, #7]
   93a9a:	2b01      	cmp	r3, #1
   93a9c:	d002      	beq.n	93aa4 <cl_uf_controller+0x288>
   93a9e:	2b02      	cmp	r3, #2
   93aa0:	d030      	beq.n	93b04 <cl_uf_controller+0x2e8>
					uf_state = CL_UF_STATE_STARTED;
				}
				
				
				break;
				default:break;
   93aa2:	e060      	b.n	93b66 <cl_uf_controller+0x34a>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   93aa4:	683b      	ldr	r3, [r7, #0]
   93aa6:	4a05      	ldr	r2, [pc, #20]	; (93abc <cl_uf_controller+0x2a0>)
   93aa8:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   93aaa:	683b      	ldr	r3, [r7, #0]
   93aac:	4619      	mov	r1, r3
   93aae:	2004      	movs	r0, #4
   93ab0:	4b04      	ldr	r3, [pc, #16]	; (93ac4 <cl_uf_controller+0x2a8>)
   93ab2:	4798      	blx	r3
				break;
   93ab4:	e057      	b.n	93b66 <cl_uf_controller+0x34a>
   93ab6:	bf00      	nop
   93ab8:	200726ee 	.word	0x200726ee
   93abc:	200726f0 	.word	0x200726f0
   93ac0:	200726f4 	.word	0x200726f4
   93ac4:	00097569 	.word	0x00097569
   93ac8:	200704b0 	.word	0x200704b0
   93acc:	20073194 	.word	0x20073194
   93ad0:	000a33a1 	.word	0x000a33a1
   93ad4:	000a3451 	.word	0x000a3451
   93ad8:	41200000 	.word	0x41200000
   93adc:	000a37dd 	.word	0x000a37dd
   93ae0:	00084881 	.word	0x00084881
   93ae4:	20071678 	.word	0x20071678
   93ae8:	00097451 	.word	0x00097451
   93aec:	00093785 	.word	0x00093785
   93af0:	000937fd 	.word	0x000937fd
   93af4:	000937ad 	.word	0x000937ad
   93af8:	000937cd 	.word	0x000937cd
   93afc:	0009748d 	.word	0x0009748d
   93b00:	0009379d 	.word	0x0009379d
				case CL_UF_EVENT_START:													// added this event
				//cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				//uf_state = CL_UF_STATE_STARTED;
				
				temp = Treatdata[ID_ufgoal];
   93b04:	4b2e      	ldr	r3, [pc, #184]	; (93bc0 <cl_uf_controller+0x3a4>)
   93b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   93b08:	633b      	str	r3, [r7, #48]	; 0x30
				temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   93b0a:	23f0      	movs	r3, #240	; 0xf0
   93b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
				
				float tempUfRate = temp/temptime;
   93b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   93b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   93b12:	fbb2 f2f3 	udiv	r2, r2, r3
   93b16:	4b2b      	ldr	r3, [pc, #172]	; (93bc4 <cl_uf_controller+0x3a8>)
   93b18:	4610      	mov	r0, r2
   93b1a:	4798      	blx	r3
   93b1c:	4603      	mov	r3, r0
   93b1e:	613b      	str	r3, [r7, #16]
				int16_t intufrate =tempUfRate * 10;
   93b20:	4b29      	ldr	r3, [pc, #164]	; (93bc8 <cl_uf_controller+0x3ac>)
   93b22:	492a      	ldr	r1, [pc, #168]	; (93bcc <cl_uf_controller+0x3b0>)
   93b24:	6938      	ldr	r0, [r7, #16]
   93b26:	4798      	blx	r3
   93b28:	4603      	mov	r3, r0
   93b2a:	461a      	mov	r2, r3
   93b2c:	4b28      	ldr	r3, [pc, #160]	; (93bd0 <cl_uf_controller+0x3b4>)
   93b2e:	4610      	mov	r0, r2
   93b30:	4798      	blx	r3
   93b32:	4603      	mov	r3, r0
   93b34:	81fb      	strh	r3, [r7, #14]
				
				calibrate_uf(intufrate);
   93b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   93b3a:	4618      	mov	r0, r3
   93b3c:	4b25      	ldr	r3, [pc, #148]	; (93bd4 <cl_uf_controller+0x3b8>)
   93b3e:	4798      	blx	r3
				// based on this uf rate calculate the PWM
				// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

				if(temp > 0){
   93b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   93b42:	2b00      	cmp	r3, #0
   93b44:	d00e      	beq.n	93b64 <cl_uf_controller+0x348>
					
					
		//			sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
//					cl_ufpumpFeedback_set_expected_period(uf_final); // not required
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   93b46:	2004      	movs	r0, #4
   93b48:	4b23      	ldr	r3, [pc, #140]	; (93bd8 <cl_uf_controller+0x3bc>)
   93b4a:	4798      	blx	r3
   93b4c:	4603      	mov	r3, r0
   93b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					sv_cntrl_setpumpspeed(UFPUMP,uf_final);
   93b52:	4b22      	ldr	r3, [pc, #136]	; (93bdc <cl_uf_controller+0x3c0>)
   93b54:	681b      	ldr	r3, [r3, #0]
   93b56:	4619      	mov	r1, r3
   93b58:	2004      	movs	r0, #4
   93b5a:	4b21      	ldr	r3, [pc, #132]	; (93be0 <cl_uf_controller+0x3c4>)
   93b5c:	4798      	blx	r3
//					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   93b5e:	4b21      	ldr	r3, [pc, #132]	; (93be4 <cl_uf_controller+0x3c8>)
   93b60:	2201      	movs	r2, #1
   93b62:	701a      	strb	r2, [r3, #0]
				}
				
				
				break;
   93b64:	bf00      	nop
				default:break;
				
			}
			break;
   93b66:	e026      	b.n	93bb6 <cl_uf_controller+0x39a>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   93b68:	79fb      	ldrb	r3, [r7, #7]
   93b6a:	2b02      	cmp	r3, #2
   93b6c:	d00d      	beq.n	93b8a <cl_uf_controller+0x36e>
   93b6e:	2b04      	cmp	r3, #4
   93b70:	d015      	beq.n	93b9e <cl_uf_controller+0x382>
   93b72:	2b01      	cmp	r3, #1
   93b74:	d000      	beq.n	93b78 <cl_uf_controller+0x35c>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   93b76:	e01c      	b.n	93bb2 <cl_uf_controller+0x396>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   93b78:	683b      	ldr	r3, [r7, #0]
   93b7a:	4a1b      	ldr	r2, [pc, #108]	; (93be8 <cl_uf_controller+0x3cc>)
   93b7c:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   93b7e:	683b      	ldr	r3, [r7, #0]
   93b80:	4619      	mov	r1, r3
   93b82:	2004      	movs	r0, #4
   93b84:	4b16      	ldr	r3, [pc, #88]	; (93be0 <cl_uf_controller+0x3c4>)
   93b86:	4798      	blx	r3
				break;
   93b88:	e013      	b.n	93bb2 <cl_uf_controller+0x396>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   93b8a:	2004      	movs	r0, #4
   93b8c:	4b12      	ldr	r3, [pc, #72]	; (93bd8 <cl_uf_controller+0x3bc>)
   93b8e:	4798      	blx	r3
   93b90:	4603      	mov	r3, r0
   93b92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STARTED;
   93b96:	4b13      	ldr	r3, [pc, #76]	; (93be4 <cl_uf_controller+0x3c8>)
   93b98:	2201      	movs	r2, #1
   93b9a:	701a      	strb	r2, [r3, #0]
				break;
   93b9c:	e009      	b.n	93bb2 <cl_uf_controller+0x396>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   93b9e:	2004      	movs	r0, #4
   93ba0:	4b12      	ldr	r3, [pc, #72]	; (93bec <cl_uf_controller+0x3d0>)
   93ba2:	4798      	blx	r3
   93ba4:	4603      	mov	r3, r0
   93ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   93baa:	4b0e      	ldr	r3, [pc, #56]	; (93be4 <cl_uf_controller+0x3c8>)
   93bac:	2202      	movs	r2, #2
   93bae:	701a      	strb	r2, [r3, #0]
				break;
   93bb0:	bf00      	nop
				default:break;
				
			}
			break;
   93bb2:	e000      	b.n	93bb6 <cl_uf_controller+0x39a>
			case CL_UF_STATE_COMPLETED:
			break;
			
			default:break;
   93bb4:	bf00      	nop
			
			
	}
	return CL_OK;
   93bb6:	2300      	movs	r3, #0
	
	
}
   93bb8:	4618      	mov	r0, r3
   93bba:	3738      	adds	r7, #56	; 0x38
   93bbc:	46bd      	mov	sp, r7
   93bbe:	bd80      	pop	{r7, pc}
   93bc0:	20073194 	.word	0x20073194
   93bc4:	000a33a1 	.word	0x000a33a1
   93bc8:	000a3451 	.word	0x000a3451
   93bcc:	41200000 	.word	0x41200000
   93bd0:	000a37dd 	.word	0x000a37dd
   93bd4:	00084881 	.word	0x00084881
   93bd8:	00097451 	.word	0x00097451
   93bdc:	20071678 	.word	0x20071678
   93be0:	00097569 	.word	0x00097569
   93be4:	200726ee 	.word	0x200726ee
   93be8:	200726f0 	.word	0x200726f0
   93bec:	0009748d 	.word	0x0009748d

00093bf0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   93bf0:	b480      	push	{r7}
   93bf2:	b083      	sub	sp, #12
   93bf4:	af00      	add	r7, sp, #0
   93bf6:	4603      	mov	r3, r0
   93bf8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   93bfa:	4908      	ldr	r1, [pc, #32]	; (93c1c <NVIC_EnableIRQ+0x2c>)
   93bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93c00:	095b      	lsrs	r3, r3, #5
   93c02:	79fa      	ldrb	r2, [r7, #7]
   93c04:	f002 021f 	and.w	r2, r2, #31
   93c08:	2001      	movs	r0, #1
   93c0a:	fa00 f202 	lsl.w	r2, r0, r2
   93c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   93c12:	bf00      	nop
   93c14:	370c      	adds	r7, #12
   93c16:	46bd      	mov	sp, r7
   93c18:	bc80      	pop	{r7}
   93c1a:	4770      	bx	lr
   93c1c:	e000e100 	.word	0xe000e100

00093c20 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   93c20:	b480      	push	{r7}
   93c22:	b08b      	sub	sp, #44	; 0x2c
   93c24:	af00      	add	r7, sp, #0
   93c26:	6078      	str	r0, [r7, #4]
   93c28:	460b      	mov	r3, r1
   93c2a:	70fb      	strb	r3, [r7, #3]
   93c2c:	687b      	ldr	r3, [r7, #4]
   93c2e:	627b      	str	r3, [r7, #36]	; 0x24
   93c30:	78fb      	ldrb	r3, [r7, #3]
   93c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   93c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   93c38:	61fb      	str	r3, [r7, #28]
   93c3a:	69fb      	ldr	r3, [r7, #28]
   93c3c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   93c3e:	69bb      	ldr	r3, [r7, #24]
   93c40:	095b      	lsrs	r3, r3, #5
   93c42:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   93c44:	697b      	ldr	r3, [r7, #20]
   93c46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   93c4a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   93c4e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   93c50:	613b      	str	r3, [r7, #16]

	if (level) {
   93c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   93c56:	2b00      	cmp	r3, #0
   93c58:	d009      	beq.n	93c6e <ioport_set_pin_level+0x4e>
   93c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   93c5c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   93c5e:	68fb      	ldr	r3, [r7, #12]
   93c60:	f003 031f 	and.w	r3, r3, #31
   93c64:	2201      	movs	r2, #1
   93c66:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   93c68:	693b      	ldr	r3, [r7, #16]
   93c6a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   93c6c:	e008      	b.n	93c80 <ioport_set_pin_level+0x60>
   93c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   93c70:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   93c72:	68bb      	ldr	r3, [r7, #8]
   93c74:	f003 031f 	and.w	r3, r3, #31
   93c78:	2201      	movs	r2, #1
   93c7a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   93c7c:	693b      	ldr	r3, [r7, #16]
   93c7e:	635a      	str	r2, [r3, #52]	; 0x34
   93c80:	bf00      	nop
   93c82:	372c      	adds	r7, #44	; 0x2c
   93c84:	46bd      	mov	sp, r7
   93c86:	bc80      	pop	{r7}
   93c88:	4770      	bx	lr
   93c8a:	bf00      	nop

00093c8c <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   93c8c:	b480      	push	{r7}
   93c8e:	b083      	sub	sp, #12
   93c90:	af00      	add	r7, sp, #0
   93c92:	6078      	str	r0, [r7, #4]
   93c94:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   93c96:	687b      	ldr	r3, [r7, #4]
   93c98:	683a      	ldr	r2, [r7, #0]
   93c9a:	601a      	str	r2, [r3, #0]
}
   93c9c:	bf00      	nop
   93c9e:	370c      	adds	r7, #12
   93ca0:	46bd      	mov	sp, r7
   93ca2:	bc80      	pop	{r7}
   93ca4:	4770      	bx	lr
   93ca6:	bf00      	nop

00093ca8 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   93ca8:	b580      	push	{r7, lr}
   93caa:	b082      	sub	sp, #8
   93cac:	af00      	add	r7, sp, #0
   93cae:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   93cb0:	687b      	ldr	r3, [r7, #4]
   93cb2:	681b      	ldr	r3, [r3, #0]
   93cb4:	2100      	movs	r1, #0
   93cb6:	4618      	mov	r0, r3
   93cb8:	4b02      	ldr	r3, [pc, #8]	; (93cc4 <sn65hvda540_normal_mode+0x1c>)
   93cba:	4798      	blx	r3
}
   93cbc:	bf00      	nop
   93cbe:	3708      	adds	r7, #8
   93cc0:	46bd      	mov	sp, r7
   93cc2:	bd80      	pop	{r7, pc}
   93cc4:	00093c21 	.word	0x00093c21

00093cc8 <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   93cc8:	b580      	push	{r7, lr}
   93cca:	b082      	sub	sp, #8
   93ccc:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   93cce:	4b13      	ldr	r3, [pc, #76]	; (93d1c <CAN0_Handler+0x54>)
   93cd0:	691b      	ldr	r3, [r3, #16]
   93cd2:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   93cd4:	687b      	ldr	r3, [r7, #4]
   93cd6:	b2db      	uxtb	r3, r3
   93cd8:	2b00      	cmp	r3, #0
   93cda:	d01b      	beq.n	93d14 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   93cdc:	4b0f      	ldr	r3, [pc, #60]	; (93d1c <CAN0_Handler+0x54>)
   93cde:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   93ce2:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   93ce4:	687b      	ldr	r3, [r7, #4]
   93ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   93cea:	2b00      	cmp	r3, #0
   93cec:	d012      	beq.n	93d14 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   93cee:	4b0c      	ldr	r3, [pc, #48]	; (93d20 <CAN0_Handler+0x58>)
   93cf0:	2201      	movs	r2, #1
   93cf2:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   93cf4:	4a0a      	ldr	r2, [pc, #40]	; (93d20 <CAN0_Handler+0x58>)
   93cf6:	687b      	ldr	r3, [r7, #4]
   93cf8:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   93cfa:	4809      	ldr	r0, [pc, #36]	; (93d20 <CAN0_Handler+0x58>)
   93cfc:	4b09      	ldr	r3, [pc, #36]	; (93d24 <CAN0_Handler+0x5c>)
   93cfe:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   93d00:	4807      	ldr	r0, [pc, #28]	; (93d20 <CAN0_Handler+0x58>)
   93d02:	4b09      	ldr	r3, [pc, #36]	; (93d28 <CAN0_Handler+0x60>)
   93d04:	4798      	blx	r3
			g_ul_recv_status = 1;
   93d06:	4b09      	ldr	r3, [pc, #36]	; (93d2c <CAN0_Handler+0x64>)
   93d08:	2201      	movs	r2, #1
   93d0a:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   93d0c:	4b07      	ldr	r3, [pc, #28]	; (93d2c <CAN0_Handler+0x64>)
   93d0e:	681b      	ldr	r3, [r3, #0]
   93d10:	4a07      	ldr	r2, [pc, #28]	; (93d30 <CAN0_Handler+0x68>)
   93d12:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   93d14:	bf00      	nop
   93d16:	3708      	adds	r7, #8
   93d18:	46bd      	mov	sp, r7
   93d1a:	bd80      	pop	{r7, pc}
   93d1c:	400b4000 	.word	0x400b4000
   93d20:	2007330c 	.word	0x2007330c
   93d24:	00093fc1 	.word	0x00093fc1
   93d28:	00093dd9 	.word	0x00093dd9
   93d2c:	200726f8 	.word	0x200726f8
   93d30:	200726fc 	.word	0x200726fc

00093d34 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   93d34:	b580      	push	{r7, lr}
   93d36:	b084      	sub	sp, #16
   93d38:	af00      	add	r7, sp, #0
   93d3a:	4603      	mov	r3, r0
   93d3c:	71fb      	strb	r3, [r7, #7]
   93d3e:	460b      	mov	r3, r1
   93d40:	71bb      	strb	r3, [r7, #6]
   93d42:	4613      	mov	r3, r2
   93d44:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   93d46:	230a      	movs	r3, #10
   93d48:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   93d4a:	79bb      	ldrb	r3, [r7, #6]
   93d4c:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   93d4e:	79fb      	ldrb	r3, [r7, #7]
   93d50:	049b      	lsls	r3, r3, #18
   93d52:	461a      	mov	r2, r3
   93d54:	4b1b      	ldr	r3, [pc, #108]	; (93dc4 <dd_master_command+0x90>)
   93d56:	4013      	ands	r3, r2
   93d58:	4a1b      	ldr	r2, [pc, #108]	; (93dc8 <dd_master_command+0x94>)
   93d5a:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   93d5c:	88bb      	ldrh	r3, [r7, #4]
   93d5e:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   93d60:	68fb      	ldr	r3, [r7, #12]
   93d62:	4a19      	ldr	r2, [pc, #100]	; (93dc8 <dd_master_command+0x94>)
   93d64:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   93d66:	4b18      	ldr	r3, [pc, #96]	; (93dc8 <dd_master_command+0x94>)
   93d68:	2200      	movs	r2, #0
   93d6a:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   93d6c:	4b17      	ldr	r3, [pc, #92]	; (93dcc <dd_master_command+0x98>)
   93d6e:	f04f 32ff 	mov.w	r2, #4294967295
   93d72:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   93d74:	202b      	movs	r0, #43	; 0x2b
   93d76:	4b16      	ldr	r3, [pc, #88]	; (93dd0 <dd_master_command+0x9c>)
   93d78:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   93d7a:	4b13      	ldr	r3, [pc, #76]	; (93dc8 <dd_master_command+0x94>)
   93d7c:	2200      	movs	r2, #0
   93d7e:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   93d80:	4b11      	ldr	r3, [pc, #68]	; (93dc8 <dd_master_command+0x94>)
   93d82:	2203      	movs	r2, #3
   93d84:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   93d86:	4b10      	ldr	r3, [pc, #64]	; (93dc8 <dd_master_command+0x94>)
   93d88:	2200      	movs	r2, #0
   93d8a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   93d8c:	4b0e      	ldr	r3, [pc, #56]	; (93dc8 <dd_master_command+0x94>)
   93d8e:	2204      	movs	r2, #4
   93d90:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   93d92:	4b0d      	ldr	r3, [pc, #52]	; (93dc8 <dd_master_command+0x94>)
   93d94:	2200      	movs	r2, #0
   93d96:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   93d98:	4b0b      	ldr	r3, [pc, #44]	; (93dc8 <dd_master_command+0x94>)
   93d9a:	f240 72fc 	movw	r2, #2044	; 0x7fc
   93d9e:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   93da0:	bf00      	nop
   93da2:	4809      	ldr	r0, [pc, #36]	; (93dc8 <dd_master_command+0x94>)
   93da4:	4b0b      	ldr	r3, [pc, #44]	; (93dd4 <dd_master_command+0xa0>)
   93da6:	4798      	blx	r3
   93da8:	4603      	mov	r3, r0
   93daa:	2b01      	cmp	r3, #1
   93dac:	d0f9      	beq.n	93da2 <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   93dae:	202b      	movs	r0, #43	; 0x2b
   93db0:	4b07      	ldr	r3, [pc, #28]	; (93dd0 <dd_master_command+0x9c>)
   93db2:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   93db4:	4b05      	ldr	r3, [pc, #20]	; (93dcc <dd_master_command+0x98>)
   93db6:	2202      	movs	r2, #2
   93db8:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   93dba:	2300      	movs	r3, #0
}
   93dbc:	4618      	mov	r0, r3
   93dbe:	3710      	adds	r7, #16
   93dc0:	46bd      	mov	sp, r7
   93dc2:	bd80      	pop	{r7, pc}
   93dc4:	1ffc0000 	.word	0x1ffc0000
   93dc8:	2007330c 	.word	0x2007330c
   93dcc:	400b4000 	.word	0x400b4000
   93dd0:	00093bf1 	.word	0x00093bf1
   93dd4:	00094091 	.word	0x00094091

00093dd8 <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   93dd8:	b480      	push	{r7}
   93dda:	b083      	sub	sp, #12
   93ddc:	af00      	add	r7, sp, #0
   93dde:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   93de0:	687b      	ldr	r3, [r7, #4]
   93de2:	699b      	ldr	r3, [r3, #24]
   93de4:	4a70      	ldr	r2, [pc, #448]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93de6:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   93de8:	4b6f      	ldr	r3, [pc, #444]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93dea:	781b      	ldrb	r3, [r3, #0]
   93dec:	b2da      	uxtb	r2, r3
   93dee:	4b6f      	ldr	r3, [pc, #444]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93df0:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   93df2:	4b6d      	ldr	r3, [pc, #436]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93df4:	785b      	ldrb	r3, [r3, #1]
   93df6:	b2da      	uxtb	r2, r3
   93df8:	4b6c      	ldr	r3, [pc, #432]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93dfa:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   93dfc:	4b6b      	ldr	r3, [pc, #428]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93dfe:	781b      	ldrb	r3, [r3, #0]
   93e00:	b2db      	uxtb	r3, r3
   93e02:	2b02      	cmp	r3, #2
   93e04:	f000 80c9 	beq.w	93f9a <dd_can_dump_mailbox_data+0x1c2>
   93e08:	2b03      	cmp	r3, #3
   93e0a:	d01d      	beq.n	93e48 <dd_can_dump_mailbox_data+0x70>
   93e0c:	2b01      	cmp	r3, #1
   93e0e:	d000      	beq.n	93e12 <dd_can_dump_mailbox_data+0x3a>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   93e10:	e0c4      	b.n	93f9c <dd_can_dump_mailbox_data+0x1c4>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   93e12:	4b66      	ldr	r3, [pc, #408]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e14:	785b      	ldrb	r3, [r3, #1]
   93e16:	b2db      	uxtb	r3, r3
   93e18:	2b07      	cmp	r3, #7
   93e1a:	d000      	beq.n	93e1e <dd_can_dump_mailbox_data+0x46>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   93e1c:	e013      	b.n	93e46 <dd_can_dump_mailbox_data+0x6e>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   93e1e:	4b62      	ldr	r3, [pc, #392]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e20:	885b      	ldrh	r3, [r3, #2]
   93e22:	b29a      	uxth	r2, r3
   93e24:	4b61      	ldr	r3, [pc, #388]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e26:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93e28:	687b      	ldr	r3, [r7, #4]
   93e2a:	69db      	ldr	r3, [r3, #28]
   93e2c:	4a5e      	ldr	r2, [pc, #376]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e2e:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   93e30:	4b5d      	ldr	r3, [pc, #372]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e32:	881b      	ldrh	r3, [r3, #0]
   93e34:	b29a      	uxth	r2, r3
   93e36:	4b5d      	ldr	r3, [pc, #372]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e38:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   93e3a:	4b5b      	ldr	r3, [pc, #364]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e3c:	885b      	ldrh	r3, [r3, #2]
   93e3e:	b29a      	uxth	r2, r3
   93e40:	4b5a      	ldr	r3, [pc, #360]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e42:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   93e44:	bf00      	nop
			
			default :
			break;
		}
		break;
   93e46:	e0a9      	b.n	93f9c <dd_can_dump_mailbox_data+0x1c4>
		case PROPORTIONING_CPU_id :
		break;
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   93e48:	4b58      	ldr	r3, [pc, #352]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e4a:	785b      	ldrb	r3, [r3, #1]
   93e4c:	b2db      	uxtb	r3, r3
   93e4e:	3b01      	subs	r3, #1
   93e50:	2b05      	cmp	r3, #5
   93e52:	f200 80a0 	bhi.w	93f96 <dd_can_dump_mailbox_data+0x1be>
   93e56:	a201      	add	r2, pc, #4	; (adr r2, 93e5c <dd_can_dump_mailbox_data+0x84>)
   93e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93e5c:	00093e75 	.word	0x00093e75
   93e60:	00093eb1 	.word	0x00093eb1
   93e64:	00093edf 	.word	0x00093edf
   93e68:	00093f0d 	.word	0x00093f0d
   93e6c:	00093f3b 	.word	0x00093f3b
   93e70:	00093f69 	.word	0x00093f69
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   93e74:	4b4c      	ldr	r3, [pc, #304]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e76:	885b      	ldrh	r3, [r3, #2]
   93e78:	b29a      	uxth	r2, r3
   93e7a:	4b4c      	ldr	r3, [pc, #304]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e7c:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93e7e:	687b      	ldr	r3, [r7, #4]
   93e80:	69db      	ldr	r3, [r3, #28]
   93e82:	4a49      	ldr	r2, [pc, #292]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e84:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   93e86:	4b48      	ldr	r3, [pc, #288]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e88:	881b      	ldrh	r3, [r3, #0]
   93e8a:	b29a      	uxth	r2, r3
   93e8c:	4b47      	ldr	r3, [pc, #284]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e8e:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   93e90:	4b45      	ldr	r3, [pc, #276]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93e92:	885b      	ldrh	r3, [r3, #2]
   93e94:	b29a      	uxth	r2, r3
   93e96:	4b45      	ldr	r3, [pc, #276]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93e98:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   93e9a:	4b45      	ldr	r3, [pc, #276]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93e9c:	2201      	movs	r2, #1
   93e9e:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   93ea0:	4b44      	ldr	r3, [pc, #272]	; (93fb4 <dd_can_dump_mailbox_data+0x1dc>)
   93ea2:	681a      	ldr	r2, [r3, #0]
   93ea4:	4b44      	ldr	r3, [pc, #272]	; (93fb8 <dd_can_dump_mailbox_data+0x1e0>)
   93ea6:	681b      	ldr	r3, [r3, #0]
   93ea8:	1ad3      	subs	r3, r2, r3
   93eaa:	4a44      	ldr	r2, [pc, #272]	; (93fbc <dd_can_dump_mailbox_data+0x1e4>)
   93eac:	6013      	str	r3, [r2, #0]
			break;
   93eae:	e073      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   93eb0:	4b3d      	ldr	r3, [pc, #244]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93eb2:	885b      	ldrh	r3, [r3, #2]
   93eb4:	b29a      	uxth	r2, r3
   93eb6:	4b3d      	ldr	r3, [pc, #244]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93eb8:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93eba:	687b      	ldr	r3, [r7, #4]
   93ebc:	69db      	ldr	r3, [r3, #28]
   93ebe:	4a3a      	ldr	r2, [pc, #232]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93ec0:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   93ec2:	4b39      	ldr	r3, [pc, #228]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93ec4:	881b      	ldrh	r3, [r3, #0]
   93ec6:	b29a      	uxth	r2, r3
   93ec8:	4b38      	ldr	r3, [pc, #224]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93eca:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   93ecc:	4b36      	ldr	r3, [pc, #216]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93ece:	885b      	ldrh	r3, [r3, #2]
   93ed0:	b29a      	uxth	r2, r3
   93ed2:	4b36      	ldr	r3, [pc, #216]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93ed4:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   93ed6:	4b36      	ldr	r3, [pc, #216]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93ed8:	2201      	movs	r2, #1
   93eda:	709a      	strb	r2, [r3, #2]
			break;
   93edc:	e05c      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.Temp3status = temp_struct.temp_reg_16[1];			
   93ede:	4b32      	ldr	r3, [pc, #200]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93ee0:	885b      	ldrh	r3, [r3, #2]
   93ee2:	b29a      	uxth	r2, r3
   93ee4:	4b31      	ldr	r3, [pc, #196]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93ee6:	81da      	strh	r2, [r3, #14]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93ee8:	687b      	ldr	r3, [r7, #4]
   93eea:	69db      	ldr	r3, [r3, #28]
   93eec:	4a2e      	ldr	r2, [pc, #184]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93eee:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1_Tempstatus =  temp_struct.temp_reg_16[0] ;
   93ef0:	4b2d      	ldr	r3, [pc, #180]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93ef2:	881b      	ldrh	r3, [r3, #0]
   93ef4:	b29a      	uxth	r2, r3
   93ef6:	4b2d      	ldr	r3, [pc, #180]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93ef8:	821a      	strh	r2, [r3, #16]
			DD_Sensor_status.CS2_Tempstatus=   temp_struct.temp_reg_16[1] ;			
   93efa:	4b2b      	ldr	r3, [pc, #172]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93efc:	885b      	ldrh	r3, [r3, #2]
   93efe:	b29a      	uxth	r2, r3
   93f00:	4b2a      	ldr	r3, [pc, #168]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f02:	825a      	strh	r2, [r3, #18]
			array1[3]	= 1;
   93f04:	4b2a      	ldr	r3, [pc, #168]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93f06:	2201      	movs	r2, #1
   93f08:	70da      	strb	r2, [r3, #3]
			break;
   93f0a:	e045      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   93f0c:	4b26      	ldr	r3, [pc, #152]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f0e:	885b      	ldrh	r3, [r3, #2]
   93f10:	b29a      	uxth	r2, r3
   93f12:	4b26      	ldr	r3, [pc, #152]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f14:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93f16:	687b      	ldr	r3, [r7, #4]
   93f18:	69db      	ldr	r3, [r3, #28]
   93f1a:	4a23      	ldr	r2, [pc, #140]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f1c:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   93f1e:	4b22      	ldr	r3, [pc, #136]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f20:	881b      	ldrh	r3, [r3, #0]
   93f22:	b29a      	uxth	r2, r3
   93f24:	4b21      	ldr	r3, [pc, #132]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f26:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   93f28:	4b1f      	ldr	r3, [pc, #124]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f2a:	885b      	ldrh	r3, [r3, #2]
   93f2c:	b29a      	uxth	r2, r3
   93f2e:	4b1f      	ldr	r3, [pc, #124]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f30:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   93f32:	4b1f      	ldr	r3, [pc, #124]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93f34:	2201      	movs	r2, #1
   93f36:	711a      	strb	r2, [r3, #4]
			break;
   93f38:	e02e      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   93f3a:	4b1b      	ldr	r3, [pc, #108]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f3c:	885b      	ldrh	r3, [r3, #2]
   93f3e:	b29a      	uxth	r2, r3
   93f40:	4b1a      	ldr	r3, [pc, #104]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f42:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93f44:	687b      	ldr	r3, [r7, #4]
   93f46:	69db      	ldr	r3, [r3, #28]
   93f48:	4a17      	ldr	r2, [pc, #92]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f4a:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   93f4c:	4b16      	ldr	r3, [pc, #88]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f4e:	881b      	ldrh	r3, [r3, #0]
   93f50:	b29a      	uxth	r2, r3
   93f52:	4b16      	ldr	r3, [pc, #88]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f54:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   93f56:	4b14      	ldr	r3, [pc, #80]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f58:	885b      	ldrh	r3, [r3, #2]
   93f5a:	b29a      	uxth	r2, r3
   93f5c:	4b13      	ldr	r3, [pc, #76]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f5e:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   93f60:	4b13      	ldr	r3, [pc, #76]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93f62:	2201      	movs	r2, #1
   93f64:	715a      	strb	r2, [r3, #5]
			break;
   93f66:	e017      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   93f68:	4b0f      	ldr	r3, [pc, #60]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f6a:	885b      	ldrh	r3, [r3, #2]
   93f6c:	b29a      	uxth	r2, r3
   93f6e:	4b0f      	ldr	r3, [pc, #60]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f70:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   93f72:	687b      	ldr	r3, [r7, #4]
   93f74:	69db      	ldr	r3, [r3, #28]
   93f76:	4a0c      	ldr	r2, [pc, #48]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f78:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   93f7a:	4b0b      	ldr	r3, [pc, #44]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f7c:	881b      	ldrh	r3, [r3, #0]
   93f7e:	b29a      	uxth	r2, r3
   93f80:	4b0a      	ldr	r3, [pc, #40]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f82:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   93f84:	4b08      	ldr	r3, [pc, #32]	; (93fa8 <dd_can_dump_mailbox_data+0x1d0>)
   93f86:	885b      	ldrh	r3, [r3, #2]
   93f88:	b29a      	uxth	r2, r3
   93f8a:	4b08      	ldr	r3, [pc, #32]	; (93fac <dd_can_dump_mailbox_data+0x1d4>)
   93f8c:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   93f8e:	4b08      	ldr	r3, [pc, #32]	; (93fb0 <dd_can_dump_mailbox_data+0x1d8>)
   93f90:	2201      	movs	r2, #1
   93f92:	719a      	strb	r2, [r3, #6]
			
			break;
   93f94:	e000      	b.n	93f98 <dd_can_dump_mailbox_data+0x1c0>
			
			default :
			break;
   93f96:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   93f98:	e000      	b.n	93f9c <dd_can_dump_mailbox_data+0x1c4>
			break;
		}
		break;
		
		case PROPORTIONING_CPU_id :
		break;
   93f9a:	bf00      	nop
		break;
		
		default:
		break;
	}
}
   93f9c:	bf00      	nop
   93f9e:	370c      	adds	r7, #12
   93fa0:	46bd      	mov	sp, r7
   93fa2:	bc80      	pop	{r7}
   93fa4:	4770      	bx	lr
   93fa6:	bf00      	nop
   93fa8:	200732dc 	.word	0x200732dc
   93fac:	200732e0 	.word	0x200732e0
   93fb0:	20072714 	.word	0x20072714
   93fb4:	20072674 	.word	0x20072674
   93fb8:	20072720 	.word	0x20072720
   93fbc:	20072724 	.word	0x20072724

00093fc0 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   93fc0:	b480      	push	{r7}
   93fc2:	b087      	sub	sp, #28
   93fc4:	af00      	add	r7, sp, #0
   93fc6:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   93fc8:	2300      	movs	r3, #0
   93fca:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   93fcc:	687b      	ldr	r3, [r7, #4]
   93fce:	681b      	ldr	r3, [r3, #0]
   93fd0:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   93fd2:	687b      	ldr	r3, [r7, #4]
   93fd4:	689b      	ldr	r3, [r3, #8]
   93fd6:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   93fd8:	68fb      	ldr	r3, [r7, #12]
   93fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   93fde:	2b00      	cmp	r3, #0
   93fe0:	d006      	beq.n	93ff0 <dd_can_mailbox_read+0x30>
   93fe2:	68fb      	ldr	r3, [r7, #12]
   93fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   93fe8:	2b00      	cmp	r3, #0
   93fea:	d001      	beq.n	93ff0 <dd_can_mailbox_read+0x30>
   93fec:	2302      	movs	r3, #2
   93fee:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   93ff0:	4a26      	ldr	r2, [pc, #152]	; (9408c <dd_can_mailbox_read+0xcc>)
   93ff2:	7cfb      	ldrb	r3, [r7, #19]
   93ff4:	015b      	lsls	r3, r3, #5
   93ff6:	4413      	add	r3, r2
   93ff8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   93ffc:	681b      	ldr	r3, [r3, #0]
   93ffe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   94002:	687b      	ldr	r3, [r7, #4]
   94004:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   94006:	68fb      	ldr	r3, [r7, #12]
   94008:	0c1b      	lsrs	r3, r3, #16
   9400a:	b2db      	uxtb	r3, r3
   9400c:	f003 030f 	and.w	r3, r3, #15
   94010:	b2da      	uxtb	r2, r3
   94012:	687b      	ldr	r3, [r7, #4]
   94014:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   94016:	4a1d      	ldr	r2, [pc, #116]	; (9408c <dd_can_mailbox_read+0xcc>)
   94018:	7cfb      	ldrb	r3, [r7, #19]
   9401a:	015b      	lsls	r3, r3, #5
   9401c:	4413      	add	r3, r2
   9401e:	f503 7305 	add.w	r3, r3, #532	; 0x214
   94022:	681a      	ldr	r2, [r3, #0]
   94024:	687b      	ldr	r3, [r7, #4]
   94026:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   94028:	4a18      	ldr	r2, [pc, #96]	; (9408c <dd_can_mailbox_read+0xcc>)
   9402a:	7cfb      	ldrb	r3, [r7, #19]
   9402c:	015b      	lsls	r3, r3, #5
   9402e:	4413      	add	r3, r2
   94030:	f503 7306 	add.w	r3, r3, #536	; 0x218
   94034:	681a      	ldr	r2, [r3, #0]
   94036:	687b      	ldr	r3, [r7, #4]
   94038:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9403a:	4a14      	ldr	r2, [pc, #80]	; (9408c <dd_can_mailbox_read+0xcc>)
   9403c:	7cfb      	ldrb	r3, [r7, #19]
   9403e:	015b      	lsls	r3, r3, #5
   94040:	4413      	add	r3, r2
   94042:	f503 7304 	add.w	r3, r3, #528	; 0x210
   94046:	681a      	ldr	r2, [r3, #0]
   94048:	687b      	ldr	r3, [r7, #4]
   9404a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   9404c:	687b      	ldr	r3, [r7, #4]
   9404e:	689b      	ldr	r3, [r3, #8]
   94050:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   94052:	68fb      	ldr	r3, [r7, #12]
   94054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   94058:	2b00      	cmp	r3, #0
   9405a:	d003      	beq.n	94064 <dd_can_mailbox_read+0xa4>
   9405c:	697b      	ldr	r3, [r7, #20]
   9405e:	f043 0304 	orr.w	r3, r3, #4
   94062:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   94064:	4909      	ldr	r1, [pc, #36]	; (9408c <dd_can_mailbox_read+0xcc>)
   94066:	7cfb      	ldrb	r3, [r7, #19]
   94068:	687a      	ldr	r2, [r7, #4]
   9406a:	7992      	ldrb	r2, [r2, #6]
   9406c:	0412      	lsls	r2, r2, #16
   9406e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   94072:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   94076:	015b      	lsls	r3, r3, #5
   94078:	440b      	add	r3, r1
   9407a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9407e:	601a      	str	r2, [r3, #0]
	return ul_retval;
   94080:	697b      	ldr	r3, [r7, #20]
}
   94082:	4618      	mov	r0, r3
   94084:	371c      	adds	r7, #28
   94086:	46bd      	mov	sp, r7
   94088:	bc80      	pop	{r7}
   9408a:	4770      	bx	lr
   9408c:	400b4000 	.word	0x400b4000

00094090 <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   94090:	b480      	push	{r7}
   94092:	b085      	sub	sp, #20
   94094:	af00      	add	r7, sp, #0
   94096:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   94098:	687b      	ldr	r3, [r7, #4]
   9409a:	681b      	ldr	r3, [r3, #0]
   9409c:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9409e:	4a2a      	ldr	r2, [pc, #168]	; (94148 <dd_can_mailbox_write+0xb8>)
   940a0:	7bfb      	ldrb	r3, [r7, #15]
   940a2:	015b      	lsls	r3, r3, #5
   940a4:	4413      	add	r3, r2
   940a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   940aa:	681a      	ldr	r2, [r3, #0]
   940ac:	687b      	ldr	r3, [r7, #4]
   940ae:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   940b0:	687b      	ldr	r3, [r7, #4]
   940b2:	689b      	ldr	r3, [r3, #8]
   940b4:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   940b6:	68bb      	ldr	r3, [r7, #8]
   940b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   940bc:	2b00      	cmp	r3, #0
   940be:	d101      	bne.n	940c4 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   940c0:	2301      	movs	r3, #1
   940c2:	e03b      	b.n	9413c <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   940c4:	687b      	ldr	r3, [r7, #4]
   940c6:	795b      	ldrb	r3, [r3, #5]
   940c8:	2b00      	cmp	r3, #0
   940ca:	d00b      	beq.n	940e4 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   940cc:	491e      	ldr	r1, [pc, #120]	; (94148 <dd_can_mailbox_write+0xb8>)
   940ce:	7bfb      	ldrb	r3, [r7, #15]
   940d0:	687a      	ldr	r2, [r7, #4]
   940d2:	6912      	ldr	r2, [r2, #16]
   940d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   940d8:	015b      	lsls	r3, r3, #5
   940da:	440b      	add	r3, r1
   940dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   940e0:	601a      	str	r2, [r3, #0]
   940e2:	e008      	b.n	940f6 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   940e4:	4918      	ldr	r1, [pc, #96]	; (94148 <dd_can_mailbox_write+0xb8>)
   940e6:	7bfb      	ldrb	r3, [r7, #15]
   940e8:	687a      	ldr	r2, [r7, #4]
   940ea:	6912      	ldr	r2, [r2, #16]
   940ec:	015b      	lsls	r3, r3, #5
   940ee:	440b      	add	r3, r1
   940f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   940f4:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   940f6:	4914      	ldr	r1, [pc, #80]	; (94148 <dd_can_mailbox_write+0xb8>)
   940f8:	7bfb      	ldrb	r3, [r7, #15]
   940fa:	687a      	ldr	r2, [r7, #4]
   940fc:	6992      	ldr	r2, [r2, #24]
   940fe:	015b      	lsls	r3, r3, #5
   94100:	440b      	add	r3, r1
   94102:	f503 7305 	add.w	r3, r3, #532	; 0x214
   94106:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   94108:	687b      	ldr	r3, [r7, #4]
   9410a:	799b      	ldrb	r3, [r3, #6]
   9410c:	2b04      	cmp	r3, #4
   9410e:	d908      	bls.n	94122 <dd_can_mailbox_write+0x92>
   94110:	490d      	ldr	r1, [pc, #52]	; (94148 <dd_can_mailbox_write+0xb8>)
   94112:	7bfb      	ldrb	r3, [r7, #15]
   94114:	687a      	ldr	r2, [r7, #4]
   94116:	69d2      	ldr	r2, [r2, #28]
   94118:	015b      	lsls	r3, r3, #5
   9411a:	440b      	add	r3, r1
   9411c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   94120:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   94122:	4909      	ldr	r1, [pc, #36]	; (94148 <dd_can_mailbox_write+0xb8>)
   94124:	7bfb      	ldrb	r3, [r7, #15]
   94126:	687a      	ldr	r2, [r7, #4]
   94128:	7992      	ldrb	r2, [r2, #6]
   9412a:	0412      	lsls	r2, r2, #16
   9412c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   94130:	015b      	lsls	r3, r3, #5
   94132:	440b      	add	r3, r1
   94134:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   94138:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   9413a:	2300      	movs	r3, #0
}
   9413c:	4618      	mov	r0, r3
   9413e:	3714      	adds	r7, #20
   94140:	46bd      	mov	sp, r7
   94142:	bc80      	pop	{r7}
   94144:	4770      	bx	lr
   94146:	bf00      	nop
   94148:	400b4000 	.word	0x400b4000

0009414c <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   9414c:	b480      	push	{r7}
   9414e:	b085      	sub	sp, #20
   94150:	af00      	add	r7, sp, #0
   94152:	4603      	mov	r3, r0
   94154:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   94156:	4b07      	ldr	r3, [pc, #28]	; (94174 <dd_can_global_send_transfer_cmd+0x28>)
   94158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   9415a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   9415e:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   94160:	4904      	ldr	r1, [pc, #16]	; (94174 <dd_can_global_send_transfer_cmd+0x28>)
   94162:	79fa      	ldrb	r2, [r7, #7]
   94164:	68fb      	ldr	r3, [r7, #12]
   94166:	4313      	orrs	r3, r2
   94168:	624b      	str	r3, [r1, #36]	; 0x24
}
   9416a:	bf00      	nop
   9416c:	3714      	adds	r7, #20
   9416e:	46bd      	mov	sp, r7
   94170:	bc80      	pop	{r7}
   94172:	4770      	bx	lr
   94174:	400b4000 	.word	0x400b4000

00094178 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   94178:	b480      	push	{r7}
   9417a:	b085      	sub	sp, #20
   9417c:	af00      	add	r7, sp, #0
   9417e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   94180:	687b      	ldr	r3, [r7, #4]
   94182:	681b      	ldr	r3, [r3, #0]
   94184:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   94186:	687b      	ldr	r3, [r7, #4]
   94188:	791b      	ldrb	r3, [r3, #4]
   9418a:	2b00      	cmp	r3, #0
   9418c:	d12f      	bne.n	941ee <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   9418e:	4a35      	ldr	r2, [pc, #212]	; (94264 <dd_can_mailbox_conf+0xec>)
   94190:	7bfb      	ldrb	r3, [r7, #15]
   94192:	3310      	adds	r3, #16
   94194:	015b      	lsls	r3, r3, #5
   94196:	4413      	add	r3, r2
   94198:	2200      	movs	r2, #0
   9419a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   9419c:	4a31      	ldr	r2, [pc, #196]	; (94264 <dd_can_mailbox_conf+0xec>)
   9419e:	7bfb      	ldrb	r3, [r7, #15]
   941a0:	3310      	adds	r3, #16
   941a2:	015b      	lsls	r3, r3, #5
   941a4:	4413      	add	r3, r2
   941a6:	3304      	adds	r3, #4
   941a8:	2200      	movs	r2, #0
   941aa:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   941ac:	4a2d      	ldr	r2, [pc, #180]	; (94264 <dd_can_mailbox_conf+0xec>)
   941ae:	7bfb      	ldrb	r3, [r7, #15]
   941b0:	015b      	lsls	r3, r3, #5
   941b2:	4413      	add	r3, r2
   941b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   941b8:	2200      	movs	r2, #0
   941ba:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   941bc:	4a29      	ldr	r2, [pc, #164]	; (94264 <dd_can_mailbox_conf+0xec>)
   941be:	7bfb      	ldrb	r3, [r7, #15]
   941c0:	015b      	lsls	r3, r3, #5
   941c2:	4413      	add	r3, r2
   941c4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   941c8:	2200      	movs	r2, #0
   941ca:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   941cc:	4a25      	ldr	r2, [pc, #148]	; (94264 <dd_can_mailbox_conf+0xec>)
   941ce:	7bfb      	ldrb	r3, [r7, #15]
   941d0:	015b      	lsls	r3, r3, #5
   941d2:	4413      	add	r3, r2
   941d4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   941d8:	2200      	movs	r2, #0
   941da:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   941dc:	4a21      	ldr	r2, [pc, #132]	; (94264 <dd_can_mailbox_conf+0xec>)
   941de:	7bfb      	ldrb	r3, [r7, #15]
   941e0:	015b      	lsls	r3, r3, #5
   941e2:	4413      	add	r3, r2
   941e4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   941e8:	2200      	movs	r2, #0
   941ea:	601a      	str	r2, [r3, #0]
		return;
   941ec:	e035      	b.n	9425a <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   941ee:	481d      	ldr	r0, [pc, #116]	; (94264 <dd_can_mailbox_conf+0xec>)
   941f0:	7bfb      	ldrb	r3, [r7, #15]
   941f2:	491c      	ldr	r1, [pc, #112]	; (94264 <dd_can_mailbox_conf+0xec>)
   941f4:	7bfa      	ldrb	r2, [r7, #15]
   941f6:	3210      	adds	r2, #16
   941f8:	0152      	lsls	r2, r2, #5
   941fa:	440a      	add	r2, r1
   941fc:	6812      	ldr	r2, [r2, #0]
   941fe:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   94202:	6879      	ldr	r1, [r7, #4]
   94204:	79c9      	ldrb	r1, [r1, #7]
   94206:	0409      	lsls	r1, r1, #16
   94208:	430a      	orrs	r2, r1
   9420a:	3310      	adds	r3, #16
   9420c:	015b      	lsls	r3, r3, #5
   9420e:	4403      	add	r3, r0
   94210:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   94212:	4914      	ldr	r1, [pc, #80]	; (94264 <dd_can_mailbox_conf+0xec>)
   94214:	7bfb      	ldrb	r3, [r7, #15]
   94216:	687a      	ldr	r2, [r7, #4]
   94218:	68d2      	ldr	r2, [r2, #12]
   9421a:	3310      	adds	r3, #16
   9421c:	015b      	lsls	r3, r3, #5
   9421e:	440b      	add	r3, r1
   94220:	3304      	adds	r3, #4
   94222:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   94224:	490f      	ldr	r1, [pc, #60]	; (94264 <dd_can_mailbox_conf+0xec>)
   94226:	7bfb      	ldrb	r3, [r7, #15]
   94228:	687a      	ldr	r2, [r7, #4]
   9422a:	6912      	ldr	r2, [r2, #16]
   9422c:	015b      	lsls	r3, r3, #5
   9422e:	440b      	add	r3, r1
   94230:	f503 7302 	add.w	r3, r3, #520	; 0x208
   94234:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   94236:	480b      	ldr	r0, [pc, #44]	; (94264 <dd_can_mailbox_conf+0xec>)
   94238:	7bfb      	ldrb	r3, [r7, #15]
   9423a:	490a      	ldr	r1, [pc, #40]	; (94264 <dd_can_mailbox_conf+0xec>)
   9423c:	7bfa      	ldrb	r2, [r7, #15]
   9423e:	3210      	adds	r2, #16
   94240:	0152      	lsls	r2, r2, #5
   94242:	440a      	add	r2, r1
   94244:	6812      	ldr	r2, [r2, #0]
   94246:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   9424a:	6879      	ldr	r1, [r7, #4]
   9424c:	7909      	ldrb	r1, [r1, #4]
   9424e:	0609      	lsls	r1, r1, #24
   94250:	430a      	orrs	r2, r1
   94252:	3310      	adds	r3, #16
   94254:	015b      	lsls	r3, r3, #5
   94256:	4403      	add	r3, r0
   94258:	601a      	str	r2, [r3, #0]
}
   9425a:	3714      	adds	r7, #20
   9425c:	46bd      	mov	sp, r7
   9425e:	bc80      	pop	{r7}
   94260:	4770      	bx	lr
   94262:	bf00      	nop
   94264:	400b4000 	.word	0x400b4000

00094268 <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint32_t rc_count)
{
   94268:	b580      	push	{r7, lr}
   9426a:	b084      	sub	sp, #16
   9426c:	af00      	add	r7, sp, #0
   9426e:	4603      	mov	r3, r0
   94270:	6039      	str	r1, [r7, #0]
   94272:	80fb      	strh	r3, [r7, #6]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   94274:	88fb      	ldrh	r3, [r7, #6]
   94276:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   94278:	683b      	ldr	r3, [r7, #0]
   9427a:	b29a      	uxth	r2, r3
   9427c:	7bfb      	ldrb	r3, [r7, #15]
   9427e:	4619      	mov	r1, r3
   94280:	2002      	movs	r0, #2
   94282:	4b04      	ldr	r3, [pc, #16]	; (94294 <DD_CAN_WRITE_PROPO+0x2c>)
   94284:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   94286:	2001      	movs	r0, #1
   94288:	4b03      	ldr	r3, [pc, #12]	; (94298 <DD_CAN_WRITE_PROPO+0x30>)
   9428a:	4798      	blx	r3

}
   9428c:	bf00      	nop
   9428e:	3710      	adds	r7, #16
   94290:	46bd      	mov	sp, r7
   94292:	bd80      	pop	{r7, pc}
   94294:	00093d35 	.word	0x00093d35
   94298:	0009414d 	.word	0x0009414d

0009429c <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   9429c:	b580      	push	{r7, lr}
   9429e:	b084      	sub	sp, #16
   942a0:	af00      	add	r7, sp, #0
   942a2:	4603      	mov	r3, r0
   942a4:	460a      	mov	r2, r1
   942a6:	80fb      	strh	r3, [r7, #6]
   942a8:	4613      	mov	r3, r2
   942aa:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   942ac:	88fb      	ldrh	r3, [r7, #6]
   942ae:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   942b0:	4b09      	ldr	r3, [pc, #36]	; (942d8 <DD_CAN_WRITE_HEMO+0x3c>)
   942b2:	f04f 32ff 	mov.w	r2, #4294967295
   942b6:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   942b8:	88ba      	ldrh	r2, [r7, #4]
   942ba:	7bfb      	ldrb	r3, [r7, #15]
   942bc:	4619      	mov	r1, r3
   942be:	2001      	movs	r0, #1
   942c0:	4b06      	ldr	r3, [pc, #24]	; (942dc <DD_CAN_WRITE_HEMO+0x40>)
   942c2:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   942c4:	2001      	movs	r0, #1
   942c6:	4b06      	ldr	r3, [pc, #24]	; (942e0 <DD_CAN_WRITE_HEMO+0x44>)
   942c8:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   942ca:	4b03      	ldr	r3, [pc, #12]	; (942d8 <DD_CAN_WRITE_HEMO+0x3c>)
   942cc:	2202      	movs	r2, #2
   942ce:	605a      	str	r2, [r3, #4]
}
   942d0:	bf00      	nop
   942d2:	3710      	adds	r7, #16
   942d4:	46bd      	mov	sp, r7
   942d6:	bd80      	pop	{r7, pc}
   942d8:	400b4000 	.word	0x400b4000
   942dc:	00093d35 	.word	0x00093d35
   942e0:	0009414d 	.word	0x0009414d

000942e4 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   942e4:	b580      	push	{r7, lr}
   942e6:	b084      	sub	sp, #16
   942e8:	af00      	add	r7, sp, #0
   942ea:	4603      	mov	r3, r0
   942ec:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   942ee:	88fb      	ldrh	r3, [r7, #6]
   942f0:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   942f2:	4b0a      	ldr	r3, [pc, #40]	; (9431c <DD_CAN_WRITE_SENSOR+0x38>)
   942f4:	f04f 32ff 	mov.w	r2, #4294967295
   942f8:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   942fa:	7bfb      	ldrb	r3, [r7, #15]
   942fc:	2200      	movs	r2, #0
   942fe:	4619      	mov	r1, r3
   94300:	2003      	movs	r0, #3
   94302:	4b07      	ldr	r3, [pc, #28]	; (94320 <DD_CAN_WRITE_SENSOR+0x3c>)
   94304:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   94306:	2001      	movs	r0, #1
   94308:	4b06      	ldr	r3, [pc, #24]	; (94324 <DD_CAN_WRITE_SENSOR+0x40>)
   9430a:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   9430c:	4b03      	ldr	r3, [pc, #12]	; (9431c <DD_CAN_WRITE_SENSOR+0x38>)
   9430e:	2202      	movs	r2, #2
   94310:	605a      	str	r2, [r3, #4]
}
   94312:	bf00      	nop
   94314:	3710      	adds	r7, #16
   94316:	46bd      	mov	sp, r7
   94318:	bd80      	pop	{r7, pc}
   9431a:	bf00      	nop
   9431c:	400b4000 	.word	0x400b4000
   94320:	00093d35 	.word	0x00093d35
   94324:	0009414d 	.word	0x0009414d

00094328 <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   94328:	b580      	push	{r7, lr}
   9432a:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   9432c:	2100      	movs	r1, #0
   9432e:	2027      	movs	r0, #39	; 0x27
   94330:	4b01      	ldr	r3, [pc, #4]	; (94338 <DD_CAN_READ_APTVPT+0x10>)
   94332:	4798      	blx	r3
	
}
   94334:	bf00      	nop
   94336:	bd80      	pop	{r7, pc}
   94338:	0009429d 	.word	0x0009429d

0009433c <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   9433c:	b580      	push	{r7, lr}
   9433e:	b08e      	sub	sp, #56	; 0x38
   94340:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   94342:	4b4f      	ldr	r3, [pc, #316]	; (94480 <DD_INIT_CAN+0x144>)
   94344:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   94346:	2378      	movs	r3, #120	; 0x78
   94348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   9434c:	4b4d      	ldr	r3, [pc, #308]	; (94484 <DD_INIT_CAN+0x148>)
   9434e:	4a4e      	ldr	r2, [pc, #312]	; (94488 <DD_INIT_CAN+0x14c>)
   94350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   94354:	4a4b      	ldr	r2, [pc, #300]	; (94484 <DD_INIT_CAN+0x148>)
   94356:	4b4b      	ldr	r3, [pc, #300]	; (94484 <DD_INIT_CAN+0x148>)
   94358:	681b      	ldr	r3, [r3, #0]
   9435a:	f023 0301 	bic.w	r3, r3, #1
   9435e:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   94360:	4948      	ldr	r1, [pc, #288]	; (94484 <DD_INIT_CAN+0x148>)
   94362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   94364:	78db      	ldrb	r3, [r3, #3]
   94366:	3b01      	subs	r3, #1
   94368:	f003 0207 	and.w	r2, r3, #7
   9436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9436e:	789b      	ldrb	r3, [r3, #2]
   94370:	3b01      	subs	r3, #1
   94372:	011b      	lsls	r3, r3, #4
   94374:	f003 0370 	and.w	r3, r3, #112	; 0x70
   94378:	431a      	orrs	r2, r3
   9437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9437c:	785b      	ldrb	r3, [r3, #1]
   9437e:	3b01      	subs	r3, #1
   94380:	021b      	lsls	r3, r3, #8
   94382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   94386:	431a      	orrs	r2, r3
   94388:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9438a:	791b      	ldrb	r3, [r3, #4]
   9438c:	3b01      	subs	r3, #1
   9438e:	031b      	lsls	r3, r3, #12
   94390:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   94394:	431a      	orrs	r2, r3
   94396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9439a:	3b01      	subs	r3, #1
   9439c:	041b      	lsls	r3, r3, #16
   9439e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   943a2:	4313      	orrs	r3, r2
   943a4:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   943a6:	2300      	movs	r3, #0
   943a8:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   943aa:	2300      	movs	r3, #0
   943ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   943b0:	e00b      	b.n	943ca <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   943b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   943b6:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   943b8:	1d3b      	adds	r3, r7, #4
   943ba:	4618      	mov	r0, r3
   943bc:	4b33      	ldr	r3, [pc, #204]	; (9448c <DD_INIT_CAN+0x150>)
   943be:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   943c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   943c4:	3301      	adds	r3, #1
   943c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   943ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   943ce:	2b07      	cmp	r3, #7
   943d0:	d9ef      	bls.n	943b2 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   943d2:	4a2c      	ldr	r2, [pc, #176]	; (94484 <DD_INIT_CAN+0x148>)
   943d4:	4b2b      	ldr	r3, [pc, #172]	; (94484 <DD_INIT_CAN+0x148>)
   943d6:	681b      	ldr	r3, [r3, #0]
   943d8:	f043 0301 	orr.w	r3, r3, #1
   943dc:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   943de:	2300      	movs	r3, #0
   943e0:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   943e2:	2300      	movs	r3, #0
   943e4:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   943e6:	e005      	b.n	943f4 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   943e8:	4b26      	ldr	r3, [pc, #152]	; (94484 <DD_INIT_CAN+0x148>)
   943ea:	691b      	ldr	r3, [r3, #16]
   943ec:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   943ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   943f0:	3301      	adds	r3, #1
   943f2:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   943f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   943f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   943fa:	2b00      	cmp	r3, #0
   943fc:	d103      	bne.n	94406 <DD_INIT_CAN+0xca>
   943fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   94400:	4a23      	ldr	r2, [pc, #140]	; (94490 <DD_INIT_CAN+0x154>)
   94402:	4293      	cmp	r3, r2
   94404:	d9f0      	bls.n	943e8 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   94406:	4b23      	ldr	r3, [pc, #140]	; (94494 <DD_INIT_CAN+0x158>)
   94408:	2201      	movs	r2, #1
   9440a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   9440c:	4b21      	ldr	r3, [pc, #132]	; (94494 <DD_INIT_CAN+0x158>)
   9440e:	2201      	movs	r2, #1
   94410:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   94412:	4b20      	ldr	r3, [pc, #128]	; (94494 <DD_INIT_CAN+0x158>)
   94414:	2200      	movs	r2, #0
   94416:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   94418:	4b1e      	ldr	r3, [pc, #120]	; (94494 <DD_INIT_CAN+0x158>)
   9441a:	2200      	movs	r2, #0
   9441c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   9441e:	4b1d      	ldr	r3, [pc, #116]	; (94494 <DD_INIT_CAN+0x158>)
   94420:	4a1d      	ldr	r2, [pc, #116]	; (94498 <DD_INIT_CAN+0x15c>)
   94422:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   94424:	4b1b      	ldr	r3, [pc, #108]	; (94494 <DD_INIT_CAN+0x158>)
   94426:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   9442a:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   9442c:	4819      	ldr	r0, [pc, #100]	; (94494 <DD_INIT_CAN+0x158>)
   9442e:	4b17      	ldr	r3, [pc, #92]	; (9448c <DD_INIT_CAN+0x150>)
   94430:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   94432:	4b18      	ldr	r3, [pc, #96]	; (94494 <DD_INIT_CAN+0x158>)
   94434:	2200      	movs	r2, #0
   94436:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   94438:	4b16      	ldr	r3, [pc, #88]	; (94494 <DD_INIT_CAN+0x158>)
   9443a:	2203      	movs	r2, #3
   9443c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   9443e:	4b15      	ldr	r3, [pc, #84]	; (94494 <DD_INIT_CAN+0x158>)
   94440:	2201      	movs	r2, #1
   94442:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   94444:	4b13      	ldr	r3, [pc, #76]	; (94494 <DD_INIT_CAN+0x158>)
   94446:	2200      	movs	r2, #0
   94448:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   9444a:	4b12      	ldr	r3, [pc, #72]	; (94494 <DD_INIT_CAN+0x158>)
   9444c:	4a12      	ldr	r2, [pc, #72]	; (94498 <DD_INIT_CAN+0x15c>)
   9444e:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   94450:	4b10      	ldr	r3, [pc, #64]	; (94494 <DD_INIT_CAN+0x158>)
   94452:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   94456:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   94458:	480e      	ldr	r0, [pc, #56]	; (94494 <DD_INIT_CAN+0x158>)
   9445a:	4b0c      	ldr	r3, [pc, #48]	; (9448c <DD_INIT_CAN+0x150>)
   9445c:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   9445e:	202b      	movs	r0, #43	; 0x2b
   94460:	4b0e      	ldr	r3, [pc, #56]	; (9449c <DD_INIT_CAN+0x160>)
   94462:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   94464:	4b07      	ldr	r3, [pc, #28]	; (94484 <DD_INIT_CAN+0x148>)
   94466:	2202      	movs	r2, #2
   94468:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   9446a:	2103      	movs	r1, #3
   9446c:	480c      	ldr	r0, [pc, #48]	; (944a0 <DD_INIT_CAN+0x164>)
   9446e:	4b0d      	ldr	r3, [pc, #52]	; (944a4 <DD_INIT_CAN+0x168>)
   94470:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   94472:	480b      	ldr	r0, [pc, #44]	; (944a0 <DD_INIT_CAN+0x164>)
   94474:	4b0c      	ldr	r3, [pc, #48]	; (944a8 <DD_INIT_CAN+0x16c>)
   94476:	4798      	blx	r3
		
		
	}
   94478:	bf00      	nop
   9447a:	3738      	adds	r7, #56	; 0x38
   9447c:	46bd      	mov	sp, r7
   9447e:	bd80      	pop	{r7, pc}
   94480:	000a582c 	.word	0x000a582c
   94484:	400b4000 	.word	0x400b4000
   94488:	43414e00 	.word	0x43414e00
   9448c:	00094179 	.word	0x00094179
   94490:	0001869f 	.word	0x0001869f
   94494:	2007330c 	.word	0x2007330c
   94498:	1ffc0000 	.word	0x1ffc0000
   9449c:	00093bf1 	.word	0x00093bf1
   944a0:	2007332c 	.word	0x2007332c
   944a4:	00093c8d 	.word	0x00093c8d
   944a8:	00093ca9 	.word	0x00093ca9

000944ac <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   944ac:	b480      	push	{r7}
   944ae:	b085      	sub	sp, #20
   944b0:	af00      	add	r7, sp, #0
   944b2:	4603      	mov	r3, r0
   944b4:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	uint8_t channel = 0;
   944b6:	2300      	movs	r3, #0
   944b8:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   944ba:	79fb      	ldrb	r3, [r7, #7]
   944bc:	3b01      	subs	r3, #1
   944be:	2b13      	cmp	r3, #19
   944c0:	f200 8090 	bhi.w	945e4 <DD_CAN_READ_SENSORS+0x138>
   944c4:	a201      	add	r2, pc, #4	; (adr r2, 944cc <DD_CAN_READ_SENSORS+0x20>)
   944c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   944ca:	bf00      	nop
   944cc:	0009451d 	.word	0x0009451d
   944d0:	00094527 	.word	0x00094527
   944d4:	00094531 	.word	0x00094531
   944d8:	0009453b 	.word	0x0009453b
   944dc:	00094545 	.word	0x00094545
   944e0:	0009454f 	.word	0x0009454f
   944e4:	00094559 	.word	0x00094559
   944e8:	00094563 	.word	0x00094563
   944ec:	0009456d 	.word	0x0009456d
   944f0:	00094577 	.word	0x00094577
   944f4:	00094581 	.word	0x00094581
   944f8:	0009458b 	.word	0x0009458b
   944fc:	00094595 	.word	0x00094595
   94500:	0009459f 	.word	0x0009459f
   94504:	000945a9 	.word	0x000945a9
   94508:	000945b3 	.word	0x000945b3
   9450c:	000945bd 	.word	0x000945bd
   94510:	000945c7 	.word	0x000945c7
   94514:	000945d1 	.word	0x000945d1
   94518:	000945db 	.word	0x000945db
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   9451c:	4b34      	ldr	r3, [pc, #208]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   9451e:	885b      	ldrh	r3, [r3, #2]
   94520:	b29b      	uxth	r3, r3
   94522:	81fb      	strh	r3, [r7, #14]
		break;
   94524:	e05e      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   94526:	4b32      	ldr	r3, [pc, #200]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94528:	889b      	ldrh	r3, [r3, #4]
   9452a:	b29b      	uxth	r3, r3
   9452c:	81fb      	strh	r3, [r7, #14]
		break;
   9452e:	e059      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   94530:	4b2f      	ldr	r3, [pc, #188]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94532:	88db      	ldrh	r3, [r3, #6]
   94534:	b29b      	uxth	r3, r3
   94536:	81fb      	strh	r3, [r7, #14]
		break;
   94538:	e054      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   9453a:	4b2d      	ldr	r3, [pc, #180]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   9453c:	891b      	ldrh	r3, [r3, #8]
   9453e:	b29b      	uxth	r3, r3
   94540:	81fb      	strh	r3, [r7, #14]
		break;
   94542:	e04f      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   94544:	4b2a      	ldr	r3, [pc, #168]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94546:	895b      	ldrh	r3, [r3, #10]
   94548:	b29b      	uxth	r3, r3
   9454a:	81fb      	strh	r3, [r7, #14]
		
		break;
   9454c:	e04a      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   9454e:	4b28      	ldr	r3, [pc, #160]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94550:	899b      	ldrh	r3, [r3, #12]
   94552:	b29b      	uxth	r3, r3
   94554:	81fb      	strh	r3, [r7, #14]
		break;
   94556:	e045      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   94558:	4b25      	ldr	r3, [pc, #148]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   9455a:	8a9b      	ldrh	r3, [r3, #20]
   9455c:	b29b      	uxth	r3, r3
   9455e:	81fb      	strh	r3, [r7, #14]
		break;
   94560:	e040      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   94562:	4b23      	ldr	r3, [pc, #140]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94564:	8a1b      	ldrh	r3, [r3, #16]
   94566:	b29b      	uxth	r3, r3
   94568:	81fb      	strh	r3, [r7, #14]
		break;
   9456a:	e03b      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   9456c:	4b20      	ldr	r3, [pc, #128]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   9456e:	8a5b      	ldrh	r3, [r3, #18]
   94570:	b29b      	uxth	r3, r3
   94572:	81fb      	strh	r3, [r7, #14]
		break;
   94574:	e036      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   94576:	4b1e      	ldr	r3, [pc, #120]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94578:	8a9b      	ldrh	r3, [r3, #20]
   9457a:	b29b      	uxth	r3, r3
   9457c:	81fb      	strh	r3, [r7, #14]
		break;
   9457e:	e031      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   94580:	4b1b      	ldr	r3, [pc, #108]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94582:	8adb      	ldrh	r3, [r3, #22]
   94584:	b29b      	uxth	r3, r3
   94586:	81fb      	strh	r3, [r7, #14]
		break;
   94588:	e02c      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   9458a:	4b19      	ldr	r3, [pc, #100]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   9458c:	8b1b      	ldrh	r3, [r3, #24]
   9458e:	b29b      	uxth	r3, r3
   94590:	81fb      	strh	r3, [r7, #14]
		break;
   94592:	e027      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   94594:	4b16      	ldr	r3, [pc, #88]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   94596:	8b5b      	ldrh	r3, [r3, #26]
   94598:	b29b      	uxth	r3, r3
   9459a:	81fb      	strh	r3, [r7, #14]
		break;
   9459c:	e022      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   9459e:	4b14      	ldr	r3, [pc, #80]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945a0:	8b9b      	ldrh	r3, [r3, #28]
   945a2:	b29b      	uxth	r3, r3
   945a4:	81fb      	strh	r3, [r7, #14]
		break;
   945a6:	e01d      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   945a8:	4b11      	ldr	r3, [pc, #68]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945aa:	8bdb      	ldrh	r3, [r3, #30]
   945ac:	b29b      	uxth	r3, r3
   945ae:	81fb      	strh	r3, [r7, #14]
		break;
   945b0:	e018      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   945b2:	4b0f      	ldr	r3, [pc, #60]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945b4:	8c1b      	ldrh	r3, [r3, #32]
   945b6:	b29b      	uxth	r3, r3
   945b8:	81fb      	strh	r3, [r7, #14]
		break;
   945ba:	e013      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   945bc:	4b0c      	ldr	r3, [pc, #48]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   945c0:	b29b      	uxth	r3, r3
   945c2:	81fb      	strh	r3, [r7, #14]
		break;
   945c4:	e00e      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   945c6:	4b0a      	ldr	r3, [pc, #40]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   945ca:	b29b      	uxth	r3, r3
   945cc:	81fb      	strh	r3, [r7, #14]
		break;
   945ce:	e009      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   945d0:	4b07      	ldr	r3, [pc, #28]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   945d4:	b29b      	uxth	r3, r3
   945d6:	81fb      	strh	r3, [r7, #14]
		break;
   945d8:	e004      	b.n	945e4 <DD_CAN_READ_SENSORS+0x138>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   945da:	4b05      	ldr	r3, [pc, #20]	; (945f0 <DD_CAN_READ_SENSORS+0x144>)
   945dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   945de:	b29b      	uxth	r3, r3
   945e0:	81fb      	strh	r3, [r7, #14]
		break;
   945e2:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   945e4:	89fb      	ldrh	r3, [r7, #14]
	
}
   945e6:	4618      	mov	r0, r3
   945e8:	3714      	adds	r7, #20
   945ea:	46bd      	mov	sp, r7
   945ec:	bc80      	pop	{r7}
   945ee:	4770      	bx	lr
   945f0:	200732e0 	.word	0x200732e0

000945f4 <DD_INIT_CLOCK>:
 *  Author: Gopalkrishna Kalibhat
 */ 
#include "DD_CLOCK.h"

void DD_INIT_CLOCK()
{
   945f4:	b580      	push	{r7, lr}
   945f6:	af00      	add	r7, sp, #0
	
	sysclk_init();
   945f8:	4b07      	ldr	r3, [pc, #28]	; (94618 <DD_INIT_CLOCK+0x24>)
   945fa:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   945fc:	4b07      	ldr	r3, [pc, #28]	; (9461c <DD_INIT_CLOCK+0x28>)
   945fe:	4a08      	ldr	r2, [pc, #32]	; (94620 <DD_INIT_CLOCK+0x2c>)
   94600:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   94604:	4b05      	ldr	r3, [pc, #20]	; (9461c <DD_INIT_CLOCK+0x28>)
   94606:	4a07      	ldr	r2, [pc, #28]	; (94624 <DD_INIT_CLOCK+0x30>)
   94608:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   9460a:	4b04      	ldr	r3, [pc, #16]	; (9461c <DD_INIT_CLOCK+0x28>)
   9460c:	f640 023f 	movw	r2, #2111	; 0x83f
   94610:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
   94614:	bf00      	nop
   94616:	bd80      	pop	{r7, pc}
   94618:	0008044d 	.word	0x0008044d
   9461c:	400e0600 	.word	0x400e0600
   94620:	504d4300 	.word	0x504d4300
   94624:	f8007900 	.word	0xf8007900

00094628 <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   94628:	b580      	push	{r7, lr}
   9462a:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   9462c:	4b38      	ldr	r3, [pc, #224]	; (94710 <DD_INIT_PIO+0xe8>)
   9462e:	4a39      	ldr	r2, [pc, #228]	; (94714 <DD_INIT_PIO+0xec>)
   94630:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOA->PIO_PER =  0x21C9ECF8;			//PIOA->PIO_PER  = 0x01C9ECF0;
   94634:	4b36      	ldr	r3, [pc, #216]	; (94710 <DD_INIT_PIO+0xe8>)
   94636:	4a38      	ldr	r2, [pc, #224]	; (94718 <DD_INIT_PIO+0xf0>)
   94638:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B868;			//PIOA->PIO_OER  = 0x00C0AC70;
   9463a:	4b35      	ldr	r3, [pc, #212]	; (94710 <DD_INIT_PIO+0xe8>)
   9463c:	4a37      	ldr	r2, [pc, #220]	; (9471c <DD_INIT_PIO+0xf4>)
   9463e:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   94640:	4b33      	ldr	r3, [pc, #204]	; (94710 <DD_INIT_PIO+0xe8>)
   94642:	4a37      	ldr	r2, [pc, #220]	; (94720 <DD_INIT_PIO+0xf8>)
   94644:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   94646:	4b32      	ldr	r3, [pc, #200]	; (94710 <DD_INIT_PIO+0xe8>)
   94648:	4a36      	ldr	r2, [pc, #216]	; (94724 <DD_INIT_PIO+0xfc>)
   9464a:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   9464c:	4b30      	ldr	r3, [pc, #192]	; (94710 <DD_INIT_PIO+0xe8>)
   9464e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   94652:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   94654:	4b2e      	ldr	r3, [pc, #184]	; (94710 <DD_INIT_PIO+0xe8>)
   94656:	4a34      	ldr	r2, [pc, #208]	; (94728 <DD_INIT_PIO+0x100>)
   94658:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   9465a:	4b2d      	ldr	r3, [pc, #180]	; (94710 <DD_INIT_PIO+0xe8>)
   9465c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   94660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   94664:	4b31      	ldr	r3, [pc, #196]	; (9472c <DD_INIT_PIO+0x104>)
   94666:	4a2b      	ldr	r2, [pc, #172]	; (94714 <DD_INIT_PIO+0xec>)
   94668:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE5F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   9466c:	4b2f      	ldr	r3, [pc, #188]	; (9472c <DD_INIT_PIO+0x104>)
   9466e:	4a30      	ldr	r2, [pc, #192]	; (94730 <DD_INIT_PIO+0x108>)
   94670:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00006400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   94672:	4b2e      	ldr	r3, [pc, #184]	; (9472c <DD_INIT_PIO+0x104>)
   94674:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
   94678:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300;			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   9467a:	4b2c      	ldr	r3, [pc, #176]	; (9472c <DD_INIT_PIO+0x104>)
   9467c:	4a2d      	ldr	r2, [pc, #180]	; (94734 <DD_INIT_PIO+0x10c>)
   9467e:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   94680:	4b2a      	ldr	r3, [pc, #168]	; (9472c <DD_INIT_PIO+0x104>)
   94682:	4a2d      	ldr	r2, [pc, #180]	; (94738 <DD_INIT_PIO+0x110>)
   94684:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   94686:	4b2d      	ldr	r3, [pc, #180]	; (9473c <DD_INIT_PIO+0x114>)
   94688:	4a22      	ldr	r2, [pc, #136]	; (94714 <DD_INIT_PIO+0xec>)
   9468a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   9468e:	4b2b      	ldr	r3, [pc, #172]	; (9473c <DD_INIT_PIO+0x114>)
   94690:	4a2b      	ldr	r2, [pc, #172]	; (94740 <DD_INIT_PIO+0x118>)
   94692:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   94694:	4b29      	ldr	r3, [pc, #164]	; (9473c <DD_INIT_PIO+0x114>)
   94696:	4a2b      	ldr	r2, [pc, #172]	; (94744 <DD_INIT_PIO+0x11c>)
   94698:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   9469a:	4b28      	ldr	r3, [pc, #160]	; (9473c <DD_INIT_PIO+0x114>)
   9469c:	4a2a      	ldr	r2, [pc, #168]	; (94748 <DD_INIT_PIO+0x120>)
   9469e:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   946a0:	4b26      	ldr	r3, [pc, #152]	; (9473c <DD_INIT_PIO+0x114>)
   946a2:	4a2a      	ldr	r2, [pc, #168]	; (9474c <DD_INIT_PIO+0x124>)
   946a4:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   946a6:	4b25      	ldr	r3, [pc, #148]	; (9473c <DD_INIT_PIO+0x114>)
   946a8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   946ac:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   946ae:	4b28      	ldr	r3, [pc, #160]	; (94750 <DD_INIT_PIO+0x128>)
   946b0:	4a18      	ldr	r2, [pc, #96]	; (94714 <DD_INIT_PIO+0xec>)
   946b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   946b6:	4b26      	ldr	r3, [pc, #152]	; (94750 <DD_INIT_PIO+0x128>)
   946b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
   946bc:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   946be:	4b24      	ldr	r3, [pc, #144]	; (94750 <DD_INIT_PIO+0x128>)
   946c0:	f44f 72c3 	mov.w	r2, #390	; 0x186
   946c4:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   946c6:	4b22      	ldr	r3, [pc, #136]	; (94750 <DD_INIT_PIO+0x128>)
   946c8:	f240 6279 	movw	r2, #1657	; 0x679
   946cc:	615a      	str	r2, [r3, #20]


//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
 PIOC->PIO_CODR = 1<<21;               
   946ce:	4b1b      	ldr	r3, [pc, #108]	; (9473c <DD_INIT_PIO+0x114>)
   946d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   946d4:	635a      	str	r2, [r3, #52]	; 0x34
 PIOD->PIO_SODR = 1<2;
   946d6:	4b1e      	ldr	r3, [pc, #120]	; (94750 <DD_INIT_PIO+0x128>)
   946d8:	2201      	movs	r2, #1
   946da:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   946dc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   946e0:	2055      	movs	r0, #85	; 0x55
   946e2:	4b1c      	ldr	r3, [pc, #112]	; (94754 <DD_INIT_PIO+0x12c>)
   946e4:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   946e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   946ea:	2055      	movs	r0, #85	; 0x55
   946ec:	4b19      	ldr	r3, [pc, #100]	; (94754 <DD_INIT_PIO+0x12c>)
   946ee:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   946f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   946f4:	2001      	movs	r0, #1
   946f6:	4b17      	ldr	r3, [pc, #92]	; (94754 <DD_INIT_PIO+0x12c>)
   946f8:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   946fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   946fe:	2000      	movs	r0, #0
   94700:	4b14      	ldr	r3, [pc, #80]	; (94754 <DD_INIT_PIO+0x12c>)
   94702:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   94704:	4914      	ldr	r1, [pc, #80]	; (94758 <DD_INIT_PIO+0x130>)
   94706:	2003      	movs	r0, #3
   94708:	4b12      	ldr	r3, [pc, #72]	; (94754 <DD_INIT_PIO+0x12c>)
   9470a:	4798      	blx	r3


}
   9470c:	bf00      	nop
   9470e:	bd80      	pop	{r7, pc}
   94710:	400e0e00 	.word	0x400e0e00
   94714:	50494f00 	.word	0x50494f00
   94718:	21c9ecf8 	.word	0x21c9ecf8
   9471c:	20f0b868 	.word	0x20f0b868
   94720:	01094494 	.word	0x01094494
   94724:	1e361303 	.word	0x1e361303
   94728:	00391000 	.word	0x00391000
   9472c:	400e1000 	.word	0x400e1000
   94730:	0fe5f700 	.word	0x0fe5f700
   94734:	0fe59300 	.word	0x0fe59300
   94738:	f01800ff 	.word	0xf01800ff
   9473c:	400e1200 	.word	0x400e1200
   94740:	7f9ffffe 	.word	0x7f9ffffe
   94744:	18e1fffe 	.word	0x18e1fffe
   94748:	671e0000 	.word	0x671e0000
   9474c:	80600001 	.word	0x80600001
   94750:	400e1400 	.word	0x400e1400
   94754:	000980b5 	.word	0x000980b5
   94758:	30000001 	.word	0x30000001

0009475c <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   9475c:	b480      	push	{r7}
   9475e:	b083      	sub	sp, #12
   94760:	af00      	add	r7, sp, #0
   94762:	6078      	str	r0, [r7, #4]
   94764:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   94766:	687b      	ldr	r3, [r7, #4]
   94768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9476c:	d01a      	beq.n	947a4 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   9476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94772:	d803      	bhi.n	9477c <DD_DIS_PERI_AND_RESET_PIO+0x20>
   94774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94778:	d007      	beq.n	9478a <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   9477a:	e03a      	b.n	947f2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
   9477c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94780:	d01d      	beq.n	947be <DD_DIS_PERI_AND_RESET_PIO+0x62>
   94782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94786:	d027      	beq.n	947d8 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   94788:	e033      	b.n	947f2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   9478a:	4a1d      	ldr	r2, [pc, #116]	; (94800 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   9478c:	2101      	movs	r1, #1
   9478e:	683b      	ldr	r3, [r7, #0]
   94790:	fa01 f303 	lsl.w	r3, r1, r3
   94794:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   94796:	4a1a      	ldr	r2, [pc, #104]	; (94800 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   94798:	2101      	movs	r1, #1
   9479a:	683b      	ldr	r3, [r7, #0]
   9479c:	fa01 f303 	lsl.w	r3, r1, r3
   947a0:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   947a2:	e026      	b.n	947f2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   947a4:	4a17      	ldr	r2, [pc, #92]	; (94804 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   947a6:	2101      	movs	r1, #1
   947a8:	683b      	ldr	r3, [r7, #0]
   947aa:	fa01 f303 	lsl.w	r3, r1, r3
   947ae:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   947b0:	4a14      	ldr	r2, [pc, #80]	; (94804 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   947b2:	2101      	movs	r1, #1
   947b4:	683b      	ldr	r3, [r7, #0]
   947b6:	fa01 f303 	lsl.w	r3, r1, r3
   947ba:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   947bc:	e019      	b.n	947f2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   947be:	4a12      	ldr	r2, [pc, #72]	; (94808 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   947c0:	2101      	movs	r1, #1
   947c2:	683b      	ldr	r3, [r7, #0]
   947c4:	fa01 f303 	lsl.w	r3, r1, r3
   947c8:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   947ca:	4a0f      	ldr	r2, [pc, #60]	; (94808 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   947cc:	2101      	movs	r1, #1
   947ce:	683b      	ldr	r3, [r7, #0]
   947d0:	fa01 f303 	lsl.w	r3, r1, r3
   947d4:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   947d6:	e00c      	b.n	947f2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   947d8:	4a0c      	ldr	r2, [pc, #48]	; (9480c <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   947da:	2101      	movs	r1, #1
   947dc:	683b      	ldr	r3, [r7, #0]
   947de:	fa01 f303 	lsl.w	r3, r1, r3
   947e2:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   947e4:	4a09      	ldr	r2, [pc, #36]	; (9480c <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   947e6:	2101      	movs	r1, #1
   947e8:	683b      	ldr	r3, [r7, #0]
   947ea:	fa01 f303 	lsl.w	r3, r1, r3
   947ee:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   947f0:	bf00      	nop
			
	}
}
   947f2:	bf00      	nop
   947f4:	4618      	mov	r0, r3
   947f6:	370c      	adds	r7, #12
   947f8:	46bd      	mov	sp, r7
   947fa:	bc80      	pop	{r7}
   947fc:	4770      	bx	lr
   947fe:	bf00      	nop
   94800:	400e0e00 	.word	0x400e0e00
   94804:	400e1000 	.word	0x400e1000
   94808:	400e1200 	.word	0x400e1200
   9480c:	400e1400 	.word	0x400e1400

00094810 <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   94810:	b480      	push	{r7}
   94812:	b083      	sub	sp, #12
   94814:	af00      	add	r7, sp, #0
   94816:	6078      	str	r0, [r7, #4]
   94818:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   9481a:	687b      	ldr	r3, [r7, #4]
   9481c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94820:	d014      	beq.n	9484c <DD_EN_PERI_AND_SET_PIO+0x3c>
   94822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94826:	d803      	bhi.n	94830 <DD_EN_PERI_AND_SET_PIO+0x20>
   94828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9482c:	d007      	beq.n	9483e <DD_EN_PERI_AND_SET_PIO+0x2e>
   9482e:	e022      	b.n	94876 <DD_EN_PERI_AND_SET_PIO+0x66>
   94830:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   94834:	d011      	beq.n	9485a <DD_EN_PERI_AND_SET_PIO+0x4a>
   94836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9483a:	d015      	beq.n	94868 <DD_EN_PERI_AND_SET_PIO+0x58>
   9483c:	e01b      	b.n	94876 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   9483e:	4a11      	ldr	r2, [pc, #68]	; (94884 <DD_EN_PERI_AND_SET_PIO+0x74>)
   94840:	2101      	movs	r1, #1
   94842:	683b      	ldr	r3, [r7, #0]
   94844:	fa01 f303 	lsl.w	r3, r1, r3
   94848:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   9484a:	e014      	b.n	94876 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   9484c:	4a0e      	ldr	r2, [pc, #56]	; (94888 <DD_EN_PERI_AND_SET_PIO+0x78>)
   9484e:	2101      	movs	r1, #1
   94850:	683b      	ldr	r3, [r7, #0]
   94852:	fa01 f303 	lsl.w	r3, r1, r3
   94856:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   94858:	e00d      	b.n	94876 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   9485a:	4a0c      	ldr	r2, [pc, #48]	; (9488c <DD_EN_PERI_AND_SET_PIO+0x7c>)
   9485c:	2101      	movs	r1, #1
   9485e:	683b      	ldr	r3, [r7, #0]
   94860:	fa01 f303 	lsl.w	r3, r1, r3
   94864:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   94866:	e006      	b.n	94876 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   94868:	4a09      	ldr	r2, [pc, #36]	; (94890 <DD_EN_PERI_AND_SET_PIO+0x80>)
   9486a:	2101      	movs	r1, #1
   9486c:	683b      	ldr	r3, [r7, #0]
   9486e:	fa01 f303 	lsl.w	r3, r1, r3
   94872:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   94874:	bf00      	nop
		

		
	}
}
   94876:	bf00      	nop
   94878:	4618      	mov	r0, r3
   9487a:	370c      	adds	r7, #12
   9487c:	46bd      	mov	sp, r7
   9487e:	bc80      	pop	{r7}
   94880:	4770      	bx	lr
   94882:	bf00      	nop
   94884:	400e0e00 	.word	0x400e0e00
   94888:	400e1000 	.word	0x400e1000
   9488c:	400e1200 	.word	0x400e1200
   94890:	400e1400 	.word	0x400e1400

00094894 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   94894:	b480      	push	{r7}
   94896:	b083      	sub	sp, #12
   94898:	af00      	add	r7, sp, #0
   9489a:	6078      	str	r0, [r7, #4]
   9489c:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   9489e:	687b      	ldr	r3, [r7, #4]
   948a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   948a4:	d014      	beq.n	948d0 <DD_SET_PIO+0x3c>
   948a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   948aa:	d803      	bhi.n	948b4 <DD_SET_PIO+0x20>
   948ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   948b0:	d007      	beq.n	948c2 <DD_SET_PIO+0x2e>
   948b2:	e022      	b.n	948fa <DD_SET_PIO+0x66>
   948b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   948b8:	d011      	beq.n	948de <DD_SET_PIO+0x4a>
   948ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   948be:	d015      	beq.n	948ec <DD_SET_PIO+0x58>
   948c0:	e01b      	b.n	948fa <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   948c2:	4a11      	ldr	r2, [pc, #68]	; (94908 <DD_SET_PIO+0x74>)
   948c4:	2101      	movs	r1, #1
   948c6:	683b      	ldr	r3, [r7, #0]
   948c8:	fa01 f303 	lsl.w	r3, r1, r3
   948cc:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   948ce:	e014      	b.n	948fa <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   948d0:	4a0e      	ldr	r2, [pc, #56]	; (9490c <DD_SET_PIO+0x78>)
   948d2:	2101      	movs	r1, #1
   948d4:	683b      	ldr	r3, [r7, #0]
   948d6:	fa01 f303 	lsl.w	r3, r1, r3
   948da:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   948dc:	e00d      	b.n	948fa <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   948de:	4a0c      	ldr	r2, [pc, #48]	; (94910 <DD_SET_PIO+0x7c>)
   948e0:	2101      	movs	r1, #1
   948e2:	683b      	ldr	r3, [r7, #0]
   948e4:	fa01 f303 	lsl.w	r3, r1, r3
   948e8:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   948ea:	e006      	b.n	948fa <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   948ec:	4a09      	ldr	r2, [pc, #36]	; (94914 <DD_SET_PIO+0x80>)
   948ee:	2101      	movs	r1, #1
   948f0:	683b      	ldr	r3, [r7, #0]
   948f2:	fa01 f303 	lsl.w	r3, r1, r3
   948f6:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   948f8:	bf00      	nop
				

	}
	
	return 0;
   948fa:	2300      	movs	r3, #0
}
   948fc:	4618      	mov	r0, r3
   948fe:	370c      	adds	r7, #12
   94900:	46bd      	mov	sp, r7
   94902:	bc80      	pop	{r7}
   94904:	4770      	bx	lr
   94906:	bf00      	nop
   94908:	400e0e00 	.word	0x400e0e00
   9490c:	400e1000 	.word	0x400e1000
   94910:	400e1200 	.word	0x400e1200
   94914:	400e1400 	.word	0x400e1400

00094918 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   94918:	b480      	push	{r7}
   9491a:	b083      	sub	sp, #12
   9491c:	af00      	add	r7, sp, #0
   9491e:	6078      	str	r0, [r7, #4]
   94920:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   94922:	687b      	ldr	r3, [r7, #4]
   94924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   94928:	d014      	beq.n	94954 <DD_RESET_PIO+0x3c>
   9492a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9492e:	d803      	bhi.n	94938 <DD_RESET_PIO+0x20>
   94930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   94934:	d007      	beq.n	94946 <DD_RESET_PIO+0x2e>
   94936:	e022      	b.n	9497e <DD_RESET_PIO+0x66>
   94938:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   9493c:	d011      	beq.n	94962 <DD_RESET_PIO+0x4a>
   9493e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94942:	d015      	beq.n	94970 <DD_RESET_PIO+0x58>
   94944:	e01b      	b.n	9497e <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   94946:	4a11      	ldr	r2, [pc, #68]	; (9498c <DD_RESET_PIO+0x74>)
   94948:	2101      	movs	r1, #1
   9494a:	683b      	ldr	r3, [r7, #0]
   9494c:	fa01 f303 	lsl.w	r3, r1, r3
   94950:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   94952:	e014      	b.n	9497e <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   94954:	4a0e      	ldr	r2, [pc, #56]	; (94990 <DD_RESET_PIO+0x78>)
   94956:	2101      	movs	r1, #1
   94958:	683b      	ldr	r3, [r7, #0]
   9495a:	fa01 f303 	lsl.w	r3, r1, r3
   9495e:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   94960:	e00d      	b.n	9497e <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   94962:	4a0c      	ldr	r2, [pc, #48]	; (94994 <DD_RESET_PIO+0x7c>)
   94964:	2101      	movs	r1, #1
   94966:	683b      	ldr	r3, [r7, #0]
   94968:	fa01 f303 	lsl.w	r3, r1, r3
   9496c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9496e:	e006      	b.n	9497e <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   94970:	4a09      	ldr	r2, [pc, #36]	; (94998 <DD_RESET_PIO+0x80>)
   94972:	2101      	movs	r1, #1
   94974:	683b      	ldr	r3, [r7, #0]
   94976:	fa01 f303 	lsl.w	r3, r1, r3
   9497a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9497c:	bf00      	nop
		  		

	  }
	  
	  return 0;
   9497e:	2300      	movs	r3, #0
  }
   94980:	4618      	mov	r0, r3
   94982:	370c      	adds	r7, #12
   94984:	46bd      	mov	sp, r7
   94986:	bc80      	pop	{r7}
   94988:	4770      	bx	lr
   9498a:	bf00      	nop
   9498c:	400e0e00 	.word	0x400e0e00
   94990:	400e1000 	.word	0x400e1000
   94994:	400e1200 	.word	0x400e1200
   94998:	400e1400 	.word	0x400e1400

0009499c <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   9499c:	b480      	push	{r7}
   9499e:	b085      	sub	sp, #20
   949a0:	af00      	add	r7, sp, #0
   949a2:	6078      	str	r0, [r7, #4]
   949a4:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   949a6:	2300      	movs	r3, #0
   949a8:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   949aa:	2300      	movs	r3, #0
   949ac:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   949ae:	687b      	ldr	r3, [r7, #4]
   949b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   949b4:	d01a      	beq.n	949ec <DD_READ_PIO+0x50>
   949b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   949ba:	d803      	bhi.n	949c4 <DD_READ_PIO+0x28>
   949bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   949c0:	d007      	beq.n	949d2 <DD_READ_PIO+0x36>
   949c2:	e03c      	b.n	94a3e <DD_READ_PIO+0xa2>
   949c4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   949c8:	d01d      	beq.n	94a06 <DD_READ_PIO+0x6a>
   949ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   949ce:	d029      	beq.n	94a24 <DD_READ_PIO+0x88>
   949d0:	e035      	b.n	94a3e <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   949d2:	4b1d      	ldr	r3, [pc, #116]	; (94a48 <DD_READ_PIO+0xac>)
   949d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   949d6:	2101      	movs	r1, #1
   949d8:	683a      	ldr	r2, [r7, #0]
   949da:	fa01 f202 	lsl.w	r2, r1, r2
   949de:	4013      	ands	r3, r2
   949e0:	2b00      	cmp	r3, #0
   949e2:	d101      	bne.n	949e8 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   949e4:	2300      	movs	r3, #0
   949e6:	e02a      	b.n	94a3e <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   949e8:	2301      	movs	r3, #1
   949ea:	e028      	b.n	94a3e <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   949ec:	4b17      	ldr	r3, [pc, #92]	; (94a4c <DD_READ_PIO+0xb0>)
   949ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   949f0:	2101      	movs	r1, #1
   949f2:	683a      	ldr	r2, [r7, #0]
   949f4:	fa01 f202 	lsl.w	r2, r1, r2
   949f8:	4013      	ands	r3, r2
   949fa:	2b00      	cmp	r3, #0
   949fc:	d101      	bne.n	94a02 <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   949fe:	2300      	movs	r3, #0
   94a00:	e01d      	b.n	94a3e <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   94a02:	2301      	movs	r3, #1
   94a04:	e01b      	b.n	94a3e <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   94a06:	4b12      	ldr	r3, [pc, #72]	; (94a50 <DD_READ_PIO+0xb4>)
   94a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94a0a:	2101      	movs	r1, #1
   94a0c:	683a      	ldr	r2, [r7, #0]
   94a0e:	fa01 f202 	lsl.w	r2, r1, r2
   94a12:	4013      	ands	r3, r2
   94a14:	2b00      	cmp	r3, #0
   94a16:	d101      	bne.n	94a1c <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   94a18:	2300      	movs	r3, #0
   94a1a:	e010      	b.n	94a3e <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   94a1c:	2301      	movs	r3, #1
   94a1e:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   94a20:	897b      	ldrh	r3, [r7, #10]
   94a22:	e00c      	b.n	94a3e <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   94a24:	4b0b      	ldr	r3, [pc, #44]	; (94a54 <DD_READ_PIO+0xb8>)
   94a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94a28:	2101      	movs	r1, #1
   94a2a:	683a      	ldr	r2, [r7, #0]
   94a2c:	fa01 f202 	lsl.w	r2, r1, r2
   94a30:	4013      	ands	r3, r2
   94a32:	2b00      	cmp	r3, #0
   94a34:	d101      	bne.n	94a3a <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   94a36:	2300      	movs	r3, #0
   94a38:	e001      	b.n	94a3e <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   94a3a:	2301      	movs	r3, #1
   94a3c:	e7ff      	b.n	94a3e <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   94a3e:	4618      	mov	r0, r3
   94a40:	3714      	adds	r7, #20
   94a42:	46bd      	mov	sp, r7
   94a44:	bc80      	pop	{r7}
   94a46:	4770      	bx	lr
   94a48:	400e0e00 	.word	0x400e0e00
   94a4c:	400e1000 	.word	0x400e1000
   94a50:	400e1200 	.word	0x400e1200
   94a54:	400e1400 	.word	0x400e1400

00094a58 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   94a58:	b480      	push	{r7}
   94a5a:	b083      	sub	sp, #12
   94a5c:	af00      	add	r7, sp, #0
   94a5e:	4603      	mov	r3, r0
   94a60:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   94a62:	4909      	ldr	r1, [pc, #36]	; (94a88 <NVIC_ClearPendingIRQ+0x30>)
   94a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94a68:	095b      	lsrs	r3, r3, #5
   94a6a:	79fa      	ldrb	r2, [r7, #7]
   94a6c:	f002 021f 	and.w	r2, r2, #31
   94a70:	2001      	movs	r0, #1
   94a72:	fa00 f202 	lsl.w	r2, r0, r2
   94a76:	3360      	adds	r3, #96	; 0x60
   94a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   94a7c:	bf00      	nop
   94a7e:	370c      	adds	r7, #12
   94a80:	46bd      	mov	sp, r7
   94a82:	bc80      	pop	{r7}
   94a84:	4770      	bx	lr
   94a86:	bf00      	nop
   94a88:	e000e100 	.word	0xe000e100

00094a8c <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   94a8c:	b580      	push	{r7, lr}
   94a8e:	b084      	sub	sp, #16
   94a90:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   94a92:	4b0b      	ldr	r3, [pc, #44]	; (94ac0 <UART_Handler+0x34>)
   94a94:	695b      	ldr	r3, [r3, #20]
   94a96:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   94a98:	4b09      	ldr	r3, [pc, #36]	; (94ac0 <UART_Handler+0x34>)
   94a9a:	699b      	ldr	r3, [r3, #24]
   94a9c:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   94a9e:	79fb      	ldrb	r3, [r7, #7]
   94aa0:	4618      	mov	r0, r3
   94aa2:	4b08      	ldr	r3, [pc, #32]	; (94ac4 <UART_Handler+0x38>)
   94aa4:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   94aa6:	2300      	movs	r3, #0
   94aa8:	60fb      	str	r3, [r7, #12]
   94aaa:	e002      	b.n	94ab2 <UART_Handler+0x26>
   94aac:	68fb      	ldr	r3, [r7, #12]
   94aae:	3301      	adds	r3, #1
   94ab0:	60fb      	str	r3, [r7, #12]
   94ab2:	68fb      	ldr	r3, [r7, #12]
   94ab4:	2bfe      	cmp	r3, #254	; 0xfe
   94ab6:	d9f9      	bls.n	94aac <UART_Handler+0x20>
		{
			;
		}
	}

}
   94ab8:	bf00      	nop
   94aba:	3710      	adds	r7, #16
   94abc:	46bd      	mov	sp, r7
   94abe:	bd80      	pop	{r7, pc}
   94ac0:	400e0800 	.word	0x400e0800
   94ac4:	00096519 	.word	0x00096519

00094ac8 <TC0_Handler>:


void TC0_Handler()
{
   94ac8:	b580      	push	{r7, lr}
   94aca:	b082      	sub	sp, #8
   94acc:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94ace:	2100      	movs	r1, #0
   94ad0:	4807      	ldr	r0, [pc, #28]	; (94af0 <TC0_Handler+0x28>)
   94ad2:	4b08      	ldr	r3, [pc, #32]	; (94af4 <TC0_Handler+0x2c>)
   94ad4:	4798      	blx	r3
   94ad6:	4603      	mov	r3, r0
   94ad8:	f003 0310 	and.w	r3, r3, #16
   94adc:	2b00      	cmp	r3, #0
   94ade:	d003      	beq.n	94ae8 <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   94ae0:	4b05      	ldr	r3, [pc, #20]	; (94af8 <TC0_Handler+0x30>)
   94ae2:	4798      	blx	r3
   94ae4:	4603      	mov	r3, r0
   94ae6:	71fb      	strb	r3, [r7, #7]
	}
}
   94ae8:	bf00      	nop
   94aea:	3708      	adds	r7, #8
   94aec:	46bd      	mov	sp, r7
   94aee:	bd80      	pop	{r7, pc}
   94af0:	40080000 	.word	0x40080000
   94af4:	00098759 	.word	0x00098759
   94af8:	00091465 	.word	0x00091465

00094afc <TC6_Handler>:

void TC6_Handler()
{
   94afc:	b580      	push	{r7, lr}
   94afe:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   94b00:	2021      	movs	r0, #33	; 0x21
   94b02:	4b04      	ldr	r3, [pc, #16]	; (94b14 <TC6_Handler+0x18>)
   94b04:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94b06:	2100      	movs	r1, #0
   94b08:	4803      	ldr	r0, [pc, #12]	; (94b18 <TC6_Handler+0x1c>)
   94b0a:	4b04      	ldr	r3, [pc, #16]	; (94b1c <TC6_Handler+0x20>)
   94b0c:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   94b0e:	bf00      	nop
   94b10:	bd80      	pop	{r7, pc}
   94b12:	bf00      	nop
   94b14:	00094a59 	.word	0x00094a59
   94b18:	40088000 	.word	0x40088000
   94b1c:	00098759 	.word	0x00098759

00094b20 <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   94b20:	b580      	push	{r7, lr}
   94b22:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   94b24:	201e      	movs	r0, #30
   94b26:	4b04      	ldr	r3, [pc, #16]	; (94b38 <TC3_Handler+0x18>)
   94b28:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   94b2a:	2100      	movs	r1, #0
   94b2c:	4803      	ldr	r0, [pc, #12]	; (94b3c <TC3_Handler+0x1c>)
   94b2e:	4b04      	ldr	r3, [pc, #16]	; (94b40 <TC3_Handler+0x20>)
   94b30:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   94b32:	bf00      	nop
   94b34:	bd80      	pop	{r7, pc}
   94b36:	bf00      	nop
   94b38:	00094a59 	.word	0x00094a59
   94b3c:	40084000 	.word	0x40084000
   94b40:	00098759 	.word	0x00098759

00094b44 <SysTick_Handler>:

void SysTick_Handler(void)
{
   94b44:	b580      	push	{r7, lr}
   94b46:	b082      	sub	sp, #8
   94b48:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   94b4a:	4b04      	ldr	r3, [pc, #16]	; (94b5c <SysTick_Handler+0x18>)
   94b4c:	4798      	blx	r3
   94b4e:	4603      	mov	r3, r0
   94b50:	71fb      	strb	r3, [r7, #7]
   94b52:	bf00      	nop
   94b54:	3708      	adds	r7, #8
   94b56:	46bd      	mov	sp, r7
   94b58:	bd80      	pop	{r7, pc}
   94b5a:	bf00      	nop
   94b5c:	00091919 	.word	0x00091919

00094b60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   94b60:	b480      	push	{r7}
   94b62:	b083      	sub	sp, #12
   94b64:	af00      	add	r7, sp, #0
   94b66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   94b68:	687b      	ldr	r3, [r7, #4]
   94b6a:	2b07      	cmp	r3, #7
   94b6c:	d825      	bhi.n	94bba <osc_get_rate+0x5a>
   94b6e:	a201      	add	r2, pc, #4	; (adr r2, 94b74 <osc_get_rate+0x14>)
   94b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94b74:	00094b95 	.word	0x00094b95
   94b78:	00094b9b 	.word	0x00094b9b
   94b7c:	00094ba1 	.word	0x00094ba1
   94b80:	00094ba7 	.word	0x00094ba7
   94b84:	00094bab 	.word	0x00094bab
   94b88:	00094baf 	.word	0x00094baf
   94b8c:	00094bb3 	.word	0x00094bb3
   94b90:	00094bb7 	.word	0x00094bb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   94b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   94b98:	e010      	b.n	94bbc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   94b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   94b9e:	e00d      	b.n	94bbc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   94ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   94ba4:	e00a      	b.n	94bbc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   94ba6:	4b08      	ldr	r3, [pc, #32]	; (94bc8 <osc_get_rate+0x68>)
   94ba8:	e008      	b.n	94bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   94baa:	4b08      	ldr	r3, [pc, #32]	; (94bcc <osc_get_rate+0x6c>)
   94bac:	e006      	b.n	94bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   94bae:	4b08      	ldr	r3, [pc, #32]	; (94bd0 <osc_get_rate+0x70>)
   94bb0:	e004      	b.n	94bbc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   94bb2:	4b07      	ldr	r3, [pc, #28]	; (94bd0 <osc_get_rate+0x70>)
   94bb4:	e002      	b.n	94bbc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   94bb6:	4b06      	ldr	r3, [pc, #24]	; (94bd0 <osc_get_rate+0x70>)
   94bb8:	e000      	b.n	94bbc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   94bba:	2300      	movs	r3, #0
}
   94bbc:	4618      	mov	r0, r3
   94bbe:	370c      	adds	r7, #12
   94bc0:	46bd      	mov	sp, r7
   94bc2:	bc80      	pop	{r7}
   94bc4:	4770      	bx	lr
   94bc6:	bf00      	nop
   94bc8:	003d0900 	.word	0x003d0900
   94bcc:	007a1200 	.word	0x007a1200
   94bd0:	00b71b00 	.word	0x00b71b00

00094bd4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   94bd4:	b580      	push	{r7, lr}
   94bd6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   94bd8:	2006      	movs	r0, #6
   94bda:	4b04      	ldr	r3, [pc, #16]	; (94bec <sysclk_get_main_hz+0x18>)
   94bdc:	4798      	blx	r3
   94bde:	4602      	mov	r2, r0
   94be0:	4613      	mov	r3, r2
   94be2:	00db      	lsls	r3, r3, #3
   94be4:	1a9b      	subs	r3, r3, r2
   94be6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   94be8:	4618      	mov	r0, r3
   94bea:	bd80      	pop	{r7, pc}
   94bec:	00094b61 	.word	0x00094b61

00094bf0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   94bf0:	b580      	push	{r7, lr}
   94bf2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   94bf4:	4b02      	ldr	r3, [pc, #8]	; (94c00 <sysclk_get_cpu_hz+0x10>)
   94bf6:	4798      	blx	r3
   94bf8:	4603      	mov	r3, r0
   94bfa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   94bfc:	4618      	mov	r0, r3
   94bfe:	bd80      	pop	{r7, pc}
   94c00:	00094bd5 	.word	0x00094bd5

00094c04 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   94c04:	b580      	push	{r7, lr}
   94c06:	b082      	sub	sp, #8
   94c08:	af00      	add	r7, sp, #0
   94c0a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   94c0c:	6878      	ldr	r0, [r7, #4]
   94c0e:	4b03      	ldr	r3, [pc, #12]	; (94c1c <sysclk_enable_peripheral_clock+0x18>)
   94c10:	4798      	blx	r3
}
   94c12:	bf00      	nop
   94c14:	3708      	adds	r7, #8
   94c16:	46bd      	mov	sp, r7
   94c18:	bd80      	pop	{r7, pc}
   94c1a:	bf00      	nop
   94c1c:	00098635 	.word	0x00098635

00094c20 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   94c20:	b580      	push	{r7, lr}
   94c22:	b082      	sub	sp, #8
   94c24:	af00      	add	r7, sp, #0
   94c26:	6078      	str	r0, [r7, #4]
   94c28:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   94c2a:	4b10      	ldr	r3, [pc, #64]	; (94c6c <twi_master_setup+0x4c>)
   94c2c:	4798      	blx	r3
   94c2e:	4602      	mov	r2, r0
   94c30:	683b      	ldr	r3, [r7, #0]
   94c32:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   94c34:	683b      	ldr	r3, [r7, #0]
   94c36:	2200      	movs	r2, #0
   94c38:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   94c3a:	687b      	ldr	r3, [r7, #4]
   94c3c:	4a0c      	ldr	r2, [pc, #48]	; (94c70 <twi_master_setup+0x50>)
   94c3e:	4293      	cmp	r3, r2
   94c40:	d103      	bne.n	94c4a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   94c42:	2016      	movs	r0, #22
   94c44:	4b0b      	ldr	r3, [pc, #44]	; (94c74 <twi_master_setup+0x54>)
   94c46:	4798      	blx	r3
   94c48:	e006      	b.n	94c58 <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   94c4a:	687b      	ldr	r3, [r7, #4]
   94c4c:	4a0a      	ldr	r2, [pc, #40]	; (94c78 <twi_master_setup+0x58>)
   94c4e:	4293      	cmp	r3, r2
   94c50:	d102      	bne.n	94c58 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   94c52:	2017      	movs	r0, #23
   94c54:	4b07      	ldr	r3, [pc, #28]	; (94c74 <twi_master_setup+0x54>)
   94c56:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   94c58:	6839      	ldr	r1, [r7, #0]
   94c5a:	6878      	ldr	r0, [r7, #4]
   94c5c:	4b07      	ldr	r3, [pc, #28]	; (94c7c <twi_master_setup+0x5c>)
   94c5e:	4798      	blx	r3
   94c60:	4603      	mov	r3, r0
}
   94c62:	4618      	mov	r0, r3
   94c64:	3708      	adds	r7, #8
   94c66:	46bd      	mov	sp, r7
   94c68:	bd80      	pop	{r7, pc}
   94c6a:	bf00      	nop
   94c6c:	00094bf1 	.word	0x00094bf1
   94c70:	4008c000 	.word	0x4008c000
   94c74:	00094c05 	.word	0x00094c05
   94c78:	40090000 	.word	0x40090000
   94c7c:	00080629 	.word	0x00080629

00094c80 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   94c80:	b580      	push	{r7, lr}
   94c82:	b086      	sub	sp, #24
   94c84:	af00      	add	r7, sp, #0
   94c86:	6078      	str	r0, [r7, #4]
   94c88:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   94c8a:	4b63      	ldr	r3, [pc, #396]	; (94e18 <twi_master_write1+0x198>)
   94c8c:	2200      	movs	r2, #0
   94c8e:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   94c90:	4b62      	ldr	r3, [pc, #392]	; (94e1c <twi_master_write1+0x19c>)
   94c92:	681b      	ldr	r3, [r3, #0]
   94c94:	3301      	adds	r3, #1
   94c96:	4a61      	ldr	r2, [pc, #388]	; (94e1c <twi_master_write1+0x19c>)
   94c98:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   94c9a:	4b60      	ldr	r3, [pc, #384]	; (94e1c <twi_master_write1+0x19c>)
   94c9c:	681b      	ldr	r3, [r3, #0]
   94c9e:	2b01      	cmp	r3, #1
   94ca0:	dd04      	ble.n	94cac <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   94ca2:	2200      	movs	r2, #0
   94ca4:	2100      	movs	r1, #0
   94ca6:	203d      	movs	r0, #61	; 0x3d
   94ca8:	4b5d      	ldr	r3, [pc, #372]	; (94e20 <twi_master_write1+0x1a0>)
   94caa:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   94cac:	495d      	ldr	r1, [pc, #372]	; (94e24 <twi_master_write1+0x1a4>)
   94cae:	485e      	ldr	r0, [pc, #376]	; (94e28 <twi_master_write1+0x1a8>)
   94cb0:	4b5e      	ldr	r3, [pc, #376]	; (94e2c <twi_master_write1+0x1ac>)
   94cb2:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   94cb4:	683b      	ldr	r3, [r7, #0]
   94cb6:	68db      	ldr	r3, [r3, #12]
   94cb8:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   94cba:	683b      	ldr	r3, [r7, #0]
   94cbc:	689b      	ldr	r3, [r3, #8]
   94cbe:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   94cc0:	4b5b      	ldr	r3, [pc, #364]	; (94e30 <twi_master_write1+0x1b0>)
   94cc2:	2200      	movs	r2, #0
   94cc4:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   94cc6:	697b      	ldr	r3, [r7, #20]
   94cc8:	2b00      	cmp	r3, #0
   94cca:	d104      	bne.n	94cd6 <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   94ccc:	4b53      	ldr	r3, [pc, #332]	; (94e1c <twi_master_write1+0x19c>)
   94cce:	2200      	movs	r2, #0
   94cd0:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   94cd2:	2301      	movs	r3, #1
   94cd4:	e09c      	b.n	94e10 <twi_master_write1+0x190>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   94cd6:	687b      	ldr	r3, [r7, #4]
   94cd8:	2200      	movs	r2, #0
   94cda:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   94cdc:	683b      	ldr	r3, [r7, #0]
   94cde:	7c1b      	ldrb	r3, [r3, #16]
   94ce0:	041b      	lsls	r3, r3, #16
   94ce2:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   94ce6:	683b      	ldr	r3, [r7, #0]
   94ce8:	685b      	ldr	r3, [r3, #4]
   94cea:	021b      	lsls	r3, r3, #8
   94cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   94cf0:	431a      	orrs	r2, r3
   94cf2:	687b      	ldr	r3, [r7, #4]
   94cf4:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   94cf6:	687b      	ldr	r3, [r7, #4]
   94cf8:	2200      	movs	r2, #0
   94cfa:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   94cfc:	683a      	ldr	r2, [r7, #0]
   94cfe:	683b      	ldr	r3, [r7, #0]
   94d00:	685b      	ldr	r3, [r3, #4]
   94d02:	4619      	mov	r1, r3
   94d04:	4610      	mov	r0, r2
   94d06:	4b4b      	ldr	r3, [pc, #300]	; (94e34 <twi_master_write1+0x1b4>)
   94d08:	4798      	blx	r3
   94d0a:	4602      	mov	r2, r0
   94d0c:	687b      	ldr	r3, [r7, #4]
   94d0e:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   94d10:	e033      	b.n	94d7a <twi_master_write1+0xfa>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   94d12:	687b      	ldr	r3, [r7, #4]
   94d14:	6a1b      	ldr	r3, [r3, #32]
   94d16:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   94d18:	68fb      	ldr	r3, [r7, #12]
   94d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   94d1e:	2b00      	cmp	r3, #0
   94d20:	d007      	beq.n	94d32 <twi_master_write1+0xb2>
			iic_nack = true;
   94d22:	4b43      	ldr	r3, [pc, #268]	; (94e30 <twi_master_write1+0x1b0>)
   94d24:	2201      	movs	r2, #1
   94d26:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   94d28:	4b3c      	ldr	r3, [pc, #240]	; (94e1c <twi_master_write1+0x19c>)
   94d2a:	2200      	movs	r2, #0
   94d2c:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   94d2e:	2305      	movs	r3, #5
   94d30:	e06e      	b.n	94e10 <twi_master_write1+0x190>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   94d32:	68fb      	ldr	r3, [r7, #12]
   94d34:	f003 0304 	and.w	r3, r3, #4
   94d38:	2b00      	cmp	r3, #0
   94d3a:	d114      	bne.n	94d66 <twi_master_write1+0xe6>
			if(func_timer > 3)
   94d3c:	4b36      	ldr	r3, [pc, #216]	; (94e18 <twi_master_write1+0x198>)
   94d3e:	681b      	ldr	r3, [r3, #0]
   94d40:	2b03      	cmp	r3, #3
   94d42:	dd1a      	ble.n	94d7a <twi_master_write1+0xfa>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   94d44:	4b34      	ldr	r3, [pc, #208]	; (94e18 <twi_master_write1+0x198>)
   94d46:	2200      	movs	r2, #0
   94d48:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   94d4a:	687b      	ldr	r3, [r7, #4]
   94d4c:	2280      	movs	r2, #128	; 0x80
   94d4e:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   94d50:	4b39      	ldr	r3, [pc, #228]	; (94e38 <twi_master_write1+0x1b8>)
   94d52:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   94d54:	4933      	ldr	r1, [pc, #204]	; (94e24 <twi_master_write1+0x1a4>)
   94d56:	4834      	ldr	r0, [pc, #208]	; (94e28 <twi_master_write1+0x1a8>)
   94d58:	4b34      	ldr	r3, [pc, #208]	; (94e2c <twi_master_write1+0x1ac>)
   94d5a:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   94d5c:	4b2f      	ldr	r3, [pc, #188]	; (94e1c <twi_master_write1+0x19c>)
   94d5e:	2200      	movs	r2, #0
   94d60:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   94d62:	2308      	movs	r3, #8
   94d64:	e054      	b.n	94e10 <twi_master_write1+0x190>
			{
				continue;
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   94d66:	693b      	ldr	r3, [r7, #16]
   94d68:	1c5a      	adds	r2, r3, #1
   94d6a:	613a      	str	r2, [r7, #16]
   94d6c:	781b      	ldrb	r3, [r3, #0]
   94d6e:	461a      	mov	r2, r3
   94d70:	687b      	ldr	r3, [r7, #4]
   94d72:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   94d74:	697b      	ldr	r3, [r7, #20]
   94d76:	3b01      	subs	r3, #1
   94d78:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   94d7a:	697b      	ldr	r3, [r7, #20]
   94d7c:	2b00      	cmp	r3, #0
   94d7e:	d1c8      	bne.n	94d12 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   94d80:	687b      	ldr	r3, [r7, #4]
   94d82:	6a1b      	ldr	r3, [r3, #32]
   94d84:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   94d86:	68fb      	ldr	r3, [r7, #12]
   94d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
   94d8c:	2b00      	cmp	r3, #0
   94d8e:	d004      	beq.n	94d9a <twi_master_write1+0x11a>
			FUNC_ENTRY = 0;
   94d90:	4b22      	ldr	r3, [pc, #136]	; (94e1c <twi_master_write1+0x19c>)
   94d92:	2200      	movs	r2, #0
   94d94:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   94d96:	2305      	movs	r3, #5
   94d98:	e03a      	b.n	94e10 <twi_master_write1+0x190>
		}

		if (status & TWI_SR_TXRDY) {
   94d9a:	68fb      	ldr	r3, [r7, #12]
   94d9c:	f003 0304 	and.w	r3, r3, #4
   94da0:	2b00      	cmp	r3, #0
   94da2:	d111      	bne.n	94dc8 <twi_master_write1+0x148>
			break;
		}
		
		if(func_timer > 3)
   94da4:	4b1c      	ldr	r3, [pc, #112]	; (94e18 <twi_master_write1+0x198>)
   94da6:	681b      	ldr	r3, [r3, #0]
   94da8:	2b03      	cmp	r3, #3
   94daa:	dde9      	ble.n	94d80 <twi_master_write1+0x100>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   94dac:	687b      	ldr	r3, [r7, #4]
   94dae:	2280      	movs	r2, #128	; 0x80
   94db0:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   94db2:	4b21      	ldr	r3, [pc, #132]	; (94e38 <twi_master_write1+0x1b8>)
   94db4:	4798      	blx	r3
			FUNC_ENTRY = 0;
   94db6:	4b19      	ldr	r3, [pc, #100]	; (94e1c <twi_master_write1+0x19c>)
   94db8:	2200      	movs	r2, #0
   94dba:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   94dbc:	4919      	ldr	r1, [pc, #100]	; (94e24 <twi_master_write1+0x1a4>)
   94dbe:	481a      	ldr	r0, [pc, #104]	; (94e28 <twi_master_write1+0x1a8>)
   94dc0:	4b1a      	ldr	r3, [pc, #104]	; (94e2c <twi_master_write1+0x1ac>)
   94dc2:	4798      	blx	r3
			return(TWI_BUSY);
   94dc4:	2308      	movs	r3, #8
   94dc6:	e023      	b.n	94e10 <twi_master_write1+0x190>
			FUNC_ENTRY = 0;
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
   94dc8:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   94dca:	687b      	ldr	r3, [r7, #4]
   94dcc:	2202      	movs	r2, #2
   94dce:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   94dd0:	e014      	b.n	94dfc <twi_master_write1+0x17c>
					if(func_timer > 3)
   94dd2:	4b11      	ldr	r3, [pc, #68]	; (94e18 <twi_master_write1+0x198>)
   94dd4:	681b      	ldr	r3, [r3, #0]
   94dd6:	2b03      	cmp	r3, #3
   94dd8:	dd10      	ble.n	94dfc <twi_master_write1+0x17c>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   94dda:	4b0f      	ldr	r3, [pc, #60]	; (94e18 <twi_master_write1+0x198>)
   94ddc:	2200      	movs	r2, #0
   94dde:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   94de0:	4b15      	ldr	r3, [pc, #84]	; (94e38 <twi_master_write1+0x1b8>)
   94de2:	4798      	blx	r3
			FUNC_ENTRY = 0;
   94de4:	4b0d      	ldr	r3, [pc, #52]	; (94e1c <twi_master_write1+0x19c>)
   94de6:	2200      	movs	r2, #0
   94de8:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   94dea:	490e      	ldr	r1, [pc, #56]	; (94e24 <twi_master_write1+0x1a4>)
   94dec:	480e      	ldr	r0, [pc, #56]	; (94e28 <twi_master_write1+0x1a8>)
   94dee:	4b0f      	ldr	r3, [pc, #60]	; (94e2c <twi_master_write1+0x1ac>)
   94df0:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   94df2:	687b      	ldr	r3, [r7, #4]
   94df4:	2280      	movs	r2, #128	; 0x80
   94df6:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   94df8:	2308      	movs	r3, #8
   94dfa:	e009      	b.n	94e10 <twi_master_write1+0x190>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   94dfc:	687b      	ldr	r3, [r7, #4]
   94dfe:	6a1b      	ldr	r3, [r3, #32]
   94e00:	f003 0301 	and.w	r3, r3, #1
   94e04:	2b00      	cmp	r3, #0
   94e06:	d0e4      	beq.n	94dd2 <twi_master_write1+0x152>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   94e08:	4b04      	ldr	r3, [pc, #16]	; (94e1c <twi_master_write1+0x19c>)
   94e0a:	2200      	movs	r2, #0
   94e0c:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   94e0e:	2300      	movs	r3, #0
}
   94e10:	4618      	mov	r0, r3
   94e12:	3718      	adds	r7, #24
   94e14:	46bd      	mov	sp, r7
   94e16:	bd80      	pop	{r7, pc}
   94e18:	2007264c 	.word	0x2007264c
   94e1c:	20072700 	.word	0x20072700
   94e20:	0009926d 	.word	0x0009926d
   94e24:	20070a00 	.word	0x20070a00
   94e28:	4008c000 	.word	0x4008c000
   94e2c:	00094c21 	.word	0x00094c21
   94e30:	2007263d 	.word	0x2007263d
   94e34:	00094e3d 	.word	0x00094e3d
   94e38:	00094f55 	.word	0x00094f55

00094e3c <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   94e3c:	b480      	push	{r7}
   94e3e:	b085      	sub	sp, #20
   94e40:	af00      	add	r7, sp, #0
   94e42:	6078      	str	r0, [r7, #4]
   94e44:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   94e46:	683b      	ldr	r3, [r7, #0]
   94e48:	2b00      	cmp	r3, #0
   94e4a:	d101      	bne.n	94e50 <twi_mk_addr+0x14>
	return 0;
   94e4c:	2300      	movs	r3, #0
   94e4e:	e01d      	b.n	94e8c <twi_mk_addr+0x50>

	val = addr[0];
   94e50:	687b      	ldr	r3, [r7, #4]
   94e52:	781b      	ldrb	r3, [r3, #0]
   94e54:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   94e56:	683b      	ldr	r3, [r7, #0]
   94e58:	2b01      	cmp	r3, #1
   94e5a:	dd09      	ble.n	94e70 <twi_mk_addr+0x34>
		val <<= 8;
   94e5c:	68fb      	ldr	r3, [r7, #12]
   94e5e:	021b      	lsls	r3, r3, #8
   94e60:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   94e62:	687b      	ldr	r3, [r7, #4]
   94e64:	3301      	adds	r3, #1
   94e66:	781b      	ldrb	r3, [r3, #0]
   94e68:	461a      	mov	r2, r3
   94e6a:	68fb      	ldr	r3, [r7, #12]
   94e6c:	4313      	orrs	r3, r2
   94e6e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   94e70:	683b      	ldr	r3, [r7, #0]
   94e72:	2b02      	cmp	r3, #2
   94e74:	dd09      	ble.n	94e8a <twi_mk_addr+0x4e>
		val <<= 8;
   94e76:	68fb      	ldr	r3, [r7, #12]
   94e78:	021b      	lsls	r3, r3, #8
   94e7a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   94e7c:	687b      	ldr	r3, [r7, #4]
   94e7e:	3302      	adds	r3, #2
   94e80:	781b      	ldrb	r3, [r3, #0]
   94e82:	461a      	mov	r2, r3
   94e84:	68fb      	ldr	r3, [r7, #12]
   94e86:	4313      	orrs	r3, r2
   94e88:	60fb      	str	r3, [r7, #12]
	}
	return val;
   94e8a:	68fb      	ldr	r3, [r7, #12]
}
   94e8c:	4618      	mov	r0, r3
   94e8e:	3714      	adds	r7, #20
   94e90:	46bd      	mov	sp, r7
   94e92:	bc80      	pop	{r7}
   94e94:	4770      	bx	lr
   94e96:	bf00      	nop

00094e98 <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   94e98:	b580      	push	{r7, lr}
   94e9a:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   94e9c:	4b06      	ldr	r3, [pc, #24]	; (94eb8 <DD_INIT_IIC+0x20>)
   94e9e:	4a07      	ldr	r2, [pc, #28]	; (94ebc <DD_INIT_IIC+0x24>)
   94ea0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   94ea4:	4b04      	ldr	r3, [pc, #16]	; (94eb8 <DD_INIT_IIC+0x20>)
   94ea6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   94eaa:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   94eac:	4904      	ldr	r1, [pc, #16]	; (94ec0 <DD_INIT_IIC+0x28>)
   94eae:	4805      	ldr	r0, [pc, #20]	; (94ec4 <DD_INIT_IIC+0x2c>)
   94eb0:	4b05      	ldr	r3, [pc, #20]	; (94ec8 <DD_INIT_IIC+0x30>)
   94eb2:	4798      	blx	r3
		
			
	
}
   94eb4:	bf00      	nop
   94eb6:	bd80      	pop	{r7, pc}
   94eb8:	400e0e00 	.word	0x400e0e00
   94ebc:	50494f00 	.word	0x50494f00
   94ec0:	20070a00 	.word	0x20070a00
   94ec4:	4008c000 	.word	0x4008c000
   94ec8:	00094c21 	.word	0x00094c21

00094ecc <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   94ecc:	b580      	push	{r7, lr}
   94ece:	b088      	sub	sp, #32
   94ed0:	af00      	add	r7, sp, #0
   94ed2:	4603      	mov	r3, r0
   94ed4:	460a      	mov	r2, r1
   94ed6:	71fb      	strb	r3, [r7, #7]
   94ed8:	4613      	mov	r3, r2
   94eda:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   94edc:	4a1a      	ldr	r2, [pc, #104]	; (94f48 <DD_IIC_SET_POT+0x7c>)
   94ede:	f107 031c 	add.w	r3, r7, #28
   94ee2:	6810      	ldr	r0, [r2, #0]
   94ee4:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   94ee6:	f107 0308 	add.w	r3, r7, #8
   94eea:	2200      	movs	r2, #0
   94eec:	601a      	str	r2, [r3, #0]
   94eee:	605a      	str	r2, [r3, #4]
   94ef0:	609a      	str	r2, [r3, #8]
   94ef2:	60da      	str	r2, [r3, #12]
   94ef4:	611a      	str	r2, [r3, #16]
   94ef6:	f107 031c 	add.w	r3, r7, #28
   94efa:	613b      	str	r3, [r7, #16]
   94efc:	2304      	movs	r3, #4
   94efe:	617b      	str	r3, [r7, #20]
   94f00:	79fb      	ldrb	r3, [r7, #7]
   94f02:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   94f04:	88bb      	ldrh	r3, [r7, #4]
   94f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   94f0a:	d818      	bhi.n	94f3e <DD_IIC_SET_POT+0x72>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   94f0c:	88bb      	ldrh	r3, [r7, #4]
   94f0e:	b2db      	uxtb	r3, r3
   94f10:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   94f12:	88bb      	ldrh	r3, [r7, #4]
   94f14:	0a1b      	lsrs	r3, r3, #8
   94f16:	b29b      	uxth	r3, r3
   94f18:	b25b      	sxtb	r3, r3
   94f1a:	f003 0303 	and.w	r3, r3, #3
   94f1e:	b25b      	sxtb	r3, r3
   94f20:	f043 0304 	orr.w	r3, r3, #4
   94f24:	b25b      	sxtb	r3, r3
   94f26:	b2db      	uxtb	r3, r3
   94f28:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   94f2a:	f107 031c 	add.w	r3, r7, #28
   94f2e:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   94f30:	f107 0308 	add.w	r3, r7, #8
   94f34:	4619      	mov	r1, r3
   94f36:	4805      	ldr	r0, [pc, #20]	; (94f4c <DD_IIC_SET_POT+0x80>)
   94f38:	4b05      	ldr	r3, [pc, #20]	; (94f50 <DD_IIC_SET_POT+0x84>)
   94f3a:	4798      	blx	r3
   94f3c:	e000      	b.n	94f40 <DD_IIC_SET_POT+0x74>
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
		 {
			 return;
   94f3e:	bf00      	nop

			 iic_packet.buffer =  (void *)test_pattern_inc;
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
		 }

}
   94f40:	3720      	adds	r7, #32
   94f42:	46bd      	mov	sp, r7
   94f44:	bd80      	pop	{r7, pc}
   94f46:	bf00      	nop
   94f48:	000a5878 	.word	0x000a5878
   94f4c:	4008c000 	.word	0x4008c000
   94f50:	00094c81 	.word	0x00094c81

00094f54 <clock_it>:
			
}


void clock_it(void)
{
   94f54:	b480      	push	{r7}
   94f56:	af00      	add	r7, sp, #0
	return;
   94f58:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   94f5a:	46bd      	mov	sp, r7
   94f5c:	bc80      	pop	{r7}
   94f5e:	4770      	bx	lr

00094f60 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   94f60:	b480      	push	{r7}
   94f62:	b083      	sub	sp, #12
   94f64:	af00      	add	r7, sp, #0
   94f66:	4603      	mov	r3, r0
   94f68:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   94f6a:	4908      	ldr	r1, [pc, #32]	; (94f8c <NVIC_EnableIRQ+0x2c>)
   94f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94f70:	095b      	lsrs	r3, r3, #5
   94f72:	79fa      	ldrb	r2, [r7, #7]
   94f74:	f002 021f 	and.w	r2, r2, #31
   94f78:	2001      	movs	r0, #1
   94f7a:	fa00 f202 	lsl.w	r2, r0, r2
   94f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   94f82:	bf00      	nop
   94f84:	370c      	adds	r7, #12
   94f86:	46bd      	mov	sp, r7
   94f88:	bc80      	pop	{r7}
   94f8a:	4770      	bx	lr
   94f8c:	e000e100 	.word	0xe000e100

00094f90 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   94f90:	b480      	push	{r7}
   94f92:	b083      	sub	sp, #12
   94f94:	af00      	add	r7, sp, #0
   94f96:	4603      	mov	r3, r0
   94f98:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   94f9a:	4909      	ldr	r1, [pc, #36]	; (94fc0 <NVIC_DisableIRQ+0x30>)
   94f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94fa0:	095b      	lsrs	r3, r3, #5
   94fa2:	79fa      	ldrb	r2, [r7, #7]
   94fa4:	f002 021f 	and.w	r2, r2, #31
   94fa8:	2001      	movs	r0, #1
   94faa:	fa00 f202 	lsl.w	r2, r0, r2
   94fae:	3320      	adds	r3, #32
   94fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   94fb4:	bf00      	nop
   94fb6:	370c      	adds	r7, #12
   94fb8:	46bd      	mov	sp, r7
   94fba:	bc80      	pop	{r7}
   94fbc:	4770      	bx	lr
   94fbe:	bf00      	nop
   94fc0:	e000e100 	.word	0xe000e100

00094fc4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   94fc4:	b480      	push	{r7}
   94fc6:	b083      	sub	sp, #12
   94fc8:	af00      	add	r7, sp, #0
   94fca:	4603      	mov	r3, r0
   94fcc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   94fce:	4909      	ldr	r1, [pc, #36]	; (94ff4 <NVIC_ClearPendingIRQ+0x30>)
   94fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94fd4:	095b      	lsrs	r3, r3, #5
   94fd6:	79fa      	ldrb	r2, [r7, #7]
   94fd8:	f002 021f 	and.w	r2, r2, #31
   94fdc:	2001      	movs	r0, #1
   94fde:	fa00 f202 	lsl.w	r2, r0, r2
   94fe2:	3360      	adds	r3, #96	; 0x60
   94fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   94fe8:	bf00      	nop
   94fea:	370c      	adds	r7, #12
   94fec:	46bd      	mov	sp, r7
   94fee:	bc80      	pop	{r7}
   94ff0:	4770      	bx	lr
   94ff2:	bf00      	nop
   94ff4:	e000e100 	.word	0xe000e100

00094ff8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   94ff8:	b480      	push	{r7}
   94ffa:	b083      	sub	sp, #12
   94ffc:	af00      	add	r7, sp, #0
   94ffe:	4603      	mov	r3, r0
   95000:	6039      	str	r1, [r7, #0]
   95002:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   95004:	f997 3007 	ldrsb.w	r3, [r7, #7]
   95008:	2b00      	cmp	r3, #0
   9500a:	da0b      	bge.n	95024 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   9500c:	490d      	ldr	r1, [pc, #52]	; (95044 <NVIC_SetPriority+0x4c>)
   9500e:	79fb      	ldrb	r3, [r7, #7]
   95010:	f003 030f 	and.w	r3, r3, #15
   95014:	3b04      	subs	r3, #4
   95016:	683a      	ldr	r2, [r7, #0]
   95018:	b2d2      	uxtb	r2, r2
   9501a:	0112      	lsls	r2, r2, #4
   9501c:	b2d2      	uxtb	r2, r2
   9501e:	440b      	add	r3, r1
   95020:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   95022:	e009      	b.n	95038 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   95024:	4908      	ldr	r1, [pc, #32]	; (95048 <NVIC_SetPriority+0x50>)
   95026:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9502a:	683a      	ldr	r2, [r7, #0]
   9502c:	b2d2      	uxtb	r2, r2
   9502e:	0112      	lsls	r2, r2, #4
   95030:	b2d2      	uxtb	r2, r2
   95032:	440b      	add	r3, r1
   95034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   95038:	bf00      	nop
   9503a:	370c      	adds	r7, #12
   9503c:	46bd      	mov	sp, r7
   9503e:	bc80      	pop	{r7}
   95040:	4770      	bx	lr
   95042:	bf00      	nop
   95044:	e000ed00 	.word	0xe000ed00
   95048:	e000e100 	.word	0xe000e100

0009504c <DD_INIT_INT>:
 */ 

#include "DD_INT.h"

void DD_INIT_INT()
{
   9504c:	b580      	push	{r7, lr}
   9504e:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   95050:	2008      	movs	r0, #8
   95052:	4b2e      	ldr	r3, [pc, #184]	; (9510c <DD_INIT_INT+0xc0>)
   95054:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   95056:	2008      	movs	r0, #8
   95058:	4b2d      	ldr	r3, [pc, #180]	; (95110 <DD_INIT_INT+0xc4>)
   9505a:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   9505c:	2100      	movs	r1, #0
   9505e:	2008      	movs	r0, #8
   95060:	4b2c      	ldr	r3, [pc, #176]	; (95114 <DD_INIT_INT+0xc8>)
   95062:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   95064:	2008      	movs	r0, #8
   95066:	4b2c      	ldr	r3, [pc, #176]	; (95118 <DD_INIT_INT+0xcc>)
   95068:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   9506a:	2101      	movs	r1, #1
   9506c:	482b      	ldr	r0, [pc, #172]	; (9511c <DD_INIT_INT+0xd0>)
   9506e:	4b2c      	ldr	r3, [pc, #176]	; (95120 <DD_INIT_INT+0xd4>)
   95070:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   95072:	201b      	movs	r0, #27
   95074:	4b25      	ldr	r3, [pc, #148]	; (9510c <DD_INIT_INT+0xc0>)
   95076:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   95078:	201b      	movs	r0, #27
   9507a:	4b25      	ldr	r3, [pc, #148]	; (95110 <DD_INIT_INT+0xc4>)
   9507c:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   9507e:	2100      	movs	r1, #0
   95080:	201b      	movs	r0, #27
   95082:	4b24      	ldr	r3, [pc, #144]	; (95114 <DD_INIT_INT+0xc8>)
   95084:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   95086:	201b      	movs	r0, #27
   95088:	4b23      	ldr	r3, [pc, #140]	; (95118 <DD_INIT_INT+0xcc>)
   9508a:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   9508c:	201e      	movs	r0, #30
   9508e:	4b1f      	ldr	r3, [pc, #124]	; (9510c <DD_INIT_INT+0xc0>)
   95090:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   95092:	201e      	movs	r0, #30
   95094:	4b1e      	ldr	r3, [pc, #120]	; (95110 <DD_INIT_INT+0xc4>)
   95096:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   95098:	2100      	movs	r1, #0
   9509a:	201e      	movs	r0, #30
   9509c:	4b1d      	ldr	r3, [pc, #116]	; (95114 <DD_INIT_INT+0xc8>)
   9509e:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   950a0:	201e      	movs	r0, #30
   950a2:	4b1d      	ldr	r3, [pc, #116]	; (95118 <DD_INIT_INT+0xcc>)
   950a4:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   950a6:	2021      	movs	r0, #33	; 0x21
   950a8:	4b18      	ldr	r3, [pc, #96]	; (9510c <DD_INIT_INT+0xc0>)
   950aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   950ac:	2021      	movs	r0, #33	; 0x21
   950ae:	4b18      	ldr	r3, [pc, #96]	; (95110 <DD_INIT_INT+0xc4>)
   950b0:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   950b2:	2100      	movs	r1, #0
   950b4:	2021      	movs	r0, #33	; 0x21
   950b6:	4b17      	ldr	r3, [pc, #92]	; (95114 <DD_INIT_INT+0xc8>)
   950b8:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   950ba:	2021      	movs	r0, #33	; 0x21
   950bc:	4b16      	ldr	r3, [pc, #88]	; (95118 <DD_INIT_INT+0xcc>)
   950be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   950c0:	4b18      	ldr	r3, [pc, #96]	; (95124 <DD_INIT_INT+0xd8>)
   950c2:	f04f 32ff 	mov.w	r2, #4294967295
   950c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   950ca:	4b16      	ldr	r3, [pc, #88]	; (95124 <DD_INIT_INT+0xd8>)
   950cc:	f04f 32ff 	mov.w	r2, #4294967295
   950d0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   950d4:	2100      	movs	r1, #0
   950d6:	2021      	movs	r0, #33	; 0x21
   950d8:	4b0e      	ldr	r3, [pc, #56]	; (95114 <DD_INIT_INT+0xc8>)
   950da:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   950dc:	4b11      	ldr	r3, [pc, #68]	; (95124 <DD_INIT_INT+0xd8>)
   950de:	f04f 32ff 	mov.w	r2, #4294967295
   950e2:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   950e4:	4b0f      	ldr	r3, [pc, #60]	; (95124 <DD_INIT_INT+0xd8>)
   950e6:	f04f 32ff 	mov.w	r2, #4294967295
   950ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   950ee:	4b0d      	ldr	r3, [pc, #52]	; (95124 <DD_INIT_INT+0xd8>)
   950f0:	f04f 32ff 	mov.w	r2, #4294967295
   950f4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   950f8:	2100      	movs	r1, #0
   950fa:	201e      	movs	r0, #30
   950fc:	4b05      	ldr	r3, [pc, #20]	; (95114 <DD_INIT_INT+0xc8>)
   950fe:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   95100:	4b08      	ldr	r3, [pc, #32]	; (95124 <DD_INIT_INT+0xd8>)
   95102:	f04f 32ff 	mov.w	r2, #4294967295
   95106:	60da      	str	r2, [r3, #12]
   95108:	bf00      	nop
   9510a:	bd80      	pop	{r7, pc}
   9510c:	00094f91 	.word	0x00094f91
   95110:	00094fc5 	.word	0x00094fc5
   95114:	00094ff9 	.word	0x00094ff9
   95118:	00094f61 	.word	0x00094f61
   9511c:	400e0800 	.word	0x400e0800
   95120:	00098825 	.word	0x00098825
   95124:	e000e100 	.word	0xe000e100

00095128 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   95128:	b590      	push	{r4, r7, lr}
   9512a:	b0c7      	sub	sp, #284	; 0x11c
   9512c:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   9512e:	4b4b      	ldr	r3, [pc, #300]	; (9525c <DD_INIT_NVM+0x134>)
   95130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   95134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   95138:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   9513c:	2300      	movs	r3, #0
   9513e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   95142:	2106      	movs	r1, #6
   95144:	2000      	movs	r0, #0
   95146:	4b46      	ldr	r3, [pc, #280]	; (95260 <DD_INIT_NVM+0x138>)
   95148:	4798      	blx	r3
   9514a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   9514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   95152:	2b00      	cmp	r3, #0
   95154:	d176      	bne.n	95244 <DD_INIT_NVM+0x11c>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   95156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   9515a:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   9515e:	2300      	movs	r3, #0
   95160:	2200      	movs	r2, #0
   95162:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   95166:	4c3f      	ldr	r4, [pc, #252]	; (95264 <DD_INIT_NVM+0x13c>)
   95168:	47a0      	blx	r4
   9516a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   9516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   95172:	2b00      	cmp	r3, #0
   95174:	d168      	bne.n	95248 <DD_INIT_NVM+0x120>
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   95176:	2300      	movs	r3, #0
   95178:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9517c:	e010      	b.n	951a0 <DD_INIT_NVM+0x78>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   9517e:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   95182:	463b      	mov	r3, r7
   95184:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   95188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   9518c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   95190:	3301      	adds	r3, #1
   95192:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   95196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9519a:	3301      	adds	r3, #1
   9519c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   951a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   951a4:	2b3f      	cmp	r3, #63	; 0x3f
   951a6:	d9ea      	bls.n	9517e <DD_INIT_NVM+0x56>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   951a8:	2300      	movs	r3, #0
   951aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   951ae:	e012      	b.n	951d6 <DD_INIT_NVM+0xae>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   951b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   951b4:	009b      	lsls	r3, r3, #2
   951b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   951ba:	4413      	add	r3, r2
   951bc:	681a      	ldr	r2, [r3, #0]
   951be:	463b      	mov	r3, r7
   951c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   951c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   951c8:	429a      	cmp	r2, r3
   951ca:	d13f      	bne.n	9524c <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   951cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   951d0:	3301      	adds	r3, #1
   951d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   951d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   951da:	2b3f      	cmp	r3, #63	; 0x3f
   951dc:	d9e8      	bls.n	951b0 <DD_INIT_NVM+0x88>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   951de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   951e2:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   951e6:	2300      	movs	r3, #0
   951e8:	2200      	movs	r2, #0
   951ea:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   951ee:	4c1e      	ldr	r4, [pc, #120]	; (95268 <DD_INIT_NVM+0x140>)
   951f0:	47a0      	blx	r4
   951f2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   951f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   951fa:	2b00      	cmp	r3, #0
   951fc:	d128      	bne.n	95250 <DD_INIT_NVM+0x128>
			return 0;
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   951fe:	4639      	mov	r1, r7
   95200:	2301      	movs	r3, #1
   95202:	f44f 7280 	mov.w	r2, #256	; 0x100
   95206:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   9520a:	4c18      	ldr	r4, [pc, #96]	; (9526c <DD_INIT_NVM+0x144>)
   9520c:	47a0      	blx	r4
   9520e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   95212:	bf00      	nop
   95214:	f207 1303 	addw	r3, r7, #259	; 0x103
   95218:	4619      	mov	r1, r3
   9521a:	4815      	ldr	r0, [pc, #84]	; (95270 <DD_INIT_NVM+0x148>)
   9521c:	4b15      	ldr	r3, [pc, #84]	; (95274 <DD_INIT_NVM+0x14c>)
   9521e:	4798      	blx	r3
   95220:	4603      	mov	r3, r0
   95222:	2b00      	cmp	r3, #0
   95224:	d1f6      	bne.n	95214 <DD_INIT_NVM+0xec>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   95226:	bf00      	nop
   95228:	f207 1303 	addw	r3, r7, #259	; 0x103
   9522c:	4619      	mov	r1, r3
   9522e:	4810      	ldr	r0, [pc, #64]	; (95270 <DD_INIT_NVM+0x148>)
   95230:	4b10      	ldr	r3, [pc, #64]	; (95274 <DD_INIT_NVM+0x14c>)
   95232:	4798      	blx	r3
   95234:	4603      	mov	r3, r0
   95236:	2b00      	cmp	r3, #0
   95238:	d1f6      	bne.n	95228 <DD_INIT_NVM+0x100>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   9523a:	4b0f      	ldr	r3, [pc, #60]	; (95278 <DD_INIT_NVM+0x150>)
   9523c:	4798      	blx	r3
   9523e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   95242:	e006      	b.n	95252 <DD_INIT_NVM+0x12a>
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
	if (ul_rc != FLASH_RC_OK)
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   95244:	bf00      	nop
   95246:	e004      	b.n	95252 <DD_INIT_NVM+0x12a>
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   95248:	bf00      	nop
   9524a:	e002      	b.n	95252 <DD_INIT_NVM+0x12a>
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			//printf("\n\r-F- data error\n\r");
			return 0;
   9524c:	bf00      	nop
   9524e:	e000      	b.n	95252 <DD_INIT_NVM+0x12a>
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   95250:	bf00      	nop

		//printf("-I- All tests done\n\r");



}
   95252:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   95256:	46bd      	mov	sp, r7
   95258:	bd90      	pop	{r4, r7, pc}
   9525a:	bf00      	nop
   9525c:	000fff00 	.word	0x000fff00
   95260:	00080965 	.word	0x00080965
   95264:	00080b89 	.word	0x00080b89
   95268:	00080aed 	.word	0x00080aed
   9526c:	00080999 	.word	0x00080999
   95270:	400e0800 	.word	0x400e0800
   95274:	00098885 	.word	0x00098885
   95278:	00080ccd 	.word	0x00080ccd

0009527c <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   9527c:	b480      	push	{r7}
   9527e:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   95280:	4b2b      	ldr	r3, [pc, #172]	; (95330 <DD_INIT_PWM+0xb4>)
   95282:	4a2c      	ldr	r2, [pc, #176]	; (95334 <DD_INIT_PWM+0xb8>)
   95284:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   95288:	4b29      	ldr	r3, [pc, #164]	; (95330 <DD_INIT_PWM+0xb4>)
   9528a:	4a2b      	ldr	r2, [pc, #172]	; (95338 <DD_INIT_PWM+0xbc>)
   9528c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   95290:	4b27      	ldr	r3, [pc, #156]	; (95330 <DD_INIT_PWM+0xb4>)
   95292:	4a29      	ldr	r2, [pc, #164]	; (95338 <DD_INIT_PWM+0xbc>)
   95294:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   95298:	4b25      	ldr	r3, [pc, #148]	; (95330 <DD_INIT_PWM+0xb4>)
   9529a:	4a27      	ldr	r2, [pc, #156]	; (95338 <DD_INIT_PWM+0xbc>)
   9529c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   952a0:	4b23      	ldr	r3, [pc, #140]	; (95330 <DD_INIT_PWM+0xb4>)
   952a2:	4a26      	ldr	r2, [pc, #152]	; (9533c <DD_INIT_PWM+0xc0>)
   952a4:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   952a8:	4b21      	ldr	r3, [pc, #132]	; (95330 <DD_INIT_PWM+0xb4>)
   952aa:	22ff      	movs	r2, #255	; 0xff
   952ac:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   952ae:	4b20      	ldr	r3, [pc, #128]	; (95330 <DD_INIT_PWM+0xb4>)
   952b0:	f640 2206 	movw	r2, #2566	; 0xa06
   952b4:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   952b6:	4b1e      	ldr	r3, [pc, #120]	; (95330 <DD_INIT_PWM+0xb4>)
   952b8:	220b      	movs	r2, #11
   952ba:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   952be:	4b1c      	ldr	r3, [pc, #112]	; (95330 <DD_INIT_PWM+0xb4>)
   952c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   952c4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   952c8:	4b19      	ldr	r3, [pc, #100]	; (95330 <DD_INIT_PWM+0xb4>)
   952ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   952ce:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   952d2:	4b17      	ldr	r3, [pc, #92]	; (95330 <DD_INIT_PWM+0xb4>)
   952d4:	f646 5260 	movw	r2, #28000	; 0x6d60
   952d8:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   952dc:	4b14      	ldr	r3, [pc, #80]	; (95330 <DD_INIT_PWM+0xb4>)
   952de:	f640 325a 	movw	r2, #2906	; 0xb5a
   952e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   952e6:	4b12      	ldr	r3, [pc, #72]	; (95330 <DD_INIT_PWM+0xb4>)
   952e8:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   952ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   952f0:	4b0f      	ldr	r3, [pc, #60]	; (95330 <DD_INIT_PWM+0xb4>)
   952f2:	f44f 7248 	mov.w	r2, #800	; 0x320
   952f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   952fa:	4b0d      	ldr	r3, [pc, #52]	; (95330 <DD_INIT_PWM+0xb4>)
   952fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   95300:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   95304:	4b0a      	ldr	r3, [pc, #40]	; (95330 <DD_INIT_PWM+0xb4>)
   95306:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9530a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   9530e:	4b08      	ldr	r3, [pc, #32]	; (95330 <DD_INIT_PWM+0xb4>)
   95310:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   95314:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   95318:	4b05      	ldr	r3, [pc, #20]	; (95330 <DD_INIT_PWM+0xb4>)
   9531a:	f44f 7248 	mov.w	r2, #800	; 0x320
   9531e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   95322:	4b03      	ldr	r3, [pc, #12]	; (95330 <DD_INIT_PWM+0xb4>)
   95324:	2237      	movs	r2, #55	; 0x37
   95326:	605a      	str	r2, [r3, #4]


	
	
}
   95328:	bf00      	nop
   9532a:	46bd      	mov	sp, r7
   9532c:	bc80      	pop	{r7}
   9532e:	4770      	bx	lr
   95330:	40094000 	.word	0x40094000
   95334:	50574d00 	.word	0x50574d00
   95338:	00070605 	.word	0x00070605
   9533c:	00070604 	.word	0x00070604

00095340 <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   95340:	b480      	push	{r7}
   95342:	b083      	sub	sp, #12
   95344:	af00      	add	r7, sp, #0
   95346:	4603      	mov	r3, r0
   95348:	6039      	str	r1, [r7, #0]
   9534a:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   9534c:	4a06      	ldr	r2, [pc, #24]	; (95368 <DD_SET_DUTY+0x28>)
   9534e:	79fb      	ldrb	r3, [r7, #7]
   95350:	3310      	adds	r3, #16
   95352:	015b      	lsls	r3, r3, #5
   95354:	4413      	add	r3, r2
   95356:	3304      	adds	r3, #4
   95358:	683a      	ldr	r2, [r7, #0]
   9535a:	601a      	str	r2, [r3, #0]
	 
	 return 0;
   9535c:	2300      	movs	r3, #0
 }
   9535e:	4618      	mov	r0, r3
   95360:	370c      	adds	r7, #12
   95362:	46bd      	mov	sp, r7
   95364:	bc80      	pop	{r7}
   95366:	4770      	bx	lr
   95368:	40094000 	.word	0x40094000

0009536c <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   9536c:	b480      	push	{r7}
   9536e:	b083      	sub	sp, #12
   95370:	af00      	add	r7, sp, #0
   95372:	4603      	mov	r3, r0
   95374:	6039      	str	r1, [r7, #0]
   95376:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   95378:	4a06      	ldr	r2, [pc, #24]	; (95394 <DD_SET_PRDY+0x28>)
   9537a:	79fb      	ldrb	r3, [r7, #7]
   9537c:	015b      	lsls	r3, r3, #5
   9537e:	4413      	add	r3, r2
   95380:	f503 7304 	add.w	r3, r3, #528	; 0x210
   95384:	683a      	ldr	r2, [r7, #0]
   95386:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   95388:	2300      	movs	r3, #0
 }
   9538a:	4618      	mov	r0, r3
   9538c:	370c      	adds	r7, #12
   9538e:	46bd      	mov	sp, r7
   95390:	bc80      	pop	{r7}
   95392:	4770      	bx	lr
   95394:	40094000 	.word	0x40094000

00095398 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   95398:	b490      	push	{r4, r7}
   9539a:	b082      	sub	sp, #8
   9539c:	af00      	add	r7, sp, #0
   9539e:	4603      	mov	r3, r0
   953a0:	80fb      	strh	r3, [r7, #6]
   953a2:	460b      	mov	r3, r1
   953a4:	717b      	strb	r3, [r7, #5]
   953a6:	4613      	mov	r3, r2
   953a8:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   953aa:	4911      	ldr	r1, [pc, #68]	; (953f0 <dd_spi_set_transfer_delay+0x58>)
   953ac:	88fb      	ldrh	r3, [r7, #6]
   953ae:	4810      	ldr	r0, [pc, #64]	; (953f0 <dd_spi_set_transfer_delay+0x58>)
   953b0:	88fa      	ldrh	r2, [r7, #6]
   953b2:	320c      	adds	r2, #12
   953b4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   953b8:	b292      	uxth	r2, r2
   953ba:	330c      	adds	r3, #12
   953bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   953c0:	4c0b      	ldr	r4, [pc, #44]	; (953f0 <dd_spi_set_transfer_delay+0x58>)
   953c2:	88fb      	ldrh	r3, [r7, #6]
   953c4:	490a      	ldr	r1, [pc, #40]	; (953f0 <dd_spi_set_transfer_delay+0x58>)
   953c6:	88fa      	ldrh	r2, [r7, #6]
   953c8:	320c      	adds	r2, #12
   953ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   953ce:	797a      	ldrb	r2, [r7, #5]
   953d0:	0412      	lsls	r2, r2, #16
   953d2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   953d6:	7938      	ldrb	r0, [r7, #4]
   953d8:	0600      	lsls	r0, r0, #24
   953da:	4302      	orrs	r2, r0
   953dc:	430a      	orrs	r2, r1
   953de:	330c      	adds	r3, #12
   953e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   953e4:	bf00      	nop
   953e6:	3708      	adds	r7, #8
   953e8:	46bd      	mov	sp, r7
   953ea:	bc90      	pop	{r4, r7}
   953ec:	4770      	bx	lr
   953ee:	bf00      	nop
   953f0:	40008000 	.word	0x40008000

000953f4 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   953f4:	b480      	push	{r7}
   953f6:	b083      	sub	sp, #12
   953f8:	af00      	add	r7, sp, #0
   953fa:	4603      	mov	r3, r0
   953fc:	6039      	str	r1, [r7, #0]
   953fe:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   95400:	490e      	ldr	r1, [pc, #56]	; (9543c <dd_spi_set_bits_per_transfer+0x48>)
   95402:	88fb      	ldrh	r3, [r7, #6]
   95404:	480d      	ldr	r0, [pc, #52]	; (9543c <dd_spi_set_bits_per_transfer+0x48>)
   95406:	88fa      	ldrh	r2, [r7, #6]
   95408:	320c      	adds	r2, #12
   9540a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9540e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   95412:	330c      	adds	r3, #12
   95414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   95418:	4808      	ldr	r0, [pc, #32]	; (9543c <dd_spi_set_bits_per_transfer+0x48>)
   9541a:	88fb      	ldrh	r3, [r7, #6]
   9541c:	4907      	ldr	r1, [pc, #28]	; (9543c <dd_spi_set_bits_per_transfer+0x48>)
   9541e:	88fa      	ldrh	r2, [r7, #6]
   95420:	320c      	adds	r2, #12
   95422:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   95426:	683a      	ldr	r2, [r7, #0]
   95428:	430a      	orrs	r2, r1
   9542a:	330c      	adds	r3, #12
   9542c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   95430:	bf00      	nop
   95432:	370c      	adds	r7, #12
   95434:	46bd      	mov	sp, r7
   95436:	bc80      	pop	{r7}
   95438:	4770      	bx	lr
   9543a:	bf00      	nop
   9543c:	40008000 	.word	0x40008000

00095440 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   95440:	b480      	push	{r7}
   95442:	b083      	sub	sp, #12
   95444:	af00      	add	r7, sp, #0
   95446:	4603      	mov	r3, r0
   95448:	6039      	str	r1, [r7, #0]
   9544a:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   9544c:	683b      	ldr	r3, [r7, #0]
   9544e:	2b00      	cmp	r3, #0
   95450:	d00c      	beq.n	9546c <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   95452:	490f      	ldr	r1, [pc, #60]	; (95490 <dd_spi_set_clock_polarity+0x50>)
   95454:	88fb      	ldrh	r3, [r7, #6]
   95456:	480e      	ldr	r0, [pc, #56]	; (95490 <dd_spi_set_clock_polarity+0x50>)
   95458:	88fa      	ldrh	r2, [r7, #6]
   9545a:	320c      	adds	r2, #12
   9545c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   95460:	f042 0201 	orr.w	r2, r2, #1
   95464:	330c      	adds	r3, #12
   95466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   9546a:	e00b      	b.n	95484 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   9546c:	4908      	ldr	r1, [pc, #32]	; (95490 <dd_spi_set_clock_polarity+0x50>)
   9546e:	88fb      	ldrh	r3, [r7, #6]
   95470:	4807      	ldr	r0, [pc, #28]	; (95490 <dd_spi_set_clock_polarity+0x50>)
   95472:	88fa      	ldrh	r2, [r7, #6]
   95474:	320c      	adds	r2, #12
   95476:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9547a:	f022 0201 	bic.w	r2, r2, #1
   9547e:	330c      	adds	r3, #12
   95480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   95484:	bf00      	nop
   95486:	370c      	adds	r7, #12
   95488:	46bd      	mov	sp, r7
   9548a:	bc80      	pop	{r7}
   9548c:	4770      	bx	lr
   9548e:	bf00      	nop
   95490:	40008000 	.word	0x40008000

00095494 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   95494:	b480      	push	{r7}
   95496:	b083      	sub	sp, #12
   95498:	af00      	add	r7, sp, #0
   9549a:	4603      	mov	r3, r0
   9549c:	6039      	str	r1, [r7, #0]
   9549e:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   954a0:	683b      	ldr	r3, [r7, #0]
   954a2:	2b00      	cmp	r3, #0
   954a4:	d00c      	beq.n	954c0 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   954a6:	490f      	ldr	r1, [pc, #60]	; (954e4 <dd_spi_set_clock_phase+0x50>)
   954a8:	88fb      	ldrh	r3, [r7, #6]
   954aa:	480e      	ldr	r0, [pc, #56]	; (954e4 <dd_spi_set_clock_phase+0x50>)
   954ac:	88fa      	ldrh	r2, [r7, #6]
   954ae:	320c      	adds	r2, #12
   954b0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   954b4:	f042 0202 	orr.w	r2, r2, #2
   954b8:	330c      	adds	r3, #12
   954ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   954be:	e00b      	b.n	954d8 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   954c0:	4908      	ldr	r1, [pc, #32]	; (954e4 <dd_spi_set_clock_phase+0x50>)
   954c2:	88fb      	ldrh	r3, [r7, #6]
   954c4:	4807      	ldr	r0, [pc, #28]	; (954e4 <dd_spi_set_clock_phase+0x50>)
   954c6:	88fa      	ldrh	r2, [r7, #6]
   954c8:	320c      	adds	r2, #12
   954ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   954ce:	f022 0202 	bic.w	r2, r2, #2
   954d2:	330c      	adds	r3, #12
   954d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   954d8:	bf00      	nop
   954da:	370c      	adds	r7, #12
   954dc:	46bd      	mov	sp, r7
   954de:	bc80      	pop	{r7}
   954e0:	4770      	bx	lr
   954e2:	bf00      	nop
   954e4:	40008000 	.word	0x40008000

000954e8 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   954e8:	b480      	push	{r7}
   954ea:	b083      	sub	sp, #12
   954ec:	af00      	add	r7, sp, #0
   954ee:	4603      	mov	r3, r0
   954f0:	460a      	mov	r2, r1
   954f2:	80fb      	strh	r3, [r7, #6]
   954f4:	4613      	mov	r3, r2
   954f6:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   954f8:	797b      	ldrb	r3, [r7, #5]
   954fa:	2b00      	cmp	r3, #0
   954fc:	d102      	bne.n	95504 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   954fe:	f04f 33ff 	mov.w	r3, #4294967295
   95502:	e01a      	b.n	9553a <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   95504:	490f      	ldr	r1, [pc, #60]	; (95544 <dd_spi_set_baudrate_div+0x5c>)
   95506:	88fb      	ldrh	r3, [r7, #6]
   95508:	480e      	ldr	r0, [pc, #56]	; (95544 <dd_spi_set_baudrate_div+0x5c>)
   9550a:	88fa      	ldrh	r2, [r7, #6]
   9550c:	320c      	adds	r2, #12
   9550e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   95512:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   95516:	330c      	adds	r3, #12
   95518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   9551c:	4809      	ldr	r0, [pc, #36]	; (95544 <dd_spi_set_baudrate_div+0x5c>)
   9551e:	88fb      	ldrh	r3, [r7, #6]
   95520:	4908      	ldr	r1, [pc, #32]	; (95544 <dd_spi_set_baudrate_div+0x5c>)
   95522:	88fa      	ldrh	r2, [r7, #6]
   95524:	320c      	adds	r2, #12
   95526:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   9552a:	797a      	ldrb	r2, [r7, #5]
   9552c:	0212      	lsls	r2, r2, #8
   9552e:	b292      	uxth	r2, r2
   95530:	430a      	orrs	r2, r1
   95532:	330c      	adds	r3, #12
   95534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   95538:	2300      	movs	r3, #0
}
   9553a:	4618      	mov	r0, r3
   9553c:	370c      	adds	r7, #12
   9553e:	46bd      	mov	sp, r7
   95540:	bc80      	pop	{r7}
   95542:	4770      	bx	lr
   95544:	40008000 	.word	0x40008000

00095548 <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   95548:	b580      	push	{r7, lr}
   9554a:	b086      	sub	sp, #24
   9554c:	af00      	add	r7, sp, #0
   9554e:	6078      	str	r0, [r7, #4]
   95550:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   95552:	687b      	ldr	r3, [r7, #4]
   95554:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   95556:	2300      	movs	r3, #0
   95558:	617b      	str	r3, [r7, #20]
   9555a:	e029      	b.n	955b0 <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   9555c:	697b      	ldr	r3, [r7, #20]
   9555e:	005b      	lsls	r3, r3, #1
   95560:	68fa      	ldr	r2, [r7, #12]
   95562:	4413      	add	r3, r2
   95564:	881b      	ldrh	r3, [r3, #0]
   95566:	4618      	mov	r0, r3
   95568:	4b15      	ldr	r3, [pc, #84]	; (955c0 <DD_SPI_SET_POT+0x78>)
   9556a:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   9556c:	2300      	movs	r3, #0
   9556e:	613b      	str	r3, [r7, #16]
   95570:	e002      	b.n	95578 <DD_SPI_SET_POT+0x30>
   95572:	693b      	ldr	r3, [r7, #16]
   95574:	3301      	adds	r3, #1
   95576:	613b      	str	r3, [r7, #16]
   95578:	693b      	ldr	r3, [r7, #16]
   9557a:	f242 720f 	movw	r2, #9999	; 0x270f
   9557e:	4293      	cmp	r3, r2
   95580:	d9f7      	bls.n	95572 <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   95582:	bf00      	nop
   95584:	4b0f      	ldr	r3, [pc, #60]	; (955c4 <DD_SPI_SET_POT+0x7c>)
   95586:	691b      	ldr	r3, [r3, #16]
   95588:	f003 0301 	and.w	r3, r3, #1
   9558c:	2b00      	cmp	r3, #0
   9558e:	d0f9      	beq.n	95584 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   95590:	f107 030b 	add.w	r3, r7, #11
   95594:	4619      	mov	r1, r3
   95596:	480c      	ldr	r0, [pc, #48]	; (955c8 <DD_SPI_SET_POT+0x80>)
   95598:	4b0c      	ldr	r3, [pc, #48]	; (955cc <DD_SPI_SET_POT+0x84>)
   9559a:	4798      	blx	r3
		p_buffer[i] = data;
   9559c:	697b      	ldr	r3, [r7, #20]
   9559e:	005b      	lsls	r3, r3, #1
   955a0:	68fa      	ldr	r2, [r7, #12]
   955a2:	4413      	add	r3, r2
   955a4:	4a08      	ldr	r2, [pc, #32]	; (955c8 <DD_SPI_SET_POT+0x80>)
   955a6:	8812      	ldrh	r2, [r2, #0]
   955a8:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   955aa:	697b      	ldr	r3, [r7, #20]
   955ac:	3301      	adds	r3, #1
   955ae:	617b      	str	r3, [r7, #20]
   955b0:	697a      	ldr	r2, [r7, #20]
   955b2:	683b      	ldr	r3, [r7, #0]
   955b4:	429a      	cmp	r2, r3
   955b6:	d3d1      	bcc.n	9555c <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   955b8:	bf00      	nop
   955ba:	3718      	adds	r7, #24
   955bc:	46bd      	mov	sp, r7
   955be:	bd80      	pop	{r7, pc}
   955c0:	00095641 	.word	0x00095641
   955c4:	40008000 	.word	0x40008000
   955c8:	20072706 	.word	0x20072706
   955cc:	000955d1 	.word	0x000955d1

000955d0 <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   955d0:	b480      	push	{r7}
   955d2:	b085      	sub	sp, #20
   955d4:	af00      	add	r7, sp, #0
   955d6:	6078      	str	r0, [r7, #4]
   955d8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   955da:	f643 2398 	movw	r3, #15000	; 0x3a98
   955de:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   955e0:	e006      	b.n	955f0 <dd_spi_read+0x20>
		if (!timeout--) {
   955e2:	68fb      	ldr	r3, [r7, #12]
   955e4:	1e5a      	subs	r2, r3, #1
   955e6:	60fa      	str	r2, [r7, #12]
   955e8:	2b00      	cmp	r3, #0
   955ea:	d101      	bne.n	955f0 <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   955ec:	2301      	movs	r3, #1
   955ee:	e01e      	b.n	9562e <dd_spi_read+0x5e>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   955f0:	4b11      	ldr	r3, [pc, #68]	; (95638 <dd_spi_read+0x68>)
   955f2:	691b      	ldr	r3, [r3, #16]
   955f4:	f003 0301 	and.w	r3, r3, #1
   955f8:	2b00      	cmp	r3, #0
   955fa:	d0f2      	beq.n	955e2 <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   955fc:	4b0e      	ldr	r3, [pc, #56]	; (95638 <dd_spi_read+0x68>)
   955fe:	689b      	ldr	r3, [r3, #8]
   95600:	4a0e      	ldr	r2, [pc, #56]	; (9563c <dd_spi_read+0x6c>)
   95602:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   95604:	4b0c      	ldr	r3, [pc, #48]	; (95638 <dd_spi_read+0x68>)
   95606:	685b      	ldr	r3, [r3, #4]
   95608:	f003 0302 	and.w	r3, r3, #2
   9560c:	2b00      	cmp	r3, #0
   9560e:	d008      	beq.n	95622 <dd_spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   95610:	4b0a      	ldr	r3, [pc, #40]	; (9563c <dd_spi_read+0x6c>)
   95612:	681b      	ldr	r3, [r3, #0]
   95614:	0c1b      	lsrs	r3, r3, #16
   95616:	b2db      	uxtb	r3, r3
   95618:	f003 030f 	and.w	r3, r3, #15
   9561c:	b2da      	uxtb	r2, r3
   9561e:	683b      	ldr	r3, [r7, #0]
   95620:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   95622:	4b06      	ldr	r3, [pc, #24]	; (9563c <dd_spi_read+0x6c>)
   95624:	681b      	ldr	r3, [r3, #0]
   95626:	b29a      	uxth	r2, r3
   95628:	687b      	ldr	r3, [r7, #4]
   9562a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   9562c:	2300      	movs	r3, #0
}
   9562e:	4618      	mov	r0, r3
   95630:	3714      	adds	r7, #20
   95632:	46bd      	mov	sp, r7
   95634:	bc80      	pop	{r7}
   95636:	4770      	bx	lr
   95638:	40008000 	.word	0x40008000
   9563c:	20072708 	.word	0x20072708

00095640 <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   95640:	b480      	push	{r7}
   95642:	b085      	sub	sp, #20
   95644:	af00      	add	r7, sp, #0
   95646:	4603      	mov	r3, r0
   95648:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   9564a:	f643 2398 	movw	r3, #15000	; 0x3a98
   9564e:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   95650:	e006      	b.n	95660 <dd_spi_write+0x20>
		if (!timeout--) {
   95652:	68fb      	ldr	r3, [r7, #12]
   95654:	1e5a      	subs	r2, r3, #1
   95656:	60fa      	str	r2, [r7, #12]
   95658:	2b00      	cmp	r3, #0
   9565a:	d101      	bne.n	95660 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   9565c:	2301      	movs	r3, #1
   9565e:	e00b      	b.n	95678 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   95660:	4b08      	ldr	r3, [pc, #32]	; (95684 <dd_spi_write+0x44>)
   95662:	691b      	ldr	r3, [r3, #16]
   95664:	f003 0302 	and.w	r3, r3, #2
   95668:	2b00      	cmp	r3, #0
   9566a:	d0f2      	beq.n	95652 <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   9566c:	88fb      	ldrh	r3, [r7, #6]
   9566e:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   95670:	4a04      	ldr	r2, [pc, #16]	; (95684 <dd_spi_write+0x44>)
   95672:	68bb      	ldr	r3, [r7, #8]
   95674:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   95676:	2300      	movs	r3, #0
}
   95678:	4618      	mov	r0, r3
   9567a:	3714      	adds	r7, #20
   9567c:	46bd      	mov	sp, r7
   9567e:	bc80      	pop	{r7}
   95680:	4770      	bx	lr
   95682:	bf00      	nop
   95684:	40008000 	.word	0x40008000

00095688 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   95688:	b580      	push	{r7, lr}
   9568a:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   9568c:	4b38      	ldr	r3, [pc, #224]	; (95770 <DD_INIT_SPI+0xe8>)
   9568e:	4a39      	ldr	r2, [pc, #228]	; (95774 <DD_INIT_SPI+0xec>)
   95690:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   95694:	4b36      	ldr	r3, [pc, #216]	; (95770 <DD_INIT_SPI+0xe8>)
   95696:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   9569a:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   9569c:	4b36      	ldr	r3, [pc, #216]	; (95778 <DD_INIT_SPI+0xf0>)
   9569e:	4a37      	ldr	r2, [pc, #220]	; (9577c <DD_INIT_SPI+0xf4>)
   956a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   956a4:	4b36      	ldr	r3, [pc, #216]	; (95780 <DD_INIT_SPI+0xf8>)
   956a6:	4a37      	ldr	r2, [pc, #220]	; (95784 <DD_INIT_SPI+0xfc>)
   956a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   956ac:	4832      	ldr	r0, [pc, #200]	; (95778 <DD_INIT_SPI+0xf0>)
   956ae:	4b36      	ldr	r3, [pc, #216]	; (95788 <DD_INIT_SPI+0x100>)
   956b0:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   956b2:	4b31      	ldr	r3, [pc, #196]	; (95778 <DD_INIT_SPI+0xf0>)
   956b4:	2202      	movs	r2, #2
   956b6:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   956b8:	4b2f      	ldr	r3, [pc, #188]	; (95778 <DD_INIT_SPI+0xf0>)
   956ba:	2280      	movs	r2, #128	; 0x80
   956bc:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   956be:	4b2e      	ldr	r3, [pc, #184]	; (95778 <DD_INIT_SPI+0xf0>)
   956c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   956c4:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   956c6:	4a2c      	ldr	r2, [pc, #176]	; (95778 <DD_INIT_SPI+0xf0>)
   956c8:	4b2b      	ldr	r3, [pc, #172]	; (95778 <DD_INIT_SPI+0xf0>)
   956ca:	685b      	ldr	r3, [r3, #4]
   956cc:	f043 0301 	orr.w	r3, r3, #1
   956d0:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   956d2:	4a29      	ldr	r2, [pc, #164]	; (95778 <DD_INIT_SPI+0xf0>)
   956d4:	4b28      	ldr	r3, [pc, #160]	; (95778 <DD_INIT_SPI+0xf0>)
   956d6:	685b      	ldr	r3, [r3, #4]
   956d8:	f043 0310 	orr.w	r3, r3, #16
   956dc:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   956de:	4a26      	ldr	r2, [pc, #152]	; (95778 <DD_INIT_SPI+0xf0>)
   956e0:	4b25      	ldr	r3, [pc, #148]	; (95778 <DD_INIT_SPI+0xf0>)
   956e2:	685b      	ldr	r3, [r3, #4]
   956e4:	f023 0302 	bic.w	r3, r3, #2
   956e8:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   956ea:	4a23      	ldr	r2, [pc, #140]	; (95778 <DD_INIT_SPI+0xf0>)
   956ec:	4b22      	ldr	r3, [pc, #136]	; (95778 <DD_INIT_SPI+0xf0>)
   956ee:	685b      	ldr	r3, [r3, #4]
   956f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   956f4:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   956f6:	4a20      	ldr	r2, [pc, #128]	; (95778 <DD_INIT_SPI+0xf0>)
   956f8:	4b1f      	ldr	r3, [pc, #124]	; (95778 <DD_INIT_SPI+0xf0>)
   956fa:	685b      	ldr	r3, [r3, #4]
   956fc:	f023 0304 	bic.w	r3, r3, #4
   95700:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   95702:	491d      	ldr	r1, [pc, #116]	; (95778 <DD_INIT_SPI+0xf0>)
   95704:	4b1c      	ldr	r3, [pc, #112]	; (95778 <DD_INIT_SPI+0xf0>)
   95706:	685a      	ldr	r2, [r3, #4]
   95708:	4b20      	ldr	r3, [pc, #128]	; (9578c <DD_INIT_SPI+0x104>)
   9570a:	781b      	ldrb	r3, [r3, #0]
   9570c:	4618      	mov	r0, r3
   9570e:	2301      	movs	r3, #1
   95710:	4083      	lsls	r3, r0
   95712:	43db      	mvns	r3, r3
   95714:	041b      	lsls	r3, r3, #16
   95716:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   9571a:	4313      	orrs	r3, r2
   9571c:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   9571e:	4b1b      	ldr	r3, [pc, #108]	; (9578c <DD_INIT_SPI+0x104>)
   95720:	781b      	ldrb	r3, [r3, #0]
   95722:	b29b      	uxth	r3, r3
   95724:	2100      	movs	r1, #0
   95726:	4618      	mov	r0, r3
   95728:	4b19      	ldr	r3, [pc, #100]	; (95790 <DD_INIT_SPI+0x108>)
   9572a:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   9572c:	4b17      	ldr	r3, [pc, #92]	; (9578c <DD_INIT_SPI+0x104>)
   9572e:	781b      	ldrb	r3, [r3, #0]
   95730:	b29b      	uxth	r3, r3
   95732:	2100      	movs	r1, #0
   95734:	4618      	mov	r0, r3
   95736:	4b17      	ldr	r3, [pc, #92]	; (95794 <DD_INIT_SPI+0x10c>)
   95738:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   9573a:	4b14      	ldr	r3, [pc, #80]	; (9578c <DD_INIT_SPI+0x104>)
   9573c:	781b      	ldrb	r3, [r3, #0]
   9573e:	b29b      	uxth	r3, r3
   95740:	2180      	movs	r1, #128	; 0x80
   95742:	4618      	mov	r0, r3
   95744:	4b14      	ldr	r3, [pc, #80]	; (95798 <DD_INIT_SPI+0x110>)
   95746:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   95748:	4b10      	ldr	r3, [pc, #64]	; (9578c <DD_INIT_SPI+0x104>)
   9574a:	781b      	ldrb	r3, [r3, #0]
   9574c:	b29b      	uxth	r3, r3
   9574e:	21ff      	movs	r1, #255	; 0xff
   95750:	4618      	mov	r0, r3
   95752:	4b12      	ldr	r3, [pc, #72]	; (9579c <DD_INIT_SPI+0x114>)
   95754:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   95756:	4b0d      	ldr	r3, [pc, #52]	; (9578c <DD_INIT_SPI+0x104>)
   95758:	781b      	ldrb	r3, [r3, #0]
   9575a:	b29b      	uxth	r3, r3
   9575c:	2210      	movs	r2, #16
   9575e:	2180      	movs	r1, #128	; 0x80
   95760:	4618      	mov	r0, r3
   95762:	4b0f      	ldr	r3, [pc, #60]	; (957a0 <DD_INIT_SPI+0x118>)
   95764:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   95766:	4b04      	ldr	r3, [pc, #16]	; (95778 <DD_INIT_SPI+0xf0>)
   95768:	2201      	movs	r2, #1
   9576a:	601a      	str	r2, [r3, #0]
}
   9576c:	bf00      	nop
   9576e:	bd80      	pop	{r7, pc}
   95770:	400e0e00 	.word	0x400e0e00
   95774:	50494f00 	.word	0x50494f00
   95778:	40008000 	.word	0x40008000
   9577c:	53504900 	.word	0x53504900
   95780:	400e0600 	.word	0x400e0600
   95784:	504d4300 	.word	0x504d4300
   95788:	000805dd 	.word	0x000805dd
   9578c:	20072704 	.word	0x20072704
   95790:	00095441 	.word	0x00095441
   95794:	00095495 	.word	0x00095495
   95798:	000953f5 	.word	0x000953f5
   9579c:	000954e9 	.word	0x000954e9
   957a0:	00095399 	.word	0x00095399

000957a4 <DD_ENABLE_BYPASS>:
static bool ByPass = 0 , LoopBack = 0;

extern bool isouf;

uint8_t DD_ENABLE_BYPASS()
{
   957a4:	b580      	push	{r7, lr}
   957a6:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   957a8:	200f      	movs	r0, #15
   957aa:	4b07      	ldr	r3, [pc, #28]	; (957c8 <DD_ENABLE_BYPASS+0x24>)
   957ac:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   957ae:	200d      	movs	r0, #13
   957b0:	4b06      	ldr	r3, [pc, #24]	; (957cc <DD_ENABLE_BYPASS+0x28>)
   957b2:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   957b4:	200e      	movs	r0, #14
   957b6:	4b05      	ldr	r3, [pc, #20]	; (957cc <DD_ENABLE_BYPASS+0x28>)
   957b8:	4798      	blx	r3
				ByPass = true;
   957ba:	4b05      	ldr	r3, [pc, #20]	; (957d0 <DD_ENABLE_BYPASS+0x2c>)
   957bc:	2201      	movs	r2, #1
   957be:	701a      	strb	r2, [r3, #0]
	
	return 0;
   957c0:	2300      	movs	r3, #0
}
   957c2:	4618      	mov	r0, r3
   957c4:	bd80      	pop	{r7, pc}
   957c6:	bf00      	nop
   957c8:	00095d6d 	.word	0x00095d6d
   957cc:	00095e35 	.word	0x00095e35
   957d0:	20072712 	.word	0x20072712

000957d4 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   957d4:	b580      	push	{r7, lr}
   957d6:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   957d8:	200f      	movs	r0, #15
   957da:	4b07      	ldr	r3, [pc, #28]	; (957f8 <DD_DISABLE_BYPASS+0x24>)
   957dc:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   957de:	200d      	movs	r0, #13
   957e0:	4b06      	ldr	r3, [pc, #24]	; (957fc <DD_DISABLE_BYPASS+0x28>)
   957e2:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   957e4:	200e      	movs	r0, #14
   957e6:	4b05      	ldr	r3, [pc, #20]	; (957fc <DD_DISABLE_BYPASS+0x28>)
   957e8:	4798      	blx	r3
				ByPass = false;
   957ea:	4b05      	ldr	r3, [pc, #20]	; (95800 <DD_DISABLE_BYPASS+0x2c>)
   957ec:	2200      	movs	r2, #0
   957ee:	701a      	strb	r2, [r3, #0]
	
	return 0;
   957f0:	2300      	movs	r3, #0
}
   957f2:	4618      	mov	r0, r3
   957f4:	bd80      	pop	{r7, pc}
   957f6:	bf00      	nop
   957f8:	00095e35 	.word	0x00095e35
   957fc:	00095d6d 	.word	0x00095d6d
   95800:	20072712 	.word	0x20072712

00095804 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   95804:	b580      	push	{r7, lr}
   95806:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   95808:	4b05      	ldr	r3, [pc, #20]	; (95820 <DD_ENABLE_LOOPBACK+0x1c>)
   9580a:	2201      	movs	r2, #1
   9580c:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   9580e:	2010      	movs	r0, #16
   95810:	4b04      	ldr	r3, [pc, #16]	; (95824 <DD_ENABLE_LOOPBACK+0x20>)
   95812:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   95814:	2012      	movs	r0, #18
   95816:	4b04      	ldr	r3, [pc, #16]	; (95828 <DD_ENABLE_LOOPBACK+0x24>)
   95818:	4798      	blx	r3
				
	return 0;
   9581a:	2300      	movs	r3, #0
}
   9581c:	4618      	mov	r0, r3
   9581e:	bd80      	pop	{r7, pc}
   95820:	20072713 	.word	0x20072713
   95824:	00095d6d 	.word	0x00095d6d
   95828:	00095e35 	.word	0x00095e35

0009582c <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   9582c:	b580      	push	{r7, lr}
   9582e:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   95830:	4b05      	ldr	r3, [pc, #20]	; (95848 <DD_DISABLE_LOOPBACK+0x1c>)
   95832:	2200      	movs	r2, #0
   95834:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   95836:	2010      	movs	r0, #16
   95838:	4b04      	ldr	r3, [pc, #16]	; (9584c <DD_DISABLE_LOOPBACK+0x20>)
   9583a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   9583c:	2012      	movs	r0, #18
   9583e:	4b04      	ldr	r3, [pc, #16]	; (95850 <DD_DISABLE_LOOPBACK+0x24>)
   95840:	4798      	blx	r3
	return 0;
   95842:	2300      	movs	r3, #0
}
   95844:	4618      	mov	r0, r3
   95846:	bd80      	pop	{r7, pc}
   95848:	20072713 	.word	0x20072713
   9584c:	00095e35 	.word	0x00095e35
   95850:	00095d6d 	.word	0x00095d6d

00095854 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   95854:	b580      	push	{r7, lr}
   95856:	b084      	sub	sp, #16
   95858:	af00      	add	r7, sp, #0
   9585a:	4603      	mov	r3, r0
   9585c:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   9585e:	79fb      	ldrb	r3, [r7, #7]
   95860:	3b01      	subs	r3, #1
   95862:	2b04      	cmp	r3, #4
   95864:	d858      	bhi.n	95918 <DD_SET_PUMP+0xc4>
   95866:	a201      	add	r2, pc, #4	; (adr r2, 9586c <DD_SET_PUMP+0x18>)
   95868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9586c:	00095881 	.word	0x00095881
   95870:	000958a5 	.word	0x000958a5
   95874:	00095919 	.word	0x00095919
   95878:	000958c9 	.word	0x000958c9
   9587c:	000958ff 	.word	0x000958ff
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   95880:	2314      	movs	r3, #20
   95882:	60fb      	str	r3, [r7, #12]
		peri = PA;
   95884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95888:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   9588a:	4b26      	ldr	r3, [pc, #152]	; (95924 <DD_SET_PUMP+0xd0>)
   9588c:	2204      	movs	r2, #4
   9588e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   95890:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   95894:	2014      	movs	r0, #20
   95896:	4b24      	ldr	r3, [pc, #144]	; (95928 <DD_SET_PUMP+0xd4>)
   95898:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9589a:	68f9      	ldr	r1, [r7, #12]
   9589c:	68b8      	ldr	r0, [r7, #8]
   9589e:	4b23      	ldr	r3, [pc, #140]	; (9592c <DD_SET_PUMP+0xd8>)
   958a0:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   958a2:	e039      	b.n	95918 <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   958a4:	2315      	movs	r3, #21
   958a6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   958a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   958ac:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   958ae:	4b1d      	ldr	r3, [pc, #116]	; (95924 <DD_SET_PUMP+0xd0>)
   958b0:	2201      	movs	r2, #1
   958b2:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   958b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   958b8:	2015      	movs	r0, #21
   958ba:	4b1b      	ldr	r3, [pc, #108]	; (95928 <DD_SET_PUMP+0xd4>)
   958bc:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   958be:	68f9      	ldr	r1, [r7, #12]
   958c0:	68b8      	ldr	r0, [r7, #8]
   958c2:	4b1a      	ldr	r3, [pc, #104]	; (9592c <DD_SET_PUMP+0xd8>)
   958c4:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   958c6:	e027      	b.n	95918 <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   958c8:	2316      	movs	r3, #22
   958ca:	60fb      	str	r3, [r7, #12]
		peri = PC;
   958cc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   958d0:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   958d2:	68f9      	ldr	r1, [r7, #12]
   958d4:	68b8      	ldr	r0, [r7, #8]
   958d6:	4b16      	ldr	r3, [pc, #88]	; (95930 <DD_SET_PUMP+0xdc>)
   958d8:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   958da:	4b12      	ldr	r3, [pc, #72]	; (95924 <DD_SET_PUMP+0xd0>)
   958dc:	2220      	movs	r2, #32
   958de:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   958e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   958e4:	2056      	movs	r0, #86	; 0x56
   958e6:	4b10      	ldr	r3, [pc, #64]	; (95928 <DD_SET_PUMP+0xd4>)
   958e8:	4798      	blx	r3
		
		p_io = 15;
   958ea:	230f      	movs	r3, #15
   958ec:	60fb      	str	r3, [r7, #12]
		peri = PA;
   958ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   958f2:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   958f4:	68f9      	ldr	r1, [r7, #12]
   958f6:	68b8      	ldr	r0, [r7, #8]
   958f8:	4b0d      	ldr	r3, [pc, #52]	; (95930 <DD_SET_PUMP+0xdc>)
   958fa:	4798      	blx	r3
		break;
   958fc:	e00c      	b.n	95918 <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   958fe:	4b09      	ldr	r3, [pc, #36]	; (95924 <DD_SET_PUMP+0xd0>)
   95900:	2210      	movs	r2, #16
   95902:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   95904:	2302      	movs	r3, #2
   95906:	60fb      	str	r3, [r7, #12]
		peri = PD;
   95908:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9590c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   9590e:	68f9      	ldr	r1, [r7, #12]
   95910:	68b8      	ldr	r0, [r7, #8]
   95912:	4b07      	ldr	r3, [pc, #28]	; (95930 <DD_SET_PUMP+0xdc>)
   95914:	4798      	blx	r3

		break;
   95916:	bf00      	nop
				
	}
	
	
	
	return 0;
   95918:	2300      	movs	r3, #0
}
   9591a:	4618      	mov	r0, r3
   9591c:	3710      	adds	r7, #16
   9591e:	46bd      	mov	sp, r7
   95920:	bd80      	pop	{r7, pc}
   95922:	bf00      	nop
   95924:	40094000 	.word	0x40094000
   95928:	000980b5 	.word	0x000980b5
   9592c:	00094811 	.word	0x00094811
   95930:	00094919 	.word	0x00094919

00095934 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   95934:	b580      	push	{r7, lr}
   95936:	b082      	sub	sp, #8
   95938:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   9593a:	231c      	movs	r3, #28
   9593c:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   9593e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95942:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   95944:	6879      	ldr	r1, [r7, #4]
   95946:	6838      	ldr	r0, [r7, #0]
   95948:	4b0d      	ldr	r3, [pc, #52]	; (95980 <DD_SET_HEATER+0x4c>)
   9594a:	4798      	blx	r3
	cl_wait(100);
   9594c:	2064      	movs	r0, #100	; 0x64
   9594e:	4b0d      	ldr	r3, [pc, #52]	; (95984 <DD_SET_HEATER+0x50>)
   95950:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   95952:	4b0d      	ldr	r3, [pc, #52]	; (95988 <DD_SET_HEATER+0x54>)
   95954:	2202      	movs	r2, #2
   95956:	605a      	str	r2, [r3, #4]
	p_io = 12;
   95958:	230c      	movs	r3, #12
   9595a:	607b      	str	r3, [r7, #4]
	peri = PA;
   9595c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95960:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   95962:	4a0a      	ldr	r2, [pc, #40]	; (9598c <DD_SET_HEATER+0x58>)
   95964:	2101      	movs	r1, #1
   95966:	687b      	ldr	r3, [r7, #4]
   95968:	fa01 f303 	lsl.w	r3, r1, r3
   9596c:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9596e:	6879      	ldr	r1, [r7, #4]
   95970:	6838      	ldr	r0, [r7, #0]
   95972:	4b07      	ldr	r3, [pc, #28]	; (95990 <DD_SET_HEATER+0x5c>)
   95974:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   95976:	2300      	movs	r3, #0
}
   95978:	4618      	mov	r0, r3
   9597a:	3708      	adds	r7, #8
   9597c:	46bd      	mov	sp, r7
   9597e:	bd80      	pop	{r7, pc}
   95980:	00094895 	.word	0x00094895
   95984:	000918fd 	.word	0x000918fd
   95988:	40094000 	.word	0x40094000
   9598c:	400e0e00 	.word	0x400e0e00
   95990:	00094811 	.word	0x00094811

00095994 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   95994:	b580      	push	{r7, lr}
   95996:	b082      	sub	sp, #8
   95998:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   9599a:	4b11      	ldr	r3, [pc, #68]	; (959e0 <DD_RESET_HEATER+0x4c>)
   9599c:	2202      	movs	r2, #2
   9599e:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   959a0:	230c      	movs	r3, #12
   959a2:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   959a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   959a8:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   959aa:	4a0e      	ldr	r2, [pc, #56]	; (959e4 <DD_RESET_HEATER+0x50>)
   959ac:	2101      	movs	r1, #1
   959ae:	687b      	ldr	r3, [r7, #4]
   959b0:	fa01 f303 	lsl.w	r3, r1, r3
   959b4:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   959b6:	6879      	ldr	r1, [r7, #4]
   959b8:	6838      	ldr	r0, [r7, #0]
   959ba:	4b0b      	ldr	r3, [pc, #44]	; (959e8 <DD_RESET_HEATER+0x54>)
   959bc:	4798      	blx	r3
	
	cl_wait(100);
   959be:	2064      	movs	r0, #100	; 0x64
   959c0:	4b0a      	ldr	r3, [pc, #40]	; (959ec <DD_RESET_HEATER+0x58>)
   959c2:	4798      	blx	r3
	p_io = 28;
   959c4:	231c      	movs	r3, #28
   959c6:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   959c8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   959cc:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   959ce:	6879      	ldr	r1, [r7, #4]
   959d0:	6838      	ldr	r0, [r7, #0]
   959d2:	4b07      	ldr	r3, [pc, #28]	; (959f0 <DD_RESET_HEATER+0x5c>)
   959d4:	4798      	blx	r3
	return 0;
   959d6:	2300      	movs	r3, #0
}
   959d8:	4618      	mov	r0, r3
   959da:	3708      	adds	r7, #8
   959dc:	46bd      	mov	sp, r7
   959de:	bd80      	pop	{r7, pc}
   959e0:	40094000 	.word	0x40094000
   959e4:	400e0e00 	.word	0x400e0e00
   959e8:	0009475d 	.word	0x0009475d
   959ec:	000918fd 	.word	0x000918fd
   959f0:	00094919 	.word	0x00094919

000959f4 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   959f4:	b580      	push	{r7, lr}
   959f6:	b084      	sub	sp, #16
   959f8:	af00      	add	r7, sp, #0
   959fa:	4603      	mov	r3, r0
   959fc:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   959fe:	79fb      	ldrb	r3, [r7, #7]
   95a00:	3b01      	subs	r3, #1
   95a02:	2b04      	cmp	r3, #4
   95a04:	d85b      	bhi.n	95abe <DD_RESET_PUMP+0xca>
   95a06:	a201      	add	r2, pc, #4	; (adr r2, 95a0c <DD_RESET_PUMP+0x18>)
   95a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95a0c:	00095a21 	.word	0x00095a21
   95a10:	00095a4d 	.word	0x00095a4d
   95a14:	00095abf 	.word	0x00095abf
   95a18:	00095a79 	.word	0x00095a79
   95a1c:	00095aa5 	.word	0x00095aa5
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   95a20:	2314      	movs	r3, #20
   95a22:	60fb      	str	r3, [r7, #12]
		peri = PA;
   95a24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95a28:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   95a2a:	4b27      	ldr	r3, [pc, #156]	; (95ac8 <DD_RESET_PUMP+0xd4>)
   95a2c:	2204      	movs	r2, #4
   95a2e:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   95a30:	4b26      	ldr	r3, [pc, #152]	; (95acc <DD_RESET_PUMP+0xd8>)
   95a32:	4a27      	ldr	r2, [pc, #156]	; (95ad0 <DD_RESET_PUMP+0xdc>)
   95a34:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   95a36:	4a25      	ldr	r2, [pc, #148]	; (95acc <DD_RESET_PUMP+0xd8>)
   95a38:	2101      	movs	r1, #1
   95a3a:	68fb      	ldr	r3, [r7, #12]
   95a3c:	fa01 f303 	lsl.w	r3, r1, r3
   95a40:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   95a42:	68f9      	ldr	r1, [r7, #12]
   95a44:	68b8      	ldr	r0, [r7, #8]
   95a46:	4b23      	ldr	r3, [pc, #140]	; (95ad4 <DD_RESET_PUMP+0xe0>)
   95a48:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   95a4a:	e038      	b.n	95abe <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   95a4c:	2315      	movs	r3, #21
   95a4e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   95a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95a54:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   95a56:	4b1c      	ldr	r3, [pc, #112]	; (95ac8 <DD_RESET_PUMP+0xd4>)
   95a58:	2201      	movs	r2, #1
   95a5a:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   95a5c:	4b1b      	ldr	r3, [pc, #108]	; (95acc <DD_RESET_PUMP+0xd8>)
   95a5e:	4a1c      	ldr	r2, [pc, #112]	; (95ad0 <DD_RESET_PUMP+0xdc>)
   95a60:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   95a62:	4a1a      	ldr	r2, [pc, #104]	; (95acc <DD_RESET_PUMP+0xd8>)
   95a64:	2101      	movs	r1, #1
   95a66:	68fb      	ldr	r3, [r7, #12]
   95a68:	fa01 f303 	lsl.w	r3, r1, r3
   95a6c:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   95a6e:	68f9      	ldr	r1, [r7, #12]
   95a70:	68b8      	ldr	r0, [r7, #8]
   95a72:	4b18      	ldr	r3, [pc, #96]	; (95ad4 <DD_RESET_PUMP+0xe0>)
   95a74:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   95a76:	e022      	b.n	95abe <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   95a78:	2316      	movs	r3, #22
   95a7a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   95a7c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95a80:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   95a82:	68f9      	ldr	r1, [r7, #12]
   95a84:	68b8      	ldr	r0, [r7, #8]
   95a86:	4b13      	ldr	r3, [pc, #76]	; (95ad4 <DD_RESET_PUMP+0xe0>)
   95a88:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   95a8a:	4b0f      	ldr	r3, [pc, #60]	; (95ac8 <DD_RESET_PUMP+0xd4>)
   95a8c:	2220      	movs	r2, #32
   95a8e:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   95a90:	230f      	movs	r3, #15
   95a92:	60fb      	str	r3, [r7, #12]
		peri = PA;
   95a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   95a98:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   95a9a:	68f9      	ldr	r1, [r7, #12]
   95a9c:	68b8      	ldr	r0, [r7, #8]
   95a9e:	4b0e      	ldr	r3, [pc, #56]	; (95ad8 <DD_RESET_PUMP+0xe4>)
   95aa0:	4798      	blx	r3
		break;
   95aa2:	e00c      	b.n	95abe <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   95aa4:	2302      	movs	r3, #2
   95aa6:	60fb      	str	r3, [r7, #12]
		peri = PD;
   95aa8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95aac:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   95aae:	68f9      	ldr	r1, [r7, #12]
   95ab0:	68b8      	ldr	r0, [r7, #8]
   95ab2:	4b09      	ldr	r3, [pc, #36]	; (95ad8 <DD_RESET_PUMP+0xe4>)
   95ab4:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   95ab6:	4b04      	ldr	r3, [pc, #16]	; (95ac8 <DD_RESET_PUMP+0xd4>)
   95ab8:	2210      	movs	r2, #16
   95aba:	609a      	str	r2, [r3, #8]
		break;
   95abc:	bf00      	nop
	
	}
	
	
	
	return 0;
   95abe:	2300      	movs	r3, #0
	
}
   95ac0:	4618      	mov	r0, r3
   95ac2:	3710      	adds	r7, #16
   95ac4:	46bd      	mov	sp, r7
   95ac6:	bd80      	pop	{r7, pc}
   95ac8:	40094000 	.word	0x40094000
   95acc:	400e0e00 	.word	0x400e0e00
   95ad0:	00391000 	.word	0x00391000
   95ad4:	0009475d 	.word	0x0009475d
   95ad8:	00094895 	.word	0x00094895

00095adc <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   95adc:	b580      	push	{r7, lr}
   95ade:	b086      	sub	sp, #24
   95ae0:	af00      	add	r7, sp, #0
   95ae2:	4603      	mov	r3, r0
   95ae4:	6039      	str	r1, [r7, #0]
   95ae6:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   95ae8:	79fb      	ldrb	r3, [r7, #7]
   95aea:	3b01      	subs	r3, #1
   95aec:	2b04      	cmp	r3, #4
   95aee:	f200 8082 	bhi.w	95bf6 <DD_SET_SPEED+0x11a>
   95af2:	a201      	add	r2, pc, #4	; (adr r2, 95af8 <DD_SET_SPEED+0x1c>)
   95af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95af8:	00095b0d 	.word	0x00095b0d
   95afc:	00095b21 	.word	0x00095b21
   95b00:	00095b35 	.word	0x00095b35
   95b04:	00095bb7 	.word	0x00095bb7
   95b08:	00095bd7 	.word	0x00095bd7
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   95b0c:	2302      	movs	r3, #2
   95b0e:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   95b10:	683b      	ldr	r3, [r7, #0]
   95b12:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95b14:	7bfb      	ldrb	r3, [r7, #15]
   95b16:	6939      	ldr	r1, [r7, #16]
   95b18:	4618      	mov	r0, r3
   95b1a:	4b39      	ldr	r3, [pc, #228]	; (95c00 <DD_SET_SPEED+0x124>)
   95b1c:	4798      	blx	r3
		break;
   95b1e:	e06a      	b.n	95bf6 <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   95b20:	2300      	movs	r3, #0
   95b22:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   95b24:	683b      	ldr	r3, [r7, #0]
   95b26:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95b28:	7bfb      	ldrb	r3, [r7, #15]
   95b2a:	6939      	ldr	r1, [r7, #16]
   95b2c:	4618      	mov	r0, r3
   95b2e:	4b34      	ldr	r3, [pc, #208]	; (95c00 <DD_SET_SPEED+0x124>)
   95b30:	4798      	blx	r3
		break;
   95b32:	e060      	b.n	95bf6 <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   95b34:	683b      	ldr	r3, [r7, #0]
   95b36:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   95b3a:	d01c      	beq.n	95b76 <DD_SET_SPEED+0x9a>
   95b3c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   95b40:	d804      	bhi.n	95b4c <DD_SET_SPEED+0x70>
   95b42:	2bc8      	cmp	r3, #200	; 0xc8
   95b44:	d009      	beq.n	95b5a <DD_SET_SPEED+0x7e>
   95b46:	2bf0      	cmp	r3, #240	; 0xf0
   95b48:	d00e      	beq.n	95b68 <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   95b4a:	e029      	b.n	95ba0 <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   95b4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   95b50:	d018      	beq.n	95b84 <DD_SET_SPEED+0xa8>
   95b52:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   95b56:	d01c      	beq.n	95b92 <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   95b58:	e022      	b.n	95ba0 <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   95b5a:	f44f 73b8 	mov.w	r3, #368	; 0x170
   95b5e:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   95b60:	f240 3375 	movw	r3, #885	; 0x375
   95b64:	617b      	str	r3, [r7, #20]
			break;
   95b66:	e01b      	b.n	95ba0 <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   95b68:	f44f 73a8 	mov.w	r3, #336	; 0x150
   95b6c:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   95b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
   95b72:	617b      	str	r3, [r7, #20]
			break;
   95b74:	e014      	b.n	95ba0 <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   95b76:	f44f 7398 	mov.w	r3, #304	; 0x130
   95b7a:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   95b7c:	f44f 7320 	mov.w	r3, #640	; 0x280
   95b80:	617b      	str	r3, [r7, #20]
			break;
   95b82:	e00d      	b.n	95ba0 <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   95b84:	f44f 7390 	mov.w	r3, #288	; 0x120
   95b88:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   95b8a:	f44f 7314 	mov.w	r3, #592	; 0x250
   95b8e:	617b      	str	r3, [r7, #20]
			break;
   95b90:	e006      	b.n	95ba0 <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   95b92:	f44f 7388 	mov.w	r3, #272	; 0x110
   95b96:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   95b98:	f44f 7304 	mov.w	r3, #528	; 0x210
   95b9c:	617b      	str	r3, [r7, #20]
			break;
   95b9e:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95ba0:	7bfb      	ldrb	r3, [r7, #15]
   95ba2:	6939      	ldr	r1, [r7, #16]
   95ba4:	4618      	mov	r0, r3
   95ba6:	4b16      	ldr	r3, [pc, #88]	; (95c00 <DD_SET_SPEED+0x124>)
   95ba8:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   95baa:	7bfb      	ldrb	r3, [r7, #15]
   95bac:	6979      	ldr	r1, [r7, #20]
   95bae:	4618      	mov	r0, r3
   95bb0:	4b14      	ldr	r3, [pc, #80]	; (95c04 <DD_SET_SPEED+0x128>)
   95bb2:	4798      	blx	r3
		break;
   95bb4:	e01f      	b.n	95bf6 <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   95bb6:	2305      	movs	r3, #5
   95bb8:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   95bba:	683b      	ldr	r3, [r7, #0]
   95bbc:	085b      	lsrs	r3, r3, #1
   95bbe:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95bc0:	7bfb      	ldrb	r3, [r7, #15]
   95bc2:	6939      	ldr	r1, [r7, #16]
   95bc4:	4618      	mov	r0, r3
   95bc6:	4b0e      	ldr	r3, [pc, #56]	; (95c00 <DD_SET_SPEED+0x124>)
   95bc8:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   95bca:	7bfb      	ldrb	r3, [r7, #15]
   95bcc:	6839      	ldr	r1, [r7, #0]
   95bce:	4618      	mov	r0, r3
   95bd0:	4b0c      	ldr	r3, [pc, #48]	; (95c04 <DD_SET_SPEED+0x128>)
   95bd2:	4798      	blx	r3
		break;
   95bd4:	e00f      	b.n	95bf6 <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   95bd6:	2304      	movs	r3, #4
   95bd8:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   95bda:	683b      	ldr	r3, [r7, #0]
   95bdc:	085b      	lsrs	r3, r3, #1
   95bde:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   95be0:	7bfb      	ldrb	r3, [r7, #15]
   95be2:	6939      	ldr	r1, [r7, #16]
   95be4:	4618      	mov	r0, r3
   95be6:	4b06      	ldr	r3, [pc, #24]	; (95c00 <DD_SET_SPEED+0x124>)
   95be8:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   95bea:	7bfb      	ldrb	r3, [r7, #15]
   95bec:	6839      	ldr	r1, [r7, #0]
   95bee:	4618      	mov	r0, r3
   95bf0:	4b04      	ldr	r3, [pc, #16]	; (95c04 <DD_SET_SPEED+0x128>)
   95bf2:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   95bf4:	bf00      	nop
	}
	
	return 0;
   95bf6:	2300      	movs	r3, #0
}
   95bf8:	4618      	mov	r0, r3
   95bfa:	3718      	adds	r7, #24
   95bfc:	46bd      	mov	sp, r7
   95bfe:	bd80      	pop	{r7, pc}
   95c00:	00095341 	.word	0x00095341
   95c04:	0009536d 	.word	0x0009536d

00095c08 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   95c08:	b580      	push	{r7, lr}
   95c0a:	b084      	sub	sp, #16
   95c0c:	af00      	add	r7, sp, #0
   95c0e:	4603      	mov	r3, r0
   95c10:	6039      	str	r1, [r7, #0]
   95c12:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   95c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   95c18:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   95c1a:	683b      	ldr	r3, [r7, #0]
   95c1c:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   95c1e:	79fb      	ldrb	r3, [r7, #7]
   95c20:	2b01      	cmp	r3, #1
   95c22:	d002      	beq.n	95c2a <DD_SET_PUMPFREQ+0x22>
   95c24:	2b02      	cmp	r3, #2
   95c26:	d008      	beq.n	95c3a <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   95c28:	e00f      	b.n	95c4a <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   95c2a:	2302      	movs	r3, #2
   95c2c:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   95c2e:	7afb      	ldrb	r3, [r7, #11]
   95c30:	68f9      	ldr	r1, [r7, #12]
   95c32:	4618      	mov	r0, r3
   95c34:	4b07      	ldr	r3, [pc, #28]	; (95c54 <DD_SET_PUMPFREQ+0x4c>)
   95c36:	4798      	blx	r3
								
				break;
   95c38:	e007      	b.n	95c4a <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   95c3a:	2300      	movs	r3, #0
   95c3c:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   95c3e:	7afb      	ldrb	r3, [r7, #11]
   95c40:	68f9      	ldr	r1, [r7, #12]
   95c42:	4618      	mov	r0, r3
   95c44:	4b03      	ldr	r3, [pc, #12]	; (95c54 <DD_SET_PUMPFREQ+0x4c>)
   95c46:	4798      	blx	r3
							
				
				break;
   95c48:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   95c4a:	2300      	movs	r3, #0
}
   95c4c:	4618      	mov	r0, r3
   95c4e:	3710      	adds	r7, #16
   95c50:	46bd      	mov	sp, r7
   95c52:	bd80      	pop	{r7, pc}
   95c54:	0009536d 	.word	0x0009536d

00095c58 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   95c58:	b580      	push	{r7, lr}
   95c5a:	b084      	sub	sp, #16
   95c5c:	af00      	add	r7, sp, #0
   95c5e:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   95c60:	2301      	movs	r3, #1
   95c62:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   95c64:	7bfb      	ldrb	r3, [r7, #15]
   95c66:	6879      	ldr	r1, [r7, #4]
   95c68:	4618      	mov	r0, r3
   95c6a:	4b03      	ldr	r3, [pc, #12]	; (95c78 <DD_CHNG_HTR+0x20>)
   95c6c:	4798      	blx	r3
	
	return 0;
   95c6e:	2300      	movs	r3, #0
}
   95c70:	4618      	mov	r0, r3
   95c72:	3710      	adds	r7, #16
   95c74:	46bd      	mov	sp, r7
   95c76:	bd80      	pop	{r7, pc}
   95c78:	00095341 	.word	0x00095341

00095c7c <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   95c7c:	b580      	push	{r7, lr}
   95c7e:	b082      	sub	sp, #8
   95c80:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   95c82:	2301      	movs	r3, #1
   95c84:	607b      	str	r3, [r7, #4]
	peri = PD;
   95c86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95c8a:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   95c8c:	6879      	ldr	r1, [r7, #4]
   95c8e:	6838      	ldr	r0, [r7, #0]
   95c90:	4b03      	ldr	r3, [pc, #12]	; (95ca0 <DD_SET_DIR+0x24>)
   95c92:	4798      	blx	r3
	
	return 0;
   95c94:	2300      	movs	r3, #0
}
   95c96:	4618      	mov	r0, r3
   95c98:	3708      	adds	r7, #8
   95c9a:	46bd      	mov	sp, r7
   95c9c:	bd80      	pop	{r7, pc}
   95c9e:	bf00      	nop
   95ca0:	00094895 	.word	0x00094895

00095ca4 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   95ca4:	b580      	push	{r7, lr}
   95ca6:	b082      	sub	sp, #8
   95ca8:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   95caa:	2301      	movs	r3, #1
   95cac:	607b      	str	r3, [r7, #4]
	peri = PD;
   95cae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   95cb2:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   95cb4:	6879      	ldr	r1, [r7, #4]
   95cb6:	6838      	ldr	r0, [r7, #0]
   95cb8:	4b03      	ldr	r3, [pc, #12]	; (95cc8 <DD_RESET_DIR+0x24>)
   95cba:	4798      	blx	r3
	
	return 0;
   95cbc:	2300      	movs	r3, #0
}
   95cbe:	4618      	mov	r0, r3
   95cc0:	3708      	adds	r7, #8
   95cc2:	46bd      	mov	sp, r7
   95cc4:	bd80      	pop	{r7, pc}
   95cc6:	bf00      	nop
   95cc8:	00094919 	.word	0x00094919

00095ccc <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   95ccc:	b580      	push	{r7, lr}
   95cce:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   95cd0:	201e      	movs	r0, #30
   95cd2:	4b02      	ldr	r3, [pc, #8]	; (95cdc <DD_SET_RED+0x10>)
   95cd4:	4798      	blx	r3
	return 0;
   95cd6:	2300      	movs	r3, #0
}
   95cd8:	4618      	mov	r0, r3
   95cda:	bd80      	pop	{r7, pc}
   95cdc:	00095d6d 	.word	0x00095d6d

00095ce0 <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   95ce0:	b580      	push	{r7, lr}
   95ce2:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   95ce4:	2020      	movs	r0, #32
   95ce6:	4b02      	ldr	r3, [pc, #8]	; (95cf0 <DD_SET_GREEN+0x10>)
   95ce8:	4798      	blx	r3
	return 0;
   95cea:	2300      	movs	r3, #0
}
   95cec:	4618      	mov	r0, r3
   95cee:	bd80      	pop	{r7, pc}
   95cf0:	00095d6d 	.word	0x00095d6d

00095cf4 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   95cf4:	b580      	push	{r7, lr}
   95cf6:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   95cf8:	201f      	movs	r0, #31
   95cfa:	4b02      	ldr	r3, [pc, #8]	; (95d04 <DD_SET_YELLOW+0x10>)
   95cfc:	4798      	blx	r3
	return 0;
   95cfe:	2300      	movs	r3, #0
}
   95d00:	4618      	mov	r0, r3
   95d02:	bd80      	pop	{r7, pc}
   95d04:	00095d6d 	.word	0x00095d6d

00095d08 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   95d08:	b580      	push	{r7, lr}
   95d0a:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   95d0c:	201d      	movs	r0, #29
   95d0e:	4b02      	ldr	r3, [pc, #8]	; (95d18 <DD_SET_BUZZER+0x10>)
   95d10:	4798      	blx	r3
	return 0;
   95d12:	2300      	movs	r3, #0
}
   95d14:	4618      	mov	r0, r3
   95d16:	bd80      	pop	{r7, pc}
   95d18:	00095d6d 	.word	0x00095d6d

00095d1c <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   95d1c:	b580      	push	{r7, lr}
   95d1e:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   95d20:	201e      	movs	r0, #30
   95d22:	4b02      	ldr	r3, [pc, #8]	; (95d2c <DD_RESET_RED+0x10>)
   95d24:	4798      	blx	r3
	return 0;
   95d26:	2300      	movs	r3, #0
}
   95d28:	4618      	mov	r0, r3
   95d2a:	bd80      	pop	{r7, pc}
   95d2c:	00095e35 	.word	0x00095e35

00095d30 <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   95d30:	b580      	push	{r7, lr}
   95d32:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   95d34:	2020      	movs	r0, #32
   95d36:	4b02      	ldr	r3, [pc, #8]	; (95d40 <DD_RESET_GREEN+0x10>)
   95d38:	4798      	blx	r3
	return 0;
   95d3a:	2300      	movs	r3, #0
}
   95d3c:	4618      	mov	r0, r3
   95d3e:	bd80      	pop	{r7, pc}
   95d40:	00095e35 	.word	0x00095e35

00095d44 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   95d44:	b580      	push	{r7, lr}
   95d46:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   95d48:	201f      	movs	r0, #31
   95d4a:	4b02      	ldr	r3, [pc, #8]	; (95d54 <DD_RESET_YELLOW+0x10>)
   95d4c:	4798      	blx	r3
	return 0;
   95d4e:	2300      	movs	r3, #0
}
   95d50:	4618      	mov	r0, r3
   95d52:	bd80      	pop	{r7, pc}
   95d54:	00095e35 	.word	0x00095e35

00095d58 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   95d58:	b580      	push	{r7, lr}
   95d5a:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   95d5c:	201d      	movs	r0, #29
   95d5e:	4b02      	ldr	r3, [pc, #8]	; (95d68 <DD_RESET_BUZZER+0x10>)
   95d60:	4798      	blx	r3
	return 0;
   95d62:	2300      	movs	r3, #0
}
   95d64:	4618      	mov	r0, r3
   95d66:	bd80      	pop	{r7, pc}
   95d68:	00095e35 	.word	0x00095e35

00095d6c <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   95d6c:	b580      	push	{r7, lr}
   95d6e:	b082      	sub	sp, #8
   95d70:	af00      	add	r7, sp, #0
   95d72:	4603      	mov	r3, r0
   95d74:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   95d76:	79fb      	ldrb	r3, [r7, #7]
   95d78:	2b00      	cmp	r3, #0
   95d7a:	d015      	beq.n	95da8 <DD_SET_VALVE+0x3c>
   95d7c:	79fb      	ldrb	r3, [r7, #7]
   95d7e:	2b10      	cmp	r3, #16
   95d80:	d812      	bhi.n	95da8 <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   95d82:	79fb      	ldrb	r3, [r7, #7]
   95d84:	3b01      	subs	r3, #1
   95d86:	2201      	movs	r2, #1
   95d88:	fa02 f303 	lsl.w	r3, r2, r3
   95d8c:	b21a      	sxth	r2, r3
   95d8e:	4b21      	ldr	r3, [pc, #132]	; (95e14 <DD_SET_VALVE+0xa8>)
   95d90:	881b      	ldrh	r3, [r3, #0]
   95d92:	b21b      	sxth	r3, r3
   95d94:	4313      	orrs	r3, r2
   95d96:	b21b      	sxth	r3, r3
   95d98:	b29a      	uxth	r2, r3
   95d9a:	4b1e      	ldr	r3, [pc, #120]	; (95e14 <DD_SET_VALVE+0xa8>)
   95d9c:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   95d9e:	4b1e      	ldr	r3, [pc, #120]	; (95e18 <DD_SET_VALVE+0xac>)
   95da0:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   95da2:	4b1e      	ldr	r3, [pc, #120]	; (95e1c <DD_SET_VALVE+0xb0>)
   95da4:	4798      	blx	r3
   95da6:	e030      	b.n	95e0a <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   95da8:	79fb      	ldrb	r3, [r7, #7]
   95daa:	2b10      	cmp	r3, #16
   95dac:	d915      	bls.n	95dda <DD_SET_VALVE+0x6e>
   95dae:	79fb      	ldrb	r3, [r7, #7]
   95db0:	2b16      	cmp	r3, #22
   95db2:	d812      	bhi.n	95dda <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_20 |= 1 << id_valve - 17;         // Earlier 6
   95db4:	79fb      	ldrb	r3, [r7, #7]
   95db6:	3b11      	subs	r3, #17
   95db8:	2201      	movs	r2, #1
   95dba:	fa02 f303 	lsl.w	r3, r2, r3
   95dbe:	b21a      	sxth	r2, r3
   95dc0:	4b17      	ldr	r3, [pc, #92]	; (95e20 <DD_SET_VALVE+0xb4>)
   95dc2:	881b      	ldrh	r3, [r3, #0]
   95dc4:	b21b      	sxth	r3, r3
   95dc6:	4313      	orrs	r3, r2
   95dc8:	b21b      	sxth	r3, r3
   95dca:	b29a      	uxth	r2, r3
   95dcc:	4b14      	ldr	r3, [pc, #80]	; (95e20 <DD_SET_VALVE+0xb4>)
   95dce:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   95dd0:	4b14      	ldr	r3, [pc, #80]	; (95e24 <DD_SET_VALVE+0xb8>)
   95dd2:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   95dd4:	4b14      	ldr	r3, [pc, #80]	; (95e28 <DD_SET_VALVE+0xbc>)
   95dd6:	4798      	blx	r3
   95dd8:	e017      	b.n	95e0a <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   95dda:	79fb      	ldrb	r3, [r7, #7]
   95ddc:	2b1c      	cmp	r3, #28
   95dde:	d914      	bls.n	95e0a <DD_SET_VALVE+0x9e>
   95de0:	79fb      	ldrb	r3, [r7, #7]
   95de2:	2b20      	cmp	r3, #32
   95de4:	d811      	bhi.n	95e0a <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_21_32 |= 1 << id_valve - 17;
   95de6:	79fb      	ldrb	r3, [r7, #7]
   95de8:	3b11      	subs	r3, #17
   95dea:	2201      	movs	r2, #1
   95dec:	fa02 f303 	lsl.w	r3, r2, r3
   95df0:	b21a      	sxth	r2, r3
   95df2:	4b0e      	ldr	r3, [pc, #56]	; (95e2c <DD_SET_VALVE+0xc0>)
   95df4:	881b      	ldrh	r3, [r3, #0]
   95df6:	b21b      	sxth	r3, r3
   95df8:	4313      	orrs	r3, r2
   95dfa:	b21b      	sxth	r3, r3
   95dfc:	b29a      	uxth	r2, r3
   95dfe:	4b0b      	ldr	r3, [pc, #44]	; (95e2c <DD_SET_VALVE+0xc0>)
   95e00:	801a      	strh	r2, [r3, #0]
			DD_SET_VALVE_21_32_IO();
   95e02:	4b0b      	ldr	r3, [pc, #44]	; (95e30 <DD_SET_VALVE+0xc4>)
   95e04:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   95e06:	4b08      	ldr	r3, [pc, #32]	; (95e28 <DD_SET_VALVE+0xbc>)
   95e08:	4798      	blx	r3
		}
				
	

	return 0;
   95e0a:	2300      	movs	r3, #0
}
   95e0c:	4618      	mov	r0, r3
   95e0e:	3708      	adds	r7, #8
   95e10:	46bd      	mov	sp, r7
   95e12:	bd80      	pop	{r7, pc}
   95e14:	2007270c 	.word	0x2007270c
   95e18:	00095f39 	.word	0x00095f39
   95e1c:	00096bd9 	.word	0x00096bd9
   95e20:	2007270e 	.word	0x2007270e
   95e24:	000960c5 	.word	0x000960c5
   95e28:	00096c21 	.word	0x00096c21
   95e2c:	20072710 	.word	0x20072710
   95e30:	0009616d 	.word	0x0009616d

00095e34 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   95e34:	b580      	push	{r7, lr}
   95e36:	b082      	sub	sp, #8
   95e38:	af00      	add	r7, sp, #0
   95e3a:	4603      	mov	r3, r0
   95e3c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   95e3e:	79fb      	ldrb	r3, [r7, #7]
   95e40:	2b01      	cmp	r3, #1
   95e42:	d104      	bne.n	95e4e <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   95e44:	2206      	movs	r2, #6
   95e46:	4932      	ldr	r1, [pc, #200]	; (95f10 <DD_RESET_VALVE+0xdc>)
   95e48:	2018      	movs	r0, #24
   95e4a:	4b32      	ldr	r3, [pc, #200]	; (95f14 <DD_RESET_VALVE+0xe0>)
   95e4c:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   95e4e:	79fb      	ldrb	r3, [r7, #7]
   95e50:	2b00      	cmp	r3, #0
   95e52:	d01b      	beq.n	95e8c <DD_RESET_VALVE+0x58>
   95e54:	79fb      	ldrb	r3, [r7, #7]
   95e56:	2b10      	cmp	r3, #16
   95e58:	d818      	bhi.n	95e8c <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   95e5a:	79fb      	ldrb	r3, [r7, #7]
   95e5c:	3b01      	subs	r3, #1
   95e5e:	2201      	movs	r2, #1
   95e60:	fa02 f303 	lsl.w	r3, r2, r3
   95e64:	b21b      	sxth	r3, r3
   95e66:	43db      	mvns	r3, r3
   95e68:	b21a      	sxth	r2, r3
   95e6a:	4b2b      	ldr	r3, [pc, #172]	; (95f18 <DD_RESET_VALVE+0xe4>)
   95e6c:	881b      	ldrh	r3, [r3, #0]
   95e6e:	b21b      	sxth	r3, r3
   95e70:	4013      	ands	r3, r2
   95e72:	b21b      	sxth	r3, r3
   95e74:	b29a      	uxth	r2, r3
   95e76:	4b28      	ldr	r3, [pc, #160]	; (95f18 <DD_RESET_VALVE+0xe4>)
   95e78:	801a      	strh	r2, [r3, #0]
   95e7a:	4b27      	ldr	r3, [pc, #156]	; (95f18 <DD_RESET_VALVE+0xe4>)
   95e7c:	881a      	ldrh	r2, [r3, #0]
   95e7e:	4b26      	ldr	r3, [pc, #152]	; (95f18 <DD_RESET_VALVE+0xe4>)
   95e80:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   95e82:	4b26      	ldr	r3, [pc, #152]	; (95f1c <DD_RESET_VALVE+0xe8>)
   95e84:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   95e86:	4b26      	ldr	r3, [pc, #152]	; (95f20 <DD_RESET_VALVE+0xec>)
   95e88:	4798      	blx	r3
   95e8a:	e03c      	b.n	95f06 <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   95e8c:	79fb      	ldrb	r3, [r7, #7]
   95e8e:	2b10      	cmp	r3, #16
   95e90:	d91b      	bls.n	95eca <DD_RESET_VALVE+0x96>
   95e92:	79fb      	ldrb	r3, [r7, #7]
   95e94:	2b16      	cmp	r3, #22
   95e96:	d818      	bhi.n	95eca <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   95e98:	79fb      	ldrb	r3, [r7, #7]
   95e9a:	3b11      	subs	r3, #17
   95e9c:	2201      	movs	r2, #1
   95e9e:	fa02 f303 	lsl.w	r3, r2, r3
   95ea2:	b21b      	sxth	r3, r3
   95ea4:	43db      	mvns	r3, r3
   95ea6:	b21a      	sxth	r2, r3
   95ea8:	4b1e      	ldr	r3, [pc, #120]	; (95f24 <DD_RESET_VALVE+0xf0>)
   95eaa:	881b      	ldrh	r3, [r3, #0]
   95eac:	b21b      	sxth	r3, r3
   95eae:	4013      	ands	r3, r2
   95eb0:	b21b      	sxth	r3, r3
   95eb2:	b29a      	uxth	r2, r3
   95eb4:	4b1b      	ldr	r3, [pc, #108]	; (95f24 <DD_RESET_VALVE+0xf0>)
   95eb6:	801a      	strh	r2, [r3, #0]
   95eb8:	4b1a      	ldr	r3, [pc, #104]	; (95f24 <DD_RESET_VALVE+0xf0>)
   95eba:	881a      	ldrh	r2, [r3, #0]
   95ebc:	4b19      	ldr	r3, [pc, #100]	; (95f24 <DD_RESET_VALVE+0xf0>)
   95ebe:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   95ec0:	4b19      	ldr	r3, [pc, #100]	; (95f28 <DD_RESET_VALVE+0xf4>)
   95ec2:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   95ec4:	4b19      	ldr	r3, [pc, #100]	; (95f2c <DD_RESET_VALVE+0xf8>)
   95ec6:	4798      	blx	r3
   95ec8:	e01d      	b.n	95f06 <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   95eca:	79fb      	ldrb	r3, [r7, #7]
   95ecc:	2b1c      	cmp	r3, #28
   95ece:	d91a      	bls.n	95f06 <DD_RESET_VALVE+0xd2>
   95ed0:	79fb      	ldrb	r3, [r7, #7]
   95ed2:	2b20      	cmp	r3, #32
   95ed4:	d817      	bhi.n	95f06 <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_21_32 = dd_valve_port_21_32 &= ~(1 << id_valve - 17);
   95ed6:	79fb      	ldrb	r3, [r7, #7]
   95ed8:	3b11      	subs	r3, #17
   95eda:	2201      	movs	r2, #1
   95edc:	fa02 f303 	lsl.w	r3, r2, r3
   95ee0:	b21b      	sxth	r3, r3
   95ee2:	43db      	mvns	r3, r3
   95ee4:	b21a      	sxth	r2, r3
   95ee6:	4b12      	ldr	r3, [pc, #72]	; (95f30 <DD_RESET_VALVE+0xfc>)
   95ee8:	881b      	ldrh	r3, [r3, #0]
   95eea:	b21b      	sxth	r3, r3
   95eec:	4013      	ands	r3, r2
   95eee:	b21b      	sxth	r3, r3
   95ef0:	b29a      	uxth	r2, r3
   95ef2:	4b0f      	ldr	r3, [pc, #60]	; (95f30 <DD_RESET_VALVE+0xfc>)
   95ef4:	801a      	strh	r2, [r3, #0]
   95ef6:	4b0e      	ldr	r3, [pc, #56]	; (95f30 <DD_RESET_VALVE+0xfc>)
   95ef8:	881a      	ldrh	r2, [r3, #0]
   95efa:	4b0d      	ldr	r3, [pc, #52]	; (95f30 <DD_RESET_VALVE+0xfc>)
   95efc:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_21_32_IO();
   95efe:	4b0d      	ldr	r3, [pc, #52]	; (95f34 <DD_RESET_VALVE+0x100>)
   95f00:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   95f02:	4b0a      	ldr	r3, [pc, #40]	; (95f2c <DD_RESET_VALVE+0xf8>)
   95f04:	4798      	blx	r3
	}

	
	return 0;
   95f06:	2300      	movs	r3, #0
}
   95f08:	4618      	mov	r0, r3
   95f0a:	3708      	adds	r7, #8
   95f0c:	46bd      	mov	sp, r7
   95f0e:	bd80      	pop	{r7, pc}
   95f10:	000a587c 	.word	0x000a587c
   95f14:	0009926d 	.word	0x0009926d
   95f18:	2007270c 	.word	0x2007270c
   95f1c:	00095f39 	.word	0x00095f39
   95f20:	00096bd9 	.word	0x00096bd9
   95f24:	2007270e 	.word	0x2007270e
   95f28:	000960c5 	.word	0x000960c5
   95f2c:	00096c21 	.word	0x00096c21
   95f30:	20072710 	.word	0x20072710
   95f34:	0009616d 	.word	0x0009616d

00095f38 <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   95f38:	b580      	push	{r7, lr}
   95f3a:	b084      	sub	sp, #16
   95f3c:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   95f3e:	2301      	movs	r3, #1
   95f40:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   95f42:	e0af      	b.n	960a4 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   95f44:	7bfb      	ldrb	r3, [r7, #15]
   95f46:	3b01      	subs	r3, #1
   95f48:	2b0f      	cmp	r3, #15
   95f4a:	f200 8083 	bhi.w	96054 <DD_SET_VALVE_1_16_IO+0x11c>
   95f4e:	a201      	add	r2, pc, #4	; (adr r2, 95f54 <DD_SET_VALVE_1_16_IO+0x1c>)
   95f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95f54:	00095f95 	.word	0x00095f95
   95f58:	00095fa1 	.word	0x00095fa1
   95f5c:	00095fad 	.word	0x00095fad
   95f60:	00095fb9 	.word	0x00095fb9
   95f64:	00095fc5 	.word	0x00095fc5
   95f68:	00095fd1 	.word	0x00095fd1
   95f6c:	00095fdd 	.word	0x00095fdd
   95f70:	00095fe9 	.word	0x00095fe9
   95f74:	00095ff5 	.word	0x00095ff5
   95f78:	00096001 	.word	0x00096001
   95f7c:	0009600d 	.word	0x0009600d
   95f80:	00096019 	.word	0x00096019
   95f84:	00096025 	.word	0x00096025
   95f88:	00096031 	.word	0x00096031
   95f8c:	0009603d 	.word	0x0009603d
   95f90:	00096049 	.word	0x00096049
			{	
			
			case VALVE_ID1:
			p_io = 10;
   95f94:	230a      	movs	r3, #10
   95f96:	60bb      	str	r3, [r7, #8]
			peri = PB;
   95f98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   95f9c:	607b      	str	r3, [r7, #4]
			break;
   95f9e:	e05a      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   95fa0:	2302      	movs	r3, #2
   95fa2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fa4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fa8:	607b      	str	r3, [r7, #4]
			break;
   95faa:	e054      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   95fac:	2303      	movs	r3, #3
   95fae:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fb0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fb4:	607b      	str	r3, [r7, #4]
			break;
   95fb6:	e04e      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   95fb8:	2304      	movs	r3, #4
   95fba:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fbc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fc0:	607b      	str	r3, [r7, #4]
			break;
   95fc2:	e048      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   95fc4:	2305      	movs	r3, #5
   95fc6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fc8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fcc:	607b      	str	r3, [r7, #4]
			break;
   95fce:	e042      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   95fd0:	2306      	movs	r3, #6
   95fd2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fd4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fd8:	607b      	str	r3, [r7, #4]
			break;
   95fda:	e03c      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   95fdc:	2307      	movs	r3, #7
   95fde:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fe0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95fe4:	607b      	str	r3, [r7, #4]
			break;
   95fe6:	e036      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   95fe8:	2308      	movs	r3, #8
   95fea:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95fec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95ff0:	607b      	str	r3, [r7, #4]
			break;
   95ff2:	e030      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   95ff4:	2309      	movs	r3, #9
   95ff6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   95ff8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   95ffc:	607b      	str	r3, [r7, #4]
			break;
   95ffe:	e02a      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   96000:	230a      	movs	r3, #10
   96002:	60bb      	str	r3, [r7, #8]
			peri = PC;
   96004:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96008:	607b      	str	r3, [r7, #4]
			break;
   9600a:	e024      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   9600c:	230b      	movs	r3, #11
   9600e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   96010:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96014:	607b      	str	r3, [r7, #4]
			break;
   96016:	e01e      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   96018:	230c      	movs	r3, #12
   9601a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9601c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96020:	607b      	str	r3, [r7, #4]
						break;
   96022:	e018      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   96024:	230d      	movs	r3, #13
   96026:	60bb      	str	r3, [r7, #8]
			peri = PC;
   96028:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9602c:	607b      	str	r3, [r7, #4]
			break;
   9602e:	e012      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   96030:	230e      	movs	r3, #14
   96032:	60bb      	str	r3, [r7, #8]
			peri = PC;
   96034:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96038:	607b      	str	r3, [r7, #4]
			break;
   9603a:	e00c      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   9603c:	230f      	movs	r3, #15
   9603e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   96040:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96044:	607b      	str	r3, [r7, #4]
			break;
   96046:	e006      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   96048:	2310      	movs	r3, #16
   9604a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9604c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96050:	607b      	str	r3, [r7, #4]
			break;
   96052:	e000      	b.n	96056 <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   96054:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   96056:	4b18      	ldr	r3, [pc, #96]	; (960b8 <DD_SET_VALVE_1_16_IO+0x180>)
   96058:	881b      	ldrh	r3, [r3, #0]
   9605a:	461a      	mov	r2, r3
   9605c:	7bfb      	ldrb	r3, [r7, #15]
   9605e:	3b01      	subs	r3, #1
   96060:	fa42 f303 	asr.w	r3, r2, r3
   96064:	f003 0301 	and.w	r3, r3, #1
   96068:	2b00      	cmp	r3, #0
   9606a:	d00c      	beq.n	96086 <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   9606c:	7bfb      	ldrb	r3, [r7, #15]
   9606e:	2b01      	cmp	r3, #1
   96070:	d104      	bne.n	9607c <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   96072:	68b9      	ldr	r1, [r7, #8]
   96074:	6878      	ldr	r0, [r7, #4]
   96076:	4b11      	ldr	r3, [pc, #68]	; (960bc <DD_SET_VALVE_1_16_IO+0x184>)
   96078:	4798      	blx	r3
   9607a:	e010      	b.n	9609e <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   9607c:	68b9      	ldr	r1, [r7, #8]
   9607e:	6878      	ldr	r0, [r7, #4]
   96080:	4b0f      	ldr	r3, [pc, #60]	; (960c0 <DD_SET_VALVE_1_16_IO+0x188>)
   96082:	4798      	blx	r3
   96084:	e00b      	b.n	9609e <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   96086:	7bfb      	ldrb	r3, [r7, #15]
   96088:	2b01      	cmp	r3, #1
   9608a:	d104      	bne.n	96096 <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   9608c:	68b9      	ldr	r1, [r7, #8]
   9608e:	6878      	ldr	r0, [r7, #4]
   96090:	4b0b      	ldr	r3, [pc, #44]	; (960c0 <DD_SET_VALVE_1_16_IO+0x188>)
   96092:	4798      	blx	r3
   96094:	e003      	b.n	9609e <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   96096:	68b9      	ldr	r1, [r7, #8]
   96098:	6878      	ldr	r0, [r7, #4]
   9609a:	4b08      	ldr	r3, [pc, #32]	; (960bc <DD_SET_VALVE_1_16_IO+0x184>)
   9609c:	4798      	blx	r3
						}
			count++;
   9609e:	7bfb      	ldrb	r3, [r7, #15]
   960a0:	3301      	adds	r3, #1
   960a2:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   960a4:	7bfb      	ldrb	r3, [r7, #15]
   960a6:	2b10      	cmp	r3, #16
   960a8:	f67f af4c 	bls.w	95f44 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   960ac:	2300      	movs	r3, #0
}
   960ae:	4618      	mov	r0, r3
   960b0:	3710      	adds	r7, #16
   960b2:	46bd      	mov	sp, r7
   960b4:	bd80      	pop	{r7, pc}
   960b6:	bf00      	nop
   960b8:	2007270c 	.word	0x2007270c
   960bc:	00094895 	.word	0x00094895
   960c0:	00094919 	.word	0x00094919

000960c4 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   960c4:	b580      	push	{r7, lr}
   960c6:	b084      	sub	sp, #16
   960c8:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   960ca:	2311      	movs	r3, #17
   960cc:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 20)  // 32
   960ce:	e03f      	b.n	96150 <DD_SET_VALVE_17_20_IO+0x8c>
		{
			switch (count)
   960d0:	7bfb      	ldrb	r3, [r7, #15]
   960d2:	3b11      	subs	r3, #17
   960d4:	2b03      	cmp	r3, #3
   960d6:	d823      	bhi.n	96120 <DD_SET_VALVE_17_20_IO+0x5c>
   960d8:	a201      	add	r2, pc, #4	; (adr r2, 960e0 <DD_SET_VALVE_17_20_IO+0x1c>)
   960da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   960de:	bf00      	nop
   960e0:	000960f1 	.word	0x000960f1
   960e4:	000960fd 	.word	0x000960fd
   960e8:	00096109 	.word	0x00096109
   960ec:	00096115 	.word	0x00096115
			{
				
					case VALVE_ID17:
					p_io = 1;
   960f0:	2301      	movs	r3, #1
   960f2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   960f4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   960f8:	607b      	str	r3, [r7, #4]
					break;
   960fa:	e012      	b.n	96122 <DD_SET_VALVE_17_20_IO+0x5e>
				
					case VALVE_ID18:
					p_io = 2;
   960fc:	2302      	movs	r3, #2
   960fe:	60bb      	str	r3, [r7, #8]
					peri = PC;
   96100:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96104:	607b      	str	r3, [r7, #4]
					break;
   96106:	e00c      	b.n	96122 <DD_SET_VALVE_17_20_IO+0x5e>
				
					case VALVE_ID19:
					p_io = 3;
   96108:	2303      	movs	r3, #3
   9610a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9610c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96110:	607b      	str	r3, [r7, #4]
					break;
   96112:	e006      	b.n	96122 <DD_SET_VALVE_17_20_IO+0x5e>
				
					case VALVE_ID20:
					p_io = 4;
   96114:	2304      	movs	r3, #4
   96116:	60bb      	str	r3, [r7, #8]
					peri = PC;
   96118:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9611c:	607b      	str	r3, [r7, #4]
					break;
   9611e:	e000      	b.n	96122 <DD_SET_VALVE_17_20_IO+0x5e>
// 					p_io = 16;
// 					peri = PC;
// 					break;
				
					default:
					break;
   96120:	bf00      	nop
			}
					if (dd_valve_port_17_20 & 1<< count-17 )
   96122:	4b0f      	ldr	r3, [pc, #60]	; (96160 <DD_SET_VALVE_17_20_IO+0x9c>)
   96124:	881b      	ldrh	r3, [r3, #0]
   96126:	461a      	mov	r2, r3
   96128:	7bfb      	ldrb	r3, [r7, #15]
   9612a:	3b11      	subs	r3, #17
   9612c:	fa42 f303 	asr.w	r3, r2, r3
   96130:	f003 0301 	and.w	r3, r3, #1
   96134:	2b00      	cmp	r3, #0
   96136:	d004      	beq.n	96142 <DD_SET_VALVE_17_20_IO+0x7e>
	
					{

						DD_RESET_PIO(peri,p_io);
   96138:	68b9      	ldr	r1, [r7, #8]
   9613a:	6878      	ldr	r0, [r7, #4]
   9613c:	4b09      	ldr	r3, [pc, #36]	; (96164 <DD_SET_VALVE_17_20_IO+0xa0>)
   9613e:	4798      	blx	r3
   96140:	e003      	b.n	9614a <DD_SET_VALVE_17_20_IO+0x86>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   96142:	68b9      	ldr	r1, [r7, #8]
   96144:	6878      	ldr	r0, [r7, #4]
   96146:	4b08      	ldr	r3, [pc, #32]	; (96168 <DD_SET_VALVE_17_20_IO+0xa4>)
   96148:	4798      	blx	r3
			}
				
		count++;
   9614a:	7bfb      	ldrb	r3, [r7, #15]
   9614c:	3301      	adds	r3, #1
   9614e:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
		uint32_t p_io, peri;
		while (count <= 20)  // 32
   96150:	7bfb      	ldrb	r3, [r7, #15]
   96152:	2b14      	cmp	r3, #20
   96154:	d9bc      	bls.n	960d0 <DD_SET_VALVE_17_20_IO+0xc>
			}
				
		count++;
	}
	
	return 0;
   96156:	2300      	movs	r3, #0
}
   96158:	4618      	mov	r0, r3
   9615a:	3710      	adds	r7, #16
   9615c:	46bd      	mov	sp, r7
   9615e:	bd80      	pop	{r7, pc}
   96160:	2007270e 	.word	0x2007270e
   96164:	00094919 	.word	0x00094919
   96168:	00094895 	.word	0x00094895

0009616c <DD_SET_VALVE_21_32_IO>:

uint8_t DD_SET_VALVE_21_32_IO()
{
   9616c:	b580      	push	{r7, lr}
   9616e:	b084      	sub	sp, #16
   96170:	af00      	add	r7, sp, #0
	uint8_t count = 29;
   96172:	231d      	movs	r3, #29
   96174:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	while (count <= 32)  // 32
   96176:	e03f      	b.n	961f8 <DD_SET_VALVE_21_32_IO+0x8c>
	{
		switch (count)
   96178:	7bfb      	ldrb	r3, [r7, #15]
   9617a:	3b1d      	subs	r3, #29
   9617c:	2b03      	cmp	r3, #3
   9617e:	d823      	bhi.n	961c8 <DD_SET_VALVE_21_32_IO+0x5c>
   96180:	a201      	add	r2, pc, #4	; (adr r2, 96188 <DD_SET_VALVE_21_32_IO+0x1c>)
   96182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96186:	bf00      	nop
   96188:	00096199 	.word	0x00096199
   9618c:	000961a5 	.word	0x000961a5
   96190:	000961b1 	.word	0x000961b1
   96194:	000961bd 	.word	0x000961bd
		{
						
			case ALARM_BUZZER:
			p_io = 13;
   96198:	230d      	movs	r3, #13
   9619a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9619c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   961a0:	607b      	str	r3, [r7, #4]
			break;
   961a2:	e012      	b.n	961ca <DD_SET_VALVE_21_32_IO+0x5e>
			case ALARM_RED:
			p_io = 14;
   961a4:	230e      	movs	r3, #14
   961a6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   961a8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   961ac:	607b      	str	r3, [r7, #4]
			break;
   961ae:	e00c      	b.n	961ca <DD_SET_VALVE_21_32_IO+0x5e>
			case ALARM_AMBER:
			p_io = 15;
   961b0:	230f      	movs	r3, #15
   961b2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   961b4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   961b8:	607b      	str	r3, [r7, #4]
			break;
   961ba:	e006      	b.n	961ca <DD_SET_VALVE_21_32_IO+0x5e>
			
			case ALARM_GREEN:
			p_io = 16;
   961bc:	2310      	movs	r3, #16
   961be:	60bb      	str	r3, [r7, #8]
			peri = PC;
   961c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   961c4:	607b      	str	r3, [r7, #4]
			break;
   961c6:	e000      	b.n	961ca <DD_SET_VALVE_21_32_IO+0x5e>
			
			default:
			break;
   961c8:	bf00      	nop
		}
		if (dd_valve_port_21_32 & 1<< count-29 )
   961ca:	4b0f      	ldr	r3, [pc, #60]	; (96208 <DD_SET_VALVE_21_32_IO+0x9c>)
   961cc:	881b      	ldrh	r3, [r3, #0]
   961ce:	461a      	mov	r2, r3
   961d0:	7bfb      	ldrb	r3, [r7, #15]
   961d2:	3b1d      	subs	r3, #29
   961d4:	fa42 f303 	asr.w	r3, r2, r3
   961d8:	f003 0301 	and.w	r3, r3, #1
   961dc:	2b00      	cmp	r3, #0
   961de:	d004      	beq.n	961ea <DD_SET_VALVE_21_32_IO+0x7e>
		
		{

			DD_RESET_PIO(peri,p_io);
   961e0:	68b9      	ldr	r1, [r7, #8]
   961e2:	6878      	ldr	r0, [r7, #4]
   961e4:	4b09      	ldr	r3, [pc, #36]	; (9620c <DD_SET_VALVE_21_32_IO+0xa0>)
   961e6:	4798      	blx	r3
   961e8:	e003      	b.n	961f2 <DD_SET_VALVE_21_32_IO+0x86>
		}
		else
		{
			DD_SET_PIO(peri,p_io);
   961ea:	68b9      	ldr	r1, [r7, #8]
   961ec:	6878      	ldr	r0, [r7, #4]
   961ee:	4b08      	ldr	r3, [pc, #32]	; (96210 <DD_SET_VALVE_21_32_IO+0xa4>)
   961f0:	4798      	blx	r3
		}
		
		count++;
   961f2:	7bfb      	ldrb	r3, [r7, #15]
   961f4:	3301      	adds	r3, #1
   961f6:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_21_32_IO()
{
	uint8_t count = 29;
	uint32_t p_io, peri;
	while (count <= 32)  // 32
   961f8:	7bfb      	ldrb	r3, [r7, #15]
   961fa:	2b20      	cmp	r3, #32
   961fc:	d9bc      	bls.n	96178 <DD_SET_VALVE_21_32_IO+0xc>
		}
		
		count++;
	}
	
	return 0;
   961fe:	2300      	movs	r3, #0
	
}
   96200:	4618      	mov	r0, r3
   96202:	3710      	adds	r7, #16
   96204:	46bd      	mov	sp, r7
   96206:	bd80      	pop	{r7, pc}
   96208:	20072710 	.word	0x20072710
   9620c:	00094919 	.word	0x00094919
   96210:	00094895 	.word	0x00094895

00096214 <DD_SET_CLAMP>:




uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   96214:	b580      	push	{r7, lr}
   96216:	b082      	sub	sp, #8
   96218:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9621a:	231b      	movs	r3, #27
   9621c:	607b      	str	r3, [r7, #4]
	peri = PC;
   9621e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96222:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   96224:	6879      	ldr	r1, [r7, #4]
   96226:	6838      	ldr	r0, [r7, #0]
   96228:	4b03      	ldr	r3, [pc, #12]	; (96238 <DD_SET_CLAMP+0x24>)
   9622a:	4798      	blx	r3
	
	return 0;
   9622c:	2300      	movs	r3, #0
}
   9622e:	4618      	mov	r0, r3
   96230:	3708      	adds	r7, #8
   96232:	46bd      	mov	sp, r7
   96234:	bd80      	pop	{r7, pc}
   96236:	bf00      	nop
   96238:	00094895 	.word	0x00094895

0009623c <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   9623c:	b580      	push	{r7, lr}
   9623e:	b082      	sub	sp, #8
   96240:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   96242:	231b      	movs	r3, #27
   96244:	607b      	str	r3, [r7, #4]
	peri = PC;
   96246:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9624a:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   9624c:	6879      	ldr	r1, [r7, #4]
   9624e:	6838      	ldr	r0, [r7, #0]
   96250:	4b03      	ldr	r3, [pc, #12]	; (96260 <DD_RESET_CLAMP+0x24>)
   96252:	4798      	blx	r3
	
	return 0;
   96254:	2300      	movs	r3, #0
}
   96256:	4618      	mov	r0, r3
   96258:	3708      	adds	r7, #8
   9625a:	46bd      	mov	sp, r7
   9625c:	bd80      	pop	{r7, pc}
   9625e:	bf00      	nop
   96260:	00094919 	.word	0x00094919

00096264 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   96264:	b580      	push	{r7, lr}
   96266:	b086      	sub	sp, #24
   96268:	af00      	add	r7, sp, #0
   9626a:	4603      	mov	r3, r0
   9626c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   9626e:	2300      	movs	r3, #0
   96270:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   96272:	79fb      	ldrb	r3, [r7, #7]
   96274:	3b01      	subs	r3, #1
   96276:	2b24      	cmp	r3, #36	; 0x24
   96278:	f200 812c 	bhi.w	964d4 <DD_RD_SENSIN+0x270>
   9627c:	a201      	add	r2, pc, #4	; (adr r2, 96284 <DD_RD_SENSIN+0x20>)
   9627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96282:	bf00      	nop
   96284:	00096319 	.word	0x00096319
   96288:	00096325 	.word	0x00096325
   9628c:	00096331 	.word	0x00096331
   96290:	0009633d 	.word	0x0009633d
   96294:	00096349 	.word	0x00096349
   96298:	00096355 	.word	0x00096355
   9629c:	00096361 	.word	0x00096361
   962a0:	0009636d 	.word	0x0009636d
   962a4:	00096379 	.word	0x00096379
   962a8:	00096385 	.word	0x00096385
   962ac:	00096391 	.word	0x00096391
   962b0:	0009639d 	.word	0x0009639d
   962b4:	000963a9 	.word	0x000963a9
   962b8:	000963b5 	.word	0x000963b5
   962bc:	000963c1 	.word	0x000963c1
   962c0:	000963cd 	.word	0x000963cd
   962c4:	000963d9 	.word	0x000963d9
   962c8:	000963e5 	.word	0x000963e5
   962cc:	000963f1 	.word	0x000963f1
   962d0:	000963fd 	.word	0x000963fd
   962d4:	00096409 	.word	0x00096409
   962d8:	00096415 	.word	0x00096415
   962dc:	00096421 	.word	0x00096421
   962e0:	0009642d 	.word	0x0009642d
   962e4:	00096439 	.word	0x00096439
   962e8:	00096445 	.word	0x00096445
   962ec:	00096451 	.word	0x00096451
   962f0:	0009645d 	.word	0x0009645d
   962f4:	00096469 	.word	0x00096469
   962f8:	00096475 	.word	0x00096475
   962fc:	00096481 	.word	0x00096481
   96300:	0009648d 	.word	0x0009648d
   96304:	00096499 	.word	0x00096499
   96308:	000964a5 	.word	0x000964a5
   9630c:	000964b1 	.word	0x000964b1
   96310:	000964bd 	.word	0x000964bd
   96314:	000964c9 	.word	0x000964c9
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   96318:	2307      	movs	r3, #7
   9631a:	617b      	str	r3, [r7, #20]
		peri = PA;
   9631c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96320:	613b      	str	r3, [r7, #16]
		break;
   96322:	e0d8      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   96324:	2319      	movs	r3, #25
   96326:	617b      	str	r3, [r7, #20]
		peri = PC;
   96328:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9632c:	613b      	str	r3, [r7, #16]
		break;
   9632e:	e0d2      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   96330:	230c      	movs	r3, #12
   96332:	617b      	str	r3, [r7, #20]
		peri = PB;
   96334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96338:	613b      	str	r3, [r7, #16]
		break;
   9633a:	e0cc      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   9633c:	2300      	movs	r3, #0
   9633e:	617b      	str	r3, [r7, #20]
		peri = PD;
   96340:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96344:	613b      	str	r3, [r7, #16]
		break;
   96346:	e0c6      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   96348:	231e      	movs	r3, #30
   9634a:	617b      	str	r3, [r7, #20]
		peri = PC;
   9634c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96350:	613b      	str	r3, [r7, #16]
		break;
   96352:	e0c0      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   96354:	2306      	movs	r3, #6
   96356:	617b      	str	r3, [r7, #20]
		peri = PD;
   96358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9635c:	613b      	str	r3, [r7, #16]
		break;
   9635e:	e0ba      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   96360:	2309      	movs	r3, #9
   96362:	617b      	str	r3, [r7, #20]
		peri = PD;
   96364:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96368:	613b      	str	r3, [r7, #16]
		break;
   9636a:	e0b4      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   9636c:	2305      	movs	r3, #5
   9636e:	617b      	str	r3, [r7, #20]
		peri = PD;
   96370:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   96374:	613b      	str	r3, [r7, #16]
		break;
   96376:	e0ae      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   96378:	2308      	movs	r3, #8
   9637a:	617b      	str	r3, [r7, #20]
		peri = PB;
   9637c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96380:	613b      	str	r3, [r7, #16]
		break;
   96382:	e0a8      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   96384:	2312      	movs	r3, #18
   96386:	617b      	str	r3, [r7, #20]
		peri = PB;
   96388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9638c:	613b      	str	r3, [r7, #16]
		break;
   9638e:	e0a2      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   96390:	231a      	movs	r3, #26
   96392:	617b      	str	r3, [r7, #20]
		peri = PC;
   96394:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96398:	613b      	str	r3, [r7, #16]
		break;
   9639a:	e09c      	b.n	964d6 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   9639c:	2313      	movs	r3, #19
   9639e:	617b      	str	r3, [r7, #20]
		peri =PA;
   963a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   963a4:	613b      	str	r3, [r7, #16]
		break;
   963a6:	e096      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   963a8:	2303      	movs	r3, #3
   963aa:	617b      	str	r3, [r7, #20]
		peri =PD;
   963ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   963b0:	613b      	str	r3, [r7, #16]
		break;
   963b2:	e090      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   963b4:	2310      	movs	r3, #16
   963b6:	617b      	str	r3, [r7, #20]
		peri =PB;
   963b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   963bc:	613b      	str	r3, [r7, #16]
		break;
   963be:	e08a      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   963c0:	2312      	movs	r3, #18
   963c2:	617b      	str	r3, [r7, #20]
		peri =PC;
   963c4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   963c8:	613b      	str	r3, [r7, #16]
		break;
   963ca:	e084      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   963cc:	2304      	movs	r3, #4
   963ce:	617b      	str	r3, [r7, #20]
		peri =PD;
   963d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   963d4:	613b      	str	r3, [r7, #16]
		break;
   963d6:	e07e      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   963d8:	2316      	movs	r3, #22
   963da:	617b      	str	r3, [r7, #20]
		peri =PB;
   963dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   963e0:	613b      	str	r3, [r7, #16]
		break;
   963e2:	e078      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   963e4:	230a      	movs	r3, #10
   963e6:	617b      	str	r3, [r7, #20]
		peri =PD;
   963e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   963ec:	613b      	str	r3, [r7, #16]
		break;
   963ee:	e072      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   963f0:	2317      	movs	r3, #23
   963f2:	617b      	str	r3, [r7, #20]
 		peri =PB;
   963f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   963f8:	613b      	str	r3, [r7, #16]
		break;
   963fa:	e06c      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   963fc:	2309      	movs	r3, #9
   963fe:	617b      	str	r3, [r7, #20]
		peri =PB;
   96400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96404:	613b      	str	r3, [r7, #16]
		
		break;
   96406:	e066      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   96408:	2319      	movs	r3, #25
   9640a:	617b      	str	r3, [r7, #20]
		peri =PB;
   9640c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96410:	613b      	str	r3, [r7, #16]
		break;
   96412:	e060      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   96414:	2318      	movs	r3, #24
   96416:	617b      	str	r3, [r7, #20]
		peri =PB;
   96418:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9641c:	613b      	str	r3, [r7, #16]
		break;
   9641e:	e05a      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   96420:	231b      	movs	r3, #27
   96422:	617b      	str	r3, [r7, #20]
			peri =PB;
   96424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   96428:	613b      	str	r3, [r7, #16]
		break;
   9642a:	e054      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   9642c:	2318      	movs	r3, #24
   9642e:	617b      	str	r3, [r7, #20]
			peri =PC;
   96430:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96434:	613b      	str	r3, [r7, #16]
		break;
   96436:	e04e      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   96438:	230e      	movs	r3, #14
   9643a:	617b      	str	r3, [r7, #20]
		peri =PA;
   9643c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96440:	613b      	str	r3, [r7, #16]
		break;
   96442:	e048      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   96444:	230f      	movs	r3, #15
   96446:	617b      	str	r3, [r7, #20]
			peri =PB;
   96448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9644c:	613b      	str	r3, [r7, #16]
		break;
   9644e:	e042      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   96450:	231d      	movs	r3, #29
   96452:	617b      	str	r3, [r7, #20]
		peri =PC;
   96454:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96458:	613b      	str	r3, [r7, #16]
		break;
   9645a:	e03c      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   9645c:	2314      	movs	r3, #20
   9645e:	617b      	str	r3, [r7, #20]
		peri =PC;
   96460:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96464:	613b      	str	r3, [r7, #16]
		break;
   96466:	e036      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   96468:	2311      	movs	r3, #17
   9646a:	617b      	str	r3, [r7, #20]
		peri =PC;
   9646c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   96470:	613b      	str	r3, [r7, #16]
		break;
   96472:	e030      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   96474:	2313      	movs	r3, #19
   96476:	617b      	str	r3, [r7, #20]
		peri =PC;
   96478:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9647c:	613b      	str	r3, [r7, #16]
		break;
   9647e:	e02a      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   96480:	2310      	movs	r3, #16
   96482:	617b      	str	r3, [r7, #20]
		peri =PA;
   96484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96488:	613b      	str	r3, [r7, #16]
		break;
   9648a:	e024      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   9648c:	2318      	movs	r3, #24
   9648e:	617b      	str	r3, [r7, #20]
		peri =PA;
   96490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   96494:	613b      	str	r3, [r7, #16]
		break;
   96496:	e01e      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   96498:	2315      	movs	r3, #21
   9649a:	617b      	str	r3, [r7, #20]
		peri =PB;
   9649c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   964a0:	613b      	str	r3, [r7, #16]
		break;
   964a2:	e018      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   964a4:	230a      	movs	r3, #10
   964a6:	617b      	str	r3, [r7, #20]
		peri =PA;
   964a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   964ac:	613b      	str	r3, [r7, #16]
		break;
   964ae:	e012      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   964b0:	2302      	movs	r3, #2
   964b2:	617b      	str	r3, [r7, #20]
		peri =PA;
   964b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   964b8:	613b      	str	r3, [r7, #16]
		break;
   964ba:	e00c      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   964bc:	231a      	movs	r3, #26
   964be:	617b      	str	r3, [r7, #20]
		peri =PB;
   964c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   964c4:	613b      	str	r3, [r7, #16]
		break;
   964c6:	e006      	b.n	964d6 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   964c8:	2304      	movs	r3, #4
   964ca:	617b      	str	r3, [r7, #20]
			peri =PA;
   964cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   964d0:	613b      	str	r3, [r7, #16]
		break;
   964d2:	e000      	b.n	964d6 <DD_RD_SENSIN+0x272>
		default:
		break;
   964d4:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   964d6:	6979      	ldr	r1, [r7, #20]
   964d8:	6938      	ldr	r0, [r7, #16]
   964da:	4b04      	ldr	r3, [pc, #16]	; (964ec <DD_RD_SENSIN+0x288>)
   964dc:	4798      	blx	r3
   964de:	4603      	mov	r3, r0
   964e0:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   964e2:	7bfb      	ldrb	r3, [r7, #15]
	
}
   964e4:	4618      	mov	r0, r3
   964e6:	3718      	adds	r7, #24
   964e8:	46bd      	mov	sp, r7
   964ea:	bd80      	pop	{r7, pc}
   964ec:	0009499d 	.word	0x0009499d

000964f0 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   964f0:	b580      	push	{r7, lr}
   964f2:	b084      	sub	sp, #16
   964f4:	af00      	add	r7, sp, #0
   964f6:	4603      	mov	r3, r0
   964f8:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   964fa:	2301      	movs	r3, #1
   964fc:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   964fe:	79fb      	ldrb	r3, [r7, #7]
   96500:	4618      	mov	r0, r3
   96502:	4b04      	ldr	r3, [pc, #16]	; (96514 <DD_CONSOLE_TX+0x24>)
   96504:	4798      	blx	r3
   96506:	4603      	mov	r3, r0
   96508:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   9650a:	7bfb      	ldrb	r3, [r7, #15]
}
   9650c:	4618      	mov	r0, r3
   9650e:	3710      	adds	r7, #16
   96510:	46bd      	mov	sp, r7
   96512:	bd80      	pop	{r7, pc}
   96514:	0009731d 	.word	0x0009731d

00096518 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   96518:	b580      	push	{r7, lr}
   9651a:	b084      	sub	sp, #16
   9651c:	af00      	add	r7, sp, #0
   9651e:	4603      	mov	r3, r0
   96520:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   96522:	79fb      	ldrb	r3, [r7, #7]
   96524:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   96526:	7bfb      	ldrb	r3, [r7, #15]
   96528:	4618      	mov	r0, r3
   9652a:	4b03      	ldr	r3, [pc, #12]	; (96538 <DD_CONSOLE_RX+0x20>)
   9652c:	4798      	blx	r3
	
	
	return 1;
   9652e:	2301      	movs	r3, #1
}
   96530:	4618      	mov	r0, r3
   96532:	3710      	adds	r7, #16
   96534:	46bd      	mov	sp, r7
   96536:	bd80      	pop	{r7, pc}
   96538:	0009784d 	.word	0x0009784d

0009653c <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   9653c:	b590      	push	{r4, r7, lr}
   9653e:	b089      	sub	sp, #36	; 0x24
   96540:	af00      	add	r7, sp, #0
   96542:	4603      	mov	r3, r0
   96544:	460a      	mov	r2, r1
   96546:	71fb      	strb	r3, [r7, #7]
   96548:	4613      	mov	r3, r2
   9654a:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   9654c:	2300      	movs	r3, #0
   9654e:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   96550:	79bb      	ldrb	r3, [r7, #6]
   96552:	2201      	movs	r2, #1
   96554:	fb92 f3f3 	sdiv	r3, r2, r3
   96558:	01db      	lsls	r3, r3, #7
   9655a:	4a1b      	ldr	r2, [pc, #108]	; (965c8 <DD_CONFIG_TIMER+0x8c>)
   9655c:	fb92 f3f3 	sdiv	r3, r2, r3
   96560:	1e5a      	subs	r2, r3, #1
   96562:	4b1a      	ldr	r3, [pc, #104]	; (965cc <DD_CONFIG_TIMER+0x90>)
   96564:	4610      	mov	r0, r2
   96566:	4798      	blx	r3
   96568:	4603      	mov	r3, r0
   9656a:	460c      	mov	r4, r1
   9656c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   96570:	4b17      	ldr	r3, [pc, #92]	; (965d0 <DD_CONFIG_TIMER+0x94>)
   96572:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   96576:	4798      	blx	r3
   96578:	4603      	mov	r3, r0
   9657a:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   9657c:	79fb      	ldrb	r3, [r7, #7]
   9657e:	2b01      	cmp	r3, #1
   96580:	d00a      	beq.n	96598 <DD_CONFIG_TIMER+0x5c>
   96582:	2b02      	cmp	r3, #2
   96584:	d011      	beq.n	965aa <DD_CONFIG_TIMER+0x6e>
   96586:	2b00      	cmp	r3, #0
   96588:	d118      	bne.n	965bc <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   9658a:	68fb      	ldr	r3, [r7, #12]
   9658c:	221b      	movs	r2, #27
   9658e:	69f9      	ldr	r1, [r7, #28]
   96590:	4810      	ldr	r0, [pc, #64]	; (965d4 <DD_CONFIG_TIMER+0x98>)
   96592:	4c11      	ldr	r4, [pc, #68]	; (965d8 <DD_CONFIG_TIMER+0x9c>)
   96594:	47a0      	blx	r4
		break;
   96596:	e011      	b.n	965bc <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   96598:	4b10      	ldr	r3, [pc, #64]	; (965dc <DD_CONFIG_TIMER+0xa0>)
   9659a:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   9659c:	68fb      	ldr	r3, [r7, #12]
   9659e:	221e      	movs	r2, #30
   965a0:	69f9      	ldr	r1, [r7, #28]
   965a2:	480f      	ldr	r0, [pc, #60]	; (965e0 <DD_CONFIG_TIMER+0xa4>)
   965a4:	4c0c      	ldr	r4, [pc, #48]	; (965d8 <DD_CONFIG_TIMER+0x9c>)
   965a6:	47a0      	blx	r4
		break;
   965a8:	e008      	b.n	965bc <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   965aa:	4b0e      	ldr	r3, [pc, #56]	; (965e4 <DD_CONFIG_TIMER+0xa8>)
   965ac:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   965ae:	68fb      	ldr	r3, [r7, #12]
   965b0:	2221      	movs	r2, #33	; 0x21
   965b2:	69f9      	ldr	r1, [r7, #28]
   965b4:	480c      	ldr	r0, [pc, #48]	; (965e8 <DD_CONFIG_TIMER+0xac>)
   965b6:	4c08      	ldr	r4, [pc, #32]	; (965d8 <DD_CONFIG_TIMER+0x9c>)
   965b8:	47a0      	blx	r4
		
		break;
   965ba:	bf00      	nop
		
	}
}
   965bc:	bf00      	nop
   965be:	4618      	mov	r0, r3
   965c0:	3724      	adds	r7, #36	; 0x24
   965c2:	46bd      	mov	sp, r7
   965c4:	bd90      	pop	{r4, r7, pc}
   965c6:	bf00      	nop
   965c8:	0501bd00 	.word	0x0501bd00
   965cc:	000a2b05 	.word	0x000a2b05
   965d0:	000a3155 	.word	0x000a3155
   965d4:	40080000 	.word	0x40080000
   965d8:	00096e19 	.word	0x00096e19
   965dc:	00321161 	.word	0x00321161
   965e0:	40084000 	.word	0x40084000
   965e4:	001e0a6d 	.word	0x001e0a6d
   965e8:	40088000 	.word	0x40088000

000965ec <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   965ec:	b580      	push	{r7, lr}
   965ee:	b082      	sub	sp, #8
   965f0:	af00      	add	r7, sp, #0
   965f2:	4603      	mov	r3, r0
   965f4:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   965f6:	79fb      	ldrb	r3, [r7, #7]
   965f8:	3b01      	subs	r3, #1
   965fa:	2b12      	cmp	r3, #18
   965fc:	f200 82df 	bhi.w	96bbe <DD_SET_FLOW_PATH+0x5d2>
   96600:	a201      	add	r2, pc, #4	; (adr r2, 96608 <DD_SET_FLOW_PATH+0x1c>)
   96602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96606:	bf00      	nop
   96608:	00096707 	.word	0x00096707
   9660c:	00096781 	.word	0x00096781
   96610:	000967fb 	.word	0x000967fb
   96614:	00096857 	.word	0x00096857
   96618:	000968c9 	.word	0x000968c9
   9661c:	0009697b 	.word	0x0009697b
   96620:	00096a2d 	.word	0x00096a2d
   96624:	00096bbf 	.word	0x00096bbf
   96628:	00096bbf 	.word	0x00096bbf
   9662c:	00096a8f 	.word	0x00096a8f
   96630:	00096ad9 	.word	0x00096ad9
   96634:	00096bbf 	.word	0x00096bbf
   96638:	00096bbf 	.word	0x00096bbf
   9663c:	00096bbf 	.word	0x00096bbf
   96640:	00096bbf 	.word	0x00096bbf
   96644:	00096bbf 	.word	0x00096bbf
   96648:	00096687 	.word	0x00096687
   9664c:	00096b3d 	.word	0x00096b3d
   96650:	00096655 	.word	0x00096655
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   96654:	2005      	movs	r0, #5
   96656:	4b97      	ldr	r3, [pc, #604]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96658:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   9665a:	2006      	movs	r0, #6
   9665c:	4b95      	ldr	r3, [pc, #596]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9665e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   96660:	2007      	movs	r0, #7
   96662:	4b94      	ldr	r3, [pc, #592]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96664:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   96666:	2008      	movs	r0, #8
   96668:	4b92      	ldr	r3, [pc, #584]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9666a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   9666c:	2009      	movs	r0, #9
   9666e:	4b91      	ldr	r3, [pc, #580]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96670:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   96672:	200a      	movs	r0, #10
   96674:	4b8f      	ldr	r3, [pc, #572]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96676:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   96678:	200b      	movs	r0, #11
   9667a:	4b8e      	ldr	r3, [pc, #568]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9667c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   9667e:	200c      	movs	r0, #12
   96680:	4b8c      	ldr	r3, [pc, #560]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96682:	4798      	blx	r3
		break;
   96684:	e29b      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   96686:	2001      	movs	r0, #1
   96688:	4b8a      	ldr	r3, [pc, #552]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9668a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   9668c:	2002      	movs	r0, #2
   9668e:	4b89      	ldr	r3, [pc, #548]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96690:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   96692:	2003      	movs	r0, #3
   96694:	4b87      	ldr	r3, [pc, #540]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96696:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   96698:	2004      	movs	r0, #4
   9669a:	4b86      	ldr	r3, [pc, #536]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9669c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9669e:	2005      	movs	r0, #5
   966a0:	4b84      	ldr	r3, [pc, #528]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966a2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   966a4:	2006      	movs	r0, #6
   966a6:	4b83      	ldr	r3, [pc, #524]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966a8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   966aa:	2007      	movs	r0, #7
   966ac:	4b81      	ldr	r3, [pc, #516]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966ae:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   966b0:	2008      	movs	r0, #8
   966b2:	4b80      	ldr	r3, [pc, #512]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966b4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   966b6:	2009      	movs	r0, #9
   966b8:	4b7e      	ldr	r3, [pc, #504]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966ba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   966bc:	200a      	movs	r0, #10
   966be:	4b7d      	ldr	r3, [pc, #500]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966c0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   966c2:	200b      	movs	r0, #11
   966c4:	4b7b      	ldr	r3, [pc, #492]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966c6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   966c8:	200c      	movs	r0, #12
   966ca:	4b7a      	ldr	r3, [pc, #488]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966cc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   966ce:	200d      	movs	r0, #13
   966d0:	4b78      	ldr	r3, [pc, #480]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966d2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   966d4:	200e      	movs	r0, #14
   966d6:	4b77      	ldr	r3, [pc, #476]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966d8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   966da:	200f      	movs	r0, #15
   966dc:	4b75      	ldr	r3, [pc, #468]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966de:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   966e0:	2010      	movs	r0, #16
   966e2:	4b74      	ldr	r3, [pc, #464]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966e4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   966e6:	2011      	movs	r0, #17
   966e8:	4b72      	ldr	r3, [pc, #456]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966ea:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   966ec:	2012      	movs	r0, #18
   966ee:	4b71      	ldr	r3, [pc, #452]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966f0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   966f2:	2013      	movs	r0, #19
   966f4:	4b6f      	ldr	r3, [pc, #444]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   966f6:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   966f8:	2002      	movs	r0, #2
   966fa:	4b6f      	ldr	r3, [pc, #444]	; (968b8 <DD_SET_FLOW_PATH+0x2cc>)
   966fc:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   966fe:	2001      	movs	r0, #1
   96700:	4b6d      	ldr	r3, [pc, #436]	; (968b8 <DD_SET_FLOW_PATH+0x2cc>)
   96702:	4798      	blx	r3
				
				
		break;
   96704:	e25b      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   96706:	2001      	movs	r0, #1
   96708:	4b6c      	ldr	r3, [pc, #432]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9670a:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   9670c:	2003      	movs	r0, #3
   9670e:	4b69      	ldr	r3, [pc, #420]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96710:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   96712:	2004      	movs	r0, #4
   96714:	4b67      	ldr	r3, [pc, #412]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96716:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   96718:	2005      	movs	r0, #5
   9671a:	4b66      	ldr	r3, [pc, #408]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9671c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9671e:	2006      	movs	r0, #6
   96720:	4b64      	ldr	r3, [pc, #400]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96722:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   96724:	2007      	movs	r0, #7
   96726:	4b63      	ldr	r3, [pc, #396]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96728:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9672a:	2008      	movs	r0, #8
   9672c:	4b61      	ldr	r3, [pc, #388]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9672e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   96730:	2009      	movs	r0, #9
   96732:	4b60      	ldr	r3, [pc, #384]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96734:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   96736:	200a      	movs	r0, #10
   96738:	4b5e      	ldr	r3, [pc, #376]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9673a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9673c:	200b      	movs	r0, #11
   9673e:	4b5d      	ldr	r3, [pc, #372]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96740:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   96742:	200c      	movs	r0, #12
   96744:	4b5b      	ldr	r3, [pc, #364]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96746:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   96748:	200d      	movs	r0, #13
   9674a:	4b5a      	ldr	r3, [pc, #360]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9674c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9674e:	200e      	movs	r0, #14
   96750:	4b58      	ldr	r3, [pc, #352]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96752:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   96754:	200f      	movs	r0, #15
   96756:	4b59      	ldr	r3, [pc, #356]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96758:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   9675a:	2010      	movs	r0, #16
   9675c:	4b55      	ldr	r3, [pc, #340]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9675e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   96760:	2011      	movs	r0, #17
   96762:	4b54      	ldr	r3, [pc, #336]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96764:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   96766:	2012      	movs	r0, #18
   96768:	4b54      	ldr	r3, [pc, #336]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9676a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9676c:	2013      	movs	r0, #19
   9676e:	4b51      	ldr	r3, [pc, #324]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96770:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   96772:	2002      	movs	r0, #2
   96774:	4b50      	ldr	r3, [pc, #320]	; (968b8 <DD_SET_FLOW_PATH+0x2cc>)
   96776:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   96778:	2001      	movs	r0, #1
   9677a:	4b4f      	ldr	r3, [pc, #316]	; (968b8 <DD_SET_FLOW_PATH+0x2cc>)
   9677c:	4798      	blx	r3
		
		
		break;
   9677e:	e21e      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   96780:	2001      	movs	r0, #1
   96782:	4b4e      	ldr	r3, [pc, #312]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96784:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   96786:	2003      	movs	r0, #3
   96788:	4b4a      	ldr	r3, [pc, #296]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9678a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9678c:	2004      	movs	r0, #4
   9678e:	4b49      	ldr	r3, [pc, #292]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96790:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   96792:	2005      	movs	r0, #5
   96794:	4b47      	ldr	r3, [pc, #284]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96796:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   96798:	2006      	movs	r0, #6
   9679a:	4b46      	ldr	r3, [pc, #280]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9679c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9679e:	2007      	movs	r0, #7
   967a0:	4b44      	ldr	r3, [pc, #272]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967a2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   967a4:	2008      	movs	r0, #8
   967a6:	4b43      	ldr	r3, [pc, #268]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967a8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   967aa:	2009      	movs	r0, #9
   967ac:	4b41      	ldr	r3, [pc, #260]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967ae:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   967b0:	200a      	movs	r0, #10
   967b2:	4b40      	ldr	r3, [pc, #256]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967b4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   967b6:	200b      	movs	r0, #11
   967b8:	4b3e      	ldr	r3, [pc, #248]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967ba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   967bc:	200c      	movs	r0, #12
   967be:	4b3d      	ldr	r3, [pc, #244]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967c0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   967c2:	200d      	movs	r0, #13
   967c4:	4b3b      	ldr	r3, [pc, #236]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967c6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   967c8:	200e      	movs	r0, #14
   967ca:	4b3a      	ldr	r3, [pc, #232]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967cc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   967ce:	200f      	movs	r0, #15
   967d0:	4b38      	ldr	r3, [pc, #224]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967d2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   967d4:	2010      	movs	r0, #16
   967d6:	4b37      	ldr	r3, [pc, #220]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967d8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   967da:	2011      	movs	r0, #17
   967dc:	4b35      	ldr	r3, [pc, #212]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967de:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   967e0:	2012      	movs	r0, #18
   967e2:	4b36      	ldr	r3, [pc, #216]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   967e4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   967e6:	2013      	movs	r0, #19
   967e8:	4b32      	ldr	r3, [pc, #200]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967ea:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   967ec:	2001      	movs	r0, #1
   967ee:	4b34      	ldr	r3, [pc, #208]	; (968c0 <DD_SET_FLOW_PATH+0x2d4>)
   967f0:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   967f2:	2002      	movs	r0, #2
   967f4:	4b30      	ldr	r3, [pc, #192]	; (968b8 <DD_SET_FLOW_PATH+0x2cc>)
   967f6:	4798      	blx	r3
		
		break;
   967f8:	e1e1      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   967fa:	2005      	movs	r0, #5
   967fc:	4b2d      	ldr	r3, [pc, #180]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   967fe:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   96800:	2008      	movs	r0, #8
   96802:	4b2c      	ldr	r3, [pc, #176]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96804:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   96806:	200a      	movs	r0, #10
   96808:	4b2a      	ldr	r3, [pc, #168]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9680a:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   9680c:	200b      	movs	r0, #11
   9680e:	4b29      	ldr	r3, [pc, #164]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96810:	4798      	blx	r3
				cl_wait(50);
   96812:	2032      	movs	r0, #50	; 0x32
   96814:	4b2b      	ldr	r3, [pc, #172]	; (968c4 <DD_SET_FLOW_PATH+0x2d8>)
   96816:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   96818:	2006      	movs	r0, #6
   9681a:	4b28      	ldr	r3, [pc, #160]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9681c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   9681e:	2007      	movs	r0, #7
   96820:	4b26      	ldr	r3, [pc, #152]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96822:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   96824:	2009      	movs	r0, #9
   96826:	4b25      	ldr	r3, [pc, #148]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96828:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   9682a:	200c      	movs	r0, #12
   9682c:	4b23      	ldr	r3, [pc, #140]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9682e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   96830:	200d      	movs	r0, #13
   96832:	4b20      	ldr	r3, [pc, #128]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96834:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   96836:	200e      	movs	r0, #14
   96838:	4b1e      	ldr	r3, [pc, #120]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9683a:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   9683c:	200f      	movs	r0, #15
   9683e:	4b1f      	ldr	r3, [pc, #124]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96840:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   96842:	2010      	movs	r0, #16
   96844:	4b1b      	ldr	r3, [pc, #108]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96846:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   96848:	2011      	movs	r0, #17
   9684a:	4b1c      	ldr	r3, [pc, #112]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9684c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   9684e:	2012      	movs	r0, #18
   96850:	4b1a      	ldr	r3, [pc, #104]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96852:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   96854:	e1b3      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   96856:	2006      	movs	r0, #6
   96858:	4b16      	ldr	r3, [pc, #88]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9685a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9685c:	2007      	movs	r0, #7
   9685e:	4b15      	ldr	r3, [pc, #84]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96860:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   96862:	2009      	movs	r0, #9
   96864:	4b13      	ldr	r3, [pc, #76]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96866:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   96868:	200c      	movs	r0, #12
   9686a:	4b12      	ldr	r3, [pc, #72]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   9686c:	4798      	blx	r3
		cl_wait(50);
   9686e:	2032      	movs	r0, #50	; 0x32
   96870:	4b14      	ldr	r3, [pc, #80]	; (968c4 <DD_SET_FLOW_PATH+0x2d8>)
   96872:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   96874:	2005      	movs	r0, #5
   96876:	4b11      	ldr	r3, [pc, #68]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96878:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9687a:	2008      	movs	r0, #8
   9687c:	4b0f      	ldr	r3, [pc, #60]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9687e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   96880:	200a      	movs	r0, #10
   96882:	4b0e      	ldr	r3, [pc, #56]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   96884:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   96886:	200b      	movs	r0, #11
   96888:	4b0c      	ldr	r3, [pc, #48]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9688a:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   9688c:	200d      	movs	r0, #13
   9688e:	4b09      	ldr	r3, [pc, #36]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96890:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   96892:	200e      	movs	r0, #14
   96894:	4b07      	ldr	r3, [pc, #28]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   96896:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   96898:	200f      	movs	r0, #15
   9689a:	4b08      	ldr	r3, [pc, #32]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   9689c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9689e:	2010      	movs	r0, #16
   968a0:	4b04      	ldr	r3, [pc, #16]	; (968b4 <DD_SET_FLOW_PATH+0x2c8>)
   968a2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   968a4:	2011      	movs	r0, #17
   968a6:	4b05      	ldr	r3, [pc, #20]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   968a8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   968aa:	2012      	movs	r0, #18
   968ac:	4b03      	ldr	r3, [pc, #12]	; (968bc <DD_SET_FLOW_PATH+0x2d0>)
   968ae:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   968b0:	e185      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
   968b2:	bf00      	nop
   968b4:	00095e35 	.word	0x00095e35
   968b8:	000959f5 	.word	0x000959f5
   968bc:	00095d6d 	.word	0x00095d6d
   968c0:	00095855 	.word	0x00095855
   968c4:	000918fd 	.word	0x000918fd
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   968c8:	2005      	movs	r0, #5
   968ca:	4b96      	ldr	r3, [pc, #600]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   968cc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   968ce:	2008      	movs	r0, #8
   968d0:	4b94      	ldr	r3, [pc, #592]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   968d2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   968d4:	200a      	movs	r0, #10
   968d6:	4b93      	ldr	r3, [pc, #588]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   968d8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   968da:	200b      	movs	r0, #11
   968dc:	4b91      	ldr	r3, [pc, #580]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   968de:	4798      	blx	r3
		cl_wait(100);		
   968e0:	2064      	movs	r0, #100	; 0x64
   968e2:	4b91      	ldr	r3, [pc, #580]	; (96b28 <DD_SET_FLOW_PATH+0x53c>)
   968e4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   968e6:	2006      	movs	r0, #6
   968e8:	4b90      	ldr	r3, [pc, #576]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   968ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   968ec:	2007      	movs	r0, #7
   968ee:	4b8f      	ldr	r3, [pc, #572]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   968f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   968f2:	2009      	movs	r0, #9
   968f4:	4b8d      	ldr	r3, [pc, #564]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   968f6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   968f8:	200c      	movs	r0, #12
   968fa:	4b8c      	ldr	r3, [pc, #560]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   968fc:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   968fe:	4b8c      	ldr	r3, [pc, #560]	; (96b30 <DD_SET_FLOW_PATH+0x544>)
   96900:	781b      	ldrb	r3, [r3, #0]
   96902:	2b00      	cmp	r3, #0
   96904:	d010      	beq.n	96928 <DD_SET_FLOW_PATH+0x33c>
   96906:	4b8b      	ldr	r3, [pc, #556]	; (96b34 <DD_SET_FLOW_PATH+0x548>)
   96908:	781b      	ldrb	r3, [r3, #0]
   9690a:	f083 0301 	eor.w	r3, r3, #1
   9690e:	b2db      	uxtb	r3, r3
   96910:	2b00      	cmp	r3, #0
   96912:	d009      	beq.n	96928 <DD_SET_FLOW_PATH+0x33c>
		{
			DD_SET_VALVE (VALVE_ID15);
   96914:	200f      	movs	r0, #15
   96916:	4b85      	ldr	r3, [pc, #532]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96918:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9691a:	200d      	movs	r0, #13
   9691c:	4b81      	ldr	r3, [pc, #516]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   9691e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   96920:	200e      	movs	r0, #14
   96922:	4b80      	ldr	r3, [pc, #512]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96924:	4798      	blx	r3
   96926:	e016      	b.n	96956 <DD_SET_FLOW_PATH+0x36a>
		}
		else if (isouf)
   96928:	4b82      	ldr	r3, [pc, #520]	; (96b34 <DD_SET_FLOW_PATH+0x548>)
   9692a:	781b      	ldrb	r3, [r3, #0]
   9692c:	2b00      	cmp	r3, #0
   9692e:	d009      	beq.n	96944 <DD_SET_FLOW_PATH+0x358>
		{
			DD_SET_VALVE (VALVE_ID15);
   96930:	200f      	movs	r0, #15
   96932:	4b7e      	ldr	r3, [pc, #504]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96934:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   96936:	200d      	movs	r0, #13
   96938:	4b7a      	ldr	r3, [pc, #488]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   9693a:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9693c:	200e      	movs	r0, #14
   9693e:	4b7b      	ldr	r3, [pc, #492]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96940:	4798      	blx	r3
   96942:	e008      	b.n	96956 <DD_SET_FLOW_PATH+0x36a>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   96944:	200f      	movs	r0, #15
   96946:	4b77      	ldr	r3, [pc, #476]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96948:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9694a:	200d      	movs	r0, #13
   9694c:	4b77      	ldr	r3, [pc, #476]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   9694e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   96950:	200e      	movs	r0, #14
   96952:	4b76      	ldr	r3, [pc, #472]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96954:	4798      	blx	r3
		}
		
		
		if( LoopBack)
   96956:	4b78      	ldr	r3, [pc, #480]	; (96b38 <DD_SET_FLOW_PATH+0x54c>)
   96958:	781b      	ldrb	r3, [r3, #0]
   9695a:	2b00      	cmp	r3, #0
   9695c:	d006      	beq.n	9696c <DD_SET_FLOW_PATH+0x380>
		{
			DD_SET_VALVE (VALVE_ID16);
   9695e:	2010      	movs	r0, #16
   96960:	4b72      	ldr	r3, [pc, #456]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96962:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   96964:	2012      	movs	r0, #18
   96966:	4b6f      	ldr	r3, [pc, #444]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96968:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9696a:	e128      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9696c:	2010      	movs	r0, #16
   9696e:	4b6d      	ldr	r3, [pc, #436]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96970:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   96972:	2012      	movs	r0, #18
   96974:	4b6d      	ldr	r3, [pc, #436]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96976:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   96978:	e121      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   9697a:	2006      	movs	r0, #6
   9697c:	4b69      	ldr	r3, [pc, #420]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   9697e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   96980:	2007      	movs	r0, #7
   96982:	4b68      	ldr	r3, [pc, #416]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96984:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   96986:	2009      	movs	r0, #9
   96988:	4b66      	ldr	r3, [pc, #408]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   9698a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9698c:	200c      	movs	r0, #12
   9698e:	4b65      	ldr	r3, [pc, #404]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96990:	4798      	blx	r3
		cl_wait(100);				
   96992:	2064      	movs	r0, #100	; 0x64
   96994:	4b64      	ldr	r3, [pc, #400]	; (96b28 <DD_SET_FLOW_PATH+0x53c>)
   96996:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   96998:	2005      	movs	r0, #5
   9699a:	4b64      	ldr	r3, [pc, #400]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   9699c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   9699e:	2008      	movs	r0, #8
   969a0:	4b62      	ldr	r3, [pc, #392]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969a2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   969a4:	200a      	movs	r0, #10
   969a6:	4b61      	ldr	r3, [pc, #388]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969a8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   969aa:	200b      	movs	r0, #11
   969ac:	4b5f      	ldr	r3, [pc, #380]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969ae:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   969b0:	4b5f      	ldr	r3, [pc, #380]	; (96b30 <DD_SET_FLOW_PATH+0x544>)
   969b2:	781b      	ldrb	r3, [r3, #0]
   969b4:	2b00      	cmp	r3, #0
   969b6:	d010      	beq.n	969da <DD_SET_FLOW_PATH+0x3ee>
   969b8:	4b5e      	ldr	r3, [pc, #376]	; (96b34 <DD_SET_FLOW_PATH+0x548>)
   969ba:	781b      	ldrb	r3, [r3, #0]
   969bc:	f083 0301 	eor.w	r3, r3, #1
   969c0:	b2db      	uxtb	r3, r3
   969c2:	2b00      	cmp	r3, #0
   969c4:	d009      	beq.n	969da <DD_SET_FLOW_PATH+0x3ee>
		{
			DD_SET_VALVE (VALVE_ID15);
   969c6:	200f      	movs	r0, #15
   969c8:	4b58      	ldr	r3, [pc, #352]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969ca:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   969cc:	200d      	movs	r0, #13
   969ce:	4b55      	ldr	r3, [pc, #340]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   969d0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   969d2:	200e      	movs	r0, #14
   969d4:	4b53      	ldr	r3, [pc, #332]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   969d6:	4798      	blx	r3
   969d8:	e016      	b.n	96a08 <DD_SET_FLOW_PATH+0x41c>
		}
		else if (isouf)
   969da:	4b56      	ldr	r3, [pc, #344]	; (96b34 <DD_SET_FLOW_PATH+0x548>)
   969dc:	781b      	ldrb	r3, [r3, #0]
   969de:	2b00      	cmp	r3, #0
   969e0:	d009      	beq.n	969f6 <DD_SET_FLOW_PATH+0x40a>
		{
			DD_SET_VALVE (VALVE_ID15);	
   969e2:	200f      	movs	r0, #15
   969e4:	4b51      	ldr	r3, [pc, #324]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969e6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   969e8:	200d      	movs	r0, #13
   969ea:	4b4e      	ldr	r3, [pc, #312]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   969ec:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   969ee:	200e      	movs	r0, #14
   969f0:	4b4e      	ldr	r3, [pc, #312]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   969f2:	4798      	blx	r3
   969f4:	e008      	b.n	96a08 <DD_SET_FLOW_PATH+0x41c>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   969f6:	200f      	movs	r0, #15
   969f8:	4b4a      	ldr	r3, [pc, #296]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   969fa:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   969fc:	200d      	movs	r0, #13
   969fe:	4b4b      	ldr	r3, [pc, #300]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a00:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   96a02:	200e      	movs	r0, #14
   96a04:	4b49      	ldr	r3, [pc, #292]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a06:	4798      	blx	r3
		}
		
		if( LoopBack)
   96a08:	4b4b      	ldr	r3, [pc, #300]	; (96b38 <DD_SET_FLOW_PATH+0x54c>)
   96a0a:	781b      	ldrb	r3, [r3, #0]
   96a0c:	2b00      	cmp	r3, #0
   96a0e:	d006      	beq.n	96a1e <DD_SET_FLOW_PATH+0x432>
		{
			DD_SET_VALVE (VALVE_ID16);
   96a10:	2010      	movs	r0, #16
   96a12:	4b46      	ldr	r3, [pc, #280]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a14:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   96a16:	2012      	movs	r0, #18
   96a18:	4b42      	ldr	r3, [pc, #264]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a1a:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   96a1c:	e0cf      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   96a1e:	2012      	movs	r0, #18
   96a20:	4b42      	ldr	r3, [pc, #264]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a22:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   96a24:	2010      	movs	r0, #16
   96a26:	4b3f      	ldr	r3, [pc, #252]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a28:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   96a2a:	e0c8      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   96a2c:	2004      	movs	r0, #4
   96a2e:	4b3d      	ldr	r3, [pc, #244]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a30:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   96a32:	2005      	movs	r0, #5
   96a34:	4b3d      	ldr	r3, [pc, #244]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a36:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   96a38:	2006      	movs	r0, #6
   96a3a:	4b3c      	ldr	r3, [pc, #240]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a3c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   96a3e:	2007      	movs	r0, #7
   96a40:	4b3a      	ldr	r3, [pc, #232]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a42:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   96a44:	2008      	movs	r0, #8
   96a46:	4b39      	ldr	r3, [pc, #228]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a48:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   96a4a:	2009      	movs	r0, #9
   96a4c:	4b37      	ldr	r3, [pc, #220]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a4e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   96a50:	200a      	movs	r0, #10
   96a52:	4b36      	ldr	r3, [pc, #216]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a54:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   96a56:	200b      	movs	r0, #11
   96a58:	4b34      	ldr	r3, [pc, #208]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a5a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   96a5c:	200c      	movs	r0, #12
   96a5e:	4b33      	ldr	r3, [pc, #204]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a60:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   96a62:	200d      	movs	r0, #13
   96a64:	4b31      	ldr	r3, [pc, #196]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a66:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   96a68:	200e      	movs	r0, #14
   96a6a:	4b30      	ldr	r3, [pc, #192]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a6c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   96a6e:	200f      	movs	r0, #15
   96a70:	4b2e      	ldr	r3, [pc, #184]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a72:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   96a74:	2010      	movs	r0, #16
   96a76:	4b2b      	ldr	r3, [pc, #172]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a78:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   96a7a:	2011      	movs	r0, #17
   96a7c:	4b2b      	ldr	r3, [pc, #172]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a7e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   96a80:	2012      	movs	r0, #18
   96a82:	4b2a      	ldr	r3, [pc, #168]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96a84:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);		
   96a86:	2013      	movs	r0, #19
   96a88:	4b26      	ldr	r3, [pc, #152]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a8a:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   96a8c:	e097      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   96a8e:	2005      	movs	r0, #5
   96a90:	4b24      	ldr	r3, [pc, #144]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a92:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   96a94:	2008      	movs	r0, #8
   96a96:	4b23      	ldr	r3, [pc, #140]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a98:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   96a9a:	200a      	movs	r0, #10
   96a9c:	4b21      	ldr	r3, [pc, #132]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96a9e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   96aa0:	200b      	movs	r0, #11
   96aa2:	4b20      	ldr	r3, [pc, #128]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96aa4:	4798      	blx	r3
		cl_wait(100);		
   96aa6:	2064      	movs	r0, #100	; 0x64
   96aa8:	4b1f      	ldr	r3, [pc, #124]	; (96b28 <DD_SET_FLOW_PATH+0x53c>)
   96aaa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   96aac:	2006      	movs	r0, #6
   96aae:	4b1f      	ldr	r3, [pc, #124]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96ab0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   96ab2:	2007      	movs	r0, #7
   96ab4:	4b1d      	ldr	r3, [pc, #116]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96ab6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   96ab8:	2009      	movs	r0, #9
   96aba:	4b1c      	ldr	r3, [pc, #112]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96abc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   96abe:	200c      	movs	r0, #12
   96ac0:	4b1a      	ldr	r3, [pc, #104]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96ac2:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   96ac4:	2010      	movs	r0, #16
   96ac6:	4b19      	ldr	r3, [pc, #100]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96ac8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   96aca:	200f      	movs	r0, #15
   96acc:	4b15      	ldr	r3, [pc, #84]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96ace:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   96ad0:	2012      	movs	r0, #18
   96ad2:	4b14      	ldr	r3, [pc, #80]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96ad4:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   96ad6:	e072      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   96ad8:	2006      	movs	r0, #6
   96ada:	4b12      	ldr	r3, [pc, #72]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96adc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   96ade:	2007      	movs	r0, #7
   96ae0:	4b10      	ldr	r3, [pc, #64]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96ae2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   96ae4:	2009      	movs	r0, #9
   96ae6:	4b0f      	ldr	r3, [pc, #60]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96ae8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   96aea:	200c      	movs	r0, #12
   96aec:	4b0d      	ldr	r3, [pc, #52]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96aee:	4798      	blx	r3
		cl_wait(100);				
   96af0:	2064      	movs	r0, #100	; 0x64
   96af2:	4b0d      	ldr	r3, [pc, #52]	; (96b28 <DD_SET_FLOW_PATH+0x53c>)
   96af4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   96af6:	2005      	movs	r0, #5
   96af8:	4b0c      	ldr	r3, [pc, #48]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96afa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   96afc:	2008      	movs	r0, #8
   96afe:	4b0b      	ldr	r3, [pc, #44]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96b00:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   96b02:	200a      	movs	r0, #10
   96b04:	4b09      	ldr	r3, [pc, #36]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96b06:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   96b08:	200b      	movs	r0, #11
   96b0a:	4b08      	ldr	r3, [pc, #32]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96b0c:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   96b0e:	200f      	movs	r0, #15
   96b10:	4b04      	ldr	r3, [pc, #16]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96b12:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   96b14:	2010      	movs	r0, #16
   96b16:	4b05      	ldr	r3, [pc, #20]	; (96b2c <DD_SET_FLOW_PATH+0x540>)
   96b18:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   96b1a:	2012      	movs	r0, #18
   96b1c:	4b01      	ldr	r3, [pc, #4]	; (96b24 <DD_SET_FLOW_PATH+0x538>)
   96b1e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   96b20:	e04d      	b.n	96bbe <DD_SET_FLOW_PATH+0x5d2>
   96b22:	bf00      	nop
   96b24:	00095e35 	.word	0x00095e35
   96b28:	000918fd 	.word	0x000918fd
   96b2c:	00095d6d 	.word	0x00095d6d
   96b30:	20072712 	.word	0x20072712
   96b34:	200726cc 	.word	0x200726cc
   96b38:	20072713 	.word	0x20072713
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   96b3c:	2005      	movs	r0, #5
   96b3e:	4b22      	ldr	r3, [pc, #136]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b40:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   96b42:	2006      	movs	r0, #6
   96b44:	4b20      	ldr	r3, [pc, #128]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b46:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   96b48:	2007      	movs	r0, #7
   96b4a:	4b1f      	ldr	r3, [pc, #124]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b4c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   96b4e:	2008      	movs	r0, #8
   96b50:	4b1d      	ldr	r3, [pc, #116]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b52:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   96b54:	2009      	movs	r0, #9
   96b56:	4b1c      	ldr	r3, [pc, #112]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b58:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   96b5a:	200a      	movs	r0, #10
   96b5c:	4b1a      	ldr	r3, [pc, #104]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b5e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   96b60:	200b      	movs	r0, #11
   96b62:	4b19      	ldr	r3, [pc, #100]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b64:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   96b66:	200c      	movs	r0, #12
   96b68:	4b17      	ldr	r3, [pc, #92]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b6a:	4798      	blx	r3

		if( ByPass)
   96b6c:	4b17      	ldr	r3, [pc, #92]	; (96bcc <DD_SET_FLOW_PATH+0x5e0>)
   96b6e:	781b      	ldrb	r3, [r3, #0]
   96b70:	2b00      	cmp	r3, #0
   96b72:	d009      	beq.n	96b88 <DD_SET_FLOW_PATH+0x59c>
		{
			DD_SET_VALVE (VALVE_ID15);
   96b74:	200f      	movs	r0, #15
   96b76:	4b16      	ldr	r3, [pc, #88]	; (96bd0 <DD_SET_FLOW_PATH+0x5e4>)
   96b78:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   96b7a:	200d      	movs	r0, #13
   96b7c:	4b12      	ldr	r3, [pc, #72]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b7e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   96b80:	200e      	movs	r0, #14
   96b82:	4b11      	ldr	r3, [pc, #68]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b84:	4798      	blx	r3
   96b86:	e008      	b.n	96b9a <DD_SET_FLOW_PATH+0x5ae>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   96b88:	200f      	movs	r0, #15
   96b8a:	4b0f      	ldr	r3, [pc, #60]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96b8c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   96b8e:	200d      	movs	r0, #13
   96b90:	4b0f      	ldr	r3, [pc, #60]	; (96bd0 <DD_SET_FLOW_PATH+0x5e4>)
   96b92:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   96b94:	200e      	movs	r0, #14
   96b96:	4b0e      	ldr	r3, [pc, #56]	; (96bd0 <DD_SET_FLOW_PATH+0x5e4>)
   96b98:	4798      	blx	r3
		}
		if( LoopBack)
   96b9a:	4b0e      	ldr	r3, [pc, #56]	; (96bd4 <DD_SET_FLOW_PATH+0x5e8>)
   96b9c:	781b      	ldrb	r3, [r3, #0]
   96b9e:	2b00      	cmp	r3, #0
   96ba0:	d006      	beq.n	96bb0 <DD_SET_FLOW_PATH+0x5c4>
		{
			DD_SET_VALVE (VALVE_ID16);
   96ba2:	2010      	movs	r0, #16
   96ba4:	4b0a      	ldr	r3, [pc, #40]	; (96bd0 <DD_SET_FLOW_PATH+0x5e4>)
   96ba6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   96ba8:	2012      	movs	r0, #18
   96baa:	4b07      	ldr	r3, [pc, #28]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96bac:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   96bae:	e005      	b.n	96bbc <DD_SET_FLOW_PATH+0x5d0>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   96bb0:	2010      	movs	r0, #16
   96bb2:	4b05      	ldr	r3, [pc, #20]	; (96bc8 <DD_SET_FLOW_PATH+0x5dc>)
   96bb4:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   96bb6:	2012      	movs	r0, #18
   96bb8:	4b05      	ldr	r3, [pc, #20]	; (96bd0 <DD_SET_FLOW_PATH+0x5e4>)
   96bba:	4798      	blx	r3
		}
		break;
   96bbc:	bf00      	nop
	}
	
	return 0;
   96bbe:	2300      	movs	r3, #0
	
}
   96bc0:	4618      	mov	r0, r3
   96bc2:	3708      	adds	r7, #8
   96bc4:	46bd      	mov	sp, r7
   96bc6:	bd80      	pop	{r7, pc}
   96bc8:	00095e35 	.word	0x00095e35
   96bcc:	20072712 	.word	0x20072712
   96bd0:	00095d6d 	.word	0x00095d6d
   96bd4:	20072713 	.word	0x20072713

00096bd8 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   96bd8:	b580      	push	{r7, lr}
   96bda:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   96bdc:	210d      	movs	r1, #13
   96bde:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96be2:	4b0c      	ldr	r3, [pc, #48]	; (96c14 <DD_LATCH_STROBE_X1_X16+0x3c>)
   96be4:	4798      	blx	r3
	cl_wait(2);
   96be6:	2002      	movs	r0, #2
   96be8:	4b0b      	ldr	r3, [pc, #44]	; (96c18 <DD_LATCH_STROBE_X1_X16+0x40>)
   96bea:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   96bec:	210d      	movs	r1, #13
   96bee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96bf2:	4b0a      	ldr	r3, [pc, #40]	; (96c1c <DD_LATCH_STROBE_X1_X16+0x44>)
   96bf4:	4798      	blx	r3
	cl_wait(2);
   96bf6:	2002      	movs	r0, #2
   96bf8:	4b07      	ldr	r3, [pc, #28]	; (96c18 <DD_LATCH_STROBE_X1_X16+0x40>)
   96bfa:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   96bfc:	210d      	movs	r1, #13
   96bfe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96c02:	4b04      	ldr	r3, [pc, #16]	; (96c14 <DD_LATCH_STROBE_X1_X16+0x3c>)
   96c04:	4798      	blx	r3
	cl_wait(2);
   96c06:	2002      	movs	r0, #2
   96c08:	4b03      	ldr	r3, [pc, #12]	; (96c18 <DD_LATCH_STROBE_X1_X16+0x40>)
   96c0a:	4798      	blx	r3
	
	return 0;
   96c0c:	2300      	movs	r3, #0
}
   96c0e:	4618      	mov	r0, r3
   96c10:	bd80      	pop	{r7, pc}
   96c12:	bf00      	nop
   96c14:	00094919 	.word	0x00094919
   96c18:	000918fd 	.word	0x000918fd
   96c1c:	00094895 	.word	0x00094895

00096c20 <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   96c20:	b580      	push	{r7, lr}
   96c22:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   96c24:	210b      	movs	r1, #11
   96c26:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96c2a:	4b0c      	ldr	r3, [pc, #48]	; (96c5c <DD_LATCH_STROBE_X17_X20+0x3c>)
   96c2c:	4798      	blx	r3
	cl_wait(2);
   96c2e:	2002      	movs	r0, #2
   96c30:	4b0b      	ldr	r3, [pc, #44]	; (96c60 <DD_LATCH_STROBE_X17_X20+0x40>)
   96c32:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   96c34:	210b      	movs	r1, #11
   96c36:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96c3a:	4b0a      	ldr	r3, [pc, #40]	; (96c64 <DD_LATCH_STROBE_X17_X20+0x44>)
   96c3c:	4798      	blx	r3
	cl_wait(2);
   96c3e:	2002      	movs	r0, #2
   96c40:	4b07      	ldr	r3, [pc, #28]	; (96c60 <DD_LATCH_STROBE_X17_X20+0x40>)
   96c42:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   96c44:	210b      	movs	r1, #11
   96c46:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   96c4a:	4b04      	ldr	r3, [pc, #16]	; (96c5c <DD_LATCH_STROBE_X17_X20+0x3c>)
   96c4c:	4798      	blx	r3
	cl_wait(2);
   96c4e:	2002      	movs	r0, #2
   96c50:	4b03      	ldr	r3, [pc, #12]	; (96c60 <DD_LATCH_STROBE_X17_X20+0x40>)
   96c52:	4798      	blx	r3
	
	return 0;
   96c54:	2300      	movs	r3, #0
}
   96c56:	4618      	mov	r0, r3
   96c58:	bd80      	pop	{r7, pc}
   96c5a:	bf00      	nop
   96c5c:	00094919 	.word	0x00094919
   96c60:	000918fd 	.word	0x000918fd
   96c64:	00094895 	.word	0x00094895

00096c68 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   96c68:	b480      	push	{r7}
   96c6a:	b083      	sub	sp, #12
   96c6c:	af00      	add	r7, sp, #0
   96c6e:	4603      	mov	r3, r0
   96c70:	6039      	str	r1, [r7, #0]
   96c72:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   96c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96c78:	2b00      	cmp	r3, #0
   96c7a:	da0b      	bge.n	96c94 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   96c7c:	490d      	ldr	r1, [pc, #52]	; (96cb4 <NVIC_SetPriority+0x4c>)
   96c7e:	79fb      	ldrb	r3, [r7, #7]
   96c80:	f003 030f 	and.w	r3, r3, #15
   96c84:	3b04      	subs	r3, #4
   96c86:	683a      	ldr	r2, [r7, #0]
   96c88:	b2d2      	uxtb	r2, r2
   96c8a:	0112      	lsls	r2, r2, #4
   96c8c:	b2d2      	uxtb	r2, r2
   96c8e:	440b      	add	r3, r1
   96c90:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   96c92:	e009      	b.n	96ca8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   96c94:	4908      	ldr	r1, [pc, #32]	; (96cb8 <NVIC_SetPriority+0x50>)
   96c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96c9a:	683a      	ldr	r2, [r7, #0]
   96c9c:	b2d2      	uxtb	r2, r2
   96c9e:	0112      	lsls	r2, r2, #4
   96ca0:	b2d2      	uxtb	r2, r2
   96ca2:	440b      	add	r3, r1
   96ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   96ca8:	bf00      	nop
   96caa:	370c      	adds	r7, #12
   96cac:	46bd      	mov	sp, r7
   96cae:	bc80      	pop	{r7}
   96cb0:	4770      	bx	lr
   96cb2:	bf00      	nop
   96cb4:	e000ed00 	.word	0xe000ed00
   96cb8:	e000e100 	.word	0xe000e100

00096cbc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   96cbc:	b580      	push	{r7, lr}
   96cbe:	b082      	sub	sp, #8
   96cc0:	af00      	add	r7, sp, #0
   96cc2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   96cc4:	687b      	ldr	r3, [r7, #4]
   96cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   96cca:	d301      	bcc.n	96cd0 <SysTick_Config+0x14>
   96ccc:	2301      	movs	r3, #1
   96cce:	e011      	b.n	96cf4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   96cd0:	4a0a      	ldr	r2, [pc, #40]	; (96cfc <SysTick_Config+0x40>)
   96cd2:	687b      	ldr	r3, [r7, #4]
   96cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   96cd8:	3b01      	subs	r3, #1
   96cda:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   96cdc:	210f      	movs	r1, #15
   96cde:	f04f 30ff 	mov.w	r0, #4294967295
   96ce2:	4b07      	ldr	r3, [pc, #28]	; (96d00 <SysTick_Config+0x44>)
   96ce4:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   96ce6:	4b05      	ldr	r3, [pc, #20]	; (96cfc <SysTick_Config+0x40>)
   96ce8:	2200      	movs	r2, #0
   96cea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   96cec:	4b03      	ldr	r3, [pc, #12]	; (96cfc <SysTick_Config+0x40>)
   96cee:	2207      	movs	r2, #7
   96cf0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   96cf2:	2300      	movs	r3, #0
}
   96cf4:	4618      	mov	r0, r3
   96cf6:	3708      	adds	r7, #8
   96cf8:	46bd      	mov	sp, r7
   96cfa:	bd80      	pop	{r7, pc}
   96cfc:	e000e010 	.word	0xe000e010
   96d00:	00096c69 	.word	0x00096c69

00096d04 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   96d04:	b480      	push	{r7}
   96d06:	b083      	sub	sp, #12
   96d08:	af00      	add	r7, sp, #0
   96d0a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   96d0c:	687b      	ldr	r3, [r7, #4]
   96d0e:	2b07      	cmp	r3, #7
   96d10:	d825      	bhi.n	96d5e <osc_get_rate+0x5a>
   96d12:	a201      	add	r2, pc, #4	; (adr r2, 96d18 <osc_get_rate+0x14>)
   96d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96d18:	00096d39 	.word	0x00096d39
   96d1c:	00096d3f 	.word	0x00096d3f
   96d20:	00096d45 	.word	0x00096d45
   96d24:	00096d4b 	.word	0x00096d4b
   96d28:	00096d4f 	.word	0x00096d4f
   96d2c:	00096d53 	.word	0x00096d53
   96d30:	00096d57 	.word	0x00096d57
   96d34:	00096d5b 	.word	0x00096d5b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   96d38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   96d3c:	e010      	b.n	96d60 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   96d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   96d42:	e00d      	b.n	96d60 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   96d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   96d48:	e00a      	b.n	96d60 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   96d4a:	4b08      	ldr	r3, [pc, #32]	; (96d6c <osc_get_rate+0x68>)
   96d4c:	e008      	b.n	96d60 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   96d4e:	4b08      	ldr	r3, [pc, #32]	; (96d70 <osc_get_rate+0x6c>)
   96d50:	e006      	b.n	96d60 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   96d52:	4b08      	ldr	r3, [pc, #32]	; (96d74 <osc_get_rate+0x70>)
   96d54:	e004      	b.n	96d60 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   96d56:	4b07      	ldr	r3, [pc, #28]	; (96d74 <osc_get_rate+0x70>)
   96d58:	e002      	b.n	96d60 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   96d5a:	4b06      	ldr	r3, [pc, #24]	; (96d74 <osc_get_rate+0x70>)
   96d5c:	e000      	b.n	96d60 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   96d5e:	2300      	movs	r3, #0
}
   96d60:	4618      	mov	r0, r3
   96d62:	370c      	adds	r7, #12
   96d64:	46bd      	mov	sp, r7
   96d66:	bc80      	pop	{r7}
   96d68:	4770      	bx	lr
   96d6a:	bf00      	nop
   96d6c:	003d0900 	.word	0x003d0900
   96d70:	007a1200 	.word	0x007a1200
   96d74:	00b71b00 	.word	0x00b71b00

00096d78 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   96d78:	b580      	push	{r7, lr}
   96d7a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   96d7c:	2006      	movs	r0, #6
   96d7e:	4b04      	ldr	r3, [pc, #16]	; (96d90 <sysclk_get_main_hz+0x18>)
   96d80:	4798      	blx	r3
   96d82:	4602      	mov	r2, r0
   96d84:	4613      	mov	r3, r2
   96d86:	00db      	lsls	r3, r3, #3
   96d88:	1a9b      	subs	r3, r3, r2
   96d8a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   96d8c:	4618      	mov	r0, r3
   96d8e:	bd80      	pop	{r7, pc}
   96d90:	00096d05 	.word	0x00096d05

00096d94 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   96d94:	b580      	push	{r7, lr}
   96d96:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   96d98:	4b02      	ldr	r3, [pc, #8]	; (96da4 <sysclk_get_cpu_hz+0x10>)
   96d9a:	4798      	blx	r3
   96d9c:	4603      	mov	r3, r0
   96d9e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   96da0:	4618      	mov	r0, r3
   96da2:	bd80      	pop	{r7, pc}
   96da4:	00096d79 	.word	0x00096d79

00096da8 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   96da8:	b580      	push	{r7, lr}
   96daa:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   96dac:	4b15      	ldr	r3, [pc, #84]	; (96e04 <DD_INIT_TIMER+0x5c>)
   96dae:	4a16      	ldr	r2, [pc, #88]	; (96e08 <DD_INIT_TIMER+0x60>)
   96db0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   96db4:	4b15      	ldr	r3, [pc, #84]	; (96e0c <DD_INIT_TIMER+0x64>)
   96db6:	4a14      	ldr	r2, [pc, #80]	; (96e08 <DD_INIT_TIMER+0x60>)
   96db8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   96dbc:	4b14      	ldr	r3, [pc, #80]	; (96e10 <DD_INIT_TIMER+0x68>)
   96dbe:	4a12      	ldr	r2, [pc, #72]	; (96e08 <DD_INIT_TIMER+0x60>)
   96dc0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   96dc4:	201b      	movs	r0, #27
   96dc6:	4b13      	ldr	r3, [pc, #76]	; (96e14 <DD_INIT_TIMER+0x6c>)
   96dc8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   96dca:	201c      	movs	r0, #28
   96dcc:	4b11      	ldr	r3, [pc, #68]	; (96e14 <DD_INIT_TIMER+0x6c>)
   96dce:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   96dd0:	201d      	movs	r0, #29
   96dd2:	4b10      	ldr	r3, [pc, #64]	; (96e14 <DD_INIT_TIMER+0x6c>)
   96dd4:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96dd6:	4b0b      	ldr	r3, [pc, #44]	; (96e04 <DD_INIT_TIMER+0x5c>)
   96dd8:	f24c 0203 	movw	r2, #49155	; 0xc003
   96ddc:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96dde:	4b0b      	ldr	r3, [pc, #44]	; (96e0c <DD_INIT_TIMER+0x64>)
   96de0:	f24c 0203 	movw	r2, #49155	; 0xc003
   96de4:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96de6:	4b0a      	ldr	r3, [pc, #40]	; (96e10 <DD_INIT_TIMER+0x68>)
   96de8:	f24c 0203 	movw	r2, #49155	; 0xc003
   96dec:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   96dee:	4b05      	ldr	r3, [pc, #20]	; (96e04 <DD_INIT_TIMER+0x5c>)
   96df0:	2210      	movs	r2, #16
   96df2:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   96df4:	4b05      	ldr	r3, [pc, #20]	; (96e0c <DD_INIT_TIMER+0x64>)
   96df6:	2210      	movs	r2, #16
   96df8:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   96dfa:	4b05      	ldr	r3, [pc, #20]	; (96e10 <DD_INIT_TIMER+0x68>)
   96dfc:	2210      	movs	r2, #16
   96dfe:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   96e00:	bf00      	nop
   96e02:	bd80      	pop	{r7, pc}
   96e04:	40080000 	.word	0x40080000
   96e08:	54494d00 	.word	0x54494d00
   96e0c:	40084000 	.word	0x40084000
   96e10:	40088000 	.word	0x40088000
   96e14:	00098635 	.word	0x00098635

00096e18 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   96e18:	b580      	push	{r7, lr}
   96e1a:	b084      	sub	sp, #16
   96e1c:	af00      	add	r7, sp, #0
   96e1e:	60f8      	str	r0, [r7, #12]
   96e20:	60b9      	str	r1, [r7, #8]
   96e22:	603b      	str	r3, [r7, #0]
   96e24:	4613      	mov	r3, r2
   96e26:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   96e28:	2000      	movs	r0, #0
   96e2a:	4b16      	ldr	r3, [pc, #88]	; (96e84 <DD_SET_TIMER+0x6c>)
   96e2c:	4798      	blx	r3
	channel=0;
   96e2e:	2300      	movs	r3, #0
   96e30:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   96e32:	4b15      	ldr	r3, [pc, #84]	; (96e88 <DD_SET_TIMER+0x70>)
   96e34:	f24c 0203 	movw	r2, #49155	; 0xc003
   96e38:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   96e3a:	683a      	ldr	r2, [r7, #0]
   96e3c:	68b9      	ldr	r1, [r7, #8]
   96e3e:	68f8      	ldr	r0, [r7, #12]
   96e40:	4b12      	ldr	r3, [pc, #72]	; (96e8c <DD_SET_TIMER+0x74>)
   96e42:	4798      	blx	r3
	tc_start(tc, channel);
   96e44:	68b9      	ldr	r1, [r7, #8]
   96e46:	68f8      	ldr	r0, [r7, #12]
   96e48:	4b11      	ldr	r3, [pc, #68]	; (96e90 <DD_SET_TIMER+0x78>)
   96e4a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   96e4c:	2210      	movs	r2, #16
   96e4e:	68b9      	ldr	r1, [r7, #8]
   96e50:	68f8      	ldr	r0, [r7, #12]
   96e52:	4b10      	ldr	r3, [pc, #64]	; (96e94 <DD_SET_TIMER+0x7c>)
   96e54:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   96e56:	4b10      	ldr	r3, [pc, #64]	; (96e98 <DD_SET_TIMER+0x80>)
   96e58:	4798      	blx	r3
   96e5a:	4602      	mov	r2, r0
   96e5c:	4b0f      	ldr	r3, [pc, #60]	; (96e9c <DD_SET_TIMER+0x84>)
   96e5e:	fba3 2302 	umull	r2, r3, r3, r2
   96e62:	099b      	lsrs	r3, r3, #6
   96e64:	4618      	mov	r0, r3
   96e66:	4b0e      	ldr	r3, [pc, #56]	; (96ea0 <DD_SET_TIMER+0x88>)
   96e68:	4798      	blx	r3
   96e6a:	4603      	mov	r3, r0
   96e6c:	2b00      	cmp	r3, #0
   96e6e:	d003      	beq.n	96e78 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   96e70:	480c      	ldr	r0, [pc, #48]	; (96ea4 <DD_SET_TIMER+0x8c>)
   96e72:	4b0d      	ldr	r3, [pc, #52]	; (96ea8 <DD_SET_TIMER+0x90>)
   96e74:	4798      	blx	r3
		while (1);
   96e76:	e7fe      	b.n	96e76 <DD_SET_TIMER+0x5e>
	}
	
}
   96e78:	bf00      	nop
   96e7a:	4618      	mov	r0, r3
   96e7c:	3710      	adds	r7, #16
   96e7e:	46bd      	mov	sp, r7
   96e80:	bd80      	pop	{r7, pc}
   96e82:	bf00      	nop
   96e84:	000986b5 	.word	0x000986b5
   96e88:	40088000 	.word	0x40088000
   96e8c:	0009870d 	.word	0x0009870d
   96e90:	000986ed 	.word	0x000986ed
   96e94:	00098731 	.word	0x00098731
   96e98:	00096d95 	.word	0x00096d95
   96e9c:	10624dd3 	.word	0x10624dd3
   96ea0:	00096cbd 	.word	0x00096cbd
   96ea4:	000a5884 	.word	0x000a5884
   96ea8:	000a3aa9 	.word	0x000a3aa9

00096eac <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   96eac:	b480      	push	{r7}
   96eae:	b083      	sub	sp, #12
   96eb0:	af00      	add	r7, sp, #0
   96eb2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   96eb4:	687b      	ldr	r3, [r7, #4]
   96eb6:	2b07      	cmp	r3, #7
   96eb8:	d825      	bhi.n	96f06 <osc_get_rate+0x5a>
   96eba:	a201      	add	r2, pc, #4	; (adr r2, 96ec0 <osc_get_rate+0x14>)
   96ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96ec0:	00096ee1 	.word	0x00096ee1
   96ec4:	00096ee7 	.word	0x00096ee7
   96ec8:	00096eed 	.word	0x00096eed
   96ecc:	00096ef3 	.word	0x00096ef3
   96ed0:	00096ef7 	.word	0x00096ef7
   96ed4:	00096efb 	.word	0x00096efb
   96ed8:	00096eff 	.word	0x00096eff
   96edc:	00096f03 	.word	0x00096f03
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   96ee0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   96ee4:	e010      	b.n	96f08 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   96ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   96eea:	e00d      	b.n	96f08 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   96eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   96ef0:	e00a      	b.n	96f08 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   96ef2:	4b08      	ldr	r3, [pc, #32]	; (96f14 <osc_get_rate+0x68>)
   96ef4:	e008      	b.n	96f08 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   96ef6:	4b08      	ldr	r3, [pc, #32]	; (96f18 <osc_get_rate+0x6c>)
   96ef8:	e006      	b.n	96f08 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   96efa:	4b08      	ldr	r3, [pc, #32]	; (96f1c <osc_get_rate+0x70>)
   96efc:	e004      	b.n	96f08 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   96efe:	4b07      	ldr	r3, [pc, #28]	; (96f1c <osc_get_rate+0x70>)
   96f00:	e002      	b.n	96f08 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   96f02:	4b06      	ldr	r3, [pc, #24]	; (96f1c <osc_get_rate+0x70>)
   96f04:	e000      	b.n	96f08 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   96f06:	2300      	movs	r3, #0
}
   96f08:	4618      	mov	r0, r3
   96f0a:	370c      	adds	r7, #12
   96f0c:	46bd      	mov	sp, r7
   96f0e:	bc80      	pop	{r7}
   96f10:	4770      	bx	lr
   96f12:	bf00      	nop
   96f14:	003d0900 	.word	0x003d0900
   96f18:	007a1200 	.word	0x007a1200
   96f1c:	00b71b00 	.word	0x00b71b00

00096f20 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   96f20:	b580      	push	{r7, lr}
   96f22:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   96f24:	2006      	movs	r0, #6
   96f26:	4b04      	ldr	r3, [pc, #16]	; (96f38 <sysclk_get_main_hz+0x18>)
   96f28:	4798      	blx	r3
   96f2a:	4602      	mov	r2, r0
   96f2c:	4613      	mov	r3, r2
   96f2e:	00db      	lsls	r3, r3, #3
   96f30:	1a9b      	subs	r3, r3, r2
   96f32:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   96f34:	4618      	mov	r0, r3
   96f36:	bd80      	pop	{r7, pc}
   96f38:	00096ead 	.word	0x00096ead

00096f3c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   96f3c:	b580      	push	{r7, lr}
   96f3e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   96f40:	4b02      	ldr	r3, [pc, #8]	; (96f4c <sysclk_get_peripheral_hz+0x10>)
   96f42:	4798      	blx	r3
   96f44:	4603      	mov	r3, r0
   96f46:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   96f48:	4618      	mov	r0, r3
   96f4a:	bd80      	pop	{r7, pc}
   96f4c:	00096f21 	.word	0x00096f21

00096f50 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   96f50:	b580      	push	{r7, lr}
   96f52:	b082      	sub	sp, #8
   96f54:	af00      	add	r7, sp, #0
   96f56:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   96f58:	6878      	ldr	r0, [r7, #4]
   96f5a:	4b03      	ldr	r3, [pc, #12]	; (96f68 <sysclk_enable_peripheral_clock+0x18>)
   96f5c:	4798      	blx	r3
}
   96f5e:	bf00      	nop
   96f60:	3708      	adds	r7, #8
   96f62:	46bd      	mov	sp, r7
   96f64:	bd80      	pop	{r7, pc}
   96f66:	bf00      	nop
   96f68:	00098635 	.word	0x00098635

00096f6c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   96f6c:	b580      	push	{r7, lr}
   96f6e:	b08c      	sub	sp, #48	; 0x30
   96f70:	af00      	add	r7, sp, #0
   96f72:	6078      	str	r0, [r7, #4]
   96f74:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   96f76:	4b40      	ldr	r3, [pc, #256]	; (97078 <usart_serial_init+0x10c>)
   96f78:	4798      	blx	r3
   96f7a:	4603      	mov	r3, r0
   96f7c:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   96f7e:	683b      	ldr	r3, [r7, #0]
   96f80:	681b      	ldr	r3, [r3, #0]
   96f82:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   96f84:	683b      	ldr	r3, [r7, #0]
   96f86:	689b      	ldr	r3, [r3, #8]
   96f88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   96f8a:	683b      	ldr	r3, [r7, #0]
   96f8c:	681b      	ldr	r3, [r3, #0]
   96f8e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   96f90:	683b      	ldr	r3, [r7, #0]
   96f92:	685b      	ldr	r3, [r3, #4]
   96f94:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   96f96:	683b      	ldr	r3, [r7, #0]
   96f98:	689b      	ldr	r3, [r3, #8]
   96f9a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   96f9c:	683b      	ldr	r3, [r7, #0]
   96f9e:	7b1b      	ldrb	r3, [r3, #12]
   96fa0:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   96fa2:	2300      	movs	r3, #0
   96fa4:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   96fa6:	687b      	ldr	r3, [r7, #4]
   96fa8:	4a34      	ldr	r2, [pc, #208]	; (9707c <usart_serial_init+0x110>)
   96faa:	4293      	cmp	r3, r2
   96fac:	d108      	bne.n	96fc0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   96fae:	2008      	movs	r0, #8
   96fb0:	4b33      	ldr	r3, [pc, #204]	; (97080 <usart_serial_init+0x114>)
   96fb2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   96fb4:	f107 0320 	add.w	r3, r7, #32
   96fb8:	4619      	mov	r1, r3
   96fba:	6878      	ldr	r0, [r7, #4]
   96fbc:	4b31      	ldr	r3, [pc, #196]	; (97084 <usart_serial_init+0x118>)
   96fbe:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   96fc0:	687b      	ldr	r3, [r7, #4]
   96fc2:	4a31      	ldr	r2, [pc, #196]	; (97088 <usart_serial_init+0x11c>)
   96fc4:	4293      	cmp	r3, r2
   96fc6:	d111      	bne.n	96fec <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   96fc8:	2011      	movs	r0, #17
   96fca:	4b2d      	ldr	r3, [pc, #180]	; (97080 <usart_serial_init+0x114>)
   96fcc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   96fce:	4b2a      	ldr	r3, [pc, #168]	; (97078 <usart_serial_init+0x10c>)
   96fd0:	4798      	blx	r3
   96fd2:	4602      	mov	r2, r0
   96fd4:	f107 0308 	add.w	r3, r7, #8
   96fd8:	4619      	mov	r1, r3
   96fda:	6878      	ldr	r0, [r7, #4]
   96fdc:	4b2b      	ldr	r3, [pc, #172]	; (9708c <usart_serial_init+0x120>)
   96fde:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   96fe0:	6878      	ldr	r0, [r7, #4]
   96fe2:	4b2b      	ldr	r3, [pc, #172]	; (97090 <usart_serial_init+0x124>)
   96fe4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   96fe6:	6878      	ldr	r0, [r7, #4]
   96fe8:	4b2a      	ldr	r3, [pc, #168]	; (97094 <usart_serial_init+0x128>)
   96fea:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   96fec:	687b      	ldr	r3, [r7, #4]
   96fee:	4a2a      	ldr	r2, [pc, #168]	; (97098 <usart_serial_init+0x12c>)
   96ff0:	4293      	cmp	r3, r2
   96ff2:	d111      	bne.n	97018 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   96ff4:	2012      	movs	r0, #18
   96ff6:	4b22      	ldr	r3, [pc, #136]	; (97080 <usart_serial_init+0x114>)
   96ff8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   96ffa:	4b1f      	ldr	r3, [pc, #124]	; (97078 <usart_serial_init+0x10c>)
   96ffc:	4798      	blx	r3
   96ffe:	4602      	mov	r2, r0
   97000:	f107 0308 	add.w	r3, r7, #8
   97004:	4619      	mov	r1, r3
   97006:	6878      	ldr	r0, [r7, #4]
   97008:	4b20      	ldr	r3, [pc, #128]	; (9708c <usart_serial_init+0x120>)
   9700a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9700c:	6878      	ldr	r0, [r7, #4]
   9700e:	4b20      	ldr	r3, [pc, #128]	; (97090 <usart_serial_init+0x124>)
   97010:	4798      	blx	r3
		usart_enable_rx(p_usart);
   97012:	6878      	ldr	r0, [r7, #4]
   97014:	4b1f      	ldr	r3, [pc, #124]	; (97094 <usart_serial_init+0x128>)
   97016:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   97018:	687b      	ldr	r3, [r7, #4]
   9701a:	4a20      	ldr	r2, [pc, #128]	; (9709c <usart_serial_init+0x130>)
   9701c:	4293      	cmp	r3, r2
   9701e:	d111      	bne.n	97044 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   97020:	2013      	movs	r0, #19
   97022:	4b17      	ldr	r3, [pc, #92]	; (97080 <usart_serial_init+0x114>)
   97024:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   97026:	4b14      	ldr	r3, [pc, #80]	; (97078 <usart_serial_init+0x10c>)
   97028:	4798      	blx	r3
   9702a:	4602      	mov	r2, r0
   9702c:	f107 0308 	add.w	r3, r7, #8
   97030:	4619      	mov	r1, r3
   97032:	6878      	ldr	r0, [r7, #4]
   97034:	4b15      	ldr	r3, [pc, #84]	; (9708c <usart_serial_init+0x120>)
   97036:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   97038:	6878      	ldr	r0, [r7, #4]
   9703a:	4b15      	ldr	r3, [pc, #84]	; (97090 <usart_serial_init+0x124>)
   9703c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9703e:	6878      	ldr	r0, [r7, #4]
   97040:	4b14      	ldr	r3, [pc, #80]	; (97094 <usart_serial_init+0x128>)
   97042:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   97044:	687b      	ldr	r3, [r7, #4]
   97046:	4a16      	ldr	r2, [pc, #88]	; (970a0 <usart_serial_init+0x134>)
   97048:	4293      	cmp	r3, r2
   9704a:	d111      	bne.n	97070 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   9704c:	2014      	movs	r0, #20
   9704e:	4b0c      	ldr	r3, [pc, #48]	; (97080 <usart_serial_init+0x114>)
   97050:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   97052:	4b09      	ldr	r3, [pc, #36]	; (97078 <usart_serial_init+0x10c>)
   97054:	4798      	blx	r3
   97056:	4602      	mov	r2, r0
   97058:	f107 0308 	add.w	r3, r7, #8
   9705c:	4619      	mov	r1, r3
   9705e:	6878      	ldr	r0, [r7, #4]
   97060:	4b0a      	ldr	r3, [pc, #40]	; (9708c <usart_serial_init+0x120>)
   97062:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   97064:	6878      	ldr	r0, [r7, #4]
   97066:	4b0a      	ldr	r3, [pc, #40]	; (97090 <usart_serial_init+0x124>)
   97068:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9706a:	6878      	ldr	r0, [r7, #4]
   9706c:	4b09      	ldr	r3, [pc, #36]	; (97094 <usart_serial_init+0x128>)
   9706e:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   97070:	bf00      	nop
   97072:	3730      	adds	r7, #48	; 0x30
   97074:	46bd      	mov	sp, r7
   97076:	bd80      	pop	{r7, pc}
   97078:	00096f3d 	.word	0x00096f3d
   9707c:	400e0800 	.word	0x400e0800
   97080:	00096f51 	.word	0x00096f51
   97084:	0009877d 	.word	0x0009877d
   97088:	40098000 	.word	0x40098000
   9708c:	00098991 	.word	0x00098991
   97090:	00098a15 	.word	0x00098a15
   97094:	00098a45 	.word	0x00098a45
   97098:	4009c000 	.word	0x4009c000
   9709c:	400a0000 	.word	0x400a0000
   970a0:	400a4000 	.word	0x400a4000

000970a4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   970a4:	b580      	push	{r7, lr}
   970a6:	b082      	sub	sp, #8
   970a8:	af00      	add	r7, sp, #0
   970aa:	6078      	str	r0, [r7, #4]
   970ac:	460b      	mov	r3, r1
   970ae:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   970b0:	687b      	ldr	r3, [r7, #4]
   970b2:	4a27      	ldr	r2, [pc, #156]	; (97150 <usart_serial_putchar+0xac>)
   970b4:	4293      	cmp	r3, r2
   970b6:	d10a      	bne.n	970ce <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   970b8:	bf00      	nop
   970ba:	78fb      	ldrb	r3, [r7, #3]
   970bc:	4619      	mov	r1, r3
   970be:	6878      	ldr	r0, [r7, #4]
   970c0:	4b24      	ldr	r3, [pc, #144]	; (97154 <usart_serial_putchar+0xb0>)
   970c2:	4798      	blx	r3
   970c4:	4603      	mov	r3, r0
   970c6:	2b00      	cmp	r3, #0
   970c8:	d1f7      	bne.n	970ba <usart_serial_putchar+0x16>
		return 1;
   970ca:	2301      	movs	r3, #1
   970cc:	e03c      	b.n	97148 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   970ce:	687b      	ldr	r3, [r7, #4]
   970d0:	4a21      	ldr	r2, [pc, #132]	; (97158 <usart_serial_putchar+0xb4>)
   970d2:	4293      	cmp	r3, r2
   970d4:	d10a      	bne.n	970ec <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   970d6:	bf00      	nop
   970d8:	78fb      	ldrb	r3, [r7, #3]
   970da:	4619      	mov	r1, r3
   970dc:	6878      	ldr	r0, [r7, #4]
   970de:	4b1f      	ldr	r3, [pc, #124]	; (9715c <usart_serial_putchar+0xb8>)
   970e0:	4798      	blx	r3
   970e2:	4603      	mov	r3, r0
   970e4:	2b00      	cmp	r3, #0
   970e6:	d1f7      	bne.n	970d8 <usart_serial_putchar+0x34>
		return 1;
   970e8:	2301      	movs	r3, #1
   970ea:	e02d      	b.n	97148 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   970ec:	687b      	ldr	r3, [r7, #4]
   970ee:	4a1c      	ldr	r2, [pc, #112]	; (97160 <usart_serial_putchar+0xbc>)
   970f0:	4293      	cmp	r3, r2
   970f2:	d10a      	bne.n	9710a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   970f4:	bf00      	nop
   970f6:	78fb      	ldrb	r3, [r7, #3]
   970f8:	4619      	mov	r1, r3
   970fa:	6878      	ldr	r0, [r7, #4]
   970fc:	4b17      	ldr	r3, [pc, #92]	; (9715c <usart_serial_putchar+0xb8>)
   970fe:	4798      	blx	r3
   97100:	4603      	mov	r3, r0
   97102:	2b00      	cmp	r3, #0
   97104:	d1f7      	bne.n	970f6 <usart_serial_putchar+0x52>
		return 1;
   97106:	2301      	movs	r3, #1
   97108:	e01e      	b.n	97148 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9710a:	687b      	ldr	r3, [r7, #4]
   9710c:	4a15      	ldr	r2, [pc, #84]	; (97164 <usart_serial_putchar+0xc0>)
   9710e:	4293      	cmp	r3, r2
   97110:	d10a      	bne.n	97128 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   97112:	bf00      	nop
   97114:	78fb      	ldrb	r3, [r7, #3]
   97116:	4619      	mov	r1, r3
   97118:	6878      	ldr	r0, [r7, #4]
   9711a:	4b10      	ldr	r3, [pc, #64]	; (9715c <usart_serial_putchar+0xb8>)
   9711c:	4798      	blx	r3
   9711e:	4603      	mov	r3, r0
   97120:	2b00      	cmp	r3, #0
   97122:	d1f7      	bne.n	97114 <usart_serial_putchar+0x70>
		return 1;
   97124:	2301      	movs	r3, #1
   97126:	e00f      	b.n	97148 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   97128:	687b      	ldr	r3, [r7, #4]
   9712a:	4a0f      	ldr	r2, [pc, #60]	; (97168 <usart_serial_putchar+0xc4>)
   9712c:	4293      	cmp	r3, r2
   9712e:	d10a      	bne.n	97146 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   97130:	bf00      	nop
   97132:	78fb      	ldrb	r3, [r7, #3]
   97134:	4619      	mov	r1, r3
   97136:	6878      	ldr	r0, [r7, #4]
   97138:	4b08      	ldr	r3, [pc, #32]	; (9715c <usart_serial_putchar+0xb8>)
   9713a:	4798      	blx	r3
   9713c:	4603      	mov	r3, r0
   9713e:	2b00      	cmp	r3, #0
   97140:	d1f7      	bne.n	97132 <usart_serial_putchar+0x8e>
		return 1;
   97142:	2301      	movs	r3, #1
   97144:	e000      	b.n	97148 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   97146:	2300      	movs	r3, #0
}
   97148:	4618      	mov	r0, r3
   9714a:	3708      	adds	r7, #8
   9714c:	46bd      	mov	sp, r7
   9714e:	bd80      	pop	{r7, pc}
   97150:	400e0800 	.word	0x400e0800
   97154:	00098841 	.word	0x00098841
   97158:	40098000 	.word	0x40098000
   9715c:	00098aad 	.word	0x00098aad
   97160:	4009c000 	.word	0x4009c000
   97164:	400a0000 	.word	0x400a0000
   97168:	400a4000 	.word	0x400a4000

0009716c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   9716c:	b580      	push	{r7, lr}
   9716e:	b084      	sub	sp, #16
   97170:	af00      	add	r7, sp, #0
   97172:	6078      	str	r0, [r7, #4]
   97174:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   97176:	2300      	movs	r3, #0
   97178:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   9717a:	687b      	ldr	r3, [r7, #4]
   9717c:	4a2b      	ldr	r2, [pc, #172]	; (9722c <usart_serial_getchar+0xc0>)
   9717e:	4293      	cmp	r3, r2
   97180:	d107      	bne.n	97192 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   97182:	bf00      	nop
   97184:	6839      	ldr	r1, [r7, #0]
   97186:	6878      	ldr	r0, [r7, #4]
   97188:	4b29      	ldr	r3, [pc, #164]	; (97230 <usart_serial_getchar+0xc4>)
   9718a:	4798      	blx	r3
   9718c:	4603      	mov	r3, r0
   9718e:	2b00      	cmp	r3, #0
   97190:	d1f8      	bne.n	97184 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   97192:	687b      	ldr	r3, [r7, #4]
   97194:	4a27      	ldr	r2, [pc, #156]	; (97234 <usart_serial_getchar+0xc8>)
   97196:	4293      	cmp	r3, r2
   97198:	d10d      	bne.n	971b6 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   9719a:	bf00      	nop
   9719c:	f107 030c 	add.w	r3, r7, #12
   971a0:	4619      	mov	r1, r3
   971a2:	6878      	ldr	r0, [r7, #4]
   971a4:	4b24      	ldr	r3, [pc, #144]	; (97238 <usart_serial_getchar+0xcc>)
   971a6:	4798      	blx	r3
   971a8:	4603      	mov	r3, r0
   971aa:	2b00      	cmp	r3, #0
   971ac:	d1f6      	bne.n	9719c <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   971ae:	68fb      	ldr	r3, [r7, #12]
   971b0:	b2da      	uxtb	r2, r3
   971b2:	683b      	ldr	r3, [r7, #0]
   971b4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   971b6:	687b      	ldr	r3, [r7, #4]
   971b8:	4a20      	ldr	r2, [pc, #128]	; (9723c <usart_serial_getchar+0xd0>)
   971ba:	4293      	cmp	r3, r2
   971bc:	d10d      	bne.n	971da <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   971be:	bf00      	nop
   971c0:	f107 030c 	add.w	r3, r7, #12
   971c4:	4619      	mov	r1, r3
   971c6:	6878      	ldr	r0, [r7, #4]
   971c8:	4b1b      	ldr	r3, [pc, #108]	; (97238 <usart_serial_getchar+0xcc>)
   971ca:	4798      	blx	r3
   971cc:	4603      	mov	r3, r0
   971ce:	2b00      	cmp	r3, #0
   971d0:	d1f6      	bne.n	971c0 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   971d2:	68fb      	ldr	r3, [r7, #12]
   971d4:	b2da      	uxtb	r2, r3
   971d6:	683b      	ldr	r3, [r7, #0]
   971d8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   971da:	687b      	ldr	r3, [r7, #4]
   971dc:	4a18      	ldr	r2, [pc, #96]	; (97240 <usart_serial_getchar+0xd4>)
   971de:	4293      	cmp	r3, r2
   971e0:	d10d      	bne.n	971fe <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   971e2:	bf00      	nop
   971e4:	f107 030c 	add.w	r3, r7, #12
   971e8:	4619      	mov	r1, r3
   971ea:	6878      	ldr	r0, [r7, #4]
   971ec:	4b12      	ldr	r3, [pc, #72]	; (97238 <usart_serial_getchar+0xcc>)
   971ee:	4798      	blx	r3
   971f0:	4603      	mov	r3, r0
   971f2:	2b00      	cmp	r3, #0
   971f4:	d1f6      	bne.n	971e4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   971f6:	68fb      	ldr	r3, [r7, #12]
   971f8:	b2da      	uxtb	r2, r3
   971fa:	683b      	ldr	r3, [r7, #0]
   971fc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   971fe:	687b      	ldr	r3, [r7, #4]
   97200:	4a10      	ldr	r2, [pc, #64]	; (97244 <usart_serial_getchar+0xd8>)
   97202:	4293      	cmp	r3, r2
   97204:	d10d      	bne.n	97222 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   97206:	bf00      	nop
   97208:	f107 030c 	add.w	r3, r7, #12
   9720c:	4619      	mov	r1, r3
   9720e:	6878      	ldr	r0, [r7, #4]
   97210:	4b09      	ldr	r3, [pc, #36]	; (97238 <usart_serial_getchar+0xcc>)
   97212:	4798      	blx	r3
   97214:	4603      	mov	r3, r0
   97216:	2b00      	cmp	r3, #0
   97218:	d1f6      	bne.n	97208 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   9721a:	68fb      	ldr	r3, [r7, #12]
   9721c:	b2da      	uxtb	r2, r3
   9721e:	683b      	ldr	r3, [r7, #0]
   97220:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   97222:	bf00      	nop
   97224:	3710      	adds	r7, #16
   97226:	46bd      	mov	sp, r7
   97228:	bd80      	pop	{r7, pc}
   9722a:	bf00      	nop
   9722c:	400e0800 	.word	0x400e0800
   97230:	00098885 	.word	0x00098885
   97234:	40098000 	.word	0x40098000
   97238:	00098add 	.word	0x00098add
   9723c:	4009c000 	.word	0x4009c000
   97240:	400a0000 	.word	0x400a0000
   97244:	400a4000 	.word	0x400a4000

00097248 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   97248:	b580      	push	{r7, lr}
   9724a:	b082      	sub	sp, #8
   9724c:	af00      	add	r7, sp, #0
   9724e:	6078      	str	r0, [r7, #4]
   97250:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   97252:	4a0f      	ldr	r2, [pc, #60]	; (97290 <stdio_serial_init+0x48>)
   97254:	687b      	ldr	r3, [r7, #4]
   97256:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   97258:	4b0e      	ldr	r3, [pc, #56]	; (97294 <stdio_serial_init+0x4c>)
   9725a:	4a0f      	ldr	r2, [pc, #60]	; (97298 <stdio_serial_init+0x50>)
   9725c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   9725e:	4b0f      	ldr	r3, [pc, #60]	; (9729c <stdio_serial_init+0x54>)
   97260:	4a0f      	ldr	r2, [pc, #60]	; (972a0 <stdio_serial_init+0x58>)
   97262:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   97264:	6839      	ldr	r1, [r7, #0]
   97266:	6878      	ldr	r0, [r7, #4]
   97268:	4b0e      	ldr	r3, [pc, #56]	; (972a4 <stdio_serial_init+0x5c>)
   9726a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   9726c:	4b0e      	ldr	r3, [pc, #56]	; (972a8 <stdio_serial_init+0x60>)
   9726e:	681b      	ldr	r3, [r3, #0]
   97270:	689b      	ldr	r3, [r3, #8]
   97272:	2100      	movs	r1, #0
   97274:	4618      	mov	r0, r3
   97276:	4b0d      	ldr	r3, [pc, #52]	; (972ac <stdio_serial_init+0x64>)
   97278:	4798      	blx	r3
	setbuf(stdin, NULL);
   9727a:	4b0b      	ldr	r3, [pc, #44]	; (972a8 <stdio_serial_init+0x60>)
   9727c:	681b      	ldr	r3, [r3, #0]
   9727e:	685b      	ldr	r3, [r3, #4]
   97280:	2100      	movs	r1, #0
   97282:	4618      	mov	r0, r3
   97284:	4b09      	ldr	r3, [pc, #36]	; (972ac <stdio_serial_init+0x64>)
   97286:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   97288:	bf00      	nop
   9728a:	3708      	adds	r7, #8
   9728c:	46bd      	mov	sp, r7
   9728e:	bd80      	pop	{r7, pc}
   97290:	20073344 	.word	0x20073344
   97294:	20073340 	.word	0x20073340
   97298:	000970a5 	.word	0x000970a5
   9729c:	2007333c 	.word	0x2007333c
   972a0:	0009716d 	.word	0x0009716d
   972a4:	00096f6d 	.word	0x00096f6d
   972a8:	200710c8 	.word	0x200710c8
   972ac:	000a3ab9 	.word	0x000a3ab9

000972b0 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   972b0:	b580      	push	{r7, lr}
   972b2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   972b4:	2008      	movs	r0, #8
   972b6:	4b11      	ldr	r3, [pc, #68]	; (972fc <DD_INIT_UART+0x4c>)
   972b8:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   972ba:	4b11      	ldr	r3, [pc, #68]	; (97300 <DD_INIT_UART+0x50>)
   972bc:	2250      	movs	r2, #80	; 0x50
   972be:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   972c0:	4b0f      	ldr	r3, [pc, #60]	; (97300 <DD_INIT_UART+0x50>)
   972c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   972c6:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   972c8:	4b0d      	ldr	r3, [pc, #52]	; (97300 <DD_INIT_UART+0x50>)
   972ca:	2246      	movs	r2, #70	; 0x46
   972cc:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   972ce:	490d      	ldr	r1, [pc, #52]	; (97304 <DD_INIT_UART+0x54>)
   972d0:	480b      	ldr	r0, [pc, #44]	; (97300 <DD_INIT_UART+0x50>)
   972d2:	4b0d      	ldr	r3, [pc, #52]	; (97308 <DD_INIT_UART+0x58>)
   972d4:	4798      	blx	r3
	uart_enable(UART);
   972d6:	480a      	ldr	r0, [pc, #40]	; (97300 <DD_INIT_UART+0x50>)
   972d8:	4b0c      	ldr	r3, [pc, #48]	; (9730c <DD_INIT_UART+0x5c>)
   972da:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   972dc:	2101      	movs	r1, #1
   972de:	4808      	ldr	r0, [pc, #32]	; (97300 <DD_INIT_UART+0x50>)
   972e0:	4b0b      	ldr	r3, [pc, #44]	; (97310 <DD_INIT_UART+0x60>)
   972e2:	4798      	blx	r3
	uart_enable(UART);
   972e4:	4806      	ldr	r0, [pc, #24]	; (97300 <DD_INIT_UART+0x50>)
   972e6:	4b09      	ldr	r3, [pc, #36]	; (9730c <DD_INIT_UART+0x5c>)
   972e8:	4798      	blx	r3
	uart_enable_rx(UART);
   972ea:	4805      	ldr	r0, [pc, #20]	; (97300 <DD_INIT_UART+0x50>)
   972ec:	4b09      	ldr	r3, [pc, #36]	; (97314 <DD_INIT_UART+0x64>)
   972ee:	4798      	blx	r3
	uart_enable_tx(UART);
   972f0:	4803      	ldr	r0, [pc, #12]	; (97300 <DD_INIT_UART+0x50>)
   972f2:	4b09      	ldr	r3, [pc, #36]	; (97318 <DD_INIT_UART+0x68>)
   972f4:	4798      	blx	r3
	
	
}
   972f6:	bf00      	nop
   972f8:	bd80      	pop	{r7, pc}
   972fa:	bf00      	nop
   972fc:	00096f51 	.word	0x00096f51
   97300:	400e0800 	.word	0x400e0800
   97304:	000a58a8 	.word	0x000a58a8
   97308:	00097249 	.word	0x00097249
   9730c:	0009880d 	.word	0x0009880d
   97310:	00098825 	.word	0x00098825
   97314:	000987f5 	.word	0x000987f5
   97318:	000987dd 	.word	0x000987dd

0009731c <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   9731c:	b580      	push	{r7, lr}
   9731e:	b084      	sub	sp, #16
   97320:	af00      	add	r7, sp, #0
   97322:	4603      	mov	r3, r0
   97324:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   97326:	79fb      	ldrb	r3, [r7, #7]
   97328:	4619      	mov	r1, r3
   9732a:	4804      	ldr	r0, [pc, #16]	; (9733c <DD_TX_UART+0x20>)
   9732c:	4b04      	ldr	r3, [pc, #16]	; (97340 <DD_TX_UART+0x24>)
   9732e:	4798      	blx	r3
   97330:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   97332:	68fb      	ldr	r3, [r7, #12]
}
   97334:	4618      	mov	r0, r3
   97336:	3710      	adds	r7, #16
   97338:	46bd      	mov	sp, r7
   9733a:	bd80      	pop	{r7, pc}
   9733c:	400e0800 	.word	0x400e0800
   97340:	00098841 	.word	0x00098841

00097344 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   97344:	b580      	push	{r7, lr}
   97346:	b082      	sub	sp, #8
   97348:	af00      	add	r7, sp, #0
   9734a:	4603      	mov	r3, r0
   9734c:	460a      	mov	r2, r1
   9734e:	80fb      	strh	r3, [r7, #6]
   97350:	4613      	mov	r3, r2
   97352:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   97354:	88ba      	ldrh	r2, [r7, #4]
   97356:	88fb      	ldrh	r3, [r7, #6]
   97358:	4611      	mov	r1, r2
   9735a:	4618      	mov	r0, r3
   9735c:	4b02      	ldr	r3, [pc, #8]	; (97368 <SV_CAN_WRITE_PROPO+0x24>)
   9735e:	4798      	blx	r3
	
}
   97360:	bf00      	nop
   97362:	3708      	adds	r7, #8
   97364:	46bd      	mov	sp, r7
   97366:	bd80      	pop	{r7, pc}
   97368:	00094269 	.word	0x00094269

0009736c <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   9736c:	b580      	push	{r7, lr}
   9736e:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   97370:	4b02      	ldr	r3, [pc, #8]	; (9737c <SV_CAN_READ_HEMO+0x10>)
   97372:	4798      	blx	r3
	return 0;
   97374:	2300      	movs	r3, #0
}
   97376:	4618      	mov	r0, r3
   97378:	bd80      	pop	{r7, pc}
   9737a:	bf00      	nop
   9737c:	00094329 	.word	0x00094329

00097380 <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   97380:	b580      	push	{r7, lr}
   97382:	b082      	sub	sp, #8
   97384:	af00      	add	r7, sp, #0
   97386:	4603      	mov	r3, r0
   97388:	6039      	str	r1, [r7, #0]
   9738a:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   9738c:	683b      	ldr	r3, [r7, #0]
   9738e:	b29b      	uxth	r3, r3
   97390:	4618      	mov	r0, r3
   97392:	4b03      	ldr	r3, [pc, #12]	; (973a0 <SV_CAN_WRITE_SENSOR+0x20>)
   97394:	4798      	blx	r3
	
}
   97396:	bf00      	nop
   97398:	3708      	adds	r7, #8
   9739a:	46bd      	mov	sp, r7
   9739c:	bd80      	pop	{r7, pc}
   9739e:	bf00      	nop
   973a0:	000942e5 	.word	0x000942e5

000973a4 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   973a4:	b580      	push	{r7, lr}
   973a6:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   973a8:	4b23      	ldr	r3, [pc, #140]	; (97438 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   973aa:	681b      	ldr	r3, [r3, #0]
   973ac:	4a23      	ldr	r2, [pc, #140]	; (9743c <SV_CAN_REQUEST_SENSORDATA+0x98>)
   973ae:	6013      	str	r3, [r2, #0]
	delay = 0;	
   973b0:	4b23      	ldr	r3, [pc, #140]	; (97440 <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   973b2:	2200      	movs	r2, #0
   973b4:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   973b6:	200a      	movs	r0, #10
   973b8:	4b22      	ldr	r3, [pc, #136]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   973ba:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   973bc:	2141      	movs	r1, #65	; 0x41
   973be:	2003      	movs	r0, #3
   973c0:	4b21      	ldr	r3, [pc, #132]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   973c2:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   973c4:	4b21      	ldr	r3, [pc, #132]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   973c6:	2200      	movs	r2, #0
   973c8:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   973ca:	200a      	movs	r0, #10
   973cc:	4b1d      	ldr	r3, [pc, #116]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   973ce:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   973d0:	2142      	movs	r1, #66	; 0x42
   973d2:	2003      	movs	r0, #3
   973d4:	4b1c      	ldr	r3, [pc, #112]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   973d6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   973d8:	4b1c      	ldr	r3, [pc, #112]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   973da:	2200      	movs	r2, #0
   973dc:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   973de:	200a      	movs	r0, #10
   973e0:	4b18      	ldr	r3, [pc, #96]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   973e2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   973e4:	2143      	movs	r1, #67	; 0x43
   973e6:	2003      	movs	r0, #3
   973e8:	4b17      	ldr	r3, [pc, #92]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   973ea:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   973ec:	4b17      	ldr	r3, [pc, #92]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   973ee:	2200      	movs	r2, #0
   973f0:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   973f2:	200a      	movs	r0, #10
   973f4:	4b13      	ldr	r3, [pc, #76]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   973f6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   973f8:	2144      	movs	r1, #68	; 0x44
   973fa:	2003      	movs	r0, #3
   973fc:	4b12      	ldr	r3, [pc, #72]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   973fe:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   97400:	4b12      	ldr	r3, [pc, #72]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   97402:	2200      	movs	r2, #0
   97404:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   97406:	200a      	movs	r0, #10
   97408:	4b0e      	ldr	r3, [pc, #56]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9740a:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   9740c:	2145      	movs	r1, #69	; 0x45
   9740e:	2003      	movs	r0, #3
   97410:	4b0d      	ldr	r3, [pc, #52]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   97412:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   97414:	4b0d      	ldr	r3, [pc, #52]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   97416:	2200      	movs	r2, #0
   97418:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   9741a:	200a      	movs	r0, #10
   9741c:	4b09      	ldr	r3, [pc, #36]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9741e:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   97420:	2146      	movs	r1, #70	; 0x46
   97422:	2003      	movs	r0, #3
   97424:	4b08      	ldr	r3, [pc, #32]	; (97448 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   97426:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   97428:	200a      	movs	r0, #10
   9742a:	4b06      	ldr	r3, [pc, #24]	; (97444 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9742c:	4798      	blx	r3
	array1[6]	= 0;
   9742e:	4b07      	ldr	r3, [pc, #28]	; (9744c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   97430:	2200      	movs	r2, #0
   97432:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   97434:	bf00      	nop
   97436:	bd80      	pop	{r7, pc}
   97438:	20072674 	.word	0x20072674
   9743c:	20072720 	.word	0x20072720
   97440:	20072724 	.word	0x20072724
   97444:	000918fd 	.word	0x000918fd
   97448:	00097381 	.word	0x00097381
   9744c:	20072714 	.word	0x20072714

00097450 <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   97450:	b580      	push	{r7, lr}
   97452:	b084      	sub	sp, #16
   97454:	af00      	add	r7, sp, #0
   97456:	4603      	mov	r3, r0
   97458:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   9745a:	2300      	movs	r3, #0
   9745c:	60fb      	str	r3, [r7, #12]
	
	if(sv_pump_id != BLOODPUMP)
   9745e:	79fb      	ldrb	r3, [r7, #7]
   97460:	2b03      	cmp	r3, #3
   97462:	d004      	beq.n	9746e <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   97464:	79fb      	ldrb	r3, [r7, #7]
   97466:	4618      	mov	r0, r3
   97468:	4b06      	ldr	r3, [pc, #24]	; (97484 <sv_cntrl_activatepump+0x34>)
   9746a:	4798      	blx	r3
   9746c:	e005      	b.n	9747a <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   9746e:	2301      	movs	r3, #1
   97470:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   97472:	2100      	movs	r1, #0
   97474:	2020      	movs	r0, #32
   97476:	4b04      	ldr	r3, [pc, #16]	; (97488 <sv_cntrl_activatepump+0x38>)
   97478:	4798      	blx	r3
	}
	
	return 0;
   9747a:	2300      	movs	r3, #0
}
   9747c:	4618      	mov	r0, r3
   9747e:	3710      	adds	r7, #16
   97480:	46bd      	mov	sp, r7
   97482:	bd80      	pop	{r7, pc}
   97484:	00095855 	.word	0x00095855
   97488:	0009429d 	.word	0x0009429d

0009748c <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   9748c:	b580      	push	{r7, lr}
   9748e:	b084      	sub	sp, #16
   97490:	af00      	add	r7, sp, #0
   97492:	4603      	mov	r3, r0
   97494:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   97496:	2300      	movs	r3, #0
   97498:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   9749a:	79fb      	ldrb	r3, [r7, #7]
   9749c:	2b03      	cmp	r3, #3
   9749e:	d004      	beq.n	974aa <sv_cntrl_deactivatepump+0x1e>
	{
		DD_RESET_PUMP(sv_pump_id);
   974a0:	79fb      	ldrb	r3, [r7, #7]
   974a2:	4618      	mov	r0, r3
   974a4:	4b06      	ldr	r3, [pc, #24]	; (974c0 <sv_cntrl_deactivatepump+0x34>)
   974a6:	4798      	blx	r3
   974a8:	e005      	b.n	974b6 <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   974aa:	2302      	movs	r3, #2
   974ac:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   974ae:	2100      	movs	r1, #0
   974b0:	2021      	movs	r0, #33	; 0x21
   974b2:	4b04      	ldr	r3, [pc, #16]	; (974c4 <sv_cntrl_deactivatepump+0x38>)
   974b4:	4798      	blx	r3
	}
	
	
	return 0;
   974b6:	2300      	movs	r3, #0
}
   974b8:	4618      	mov	r0, r3
   974ba:	3710      	adds	r7, #16
   974bc:	46bd      	mov	sp, r7
   974be:	bd80      	pop	{r7, pc}
   974c0:	000959f5 	.word	0x000959f5
   974c4:	0009429d 	.word	0x0009429d

000974c8 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   974c8:	b580      	push	{r7, lr}
   974ca:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   974cc:	4b02      	ldr	r3, [pc, #8]	; (974d8 <sv_cntrl_poweronheater+0x10>)
   974ce:	4798      	blx	r3
	 return 0;
   974d0:	2300      	movs	r3, #0
}
   974d2:	4618      	mov	r0, r3
   974d4:	bd80      	pop	{r7, pc}
   974d6:	bf00      	nop
   974d8:	00095935 	.word	0x00095935

000974dc <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   974dc:	b580      	push	{r7, lr}
   974de:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   974e0:	4b02      	ldr	r3, [pc, #8]	; (974ec <sv_cntrl_poweroffheater+0x10>)
   974e2:	4798      	blx	r3
	return 0;
   974e4:	2300      	movs	r3, #0
}
   974e6:	4618      	mov	r0, r3
   974e8:	bd80      	pop	{r7, pc}
   974ea:	bf00      	nop
   974ec:	00095995 	.word	0x00095995

000974f0 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   974f0:	b580      	push	{r7, lr}
   974f2:	b082      	sub	sp, #8
   974f4:	af00      	add	r7, sp, #0
   974f6:	4603      	mov	r3, r0
   974f8:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   974fa:	79fb      	ldrb	r3, [r7, #7]
   974fc:	4618      	mov	r0, r3
   974fe:	4b03      	ldr	r3, [pc, #12]	; (9750c <sv_cntrl_activate_valve+0x1c>)
   97500:	4798      	blx	r3
	}
	
	
	return 0;
   97502:	2300      	movs	r3, #0
}
   97504:	4618      	mov	r0, r3
   97506:	3708      	adds	r7, #8
   97508:	46bd      	mov	sp, r7
   9750a:	bd80      	pop	{r7, pc}
   9750c:	00095d6d 	.word	0x00095d6d

00097510 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   97510:	b580      	push	{r7, lr}
   97512:	b082      	sub	sp, #8
   97514:	af00      	add	r7, sp, #0
   97516:	4603      	mov	r3, r0
   97518:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   9751a:	79fb      	ldrb	r3, [r7, #7]
   9751c:	2b10      	cmp	r3, #16
   9751e:	d101      	bne.n	97524 <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   97520:	4b05      	ldr	r3, [pc, #20]	; (97538 <sv_cntrl_deactivate_valve+0x28>)
   97522:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   97524:	79fb      	ldrb	r3, [r7, #7]
   97526:	4618      	mov	r0, r3
   97528:	4b04      	ldr	r3, [pc, #16]	; (9753c <sv_cntrl_deactivate_valve+0x2c>)
   9752a:	4798      	blx	r3
	
	return 0;
   9752c:	2300      	movs	r3, #0
}
   9752e:	4618      	mov	r0, r3
   97530:	3708      	adds	r7, #8
   97532:	46bd      	mov	sp, r7
   97534:	bd80      	pop	{r7, pc}
   97536:	bf00      	nop
   97538:	00095995 	.word	0x00095995
   9753c:	00095e35 	.word	0x00095e35

00097540 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   97540:	b580      	push	{r7, lr}
   97542:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   97544:	4b02      	ldr	r3, [pc, #8]	; (97550 <sv_cntrl_setHepa_dir+0x10>)
   97546:	4798      	blx	r3
	
	return 0;
   97548:	2300      	movs	r3, #0
}
   9754a:	4618      	mov	r0, r3
   9754c:	bd80      	pop	{r7, pc}
   9754e:	bf00      	nop
   97550:	00095c7d 	.word	0x00095c7d

00097554 <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   97554:	b580      	push	{r7, lr}
   97556:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   97558:	4b02      	ldr	r3, [pc, #8]	; (97564 <sv_cntrl_resetHepa_dir+0x10>)
   9755a:	4798      	blx	r3
	
	return 0;	
   9755c:	2300      	movs	r3, #0
}
   9755e:	4618      	mov	r0, r3
   97560:	bd80      	pop	{r7, pc}
   97562:	bf00      	nop
   97564:	00095ca5 	.word	0x00095ca5

00097568 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   97568:	b580      	push	{r7, lr}
   9756a:	b084      	sub	sp, #16
   9756c:	af00      	add	r7, sp, #0
   9756e:	4603      	mov	r3, r0
   97570:	6039      	str	r1, [r7, #0]
   97572:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   97574:	2300      	movs	r3, #0
   97576:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   97578:	2304      	movs	r3, #4
   9757a:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   9757c:	683b      	ldr	r3, [r7, #0]
   9757e:	b2db      	uxtb	r3, r3
   97580:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   97582:	683b      	ldr	r3, [r7, #0]
   97584:	0a1b      	lsrs	r3, r3, #8
   97586:	b2db      	uxtb	r3, r3
   97588:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   9758a:	79fb      	ldrb	r3, [r7, #7]
   9758c:	2b03      	cmp	r3, #3
   9758e:	d005      	beq.n	9759c <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   97590:	79fb      	ldrb	r3, [r7, #7]
   97592:	6839      	ldr	r1, [r7, #0]
   97594:	4618      	mov	r0, r3
   97596:	4b07      	ldr	r3, [pc, #28]	; (975b4 <sv_cntrl_setpumpspeed+0x4c>)
   97598:	4798      	blx	r3
   9759a:	e005      	b.n	975a8 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   9759c:	683b      	ldr	r3, [r7, #0]
   9759e:	b29b      	uxth	r3, r3
   975a0:	4619      	mov	r1, r3
   975a2:	2023      	movs	r0, #35	; 0x23
   975a4:	4b04      	ldr	r3, [pc, #16]	; (975b8 <sv_cntrl_setpumpspeed+0x50>)
   975a6:	4798      	blx	r3
		}
		
	
	return 0;
   975a8:	2300      	movs	r3, #0
}
   975aa:	4618      	mov	r0, r3
   975ac:	3710      	adds	r7, #16
   975ae:	46bd      	mov	sp, r7
   975b0:	bd80      	pop	{r7, pc}
   975b2:	bf00      	nop
   975b4:	00095add 	.word	0x00095add
   975b8:	0009429d 	.word	0x0009429d

000975bc <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   975bc:	b480      	push	{r7}
   975be:	b083      	sub	sp, #12
   975c0:	af00      	add	r7, sp, #0
   975c2:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   975c4:	bf00      	nop
   975c6:	370c      	adds	r7, #12
   975c8:	46bd      	mov	sp, r7
   975ca:	bc80      	pop	{r7}
   975cc:	4770      	bx	lr
   975ce:	bf00      	nop

000975d0 <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   975d0:	b580      	push	{r7, lr}
   975d2:	b082      	sub	sp, #8
   975d4:	af00      	add	r7, sp, #0
   975d6:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   975d8:	4b0c      	ldr	r3, [pc, #48]	; (9760c <sv_cntrl_incheater+0x3c>)
   975da:	6878      	ldr	r0, [r7, #4]
   975dc:	4798      	blx	r3
   975de:	4602      	mov	r2, r0
   975e0:	4b0b      	ldr	r3, [pc, #44]	; (97610 <sv_cntrl_incheater+0x40>)
   975e2:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   975e4:	687b      	ldr	r3, [r7, #4]
   975e6:	f641 524c 	movw	r2, #7500	; 0x1d4c
   975ea:	4293      	cmp	r3, r2
   975ec:	dd02      	ble.n	975f4 <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   975ee:	f641 534c 	movw	r3, #7500	; 0x1d4c
   975f2:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   975f4:	687b      	ldr	r3, [r7, #4]
   975f6:	2b00      	cmp	r3, #0
   975f8:	dd03      	ble.n	97602 <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   975fa:	687b      	ldr	r3, [r7, #4]
   975fc:	4618      	mov	r0, r3
   975fe:	4b05      	ldr	r3, [pc, #20]	; (97614 <sv_cntrl_incheater+0x44>)
   97600:	4798      	blx	r3
	 }
	
	
	return 0;
   97602:	2300      	movs	r3, #0
}
   97604:	4618      	mov	r0, r3
   97606:	3708      	adds	r7, #8
   97608:	46bd      	mov	sp, r7
   9760a:	bd80      	pop	{r7, pc}
   9760c:	000a33a9 	.word	0x000a33a9
   97610:	20072d84 	.word	0x20072d84
   97614:	00095c59 	.word	0x00095c59

00097618 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   97618:	b580      	push	{r7, lr}
   9761a:	b082      	sub	sp, #8
   9761c:	af00      	add	r7, sp, #0
   9761e:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   97620:	687b      	ldr	r3, [r7, #4]
   97622:	2b00      	cmp	r3, #0
   97624:	dd03      	ble.n	9762e <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   97626:	687b      	ldr	r3, [r7, #4]
   97628:	4618      	mov	r0, r3
   9762a:	4b03      	ldr	r3, [pc, #12]	; (97638 <sv_cntrl_decheater+0x20>)
   9762c:	4798      	blx	r3
	 }
	
	
	return 0;
   9762e:	2300      	movs	r3, #0
}
   97630:	4618      	mov	r0, r3
   97632:	3708      	adds	r7, #8
   97634:	46bd      	mov	sp, r7
   97636:	bd80      	pop	{r7, pc}
   97638:	00095c59 	.word	0x00095c59

0009763c <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   9763c:	b580      	push	{r7, lr}
   9763e:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   97640:	4b02      	ldr	r3, [pc, #8]	; (9764c <sv_cntrl_activatevenousclamp+0x10>)
   97642:	4798      	blx	r3
	
	return 0;
   97644:	2300      	movs	r3, #0
}
   97646:	4618      	mov	r0, r3
   97648:	bd80      	pop	{r7, pc}
   9764a:	bf00      	nop
   9764c:	00096215 	.word	0x00096215

00097650 <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   97650:	b580      	push	{r7, lr}
   97652:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   97654:	4b02      	ldr	r3, [pc, #8]	; (97660 <sv_cntrl_deactivatevenousclamp+0x10>)
   97656:	4798      	blx	r3
	
	return 0;
   97658:	2300      	movs	r3, #0
}
   9765a:	4618      	mov	r0, r3
   9765c:	bd80      	pop	{r7, pc}
   9765e:	bf00      	nop
   97660:	0009623d 	.word	0x0009623d

00097664 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   97664:	b580      	push	{r7, lr}
   97666:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   97668:	4b03      	ldr	r3, [pc, #12]	; (97678 <sv_cntrl_enable_loopback+0x14>)
   9766a:	4798      	blx	r3
	Loopbackstatus = true;
   9766c:	4b03      	ldr	r3, [pc, #12]	; (9767c <sv_cntrl_enable_loopback+0x18>)
   9766e:	2201      	movs	r2, #1
   97670:	701a      	strb	r2, [r3, #0]
	return 0;
   97672:	2300      	movs	r3, #0

}
   97674:	4618      	mov	r0, r3
   97676:	bd80      	pop	{r7, pc}
   97678:	00095805 	.word	0x00095805
   9767c:	200730f7 	.word	0x200730f7

00097680 <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   97680:	b580      	push	{r7, lr}
   97682:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   97684:	4b03      	ldr	r3, [pc, #12]	; (97694 <sv_cntrl_disable_loopback+0x14>)
   97686:	4798      	blx	r3
	Loopbackstatus = false;
   97688:	4b03      	ldr	r3, [pc, #12]	; (97698 <sv_cntrl_disable_loopback+0x18>)
   9768a:	2200      	movs	r2, #0
   9768c:	701a      	strb	r2, [r3, #0]
	return 0;
   9768e:	2300      	movs	r3, #0

}
   97690:	4618      	mov	r0, r3
   97692:	bd80      	pop	{r7, pc}
   97694:	0009582d 	.word	0x0009582d
   97698:	200730f7 	.word	0x200730f7

0009769c <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   9769c:	b580      	push	{r7, lr}
   9769e:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   976a0:	4b05      	ldr	r3, [pc, #20]	; (976b8 <sv_cntrl_enable_bypass+0x1c>)
   976a2:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   976a4:	2004      	movs	r0, #4
   976a6:	4b05      	ldr	r3, [pc, #20]	; (976bc <sv_cntrl_enable_bypass+0x20>)
   976a8:	4798      	blx	r3
	Bypassstatus = true;
   976aa:	4b05      	ldr	r3, [pc, #20]	; (976c0 <sv_cntrl_enable_bypass+0x24>)
   976ac:	2201      	movs	r2, #1
   976ae:	701a      	strb	r2, [r3, #0]
	return 0;
   976b0:	2300      	movs	r3, #0

}
   976b2:	4618      	mov	r0, r3
   976b4:	bd80      	pop	{r7, pc}
   976b6:	bf00      	nop
   976b8:	000957a5 	.word	0x000957a5
   976bc:	0009748d 	.word	0x0009748d
   976c0:	2007318d 	.word	0x2007318d

000976c4 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   976c4:	b580      	push	{r7, lr}
   976c6:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   976c8:	4b03      	ldr	r3, [pc, #12]	; (976d8 <sv_cntrl_disable_bypass+0x14>)
   976ca:	4798      	blx	r3
	Bypassstatus = false;
   976cc:	4b03      	ldr	r3, [pc, #12]	; (976dc <sv_cntrl_disable_bypass+0x18>)
   976ce:	2200      	movs	r2, #0
   976d0:	701a      	strb	r2, [r3, #0]
	return 0;
   976d2:	2300      	movs	r3, #0

}
   976d4:	4618      	mov	r0, r3
   976d6:	bd80      	pop	{r7, pc}
   976d8:	000957d5 	.word	0x000957d5
   976dc:	2007318d 	.word	0x2007318d

000976e0 <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   976e0:	b580      	push	{r7, lr}
   976e2:	b082      	sub	sp, #8
   976e4:	af00      	add	r7, sp, #0
   976e6:	4603      	mov	r3, r0
   976e8:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   976ea:	4b0a      	ldr	r3, [pc, #40]	; (97714 <sv_cntrl_setflowpath+0x34>)
   976ec:	681a      	ldr	r2, [r3, #0]
   976ee:	4b0a      	ldr	r3, [pc, #40]	; (97718 <sv_cntrl_setflowpath+0x38>)
   976f0:	681b      	ldr	r3, [r3, #0]
   976f2:	1ad3      	subs	r3, r2, r3
   976f4:	4a09      	ldr	r2, [pc, #36]	; (9771c <sv_cntrl_setflowpath+0x3c>)
   976f6:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   976f8:	4b06      	ldr	r3, [pc, #24]	; (97714 <sv_cntrl_setflowpath+0x34>)
   976fa:	681b      	ldr	r3, [r3, #0]
   976fc:	4a06      	ldr	r2, [pc, #24]	; (97718 <sv_cntrl_setflowpath+0x38>)
   976fe:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   97700:	79fb      	ldrb	r3, [r7, #7]
   97702:	4618      	mov	r0, r3
   97704:	4b06      	ldr	r3, [pc, #24]	; (97720 <sv_cntrl_setflowpath+0x40>)
   97706:	4798      	blx	r3
	
	return 0;
   97708:	2300      	movs	r3, #0

}
   9770a:	4618      	mov	r0, r3
   9770c:	3708      	adds	r7, #8
   9770e:	46bd      	mov	sp, r7
   97710:	bd80      	pop	{r7, pc}
   97712:	bf00      	nop
   97714:	20072674 	.word	0x20072674
   97718:	20072f10 	.word	0x20072f10
   9771c:	20073074 	.word	0x20073074
   97720:	000965ed 	.word	0x000965ed

00097724 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   97724:	b580      	push	{r7, lr}
   97726:	b082      	sub	sp, #8
   97728:	af00      	add	r7, sp, #0
   9772a:	4603      	mov	r3, r0
   9772c:	6039      	str	r1, [r7, #0]
   9772e:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   97730:	79fb      	ldrb	r3, [r7, #7]
   97732:	6839      	ldr	r1, [r7, #0]
   97734:	4618      	mov	r0, r3
   97736:	4b03      	ldr	r3, [pc, #12]	; (97744 <sv_cntrl_setpumpfreq+0x20>)
   97738:	4798      	blx	r3
	return 0;
   9773a:	2300      	movs	r3, #0
}
   9773c:	4618      	mov	r0, r3
   9773e:	3708      	adds	r7, #8
   97740:	46bd      	mov	sp, r7
   97742:	bd80      	pop	{r7, pc}
   97744:	00095c09 	.word	0x00095c09

00097748 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   97748:	b580      	push	{r7, lr}
   9774a:	af00      	add	r7, sp, #0
	DD_SET_RED();
   9774c:	4b02      	ldr	r3, [pc, #8]	; (97758 <sv_cntrl_setredalarm+0x10>)
   9774e:	4798      	blx	r3
	return 0;
   97750:	2300      	movs	r3, #0
}
   97752:	4618      	mov	r0, r3
   97754:	bd80      	pop	{r7, pc}
   97756:	bf00      	nop
   97758:	00095ccd 	.word	0x00095ccd

0009775c <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   9775c:	b580      	push	{r7, lr}
   9775e:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   97760:	4b02      	ldr	r3, [pc, #8]	; (9776c <sv_cntrl_setyellowalarm+0x10>)
   97762:	4798      	blx	r3
	return 0;
   97764:	2300      	movs	r3, #0
}
   97766:	4618      	mov	r0, r3
   97768:	bd80      	pop	{r7, pc}
   9776a:	bf00      	nop
   9776c:	00095cf5 	.word	0x00095cf5

00097770 <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   97770:	b580      	push	{r7, lr}
   97772:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   97774:	4b02      	ldr	r3, [pc, #8]	; (97780 <sv_cntrl_setgreenalarm+0x10>)
   97776:	4798      	blx	r3
	return 0;
   97778:	2300      	movs	r3, #0
}
   9777a:	4618      	mov	r0, r3
   9777c:	bd80      	pop	{r7, pc}
   9777e:	bf00      	nop
   97780:	00095ce1 	.word	0x00095ce1

00097784 <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   97784:	b580      	push	{r7, lr}
   97786:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   97788:	4b02      	ldr	r3, [pc, #8]	; (97794 <sv_cntrl_buzzer+0x10>)
   9778a:	4798      	blx	r3
	return 0;
   9778c:	2300      	movs	r3, #0
}
   9778e:	4618      	mov	r0, r3
   97790:	bd80      	pop	{r7, pc}
   97792:	bf00      	nop
   97794:	00095d09 	.word	0x00095d09

00097798 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   97798:	b580      	push	{r7, lr}
   9779a:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   9779c:	4b02      	ldr	r3, [pc, #8]	; (977a8 <sv_cntrl_resetredalarm+0x10>)
   9779e:	4798      	blx	r3
	return 0;
   977a0:	2300      	movs	r3, #0
}
   977a2:	4618      	mov	r0, r3
   977a4:	bd80      	pop	{r7, pc}
   977a6:	bf00      	nop
   977a8:	00095d1d 	.word	0x00095d1d

000977ac <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   977ac:	b580      	push	{r7, lr}
   977ae:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   977b0:	4b02      	ldr	r3, [pc, #8]	; (977bc <sv_cntrl_resetyellowalarm+0x10>)
   977b2:	4798      	blx	r3
	return 0;
   977b4:	2300      	movs	r3, #0
}
   977b6:	4618      	mov	r0, r3
   977b8:	bd80      	pop	{r7, pc}
   977ba:	bf00      	nop
   977bc:	00095d45 	.word	0x00095d45

000977c0 <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   977c0:	b580      	push	{r7, lr}
   977c2:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   977c4:	4b02      	ldr	r3, [pc, #8]	; (977d0 <sv_cntrl_resetgreenalarm+0x10>)
   977c6:	4798      	blx	r3
	return 0;
   977c8:	2300      	movs	r3, #0
}
   977ca:	4618      	mov	r0, r3
   977cc:	bd80      	pop	{r7, pc}
   977ce:	bf00      	nop
   977d0:	00095d31 	.word	0x00095d31

000977d4 <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   977d4:	b580      	push	{r7, lr}
   977d6:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   977d8:	4b02      	ldr	r3, [pc, #8]	; (977e4 <sv_cntrl_nobuzzer+0x10>)
   977da:	4798      	blx	r3
	return 0;
   977dc:	2300      	movs	r3, #0
}
   977de:	4618      	mov	r0, r3
   977e0:	bd80      	pop	{r7, pc}
   977e2:	bf00      	nop
   977e4:	00095d59 	.word	0x00095d59

000977e8 <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   977e8:	b580      	push	{r7, lr}
   977ea:	b082      	sub	sp, #8
   977ec:	af00      	add	r7, sp, #0
   977ee:	6078      	str	r0, [r7, #4]
   977f0:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   977f2:	6879      	ldr	r1, [r7, #4]
   977f4:	6838      	ldr	r0, [r7, #0]
   977f6:	4b03      	ldr	r3, [pc, #12]	; (97804 <sv_cntrl_setoutput+0x1c>)
   977f8:	4798      	blx	r3
	return 0;
   977fa:	2300      	movs	r3, #0
}
   977fc:	4618      	mov	r0, r3
   977fe:	3708      	adds	r7, #8
   97800:	46bd      	mov	sp, r7
   97802:	bd80      	pop	{r7, pc}
   97804:	00094895 	.word	0x00094895

00097808 <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   97808:	b580      	push	{r7, lr}
   9780a:	b082      	sub	sp, #8
   9780c:	af00      	add	r7, sp, #0
   9780e:	6078      	str	r0, [r7, #4]
   97810:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   97812:	6879      	ldr	r1, [r7, #4]
   97814:	6838      	ldr	r0, [r7, #0]
   97816:	4b03      	ldr	r3, [pc, #12]	; (97824 <sv_cntrl_resetoutput+0x1c>)
   97818:	4798      	blx	r3
	
	return 0;
   9781a:	2300      	movs	r3, #0
   9781c:	4618      	mov	r0, r3
   9781e:	3708      	adds	r7, #8
   97820:	46bd      	mov	sp, r7
   97822:	bd80      	pop	{r7, pc}
   97824:	00094919 	.word	0x00094919

00097828 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   97828:	b580      	push	{r7, lr}
   9782a:	b084      	sub	sp, #16
   9782c:	af00      	add	r7, sp, #0
   9782e:	4603      	mov	r3, r0
   97830:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   97832:	79fb      	ldrb	r3, [r7, #7]
   97834:	4618      	mov	r0, r3
   97836:	4b04      	ldr	r3, [pc, #16]	; (97848 <sv_console_bytedatawrite+0x20>)
   97838:	4798      	blx	r3
   9783a:	4603      	mov	r3, r0
   9783c:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   9783e:	68fb      	ldr	r3, [r7, #12]
	
}
   97840:	4618      	mov	r0, r3
   97842:	3710      	adds	r7, #16
   97844:	46bd      	mov	sp, r7
   97846:	bd80      	pop	{r7, pc}
   97848:	000964f1 	.word	0x000964f1

0009784c <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   9784c:	b580      	push	{r7, lr}
   9784e:	b082      	sub	sp, #8
   97850:	af00      	add	r7, sp, #0
   97852:	4603      	mov	r3, r0
   97854:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   97856:	79fb      	ldrb	r3, [r7, #7]
   97858:	4618      	mov	r0, r3
   9785a:	4b03      	ldr	r3, [pc, #12]	; (97868 <sv_console_receivedbyte+0x1c>)
   9785c:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   9785e:	2300      	movs	r3, #0
	
}
   97860:	4618      	mov	r0, r3
   97862:	3708      	adds	r7, #8
   97864:	46bd      	mov	sp, r7
   97866:	bd80      	pop	{r7, pc}
   97868:	000997c9 	.word	0x000997c9

0009786c <sv_prop_startpropeo_aligning>:
void sv_prop_set_propo_CONDUCTIVITY(uint16_t data);
static uint8_t data = 0;
uint16_t count = 0;

void sv_prop_startpropeo_aligning(void)
{
   9786c:	b590      	push	{r4, r7, lr}
   9786e:	b085      	sub	sp, #20
   97870:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   97872:	4b07      	ldr	r3, [pc, #28]	; (97890 <sv_prop_startpropeo_aligning+0x24>)
   97874:	463c      	mov	r4, r7
   97876:	6818      	ldr	r0, [r3, #0]
   97878:	6859      	ldr	r1, [r3, #4]
   9787a:	689a      	ldr	r2, [r3, #8]
   9787c:	68db      	ldr	r3, [r3, #12]
   9787e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   97880:	2100      	movs	r1, #0
   97882:	2001      	movs	r0, #1
   97884:	4b03      	ldr	r3, [pc, #12]	; (97894 <sv_prop_startpropeo_aligning+0x28>)
   97886:	4798      	blx	r3

}
   97888:	bf00      	nop
   9788a:	3714      	adds	r7, #20
   9788c:	46bd      	mov	sp, r7
   9788e:	bd90      	pop	{r4, r7, pc}
   97890:	000a58b8 	.word	0x000a58b8
   97894:	00097345 	.word	0x00097345

00097898 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   97898:	b580      	push	{r7, lr}
   9789a:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,0);
   9789c:	2100      	movs	r1, #0
   9789e:	2002      	movs	r0, #2
   978a0:	4b01      	ldr	r3, [pc, #4]	; (978a8 <sv_prop_startmixing+0x10>)
   978a2:	4798      	blx	r3
	
	}
	
}
   978a4:	bf00      	nop
   978a6:	bd80      	pop	{r7, pc}
   978a8:	00097345 	.word	0x00097345

000978ac <sv_prop_startacidpump>:
void sv_prop_startacidpump()
{
   978ac:	b580      	push	{r7, lr}
   978ae:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   978b0:	2100      	movs	r1, #0
   978b2:	200c      	movs	r0, #12
   978b4:	4b01      	ldr	r3, [pc, #4]	; (978bc <sv_prop_startacidpump+0x10>)
   978b6:	4798      	blx	r3
			
}
   978b8:	bf00      	nop
   978ba:	bd80      	pop	{r7, pc}
   978bc:	00097345 	.word	0x00097345

000978c0 <sv_prop_set_propo_ACIDrc>:
	
}


void sv_prop_set_propo_ACIDrc(uint16_t data)
{
   978c0:	b580      	push	{r7, lr}
   978c2:	b084      	sub	sp, #16
   978c4:	af00      	add	r7, sp, #0
   978c6:	4603      	mov	r3, r0
   978c8:	80fb      	strh	r3, [r7, #6]
	
	uint16_t rc_count = data;
   978ca:	88fb      	ldrh	r3, [r7, #6]
   978cc:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_UPDATE_ACID_RC,data);                 // Gopal: Send Acid RC (speed) to Propo CPU via Can
   978ce:	88fb      	ldrh	r3, [r7, #6]
   978d0:	4619      	mov	r1, r3
   978d2:	200e      	movs	r0, #14
   978d4:	4b02      	ldr	r3, [pc, #8]	; (978e0 <sv_prop_set_propo_ACIDrc+0x20>)
   978d6:	4798      	blx	r3
}
   978d8:	bf00      	nop
   978da:	3710      	adds	r7, #16
   978dc:	46bd      	mov	sp, r7
   978de:	bd80      	pop	{r7, pc}
   978e0:	00097345 	.word	0x00097345

000978e4 <sv_prop_stopmixing>:
{
	uint16_t conductivity = data;
	SV_CAN_WRITE_PROPO( PROP_SET_CONDUCTIVITY,conductivity);      // Gopal: Send user set conducivity value to Propo CPU via Can
}
void sv_prop_stopmixing()
{
   978e4:	b580      	push	{r7, lr}
   978e6:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   978e8:	2100      	movs	r1, #0
   978ea:	2003      	movs	r0, #3
   978ec:	4b01      	ldr	r3, [pc, #4]	; (978f4 <sv_prop_stopmixing+0x10>)
   978ee:	4798      	blx	r3
}
   978f0:	bf00      	nop
   978f2:	bd80      	pop	{r7, pc}
   978f4:	00097345 	.word	0x00097345

000978f8 <sv_prop_start_disinfect_intake>:


void sv_prop_start_disinfect_intake(void)
{
   978f8:	b580      	push	{r7, lr}
   978fa:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   978fc:	2100      	movs	r1, #0
   978fe:	2004      	movs	r0, #4
   97900:	4b01      	ldr	r3, [pc, #4]	; (97908 <sv_prop_start_disinfect_intake+0x10>)
   97902:	4798      	blx	r3

	}
	
}
   97904:	bf00      	nop
   97906:	bd80      	pop	{r7, pc}
   97908:	00097345 	.word	0x00097345

0009790c <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   9790c:	b580      	push	{r7, lr}
   9790e:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   97910:	2100      	movs	r1, #0
   97912:	2005      	movs	r0, #5
   97914:	4b01      	ldr	r3, [pc, #4]	; (9791c <sv_prop_stop_disinfect_intake+0x10>)
   97916:	4798      	blx	r3

	}
	
}
   97918:	bf00      	nop
   9791a:	bd80      	pop	{r7, pc}
   9791c:	00097345 	.word	0x00097345

00097920 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   97920:	b580      	push	{r7, lr}
   97922:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   97924:	2100      	movs	r1, #0
   97926:	2006      	movs	r0, #6
   97928:	4b01      	ldr	r3, [pc, #4]	; (97930 <sv_prop_start_citricdisinfect_intake+0x10>)
   9792a:	4798      	blx	r3


	}
	
}
   9792c:	bf00      	nop
   9792e:	bd80      	pop	{r7, pc}
   97930:	00097345 	.word	0x00097345

00097934 <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   97934:	b580      	push	{r7, lr}
   97936:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   97938:	2100      	movs	r1, #0
   9793a:	2007      	movs	r0, #7
   9793c:	4b01      	ldr	r3, [pc, #4]	; (97944 <sv_prop_stop_citricdisinfect_intake+0x10>)
   9793e:	4798      	blx	r3


	}
	
}
   97940:	bf00      	nop
   97942:	bd80      	pop	{r7, pc}
   97944:	00097345 	.word	0x00097345

00097948 <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   97948:	b580      	push	{r7, lr}
   9794a:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   9794c:	2206      	movs	r2, #6
   9794e:	4905      	ldr	r1, [pc, #20]	; (97964 <sv_prop_startopenfill+0x1c>)
   97950:	2018      	movs	r0, #24
   97952:	4b05      	ldr	r3, [pc, #20]	; (97968 <sv_prop_startopenfill+0x20>)
   97954:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   97956:	2100      	movs	r1, #0
   97958:	2008      	movs	r0, #8
   9795a:	4b04      	ldr	r3, [pc, #16]	; (9796c <sv_prop_startopenfill+0x24>)
   9795c:	4798      	blx	r3
}
   9795e:	bf00      	nop
   97960:	bd80      	pop	{r7, pc}
   97962:	bf00      	nop
   97964:	000a58c8 	.word	0x000a58c8
   97968:	0009926d 	.word	0x0009926d
   9796c:	00097345 	.word	0x00097345

00097970 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   97970:	b580      	push	{r7, lr}
   97972:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   97974:	2206      	movs	r2, #6
   97976:	4905      	ldr	r1, [pc, #20]	; (9798c <sv_prop_stopopenfill+0x1c>)
   97978:	2018      	movs	r0, #24
   9797a:	4b05      	ldr	r3, [pc, #20]	; (97990 <sv_prop_stopopenfill+0x20>)
   9797c:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   9797e:	2100      	movs	r1, #0
   97980:	2009      	movs	r0, #9
   97982:	4b04      	ldr	r3, [pc, #16]	; (97994 <sv_prop_stopopenfill+0x24>)
   97984:	4798      	blx	r3
}
   97986:	bf00      	nop
   97988:	bd80      	pop	{r7, pc}
   9798a:	bf00      	nop
   9798c:	000a58d0 	.word	0x000a58d0
   97990:	0009926d 	.word	0x0009926d
   97994:	00097345 	.word	0x00097345

00097998 <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   97998:	b580      	push	{r7, lr}
   9799a:	b082      	sub	sp, #8
   9799c:	af00      	add	r7, sp, #0
   9799e:	4603      	mov	r3, r0
   979a0:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   979a2:	88fb      	ldrh	r3, [r7, #6]
   979a4:	4618      	mov	r0, r3
   979a6:	4b03      	ldr	r3, [pc, #12]	; (979b4 <sv_cs_setpotvalue+0x1c>)
   979a8:	4798      	blx	r3
		
		}
   979aa:	bf00      	nop
   979ac:	4618      	mov	r0, r3
   979ae:	3708      	adds	r7, #8
   979b0:	46bd      	mov	sp, r7
   979b2:	bd80      	pop	{r7, pc}
   979b4:	000979dd 	.word	0x000979dd

000979b8 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   979b8:	b580      	push	{r7, lr}
   979ba:	b082      	sub	sp, #8
   979bc:	af00      	add	r7, sp, #0
   979be:	4603      	mov	r3, r0
   979c0:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   979c2:	88fb      	ldrh	r3, [r7, #6]
   979c4:	4619      	mov	r1, r3
   979c6:	202f      	movs	r0, #47	; 0x2f
   979c8:	4b03      	ldr	r3, [pc, #12]	; (979d8 <sv_cs_setcondpotvalue+0x20>)
   979ca:	4798      	blx	r3
	
}
   979cc:	bf00      	nop
   979ce:	4618      	mov	r0, r3
   979d0:	3708      	adds	r7, #8
   979d2:	46bd      	mov	sp, r7
   979d4:	bd80      	pop	{r7, pc}
   979d6:	bf00      	nop
   979d8:	00094ecd 	.word	0x00094ecd

000979dc <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   979dc:	b580      	push	{r7, lr}
   979de:	b084      	sub	sp, #16
   979e0:	af00      	add	r7, sp, #0
   979e2:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   979e4:	687b      	ldr	r3, [r7, #4]
   979e6:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   979e8:	89fb      	ldrh	r3, [r7, #14]
   979ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
   979ee:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   979f0:	4b08      	ldr	r3, [pc, #32]	; (97a14 <SV_CS_SET_POT+0x38>)
   979f2:	f641 4202 	movw	r2, #7170	; 0x1c02
   979f6:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   979f8:	89fb      	ldrh	r3, [r7, #14]
   979fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   979fe:	b29a      	uxth	r2, r3
   97a00:	4b04      	ldr	r3, [pc, #16]	; (97a14 <SV_CS_SET_POT+0x38>)
   97a02:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   97a04:	2102      	movs	r1, #2
   97a06:	4803      	ldr	r0, [pc, #12]	; (97a14 <SV_CS_SET_POT+0x38>)
   97a08:	4b03      	ldr	r3, [pc, #12]	; (97a18 <SV_CS_SET_POT+0x3c>)
   97a0a:	4798      	blx	r3
   97a0c:	bf00      	nop
   97a0e:	3710      	adds	r7, #16
   97a10:	46bd      	mov	sp, r7
   97a12:	bd80      	pop	{r7, pc}
   97a14:	20073334 	.word	0x20073334
   97a18:	00095549 	.word	0x00095549

00097a1c <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   97a1c:	b580      	push	{r7, lr}
   97a1e:	b098      	sub	sp, #96	; 0x60
   97a20:	af00      	add	r7, sp, #0
   97a22:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;

	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   97a24:	2300      	movs	r3, #0
   97a26:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.FPcurrentstatus	= 1;
   97a2a:	2301      	movs	r3, #1
   97a2c:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.DGPstatus = 1;
   97a2e:	2301      	movs	r3, #1
   97a30:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   97a34:	2001      	movs	r0, #1
   97a36:	4b9c      	ldr	r3, [pc, #624]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a38:	4798      	blx	r3
   97a3a:	4603      	mov	r3, r0
   97a3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   97a3e:	2002      	movs	r0, #2
   97a40:	4b99      	ldr	r3, [pc, #612]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a42:	4798      	blx	r3
   97a44:	4603      	mov	r3, r0
   97a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   97a48:	2003      	movs	r0, #3
   97a4a:	4b97      	ldr	r3, [pc, #604]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a4c:	4798      	blx	r3
   97a4e:	4603      	mov	r3, r0
   97a50:	863b      	strh	r3, [r7, #48]	; 0x30

	

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   97a52:	2005      	movs	r0, #5
   97a54:	4b94      	ldr	r3, [pc, #592]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a56:	4798      	blx	r3
   97a58:	4603      	mov	r3, r0
   97a5a:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   97a5c:	2006      	movs	r0, #6
   97a5e:	4b92      	ldr	r3, [pc, #584]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a60:	4798      	blx	r3
   97a62:	4603      	mov	r3, r0
   97a64:	86bb      	strh	r3, [r7, #52]	; 0x34
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   97a66:	2007      	movs	r0, #7
   97a68:	4b8f      	ldr	r3, [pc, #572]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a6a:	4798      	blx	r3
   97a6c:	4603      	mov	r3, r0
   97a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   97a70:	200d      	movs	r0, #13
   97a72:	4b8d      	ldr	r3, [pc, #564]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a74:	4798      	blx	r3
   97a76:	4603      	mov	r3, r0
   97a78:	877b      	strh	r3, [r7, #58]	; 0x3a
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   97a7a:	200e      	movs	r0, #14
   97a7c:	4b8a      	ldr	r3, [pc, #552]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a7e:	4798      	blx	r3
   97a80:	4603      	mov	r3, r0
   97a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   97a84:	200b      	movs	r0, #11
   97a86:	4b88      	ldr	r3, [pc, #544]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a88:	4798      	blx	r3
   97a8a:	4603      	mov	r3, r0
   97a8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   97a90:	200c      	movs	r0, #12
   97a92:	4b85      	ldr	r3, [pc, #532]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97a94:	4798      	blx	r3
   97a96:	4603      	mov	r3, r0
   97a98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   97a9c:	2013      	movs	r0, #19
   97a9e:	4b82      	ldr	r3, [pc, #520]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97aa0:	4798      	blx	r3
   97aa2:	4603      	mov	r3, r0
   97aa4:	83bb      	strh	r3, [r7, #28]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   97aa6:	2014      	movs	r0, #20
   97aa8:	4b7f      	ldr	r3, [pc, #508]	; (97ca8 <sv_status_getsystemstatus+0x28c>)
   97aaa:	4798      	blx	r3
   97aac:	4603      	mov	r3, r0
   97aae:	83fb      	strh	r3, [r7, #30]
	
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   97ab0:	200e      	movs	r0, #14
   97ab2:	4b7e      	ldr	r3, [pc, #504]	; (97cac <sv_status_getsystemstatus+0x290>)
   97ab4:	4798      	blx	r3
   97ab6:	4603      	mov	r3, r0
   97ab8:	733b      	strb	r3, [r7, #12]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   97aba:	2005      	movs	r0, #5
   97abc:	4b7b      	ldr	r3, [pc, #492]	; (97cac <sv_status_getsystemstatus+0x290>)
   97abe:	4798      	blx	r3
   97ac0:	4603      	mov	r3, r0
   97ac2:	b29b      	uxth	r3, r3
   97ac4:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   97ac6:	200f      	movs	r0, #15
   97ac8:	4b78      	ldr	r3, [pc, #480]	; (97cac <sv_status_getsystemstatus+0x290>)
   97aca:	4798      	blx	r3
   97acc:	4603      	mov	r3, r0
   97ace:	b29b      	uxth	r3, r3
   97ad0:	823b      	strh	r3, [r7, #16]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   97ad2:	2010      	movs	r0, #16
   97ad4:	4b75      	ldr	r3, [pc, #468]	; (97cac <sv_status_getsystemstatus+0x290>)
   97ad6:	4798      	blx	r3
   97ad8:	4603      	mov	r3, r0
   97ada:	b29b      	uxth	r3, r3
   97adc:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   97ade:	200d      	movs	r0, #13
   97ae0:	4b72      	ldr	r3, [pc, #456]	; (97cac <sv_status_getsystemstatus+0x290>)
   97ae2:	4798      	blx	r3
   97ae4:	4603      	mov	r3, r0
   97ae6:	b29b      	uxth	r3, r3
   97ae8:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   97aea:	2006      	movs	r0, #6
   97aec:	4b6f      	ldr	r3, [pc, #444]	; (97cac <sv_status_getsystemstatus+0x290>)
   97aee:	4798      	blx	r3
   97af0:	4603      	mov	r3, r0
   97af2:	b29b      	uxth	r3, r3
   97af4:	833b      	strh	r3, [r7, #24]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   97af6:	2007      	movs	r0, #7
   97af8:	4b6c      	ldr	r3, [pc, #432]	; (97cac <sv_status_getsystemstatus+0x290>)
   97afa:	4798      	blx	r3
   97afc:	4603      	mov	r3, r0
   97afe:	b29b      	uxth	r3, r3
   97b00:	837b      	strh	r3, [r7, #26]

	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   97b02:	201a      	movs	r0, #26
   97b04:	4b69      	ldr	r3, [pc, #420]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b06:	4798      	blx	r3
   97b08:	4603      	mov	r3, r0
   97b0a:	b29b      	uxth	r3, r3
   97b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   97b0e:	2008      	movs	r0, #8
   97b10:	4b66      	ldr	r3, [pc, #408]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b12:	4798      	blx	r3
   97b14:	4603      	mov	r3, r0
   97b16:	b29b      	uxth	r3, r3
   97b18:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   97b1a:	2003      	movs	r0, #3
   97b1c:	4b63      	ldr	r3, [pc, #396]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b1e:	4798      	blx	r3
   97b20:	4603      	mov	r3, r0
   97b22:	b29b      	uxth	r3, r3
   97b24:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   97b26:	2004      	movs	r0, #4
   97b28:	4b60      	ldr	r3, [pc, #384]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b2a:	4798      	blx	r3
   97b2c:	4603      	mov	r3, r0
   97b2e:	b29b      	uxth	r3, r3
   97b30:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   97b32:	2001      	movs	r0, #1
   97b34:	4b5d      	ldr	r3, [pc, #372]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b36:	4798      	blx	r3
   97b38:	4603      	mov	r3, r0
   97b3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   97b3e:	200c      	movs	r0, #12
   97b40:	4b5a      	ldr	r3, [pc, #360]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b42:	4798      	blx	r3
   97b44:	4603      	mov	r3, r0
   97b46:	b29b      	uxth	r3, r3
   97b48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   97b4c:	201b      	movs	r0, #27
   97b4e:	4b57      	ldr	r3, [pc, #348]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b50:	4798      	blx	r3
   97b52:	4603      	mov	r3, r0
   97b54:	b29b      	uxth	r3, r3
   97b56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   97b5a:	2009      	movs	r0, #9
   97b5c:	4b53      	ldr	r3, [pc, #332]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b5e:	4798      	blx	r3
   97b60:	4603      	mov	r3, r0
   97b62:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   97b66:	200a      	movs	r0, #10
   97b68:	4b50      	ldr	r3, [pc, #320]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b6a:	4798      	blx	r3
   97b6c:	4603      	mov	r3, r0
   97b6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   97b72:	2013      	movs	r0, #19
   97b74:	4b4d      	ldr	r3, [pc, #308]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b76:	4798      	blx	r3
   97b78:	4603      	mov	r3, r0
   97b7a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   97b7e:	2014      	movs	r0, #20
   97b80:	4b4a      	ldr	r3, [pc, #296]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b82:	4798      	blx	r3
   97b84:	4603      	mov	r3, r0
   97b86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   97b8a:	2015      	movs	r0, #21
   97b8c:	4b47      	ldr	r3, [pc, #284]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b8e:	4798      	blx	r3
   97b90:	4603      	mov	r3, r0
   97b92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   97b96:	2016      	movs	r0, #22
   97b98:	4b44      	ldr	r3, [pc, #272]	; (97cac <sv_status_getsystemstatus+0x290>)
   97b9a:	4798      	blx	r3
   97b9c:	4603      	mov	r3, r0
   97b9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   97ba2:	2017      	movs	r0, #23
   97ba4:	4b41      	ldr	r3, [pc, #260]	; (97cac <sv_status_getsystemstatus+0x290>)
   97ba6:	4798      	blx	r3
   97ba8:	4603      	mov	r3, r0
   97baa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   97bae:	2018      	movs	r0, #24
   97bb0:	4b3e      	ldr	r3, [pc, #248]	; (97cac <sv_status_getsystemstatus+0x290>)
   97bb2:	4798      	blx	r3
   97bb4:	4603      	mov	r3, r0
   97bb6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   97bba:	2002      	movs	r0, #2
   97bbc:	4b3b      	ldr	r3, [pc, #236]	; (97cac <sv_status_getsystemstatus+0x290>)
   97bbe:	4798      	blx	r3
   97bc0:	4603      	mov	r3, r0
   97bc2:	b29b      	uxth	r3, r3
   97bc4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   97bc8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   97bca:	687b      	ldr	r3, [r7, #4]
   97bcc:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   97bce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   97bd0:	687b      	ldr	r3, [r7, #4]
   97bd2:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   97bd4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   97bd6:	687b      	ldr	r3, [r7, #4]
   97bd8:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   97bda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   97bdc:	687b      	ldr	r3, [r7, #4]
   97bde:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   97be0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   97be2:	687b      	ldr	r3, [r7, #4]
   97be4:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   97be6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   97be8:	687b      	ldr	r3, [r7, #4]
   97bea:	865a      	strh	r2, [r3, #50]	; 0x32
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   97bec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   97bf0:	687b      	ldr	r3, [r7, #4]
   97bf2:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   97bf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   97bf8:	687b      	ldr	r3, [r7, #4]
   97bfa:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   97bfc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   97bfe:	687b      	ldr	r3, [r7, #4]
   97c00:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   97c02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   97c04:	687b      	ldr	r3, [r7, #4]
   97c06:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   97c08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   97c0a:	687b      	ldr	r3, [r7, #4]
   97c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   97c0e:	8bba      	ldrh	r2, [r7, #28]
   97c10:	687b      	ldr	r3, [r7, #4]
   97c12:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   97c14:	8bfa      	ldrh	r2, [r7, #30]
   97c16:	687b      	ldr	r3, [r7, #4]
   97c18:	825a      	strh	r2, [r3, #18]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   97c1a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
   97c1e:	687b      	ldr	r3, [r7, #4]
   97c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   97c24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   97c26:	687b      	ldr	r3, [r7, #4]
   97c28:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   97c2a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   97c2e:	687b      	ldr	r3, [r7, #4]
   97c30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   97c34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   97c36:	687b      	ldr	r3, [r7, #4]
   97c38:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   97c3a:	89fa      	ldrh	r2, [r7, #14]
   97c3c:	687b      	ldr	r3, [r7, #4]
   97c3e:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   97c40:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
   97c44:	687b      	ldr	r3, [r7, #4]
   97c46:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   97c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   97c4a:	687b      	ldr	r3, [r7, #4]
   97c4c:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   97c4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   97c50:	687b      	ldr	r3, [r7, #4]
   97c52:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   97c54:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   97c58:	687b      	ldr	r3, [r7, #4]
   97c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   97c5e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
   97c62:	687b      	ldr	r3, [r7, #4]
   97c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   97c68:	7b3a      	ldrb	r2, [r7, #12]
   97c6a:	687b      	ldr	r3, [r7, #4]
   97c6c:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   97c6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
   97c72:	687b      	ldr	r3, [r7, #4]
   97c74:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   97c76:	8b3a      	ldrh	r2, [r7, #24]
   97c78:	687b      	ldr	r3, [r7, #4]
   97c7a:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   97c7c:	8b7a      	ldrh	r2, [r7, #26]
   97c7e:	687b      	ldr	r3, [r7, #4]
   97c80:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   97c82:	8afa      	ldrh	r2, [r7, #22]
   97c84:	687b      	ldr	r3, [r7, #4]
   97c86:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   97c88:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
   97c8c:	687b      	ldr	r3, [r7, #4]
   97c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   97c92:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
   97c96:	687b      	ldr	r3, [r7, #4]
   97c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	
	return 0;
   97c9c:	2300      	movs	r3, #0

}
   97c9e:	4618      	mov	r0, r3
   97ca0:	3760      	adds	r7, #96	; 0x60
   97ca2:	46bd      	mov	sp, r7
   97ca4:	bd80      	pop	{r7, pc}
   97ca6:	bf00      	nop
   97ca8:	000944ad 	.word	0x000944ad
   97cac:	00096265 	.word	0x00096265

00097cb0 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   97cb0:	b580      	push	{r7, lr}
   97cb2:	b082      	sub	sp, #8
   97cb4:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   97cb6:	4b1b      	ldr	r3, [pc, #108]	; (97d24 <SV_SYSTEM_INIT+0x74>)
   97cb8:	4798      	blx	r3
	DD_INIT_PIO();
   97cba:	4b1b      	ldr	r3, [pc, #108]	; (97d28 <SV_SYSTEM_INIT+0x78>)
   97cbc:	4798      	blx	r3
	DD_INIT_UART();
   97cbe:	4b1b      	ldr	r3, [pc, #108]	; (97d2c <SV_SYSTEM_INIT+0x7c>)
   97cc0:	4798      	blx	r3
	DD_INIT_TIMER();
   97cc2:	4b1b      	ldr	r3, [pc, #108]	; (97d30 <SV_SYSTEM_INIT+0x80>)
   97cc4:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   97cc6:	4b1b      	ldr	r3, [pc, #108]	; (97d34 <SV_SYSTEM_INIT+0x84>)
   97cc8:	4798      	blx	r3
	DD_INIT_NVM();
   97cca:	4b1b      	ldr	r3, [pc, #108]	; (97d38 <SV_SYSTEM_INIT+0x88>)
   97ccc:	4798      	blx	r3
	DD_INIT_INT();
   97cce:	4b1b      	ldr	r3, [pc, #108]	; (97d3c <SV_SYSTEM_INIT+0x8c>)
   97cd0:	4798      	blx	r3
	DD_INIT_IIC();
   97cd2:	4b1b      	ldr	r3, [pc, #108]	; (97d40 <SV_SYSTEM_INIT+0x90>)
   97cd4:	4798      	blx	r3
	DD_INIT_SPI();
   97cd6:	4b1b      	ldr	r3, [pc, #108]	; (97d44 <SV_SYSTEM_INIT+0x94>)
   97cd8:	4798      	blx	r3

    DD_INIT_CAN();
   97cda:	4b1b      	ldr	r3, [pc, #108]	; (97d48 <SV_SYSTEM_INIT+0x98>)
   97cdc:	4798      	blx	r3
    nvram_read(CAL_PS1);
   97cde:	2003      	movs	r0, #3
   97ce0:	4b1a      	ldr	r3, [pc, #104]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97ce2:	4798      	blx	r3
	nvram_read(CAL_APT);
   97ce4:	2006      	movs	r0, #6
   97ce6:	4b19      	ldr	r3, [pc, #100]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97ce8:	4798      	blx	r3
	nvram_read(CAL_COND);
   97cea:	2008      	movs	r0, #8
   97cec:	4b17      	ldr	r3, [pc, #92]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97cee:	4798      	blx	r3
	nvram_read(CAL_HEP);
   97cf0:	2009      	movs	r0, #9
   97cf2:	4b16      	ldr	r3, [pc, #88]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97cf4:	4798      	blx	r3
	nvram_read(CAL_TEMP_TS1);
   97cf6:	2000      	movs	r0, #0
   97cf8:	4b14      	ldr	r3, [pc, #80]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97cfa:	4798      	blx	r3
	nvram_read(CAL_CHECKSUM);
   97cfc:	200a      	movs	r0, #10
   97cfe:	4b13      	ldr	r3, [pc, #76]	; (97d4c <SV_SYSTEM_INIT+0x9c>)
   97d00:	4798      	blx	r3
	for (int i=0;i<10;i++)
   97d02:	2300      	movs	r3, #0
   97d04:	607b      	str	r3, [r7, #4]
   97d06:	e002      	b.n	97d0e <SV_SYSTEM_INIT+0x5e>
   97d08:	687b      	ldr	r3, [r7, #4]
   97d0a:	3301      	adds	r3, #1
   97d0c:	607b      	str	r3, [r7, #4]
   97d0e:	687b      	ldr	r3, [r7, #4]
   97d10:	2b09      	cmp	r3, #9
   97d12:	ddf9      	ble.n	97d08 <SV_SYSTEM_INIT+0x58>
		{
			//printf("error\n");
		}
	}
	
	SV_START_TIMER(0,1);
   97d14:	2101      	movs	r1, #1
   97d16:	2000      	movs	r0, #0
   97d18:	4b0d      	ldr	r3, [pc, #52]	; (97d50 <SV_SYSTEM_INIT+0xa0>)
   97d1a:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   97d1c:	bf00      	nop
   97d1e:	3708      	adds	r7, #8
   97d20:	46bd      	mov	sp, r7
   97d22:	bd80      	pop	{r7, pc}
   97d24:	000945f5 	.word	0x000945f5
   97d28:	00094629 	.word	0x00094629
   97d2c:	000972b1 	.word	0x000972b1
   97d30:	00096da9 	.word	0x00096da9
   97d34:	0009527d 	.word	0x0009527d
   97d38:	00095129 	.word	0x00095129
   97d3c:	0009504d 	.word	0x0009504d
   97d40:	00094e99 	.word	0x00094e99
   97d44:	00095689 	.word	0x00095689
   97d48:	0009433d 	.word	0x0009433d
   97d4c:	0008ca69 	.word	0x0008ca69
   97d50:	00097d55 	.word	0x00097d55

00097d54 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   97d54:	b580      	push	{r7, lr}
   97d56:	b082      	sub	sp, #8
   97d58:	af00      	add	r7, sp, #0
   97d5a:	4603      	mov	r3, r0
   97d5c:	6039      	str	r1, [r7, #0]
   97d5e:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   97d60:	683b      	ldr	r3, [r7, #0]
   97d62:	b2da      	uxtb	r2, r3
   97d64:	79fb      	ldrb	r3, [r7, #7]
   97d66:	4611      	mov	r1, r2
   97d68:	4618      	mov	r0, r3
   97d6a:	4b03      	ldr	r3, [pc, #12]	; (97d78 <SV_START_TIMER+0x24>)
   97d6c:	4798      	blx	r3
	
	return 0;
   97d6e:	2300      	movs	r3, #0
}
   97d70:	4618      	mov	r0, r3
   97d72:	3708      	adds	r7, #8
   97d74:	46bd      	mov	sp, r7
   97d76:	bd80      	pop	{r7, pc}
   97d78:	0009653d 	.word	0x0009653d

00097d7c <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   97d7c:	b480      	push	{r7}
   97d7e:	b085      	sub	sp, #20
   97d80:	af00      	add	r7, sp, #0
   97d82:	4603      	mov	r3, r0
   97d84:	6039      	str	r1, [r7, #0]
   97d86:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   97d88:	79fb      	ldrb	r3, [r7, #7]
   97d8a:	3b01      	subs	r3, #1
   97d8c:	4a08      	ldr	r2, [pc, #32]	; (97db0 <sv_nvmgetdata+0x34>)
   97d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   97d92:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   97d94:	7b3a      	ldrb	r2, [r7, #12]
   97d96:	683b      	ldr	r3, [r7, #0]
   97d98:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   97d9a:	683b      	ldr	r3, [r7, #0]
   97d9c:	3301      	adds	r3, #1
   97d9e:	7b7a      	ldrb	r2, [r7, #13]
   97da0:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   97da2:	2300      	movs	r3, #0
}
   97da4:	4618      	mov	r0, r3
   97da6:	3714      	adds	r7, #20
   97da8:	46bd      	mov	sp, r7
   97daa:	bc80      	pop	{r7}
   97dac:	4770      	bx	lr
   97dae:	bf00      	nop
   97db0:	20070a0c 	.word	0x20070a0c

00097db4 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   97db4:	b480      	push	{r7}
   97db6:	b085      	sub	sp, #20
   97db8:	af00      	add	r7, sp, #0
   97dba:	4603      	mov	r3, r0
   97dbc:	6039      	str	r1, [r7, #0]
   97dbe:	71fb      	strb	r3, [r7, #7]
   97dc0:	4613      	mov	r3, r2
   97dc2:	71bb      	strb	r3, [r7, #6]
				
				
					
	#endif
	
			temp.byte[0] = pdata[0];
   97dc4:	683b      	ldr	r3, [r7, #0]
   97dc6:	781b      	ldrb	r3, [r3, #0]
   97dc8:	733b      	strb	r3, [r7, #12]
			temp.byte[1] = pdata[1];
   97dca:	683b      	ldr	r3, [r7, #0]
   97dcc:	785b      	ldrb	r3, [r3, #1]
   97dce:	737b      	strb	r3, [r7, #13]
			nvmarray[dataItemId-1] = temp.twobyte;
   97dd0:	79fb      	ldrb	r3, [r7, #7]
   97dd2:	3b01      	subs	r3, #1
   97dd4:	89b9      	ldrh	r1, [r7, #12]
   97dd6:	4a04      	ldr	r2, [pc, #16]	; (97de8 <sv_nvmsetdata+0x34>)
   97dd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
		return SV_OK;
   97ddc:	2300      	movs	r3, #0
   97dde:	4618      	mov	r0, r3
   97de0:	3714      	adds	r7, #20
   97de2:	46bd      	mov	sp, r7
   97de4:	bc80      	pop	{r7}
   97de6:	4770      	bx	lr
   97de8:	20070a0c 	.word	0x20070a0c

00097dec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   97dec:	b580      	push	{r7, lr}
   97dee:	b086      	sub	sp, #24
   97df0:	af00      	add	r7, sp, #0
   97df2:	60f8      	str	r0, [r7, #12]
   97df4:	60b9      	str	r1, [r7, #8]
   97df6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   97df8:	2300      	movs	r3, #0
   97dfa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   97dfc:	68fb      	ldr	r3, [r7, #12]
   97dfe:	2b00      	cmp	r3, #0
   97e00:	d012      	beq.n	97e28 <_read+0x3c>
		return -1;
   97e02:	f04f 33ff 	mov.w	r3, #4294967295
   97e06:	e013      	b.n	97e30 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   97e08:	4b0b      	ldr	r3, [pc, #44]	; (97e38 <_read+0x4c>)
   97e0a:	681b      	ldr	r3, [r3, #0]
   97e0c:	4a0b      	ldr	r2, [pc, #44]	; (97e3c <_read+0x50>)
   97e0e:	6812      	ldr	r2, [r2, #0]
   97e10:	68b9      	ldr	r1, [r7, #8]
   97e12:	4610      	mov	r0, r2
   97e14:	4798      	blx	r3
		ptr++;
   97e16:	68bb      	ldr	r3, [r7, #8]
   97e18:	3301      	adds	r3, #1
   97e1a:	60bb      	str	r3, [r7, #8]
		nChars++;
   97e1c:	697b      	ldr	r3, [r7, #20]
   97e1e:	3301      	adds	r3, #1
   97e20:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   97e22:	687b      	ldr	r3, [r7, #4]
   97e24:	3b01      	subs	r3, #1
   97e26:	607b      	str	r3, [r7, #4]
   97e28:	687b      	ldr	r3, [r7, #4]
   97e2a:	2b00      	cmp	r3, #0
   97e2c:	dcec      	bgt.n	97e08 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   97e2e:	697b      	ldr	r3, [r7, #20]
}
   97e30:	4618      	mov	r0, r3
   97e32:	3718      	adds	r7, #24
   97e34:	46bd      	mov	sp, r7
   97e36:	bd80      	pop	{r7, pc}
   97e38:	2007333c 	.word	0x2007333c
   97e3c:	20073344 	.word	0x20073344

00097e40 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   97e40:	b580      	push	{r7, lr}
   97e42:	b086      	sub	sp, #24
   97e44:	af00      	add	r7, sp, #0
   97e46:	60f8      	str	r0, [r7, #12]
   97e48:	60b9      	str	r1, [r7, #8]
   97e4a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   97e4c:	2300      	movs	r3, #0
   97e4e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   97e50:	68fb      	ldr	r3, [r7, #12]
   97e52:	2b01      	cmp	r3, #1
   97e54:	d01e      	beq.n	97e94 <_write+0x54>
   97e56:	68fb      	ldr	r3, [r7, #12]
   97e58:	2b02      	cmp	r3, #2
   97e5a:	d01b      	beq.n	97e94 <_write+0x54>
   97e5c:	68fb      	ldr	r3, [r7, #12]
   97e5e:	2b03      	cmp	r3, #3
   97e60:	d018      	beq.n	97e94 <_write+0x54>
		return -1;
   97e62:	f04f 33ff 	mov.w	r3, #4294967295
   97e66:	e019      	b.n	97e9c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   97e68:	4b0e      	ldr	r3, [pc, #56]	; (97ea4 <_write+0x64>)
   97e6a:	681a      	ldr	r2, [r3, #0]
   97e6c:	4b0e      	ldr	r3, [pc, #56]	; (97ea8 <_write+0x68>)
   97e6e:	6818      	ldr	r0, [r3, #0]
   97e70:	68bb      	ldr	r3, [r7, #8]
   97e72:	1c59      	adds	r1, r3, #1
   97e74:	60b9      	str	r1, [r7, #8]
   97e76:	781b      	ldrb	r3, [r3, #0]
   97e78:	4619      	mov	r1, r3
   97e7a:	4790      	blx	r2
   97e7c:	4603      	mov	r3, r0
   97e7e:	2b00      	cmp	r3, #0
   97e80:	da02      	bge.n	97e88 <_write+0x48>
			return -1;
   97e82:	f04f 33ff 	mov.w	r3, #4294967295
   97e86:	e009      	b.n	97e9c <_write+0x5c>
		}
		++nChars;
   97e88:	697b      	ldr	r3, [r7, #20]
   97e8a:	3301      	adds	r3, #1
   97e8c:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   97e8e:	687b      	ldr	r3, [r7, #4]
   97e90:	3b01      	subs	r3, #1
   97e92:	607b      	str	r3, [r7, #4]
   97e94:	687b      	ldr	r3, [r7, #4]
   97e96:	2b00      	cmp	r3, #0
   97e98:	d1e6      	bne.n	97e68 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   97e9a:	697b      	ldr	r3, [r7, #20]
}
   97e9c:	4618      	mov	r0, r3
   97e9e:	3718      	adds	r7, #24
   97ea0:	46bd      	mov	sp, r7
   97ea2:	bd80      	pop	{r7, pc}
   97ea4:	20073340 	.word	0x20073340
   97ea8:	20073344 	.word	0x20073344

00097eac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   97eac:	b580      	push	{r7, lr}
   97eae:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   97eb0:	4b05      	ldr	r3, [pc, #20]	; (97ec8 <board_init+0x1c>)
   97eb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   97eb6:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   97eb8:	4a04      	ldr	r2, [pc, #16]	; (97ecc <board_init+0x20>)
   97eba:	f44f 7140 	mov.w	r1, #768	; 0x300
   97ebe:	4804      	ldr	r0, [pc, #16]	; (97ed0 <board_init+0x24>)
   97ec0:	4b04      	ldr	r3, [pc, #16]	; (97ed4 <board_init+0x28>)
   97ec2:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   97ec4:	bf00      	nop
   97ec6:	bd80      	pop	{r7, pc}
   97ec8:	400e1a50 	.word	0x400e1a50
   97ecc:	08000001 	.word	0x08000001
   97ed0:	400e0e00 	.word	0x400e0e00
   97ed4:	000981f1 	.word	0x000981f1

00097ed8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   97ed8:	b480      	push	{r7}
   97eda:	b085      	sub	sp, #20
   97edc:	af00      	add	r7, sp, #0
   97ede:	60f8      	str	r0, [r7, #12]
   97ee0:	60b9      	str	r1, [r7, #8]
   97ee2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   97ee4:	687b      	ldr	r3, [r7, #4]
   97ee6:	2b00      	cmp	r3, #0
   97ee8:	d003      	beq.n	97ef2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   97eea:	68fb      	ldr	r3, [r7, #12]
   97eec:	68ba      	ldr	r2, [r7, #8]
   97eee:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   97ef0:	e002      	b.n	97ef8 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   97ef2:	68fb      	ldr	r3, [r7, #12]
   97ef4:	68ba      	ldr	r2, [r7, #8]
   97ef6:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   97ef8:	bf00      	nop
   97efa:	3714      	adds	r7, #20
   97efc:	46bd      	mov	sp, r7
   97efe:	bc80      	pop	{r7}
   97f00:	4770      	bx	lr
   97f02:	bf00      	nop

00097f04 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   97f04:	b480      	push	{r7}
   97f06:	b087      	sub	sp, #28
   97f08:	af00      	add	r7, sp, #0
   97f0a:	60f8      	str	r0, [r7, #12]
   97f0c:	60b9      	str	r1, [r7, #8]
   97f0e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   97f10:	68fb      	ldr	r3, [r7, #12]
   97f12:	687a      	ldr	r2, [r7, #4]
   97f14:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   97f16:	68bb      	ldr	r3, [r7, #8]
   97f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97f1c:	d01f      	beq.n	97f5e <pio_set_peripheral+0x5a>
   97f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97f22:	d805      	bhi.n	97f30 <pio_set_peripheral+0x2c>
   97f24:	2b00      	cmp	r3, #0
   97f26:	d027      	beq.n	97f78 <pio_set_peripheral+0x74>
   97f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   97f2c:	d00a      	beq.n	97f44 <pio_set_peripheral+0x40>
   97f2e:	e01f      	b.n	97f70 <pio_set_peripheral+0x6c>
   97f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   97f34:	d020      	beq.n	97f78 <pio_set_peripheral+0x74>
   97f36:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   97f3a:	d01d      	beq.n	97f78 <pio_set_peripheral+0x74>
   97f3c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   97f40:	d01a      	beq.n	97f78 <pio_set_peripheral+0x74>
   97f42:	e015      	b.n	97f70 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   97f44:	68fb      	ldr	r3, [r7, #12]
   97f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   97f48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   97f4a:	68fb      	ldr	r3, [r7, #12]
   97f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   97f4e:	687b      	ldr	r3, [r7, #4]
   97f50:	43d9      	mvns	r1, r3
   97f52:	697b      	ldr	r3, [r7, #20]
   97f54:	400b      	ands	r3, r1
   97f56:	401a      	ands	r2, r3
   97f58:	68fb      	ldr	r3, [r7, #12]
   97f5a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   97f5c:	e008      	b.n	97f70 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   97f5e:	68fb      	ldr	r3, [r7, #12]
   97f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   97f62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   97f64:	687a      	ldr	r2, [r7, #4]
   97f66:	697b      	ldr	r3, [r7, #20]
   97f68:	431a      	orrs	r2, r3
   97f6a:	68fb      	ldr	r3, [r7, #12]
   97f6c:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   97f6e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   97f70:	68fb      	ldr	r3, [r7, #12]
   97f72:	687a      	ldr	r2, [r7, #4]
   97f74:	605a      	str	r2, [r3, #4]
   97f76:	e000      	b.n	97f7a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   97f78:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   97f7a:	371c      	adds	r7, #28
   97f7c:	46bd      	mov	sp, r7
   97f7e:	bc80      	pop	{r7}
   97f80:	4770      	bx	lr
   97f82:	bf00      	nop

00097f84 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   97f84:	b580      	push	{r7, lr}
   97f86:	b084      	sub	sp, #16
   97f88:	af00      	add	r7, sp, #0
   97f8a:	60f8      	str	r0, [r7, #12]
   97f8c:	60b9      	str	r1, [r7, #8]
   97f8e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   97f90:	68b9      	ldr	r1, [r7, #8]
   97f92:	68f8      	ldr	r0, [r7, #12]
   97f94:	4b19      	ldr	r3, [pc, #100]	; (97ffc <pio_set_input+0x78>)
   97f96:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   97f98:	687b      	ldr	r3, [r7, #4]
   97f9a:	f003 0301 	and.w	r3, r3, #1
   97f9e:	461a      	mov	r2, r3
   97fa0:	68b9      	ldr	r1, [r7, #8]
   97fa2:	68f8      	ldr	r0, [r7, #12]
   97fa4:	4b16      	ldr	r3, [pc, #88]	; (98000 <pio_set_input+0x7c>)
   97fa6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   97fa8:	687b      	ldr	r3, [r7, #4]
   97faa:	f003 030a 	and.w	r3, r3, #10
   97fae:	2b00      	cmp	r3, #0
   97fb0:	d003      	beq.n	97fba <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   97fb2:	68fb      	ldr	r3, [r7, #12]
   97fb4:	68ba      	ldr	r2, [r7, #8]
   97fb6:	621a      	str	r2, [r3, #32]
   97fb8:	e002      	b.n	97fc0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   97fba:	68fb      	ldr	r3, [r7, #12]
   97fbc:	68ba      	ldr	r2, [r7, #8]
   97fbe:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   97fc0:	687b      	ldr	r3, [r7, #4]
   97fc2:	f003 0302 	and.w	r3, r3, #2
   97fc6:	2b00      	cmp	r3, #0
   97fc8:	d004      	beq.n	97fd4 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   97fca:	68fb      	ldr	r3, [r7, #12]
   97fcc:	68ba      	ldr	r2, [r7, #8]
   97fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   97fd2:	e008      	b.n	97fe6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   97fd4:	687b      	ldr	r3, [r7, #4]
   97fd6:	f003 0308 	and.w	r3, r3, #8
   97fda:	2b00      	cmp	r3, #0
   97fdc:	d003      	beq.n	97fe6 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   97fde:	68fb      	ldr	r3, [r7, #12]
   97fe0:	68ba      	ldr	r2, [r7, #8]
   97fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   97fe6:	68fb      	ldr	r3, [r7, #12]
   97fe8:	68ba      	ldr	r2, [r7, #8]
   97fea:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   97fec:	68fb      	ldr	r3, [r7, #12]
   97fee:	68ba      	ldr	r2, [r7, #8]
   97ff0:	601a      	str	r2, [r3, #0]
}
   97ff2:	bf00      	nop
   97ff4:	3710      	adds	r7, #16
   97ff6:	46bd      	mov	sp, r7
   97ff8:	bd80      	pop	{r7, pc}
   97ffa:	bf00      	nop
   97ffc:	00098069 	.word	0x00098069
   98000:	00097ed9 	.word	0x00097ed9

00098004 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   98004:	b580      	push	{r7, lr}
   98006:	b084      	sub	sp, #16
   98008:	af00      	add	r7, sp, #0
   9800a:	60f8      	str	r0, [r7, #12]
   9800c:	60b9      	str	r1, [r7, #8]
   9800e:	607a      	str	r2, [r7, #4]
   98010:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   98012:	68b9      	ldr	r1, [r7, #8]
   98014:	68f8      	ldr	r0, [r7, #12]
   98016:	4b12      	ldr	r3, [pc, #72]	; (98060 <pio_set_output+0x5c>)
   98018:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9801a:	69ba      	ldr	r2, [r7, #24]
   9801c:	68b9      	ldr	r1, [r7, #8]
   9801e:	68f8      	ldr	r0, [r7, #12]
   98020:	4b10      	ldr	r3, [pc, #64]	; (98064 <pio_set_output+0x60>)
   98022:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   98024:	683b      	ldr	r3, [r7, #0]
   98026:	2b00      	cmp	r3, #0
   98028:	d003      	beq.n	98032 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9802a:	68fb      	ldr	r3, [r7, #12]
   9802c:	68ba      	ldr	r2, [r7, #8]
   9802e:	651a      	str	r2, [r3, #80]	; 0x50
   98030:	e002      	b.n	98038 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   98032:	68fb      	ldr	r3, [r7, #12]
   98034:	68ba      	ldr	r2, [r7, #8]
   98036:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   98038:	687b      	ldr	r3, [r7, #4]
   9803a:	2b00      	cmp	r3, #0
   9803c:	d003      	beq.n	98046 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   9803e:	68fb      	ldr	r3, [r7, #12]
   98040:	68ba      	ldr	r2, [r7, #8]
   98042:	631a      	str	r2, [r3, #48]	; 0x30
   98044:	e002      	b.n	9804c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   98046:	68fb      	ldr	r3, [r7, #12]
   98048:	68ba      	ldr	r2, [r7, #8]
   9804a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   9804c:	68fb      	ldr	r3, [r7, #12]
   9804e:	68ba      	ldr	r2, [r7, #8]
   98050:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   98052:	68fb      	ldr	r3, [r7, #12]
   98054:	68ba      	ldr	r2, [r7, #8]
   98056:	601a      	str	r2, [r3, #0]
}
   98058:	bf00      	nop
   9805a:	3710      	adds	r7, #16
   9805c:	46bd      	mov	sp, r7
   9805e:	bd80      	pop	{r7, pc}
   98060:	00098069 	.word	0x00098069
   98064:	00097ed9 	.word	0x00097ed9

00098068 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   98068:	b480      	push	{r7}
   9806a:	b083      	sub	sp, #12
   9806c:	af00      	add	r7, sp, #0
   9806e:	6078      	str	r0, [r7, #4]
   98070:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   98072:	687b      	ldr	r3, [r7, #4]
   98074:	683a      	ldr	r2, [r7, #0]
   98076:	645a      	str	r2, [r3, #68]	; 0x44
}
   98078:	bf00      	nop
   9807a:	370c      	adds	r7, #12
   9807c:	46bd      	mov	sp, r7
   9807e:	bc80      	pop	{r7}
   98080:	4770      	bx	lr
   98082:	bf00      	nop

00098084 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   98084:	b480      	push	{r7}
   98086:	b083      	sub	sp, #12
   98088:	af00      	add	r7, sp, #0
   9808a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9808c:	687b      	ldr	r3, [r7, #4]
   9808e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   98090:	4618      	mov	r0, r3
   98092:	370c      	adds	r7, #12
   98094:	46bd      	mov	sp, r7
   98096:	bc80      	pop	{r7}
   98098:	4770      	bx	lr
   9809a:	bf00      	nop

0009809c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9809c:	b480      	push	{r7}
   9809e:	b083      	sub	sp, #12
   980a0:	af00      	add	r7, sp, #0
   980a2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   980a4:	687b      	ldr	r3, [r7, #4]
   980a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   980a8:	4618      	mov	r0, r3
   980aa:	370c      	adds	r7, #12
   980ac:	46bd      	mov	sp, r7
   980ae:	bc80      	pop	{r7}
   980b0:	4770      	bx	lr
   980b2:	bf00      	nop

000980b4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   980b4:	b590      	push	{r4, r7, lr}
   980b6:	b087      	sub	sp, #28
   980b8:	af02      	add	r7, sp, #8
   980ba:	6078      	str	r0, [r7, #4]
   980bc:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   980be:	687b      	ldr	r3, [r7, #4]
   980c0:	095b      	lsrs	r3, r3, #5
   980c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   980c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   980ca:	025b      	lsls	r3, r3, #9
   980cc:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   980ce:	683b      	ldr	r3, [r7, #0]
   980d0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   980d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   980d8:	d046      	beq.n	98168 <pio_configure_pin+0xb4>
   980da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   980de:	d806      	bhi.n	980ee <pio_configure_pin+0x3a>
   980e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   980e4:	d00a      	beq.n	980fc <pio_configure_pin+0x48>
   980e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   980ea:	d022      	beq.n	98132 <pio_configure_pin+0x7e>
   980ec:	e070      	b.n	981d0 <pio_configure_pin+0x11c>
   980ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   980f2:	d045      	beq.n	98180 <pio_configure_pin+0xcc>
   980f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   980f8:	d042      	beq.n	98180 <pio_configure_pin+0xcc>
   980fa:	e069      	b.n	981d0 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   980fc:	687b      	ldr	r3, [r7, #4]
   980fe:	f003 031f 	and.w	r3, r3, #31
   98102:	2201      	movs	r2, #1
   98104:	fa02 f303 	lsl.w	r3, r2, r3
   98108:	461a      	mov	r2, r3
   9810a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9810e:	68f8      	ldr	r0, [r7, #12]
   98110:	4b33      	ldr	r3, [pc, #204]	; (981e0 <pio_configure_pin+0x12c>)
   98112:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   98114:	687b      	ldr	r3, [r7, #4]
   98116:	f003 031f 	and.w	r3, r3, #31
   9811a:	2201      	movs	r2, #1
   9811c:	fa02 f303 	lsl.w	r3, r2, r3
   98120:	4619      	mov	r1, r3
   98122:	683b      	ldr	r3, [r7, #0]
   98124:	f003 0301 	and.w	r3, r3, #1
   98128:	461a      	mov	r2, r3
   9812a:	68f8      	ldr	r0, [r7, #12]
   9812c:	4b2d      	ldr	r3, [pc, #180]	; (981e4 <pio_configure_pin+0x130>)
   9812e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   98130:	e050      	b.n	981d4 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   98132:	687b      	ldr	r3, [r7, #4]
   98134:	f003 031f 	and.w	r3, r3, #31
   98138:	2201      	movs	r2, #1
   9813a:	fa02 f303 	lsl.w	r3, r2, r3
   9813e:	461a      	mov	r2, r3
   98140:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   98144:	68f8      	ldr	r0, [r7, #12]
   98146:	4b26      	ldr	r3, [pc, #152]	; (981e0 <pio_configure_pin+0x12c>)
   98148:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9814a:	687b      	ldr	r3, [r7, #4]
   9814c:	f003 031f 	and.w	r3, r3, #31
   98150:	2201      	movs	r2, #1
   98152:	fa02 f303 	lsl.w	r3, r2, r3
   98156:	4619      	mov	r1, r3
   98158:	683b      	ldr	r3, [r7, #0]
   9815a:	f003 0301 	and.w	r3, r3, #1
   9815e:	461a      	mov	r2, r3
   98160:	68f8      	ldr	r0, [r7, #12]
   98162:	4b20      	ldr	r3, [pc, #128]	; (981e4 <pio_configure_pin+0x130>)
   98164:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   98166:	e035      	b.n	981d4 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   98168:	687b      	ldr	r3, [r7, #4]
   9816a:	f003 031f 	and.w	r3, r3, #31
   9816e:	2201      	movs	r2, #1
   98170:	fa02 f303 	lsl.w	r3, r2, r3
   98174:	683a      	ldr	r2, [r7, #0]
   98176:	4619      	mov	r1, r3
   98178:	68f8      	ldr	r0, [r7, #12]
   9817a:	4b1b      	ldr	r3, [pc, #108]	; (981e8 <pio_configure_pin+0x134>)
   9817c:	4798      	blx	r3
		break;
   9817e:	e029      	b.n	981d4 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   98180:	687b      	ldr	r3, [r7, #4]
   98182:	f003 031f 	and.w	r3, r3, #31
   98186:	2201      	movs	r2, #1
   98188:	fa02 f303 	lsl.w	r3, r2, r3
   9818c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9818e:	683b      	ldr	r3, [r7, #0]
   98190:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   98194:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   98198:	bf0c      	ite	eq
   9819a:	2301      	moveq	r3, #1
   9819c:	2300      	movne	r3, #0
   9819e:	b2db      	uxtb	r3, r3
   981a0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   981a2:	683b      	ldr	r3, [r7, #0]
   981a4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   981a8:	2b00      	cmp	r3, #0
   981aa:	bf14      	ite	ne
   981ac:	2301      	movne	r3, #1
   981ae:	2300      	moveq	r3, #0
   981b0:	b2db      	uxtb	r3, r3
   981b2:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   981b4:	683b      	ldr	r3, [r7, #0]
   981b6:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   981ba:	2b00      	cmp	r3, #0
   981bc:	bf14      	ite	ne
   981be:	2301      	movne	r3, #1
   981c0:	2300      	moveq	r3, #0
   981c2:	b2db      	uxtb	r3, r3
   981c4:	9300      	str	r3, [sp, #0]
   981c6:	4603      	mov	r3, r0
   981c8:	68f8      	ldr	r0, [r7, #12]
   981ca:	4c08      	ldr	r4, [pc, #32]	; (981ec <pio_configure_pin+0x138>)
   981cc:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   981ce:	e001      	b.n	981d4 <pio_configure_pin+0x120>

	default:
		return 0;
   981d0:	2300      	movs	r3, #0
   981d2:	e000      	b.n	981d6 <pio_configure_pin+0x122>
	}

	return 1;
   981d4:	2301      	movs	r3, #1
}
   981d6:	4618      	mov	r0, r3
   981d8:	3714      	adds	r7, #20
   981da:	46bd      	mov	sp, r7
   981dc:	bd90      	pop	{r4, r7, pc}
   981de:	bf00      	nop
   981e0:	00097f05 	.word	0x00097f05
   981e4:	00097ed9 	.word	0x00097ed9
   981e8:	00097f85 	.word	0x00097f85
   981ec:	00098005 	.word	0x00098005

000981f0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   981f0:	b590      	push	{r4, r7, lr}
   981f2:	b087      	sub	sp, #28
   981f4:	af02      	add	r7, sp, #8
   981f6:	60f8      	str	r0, [r7, #12]
   981f8:	60b9      	str	r1, [r7, #8]
   981fa:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   981fc:	687b      	ldr	r3, [r7, #4]
   981fe:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   98202:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   98206:	d026      	beq.n	98256 <pio_configure_pin_group+0x66>
   98208:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9820c:	d806      	bhi.n	9821c <pio_configure_pin_group+0x2c>
   9820e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   98212:	d00a      	beq.n	9822a <pio_configure_pin_group+0x3a>
   98214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98218:	d00e      	beq.n	98238 <pio_configure_pin_group+0x48>
   9821a:	e044      	b.n	982a6 <pio_configure_pin_group+0xb6>
   9821c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   98220:	d01f      	beq.n	98262 <pio_configure_pin_group+0x72>
   98222:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   98226:	d01c      	beq.n	98262 <pio_configure_pin_group+0x72>
   98228:	e03d      	b.n	982a6 <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   9822a:	68ba      	ldr	r2, [r7, #8]
   9822c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   98230:	68f8      	ldr	r0, [r7, #12]
   98232:	4b20      	ldr	r3, [pc, #128]	; (982b4 <pio_configure_pin_group+0xc4>)
   98234:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   98236:	e038      	b.n	982aa <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   98238:	68ba      	ldr	r2, [r7, #8]
   9823a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9823e:	68f8      	ldr	r0, [r7, #12]
   98240:	4b1c      	ldr	r3, [pc, #112]	; (982b4 <pio_configure_pin_group+0xc4>)
   98242:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   98244:	687b      	ldr	r3, [r7, #4]
   98246:	f003 0301 	and.w	r3, r3, #1
   9824a:	461a      	mov	r2, r3
   9824c:	68b9      	ldr	r1, [r7, #8]
   9824e:	68f8      	ldr	r0, [r7, #12]
   98250:	4b19      	ldr	r3, [pc, #100]	; (982b8 <pio_configure_pin_group+0xc8>)
   98252:	4798      	blx	r3
		break;
   98254:	e029      	b.n	982aa <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   98256:	687a      	ldr	r2, [r7, #4]
   98258:	68b9      	ldr	r1, [r7, #8]
   9825a:	68f8      	ldr	r0, [r7, #12]
   9825c:	4b17      	ldr	r3, [pc, #92]	; (982bc <pio_configure_pin_group+0xcc>)
   9825e:	4798      	blx	r3
		break;
   98260:	e023      	b.n	982aa <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   98262:	687b      	ldr	r3, [r7, #4]
   98264:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   98268:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9826c:	bf0c      	ite	eq
   9826e:	2301      	moveq	r3, #1
   98270:	2300      	movne	r3, #0
   98272:	b2db      	uxtb	r3, r3
   98274:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   98276:	687b      	ldr	r3, [r7, #4]
   98278:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9827c:	2b00      	cmp	r3, #0
   9827e:	bf14      	ite	ne
   98280:	2301      	movne	r3, #1
   98282:	2300      	moveq	r3, #0
   98284:	b2db      	uxtb	r3, r3
   98286:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   98288:	687b      	ldr	r3, [r7, #4]
   9828a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9828e:	2b00      	cmp	r3, #0
   98290:	bf14      	ite	ne
   98292:	2301      	movne	r3, #1
   98294:	2300      	moveq	r3, #0
   98296:	b2db      	uxtb	r3, r3
   98298:	9300      	str	r3, [sp, #0]
   9829a:	460b      	mov	r3, r1
   9829c:	68b9      	ldr	r1, [r7, #8]
   9829e:	68f8      	ldr	r0, [r7, #12]
   982a0:	4c07      	ldr	r4, [pc, #28]	; (982c0 <pio_configure_pin_group+0xd0>)
   982a2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   982a4:	e001      	b.n	982aa <pio_configure_pin_group+0xba>

	default:
		return 0;
   982a6:	2300      	movs	r3, #0
   982a8:	e000      	b.n	982ac <pio_configure_pin_group+0xbc>
	}

	return 1;
   982aa:	2301      	movs	r3, #1
}
   982ac:	4618      	mov	r0, r3
   982ae:	3714      	adds	r7, #20
   982b0:	46bd      	mov	sp, r7
   982b2:	bd90      	pop	{r4, r7, pc}
   982b4:	00097f05 	.word	0x00097f05
   982b8:	00097ed9 	.word	0x00097ed9
   982bc:	00097f85 	.word	0x00097f85
   982c0:	00098005 	.word	0x00098005

000982c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   982c4:	b580      	push	{r7, lr}
   982c6:	b084      	sub	sp, #16
   982c8:	af00      	add	r7, sp, #0
   982ca:	6078      	str	r0, [r7, #4]
   982cc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   982ce:	6878      	ldr	r0, [r7, #4]
   982d0:	4b24      	ldr	r3, [pc, #144]	; (98364 <pio_handler_process+0xa0>)
   982d2:	4798      	blx	r3
   982d4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   982d6:	6878      	ldr	r0, [r7, #4]
   982d8:	4b23      	ldr	r3, [pc, #140]	; (98368 <pio_handler_process+0xa4>)
   982da:	4798      	blx	r3
   982dc:	4602      	mov	r2, r0
   982de:	68fb      	ldr	r3, [r7, #12]
   982e0:	4013      	ands	r3, r2
   982e2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   982e4:	68fb      	ldr	r3, [r7, #12]
   982e6:	2b00      	cmp	r3, #0
   982e8:	d037      	beq.n	9835a <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   982ea:	2300      	movs	r3, #0
   982ec:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   982ee:	e031      	b.n	98354 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   982f0:	4a1e      	ldr	r2, [pc, #120]	; (9836c <pio_handler_process+0xa8>)
   982f2:	68bb      	ldr	r3, [r7, #8]
   982f4:	011b      	lsls	r3, r3, #4
   982f6:	4413      	add	r3, r2
   982f8:	681a      	ldr	r2, [r3, #0]
   982fa:	683b      	ldr	r3, [r7, #0]
   982fc:	429a      	cmp	r2, r3
   982fe:	d126      	bne.n	9834e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   98300:	4a1a      	ldr	r2, [pc, #104]	; (9836c <pio_handler_process+0xa8>)
   98302:	68bb      	ldr	r3, [r7, #8]
   98304:	011b      	lsls	r3, r3, #4
   98306:	4413      	add	r3, r2
   98308:	3304      	adds	r3, #4
   9830a:	681a      	ldr	r2, [r3, #0]
   9830c:	68fb      	ldr	r3, [r7, #12]
   9830e:	4013      	ands	r3, r2
   98310:	2b00      	cmp	r3, #0
   98312:	d01c      	beq.n	9834e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   98314:	4a15      	ldr	r2, [pc, #84]	; (9836c <pio_handler_process+0xa8>)
   98316:	68bb      	ldr	r3, [r7, #8]
   98318:	011b      	lsls	r3, r3, #4
   9831a:	4413      	add	r3, r2
   9831c:	330c      	adds	r3, #12
   9831e:	681b      	ldr	r3, [r3, #0]
   98320:	4912      	ldr	r1, [pc, #72]	; (9836c <pio_handler_process+0xa8>)
   98322:	68ba      	ldr	r2, [r7, #8]
   98324:	0112      	lsls	r2, r2, #4
   98326:	440a      	add	r2, r1
   98328:	6810      	ldr	r0, [r2, #0]
   9832a:	4910      	ldr	r1, [pc, #64]	; (9836c <pio_handler_process+0xa8>)
   9832c:	68ba      	ldr	r2, [r7, #8]
   9832e:	0112      	lsls	r2, r2, #4
   98330:	440a      	add	r2, r1
   98332:	3204      	adds	r2, #4
   98334:	6812      	ldr	r2, [r2, #0]
   98336:	4611      	mov	r1, r2
   98338:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9833a:	4a0c      	ldr	r2, [pc, #48]	; (9836c <pio_handler_process+0xa8>)
   9833c:	68bb      	ldr	r3, [r7, #8]
   9833e:	011b      	lsls	r3, r3, #4
   98340:	4413      	add	r3, r2
   98342:	3304      	adds	r3, #4
   98344:	681b      	ldr	r3, [r3, #0]
   98346:	43db      	mvns	r3, r3
   98348:	68fa      	ldr	r2, [r7, #12]
   9834a:	4013      	ands	r3, r2
   9834c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9834e:	68bb      	ldr	r3, [r7, #8]
   98350:	3301      	adds	r3, #1
   98352:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   98354:	68fb      	ldr	r3, [r7, #12]
   98356:	2b00      	cmp	r3, #0
   98358:	d1ca      	bne.n	982f0 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9835a:	bf00      	nop
   9835c:	3710      	adds	r7, #16
   9835e:	46bd      	mov	sp, r7
   98360:	bd80      	pop	{r7, pc}
   98362:	bf00      	nop
   98364:	00098085 	.word	0x00098085
   98368:	0009809d 	.word	0x0009809d
   9836c:	20072728 	.word	0x20072728

00098370 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   98370:	b580      	push	{r7, lr}
   98372:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   98374:	210b      	movs	r1, #11
   98376:	4802      	ldr	r0, [pc, #8]	; (98380 <PIOA_Handler+0x10>)
   98378:	4b02      	ldr	r3, [pc, #8]	; (98384 <PIOA_Handler+0x14>)
   9837a:	4798      	blx	r3
}
   9837c:	bf00      	nop
   9837e:	bd80      	pop	{r7, pc}
   98380:	400e0e00 	.word	0x400e0e00
   98384:	000982c5 	.word	0x000982c5

00098388 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   98388:	b580      	push	{r7, lr}
   9838a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9838c:	210c      	movs	r1, #12
   9838e:	4802      	ldr	r0, [pc, #8]	; (98398 <PIOB_Handler+0x10>)
   98390:	4b02      	ldr	r3, [pc, #8]	; (9839c <PIOB_Handler+0x14>)
   98392:	4798      	blx	r3
}
   98394:	bf00      	nop
   98396:	bd80      	pop	{r7, pc}
   98398:	400e1000 	.word	0x400e1000
   9839c:	000982c5 	.word	0x000982c5

000983a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   983a0:	b580      	push	{r7, lr}
   983a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   983a4:	210d      	movs	r1, #13
   983a6:	4802      	ldr	r0, [pc, #8]	; (983b0 <PIOC_Handler+0x10>)
   983a8:	4b02      	ldr	r3, [pc, #8]	; (983b4 <PIOC_Handler+0x14>)
   983aa:	4798      	blx	r3
}
   983ac:	bf00      	nop
   983ae:	bd80      	pop	{r7, pc}
   983b0:	400e1200 	.word	0x400e1200
   983b4:	000982c5 	.word	0x000982c5

000983b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   983b8:	b580      	push	{r7, lr}
   983ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   983bc:	210e      	movs	r1, #14
   983be:	4802      	ldr	r0, [pc, #8]	; (983c8 <PIOD_Handler+0x10>)
   983c0:	4b02      	ldr	r3, [pc, #8]	; (983cc <PIOD_Handler+0x14>)
   983c2:	4798      	blx	r3
}
   983c4:	bf00      	nop
   983c6:	bd80      	pop	{r7, pc}
   983c8:	400e1400 	.word	0x400e1400
   983cc:	000982c5 	.word	0x000982c5

000983d0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   983d0:	b480      	push	{r7}
   983d2:	b085      	sub	sp, #20
   983d4:	af00      	add	r7, sp, #0
   983d6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   983d8:	491c      	ldr	r1, [pc, #112]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   983da:	4b1c      	ldr	r3, [pc, #112]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   983dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   983de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   983e2:	687b      	ldr	r3, [r7, #4]
   983e4:	4313      	orrs	r3, r2
   983e6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   983e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   983ec:	60fb      	str	r3, [r7, #12]
   983ee:	e007      	b.n	98400 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   983f0:	68fb      	ldr	r3, [r7, #12]
   983f2:	2b00      	cmp	r3, #0
   983f4:	d101      	bne.n	983fa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   983f6:	2301      	movs	r3, #1
   983f8:	e023      	b.n	98442 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   983fa:	68fb      	ldr	r3, [r7, #12]
   983fc:	3b01      	subs	r3, #1
   983fe:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   98400:	4b12      	ldr	r3, [pc, #72]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   98402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98404:	f003 0308 	and.w	r3, r3, #8
   98408:	2b00      	cmp	r3, #0
   9840a:	d0f1      	beq.n	983f0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9840c:	4a0f      	ldr	r2, [pc, #60]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   9840e:	4b0f      	ldr	r3, [pc, #60]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   98410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   98412:	f023 0303 	bic.w	r3, r3, #3
   98416:	f043 0302 	orr.w	r3, r3, #2
   9841a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9841c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   98420:	60fb      	str	r3, [r7, #12]
   98422:	e007      	b.n	98434 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   98424:	68fb      	ldr	r3, [r7, #12]
   98426:	2b00      	cmp	r3, #0
   98428:	d101      	bne.n	9842e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9842a:	2301      	movs	r3, #1
   9842c:	e009      	b.n	98442 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9842e:	68fb      	ldr	r3, [r7, #12]
   98430:	3b01      	subs	r3, #1
   98432:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   98434:	4b05      	ldr	r3, [pc, #20]	; (9844c <pmc_switch_mck_to_pllack+0x7c>)
   98436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98438:	f003 0308 	and.w	r3, r3, #8
   9843c:	2b00      	cmp	r3, #0
   9843e:	d0f1      	beq.n	98424 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   98440:	2300      	movs	r3, #0
}
   98442:	4618      	mov	r0, r3
   98444:	3714      	adds	r7, #20
   98446:	46bd      	mov	sp, r7
   98448:	bc80      	pop	{r7}
   9844a:	4770      	bx	lr
   9844c:	400e0600 	.word	0x400e0600

00098450 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   98450:	b480      	push	{r7}
   98452:	b083      	sub	sp, #12
   98454:	af00      	add	r7, sp, #0
   98456:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   98458:	687b      	ldr	r3, [r7, #4]
   9845a:	2b01      	cmp	r3, #1
   9845c:	d107      	bne.n	9846e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9845e:	4a08      	ldr	r2, [pc, #32]	; (98480 <pmc_switch_sclk_to_32kxtal+0x30>)
   98460:	4b07      	ldr	r3, [pc, #28]	; (98480 <pmc_switch_sclk_to_32kxtal+0x30>)
   98462:	689b      	ldr	r3, [r3, #8]
   98464:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   98468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9846c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9846e:	4b04      	ldr	r3, [pc, #16]	; (98480 <pmc_switch_sclk_to_32kxtal+0x30>)
   98470:	4a04      	ldr	r2, [pc, #16]	; (98484 <pmc_switch_sclk_to_32kxtal+0x34>)
   98472:	601a      	str	r2, [r3, #0]
}
   98474:	bf00      	nop
   98476:	370c      	adds	r7, #12
   98478:	46bd      	mov	sp, r7
   9847a:	bc80      	pop	{r7}
   9847c:	4770      	bx	lr
   9847e:	bf00      	nop
   98480:	400e1a10 	.word	0x400e1a10
   98484:	a5000008 	.word	0xa5000008

00098488 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   98488:	b480      	push	{r7}
   9848a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9848c:	4b09      	ldr	r3, [pc, #36]	; (984b4 <pmc_osc_is_ready_32kxtal+0x2c>)
   9848e:	695b      	ldr	r3, [r3, #20]
   98490:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   98494:	2b00      	cmp	r3, #0
   98496:	d007      	beq.n	984a8 <pmc_osc_is_ready_32kxtal+0x20>
   98498:	4b07      	ldr	r3, [pc, #28]	; (984b8 <pmc_osc_is_ready_32kxtal+0x30>)
   9849a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9849c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   984a0:	2b00      	cmp	r3, #0
   984a2:	d001      	beq.n	984a8 <pmc_osc_is_ready_32kxtal+0x20>
   984a4:	2301      	movs	r3, #1
   984a6:	e000      	b.n	984aa <pmc_osc_is_ready_32kxtal+0x22>
   984a8:	2300      	movs	r3, #0
}
   984aa:	4618      	mov	r0, r3
   984ac:	46bd      	mov	sp, r7
   984ae:	bc80      	pop	{r7}
   984b0:	4770      	bx	lr
   984b2:	bf00      	nop
   984b4:	400e1a10 	.word	0x400e1a10
   984b8:	400e0600 	.word	0x400e0600

000984bc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   984bc:	b480      	push	{r7}
   984be:	b085      	sub	sp, #20
   984c0:	af00      	add	r7, sp, #0
   984c2:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   984c4:	2300      	movs	r3, #0
   984c6:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   984c8:	4b21      	ldr	r3, [pc, #132]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   984ca:	6a1b      	ldr	r3, [r3, #32]
   984cc:	f003 0301 	and.w	r3, r3, #1
   984d0:	2b00      	cmp	r3, #0
   984d2:	d00e      	beq.n	984f2 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   984d4:	491e      	ldr	r1, [pc, #120]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   984d6:	4b1e      	ldr	r3, [pc, #120]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   984d8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   984da:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   984de:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   984e2:	687a      	ldr	r2, [r7, #4]
   984e4:	4313      	orrs	r3, r2
   984e6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   984ea:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   984ee:	620b      	str	r3, [r1, #32]
   984f0:	e00b      	b.n	9850a <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   984f2:	2301      	movs	r3, #1
   984f4:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   984f6:	4916      	ldr	r1, [pc, #88]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   984f8:	4b15      	ldr	r3, [pc, #84]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   984fa:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   984fc:	4b15      	ldr	r3, [pc, #84]	; (98554 <pmc_switch_mainck_to_fastrc+0x98>)
   984fe:	4013      	ands	r3, r2
   98500:	687a      	ldr	r2, [r7, #4]
   98502:	431a      	orrs	r2, r3
   98504:	4b14      	ldr	r3, [pc, #80]	; (98558 <pmc_switch_mainck_to_fastrc+0x9c>)
   98506:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   98508:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9850a:	bf00      	nop
   9850c:	4b10      	ldr	r3, [pc, #64]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   9850e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   98514:	2b00      	cmp	r3, #0
   98516:	d0f9      	beq.n	9850c <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   98518:	4a0d      	ldr	r2, [pc, #52]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   9851a:	4b0d      	ldr	r3, [pc, #52]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   9851c:	6a1b      	ldr	r3, [r3, #32]
   9851e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   98522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   98526:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9852a:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   9852c:	68fb      	ldr	r3, [r7, #12]
   9852e:	2b00      	cmp	r3, #0
   98530:	d009      	beq.n	98546 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   98532:	4a07      	ldr	r2, [pc, #28]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   98534:	4b06      	ldr	r3, [pc, #24]	; (98550 <pmc_switch_mainck_to_fastrc+0x94>)
   98536:	6a1b      	ldr	r3, [r3, #32]
   98538:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9853c:	f023 0301 	bic.w	r3, r3, #1
   98540:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   98544:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   98546:	bf00      	nop
   98548:	3714      	adds	r7, #20
   9854a:	46bd      	mov	sp, r7
   9854c:	bc80      	pop	{r7}
   9854e:	4770      	bx	lr
   98550:	400e0600 	.word	0x400e0600
   98554:	ffc80086 	.word	0xffc80086
   98558:	0037ff09 	.word	0x0037ff09

0009855c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   9855c:	b480      	push	{r7}
   9855e:	b083      	sub	sp, #12
   98560:	af00      	add	r7, sp, #0
   98562:	6078      	str	r0, [r7, #4]
   98564:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   98566:	687b      	ldr	r3, [r7, #4]
   98568:	2b00      	cmp	r3, #0
   9856a:	d008      	beq.n	9857e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9856c:	4916      	ldr	r1, [pc, #88]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   9856e:	4b16      	ldr	r3, [pc, #88]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   98570:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   98572:	4a16      	ldr	r2, [pc, #88]	; (985cc <pmc_switch_mainck_to_xtal+0x70>)
   98574:	401a      	ands	r2, r3
   98576:	4b16      	ldr	r3, [pc, #88]	; (985d0 <pmc_switch_mainck_to_xtal+0x74>)
   98578:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9857a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   9857c:	e01e      	b.n	985bc <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9857e:	4912      	ldr	r1, [pc, #72]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   98580:	4b11      	ldr	r3, [pc, #68]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   98582:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   98584:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   98588:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9858c:	683a      	ldr	r2, [r7, #0]
   9858e:	0212      	lsls	r2, r2, #8
   98590:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   98592:	4313      	orrs	r3, r2
   98594:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   98598:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9859c:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9859e:	bf00      	nop
   985a0:	4b09      	ldr	r3, [pc, #36]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   985a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   985a4:	f003 0301 	and.w	r3, r3, #1
   985a8:	2b00      	cmp	r3, #0
   985aa:	d0f9      	beq.n	985a0 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   985ac:	4a06      	ldr	r2, [pc, #24]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   985ae:	4b06      	ldr	r3, [pc, #24]	; (985c8 <pmc_switch_mainck_to_xtal+0x6c>)
   985b0:	6a1b      	ldr	r3, [r3, #32]
   985b2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   985b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   985ba:	6213      	str	r3, [r2, #32]
	}
}
   985bc:	bf00      	nop
   985be:	370c      	adds	r7, #12
   985c0:	46bd      	mov	sp, r7
   985c2:	bc80      	pop	{r7}
   985c4:	4770      	bx	lr
   985c6:	bf00      	nop
   985c8:	400e0600 	.word	0x400e0600
   985cc:	fec8fffc 	.word	0xfec8fffc
   985d0:	01370002 	.word	0x01370002

000985d4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   985d4:	b480      	push	{r7}
   985d6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   985d8:	4b03      	ldr	r3, [pc, #12]	; (985e8 <pmc_osc_is_ready_mainck+0x14>)
   985da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   985dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   985e0:	4618      	mov	r0, r3
   985e2:	46bd      	mov	sp, r7
   985e4:	bc80      	pop	{r7}
   985e6:	4770      	bx	lr
   985e8:	400e0600 	.word	0x400e0600

000985ec <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   985ec:	b480      	push	{r7}
   985ee:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   985f0:	4b03      	ldr	r3, [pc, #12]	; (98600 <pmc_disable_pllack+0x14>)
   985f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   985f6:	629a      	str	r2, [r3, #40]	; 0x28
}
   985f8:	bf00      	nop
   985fa:	46bd      	mov	sp, r7
   985fc:	bc80      	pop	{r7}
   985fe:	4770      	bx	lr
   98600:	400e0600 	.word	0x400e0600

00098604 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   98604:	b480      	push	{r7}
   98606:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   98608:	4b03      	ldr	r3, [pc, #12]	; (98618 <pmc_is_locked_pllack+0x14>)
   9860a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9860c:	f003 0302 	and.w	r3, r3, #2
}
   98610:	4618      	mov	r0, r3
   98612:	46bd      	mov	sp, r7
   98614:	bc80      	pop	{r7}
   98616:	4770      	bx	lr
   98618:	400e0600 	.word	0x400e0600

0009861c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   9861c:	b480      	push	{r7}
   9861e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   98620:	4b03      	ldr	r3, [pc, #12]	; (98630 <pmc_is_locked_upll+0x14>)
   98622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   98624:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   98628:	4618      	mov	r0, r3
   9862a:	46bd      	mov	sp, r7
   9862c:	bc80      	pop	{r7}
   9862e:	4770      	bx	lr
   98630:	400e0600 	.word	0x400e0600

00098634 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   98634:	b480      	push	{r7}
   98636:	b083      	sub	sp, #12
   98638:	af00      	add	r7, sp, #0
   9863a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9863c:	687b      	ldr	r3, [r7, #4]
   9863e:	2b2c      	cmp	r3, #44	; 0x2c
   98640:	d901      	bls.n	98646 <pmc_enable_periph_clk+0x12>
		return 1;
   98642:	2301      	movs	r3, #1
   98644:	e02f      	b.n	986a6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   98646:	687b      	ldr	r3, [r7, #4]
   98648:	2b1f      	cmp	r3, #31
   9864a:	d813      	bhi.n	98674 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9864c:	4b18      	ldr	r3, [pc, #96]	; (986b0 <pmc_enable_periph_clk+0x7c>)
   9864e:	699a      	ldr	r2, [r3, #24]
   98650:	2101      	movs	r1, #1
   98652:	687b      	ldr	r3, [r7, #4]
   98654:	fa01 f303 	lsl.w	r3, r1, r3
   98658:	401a      	ands	r2, r3
   9865a:	2101      	movs	r1, #1
   9865c:	687b      	ldr	r3, [r7, #4]
   9865e:	fa01 f303 	lsl.w	r3, r1, r3
   98662:	429a      	cmp	r2, r3
   98664:	d01e      	beq.n	986a4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   98666:	4a12      	ldr	r2, [pc, #72]	; (986b0 <pmc_enable_periph_clk+0x7c>)
   98668:	2101      	movs	r1, #1
   9866a:	687b      	ldr	r3, [r7, #4]
   9866c:	fa01 f303 	lsl.w	r3, r1, r3
   98670:	6113      	str	r3, [r2, #16]
   98672:	e017      	b.n	986a4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   98674:	687b      	ldr	r3, [r7, #4]
   98676:	3b20      	subs	r3, #32
   98678:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9867a:	4b0d      	ldr	r3, [pc, #52]	; (986b0 <pmc_enable_periph_clk+0x7c>)
   9867c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   98680:	2101      	movs	r1, #1
   98682:	687b      	ldr	r3, [r7, #4]
   98684:	fa01 f303 	lsl.w	r3, r1, r3
   98688:	401a      	ands	r2, r3
   9868a:	2101      	movs	r1, #1
   9868c:	687b      	ldr	r3, [r7, #4]
   9868e:	fa01 f303 	lsl.w	r3, r1, r3
   98692:	429a      	cmp	r2, r3
   98694:	d006      	beq.n	986a4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   98696:	4a06      	ldr	r2, [pc, #24]	; (986b0 <pmc_enable_periph_clk+0x7c>)
   98698:	2101      	movs	r1, #1
   9869a:	687b      	ldr	r3, [r7, #4]
   9869c:	fa01 f303 	lsl.w	r3, r1, r3
   986a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   986a4:	2300      	movs	r3, #0
}
   986a6:	4618      	mov	r0, r3
   986a8:	370c      	adds	r7, #12
   986aa:	46bd      	mov	sp, r7
   986ac:	bc80      	pop	{r7}
   986ae:	4770      	bx	lr
   986b0:	400e0600 	.word	0x400e0600

000986b4 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   986b4:	b480      	push	{r7}
   986b6:	b083      	sub	sp, #12
   986b8:	af00      	add	r7, sp, #0
   986ba:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   986bc:	687b      	ldr	r3, [r7, #4]
   986be:	2b00      	cmp	r3, #0
   986c0:	d004      	beq.n	986cc <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   986c2:	4b07      	ldr	r3, [pc, #28]	; (986e0 <pmc_set_writeprotect+0x2c>)
   986c4:	4a07      	ldr	r2, [pc, #28]	; (986e4 <pmc_set_writeprotect+0x30>)
   986c6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   986ca:	e003      	b.n	986d4 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   986cc:	4b04      	ldr	r3, [pc, #16]	; (986e0 <pmc_set_writeprotect+0x2c>)
   986ce:	4a06      	ldr	r2, [pc, #24]	; (986e8 <pmc_set_writeprotect+0x34>)
   986d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   986d4:	bf00      	nop
   986d6:	370c      	adds	r7, #12
   986d8:	46bd      	mov	sp, r7
   986da:	bc80      	pop	{r7}
   986dc:	4770      	bx	lr
   986de:	bf00      	nop
   986e0:	400e0600 	.word	0x400e0600
   986e4:	504d4301 	.word	0x504d4301
   986e8:	504d4300 	.word	0x504d4300

000986ec <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   986ec:	b480      	push	{r7}
   986ee:	b083      	sub	sp, #12
   986f0:	af00      	add	r7, sp, #0
   986f2:	6078      	str	r0, [r7, #4]
   986f4:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   986f6:	687a      	ldr	r2, [r7, #4]
   986f8:	683b      	ldr	r3, [r7, #0]
   986fa:	019b      	lsls	r3, r3, #6
   986fc:	4413      	add	r3, r2
   986fe:	2205      	movs	r2, #5
   98700:	601a      	str	r2, [r3, #0]
}
   98702:	bf00      	nop
   98704:	370c      	adds	r7, #12
   98706:	46bd      	mov	sp, r7
   98708:	bc80      	pop	{r7}
   9870a:	4770      	bx	lr

0009870c <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   9870c:	b480      	push	{r7}
   9870e:	b085      	sub	sp, #20
   98710:	af00      	add	r7, sp, #0
   98712:	60f8      	str	r0, [r7, #12]
   98714:	60b9      	str	r1, [r7, #8]
   98716:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   98718:	68fa      	ldr	r2, [r7, #12]
   9871a:	68bb      	ldr	r3, [r7, #8]
   9871c:	019b      	lsls	r3, r3, #6
   9871e:	4413      	add	r3, r2
   98720:	331c      	adds	r3, #28
   98722:	687a      	ldr	r2, [r7, #4]
   98724:	601a      	str	r2, [r3, #0]
}
   98726:	bf00      	nop
   98728:	3714      	adds	r7, #20
   9872a:	46bd      	mov	sp, r7
   9872c:	bc80      	pop	{r7}
   9872e:	4770      	bx	lr

00098730 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   98730:	b480      	push	{r7}
   98732:	b087      	sub	sp, #28
   98734:	af00      	add	r7, sp, #0
   98736:	60f8      	str	r0, [r7, #12]
   98738:	60b9      	str	r1, [r7, #8]
   9873a:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9873c:	68fa      	ldr	r2, [r7, #12]
   9873e:	68bb      	ldr	r3, [r7, #8]
   98740:	019b      	lsls	r3, r3, #6
   98742:	4413      	add	r3, r2
   98744:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   98746:	697b      	ldr	r3, [r7, #20]
   98748:	687a      	ldr	r2, [r7, #4]
   9874a:	625a      	str	r2, [r3, #36]	; 0x24
}
   9874c:	bf00      	nop
   9874e:	371c      	adds	r7, #28
   98750:	46bd      	mov	sp, r7
   98752:	bc80      	pop	{r7}
   98754:	4770      	bx	lr
   98756:	bf00      	nop

00098758 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   98758:	b480      	push	{r7}
   9875a:	b085      	sub	sp, #20
   9875c:	af00      	add	r7, sp, #0
   9875e:	6078      	str	r0, [r7, #4]
   98760:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   98762:	687a      	ldr	r2, [r7, #4]
   98764:	683b      	ldr	r3, [r7, #0]
   98766:	019b      	lsls	r3, r3, #6
   98768:	4413      	add	r3, r2
   9876a:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   9876c:	68fb      	ldr	r3, [r7, #12]
   9876e:	6a1b      	ldr	r3, [r3, #32]
}
   98770:	4618      	mov	r0, r3
   98772:	3714      	adds	r7, #20
   98774:	46bd      	mov	sp, r7
   98776:	bc80      	pop	{r7}
   98778:	4770      	bx	lr
   9877a:	bf00      	nop

0009877c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   9877c:	b480      	push	{r7}
   9877e:	b085      	sub	sp, #20
   98780:	af00      	add	r7, sp, #0
   98782:	6078      	str	r0, [r7, #4]
   98784:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   98786:	2300      	movs	r3, #0
   98788:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   9878a:	687b      	ldr	r3, [r7, #4]
   9878c:	22ac      	movs	r2, #172	; 0xac
   9878e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   98790:	683b      	ldr	r3, [r7, #0]
   98792:	681a      	ldr	r2, [r3, #0]
   98794:	683b      	ldr	r3, [r7, #0]
   98796:	685b      	ldr	r3, [r3, #4]
   98798:	fbb2 f3f3 	udiv	r3, r2, r3
   9879c:	091b      	lsrs	r3, r3, #4
   9879e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   987a0:	68fb      	ldr	r3, [r7, #12]
   987a2:	2b00      	cmp	r3, #0
   987a4:	d003      	beq.n	987ae <uart_init+0x32>
   987a6:	68fb      	ldr	r3, [r7, #12]
   987a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   987ac:	d301      	bcc.n	987b2 <uart_init+0x36>
		return 1;
   987ae:	2301      	movs	r3, #1
   987b0:	e00f      	b.n	987d2 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   987b2:	687b      	ldr	r3, [r7, #4]
   987b4:	68fa      	ldr	r2, [r7, #12]
   987b6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   987b8:	683b      	ldr	r3, [r7, #0]
   987ba:	689a      	ldr	r2, [r3, #8]
   987bc:	687b      	ldr	r3, [r7, #4]
   987be:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   987c0:	687b      	ldr	r3, [r7, #4]
   987c2:	f240 2202 	movw	r2, #514	; 0x202
   987c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   987ca:	687b      	ldr	r3, [r7, #4]
   987cc:	2250      	movs	r2, #80	; 0x50
   987ce:	601a      	str	r2, [r3, #0]

	return 0;
   987d0:	2300      	movs	r3, #0
}
   987d2:	4618      	mov	r0, r3
   987d4:	3714      	adds	r7, #20
   987d6:	46bd      	mov	sp, r7
   987d8:	bc80      	pop	{r7}
   987da:	4770      	bx	lr

000987dc <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   987dc:	b480      	push	{r7}
   987de:	b083      	sub	sp, #12
   987e0:	af00      	add	r7, sp, #0
   987e2:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   987e4:	687b      	ldr	r3, [r7, #4]
   987e6:	2240      	movs	r2, #64	; 0x40
   987e8:	601a      	str	r2, [r3, #0]
}
   987ea:	bf00      	nop
   987ec:	370c      	adds	r7, #12
   987ee:	46bd      	mov	sp, r7
   987f0:	bc80      	pop	{r7}
   987f2:	4770      	bx	lr

000987f4 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   987f4:	b480      	push	{r7}
   987f6:	b083      	sub	sp, #12
   987f8:	af00      	add	r7, sp, #0
   987fa:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   987fc:	687b      	ldr	r3, [r7, #4]
   987fe:	2210      	movs	r2, #16
   98800:	601a      	str	r2, [r3, #0]
}
   98802:	bf00      	nop
   98804:	370c      	adds	r7, #12
   98806:	46bd      	mov	sp, r7
   98808:	bc80      	pop	{r7}
   9880a:	4770      	bx	lr

0009880c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   9880c:	b480      	push	{r7}
   9880e:	b083      	sub	sp, #12
   98810:	af00      	add	r7, sp, #0
   98812:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   98814:	687b      	ldr	r3, [r7, #4]
   98816:	2250      	movs	r2, #80	; 0x50
   98818:	601a      	str	r2, [r3, #0]
}
   9881a:	bf00      	nop
   9881c:	370c      	adds	r7, #12
   9881e:	46bd      	mov	sp, r7
   98820:	bc80      	pop	{r7}
   98822:	4770      	bx	lr

00098824 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   98824:	b480      	push	{r7}
   98826:	b083      	sub	sp, #12
   98828:	af00      	add	r7, sp, #0
   9882a:	6078      	str	r0, [r7, #4]
   9882c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   9882e:	687b      	ldr	r3, [r7, #4]
   98830:	683a      	ldr	r2, [r7, #0]
   98832:	609a      	str	r2, [r3, #8]
}
   98834:	bf00      	nop
   98836:	370c      	adds	r7, #12
   98838:	46bd      	mov	sp, r7
   9883a:	bc80      	pop	{r7}
   9883c:	4770      	bx	lr
   9883e:	bf00      	nop

00098840 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   98840:	b480      	push	{r7}
   98842:	b083      	sub	sp, #12
   98844:	af00      	add	r7, sp, #0
   98846:	6078      	str	r0, [r7, #4]
   98848:	460b      	mov	r3, r1
   9884a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   9884c:	687b      	ldr	r3, [r7, #4]
   9884e:	695b      	ldr	r3, [r3, #20]
   98850:	f003 0302 	and.w	r3, r3, #2
   98854:	2b00      	cmp	r3, #0
   98856:	d101      	bne.n	9885c <uart_write+0x1c>
		return 1;
   98858:	2301      	movs	r3, #1
   9885a:	e00c      	b.n	98876 <uart_write+0x36>
if(cl_console_sync != true)
   9885c:	4b08      	ldr	r3, [pc, #32]	; (98880 <uart_write+0x40>)
   9885e:	781b      	ldrb	r3, [r3, #0]
   98860:	f083 0301 	eor.w	r3, r3, #1
   98864:	b2db      	uxtb	r3, r3
   98866:	2b00      	cmp	r3, #0
   98868:	d001      	beq.n	9886e <uart_write+0x2e>
	return 1;
   9886a:	2301      	movs	r3, #1
   9886c:	e003      	b.n	98876 <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   9886e:	78fa      	ldrb	r2, [r7, #3]
   98870:	687b      	ldr	r3, [r7, #4]
   98872:	61da      	str	r2, [r3, #28]
	return 0;
   98874:	2300      	movs	r3, #0
}
   98876:	4618      	mov	r0, r3
   98878:	370c      	adds	r7, #12
   9887a:	46bd      	mov	sp, r7
   9887c:	bc80      	pop	{r7}
   9887e:	4770      	bx	lr
   98880:	200727a5 	.word	0x200727a5

00098884 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   98884:	b480      	push	{r7}
   98886:	b083      	sub	sp, #12
   98888:	af00      	add	r7, sp, #0
   9888a:	6078      	str	r0, [r7, #4]
   9888c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   9888e:	687b      	ldr	r3, [r7, #4]
   98890:	695b      	ldr	r3, [r3, #20]
   98892:	f003 0301 	and.w	r3, r3, #1
   98896:	2b00      	cmp	r3, #0
   98898:	d101      	bne.n	9889e <uart_read+0x1a>
		return 1;
   9889a:	2301      	movs	r3, #1
   9889c:	e005      	b.n	988aa <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   9889e:	687b      	ldr	r3, [r7, #4]
   988a0:	699b      	ldr	r3, [r3, #24]
   988a2:	b2da      	uxtb	r2, r3
   988a4:	683b      	ldr	r3, [r7, #0]
   988a6:	701a      	strb	r2, [r3, #0]
	return 0;
   988a8:	2300      	movs	r3, #0
}
   988aa:	4618      	mov	r0, r3
   988ac:	370c      	adds	r7, #12
   988ae:	46bd      	mov	sp, r7
   988b0:	bc80      	pop	{r7}
   988b2:	4770      	bx	lr

000988b4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   988b4:	b480      	push	{r7}
   988b6:	b089      	sub	sp, #36	; 0x24
   988b8:	af00      	add	r7, sp, #0
   988ba:	60f8      	str	r0, [r7, #12]
   988bc:	60b9      	str	r1, [r7, #8]
   988be:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   988c0:	68bb      	ldr	r3, [r7, #8]
   988c2:	011a      	lsls	r2, r3, #4
   988c4:	687b      	ldr	r3, [r7, #4]
   988c6:	429a      	cmp	r2, r3
   988c8:	d802      	bhi.n	988d0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   988ca:	2310      	movs	r3, #16
   988cc:	61fb      	str	r3, [r7, #28]
   988ce:	e001      	b.n	988d4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   988d0:	2308      	movs	r3, #8
   988d2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   988d4:	687b      	ldr	r3, [r7, #4]
   988d6:	00da      	lsls	r2, r3, #3
   988d8:	69fb      	ldr	r3, [r7, #28]
   988da:	68b9      	ldr	r1, [r7, #8]
   988dc:	fb01 f303 	mul.w	r3, r1, r3
   988e0:	085b      	lsrs	r3, r3, #1
   988e2:	441a      	add	r2, r3
   988e4:	69fb      	ldr	r3, [r7, #28]
   988e6:	68b9      	ldr	r1, [r7, #8]
   988e8:	fb01 f303 	mul.w	r3, r1, r3
   988ec:	fbb2 f3f3 	udiv	r3, r2, r3
   988f0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   988f2:	69bb      	ldr	r3, [r7, #24]
   988f4:	08db      	lsrs	r3, r3, #3
   988f6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   988f8:	69bb      	ldr	r3, [r7, #24]
   988fa:	f003 0307 	and.w	r3, r3, #7
   988fe:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   98900:	697b      	ldr	r3, [r7, #20]
   98902:	2b00      	cmp	r3, #0
   98904:	d003      	beq.n	9890e <usart_set_async_baudrate+0x5a>
   98906:	697b      	ldr	r3, [r7, #20]
   98908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9890c:	d301      	bcc.n	98912 <usart_set_async_baudrate+0x5e>
		return 1;
   9890e:	2301      	movs	r3, #1
   98910:	e00f      	b.n	98932 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   98912:	69fb      	ldr	r3, [r7, #28]
   98914:	2b08      	cmp	r3, #8
   98916:	d105      	bne.n	98924 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   98918:	68fb      	ldr	r3, [r7, #12]
   9891a:	685b      	ldr	r3, [r3, #4]
   9891c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   98920:	68fb      	ldr	r3, [r7, #12]
   98922:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   98924:	693b      	ldr	r3, [r7, #16]
   98926:	041a      	lsls	r2, r3, #16
   98928:	697b      	ldr	r3, [r7, #20]
   9892a:	431a      	orrs	r2, r3
   9892c:	68fb      	ldr	r3, [r7, #12]
   9892e:	621a      	str	r2, [r3, #32]

	return 0;
   98930:	2300      	movs	r3, #0
}
   98932:	4618      	mov	r0, r3
   98934:	3724      	adds	r7, #36	; 0x24
   98936:	46bd      	mov	sp, r7
   98938:	bc80      	pop	{r7}
   9893a:	4770      	bx	lr

0009893c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   9893c:	b580      	push	{r7, lr}
   9893e:	b082      	sub	sp, #8
   98940:	af00      	add	r7, sp, #0
   98942:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   98944:	6878      	ldr	r0, [r7, #4]
   98946:	4b0d      	ldr	r3, [pc, #52]	; (9897c <usart_reset+0x40>)
   98948:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   9894a:	687b      	ldr	r3, [r7, #4]
   9894c:	2200      	movs	r2, #0
   9894e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   98950:	687b      	ldr	r3, [r7, #4]
   98952:	2200      	movs	r2, #0
   98954:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   98956:	687b      	ldr	r3, [r7, #4]
   98958:	2200      	movs	r2, #0
   9895a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   9895c:	6878      	ldr	r0, [r7, #4]
   9895e:	4b08      	ldr	r3, [pc, #32]	; (98980 <usart_reset+0x44>)
   98960:	4798      	blx	r3
	usart_reset_rx(p_usart);
   98962:	6878      	ldr	r0, [r7, #4]
   98964:	4b07      	ldr	r3, [pc, #28]	; (98984 <usart_reset+0x48>)
   98966:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   98968:	6878      	ldr	r0, [r7, #4]
   9896a:	4b07      	ldr	r3, [pc, #28]	; (98988 <usart_reset+0x4c>)
   9896c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   9896e:	6878      	ldr	r0, [r7, #4]
   98970:	4b06      	ldr	r3, [pc, #24]	; (9898c <usart_reset+0x50>)
   98972:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   98974:	bf00      	nop
   98976:	3708      	adds	r7, #8
   98978:	46bd      	mov	sp, r7
   9897a:	bd80      	pop	{r7, pc}
   9897c:	00098b11 	.word	0x00098b11
   98980:	00098a2d 	.word	0x00098a2d
   98984:	00098a5d 	.word	0x00098a5d
   98988:	00098a75 	.word	0x00098a75
   9898c:	00098a91 	.word	0x00098a91

00098990 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   98990:	b580      	push	{r7, lr}
   98992:	b084      	sub	sp, #16
   98994:	af00      	add	r7, sp, #0
   98996:	60f8      	str	r0, [r7, #12]
   98998:	60b9      	str	r1, [r7, #8]
   9899a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   9899c:	68f8      	ldr	r0, [r7, #12]
   9899e:	4b1a      	ldr	r3, [pc, #104]	; (98a08 <usart_init_rs232+0x78>)
   989a0:	4798      	blx	r3

	ul_reg_val = 0;
   989a2:	4b1a      	ldr	r3, [pc, #104]	; (98a0c <usart_init_rs232+0x7c>)
   989a4:	2200      	movs	r2, #0
   989a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   989a8:	68bb      	ldr	r3, [r7, #8]
   989aa:	2b00      	cmp	r3, #0
   989ac:	d009      	beq.n	989c2 <usart_init_rs232+0x32>
   989ae:	68bb      	ldr	r3, [r7, #8]
   989b0:	681b      	ldr	r3, [r3, #0]
   989b2:	687a      	ldr	r2, [r7, #4]
   989b4:	4619      	mov	r1, r3
   989b6:	68f8      	ldr	r0, [r7, #12]
   989b8:	4b15      	ldr	r3, [pc, #84]	; (98a10 <usart_init_rs232+0x80>)
   989ba:	4798      	blx	r3
   989bc:	4603      	mov	r3, r0
   989be:	2b00      	cmp	r3, #0
   989c0:	d001      	beq.n	989c6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   989c2:	2301      	movs	r3, #1
   989c4:	e01b      	b.n	989fe <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   989c6:	68bb      	ldr	r3, [r7, #8]
   989c8:	685a      	ldr	r2, [r3, #4]
   989ca:	68bb      	ldr	r3, [r7, #8]
   989cc:	689b      	ldr	r3, [r3, #8]
   989ce:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   989d0:	68bb      	ldr	r3, [r7, #8]
   989d2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   989d4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   989d6:	68bb      	ldr	r3, [r7, #8]
   989d8:	68db      	ldr	r3, [r3, #12]
   989da:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   989dc:	4b0b      	ldr	r3, [pc, #44]	; (98a0c <usart_init_rs232+0x7c>)
   989de:	681b      	ldr	r3, [r3, #0]
   989e0:	4313      	orrs	r3, r2
   989e2:	4a0a      	ldr	r2, [pc, #40]	; (98a0c <usart_init_rs232+0x7c>)
   989e4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   989e6:	4b09      	ldr	r3, [pc, #36]	; (98a0c <usart_init_rs232+0x7c>)
   989e8:	681b      	ldr	r3, [r3, #0]
   989ea:	4a08      	ldr	r2, [pc, #32]	; (98a0c <usart_init_rs232+0x7c>)
   989ec:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   989ee:	68fb      	ldr	r3, [r7, #12]
   989f0:	685a      	ldr	r2, [r3, #4]
   989f2:	4b06      	ldr	r3, [pc, #24]	; (98a0c <usart_init_rs232+0x7c>)
   989f4:	681b      	ldr	r3, [r3, #0]
   989f6:	431a      	orrs	r2, r3
   989f8:	68fb      	ldr	r3, [r7, #12]
   989fa:	605a      	str	r2, [r3, #4]

	return 0;
   989fc:	2300      	movs	r3, #0
}
   989fe:	4618      	mov	r0, r3
   98a00:	3710      	adds	r7, #16
   98a02:	46bd      	mov	sp, r7
   98a04:	bd80      	pop	{r7, pc}
   98a06:	bf00      	nop
   98a08:	0009893d 	.word	0x0009893d
   98a0c:	20072798 	.word	0x20072798
   98a10:	000988b5 	.word	0x000988b5

00098a14 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   98a14:	b480      	push	{r7}
   98a16:	b083      	sub	sp, #12
   98a18:	af00      	add	r7, sp, #0
   98a1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   98a1c:	687b      	ldr	r3, [r7, #4]
   98a1e:	2240      	movs	r2, #64	; 0x40
   98a20:	601a      	str	r2, [r3, #0]
}
   98a22:	bf00      	nop
   98a24:	370c      	adds	r7, #12
   98a26:	46bd      	mov	sp, r7
   98a28:	bc80      	pop	{r7}
   98a2a:	4770      	bx	lr

00098a2c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   98a2c:	b480      	push	{r7}
   98a2e:	b083      	sub	sp, #12
   98a30:	af00      	add	r7, sp, #0
   98a32:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   98a34:	687b      	ldr	r3, [r7, #4]
   98a36:	2288      	movs	r2, #136	; 0x88
   98a38:	601a      	str	r2, [r3, #0]
}
   98a3a:	bf00      	nop
   98a3c:	370c      	adds	r7, #12
   98a3e:	46bd      	mov	sp, r7
   98a40:	bc80      	pop	{r7}
   98a42:	4770      	bx	lr

00098a44 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   98a44:	b480      	push	{r7}
   98a46:	b083      	sub	sp, #12
   98a48:	af00      	add	r7, sp, #0
   98a4a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   98a4c:	687b      	ldr	r3, [r7, #4]
   98a4e:	2210      	movs	r2, #16
   98a50:	601a      	str	r2, [r3, #0]
}
   98a52:	bf00      	nop
   98a54:	370c      	adds	r7, #12
   98a56:	46bd      	mov	sp, r7
   98a58:	bc80      	pop	{r7}
   98a5a:	4770      	bx	lr

00098a5c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   98a5c:	b480      	push	{r7}
   98a5e:	b083      	sub	sp, #12
   98a60:	af00      	add	r7, sp, #0
   98a62:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   98a64:	687b      	ldr	r3, [r7, #4]
   98a66:	2224      	movs	r2, #36	; 0x24
   98a68:	601a      	str	r2, [r3, #0]
}
   98a6a:	bf00      	nop
   98a6c:	370c      	adds	r7, #12
   98a6e:	46bd      	mov	sp, r7
   98a70:	bc80      	pop	{r7}
   98a72:	4770      	bx	lr

00098a74 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   98a74:	b480      	push	{r7}
   98a76:	b083      	sub	sp, #12
   98a78:	af00      	add	r7, sp, #0
   98a7a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   98a7c:	687b      	ldr	r3, [r7, #4]
   98a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
   98a82:	601a      	str	r2, [r3, #0]
}
   98a84:	bf00      	nop
   98a86:	370c      	adds	r7, #12
   98a88:	46bd      	mov	sp, r7
   98a8a:	bc80      	pop	{r7}
   98a8c:	4770      	bx	lr
   98a8e:	bf00      	nop

00098a90 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   98a90:	b480      	push	{r7}
   98a92:	b083      	sub	sp, #12
   98a94:	af00      	add	r7, sp, #0
   98a96:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   98a98:	687b      	ldr	r3, [r7, #4]
   98a9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   98a9e:	601a      	str	r2, [r3, #0]
}
   98aa0:	bf00      	nop
   98aa2:	370c      	adds	r7, #12
   98aa4:	46bd      	mov	sp, r7
   98aa6:	bc80      	pop	{r7}
   98aa8:	4770      	bx	lr
   98aaa:	bf00      	nop

00098aac <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   98aac:	b480      	push	{r7}
   98aae:	b083      	sub	sp, #12
   98ab0:	af00      	add	r7, sp, #0
   98ab2:	6078      	str	r0, [r7, #4]
   98ab4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   98ab6:	687b      	ldr	r3, [r7, #4]
   98ab8:	695b      	ldr	r3, [r3, #20]
   98aba:	f003 0302 	and.w	r3, r3, #2
   98abe:	2b00      	cmp	r3, #0
   98ac0:	d101      	bne.n	98ac6 <usart_write+0x1a>
		return 1;
   98ac2:	2301      	movs	r3, #1
   98ac4:	e005      	b.n	98ad2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   98ac6:	683b      	ldr	r3, [r7, #0]
   98ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   98acc:	687b      	ldr	r3, [r7, #4]
   98ace:	61da      	str	r2, [r3, #28]
	return 0;
   98ad0:	2300      	movs	r3, #0
}
   98ad2:	4618      	mov	r0, r3
   98ad4:	370c      	adds	r7, #12
   98ad6:	46bd      	mov	sp, r7
   98ad8:	bc80      	pop	{r7}
   98ada:	4770      	bx	lr

00098adc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   98adc:	b480      	push	{r7}
   98ade:	b083      	sub	sp, #12
   98ae0:	af00      	add	r7, sp, #0
   98ae2:	6078      	str	r0, [r7, #4]
   98ae4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   98ae6:	687b      	ldr	r3, [r7, #4]
   98ae8:	695b      	ldr	r3, [r3, #20]
   98aea:	f003 0301 	and.w	r3, r3, #1
   98aee:	2b00      	cmp	r3, #0
   98af0:	d101      	bne.n	98af6 <usart_read+0x1a>
		return 1;
   98af2:	2301      	movs	r3, #1
   98af4:	e006      	b.n	98b04 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   98af6:	687b      	ldr	r3, [r7, #4]
   98af8:	699b      	ldr	r3, [r3, #24]
   98afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   98afe:	683b      	ldr	r3, [r7, #0]
   98b00:	601a      	str	r2, [r3, #0]

	return 0;
   98b02:	2300      	movs	r3, #0
}
   98b04:	4618      	mov	r0, r3
   98b06:	370c      	adds	r7, #12
   98b08:	46bd      	mov	sp, r7
   98b0a:	bc80      	pop	{r7}
   98b0c:	4770      	bx	lr
   98b0e:	bf00      	nop

00098b10 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   98b10:	b480      	push	{r7}
   98b12:	b083      	sub	sp, #12
   98b14:	af00      	add	r7, sp, #0
   98b16:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   98b18:	687b      	ldr	r3, [r7, #4]
   98b1a:	4a04      	ldr	r2, [pc, #16]	; (98b2c <usart_disable_writeprotect+0x1c>)
   98b1c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   98b20:	bf00      	nop
   98b22:	370c      	adds	r7, #12
   98b24:	46bd      	mov	sp, r7
   98b26:	bc80      	pop	{r7}
   98b28:	4770      	bx	lr
   98b2a:	bf00      	nop
   98b2c:	55534100 	.word	0x55534100

00098b30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   98b30:	b480      	push	{r7}
   98b32:	af00      	add	r7, sp, #0
	while (1) {
	}
   98b34:	e7fe      	b.n	98b34 <Dummy_Handler+0x4>
   98b36:	bf00      	nop

00098b38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   98b38:	b580      	push	{r7, lr}
   98b3a:	b082      	sub	sp, #8
   98b3c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   98b3e:	4b1e      	ldr	r3, [pc, #120]	; (98bb8 <Reset_Handler+0x80>)
   98b40:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   98b42:	4b1e      	ldr	r3, [pc, #120]	; (98bbc <Reset_Handler+0x84>)
   98b44:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   98b46:	687a      	ldr	r2, [r7, #4]
   98b48:	683b      	ldr	r3, [r7, #0]
   98b4a:	429a      	cmp	r2, r3
   98b4c:	d00c      	beq.n	98b68 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   98b4e:	e007      	b.n	98b60 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   98b50:	683b      	ldr	r3, [r7, #0]
   98b52:	1d1a      	adds	r2, r3, #4
   98b54:	603a      	str	r2, [r7, #0]
   98b56:	687a      	ldr	r2, [r7, #4]
   98b58:	1d11      	adds	r1, r2, #4
   98b5a:	6079      	str	r1, [r7, #4]
   98b5c:	6812      	ldr	r2, [r2, #0]
   98b5e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   98b60:	683b      	ldr	r3, [r7, #0]
   98b62:	4a17      	ldr	r2, [pc, #92]	; (98bc0 <Reset_Handler+0x88>)
   98b64:	4293      	cmp	r3, r2
   98b66:	d3f3      	bcc.n	98b50 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   98b68:	4b16      	ldr	r3, [pc, #88]	; (98bc4 <Reset_Handler+0x8c>)
   98b6a:	603b      	str	r3, [r7, #0]
   98b6c:	e004      	b.n	98b78 <Reset_Handler+0x40>
		*pDest++ = 0;
   98b6e:	683b      	ldr	r3, [r7, #0]
   98b70:	1d1a      	adds	r2, r3, #4
   98b72:	603a      	str	r2, [r7, #0]
   98b74:	2200      	movs	r2, #0
   98b76:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   98b78:	683b      	ldr	r3, [r7, #0]
   98b7a:	4a13      	ldr	r2, [pc, #76]	; (98bc8 <Reset_Handler+0x90>)
   98b7c:	4293      	cmp	r3, r2
   98b7e:	d3f6      	bcc.n	98b6e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   98b80:	4b12      	ldr	r3, [pc, #72]	; (98bcc <Reset_Handler+0x94>)
   98b82:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   98b84:	4a12      	ldr	r2, [pc, #72]	; (98bd0 <Reset_Handler+0x98>)
   98b86:	687b      	ldr	r3, [r7, #4]
   98b88:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   98b8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   98b90:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   98b92:	687b      	ldr	r3, [r7, #4]
   98b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   98b98:	d309      	bcc.n	98bae <Reset_Handler+0x76>
   98b9a:	687b      	ldr	r3, [r7, #4]
   98b9c:	4a0d      	ldr	r2, [pc, #52]	; (98bd4 <Reset_Handler+0x9c>)
   98b9e:	4293      	cmp	r3, r2
   98ba0:	d805      	bhi.n	98bae <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   98ba2:	4a0b      	ldr	r2, [pc, #44]	; (98bd0 <Reset_Handler+0x98>)
   98ba4:	4b0a      	ldr	r3, [pc, #40]	; (98bd0 <Reset_Handler+0x98>)
   98ba6:	689b      	ldr	r3, [r3, #8]
   98ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   98bac:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   98bae:	4b0a      	ldr	r3, [pc, #40]	; (98bd8 <Reset_Handler+0xa0>)
   98bb0:	4798      	blx	r3

	/* Branch to main function */
	main();
   98bb2:	4b0a      	ldr	r3, [pc, #40]	; (98bdc <Reset_Handler+0xa4>)
   98bb4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   98bb6:	e7fe      	b.n	98bb6 <Reset_Handler+0x7e>
   98bb8:	000a59a0 	.word	0x000a59a0
   98bbc:	20070000 	.word	0x20070000
   98bc0:	200714dc 	.word	0x200714dc
   98bc4:	200714dc 	.word	0x200714dc
   98bc8:	20073354 	.word	0x20073354
   98bcc:	00080000 	.word	0x00080000
   98bd0:	e000ed00 	.word	0xe000ed00
   98bd4:	200fffff 	.word	0x200fffff
   98bd8:	000a3869 	.word	0x000a3869
   98bdc:	0008a4c1 	.word	0x0008a4c1

00098be0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   98be0:	b480      	push	{r7}
   98be2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   98be4:	4b57      	ldr	r3, [pc, #348]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   98be8:	f003 0303 	and.w	r3, r3, #3
   98bec:	2b03      	cmp	r3, #3
   98bee:	f200 808a 	bhi.w	98d06 <SystemCoreClockUpdate+0x126>
   98bf2:	a201      	add	r2, pc, #4	; (adr r2, 98bf8 <SystemCoreClockUpdate+0x18>)
   98bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98bf8:	00098c09 	.word	0x00098c09
   98bfc:	00098c29 	.word	0x00098c29
   98c00:	00098c79 	.word	0x00098c79
   98c04:	00098c79 	.word	0x00098c79
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   98c08:	4b4f      	ldr	r3, [pc, #316]	; (98d48 <SystemCoreClockUpdate+0x168>)
   98c0a:	695b      	ldr	r3, [r3, #20]
   98c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   98c10:	2b00      	cmp	r3, #0
   98c12:	d004      	beq.n	98c1e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   98c14:	4b4d      	ldr	r3, [pc, #308]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   98c1a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   98c1c:	e073      	b.n	98d06 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   98c1e:	4b4b      	ldr	r3, [pc, #300]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c20:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   98c24:	601a      	str	r2, [r3, #0]
		}
		break;
   98c26:	e06e      	b.n	98d06 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   98c28:	4b46      	ldr	r3, [pc, #280]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98c2a:	6a1b      	ldr	r3, [r3, #32]
   98c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   98c30:	2b00      	cmp	r3, #0
   98c32:	d003      	beq.n	98c3c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   98c34:	4b45      	ldr	r3, [pc, #276]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c36:	4a46      	ldr	r2, [pc, #280]	; (98d50 <SystemCoreClockUpdate+0x170>)
   98c38:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   98c3a:	e064      	b.n	98d06 <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   98c3c:	4b43      	ldr	r3, [pc, #268]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c3e:	4a45      	ldr	r2, [pc, #276]	; (98d54 <SystemCoreClockUpdate+0x174>)
   98c40:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   98c42:	4b40      	ldr	r3, [pc, #256]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98c44:	6a1b      	ldr	r3, [r3, #32]
   98c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
   98c4a:	2b10      	cmp	r3, #16
   98c4c:	d004      	beq.n	98c58 <SystemCoreClockUpdate+0x78>
   98c4e:	2b20      	cmp	r3, #32
   98c50:	d008      	beq.n	98c64 <SystemCoreClockUpdate+0x84>
   98c52:	2b00      	cmp	r3, #0
   98c54:	d00e      	beq.n	98c74 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   98c56:	e00e      	b.n	98c76 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   98c58:	4b3c      	ldr	r3, [pc, #240]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c5a:	681b      	ldr	r3, [r3, #0]
   98c5c:	005b      	lsls	r3, r3, #1
   98c5e:	4a3b      	ldr	r2, [pc, #236]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c60:	6013      	str	r3, [r2, #0]
				break;
   98c62:	e008      	b.n	98c76 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   98c64:	4b39      	ldr	r3, [pc, #228]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c66:	681a      	ldr	r2, [r3, #0]
   98c68:	4613      	mov	r3, r2
   98c6a:	005b      	lsls	r3, r3, #1
   98c6c:	4413      	add	r3, r2
   98c6e:	4a37      	ldr	r2, [pc, #220]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c70:	6013      	str	r3, [r2, #0]
				break;
   98c72:	e000      	b.n	98c76 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   98c74:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   98c76:	e046      	b.n	98d06 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   98c78:	4b32      	ldr	r3, [pc, #200]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98c7a:	6a1b      	ldr	r3, [r3, #32]
   98c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   98c80:	2b00      	cmp	r3, #0
   98c82:	d003      	beq.n	98c8c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   98c84:	4b31      	ldr	r3, [pc, #196]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c86:	4a32      	ldr	r2, [pc, #200]	; (98d50 <SystemCoreClockUpdate+0x170>)
   98c88:	601a      	str	r2, [r3, #0]
   98c8a:	e01c      	b.n	98cc6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   98c8c:	4b2f      	ldr	r3, [pc, #188]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98c8e:	4a31      	ldr	r2, [pc, #196]	; (98d54 <SystemCoreClockUpdate+0x174>)
   98c90:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   98c92:	4b2c      	ldr	r3, [pc, #176]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98c94:	6a1b      	ldr	r3, [r3, #32]
   98c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
   98c9a:	2b10      	cmp	r3, #16
   98c9c:	d004      	beq.n	98ca8 <SystemCoreClockUpdate+0xc8>
   98c9e:	2b20      	cmp	r3, #32
   98ca0:	d008      	beq.n	98cb4 <SystemCoreClockUpdate+0xd4>
   98ca2:	2b00      	cmp	r3, #0
   98ca4:	d00e      	beq.n	98cc4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   98ca6:	e00e      	b.n	98cc6 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   98ca8:	4b28      	ldr	r3, [pc, #160]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98caa:	681b      	ldr	r3, [r3, #0]
   98cac:	005b      	lsls	r3, r3, #1
   98cae:	4a27      	ldr	r2, [pc, #156]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98cb0:	6013      	str	r3, [r2, #0]
				break;
   98cb2:	e008      	b.n	98cc6 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   98cb4:	4b25      	ldr	r3, [pc, #148]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98cb6:	681a      	ldr	r2, [r3, #0]
   98cb8:	4613      	mov	r3, r2
   98cba:	005b      	lsls	r3, r3, #1
   98cbc:	4413      	add	r3, r2
   98cbe:	4a23      	ldr	r2, [pc, #140]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98cc0:	6013      	str	r3, [r2, #0]
				break;
   98cc2:	e000      	b.n	98cc6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   98cc4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   98cc6:	4b1f      	ldr	r3, [pc, #124]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   98cca:	f003 0303 	and.w	r3, r3, #3
   98cce:	2b02      	cmp	r3, #2
   98cd0:	d115      	bne.n	98cfe <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   98cd2:	4b1c      	ldr	r3, [pc, #112]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   98cd6:	4b20      	ldr	r3, [pc, #128]	; (98d58 <SystemCoreClockUpdate+0x178>)
   98cd8:	4013      	ands	r3, r2
   98cda:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   98cdc:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   98cde:	4a1b      	ldr	r2, [pc, #108]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98ce0:	6812      	ldr	r2, [r2, #0]
   98ce2:	fb02 f303 	mul.w	r3, r2, r3
   98ce6:	4a19      	ldr	r2, [pc, #100]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98ce8:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   98cea:	4b16      	ldr	r3, [pc, #88]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   98cee:	b2db      	uxtb	r3, r3
   98cf0:	4a16      	ldr	r2, [pc, #88]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98cf2:	6812      	ldr	r2, [r2, #0]
   98cf4:	fbb2 f3f3 	udiv	r3, r2, r3
   98cf8:	4a14      	ldr	r2, [pc, #80]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98cfa:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   98cfc:	e002      	b.n	98d04 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   98cfe:	4b13      	ldr	r3, [pc, #76]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98d00:	4a16      	ldr	r2, [pc, #88]	; (98d5c <SystemCoreClockUpdate+0x17c>)
   98d02:	601a      	str	r2, [r3, #0]
		}
		break;
   98d04:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   98d06:	4b0f      	ldr	r3, [pc, #60]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   98d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   98d0e:	2b70      	cmp	r3, #112	; 0x70
   98d10:	d108      	bne.n	98d24 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   98d12:	4b0e      	ldr	r3, [pc, #56]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98d14:	681b      	ldr	r3, [r3, #0]
   98d16:	4a12      	ldr	r2, [pc, #72]	; (98d60 <SystemCoreClockUpdate+0x180>)
   98d18:	fba2 2303 	umull	r2, r3, r2, r3
   98d1c:	085b      	lsrs	r3, r3, #1
   98d1e:	4a0b      	ldr	r2, [pc, #44]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98d20:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   98d22:	e00a      	b.n	98d3a <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   98d24:	4b07      	ldr	r3, [pc, #28]	; (98d44 <SystemCoreClockUpdate+0x164>)
   98d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   98d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
   98d2c:	091b      	lsrs	r3, r3, #4
   98d2e:	4a07      	ldr	r2, [pc, #28]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98d30:	6812      	ldr	r2, [r2, #0]
   98d32:	fa22 f303 	lsr.w	r3, r2, r3
   98d36:	4a05      	ldr	r2, [pc, #20]	; (98d4c <SystemCoreClockUpdate+0x16c>)
   98d38:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   98d3a:	bf00      	nop
   98d3c:	46bd      	mov	sp, r7
   98d3e:	bc80      	pop	{r7}
   98d40:	4770      	bx	lr
   98d42:	bf00      	nop
   98d44:	400e0600 	.word	0x400e0600
   98d48:	400e1a10 	.word	0x400e1a10
   98d4c:	20070a60 	.word	0x20070a60
   98d50:	00b71b00 	.word	0x00b71b00
   98d54:	003d0900 	.word	0x003d0900
   98d58:	07ff0000 	.word	0x07ff0000
   98d5c:	0e4e1c00 	.word	0x0e4e1c00
   98d60:	aaaaaaab 	.word	0xaaaaaaab

00098d64 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   98d64:	b480      	push	{r7}
   98d66:	b083      	sub	sp, #12
   98d68:	af00      	add	r7, sp, #0
   98d6a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   98d6c:	687b      	ldr	r3, [r7, #4]
   98d6e:	4a25      	ldr	r2, [pc, #148]	; (98e04 <system_init_flash+0xa0>)
   98d70:	4293      	cmp	r3, r2
   98d72:	d806      	bhi.n	98d82 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   98d74:	4b24      	ldr	r3, [pc, #144]	; (98e08 <system_init_flash+0xa4>)
   98d76:	2200      	movs	r2, #0
   98d78:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   98d7a:	4b24      	ldr	r3, [pc, #144]	; (98e0c <system_init_flash+0xa8>)
   98d7c:	2200      	movs	r2, #0
   98d7e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98d80:	e03b      	b.n	98dfa <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   98d82:	687b      	ldr	r3, [r7, #4]
   98d84:	4a22      	ldr	r2, [pc, #136]	; (98e10 <system_init_flash+0xac>)
   98d86:	4293      	cmp	r3, r2
   98d88:	d808      	bhi.n	98d9c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   98d8a:	4b1f      	ldr	r3, [pc, #124]	; (98e08 <system_init_flash+0xa4>)
   98d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   98d90:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   98d92:	4b1e      	ldr	r3, [pc, #120]	; (98e0c <system_init_flash+0xa8>)
   98d94:	f44f 7280 	mov.w	r2, #256	; 0x100
   98d98:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98d9a:	e02e      	b.n	98dfa <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   98d9c:	687b      	ldr	r3, [r7, #4]
   98d9e:	4a1d      	ldr	r2, [pc, #116]	; (98e14 <system_init_flash+0xb0>)
   98da0:	4293      	cmp	r3, r2
   98da2:	d808      	bhi.n	98db6 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   98da4:	4b18      	ldr	r3, [pc, #96]	; (98e08 <system_init_flash+0xa4>)
   98da6:	f44f 7200 	mov.w	r2, #512	; 0x200
   98daa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   98dac:	4b17      	ldr	r3, [pc, #92]	; (98e0c <system_init_flash+0xa8>)
   98dae:	f44f 7200 	mov.w	r2, #512	; 0x200
   98db2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98db4:	e021      	b.n	98dfa <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   98db6:	687b      	ldr	r3, [r7, #4]
   98db8:	4a17      	ldr	r2, [pc, #92]	; (98e18 <system_init_flash+0xb4>)
   98dba:	4293      	cmp	r3, r2
   98dbc:	d808      	bhi.n	98dd0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   98dbe:	4b12      	ldr	r3, [pc, #72]	; (98e08 <system_init_flash+0xa4>)
   98dc0:	f44f 7240 	mov.w	r2, #768	; 0x300
   98dc4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   98dc6:	4b11      	ldr	r3, [pc, #68]	; (98e0c <system_init_flash+0xa8>)
   98dc8:	f44f 7240 	mov.w	r2, #768	; 0x300
   98dcc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98dce:	e014      	b.n	98dfa <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   98dd0:	687b      	ldr	r3, [r7, #4]
   98dd2:	4a12      	ldr	r2, [pc, #72]	; (98e1c <system_init_flash+0xb8>)
   98dd4:	4293      	cmp	r3, r2
   98dd6:	d808      	bhi.n	98dea <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   98dd8:	4b0b      	ldr	r3, [pc, #44]	; (98e08 <system_init_flash+0xa4>)
   98dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   98dde:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   98de0:	4b0a      	ldr	r3, [pc, #40]	; (98e0c <system_init_flash+0xa8>)
   98de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   98de6:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   98de8:	e007      	b.n	98dfa <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   98dea:	4b07      	ldr	r3, [pc, #28]	; (98e08 <system_init_flash+0xa4>)
   98dec:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   98df0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   98df2:	4b06      	ldr	r3, [pc, #24]	; (98e0c <system_init_flash+0xa8>)
   98df4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   98df8:	601a      	str	r2, [r3, #0]
	}
}
   98dfa:	bf00      	nop
   98dfc:	370c      	adds	r7, #12
   98dfe:	46bd      	mov	sp, r7
   98e00:	bc80      	pop	{r7}
   98e02:	4770      	bx	lr
   98e04:	0121eabf 	.word	0x0121eabf
   98e08:	400e0a00 	.word	0x400e0a00
   98e0c:	400e0c00 	.word	0x400e0c00
   98e10:	02faf07f 	.word	0x02faf07f
   98e14:	03d08fff 	.word	0x03d08fff
   98e18:	04c4b3ff 	.word	0x04c4b3ff
   98e1c:	055d4a7f 	.word	0x055d4a7f

00098e20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   98e20:	b480      	push	{r7}
   98e22:	b085      	sub	sp, #20
   98e24:	af00      	add	r7, sp, #0
   98e26:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   98e28:	4b0a      	ldr	r3, [pc, #40]	; (98e54 <_sbrk+0x34>)
   98e2a:	681b      	ldr	r3, [r3, #0]
   98e2c:	2b00      	cmp	r3, #0
   98e2e:	d102      	bne.n	98e36 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   98e30:	4b08      	ldr	r3, [pc, #32]	; (98e54 <_sbrk+0x34>)
   98e32:	4a09      	ldr	r2, [pc, #36]	; (98e58 <_sbrk+0x38>)
   98e34:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   98e36:	4b07      	ldr	r3, [pc, #28]	; (98e54 <_sbrk+0x34>)
   98e38:	681b      	ldr	r3, [r3, #0]
   98e3a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   98e3c:	4b05      	ldr	r3, [pc, #20]	; (98e54 <_sbrk+0x34>)
   98e3e:	681a      	ldr	r2, [r3, #0]
   98e40:	687b      	ldr	r3, [r7, #4]
   98e42:	4413      	add	r3, r2
   98e44:	4a03      	ldr	r2, [pc, #12]	; (98e54 <_sbrk+0x34>)
   98e46:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   98e48:	68fb      	ldr	r3, [r7, #12]
}
   98e4a:	4618      	mov	r0, r3
   98e4c:	3714      	adds	r7, #20
   98e4e:	46bd      	mov	sp, r7
   98e50:	bc80      	pop	{r7}
   98e52:	4770      	bx	lr
   98e54:	2007279c 	.word	0x2007279c
   98e58:	20075358 	.word	0x20075358

00098e5c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   98e5c:	b480      	push	{r7}
   98e5e:	b083      	sub	sp, #12
   98e60:	af00      	add	r7, sp, #0
   98e62:	6078      	str	r0, [r7, #4]
	return -1;
   98e64:	f04f 33ff 	mov.w	r3, #4294967295
}
   98e68:	4618      	mov	r0, r3
   98e6a:	370c      	adds	r7, #12
   98e6c:	46bd      	mov	sp, r7
   98e6e:	bc80      	pop	{r7}
   98e70:	4770      	bx	lr
   98e72:	bf00      	nop

00098e74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   98e74:	b480      	push	{r7}
   98e76:	b083      	sub	sp, #12
   98e78:	af00      	add	r7, sp, #0
   98e7a:	6078      	str	r0, [r7, #4]
   98e7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   98e7e:	683b      	ldr	r3, [r7, #0]
   98e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   98e84:	605a      	str	r2, [r3, #4]

	return 0;
   98e86:	2300      	movs	r3, #0
}
   98e88:	4618      	mov	r0, r3
   98e8a:	370c      	adds	r7, #12
   98e8c:	46bd      	mov	sp, r7
   98e8e:	bc80      	pop	{r7}
   98e90:	4770      	bx	lr
   98e92:	bf00      	nop

00098e94 <_isatty>:

extern int _isatty(int file)
{
   98e94:	b480      	push	{r7}
   98e96:	b083      	sub	sp, #12
   98e98:	af00      	add	r7, sp, #0
   98e9a:	6078      	str	r0, [r7, #4]
	return 1;
   98e9c:	2301      	movs	r3, #1
}
   98e9e:	4618      	mov	r0, r3
   98ea0:	370c      	adds	r7, #12
   98ea2:	46bd      	mov	sp, r7
   98ea4:	bc80      	pop	{r7}
   98ea6:	4770      	bx	lr

00098ea8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   98ea8:	b480      	push	{r7}
   98eaa:	b085      	sub	sp, #20
   98eac:	af00      	add	r7, sp, #0
   98eae:	60f8      	str	r0, [r7, #12]
   98eb0:	60b9      	str	r1, [r7, #8]
   98eb2:	607a      	str	r2, [r7, #4]
	return 0;
   98eb4:	2300      	movs	r3, #0
}
   98eb6:	4618      	mov	r0, r3
   98eb8:	3714      	adds	r7, #20
   98eba:	46bd      	mov	sp, r7
   98ebc:	bc80      	pop	{r7}
   98ebe:	4770      	bx	lr

00098ec0 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   98ec0:	b480      	push	{r7}
   98ec2:	b083      	sub	sp, #12
   98ec4:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   98ec6:	2304      	movs	r3, #4
   98ec8:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   98eca:	4b0b      	ldr	r3, [pc, #44]	; (98ef8 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   98ecc:	7e1b      	ldrb	r3, [r3, #24]
   98ece:	2b00      	cmp	r3, #0
   98ed0:	d002      	beq.n	98ed8 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   98ed2:	2300      	movs	r3, #0
   98ed4:	71fb      	strb	r3, [r7, #7]
   98ed6:	e008      	b.n	98eea <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   98ed8:	4b08      	ldr	r3, [pc, #32]	; (98efc <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   98eda:	7e1b      	ldrb	r3, [r3, #24]
   98edc:	2b00      	cmp	r3, #0
   98ede:	d002      	beq.n	98ee6 <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   98ee0:	2300      	movs	r3, #0
   98ee2:	71fb      	strb	r3, [r7, #7]
   98ee4:	e001      	b.n	98eea <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   98ee6:	2301      	movs	r3, #1
   98ee8:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   98eea:	79fb      	ldrb	r3, [r7, #7]
}
   98eec:	4618      	mov	r0, r3
   98eee:	370c      	adds	r7, #12
   98ef0:	46bd      	mov	sp, r7
   98ef2:	bc80      	pop	{r7}
   98ef4:	4770      	bx	lr
   98ef6:	bf00      	nop
   98ef8:	20072fa4 	.word	0x20072fa4
   98efc:	20072e6c 	.word	0x20072e6c

00098f00 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   98f00:	b480      	push	{r7}
   98f02:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   98f04:	4b05      	ldr	r3, [pc, #20]	; (98f1c <Cl_Console_Read_Message_Ready_Status+0x1c>)
   98f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   98f0a:	2b00      	cmp	r3, #0
   98f0c:	d001      	beq.n	98f12 <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   98f0e:	2300      	movs	r3, #0
   98f10:	e000      	b.n	98f14 <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   98f12:	2301      	movs	r3, #1
	}
	
}
   98f14:	4618      	mov	r0, r3
   98f16:	46bd      	mov	sp, r7
   98f18:	bc80      	pop	{r7}
   98f1a:	4770      	bx	lr
   98f1c:	20072de8 	.word	0x20072de8

00098f20 <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   98f20:	b480      	push	{r7}
   98f22:	b083      	sub	sp, #12
   98f24:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   98f26:	4b54      	ldr	r3, [pc, #336]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f28:	7e1b      	ldrb	r3, [r3, #24]
   98f2a:	2b00      	cmp	r3, #0
   98f2c:	d03c      	beq.n	98fa8 <Cl_Console_Read_Message_Console+0x88>
   98f2e:	4b52      	ldr	r3, [pc, #328]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f30:	7e5b      	ldrb	r3, [r3, #25]
   98f32:	f083 0301 	eor.w	r3, r3, #1
   98f36:	b2db      	uxtb	r3, r3
   98f38:	2b00      	cmp	r3, #0
   98f3a:	d035      	beq.n	98fa8 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   98f3c:	4b4f      	ldr	r3, [pc, #316]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98f3e:	2200      	movs	r2, #0
   98f40:	701a      	strb	r2, [r3, #0]
   98f42:	2300      	movs	r3, #0
   98f44:	71fb      	strb	r3, [r7, #7]
   98f46:	e010      	b.n	98f6a <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   98f48:	4b4c      	ldr	r3, [pc, #304]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98f4a:	781b      	ldrb	r3, [r3, #0]
   98f4c:	4619      	mov	r1, r3
   98f4e:	79fb      	ldrb	r3, [r7, #7]
   98f50:	4a49      	ldr	r2, [pc, #292]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f52:	5cd2      	ldrb	r2, [r2, r3]
   98f54:	4b4a      	ldr	r3, [pc, #296]	; (99080 <Cl_Console_Read_Message_Console+0x160>)
   98f56:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   98f58:	4b48      	ldr	r3, [pc, #288]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98f5a:	781b      	ldrb	r3, [r3, #0]
   98f5c:	3301      	adds	r3, #1
   98f5e:	b2da      	uxtb	r2, r3
   98f60:	4b46      	ldr	r3, [pc, #280]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98f62:	701a      	strb	r2, [r3, #0]
   98f64:	79fb      	ldrb	r3, [r7, #7]
   98f66:	3301      	adds	r3, #1
   98f68:	71fb      	strb	r3, [r7, #7]
   98f6a:	4b43      	ldr	r3, [pc, #268]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f6c:	7d1b      	ldrb	r3, [r3, #20]
   98f6e:	79fa      	ldrb	r2, [r7, #7]
   98f70:	429a      	cmp	r2, r3
   98f72:	d3e9      	bcc.n	98f48 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   98f74:	4b40      	ldr	r3, [pc, #256]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f76:	7f5b      	ldrb	r3, [r3, #29]
   98f78:	f083 0301 	eor.w	r3, r3, #1
   98f7c:	b2db      	uxtb	r3, r3
   98f7e:	2b00      	cmp	r3, #0
   98f80:	d003      	beq.n	98f8a <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   98f82:	4b3f      	ldr	r3, [pc, #252]	; (99080 <Cl_Console_Read_Message_Console+0x160>)
   98f84:	2201      	movs	r2, #1
   98f86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   98f8a:	4b3b      	ldr	r3, [pc, #236]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f8c:	2201      	movs	r2, #1
   98f8e:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   98f90:	4b39      	ldr	r3, [pc, #228]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f92:	2200      	movs	r2, #0
   98f94:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   98f96:	4b38      	ldr	r3, [pc, #224]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f98:	2200      	movs	r2, #0
   98f9a:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   98f9c:	4b36      	ldr	r3, [pc, #216]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98f9e:	2200      	movs	r2, #0
   98fa0:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   98fa2:	4b35      	ldr	r3, [pc, #212]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98fa4:	2201      	movs	r2, #1
   98fa6:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   98fa8:	4b36      	ldr	r3, [pc, #216]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   98faa:	7e1b      	ldrb	r3, [r3, #24]
   98fac:	2b00      	cmp	r3, #0
   98fae:	d05c      	beq.n	9906a <Cl_Console_Read_Message_Console+0x14a>
   98fb0:	4b34      	ldr	r3, [pc, #208]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   98fb2:	7e5b      	ldrb	r3, [r3, #25]
   98fb4:	f083 0301 	eor.w	r3, r3, #1
   98fb8:	b2db      	uxtb	r3, r3
   98fba:	2b00      	cmp	r3, #0
   98fbc:	d055      	beq.n	9906a <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   98fbe:	4b2e      	ldr	r3, [pc, #184]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   98fc0:	7f5b      	ldrb	r3, [r3, #29]
   98fc2:	f083 0301 	eor.w	r3, r3, #1
   98fc6:	b2db      	uxtb	r3, r3
   98fc8:	2b00      	cmp	r3, #0
   98fca:	d002      	beq.n	98fd2 <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   98fcc:	4b2b      	ldr	r3, [pc, #172]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98fce:	2200      	movs	r2, #0
   98fd0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   98fd2:	2300      	movs	r3, #0
   98fd4:	71fb      	strb	r3, [r7, #7]
   98fd6:	e010      	b.n	98ffa <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   98fd8:	4b28      	ldr	r3, [pc, #160]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98fda:	781b      	ldrb	r3, [r3, #0]
   98fdc:	4619      	mov	r1, r3
   98fde:	79fb      	ldrb	r3, [r7, #7]
   98fe0:	4a28      	ldr	r2, [pc, #160]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   98fe2:	5cd2      	ldrb	r2, [r2, r3]
   98fe4:	4b26      	ldr	r3, [pc, #152]	; (99080 <Cl_Console_Read_Message_Console+0x160>)
   98fe6:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   98fe8:	4b24      	ldr	r3, [pc, #144]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98fea:	781b      	ldrb	r3, [r3, #0]
   98fec:	3301      	adds	r3, #1
   98fee:	b2da      	uxtb	r2, r3
   98ff0:	4b22      	ldr	r3, [pc, #136]	; (9907c <Cl_Console_Read_Message_Console+0x15c>)
   98ff2:	701a      	strb	r2, [r3, #0]
   98ff4:	79fb      	ldrb	r3, [r7, #7]
   98ff6:	3301      	adds	r3, #1
   98ff8:	71fb      	strb	r3, [r7, #7]
   98ffa:	4b22      	ldr	r3, [pc, #136]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   98ffc:	7d1b      	ldrb	r3, [r3, #20]
   98ffe:	79fa      	ldrb	r2, [r7, #7]
   99000:	429a      	cmp	r2, r3
   99002:	d3e9      	bcc.n	98fd8 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   99004:	4b1f      	ldr	r3, [pc, #124]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   99006:	7f5b      	ldrb	r3, [r3, #29]
   99008:	f083 0301 	eor.w	r3, r3, #1
   9900c:	b2db      	uxtb	r3, r3
   9900e:	2b00      	cmp	r3, #0
   99010:	d003      	beq.n	9901a <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   99012:	4b1b      	ldr	r3, [pc, #108]	; (99080 <Cl_Console_Read_Message_Console+0x160>)
   99014:	2201      	movs	r2, #1
   99016:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   9901a:	4b1a      	ldr	r3, [pc, #104]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   9901c:	2201      	movs	r2, #1
   9901e:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   99020:	4b18      	ldr	r3, [pc, #96]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   99022:	2200      	movs	r2, #0
   99024:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   99026:	4b17      	ldr	r3, [pc, #92]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   99028:	2200      	movs	r2, #0
   9902a:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   9902c:	4b15      	ldr	r3, [pc, #84]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   9902e:	2200      	movs	r2, #0
   99030:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   99032:	4b14      	ldr	r3, [pc, #80]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   99034:	2201      	movs	r2, #1
   99036:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   99038:	4b0f      	ldr	r3, [pc, #60]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   9903a:	7f5b      	ldrb	r3, [r3, #29]
   9903c:	2b00      	cmp	r3, #0
   9903e:	d014      	beq.n	9906a <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   99040:	4b0d      	ldr	r3, [pc, #52]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   99042:	2201      	movs	r2, #1
   99044:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   99046:	4b0c      	ldr	r3, [pc, #48]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   99048:	2200      	movs	r2, #0
   9904a:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   9904c:	4b0a      	ldr	r3, [pc, #40]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   9904e:	2200      	movs	r2, #0
   99050:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   99052:	4b09      	ldr	r3, [pc, #36]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   99054:	2200      	movs	r2, #0
   99056:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   99058:	4b0a      	ldr	r3, [pc, #40]	; (99084 <Cl_Console_Read_Message_Console+0x164>)
   9905a:	2200      	movs	r2, #0
   9905c:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9905e:	4b06      	ldr	r3, [pc, #24]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   99060:	2200      	movs	r2, #0
   99062:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   99064:	4b04      	ldr	r3, [pc, #16]	; (99078 <Cl_Console_Read_Message_Console+0x158>)
   99066:	2201      	movs	r2, #1
   99068:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   9906a:	2300      	movs	r3, #0
}
   9906c:	4618      	mov	r0, r3
   9906e:	370c      	adds	r7, #12
   99070:	46bd      	mov	sp, r7
   99072:	bc80      	pop	{r7}
   99074:	4770      	bx	lr
   99076:	bf00      	nop
   99078:	20072fa4 	.word	0x20072fa4
   9907c:	200727a6 	.word	0x200727a6
   99080:	20072de8 	.word	0x20072de8
   99084:	20072e6c 	.word	0x20072e6c

00099088 <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   99088:	b580      	push	{r7, lr}
   9908a:	b084      	sub	sp, #16
   9908c:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9908e:	2300      	movs	r3, #0
   99090:	70fb      	strb	r3, [r7, #3]
   99092:	2300      	movs	r3, #0
   99094:	60bb      	str	r3, [r7, #8]
   99096:	2300      	movs	r3, #0
   99098:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9909a:	4b46      	ldr	r3, [pc, #280]	; (991b4 <Cl_Mac_Create_ConsoleEvent+0x12c>)
   9909c:	4a46      	ldr	r2, [pc, #280]	; (991b8 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9909e:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   990a0:	4b45      	ldr	r3, [pc, #276]	; (991b8 <Cl_Mac_Create_ConsoleEvent+0x130>)
   990a2:	781a      	ldrb	r2, [r3, #0]
   990a4:	4b45      	ldr	r3, [pc, #276]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   990a6:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   990a8:	4b43      	ldr	r3, [pc, #268]	; (991b8 <Cl_Mac_Create_ConsoleEvent+0x130>)
   990aa:	785a      	ldrb	r2, [r3, #1]
   990ac:	4b43      	ldr	r3, [pc, #268]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   990ae:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   990b0:	4b43      	ldr	r3, [pc, #268]	; (991c0 <Cl_Mac_Create_ConsoleEvent+0x138>)
   990b2:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   990b4:	4b43      	ldr	r3, [pc, #268]	; (991c4 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   990b6:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   990b8:	2300      	movs	r3, #0
   990ba:	73fb      	strb	r3, [r7, #15]
   990bc:	e00c      	b.n	990d8 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   990be:	687b      	ldr	r3, [r7, #4]
   990c0:	781a      	ldrb	r2, [r3, #0]
   990c2:	68bb      	ldr	r3, [r7, #8]
   990c4:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   990c6:	68bb      	ldr	r3, [r7, #8]
   990c8:	3301      	adds	r3, #1
   990ca:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   990cc:	687b      	ldr	r3, [r7, #4]
   990ce:	3301      	adds	r3, #1
   990d0:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   990d2:	7bfb      	ldrb	r3, [r7, #15]
   990d4:	3301      	adds	r3, #1
   990d6:	73fb      	strb	r3, [r7, #15]
   990d8:	4b38      	ldr	r3, [pc, #224]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   990da:	78db      	ldrb	r3, [r3, #3]
   990dc:	7bfa      	ldrb	r2, [r7, #15]
   990de:	429a      	cmp	r2, r3
   990e0:	d3ed      	bcc.n	990be <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   990e2:	4b36      	ldr	r3, [pc, #216]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   990e4:	789b      	ldrb	r3, [r3, #2]
   990e6:	2b04      	cmp	r3, #4
   990e8:	d00f      	beq.n	9910a <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   990ea:	4b37      	ldr	r3, [pc, #220]	; (991c8 <Cl_Mac_Create_ConsoleEvent+0x140>)
   990ec:	4798      	blx	r3
				test_counter++;
   990ee:	4b37      	ldr	r3, [pc, #220]	; (991cc <Cl_Mac_Create_ConsoleEvent+0x144>)
   990f0:	881b      	ldrh	r3, [r3, #0]
   990f2:	3301      	adds	r3, #1
   990f4:	b29a      	uxth	r2, r3
   990f6:	4b35      	ldr	r3, [pc, #212]	; (991cc <Cl_Mac_Create_ConsoleEvent+0x144>)
   990f8:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   990fa:	4b34      	ldr	r3, [pc, #208]	; (991cc <Cl_Mac_Create_ConsoleEvent+0x144>)
   990fc:	881b      	ldrh	r3, [r3, #0]
   990fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   99102:	d302      	bcc.n	9910a <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   99104:	4b31      	ldr	r3, [pc, #196]	; (991cc <Cl_Mac_Create_ConsoleEvent+0x144>)
   99106:	2200      	movs	r2, #0
   99108:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9910a:	4b2c      	ldr	r3, [pc, #176]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   9910c:	789b      	ldrb	r3, [r3, #2]
   9910e:	2b17      	cmp	r3, #23
   99110:	d103      	bne.n	9911a <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   99112:	482a      	ldr	r0, [pc, #168]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   99114:	4b2e      	ldr	r3, [pc, #184]	; (991d0 <Cl_Mac_Create_ConsoleEvent+0x148>)
   99116:	4798      	blx	r3
   99118:	e046      	b.n	991a8 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   9911a:	4b28      	ldr	r3, [pc, #160]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   9911c:	2201      	movs	r2, #1
   9911e:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   99120:	4b25      	ldr	r3, [pc, #148]	; (991b8 <Cl_Mac_Create_ConsoleEvent+0x130>)
   99122:	2200      	movs	r2, #0
   99124:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   99128:	4b24      	ldr	r3, [pc, #144]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   9912a:	789b      	ldrb	r3, [r3, #2]
   9912c:	1cba      	adds	r2, r7, #2
   9912e:	4611      	mov	r1, r2
   99130:	4618      	mov	r0, r3
   99132:	4b28      	ldr	r3, [pc, #160]	; (991d4 <Cl_Mac_Create_ConsoleEvent+0x14c>)
   99134:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   99136:	78ba      	ldrb	r2, [r7, #2]
   99138:	4b27      	ldr	r3, [pc, #156]	; (991d8 <Cl_Mac_Create_ConsoleEvent+0x150>)
   9913a:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   9913c:	4b27      	ldr	r3, [pc, #156]	; (991dc <Cl_Mac_Create_ConsoleEvent+0x154>)
   9913e:	2201      	movs	r2, #1
   99140:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   99142:	4b27      	ldr	r3, [pc, #156]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99144:	781b      	ldrb	r3, [r3, #0]
   99146:	2b0a      	cmp	r3, #10
   99148:	d82e      	bhi.n	991a8 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   9914a:	4b25      	ldr	r3, [pc, #148]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9914c:	781b      	ldrb	r3, [r3, #0]
   9914e:	4619      	mov	r1, r3
   99150:	78ba      	ldrb	r2, [r7, #2]
   99152:	4b23      	ldr	r3, [pc, #140]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99154:	440b      	add	r3, r1
   99156:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   99158:	4b21      	ldr	r3, [pc, #132]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9915a:	2201      	movs	r2, #1
   9915c:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9915e:	4b20      	ldr	r3, [pc, #128]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99160:	781b      	ldrb	r3, [r3, #0]
   99162:	3301      	adds	r3, #1
   99164:	b2da      	uxtb	r2, r3
   99166:	4b1e      	ldr	r3, [pc, #120]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99168:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9916a:	4b15      	ldr	r3, [pc, #84]	; (991c0 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9916c:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   9916e:	4b1c      	ldr	r3, [pc, #112]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99170:	781b      	ldrb	r3, [r3, #0]
   99172:	3301      	adds	r3, #1
   99174:	00db      	lsls	r3, r3, #3
   99176:	4a1a      	ldr	r2, [pc, #104]	; (991e0 <Cl_Mac_Create_ConsoleEvent+0x158>)
   99178:	4413      	add	r3, r2
   9917a:	3304      	adds	r3, #4
   9917c:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9917e:	2300      	movs	r3, #0
   99180:	73fb      	strb	r3, [r7, #15]
   99182:	e00c      	b.n	9919e <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   99184:	687b      	ldr	r3, [r7, #4]
   99186:	781a      	ldrb	r2, [r3, #0]
   99188:	68bb      	ldr	r3, [r7, #8]
   9918a:	701a      	strb	r2, [r3, #0]
					dataptr++;
   9918c:	68bb      	ldr	r3, [r7, #8]
   9918e:	3301      	adds	r3, #1
   99190:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   99192:	687b      	ldr	r3, [r7, #4]
   99194:	3301      	adds	r3, #1
   99196:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   99198:	7bfb      	ldrb	r3, [r7, #15]
   9919a:	3301      	adds	r3, #1
   9919c:	73fb      	strb	r3, [r7, #15]
   9919e:	4b07      	ldr	r3, [pc, #28]	; (991bc <Cl_Mac_Create_ConsoleEvent+0x134>)
   991a0:	78db      	ldrb	r3, [r3, #3]
   991a2:	7bfa      	ldrb	r2, [r7, #15]
   991a4:	429a      	cmp	r2, r3
   991a6:	d3ed      	bcc.n	99184 <Cl_Mac_Create_ConsoleEvent+0xfc>
			}
	#endif
			 		
	}
		
		return CL_OK;
   991a8:	2300      	movs	r3, #0
}
   991aa:	4618      	mov	r0, r3
   991ac:	3710      	adds	r7, #16
   991ae:	46bd      	mov	sp, r7
   991b0:	bd80      	pop	{r7, pc}
   991b2:	bf00      	nop
   991b4:	200727a8 	.word	0x200727a8
   991b8:	20072de8 	.word	0x20072de8
   991bc:	20072f88 	.word	0x20072f88
   991c0:	20072dea 	.word	0x20072dea
   991c4:	20072f8c 	.word	0x20072f8c
   991c8:	000991e5 	.word	0x000991e5
   991cc:	200727a2 	.word	0x200727a2
   991d0:	0008e9e1 	.word	0x0008e9e1
   991d4:	000993bd 	.word	0x000993bd
   991d8:	20072172 	.word	0x20072172
   991dc:	20072174 	.word	0x20072174
   991e0:	20072fc4 	.word	0x20072fc4

000991e4 <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   991e4:	b580      	push	{r7, lr}
   991e6:	b082      	sub	sp, #8
   991e8:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   991ea:	2001      	movs	r0, #1
   991ec:	4b19      	ldr	r3, [pc, #100]	; (99254 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   991ee:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   991f0:	4b19      	ldr	r3, [pc, #100]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   991f2:	22cc      	movs	r2, #204	; 0xcc
   991f4:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   991f6:	4b18      	ldr	r3, [pc, #96]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   991f8:	22dd      	movs	r2, #221	; 0xdd
   991fa:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   991fc:	4b16      	ldr	r3, [pc, #88]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   991fe:	2204      	movs	r2, #4
   99200:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   99202:	4b15      	ldr	r3, [pc, #84]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   99204:	2201      	movs	r2, #1
   99206:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   99208:	4b14      	ldr	r3, [pc, #80]	; (9925c <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9920a:	789a      	ldrb	r2, [r3, #2]
   9920c:	4b12      	ldr	r3, [pc, #72]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9920e:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   99210:	4b11      	ldr	r3, [pc, #68]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   99212:	22ee      	movs	r2, #238	; 0xee
   99214:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   99216:	4b10      	ldr	r3, [pc, #64]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   99218:	22bb      	movs	r2, #187	; 0xbb
   9921a:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   9921c:	2300      	movs	r3, #0
   9921e:	71fb      	strb	r3, [r7, #7]
   99220:	e00f      	b.n	99242 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   99222:	4b0f      	ldr	r3, [pc, #60]	; (99260 <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   99224:	2201      	movs	r2, #1
   99226:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   99228:	79fb      	ldrb	r3, [r7, #7]
   9922a:	4a0b      	ldr	r2, [pc, #44]	; (99258 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9922c:	5cd3      	ldrb	r3, [r2, r3]
   9922e:	4619      	mov	r1, r3
   99230:	480c      	ldr	r0, [pc, #48]	; (99264 <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   99232:	4b0d      	ldr	r3, [pc, #52]	; (99268 <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   99234:	4798      	blx	r3
   99236:	4603      	mov	r3, r0
   99238:	2b00      	cmp	r3, #0
   9923a:	d102      	bne.n	99242 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   9923c:	79fb      	ldrb	r3, [r7, #7]
   9923e:	3301      	adds	r3, #1
   99240:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   99242:	79fb      	ldrb	r3, [r7, #7]
   99244:	2b06      	cmp	r3, #6
   99246:	d9ec      	bls.n	99222 <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   99248:	2300      	movs	r3, #0
}
   9924a:	4618      	mov	r0, r3
   9924c:	3708      	adds	r7, #8
   9924e:	46bd      	mov	sp, r7
   99250:	bd80      	pop	{r7, pc}
   99252:	bf00      	nop
   99254:	000918fd 	.word	0x000918fd
   99258:	20072e8c 	.word	0x20072e8c
   9925c:	20072f88 	.word	0x20072f88
   99260:	200727a5 	.word	0x200727a5
   99264:	400e0800 	.word	0x400e0800
   99268:	00098841 	.word	0x00098841

0009926c <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   9926c:	b580      	push	{r7, lr}
   9926e:	b086      	sub	sp, #24
   99270:	af00      	add	r7, sp, #0
   99272:	4603      	mov	r3, r0
   99274:	6039      	str	r1, [r7, #0]
   99276:	71fb      	strb	r3, [r7, #7]
   99278:	4613      	mov	r3, r2
   9927a:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   9927c:	2300      	movs	r3, #0
   9927e:	75fb      	strb	r3, [r7, #23]
   99280:	2304      	movs	r3, #4
   99282:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   99284:	2300      	movs	r3, #0
   99286:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   99288:	2300      	movs	r3, #0
   9928a:	613b      	str	r3, [r7, #16]
   9928c:	2300      	movs	r3, #0
   9928e:	60fb      	str	r3, [r7, #12]
		}
		
		
	}
	
	cur_command = command;
   99290:	4a40      	ldr	r2, [pc, #256]	; (99394 <Cl_SendDatatoconsole+0x128>)
   99292:	79fb      	ldrb	r3, [r7, #7]
   99294:	7013      	strb	r3, [r2, #0]
	cur_data = data;
   99296:	683b      	ldr	r3, [r7, #0]
   99298:	b2da      	uxtb	r2, r3
   9929a:	4b3f      	ldr	r3, [pc, #252]	; (99398 <Cl_SendDatatoconsole+0x12c>)
   9929c:	701a      	strb	r2, [r3, #0]
	cur_datasize = datasize;
   9929e:	4a3f      	ldr	r2, [pc, #252]	; (9939c <Cl_SendDatatoconsole+0x130>)
   992a0:	79bb      	ldrb	r3, [r7, #6]
   992a2:	7013      	strb	r3, [r2, #0]
	
	
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   992a4:	79fb      	ldrb	r3, [r7, #7]
   992a6:	2b36      	cmp	r3, #54	; 0x36
   992a8:	d102      	bne.n	992b0 <Cl_SendDatatoconsole+0x44>
	{
		syncdone = true;
   992aa:	4b3d      	ldr	r3, [pc, #244]	; (993a0 <Cl_SendDatatoconsole+0x134>)
   992ac:	2201      	movs	r2, #1
   992ae:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   992b0:	79bb      	ldrb	r3, [r7, #6]
   992b2:	2b00      	cmp	r3, #0
   992b4:	d004      	beq.n	992c0 <Cl_SendDatatoconsole+0x54>
	{
		if(data != NULL)
   992b6:	683b      	ldr	r3, [r7, #0]
   992b8:	2b00      	cmp	r3, #0
   992ba:	d001      	beq.n	992c0 <Cl_SendDatatoconsole+0x54>
		{
			dataptr = data;	
   992bc:	683b      	ldr	r3, [r7, #0]
   992be:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   992c0:	79bb      	ldrb	r3, [r7, #6]
   992c2:	3306      	adds	r3, #6
   992c4:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   992c6:	4b37      	ldr	r3, [pc, #220]	; (993a4 <Cl_SendDatatoconsole+0x138>)
   992c8:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   992ca:	4b37      	ldr	r3, [pc, #220]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   992cc:	22cc      	movs	r2, #204	; 0xcc
   992ce:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   992d0:	4b35      	ldr	r3, [pc, #212]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   992d2:	22dd      	movs	r2, #221	; 0xdd
   992d4:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   992d6:	4a34      	ldr	r2, [pc, #208]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   992d8:	79fb      	ldrb	r3, [r7, #7]
   992da:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   992dc:	4a32      	ldr	r2, [pc, #200]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   992de:	79bb      	ldrb	r3, [r7, #6]
   992e0:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   992e2:	2300      	movs	r3, #0
   992e4:	75fb      	strb	r3, [r7, #23]
   992e6:	e00c      	b.n	99302 <Cl_SendDatatoconsole+0x96>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   992e8:	7dbb      	ldrb	r3, [r7, #22]
   992ea:	7dfa      	ldrb	r2, [r7, #23]
   992ec:	6839      	ldr	r1, [r7, #0]
   992ee:	440a      	add	r2, r1
   992f0:	7811      	ldrb	r1, [r2, #0]
   992f2:	4a2d      	ldr	r2, [pc, #180]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   992f4:	54d1      	strb	r1, [r2, r3]
		temp++;
   992f6:	7dbb      	ldrb	r3, [r7, #22]
   992f8:	3301      	adds	r3, #1
   992fa:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   992fc:	7dfb      	ldrb	r3, [r7, #23]
   992fe:	3301      	adds	r3, #1
   99300:	75fb      	strb	r3, [r7, #23]
   99302:	7dfa      	ldrb	r2, [r7, #23]
   99304:	79bb      	ldrb	r3, [r7, #6]
   99306:	429a      	cmp	r2, r3
   99308:	d3ee      	bcc.n	992e8 <Cl_SendDatatoconsole+0x7c>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9930a:	7dbb      	ldrb	r3, [r7, #22]
   9930c:	1c5a      	adds	r2, r3, #1
   9930e:	75ba      	strb	r2, [r7, #22]
   99310:	461a      	mov	r2, r3
   99312:	4b25      	ldr	r3, [pc, #148]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   99314:	21ee      	movs	r1, #238	; 0xee
   99316:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   99318:	7dbb      	ldrb	r3, [r7, #22]
   9931a:	1c5a      	adds	r2, r3, #1
   9931c:	75ba      	strb	r2, [r7, #22]
   9931e:	461a      	mov	r2, r3
   99320:	4b21      	ldr	r3, [pc, #132]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   99322:	21bb      	movs	r1, #187	; 0xbb
   99324:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   99326:	4b1e      	ldr	r3, [pc, #120]	; (993a0 <Cl_SendDatatoconsole+0x134>)
   99328:	781b      	ldrb	r3, [r3, #0]
   9932a:	2b00      	cmp	r3, #0
   9932c:	d013      	beq.n	99356 <Cl_SendDatatoconsole+0xea>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9932e:	4b1f      	ldr	r3, [pc, #124]	; (993ac <Cl_SendDatatoconsole+0x140>)
   99330:	22aa      	movs	r2, #170	; 0xaa
   99332:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   99334:	2300      	movs	r3, #0
   99336:	75fb      	strb	r3, [r7, #23]
   99338:	e009      	b.n	9934e <Cl_SendDatatoconsole+0xe2>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9933a:	7dfb      	ldrb	r3, [r7, #23]
   9933c:	3301      	adds	r3, #1
   9933e:	7dfa      	ldrb	r2, [r7, #23]
   99340:	4919      	ldr	r1, [pc, #100]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   99342:	5c89      	ldrb	r1, [r1, r2]
   99344:	4a19      	ldr	r2, [pc, #100]	; (993ac <Cl_SendDatatoconsole+0x140>)
   99346:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   99348:	7dfb      	ldrb	r3, [r7, #23]
   9934a:	3301      	adds	r3, #1
   9934c:	75fb      	strb	r3, [r7, #23]
   9934e:	7dfa      	ldrb	r2, [r7, #23]
   99350:	7d7b      	ldrb	r3, [r7, #21]
   99352:	429a      	cmp	r2, r3
   99354:	d3f1      	bcc.n	9933a <Cl_SendDatatoconsole+0xce>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   99356:	2300      	movs	r3, #0
   99358:	75fb      	strb	r3, [r7, #23]
   9935a:	e00e      	b.n	9937a <Cl_SendDatatoconsole+0x10e>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   9935c:	4b14      	ldr	r3, [pc, #80]	; (993b0 <Cl_SendDatatoconsole+0x144>)
   9935e:	2201      	movs	r2, #1
   99360:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   99362:	7dfb      	ldrb	r3, [r7, #23]
   99364:	4a10      	ldr	r2, [pc, #64]	; (993a8 <Cl_SendDatatoconsole+0x13c>)
   99366:	5cd3      	ldrb	r3, [r2, r3]
   99368:	4618      	mov	r0, r3
   9936a:	4b12      	ldr	r3, [pc, #72]	; (993b4 <Cl_SendDatatoconsole+0x148>)
   9936c:	4798      	blx	r3
   9936e:	4603      	mov	r3, r0
   99370:	2b00      	cmp	r3, #0
   99372:	d102      	bne.n	9937a <Cl_SendDatatoconsole+0x10e>
	
		{
			tempcount++;
   99374:	7dfb      	ldrb	r3, [r7, #23]
   99376:	3301      	adds	r3, #1
   99378:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9937a:	7dfa      	ldrb	r2, [r7, #23]
   9937c:	7d7b      	ldrb	r3, [r7, #21]
   9937e:	429a      	cmp	r2, r3
   99380:	d3ec      	bcc.n	9935c <Cl_SendDatatoconsole+0xf0>
		//	printf("%s",Cl_ConsoleTxMsg);
		//printf("\n");
		
	}
	
ackCommand = command;	
   99382:	4a0d      	ldr	r2, [pc, #52]	; (993b8 <Cl_SendDatatoconsole+0x14c>)
   99384:	79fb      	ldrb	r3, [r7, #7]
   99386:	7013      	strb	r3, [r2, #0]

//	printf("\n");
	return CL_OK;
   99388:	2300      	movs	r3, #0
}
   9938a:	4618      	mov	r0, r3
   9938c:	3718      	adds	r7, #24
   9938e:	46bd      	mov	sp, r7
   99390:	bd80      	pop	{r7, pc}
   99392:	bf00      	nop
   99394:	20073349 	.word	0x20073349
   99398:	2007334a 	.word	0x2007334a
   9939c:	20073348 	.word	0x20073348
   993a0:	200727a0 	.word	0x200727a0
   993a4:	20072e90 	.word	0x20072e90
   993a8:	20072e8c 	.word	0x20072e8c
   993ac:	20073078 	.word	0x20073078
   993b0:	200727a5 	.word	0x200727a5
   993b4:	00097829 	.word	0x00097829
   993b8:	2007334b 	.word	0x2007334b

000993bc <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   993bc:	b480      	push	{r7}
   993be:	b083      	sub	sp, #12
   993c0:	af00      	add	r7, sp, #0
   993c2:	4603      	mov	r3, r0
   993c4:	6039      	str	r1, [r7, #0]
   993c6:	71fb      	strb	r3, [r7, #7]

	switch(command)
   993c8:	79fb      	ldrb	r3, [r7, #7]
   993ca:	3b03      	subs	r3, #3
   993cc:	2b32      	cmp	r3, #50	; 0x32
   993ce:	f200 811d 	bhi.w	9960c <Cl_Console_ConvertConsoleEvent_toMacEvent+0x250>
   993d2:	a201      	add	r2, pc, #4	; (adr r2, 993d8 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   993d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   993d8:	000994a5 	.word	0x000994a5
   993dc:	000994b5 	.word	0x000994b5
   993e0:	000994bd 	.word	0x000994bd
   993e4:	0009960d 	.word	0x0009960d
   993e8:	00099585 	.word	0x00099585
   993ec:	00099545 	.word	0x00099545
   993f0:	000994f5 	.word	0x000994f5
   993f4:	000994fd 	.word	0x000994fd
   993f8:	000994d5 	.word	0x000994d5
   993fc:	000994dd 	.word	0x000994dd
   99400:	000994e5 	.word	0x000994e5
   99404:	00099505 	.word	0x00099505
   99408:	00099515 	.word	0x00099515
   9940c:	00099525 	.word	0x00099525
   99410:	00099555 	.word	0x00099555
   99414:	0009955d 	.word	0x0009955d
   99418:	00099565 	.word	0x00099565
   9941c:	0009956d 	.word	0x0009956d
   99420:	000994ad 	.word	0x000994ad
   99424:	0009960d 	.word	0x0009960d
   99428:	0009960d 	.word	0x0009960d
   9942c:	000994ed 	.word	0x000994ed
   99430:	0009950d 	.word	0x0009950d
   99434:	0009958d 	.word	0x0009958d
   99438:	00099595 	.word	0x00099595
   9943c:	0009959d 	.word	0x0009959d
   99440:	000995a5 	.word	0x000995a5
   99444:	0009954d 	.word	0x0009954d
   99448:	000995ad 	.word	0x000995ad
   9944c:	0009951d 	.word	0x0009951d
   99450:	000995b5 	.word	0x000995b5
   99454:	000995bd 	.word	0x000995bd
   99458:	000995c5 	.word	0x000995c5
   9945c:	000995cd 	.word	0x000995cd
   99460:	000995dd 	.word	0x000995dd
   99464:	000995e5 	.word	0x000995e5
   99468:	00099575 	.word	0x00099575
   9946c:	0009957d 	.word	0x0009957d
   99470:	000995ed 	.word	0x000995ed
   99474:	000995f5 	.word	0x000995f5
   99478:	000995d5 	.word	0x000995d5
   9947c:	000994c5 	.word	0x000994c5
   99480:	0009960d 	.word	0x0009960d
   99484:	0009960d 	.word	0x0009960d
   99488:	000994cd 	.word	0x000994cd
   9948c:	0009960d 	.word	0x0009960d
   99490:	0009952d 	.word	0x0009952d
   99494:	00099535 	.word	0x00099535
   99498:	0009953d 	.word	0x0009953d
   9949c:	000995fd 	.word	0x000995fd
   994a0:	00099605 	.word	0x00099605
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   994a4:	683b      	ldr	r3, [r7, #0]
   994a6:	2201      	movs	r2, #1
   994a8:	701a      	strb	r2, [r3, #0]
		break;
   994aa:	e0b0      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   994ac:	683b      	ldr	r3, [r7, #0]
   994ae:	2229      	movs	r2, #41	; 0x29
   994b0:	701a      	strb	r2, [r3, #0]
		break;
   994b2:	e0ac      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   994b4:	683b      	ldr	r3, [r7, #0]
   994b6:	2202      	movs	r2, #2
   994b8:	701a      	strb	r2, [r3, #0]
		break;
   994ba:	e0a8      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   994bc:	683b      	ldr	r3, [r7, #0]
   994be:	2207      	movs	r2, #7
   994c0:	701a      	strb	r2, [r3, #0]
		break;
   994c2:	e0a4      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   994c4:	683b      	ldr	r3, [r7, #0]
   994c6:	223f      	movs	r2, #63	; 0x3f
   994c8:	701a      	strb	r2, [r3, #0]
		break;
   994ca:	e0a0      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   994cc:	683b      	ldr	r3, [r7, #0]
   994ce:	2240      	movs	r2, #64	; 0x40
   994d0:	701a      	strb	r2, [r3, #0]
		break;
   994d2:	e09c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   994d4:	683b      	ldr	r3, [r7, #0]
   994d6:	220a      	movs	r2, #10
   994d8:	701a      	strb	r2, [r3, #0]
		break;
   994da:	e098      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   994dc:	683b      	ldr	r3, [r7, #0]
   994de:	220b      	movs	r2, #11
   994e0:	701a      	strb	r2, [r3, #0]
		break;
   994e2:	e094      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   994e4:	683b      	ldr	r3, [r7, #0]
   994e6:	220c      	movs	r2, #12
   994e8:	701a      	strb	r2, [r3, #0]
		break;
   994ea:	e090      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   994ec:	683b      	ldr	r3, [r7, #0]
   994ee:	2211      	movs	r2, #17
   994f0:	701a      	strb	r2, [r3, #0]
		break;
   994f2:	e08c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   994f4:	683b      	ldr	r3, [r7, #0]
   994f6:	220d      	movs	r2, #13
   994f8:	701a      	strb	r2, [r3, #0]
		break;
   994fa:	e088      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   994fc:	683b      	ldr	r3, [r7, #0]
   994fe:	220e      	movs	r2, #14
   99500:	701a      	strb	r2, [r3, #0]
		break;
   99502:	e084      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   99504:	683b      	ldr	r3, [r7, #0]
   99506:	220f      	movs	r2, #15
   99508:	701a      	strb	r2, [r3, #0]
		break;
   9950a:	e080      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   9950c:	683b      	ldr	r3, [r7, #0]
   9950e:	2210      	movs	r2, #16
   99510:	701a      	strb	r2, [r3, #0]
		break;
   99512:	e07c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   99514:	683b      	ldr	r3, [r7, #0]
   99516:	2213      	movs	r2, #19
   99518:	701a      	strb	r2, [r3, #0]
		break;
   9951a:	e078      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   9951c:	683b      	ldr	r3, [r7, #0]
   9951e:	2214      	movs	r2, #20
   99520:	701a      	strb	r2, [r3, #0]
		break;
   99522:	e074      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   99524:	683b      	ldr	r3, [r7, #0]
   99526:	2215      	movs	r2, #21
   99528:	701a      	strb	r2, [r3, #0]
		break;
   9952a:	e070      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   9952c:	683b      	ldr	r3, [r7, #0]
   9952e:	2226      	movs	r2, #38	; 0x26
   99530:	701a      	strb	r2, [r3, #0]
		break;
   99532:	e06c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   99534:	683b      	ldr	r3, [r7, #0]
   99536:	2227      	movs	r2, #39	; 0x27
   99538:	701a      	strb	r2, [r3, #0]
		break;
   9953a:	e068      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   9953c:	683b      	ldr	r3, [r7, #0]
   9953e:	2228      	movs	r2, #40	; 0x28
   99540:	701a      	strb	r2, [r3, #0]
		break;
   99542:	e064      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   99544:	683b      	ldr	r3, [r7, #0]
   99546:	2209      	movs	r2, #9
   99548:	701a      	strb	r2, [r3, #0]
		break;
   9954a:	e060      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9954c:	683b      	ldr	r3, [r7, #0]
   9954e:	2212      	movs	r2, #18
   99550:	701a      	strb	r2, [r3, #0]
		break;
   99552:	e05c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   99554:	683b      	ldr	r3, [r7, #0]
   99556:	2216      	movs	r2, #22
   99558:	701a      	strb	r2, [r3, #0]
		break;
   9955a:	e058      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9955c:	683b      	ldr	r3, [r7, #0]
   9955e:	2217      	movs	r2, #23
   99560:	701a      	strb	r2, [r3, #0]
		break;
   99562:	e054      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   99564:	683b      	ldr	r3, [r7, #0]
   99566:	2218      	movs	r2, #24
   99568:	701a      	strb	r2, [r3, #0]
		break;
   9956a:	e050      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9956c:	683b      	ldr	r3, [r7, #0]
   9956e:	2219      	movs	r2, #25
   99570:	701a      	strb	r2, [r3, #0]
		break;
   99572:	e04c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   99574:	683b      	ldr	r3, [r7, #0]
   99576:	221a      	movs	r2, #26
   99578:	701a      	strb	r2, [r3, #0]
		break;
   9957a:	e048      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9957c:	683b      	ldr	r3, [r7, #0]
   9957e:	221b      	movs	r2, #27
   99580:	701a      	strb	r2, [r3, #0]
		break;
   99582:	e044      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   99584:	683b      	ldr	r3, [r7, #0]
   99586:	2208      	movs	r2, #8
   99588:	701a      	strb	r2, [r3, #0]
		break;
   9958a:	e040      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9958c:	683b      	ldr	r3, [r7, #0]
   9958e:	2203      	movs	r2, #3
   99590:	701a      	strb	r2, [r3, #0]
		break;
   99592:	e03c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   99594:	683b      	ldr	r3, [r7, #0]
   99596:	2204      	movs	r2, #4
   99598:	701a      	strb	r2, [r3, #0]
		break;
   9959a:	e038      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   9959c:	683b      	ldr	r3, [r7, #0]
   9959e:	2205      	movs	r2, #5
   995a0:	701a      	strb	r2, [r3, #0]
		break;
   995a2:	e034      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   995a4:	683b      	ldr	r3, [r7, #0]
   995a6:	2206      	movs	r2, #6
   995a8:	701a      	strb	r2, [r3, #0]
		break;
   995aa:	e030      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   995ac:	683b      	ldr	r3, [r7, #0]
   995ae:	221c      	movs	r2, #28
   995b0:	701a      	strb	r2, [r3, #0]
		break;
   995b2:	e02c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   995b4:	683b      	ldr	r3, [r7, #0]
   995b6:	221d      	movs	r2, #29
   995b8:	701a      	strb	r2, [r3, #0]
		break;
   995ba:	e028      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   995bc:	683b      	ldr	r3, [r7, #0]
   995be:	221e      	movs	r2, #30
   995c0:	701a      	strb	r2, [r3, #0]
		break;
   995c2:	e024      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   995c4:	683b      	ldr	r3, [r7, #0]
   995c6:	221f      	movs	r2, #31
   995c8:	701a      	strb	r2, [r3, #0]
		break;
   995ca:	e020      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   995cc:	683b      	ldr	r3, [r7, #0]
   995ce:	2220      	movs	r2, #32
   995d0:	701a      	strb	r2, [r3, #0]
		break;
   995d2:	e01c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   995d4:	683b      	ldr	r3, [r7, #0]
   995d6:	2221      	movs	r2, #33	; 0x21
   995d8:	701a      	strb	r2, [r3, #0]
		break;
   995da:	e018      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   995dc:	683b      	ldr	r3, [r7, #0]
   995de:	2222      	movs	r2, #34	; 0x22
   995e0:	701a      	strb	r2, [r3, #0]
		break;
   995e2:	e014      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   995e4:	683b      	ldr	r3, [r7, #0]
   995e6:	2223      	movs	r2, #35	; 0x23
   995e8:	701a      	strb	r2, [r3, #0]
		break;			
   995ea:	e010      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   995ec:	683b      	ldr	r3, [r7, #0]
   995ee:	2224      	movs	r2, #36	; 0x24
   995f0:	701a      	strb	r2, [r3, #0]
		break;
   995f2:	e00c      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   995f4:	683b      	ldr	r3, [r7, #0]
   995f6:	2225      	movs	r2, #37	; 0x25
   995f8:	701a      	strb	r2, [r3, #0]
		break;
   995fa:	e008      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_START:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_START;
   995fc:	683b      	ldr	r3, [r7, #0]
   995fe:	2258      	movs	r2, #88	; 0x58
   99600:	701a      	strb	r2, [r3, #0]
		break;
   99602:	e004      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_STOP:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_STOP;
   99604:	683b      	ldr	r3, [r7, #0]
   99606:	2259      	movs	r2, #89	; 0x59
   99608:	701a      	strb	r2, [r3, #0]
		break;
   9960a:	e000      	b.n	9960e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		default:
		break;
   9960c:	bf00      	nop
	}
	return CL_OK;
   9960e:	2300      	movs	r3, #0
}
   99610:	4618      	mov	r0, r3
   99612:	370c      	adds	r7, #12
   99614:	46bd      	mov	sp, r7
   99616:	bc80      	pop	{r7}
   99618:	4770      	bx	lr
   9961a:	bf00      	nop

0009961c <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   9961c:	b580      	push	{r7, lr}
   9961e:	b082      	sub	sp, #8
   99620:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   99622:	2304      	movs	r3, #4
   99624:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   99626:	2300      	movs	r3, #0
   99628:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   9962a:	2300      	movs	r3, #0
   9962c:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9962e:	e07f      	b.n	99730 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   99630:	79bb      	ldrb	r3, [r7, #6]
   99632:	2b03      	cmp	r3, #3
   99634:	d87b      	bhi.n	9972e <Cl_Console_Console_Sync+0x112>
   99636:	a201      	add	r2, pc, #4	; (adr r2, 9963c <Cl_Console_Console_Sync+0x20>)
   99638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9963c:	0009964d 	.word	0x0009964d
   99640:	00099687 	.word	0x00099687
   99644:	000996a3 	.word	0x000996a3
   99648:	00099723 	.word	0x00099723
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9964c:	4b3d      	ldr	r3, [pc, #244]	; (99744 <Cl_Console_Console_Sync+0x128>)
   9964e:	4798      	blx	r3
   99650:	4603      	mov	r3, r0
   99652:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   99654:	79fb      	ldrb	r3, [r7, #7]
   99656:	2b00      	cmp	r3, #0
   99658:	d112      	bne.n	99680 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9965a:	4b3b      	ldr	r3, [pc, #236]	; (99748 <Cl_Console_Console_Sync+0x12c>)
   9965c:	781a      	ldrb	r2, [r3, #0]
   9965e:	4b3b      	ldr	r3, [pc, #236]	; (9974c <Cl_Console_Console_Sync+0x130>)
   99660:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   99662:	4b3a      	ldr	r3, [pc, #232]	; (9974c <Cl_Console_Console_Sync+0x130>)
   99664:	789b      	ldrb	r3, [r3, #2]
   99666:	2b03      	cmp	r3, #3
   99668:	d10a      	bne.n	99680 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9966a:	4b39      	ldr	r3, [pc, #228]	; (99750 <Cl_Console_Console_Sync+0x134>)
   9966c:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9966e:	4b37      	ldr	r3, [pc, #220]	; (9974c <Cl_Console_Console_Sync+0x130>)
   99670:	2201      	movs	r2, #1
   99672:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   99674:	4b34      	ldr	r3, [pc, #208]	; (99748 <Cl_Console_Console_Sync+0x12c>)
   99676:	2200      	movs	r2, #0
   99678:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9967c:	2301      	movs	r3, #1
   9967e:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   99680:	2301      	movs	r3, #1
   99682:	71fb      	strb	r3, [r7, #7]
								
			break;
   99684:	e054      	b.n	99730 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   99686:	200a      	movs	r0, #10
   99688:	4b32      	ldr	r3, [pc, #200]	; (99754 <Cl_Console_Console_Sync+0x138>)
   9968a:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9968c:	1d7b      	adds	r3, r7, #5
   9968e:	2200      	movs	r2, #0
   99690:	4619      	mov	r1, r3
   99692:	2003      	movs	r0, #3
   99694:	4b30      	ldr	r3, [pc, #192]	; (99758 <Cl_Console_Console_Sync+0x13c>)
   99696:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   99698:	2302      	movs	r3, #2
   9969a:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9969c:	2301      	movs	r3, #1
   9969e:	71fb      	strb	r3, [r7, #7]
				break;
   996a0:	e046      	b.n	99730 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   996a2:	4b28      	ldr	r3, [pc, #160]	; (99744 <Cl_Console_Console_Sync+0x128>)
   996a4:	4798      	blx	r3
   996a6:	4603      	mov	r3, r0
   996a8:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   996aa:	79fb      	ldrb	r3, [r7, #7]
   996ac:	2b00      	cmp	r3, #0
   996ae:	d13f      	bne.n	99730 <Cl_Console_Console_Sync+0x114>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   996b0:	4b25      	ldr	r3, [pc, #148]	; (99748 <Cl_Console_Console_Sync+0x12c>)
   996b2:	781a      	ldrb	r2, [r3, #0]
   996b4:	4b25      	ldr	r3, [pc, #148]	; (9974c <Cl_Console_Console_Sync+0x130>)
   996b6:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   996b8:	4b23      	ldr	r3, [pc, #140]	; (99748 <Cl_Console_Console_Sync+0x12c>)
   996ba:	785a      	ldrb	r2, [r3, #1]
   996bc:	4b23      	ldr	r3, [pc, #140]	; (9974c <Cl_Console_Console_Sync+0x130>)
   996be:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   996c0:	4b21      	ldr	r3, [pc, #132]	; (99748 <Cl_Console_Console_Sync+0x12c>)
   996c2:	789a      	ldrb	r2, [r3, #2]
   996c4:	4b21      	ldr	r3, [pc, #132]	; (9974c <Cl_Console_Console_Sync+0x130>)
   996c6:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   996c8:	4b20      	ldr	r3, [pc, #128]	; (9974c <Cl_Console_Console_Sync+0x130>)
   996ca:	789b      	ldrb	r3, [r3, #2]
   996cc:	2b04      	cmp	r3, #4
   996ce:	d125      	bne.n	9971c <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   996d0:	4b1e      	ldr	r3, [pc, #120]	; (9974c <Cl_Console_Console_Sync+0x130>)
   996d2:	791b      	ldrb	r3, [r3, #4]
   996d4:	2b03      	cmp	r3, #3
   996d6:	d12b      	bne.n	99730 <Cl_Console_Console_Sync+0x114>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   996d8:	2303      	movs	r3, #3
   996da:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   996dc:	4b1f      	ldr	r3, [pc, #124]	; (9975c <Cl_Console_Console_Sync+0x140>)
   996de:	781b      	ldrb	r3, [r3, #0]
   996e0:	2b0a      	cmp	r3, #10
   996e2:	d80f      	bhi.n	99704 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   996e4:	4b1d      	ldr	r3, [pc, #116]	; (9975c <Cl_Console_Console_Sync+0x140>)
   996e6:	781b      	ldrb	r3, [r3, #0]
   996e8:	461a      	mov	r2, r3
   996ea:	4b1c      	ldr	r3, [pc, #112]	; (9975c <Cl_Console_Console_Sync+0x140>)
   996ec:	4413      	add	r3, r2
   996ee:	222a      	movs	r2, #42	; 0x2a
   996f0:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   996f2:	4b1a      	ldr	r3, [pc, #104]	; (9975c <Cl_Console_Console_Sync+0x140>)
   996f4:	2201      	movs	r2, #1
   996f6:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   996f8:	4b18      	ldr	r3, [pc, #96]	; (9975c <Cl_Console_Console_Sync+0x140>)
   996fa:	781b      	ldrb	r3, [r3, #0]
   996fc:	3301      	adds	r3, #1
   996fe:	b2da      	uxtb	r2, r3
   99700:	4b16      	ldr	r3, [pc, #88]	; (9975c <Cl_Console_Console_Sync+0x140>)
   99702:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   99704:	4b16      	ldr	r3, [pc, #88]	; (99760 <Cl_Console_Console_Sync+0x144>)
   99706:	2201      	movs	r2, #1
   99708:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9970a:	4b16      	ldr	r3, [pc, #88]	; (99764 <Cl_Console_Console_Sync+0x148>)
   9970c:	2202      	movs	r2, #2
   9970e:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   99710:	2300      	movs	r3, #0
   99712:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   99714:	4b14      	ldr	r3, [pc, #80]	; (99768 <Cl_Console_Console_Sync+0x14c>)
   99716:	2200      	movs	r2, #0
   99718:	701a      	strb	r2, [r3, #0]
   9971a:	e009      	b.n	99730 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9971c:	2301      	movs	r3, #1
   9971e:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   99720:	e006      	b.n	99730 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   99722:	4b10      	ldr	r3, [pc, #64]	; (99764 <Cl_Console_Console_Sync+0x148>)
   99724:	2202      	movs	r2, #2
   99726:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   99728:	2300      	movs	r3, #0
   9972a:	71fb      	strb	r3, [r7, #7]
			break;
   9972c:	e000      	b.n	99730 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9972e:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   99730:	4b0c      	ldr	r3, [pc, #48]	; (99764 <Cl_Console_Console_Sync+0x148>)
   99732:	781b      	ldrb	r3, [r3, #0]
   99734:	2b01      	cmp	r3, #1
   99736:	f43f af7b 	beq.w	99630 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9973a:	79fb      	ldrb	r3, [r7, #7]
 }
   9973c:	4618      	mov	r0, r3
   9973e:	3708      	adds	r7, #8
   99740:	46bd      	mov	sp, r7
   99742:	bd80      	pop	{r7, pc}
   99744:	00099785 	.word	0x00099785
   99748:	20072de8 	.word	0x20072de8
   9974c:	20072f88 	.word	0x20072f88
   99750:	000991e5 	.word	0x000991e5
   99754:	000918fd 	.word	0x000918fd
   99758:	0009926d 	.word	0x0009926d
   9975c:	20072fc4 	.word	0x20072fc4
   99760:	200727a0 	.word	0x200727a0
   99764:	20070a64 	.word	0x20070a64
   99768:	200727a4 	.word	0x200727a4

0009976c <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   9976c:	b480      	push	{r7}
   9976e:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   99770:	4b03      	ldr	r3, [pc, #12]	; (99780 <Cl_Console_init+0x14>)
   99772:	2201      	movs	r2, #1
   99774:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   99776:	2300      	movs	r3, #0
 }
   99778:	4618      	mov	r0, r3
   9977a:	46bd      	mov	sp, r7
   9977c:	bc80      	pop	{r7}
   9977e:	4770      	bx	lr
   99780:	20070a64 	.word	0x20070a64

00099784 <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   99784:	b580      	push	{r7, lr}
   99786:	b082      	sub	sp, #8
   99788:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   9978a:	2301      	movs	r3, #1
   9978c:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9978e:	4b0b      	ldr	r3, [pc, #44]	; (997bc <Cl_Console_SyncGetMessage+0x38>)
   99790:	4798      	blx	r3
   99792:	4603      	mov	r3, r0
   99794:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   99796:	79fb      	ldrb	r3, [r7, #7]
   99798:	2b00      	cmp	r3, #0
   9979a:	d10a      	bne.n	997b2 <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   9979c:	4b08      	ldr	r3, [pc, #32]	; (997c0 <Cl_Console_SyncGetMessage+0x3c>)
   9979e:	4798      	blx	r3
   997a0:	4603      	mov	r3, r0
   997a2:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   997a4:	79fb      	ldrb	r3, [r7, #7]
   997a6:	2b00      	cmp	r3, #0
   997a8:	d103      	bne.n	997b2 <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   997aa:	4b06      	ldr	r3, [pc, #24]	; (997c4 <Cl_Console_SyncGetMessage+0x40>)
   997ac:	4798      	blx	r3
   997ae:	4603      	mov	r3, r0
   997b0:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   997b2:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   997b4:	4618      	mov	r0, r3
   997b6:	3708      	adds	r7, #8
   997b8:	46bd      	mov	sp, r7
   997ba:	bd80      	pop	{r7, pc}
   997bc:	00098ec1 	.word	0x00098ec1
   997c0:	00098f21 	.word	0x00098f21
   997c4:	00098f01 	.word	0x00098f01

000997c8 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   997c8:	b480      	push	{r7}
   997ca:	b083      	sub	sp, #12
   997cc:	af00      	add	r7, sp, #0
   997ce:	4603      	mov	r3, r0
   997d0:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   997d2:	4b61      	ldr	r3, [pc, #388]	; (99958 <cl_console_receivedbyte+0x190>)
   997d4:	7f1b      	ldrb	r3, [r3, #28]
   997d6:	2b00      	cmp	r3, #0
   997d8:	d009      	beq.n	997ee <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   997da:	4b60      	ldr	r3, [pc, #384]	; (9995c <cl_console_receivedbyte+0x194>)
   997dc:	7f1b      	ldrb	r3, [r3, #28]
   997de:	2b00      	cmp	r3, #0
   997e0:	d005      	beq.n	997ee <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   997e2:	4b5d      	ldr	r3, [pc, #372]	; (99958 <cl_console_receivedbyte+0x190>)
   997e4:	2201      	movs	r2, #1
   997e6:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   997e8:	4b5c      	ldr	r3, [pc, #368]	; (9995c <cl_console_receivedbyte+0x194>)
   997ea:	2200      	movs	r2, #0
   997ec:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   997ee:	4b5a      	ldr	r3, [pc, #360]	; (99958 <cl_console_receivedbyte+0x190>)
   997f0:	7e9b      	ldrb	r3, [r3, #26]
   997f2:	2b00      	cmp	r3, #0
   997f4:	d04e      	beq.n	99894 <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   997f6:	4b58      	ldr	r3, [pc, #352]	; (99958 <cl_console_receivedbyte+0x190>)
   997f8:	7edb      	ldrb	r3, [r3, #27]
   997fa:	f083 0301 	eor.w	r3, r3, #1
   997fe:	b2db      	uxtb	r3, r3
   99800:	2b00      	cmp	r3, #0
   99802:	d00a      	beq.n	9981a <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   99804:	4b56      	ldr	r3, [pc, #344]	; (99960 <cl_console_receivedbyte+0x198>)
   99806:	781b      	ldrb	r3, [r3, #0]
   99808:	2bcc      	cmp	r3, #204	; 0xcc
   9980a:	d12e      	bne.n	9986a <cl_console_receivedbyte+0xa2>
   9980c:	79fb      	ldrb	r3, [r7, #7]
   9980e:	2bdd      	cmp	r3, #221	; 0xdd
   99810:	d12b      	bne.n	9986a <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   99812:	4b51      	ldr	r3, [pc, #324]	; (99958 <cl_console_receivedbyte+0x190>)
   99814:	2201      	movs	r2, #1
   99816:	76da      	strb	r2, [r3, #27]
   99818:	e027      	b.n	9986a <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9981a:	4b4f      	ldr	r3, [pc, #316]	; (99958 <cl_console_receivedbyte+0x190>)
   9981c:	7d1b      	ldrb	r3, [r3, #20]
   9981e:	4619      	mov	r1, r3
   99820:	4a4d      	ldr	r2, [pc, #308]	; (99958 <cl_console_receivedbyte+0x190>)
   99822:	79fb      	ldrb	r3, [r7, #7]
   99824:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   99826:	4b4c      	ldr	r3, [pc, #304]	; (99958 <cl_console_receivedbyte+0x190>)
   99828:	2201      	movs	r2, #1
   9982a:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   9982c:	4b4a      	ldr	r3, [pc, #296]	; (99958 <cl_console_receivedbyte+0x190>)
   9982e:	2200      	movs	r2, #0
   99830:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   99832:	4b4b      	ldr	r3, [pc, #300]	; (99960 <cl_console_receivedbyte+0x198>)
   99834:	781b      	ldrb	r3, [r3, #0]
   99836:	2bee      	cmp	r3, #238	; 0xee
   99838:	d111      	bne.n	9985e <cl_console_receivedbyte+0x96>
   9983a:	79fb      	ldrb	r3, [r7, #7]
   9983c:	2bbb      	cmp	r3, #187	; 0xbb
   9983e:	d10e      	bne.n	9985e <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   99840:	4b45      	ldr	r3, [pc, #276]	; (99958 <cl_console_receivedbyte+0x190>)
   99842:	2201      	movs	r2, #1
   99844:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   99846:	4b44      	ldr	r3, [pc, #272]	; (99958 <cl_console_receivedbyte+0x190>)
   99848:	2200      	movs	r2, #0
   9984a:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   9984c:	4b42      	ldr	r3, [pc, #264]	; (99958 <cl_console_receivedbyte+0x190>)
   9984e:	2200      	movs	r2, #0
   99850:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   99852:	4b41      	ldr	r3, [pc, #260]	; (99958 <cl_console_receivedbyte+0x190>)
   99854:	2200      	movs	r2, #0
   99856:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   99858:	4b40      	ldr	r3, [pc, #256]	; (9995c <cl_console_receivedbyte+0x194>)
   9985a:	2201      	movs	r2, #1
   9985c:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   9985e:	4b3e      	ldr	r3, [pc, #248]	; (99958 <cl_console_receivedbyte+0x190>)
   99860:	7d1b      	ldrb	r3, [r3, #20]
   99862:	3301      	adds	r3, #1
   99864:	b2da      	uxtb	r2, r3
   99866:	4b3c      	ldr	r3, [pc, #240]	; (99958 <cl_console_receivedbyte+0x190>)
   99868:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9986a:	4b3b      	ldr	r3, [pc, #236]	; (99958 <cl_console_receivedbyte+0x190>)
   9986c:	7d1b      	ldrb	r3, [r3, #20]
   9986e:	2b13      	cmp	r3, #19
   99870:	d90b      	bls.n	9988a <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   99872:	4b39      	ldr	r3, [pc, #228]	; (99958 <cl_console_receivedbyte+0x190>)
   99874:	2201      	movs	r2, #1
   99876:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   99878:	4b37      	ldr	r3, [pc, #220]	; (99958 <cl_console_receivedbyte+0x190>)
   9987a:	2200      	movs	r2, #0
   9987c:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   9987e:	4b36      	ldr	r3, [pc, #216]	; (99958 <cl_console_receivedbyte+0x190>)
   99880:	2200      	movs	r2, #0
   99882:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   99884:	4b34      	ldr	r3, [pc, #208]	; (99958 <cl_console_receivedbyte+0x190>)
   99886:	2201      	movs	r2, #1
   99888:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9988a:	4a35      	ldr	r2, [pc, #212]	; (99960 <cl_console_receivedbyte+0x198>)
   9988c:	79fb      	ldrb	r3, [r7, #7]
   9988e:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   99890:	2302      	movs	r3, #2
   99892:	e05b      	b.n	9994c <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   99894:	4b31      	ldr	r3, [pc, #196]	; (9995c <cl_console_receivedbyte+0x194>)
   99896:	7e9b      	ldrb	r3, [r3, #26]
   99898:	2b00      	cmp	r3, #0
   9989a:	d056      	beq.n	9994a <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   9989c:	4b2e      	ldr	r3, [pc, #184]	; (99958 <cl_console_receivedbyte+0x190>)
   9989e:	7f5b      	ldrb	r3, [r3, #29]
   998a0:	2b00      	cmp	r3, #0
   998a2:	d002      	beq.n	998aa <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   998a4:	4b2d      	ldr	r3, [pc, #180]	; (9995c <cl_console_receivedbyte+0x194>)
   998a6:	2201      	movs	r2, #1
   998a8:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   998aa:	4b2c      	ldr	r3, [pc, #176]	; (9995c <cl_console_receivedbyte+0x194>)
   998ac:	7edb      	ldrb	r3, [r3, #27]
   998ae:	f083 0301 	eor.w	r3, r3, #1
   998b2:	b2db      	uxtb	r3, r3
   998b4:	2b00      	cmp	r3, #0
   998b6:	d00d      	beq.n	998d4 <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   998b8:	4b29      	ldr	r3, [pc, #164]	; (99960 <cl_console_receivedbyte+0x198>)
   998ba:	781b      	ldrb	r3, [r3, #0]
   998bc:	2bcc      	cmp	r3, #204	; 0xcc
   998be:	d12e      	bne.n	9991e <cl_console_receivedbyte+0x156>
   998c0:	79fb      	ldrb	r3, [r7, #7]
   998c2:	2bdd      	cmp	r3, #221	; 0xdd
   998c4:	d12b      	bne.n	9991e <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   998c6:	4b25      	ldr	r3, [pc, #148]	; (9995c <cl_console_receivedbyte+0x194>)
   998c8:	2201      	movs	r2, #1
   998ca:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   998cc:	4b23      	ldr	r3, [pc, #140]	; (9995c <cl_console_receivedbyte+0x194>)
   998ce:	2200      	movs	r2, #0
   998d0:	751a      	strb	r2, [r3, #20]
   998d2:	e024      	b.n	9991e <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   998d4:	4b21      	ldr	r3, [pc, #132]	; (9995c <cl_console_receivedbyte+0x194>)
   998d6:	7d1b      	ldrb	r3, [r3, #20]
   998d8:	4619      	mov	r1, r3
   998da:	4a20      	ldr	r2, [pc, #128]	; (9995c <cl_console_receivedbyte+0x194>)
   998dc:	79fb      	ldrb	r3, [r7, #7]
   998de:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   998e0:	4b1e      	ldr	r3, [pc, #120]	; (9995c <cl_console_receivedbyte+0x194>)
   998e2:	2201      	movs	r2, #1
   998e4:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   998e6:	4b1d      	ldr	r3, [pc, #116]	; (9995c <cl_console_receivedbyte+0x194>)
   998e8:	2200      	movs	r2, #0
   998ea:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   998ec:	4b1c      	ldr	r3, [pc, #112]	; (99960 <cl_console_receivedbyte+0x198>)
   998ee:	781b      	ldrb	r3, [r3, #0]
   998f0:	2bee      	cmp	r3, #238	; 0xee
   998f2:	d10e      	bne.n	99912 <cl_console_receivedbyte+0x14a>
   998f4:	79fb      	ldrb	r3, [r7, #7]
   998f6:	2bbb      	cmp	r3, #187	; 0xbb
   998f8:	d10b      	bne.n	99912 <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   998fa:	4b18      	ldr	r3, [pc, #96]	; (9995c <cl_console_receivedbyte+0x194>)
   998fc:	2201      	movs	r2, #1
   998fe:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   99900:	4b16      	ldr	r3, [pc, #88]	; (9995c <cl_console_receivedbyte+0x194>)
   99902:	2200      	movs	r2, #0
   99904:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   99906:	4b14      	ldr	r3, [pc, #80]	; (99958 <cl_console_receivedbyte+0x190>)
   99908:	2201      	movs	r2, #1
   9990a:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   9990c:	4b13      	ldr	r3, [pc, #76]	; (9995c <cl_console_receivedbyte+0x194>)
   9990e:	2200      	movs	r2, #0
   99910:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   99912:	4b12      	ldr	r3, [pc, #72]	; (9995c <cl_console_receivedbyte+0x194>)
   99914:	7d1b      	ldrb	r3, [r3, #20]
   99916:	3301      	adds	r3, #1
   99918:	b2da      	uxtb	r2, r3
   9991a:	4b10      	ldr	r3, [pc, #64]	; (9995c <cl_console_receivedbyte+0x194>)
   9991c:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   9991e:	4b0f      	ldr	r3, [pc, #60]	; (9995c <cl_console_receivedbyte+0x194>)
   99920:	7d1b      	ldrb	r3, [r3, #20]
   99922:	2b14      	cmp	r3, #20
   99924:	d90b      	bls.n	9993e <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   99926:	4b0d      	ldr	r3, [pc, #52]	; (9995c <cl_console_receivedbyte+0x194>)
   99928:	2201      	movs	r2, #1
   9992a:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   9992c:	4b0b      	ldr	r3, [pc, #44]	; (9995c <cl_console_receivedbyte+0x194>)
   9992e:	2200      	movs	r2, #0
   99930:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   99932:	4b0a      	ldr	r3, [pc, #40]	; (9995c <cl_console_receivedbyte+0x194>)
   99934:	2201      	movs	r2, #1
   99936:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   99938:	4b07      	ldr	r3, [pc, #28]	; (99958 <cl_console_receivedbyte+0x190>)
   9993a:	2200      	movs	r2, #0
   9993c:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   9993e:	4b07      	ldr	r3, [pc, #28]	; (9995c <cl_console_receivedbyte+0x194>)
   99940:	7f5b      	ldrb	r3, [r3, #29]
   99942:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   99944:	4a06      	ldr	r2, [pc, #24]	; (99960 <cl_console_receivedbyte+0x198>)
   99946:	79fb      	ldrb	r3, [r7, #7]
   99948:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   9994a:	2302      	movs	r3, #2
}
   9994c:	4618      	mov	r0, r3
   9994e:	370c      	adds	r7, #12
   99950:	46bd      	mov	sp, r7
   99952:	bc80      	pop	{r7}
   99954:	4770      	bx	lr
   99956:	bf00      	nop
   99958:	20072fa4 	.word	0x20072fa4
   9995c:	20072e6c 	.word	0x20072e6c
   99960:	200727ac 	.word	0x200727ac

00099964 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   99964:	b480      	push	{r7}
   99966:	b08b      	sub	sp, #44	; 0x2c
   99968:	af00      	add	r7, sp, #0
   9996a:	6078      	str	r0, [r7, #4]
   9996c:	687b      	ldr	r3, [r7, #4]
   9996e:	627b      	str	r3, [r7, #36]	; 0x24
   99970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   99972:	623b      	str	r3, [r7, #32]
   99974:	6a3b      	ldr	r3, [r7, #32]
   99976:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   99978:	69fb      	ldr	r3, [r7, #28]
   9997a:	095b      	lsrs	r3, r3, #5
   9997c:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   9997e:	69bb      	ldr	r3, [r7, #24]
   99980:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   99984:	f203 7307 	addw	r3, r3, #1799	; 0x707
   99988:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   9998a:	617b      	str	r3, [r7, #20]
   9998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9998e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   99990:	693b      	ldr	r3, [r7, #16]
   99992:	f003 031f 	and.w	r3, r3, #31
   99996:	2201      	movs	r2, #1
   99998:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   9999c:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9999e:	697b      	ldr	r3, [r7, #20]
   999a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   999a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   999a4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   999a6:	68bb      	ldr	r3, [r7, #8]
   999a8:	f003 031f 	and.w	r3, r3, #31
   999ac:	2101      	movs	r1, #1
   999ae:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   999b2:	4013      	ands	r3, r2
   999b4:	2b00      	cmp	r3, #0
   999b6:	d003      	beq.n	999c0 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   999b8:	697b      	ldr	r3, [r7, #20]
   999ba:	68fa      	ldr	r2, [r7, #12]
   999bc:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
   999be:	e002      	b.n	999c6 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   999c0:	697b      	ldr	r3, [r7, #20]
   999c2:	68fa      	ldr	r2, [r7, #12]
   999c4:	631a      	str	r2, [r3, #48]	; 0x30
   999c6:	bf00      	nop
   999c8:	372c      	adds	r7, #44	; 0x2c
   999ca:	46bd      	mov	sp, r7
   999cc:	bc80      	pop	{r7}
   999ce:	4770      	bx	lr

000999d0 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   999d0:	b580      	push	{r7, lr}
   999d2:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   999d4:	4b04      	ldr	r3, [pc, #16]	; (999e8 <TC1_Handler+0x18>)
   999d6:	781b      	ldrb	r3, [r3, #0]
   999d8:	b2db      	uxtb	r3, r3
   999da:	2b00      	cmp	r3, #0
   999dc:	d002      	beq.n	999e4 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   999de:	203b      	movs	r0, #59	; 0x3b
   999e0:	4b02      	ldr	r3, [pc, #8]	; (999ec <TC1_Handler+0x1c>)
   999e2:	4798      	blx	r3
		}
		#endif
}
   999e4:	bf00      	nop
   999e6:	bd80      	pop	{r7, pc}
   999e8:	20070a65 	.word	0x20070a65
   999ec:	00099965 	.word	0x00099965

000999f0 <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   999f0:	b480      	push	{r7}
   999f2:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   999f4:	2300      	movs	r3, #0
 }
   999f6:	4618      	mov	r0, r3
   999f8:	46bd      	mov	sp, r7
   999fa:	bc80      	pop	{r7}
   999fc:	4770      	bx	lr
   999fe:	bf00      	nop

00099a00 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   99a00:	b590      	push	{r4, r7, lr}
   99a02:	b08d      	sub	sp, #52	; 0x34
   99a04:	af02      	add	r7, sp, #8
   99a06:	4603      	mov	r3, r0
   99a08:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   99a0a:	2300      	movs	r3, #0
   99a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   99a10:	2300      	movs	r3, #0
   99a12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99a16:	234d      	movs	r3, #77	; 0x4d
   99a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   99a1c:	2300      	movs	r3, #0
   99a1e:	61fb      	str	r3, [r7, #28]
		Cl_Uint8Type data = 0;
   99a20:	2300      	movs	r3, #0
   99a22:	76fb      	strb	r3, [r7, #27]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   99a24:	2300      	movs	r3, #0
   99a26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   99a2a:	2300      	movs	r3, #0
   99a2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   99a30:	2300      	movs	r3, #0
   99a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   99a36:	2300      	movs	r3, #0
   99a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   99a3c:	f107 0221 	add.w	r2, r7, #33	; 0x21
   99a40:	79fb      	ldrb	r3, [r7, #7]
   99a42:	4611      	mov	r1, r2
   99a44:	4618      	mov	r0, r3
   99a46:	4bad      	ldr	r3, [pc, #692]	; (99cfc <Cl_disinf_controller+0x2fc>)
   99a48:	4798      	blx	r3
   99a4a:	4603      	mov	r3, r0
   99a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   99a50:	4bab      	ldr	r3, [pc, #684]	; (99d00 <Cl_disinf_controller+0x300>)
   99a52:	781b      	ldrb	r3, [r3, #0]
   99a54:	2b11      	cmp	r3, #17
   99a56:	f200 86db 	bhi.w	9a810 <Cl_disinf_controller+0xe10>
   99a5a:	a201      	add	r2, pc, #4	; (adr r2, 99a60 <Cl_disinf_controller+0x60>)
   99a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99a60:	00099aa9 	.word	0x00099aa9
   99a64:	0009a811 	.word	0x0009a811
   99a68:	0009a811 	.word	0x0009a811
   99a6c:	00099ba1 	.word	0x00099ba1
   99a70:	00099c2d 	.word	0x00099c2d
   99a74:	00099e3f 	.word	0x00099e3f
   99a78:	00099eff 	.word	0x00099eff
   99a7c:	0009a0d9 	.word	0x0009a0d9
   99a80:	0009a2c9 	.word	0x0009a2c9
   99a84:	0009a4a9 	.word	0x0009a4a9
   99a88:	0009a4e9 	.word	0x0009a4e9
   99a8c:	0009a811 	.word	0x0009a811
   99a90:	0009a5c3 	.word	0x0009a5c3
   99a94:	0009a811 	.word	0x0009a811
   99a98:	0009a811 	.word	0x0009a811
   99a9c:	0009a549 	.word	0x0009a549
   99aa0:	00099cad 	.word	0x00099cad
   99aa4:	0009a197 	.word	0x0009a197
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   99aa8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99aac:	2b01      	cmp	r3, #1
   99aae:	d044      	beq.n	99b3a <Cl_disinf_controller+0x13a>
   99ab0:	2b14      	cmp	r3, #20
   99ab2:	d000      	beq.n	99ab6 <Cl_disinf_controller+0xb6>
				Cl_Disinf_UpdateTimeInfo();
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   99ab4:	e072      	b.n	99b9c <Cl_disinf_controller+0x19c>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   99ab6:	4b93      	ldr	r3, [pc, #588]	; (99d04 <Cl_disinf_controller+0x304>)
   99ab8:	7e1b      	ldrb	r3, [r3, #24]
   99aba:	2b00      	cmp	r3, #0
   99abc:	d06d      	beq.n	99b9a <Cl_disinf_controller+0x19a>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   99abe:	4b91      	ldr	r3, [pc, #580]	; (99d04 <Cl_disinf_controller+0x304>)
   99ac0:	791b      	ldrb	r3, [r3, #4]
   99ac2:	2b02      	cmp	r3, #2
   99ac4:	d01d      	beq.n	99b02 <Cl_disinf_controller+0x102>
   99ac6:	2b21      	cmp	r3, #33	; 0x21
   99ac8:	d000      	beq.n	99acc <Cl_disinf_controller+0xcc>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   99aca:	e034      	b.n	99b36 <Cl_disinf_controller+0x136>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   99acc:	2316      	movs	r3, #22
   99ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   99ad2:	2323      	movs	r3, #35	; 0x23
   99ad4:	773b      	strb	r3, [r7, #28]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   99ad6:	f107 031c 	add.w	r3, r7, #28
   99ada:	3301      	adds	r3, #1
   99adc:	4619      	mov	r1, r3
   99ade:	2028      	movs	r0, #40	; 0x28
   99ae0:	4b89      	ldr	r3, [pc, #548]	; (99d08 <Cl_disinf_controller+0x308>)
   99ae2:	4798      	blx	r3
   99ae4:	4603      	mov	r3, r0
   99ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99aea:	f107 011c 	add.w	r1, r7, #28
   99aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99af2:	2202      	movs	r2, #2
   99af4:	4618      	mov	r0, r3
   99af6:	4b85      	ldr	r3, [pc, #532]	; (99d0c <Cl_disinf_controller+0x30c>)
   99af8:	4798      	blx	r3
   99afa:	4603      	mov	r3, r0
   99afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   99b00:	e01a      	b.n	99b38 <Cl_disinf_controller+0x138>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   99b02:	2316      	movs	r3, #22
   99b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   99b08:	2302      	movs	r3, #2
   99b0a:	773b      	strb	r3, [r7, #28]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   99b0c:	f107 031c 	add.w	r3, r7, #28
   99b10:	3301      	adds	r3, #1
   99b12:	4619      	mov	r1, r3
   99b14:	2002      	movs	r0, #2
   99b16:	4b7c      	ldr	r3, [pc, #496]	; (99d08 <Cl_disinf_controller+0x308>)
   99b18:	4798      	blx	r3
   99b1a:	4603      	mov	r3, r0
   99b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99b20:	f107 011c 	add.w	r1, r7, #28
   99b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99b28:	2202      	movs	r2, #2
   99b2a:	4618      	mov	r0, r3
   99b2c:	4b77      	ldr	r3, [pc, #476]	; (99d0c <Cl_disinf_controller+0x30c>)
   99b2e:	4798      	blx	r3
   99b30:	4603      	mov	r3, r0
   99b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   99b36:	bf00      	nop
					}
				}
				break;
   99b38:	e02f      	b.n	99b9a <Cl_disinf_controller+0x19a>
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   99b3a:	2044      	movs	r0, #68	; 0x44
   99b3c:	4b74      	ldr	r3, [pc, #464]	; (99d10 <Cl_disinf_controller+0x310>)
   99b3e:	4798      	blx	r3
   99b40:	4603      	mov	r3, r0
   99b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   99b46:	4b6f      	ldr	r3, [pc, #444]	; (99d04 <Cl_disinf_controller+0x304>)
   99b48:	7e1b      	ldrb	r3, [r3, #24]
   99b4a:	2b00      	cmp	r3, #0
   99b4c:	d00f      	beq.n	99b6e <Cl_disinf_controller+0x16e>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   99b4e:	4b6d      	ldr	r3, [pc, #436]	; (99d04 <Cl_disinf_controller+0x304>)
   99b50:	791b      	ldrb	r3, [r3, #4]
   99b52:	753b      	strb	r3, [r7, #20]
					if (cl_temp.bytearray[0] == 4)
   99b54:	7d3b      	ldrb	r3, [r7, #20]
   99b56:	2b04      	cmp	r3, #4
   99b58:	d103      	bne.n	99b62 <Cl_disinf_controller+0x162>
					{
						flag_hotcitric = 1;
   99b5a:	4b6e      	ldr	r3, [pc, #440]	; (99d14 <Cl_disinf_controller+0x314>)
   99b5c:	2201      	movs	r2, #1
   99b5e:	701a      	strb	r2, [r3, #0]
   99b60:	e005      	b.n	99b6e <Cl_disinf_controller+0x16e>
					}
					else if (cl_temp.bytearray[0] == 3)
   99b62:	7d3b      	ldrb	r3, [r7, #20]
   99b64:	2b03      	cmp	r3, #3
   99b66:	d102      	bne.n	99b6e <Cl_disinf_controller+0x16e>
					{
						flag_na = 1;
   99b68:	4b6b      	ldr	r3, [pc, #428]	; (99d18 <Cl_disinf_controller+0x318>)
   99b6a:	2201      	movs	r2, #1
   99b6c:	701a      	strb	r2, [r3, #0]
					}
					
				}
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   99b6e:	233c      	movs	r3, #60	; 0x3c
   99b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   99b74:	2301      	movs	r3, #1
   99b76:	76fb      	strb	r3, [r7, #27]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99b78:	f107 011b 	add.w	r1, r7, #27
   99b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99b80:	2201      	movs	r2, #1
   99b82:	4618      	mov	r0, r3
   99b84:	4b61      	ldr	r3, [pc, #388]	; (99d0c <Cl_disinf_controller+0x30c>)
   99b86:	4798      	blx	r3
   99b88:	4603      	mov	r3, r0
   99b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   99b8e:	4b63      	ldr	r3, [pc, #396]	; (99d1c <Cl_disinf_controller+0x31c>)
   99b90:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   99b92:	4b5b      	ldr	r3, [pc, #364]	; (99d00 <Cl_disinf_controller+0x300>)
   99b94:	2203      	movs	r2, #3
   99b96:	701a      	strb	r2, [r3, #0]
				break;
   99b98:	e000      	b.n	99b9c <Cl_disinf_controller+0x19c>
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
					}
				}
				break;
   99b9a:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   99b9c:	f000 be3b 	b.w	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   99ba0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99ba4:	2b13      	cmp	r3, #19
   99ba6:	d004      	beq.n	99bb2 <Cl_disinf_controller+0x1b2>
   99ba8:	2b22      	cmp	r3, #34	; 0x22
   99baa:	d008      	beq.n	99bbe <Cl_disinf_controller+0x1be>
   99bac:	2b0f      	cmp	r3, #15
   99bae:	d02d      	beq.n	99c0c <Cl_disinf_controller+0x20c>
							
					}

					break;
					
					default:break;
   99bb0:	e03a      	b.n	99c28 <Cl_disinf_controller+0x228>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   99bb2:	4b5b      	ldr	r3, [pc, #364]	; (99d20 <Cl_disinf_controller+0x320>)
   99bb4:	4798      	blx	r3
   99bb6:	4603      	mov	r3, r0
   99bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   99bbc:	e034      	b.n	99c28 <Cl_disinf_controller+0x228>
					
					case EVENT_PRE_DISINFECT_RINSE_COMPLETED:
					
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   99bbe:	4b50      	ldr	r3, [pc, #320]	; (99d00 <Cl_disinf_controller+0x300>)
   99bc0:	2204      	movs	r2, #4
   99bc2:	701a      	strb	r2, [r3, #0]
					
					command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   99bc4:	2339      	movs	r3, #57	; 0x39
   99bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (Cl_Uint8Type)1;
   99bca:	2301      	movs	r3, #1
   99bcc:	76fb      	strb	r3, [r7, #27]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99bce:	f107 011b 	add.w	r1, r7, #27
   99bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99bd6:	2201      	movs	r2, #1
   99bd8:	4618      	mov	r0, r3
   99bda:	4b4c      	ldr	r3, [pc, #304]	; (99d0c <Cl_disinf_controller+0x30c>)
   99bdc:	4798      	blx	r3
   99bde:	4603      	mov	r3, r0
   99be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					
					cl_wait(5);
   99be4:	2005      	movs	r0, #5
   99be6:	4b4f      	ldr	r3, [pc, #316]	; (99d24 <Cl_disinf_controller+0x324>)
   99be8:	4798      	blx	r3

					command = CON_TX_COMMAND_DISINF_PAUSED;
   99bea:	2338      	movs	r3, #56	; 0x38
   99bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (Cl_Uint8Type)0;
   99bf0:	2300      	movs	r3, #0
   99bf2:	76fb      	strb	r3, [r7, #27]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99bf4:	f107 011b 	add.w	r1, r7, #27
   99bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99bfc:	2200      	movs	r2, #0
   99bfe:	4618      	mov	r0, r3
   99c00:	4b42      	ldr	r3, [pc, #264]	; (99d0c <Cl_disinf_controller+0x30c>)
   99c02:	4798      	blx	r3
   99c04:	4603      	mov	r3, r0
   99c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					//Send Pause

					break;
   99c0a:	e00d      	b.n	99c28 <Cl_disinf_controller+0x228>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   99c0c:	4b46      	ldr	r3, [pc, #280]	; (99d28 <Cl_disinf_controller+0x328>)
   99c0e:	681b      	ldr	r3, [r3, #0]
   99c10:	3301      	adds	r3, #1
   99c12:	4a45      	ldr	r2, [pc, #276]	; (99d28 <Cl_disinf_controller+0x328>)
   99c14:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   99c16:	4b45      	ldr	r3, [pc, #276]	; (99d2c <Cl_disinf_controller+0x32c>)
   99c18:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   99c1a:	4b43      	ldr	r3, [pc, #268]	; (99d28 <Cl_disinf_controller+0x328>)
   99c1c:	681b      	ldr	r3, [r3, #0]
   99c1e:	2b3c      	cmp	r3, #60	; 0x3c
   99c20:	d101      	bne.n	99c26 <Cl_disinf_controller+0x226>
					{
	
						UpdateDisinfMinuteTick();
   99c22:	4b43      	ldr	r3, [pc, #268]	; (99d30 <Cl_disinf_controller+0x330>)
   99c24:	4798      	blx	r3
						
							
					}

					break;
   99c26:	bf00      	nop
					
					default:break;
				}
				
			break;
   99c28:	f000 bdf5 	b.w	9a816 <Cl_disinf_controller+0xe16>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   99c2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99c30:	2b02      	cmp	r3, #2
   99c32:	d000      	beq.n	99c36 <Cl_disinf_controller+0x236>
					// command = CON_TX_COMMAND_DISINF_RESUMED;
					// data = (Cl_Uint8Type)0;
					// Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
					
					default:break;
   99c34:	e038      	b.n	99ca8 <Cl_disinf_controller+0x2a8>
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
				{ 
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   99c36:	4b3f      	ldr	r3, [pc, #252]	; (99d34 <Cl_disinf_controller+0x334>)
   99c38:	4798      	blx	r3
					 if (flag_hotcitric == 1)
   99c3a:	4b36      	ldr	r3, [pc, #216]	; (99d14 <Cl_disinf_controller+0x314>)
   99c3c:	781b      	ldrb	r3, [r3, #0]
   99c3e:	2b01      	cmp	r3, #1
   99c40:	d10d      	bne.n	99c5e <Cl_disinf_controller+0x25e>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   99c42:	2300      	movs	r3, #0
   99c44:	9300      	str	r3, [sp, #0]
   99c46:	f04f 0300 	mov.w	r3, #0
   99c4a:	f04f 0200 	mov.w	r2, #0
   99c4e:	2101      	movs	r1, #1
   99c50:	202b      	movs	r0, #43	; 0x2b
   99c52:	4c39      	ldr	r4, [pc, #228]	; (99d38 <Cl_disinf_controller+0x338>)
   99c54:	47a0      	blx	r4
   99c56:	4603      	mov	r3, r0
   99c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   99c5c:	e010      	b.n	99c80 <Cl_disinf_controller+0x280>
						// Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					 }
					 else if (flag_na == 1)
   99c5e:	4b2e      	ldr	r3, [pc, #184]	; (99d18 <Cl_disinf_controller+0x318>)
   99c60:	781b      	ldrb	r3, [r3, #0]
   99c62:	2b01      	cmp	r3, #1
   99c64:	d10c      	bne.n	99c80 <Cl_disinf_controller+0x280>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   99c66:	2300      	movs	r3, #0
   99c68:	9300      	str	r3, [sp, #0]
   99c6a:	f04f 0300 	mov.w	r3, #0
   99c6e:	f04f 0200 	mov.w	r2, #0
   99c72:	2101      	movs	r1, #1
   99c74:	2029      	movs	r0, #41	; 0x29
   99c76:	4c30      	ldr	r4, [pc, #192]	; (99d38 <Cl_disinf_controller+0x338>)
   99c78:	47a0      	blx	r4
   99c7a:	4603      	mov	r3, r0
   99c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  //Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
					 }
					 cl_disinfstate = CL_DISINF_STATE_INTER;
   99c80:	4b1f      	ldr	r3, [pc, #124]	; (99d00 <Cl_disinf_controller+0x300>)
   99c82:	2210      	movs	r2, #16
   99c84:	701a      	strb	r2, [r3, #0]
					 command = CON_TX_COMMAND_DISINF_PAUSED;
   99c86:	2338      	movs	r3, #56	; 0x38
   99c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					  data = (Cl_Uint8Type)0;
   99c8c:	2300      	movs	r3, #0
   99c8e:	76fb      	strb	r3, [r7, #27]
					  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99c90:	f107 011b 	add.w	r1, r7, #27
   99c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99c98:	2200      	movs	r2, #0
   99c9a:	4618      	mov	r0, r3
   99c9c:	4b1b      	ldr	r3, [pc, #108]	; (99d0c <Cl_disinf_controller+0x30c>)
   99c9e:	4798      	blx	r3
   99ca0:	4603      	mov	r3, r0
   99ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					
					// cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
					// command = CON_TX_COMMAND_DISINF_RESUMED;
					// data = (Cl_Uint8Type)0;
					// Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   99ca6:	bf00      	nop
					default:break;
					
							
				}
			
			break;
   99ca8:	f000 bdb5 	b.w	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   99cac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99cb0:	2b13      	cmp	r3, #19
   99cb2:	d005      	beq.n	99cc0 <Cl_disinf_controller+0x2c0>
   99cb4:	2b25      	cmp	r3, #37	; 0x25
   99cb6:	d009      	beq.n	99ccc <Cl_disinf_controller+0x2cc>
   99cb8:	2b0f      	cmp	r3, #15
   99cba:	d01a      	beq.n	99cf2 <Cl_disinf_controller+0x2f2>
							}
						}
					break;
							
				}
			break;
   99cbc:	f000 bdab 	b.w	9a816 <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   99cc0:	4b17      	ldr	r3, [pc, #92]	; (99d20 <Cl_disinf_controller+0x320>)
   99cc2:	4798      	blx	r3
   99cc4:	4603      	mov	r3, r0
   99cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   99cca:	e0b6      	b.n	99e3a <Cl_disinf_controller+0x43a>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   99ccc:	4b1b      	ldr	r3, [pc, #108]	; (99d3c <Cl_disinf_controller+0x33c>)
   99cce:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   99cd0:	4b1b      	ldr	r3, [pc, #108]	; (99d40 <Cl_disinf_controller+0x340>)
   99cd2:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   99cd4:	4b1b      	ldr	r3, [pc, #108]	; (99d44 <Cl_disinf_controller+0x344>)
   99cd6:	4798      	blx	r3
					if (alarm_flag == 1)
   99cd8:	4b1b      	ldr	r3, [pc, #108]	; (99d48 <Cl_disinf_controller+0x348>)
   99cda:	781b      	ldrb	r3, [r3, #0]
   99cdc:	b2db      	uxtb	r3, r3
   99cde:	2b01      	cmp	r3, #1
   99ce0:	f040 80aa 	bne.w	99e38 <Cl_disinf_controller+0x438>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   99ce4:	4b06      	ldr	r3, [pc, #24]	; (99d00 <Cl_disinf_controller+0x300>)
   99ce6:	2205      	movs	r2, #5
   99ce8:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   99cea:	4b17      	ldr	r3, [pc, #92]	; (99d48 <Cl_disinf_controller+0x348>)
   99cec:	2200      	movs	r2, #0
   99cee:	701a      	strb	r2, [r3, #0]
					}
					break;
   99cf0:	e0a2      	b.n	99e38 <Cl_disinf_controller+0x438>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99cf2:	4b16      	ldr	r3, [pc, #88]	; (99d4c <Cl_disinf_controller+0x34c>)
   99cf4:	2200      	movs	r2, #0
   99cf6:	801a      	strh	r2, [r3, #0]
   99cf8:	e099      	b.n	99e2e <Cl_disinf_controller+0x42e>
   99cfa:	bf00      	nop
   99cfc:	0009a869 	.word	0x0009a869
   99d00:	200727af 	.word	0x200727af
   99d04:	20072f88 	.word	0x20072f88
   99d08:	00097d7d 	.word	0x00097d7d
   99d0c:	0009926d 	.word	0x0009926d
   99d10:	0008a479 	.word	0x0008a479
   99d14:	2007262b 	.word	0x2007262b
   99d18:	2007262d 	.word	0x2007262d
   99d1c:	0009ad21 	.word	0x0009ad21
   99d20:	0009ae75 	.word	0x0009ae75
   99d24:	000918fd 	.word	0x000918fd
   99d28:	200727b0 	.word	0x200727b0
   99d2c:	0009b1a1 	.word	0x0009b1a1
   99d30:	0009b4e5 	.word	0x0009b4e5
   99d34:	0009aa9d 	.word	0x0009aa9d
   99d38:	00082f01 	.word	0x00082f01
   99d3c:	00097799 	.word	0x00097799
   99d40:	000977d5 	.word	0x000977d5
   99d44:	0009ac81 	.word	0x0009ac81
   99d48:	200727ad 	.word	0x200727ad
   99d4c:	2007334c 	.word	0x2007334c
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   99d50:	4ba1      	ldr	r3, [pc, #644]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99d52:	881b      	ldrh	r3, [r3, #0]
   99d54:	4619      	mov	r1, r3
   99d56:	4aa1      	ldr	r2, [pc, #644]	; (99fdc <Cl_disinf_controller+0x5dc>)
   99d58:	460b      	mov	r3, r1
   99d5a:	00db      	lsls	r3, r3, #3
   99d5c:	1a5b      	subs	r3, r3, r1
   99d5e:	4413      	add	r3, r2
   99d60:	7818      	ldrb	r0, [r3, #0]
   99d62:	4b9d      	ldr	r3, [pc, #628]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99d64:	881b      	ldrh	r3, [r3, #0]
   99d66:	461a      	mov	r2, r3
   99d68:	4613      	mov	r3, r2
   99d6a:	00db      	lsls	r3, r3, #3
   99d6c:	1a9b      	subs	r3, r3, r2
   99d6e:	4a9b      	ldr	r2, [pc, #620]	; (99fdc <Cl_disinf_controller+0x5dc>)
   99d70:	4413      	add	r3, r2
   99d72:	3302      	adds	r3, #2
   99d74:	4619      	mov	r1, r3
   99d76:	4b9a      	ldr	r3, [pc, #616]	; (99fe0 <Cl_disinf_controller+0x5e0>)
   99d78:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   99d7a:	4b97      	ldr	r3, [pc, #604]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99d7c:	881b      	ldrh	r3, [r3, #0]
   99d7e:	4619      	mov	r1, r3
   99d80:	4a96      	ldr	r2, [pc, #600]	; (99fdc <Cl_disinf_controller+0x5dc>)
   99d82:	460b      	mov	r3, r1
   99d84:	00db      	lsls	r3, r3, #3
   99d86:	1a5b      	subs	r3, r3, r1
   99d88:	4413      	add	r3, r2
   99d8a:	3302      	adds	r3, #2
   99d8c:	781b      	ldrb	r3, [r3, #0]
   99d8e:	2b00      	cmp	r3, #0
   99d90:	d015      	beq.n	99dbe <Cl_disinf_controller+0x3be>
							{
								sv_cntrl_setredalarm();
   99d92:	4b94      	ldr	r3, [pc, #592]	; (99fe4 <Cl_disinf_controller+0x5e4>)
   99d94:	4798      	blx	r3
								sv_cntrl_buzzer();
   99d96:	4b94      	ldr	r3, [pc, #592]	; (99fe8 <Cl_disinf_controller+0x5e8>)
   99d98:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   99d9a:	2208      	movs	r2, #8
   99d9c:	4993      	ldr	r1, [pc, #588]	; (99fec <Cl_disinf_controller+0x5ec>)
   99d9e:	2018      	movs	r0, #24
   99da0:	4b93      	ldr	r3, [pc, #588]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99da2:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   99da4:	4b93      	ldr	r3, [pc, #588]	; (99ff4 <Cl_disinf_controller+0x5f4>)
   99da6:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   99da8:	4b93      	ldr	r3, [pc, #588]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99daa:	2210      	movs	r2, #16
   99dac:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   99dae:	4b93      	ldr	r3, [pc, #588]	; (99ffc <Cl_disinf_controller+0x5fc>)
   99db0:	2201      	movs	r2, #1
   99db2:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   99db4:	4b88      	ldr	r3, [pc, #544]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99db6:	2200      	movs	r2, #0
   99db8:	801a      	strh	r2, [r3, #0]
								break;
   99dba:	bf00      	nop
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   99dbc:	e03d      	b.n	99e3a <Cl_disinf_controller+0x43a>
								alarm_flag1 = 1;
								tempcount=0;
								break;
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   99dbe:	4b86      	ldr	r3, [pc, #536]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99dc0:	881b      	ldrh	r3, [r3, #0]
   99dc2:	2b0b      	cmp	r3, #11
   99dc4:	d12d      	bne.n	99e22 <Cl_disinf_controller+0x422>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   99dc6:	4b84      	ldr	r3, [pc, #528]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99dc8:	881b      	ldrh	r3, [r3, #0]
   99dca:	4619      	mov	r1, r3
   99dcc:	4a83      	ldr	r2, [pc, #524]	; (99fdc <Cl_disinf_controller+0x5dc>)
   99dce:	460b      	mov	r3, r1
   99dd0:	00db      	lsls	r3, r3, #3
   99dd2:	1a5b      	subs	r3, r3, r1
   99dd4:	4413      	add	r3, r2
   99dd6:	3302      	adds	r3, #2
   99dd8:	781b      	ldrb	r3, [r3, #0]
   99dda:	f083 0301 	eor.w	r3, r3, #1
   99dde:	b2db      	uxtb	r3, r3
   99de0:	2b00      	cmp	r3, #0
   99de2:	d01e      	beq.n	99e22 <Cl_disinf_controller+0x422>
								{
									sv_cntrl_resetredalarm();
   99de4:	4b86      	ldr	r3, [pc, #536]	; (9a000 <Cl_disinf_controller+0x600>)
   99de6:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   99de8:	4b86      	ldr	r3, [pc, #536]	; (9a004 <Cl_disinf_controller+0x604>)
   99dea:	4798      	blx	r3
									alarm_flag = 1;
   99dec:	4b86      	ldr	r3, [pc, #536]	; (9a008 <Cl_disinf_controller+0x608>)
   99dee:	2201      	movs	r2, #1
   99df0:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   99df2:	4b82      	ldr	r3, [pc, #520]	; (99ffc <Cl_disinf_controller+0x5fc>)
   99df4:	781b      	ldrb	r3, [r3, #0]
   99df6:	b2db      	uxtb	r3, r3
   99df8:	2b00      	cmp	r3, #0
   99dfa:	d112      	bne.n	99e22 <Cl_disinf_controller+0x422>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   99dfc:	233b      	movs	r3, #59	; 0x3b
   99dfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   99e02:	2300      	movs	r3, #0
   99e04:	76fb      	strb	r3, [r7, #27]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99e06:	f107 011b 	add.w	r1, r7, #27
   99e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99e0e:	2200      	movs	r2, #0
   99e10:	4618      	mov	r0, r3
   99e12:	4b77      	ldr	r3, [pc, #476]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99e14:	4798      	blx	r3
   99e16:	4603      	mov	r3, r0
   99e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   99e1c:	4b76      	ldr	r3, [pc, #472]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99e1e:	2205      	movs	r2, #5
   99e20:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   99e22:	4b6d      	ldr	r3, [pc, #436]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99e24:	881b      	ldrh	r3, [r3, #0]
   99e26:	3301      	adds	r3, #1
   99e28:	b29a      	uxth	r2, r3
   99e2a:	4b6b      	ldr	r3, [pc, #428]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99e2c:	801a      	strh	r2, [r3, #0]
   99e2e:	4b6a      	ldr	r3, [pc, #424]	; (99fd8 <Cl_disinf_controller+0x5d8>)
   99e30:	881b      	ldrh	r3, [r3, #0]
   99e32:	2b0b      	cmp	r3, #11
   99e34:	d98c      	bls.n	99d50 <Cl_disinf_controller+0x350>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   99e36:	e000      	b.n	99e3a <Cl_disinf_controller+0x43a>
					if (alarm_flag == 1)
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
						alarm_flag = 0;
					}
					break;
   99e38:	bf00      	nop
							}
						}
					break;
							
				}
			break;
   99e3a:	f000 bcec 	b.w	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   99e3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99e42:	3b0c      	subs	r3, #12
   99e44:	2b03      	cmp	r3, #3
   99e46:	d854      	bhi.n	99ef2 <Cl_disinf_controller+0x4f2>
   99e48:	a201      	add	r2, pc, #4	; (adr r2, 99e50 <Cl_disinf_controller+0x450>)
   99e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99e4e:	bf00      	nop
   99e50:	00099ef3 	.word	0x00099ef3
   99e54:	00099ef3 	.word	0x00099ef3
   99e58:	00099ef3 	.word	0x00099ef3
   99e5c:	00099e61 	.word	0x00099e61
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   99e60:	4b6a      	ldr	r3, [pc, #424]	; (9a00c <Cl_disinf_controller+0x60c>)
   99e62:	881b      	ldrh	r3, [r3, #0]
   99e64:	3301      	adds	r3, #1
   99e66:	b29a      	uxth	r2, r3
   99e68:	4b68      	ldr	r3, [pc, #416]	; (9a00c <Cl_disinf_controller+0x60c>)
   99e6a:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   99e6c:	4b67      	ldr	r3, [pc, #412]	; (9a00c <Cl_disinf_controller+0x60c>)
   99e6e:	881b      	ldrh	r3, [r3, #0]
   99e70:	2b03      	cmp	r3, #3
   99e72:	d902      	bls.n	99e7a <Cl_disinf_controller+0x47a>
							{
								Cl_disinfOpenFillTimeOut = true;
   99e74:	4b66      	ldr	r3, [pc, #408]	; (9a010 <Cl_disinf_controller+0x610>)
   99e76:	2201      	movs	r2, #1
   99e78:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   99e7a:	4b65      	ldr	r3, [pc, #404]	; (9a010 <Cl_disinf_controller+0x610>)
   99e7c:	781b      	ldrb	r3, [r3, #0]
   99e7e:	2b00      	cmp	r3, #0
   99e80:	d03a      	beq.n	99ef8 <Cl_disinf_controller+0x4f8>
							{
								if (flag_hotcitric == 1)
   99e82:	4b64      	ldr	r3, [pc, #400]	; (9a014 <Cl_disinf_controller+0x614>)
   99e84:	781b      	ldrb	r3, [r3, #0]
   99e86:	2b01      	cmp	r3, #1
   99e88:	d119      	bne.n	99ebe <Cl_disinf_controller+0x4be>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   99e8a:	2001      	movs	r0, #1
   99e8c:	4b62      	ldr	r3, [pc, #392]	; (9a018 <Cl_disinf_controller+0x618>)
   99e8e:	4798      	blx	r3
   99e90:	4603      	mov	r3, r0
   99e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   99e96:	2002      	movs	r0, #2
   99e98:	4b5f      	ldr	r3, [pc, #380]	; (9a018 <Cl_disinf_controller+0x618>)
   99e9a:	4798      	blx	r3
   99e9c:	4603      	mov	r3, r0
   99e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   99ea2:	2203      	movs	r2, #3
   99ea4:	495d      	ldr	r1, [pc, #372]	; (9a01c <Cl_disinf_controller+0x61c>)
   99ea6:	2018      	movs	r0, #24
   99ea8:	4b51      	ldr	r3, [pc, #324]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99eaa:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   99eac:	4b5c      	ldr	r3, [pc, #368]	; (9a020 <Cl_disinf_controller+0x620>)
   99eae:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   99eb0:	4b51      	ldr	r3, [pc, #324]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99eb2:	2206      	movs	r2, #6
   99eb4:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   99eb6:	4b55      	ldr	r3, [pc, #340]	; (9a00c <Cl_disinf_controller+0x60c>)
   99eb8:	2200      	movs	r2, #0
   99eba:	801a      	strh	r2, [r3, #0]
							}
								
							}

							
							break;
   99ebc:	e01c      	b.n	99ef8 <Cl_disinf_controller+0x4f8>
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
								sec_count =0;
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   99ebe:	2001      	movs	r0, #1
   99ec0:	4b55      	ldr	r3, [pc, #340]	; (9a018 <Cl_disinf_controller+0x618>)
   99ec2:	4798      	blx	r3
   99ec4:	4603      	mov	r3, r0
   99ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   99eca:	2002      	movs	r0, #2
   99ecc:	4b52      	ldr	r3, [pc, #328]	; (9a018 <Cl_disinf_controller+0x618>)
   99ece:	4798      	blx	r3
   99ed0:	4603      	mov	r3, r0
   99ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   99ed6:	2203      	movs	r2, #3
   99ed8:	4950      	ldr	r1, [pc, #320]	; (9a01c <Cl_disinf_controller+0x61c>)
   99eda:	2018      	movs	r0, #24
   99edc:	4b44      	ldr	r3, [pc, #272]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99ede:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   99ee0:	4b50      	ldr	r3, [pc, #320]	; (9a024 <Cl_disinf_controller+0x624>)
   99ee2:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   99ee4:	4b44      	ldr	r3, [pc, #272]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99ee6:	2206      	movs	r2, #6
   99ee8:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   99eea:	4b48      	ldr	r3, [pc, #288]	; (9a00c <Cl_disinf_controller+0x60c>)
   99eec:	2200      	movs	r2, #0
   99eee:	801a      	strh	r2, [r3, #0]
							}
								
							}

							
							break;
   99ef0:	e002      	b.n	99ef8 <Cl_disinf_controller+0x4f8>
							default:break;
   99ef2:	bf00      	nop
   99ef4:	f000 bc8f 	b.w	9a816 <Cl_disinf_controller+0xe16>
							}
								
							}

							
							break;
   99ef8:	bf00      	nop
							default:break;
						}
			break;
   99efa:	f000 bc8c 	b.w	9a816 <Cl_disinf_controller+0xe16>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   99efe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   99f02:	3b0c      	subs	r3, #12
   99f04:	2b03      	cmp	r3, #3
   99f06:	f200 80e3 	bhi.w	9a0d0 <Cl_disinf_controller+0x6d0>
   99f0a:	a201      	add	r2, pc, #4	; (adr r2, 99f10 <Cl_disinf_controller+0x510>)
   99f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99f10:	0009a0d1 	.word	0x0009a0d1
   99f14:	0009a0d1 	.word	0x0009a0d1
   99f18:	0009a0d1 	.word	0x0009a0d1
   99f1c:	00099f21 	.word	0x00099f21
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   99f20:	4b41      	ldr	r3, [pc, #260]	; (9a028 <Cl_disinf_controller+0x628>)
   99f22:	681b      	ldr	r3, [r3, #0]
   99f24:	3301      	adds	r3, #1
   99f26:	4a40      	ldr	r2, [pc, #256]	; (9a028 <Cl_disinf_controller+0x628>)
   99f28:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   99f2a:	4b40      	ldr	r3, [pc, #256]	; (9a02c <Cl_disinf_controller+0x62c>)
   99f2c:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   99f2e:	4b3e      	ldr	r3, [pc, #248]	; (9a028 <Cl_disinf_controller+0x628>)
   99f30:	681b      	ldr	r3, [r3, #0]
   99f32:	2b3c      	cmp	r3, #60	; 0x3c
   99f34:	d101      	bne.n	99f3a <Cl_disinf_controller+0x53a>
							{
						
								UpdateDisinfMinuteTick();
   99f36:	4b3e      	ldr	r3, [pc, #248]	; (9a030 <Cl_disinf_controller+0x630>)
   99f38:	4798      	blx	r3
						
						
							}
							sec_count ++;
   99f3a:	4b34      	ldr	r3, [pc, #208]	; (9a00c <Cl_disinf_controller+0x60c>)
   99f3c:	881b      	ldrh	r3, [r3, #0]
   99f3e:	3301      	adds	r3, #1
   99f40:	b29a      	uxth	r2, r3
   99f42:	4b32      	ldr	r3, [pc, #200]	; (9a00c <Cl_disinf_controller+0x60c>)
   99f44:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1)
   99f46:	4b33      	ldr	r3, [pc, #204]	; (9a014 <Cl_disinf_controller+0x614>)
   99f48:	781b      	ldrb	r3, [r3, #0]
   99f4a:	2b01      	cmp	r3, #1
   99f4c:	d17a      	bne.n	9a044 <Cl_disinf_controller+0x644>
							{
								if(sec_count > 35)
   99f4e:	4b2f      	ldr	r3, [pc, #188]	; (9a00c <Cl_disinf_controller+0x60c>)
   99f50:	881b      	ldrh	r3, [r3, #0]
   99f52:	2b23      	cmp	r3, #35	; 0x23
   99f54:	f240 80be 	bls.w	9a0d4 <Cl_disinf_controller+0x6d4>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   99f58:	2203      	movs	r2, #3
   99f5a:	4936      	ldr	r1, [pc, #216]	; (9a034 <Cl_disinf_controller+0x634>)
   99f5c:	2018      	movs	r0, #24
   99f5e:	4b24      	ldr	r3, [pc, #144]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99f60:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   99f62:	4b35      	ldr	r3, [pc, #212]	; (9a038 <Cl_disinf_controller+0x638>)
   99f64:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   99f66:	2002      	movs	r0, #2
   99f68:	4b2b      	ldr	r3, [pc, #172]	; (9a018 <Cl_disinf_controller+0x618>)
   99f6a:	4798      	blx	r3
   99f6c:	4603      	mov	r3, r0
   99f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   99f72:	2001      	movs	r0, #1
   99f74:	4b28      	ldr	r3, [pc, #160]	; (9a018 <Cl_disinf_controller+0x618>)
   99f76:	4798      	blx	r3
   99f78:	4603      	mov	r3, r0
   99f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   99f7e:	2005      	movs	r0, #5
   99f80:	4b2e      	ldr	r3, [pc, #184]	; (9a03c <Cl_disinf_controller+0x63c>)
   99f82:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   99f84:	2339      	movs	r3, #57	; 0x39
   99f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   99f8a:	2302      	movs	r3, #2
   99f8c:	76fb      	strb	r3, [r7, #27]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   99f8e:	f107 011b 	add.w	r1, r7, #27
   99f92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99f96:	2201      	movs	r2, #1
   99f98:	4618      	mov	r0, r3
   99f9a:	4b15      	ldr	r3, [pc, #84]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99f9c:	4798      	blx	r3
   99f9e:	4603      	mov	r3, r0
   99fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(5);
   99fa4:	2005      	movs	r0, #5
   99fa6:	4b26      	ldr	r3, [pc, #152]	; (9a040 <Cl_disinf_controller+0x640>)
   99fa8:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   99faa:	2338      	movs	r3, #56	; 0x38
   99fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   99fb0:	2300      	movs	r3, #0
   99fb2:	76fb      	strb	r3, [r7, #27]
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   99fb4:	4b10      	ldr	r3, [pc, #64]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99fb6:	2207      	movs	r2, #7
   99fb8:	701a      	strb	r2, [r3, #0]
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   99fba:	f107 011b 	add.w	r1, r7, #27
   99fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   99fc2:	2200      	movs	r2, #0
   99fc4:	4618      	mov	r0, r3
   99fc6:	4b0a      	ldr	r3, [pc, #40]	; (99ff0 <Cl_disinf_controller+0x5f0>)
   99fc8:	4798      	blx	r3
   99fca:	4603      	mov	r3, r0
   99fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   99fd0:	4b09      	ldr	r3, [pc, #36]	; (99ff8 <Cl_disinf_controller+0x5f8>)
   99fd2:	2207      	movs	r2, #7
   99fd4:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   99fd6:	e07d      	b.n	9a0d4 <Cl_disinf_controller+0x6d4>
   99fd8:	2007334c 	.word	0x2007334c
   99fdc:	20070a68 	.word	0x20070a68
   99fe0:	00083095 	.word	0x00083095
   99fe4:	00097749 	.word	0x00097749
   99fe8:	00097785 	.word	0x00097785
   99fec:	000a58d8 	.word	0x000a58d8
   99ff0:	0009926d 	.word	0x0009926d
   99ff4:	0009abed 	.word	0x0009abed
   99ff8:	200727af 	.word	0x200727af
   99ffc:	200727ae 	.word	0x200727ae
   9a000:	00097799 	.word	0x00097799
   9a004:	000977d5 	.word	0x000977d5
   9a008:	200727ad 	.word	0x200727ad
   9a00c:	200727d8 	.word	0x200727d8
   9a010:	20070a66 	.word	0x20070a66
   9a014:	2007262b 	.word	0x2007262b
   9a018:	0009748d 	.word	0x0009748d
   9a01c:	000a58e0 	.word	0x000a58e0
   9a020:	00097921 	.word	0x00097921
   9a024:	000978f9 	.word	0x000978f9
   9a028:	200727b0 	.word	0x200727b0
   9a02c:	0009b1a1 	.word	0x0009b1a1
   9a030:	0009b4e5 	.word	0x0009b4e5
   9a034:	000a58e4 	.word	0x000a58e4
   9a038:	00097935 	.word	0x00097935
   9a03c:	00083379 	.word	0x00083379
   9a040:	000918fd 	.word	0x000918fd
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

								}
							}
							else if(sec_count > 80)
   9a044:	4bad      	ldr	r3, [pc, #692]	; (9a2fc <Cl_disinf_controller+0x8fc>)
   9a046:	881b      	ldrh	r3, [r3, #0]
   9a048:	2b50      	cmp	r3, #80	; 0x50
   9a04a:	d943      	bls.n	9a0d4 <Cl_disinf_controller+0x6d4>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9a04c:	2203      	movs	r2, #3
   9a04e:	49ac      	ldr	r1, [pc, #688]	; (9a300 <Cl_disinf_controller+0x900>)
   9a050:	2018      	movs	r0, #24
   9a052:	4bac      	ldr	r3, [pc, #688]	; (9a304 <Cl_disinf_controller+0x904>)
   9a054:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   9a056:	4bac      	ldr	r3, [pc, #688]	; (9a308 <Cl_disinf_controller+0x908>)
   9a058:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   9a05a:	4bac      	ldr	r3, [pc, #688]	; (9a30c <Cl_disinf_controller+0x90c>)
   9a05c:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9a05e:	2002      	movs	r0, #2
   9a060:	4bab      	ldr	r3, [pc, #684]	; (9a310 <Cl_disinf_controller+0x910>)
   9a062:	4798      	blx	r3
   9a064:	4603      	mov	r3, r0
   9a066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9a06a:	2001      	movs	r0, #1
   9a06c:	4ba8      	ldr	r3, [pc, #672]	; (9a310 <Cl_disinf_controller+0x910>)
   9a06e:	4798      	blx	r3
   9a070:	4603      	mov	r3, r0
   9a072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9a076:	2005      	movs	r0, #5
   9a078:	4ba6      	ldr	r3, [pc, #664]	; (9a314 <Cl_disinf_controller+0x914>)
   9a07a:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9a07c:	2339      	movs	r3, #57	; 0x39
   9a07e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   9a082:	2302      	movs	r3, #2
   9a084:	76fb      	strb	r3, [r7, #27]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9a086:	f107 011b 	add.w	r1, r7, #27
   9a08a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a08e:	2201      	movs	r2, #1
   9a090:	4618      	mov	r0, r3
   9a092:	4b9c      	ldr	r3, [pc, #624]	; (9a304 <Cl_disinf_controller+0x904>)
   9a094:	4798      	blx	r3
   9a096:	4603      	mov	r3, r0
   9a098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								cl_wait(5);
   9a09c:	2005      	movs	r0, #5
   9a09e:	4b9e      	ldr	r3, [pc, #632]	; (9a318 <Cl_disinf_controller+0x918>)
   9a0a0:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   9a0a2:	2338      	movs	r3, #56	; 0x38
   9a0a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   9a0a8:	2300      	movs	r3, #0
   9a0aa:	76fb      	strb	r3, [r7, #27]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9a0ac:	4b9b      	ldr	r3, [pc, #620]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a0ae:	2207      	movs	r2, #7
   9a0b0:	701a      	strb	r2, [r3, #0]
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9a0b2:	f107 011b 	add.w	r1, r7, #27
   9a0b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a0ba:	2200      	movs	r2, #0
   9a0bc:	4618      	mov	r0, r3
   9a0be:	4b91      	ldr	r3, [pc, #580]	; (9a304 <Cl_disinf_controller+0x904>)
   9a0c0:	4798      	blx	r3
   9a0c2:	4603      	mov	r3, r0
   9a0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9a0c8:	4b94      	ldr	r3, [pc, #592]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a0ca:	2207      	movs	r2, #7
   9a0cc:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   9a0ce:	e001      	b.n	9a0d4 <Cl_disinf_controller+0x6d4>
							default:break;
   9a0d0:	bf00      	nop
   9a0d2:	e3a0      	b.n	9a816 <Cl_disinf_controller+0xe16>
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9a0d4:	bf00      	nop
							default:break;
						}
			
			break;
   9a0d6:	e39e      	b.n	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9a0d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a0dc:	2b02      	cmp	r3, #2
   9a0de:	d000      	beq.n	9a0e2 <Cl_disinf_controller+0x6e2>
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
								default:break;
   9a0e0:	e058      	b.n	9a194 <Cl_disinf_controller+0x794>
			
						switch (cl_disinfevent)
						{
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9a0e2:	2002      	movs	r0, #2
   9a0e4:	4b8e      	ldr	r3, [pc, #568]	; (9a320 <Cl_disinf_controller+0x920>)
   9a0e6:	4798      	blx	r3
   9a0e8:	4603      	mov	r3, r0
   9a0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9a0ee:	2001      	movs	r0, #1
   9a0f0:	4b8b      	ldr	r3, [pc, #556]	; (9a320 <Cl_disinf_controller+0x920>)
   9a0f2:	4798      	blx	r3
   9a0f4:	4603      	mov	r3, r0
   9a0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,500);
   9a0fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   9a0fe:	2002      	movs	r0, #2
   9a100:	4b88      	ldr	r3, [pc, #544]	; (9a324 <Cl_disinf_controller+0x924>)
   9a102:	4798      	blx	r3
   9a104:	4603      	mov	r3, r0
   9a106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,400);
   9a10a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   9a10e:	2001      	movs	r0, #1
   9a110:	4b84      	ldr	r3, [pc, #528]	; (9a324 <Cl_disinf_controller+0x924>)
   9a112:	4798      	blx	r3
   9a114:	4603      	mov	r3, r0
   9a116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   9a11a:	4b83      	ldr	r3, [pc, #524]	; (9a328 <Cl_disinf_controller+0x928>)
   9a11c:	2201      	movs	r2, #1
   9a11e:	701a      	strb	r2, [r3, #0]
								Cl_bc_controller(BC_EVENT_START);
   9a120:	2004      	movs	r0, #4
   9a122:	4b7c      	ldr	r3, [pc, #496]	; (9a314 <Cl_disinf_controller+0x914>)
   9a124:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   9a126:	4b81      	ldr	r3, [pc, #516]	; (9a32c <Cl_disinf_controller+0x92c>)
   9a128:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   9a12a:	4b81      	ldr	r3, [pc, #516]	; (9a330 <Cl_disinf_controller+0x930>)
   9a12c:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9a12e:	4b81      	ldr	r3, [pc, #516]	; (9a334 <Cl_disinf_controller+0x934>)
   9a130:	781b      	ldrb	r3, [r3, #0]
   9a132:	2b01      	cmp	r3, #1
   9a134:	d105      	bne.n	9a142 <Cl_disinf_controller+0x742>
								{
									sv_cntrl_poweronheater();
   9a136:	4b80      	ldr	r3, [pc, #512]	; (9a338 <Cl_disinf_controller+0x938>)
   9a138:	4798      	blx	r3
									sv_cntrl_incheater(3500);
   9a13a:	f640 50ac 	movw	r0, #3500	; 0xdac
   9a13e:	4b7f      	ldr	r3, [pc, #508]	; (9a33c <Cl_disinf_controller+0x93c>)
   9a140:	4798      	blx	r3
								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9a142:	2002      	movs	r0, #2
   9a144:	4b7e      	ldr	r3, [pc, #504]	; (9a340 <Cl_disinf_controller+0x940>)
   9a146:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   9a148:	2003      	movs	r0, #3
   9a14a:	4b7d      	ldr	r3, [pc, #500]	; (9a340 <Cl_disinf_controller+0x940>)
   9a14c:	4798      	blx	r3
								sv_prop_startmixing();
   9a14e:	4b7d      	ldr	r3, [pc, #500]	; (9a344 <Cl_disinf_controller+0x944>)
   9a150:	4798      	blx	r3
								sec_count =0;
   9a152:	4b6a      	ldr	r3, [pc, #424]	; (9a2fc <Cl_disinf_controller+0x8fc>)
   9a154:	2200      	movs	r2, #0
   9a156:	801a      	strh	r2, [r3, #0]
								cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9a158:	4b70      	ldr	r3, [pc, #448]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a15a:	2211      	movs	r2, #17
   9a15c:	701a      	strb	r2, [r3, #0]
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9a15e:	2300      	movs	r3, #0
   9a160:	9300      	str	r3, [sp, #0]
   9a162:	f04f 0300 	mov.w	r3, #0
   9a166:	f04f 0200 	mov.w	r2, #0
   9a16a:	2100      	movs	r1, #0
   9a16c:	2029      	movs	r0, #41	; 0x29
   9a16e:	4c76      	ldr	r4, [pc, #472]	; (9a348 <Cl_disinf_controller+0x948>)
   9a170:	47a0      	blx	r4
   9a172:	4603      	mov	r3, r0
   9a174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9a178:	2300      	movs	r3, #0
   9a17a:	9300      	str	r3, [sp, #0]
   9a17c:	f04f 0300 	mov.w	r3, #0
   9a180:	f04f 0200 	mov.w	r2, #0
   9a184:	2100      	movs	r1, #0
   9a186:	202b      	movs	r0, #43	; 0x2b
   9a188:	4c6f      	ldr	r4, [pc, #444]	; (9a348 <Cl_disinf_controller+0x948>)
   9a18a:	47a0      	blx	r4
   9a18c:	4603      	mov	r3, r0
   9a18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   9a192:	bf00      	nop
								default:break;
						}
			
			break;
   9a194:	e33f      	b.n	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   9a196:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a19a:	2b13      	cmp	r3, #19
   9a19c:	d004      	beq.n	9a1a8 <Cl_disinf_controller+0x7a8>
   9a19e:	2b25      	cmp	r3, #37	; 0x25
   9a1a0:	d008      	beq.n	9a1b4 <Cl_disinf_controller+0x7b4>
   9a1a2:	2b0f      	cmp	r3, #15
   9a1a4:	d018      	beq.n	9a1d8 <Cl_disinf_controller+0x7d8>
						}
					}
								break;
					
						}
			break;
   9a1a6:	e336      	b.n	9a816 <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
				{
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9a1a8:	4b68      	ldr	r3, [pc, #416]	; (9a34c <Cl_disinf_controller+0x94c>)
   9a1aa:	4798      	blx	r3
   9a1ac:	4603      	mov	r3, r0
   9a1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9a1b2:	e088      	b.n	9a2c6 <Cl_disinf_controller+0x8c6>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9a1b4:	4b66      	ldr	r3, [pc, #408]	; (9a350 <Cl_disinf_controller+0x950>)
   9a1b6:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9a1b8:	4b66      	ldr	r3, [pc, #408]	; (9a354 <Cl_disinf_controller+0x954>)
   9a1ba:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9a1bc:	4b66      	ldr	r3, [pc, #408]	; (9a358 <Cl_disinf_controller+0x958>)
   9a1be:	4798      	blx	r3
					if (alarm_flag == 1)
   9a1c0:	4b66      	ldr	r3, [pc, #408]	; (9a35c <Cl_disinf_controller+0x95c>)
   9a1c2:	781b      	ldrb	r3, [r3, #0]
   9a1c4:	b2db      	uxtb	r3, r3
   9a1c6:	2b01      	cmp	r3, #1
   9a1c8:	d17c      	bne.n	9a2c4 <Cl_disinf_controller+0x8c4>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9a1ca:	4b54      	ldr	r3, [pc, #336]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a1cc:	2208      	movs	r2, #8
   9a1ce:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9a1d0:	4b62      	ldr	r3, [pc, #392]	; (9a35c <Cl_disinf_controller+0x95c>)
   9a1d2:	2200      	movs	r2, #0
   9a1d4:	701a      	strb	r2, [r3, #0]
					}
					break;
   9a1d6:	e075      	b.n	9a2c4 <Cl_disinf_controller+0x8c4>
								 
					case EVENT_DISINF_TICK_SECOND:
					for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a1d8:	4b61      	ldr	r3, [pc, #388]	; (9a360 <Cl_disinf_controller+0x960>)
   9a1da:	2200      	movs	r2, #0
   9a1dc:	801a      	strh	r2, [r3, #0]
   9a1de:	e06c      	b.n	9a2ba <Cl_disinf_controller+0x8ba>
					{
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
						Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9a1e0:	4b5f      	ldr	r3, [pc, #380]	; (9a360 <Cl_disinf_controller+0x960>)
   9a1e2:	881b      	ldrh	r3, [r3, #0]
   9a1e4:	4619      	mov	r1, r3
   9a1e6:	4a5f      	ldr	r2, [pc, #380]	; (9a364 <Cl_disinf_controller+0x964>)
   9a1e8:	460b      	mov	r3, r1
   9a1ea:	00db      	lsls	r3, r3, #3
   9a1ec:	1a5b      	subs	r3, r3, r1
   9a1ee:	4413      	add	r3, r2
   9a1f0:	7818      	ldrb	r0, [r3, #0]
   9a1f2:	4b5b      	ldr	r3, [pc, #364]	; (9a360 <Cl_disinf_controller+0x960>)
   9a1f4:	881b      	ldrh	r3, [r3, #0]
   9a1f6:	461a      	mov	r2, r3
   9a1f8:	4613      	mov	r3, r2
   9a1fa:	00db      	lsls	r3, r3, #3
   9a1fc:	1a9b      	subs	r3, r3, r2
   9a1fe:	4a59      	ldr	r2, [pc, #356]	; (9a364 <Cl_disinf_controller+0x964>)
   9a200:	4413      	add	r3, r2
   9a202:	3302      	adds	r3, #2
   9a204:	4619      	mov	r1, r3
   9a206:	4b58      	ldr	r3, [pc, #352]	; (9a368 <Cl_disinf_controller+0x968>)
   9a208:	4798      	blx	r3
					 
						if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9a20a:	4b55      	ldr	r3, [pc, #340]	; (9a360 <Cl_disinf_controller+0x960>)
   9a20c:	881b      	ldrh	r3, [r3, #0]
   9a20e:	4619      	mov	r1, r3
   9a210:	4a54      	ldr	r2, [pc, #336]	; (9a364 <Cl_disinf_controller+0x964>)
   9a212:	460b      	mov	r3, r1
   9a214:	00db      	lsls	r3, r3, #3
   9a216:	1a5b      	subs	r3, r3, r1
   9a218:	4413      	add	r3, r2
   9a21a:	3302      	adds	r3, #2
   9a21c:	781b      	ldrb	r3, [r3, #0]
   9a21e:	2b00      	cmp	r3, #0
   9a220:	d015      	beq.n	9a24e <Cl_disinf_controller+0x84e>
						{
							sv_cntrl_setredalarm();
   9a222:	4b52      	ldr	r3, [pc, #328]	; (9a36c <Cl_disinf_controller+0x96c>)
   9a224:	4798      	blx	r3
							sv_cntrl_buzzer();
   9a226:	4b52      	ldr	r3, [pc, #328]	; (9a370 <Cl_disinf_controller+0x970>)
   9a228:	4798      	blx	r3
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9a22a:	2208      	movs	r2, #8
   9a22c:	4951      	ldr	r1, [pc, #324]	; (9a374 <Cl_disinf_controller+0x974>)
   9a22e:	2018      	movs	r0, #24
   9a230:	4b34      	ldr	r3, [pc, #208]	; (9a304 <Cl_disinf_controller+0x904>)
   9a232:	4798      	blx	r3
							Cl_Disinf_StopDisinf();
   9a234:	4b50      	ldr	r3, [pc, #320]	; (9a378 <Cl_disinf_controller+0x978>)
   9a236:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9a238:	4b38      	ldr	r3, [pc, #224]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a23a:	2211      	movs	r2, #17
   9a23c:	701a      	strb	r2, [r3, #0]
							alarm_flag1 = 1;
   9a23e:	4b4f      	ldr	r3, [pc, #316]	; (9a37c <Cl_disinf_controller+0x97c>)
   9a240:	2201      	movs	r2, #1
   9a242:	701a      	strb	r2, [r3, #0]
							tempcount=0;
   9a244:	4b46      	ldr	r3, [pc, #280]	; (9a360 <Cl_disinf_controller+0x960>)
   9a246:	2200      	movs	r2, #0
   9a248:	801a      	strh	r2, [r3, #0]
							break;
   9a24a:	bf00      	nop
								//Cl_Disinf_UpdateTimeInfo();
								
							}
						}
					}
								break;
   9a24c:	e03b      	b.n	9a2c6 <Cl_disinf_controller+0x8c6>
							alarm_flag1 = 1;
							tempcount=0;
							break;
						}
						
						else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9a24e:	4b44      	ldr	r3, [pc, #272]	; (9a360 <Cl_disinf_controller+0x960>)
   9a250:	881b      	ldrh	r3, [r3, #0]
   9a252:	2b0b      	cmp	r3, #11
   9a254:	d12b      	bne.n	9a2ae <Cl_disinf_controller+0x8ae>
						{
							if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9a256:	4b42      	ldr	r3, [pc, #264]	; (9a360 <Cl_disinf_controller+0x960>)
   9a258:	881b      	ldrh	r3, [r3, #0]
   9a25a:	4619      	mov	r1, r3
   9a25c:	4a41      	ldr	r2, [pc, #260]	; (9a364 <Cl_disinf_controller+0x964>)
   9a25e:	460b      	mov	r3, r1
   9a260:	00db      	lsls	r3, r3, #3
   9a262:	1a5b      	subs	r3, r3, r1
   9a264:	4413      	add	r3, r2
   9a266:	3302      	adds	r3, #2
   9a268:	781b      	ldrb	r3, [r3, #0]
   9a26a:	f083 0301 	eor.w	r3, r3, #1
   9a26e:	b2db      	uxtb	r3, r3
   9a270:	2b00      	cmp	r3, #0
   9a272:	d01c      	beq.n	9a2ae <Cl_disinf_controller+0x8ae>
							{
					 
								sv_cntrl_resetredalarm();
   9a274:	4b36      	ldr	r3, [pc, #216]	; (9a350 <Cl_disinf_controller+0x950>)
   9a276:	4798      	blx	r3
								sv_cntrl_nobuzzer();
   9a278:	4b36      	ldr	r3, [pc, #216]	; (9a354 <Cl_disinf_controller+0x954>)
   9a27a:	4798      	blx	r3
								alarm_flag = 1;
   9a27c:	4b37      	ldr	r3, [pc, #220]	; (9a35c <Cl_disinf_controller+0x95c>)
   9a27e:	2201      	movs	r2, #1
   9a280:	701a      	strb	r2, [r3, #0]
								if (alarm_flag1 == 0)
   9a282:	4b3e      	ldr	r3, [pc, #248]	; (9a37c <Cl_disinf_controller+0x97c>)
   9a284:	781b      	ldrb	r3, [r3, #0]
   9a286:	b2db      	uxtb	r3, r3
   9a288:	2b00      	cmp	r3, #0
   9a28a:	d110      	bne.n	9a2ae <Cl_disinf_controller+0x8ae>
								{
								 command = CON_TX_COMMAND_DISINF_RESUMED;
   9a28c:	233b      	movs	r3, #59	; 0x3b
   9a28e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9a292:	f107 011b 	add.w	r1, r7, #27
   9a296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a29a:	2200      	movs	r2, #0
   9a29c:	4618      	mov	r0, r3
   9a29e:	4b19      	ldr	r3, [pc, #100]	; (9a304 <Cl_disinf_controller+0x904>)
   9a2a0:	4798      	blx	r3
   9a2a2:	4603      	mov	r3, r0
   9a2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9a2a8:	4b1c      	ldr	r3, [pc, #112]	; (9a31c <Cl_disinf_controller+0x91c>)
   9a2aa:	2208      	movs	r2, #8
   9a2ac:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
								 
					case EVENT_DISINF_TICK_SECOND:
					for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a2ae:	4b2c      	ldr	r3, [pc, #176]	; (9a360 <Cl_disinf_controller+0x960>)
   9a2b0:	881b      	ldrh	r3, [r3, #0]
   9a2b2:	3301      	adds	r3, #1
   9a2b4:	b29a      	uxth	r2, r3
   9a2b6:	4b2a      	ldr	r3, [pc, #168]	; (9a360 <Cl_disinf_controller+0x960>)
   9a2b8:	801a      	strh	r2, [r3, #0]
   9a2ba:	4b29      	ldr	r3, [pc, #164]	; (9a360 <Cl_disinf_controller+0x960>)
   9a2bc:	881b      	ldrh	r3, [r3, #0]
   9a2be:	2b0b      	cmp	r3, #11
   9a2c0:	d98e      	bls.n	9a1e0 <Cl_disinf_controller+0x7e0>
								//Cl_Disinf_UpdateTimeInfo();
								
							}
						}
					}
								break;
   9a2c2:	e000      	b.n	9a2c6 <Cl_disinf_controller+0x8c6>
					if (alarm_flag == 1)
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
						alarm_flag = 0;
					}
					break;
   9a2c4:	bf00      	nop
						}
					}
								break;
					
						}
			break;
   9a2c6:	e2a6      	b.n	9a816 <Cl_disinf_controller+0xe16>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   9a2c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a2cc:	3b0c      	subs	r3, #12
   9a2ce:	2b07      	cmp	r3, #7
   9a2d0:	f200 80e6 	bhi.w	9a4a0 <Cl_disinf_controller+0xaa0>
   9a2d4:	a201      	add	r2, pc, #4	; (adr r2, 9a2dc <Cl_disinf_controller+0x8dc>)
   9a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a2da:	bf00      	nop
   9a2dc:	0009a4a1 	.word	0x0009a4a1
   9a2e0:	0009a4a1 	.word	0x0009a4a1
   9a2e4:	0009a381 	.word	0x0009a381
   9a2e8:	0009a39b 	.word	0x0009a39b
   9a2ec:	0009a4a1 	.word	0x0009a4a1
   9a2f0:	0009a4a1 	.word	0x0009a4a1
   9a2f4:	0009a4a1 	.word	0x0009a4a1
   9a2f8:	0009a475 	.word	0x0009a475
   9a2fc:	200727d8 	.word	0x200727d8
   9a300:	000a58e4 	.word	0x000a58e4
   9a304:	0009926d 	.word	0x0009926d
   9a308:	0009790d 	.word	0x0009790d
   9a30c:	00097935 	.word	0x00097935
   9a310:	0009748d 	.word	0x0009748d
   9a314:	00083379 	.word	0x00083379
   9a318:	000918fd 	.word	0x000918fd
   9a31c:	200727af 	.word	0x200727af
   9a320:	00097451 	.word	0x00097451
   9a324:	00097569 	.word	0x00097569
   9a328:	200727da 	.word	0x200727da
   9a32c:	00097665 	.word	0x00097665
   9a330:	0009769d 	.word	0x0009769d
   9a334:	2007262b 	.word	0x2007262b
   9a338:	000974c9 	.word	0x000974c9
   9a33c:	000975d1 	.word	0x000975d1
   9a340:	000974f1 	.word	0x000974f1
   9a344:	00097899 	.word	0x00097899
   9a348:	00082f01 	.word	0x00082f01
   9a34c:	0009ae75 	.word	0x0009ae75
   9a350:	00097799 	.word	0x00097799
   9a354:	000977d5 	.word	0x000977d5
   9a358:	0009ac81 	.word	0x0009ac81
   9a35c:	200727ad 	.word	0x200727ad
   9a360:	2007334c 	.word	0x2007334c
   9a364:	20070a68 	.word	0x20070a68
   9a368:	00083095 	.word	0x00083095
   9a36c:	00097749 	.word	0x00097749
   9a370:	00097785 	.word	0x00097785
   9a374:	000a58d8 	.word	0x000a58d8
   9a378:	0009abed 	.word	0x0009abed
   9a37c:	200727ae 	.word	0x200727ae
							case EVENT_DISINF_TICK_50MS:
							break;
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
								if (avgtemp2_dummy > 75)
   9a380:	4bb9      	ldr	r3, [pc, #740]	; (9a668 <Cl_disinf_controller+0xc68>)
   9a382:	681a      	ldr	r2, [r3, #0]
   9a384:	4bb9      	ldr	r3, [pc, #740]	; (9a66c <Cl_disinf_controller+0xc6c>)
   9a386:	49ba      	ldr	r1, [pc, #744]	; (9a670 <Cl_disinf_controller+0xc70>)
   9a388:	4610      	mov	r0, r2
   9a38a:	4798      	blx	r3
   9a38c:	4603      	mov	r3, r0
   9a38e:	2b00      	cmp	r3, #0
   9a390:	d100      	bne.n	9a394 <Cl_disinf_controller+0x994>
								{
									sv_cntrl_poweroffheater();
								}
							break;
   9a392:	e088      	b.n	9a4a6 <Cl_disinf_controller+0xaa6>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
								if (avgtemp2_dummy > 75)
								{
									sv_cntrl_poweroffheater();
   9a394:	4bb7      	ldr	r3, [pc, #732]	; (9a674 <Cl_disinf_controller+0xc74>)
   9a396:	4798      	blx	r3
								}
							break;
   9a398:	e085      	b.n	9a4a6 <Cl_disinf_controller+0xaa6>
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   9a39a:	4bb7      	ldr	r3, [pc, #732]	; (9a678 <Cl_disinf_controller+0xc78>)
   9a39c:	4798      	blx	r3
							Cl_disinfsecondscounter++;
   9a39e:	4bb7      	ldr	r3, [pc, #732]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a3a0:	681b      	ldr	r3, [r3, #0]
   9a3a2:	3301      	adds	r3, #1
   9a3a4:	4ab5      	ldr	r2, [pc, #724]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a3a6:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9a3a8:	4bb5      	ldr	r3, [pc, #724]	; (9a680 <Cl_disinf_controller+0xc80>)
   9a3aa:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9a3ac:	4bb3      	ldr	r3, [pc, #716]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a3ae:	681b      	ldr	r3, [r3, #0]
   9a3b0:	2b3c      	cmp	r3, #60	; 0x3c
   9a3b2:	d101      	bne.n	9a3b8 <Cl_disinf_controller+0x9b8>
							{
								UpdateDisinfMinuteTick();	
   9a3b4:	4bb3      	ldr	r3, [pc, #716]	; (9a684 <Cl_disinf_controller+0xc84>)
   9a3b6:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   9a3b8:	4bb3      	ldr	r3, [pc, #716]	; (9a688 <Cl_disinf_controller+0xc88>)
   9a3ba:	681b      	ldr	r3, [r3, #0]
   9a3bc:	2b0f      	cmp	r3, #15
   9a3be:	dd71      	ble.n	9a4a4 <Cl_disinf_controller+0xaa4>
							{
								Cl_Disinf_StopDisinf();
   9a3c0:	4bb2      	ldr	r3, [pc, #712]	; (9a68c <Cl_disinf_controller+0xc8c>)
   9a3c2:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9a3c4:	2002      	movs	r0, #2
   9a3c6:	4bb2      	ldr	r3, [pc, #712]	; (9a690 <Cl_disinf_controller+0xc90>)
   9a3c8:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9a3ca:	2003      	movs	r0, #3
   9a3cc:	4bb0      	ldr	r3, [pc, #704]	; (9a690 <Cl_disinf_controller+0xc90>)
   9a3ce:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   9a3d0:	4ba8      	ldr	r3, [pc, #672]	; (9a674 <Cl_disinf_controller+0xc74>)
   9a3d2:	4798      	blx	r3
								sv_prop_stopmixing();
   9a3d4:	4baf      	ldr	r3, [pc, #700]	; (9a694 <Cl_disinf_controller+0xc94>)
   9a3d6:	4798      	blx	r3
								flag_hotrinse = 0;
   9a3d8:	4baf      	ldr	r3, [pc, #700]	; (9a698 <Cl_disinf_controller+0xc98>)
   9a3da:	2200      	movs	r2, #0
   9a3dc:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9a3de:	2002      	movs	r0, #2
   9a3e0:	4bae      	ldr	r3, [pc, #696]	; (9a69c <Cl_disinf_controller+0xc9c>)
   9a3e2:	4798      	blx	r3
   9a3e4:	4603      	mov	r3, r0
   9a3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9a3ea:	2001      	movs	r0, #1
   9a3ec:	4bab      	ldr	r3, [pc, #684]	; (9a69c <Cl_disinf_controller+0xc9c>)
   9a3ee:	4798      	blx	r3
   9a3f0:	4603      	mov	r3, r0
   9a3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9a3f6:	2005      	movs	r0, #5
   9a3f8:	4ba9      	ldr	r3, [pc, #676]	; (9a6a0 <Cl_disinf_controller+0xca0>)
   9a3fa:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9a3fc:	4ba9      	ldr	r3, [pc, #676]	; (9a6a4 <Cl_disinf_controller+0xca4>)
   9a3fe:	781b      	ldrb	r3, [r3, #0]
   9a400:	2b01      	cmp	r3, #1
   9a402:	d110      	bne.n	9a426 <Cl_disinf_controller+0xa26>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9a404:	2339      	movs	r3, #57	; 0x39
   9a406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   9a40a:	2304      	movs	r3, #4
   9a40c:	76fb      	strb	r3, [r7, #27]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9a40e:	f107 011b 	add.w	r1, r7, #27
   9a412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a416:	2201      	movs	r2, #1
   9a418:	4618      	mov	r0, r3
   9a41a:	4ba3      	ldr	r3, [pc, #652]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a41c:	4798      	blx	r3
   9a41e:	4603      	mov	r3, r0
   9a420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9a424:	e013      	b.n	9a44e <Cl_disinf_controller+0xa4e>
								}
								else if (flag_na == 1)
   9a426:	4ba1      	ldr	r3, [pc, #644]	; (9a6ac <Cl_disinf_controller+0xcac>)
   9a428:	781b      	ldrb	r3, [r3, #0]
   9a42a:	2b01      	cmp	r3, #1
   9a42c:	d10f      	bne.n	9a44e <Cl_disinf_controller+0xa4e>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9a42e:	2339      	movs	r3, #57	; 0x39
   9a430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9a434:	2303      	movs	r3, #3
   9a436:	76fb      	strb	r3, [r7, #27]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9a438:	f107 011b 	add.w	r1, r7, #27
   9a43c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a440:	2201      	movs	r2, #1
   9a442:	4618      	mov	r0, r3
   9a444:	4b98      	ldr	r3, [pc, #608]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a446:	4798      	blx	r3
   9a448:	4603      	mov	r3, r0
   9a44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   9a44e:	4b95      	ldr	r3, [pc, #596]	; (9a6a4 <Cl_disinf_controller+0xca4>)
   9a450:	2200      	movs	r2, #0
   9a452:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   9a454:	4b95      	ldr	r3, [pc, #596]	; (9a6ac <Cl_disinf_controller+0xcac>)
   9a456:	2200      	movs	r2, #0
   9a458:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   9a45a:	4b95      	ldr	r3, [pc, #596]	; (9a6b0 <Cl_disinf_controller+0xcb0>)
   9a45c:	2200      	movs	r2, #0
   9a45e:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9a460:	2045      	movs	r0, #69	; 0x45
   9a462:	4b94      	ldr	r3, [pc, #592]	; (9a6b4 <Cl_disinf_controller+0xcb4>)
   9a464:	4798      	blx	r3
   9a466:	4603      	mov	r3, r0
   9a468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9a46c:	4b92      	ldr	r3, [pc, #584]	; (9a6b8 <Cl_disinf_controller+0xcb8>)
   9a46e:	220a      	movs	r2, #10
   9a470:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   9a472:	e017      	b.n	9a4a4 <Cl_disinf_controller+0xaa4>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9a474:	4b91      	ldr	r3, [pc, #580]	; (9a6bc <Cl_disinf_controller+0xcbc>)
   9a476:	4798      	blx	r3
   9a478:	4603      	mov	r3, r0
   9a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							command = CON_TX_COMMAND_DISINF_PAUSED;
   9a47e:	2338      	movs	r3, #56	; 0x38
   9a480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9a484:	2300      	movs	r3, #0
   9a486:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9a488:	f107 011b 	add.w	r1, r7, #27
   9a48c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a490:	2200      	movs	r2, #0
   9a492:	4618      	mov	r0, r3
   9a494:	4b84      	ldr	r3, [pc, #528]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a496:	4798      	blx	r3
   9a498:	4603      	mov	r3, r0
   9a49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9a49e:	e002      	b.n	9a4a6 <Cl_disinf_controller+0xaa6>
							default:break;
   9a4a0:	bf00      	nop
   9a4a2:	e1b8      	b.n	9a816 <Cl_disinf_controller+0xe16>
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
					 
							}
							break;
   9a4a4:	bf00      	nop
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
						}
						
				break;
   9a4a6:	e1b6      	b.n	9a816 <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9a4a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a4ac:	2b02      	cmp	r3, #2
   9a4ae:	d000      	beq.n	9a4b2 <Cl_disinf_controller+0xab2>
					 
							 //Send resumed
					 

							break;
							default:break;
   9a4b0:	e019      	b.n	9a4e6 <Cl_disinf_controller+0xae6>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9a4b2:	2045      	movs	r0, #69	; 0x45
   9a4b4:	4b7f      	ldr	r3, [pc, #508]	; (9a6b4 <Cl_disinf_controller+0xcb4>)
   9a4b6:	4798      	blx	r3
   9a4b8:	4603      	mov	r3, r0
   9a4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9a4be:	233b      	movs	r3, #59	; 0x3b
   9a4c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9a4c4:	2300      	movs	r3, #0
   9a4c6:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9a4c8:	f107 011b 	add.w	r1, r7, #27
   9a4cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a4d0:	2200      	movs	r2, #0
   9a4d2:	4618      	mov	r0, r3
   9a4d4:	4b74      	ldr	r3, [pc, #464]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a4d6:	4798      	blx	r3
   9a4d8:	4603      	mov	r3, r0
   9a4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9a4de:	4b76      	ldr	r3, [pc, #472]	; (9a6b8 <Cl_disinf_controller+0xcb8>)
   9a4e0:	220a      	movs	r2, #10
   9a4e2:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9a4e4:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9a4e6:	e196      	b.n	9a816 <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   9a4e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a4ec:	2b0f      	cmp	r3, #15
   9a4ee:	d01c      	beq.n	9a52a <Cl_disinf_controller+0xb2a>
   9a4f0:	2b23      	cmp	r3, #35	; 0x23
   9a4f2:	d000      	beq.n	9a4f6 <Cl_disinf_controller+0xaf6>
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
									default:break;
   9a4f4:	e027      	b.n	9a546 <Cl_disinf_controller+0xb46>
								switch ( cl_disinfevent)
								{
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9a4f6:	233a      	movs	r3, #58	; 0x3a
   9a4f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   9a4fc:	2300      	movs	r3, #0
   9a4fe:	76fb      	strb	r3, [r7, #27]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9a500:	f107 011b 	add.w	r1, r7, #27
   9a504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a508:	2200      	movs	r2, #0
   9a50a:	4618      	mov	r0, r3
   9a50c:	4b66      	ldr	r3, [pc, #408]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a50e:	4798      	blx	r3
   9a510:	4603      	mov	r3, r0
   9a512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9a516:	2054      	movs	r0, #84	; 0x54
   9a518:	4b66      	ldr	r3, [pc, #408]	; (9a6b4 <Cl_disinf_controller+0xcb4>)
   9a51a:	4798      	blx	r3
   9a51c:	4603      	mov	r3, r0
   9a51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9a522:	4b65      	ldr	r3, [pc, #404]	; (9a6b8 <Cl_disinf_controller+0xcb8>)
   9a524:	220f      	movs	r2, #15
   9a526:	701a      	strb	r2, [r3, #0]
									 
									break;
   9a528:	e00d      	b.n	9a546 <Cl_disinf_controller+0xb46>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   9a52a:	4b54      	ldr	r3, [pc, #336]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a52c:	681b      	ldr	r3, [r3, #0]
   9a52e:	3301      	adds	r3, #1
   9a530:	4a52      	ldr	r2, [pc, #328]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a532:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9a534:	4b52      	ldr	r3, [pc, #328]	; (9a680 <Cl_disinf_controller+0xc80>)
   9a536:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   9a538:	4b50      	ldr	r3, [pc, #320]	; (9a67c <Cl_disinf_controller+0xc7c>)
   9a53a:	681b      	ldr	r3, [r3, #0]
   9a53c:	2b3c      	cmp	r3, #60	; 0x3c
   9a53e:	d101      	bne.n	9a544 <Cl_disinf_controller+0xb44>
									{
										UpdateDisinfMinuteTick();
   9a540:	4b50      	ldr	r3, [pc, #320]	; (9a684 <Cl_disinf_controller+0xc84>)
   9a542:	4798      	blx	r3
									}
									break;
   9a544:	bf00      	nop
									default:break;
								}
				
				
				break;
   9a546:	e166      	b.n	9a816 <Cl_disinf_controller+0xe16>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   9a548:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a54c:	2b01      	cmp	r3, #1
   9a54e:	d009      	beq.n	9a564 <Cl_disinf_controller+0xb64>
   9a550:	2b24      	cmp	r3, #36	; 0x24
   9a552:	d000      	beq.n	9a556 <Cl_disinf_controller+0xb56>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   9a554:	e15f      	b.n	9a816 <Cl_disinf_controller+0xe16>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9a556:	2045      	movs	r0, #69	; 0x45
   9a558:	4b56      	ldr	r3, [pc, #344]	; (9a6b4 <Cl_disinf_controller+0xcb4>)
   9a55a:	4798      	blx	r3
   9a55c:	4603      	mov	r3, r0
   9a55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9a562:	e02d      	b.n	9a5c0 <Cl_disinf_controller+0xbc0>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9a564:	2044      	movs	r0, #68	; 0x44
   9a566:	4b53      	ldr	r3, [pc, #332]	; (9a6b4 <Cl_disinf_controller+0xcb4>)
   9a568:	4798      	blx	r3
   9a56a:	4603      	mov	r3, r0
   9a56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   9a570:	4b53      	ldr	r3, [pc, #332]	; (9a6c0 <Cl_disinf_controller+0xcc0>)
   9a572:	7e1b      	ldrb	r3, [r3, #24]
   9a574:	2b00      	cmp	r3, #0
   9a576:	d00f      	beq.n	9a598 <Cl_disinf_controller+0xb98>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9a578:	4b51      	ldr	r3, [pc, #324]	; (9a6c0 <Cl_disinf_controller+0xcc0>)
   9a57a:	791b      	ldrb	r3, [r3, #4]
   9a57c:	743b      	strb	r3, [r7, #16]
								if (cl_temp.bytearray[0] == 4)
   9a57e:	7c3b      	ldrb	r3, [r7, #16]
   9a580:	2b04      	cmp	r3, #4
   9a582:	d103      	bne.n	9a58c <Cl_disinf_controller+0xb8c>
								{
										flag_hotcitric = 1;
   9a584:	4b47      	ldr	r3, [pc, #284]	; (9a6a4 <Cl_disinf_controller+0xca4>)
   9a586:	2201      	movs	r2, #1
   9a588:	701a      	strb	r2, [r3, #0]
   9a58a:	e005      	b.n	9a598 <Cl_disinf_controller+0xb98>
								}
								else if (cl_temp.bytearray[0] == 3)
   9a58c:	7c3b      	ldrb	r3, [r7, #16]
   9a58e:	2b03      	cmp	r3, #3
   9a590:	d102      	bne.n	9a598 <Cl_disinf_controller+0xb98>
								{
										flag_na = 1;
   9a592:	4b46      	ldr	r3, [pc, #280]	; (9a6ac <Cl_disinf_controller+0xcac>)
   9a594:	2201      	movs	r2, #1
   9a596:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   9a598:	233c      	movs	r3, #60	; 0x3c
   9a59a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9a59e:	2301      	movs	r3, #1
   9a5a0:	76fb      	strb	r3, [r7, #27]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   9a5a2:	f107 011b 	add.w	r1, r7, #27
   9a5a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a5aa:	2201      	movs	r2, #1
   9a5ac:	4618      	mov	r0, r3
   9a5ae:	4b3e      	ldr	r3, [pc, #248]	; (9a6a8 <Cl_disinf_controller+0xca8>)
   9a5b0:	4798      	blx	r3
   9a5b2:	4603      	mov	r3, r0
   9a5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9a5b8:	4b3f      	ldr	r3, [pc, #252]	; (9a6b8 <Cl_disinf_controller+0xcb8>)
   9a5ba:	2203      	movs	r2, #3
   9a5bc:	701a      	strb	r2, [r3, #0]
						break;
   9a5be:	bf00      	nop
					}
				break;
   9a5c0:	e129      	b.n	9a816 <Cl_disinf_controller+0xe16>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9a5c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   9a5c6:	3b01      	subs	r3, #1
   9a5c8:	2b24      	cmp	r3, #36	; 0x24
   9a5ca:	f200 8123 	bhi.w	9a814 <Cl_disinf_controller+0xe14>
   9a5ce:	a201      	add	r2, pc, #4	; (adr r2, 9a5d4 <Cl_disinf_controller+0xbd4>)
   9a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a5d4:	0009a6c5 	.word	0x0009a6c5
   9a5d8:	0009a815 	.word	0x0009a815
   9a5dc:	0009a815 	.word	0x0009a815
   9a5e0:	0009a815 	.word	0x0009a815
   9a5e4:	0009a815 	.word	0x0009a815
   9a5e8:	0009a815 	.word	0x0009a815
   9a5ec:	0009a815 	.word	0x0009a815
   9a5f0:	0009a815 	.word	0x0009a815
   9a5f4:	0009a815 	.word	0x0009a815
   9a5f8:	0009a815 	.word	0x0009a815
   9a5fc:	0009a815 	.word	0x0009a815
   9a600:	0009a815 	.word	0x0009a815
   9a604:	0009a815 	.word	0x0009a815
   9a608:	0009a815 	.word	0x0009a815
   9a60c:	0009a72d 	.word	0x0009a72d
   9a610:	0009a803 	.word	0x0009a803
   9a614:	0009a815 	.word	0x0009a815
   9a618:	0009a815 	.word	0x0009a815
   9a61c:	0009a721 	.word	0x0009a721
   9a620:	0009a815 	.word	0x0009a815
   9a624:	0009a815 	.word	0x0009a815
   9a628:	0009a815 	.word	0x0009a815
   9a62c:	0009a815 	.word	0x0009a815
   9a630:	0009a815 	.word	0x0009a815
   9a634:	0009a815 	.word	0x0009a815
   9a638:	0009a815 	.word	0x0009a815
   9a63c:	0009a815 	.word	0x0009a815
   9a640:	0009a815 	.word	0x0009a815
   9a644:	0009a815 	.word	0x0009a815
   9a648:	0009a815 	.word	0x0009a815
   9a64c:	0009a815 	.word	0x0009a815
   9a650:	0009a815 	.word	0x0009a815
   9a654:	0009a815 	.word	0x0009a815
   9a658:	0009a815 	.word	0x0009a815
   9a65c:	0009a815 	.word	0x0009a815
   9a660:	0009a815 	.word	0x0009a815
   9a664:	0009a7eb 	.word	0x0009a7eb
   9a668:	200725f8 	.word	0x200725f8
   9a66c:	000a37c9 	.word	0x000a37c9
   9a670:	42960000 	.word	0x42960000
   9a674:	000974dd 	.word	0x000974dd
   9a678:	0009b0d5 	.word	0x0009b0d5
   9a67c:	200727b0 	.word	0x200727b0
   9a680:	0009b1a1 	.word	0x0009b1a1
   9a684:	0009b4e5 	.word	0x0009b4e5
   9a688:	200727b4 	.word	0x200727b4
   9a68c:	0009abed 	.word	0x0009abed
   9a690:	00097511 	.word	0x00097511
   9a694:	000978e5 	.word	0x000978e5
   9a698:	2007262c 	.word	0x2007262c
   9a69c:	0009748d 	.word	0x0009748d
   9a6a0:	00083379 	.word	0x00083379
   9a6a4:	2007262b 	.word	0x2007262b
   9a6a8:	0009926d 	.word	0x0009926d
   9a6ac:	2007262d 	.word	0x2007262d
   9a6b0:	200727da 	.word	0x200727da
   9a6b4:	0008a479 	.word	0x0008a479
   9a6b8:	200727af 	.word	0x200727af
   9a6bc:	0009ae75 	.word	0x0009ae75
   9a6c0:	20072f88 	.word	0x20072f88
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9a6c4:	2044      	movs	r0, #68	; 0x44
   9a6c6:	4b56      	ldr	r3, [pc, #344]	; (9a820 <Cl_disinf_controller+0xe20>)
   9a6c8:	4798      	blx	r3
   9a6ca:	4603      	mov	r3, r0
   9a6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   9a6d0:	4b54      	ldr	r3, [pc, #336]	; (9a824 <Cl_disinf_controller+0xe24>)
   9a6d2:	7e1b      	ldrb	r3, [r3, #24]
   9a6d4:	2b00      	cmp	r3, #0
   9a6d6:	d00f      	beq.n	9a6f8 <Cl_disinf_controller+0xcf8>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9a6d8:	4b52      	ldr	r3, [pc, #328]	; (9a824 <Cl_disinf_controller+0xe24>)
   9a6da:	791b      	ldrb	r3, [r3, #4]
   9a6dc:	733b      	strb	r3, [r7, #12]
					if (cl_temp.bytearray[0] == 4)
   9a6de:	7b3b      	ldrb	r3, [r7, #12]
   9a6e0:	2b04      	cmp	r3, #4
   9a6e2:	d103      	bne.n	9a6ec <Cl_disinf_controller+0xcec>
					{
						flag_hotcitric = 1;
   9a6e4:	4b50      	ldr	r3, [pc, #320]	; (9a828 <Cl_disinf_controller+0xe28>)
   9a6e6:	2201      	movs	r2, #1
   9a6e8:	701a      	strb	r2, [r3, #0]
   9a6ea:	e005      	b.n	9a6f8 <Cl_disinf_controller+0xcf8>
					}
					else if (cl_temp.bytearray[0] == 3)
   9a6ec:	7b3b      	ldrb	r3, [r7, #12]
   9a6ee:	2b03      	cmp	r3, #3
   9a6f0:	d102      	bne.n	9a6f8 <Cl_disinf_controller+0xcf8>
					{
						flag_na = 1;
   9a6f2:	4b4e      	ldr	r3, [pc, #312]	; (9a82c <Cl_disinf_controller+0xe2c>)
   9a6f4:	2201      	movs	r2, #1
   9a6f6:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   9a6f8:	233c      	movs	r3, #60	; 0x3c
   9a6fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9a6fe:	2301      	movs	r3, #1
   9a700:	76fb      	strb	r3, [r7, #27]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9a702:	f107 011b 	add.w	r1, r7, #27
   9a706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9a70a:	2201      	movs	r2, #1
   9a70c:	4618      	mov	r0, r3
   9a70e:	4b48      	ldr	r3, [pc, #288]	; (9a830 <Cl_disinf_controller+0xe30>)
   9a710:	4798      	blx	r3
   9a712:	4603      	mov	r3, r0
   9a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9a718:	4b46      	ldr	r3, [pc, #280]	; (9a834 <Cl_disinf_controller+0xe34>)
   9a71a:	2203      	movs	r2, #3
   9a71c:	701a      	strb	r2, [r3, #0]
				break;
   9a71e:	e076      	b.n	9a80e <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9a720:	4b45      	ldr	r3, [pc, #276]	; (9a838 <Cl_disinf_controller+0xe38>)
   9a722:	4798      	blx	r3
   9a724:	4603      	mov	r3, r0
   9a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   9a72a:	e070      	b.n	9a80e <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a72c:	4b43      	ldr	r3, [pc, #268]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a72e:	2200      	movs	r2, #0
   9a730:	801a      	strh	r2, [r3, #0]
   9a732:	e055      	b.n	9a7e0 <Cl_disinf_controller+0xde0>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9a734:	4b41      	ldr	r3, [pc, #260]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a736:	881b      	ldrh	r3, [r3, #0]
   9a738:	4619      	mov	r1, r3
   9a73a:	4a41      	ldr	r2, [pc, #260]	; (9a840 <Cl_disinf_controller+0xe40>)
   9a73c:	460b      	mov	r3, r1
   9a73e:	00db      	lsls	r3, r3, #3
   9a740:	1a5b      	subs	r3, r3, r1
   9a742:	4413      	add	r3, r2
   9a744:	7818      	ldrb	r0, [r3, #0]
   9a746:	4b3d      	ldr	r3, [pc, #244]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a748:	881b      	ldrh	r3, [r3, #0]
   9a74a:	461a      	mov	r2, r3
   9a74c:	4613      	mov	r3, r2
   9a74e:	00db      	lsls	r3, r3, #3
   9a750:	1a9b      	subs	r3, r3, r2
   9a752:	4a3b      	ldr	r2, [pc, #236]	; (9a840 <Cl_disinf_controller+0xe40>)
   9a754:	4413      	add	r3, r2
   9a756:	3302      	adds	r3, #2
   9a758:	4619      	mov	r1, r3
   9a75a:	4b3a      	ldr	r3, [pc, #232]	; (9a844 <Cl_disinf_controller+0xe44>)
   9a75c:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9a75e:	4b37      	ldr	r3, [pc, #220]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a760:	881b      	ldrh	r3, [r3, #0]
   9a762:	4619      	mov	r1, r3
   9a764:	4a36      	ldr	r2, [pc, #216]	; (9a840 <Cl_disinf_controller+0xe40>)
   9a766:	460b      	mov	r3, r1
   9a768:	00db      	lsls	r3, r3, #3
   9a76a:	1a5b      	subs	r3, r3, r1
   9a76c:	4413      	add	r3, r2
   9a76e:	3302      	adds	r3, #2
   9a770:	781b      	ldrb	r3, [r3, #0]
   9a772:	2b00      	cmp	r3, #0
   9a774:	d00e      	beq.n	9a794 <Cl_disinf_controller+0xd94>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9a776:	2208      	movs	r2, #8
   9a778:	4933      	ldr	r1, [pc, #204]	; (9a848 <Cl_disinf_controller+0xe48>)
   9a77a:	2018      	movs	r0, #24
   9a77c:	4b2c      	ldr	r3, [pc, #176]	; (9a830 <Cl_disinf_controller+0xe30>)
   9a77e:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   9a780:	4b32      	ldr	r3, [pc, #200]	; (9a84c <Cl_disinf_controller+0xe4c>)
   9a782:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9a784:	4b2b      	ldr	r3, [pc, #172]	; (9a834 <Cl_disinf_controller+0xe34>)
   9a786:	220c      	movs	r2, #12
   9a788:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   9a78a:	4b2c      	ldr	r3, [pc, #176]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a78c:	2200      	movs	r2, #0
   9a78e:	801a      	strh	r2, [r3, #0]
						break;
   9a790:	bf00      	nop
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9a792:	e03c      	b.n	9a80e <Cl_disinf_controller+0xe0e>
						//alarm_flag = 1;
						tempcount=0;
						break;
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9a794:	4b29      	ldr	r3, [pc, #164]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a796:	881b      	ldrh	r3, [r3, #0]
   9a798:	2b0b      	cmp	r3, #11
   9a79a:	d11b      	bne.n	9a7d4 <Cl_disinf_controller+0xdd4>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9a79c:	4b27      	ldr	r3, [pc, #156]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a79e:	881b      	ldrh	r3, [r3, #0]
   9a7a0:	4619      	mov	r1, r3
   9a7a2:	4a27      	ldr	r2, [pc, #156]	; (9a840 <Cl_disinf_controller+0xe40>)
   9a7a4:	460b      	mov	r3, r1
   9a7a6:	00db      	lsls	r3, r3, #3
   9a7a8:	1a5b      	subs	r3, r3, r1
   9a7aa:	4413      	add	r3, r2
   9a7ac:	3302      	adds	r3, #2
   9a7ae:	781b      	ldrb	r3, [r3, #0]
   9a7b0:	f083 0301 	eor.w	r3, r3, #1
   9a7b4:	b2db      	uxtb	r3, r3
   9a7b6:	2b00      	cmp	r3, #0
   9a7b8:	d00c      	beq.n	9a7d4 <Cl_disinf_controller+0xdd4>
						{
							sv_cntrl_resetredalarm();
   9a7ba:	4b25      	ldr	r3, [pc, #148]	; (9a850 <Cl_disinf_controller+0xe50>)
   9a7bc:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9a7be:	4b25      	ldr	r3, [pc, #148]	; (9a854 <Cl_disinf_controller+0xe54>)
   9a7c0:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9a7c2:	4b25      	ldr	r3, [pc, #148]	; (9a858 <Cl_disinf_controller+0xe58>)
   9a7c4:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9a7c6:	2208      	movs	r2, #8
   9a7c8:	4924      	ldr	r1, [pc, #144]	; (9a85c <Cl_disinf_controller+0xe5c>)
   9a7ca:	2018      	movs	r0, #24
   9a7cc:	4b18      	ldr	r3, [pc, #96]	; (9a830 <Cl_disinf_controller+0xe30>)
   9a7ce:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   9a7d0:	4b23      	ldr	r3, [pc, #140]	; (9a860 <Cl_disinf_controller+0xe60>)
   9a7d2:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9a7d4:	4b19      	ldr	r3, [pc, #100]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a7d6:	881b      	ldrh	r3, [r3, #0]
   9a7d8:	3301      	adds	r3, #1
   9a7da:	b29a      	uxth	r2, r3
   9a7dc:	4b17      	ldr	r3, [pc, #92]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a7de:	801a      	strh	r2, [r3, #0]
   9a7e0:	4b16      	ldr	r3, [pc, #88]	; (9a83c <Cl_disinf_controller+0xe3c>)
   9a7e2:	881b      	ldrh	r3, [r3, #0]
   9a7e4:	2b0b      	cmp	r3, #11
   9a7e6:	d9a5      	bls.n	9a734 <Cl_disinf_controller+0xd34>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9a7e8:	e011      	b.n	9a80e <Cl_disinf_controller+0xe0e>
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9a7ea:	4b19      	ldr	r3, [pc, #100]	; (9a850 <Cl_disinf_controller+0xe50>)
   9a7ec:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   9a7ee:	4b19      	ldr	r3, [pc, #100]	; (9a854 <Cl_disinf_controller+0xe54>)
   9a7f0:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9a7f2:	4b19      	ldr	r3, [pc, #100]	; (9a858 <Cl_disinf_controller+0xe58>)
   9a7f4:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9a7f6:	4b1b      	ldr	r3, [pc, #108]	; (9a864 <Cl_disinf_controller+0xe64>)
   9a7f8:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9a7fa:	4b0e      	ldr	r3, [pc, #56]	; (9a834 <Cl_disinf_controller+0xe34>)
   9a7fc:	2208      	movs	r2, #8
   9a7fe:	701a      	strb	r2, [r3, #0]
				break;
   9a800:	e005      	b.n	9a80e <Cl_disinf_controller+0xe0e>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9a802:	4b17      	ldr	r3, [pc, #92]	; (9a860 <Cl_disinf_controller+0xe60>)
   9a804:	4798      	blx	r3
   9a806:	4603      	mov	r3, r0
   9a808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9a80c:	bf00      	nop
				
			}
			break;
   9a80e:	e001      	b.n	9a814 <Cl_disinf_controller+0xe14>
			default:break;
   9a810:	bf00      	nop
   9a812:	e000      	b.n	9a816 <Cl_disinf_controller+0xe16>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   9a814:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   9a816:	2300      	movs	r3, #0
}
   9a818:	4618      	mov	r0, r3
   9a81a:	372c      	adds	r7, #44	; 0x2c
   9a81c:	46bd      	mov	sp, r7
   9a81e:	bd90      	pop	{r4, r7, pc}
   9a820:	0008a479 	.word	0x0008a479
   9a824:	20072f88 	.word	0x20072f88
   9a828:	2007262b 	.word	0x2007262b
   9a82c:	2007262d 	.word	0x2007262d
   9a830:	0009926d 	.word	0x0009926d
   9a834:	200727af 	.word	0x200727af
   9a838:	0009ae75 	.word	0x0009ae75
   9a83c:	2007334c 	.word	0x2007334c
   9a840:	20070a68 	.word	0x20070a68
   9a844:	00083095 	.word	0x00083095
   9a848:	000a58d8 	.word	0x000a58d8
   9a84c:	0009abed 	.word	0x0009abed
   9a850:	00097799 	.word	0x00097799
   9a854:	000977ad 	.word	0x000977ad
   9a858:	000977d5 	.word	0x000977d5
   9a85c:	000a58e8 	.word	0x000a58e8
   9a860:	0009b0d5 	.word	0x0009b0d5
   9a864:	0009ac81 	.word	0x0009ac81

0009a868 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   9a868:	b480      	push	{r7}
   9a86a:	b083      	sub	sp, #12
   9a86c:	af00      	add	r7, sp, #0
   9a86e:	4603      	mov	r3, r0
   9a870:	6039      	str	r1, [r7, #0]
   9a872:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   9a874:	79fb      	ldrb	r3, [r7, #7]
   9a876:	3b07      	subs	r3, #7
   9a878:	2b4d      	cmp	r3, #77	; 0x4d
   9a87a:	f200 8107 	bhi.w	9aa8c <cl_disinf_translatemacevent+0x224>
   9a87e:	a201      	add	r2, pc, #4	; (adr r2, 9a884 <cl_disinf_translatemacevent+0x1c>)
   9a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a884:	0009aa45 	.word	0x0009aa45
   9a888:	0009aa8d 	.word	0x0009aa8d
   9a88c:	0009aa8d 	.word	0x0009aa8d
   9a890:	0009aa75 	.word	0x0009aa75
   9a894:	0009aa7d 	.word	0x0009aa7d
   9a898:	0009aa85 	.word	0x0009aa85
   9a89c:	0009aa3d 	.word	0x0009aa3d
   9a8a0:	0009aa4d 	.word	0x0009aa4d
   9a8a4:	0009aa55 	.word	0x0009aa55
   9a8a8:	0009aa5d 	.word	0x0009aa5d
   9a8ac:	0009aa8d 	.word	0x0009aa8d
   9a8b0:	0009aa8d 	.word	0x0009aa8d
   9a8b4:	0009aa8d 	.word	0x0009aa8d
   9a8b8:	0009aa8d 	.word	0x0009aa8d
   9a8bc:	0009aa8d 	.word	0x0009aa8d
   9a8c0:	0009aa8d 	.word	0x0009aa8d
   9a8c4:	0009aa8d 	.word	0x0009aa8d
   9a8c8:	0009aa8d 	.word	0x0009aa8d
   9a8cc:	0009aa8d 	.word	0x0009aa8d
   9a8d0:	0009aa8d 	.word	0x0009aa8d
   9a8d4:	0009aa8d 	.word	0x0009aa8d
   9a8d8:	0009aa8d 	.word	0x0009aa8d
   9a8dc:	0009aa8d 	.word	0x0009aa8d
   9a8e0:	0009aa8d 	.word	0x0009aa8d
   9a8e4:	0009aa65 	.word	0x0009aa65
   9a8e8:	0009aa6d 	.word	0x0009aa6d
   9a8ec:	0009aa8d 	.word	0x0009aa8d
   9a8f0:	0009aa8d 	.word	0x0009aa8d
   9a8f4:	0009aa8d 	.word	0x0009aa8d
   9a8f8:	0009aa8d 	.word	0x0009aa8d
   9a8fc:	0009aa8d 	.word	0x0009aa8d
   9a900:	0009aa8d 	.word	0x0009aa8d
   9a904:	0009aa8d 	.word	0x0009aa8d
   9a908:	0009aa8d 	.word	0x0009aa8d
   9a90c:	0009a9c5 	.word	0x0009a9c5
   9a910:	0009aa8d 	.word	0x0009aa8d
   9a914:	0009aa8d 	.word	0x0009aa8d
   9a918:	0009aa8d 	.word	0x0009aa8d
   9a91c:	0009aa35 	.word	0x0009aa35
   9a920:	0009aa2d 	.word	0x0009aa2d
   9a924:	0009aa8d 	.word	0x0009aa8d
   9a928:	0009aa8d 	.word	0x0009aa8d
   9a92c:	0009aa8d 	.word	0x0009aa8d
   9a930:	0009aa8d 	.word	0x0009aa8d
   9a934:	0009aa8d 	.word	0x0009aa8d
   9a938:	0009aa8d 	.word	0x0009aa8d
   9a93c:	0009aa8d 	.word	0x0009aa8d
   9a940:	0009aa8d 	.word	0x0009aa8d
   9a944:	0009aa8d 	.word	0x0009aa8d
   9a948:	0009a9fd 	.word	0x0009a9fd
   9a94c:	0009aa05 	.word	0x0009aa05
   9a950:	0009aa0d 	.word	0x0009aa0d
   9a954:	0009aa15 	.word	0x0009aa15
   9a958:	0009aa1d 	.word	0x0009aa1d
   9a95c:	0009aa25 	.word	0x0009aa25
   9a960:	0009aa8d 	.word	0x0009aa8d
   9a964:	0009a9bd 	.word	0x0009a9bd
   9a968:	0009a9cd 	.word	0x0009a9cd
   9a96c:	0009a9d5 	.word	0x0009a9d5
   9a970:	0009aa8d 	.word	0x0009aa8d
   9a974:	0009aa8d 	.word	0x0009aa8d
   9a978:	0009aa8d 	.word	0x0009aa8d
   9a97c:	0009aa8d 	.word	0x0009aa8d
   9a980:	0009aa8d 	.word	0x0009aa8d
   9a984:	0009aa8d 	.word	0x0009aa8d
   9a988:	0009aa8d 	.word	0x0009aa8d
   9a98c:	0009aa8d 	.word	0x0009aa8d
   9a990:	0009aa8d 	.word	0x0009aa8d
   9a994:	0009aa8d 	.word	0x0009aa8d
   9a998:	0009aa8d 	.word	0x0009aa8d
   9a99c:	0009aa8d 	.word	0x0009aa8d
   9a9a0:	0009aa8d 	.word	0x0009aa8d
   9a9a4:	0009aa8d 	.word	0x0009aa8d
   9a9a8:	0009aa8d 	.word	0x0009aa8d
   9a9ac:	0009a9f5 	.word	0x0009a9f5
   9a9b0:	0009a9dd 	.word	0x0009a9dd
   9a9b4:	0009a9e5 	.word	0x0009a9e5
   9a9b8:	0009a9ed 	.word	0x0009a9ed
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   9a9bc:	683b      	ldr	r3, [r7, #0]
   9a9be:	2201      	movs	r2, #1
   9a9c0:	701a      	strb	r2, [r3, #0]
		break;
   9a9c2:	e064      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   9a9c4:	683b      	ldr	r3, [r7, #0]
   9a9c6:	2225      	movs	r2, #37	; 0x25
   9a9c8:	701a      	strb	r2, [r3, #0]
		break;
   9a9ca:	e060      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   9a9cc:	683b      	ldr	r3, [r7, #0]
   9a9ce:	2202      	movs	r2, #2
   9a9d0:	701a      	strb	r2, [r3, #0]
		break;
   9a9d2:	e05c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   9a9d4:	683b      	ldr	r3, [r7, #0]
   9a9d6:	2203      	movs	r2, #3
   9a9d8:	701a      	strb	r2, [r3, #0]
		break;
   9a9da:	e058      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   9a9dc:	683b      	ldr	r3, [r7, #0]
   9a9de:	2222      	movs	r2, #34	; 0x22
   9a9e0:	701a      	strb	r2, [r3, #0]
		break;
   9a9e2:	e054      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   9a9e4:	683b      	ldr	r3, [r7, #0]
   9a9e6:	2223      	movs	r2, #35	; 0x23
   9a9e8:	701a      	strb	r2, [r3, #0]
		break;
   9a9ea:	e050      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   9a9ec:	683b      	ldr	r3, [r7, #0]
   9a9ee:	2216      	movs	r2, #22
   9a9f0:	701a      	strb	r2, [r3, #0]
		break;
   9a9f2:	e04c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   9a9f4:	683b      	ldr	r3, [r7, #0]
   9a9f6:	2221      	movs	r2, #33	; 0x21
   9a9f8:	701a      	strb	r2, [r3, #0]
		break;
   9a9fa:	e048      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   9a9fc:	683b      	ldr	r3, [r7, #0]
   9a9fe:	220c      	movs	r2, #12
   9aa00:	701a      	strb	r2, [r3, #0]
		break;
   9aa02:	e044      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   9aa04:	683b      	ldr	r3, [r7, #0]
   9aa06:	220d      	movs	r2, #13
   9aa08:	701a      	strb	r2, [r3, #0]
		break;
   9aa0a:	e040      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   9aa0c:	683b      	ldr	r3, [r7, #0]
   9aa0e:	220e      	movs	r2, #14
   9aa10:	701a      	strb	r2, [r3, #0]
		break;
   9aa12:	e03c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   9aa14:	683b      	ldr	r3, [r7, #0]
   9aa16:	220f      	movs	r2, #15
   9aa18:	701a      	strb	r2, [r3, #0]
		break;
   9aa1a:	e038      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   9aa1c:	683b      	ldr	r3, [r7, #0]
   9aa1e:	2210      	movs	r2, #16
   9aa20:	701a      	strb	r2, [r3, #0]
		break;
   9aa22:	e034      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   9aa24:	683b      	ldr	r3, [r7, #0]
   9aa26:	2211      	movs	r2, #17
   9aa28:	701a      	strb	r2, [r3, #0]
		break;
   9aa2a:	e030      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   9aa2c:	683b      	ldr	r3, [r7, #0]
   9aa2e:	2213      	movs	r2, #19
   9aa30:	701a      	strb	r2, [r3, #0]
		break;
   9aa32:	e02c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   9aa34:	683b      	ldr	r3, [r7, #0]
   9aa36:	2212      	movs	r2, #18
   9aa38:	701a      	strb	r2, [r3, #0]
		break;
   9aa3a:	e028      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   9aa3c:	683b      	ldr	r3, [r7, #0]
   9aa3e:	2215      	movs	r2, #21
   9aa40:	701a      	strb	r2, [r3, #0]
		break;
   9aa42:	e024      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   9aa44:	683b      	ldr	r3, [r7, #0]
   9aa46:	2224      	movs	r2, #36	; 0x24
   9aa48:	701a      	strb	r2, [r3, #0]
		break;
   9aa4a:	e020      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   9aa4c:	683b      	ldr	r3, [r7, #0]
   9aa4e:	2214      	movs	r2, #20
   9aa50:	701a      	strb	r2, [r3, #0]
		break;
   9aa52:	e01c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   9aa54:	683b      	ldr	r3, [r7, #0]
   9aa56:	2217      	movs	r2, #23
   9aa58:	701a      	strb	r2, [r3, #0]
		break;
   9aa5a:	e018      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   9aa5c:	683b      	ldr	r3, [r7, #0]
   9aa5e:	2218      	movs	r2, #24
   9aa60:	701a      	strb	r2, [r3, #0]
		break;
   9aa62:	e014      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   9aa64:	683b      	ldr	r3, [r7, #0]
   9aa66:	221c      	movs	r2, #28
   9aa68:	701a      	strb	r2, [r3, #0]
		break;
   9aa6a:	e010      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   9aa6c:	683b      	ldr	r3, [r7, #0]
   9aa6e:	221d      	movs	r2, #29
   9aa70:	701a      	strb	r2, [r3, #0]
		break;
   9aa72:	e00c      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   9aa74:	683b      	ldr	r3, [r7, #0]
   9aa76:	221e      	movs	r2, #30
   9aa78:	701a      	strb	r2, [r3, #0]
		break;
   9aa7a:	e008      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   9aa7c:	683b      	ldr	r3, [r7, #0]
   9aa7e:	221f      	movs	r2, #31
   9aa80:	701a      	strb	r2, [r3, #0]
		break;
   9aa82:	e004      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   9aa84:	683b      	ldr	r3, [r7, #0]
   9aa86:	2220      	movs	r2, #32
   9aa88:	701a      	strb	r2, [r3, #0]
		break;
   9aa8a:	e000      	b.n	9aa8e <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   9aa8c:	bf00      	nop
	}
	return CL_OK;
   9aa8e:	2300      	movs	r3, #0
}
   9aa90:	4618      	mov	r0, r3
   9aa92:	370c      	adds	r7, #12
   9aa94:	46bd      	mov	sp, r7
   9aa96:	bc80      	pop	{r7}
   9aa98:	4770      	bx	lr
   9aa9a:	bf00      	nop

0009aa9c <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   9aa9c:	b590      	push	{r4, r7, lr}
   9aa9e:	b085      	sub	sp, #20
   9aaa0:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9aaa2:	2300      	movs	r3, #0
   9aaa4:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9aaa6:	234d      	movs	r3, #77	; 0x4d
   9aaa8:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9aaaa:	2300      	movs	r3, #0
   9aaac:	603b      	str	r3, [r7, #0]
	Cl_Uint8Type data = 0;
   9aaae:	2300      	movs	r3, #0
   9aab0:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9aab2:	2001      	movs	r0, #1
   9aab4:	4b42      	ldr	r3, [pc, #264]	; (9abc0 <Cl_Disinf_StartDisinf+0x124>)
   9aab6:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   9aab8:	f44f 7016 	mov.w	r0, #600	; 0x258
   9aabc:	4b41      	ldr	r3, [pc, #260]	; (9abc4 <Cl_Disinf_StartDisinf+0x128>)
   9aabe:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9aac0:	2001      	movs	r0, #1
   9aac2:	4b41      	ldr	r3, [pc, #260]	; (9abc8 <Cl_Disinf_StartDisinf+0x12c>)
   9aac4:	4798      	blx	r3
   9aac6:	4603      	mov	r3, r0
   9aac8:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   9aaca:	f44f 7116 	mov.w	r1, #600	; 0x258
   9aace:	2001      	movs	r0, #1
   9aad0:	4b3e      	ldr	r3, [pc, #248]	; (9abcc <Cl_Disinf_StartDisinf+0x130>)
   9aad2:	4798      	blx	r3
   9aad4:	4603      	mov	r3, r0
   9aad6:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   9aad8:	2004      	movs	r0, #4
   9aada:	4b3d      	ldr	r3, [pc, #244]	; (9abd0 <Cl_Disinf_StartDisinf+0x134>)
   9aadc:	4798      	blx	r3
   9aade:	4603      	mov	r3, r0
   9aae0:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   9aae2:	79fb      	ldrb	r3, [r7, #7]
   9aae4:	2b00      	cmp	r3, #0
   9aae6:	d165      	bne.n	9abb4 <Cl_Disinf_StartDisinf+0x118>
	{
		Cl_disinfOpenFillTimeOut = false;
   9aae8:	4b3a      	ldr	r3, [pc, #232]	; (9abd4 <Cl_Disinf_StartDisinf+0x138>)
   9aaea:	2200      	movs	r2, #0
   9aaec:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9aaee:	4b3a      	ldr	r3, [pc, #232]	; (9abd8 <Cl_Disinf_StartDisinf+0x13c>)
   9aaf0:	4798      	blx	r3
   9aaf2:	4603      	mov	r3, r0
   9aaf4:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9aaf6:	2001      	movs	r0, #1
   9aaf8:	4b38      	ldr	r3, [pc, #224]	; (9abdc <Cl_Disinf_StartDisinf+0x140>)
   9aafa:	4798      	blx	r3
   9aafc:	4603      	mov	r3, r0
   9aafe:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9ab00:	4b37      	ldr	r3, [pc, #220]	; (9abe0 <Cl_Disinf_StartDisinf+0x144>)
   9ab02:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9ab04:	2300      	movs	r3, #0
   9ab06:	9300      	str	r3, [sp, #0]
   9ab08:	f04f 0300 	mov.w	r3, #0
   9ab0c:	f04f 0200 	mov.w	r2, #0
   9ab10:	2100      	movs	r1, #0
   9ab12:	2029      	movs	r0, #41	; 0x29
   9ab14:	4c33      	ldr	r4, [pc, #204]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab16:	47a0      	blx	r4
   9ab18:	4603      	mov	r3, r0
   9ab1a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9ab1c:	2300      	movs	r3, #0
   9ab1e:	9300      	str	r3, [sp, #0]
   9ab20:	f04f 0300 	mov.w	r3, #0
   9ab24:	f04f 0200 	mov.w	r2, #0
   9ab28:	2100      	movs	r1, #0
   9ab2a:	202b      	movs	r0, #43	; 0x2b
   9ab2c:	4c2d      	ldr	r4, [pc, #180]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab2e:	47a0      	blx	r4
   9ab30:	4603      	mov	r3, r0
   9ab32:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9ab34:	2300      	movs	r3, #0
   9ab36:	9300      	str	r3, [sp, #0]
   9ab38:	f04f 0300 	mov.w	r3, #0
   9ab3c:	f04f 0200 	mov.w	r2, #0
   9ab40:	2101      	movs	r1, #1
   9ab42:	2003      	movs	r0, #3
   9ab44:	4c27      	ldr	r4, [pc, #156]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab46:	47a0      	blx	r4
   9ab48:	4603      	mov	r3, r0
   9ab4a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9ab4c:	2300      	movs	r3, #0
   9ab4e:	9300      	str	r3, [sp, #0]
   9ab50:	f04f 0300 	mov.w	r3, #0
   9ab54:	f04f 0200 	mov.w	r2, #0
   9ab58:	2101      	movs	r1, #1
   9ab5a:	2004      	movs	r0, #4
   9ab5c:	4c21      	ldr	r4, [pc, #132]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab5e:	47a0      	blx	r4
   9ab60:	4603      	mov	r3, r0
   9ab62:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9ab64:	2300      	movs	r3, #0
   9ab66:	9300      	str	r3, [sp, #0]
   9ab68:	f04f 0300 	mov.w	r3, #0
   9ab6c:	f04f 0200 	mov.w	r2, #0
   9ab70:	2100      	movs	r1, #0
   9ab72:	203d      	movs	r0, #61	; 0x3d
   9ab74:	4c1b      	ldr	r4, [pc, #108]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab76:	47a0      	blx	r4
   9ab78:	4603      	mov	r3, r0
   9ab7a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9ab7c:	2300      	movs	r3, #0
   9ab7e:	9300      	str	r3, [sp, #0]
   9ab80:	f04f 0300 	mov.w	r3, #0
   9ab84:	f04f 0200 	mov.w	r2, #0
   9ab88:	2101      	movs	r1, #1
   9ab8a:	203e      	movs	r0, #62	; 0x3e
   9ab8c:	4c15      	ldr	r4, [pc, #84]	; (9abe4 <Cl_Disinf_StartDisinf+0x148>)
   9ab8e:	47a0      	blx	r4
   9ab90:	4603      	mov	r3, r0
   9ab92:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   9ab94:	2101      	movs	r1, #1
   9ab96:	203d      	movs	r0, #61	; 0x3d
   9ab98:	4b13      	ldr	r3, [pc, #76]	; (9abe8 <Cl_Disinf_StartDisinf+0x14c>)
   9ab9a:	4798      	blx	r3
   9ab9c:	4603      	mov	r3, r0
   9ab9e:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   9aba0:	2101      	movs	r1, #1
   9aba2:	203e      	movs	r0, #62	; 0x3e
   9aba4:	4b10      	ldr	r3, [pc, #64]	; (9abe8 <Cl_Disinf_StartDisinf+0x14c>)
   9aba6:	4798      	blx	r3
   9aba8:	4603      	mov	r3, r0
   9abaa:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   9abac:	4b0c      	ldr	r3, [pc, #48]	; (9abe0 <Cl_Disinf_StartDisinf+0x144>)
   9abae:	4798      	blx	r3
   9abb0:	4603      	mov	r3, r0
   9abb2:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   9abb4:	2300      	movs	r3, #0
}
   9abb6:	4618      	mov	r0, r3
   9abb8:	370c      	adds	r7, #12
   9abba:	46bd      	mov	sp, r7
   9abbc:	bd90      	pop	{r4, r7, pc}
   9abbe:	bf00      	nop
   9abc0:	00097511 	.word	0x00097511
   9abc4:	00097999 	.word	0x00097999
   9abc8:	00097451 	.word	0x00097451
   9abcc:	00097569 	.word	0x00097569
   9abd0:	00083379 	.word	0x00083379
   9abd4:	20070a66 	.word	0x20070a66
   9abd8:	0009ad21 	.word	0x0009ad21
   9abdc:	00091f6d 	.word	0x00091f6d
   9abe0:	0009b0d5 	.word	0x0009b0d5
   9abe4:	00082f01 	.word	0x00082f01
   9abe8:	00082f5d 	.word	0x00082f5d

0009abec <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   9abec:	b580      	push	{r7, lr}
   9abee:	af00      	add	r7, sp, #0
	//Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_cntrl_disable_loopback();
   9abf0:	4b16      	ldr	r3, [pc, #88]	; (9ac4c <Cl_Disinf_StopDisinf+0x60>)
   9abf2:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   9abf4:	4b16      	ldr	r3, [pc, #88]	; (9ac50 <Cl_Disinf_StopDisinf+0x64>)
   9abf6:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9abf8:	4b16      	ldr	r3, [pc, #88]	; (9ac54 <Cl_Disinf_StopDisinf+0x68>)
   9abfa:	220c      	movs	r2, #12
   9abfc:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   9abfe:	4b16      	ldr	r3, [pc, #88]	; (9ac58 <Cl_Disinf_StopDisinf+0x6c>)
   9ac00:	681b      	ldr	r3, [r3, #0]
   9ac02:	4a16      	ldr	r2, [pc, #88]	; (9ac5c <Cl_Disinf_StopDisinf+0x70>)
   9ac04:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   9ac06:	4b16      	ldr	r3, [pc, #88]	; (9ac60 <Cl_Disinf_StopDisinf+0x74>)
   9ac08:	681b      	ldr	r3, [r3, #0]
   9ac0a:	4a16      	ldr	r2, [pc, #88]	; (9ac64 <Cl_Disinf_StopDisinf+0x78>)
   9ac0c:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   9ac0e:	4b16      	ldr	r3, [pc, #88]	; (9ac68 <Cl_Disinf_StopDisinf+0x7c>)
   9ac10:	681b      	ldr	r3, [r3, #0]
   9ac12:	4a16      	ldr	r2, [pc, #88]	; (9ac6c <Cl_Disinf_StopDisinf+0x80>)
   9ac14:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   9ac16:	4b16      	ldr	r3, [pc, #88]	; (9ac70 <Cl_Disinf_StopDisinf+0x84>)
   9ac18:	681b      	ldr	r3, [r3, #0]
   9ac1a:	4a16      	ldr	r2, [pc, #88]	; (9ac74 <Cl_Disinf_StopDisinf+0x88>)
   9ac1c:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   9ac1e:	4b16      	ldr	r3, [pc, #88]	; (9ac78 <Cl_Disinf_StopDisinf+0x8c>)
   9ac20:	681b      	ldr	r3, [r3, #0]
   9ac22:	4a16      	ldr	r2, [pc, #88]	; (9ac7c <Cl_Disinf_StopDisinf+0x90>)
   9ac24:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   9ac26:	4b0c      	ldr	r3, [pc, #48]	; (9ac58 <Cl_Disinf_StopDisinf+0x6c>)
   9ac28:	2200      	movs	r2, #0
   9ac2a:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   9ac2c:	4b0c      	ldr	r3, [pc, #48]	; (9ac60 <Cl_Disinf_StopDisinf+0x74>)
   9ac2e:	2200      	movs	r2, #0
   9ac30:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   9ac32:	4b0d      	ldr	r3, [pc, #52]	; (9ac68 <Cl_Disinf_StopDisinf+0x7c>)
   9ac34:	2200      	movs	r2, #0
   9ac36:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   9ac38:	4b0d      	ldr	r3, [pc, #52]	; (9ac70 <Cl_Disinf_StopDisinf+0x84>)
   9ac3a:	2200      	movs	r2, #0
   9ac3c:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   9ac3e:	4b0e      	ldr	r3, [pc, #56]	; (9ac78 <Cl_Disinf_StopDisinf+0x8c>)
   9ac40:	2200      	movs	r2, #0
   9ac42:	601a      	str	r2, [r3, #0]
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   9ac44:	2300      	movs	r3, #0
}
   9ac46:	4618      	mov	r0, r3
   9ac48:	bd80      	pop	{r7, pc}
   9ac4a:	bf00      	nop
   9ac4c:	00097681 	.word	0x00097681
   9ac50:	000974dd 	.word	0x000974dd
   9ac54:	200727af 	.word	0x200727af
   9ac58:	200727b0 	.word	0x200727b0
   9ac5c:	200727bc 	.word	0x200727bc
   9ac60:	200727b8 	.word	0x200727b8
   9ac64:	200727c4 	.word	0x200727c4
   9ac68:	200727b4 	.word	0x200727b4
   9ac6c:	200727c0 	.word	0x200727c0
   9ac70:	200727c8 	.word	0x200727c8
   9ac74:	200727d0 	.word	0x200727d0
   9ac78:	200727cc 	.word	0x200727cc
   9ac7c:	200727d4 	.word	0x200727d4

0009ac80 <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   9ac80:	b580      	push	{r7, lr}
   9ac82:	b082      	sub	sp, #8
   9ac84:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   9ac86:	2300      	movs	r3, #0
   9ac88:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   9ac8a:	4b16      	ldr	r3, [pc, #88]	; (9ace4 <Cl_Disinf_resumeDisinf+0x64>)
   9ac8c:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9ac8e:	4b16      	ldr	r3, [pc, #88]	; (9ace8 <Cl_Disinf_resumeDisinf+0x68>)
   9ac90:	2208      	movs	r2, #8
   9ac92:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   9ac94:	4b15      	ldr	r3, [pc, #84]	; (9acec <Cl_Disinf_resumeDisinf+0x6c>)
   9ac96:	781b      	ldrb	r3, [r3, #0]
   9ac98:	2b01      	cmp	r3, #1
   9ac9a:	d101      	bne.n	9aca0 <Cl_Disinf_resumeDisinf+0x20>
	{
		sv_cntrl_poweronheater();
   9ac9c:	4b14      	ldr	r3, [pc, #80]	; (9acf0 <Cl_Disinf_resumeDisinf+0x70>)
   9ac9e:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   9aca0:	1dbb      	adds	r3, r7, #6
   9aca2:	2200      	movs	r2, #0
   9aca4:	4619      	mov	r1, r3
   9aca6:	203b      	movs	r0, #59	; 0x3b
   9aca8:	4b12      	ldr	r3, [pc, #72]	; (9acf4 <Cl_Disinf_resumeDisinf+0x74>)
   9acaa:	4798      	blx	r3
   9acac:	4603      	mov	r3, r0
   9acae:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9acb0:	4b11      	ldr	r3, [pc, #68]	; (9acf8 <Cl_Disinf_resumeDisinf+0x78>)
   9acb2:	681b      	ldr	r3, [r3, #0]
   9acb4:	4a11      	ldr	r2, [pc, #68]	; (9acfc <Cl_Disinf_resumeDisinf+0x7c>)
   9acb6:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9acb8:	4b11      	ldr	r3, [pc, #68]	; (9ad00 <Cl_Disinf_resumeDisinf+0x80>)
   9acba:	681b      	ldr	r3, [r3, #0]
   9acbc:	4a11      	ldr	r2, [pc, #68]	; (9ad04 <Cl_Disinf_resumeDisinf+0x84>)
   9acbe:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9acc0:	4b11      	ldr	r3, [pc, #68]	; (9ad08 <Cl_Disinf_resumeDisinf+0x88>)
   9acc2:	681b      	ldr	r3, [r3, #0]
   9acc4:	4a11      	ldr	r2, [pc, #68]	; (9ad0c <Cl_Disinf_resumeDisinf+0x8c>)
   9acc6:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9acc8:	4b11      	ldr	r3, [pc, #68]	; (9ad10 <Cl_Disinf_resumeDisinf+0x90>)
   9acca:	681b      	ldr	r3, [r3, #0]
   9accc:	4a11      	ldr	r2, [pc, #68]	; (9ad14 <Cl_Disinf_resumeDisinf+0x94>)
   9acce:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9acd0:	4b11      	ldr	r3, [pc, #68]	; (9ad18 <Cl_Disinf_resumeDisinf+0x98>)
   9acd2:	681b      	ldr	r3, [r3, #0]
   9acd4:	4a11      	ldr	r2, [pc, #68]	; (9ad1c <Cl_Disinf_resumeDisinf+0x9c>)
   9acd6:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9acd8:	2300      	movs	r3, #0
}
   9acda:	4618      	mov	r0, r3
   9acdc:	3708      	adds	r7, #8
   9acde:	46bd      	mov	sp, r7
   9ace0:	bd80      	pop	{r7, pc}
   9ace2:	bf00      	nop
   9ace4:	00097665 	.word	0x00097665
   9ace8:	200727af 	.word	0x200727af
   9acec:	2007262b 	.word	0x2007262b
   9acf0:	000974c9 	.word	0x000974c9
   9acf4:	0009926d 	.word	0x0009926d
   9acf8:	200727bc 	.word	0x200727bc
   9acfc:	200727b0 	.word	0x200727b0
   9ad00:	200727c4 	.word	0x200727c4
   9ad04:	200727b8 	.word	0x200727b8
   9ad08:	200727c0 	.word	0x200727c0
   9ad0c:	200727b4 	.word	0x200727b4
   9ad10:	200727d0 	.word	0x200727d0
   9ad14:	200727c8 	.word	0x200727c8
   9ad18:	200727d4 	.word	0x200727d4
   9ad1c:	200727cc 	.word	0x200727cc

0009ad20 <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9ad20:	b580      	push	{r7, lr}
   9ad22:	b084      	sub	sp, #16
   9ad24:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9ad26:	2304      	movs	r3, #4
   9ad28:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ad2a:	234d      	movs	r3, #77	; 0x4d
   9ad2c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9ad2e:	1d3b      	adds	r3, r7, #4
   9ad30:	2200      	movs	r2, #0
   9ad32:	601a      	str	r2, [r3, #0]
   9ad34:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9ad38:	230a      	movs	r3, #10
   9ad3a:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9ad3c:	230b      	movs	r3, #11
   9ad3e:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9ad40:	4b08      	ldr	r3, [pc, #32]	; (9ad64 <Cl_Disinf_UpdateTimeInfo+0x44>)
   9ad42:	681b      	ldr	r3, [r3, #0]
   9ad44:	b2db      	uxtb	r3, r3
   9ad46:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9ad48:	1d39      	adds	r1, r7, #4
   9ad4a:	7bbb      	ldrb	r3, [r7, #14]
   9ad4c:	2202      	movs	r2, #2
   9ad4e:	4618      	mov	r0, r3
   9ad50:	4b05      	ldr	r3, [pc, #20]	; (9ad68 <Cl_Disinf_UpdateTimeInfo+0x48>)
   9ad52:	4798      	blx	r3
   9ad54:	4603      	mov	r3, r0
   9ad56:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9ad58:	2300      	movs	r3, #0
	
}
   9ad5a:	4618      	mov	r0, r3
   9ad5c:	3710      	adds	r7, #16
   9ad5e:	46bd      	mov	sp, r7
   9ad60:	bd80      	pop	{r7, pc}
   9ad62:	bf00      	nop
   9ad64:	200727c8 	.word	0x200727c8
   9ad68:	0009926d 	.word	0x0009926d

0009ad6c <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9ad6c:	b580      	push	{r7, lr}
   9ad6e:	b086      	sub	sp, #24
   9ad70:	af00      	add	r7, sp, #0
   9ad72:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9ad74:	2300      	movs	r3, #0
   9ad76:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9ad78:	2300      	movs	r3, #0
   9ad7a:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9ad7c:	f107 030c 	add.w	r3, r7, #12
   9ad80:	2100      	movs	r1, #0
   9ad82:	460a      	mov	r2, r1
   9ad84:	801a      	strh	r2, [r3, #0]
   9ad86:	460a      	mov	r2, r1
   9ad88:	709a      	strb	r2, [r3, #2]
   9ad8a:	2300      	movs	r3, #0
   9ad8c:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ad8e:	234d      	movs	r3, #77	; 0x4d
   9ad90:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9ad92:	2300      	movs	r3, #0
   9ad94:	75bb      	strb	r3, [r7, #22]
   9ad96:	e05f      	b.n	9ae58 <Cl_Disinf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9ad98:	7dba      	ldrb	r2, [r7, #22]
   9ad9a:	4933      	ldr	r1, [pc, #204]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ad9c:	4613      	mov	r3, r2
   9ad9e:	00db      	lsls	r3, r3, #3
   9ada0:	1a9b      	subs	r3, r3, r2
   9ada2:	440b      	add	r3, r1
   9ada4:	7818      	ldrb	r0, [r3, #0]
   9ada6:	7dba      	ldrb	r2, [r7, #22]
   9ada8:	4613      	mov	r3, r2
   9adaa:	00db      	lsls	r3, r3, #3
   9adac:	1a9b      	subs	r3, r3, r2
   9adae:	4a2e      	ldr	r2, [pc, #184]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9adb0:	4413      	add	r3, r2
   9adb2:	3302      	adds	r3, #2
   9adb4:	4619      	mov	r1, r3
   9adb6:	4b2d      	ldr	r3, [pc, #180]	; (9ae6c <Cl_Disinf_UpdateAlarmTable+0x100>)
   9adb8:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9adba:	7dba      	ldrb	r2, [r7, #22]
   9adbc:	492a      	ldr	r1, [pc, #168]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9adbe:	4613      	mov	r3, r2
   9adc0:	00db      	lsls	r3, r3, #3
   9adc2:	1a9b      	subs	r3, r3, r2
   9adc4:	440b      	add	r3, r1
   9adc6:	3302      	adds	r3, #2
   9adc8:	781b      	ldrb	r3, [r3, #0]
   9adca:	2b00      	cmp	r3, #0
   9adcc:	d022      	beq.n	9ae14 <Cl_Disinf_UpdateAlarmTable+0xa8>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9adce:	7dba      	ldrb	r2, [r7, #22]
   9add0:	4925      	ldr	r1, [pc, #148]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9add2:	4613      	mov	r3, r2
   9add4:	00db      	lsls	r3, r3, #3
   9add6:	1a9b      	subs	r3, r3, r2
   9add8:	440b      	add	r3, r1
   9adda:	3303      	adds	r3, #3
   9addc:	781b      	ldrb	r3, [r3, #0]
   9adde:	f083 0301 	eor.w	r3, r3, #1
   9ade2:	b2db      	uxtb	r3, r3
   9ade4:	2b00      	cmp	r3, #0
   9ade6:	d034      	beq.n	9ae52 <Cl_Disinf_UpdateAlarmTable+0xe6>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9ade8:	7dba      	ldrb	r2, [r7, #22]
   9adea:	491f      	ldr	r1, [pc, #124]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9adec:	4613      	mov	r3, r2
   9adee:	00db      	lsls	r3, r3, #3
   9adf0:	1a9b      	subs	r3, r3, r2
   9adf2:	440b      	add	r3, r1
   9adf4:	3303      	adds	r3, #3
   9adf6:	2201      	movs	r2, #1
   9adf8:	701a      	strb	r2, [r3, #0]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9adfa:	7dba      	ldrb	r2, [r7, #22]
   9adfc:	491a      	ldr	r1, [pc, #104]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9adfe:	4613      	mov	r3, r2
   9ae00:	00db      	lsls	r3, r3, #3
   9ae02:	1a9b      	subs	r3, r3, r2
   9ae04:	440b      	add	r3, r1
   9ae06:	781b      	ldrb	r3, [r3, #0]
   9ae08:	4618      	mov	r0, r3
   9ae0a:	4b19      	ldr	r3, [pc, #100]	; (9ae70 <Cl_Disinf_UpdateAlarmTable+0x104>)
   9ae0c:	4798      	blx	r3
   9ae0e:	4603      	mov	r3, r0
   9ae10:	75fb      	strb	r3, [r7, #23]
   9ae12:	e01e      	b.n	9ae52 <Cl_Disinf_UpdateAlarmTable+0xe6>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9ae14:	7dba      	ldrb	r2, [r7, #22]
   9ae16:	4914      	ldr	r1, [pc, #80]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ae18:	4613      	mov	r3, r2
   9ae1a:	00db      	lsls	r3, r3, #3
   9ae1c:	1a9b      	subs	r3, r3, r2
   9ae1e:	440b      	add	r3, r1
   9ae20:	3303      	adds	r3, #3
   9ae22:	781b      	ldrb	r3, [r3, #0]
   9ae24:	2b00      	cmp	r3, #0
   9ae26:	d014      	beq.n	9ae52 <Cl_Disinf_UpdateAlarmTable+0xe6>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9ae28:	7dba      	ldrb	r2, [r7, #22]
   9ae2a:	490f      	ldr	r1, [pc, #60]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ae2c:	4613      	mov	r3, r2
   9ae2e:	00db      	lsls	r3, r3, #3
   9ae30:	1a9b      	subs	r3, r3, r2
   9ae32:	440b      	add	r3, r1
   9ae34:	3303      	adds	r3, #3
   9ae36:	2200      	movs	r2, #0
   9ae38:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9ae3a:	2307      	movs	r3, #7
   9ae3c:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9ae3e:	7dba      	ldrb	r2, [r7, #22]
   9ae40:	4909      	ldr	r1, [pc, #36]	; (9ae68 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ae42:	4613      	mov	r3, r2
   9ae44:	00db      	lsls	r3, r3, #3
   9ae46:	1a9b      	subs	r3, r3, r2
   9ae48:	440b      	add	r3, r1
   9ae4a:	781b      	ldrb	r3, [r3, #0]
   9ae4c:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9ae4e:	2300      	movs	r3, #0
   9ae50:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9ae52:	7dbb      	ldrb	r3, [r7, #22]
   9ae54:	3301      	adds	r3, #1
   9ae56:	75bb      	strb	r3, [r7, #22]
   9ae58:	7dbb      	ldrb	r3, [r7, #22]
   9ae5a:	2b0b      	cmp	r3, #11
   9ae5c:	d99c      	bls.n	9ad98 <Cl_Disinf_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_disinfretcode );
   9ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
   9ae60:	4618      	mov	r0, r3
   9ae62:	3718      	adds	r7, #24
   9ae64:	46bd      	mov	sp, r7
   9ae66:	bd80      	pop	{r7, pc}
   9ae68:	20070a68 	.word	0x20070a68
   9ae6c:	00083095 	.word	0x00083095
   9ae70:	0009ae9d 	.word	0x0009ae9d

0009ae74 <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9ae74:	b580      	push	{r7, lr}
   9ae76:	b082      	sub	sp, #8
   9ae78:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9ae7a:	2300      	movs	r3, #0
   9ae7c:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ae7e:	234d      	movs	r3, #77	; 0x4d
   9ae80:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9ae82:	1d7b      	adds	r3, r7, #5
   9ae84:	4618      	mov	r0, r3
   9ae86:	4b04      	ldr	r3, [pc, #16]	; (9ae98 <Cl_disinf_ProcessAlarms+0x24>)
   9ae88:	4798      	blx	r3
   9ae8a:	4603      	mov	r3, r0
   9ae8c:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9ae8e:	79fb      	ldrb	r3, [r7, #7]
}
   9ae90:	4618      	mov	r0, r3
   9ae92:	3708      	adds	r7, #8
   9ae94:	46bd      	mov	sp, r7
   9ae96:	bd80      	pop	{r7, pc}
   9ae98:	0009ad6d 	.word	0x0009ad6d

0009ae9c <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9ae9c:	b580      	push	{r7, lr}
   9ae9e:	b086      	sub	sp, #24
   9aea0:	af00      	add	r7, sp, #0
   9aea2:	4603      	mov	r3, r0
   9aea4:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9aea6:	2300      	movs	r3, #0
   9aea8:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9aeaa:	f107 0308 	add.w	r3, r7, #8
   9aeae:	2100      	movs	r1, #0
   9aeb0:	460a      	mov	r2, r1
   9aeb2:	801a      	strh	r2, [r3, #0]
   9aeb4:	460a      	mov	r2, r1
   9aeb6:	709a      	strb	r2, [r3, #2]
   9aeb8:	2300      	movs	r3, #0
   9aeba:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9aebc:	234d      	movs	r3, #77	; 0x4d
   9aebe:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9aec0:	2300      	movs	r3, #0
   9aec2:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9aec4:	79fb      	ldrb	r3, [r7, #7]
   9aec6:	3b03      	subs	r3, #3
   9aec8:	2b28      	cmp	r3, #40	; 0x28
   9aeca:	f200 80d5 	bhi.w	9b078 <CL_DisinfAlarmActon+0x1dc>
   9aece:	a201      	add	r2, pc, #4	; (adr r2, 9aed4 <CL_DisinfAlarmActon+0x38>)
   9aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9aed4:	0009afd9 	.word	0x0009afd9
   9aed8:	0009afed 	.word	0x0009afed
   9aedc:	0009b079 	.word	0x0009b079
   9aee0:	0009b079 	.word	0x0009b079
   9aee4:	0009b079 	.word	0x0009b079
   9aee8:	0009b065 	.word	0x0009b065
   9aeec:	0009b079 	.word	0x0009b079
   9aef0:	0009b079 	.word	0x0009b079
   9aef4:	0009b079 	.word	0x0009b079
   9aef8:	0009b079 	.word	0x0009b079
   9aefc:	0009b079 	.word	0x0009b079
   9af00:	0009b079 	.word	0x0009b079
   9af04:	0009b079 	.word	0x0009b079
   9af08:	0009b079 	.word	0x0009b079
   9af0c:	0009b079 	.word	0x0009b079
   9af10:	0009b079 	.word	0x0009b079
   9af14:	0009b001 	.word	0x0009b001
   9af18:	0009b015 	.word	0x0009b015
   9af1c:	0009b029 	.word	0x0009b029
   9af20:	0009b029 	.word	0x0009b029
   9af24:	0009b03d 	.word	0x0009b03d
   9af28:	0009b03d 	.word	0x0009b03d
   9af2c:	0009b079 	.word	0x0009b079
   9af30:	0009b079 	.word	0x0009b079
   9af34:	0009b079 	.word	0x0009b079
   9af38:	0009b079 	.word	0x0009b079
   9af3c:	0009b079 	.word	0x0009b079
   9af40:	0009b079 	.word	0x0009b079
   9af44:	0009b079 	.word	0x0009b079
   9af48:	0009b079 	.word	0x0009b079
   9af4c:	0009b079 	.word	0x0009b079
   9af50:	0009b079 	.word	0x0009b079
   9af54:	0009b079 	.word	0x0009b079
   9af58:	0009b079 	.word	0x0009b079
   9af5c:	0009b079 	.word	0x0009b079
   9af60:	0009b079 	.word	0x0009b079
   9af64:	0009b051 	.word	0x0009b051
   9af68:	0009b051 	.word	0x0009b051
   9af6c:	0009af79 	.word	0x0009af79
   9af70:	0009b079 	.word	0x0009b079
   9af74:	0009afc5 	.word	0x0009afc5
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9af78:	4b4f      	ldr	r3, [pc, #316]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9af7a:	781b      	ldrb	r3, [r3, #0]
   9af7c:	2b10      	cmp	r3, #16
   9af7e:	d10b      	bne.n	9af98 <CL_DisinfAlarmActon+0xfc>
			{
				sv_cntrl_setredalarm();
   9af80:	4b4e      	ldr	r3, [pc, #312]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9af82:	4798      	blx	r3
				sv_cntrl_buzzer();
   9af84:	4b4e      	ldr	r3, [pc, #312]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9af86:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9af88:	4b4b      	ldr	r3, [pc, #300]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9af8a:	781b      	ldrb	r3, [r3, #0]
   9af8c:	2b10      	cmp	r3, #16
   9af8e:	d175      	bne.n	9b07c <CL_DisinfAlarmActon+0x1e0>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9af90:	4b49      	ldr	r3, [pc, #292]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9af92:	2210      	movs	r2, #16
   9af94:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9af96:	e071      	b.n	9b07c <CL_DisinfAlarmActon+0x1e0>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9af98:	4b47      	ldr	r3, [pc, #284]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9af9a:	781b      	ldrb	r3, [r3, #0]
   9af9c:	2b11      	cmp	r3, #17
   9af9e:	d107      	bne.n	9afb0 <CL_DisinfAlarmActon+0x114>
			{
				sv_cntrl_setredalarm();
   9afa0:	4b46      	ldr	r3, [pc, #280]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9afa2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9afa4:	4b46      	ldr	r3, [pc, #280]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9afa6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9afa8:	4b43      	ldr	r3, [pc, #268]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9afaa:	2211      	movs	r2, #17
   9afac:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9afae:	e065      	b.n	9b07c <CL_DisinfAlarmActon+0x1e0>
				sv_cntrl_buzzer();
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
			}
			else
			{
				sv_cntrl_setredalarm();
   9afb0:	4b42      	ldr	r3, [pc, #264]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9afb2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9afb4:	4b42      	ldr	r3, [pc, #264]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9afb6:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9afb8:	4b42      	ldr	r3, [pc, #264]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9afba:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9afbc:	4b3e      	ldr	r3, [pc, #248]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9afbe:	220c      	movs	r2, #12
   9afc0:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9afc2:	e05b      	b.n	9b07c <CL_DisinfAlarmActon+0x1e0>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9afc4:	4b3d      	ldr	r3, [pc, #244]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9afc6:	4798      	blx	r3
			sv_cntrl_buzzer();
   9afc8:	4b3d      	ldr	r3, [pc, #244]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9afca:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9afcc:	4b3d      	ldr	r3, [pc, #244]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9afce:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9afd0:	4b39      	ldr	r3, [pc, #228]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9afd2:	220c      	movs	r2, #12
   9afd4:	701a      	strb	r2, [r3, #0]
			break;
   9afd6:	e052      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9afd8:	4b38      	ldr	r3, [pc, #224]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9afda:	4798      	blx	r3
				sv_cntrl_buzzer();
   9afdc:	4b38      	ldr	r3, [pc, #224]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9afde:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9afe0:	4b38      	ldr	r3, [pc, #224]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9afe2:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9afe4:	4b34      	ldr	r3, [pc, #208]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9afe6:	220c      	movs	r2, #12
   9afe8:	701a      	strb	r2, [r3, #0]
			break;
   9afea:	e048      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9afec:	4b33      	ldr	r3, [pc, #204]	; (9b0bc <CL_DisinfAlarmActon+0x220>)
   9afee:	4798      	blx	r3
				sv_cntrl_buzzer();
   9aff0:	4b33      	ldr	r3, [pc, #204]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9aff2:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9aff4:	4b33      	ldr	r3, [pc, #204]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9aff6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9aff8:	4b2f      	ldr	r3, [pc, #188]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9affa:	220c      	movs	r2, #12
   9affc:	701a      	strb	r2, [r3, #0]
			break;
   9affe:	e03e      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9b000:	4b31      	ldr	r3, [pc, #196]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b002:	4798      	blx	r3
					sv_cntrl_buzzer();
   9b004:	4b2e      	ldr	r3, [pc, #184]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b006:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9b008:	4b2e      	ldr	r3, [pc, #184]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b00a:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b00c:	4b2a      	ldr	r3, [pc, #168]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b00e:	220c      	movs	r2, #12
   9b010:	701a      	strb	r2, [r3, #0]
			break;
   9b012:	e034      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9b014:	4b2c      	ldr	r3, [pc, #176]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b016:	4798      	blx	r3
			sv_cntrl_buzzer();
   9b018:	4b29      	ldr	r3, [pc, #164]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b01a:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9b01c:	4b29      	ldr	r3, [pc, #164]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b01e:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b020:	4b25      	ldr	r3, [pc, #148]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b022:	220c      	movs	r2, #12
   9b024:	701a      	strb	r2, [r3, #0]
			break;
   9b026:	e02a      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9b028:	4b27      	ldr	r3, [pc, #156]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b02a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9b02c:	4b24      	ldr	r3, [pc, #144]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b02e:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9b030:	4b24      	ldr	r3, [pc, #144]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b032:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b034:	4b20      	ldr	r3, [pc, #128]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b036:	220c      	movs	r2, #12
   9b038:	701a      	strb	r2, [r3, #0]
			break;
   9b03a:	e020      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9b03c:	4b22      	ldr	r3, [pc, #136]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b03e:	4798      	blx	r3
				sv_cntrl_buzzer();
   9b040:	4b1f      	ldr	r3, [pc, #124]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b042:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9b044:	4b1f      	ldr	r3, [pc, #124]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b046:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b048:	4b1b      	ldr	r3, [pc, #108]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b04a:	220c      	movs	r2, #12
   9b04c:	701a      	strb	r2, [r3, #0]
			break;
   9b04e:	e016      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9b050:	4b1d      	ldr	r3, [pc, #116]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b052:	4798      	blx	r3
				sv_cntrl_buzzer();
   9b054:	4b1a      	ldr	r3, [pc, #104]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b056:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9b058:	4b1a      	ldr	r3, [pc, #104]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b05a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b05c:	4b16      	ldr	r3, [pc, #88]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b05e:	220c      	movs	r2, #12
   9b060:	701a      	strb	r2, [r3, #0]
			break;
   9b062:	e00c      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9b064:	4b18      	ldr	r3, [pc, #96]	; (9b0c8 <CL_DisinfAlarmActon+0x22c>)
   9b066:	4798      	blx	r3
				sv_cntrl_buzzer();
   9b068:	4b15      	ldr	r3, [pc, #84]	; (9b0c0 <CL_DisinfAlarmActon+0x224>)
   9b06a:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9b06c:	4b15      	ldr	r3, [pc, #84]	; (9b0c4 <CL_DisinfAlarmActon+0x228>)
   9b06e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9b070:	4b11      	ldr	r3, [pc, #68]	; (9b0b8 <CL_DisinfAlarmActon+0x21c>)
   9b072:	220c      	movs	r2, #12
   9b074:	701a      	strb	r2, [r3, #0]
			break;
   9b076:	e002      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
			
			default:
			break;
   9b078:	bf00      	nop
   9b07a:	e000      	b.n	9b07e <CL_DisinfAlarmActon+0x1e2>
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9b07c:	bf00      	nop
			
			default:
			break;

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9b07e:	79fb      	ldrb	r3, [r7, #7]
   9b080:	2b00      	cmp	r3, #0
   9b082:	d013      	beq.n	9b0ac <CL_DisinfAlarmActon+0x210>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9b084:	79fb      	ldrb	r3, [r7, #7]
   9b086:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9b088:	2301      	movs	r3, #1
   9b08a:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9b08c:	2302      	movs	r3, #2
   9b08e:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9b090:	2307      	movs	r3, #7
   9b092:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9b094:	f107 0108 	add.w	r1, r7, #8
   9b098:	7bfb      	ldrb	r3, [r7, #15]
   9b09a:	2203      	movs	r2, #3
   9b09c:	4618      	mov	r0, r3
   9b09e:	4b0b      	ldr	r3, [pc, #44]	; (9b0cc <CL_DisinfAlarmActon+0x230>)
   9b0a0:	4798      	blx	r3
   9b0a2:	4603      	mov	r3, r0
   9b0a4:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9b0a6:	200a      	movs	r0, #10
   9b0a8:	4b09      	ldr	r3, [pc, #36]	; (9b0d0 <CL_DisinfAlarmActon+0x234>)
   9b0aa:	4798      	blx	r3
		 }
	return CL_OK;		
   9b0ac:	2300      	movs	r3, #0
}
   9b0ae:	4618      	mov	r0, r3
   9b0b0:	3718      	adds	r7, #24
   9b0b2:	46bd      	mov	sp, r7
   9b0b4:	bd80      	pop	{r7, pc}
   9b0b6:	bf00      	nop
   9b0b8:	200727af 	.word	0x200727af
   9b0bc:	00097749 	.word	0x00097749
   9b0c0:	00097785 	.word	0x00097785
   9b0c4:	0009abed 	.word	0x0009abed
   9b0c8:	0009775d 	.word	0x0009775d
   9b0cc:	0009926d 	.word	0x0009926d
   9b0d0:	000918fd 	.word	0x000918fd

0009b0d4 <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9b0d4:	b580      	push	{r7, lr}
   9b0d6:	b082      	sub	sp, #8
   9b0d8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9b0da:	2300      	movs	r3, #0
   9b0dc:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9b0de:	234d      	movs	r3, #77	; 0x4d
   9b0e0:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9b0e2:	4b2d      	ldr	r3, [pc, #180]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b0e4:	2200      	movs	r2, #0
   9b0e6:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9b0e8:	4b2b      	ldr	r3, [pc, #172]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b0ea:	2200      	movs	r2, #0
   9b0ec:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9b0ee:	2029      	movs	r0, #41	; 0x29
   9b0f0:	4b2a      	ldr	r3, [pc, #168]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b0f2:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9b0f4:	202b      	movs	r0, #43	; 0x2b
   9b0f6:	4b29      	ldr	r3, [pc, #164]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b0f8:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9b0fa:	4b27      	ldr	r3, [pc, #156]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b0fc:	2200      	movs	r2, #0
   9b0fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9b102:	2008      	movs	r0, #8
   9b104:	4b25      	ldr	r3, [pc, #148]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b106:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9b108:	4b23      	ldr	r3, [pc, #140]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b10a:	2200      	movs	r2, #0
   9b10c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9b110:	4b21      	ldr	r3, [pc, #132]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b112:	2200      	movs	r2, #0
   9b114:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9b118:	2015      	movs	r0, #21
   9b11a:	4b20      	ldr	r3, [pc, #128]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b11c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9b11e:	2016      	movs	r0, #22
   9b120:	4b1e      	ldr	r3, [pc, #120]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b122:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9b124:	4b1c      	ldr	r3, [pc, #112]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b126:	2200      	movs	r2, #0
   9b128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9b12c:	4b1a      	ldr	r3, [pc, #104]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b12e:	2200      	movs	r2, #0
   9b130:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9b134:	2017      	movs	r0, #23
   9b136:	4b19      	ldr	r3, [pc, #100]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b138:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9b13a:	2018      	movs	r0, #24
   9b13c:	4b17      	ldr	r3, [pc, #92]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b13e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9b140:	4b15      	ldr	r3, [pc, #84]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b142:	2200      	movs	r2, #0
   9b144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9b148:	4b13      	ldr	r3, [pc, #76]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b14a:	2200      	movs	r2, #0
   9b14c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9b150:	2028      	movs	r0, #40	; 0x28
   9b152:	4b12      	ldr	r3, [pc, #72]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b154:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9b156:	2027      	movs	r0, #39	; 0x27
   9b158:	4b10      	ldr	r3, [pc, #64]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b15a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9b15c:	4b0e      	ldr	r3, [pc, #56]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b15e:	2200      	movs	r2, #0
   9b160:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9b162:	2011      	movs	r0, #17
   9b164:	4b0d      	ldr	r3, [pc, #52]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b166:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9b168:	4b0b      	ldr	r3, [pc, #44]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b16a:	2200      	movs	r2, #0
   9b16c:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9b16e:	2003      	movs	r0, #3
   9b170:	4b0a      	ldr	r3, [pc, #40]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b172:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9b174:	2005      	movs	r0, #5
   9b176:	4b09      	ldr	r3, [pc, #36]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b178:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9b17a:	4b07      	ldr	r3, [pc, #28]	; (9b198 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9b17c:	2200      	movs	r2, #0
   9b17e:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9b180:	2004      	movs	r0, #4
   9b182:	4b06      	ldr	r3, [pc, #24]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b184:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9b186:	2006      	movs	r0, #6
   9b188:	4b04      	ldr	r3, [pc, #16]	; (9b19c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9b18a:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9b18c:	79fb      	ldrb	r3, [r7, #7]
}
   9b18e:	4618      	mov	r0, r3
   9b190:	3708      	adds	r7, #8
   9b192:	46bd      	mov	sp, r7
   9b194:	bd80      	pop	{r7, pc}
   9b196:	bf00      	nop
   9b198:	20070a68 	.word	0x20070a68
   9b19c:	00083051 	.word	0x00083051

0009b1a0 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   9b1a2:	b08b      	sub	sp, #44	; 0x2c
   9b1a4:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9b1a6:	2300      	movs	r3, #0
   9b1a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9b1ac:	2300      	movs	r3, #0
   9b1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9b1b2:	463b      	mov	r3, r7
   9b1b4:	2200      	movs	r2, #0
   9b1b6:	601a      	str	r2, [r3, #0]
   9b1b8:	605a      	str	r2, [r3, #4]
   9b1ba:	609a      	str	r2, [r3, #8]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9b1bc:	4bae      	ldr	r3, [pc, #696]	; (9b478 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   9b1be:	681b      	ldr	r3, [r3, #0]
   9b1c0:	3301      	adds	r3, #1
   9b1c2:	4aad      	ldr	r2, [pc, #692]	; (9b478 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   9b1c4:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9b1c6:	4bac      	ldr	r3, [pc, #688]	; (9b478 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   9b1c8:	681b      	ldr	r3, [r3, #0]
   9b1ca:	2b04      	cmp	r3, #4
   9b1cc:	f240 8147 	bls.w	9b45e <Cl_Disinf_SendDisinfStateData+0x2be>
	{
		return;
	}
	else
	{
		timecount = 0;
   9b1d0:	4ba9      	ldr	r3, [pc, #676]	; (9b478 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   9b1d2:	2200      	movs	r2, #0
   9b1d4:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9b1d6:	230b      	movs	r3, #11
   9b1d8:	703b      	strb	r3, [r7, #0]
	count++;
   9b1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b1de:	3301      	adds	r3, #1
   9b1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9b1e4:	f107 030e 	add.w	r3, r7, #14
   9b1e8:	4619      	mov	r1, r3
   9b1ea:	2014      	movs	r0, #20
   9b1ec:	4ba3      	ldr	r3, [pc, #652]	; (9b47c <Cl_Disinf_SendDisinfStateData+0x2dc>)
   9b1ee:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9b1f0:	2300      	movs	r3, #0
   9b1f2:	613b      	str	r3, [r7, #16]
// 			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
// //			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
// //			temp1 = temp1 - 3.1 -2 ;										// sensor offset
// //			avgtmp3 =(avgtmp3*5 + temp1)/6;
// 			avgtmp3 = (res_temp_value- 0.4)/10;
			temp1 = (float)temp/100;
   9b1f4:	89fa      	ldrh	r2, [r7, #14]
   9b1f6:	4ba2      	ldr	r3, [pc, #648]	; (9b480 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   9b1f8:	4610      	mov	r0, r2
   9b1fa:	4798      	blx	r3
   9b1fc:	4602      	mov	r2, r0
   9b1fe:	4ba1      	ldr	r3, [pc, #644]	; (9b484 <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9b200:	49a1      	ldr	r1, [pc, #644]	; (9b488 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   9b202:	4610      	mov	r0, r2
   9b204:	4798      	blx	r3
   9b206:	4603      	mov	r3, r0
   9b208:	623b      	str	r3, [r7, #32]
			avgtmp3 = temp;
   9b20a:	89fa      	ldrh	r2, [r7, #14]
   9b20c:	4b9c      	ldr	r3, [pc, #624]	; (9b480 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   9b20e:	4610      	mov	r0, r2
   9b210:	4798      	blx	r3
   9b212:	4602      	mov	r2, r0
   9b214:	4b9d      	ldr	r3, [pc, #628]	; (9b48c <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9b216:	601a      	str	r2, [r3, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9b218:	f107 030e 	add.w	r3, r7, #14
   9b21c:	4619      	mov	r1, r3
   9b21e:	2007      	movs	r0, #7
   9b220:	4b96      	ldr	r3, [pc, #600]	; (9b47c <Cl_Disinf_SendDisinfStateData+0x2dc>)
   9b222:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9b224:	f04f 0300 	mov.w	r3, #0
   9b228:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9b22a:	f04f 0300 	mov.w	r3, #0
   9b22e:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9b230:	89fb      	ldrh	r3, [r7, #14]
   9b232:	461a      	mov	r2, r3
   9b234:	4b96      	ldr	r3, [pc, #600]	; (9b490 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   9b236:	4610      	mov	r0, r2
   9b238:	4798      	blx	r3
   9b23a:	4c96      	ldr	r4, [pc, #600]	; (9b494 <Cl_Disinf_SendDisinfStateData+0x2f4>)
   9b23c:	a38a      	add	r3, pc, #552	; (adr r3, 9b468 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   9b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b242:	47a0      	blx	r4
   9b244:	4603      	mov	r3, r0
   9b246:	460c      	mov	r4, r1
   9b248:	4619      	mov	r1, r3
   9b24a:	4622      	mov	r2, r4
   9b24c:	4b92      	ldr	r3, [pc, #584]	; (9b498 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   9b24e:	4608      	mov	r0, r1
   9b250:	4611      	mov	r1, r2
   9b252:	4798      	blx	r3
   9b254:	4603      	mov	r3, r0
   9b256:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9b258:	4b90      	ldr	r3, [pc, #576]	; (9b49c <Cl_Disinf_SendDisinfStateData+0x2fc>)
   9b25a:	4991      	ldr	r1, [pc, #580]	; (9b4a0 <Cl_Disinf_SendDisinfStateData+0x300>)
   9b25c:	69b8      	ldr	r0, [r7, #24]
   9b25e:	4798      	blx	r3
   9b260:	4603      	mov	r3, r0
   9b262:	2b00      	cmp	r3, #0
   9b264:	f000 8088 	beq.w	9b378 <Cl_Disinf_SendDisinfStateData+0x1d8>
					{
			calibration_cond(temp2);
   9b268:	69b8      	ldr	r0, [r7, #24]
   9b26a:	4b8e      	ldr	r3, [pc, #568]	; (9b4a4 <Cl_Disinf_SendDisinfStateData+0x304>)
   9b26c:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9b26e:	4b8e      	ldr	r3, [pc, #568]	; (9b4a8 <Cl_Disinf_SendDisinfStateData+0x308>)
   9b270:	681a      	ldr	r2, [r3, #0]
   9b272:	4b8e      	ldr	r3, [pc, #568]	; (9b4ac <Cl_Disinf_SendDisinfStateData+0x30c>)
   9b274:	498e      	ldr	r1, [pc, #568]	; (9b4b0 <Cl_Disinf_SendDisinfStateData+0x310>)
   9b276:	4610      	mov	r0, r2
   9b278:	4798      	blx	r3
   9b27a:	4603      	mov	r3, r0
   9b27c:	4618      	mov	r0, r3
   9b27e:	4b8d      	ldr	r3, [pc, #564]	; (9b4b4 <Cl_Disinf_SendDisinfStateData+0x314>)
   9b280:	681a      	ldr	r2, [r3, #0]
   9b282:	4b8d      	ldr	r3, [pc, #564]	; (9b4b8 <Cl_Disinf_SendDisinfStateData+0x318>)
   9b284:	4611      	mov	r1, r2
   9b286:	4798      	blx	r3
   9b288:	4603      	mov	r3, r0
   9b28a:	461a      	mov	r2, r3
   9b28c:	4b7d      	ldr	r3, [pc, #500]	; (9b484 <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9b28e:	498b      	ldr	r1, [pc, #556]	; (9b4bc <Cl_Disinf_SendDisinfStateData+0x31c>)
   9b290:	4610      	mov	r0, r2
   9b292:	4798      	blx	r3
   9b294:	4603      	mov	r3, r0
   9b296:	461a      	mov	r2, r3
   9b298:	4b83      	ldr	r3, [pc, #524]	; (9b4a8 <Cl_Disinf_SendDisinfStateData+0x308>)
   9b29a:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9b29c:	4b82      	ldr	r3, [pc, #520]	; (9b4a8 <Cl_Disinf_SendDisinfStateData+0x308>)
   9b29e:	681a      	ldr	r2, [r3, #0]
   9b2a0:	4b87      	ldr	r3, [pc, #540]	; (9b4c0 <Cl_Disinf_SendDisinfStateData+0x320>)
   9b2a2:	4610      	mov	r0, r2
   9b2a4:	4798      	blx	r3
   9b2a6:	4605      	mov	r5, r0
   9b2a8:	460e      	mov	r6, r1
   9b2aa:	4b78      	ldr	r3, [pc, #480]	; (9b48c <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9b2ac:	681a      	ldr	r2, [r3, #0]
   9b2ae:	4b84      	ldr	r3, [pc, #528]	; (9b4c0 <Cl_Disinf_SendDisinfStateData+0x320>)
   9b2b0:	4610      	mov	r0, r2
   9b2b2:	4798      	blx	r3
   9b2b4:	4c83      	ldr	r4, [pc, #524]	; (9b4c4 <Cl_Disinf_SendDisinfStateData+0x324>)
   9b2b6:	f04f 0200 	mov.w	r2, #0
   9b2ba:	4b83      	ldr	r3, [pc, #524]	; (9b4c8 <Cl_Disinf_SendDisinfStateData+0x328>)
   9b2bc:	47a0      	blx	r4
   9b2be:	4603      	mov	r3, r0
   9b2c0:	460c      	mov	r4, r1
   9b2c2:	4618      	mov	r0, r3
   9b2c4:	4621      	mov	r1, r4
   9b2c6:	4c73      	ldr	r4, [pc, #460]	; (9b494 <Cl_Disinf_SendDisinfStateData+0x2f4>)
   9b2c8:	a369      	add	r3, pc, #420	; (adr r3, 9b470 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   9b2ce:	47a0      	blx	r4
   9b2d0:	4603      	mov	r3, r0
   9b2d2:	460c      	mov	r4, r1
   9b2d4:	4618      	mov	r0, r3
   9b2d6:	4621      	mov	r1, r4
   9b2d8:	4c7c      	ldr	r4, [pc, #496]	; (9b4cc <Cl_Disinf_SendDisinfStateData+0x32c>)
   9b2da:	f04f 0200 	mov.w	r2, #0
   9b2de:	4b7c      	ldr	r3, [pc, #496]	; (9b4d0 <Cl_Disinf_SendDisinfStateData+0x330>)
   9b2e0:	47a0      	blx	r4
   9b2e2:	4603      	mov	r3, r0
   9b2e4:	460c      	mov	r4, r1
   9b2e6:	461a      	mov	r2, r3
   9b2e8:	4623      	mov	r3, r4
   9b2ea:	4c7a      	ldr	r4, [pc, #488]	; (9b4d4 <Cl_Disinf_SendDisinfStateData+0x334>)
   9b2ec:	4628      	mov	r0, r5
   9b2ee:	4631      	mov	r1, r6
   9b2f0:	47a0      	blx	r4
   9b2f2:	4603      	mov	r3, r0
   9b2f4:	460c      	mov	r4, r1
   9b2f6:	4619      	mov	r1, r3
   9b2f8:	4622      	mov	r2, r4
   9b2fa:	4b67      	ldr	r3, [pc, #412]	; (9b498 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   9b2fc:	4608      	mov	r0, r1
   9b2fe:	4611      	mov	r1, r2
   9b300:	4798      	blx	r3
   9b302:	4603      	mov	r3, r0
   9b304:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9b306:	4b5f      	ldr	r3, [pc, #380]	; (9b484 <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9b308:	4973      	ldr	r1, [pc, #460]	; (9b4d8 <Cl_Disinf_SendDisinfStateData+0x338>)
   9b30a:	69f8      	ldr	r0, [r7, #28]
   9b30c:	4798      	blx	r3
   9b30e:	4603      	mov	r3, r0
   9b310:	461a      	mov	r2, r3
   9b312:	4b72      	ldr	r3, [pc, #456]	; (9b4dc <Cl_Disinf_SendDisinfStateData+0x33c>)
   9b314:	4610      	mov	r0, r2
   9b316:	4798      	blx	r3
   9b318:	4603      	mov	r3, r0
   9b31a:	b29b      	uxth	r3, r3
   9b31c:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9b31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b322:	1c5a      	adds	r2, r3, #1
   9b324:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b328:	7c3a      	ldrb	r2, [r7, #16]
   9b32a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b32e:	440b      	add	r3, r1
   9b330:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9b334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b338:	1c5a      	adds	r2, r3, #1
   9b33a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b33e:	7c7a      	ldrb	r2, [r7, #17]
   9b340:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b344:	440b      	add	r3, r1
   9b346:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9b34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b34e:	1c5a      	adds	r2, r3, #1
   9b350:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b354:	7cba      	ldrb	r2, [r7, #18]
   9b356:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b35a:	440b      	add	r3, r1
   9b35c:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9b360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b364:	1c5a      	adds	r2, r3, #1
   9b366:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b36a:	7cfa      	ldrb	r2, [r7, #19]
   9b36c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b370:	440b      	add	r3, r1
   9b372:	f803 2c28 	strb.w	r2, [r3, #-40]
   9b376:	e02d      	b.n	9b3d4 <Cl_Disinf_SendDisinfStateData+0x234>
					}
		else
					{
			data.Twobyte = 0;
   9b378:	2300      	movs	r3, #0
   9b37a:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9b37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b380:	1c5a      	adds	r2, r3, #1
   9b382:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b386:	7c3a      	ldrb	r2, [r7, #16]
   9b388:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b38c:	440b      	add	r3, r1
   9b38e:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9b392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b396:	1c5a      	adds	r2, r3, #1
   9b398:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b39c:	7c7a      	ldrb	r2, [r7, #17]
   9b39e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b3a2:	440b      	add	r3, r1
   9b3a4:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9b3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b3ac:	1c5a      	adds	r2, r3, #1
   9b3ae:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b3b2:	7cba      	ldrb	r2, [r7, #18]
   9b3b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b3b8:	440b      	add	r3, r1
   9b3ba:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9b3be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b3c2:	1c5a      	adds	r2, r3, #1
   9b3c4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b3c8:	7cfa      	ldrb	r2, [r7, #19]
   9b3ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b3ce:	440b      	add	r3, r1
   9b3d0:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9b3d4:	4b2d      	ldr	r3, [pc, #180]	; (9b48c <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9b3d6:	681a      	ldr	r2, [r3, #0]
   9b3d8:	4b34      	ldr	r3, [pc, #208]	; (9b4ac <Cl_Disinf_SendDisinfStateData+0x30c>)
   9b3da:	493f      	ldr	r1, [pc, #252]	; (9b4d8 <Cl_Disinf_SendDisinfStateData+0x338>)
   9b3dc:	4610      	mov	r0, r2
   9b3de:	4798      	blx	r3
   9b3e0:	4603      	mov	r3, r0
   9b3e2:	461a      	mov	r2, r3
   9b3e4:	4b3d      	ldr	r3, [pc, #244]	; (9b4dc <Cl_Disinf_SendDisinfStateData+0x33c>)
   9b3e6:	4610      	mov	r0, r2
   9b3e8:	4798      	blx	r3
   9b3ea:	4603      	mov	r3, r0
   9b3ec:	b29b      	uxth	r3, r3
   9b3ee:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9b3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b3f4:	1c5a      	adds	r2, r3, #1
   9b3f6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b3fa:	7c3a      	ldrb	r2, [r7, #16]
   9b3fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b400:	440b      	add	r3, r1
   9b402:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9b406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b40a:	1c5a      	adds	r2, r3, #1
   9b40c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b410:	7c7a      	ldrb	r2, [r7, #17]
   9b412:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b416:	440b      	add	r3, r1
   9b418:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b420:	1c5a      	adds	r2, r3, #1
   9b422:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b426:	7cba      	ldrb	r2, [r7, #18]
   9b428:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b42c:	440b      	add	r3, r1
   9b42e:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9b432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9b436:	1c5a      	adds	r2, r3, #1
   9b438:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9b43c:	7cfa      	ldrb	r2, [r7, #19]
   9b43e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9b442:	440b      	add	r3, r1
   9b444:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9b448:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9b44c:	463b      	mov	r3, r7
   9b44e:	4619      	mov	r1, r3
   9b450:	202a      	movs	r0, #42	; 0x2a
   9b452:	4b23      	ldr	r3, [pc, #140]	; (9b4e0 <Cl_Disinf_SendDisinfStateData+0x340>)
   9b454:	4798      	blx	r3
   9b456:	4603      	mov	r3, r0
   9b458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9b45c:	e000      	b.n	9b460 <Cl_Disinf_SendDisinfStateData+0x2c0>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   9b45e:	bf00      	nop

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
	
	
	}
   9b460:	4618      	mov	r0, r3
   9b462:	372c      	adds	r7, #44	; 0x2c
   9b464:	46bd      	mov	sp, r7
   9b466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9b468:	58e21965 	.word	0x58e21965
   9b46c:	3fe9b717 	.word	0x3fe9b717
   9b470:	47ae147b 	.word	0x47ae147b
   9b474:	3f947ae1 	.word	0x3f947ae1
   9b478:	200727dc 	.word	0x200727dc
   9b47c:	0008d61d 	.word	0x0008d61d
   9b480:	000a33a1 	.word	0x000a33a1
   9b484:	000a35b9 	.word	0x000a35b9
   9b488:	42c80000 	.word	0x42c80000
   9b48c:	200727e0 	.word	0x200727e0
   9b490:	000a2b05 	.word	0x000a2b05
   9b494:	000a2bd1 	.word	0x000a2bd1
   9b498:	000a3195 	.word	0x000a3195
   9b49c:	000a37c9 	.word	0x000a37c9
   9b4a0:	44160000 	.word	0x44160000
   9b4a4:	00084709 	.word	0x00084709
   9b4a8:	200727e4 	.word	0x200727e4
   9b4ac:	000a3451 	.word	0x000a3451
   9b4b0:	40a00000 	.word	0x40a00000
   9b4b4:	20071674 	.word	0x20071674
   9b4b8:	000a3241 	.word	0x000a3241
   9b4bc:	40c00000 	.word	0x40c00000
   9b4c0:	000a2b29 	.word	0x000a2b29
   9b4c4:	000a2869 	.word	0x000a2869
   9b4c8:	40390000 	.word	0x40390000
   9b4cc:	000a286d 	.word	0x000a286d
   9b4d0:	3ff00000 	.word	0x3ff00000
   9b4d4:	000a2e25 	.word	0x000a2e25
   9b4d8:	41200000 	.word	0x41200000
   9b4dc:	000a3829 	.word	0x000a3829
   9b4e0:	0009926d 	.word	0x0009926d

0009b4e4 <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9b4e4:	b580      	push	{r7, lr}
   9b4e6:	b082      	sub	sp, #8
   9b4e8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9b4ea:	2300      	movs	r3, #0
   9b4ec:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9b4ee:	4b0b      	ldr	r3, [pc, #44]	; (9b51c <UpdateDisinfMinuteTick+0x38>)
   9b4f0:	2200      	movs	r2, #0
   9b4f2:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9b4f4:	4b0a      	ldr	r3, [pc, #40]	; (9b520 <UpdateDisinfMinuteTick+0x3c>)
   9b4f6:	681b      	ldr	r3, [r3, #0]
   9b4f8:	3301      	adds	r3, #1
   9b4fa:	4a09      	ldr	r2, [pc, #36]	; (9b520 <UpdateDisinfMinuteTick+0x3c>)
   9b4fc:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9b4fe:	4b09      	ldr	r3, [pc, #36]	; (9b524 <UpdateDisinfMinuteTick+0x40>)
   9b500:	681b      	ldr	r3, [r3, #0]
   9b502:	3301      	adds	r3, #1
   9b504:	4a07      	ldr	r2, [pc, #28]	; (9b524 <UpdateDisinfMinuteTick+0x40>)
   9b506:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9b508:	4b07      	ldr	r3, [pc, #28]	; (9b528 <UpdateDisinfMinuteTick+0x44>)
   9b50a:	4798      	blx	r3
   9b50c:	4603      	mov	r3, r0
   9b50e:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9b510:	79fb      	ldrb	r3, [r7, #7]
	}
   9b512:	4618      	mov	r0, r3
   9b514:	3708      	adds	r7, #8
   9b516:	46bd      	mov	sp, r7
   9b518:	bd80      	pop	{r7, pc}
   9b51a:	bf00      	nop
   9b51c:	200727b0 	.word	0x200727b0
   9b520:	200727b4 	.word	0x200727b4
   9b524:	200727c8 	.word	0x200727c8
   9b528:	0009ad21 	.word	0x0009ad21

0009b52c <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9b52c:	b580      	push	{r7, lr}
   9b52e:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9b530:	4b2f      	ldr	r3, [pc, #188]	; (9b5f0 <Cl_dprep_init+0xc4>)
   9b532:	2200      	movs	r2, #0
   9b534:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9b536:	4b2f      	ldr	r3, [pc, #188]	; (9b5f4 <Cl_dprep_init+0xc8>)
   9b538:	2200      	movs	r2, #0
   9b53a:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9b53c:	4b2e      	ldr	r3, [pc, #184]	; (9b5f8 <Cl_dprep_init+0xcc>)
   9b53e:	2200      	movs	r2, #0
   9b540:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9b542:	4b2e      	ldr	r3, [pc, #184]	; (9b5fc <Cl_dprep_init+0xd0>)
   9b544:	2200      	movs	r2, #0
   9b546:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9b548:	4b2d      	ldr	r3, [pc, #180]	; (9b600 <Cl_dprep_init+0xd4>)
   9b54a:	2200      	movs	r2, #0
   9b54c:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9b54e:	4b2d      	ldr	r3, [pc, #180]	; (9b604 <Cl_dprep_init+0xd8>)
   9b550:	2200      	movs	r2, #0
   9b552:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9b554:	4b2c      	ldr	r3, [pc, #176]	; (9b608 <Cl_dprep_init+0xdc>)
   9b556:	2200      	movs	r2, #0
   9b558:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9b55a:	4b2c      	ldr	r3, [pc, #176]	; (9b60c <Cl_dprep_init+0xe0>)
   9b55c:	2200      	movs	r2, #0
   9b55e:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9b560:	4b2b      	ldr	r3, [pc, #172]	; (9b610 <Cl_dprep_init+0xe4>)
   9b562:	2200      	movs	r2, #0
   9b564:	801a      	strh	r2, [r3, #0]

	Cl_Dprep_Prime_secondscounter = 0;
   9b566:	4b2b      	ldr	r3, [pc, #172]	; (9b614 <Cl_dprep_init+0xe8>)
   9b568:	2200      	movs	r2, #0
   9b56a:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9b56c:	4b2a      	ldr	r3, [pc, #168]	; (9b618 <Cl_dprep_init+0xec>)
   9b56e:	2200      	movs	r2, #0
   9b570:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9b572:	4b2a      	ldr	r3, [pc, #168]	; (9b61c <Cl_dprep_init+0xf0>)
   9b574:	2200      	movs	r2, #0
   9b576:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9b578:	4b29      	ldr	r3, [pc, #164]	; (9b620 <Cl_dprep_init+0xf4>)
   9b57a:	2200      	movs	r2, #0
   9b57c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9b57e:	4b29      	ldr	r3, [pc, #164]	; (9b624 <Cl_dprep_init+0xf8>)
   9b580:	2200      	movs	r2, #0
   9b582:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9b584:	4b28      	ldr	r3, [pc, #160]	; (9b628 <Cl_dprep_init+0xfc>)
   9b586:	2200      	movs	r2, #0
   9b588:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9b58a:	4b28      	ldr	r3, [pc, #160]	; (9b62c <Cl_dprep_init+0x100>)
   9b58c:	2200      	movs	r2, #0
   9b58e:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9b590:	4b27      	ldr	r3, [pc, #156]	; (9b630 <Cl_dprep_init+0x104>)
   9b592:	2200      	movs	r2, #0
   9b594:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9b596:	4b27      	ldr	r3, [pc, #156]	; (9b634 <Cl_dprep_init+0x108>)
   9b598:	f04f 0200 	mov.w	r2, #0
   9b59c:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9b59e:	4b26      	ldr	r3, [pc, #152]	; (9b638 <Cl_dprep_init+0x10c>)
   9b5a0:	2200      	movs	r2, #0
   9b5a2:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9b5a4:	4b25      	ldr	r3, [pc, #148]	; (9b63c <Cl_dprep_init+0x110>)
   9b5a6:	2200      	movs	r2, #0
   9b5a8:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9b5aa:	4b25      	ldr	r3, [pc, #148]	; (9b640 <Cl_dprep_init+0x114>)
   9b5ac:	2200      	movs	r2, #0
   9b5ae:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9b5b0:	4b24      	ldr	r3, [pc, #144]	; (9b644 <Cl_dprep_init+0x118>)
   9b5b2:	2200      	movs	r2, #0
   9b5b4:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9b5b6:	4b24      	ldr	r3, [pc, #144]	; (9b648 <Cl_dprep_init+0x11c>)
   9b5b8:	2200      	movs	r2, #0
   9b5ba:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9b5bc:	4b23      	ldr	r3, [pc, #140]	; (9b64c <Cl_dprep_init+0x120>)
   9b5be:	2200      	movs	r2, #0
   9b5c0:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9b5c2:	4b23      	ldr	r3, [pc, #140]	; (9b650 <Cl_dprep_init+0x124>)
   9b5c4:	2200      	movs	r2, #0
   9b5c6:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9b5c8:	4b22      	ldr	r3, [pc, #136]	; (9b654 <Cl_dprep_init+0x128>)
   9b5ca:	2200      	movs	r2, #0
   9b5cc:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9b5ce:	4b22      	ldr	r3, [pc, #136]	; (9b658 <Cl_dprep_init+0x12c>)
   9b5d0:	2200      	movs	r2, #0
   9b5d2:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9b5d4:	4b21      	ldr	r3, [pc, #132]	; (9b65c <Cl_dprep_init+0x130>)
   9b5d6:	2200      	movs	r2, #0
   9b5d8:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9b5da:	4b21      	ldr	r3, [pc, #132]	; (9b660 <Cl_dprep_init+0x134>)
   9b5dc:	2200      	movs	r2, #0
   9b5de:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9b5e0:	4b20      	ldr	r3, [pc, #128]	; (9b664 <Cl_dprep_init+0x138>)
   9b5e2:	2200      	movs	r2, #0
   9b5e4:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9b5e6:	4b20      	ldr	r3, [pc, #128]	; (9b668 <Cl_dprep_init+0x13c>)
   9b5e8:	4798      	blx	r3

	 return CL_OK;
   9b5ea:	2300      	movs	r3, #0
 }
   9b5ec:	4618      	mov	r0, r3
   9b5ee:	bd80      	pop	{r7, pc}
   9b5f0:	200727f8 	.word	0x200727f8
   9b5f4:	200727fc 	.word	0x200727fc
   9b5f8:	20072800 	.word	0x20072800
   9b5fc:	20072804 	.word	0x20072804
   9b600:	20072808 	.word	0x20072808
   9b604:	2007280c 	.word	0x2007280c
   9b608:	2007280e 	.word	0x2007280e
   9b60c:	20072810 	.word	0x20072810
   9b610:	20072812 	.word	0x20072812
   9b614:	20072814 	.word	0x20072814
   9b618:	20072816 	.word	0x20072816
   9b61c:	20072818 	.word	0x20072818
   9b620:	2007281a 	.word	0x2007281a
   9b624:	2007281c 	.word	0x2007281c
   9b628:	2007281e 	.word	0x2007281e
   9b62c:	20072820 	.word	0x20072820
   9b630:	20072822 	.word	0x20072822
   9b634:	20072824 	.word	0x20072824
   9b638:	20072828 	.word	0x20072828
   9b63c:	20072829 	.word	0x20072829
   9b640:	2007282a 	.word	0x2007282a
   9b644:	2007282b 	.word	0x2007282b
   9b648:	2007282c 	.word	0x2007282c
   9b64c:	2007282e 	.word	0x2007282e
   9b650:	2007282f 	.word	0x2007282f
   9b654:	20072831 	.word	0x20072831
   9b658:	200727e9 	.word	0x200727e9
   9b65c:	200727ec 	.word	0x200727ec
   9b660:	200727f0 	.word	0x200727f0
   9b664:	200727f4 	.word	0x200727f4
   9b668:	00087c49 	.word	0x00087c49
   9b66c:	00000000 	.word	0x00000000

0009b670 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9b670:	b590      	push	{r4, r7, lr}
   9b672:	b0a5      	sub	sp, #148	; 0x94
   9b674:	af00      	add	r7, sp, #0
   9b676:	4603      	mov	r3, r0
   9b678:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9b67a:	2300      	movs	r3, #0
   9b67c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9b680:	2300      	movs	r3, #0
   9b682:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9b686:	234d      	movs	r3, #77	; 0x4d
   9b688:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Cl_Uint8Type data = 0;
   9b68c:	2300      	movs	r3, #0
   9b68e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	Cl_Uint8Type datasize = 0;
   9b692:	2300      	movs	r3, #0
   9b694:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9b698:	2300      	movs	r3, #0
   9b69a:	663b      	str	r3, [r7, #96]	; 0x60
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9b69c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9b6a0:	2228      	movs	r2, #40	; 0x28
   9b6a2:	2100      	movs	r1, #0
   9b6a4:	4618      	mov	r0, r3
   9b6a6:	4bb8      	ldr	r3, [pc, #736]	; (9b988 <Cl_dprep_controller+0x318>)
   9b6a8:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9b6aa:	2300      	movs	r3, #0
   9b6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9b6b0:	2300      	movs	r3, #0
   9b6b2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
   9b6b6:	2300      	movs	r3, #0
   9b6b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9b6bc:	2300      	movs	r3, #0
   9b6be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9b6c2:	f04f 0300 	mov.w	r3, #0
   9b6c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	Cl_Uint16Type temp = 0;
   9b6ca:	2300      	movs	r3, #0
   9b6cc:	843b      	strh	r3, [r7, #32]
	Cl_Uint16Type tempcount;
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9b6ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
   9b6d2:	79fb      	ldrb	r3, [r7, #7]
   9b6d4:	4611      	mov	r1, r2
   9b6d6:	4618      	mov	r0, r3
   9b6d8:	4bac      	ldr	r3, [pc, #688]	; (9b98c <Cl_dprep_controller+0x31c>)
   9b6da:	4798      	blx	r3
	
	switch(cl_dprepevent)
   9b6dc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9b6e0:	3b05      	subs	r3, #5
   9b6e2:	2b1e      	cmp	r3, #30
   9b6e4:	f200 80ae 	bhi.w	9b844 <Cl_dprep_controller+0x1d4>
   9b6e8:	a201      	add	r2, pc, #4	; (adr r2, 9b6f0 <Cl_dprep_controller+0x80>)
   9b6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b6ee:	bf00      	nop
   9b6f0:	0009b777 	.word	0x0009b777
   9b6f4:	0009b78f 	.word	0x0009b78f
   9b6f8:	0009b7a7 	.word	0x0009b7a7
   9b6fc:	0009b845 	.word	0x0009b845
   9b700:	0009b845 	.word	0x0009b845
   9b704:	0009b845 	.word	0x0009b845
   9b708:	0009b845 	.word	0x0009b845
   9b70c:	0009b845 	.word	0x0009b845
   9b710:	0009b845 	.word	0x0009b845
   9b714:	0009b845 	.word	0x0009b845
   9b718:	0009b845 	.word	0x0009b845
   9b71c:	0009b845 	.word	0x0009b845
   9b720:	0009b845 	.word	0x0009b845
   9b724:	0009b845 	.word	0x0009b845
   9b728:	0009b845 	.word	0x0009b845
   9b72c:	0009b845 	.word	0x0009b845
   9b730:	0009b845 	.word	0x0009b845
   9b734:	0009b76d 	.word	0x0009b76d
   9b738:	0009b845 	.word	0x0009b845
   9b73c:	0009b845 	.word	0x0009b845
   9b740:	0009b845 	.word	0x0009b845
   9b744:	0009b845 	.word	0x0009b845
   9b748:	0009b845 	.word	0x0009b845
   9b74c:	0009b845 	.word	0x0009b845
   9b750:	0009b845 	.word	0x0009b845
   9b754:	0009b845 	.word	0x0009b845
   9b758:	0009b845 	.word	0x0009b845
   9b75c:	0009b845 	.word	0x0009b845
   9b760:	0009b83b 	.word	0x0009b83b
   9b764:	0009b7db 	.word	0x0009b7db
   9b768:	0009b831 	.word	0x0009b831
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9b76c:	4b88      	ldr	r3, [pc, #544]	; (9b990 <Cl_dprep_controller+0x320>)
   9b76e:	781a      	ldrb	r2, [r3, #0]
   9b770:	4b88      	ldr	r3, [pc, #544]	; (9b994 <Cl_dprep_controller+0x324>)
   9b772:	701a      	strb	r2, [r3, #0]
		break;
   9b774:	e06b      	b.n	9b84e <Cl_dprep_controller+0x1de>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9b776:	2101      	movs	r1, #1
   9b778:	2001      	movs	r0, #1
   9b77a:	4b87      	ldr	r3, [pc, #540]	; (9b998 <Cl_dprep_controller+0x328>)
   9b77c:	4798      	blx	r3
   9b77e:	4603      	mov	r3, r0
   9b780:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		cl_bp_controller(CL_BP_EVENT_START,1);
   9b784:	2101      	movs	r1, #1
   9b786:	2002      	movs	r0, #2
   9b788:	4b84      	ldr	r3, [pc, #528]	; (9b99c <Cl_dprep_controller+0x32c>)
   9b78a:	4798      	blx	r3
		break;
   9b78c:	e05f      	b.n	9b84e <Cl_dprep_controller+0x1de>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9b78e:	2100      	movs	r1, #0
   9b790:	2001      	movs	r0, #1
   9b792:	4b81      	ldr	r3, [pc, #516]	; (9b998 <Cl_dprep_controller+0x328>)
   9b794:	4798      	blx	r3
   9b796:	4603      	mov	r3, r0
   9b798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9b79c:	2101      	movs	r1, #1
   9b79e:	2004      	movs	r0, #4
   9b7a0:	4b7e      	ldr	r3, [pc, #504]	; (9b99c <Cl_dprep_controller+0x32c>)
   9b7a2:	4798      	blx	r3
		break;
   9b7a4:	e053      	b.n	9b84e <Cl_dprep_controller+0x1de>
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9b7a6:	4b7e      	ldr	r3, [pc, #504]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7a8:	7e1b      	ldrb	r3, [r3, #24]
   9b7aa:	2b00      	cmp	r3, #0
   9b7ac:	d04c      	beq.n	9b848 <Cl_dprep_controller+0x1d8>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9b7ae:	4b7c      	ldr	r3, [pc, #496]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7b0:	791b      	ldrb	r3, [r3, #4]
   9b7b2:	773b      	strb	r3, [r7, #28]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9b7b4:	4b7a      	ldr	r3, [pc, #488]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7b6:	795b      	ldrb	r3, [r3, #5]
   9b7b8:	777b      	strb	r3, [r7, #29]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9b7ba:	4b79      	ldr	r3, [pc, #484]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7bc:	799b      	ldrb	r3, [r3, #6]
   9b7be:	77bb      	strb	r3, [r7, #30]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9b7c0:	4b77      	ldr	r3, [pc, #476]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7c2:	79db      	ldrb	r3, [r3, #7]
   9b7c4:	77fb      	strb	r3, [r7, #31]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9b7c6:	8bbb      	ldrh	r3, [r7, #28]
   9b7c8:	4619      	mov	r1, r3
   9b7ca:	2001      	movs	r0, #1
   9b7cc:	4b73      	ldr	r3, [pc, #460]	; (9b99c <Cl_dprep_controller+0x32c>)
   9b7ce:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9b7d0:	8bbb      	ldrh	r3, [r7, #28]
   9b7d2:	461a      	mov	r2, r3
   9b7d4:	4b73      	ldr	r3, [pc, #460]	; (9b9a4 <Cl_dprep_controller+0x334>)
   9b7d6:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9b7d8:	e036      	b.n	9b848 <Cl_dprep_controller+0x1d8>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9b7da:	4b71      	ldr	r3, [pc, #452]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7dc:	7e1b      	ldrb	r3, [r3, #24]
   9b7de:	2b00      	cmp	r3, #0
   9b7e0:	d034      	beq.n	9b84c <Cl_dprep_controller+0x1dc>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9b7e2:	4b6f      	ldr	r3, [pc, #444]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7e4:	795b      	ldrb	r3, [r3, #5]
   9b7e6:	763b      	strb	r3, [r7, #24]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9b7e8:	4b6d      	ldr	r3, [pc, #436]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7ea:	799b      	ldrb	r3, [r3, #6]
   9b7ec:	767b      	strb	r3, [r7, #25]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9b7ee:	4b6c      	ldr	r3, [pc, #432]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7f0:	79db      	ldrb	r3, [r3, #7]
   9b7f2:	76bb      	strb	r3, [r7, #26]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9b7f4:	4b6a      	ldr	r3, [pc, #424]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7f6:	7a1b      	ldrb	r3, [r3, #8]
   9b7f8:	76fb      	strb	r3, [r7, #27]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9b7fa:	4b69      	ldr	r3, [pc, #420]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b7fc:	791b      	ldrb	r3, [r3, #4]
   9b7fe:	2b01      	cmp	r3, #1
   9b800:	d104      	bne.n	9b80c <Cl_dprep_controller+0x19c>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9b802:	2100      	movs	r1, #0
   9b804:	2001      	movs	r0, #1
   9b806:	4b68      	ldr	r3, [pc, #416]	; (9b9a8 <Cl_dprep_controller+0x338>)
   9b808:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9b80a:	e01f      	b.n	9b84c <Cl_dprep_controller+0x1dc>
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9b80c:	4b64      	ldr	r3, [pc, #400]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b80e:	791b      	ldrb	r3, [r3, #4]
   9b810:	2b02      	cmp	r3, #2
   9b812:	d104      	bne.n	9b81e <Cl_dprep_controller+0x1ae>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9b814:	2100      	movs	r1, #0
   9b816:	2004      	movs	r0, #4
   9b818:	4b63      	ldr	r3, [pc, #396]	; (9b9a8 <Cl_dprep_controller+0x338>)
   9b81a:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9b81c:	e016      	b.n	9b84c <Cl_dprep_controller+0x1dc>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9b81e:	4b60      	ldr	r3, [pc, #384]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b820:	791b      	ldrb	r3, [r3, #4]
   9b822:	2b00      	cmp	r3, #0
   9b824:	d112      	bne.n	9b84c <Cl_dprep_controller+0x1dc>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9b826:	2100      	movs	r1, #0
   9b828:	200a      	movs	r0, #10
   9b82a:	4b5f      	ldr	r3, [pc, #380]	; (9b9a8 <Cl_dprep_controller+0x338>)
   9b82c:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9b82e:	e00d      	b.n	9b84c <Cl_dprep_controller+0x1dc>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9b830:	2100      	movs	r1, #0
   9b832:	200c      	movs	r0, #12
   9b834:	4b5c      	ldr	r3, [pc, #368]	; (9b9a8 <Cl_dprep_controller+0x338>)
   9b836:	4798      	blx	r3
			break;
   9b838:	e009      	b.n	9b84e <Cl_dprep_controller+0x1de>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9b83a:	2100      	movs	r1, #0
   9b83c:	2007      	movs	r0, #7
   9b83e:	4b5a      	ldr	r3, [pc, #360]	; (9b9a8 <Cl_dprep_controller+0x338>)
   9b840:	4798      	blx	r3
			break;
   9b842:	e004      	b.n	9b84e <Cl_dprep_controller+0x1de>
		case EVENT_HEAPARIN_BOLUS:
		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		break;
#endif
		default:break;
   9b844:	bf00      	nop
   9b846:	e002      	b.n	9b84e <Cl_dprep_controller+0x1de>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		
		break;
   9b848:	bf00      	nop
   9b84a:	e000      	b.n	9b84e <Cl_dprep_controller+0x1de>
				}
				
			}
			
			
			break;
   9b84c:	bf00      	nop
		break;
#endif
		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9b84e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9b852:	2b16      	cmp	r3, #22
   9b854:	d105      	bne.n	9b862 <Cl_dprep_controller+0x1f2>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9b856:	200c      	movs	r0, #12
   9b858:	4b54      	ldr	r3, [pc, #336]	; (9b9ac <Cl_dprep_controller+0x33c>)
   9b85a:	4798      	blx	r3
   9b85c:	4603      	mov	r3, r0
   9b85e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9b862:	4b4b      	ldr	r3, [pc, #300]	; (9b990 <Cl_dprep_controller+0x320>)
   9b864:	781b      	ldrb	r3, [r3, #0]
   9b866:	2b0e      	cmp	r3, #14
   9b868:	f201 829e 	bhi.w	9cda8 <Cl_dprep_controller+0x1738>
   9b86c:	a201      	add	r2, pc, #4	; (adr r2, 9b874 <Cl_dprep_controller+0x204>)
   9b86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b872:	bf00      	nop
   9b874:	0009b8b1 	.word	0x0009b8b1
   9b878:	0009cda9 	.word	0x0009cda9
   9b87c:	0009bc29 	.word	0x0009bc29
   9b880:	0009c28d 	.word	0x0009c28d
   9b884:	0009cda9 	.word	0x0009cda9
   9b888:	0009c601 	.word	0x0009c601
   9b88c:	0009c823 	.word	0x0009c823
   9b890:	0009ca09 	.word	0x0009ca09
   9b894:	0009ca23 	.word	0x0009ca23
   9b898:	0009cbfd 	.word	0x0009cbfd
   9b89c:	0009cda9 	.word	0x0009cda9
   9b8a0:	0009b8b1 	.word	0x0009b8b1
   9b8a4:	0009c13b 	.word	0x0009c13b
   9b8a8:	0009c0fd 	.word	0x0009c0fd
   9b8ac:	0009c455 	.word	0x0009c455

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9b8b0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9b8b4:	3b02      	subs	r3, #2
   9b8b6:	2b1d      	cmp	r3, #29
   9b8b8:	f200 81a1 	bhi.w	9bbfe <Cl_dprep_controller+0x58e>
   9b8bc:	a201      	add	r2, pc, #4	; (adr r2, 9b8c4 <Cl_dprep_controller+0x254>)
   9b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b8c2:	bf00      	nop
   9b8c4:	0009bb99 	.word	0x0009bb99
   9b8c8:	0009ba37 	.word	0x0009ba37
   9b8cc:	0009b971 	.word	0x0009b971
   9b8d0:	0009bbff 	.word	0x0009bbff
   9b8d4:	0009bbff 	.word	0x0009bbff
   9b8d8:	0009bbff 	.word	0x0009bbff
   9b8dc:	0009bbff 	.word	0x0009bbff
   9b8e0:	0009bbff 	.word	0x0009bbff
   9b8e4:	0009bbd9 	.word	0x0009bbd9
   9b8e8:	0009bbff 	.word	0x0009bbff
   9b8ec:	0009bbff 	.word	0x0009bbff
   9b8f0:	0009bbff 	.word	0x0009bbff
   9b8f4:	0009bbff 	.word	0x0009bbff
   9b8f8:	0009bbff 	.word	0x0009bbff
   9b8fc:	0009bbff 	.word	0x0009bbff
   9b900:	0009bbff 	.word	0x0009bbff
   9b904:	0009bbff 	.word	0x0009bbff
   9b908:	0009bbff 	.word	0x0009bbff
   9b90c:	0009bbff 	.word	0x0009bbff
   9b910:	0009bbff 	.word	0x0009bbff
   9b914:	0009bbff 	.word	0x0009bbff
   9b918:	0009bbff 	.word	0x0009bbff
   9b91c:	0009bbff 	.word	0x0009bbff
   9b920:	0009bbcd 	.word	0x0009bbcd
   9b924:	0009bbff 	.word	0x0009bbff
   9b928:	0009bbff 	.word	0x0009bbff
   9b92c:	0009bbff 	.word	0x0009bbff
   9b930:	0009bbb3 	.word	0x0009bbb3
   9b934:	0009bbff 	.word	0x0009bbff
   9b938:	0009b93d 	.word	0x0009b93d
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9b93c:	4b1c      	ldr	r3, [pc, #112]	; (9b9b0 <Cl_dprep_controller+0x340>)
   9b93e:	781b      	ldrb	r3, [r3, #0]
   9b940:	2b01      	cmp	r3, #1
   9b942:	d108      	bne.n	9b956 <Cl_dprep_controller+0x2e6>
   9b944:	4b1a      	ldr	r3, [pc, #104]	; (9b9b0 <Cl_dprep_controller+0x340>)
   9b946:	781b      	ldrb	r3, [r3, #0]
   9b948:	2b05      	cmp	r3, #5
   9b94a:	d104      	bne.n	9b956 <Cl_dprep_controller+0x2e6>
   9b94c:	4b18      	ldr	r3, [pc, #96]	; (9b9b0 <Cl_dprep_controller+0x340>)
   9b94e:	781b      	ldrb	r3, [r3, #0]
   9b950:	2b09      	cmp	r3, #9
   9b952:	f000 8157 	beq.w	9bc04 <Cl_dprep_controller+0x594>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9b956:	2206      	movs	r2, #6
   9b958:	4916      	ldr	r1, [pc, #88]	; (9b9b4 <Cl_dprep_controller+0x344>)
   9b95a:	2018      	movs	r0, #24
   9b95c:	4b16      	ldr	r3, [pc, #88]	; (9b9b8 <Cl_dprep_controller+0x348>)
   9b95e:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9b960:	2100      	movs	r1, #0
   9b962:	2005      	movs	r0, #5
   9b964:	4b15      	ldr	r3, [pc, #84]	; (9b9bc <Cl_dprep_controller+0x34c>)
   9b966:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9b968:	4b15      	ldr	r3, [pc, #84]	; (9b9c0 <Cl_dprep_controller+0x350>)
   9b96a:	2200      	movs	r2, #0
   9b96c:	70da      	strb	r2, [r3, #3]
						}
				break;
   9b96e:	e149      	b.n	9bc04 <Cl_dprep_controller+0x594>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9b970:	4b0b      	ldr	r3, [pc, #44]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b972:	7e1b      	ldrb	r3, [r3, #24]
   9b974:	2b00      	cmp	r3, #0
   9b976:	f000 8148 	beq.w	9bc0a <Cl_dprep_controller+0x59a>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9b97a:	4b09      	ldr	r3, [pc, #36]	; (9b9a0 <Cl_dprep_controller+0x330>)
   9b97c:	791b      	ldrb	r3, [r3, #4]
   9b97e:	2b02      	cmp	r3, #2
   9b980:	d020      	beq.n	9b9c4 <Cl_dprep_controller+0x354>
   9b982:	2b04      	cmp	r3, #4
   9b984:	d03a      	beq.n	9b9fc <Cl_dprep_controller+0x38c>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9b986:	e055      	b.n	9ba34 <Cl_dprep_controller+0x3c4>
   9b988:	000a39a5 	.word	0x000a39a5
   9b98c:	0009cddd 	.word	0x0009cddd
   9b990:	2007282f 	.word	0x2007282f
   9b994:	2007318f 	.word	0x2007318f
   9b998:	00082f5d 	.word	0x00082f5d
   9b99c:	00091a75 	.word	0x00091a75
   9b9a0:	20072f88 	.word	0x20072f88
   9b9a4:	20073194 	.word	0x20073194
   9b9a8:	00092169 	.word	0x00092169
   9b9ac:	00083051 	.word	0x00083051
   9b9b0:	2007212c 	.word	0x2007212c
   9b9b4:	000a58f0 	.word	0x000a58f0
   9b9b8:	0009926d 	.word	0x0009926d
   9b9bc:	00087c95 	.word	0x00087c95
   9b9c0:	20070abc 	.word	0x20070abc
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9b9c4:	2316      	movs	r3, #22
   9b9c6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9b9ca:	2302      	movs	r3, #2
   9b9cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9b9d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9b9d4:	3301      	adds	r3, #1
   9b9d6:	4619      	mov	r1, r3
   9b9d8:	2002      	movs	r0, #2
   9b9da:	4bb9      	ldr	r3, [pc, #740]	; (9bcc0 <Cl_dprep_controller+0x650>)
   9b9dc:	4798      	blx	r3
   9b9de:	4603      	mov	r3, r0
   9b9e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9b9e4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9b9e8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9b9ec:	2202      	movs	r2, #2
   9b9ee:	4618      	mov	r0, r3
   9b9f0:	4bb4      	ldr	r3, [pc, #720]	; (9bcc4 <Cl_dprep_controller+0x654>)
   9b9f2:	4798      	blx	r3
   9b9f4:	4603      	mov	r3, r0
   9b9f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9b9fa:	e01b      	b.n	9ba34 <Cl_dprep_controller+0x3c4>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9b9fc:	2316      	movs	r3, #22
   9b9fe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ba02:	2304      	movs	r3, #4
   9ba04:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ba08:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9ba0c:	3301      	adds	r3, #1
   9ba0e:	4619      	mov	r1, r3
   9ba10:	2004      	movs	r0, #4
   9ba12:	4bab      	ldr	r3, [pc, #684]	; (9bcc0 <Cl_dprep_controller+0x650>)
   9ba14:	4798      	blx	r3
   9ba16:	4603      	mov	r3, r0
   9ba18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ba1c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9ba20:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9ba24:	2202      	movs	r2, #2
   9ba26:	4618      	mov	r0, r3
   9ba28:	4ba6      	ldr	r3, [pc, #664]	; (9bcc4 <Cl_dprep_controller+0x654>)
   9ba2a:	4798      	blx	r3
   9ba2c:	4603      	mov	r3, r0
   9ba2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9ba32:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9ba34:	e0e9      	b.n	9bc0a <Cl_dprep_controller+0x59a>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9ba36:	4ba4      	ldr	r3, [pc, #656]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba38:	7e1b      	ldrb	r3, [r3, #24]
   9ba3a:	2b00      	cmp	r3, #0
   9ba3c:	f000 80e8 	beq.w	9bc10 <Cl_dprep_controller+0x5a0>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ba40:	4ba1      	ldr	r3, [pc, #644]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba42:	795b      	ldrb	r3, [r3, #5]
   9ba44:	753b      	strb	r3, [r7, #20]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9ba46:	4ba0      	ldr	r3, [pc, #640]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba48:	799b      	ldrb	r3, [r3, #6]
   9ba4a:	757b      	strb	r3, [r7, #21]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ba4c:	4b9e      	ldr	r3, [pc, #632]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba4e:	79db      	ldrb	r3, [r3, #7]
   9ba50:	75bb      	strb	r3, [r7, #22]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ba52:	4b9d      	ldr	r3, [pc, #628]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba54:	7a1b      	ldrb	r3, [r3, #8]
   9ba56:	75fb      	strb	r3, [r7, #23]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9ba58:	4b9b      	ldr	r3, [pc, #620]	; (9bcc8 <Cl_dprep_controller+0x658>)
   9ba5a:	791b      	ldrb	r3, [r3, #4]
   9ba5c:	3b05      	subs	r3, #5
   9ba5e:	2b20      	cmp	r3, #32
   9ba60:	f200 8098 	bhi.w	9bb94 <Cl_dprep_controller+0x524>
   9ba64:	a201      	add	r2, pc, #4	; (adr r2, 9ba6c <Cl_dprep_controller+0x3fc>)
   9ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ba6a:	bf00      	nop
   9ba6c:	0009bb95 	.word	0x0009bb95
   9ba70:	0009bb95 	.word	0x0009bb95
   9ba74:	0009bb95 	.word	0x0009bb95
   9ba78:	0009bb95 	.word	0x0009bb95
   9ba7c:	0009bb95 	.word	0x0009bb95
   9ba80:	0009bb95 	.word	0x0009bb95
   9ba84:	0009bb95 	.word	0x0009bb95
   9ba88:	0009bb95 	.word	0x0009bb95
   9ba8c:	0009bb95 	.word	0x0009bb95
   9ba90:	0009bb95 	.word	0x0009bb95
   9ba94:	0009bb95 	.word	0x0009bb95
   9ba98:	0009bb95 	.word	0x0009bb95
   9ba9c:	0009bb95 	.word	0x0009bb95
   9baa0:	0009bb95 	.word	0x0009bb95
   9baa4:	0009bb95 	.word	0x0009bb95
   9baa8:	0009bb95 	.word	0x0009bb95
   9baac:	0009bb95 	.word	0x0009bb95
   9bab0:	0009bb95 	.word	0x0009bb95
   9bab4:	0009bb95 	.word	0x0009bb95
   9bab8:	0009baf1 	.word	0x0009baf1
   9babc:	0009bb09 	.word	0x0009bb09
   9bac0:	0009bb21 	.word	0x0009bb21
   9bac4:	0009bb31 	.word	0x0009bb31
   9bac8:	0009bb41 	.word	0x0009bb41
   9bacc:	0009bb51 	.word	0x0009bb51
   9bad0:	0009bb95 	.word	0x0009bb95
   9bad4:	0009bb95 	.word	0x0009bb95
   9bad8:	0009bb95 	.word	0x0009bb95
   9badc:	0009bb95 	.word	0x0009bb95
   9bae0:	0009bb61 	.word	0x0009bb61
   9bae4:	0009bb6b 	.word	0x0009bb6b
   9bae8:	0009bb75 	.word	0x0009bb75
   9baec:	0009bb85 	.word	0x0009bb85
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9baf0:	697b      	ldr	r3, [r7, #20]
   9baf2:	4a76      	ldr	r2, [pc, #472]	; (9bccc <Cl_dprep_controller+0x65c>)
   9baf4:	fba2 2303 	umull	r2, r3, r2, r3
   9baf8:	08da      	lsrs	r2, r3, #3
   9bafa:	4b75      	ldr	r3, [pc, #468]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bafc:	4610      	mov	r0, r2
   9bafe:	4798      	blx	r3
   9bb00:	4602      	mov	r2, r0
   9bb02:	4b74      	ldr	r3, [pc, #464]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb04:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9bb06:	e046      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9bb08:	697b      	ldr	r3, [r7, #20]
   9bb0a:	4a70      	ldr	r2, [pc, #448]	; (9bccc <Cl_dprep_controller+0x65c>)
   9bb0c:	fba2 2303 	umull	r2, r3, r2, r3
   9bb10:	08da      	lsrs	r2, r3, #3
   9bb12:	4b6f      	ldr	r3, [pc, #444]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb14:	4610      	mov	r0, r2
   9bb16:	4798      	blx	r3
   9bb18:	4602      	mov	r2, r0
   9bb1a:	4b6e      	ldr	r3, [pc, #440]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb1c:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9bb1e:	e03a      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9bb20:	697a      	ldr	r2, [r7, #20]
   9bb22:	4b6b      	ldr	r3, [pc, #428]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb24:	4610      	mov	r0, r2
   9bb26:	4798      	blx	r3
   9bb28:	4602      	mov	r2, r0
   9bb2a:	4b6a      	ldr	r3, [pc, #424]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb2c:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9bb2e:	e032      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9bb30:	697a      	ldr	r2, [r7, #20]
   9bb32:	4b67      	ldr	r3, [pc, #412]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb34:	4610      	mov	r0, r2
   9bb36:	4798      	blx	r3
   9bb38:	4602      	mov	r2, r0
   9bb3a:	4b66      	ldr	r3, [pc, #408]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb3c:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9bb3e:	e02a      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9bb40:	697a      	ldr	r2, [r7, #20]
   9bb42:	4b63      	ldr	r3, [pc, #396]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb44:	4610      	mov	r0, r2
   9bb46:	4798      	blx	r3
   9bb48:	4602      	mov	r2, r0
   9bb4a:	4b62      	ldr	r3, [pc, #392]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb4c:	615a      	str	r2, [r3, #20]
										break;
   9bb4e:	e022      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9bb50:	697a      	ldr	r2, [r7, #20]
   9bb52:	4b5f      	ldr	r3, [pc, #380]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb54:	4610      	mov	r0, r2
   9bb56:	4798      	blx	r3
   9bb58:	4602      	mov	r2, r0
   9bb5a:	4b5e      	ldr	r3, [pc, #376]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb5c:	611a      	str	r2, [r3, #16]
										break;
   9bb5e:	e01a      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9bb60:	697b      	ldr	r3, [r7, #20]
   9bb62:	b21a      	sxth	r2, r3
   9bb64:	4b5b      	ldr	r3, [pc, #364]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb66:	801a      	strh	r2, [r3, #0]
										break;
   9bb68:	e015      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9bb6a:	697b      	ldr	r3, [r7, #20]
   9bb6c:	b21a      	sxth	r2, r3
   9bb6e:	4b59      	ldr	r3, [pc, #356]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb70:	805a      	strh	r2, [r3, #2]
										break;
   9bb72:	e010      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9bb74:	697a      	ldr	r2, [r7, #20]
   9bb76:	4b56      	ldr	r3, [pc, #344]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb78:	4610      	mov	r0, r2
   9bb7a:	4798      	blx	r3
   9bb7c:	4602      	mov	r2, r0
   9bb7e:	4b55      	ldr	r3, [pc, #340]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb80:	60da      	str	r2, [r3, #12]
										break;
   9bb82:	e008      	b.n	9bb96 <Cl_dprep_controller+0x526>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9bb84:	697a      	ldr	r2, [r7, #20]
   9bb86:	4b52      	ldr	r3, [pc, #328]	; (9bcd0 <Cl_dprep_controller+0x660>)
   9bb88:	4610      	mov	r0, r2
   9bb8a:	4798      	blx	r3
   9bb8c:	4602      	mov	r2, r0
   9bb8e:	4b51      	ldr	r3, [pc, #324]	; (9bcd4 <Cl_dprep_controller+0x664>)
   9bb90:	609a      	str	r2, [r3, #8]
										break;
   9bb92:	e000      	b.n	9bb96 <Cl_dprep_controller+0x526>

									default:break;
   9bb94:	bf00      	nop
								}
							}
						
	
			break;
   9bb96:	e03b      	b.n	9bc10 <Cl_dprep_controller+0x5a0>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9bb98:	4b4f      	ldr	r3, [pc, #316]	; (9bcd8 <Cl_dprep_controller+0x668>)
   9bb9a:	4798      	blx	r3
   9bb9c:	4603      	mov	r3, r0
   9bb9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(Cl_dprepretcode == CL_REJECTED)
   9bba2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9bba6:	2b03      	cmp	r3, #3
   9bba8:	d135      	bne.n	9bc16 <Cl_dprep_controller+0x5a6>
			{
				return Cl_dprepretcode;
   9bbaa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9bbae:	f001 b8fd 	b.w	9cdac <Cl_dprep_controller+0x173c>
			}
			break;
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9bbb2:	4b49      	ldr	r3, [pc, #292]	; (9bcd8 <Cl_dprep_controller+0x668>)
   9bbb4:	4798      	blx	r3
   9bbb6:	4603      	mov	r3, r0
   9bbb8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(Cl_dprepretcode == CL_REJECTED)
   9bbbc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9bbc0:	2b03      	cmp	r3, #3
   9bbc2:	d12b      	bne.n	9bc1c <Cl_dprep_controller+0x5ac>
			{
				return Cl_dprepretcode;
   9bbc4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9bbc8:	f001 b8f0 	b.w	9cdac <Cl_dprep_controller+0x173c>
			}
			break;
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9bbcc:	4b43      	ldr	r3, [pc, #268]	; (9bcdc <Cl_dprep_controller+0x66c>)
   9bbce:	4798      	blx	r3
   9bbd0:	4603      	mov	r3, r0
   9bbd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			break;
   9bbd6:	e025      	b.n	9bc24 <Cl_dprep_controller+0x5b4>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9bbd8:	4b41      	ldr	r3, [pc, #260]	; (9bce0 <Cl_dprep_controller+0x670>)
   9bbda:	781b      	ldrb	r3, [r3, #0]
   9bbdc:	2b01      	cmp	r3, #1
   9bbde:	d020      	beq.n	9bc22 <Cl_dprep_controller+0x5b2>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9bbe0:	2206      	movs	r2, #6
   9bbe2:	4940      	ldr	r1, [pc, #256]	; (9bce4 <Cl_dprep_controller+0x674>)
   9bbe4:	2018      	movs	r0, #24
   9bbe6:	4b37      	ldr	r3, [pc, #220]	; (9bcc4 <Cl_dprep_controller+0x654>)
   9bbe8:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9bbea:	4b3f      	ldr	r3, [pc, #252]	; (9bce8 <Cl_dprep_controller+0x678>)
   9bbec:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9bbee:	2100      	movs	r1, #0
   9bbf0:	2001      	movs	r0, #1
   9bbf2:	4b3e      	ldr	r3, [pc, #248]	; (9bcec <Cl_dprep_controller+0x67c>)
   9bbf4:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9bbf6:	4b3e      	ldr	r3, [pc, #248]	; (9bcf0 <Cl_dprep_controller+0x680>)
   9bbf8:	2200      	movs	r2, #0
   9bbfa:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9bbfc:	e011      	b.n	9bc22 <Cl_dprep_controller+0x5b2>
			default:
			break;
   9bbfe:	bf00      	nop
   9bc00:	f001 b8d2 	b.w	9cda8 <Cl_dprep_controller+0x1738>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
				break;
   9bc04:	bf00      	nop
   9bc06:	f001 b8cf 	b.w	9cda8 <Cl_dprep_controller+0x1738>
						break;
						default:
						break;
					}
				}
			break;
   9bc0a:	bf00      	nop
   9bc0c:	f001 b8cc 	b.w	9cda8 <Cl_dprep_controller+0x1738>
									default:break;
								}
							}
						
	
			break;
   9bc10:	bf00      	nop
   9bc12:	f001 b8c9 	b.w	9cda8 <Cl_dprep_controller+0x1738>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9bc16:	bf00      	nop
   9bc18:	f001 b8c6 	b.w	9cda8 <Cl_dprep_controller+0x1738>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9bc1c:	bf00      	nop
   9bc1e:	f001 b8c3 	b.w	9cda8 <Cl_dprep_controller+0x1738>
				cl_dprep_activate_prime_related_alarms();
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9bc22:	bf00      	nop
			default:
			break;
		}
		break;
   9bc24:	f001 b8c0 	b.w	9cda8 <Cl_dprep_controller+0x1738>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9bc28:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9bc2c:	3b03      	subs	r3, #3
   9bc2e:	2b20      	cmp	r3, #32
   9bc30:	f201 80b3 	bhi.w	9cd9a <Cl_dprep_controller+0x172a>
   9bc34:	a201      	add	r2, pc, #4	; (adr r2, 9bc3c <Cl_dprep_controller+0x5cc>)
   9bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bc3a:	bf00      	nop
   9bc3c:	0009be21 	.word	0x0009be21
   9bc40:	0009bd97 	.word	0x0009bd97
   9bc44:	0009cd9b 	.word	0x0009cd9b
   9bc48:	0009cd9b 	.word	0x0009cd9b
   9bc4c:	0009cd9b 	.word	0x0009cd9b
   9bc50:	0009cd9b 	.word	0x0009cd9b
   9bc54:	0009c05f 	.word	0x0009c05f
   9bc58:	0009c0ab 	.word	0x0009c0ab
   9bc5c:	0009cd9b 	.word	0x0009cd9b
   9bc60:	0009cd9b 	.word	0x0009cd9b
   9bc64:	0009cd9b 	.word	0x0009cd9b
   9bc68:	0009cd9b 	.word	0x0009cd9b
   9bc6c:	0009cd9b 	.word	0x0009cd9b
   9bc70:	0009cd9b 	.word	0x0009cd9b
   9bc74:	0009cd9b 	.word	0x0009cd9b
   9bc78:	0009cd9b 	.word	0x0009cd9b
   9bc7c:	0009be7f 	.word	0x0009be7f
   9bc80:	0009cd9b 	.word	0x0009cd9b
   9bc84:	0009c0cd 	.word	0x0009c0cd
   9bc88:	0009bf89 	.word	0x0009bf89
   9bc8c:	0009be9d 	.word	0x0009be9d
   9bc90:	0009cd9b 	.word	0x0009cd9b
   9bc94:	0009c06b 	.word	0x0009c06b
   9bc98:	0009c077 	.word	0x0009c077
   9bc9c:	0009cd9b 	.word	0x0009cd9b
   9bca0:	0009cd9b 	.word	0x0009cd9b
   9bca4:	0009cd9b 	.word	0x0009cd9b
   9bca8:	0009c05f 	.word	0x0009c05f
   9bcac:	0009bd63 	.word	0x0009bd63
   9bcb0:	0009cd9b 	.word	0x0009cd9b
   9bcb4:	0009bd59 	.word	0x0009bd59
   9bcb8:	0009bcf5 	.word	0x0009bcf5
   9bcbc:	0009bd4f 	.word	0x0009bd4f
   9bcc0:	00097d7d 	.word	0x00097d7d
   9bcc4:	0009926d 	.word	0x0009926d
   9bcc8:	20072f88 	.word	0x20072f88
   9bccc:	cccccccd 	.word	0xcccccccd
   9bcd0:	000a33a1 	.word	0x000a33a1
   9bcd4:	20072cf8 	.word	0x20072cf8
   9bcd8:	0009eaed 	.word	0x0009eaed
   9bcdc:	0009d0a5 	.word	0x0009d0a5
   9bce0:	2007212c 	.word	0x2007212c
   9bce4:	000a58f8 	.word	0x000a58f8
   9bce8:	000886f5 	.word	0x000886f5
   9bcec:	00087c95 	.word	0x00087c95
   9bcf0:	20070abc 	.word	0x20070abc
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9bcf4:	4b90      	ldr	r3, [pc, #576]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bcf6:	7e1b      	ldrb	r3, [r3, #24]
   9bcf8:	2b00      	cmp	r3, #0
   9bcfa:	f000 81ea 	beq.w	9c0d2 <Cl_dprep_controller+0xa62>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9bcfe:	4b8e      	ldr	r3, [pc, #568]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd00:	795b      	ldrb	r3, [r3, #5]
   9bd02:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9bd04:	4b8c      	ldr	r3, [pc, #560]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd06:	799b      	ldrb	r3, [r3, #6]
   9bd08:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9bd0a:	4b8b      	ldr	r3, [pc, #556]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd0c:	79db      	ldrb	r3, [r3, #7]
   9bd0e:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9bd10:	4b89      	ldr	r3, [pc, #548]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd12:	7a1b      	ldrb	r3, [r3, #8]
   9bd14:	74fb      	strb	r3, [r7, #19]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9bd16:	4b88      	ldr	r3, [pc, #544]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd18:	791b      	ldrb	r3, [r3, #4]
   9bd1a:	2b01      	cmp	r3, #1
   9bd1c:	d104      	bne.n	9bd28 <Cl_dprep_controller+0x6b8>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9bd1e:	2100      	movs	r1, #0
   9bd20:	2001      	movs	r0, #1
   9bd22:	4b86      	ldr	r3, [pc, #536]	; (9bf3c <Cl_dprep_controller+0x8cc>)
   9bd24:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9bd26:	e1d4      	b.n	9c0d2 <Cl_dprep_controller+0xa62>
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9bd28:	4b83      	ldr	r3, [pc, #524]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd2a:	791b      	ldrb	r3, [r3, #4]
   9bd2c:	2b02      	cmp	r3, #2
   9bd2e:	d104      	bne.n	9bd3a <Cl_dprep_controller+0x6ca>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9bd30:	2100      	movs	r1, #0
   9bd32:	2004      	movs	r0, #4
   9bd34:	4b81      	ldr	r3, [pc, #516]	; (9bf3c <Cl_dprep_controller+0x8cc>)
   9bd36:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9bd38:	e1cb      	b.n	9c0d2 <Cl_dprep_controller+0xa62>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9bd3a:	4b7f      	ldr	r3, [pc, #508]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd3c:	791b      	ldrb	r3, [r3, #4]
   9bd3e:	2b00      	cmp	r3, #0
   9bd40:	f040 81c7 	bne.w	9c0d2 <Cl_dprep_controller+0xa62>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9bd44:	2100      	movs	r1, #0
   9bd46:	200a      	movs	r0, #10
   9bd48:	4b7c      	ldr	r3, [pc, #496]	; (9bf3c <Cl_dprep_controller+0x8cc>)
   9bd4a:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9bd4c:	e1c1      	b.n	9c0d2 <Cl_dprep_controller+0xa62>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9bd4e:	2100      	movs	r1, #0
   9bd50:	200c      	movs	r0, #12
   9bd52:	4b7a      	ldr	r3, [pc, #488]	; (9bf3c <Cl_dprep_controller+0x8cc>)
   9bd54:	4798      	blx	r3
			break;
   9bd56:	e1cf      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9bd58:	2100      	movs	r1, #0
   9bd5a:	2007      	movs	r0, #7
   9bd5c:	4b77      	ldr	r3, [pc, #476]	; (9bf3c <Cl_dprep_controller+0x8cc>)
   9bd5e:	4798      	blx	r3
			break;
   9bd60:	e1ca      	b.n	9c0f8 <Cl_dprep_controller+0xa88>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9bd62:	4b77      	ldr	r3, [pc, #476]	; (9bf40 <Cl_dprep_controller+0x8d0>)
   9bd64:	781b      	ldrb	r3, [r3, #0]
   9bd66:	2b01      	cmp	r3, #1
   9bd68:	d108      	bne.n	9bd7c <Cl_dprep_controller+0x70c>
   9bd6a:	4b75      	ldr	r3, [pc, #468]	; (9bf40 <Cl_dprep_controller+0x8d0>)
   9bd6c:	781b      	ldrb	r3, [r3, #0]
   9bd6e:	2b05      	cmp	r3, #5
   9bd70:	d104      	bne.n	9bd7c <Cl_dprep_controller+0x70c>
   9bd72:	4b73      	ldr	r3, [pc, #460]	; (9bf40 <Cl_dprep_controller+0x8d0>)
   9bd74:	781b      	ldrb	r3, [r3, #0]
   9bd76:	2b09      	cmp	r3, #9
   9bd78:	f000 81ae 	beq.w	9c0d8 <Cl_dprep_controller+0xa68>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9bd7c:	2206      	movs	r2, #6
   9bd7e:	4971      	ldr	r1, [pc, #452]	; (9bf44 <Cl_dprep_controller+0x8d4>)
   9bd80:	2018      	movs	r0, #24
   9bd82:	4b71      	ldr	r3, [pc, #452]	; (9bf48 <Cl_dprep_controller+0x8d8>)
   9bd84:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9bd86:	2100      	movs	r1, #0
   9bd88:	2005      	movs	r0, #5
   9bd8a:	4b70      	ldr	r3, [pc, #448]	; (9bf4c <Cl_dprep_controller+0x8dc>)
   9bd8c:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9bd8e:	4b70      	ldr	r3, [pc, #448]	; (9bf50 <Cl_dprep_controller+0x8e0>)
   9bd90:	2200      	movs	r2, #0
   9bd92:	70da      	strb	r2, [r3, #3]
						}
			break;
   9bd94:	e1a0      	b.n	9c0d8 <Cl_dprep_controller+0xa68>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9bd96:	4b68      	ldr	r3, [pc, #416]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bd98:	7e1b      	ldrb	r3, [r3, #24]
   9bd9a:	2b00      	cmp	r3, #0
   9bd9c:	f000 819f 	beq.w	9c0de <Cl_dprep_controller+0xa6e>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9bda0:	4b65      	ldr	r3, [pc, #404]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9bda2:	791b      	ldrb	r3, [r3, #4]
   9bda4:	2b02      	cmp	r3, #2
   9bda6:	d002      	beq.n	9bdae <Cl_dprep_controller+0x73e>
   9bda8:	2b04      	cmp	r3, #4
   9bdaa:	d01c      	beq.n	9bde6 <Cl_dprep_controller+0x776>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9bdac:	e037      	b.n	9be1e <Cl_dprep_controller+0x7ae>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9bdae:	2316      	movs	r3, #22
   9bdb0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9bdb4:	2302      	movs	r3, #2
   9bdb6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9bdba:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9bdbe:	3301      	adds	r3, #1
   9bdc0:	4619      	mov	r1, r3
   9bdc2:	2002      	movs	r0, #2
   9bdc4:	4b63      	ldr	r3, [pc, #396]	; (9bf54 <Cl_dprep_controller+0x8e4>)
   9bdc6:	4798      	blx	r3
   9bdc8:	4603      	mov	r3, r0
   9bdca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bdce:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9bdd2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9bdd6:	2202      	movs	r2, #2
   9bdd8:	4618      	mov	r0, r3
   9bdda:	4b5b      	ldr	r3, [pc, #364]	; (9bf48 <Cl_dprep_controller+0x8d8>)
   9bddc:	4798      	blx	r3
   9bdde:	4603      	mov	r3, r0
   9bde0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9bde4:	e01b      	b.n	9be1e <Cl_dprep_controller+0x7ae>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9bde6:	2316      	movs	r3, #22
   9bde8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9bdec:	2304      	movs	r3, #4
   9bdee:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9bdf2:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9bdf6:	3301      	adds	r3, #1
   9bdf8:	4619      	mov	r1, r3
   9bdfa:	2004      	movs	r0, #4
   9bdfc:	4b55      	ldr	r3, [pc, #340]	; (9bf54 <Cl_dprep_controller+0x8e4>)
   9bdfe:	4798      	blx	r3
   9be00:	4603      	mov	r3, r0
   9be02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9be06:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9be0a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9be0e:	2202      	movs	r2, #2
   9be10:	4618      	mov	r0, r3
   9be12:	4b4d      	ldr	r3, [pc, #308]	; (9bf48 <Cl_dprep_controller+0x8d8>)
   9be14:	4798      	blx	r3
   9be16:	4603      	mov	r3, r0
   9be18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9be1c:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9be1e:	e15e      	b.n	9c0de <Cl_dprep_controller+0xa6e>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   9be20:	4b45      	ldr	r3, [pc, #276]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9be22:	7e1b      	ldrb	r3, [r3, #24]
   9be24:	2b00      	cmp	r3, #0
   9be26:	f000 815d 	beq.w	9c0e4 <Cl_dprep_controller+0xa74>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9be2a:	4b43      	ldr	r3, [pc, #268]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9be2c:	791b      	ldrb	r3, [r3, #4]
   9be2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9be32:	2300      	movs	r3, #0
   9be34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
   9be38:	e011      	b.n	9be5e <Cl_dprep_controller+0x7ee>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9be3a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   9be3e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
   9be42:	3201      	adds	r2, #1
   9be44:	493c      	ldr	r1, [pc, #240]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9be46:	440a      	add	r2, r1
   9be48:	7912      	ldrb	r2, [r2, #4]
   9be4a:	f107 0190 	add.w	r1, r7, #144	; 0x90
   9be4e:	440b      	add	r3, r1
   9be50:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9be54:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   9be58:	3301      	adds	r3, #1
   9be5a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
   9be5e:	4b36      	ldr	r3, [pc, #216]	; (9bf38 <Cl_dprep_controller+0x8c8>)
   9be60:	78db      	ldrb	r3, [r3, #3]
   9be62:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
   9be66:	429a      	cmp	r2, r3
   9be68:	d3e7      	bcc.n	9be3a <Cl_dprep_controller+0x7ca>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9be6a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   9be6e:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
   9be72:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9be76:	ca06      	ldmia	r2, {r1, r2}
   9be78:	4c37      	ldr	r4, [pc, #220]	; (9bf58 <Cl_dprep_controller+0x8e8>)
   9be7a:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9be7c:	e132      	b.n	9c0e4 <Cl_dprep_controller+0xa74>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9be7e:	4b37      	ldr	r3, [pc, #220]	; (9bf5c <Cl_dprep_controller+0x8ec>)
   9be80:	881b      	ldrh	r3, [r3, #0]
   9be82:	3301      	adds	r3, #1
   9be84:	b29a      	uxth	r2, r3
   9be86:	4b35      	ldr	r3, [pc, #212]	; (9bf5c <Cl_dprep_controller+0x8ec>)
   9be88:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9be8a:	4b34      	ldr	r3, [pc, #208]	; (9bf5c <Cl_dprep_controller+0x8ec>)
   9be8c:	881b      	ldrh	r3, [r3, #0]
   9be8e:	2b02      	cmp	r3, #2
   9be90:	f040 812b 	bne.w	9c0ea <Cl_dprep_controller+0xa7a>
			{
				cl_50ms_timer =0;
   9be94:	4b31      	ldr	r3, [pc, #196]	; (9bf5c <Cl_dprep_controller+0x8ec>)
   9be96:	2200      	movs	r2, #0
   9be98:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9be9a:	e126      	b.n	9c0ea <Cl_dprep_controller+0xa7a>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   9be9c:	4b30      	ldr	r3, [pc, #192]	; (9bf60 <Cl_dprep_controller+0x8f0>)
   9be9e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9bea0:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9bea4:	4619      	mov	r1, r3
   9bea6:	2014      	movs	r0, #20
   9bea8:	4b2e      	ldr	r3, [pc, #184]	; (9bf64 <Cl_dprep_controller+0x8f4>)
   9beaa:	4798      	blx	r3
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
// 				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 				temp_temp3 = temp_temp3- 0.4;										// sensor offset
				temp3_cel = (float)temp_temp3/100;
   9beac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9beae:	4b2e      	ldr	r3, [pc, #184]	; (9bf68 <Cl_dprep_controller+0x8f8>)
   9beb0:	4610      	mov	r0, r2
   9beb2:	4798      	blx	r3
   9beb4:	4602      	mov	r2, r0
   9beb6:	4b2d      	ldr	r3, [pc, #180]	; (9bf6c <Cl_dprep_controller+0x8fc>)
   9beb8:	492d      	ldr	r1, [pc, #180]	; (9bf70 <Cl_dprep_controller+0x900>)
   9beba:	4610      	mov	r0, r2
   9bebc:	4798      	blx	r3
   9bebe:	4603      	mov	r3, r0
   9bec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
// 						temp3_cel = temp_temp3;
// 					}
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9bec4:	4b2b      	ldr	r3, [pc, #172]	; (9bf74 <Cl_dprep_controller+0x904>)
   9bec6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   9beca:	4798      	blx	r3
   9becc:	4c2a      	ldr	r4, [pc, #168]	; (9bf78 <Cl_dprep_controller+0x908>)
   9bece:	a316      	add	r3, pc, #88	; (adr r3, 9bf28 <Cl_dprep_controller+0x8b8>)
   9bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9bed4:	47a0      	blx	r4
   9bed6:	4603      	mov	r3, r0
   9bed8:	2b00      	cmp	r3, #0
   9beda:	d01a      	beq.n	9bf12 <Cl_dprep_controller+0x8a2>
   9bedc:	4b25      	ldr	r3, [pc, #148]	; (9bf74 <Cl_dprep_controller+0x904>)
   9bede:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   9bee2:	4798      	blx	r3
   9bee4:	4c25      	ldr	r4, [pc, #148]	; (9bf7c <Cl_dprep_controller+0x90c>)
   9bee6:	a312      	add	r3, pc, #72	; (adr r3, 9bf30 <Cl_dprep_controller+0x8c0>)
   9bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9beec:	47a0      	blx	r4
   9beee:	4603      	mov	r3, r0
   9bef0:	2b00      	cmp	r3, #0
   9bef2:	d00e      	beq.n	9bf12 <Cl_dprep_controller+0x8a2>
				{
					if( cl_temp3_37stable == true) 
   9bef4:	4b22      	ldr	r3, [pc, #136]	; (9bf80 <Cl_dprep_controller+0x910>)
   9bef6:	781b      	ldrb	r3, [r3, #0]
   9bef8:	2b00      	cmp	r3, #0
   9befa:	d003      	beq.n	9bf04 <Cl_dprep_controller+0x894>
					{
					 cl_temp3_stable_confirm = true;	
   9befc:	4b21      	ldr	r3, [pc, #132]	; (9bf84 <Cl_dprep_controller+0x914>)
   9befe:	2201      	movs	r2, #1
   9bf00:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9bf02:	e00d      	b.n	9bf20 <Cl_dprep_controller+0x8b0>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   9bf04:	4b1e      	ldr	r3, [pc, #120]	; (9bf80 <Cl_dprep_controller+0x910>)
   9bf06:	2201      	movs	r2, #1
   9bf08:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9bf0a:	4b1e      	ldr	r3, [pc, #120]	; (9bf84 <Cl_dprep_controller+0x914>)
   9bf0c:	2200      	movs	r2, #0
   9bf0e:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9bf10:	e006      	b.n	9bf20 <Cl_dprep_controller+0x8b0>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   9bf12:	4b1b      	ldr	r3, [pc, #108]	; (9bf80 <Cl_dprep_controller+0x910>)
   9bf14:	2200      	movs	r2, #0
   9bf16:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9bf18:	4b1a      	ldr	r3, [pc, #104]	; (9bf84 <Cl_dprep_controller+0x914>)
   9bf1a:	2200      	movs	r2, #0
   9bf1c:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   9bf1e:	e0eb      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
   9bf20:	e0ea      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
   9bf22:	bf00      	nop
   9bf24:	f3af 8000 	nop.w
   9bf28:	66666666 	.word	0x66666666
   9bf2c:	40426666 	.word	0x40426666
   9bf30:	9999999a 	.word	0x9999999a
   9bf34:	40429999 	.word	0x40429999
   9bf38:	20072f88 	.word	0x20072f88
   9bf3c:	00092169 	.word	0x00092169
   9bf40:	2007212c 	.word	0x2007212c
   9bf44:	000a58f0 	.word	0x000a58f0
   9bf48:	0009926d 	.word	0x0009926d
   9bf4c:	00087c95 	.word	0x00087c95
   9bf50:	20070abc 	.word	0x20070abc
   9bf54:	00097d7d 	.word	0x00097d7d
   9bf58:	0009e0cd 	.word	0x0009e0cd
   9bf5c:	2007282c 	.word	0x2007282c
   9bf60:	0009df39 	.word	0x0009df39
   9bf64:	0008d61d 	.word	0x0008d61d
   9bf68:	000a33a1 	.word	0x000a33a1
   9bf6c:	000a35b9 	.word	0x000a35b9
   9bf70:	42c80000 	.word	0x42c80000
   9bf74:	000a2b29 	.word	0x000a2b29
   9bf78:	000a30f1 	.word	0x000a30f1
   9bf7c:	000a30b5 	.word	0x000a30b5
   9bf80:	2007282b 	.word	0x2007282b
   9bf84:	20072828 	.word	0x20072828
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   9bf88:	4ba5      	ldr	r3, [pc, #660]	; (9c220 <Cl_dprep_controller+0xbb0>)
   9bf8a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bf8e:	b29b      	uxth	r3, r3
   9bf90:	3301      	adds	r3, #1
   9bf92:	b29b      	uxth	r3, r3
   9bf94:	b21a      	sxth	r2, r3
   9bf96:	4ba2      	ldr	r3, [pc, #648]	; (9c220 <Cl_dprep_controller+0xbb0>)
   9bf98:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   9bf9a:	4ba1      	ldr	r3, [pc, #644]	; (9c220 <Cl_dprep_controller+0xbb0>)
   9bf9c:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bfa0:	2b3c      	cmp	r3, #60	; 0x3c
   9bfa2:	d101      	bne.n	9bfa8 <Cl_dprep_controller+0x938>
					{
						UpdateDprepFillingMinuteTick();
   9bfa4:	4b9f      	ldr	r3, [pc, #636]	; (9c224 <Cl_dprep_controller+0xbb4>)
   9bfa6:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9bfa8:	4b9d      	ldr	r3, [pc, #628]	; (9c220 <Cl_dprep_controller+0xbb0>)
   9bfaa:	f9b3 3000 	ldrsh.w	r3, [r3]
   9bfae:	2b1e      	cmp	r3, #30
   9bfb0:	d114      	bne.n	9bfdc <Cl_dprep_controller+0x96c>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9bfb2:	2101      	movs	r1, #1
   9bfb4:	200c      	movs	r0, #12
   9bfb6:	4b9c      	ldr	r3, [pc, #624]	; (9c228 <Cl_dprep_controller+0xbb8>)
   9bfb8:	4798      	blx	r3
   9bfba:	4603      	mov	r3, r0
   9bfbc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9bfc0:	2101      	movs	r1, #1
   9bfc2:	200d      	movs	r0, #13
   9bfc4:	4b98      	ldr	r3, [pc, #608]	; (9c228 <Cl_dprep_controller+0xbb8>)
   9bfc6:	4798      	blx	r3
   9bfc8:	4603      	mov	r3, r0
   9bfca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9bfce:	2101      	movs	r1, #1
   9bfd0:	200e      	movs	r0, #14
   9bfd2:	4b95      	ldr	r3, [pc, #596]	; (9c228 <Cl_dprep_controller+0xbb8>)
   9bfd4:	4798      	blx	r3
   9bfd6:	4603      	mov	r3, r0
   9bfd8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9bfdc:	2004      	movs	r0, #4
   9bfde:	4b93      	ldr	r3, [pc, #588]	; (9c22c <Cl_dprep_controller+0xbbc>)
   9bfe0:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   9bfe2:	4b93      	ldr	r3, [pc, #588]	; (9c230 <Cl_dprep_controller+0xbc0>)
   9bfe4:	4798      	blx	r3
   9bfe6:	4603      	mov	r3, r0
   9bfe8:	2b00      	cmp	r3, #0
   9bfea:	f040 8081 	bne.w	9c0f0 <Cl_dprep_controller+0xa80>
					{
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   9bfee:	4b91      	ldr	r3, [pc, #580]	; (9c234 <Cl_dprep_controller+0xbc4>)
   9bff0:	695b      	ldr	r3, [r3, #20]
   9bff2:	67fb      	str	r3, [r7, #124]	; 0x7c
						Cl_Uint16Type potvalue = 0;
   9bff4:	2300      	movs	r3, #0
   9bff6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9bffa:	4b8f      	ldr	r3, [pc, #572]	; (9c238 <Cl_dprep_controller+0xbc8>)
   9bffc:	781b      	ldrb	r3, [r3, #0]
   9bffe:	2b08      	cmp	r3, #8
   9c000:	d108      	bne.n	9c014 <Cl_dprep_controller+0x9a4>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   9c002:	4b8e      	ldr	r3, [pc, #568]	; (9c23c <Cl_dprep_controller+0xbcc>)
   9c004:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c006:	4b8e      	ldr	r3, [pc, #568]	; (9c240 <Cl_dprep_controller+0xbd0>)
   9c008:	2201      	movs	r2, #1
   9c00a:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9c00c:	4b8d      	ldr	r3, [pc, #564]	; (9c244 <Cl_dprep_controller+0xbd4>)
   9c00e:	2205      	movs	r2, #5
   9c010:	701a      	strb	r2, [r3, #0]
   9c012:	e007      	b.n	9c024 <Cl_dprep_controller+0x9b4>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   9c014:	4b89      	ldr	r3, [pc, #548]	; (9c23c <Cl_dprep_controller+0xbcc>)
   9c016:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c018:	4b89      	ldr	r3, [pc, #548]	; (9c240 <Cl_dprep_controller+0xbd0>)
   9c01a:	2201      	movs	r2, #1
   9c01c:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   9c01e:	4b89      	ldr	r3, [pc, #548]	; (9c244 <Cl_dprep_controller+0xbd4>)
   9c020:	2203      	movs	r2, #3
   9c022:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   9c024:	231f      	movs	r3, #31
   9c026:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9c02a:	2301      	movs	r3, #1
   9c02c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Cl_Dprep_filling_secondscounter = 0;
   9c030:	4b7b      	ldr	r3, [pc, #492]	; (9c220 <Cl_dprep_controller+0xbb0>)
   9c032:	2200      	movs	r2, #0
   9c034:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9c036:	4b84      	ldr	r3, [pc, #528]	; (9c248 <Cl_dprep_controller+0xbd8>)
   9c038:	2200      	movs	r2, #0
   9c03a:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   9c03c:	4b83      	ldr	r3, [pc, #524]	; (9c24c <Cl_dprep_controller+0xbdc>)
   9c03e:	2200      	movs	r2, #0
   9c040:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   9c042:	4b83      	ldr	r3, [pc, #524]	; (9c250 <Cl_dprep_controller+0xbe0>)
   9c044:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9c046:	f107 0167 	add.w	r1, r7, #103	; 0x67
   9c04a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9c04e:	2201      	movs	r2, #1
   9c050:	4618      	mov	r0, r3
   9c052:	4b80      	ldr	r3, [pc, #512]	; (9c254 <Cl_dprep_controller+0xbe4>)
   9c054:	4798      	blx	r3
   9c056:	4603      	mov	r3, r0
   9c058:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
					
			break;
   9c05c:	e048      	b.n	9c0f0 <Cl_dprep_controller+0xa80>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   9c05e:	4b7e      	ldr	r3, [pc, #504]	; (9c258 <Cl_dprep_controller+0xbe8>)
   9c060:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9c062:	4b78      	ldr	r3, [pc, #480]	; (9c244 <Cl_dprep_controller+0xbd4>)
   9c064:	220b      	movs	r2, #11
   9c066:	701a      	strb	r2, [r3, #0]
			break;
   9c068:	e046      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c06a:	4b7c      	ldr	r3, [pc, #496]	; (9c25c <Cl_dprep_controller+0xbec>)
   9c06c:	4798      	blx	r3
   9c06e:	4603      	mov	r3, r0
   9c070:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			break;
   9c074:	e040      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c076:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9c07a:	4619      	mov	r1, r3
   9c07c:	203c      	movs	r0, #60	; 0x3c
   9c07e:	4b78      	ldr	r3, [pc, #480]	; (9c260 <Cl_dprep_controller+0xbf0>)
   9c080:	4798      	blx	r3
					if(alarmstatus1)
   9c082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9c086:	2b00      	cmp	r3, #0
   9c088:	d002      	beq.n	9c090 <Cl_dprep_controller+0xa20>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   9c08a:	4b76      	ldr	r3, [pc, #472]	; (9c264 <Cl_dprep_controller+0xbf4>)
   9c08c:	2201      	movs	r2, #1
   9c08e:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9c090:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9c094:	4619      	mov	r1, r3
   9c096:	2011      	movs	r0, #17
   9c098:	4b71      	ldr	r3, [pc, #452]	; (9c260 <Cl_dprep_controller+0xbf0>)
   9c09a:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9c09c:	f107 0325 	add.w	r3, r7, #37	; 0x25
   9c0a0:	4619      	mov	r1, r3
   9c0a2:	200c      	movs	r0, #12
   9c0a4:	4b6e      	ldr	r3, [pc, #440]	; (9c260 <Cl_dprep_controller+0xbf0>)
   9c0a6:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   9c0a8:	e026      	b.n	9c0f8 <Cl_dprep_controller+0xa88>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c0aa:	4b63      	ldr	r3, [pc, #396]	; (9c238 <Cl_dprep_controller+0xbc8>)
   9c0ac:	781b      	ldrb	r3, [r3, #0]
   9c0ae:	2b01      	cmp	r3, #1
   9c0b0:	d021      	beq.n	9c0f6 <Cl_dprep_controller+0xa86>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c0b2:	2206      	movs	r2, #6
   9c0b4:	496c      	ldr	r1, [pc, #432]	; (9c268 <Cl_dprep_controller+0xbf8>)
   9c0b6:	2018      	movs	r0, #24
   9c0b8:	4b66      	ldr	r3, [pc, #408]	; (9c254 <Cl_dprep_controller+0xbe4>)
   9c0ba:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c0bc:	2100      	movs	r1, #0
   9c0be:	2001      	movs	r0, #1
   9c0c0:	4b6a      	ldr	r3, [pc, #424]	; (9c26c <Cl_dprep_controller+0xbfc>)
   9c0c2:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c0c4:	4b6a      	ldr	r3, [pc, #424]	; (9c270 <Cl_dprep_controller+0xc00>)
   9c0c6:	2200      	movs	r2, #0
   9c0c8:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9c0ca:	e014      	b.n	9c0f6 <Cl_dprep_controller+0xa86>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   9c0cc:	bf00      	nop
   9c0ce:	f000 be64 	b.w	9cd9a <Cl_dprep_controller+0x172a>
							}
								
						}
				
			
			break;
   9c0d2:	bf00      	nop
   9c0d4:	f000 be61 	b.w	9cd9a <Cl_dprep_controller+0x172a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
			break;
   9c0d8:	bf00      	nop
   9c0da:	f000 be5e 	b.w	9cd9a <Cl_dprep_controller+0x172a>
						break;
						default:
						break;
					}
				}
			break;
   9c0de:	bf00      	nop
   9c0e0:	f000 be5b 	b.w	9cd9a <Cl_dprep_controller+0x172a>
						 
						 
						 
					 }
	
			break;
   9c0e4:	bf00      	nop
   9c0e6:	f000 be58 	b.w	9cd9a <Cl_dprep_controller+0x172a>
			{
				cl_50ms_timer =0;
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9c0ea:	bf00      	nop
   9c0ec:	f000 be55 	b.w	9cd9a <Cl_dprep_controller+0x172a>
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
					}
					
			break;
   9c0f0:	bf00      	nop
   9c0f2:	f000 be52 	b.w	9cd9a <Cl_dprep_controller+0x172a>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9c0f6:	bf00      	nop

		}
		break;
   9c0f8:	f000 be4f 	b.w	9cd9a <Cl_dprep_controller+0x172a>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   9c0fc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c100:	2b17      	cmp	r3, #23
   9c102:	d00c      	beq.n	9c11e <Cl_dprep_controller+0xaae>
   9c104:	2b19      	cmp	r3, #25
   9c106:	d010      	beq.n	9c12a <Cl_dprep_controller+0xaba>
   9c108:	2b0d      	cmp	r3, #13
   9c10a:	d000      	beq.n	9c10e <Cl_dprep_controller+0xa9e>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   9c10c:	e013      	b.n	9c136 <Cl_dprep_controller+0xac6>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   9c10e:	4b59      	ldr	r3, [pc, #356]	; (9c274 <Cl_dprep_controller+0xc04>)
   9c110:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   9c112:	4b59      	ldr	r3, [pc, #356]	; (9c278 <Cl_dprep_controller+0xc08>)
   9c114:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9c116:	4b4b      	ldr	r3, [pc, #300]	; (9c244 <Cl_dprep_controller+0xbd4>)
   9c118:	2206      	movs	r2, #6
   9c11a:	701a      	strb	r2, [r3, #0]
								 
						break;
   9c11c:	e00b      	b.n	9c136 <Cl_dprep_controller+0xac6>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9c11e:	4b57      	ldr	r3, [pc, #348]	; (9c27c <Cl_dprep_controller+0xc0c>)
   9c120:	4798      	blx	r3
   9c122:	4603      	mov	r3, r0
   9c124:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c128:	e005      	b.n	9c136 <Cl_dprep_controller+0xac6>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c12a:	4b4c      	ldr	r3, [pc, #304]	; (9c25c <Cl_dprep_controller+0xbec>)
   9c12c:	4798      	blx	r3
   9c12e:	4603      	mov	r3, r0
   9c130:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c134:	bf00      	nop
						default:break;
					}
		break;
   9c136:	f000 be37 	b.w	9cda8 <Cl_dprep_controller+0x1738>
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   9c13a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c13e:	3b02      	subs	r3, #2
   9c140:	2b1b      	cmp	r3, #27
   9c142:	d863      	bhi.n	9c20c <Cl_dprep_controller+0xb9c>
   9c144:	a201      	add	r2, pc, #4	; (adr r2, 9c14c <Cl_dprep_controller+0xadc>)
   9c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c14a:	bf00      	nop
   9c14c:	0009c1bd 	.word	0x0009c1bd
   9c150:	0009c20d 	.word	0x0009c20d
   9c154:	0009c20d 	.word	0x0009c20d
   9c158:	0009c20d 	.word	0x0009c20d
   9c15c:	0009c20d 	.word	0x0009c20d
   9c160:	0009c20d 	.word	0x0009c20d
   9c164:	0009c20d 	.word	0x0009c20d
   9c168:	0009c20d 	.word	0x0009c20d
   9c16c:	0009c20d 	.word	0x0009c20d
   9c170:	0009c20d 	.word	0x0009c20d
   9c174:	0009c20d 	.word	0x0009c20d
   9c178:	0009c1cd 	.word	0x0009c1cd
   9c17c:	0009c20d 	.word	0x0009c20d
   9c180:	0009c20d 	.word	0x0009c20d
   9c184:	0009c20d 	.word	0x0009c20d
   9c188:	0009c20d 	.word	0x0009c20d
   9c18c:	0009c20d 	.word	0x0009c20d
   9c190:	0009c20d 	.word	0x0009c20d
   9c194:	0009c20d 	.word	0x0009c20d
   9c198:	0009c20d 	.word	0x0009c20d
   9c19c:	0009c20d 	.word	0x0009c20d
   9c1a0:	0009c1f5 	.word	0x0009c1f5
   9c1a4:	0009c20d 	.word	0x0009c20d
   9c1a8:	0009c201 	.word	0x0009c201
   9c1ac:	0009c20d 	.word	0x0009c20d
   9c1b0:	0009c20d 	.word	0x0009c20d
   9c1b4:	0009c20d 	.word	0x0009c20d
   9c1b8:	0009c1db 	.word	0x0009c1db
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   9c1bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9c1c0:	2b03      	cmp	r3, #3
   9c1c2:	d126      	bne.n	9c212 <Cl_dprep_controller+0xba2>
							{
								return Cl_dprepretcode;
   9c1c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9c1c8:	f000 bdf0 	b.w	9cdac <Cl_dprep_controller+0x173c>
							}
						break;
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								Cl_Dprep_StartDialyserPrime();
   9c1cc:	4b2c      	ldr	r3, [pc, #176]	; (9c280 <Cl_dprep_controller+0xc10>)
   9c1ce:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9c1d0:	4b28      	ldr	r3, [pc, #160]	; (9c274 <Cl_dprep_controller+0xc04>)
   9c1d2:	4798      	blx	r3
								 sv_prop_startmixing();
   9c1d4:	4b2b      	ldr	r3, [pc, #172]	; (9c284 <Cl_dprep_controller+0xc14>)
   9c1d6:	4798      	blx	r3
						break;
   9c1d8:	e01f      	b.n	9c21a <Cl_dprep_controller+0xbaa>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9c1da:	4b2b      	ldr	r3, [pc, #172]	; (9c288 <Cl_dprep_controller+0xc18>)
   9c1dc:	4798      	blx	r3
   9c1de:	4603      	mov	r3, r0
   9c1e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if(Cl_dprepretcode == CL_REJECTED)
   9c1e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9c1e8:	2b03      	cmp	r3, #3
   9c1ea:	d115      	bne.n	9c218 <Cl_dprep_controller+0xba8>
							{
								return Cl_dprepretcode;
   9c1ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
   9c1f0:	f000 bddc 	b.w	9cdac <Cl_dprep_controller+0x173c>
							}
						break;
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9c1f4:	4b21      	ldr	r3, [pc, #132]	; (9c27c <Cl_dprep_controller+0xc0c>)
   9c1f6:	4798      	blx	r3
   9c1f8:	4603      	mov	r3, r0
   9c1fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c1fe:	e00c      	b.n	9c21a <Cl_dprep_controller+0xbaa>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c200:	4b16      	ldr	r3, [pc, #88]	; (9c25c <Cl_dprep_controller+0xbec>)
   9c202:	4798      	blx	r3
   9c204:	4603      	mov	r3, r0
   9c206:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c20a:	e006      	b.n	9c21a <Cl_dprep_controller+0xbaa>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   9c20c:	bf00      	nop
   9c20e:	f000 bdcb 	b.w	9cda8 <Cl_dprep_controller+0x1738>
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9c212:	bf00      	nop
   9c214:	f000 bdc8 	b.w	9cda8 <Cl_dprep_controller+0x1738>
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9c218:	bf00      	nop
// 							}
// 						}
						break;
						default:break;
					}
		break;
   9c21a:	f000 bdc5 	b.w	9cda8 <Cl_dprep_controller+0x1738>
   9c21e:	bf00      	nop
   9c220:	2007280e 	.word	0x2007280e
   9c224:	0009d719 	.word	0x0009d719
   9c228:	00082f5d 	.word	0x00082f5d
   9c22c:	0009d7c1 	.word	0x0009d7c1
   9c230:	0009d4c1 	.word	0x0009d4c1
   9c234:	20073194 	.word	0x20073194
   9c238:	2007212c 	.word	0x2007212c
   9c23c:	0009769d 	.word	0x0009769d
   9c240:	20072830 	.word	0x20072830
   9c244:	2007282f 	.word	0x2007282f
   9c248:	20072810 	.word	0x20072810
   9c24c:	20072812 	.word	0x20072812
   9c250:	0009f245 	.word	0x0009f245
   9c254:	0009926d 	.word	0x0009926d
   9c258:	0009f1a5 	.word	0x0009f1a5
   9c25c:	0009d0a5 	.word	0x0009d0a5
   9c260:	00083095 	.word	0x00083095
   9c264:	2007282c 	.word	0x2007282c
   9c268:	000a58f8 	.word	0x000a58f8
   9c26c:	00087c95 	.word	0x00087c95
   9c270:	20070abc 	.word	0x20070abc
   9c274:	00097681 	.word	0x00097681
   9c278:	000976c5 	.word	0x000976c5
   9c27c:	0009df39 	.word	0x0009df39
   9c280:	0009ee11 	.word	0x0009ee11
   9c284:	00097899 	.word	0x00097899
   9c288:	0009eaed 	.word	0x0009eaed
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9c28c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c290:	3b04      	subs	r3, #4
   9c292:	2b1b      	cmp	r3, #27
   9c294:	f200 80cf 	bhi.w	9c436 <Cl_dprep_controller+0xdc6>
   9c298:	a201      	add	r2, pc, #4	; (adr r2, 9c2a0 <Cl_dprep_controller+0xc30>)
   9c29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c29e:	bf00      	nop
   9c2a0:	0009c3af 	.word	0x0009c3af
   9c2a4:	0009c437 	.word	0x0009c437
   9c2a8:	0009c437 	.word	0x0009c437
   9c2ac:	0009c437 	.word	0x0009c437
   9c2b0:	0009c437 	.word	0x0009c437
   9c2b4:	0009c437 	.word	0x0009c437
   9c2b8:	0009c355 	.word	0x0009c355
   9c2bc:	0009c437 	.word	0x0009c437
   9c2c0:	0009c399 	.word	0x0009c399
   9c2c4:	0009c311 	.word	0x0009c311
   9c2c8:	0009c437 	.word	0x0009c437
   9c2cc:	0009c437 	.word	0x0009c437
   9c2d0:	0009c437 	.word	0x0009c437
   9c2d4:	0009c437 	.word	0x0009c437
   9c2d8:	0009c437 	.word	0x0009c437
   9c2dc:	0009c437 	.word	0x0009c437
   9c2e0:	0009c437 	.word	0x0009c437
   9c2e4:	0009c437 	.word	0x0009c437
   9c2e8:	0009c37d 	.word	0x0009c37d
   9c2ec:	0009c377 	.word	0x0009c377
   9c2f0:	0009c437 	.word	0x0009c437
   9c2f4:	0009c38d 	.word	0x0009c38d
   9c2f8:	0009c437 	.word	0x0009c437
   9c2fc:	0009c437 	.word	0x0009c437
   9c300:	0009c437 	.word	0x0009c437
   9c304:	0009c437 	.word	0x0009c437
   9c308:	0009c437 	.word	0x0009c437
   9c30c:	0009c321 	.word	0x0009c321
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9c310:	4ba2      	ldr	r3, [pc, #648]	; (9c59c <Cl_dprep_controller+0xf2c>)
   9c312:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9c314:	4ba2      	ldr	r3, [pc, #648]	; (9c5a0 <Cl_dprep_controller+0xf30>)
   9c316:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9c318:	4ba2      	ldr	r3, [pc, #648]	; (9c5a4 <Cl_dprep_controller+0xf34>)
   9c31a:	2206      	movs	r2, #6
   9c31c:	701a      	strb	r2, [r3, #0]
						break;
   9c31e:	e097      	b.n	9c450 <Cl_dprep_controller+0xde0>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9c320:	4ba1      	ldr	r3, [pc, #644]	; (9c5a8 <Cl_dprep_controller+0xf38>)
   9c322:	781b      	ldrb	r3, [r3, #0]
   9c324:	2b01      	cmp	r3, #1
   9c326:	d108      	bne.n	9c33a <Cl_dprep_controller+0xcca>
   9c328:	4b9f      	ldr	r3, [pc, #636]	; (9c5a8 <Cl_dprep_controller+0xf38>)
   9c32a:	781b      	ldrb	r3, [r3, #0]
   9c32c:	2b05      	cmp	r3, #5
   9c32e:	d104      	bne.n	9c33a <Cl_dprep_controller+0xcca>
   9c330:	4b9d      	ldr	r3, [pc, #628]	; (9c5a8 <Cl_dprep_controller+0xf38>)
   9c332:	781b      	ldrb	r3, [r3, #0]
   9c334:	2b09      	cmp	r3, #9
   9c336:	f000 8081 	beq.w	9c43c <Cl_dprep_controller+0xdcc>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9c33a:	2206      	movs	r2, #6
   9c33c:	499b      	ldr	r1, [pc, #620]	; (9c5ac <Cl_dprep_controller+0xf3c>)
   9c33e:	2018      	movs	r0, #24
   9c340:	4b9b      	ldr	r3, [pc, #620]	; (9c5b0 <Cl_dprep_controller+0xf40>)
   9c342:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9c344:	2100      	movs	r1, #0
   9c346:	2005      	movs	r0, #5
   9c348:	4b9a      	ldr	r3, [pc, #616]	; (9c5b4 <Cl_dprep_controller+0xf44>)
   9c34a:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c34c:	4b9a      	ldr	r3, [pc, #616]	; (9c5b8 <Cl_dprep_controller+0xf48>)
   9c34e:	2200      	movs	r2, #0
   9c350:	70da      	strb	r2, [r3, #3]
									}
						break;
   9c352:	e073      	b.n	9c43c <Cl_dprep_controller+0xdcc>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c354:	4b94      	ldr	r3, [pc, #592]	; (9c5a8 <Cl_dprep_controller+0xf38>)
   9c356:	781b      	ldrb	r3, [r3, #0]
   9c358:	2b01      	cmp	r3, #1
   9c35a:	d072      	beq.n	9c442 <Cl_dprep_controller+0xdd2>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c35c:	2206      	movs	r2, #6
   9c35e:	4997      	ldr	r1, [pc, #604]	; (9c5bc <Cl_dprep_controller+0xf4c>)
   9c360:	2018      	movs	r0, #24
   9c362:	4b93      	ldr	r3, [pc, #588]	; (9c5b0 <Cl_dprep_controller+0xf40>)
   9c364:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c366:	2100      	movs	r1, #0
   9c368:	2001      	movs	r0, #1
   9c36a:	4b92      	ldr	r3, [pc, #584]	; (9c5b4 <Cl_dprep_controller+0xf44>)
   9c36c:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9c36e:	4b92      	ldr	r3, [pc, #584]	; (9c5b8 <Cl_dprep_controller+0xf48>)
   9c370:	2200      	movs	r2, #0
   9c372:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9c374:	e065      	b.n	9c442 <Cl_dprep_controller+0xdd2>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9c376:	4b92      	ldr	r3, [pc, #584]	; (9c5c0 <Cl_dprep_controller+0xf50>)
   9c378:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9c37a:	e069      	b.n	9c450 <Cl_dprep_controller+0xde0>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9c37c:	4b8a      	ldr	r3, [pc, #552]	; (9c5a8 <Cl_dprep_controller+0xf38>)
   9c37e:	781b      	ldrb	r3, [r3, #0]
   9c380:	2b08      	cmp	r3, #8
   9c382:	d161      	bne.n	9c448 <Cl_dprep_controller+0xdd8>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9c384:	4b87      	ldr	r3, [pc, #540]	; (9c5a4 <Cl_dprep_controller+0xf34>)
   9c386:	2205      	movs	r2, #5
   9c388:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9c38a:	e05d      	b.n	9c448 <Cl_dprep_controller+0xdd8>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c38c:	4b8d      	ldr	r3, [pc, #564]	; (9c5c4 <Cl_dprep_controller+0xf54>)
   9c38e:	4798      	blx	r3
   9c390:	4603      	mov	r3, r0
   9c392:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c396:	e05b      	b.n	9c450 <Cl_dprep_controller+0xde0>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9c398:	f107 0367 	add.w	r3, r7, #103	; 0x67
   9c39c:	2200      	movs	r2, #0
   9c39e:	4619      	mov	r1, r3
   9c3a0:	2025      	movs	r0, #37	; 0x25
   9c3a2:	4b83      	ldr	r3, [pc, #524]	; (9c5b0 <Cl_dprep_controller+0xf40>)
   9c3a4:	4798      	blx	r3
   9c3a6:	4603      	mov	r3, r0
   9c3a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		
						break;
   9c3ac:	e050      	b.n	9c450 <Cl_dprep_controller+0xde0>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   9c3ae:	4b86      	ldr	r3, [pc, #536]	; (9c5c8 <Cl_dprep_controller+0xf58>)
   9c3b0:	7e1b      	ldrb	r3, [r3, #24]
   9c3b2:	2b00      	cmp	r3, #0
   9c3b4:	d04b      	beq.n	9c44e <Cl_dprep_controller+0xdde>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9c3b6:	4b84      	ldr	r3, [pc, #528]	; (9c5c8 <Cl_dprep_controller+0xf58>)
   9c3b8:	791b      	ldrb	r3, [r3, #4]
   9c3ba:	2b02      	cmp	r3, #2
   9c3bc:	d002      	beq.n	9c3c4 <Cl_dprep_controller+0xd54>
   9c3be:	2b04      	cmp	r3, #4
   9c3c0:	d01c      	beq.n	9c3fc <Cl_dprep_controller+0xd8c>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   9c3c2:	e037      	b.n	9c434 <Cl_dprep_controller+0xdc4>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c3c4:	2316      	movs	r3, #22
   9c3c6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c3ca:	2302      	movs	r3, #2
   9c3cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c3d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c3d4:	3301      	adds	r3, #1
   9c3d6:	4619      	mov	r1, r3
   9c3d8:	2002      	movs	r0, #2
   9c3da:	4b7c      	ldr	r3, [pc, #496]	; (9c5cc <Cl_dprep_controller+0xf5c>)
   9c3dc:	4798      	blx	r3
   9c3de:	4603      	mov	r3, r0
   9c3e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c3e4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c3e8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9c3ec:	2202      	movs	r2, #2
   9c3ee:	4618      	mov	r0, r3
   9c3f0:	4b6f      	ldr	r3, [pc, #444]	; (9c5b0 <Cl_dprep_controller+0xf40>)
   9c3f2:	4798      	blx	r3
   9c3f4:	4603      	mov	r3, r0
   9c3f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9c3fa:	e01b      	b.n	9c434 <Cl_dprep_controller+0xdc4>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c3fc:	2316      	movs	r3, #22
   9c3fe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9c402:	2304      	movs	r3, #4
   9c404:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9c408:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c40c:	3301      	adds	r3, #1
   9c40e:	4619      	mov	r1, r3
   9c410:	2004      	movs	r0, #4
   9c412:	4b6e      	ldr	r3, [pc, #440]	; (9c5cc <Cl_dprep_controller+0xf5c>)
   9c414:	4798      	blx	r3
   9c416:	4603      	mov	r3, r0
   9c418:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c41c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c420:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9c424:	2202      	movs	r2, #2
   9c426:	4618      	mov	r0, r3
   9c428:	4b61      	ldr	r3, [pc, #388]	; (9c5b0 <Cl_dprep_controller+0xf40>)
   9c42a:	4798      	blx	r3
   9c42c:	4603      	mov	r3, r0
   9c42e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9c432:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9c434:	e00b      	b.n	9c44e <Cl_dprep_controller+0xdde>
						default:break;
   9c436:	bf00      	nop
   9c438:	f000 bcb6 	b.w	9cda8 <Cl_dprep_controller+0x1738>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
									}
						break;
   9c43c:	bf00      	nop
   9c43e:	f000 bcb3 	b.w	9cda8 <Cl_dprep_controller+0x1738>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   9c442:	bf00      	nop
   9c444:	f000 bcb0 	b.w	9cda8 <Cl_dprep_controller+0x1738>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
									 
						}
						break;
   9c448:	bf00      	nop
   9c44a:	f000 bcad 	b.w	9cda8 <Cl_dprep_controller+0x1738>
									break;
									default:
									break;
								}
							}
						break;
   9c44e:	bf00      	nop
						default:break;
					}

		break;
   9c450:	f000 bcaa 	b.w	9cda8 <Cl_dprep_controller+0x1738>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 wait_timeout_counter = 0;
   9c454:	4b5e      	ldr	r3, [pc, #376]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c456:	2200      	movs	r2, #0
   9c458:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   9c45a:	4b5e      	ldr	r3, [pc, #376]	; (9c5d4 <Cl_dprep_controller+0xf64>)
   9c45c:	681b      	ldr	r3, [r3, #0]
   9c45e:	2b03      	cmp	r3, #3
   9c460:	dd0c      	ble.n	9c47c <Cl_dprep_controller+0xe0c>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   9c462:	4b5d      	ldr	r3, [pc, #372]	; (9c5d8 <Cl_dprep_controller+0xf68>)
   9c464:	4798      	blx	r3
			 state_counter = 0;
   9c466:	4b5b      	ldr	r3, [pc, #364]	; (9c5d4 <Cl_dprep_controller+0xf64>)
   9c468:	2200      	movs	r2, #0
   9c46a:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   9c46c:	4b5b      	ldr	r3, [pc, #364]	; (9c5dc <Cl_dprep_controller+0xf6c>)
   9c46e:	2200      	movs	r2, #0
   9c470:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   9c472:	4b57      	ldr	r3, [pc, #348]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c474:	2200      	movs	r2, #0
   9c476:	601a      	str	r2, [r3, #0]
			
		
		}
		}
		
		break;
   9c478:	f000 bc91 	b.w	9cd9e <Cl_dprep_controller+0x172e>
			 wait_timeout_counter = 0;
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   9c47c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c480:	3b01      	subs	r3, #1
   9c482:	2b18      	cmp	r3, #24
   9c484:	f200 848b 	bhi.w	9cd9e <Cl_dprep_controller+0x172e>
   9c488:	a201      	add	r2, pc, #4	; (adr r2, 9c490 <Cl_dprep_controller+0xe20>)
   9c48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c48e:	bf00      	nop
   9c490:	0009c583 	.word	0x0009c583
   9c494:	0009cd9f 	.word	0x0009cd9f
   9c498:	0009cd9f 	.word	0x0009cd9f
   9c49c:	0009cd9f 	.word	0x0009cd9f
   9c4a0:	0009cd9f 	.word	0x0009cd9f
   9c4a4:	0009cd9f 	.word	0x0009cd9f
   9c4a8:	0009cd9f 	.word	0x0009cd9f
   9c4ac:	0009cd9f 	.word	0x0009cd9f
   9c4b0:	0009cd9f 	.word	0x0009cd9f
   9c4b4:	0009cd9f 	.word	0x0009cd9f
   9c4b8:	0009cd9f 	.word	0x0009cd9f
   9c4bc:	0009cd9f 	.word	0x0009cd9f
   9c4c0:	0009cd9f 	.word	0x0009cd9f
   9c4c4:	0009c57d 	.word	0x0009c57d
   9c4c8:	0009cd9f 	.word	0x0009cd9f
   9c4cc:	0009cd9f 	.word	0x0009cd9f
   9c4d0:	0009cd9f 	.word	0x0009cd9f
   9c4d4:	0009cd9f 	.word	0x0009cd9f
   9c4d8:	0009cd9f 	.word	0x0009cd9f
   9c4dc:	0009cd9f 	.word	0x0009cd9f
   9c4e0:	0009cd9f 	.word	0x0009cd9f
   9c4e4:	0009c4f5 	.word	0x0009c4f5
   9c4e8:	0009cd9f 	.word	0x0009cd9f
   9c4ec:	0009cd9f 	.word	0x0009cd9f
   9c4f0:	0009c571 	.word	0x0009c571
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   9c4f4:	4b36      	ldr	r3, [pc, #216]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c4f6:	681b      	ldr	r3, [r3, #0]
   9c4f8:	3301      	adds	r3, #1
   9c4fa:	4a35      	ldr	r2, [pc, #212]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c4fc:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9c4fe:	2003      	movs	r0, #3
   9c500:	4b37      	ldr	r3, [pc, #220]	; (9c5e0 <Cl_dprep_controller+0xf70>)
   9c502:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   9c504:	4b37      	ldr	r3, [pc, #220]	; (9c5e4 <Cl_dprep_controller+0xf74>)
   9c506:	4798      	blx	r3
   9c508:	4603      	mov	r3, r0
   9c50a:	2b00      	cmp	r3, #0
   9c50c:	d104      	bne.n	9c518 <Cl_dprep_controller+0xea8>
			
			stability_counter++ ;
   9c50e:	4b33      	ldr	r3, [pc, #204]	; (9c5dc <Cl_dprep_controller+0xf6c>)
   9c510:	681b      	ldr	r3, [r3, #0]
   9c512:	3301      	adds	r3, #1
   9c514:	4a31      	ldr	r2, [pc, #196]	; (9c5dc <Cl_dprep_controller+0xf6c>)
   9c516:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   9c518:	4b30      	ldr	r3, [pc, #192]	; (9c5dc <Cl_dprep_controller+0xf6c>)
   9c51a:	681b      	ldr	r3, [r3, #0]
   9c51c:	2b0a      	cmp	r3, #10
   9c51e:	d120      	bne.n	9c562 <Cl_dprep_controller+0xef2>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // true
   9c520:	2100      	movs	r1, #0
   9c522:	2008      	movs	r0, #8
   9c524:	4b30      	ldr	r3, [pc, #192]	; (9c5e8 <Cl_dprep_controller+0xf78>)
   9c526:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // true
   9c528:	2100      	movs	r1, #0
   9c52a:	2007      	movs	r0, #7
   9c52c:	4b2e      	ldr	r3, [pc, #184]	; (9c5e8 <Cl_dprep_controller+0xf78>)
   9c52e:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // true
   9c530:	2100      	movs	r1, #0
   9c532:	2013      	movs	r0, #19
   9c534:	4b2c      	ldr	r3, [pc, #176]	; (9c5e8 <Cl_dprep_controller+0xf78>)
   9c536:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); //true
   9c538:	2100      	movs	r1, #0
   9c53a:	2014      	movs	r0, #20
   9c53c:	4b2a      	ldr	r3, [pc, #168]	; (9c5e8 <Cl_dprep_controller+0xf78>)
   9c53e:	4798      	blx	r3
		
		stability_counter = 0;	
   9c540:	4b26      	ldr	r3, [pc, #152]	; (9c5dc <Cl_dprep_controller+0xf6c>)
   9c542:	2200      	movs	r2, #0
   9c544:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   9c546:	4b22      	ldr	r3, [pc, #136]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c548:	2200      	movs	r2, #0
   9c54a:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9c54c:	4b27      	ldr	r3, [pc, #156]	; (9c5ec <Cl_dprep_controller+0xf7c>)
   9c54e:	4798      	blx	r3
   9c550:	4603      	mov	r3, r0
   9c552:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   9c556:	4b26      	ldr	r3, [pc, #152]	; (9c5f0 <Cl_dprep_controller+0xf80>)
   9c558:	2202      	movs	r2, #2
   9c55a:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9c55c:	4b11      	ldr	r3, [pc, #68]	; (9c5a4 <Cl_dprep_controller+0xf34>)
   9c55e:	2206      	movs	r2, #6
   9c560:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   9c562:	4b1b      	ldr	r3, [pc, #108]	; (9c5d0 <Cl_dprep_controller+0xf60>)
   9c564:	681b      	ldr	r3, [r3, #0]
   9c566:	2b0f      	cmp	r3, #15
   9c568:	dd14      	ble.n	9c594 <Cl_dprep_controller+0xf24>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   9c56a:	4b1b      	ldr	r3, [pc, #108]	; (9c5d8 <Cl_dprep_controller+0xf68>)
   9c56c:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9c56e:	e011      	b.n	9c594 <Cl_dprep_controller+0xf24>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c570:	4b14      	ldr	r3, [pc, #80]	; (9c5c4 <Cl_dprep_controller+0xf54>)
   9c572:	4798      	blx	r3
   9c574:	4603      	mov	r3, r0
   9c576:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		break;
   9c57a:	e00c      	b.n	9c596 <Cl_dprep_controller+0xf26>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_Dprep_Priming_Stop();
   9c57c:	4b16      	ldr	r3, [pc, #88]	; (9c5d8 <Cl_dprep_controller+0xf68>)
   9c57e:	4798      	blx	r3
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   9c580:	e009      	b.n	9c596 <Cl_dprep_controller+0xf26>
		
		case EVENT_DPREP_CLR_ALARM:
		sv_cntrl_resetyellowalarm();
   9c582:	4b1c      	ldr	r3, [pc, #112]	; (9c5f4 <Cl_dprep_controller+0xf84>)
   9c584:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   9c586:	4b1c      	ldr	r3, [pc, #112]	; (9c5f8 <Cl_dprep_controller+0xf88>)
   9c588:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   9c58a:	4b1c      	ldr	r3, [pc, #112]	; (9c5fc <Cl_dprep_controller+0xf8c>)
   9c58c:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   9c58e:	4b0c      	ldr	r3, [pc, #48]	; (9c5c0 <Cl_dprep_controller+0xf50>)
   9c590:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
		break;
   9c592:	e000      	b.n	9c596 <Cl_dprep_controller+0xf26>
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9c594:	bf00      	nop
			
		
		}
		}
		
		break;
   9c596:	f000 bc02 	b.w	9cd9e <Cl_dprep_controller+0x172e>
   9c59a:	bf00      	nop
   9c59c:	0009ee11 	.word	0x0009ee11
   9c5a0:	00097681 	.word	0x00097681
   9c5a4:	2007282f 	.word	0x2007282f
   9c5a8:	2007212c 	.word	0x2007212c
   9c5ac:	000a58f0 	.word	0x000a58f0
   9c5b0:	0009926d 	.word	0x0009926d
   9c5b4:	00087c95 	.word	0x00087c95
   9c5b8:	20070abc 	.word	0x20070abc
   9c5bc:	000a58f8 	.word	0x000a58f8
   9c5c0:	0009df39 	.word	0x0009df39
   9c5c4:	0009d0a5 	.word	0x0009d0a5
   9c5c8:	20072f88 	.word	0x20072f88
   9c5cc:	00097d7d 	.word	0x00097d7d
   9c5d0:	200727f0 	.word	0x200727f0
   9c5d4:	200727f4 	.word	0x200727f4
   9c5d8:	0009f161 	.word	0x0009f161
   9c5dc:	200727ec 	.word	0x200727ec
   9c5e0:	0009d7c1 	.word	0x0009d7c1
   9c5e4:	0009f175 	.word	0x0009f175
   9c5e8:	00082f5d 	.word	0x00082f5d
   9c5ec:	000976c5 	.word	0x000976c5
   9c5f0:	20072830 	.word	0x20072830
   9c5f4:	000977ad 	.word	0x000977ad
   9c5f8:	00097799 	.word	0x00097799
   9c5fc:	000977d5 	.word	0x000977d5
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   9c600:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c604:	3b01      	subs	r3, #1
   9c606:	2b19      	cmp	r3, #25
   9c608:	f200 8103 	bhi.w	9c812 <Cl_dprep_controller+0x11a2>
   9c60c:	a201      	add	r2, pc, #4	; (adr r2, 9c614 <Cl_dprep_controller+0xfa4>)
   9c60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c612:	bf00      	nop
   9c614:	0009c7c3 	.word	0x0009c7c3
   9c618:	0009c813 	.word	0x0009c813
   9c61c:	0009c6f9 	.word	0x0009c6f9
   9c620:	0009c67d 	.word	0x0009c67d
   9c624:	0009c813 	.word	0x0009c813
   9c628:	0009c813 	.word	0x0009c813
   9c62c:	0009c795 	.word	0x0009c795
   9c630:	0009c813 	.word	0x0009c813
   9c634:	0009c813 	.word	0x0009c813
   9c638:	0009c813 	.word	0x0009c813
   9c63c:	0009c813 	.word	0x0009c813
   9c640:	0009c757 	.word	0x0009c757
   9c644:	0009c76d 	.word	0x0009c76d
   9c648:	0009c813 	.word	0x0009c813
   9c64c:	0009c813 	.word	0x0009c813
   9c650:	0009c813 	.word	0x0009c813
   9c654:	0009c813 	.word	0x0009c813
   9c658:	0009c813 	.word	0x0009c813
   9c65c:	0009c813 	.word	0x0009c813
   9c660:	0009c813 	.word	0x0009c813
   9c664:	0009c813 	.word	0x0009c813
   9c668:	0009c813 	.word	0x0009c813
   9c66c:	0009c7d5 	.word	0x0009c7d5
   9c670:	0009c813 	.word	0x0009c813
   9c674:	0009c789 	.word	0x0009c789
   9c678:	0009c77b 	.word	0x0009c77b
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9c67c:	4b89      	ldr	r3, [pc, #548]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c67e:	7e1b      	ldrb	r3, [r3, #24]
   9c680:	2b00      	cmp	r3, #0
   9c682:	f000 80c8 	beq.w	9c816 <Cl_dprep_controller+0x11a6>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9c686:	4b87      	ldr	r3, [pc, #540]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c688:	791b      	ldrb	r3, [r3, #4]
   9c68a:	2b03      	cmp	r3, #3
   9c68c:	d002      	beq.n	9c694 <Cl_dprep_controller+0x1024>
   9c68e:	2b04      	cmp	r3, #4
   9c690:	d015      	beq.n	9c6be <Cl_dprep_controller+0x104e>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9c692:	e030      	b.n	9c6f6 <Cl_dprep_controller+0x1086>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c694:	2316      	movs	r3, #22
   9c696:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9c69a:	2303      	movs	r3, #3
   9c69c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									dataarray[1] = 0;									
   9c6a0:	2300      	movs	r3, #0
   9c6a2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c6a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c6aa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9c6ae:	2202      	movs	r2, #2
   9c6b0:	4618      	mov	r0, r3
   9c6b2:	4b7d      	ldr	r3, [pc, #500]	; (9c8a8 <Cl_dprep_controller+0x1238>)
   9c6b4:	4798      	blx	r3
   9c6b6:	4603      	mov	r3, r0
   9c6b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9c6bc:	e01b      	b.n	9c6f6 <Cl_dprep_controller+0x1086>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9c6be:	2316      	movs	r3, #22
   9c6c0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9c6c4:	2304      	movs	r3, #4
   9c6c6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9c6ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9c6ce:	3301      	adds	r3, #1
   9c6d0:	4619      	mov	r1, r3
   9c6d2:	2004      	movs	r0, #4
   9c6d4:	4b75      	ldr	r3, [pc, #468]	; (9c8ac <Cl_dprep_controller+0x123c>)
   9c6d6:	4798      	blx	r3
   9c6d8:	4603      	mov	r3, r0
   9c6da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c6de:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9c6e2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9c6e6:	2202      	movs	r2, #2
   9c6e8:	4618      	mov	r0, r3
   9c6ea:	4b6f      	ldr	r3, [pc, #444]	; (9c8a8 <Cl_dprep_controller+0x1238>)
   9c6ec:	4798      	blx	r3
   9c6ee:	4603      	mov	r3, r0
   9c6f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9c6f4:	bf00      	nop
									default:break;
								}
							}
						break;
   9c6f6:	e08e      	b.n	9c816 <Cl_dprep_controller+0x11a6>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9c6f8:	4b6a      	ldr	r3, [pc, #424]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c6fa:	7e1b      	ldrb	r3, [r3, #24]
   9c6fc:	2b00      	cmp	r3, #0
   9c6fe:	f000 808c 	beq.w	9c81a <Cl_dprep_controller+0x11aa>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9c702:	4b68      	ldr	r3, [pc, #416]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c704:	791b      	ldrb	r3, [r3, #4]
   9c706:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c70a:	2300      	movs	r3, #0
   9c70c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
   9c710:	e011      	b.n	9c736 <Cl_dprep_controller+0x10c6>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9c712:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
   9c716:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
   9c71a:	3201      	adds	r2, #1
   9c71c:	4961      	ldr	r1, [pc, #388]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c71e:	440a      	add	r2, r1
   9c720:	7912      	ldrb	r2, [r2, #4]
   9c722:	f107 0190 	add.w	r1, r7, #144	; 0x90
   9c726:	440b      	add	r3, r1
   9c728:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9c72c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
   9c730:	3301      	adds	r3, #1
   9c732:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
   9c736:	4b5b      	ldr	r3, [pc, #364]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c738:	78db      	ldrb	r3, [r3, #3]
   9c73a:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
   9c73e:	429a      	cmp	r2, r3
   9c740:	d3e7      	bcc.n	9c712 <Cl_dprep_controller+0x10a2>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9c742:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
   9c746:	f897 0079 	ldrb.w	r0, [r7, #121]	; 0x79
   9c74a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9c74e:	ca06      	ldmia	r2, {r1, r2}
   9c750:	4c57      	ldr	r4, [pc, #348]	; (9c8b0 <Cl_dprep_controller+0x1240>)
   9c752:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9c754:	e061      	b.n	9c81a <Cl_dprep_controller+0x11aa>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9c756:	f107 0367 	add.w	r3, r7, #103	; 0x67
   9c75a:	2200      	movs	r2, #0
   9c75c:	4619      	mov	r1, r3
   9c75e:	2025      	movs	r0, #37	; 0x25
   9c760:	4b51      	ldr	r3, [pc, #324]	; (9c8a8 <Cl_dprep_controller+0x1238>)
   9c762:	4798      	blx	r3
   9c764:	4603      	mov	r3, r0
   9c766:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		
						break;
   9c76a:	e059      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9c76c:	4b51      	ldr	r3, [pc, #324]	; (9c8b4 <Cl_dprep_controller+0x1244>)
   9c76e:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9c770:	4b51      	ldr	r3, [pc, #324]	; (9c8b8 <Cl_dprep_controller+0x1248>)
   9c772:	4798      	blx	r3
								 sv_prop_startmixing();
   9c774:	4b51      	ldr	r3, [pc, #324]	; (9c8bc <Cl_dprep_controller+0x124c>)
   9c776:	4798      	blx	r3
						break;
   9c778:	e052      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c77a:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9c77e:	4619      	mov	r1, r3
   9c780:	203c      	movs	r0, #60	; 0x3c
   9c782:	4b4f      	ldr	r3, [pc, #316]	; (9c8c0 <Cl_dprep_controller+0x1250>)
   9c784:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   9c786:	e04b      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c788:	4b4e      	ldr	r3, [pc, #312]	; (9c8c4 <Cl_dprep_controller+0x1254>)
   9c78a:	4798      	blx	r3
   9c78c:	4603      	mov	r3, r0
   9c78e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c792:	e045      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   9c794:	4b43      	ldr	r3, [pc, #268]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c796:	7e1b      	ldrb	r3, [r3, #24]
   9c798:	2b00      	cmp	r3, #0
   9c79a:	d040      	beq.n	9c81e <Cl_dprep_controller+0x11ae>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c79c:	4b41      	ldr	r3, [pc, #260]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c79e:	791b      	ldrb	r3, [r3, #4]
   9c7a0:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9c7a2:	4b40      	ldr	r3, [pc, #256]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c7a4:	791b      	ldrb	r3, [r3, #4]
   9c7a6:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9c7a8:	4b3e      	ldr	r3, [pc, #248]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c7aa:	791b      	ldrb	r3, [r3, #4]
   9c7ac:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9c7ae:	4b3d      	ldr	r3, [pc, #244]	; (9c8a4 <Cl_dprep_controller+0x1234>)
   9c7b0:	791b      	ldrb	r3, [r3, #4]
   9c7b2:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9c7b4:	89bb      	ldrh	r3, [r7, #12]
   9c7b6:	b21b      	sxth	r3, r3
   9c7b8:	4619      	mov	r1, r3
   9c7ba:	200e      	movs	r0, #14
   9c7bc:	4b42      	ldr	r3, [pc, #264]	; (9c8c8 <Cl_dprep_controller+0x1258>)
   9c7be:	4798      	blx	r3
											}
						break;
   9c7c0:	e02d      	b.n	9c81e <Cl_dprep_controller+0x11ae>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9c7c2:	4b42      	ldr	r3, [pc, #264]	; (9c8cc <Cl_dprep_controller+0x125c>)
   9c7c4:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9c7c6:	4b42      	ldr	r3, [pc, #264]	; (9c8d0 <Cl_dprep_controller+0x1260>)
   9c7c8:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9c7ca:	4b42      	ldr	r3, [pc, #264]	; (9c8d4 <Cl_dprep_controller+0x1264>)
   9c7cc:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9c7ce:	4b42      	ldr	r3, [pc, #264]	; (9c8d8 <Cl_dprep_controller+0x1268>)
   9c7d0:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
						break;
   9c7d2:	e025      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   9c7d4:	f04f 0300 	mov.w	r3, #0
   9c7d8:	677b      	str	r3, [r7, #116]	; 0x74
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9c7da:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9c7de:	4619      	mov	r1, r3
   9c7e0:	2014      	movs	r0, #20
   9c7e2:	4b3e      	ldr	r3, [pc, #248]	; (9c8dc <Cl_dprep_controller+0x126c>)
   9c7e4:	4798      	blx	r3
// 							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// 	//						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 							temp_temp3 = temp_temp3 - 0.4;										// sensor offset
							temp3_cel = (float)temp_temp3 /100;
   9c7e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9c7e8:	4b3d      	ldr	r3, [pc, #244]	; (9c8e0 <Cl_dprep_controller+0x1270>)
   9c7ea:	4610      	mov	r0, r2
   9c7ec:	4798      	blx	r3
   9c7ee:	4602      	mov	r2, r0
   9c7f0:	4b3c      	ldr	r3, [pc, #240]	; (9c8e4 <Cl_dprep_controller+0x1274>)
   9c7f2:	493d      	ldr	r1, [pc, #244]	; (9c8e8 <Cl_dprep_controller+0x1278>)
   9c7f4:	4610      	mov	r0, r2
   9c7f6:	4798      	blx	r3
   9c7f8:	4603      	mov	r3, r0
   9c7fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							Cl_Dprep_filling_secondscounter++;
   9c7fe:	4b3b      	ldr	r3, [pc, #236]	; (9c8ec <Cl_dprep_controller+0x127c>)
   9c800:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c804:	b29b      	uxth	r3, r3
   9c806:	3301      	adds	r3, #1
   9c808:	b29b      	uxth	r3, r3
   9c80a:	b21a      	sxth	r2, r3
   9c80c:	4b37      	ldr	r3, [pc, #220]	; (9c8ec <Cl_dprep_controller+0x127c>)
   9c80e:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   9c810:	e006      	b.n	9c820 <Cl_dprep_controller+0x11b0>
						default:
						break;
   9c812:	bf00      	nop
   9c814:	e2c8      	b.n	9cda8 <Cl_dprep_controller+0x1738>
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
								}
							}
						break;
   9c816:	bf00      	nop
   9c818:	e2c6      	b.n	9cda8 <Cl_dprep_controller+0x1738>
						 
						 
						 
								 }
	
						break;
   9c81a:	bf00      	nop
   9c81c:	e2c4      	b.n	9cda8 <Cl_dprep_controller+0x1738>
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
											}
						break;
   9c81e:	bf00      	nop
					#endif
						break;
						default:
						break;
					}
		break;
   9c820:	e2c2      	b.n	9cda8 <Cl_dprep_controller+0x1738>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   9c822:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9c826:	3b01      	subs	r3, #1
   9c828:	2b19      	cmp	r3, #25
   9c82a:	f200 82ba 	bhi.w	9cda2 <Cl_dprep_controller+0x1732>
   9c82e:	a201      	add	r2, pc, #4	; (adr r2, 9c834 <Cl_dprep_controller+0x11c4>)
   9c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c834:	0009c9eb 	.word	0x0009c9eb
   9c838:	0009cda3 	.word	0x0009cda3
   9c83c:	0009cda3 	.word	0x0009cda3
   9c840:	0009cda3 	.word	0x0009cda3
   9c844:	0009cda3 	.word	0x0009cda3
   9c848:	0009cda3 	.word	0x0009cda3
   9c84c:	0009cda3 	.word	0x0009cda3
   9c850:	0009cda3 	.word	0x0009cda3
   9c854:	0009cda3 	.word	0x0009cda3
   9c858:	0009cda3 	.word	0x0009cda3
   9c85c:	0009cda3 	.word	0x0009cda3
   9c860:	0009cda3 	.word	0x0009cda3
   9c864:	0009cda3 	.word	0x0009cda3
   9c868:	0009c9bd 	.word	0x0009c9bd
   9c86c:	0009cda3 	.word	0x0009cda3
   9c870:	0009cda3 	.word	0x0009cda3
   9c874:	0009cda3 	.word	0x0009cda3
   9c878:	0009cda3 	.word	0x0009cda3
   9c87c:	0009ca01 	.word	0x0009ca01
   9c880:	0009cda3 	.word	0x0009cda3
   9c884:	0009ca01 	.word	0x0009ca01
   9c888:	0009c8f1 	.word	0x0009c8f1
   9c88c:	0009c89d 	.word	0x0009c89d
   9c890:	0009cda3 	.word	0x0009cda3
   9c894:	0009c9d1 	.word	0x0009c9d1
   9c898:	0009c9dd 	.word	0x0009c9dd
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9c89c:	4b0e      	ldr	r3, [pc, #56]	; (9c8d8 <Cl_dprep_controller+0x1268>)
   9c89e:	4798      	blx	r3
						break;
   9c8a0:	e0b1      	b.n	9ca06 <Cl_dprep_controller+0x1396>
   9c8a2:	bf00      	nop
   9c8a4:	20072f88 	.word	0x20072f88
   9c8a8:	0009926d 	.word	0x0009926d
   9c8ac:	00097d7d 	.word	0x00097d7d
   9c8b0:	0009e0cd 	.word	0x0009e0cd
   9c8b4:	0009ee11 	.word	0x0009ee11
   9c8b8:	00097681 	.word	0x00097681
   9c8bc:	00097899 	.word	0x00097899
   9c8c0:	00083095 	.word	0x00083095
   9c8c4:	0009d0a5 	.word	0x0009d0a5
   9c8c8:	00087c95 	.word	0x00087c95
   9c8cc:	000977ad 	.word	0x000977ad
   9c8d0:	00097799 	.word	0x00097799
   9c8d4:	000977d5 	.word	0x000977d5
   9c8d8:	0009df39 	.word	0x0009df39
   9c8dc:	0008d61d 	.word	0x0008d61d
   9c8e0:	000a33a1 	.word	0x000a33a1
   9c8e4:	000a35b9 	.word	0x000a35b9
   9c8e8:	42c80000 	.word	0x42c80000
   9c8ec:	2007280e 	.word	0x2007280e
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   9c8f0:	f04f 0300 	mov.w	r3, #0
   9c8f4:	673b      	str	r3, [r7, #112]	; 0x70
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9c8f6:	f107 0322 	add.w	r3, r7, #34	; 0x22
   9c8fa:	4619      	mov	r1, r3
   9c8fc:	2014      	movs	r0, #20
   9c8fe:	4b9a      	ldr	r3, [pc, #616]	; (9cb68 <Cl_dprep_controller+0x14f8>)
   9c900:	4798      	blx	r3
// 						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// //						temp_temp3 = temp_temp3 - 3.1 - 2;										// sensor offset
						temp3_cel = (float)temp_temp3;
   9c902:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9c904:	4b99      	ldr	r3, [pc, #612]	; (9cb6c <Cl_dprep_controller+0x14fc>)
   9c906:	4610      	mov	r0, r2
   9c908:	4798      	blx	r3
   9c90a:	4603      	mov	r3, r0
   9c90c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						
							Cl_Dprep_filling_secondscounter++;
   9c910:	4b97      	ldr	r3, [pc, #604]	; (9cb70 <Cl_dprep_controller+0x1500>)
   9c912:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c916:	b29b      	uxth	r3, r3
   9c918:	3301      	adds	r3, #1
   9c91a:	b29b      	uxth	r3, r3
   9c91c:	b21a      	sxth	r2, r3
   9c91e:	4b94      	ldr	r3, [pc, #592]	; (9cb70 <Cl_dprep_controller+0x1500>)
   9c920:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9c922:	4b94      	ldr	r3, [pc, #592]	; (9cb74 <Cl_dprep_controller+0x1504>)
   9c924:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c928:	b29b      	uxth	r3, r3
   9c92a:	3301      	adds	r3, #1
   9c92c:	b29b      	uxth	r3, r3
   9c92e:	b21a      	sxth	r2, r3
   9c930:	4b90      	ldr	r3, [pc, #576]	; (9cb74 <Cl_dprep_controller+0x1504>)
   9c932:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9c934:	4b8f      	ldr	r3, [pc, #572]	; (9cb74 <Cl_dprep_controller+0x1504>)
   9c936:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c93a:	2b1e      	cmp	r3, #30
   9c93c:	d114      	bne.n	9c968 <Cl_dprep_controller+0x12f8>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9c93e:	2101      	movs	r1, #1
   9c940:	200c      	movs	r0, #12
   9c942:	4b8d      	ldr	r3, [pc, #564]	; (9cb78 <Cl_dprep_controller+0x1508>)
   9c944:	4798      	blx	r3
   9c946:	4603      	mov	r3, r0
   9c948:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9c94c:	2101      	movs	r1, #1
   9c94e:	200d      	movs	r0, #13
   9c950:	4b89      	ldr	r3, [pc, #548]	; (9cb78 <Cl_dprep_controller+0x1508>)
   9c952:	4798      	blx	r3
   9c954:	4603      	mov	r3, r0
   9c956:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9c95a:	2101      	movs	r1, #1
   9c95c:	200e      	movs	r0, #14
   9c95e:	4b86      	ldr	r3, [pc, #536]	; (9cb78 <Cl_dprep_controller+0x1508>)
   9c960:	4798      	blx	r3
   9c962:	4603      	mov	r3, r0
   9c964:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   9c968:	4b82      	ldr	r3, [pc, #520]	; (9cb74 <Cl_dprep_controller+0x1504>)
   9c96a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c96e:	2b3c      	cmp	r3, #60	; 0x3c
   9c970:	d101      	bne.n	9c976 <Cl_dprep_controller+0x1306>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9c972:	4b82      	ldr	r3, [pc, #520]	; (9cb7c <Cl_dprep_controller+0x150c>)
   9c974:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9c976:	2003      	movs	r0, #3
   9c978:	4b81      	ldr	r3, [pc, #516]	; (9cb80 <Cl_dprep_controller+0x1510>)
   9c97a:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9c97c:	4b81      	ldr	r3, [pc, #516]	; (9cb84 <Cl_dprep_controller+0x1514>)
   9c97e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9c982:	2b00      	cmp	r3, #0
   9c984:	dd3e      	ble.n	9ca04 <Cl_dprep_controller+0x1394>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9c986:	4b7f      	ldr	r3, [pc, #508]	; (9cb84 <Cl_dprep_controller+0x1514>)
   9c988:	2200      	movs	r2, #0
   9c98a:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   9c98c:	2101      	movs	r1, #1
   9c98e:	2009      	movs	r0, #9
   9c990:	4b7d      	ldr	r3, [pc, #500]	; (9cb88 <Cl_dprep_controller+0x1518>)
   9c992:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   9c994:	4b7d      	ldr	r3, [pc, #500]	; (9cb8c <Cl_dprep_controller+0x151c>)
   9c996:	695b      	ldr	r3, [r3, #20]
   9c998:	66fb      	str	r3, [r7, #108]	; 0x6c
								 Cl_Uint16Type potvalue=0;
   9c99a:	2300      	movs	r3, #0
   9c99c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   9c9a0:	4b7b      	ldr	r3, [pc, #492]	; (9cb90 <Cl_dprep_controller+0x1520>)
   9c9a2:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   9c9a4:	4b7b      	ldr	r3, [pc, #492]	; (9cb94 <Cl_dprep_controller+0x1524>)
   9c9a6:	4798      	blx	r3
   9c9a8:	4603      	mov	r3, r0
   9c9aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9c9ae:	4b7a      	ldr	r3, [pc, #488]	; (9cb98 <Cl_dprep_controller+0x1528>)
   9c9b0:	2201      	movs	r2, #1
   9c9b2:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   9c9b4:	4b79      	ldr	r3, [pc, #484]	; (9cb9c <Cl_dprep_controller+0x152c>)
   9c9b6:	2208      	movs	r2, #8
   9c9b8:	701a      	strb	r2, [r3, #0]
							}
						break;
   9c9ba:	e023      	b.n	9ca04 <Cl_dprep_controller+0x1394>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_dprep_StopMixing();
   9c9bc:	4b78      	ldr	r3, [pc, #480]	; (9cba0 <Cl_dprep_controller+0x1530>)
   9c9be:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9c9c0:	2100      	movs	r1, #0
   9c9c2:	2009      	movs	r0, #9
   9c9c4:	4b70      	ldr	r3, [pc, #448]	; (9cb88 <Cl_dprep_controller+0x1518>)
   9c9c6:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   9c9c8:	4b74      	ldr	r3, [pc, #464]	; (9cb9c <Cl_dprep_controller+0x152c>)
   9c9ca:	2207      	movs	r2, #7
   9c9cc:	701a      	strb	r2, [r3, #0]
						break;
   9c9ce:	e01a      	b.n	9ca06 <Cl_dprep_controller+0x1396>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9c9d0:	4b74      	ldr	r3, [pc, #464]	; (9cba4 <Cl_dprep_controller+0x1534>)
   9c9d2:	4798      	blx	r3
   9c9d4:	4603      	mov	r3, r0
   9c9d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9c9da:	e014      	b.n	9ca06 <Cl_dprep_controller+0x1396>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c9dc:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9c9e0:	4619      	mov	r1, r3
   9c9e2:	203c      	movs	r0, #60	; 0x3c
   9c9e4:	4b70      	ldr	r3, [pc, #448]	; (9cba8 <Cl_dprep_controller+0x1538>)
   9c9e6:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   9c9e8:	e00d      	b.n	9ca06 <Cl_dprep_controller+0x1396>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9c9ea:	4b70      	ldr	r3, [pc, #448]	; (9cbac <Cl_dprep_controller+0x153c>)
   9c9ec:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9c9ee:	4b70      	ldr	r3, [pc, #448]	; (9cbb0 <Cl_dprep_controller+0x1540>)
   9c9f0:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9c9f2:	4b70      	ldr	r3, [pc, #448]	; (9cbb4 <Cl_dprep_controller+0x1544>)
   9c9f4:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9c9f6:	4b70      	ldr	r3, [pc, #448]	; (9cbb8 <Cl_dprep_controller+0x1548>)
   9c9f8:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   9c9fa:	4b70      	ldr	r3, [pc, #448]	; (9cbbc <Cl_dprep_controller+0x154c>)
   9c9fc:	4798      	blx	r3
						break;
   9c9fe:	e002      	b.n	9ca06 <Cl_dprep_controller+0x1396>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   9ca00:	bf00      	nop
   9ca02:	e1ce      	b.n	9cda2 <Cl_dprep_controller+0x1732>
								sv_cntrl_enable_bypass();
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
   9ca04:	bf00      	nop
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9ca06:	e1cc      	b.n	9cda2 <Cl_dprep_controller+0x1732>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   9ca08:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9ca0c:	2b0d      	cmp	r3, #13
   9ca0e:	d000      	beq.n	9ca12 <Cl_dprep_controller+0x13a2>
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   9ca10:	e006      	b.n	9ca20 <Cl_dprep_controller+0x13b0>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
							{
		
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9ca12:	4b6b      	ldr	r3, [pc, #428]	; (9cbc0 <Cl_dprep_controller+0x1550>)
   9ca14:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9ca16:	4b6b      	ldr	r3, [pc, #428]	; (9cbc4 <Cl_dprep_controller+0x1554>)
   9ca18:	4798      	blx	r3
								sv_prop_startmixing();
   9ca1a:	4b6b      	ldr	r3, [pc, #428]	; (9cbc8 <Cl_dprep_controller+0x1558>)
   9ca1c:	4798      	blx	r3
								 break;
   9ca1e:	bf00      	nop
								 default:break;
							}
		break;
   9ca20:	e1c2      	b.n	9cda8 <Cl_dprep_controller+0x1738>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   9ca22:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9ca26:	3b16      	subs	r3, #22
   9ca28:	2b06      	cmp	r3, #6
   9ca2a:	f200 81bc 	bhi.w	9cda6 <Cl_dprep_controller+0x1736>
   9ca2e:	a201      	add	r2, pc, #4	; (adr r2, 9ca34 <Cl_dprep_controller+0x13c4>)
   9ca30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ca34:	0009ca9d 	.word	0x0009ca9d
   9ca38:	0009ca97 	.word	0x0009ca97
   9ca3c:	0009cda7 	.word	0x0009cda7
   9ca40:	0009ca5f 	.word	0x0009ca5f
   9ca44:	0009ca51 	.word	0x0009ca51
   9ca48:	0009ca7b 	.word	0x0009ca7b
   9ca4c:	0009ca6b 	.word	0x0009ca6b
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9ca50:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9ca54:	4619      	mov	r1, r3
   9ca56:	203c      	movs	r0, #60	; 0x3c
   9ca58:	4b53      	ldr	r3, [pc, #332]	; (9cba8 <Cl_dprep_controller+0x1538>)
   9ca5a:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   9ca5c:	e082      	b.n	9cb64 <Cl_dprep_controller+0x14f4>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9ca5e:	4b51      	ldr	r3, [pc, #324]	; (9cba4 <Cl_dprep_controller+0x1534>)
   9ca60:	4798      	blx	r3
   9ca62:	4603      	mov	r3, r0
   9ca64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				break;
   9ca68:	e07c      	b.n	9cb64 <Cl_dprep_controller+0x14f4>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9ca6a:	2100      	movs	r1, #0
   9ca6c:	2004      	movs	r0, #4
   9ca6e:	4b57      	ldr	r3, [pc, #348]	; (9cbcc <Cl_dprep_controller+0x155c>)
   9ca70:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   9ca72:	4b57      	ldr	r3, [pc, #348]	; (9cbd0 <Cl_dprep_controller+0x1560>)
   9ca74:	2201      	movs	r2, #1
   9ca76:	701a      	strb	r2, [r3, #0]
				break;
   9ca78:	e074      	b.n	9cb64 <Cl_dprep_controller+0x14f4>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9ca7a:	4b55      	ldr	r3, [pc, #340]	; (9cbd0 <Cl_dprep_controller+0x1560>)
   9ca7c:	781b      	ldrb	r3, [r3, #0]
   9ca7e:	2b02      	cmp	r3, #2
   9ca80:	d16d      	bne.n	9cb5e <Cl_dprep_controller+0x14ee>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9ca82:	204c      	movs	r0, #76	; 0x4c
   9ca84:	4b53      	ldr	r3, [pc, #332]	; (9cbd4 <Cl_dprep_controller+0x1564>)
   9ca86:	4798      	blx	r3
   9ca88:	4603      	mov	r3, r0
   9ca8a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   9ca8e:	4b43      	ldr	r3, [pc, #268]	; (9cb9c <Cl_dprep_controller+0x152c>)
   9ca90:	2209      	movs	r2, #9
   9ca92:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   9ca94:	e063      	b.n	9cb5e <Cl_dprep_controller+0x14ee>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   9ca96:	4b48      	ldr	r3, [pc, #288]	; (9cbb8 <Cl_dprep_controller+0x1548>)
   9ca98:	4798      	blx	r3
				break;
   9ca9a:	e063      	b.n	9cb64 <Cl_dprep_controller+0x14f4>
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   9ca9c:	4b4c      	ldr	r3, [pc, #304]	; (9cbd0 <Cl_dprep_controller+0x1560>)
   9ca9e:	781b      	ldrb	r3, [r3, #0]
   9caa0:	2b01      	cmp	r3, #1
   9caa2:	d13d      	bne.n	9cb20 <Cl_dprep_controller+0x14b0>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9caa4:	f107 0320 	add.w	r3, r7, #32
   9caa8:	4619      	mov	r1, r3
   9caaa:	200a      	movs	r0, #10
   9caac:	4b2e      	ldr	r3, [pc, #184]	; (9cb68 <Cl_dprep_controller+0x14f8>)
   9caae:	4798      	blx	r3
				
					if(temp == 1)
   9cab0:	8c3b      	ldrh	r3, [r7, #32]
   9cab2:	2b01      	cmp	r3, #1
   9cab4:	d134      	bne.n	9cb20 <Cl_dprep_controller+0x14b0>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9cab6:	2205      	movs	r2, #5
   9cab8:	4947      	ldr	r1, [pc, #284]	; (9cbd8 <Cl_dprep_controller+0x1568>)
   9caba:	2018      	movs	r0, #24
   9cabc:	4b47      	ldr	r3, [pc, #284]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9cabe:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   9cac0:	2200      	movs	r2, #0
   9cac2:	2100      	movs	r1, #0
   9cac4:	2027      	movs	r0, #39	; 0x27
   9cac6:	4b45      	ldr	r3, [pc, #276]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9cac8:	4798      	blx	r3
   9caca:	4603      	mov	r3, r0
   9cacc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   9cad0:	4b3f      	ldr	r3, [pc, #252]	; (9cbd0 <Cl_dprep_controller+0x1560>)
   9cad2:	2202      	movs	r2, #2
   9cad4:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   9cad6:	4b2d      	ldr	r3, [pc, #180]	; (9cb8c <Cl_dprep_controller+0x151c>)
   9cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   9cada:	60bb      	str	r3, [r7, #8]
										hep_calibration(temp);
   9cadc:	68bb      	ldr	r3, [r7, #8]
   9cade:	4618      	mov	r0, r3
   9cae0:	4b3f      	ldr	r3, [pc, #252]	; (9cbe0 <Cl_dprep_controller+0x1570>)
   9cae2:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9cae4:	f107 0308 	add.w	r3, r7, #8
   9cae8:	2202      	movs	r2, #2
   9caea:	4619      	mov	r1, r3
   9caec:	2019      	movs	r0, #25
   9caee:	4b3b      	ldr	r3, [pc, #236]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9caf0:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   9caf2:	2202      	movs	r2, #2
   9caf4:	493b      	ldr	r1, [pc, #236]	; (9cbe4 <Cl_dprep_controller+0x1574>)
   9caf6:	2019      	movs	r0, #25
   9caf8:	4b38      	ldr	r3, [pc, #224]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9cafa:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   9cafc:	4b39      	ldr	r3, [pc, #228]	; (9cbe4 <Cl_dprep_controller+0x1574>)
   9cafe:	681b      	ldr	r3, [r3, #0]
   9cb00:	4619      	mov	r1, r3
   9cb02:	2006      	movs	r0, #6
   9cb04:	4b38      	ldr	r3, [pc, #224]	; (9cbe8 <Cl_dprep_controller+0x1578>)
   9cb06:	4798      	blx	r3
										cl_wait(100);
   9cb08:	2064      	movs	r0, #100	; 0x64
   9cb0a:	4b38      	ldr	r3, [pc, #224]	; (9cbec <Cl_dprep_controller+0x157c>)
   9cb0c:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9cb0e:	2100      	movs	r1, #0
   9cb10:	200a      	movs	r0, #10
   9cb12:	4b35      	ldr	r3, [pc, #212]	; (9cbe8 <Cl_dprep_controller+0x1578>)
   9cb14:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   9cb16:	2207      	movs	r2, #7
   9cb18:	4935      	ldr	r1, [pc, #212]	; (9cbf0 <Cl_dprep_controller+0x1580>)
   9cb1a:	2018      	movs	r0, #24
   9cb1c:	4b2f      	ldr	r3, [pc, #188]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9cb1e:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9cb20:	4b2b      	ldr	r3, [pc, #172]	; (9cbd0 <Cl_dprep_controller+0x1560>)
   9cb22:	781b      	ldrb	r3, [r3, #0]
   9cb24:	2b02      	cmp	r3, #2
   9cb26:	d11c      	bne.n	9cb62 <Cl_dprep_controller+0x14f2>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   9cb28:	4b32      	ldr	r3, [pc, #200]	; (9cbf4 <Cl_dprep_controller+0x1584>)
   9cb2a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9cb2e:	b29b      	uxth	r3, r3
   9cb30:	3301      	adds	r3, #1
   9cb32:	b29b      	uxth	r3, r3
   9cb34:	b21a      	sxth	r2, r3
   9cb36:	4b2f      	ldr	r3, [pc, #188]	; (9cbf4 <Cl_dprep_controller+0x1584>)
   9cb38:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   9cb3a:	4b2e      	ldr	r3, [pc, #184]	; (9cbf4 <Cl_dprep_controller+0x1584>)
   9cb3c:	f9b3 3000 	ldrsh.w	r3, [r3]
   9cb40:	2b3c      	cmp	r3, #60	; 0x3c
   9cb42:	d10e      	bne.n	9cb62 <Cl_dprep_controller+0x14f2>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   9cb44:	4b2b      	ldr	r3, [pc, #172]	; (9cbf4 <Cl_dprep_controller+0x1584>)
   9cb46:	2200      	movs	r2, #0
   9cb48:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   9cb4a:	2207      	movs	r2, #7
   9cb4c:	492a      	ldr	r1, [pc, #168]	; (9cbf8 <Cl_dprep_controller+0x1588>)
   9cb4e:	2018      	movs	r0, #24
   9cb50:	4b22      	ldr	r3, [pc, #136]	; (9cbdc <Cl_dprep_controller+0x156c>)
   9cb52:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9cb54:	2100      	movs	r1, #0
   9cb56:	2009      	movs	r0, #9
   9cb58:	4b23      	ldr	r3, [pc, #140]	; (9cbe8 <Cl_dprep_controller+0x1578>)
   9cb5a:	4798      	blx	r3
					}
					}
				break;
   9cb5c:	e001      	b.n	9cb62 <Cl_dprep_controller+0x14f2>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
				}
				
				break;
   9cb5e:	bf00      	nop
   9cb60:	e121      	b.n	9cda6 <Cl_dprep_controller+0x1736>
						Cl_Dprep_hepbolus_secondscounter = 0;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
					}
					}
				break;
   9cb62:	bf00      	nop
			}
		
		break;
   9cb64:	e11f      	b.n	9cda6 <Cl_dprep_controller+0x1736>
   9cb66:	bf00      	nop
   9cb68:	0008d61d 	.word	0x0008d61d
   9cb6c:	000a33a1 	.word	0x000a33a1
   9cb70:	2007280e 	.word	0x2007280e
   9cb74:	2007281a 	.word	0x2007281a
   9cb78:	00082f5d 	.word	0x00082f5d
   9cb7c:	0009d765 	.word	0x0009d765
   9cb80:	0009d7c1 	.word	0x0009d7c1
   9cb84:	2007281c 	.word	0x2007281c
   9cb88:	00087c95 	.word	0x00087c95
   9cb8c:	20073194 	.word	0x20073194
   9cb90:	0009769d 	.word	0x0009769d
   9cb94:	0009d021 	.word	0x0009d021
   9cb98:	20072830 	.word	0x20072830
   9cb9c:	2007282f 	.word	0x2007282f
   9cba0:	0009f1a5 	.word	0x0009f1a5
   9cba4:	0009d0a5 	.word	0x0009d0a5
   9cba8:	00083095 	.word	0x00083095
   9cbac:	000977ad 	.word	0x000977ad
   9cbb0:	00097799 	.word	0x00097799
   9cbb4:	000977d5 	.word	0x000977d5
   9cbb8:	0009df39 	.word	0x0009df39
   9cbbc:	000976c5 	.word	0x000976c5
   9cbc0:	0009ee11 	.word	0x0009ee11
   9cbc4:	00097681 	.word	0x00097681
   9cbc8:	00097899 	.word	0x00097899
   9cbcc:	00091a75 	.word	0x00091a75
   9cbd0:	2007282e 	.word	0x2007282e
   9cbd4:	0008a479 	.word	0x0008a479
   9cbd8:	000a5900 	.word	0x000a5900
   9cbdc:	0009926d 	.word	0x0009926d
   9cbe0:	00083fed 	.word	0x00083fed
   9cbe4:	20072d68 	.word	0x20072d68
   9cbe8:	00092169 	.word	0x00092169
   9cbec:	000918fd 	.word	0x000918fd
   9cbf0:	000a5908 	.word	0x000a5908
   9cbf4:	2007280c 	.word	0x2007280c
   9cbf8:	000a5910 	.word	0x000a5910
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   9cbfc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   9cc00:	3b03      	subs	r3, #3
   9cc02:	2b17      	cmp	r3, #23
   9cc04:	f200 80c1 	bhi.w	9cd8a <Cl_dprep_controller+0x171a>
   9cc08:	a201      	add	r2, pc, #4	; (adr r2, 9cc10 <Cl_dprep_controller+0x15a0>)
   9cc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cc0e:	bf00      	nop
   9cc10:	0009cd23 	.word	0x0009cd23
   9cc14:	0009cca9 	.word	0x0009cca9
   9cc18:	0009cd8b 	.word	0x0009cd8b
   9cc1c:	0009cd8b 	.word	0x0009cd8b
   9cc20:	0009cd8b 	.word	0x0009cd8b
   9cc24:	0009cd8b 	.word	0x0009cd8b
   9cc28:	0009cd8b 	.word	0x0009cd8b
   9cc2c:	0009cd8b 	.word	0x0009cd8b
   9cc30:	0009cd8b 	.word	0x0009cd8b
   9cc34:	0009cd8b 	.word	0x0009cd8b
   9cc38:	0009cd8b 	.word	0x0009cd8b
   9cc3c:	0009cd8b 	.word	0x0009cd8b
   9cc40:	0009cd8b 	.word	0x0009cd8b
   9cc44:	0009cd8b 	.word	0x0009cd8b
   9cc48:	0009cd8b 	.word	0x0009cd8b
   9cc4c:	0009cd8b 	.word	0x0009cd8b
   9cc50:	0009cd8b 	.word	0x0009cd8b
   9cc54:	0009cd8b 	.word	0x0009cd8b
   9cc58:	0009cd8b 	.word	0x0009cd8b
   9cc5c:	0009cc85 	.word	0x0009cc85
   9cc60:	0009cc7f 	.word	0x0009cc7f
   9cc64:	0009cd8b 	.word	0x0009cd8b
   9cc68:	0009cd7f 	.word	0x0009cd7f
   9cc6c:	0009cc71 	.word	0x0009cc71
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9cc70:	f107 0327 	add.w	r3, r7, #39	; 0x27
   9cc74:	4619      	mov	r1, r3
   9cc76:	203c      	movs	r0, #60	; 0x3c
   9cc78:	4b4e      	ldr	r3, [pc, #312]	; (9cdb4 <Cl_dprep_controller+0x1744>)
   9cc7a:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   9cc7c:	e08c      	b.n	9cd98 <Cl_dprep_controller+0x1728>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   9cc7e:	4b4e      	ldr	r3, [pc, #312]	; (9cdb8 <Cl_dprep_controller+0x1748>)
   9cc80:	4798      	blx	r3
					break;
   9cc82:	e089      	b.n	9cd98 <Cl_dprep_controller+0x1728>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9cc84:	2004      	movs	r0, #4
   9cc86:	4b4d      	ldr	r3, [pc, #308]	; (9cdbc <Cl_dprep_controller+0x174c>)
   9cc88:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9cc8a:	f107 0320 	add.w	r3, r7, #32
   9cc8e:	4619      	mov	r1, r3
   9cc90:	200a      	movs	r0, #10
   9cc92:	4b4b      	ldr	r3, [pc, #300]	; (9cdc0 <Cl_dprep_controller+0x1750>)
   9cc94:	4798      	blx	r3
					if( temp == 0)
   9cc96:	8c3b      	ldrh	r3, [r7, #32]
   9cc98:	2b00      	cmp	r3, #0
   9cc9a:	d178      	bne.n	9cd8e <Cl_dprep_controller+0x171e>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9cc9c:	2205      	movs	r2, #5
   9cc9e:	4949      	ldr	r1, [pc, #292]	; (9cdc4 <Cl_dprep_controller+0x1754>)
   9cca0:	2018      	movs	r0, #24
   9cca2:	4b49      	ldr	r3, [pc, #292]	; (9cdc8 <Cl_dprep_controller+0x1758>)
   9cca4:	4798      	blx	r3
					}
					break;
   9cca6:	e072      	b.n	9cd8e <Cl_dprep_controller+0x171e>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9cca8:	4b48      	ldr	r3, [pc, #288]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9ccaa:	7e1b      	ldrb	r3, [r3, #24]
   9ccac:	2b00      	cmp	r3, #0
   9ccae:	d070      	beq.n	9cd92 <Cl_dprep_controller+0x1722>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9ccb0:	4b46      	ldr	r3, [pc, #280]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9ccb2:	791b      	ldrb	r3, [r3, #4]
   9ccb4:	2b03      	cmp	r3, #3
   9ccb6:	d002      	beq.n	9ccbe <Cl_dprep_controller+0x164e>
   9ccb8:	2b04      	cmp	r3, #4
   9ccba:	d015      	beq.n	9cce8 <Cl_dprep_controller+0x1678>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9ccbc:	e030      	b.n	9cd20 <Cl_dprep_controller+0x16b0>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9ccbe:	2316      	movs	r3, #22
   9ccc0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9ccc4:	2303      	movs	r3, #3
   9ccc6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									dataarray[1] = 0;
   9ccca:	2300      	movs	r3, #0
   9cccc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ccd0:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9ccd4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9ccd8:	2202      	movs	r2, #2
   9ccda:	4618      	mov	r0, r3
   9ccdc:	4b3a      	ldr	r3, [pc, #232]	; (9cdc8 <Cl_dprep_controller+0x1758>)
   9ccde:	4798      	blx	r3
   9cce0:	4603      	mov	r3, r0
   9cce2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9cce6:	e01b      	b.n	9cd20 <Cl_dprep_controller+0x16b0>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9cce8:	2316      	movs	r3, #22
   9ccea:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ccee:	2304      	movs	r3, #4
   9ccf0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ccf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   9ccf8:	3301      	adds	r3, #1
   9ccfa:	4619      	mov	r1, r3
   9ccfc:	2004      	movs	r0, #4
   9ccfe:	4b34      	ldr	r3, [pc, #208]	; (9cdd0 <Cl_dprep_controller+0x1760>)
   9cd00:	4798      	blx	r3
   9cd02:	4603      	mov	r3, r0
   9cd04:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9cd08:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9cd0c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   9cd10:	2202      	movs	r2, #2
   9cd12:	4618      	mov	r0, r3
   9cd14:	4b2c      	ldr	r3, [pc, #176]	; (9cdc8 <Cl_dprep_controller+0x1758>)
   9cd16:	4798      	blx	r3
   9cd18:	4603      	mov	r3, r0
   9cd1a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
									break;
   9cd1e:	bf00      	nop
									default:break;
								}
							}
				
						break;
   9cd20:	e037      	b.n	9cd92 <Cl_dprep_controller+0x1722>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9cd22:	4b2a      	ldr	r3, [pc, #168]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9cd24:	7e1b      	ldrb	r3, [r3, #24]
   9cd26:	2b00      	cmp	r3, #0
   9cd28:	d035      	beq.n	9cd96 <Cl_dprep_controller+0x1726>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9cd2a:	4b28      	ldr	r3, [pc, #160]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9cd2c:	791b      	ldrb	r3, [r3, #4]
   9cd2e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9cd32:	2300      	movs	r3, #0
   9cd34:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
   9cd38:	e011      	b.n	9cd5e <Cl_dprep_controller+0x16ee>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9cd3a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
   9cd3e:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
   9cd42:	3201      	adds	r2, #1
   9cd44:	4921      	ldr	r1, [pc, #132]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9cd46:	440a      	add	r2, r1
   9cd48:	7912      	ldrb	r2, [r2, #4]
   9cd4a:	f107 0190 	add.w	r1, r7, #144	; 0x90
   9cd4e:	440b      	add	r3, r1
   9cd50:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9cd54:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
   9cd58:	3301      	adds	r3, #1
   9cd5a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
   9cd5e:	4b1b      	ldr	r3, [pc, #108]	; (9cdcc <Cl_dprep_controller+0x175c>)
   9cd60:	78db      	ldrb	r3, [r3, #3]
   9cd62:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
   9cd66:	429a      	cmp	r2, r3
   9cd68:	d3e7      	bcc.n	9cd3a <Cl_dprep_controller+0x16ca>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9cd6a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
   9cd6e:	f897 0069 	ldrb.w	r0, [r7, #105]	; 0x69
   9cd72:	f107 0228 	add.w	r2, r7, #40	; 0x28
   9cd76:	ca06      	ldmia	r2, {r1, r2}
   9cd78:	4c16      	ldr	r4, [pc, #88]	; (9cdd4 <Cl_dprep_controller+0x1764>)
   9cd7a:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9cd7c:	e00b      	b.n	9cd96 <Cl_dprep_controller+0x1726>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9cd7e:	4b16      	ldr	r3, [pc, #88]	; (9cdd8 <Cl_dprep_controller+0x1768>)
   9cd80:	4798      	blx	r3
   9cd82:	4603      	mov	r3, r0
   9cd84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						break;
   9cd88:	e006      	b.n	9cd98 <Cl_dprep_controller+0x1728>
					default:
					break;
   9cd8a:	bf00      	nop
   9cd8c:	e00c      	b.n	9cda8 <Cl_dprep_controller+0x1738>
					if( temp == 0)
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					}
					break;
   9cd8e:	bf00      	nop
   9cd90:	e00a      	b.n	9cda8 <Cl_dprep_controller+0x1738>
									break;
									default:break;
								}
							}
				
						break;
   9cd92:	bf00      	nop
   9cd94:	e008      	b.n	9cda8 <Cl_dprep_controller+0x1738>
						 
						 
						 
								 }
	
						break;
   9cd96:	bf00      	nop
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
					default:
					break;
				}
		break;
   9cd98:	e006      	b.n	9cda8 <Cl_dprep_controller+0x1738>
			}
			
			break;

		}
		break;
   9cd9a:	bf00      	nop
   9cd9c:	e004      	b.n	9cda8 <Cl_dprep_controller+0x1738>
			
		
		}
		}
		
		break;
   9cd9e:	bf00      	nop
   9cda0:	e002      	b.n	9cda8 <Cl_dprep_controller+0x1738>
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9cda2:	bf00      	nop
   9cda4:	e000      	b.n	9cda8 <Cl_dprep_controller+0x1738>
					}
					}
				break;
			}
		
		break;
   9cda6:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   9cda8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
   9cdac:	4618      	mov	r0, r3
   9cdae:	3794      	adds	r7, #148	; 0x94
   9cdb0:	46bd      	mov	sp, r7
   9cdb2:	bd90      	pop	{r4, r7, pc}
   9cdb4:	00083095 	.word	0x00083095
   9cdb8:	0009df39 	.word	0x0009df39
   9cdbc:	0009d7c1 	.word	0x0009d7c1
   9cdc0:	0008d61d 	.word	0x0008d61d
   9cdc4:	000a5900 	.word	0x000a5900
   9cdc8:	0009926d 	.word	0x0009926d
   9cdcc:	20072f88 	.word	0x20072f88
   9cdd0:	00097d7d 	.word	0x00097d7d
   9cdd4:	0009e0cd 	.word	0x0009e0cd
   9cdd8:	0009d0a5 	.word	0x0009d0a5

0009cddc <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   9cddc:	b480      	push	{r7}
   9cdde:	b083      	sub	sp, #12
   9cde0:	af00      	add	r7, sp, #0
   9cde2:	4603      	mov	r3, r0
   9cde4:	6039      	str	r1, [r7, #0]
   9cde6:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   9cde8:	79fb      	ldrb	r3, [r7, #7]
   9cdea:	3b09      	subs	r3, #9
   9cdec:	2b43      	cmp	r3, #67	; 0x43
   9cdee:	f200 810f 	bhi.w	9d010 <cl_dprep_translatemacevent+0x234>
   9cdf2:	a201      	add	r2, pc, #4	; (adr r2, 9cdf8 <cl_dprep_translatemacevent+0x1c>)
   9cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cdf8:	0009cf11 	.word	0x0009cf11
   9cdfc:	0009cf19 	.word	0x0009cf19
   9ce00:	0009cf21 	.word	0x0009cf21
   9ce04:	0009cf29 	.word	0x0009cf29
   9ce08:	0009cf31 	.word	0x0009cf31
   9ce0c:	0009cf39 	.word	0x0009cf39
   9ce10:	0009cf49 	.word	0x0009cf49
   9ce14:	0009cf51 	.word	0x0009cf51
   9ce18:	0009cf41 	.word	0x0009cf41
   9ce1c:	0009cf59 	.word	0x0009cf59
   9ce20:	0009cf61 	.word	0x0009cf61
   9ce24:	0009cf69 	.word	0x0009cf69
   9ce28:	0009d009 	.word	0x0009d009
   9ce2c:	0009cf71 	.word	0x0009cf71
   9ce30:	0009d011 	.word	0x0009d011
   9ce34:	0009d011 	.word	0x0009d011
   9ce38:	0009d011 	.word	0x0009d011
   9ce3c:	0009d011 	.word	0x0009d011
   9ce40:	0009d011 	.word	0x0009d011
   9ce44:	0009cfc9 	.word	0x0009cfc9
   9ce48:	0009cfd9 	.word	0x0009cfd9
   9ce4c:	0009cfe1 	.word	0x0009cfe1
   9ce50:	0009cfe9 	.word	0x0009cfe9
   9ce54:	0009d011 	.word	0x0009d011
   9ce58:	0009cfd1 	.word	0x0009cfd1
   9ce5c:	0009d011 	.word	0x0009d011
   9ce60:	0009d011 	.word	0x0009d011
   9ce64:	0009d011 	.word	0x0009d011
   9ce68:	0009d011 	.word	0x0009d011
   9ce6c:	0009cff1 	.word	0x0009cff1
   9ce70:	0009cff9 	.word	0x0009cff9
   9ce74:	0009d001 	.word	0x0009d001
   9ce78:	0009cf09 	.word	0x0009cf09
   9ce7c:	0009d011 	.word	0x0009d011
   9ce80:	0009d011 	.word	0x0009d011
   9ce84:	0009d011 	.word	0x0009d011
   9ce88:	0009cfc1 	.word	0x0009cfc1
   9ce8c:	0009cfb9 	.word	0x0009cfb9
   9ce90:	0009d011 	.word	0x0009d011
   9ce94:	0009d011 	.word	0x0009d011
   9ce98:	0009d011 	.word	0x0009d011
   9ce9c:	0009d011 	.word	0x0009d011
   9cea0:	0009d011 	.word	0x0009d011
   9cea4:	0009d011 	.word	0x0009d011
   9cea8:	0009d011 	.word	0x0009d011
   9ceac:	0009d011 	.word	0x0009d011
   9ceb0:	0009d011 	.word	0x0009d011
   9ceb4:	0009cf79 	.word	0x0009cf79
   9ceb8:	0009cf81 	.word	0x0009cf81
   9cebc:	0009cf89 	.word	0x0009cf89
   9cec0:	0009cf91 	.word	0x0009cf91
   9cec4:	0009cf99 	.word	0x0009cf99
   9cec8:	0009cfa1 	.word	0x0009cfa1
   9cecc:	0009d011 	.word	0x0009d011
   9ced0:	0009d011 	.word	0x0009d011
   9ced4:	0009d011 	.word	0x0009d011
   9ced8:	0009d011 	.word	0x0009d011
   9cedc:	0009d011 	.word	0x0009d011
   9cee0:	0009d011 	.word	0x0009d011
   9cee4:	0009d011 	.word	0x0009d011
   9cee8:	0009d011 	.word	0x0009d011
   9ceec:	0009d011 	.word	0x0009d011
   9cef0:	0009d011 	.word	0x0009d011
   9cef4:	0009d011 	.word	0x0009d011
   9cef8:	0009cfa9 	.word	0x0009cfa9
   9cefc:	0009d011 	.word	0x0009d011
   9cf00:	0009d011 	.word	0x0009d011
   9cf04:	0009cfb1 	.word	0x0009cfb1
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   9cf08:	683b      	ldr	r3, [r7, #0]
   9cf0a:	2201      	movs	r2, #1
   9cf0c:	701a      	strb	r2, [r3, #0]
		break;
   9cf0e:	e080      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   9cf10:	683b      	ldr	r3, [r7, #0]
   9cf12:	2202      	movs	r2, #2
   9cf14:	701a      	strb	r2, [r3, #0]
		break;
   9cf16:	e07c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   9cf18:	683b      	ldr	r3, [r7, #0]
   9cf1a:	2205      	movs	r2, #5
   9cf1c:	701a      	strb	r2, [r3, #0]
		break;
   9cf1e:	e078      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   9cf20:	683b      	ldr	r3, [r7, #0]
   9cf22:	2206      	movs	r2, #6
   9cf24:	701a      	strb	r2, [r3, #0]
		break;
   9cf26:	e074      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   9cf28:	683b      	ldr	r3, [r7, #0]
   9cf2a:	2207      	movs	r2, #7
   9cf2c:	701a      	strb	r2, [r3, #0]
		break;
   9cf2e:	e070      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   9cf30:	683b      	ldr	r3, [r7, #0]
   9cf32:	2203      	movs	r2, #3
   9cf34:	701a      	strb	r2, [r3, #0]
		break;
   9cf36:	e06c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   9cf38:	683b      	ldr	r3, [r7, #0]
   9cf3a:	2204      	movs	r2, #4
   9cf3c:	701a      	strb	r2, [r3, #0]
		break;
   9cf3e:	e068      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   9cf40:	683b      	ldr	r3, [r7, #0]
   9cf42:	2208      	movs	r2, #8
   9cf44:	701a      	strb	r2, [r3, #0]
				break;
   9cf46:	e064      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   9cf48:	683b      	ldr	r3, [r7, #0]
   9cf4a:	220a      	movs	r2, #10
   9cf4c:	701a      	strb	r2, [r3, #0]
		break;
   9cf4e:	e060      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   9cf50:	683b      	ldr	r3, [r7, #0]
   9cf52:	220b      	movs	r2, #11
   9cf54:	701a      	strb	r2, [r3, #0]
		break;
   9cf56:	e05c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   9cf58:	683b      	ldr	r3, [r7, #0]
   9cf5a:	220c      	movs	r2, #12
   9cf5c:	701a      	strb	r2, [r3, #0]
		break;
   9cf5e:	e058      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9cf60:	683b      	ldr	r3, [r7, #0]
   9cf62:	220d      	movs	r2, #13
   9cf64:	701a      	strb	r2, [r3, #0]
		break;
   9cf66:	e054      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   9cf68:	683b      	ldr	r3, [r7, #0]
   9cf6a:	220e      	movs	r2, #14
   9cf6c:	701a      	strb	r2, [r3, #0]
		break;	
   9cf6e:	e050      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   9cf70:	683b      	ldr	r3, [r7, #0]
   9cf72:	2212      	movs	r2, #18
   9cf74:	701a      	strb	r2, [r3, #0]
		break;
   9cf76:	e04c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   9cf78:	683b      	ldr	r3, [r7, #0]
   9cf7a:	2213      	movs	r2, #19
   9cf7c:	701a      	strb	r2, [r3, #0]
		break;
   9cf7e:	e048      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   9cf80:	683b      	ldr	r3, [r7, #0]
   9cf82:	2214      	movs	r2, #20
   9cf84:	701a      	strb	r2, [r3, #0]
		break;
   9cf86:	e044      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   9cf88:	683b      	ldr	r3, [r7, #0]
   9cf8a:	2215      	movs	r2, #21
   9cf8c:	701a      	strb	r2, [r3, #0]
		break;
   9cf8e:	e040      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   9cf90:	683b      	ldr	r3, [r7, #0]
   9cf92:	2216      	movs	r2, #22
   9cf94:	701a      	strb	r2, [r3, #0]
		break;
   9cf96:	e03c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   9cf98:	683b      	ldr	r3, [r7, #0]
   9cf9a:	2217      	movs	r2, #23
   9cf9c:	701a      	strb	r2, [r3, #0]
		break;			 
   9cf9e:	e038      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   9cfa0:	683b      	ldr	r3, [r7, #0]
   9cfa2:	2218      	movs	r2, #24
   9cfa4:	701a      	strb	r2, [r3, #0]
		break;
   9cfa6:	e034      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   9cfa8:	683b      	ldr	r3, [r7, #0]
   9cfaa:	2210      	movs	r2, #16
   9cfac:	701a      	strb	r2, [r3, #0]
		break;
   9cfae:	e030      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   9cfb0:	683b      	ldr	r3, [r7, #0]
   9cfb2:	2211      	movs	r2, #17
   9cfb4:	701a      	strb	r2, [r3, #0]
		break;
   9cfb6:	e02c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   9cfb8:	683b      	ldr	r3, [r7, #0]
   9cfba:	2219      	movs	r2, #25
   9cfbc:	701a      	strb	r2, [r3, #0]
		break;
   9cfbe:	e028      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   9cfc0:	683b      	ldr	r3, [r7, #0]
   9cfc2:	221a      	movs	r2, #26
   9cfc4:	701a      	strb	r2, [r3, #0]
		break;
   9cfc6:	e024      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   9cfc8:	683b      	ldr	r3, [r7, #0]
   9cfca:	221b      	movs	r2, #27
   9cfcc:	701a      	strb	r2, [r3, #0]
		break;
   9cfce:	e020      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   9cfd0:	683b      	ldr	r3, [r7, #0]
   9cfd2:	221c      	movs	r2, #28
   9cfd4:	701a      	strb	r2, [r3, #0]
		break;
   9cfd6:	e01c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   9cfd8:	683b      	ldr	r3, [r7, #0]
   9cfda:	221d      	movs	r2, #29
   9cfdc:	701a      	strb	r2, [r3, #0]
		break;
   9cfde:	e018      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   9cfe0:	683b      	ldr	r3, [r7, #0]
   9cfe2:	221e      	movs	r2, #30
   9cfe4:	701a      	strb	r2, [r3, #0]
		break;
   9cfe6:	e014      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   9cfe8:	683b      	ldr	r3, [r7, #0]
   9cfea:	221f      	movs	r2, #31
   9cfec:	701a      	strb	r2, [r3, #0]
		break;
   9cfee:	e010      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   9cff0:	683b      	ldr	r3, [r7, #0]
   9cff2:	2221      	movs	r2, #33	; 0x21
   9cff4:	701a      	strb	r2, [r3, #0]
		break;
   9cff6:	e00c      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   9cff8:	683b      	ldr	r3, [r7, #0]
   9cffa:	2222      	movs	r2, #34	; 0x22
   9cffc:	701a      	strb	r2, [r3, #0]
		break;
   9cffe:	e008      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   9d000:	683b      	ldr	r3, [r7, #0]
   9d002:	2223      	movs	r2, #35	; 0x23
   9d004:	701a      	strb	r2, [r3, #0]
		break;
   9d006:	e004      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   9d008:	683b      	ldr	r3, [r7, #0]
   9d00a:	220f      	movs	r2, #15
   9d00c:	701a      	strb	r2, [r3, #0]
		break;
   9d00e:	e000      	b.n	9d012 <cl_dprep_translatemacevent+0x236>
		default:
		break;
   9d010:	bf00      	nop
	}
		 return CL_OK;
   9d012:	2300      	movs	r3, #0
}
   9d014:	4618      	mov	r0, r3
   9d016:	370c      	adds	r7, #12
   9d018:	46bd      	mov	sp, r7
   9d01a:	bc80      	pop	{r7}
   9d01c:	4770      	bx	lr
   9d01e:	bf00      	nop

0009d020 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   9d020:	b580      	push	{r7, lr}
   9d022:	b082      	sub	sp, #8
   9d024:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d026:	2300      	movs	r3, #0
   9d028:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   9d02a:	2300      	movs	r3, #0
   9d02c:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   9d02e:	4b15      	ldr	r3, [pc, #84]	; (9d084 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   9d030:	2200      	movs	r2, #0
   9d032:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   9d034:	4b14      	ldr	r3, [pc, #80]	; (9d088 <cl_dprep_notifydacandgotodpreptandby+0x68>)
   9d036:	2200      	movs	r2, #0
   9d038:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   9d03a:	4b14      	ldr	r3, [pc, #80]	; (9d08c <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   9d03c:	2200      	movs	r2, #0
   9d03e:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   9d040:	4b13      	ldr	r3, [pc, #76]	; (9d090 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   9d042:	2200      	movs	r2, #0
   9d044:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   9d046:	4b13      	ldr	r3, [pc, #76]	; (9d094 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   9d048:	2200      	movs	r2, #0
   9d04a:	601a      	str	r2, [r3, #0]
		data = 1;
   9d04c:	2301      	movs	r3, #1
   9d04e:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   9d050:	1dbb      	adds	r3, r7, #6
   9d052:	2201      	movs	r2, #1
   9d054:	4619      	mov	r1, r3
   9d056:	2002      	movs	r0, #2
   9d058:	4b0f      	ldr	r3, [pc, #60]	; (9d098 <cl_dprep_notifydacandgotodpreptandby+0x78>)
   9d05a:	4798      	blx	r3
   9d05c:	4603      	mov	r3, r0
   9d05e:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   9d060:	1dbb      	adds	r3, r7, #6
   9d062:	2200      	movs	r2, #0
   9d064:	4619      	mov	r1, r3
   9d066:	2010      	movs	r0, #16
   9d068:	4b0c      	ldr	r3, [pc, #48]	; (9d09c <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   9d06a:	4798      	blx	r3
   9d06c:	4603      	mov	r3, r0
   9d06e:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9d070:	204c      	movs	r0, #76	; 0x4c
   9d072:	4b0b      	ldr	r3, [pc, #44]	; (9d0a0 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   9d074:	4798      	blx	r3
   9d076:	4603      	mov	r3, r0
   9d078:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   9d07a:	79fb      	ldrb	r3, [r7, #7]
	}
   9d07c:	4618      	mov	r0, r3
   9d07e:	3708      	adds	r7, #8
   9d080:	46bd      	mov	sp, r7
   9d082:	bd80      	pop	{r7, pc}
   9d084:	20072834 	.word	0x20072834
   9d088:	20072838 	.word	0x20072838
   9d08c:	2007283c 	.word	0x2007283c
   9d090:	20072840 	.word	0x20072840
   9d094:	20072844 	.word	0x20072844
   9d098:	00097db5 	.word	0x00097db5
   9d09c:	0009926d 	.word	0x0009926d
   9d0a0:	0008a479 	.word	0x0008a479

0009d0a4 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   9d0a4:	b580      	push	{r7, lr}
   9d0a6:	b082      	sub	sp, #8
   9d0a8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d0aa:	2300      	movs	r3, #0
   9d0ac:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d0ae:	234d      	movs	r3, #77	; 0x4d
   9d0b0:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   9d0b2:	4b04      	ldr	r3, [pc, #16]	; (9d0c4 <Cl_Dprep_ProcessAlarms+0x20>)
   9d0b4:	4798      	blx	r3
   9d0b6:	4603      	mov	r3, r0
   9d0b8:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   9d0ba:	79fb      	ldrb	r3, [r7, #7]
	}
   9d0bc:	4618      	mov	r0, r3
   9d0be:	3708      	adds	r7, #8
   9d0c0:	46bd      	mov	sp, r7
   9d0c2:	bd80      	pop	{r7, pc}
   9d0c4:	0009d0c9 	.word	0x0009d0c9

0009d0c8 <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   9d0c8:	b580      	push	{r7, lr}
   9d0ca:	b084      	sub	sp, #16
   9d0cc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d0ce:	2300      	movs	r3, #0
   9d0d0:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   9d0d2:	2300      	movs	r3, #0
   9d0d4:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   9d0d6:	2300      	movs	r3, #0
   9d0d8:	713b      	strb	r3, [r7, #4]
   9d0da:	2300      	movs	r3, #0
   9d0dc:	717b      	strb	r3, [r7, #5]
   9d0de:	2300      	movs	r3, #0
   9d0e0:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d0e2:	234d      	movs	r3, #77	; 0x4d
   9d0e4:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9d0e6:	2300      	movs	r3, #0
   9d0e8:	73bb      	strb	r3, [r7, #14]
   9d0ea:	e068      	b.n	9d1be <Cl_Dprep_UpdateAlarmTable+0xf6>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   9d0ec:	7bba      	ldrb	r2, [r7, #14]
   9d0ee:	4938      	ldr	r1, [pc, #224]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d0f0:	4613      	mov	r3, r2
   9d0f2:	00db      	lsls	r3, r3, #3
   9d0f4:	1a9b      	subs	r3, r3, r2
   9d0f6:	440b      	add	r3, r1
   9d0f8:	7818      	ldrb	r0, [r3, #0]
   9d0fa:	7bba      	ldrb	r2, [r7, #14]
   9d0fc:	4613      	mov	r3, r2
   9d0fe:	00db      	lsls	r3, r3, #3
   9d100:	1a9b      	subs	r3, r3, r2
   9d102:	4a33      	ldr	r2, [pc, #204]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d104:	4413      	add	r3, r2
   9d106:	3302      	adds	r3, #2
   9d108:	4619      	mov	r1, r3
   9d10a:	4b32      	ldr	r3, [pc, #200]	; (9d1d4 <Cl_Dprep_UpdateAlarmTable+0x10c>)
   9d10c:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   9d10e:	7bba      	ldrb	r2, [r7, #14]
   9d110:	492f      	ldr	r1, [pc, #188]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d112:	4613      	mov	r3, r2
   9d114:	00db      	lsls	r3, r3, #3
   9d116:	1a9b      	subs	r3, r3, r2
   9d118:	440b      	add	r3, r1
   9d11a:	3302      	adds	r3, #2
   9d11c:	781b      	ldrb	r3, [r3, #0]
   9d11e:	2b00      	cmp	r3, #0
   9d120:	d022      	beq.n	9d168 <Cl_Dprep_UpdateAlarmTable+0xa0>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   9d122:	7bba      	ldrb	r2, [r7, #14]
   9d124:	492a      	ldr	r1, [pc, #168]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d126:	4613      	mov	r3, r2
   9d128:	00db      	lsls	r3, r3, #3
   9d12a:	1a9b      	subs	r3, r3, r2
   9d12c:	440b      	add	r3, r1
   9d12e:	3303      	adds	r3, #3
   9d130:	781b      	ldrb	r3, [r3, #0]
   9d132:	f083 0301 	eor.w	r3, r3, #1
   9d136:	b2db      	uxtb	r3, r3
   9d138:	2b00      	cmp	r3, #0
   9d13a:	d03d      	beq.n	9d1b8 <Cl_Dprep_UpdateAlarmTable+0xf0>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   9d13c:	7bba      	ldrb	r2, [r7, #14]
   9d13e:	4924      	ldr	r1, [pc, #144]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d140:	4613      	mov	r3, r2
   9d142:	00db      	lsls	r3, r3, #3
   9d144:	1a9b      	subs	r3, r3, r2
   9d146:	440b      	add	r3, r1
   9d148:	3303      	adds	r3, #3
   9d14a:	2201      	movs	r2, #1
   9d14c:	701a      	strb	r2, [r3, #0]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9d14e:	7bba      	ldrb	r2, [r7, #14]
   9d150:	491f      	ldr	r1, [pc, #124]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d152:	4613      	mov	r3, r2
   9d154:	00db      	lsls	r3, r3, #3
   9d156:	1a9b      	subs	r3, r3, r2
   9d158:	440b      	add	r3, r1
   9d15a:	781b      	ldrb	r3, [r3, #0]
   9d15c:	4618      	mov	r0, r3
   9d15e:	4b1e      	ldr	r3, [pc, #120]	; (9d1d8 <Cl_Dprep_UpdateAlarmTable+0x110>)
   9d160:	4798      	blx	r3
   9d162:	4603      	mov	r3, r0
   9d164:	73fb      	strb	r3, [r7, #15]
   9d166:	e027      	b.n	9d1b8 <Cl_Dprep_UpdateAlarmTable+0xf0>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   9d168:	7bba      	ldrb	r2, [r7, #14]
   9d16a:	4919      	ldr	r1, [pc, #100]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d16c:	4613      	mov	r3, r2
   9d16e:	00db      	lsls	r3, r3, #3
   9d170:	1a9b      	subs	r3, r3, r2
   9d172:	440b      	add	r3, r1
   9d174:	3303      	adds	r3, #3
   9d176:	781b      	ldrb	r3, [r3, #0]
   9d178:	2b00      	cmp	r3, #0
   9d17a:	d014      	beq.n	9d1a6 <Cl_Dprep_UpdateAlarmTable+0xde>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   9d17c:	7bba      	ldrb	r2, [r7, #14]
   9d17e:	4914      	ldr	r1, [pc, #80]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d180:	4613      	mov	r3, r2
   9d182:	00db      	lsls	r3, r3, #3
   9d184:	1a9b      	subs	r3, r3, r2
   9d186:	440b      	add	r3, r1
   9d188:	3303      	adds	r3, #3
   9d18a:	2200      	movs	r2, #0
   9d18c:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9d18e:	2307      	movs	r3, #7
   9d190:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9d192:	7bba      	ldrb	r2, [r7, #14]
   9d194:	490e      	ldr	r1, [pc, #56]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d196:	4613      	mov	r3, r2
   9d198:	00db      	lsls	r3, r3, #3
   9d19a:	1a9b      	subs	r3, r3, r2
   9d19c:	440b      	add	r3, r1
   9d19e:	781b      	ldrb	r3, [r3, #0]
   9d1a0:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   9d1a2:	2300      	movs	r3, #0
   9d1a4:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9d1a6:	7bba      	ldrb	r2, [r7, #14]
   9d1a8:	4909      	ldr	r1, [pc, #36]	; (9d1d0 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9d1aa:	4613      	mov	r3, r2
   9d1ac:	00db      	lsls	r3, r3, #3
   9d1ae:	1a9b      	subs	r3, r3, r2
   9d1b0:	440b      	add	r3, r1
   9d1b2:	3302      	adds	r3, #2
   9d1b4:	2201      	movs	r2, #1
   9d1b6:	701a      	strb	r2, [r3, #0]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9d1b8:	7bbb      	ldrb	r3, [r7, #14]
   9d1ba:	3301      	adds	r3, #1
   9d1bc:	73bb      	strb	r3, [r7, #14]
   9d1be:	7bbb      	ldrb	r3, [r7, #14]
   9d1c0:	2b21      	cmp	r3, #33	; 0x21
   9d1c2:	d993      	bls.n	9d0ec <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   9d1c4:	7bfb      	ldrb	r3, [r7, #15]
	}
   9d1c6:	4618      	mov	r0, r3
   9d1c8:	3710      	adds	r7, #16
   9d1ca:	46bd      	mov	sp, r7
   9d1cc:	bd80      	pop	{r7, pc}
   9d1ce:	bf00      	nop
   9d1d0:	20070abc 	.word	0x20070abc
   9d1d4:	00083095 	.word	0x00083095
   9d1d8:	0009d1dd 	.word	0x0009d1dd

0009d1dc <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9d1dc:	b580      	push	{r7, lr}
   9d1de:	b086      	sub	sp, #24
   9d1e0:	af00      	add	r7, sp, #0
   9d1e2:	4603      	mov	r3, r0
   9d1e4:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9d1e6:	2300      	movs	r3, #0
   9d1e8:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   9d1ea:	2300      	movs	r3, #0
   9d1ec:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   9d1ee:	2300      	movs	r3, #0
   9d1f0:	827b      	strh	r3, [r7, #18]
   9d1f2:	2300      	movs	r3, #0
   9d1f4:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   9d1f6:	f107 0308 	add.w	r3, r7, #8
   9d1fa:	2100      	movs	r1, #0
   9d1fc:	460a      	mov	r2, r1
   9d1fe:	801a      	strh	r2, [r3, #0]
   9d200:	460a      	mov	r2, r1
   9d202:	709a      	strb	r2, [r3, #2]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9d204:	2300      	movs	r3, #0
   9d206:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d208:	234d      	movs	r3, #77	; 0x4d
   9d20a:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   9d20c:	79fb      	ldrb	r3, [r7, #7]
   9d20e:	3b01      	subs	r3, #1
   9d210:	2b3d      	cmp	r3, #61	; 0x3d
   9d212:	f200 810d 	bhi.w	9d430 <CL_DrepAlarmActon+0x254>
   9d216:	a201      	add	r2, pc, #4	; (adr r2, 9d21c <CL_DrepAlarmActon+0x40>)
   9d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d21c:	0009d33f 	.word	0x0009d33f
   9d220:	0009d431 	.word	0x0009d431
   9d224:	0009d351 	.word	0x0009d351
   9d228:	0009d351 	.word	0x0009d351
   9d22c:	0009d391 	.word	0x0009d391
   9d230:	0009d391 	.word	0x0009d391
   9d234:	0009d3c9 	.word	0x0009d3c9
   9d238:	0009d3c9 	.word	0x0009d3c9
   9d23c:	0009d431 	.word	0x0009d431
   9d240:	0009d431 	.word	0x0009d431
   9d244:	0009d431 	.word	0x0009d431
   9d248:	0009d315 	.word	0x0009d315
   9d24c:	0009d315 	.word	0x0009d315
   9d250:	0009d315 	.word	0x0009d315
   9d254:	0009d315 	.word	0x0009d315
   9d258:	0009d315 	.word	0x0009d315
   9d25c:	0009d315 	.word	0x0009d315
   9d260:	0009d315 	.word	0x0009d315
   9d264:	0009d3c9 	.word	0x0009d3c9
   9d268:	0009d3c9 	.word	0x0009d3c9
   9d26c:	0009d315 	.word	0x0009d315
   9d270:	0009d315 	.word	0x0009d315
   9d274:	0009d315 	.word	0x0009d315
   9d278:	0009d315 	.word	0x0009d315
   9d27c:	0009d431 	.word	0x0009d431
   9d280:	0009d315 	.word	0x0009d315
   9d284:	0009d431 	.word	0x0009d431
   9d288:	0009d431 	.word	0x0009d431
   9d28c:	0009d431 	.word	0x0009d431
   9d290:	0009d431 	.word	0x0009d431
   9d294:	0009d431 	.word	0x0009d431
   9d298:	0009d431 	.word	0x0009d431
   9d29c:	0009d431 	.word	0x0009d431
   9d2a0:	0009d431 	.word	0x0009d431
   9d2a4:	0009d431 	.word	0x0009d431
   9d2a8:	0009d431 	.word	0x0009d431
   9d2ac:	0009d431 	.word	0x0009d431
   9d2b0:	0009d431 	.word	0x0009d431
   9d2b4:	0009d315 	.word	0x0009d315
   9d2b8:	0009d315 	.word	0x0009d315
   9d2bc:	0009d431 	.word	0x0009d431
   9d2c0:	0009d391 	.word	0x0009d391
   9d2c4:	0009d431 	.word	0x0009d431
   9d2c8:	0009d391 	.word	0x0009d391
   9d2cc:	0009d431 	.word	0x0009d431
   9d2d0:	0009d431 	.word	0x0009d431
   9d2d4:	0009d431 	.word	0x0009d431
   9d2d8:	0009d431 	.word	0x0009d431
   9d2dc:	0009d431 	.word	0x0009d431
   9d2e0:	0009d431 	.word	0x0009d431
   9d2e4:	0009d431 	.word	0x0009d431
   9d2e8:	0009d431 	.word	0x0009d431
   9d2ec:	0009d431 	.word	0x0009d431
   9d2f0:	0009d431 	.word	0x0009d431
   9d2f4:	0009d431 	.word	0x0009d431
   9d2f8:	0009d431 	.word	0x0009d431
   9d2fc:	0009d431 	.word	0x0009d431
   9d300:	0009d431 	.word	0x0009d431
   9d304:	0009d431 	.word	0x0009d431
   9d308:	0009d431 	.word	0x0009d431
   9d30c:	0009d437 	.word	0x0009d437
   9d310:	0009d437 	.word	0x0009d437
			case    BC_ALARM:
			case 	PS2_HIGH_THRESHOLD:
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9d314:	4b5c      	ldr	r3, [pc, #368]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d316:	781b      	ldrb	r3, [r3, #0]
   9d318:	2b06      	cmp	r3, #6
   9d31a:	d007      	beq.n	9d32c <CL_DrepAlarmActon+0x150>
   9d31c:	4b5a      	ldr	r3, [pc, #360]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d31e:	781b      	ldrb	r3, [r3, #0]
   9d320:	2b0e      	cmp	r3, #14
   9d322:	d003      	beq.n	9d32c <CL_DrepAlarmActon+0x150>
   9d324:	4b58      	ldr	r3, [pc, #352]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d326:	781b      	ldrb	r3, [r3, #0]
   9d328:	2b0d      	cmp	r3, #13
   9d32a:	d102      	bne.n	9d332 <CL_DrepAlarmActon+0x156>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   9d32c:	4b57      	ldr	r3, [pc, #348]	; (9d48c <CL_DrepAlarmActon+0x2b0>)
   9d32e:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   9d330:	e082      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   9d332:	4b57      	ldr	r3, [pc, #348]	; (9d490 <CL_DrepAlarmActon+0x2b4>)
   9d334:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9d336:	4b54      	ldr	r3, [pc, #336]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d338:	220c      	movs	r2, #12
   9d33a:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   9d33c:	e07c      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   9d33e:	4b55      	ldr	r3, [pc, #340]	; (9d494 <CL_DrepAlarmActon+0x2b8>)
   9d340:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d342:	4b55      	ldr	r3, [pc, #340]	; (9d498 <CL_DrepAlarmActon+0x2bc>)
   9d344:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9d346:	2100      	movs	r1, #0
   9d348:	2004      	movs	r0, #4
   9d34a:	4b54      	ldr	r3, [pc, #336]	; (9d49c <CL_DrepAlarmActon+0x2c0>)
   9d34c:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   9d34e:	e073      	b.n	9d438 <CL_DrepAlarmActon+0x25c>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   9d350:	4b53      	ldr	r3, [pc, #332]	; (9d4a0 <CL_DrepAlarmActon+0x2c4>)
   9d352:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d354:	4b50      	ldr	r3, [pc, #320]	; (9d498 <CL_DrepAlarmActon+0x2bc>)
   9d356:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9d358:	4b4b      	ldr	r3, [pc, #300]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d35a:	781b      	ldrb	r3, [r3, #0]
   9d35c:	2b06      	cmp	r3, #6
   9d35e:	d007      	beq.n	9d370 <CL_DrepAlarmActon+0x194>
   9d360:	4b49      	ldr	r3, [pc, #292]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d362:	781b      	ldrb	r3, [r3, #0]
   9d364:	2b0e      	cmp	r3, #14
   9d366:	d003      	beq.n	9d370 <CL_DrepAlarmActon+0x194>
   9d368:	4b47      	ldr	r3, [pc, #284]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d36a:	781b      	ldrb	r3, [r3, #0]
   9d36c:	2b0d      	cmp	r3, #13
   9d36e:	d109      	bne.n	9d384 <CL_DrepAlarmActon+0x1a8>
				{
				
				sv_cntrl_enable_bypass();
   9d370:	4b4c      	ldr	r3, [pc, #304]	; (9d4a4 <CL_DrepAlarmActon+0x2c8>)
   9d372:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9d374:	2100      	movs	r1, #0
   9d376:	2002      	movs	r0, #2
   9d378:	4b4b      	ldr	r3, [pc, #300]	; (9d4a8 <CL_DrepAlarmActon+0x2cc>)
   9d37a:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   9d37c:	4b4b      	ldr	r3, [pc, #300]	; (9d4ac <CL_DrepAlarmActon+0x2d0>)
   9d37e:	2201      	movs	r2, #1
   9d380:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   9d382:	e059      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
				//	cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
				}
				else{
					
				
				Cl_Dprep_Stoppreparation();
   9d384:	4b42      	ldr	r3, [pc, #264]	; (9d490 <CL_DrepAlarmActon+0x2b4>)
   9d386:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   9d388:	4b3f      	ldr	r3, [pc, #252]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d38a:	220c      	movs	r2, #12
   9d38c:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   9d38e:	e053      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			case HOLDER1STATUS_CLOSED:
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
			sv_cntrl_setyellowalarm();
   9d390:	4b43      	ldr	r3, [pc, #268]	; (9d4a0 <CL_DrepAlarmActon+0x2c4>)
   9d392:	4798      	blx	r3
			sv_cntrl_buzzer();
   9d394:	4b40      	ldr	r3, [pc, #256]	; (9d498 <CL_DrepAlarmActon+0x2bc>)
   9d396:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9d398:	4b3b      	ldr	r3, [pc, #236]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d39a:	781b      	ldrb	r3, [r3, #0]
   9d39c:	2b06      	cmp	r3, #6
   9d39e:	d007      	beq.n	9d3b0 <CL_DrepAlarmActon+0x1d4>
   9d3a0:	4b39      	ldr	r3, [pc, #228]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3a2:	781b      	ldrb	r3, [r3, #0]
   9d3a4:	2b0e      	cmp	r3, #14
   9d3a6:	d003      	beq.n	9d3b0 <CL_DrepAlarmActon+0x1d4>
   9d3a8:	4b37      	ldr	r3, [pc, #220]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3aa:	781b      	ldrb	r3, [r3, #0]
   9d3ac:	2b0d      	cmp	r3, #13
   9d3ae:	d105      	bne.n	9d3bc <CL_DrepAlarmActon+0x1e0>
			{
				sv_cntrl_enable_bypass();
   9d3b0:	4b3c      	ldr	r3, [pc, #240]	; (9d4a4 <CL_DrepAlarmActon+0x2c8>)
   9d3b2:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9d3b4:	4b3d      	ldr	r3, [pc, #244]	; (9d4ac <CL_DrepAlarmActon+0x2d0>)
   9d3b6:	2201      	movs	r2, #1
   9d3b8:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   9d3ba:	e03d      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   9d3bc:	4b34      	ldr	r3, [pc, #208]	; (9d490 <CL_DrepAlarmActon+0x2b4>)
   9d3be:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9d3c0:	4b31      	ldr	r3, [pc, #196]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3c2:	220c      	movs	r2, #12
   9d3c4:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9d3c6:	e037      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				sv_cntrl_setyellowalarm();
   9d3c8:	4b35      	ldr	r3, [pc, #212]	; (9d4a0 <CL_DrepAlarmActon+0x2c4>)
   9d3ca:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d3cc:	4b32      	ldr	r3, [pc, #200]	; (9d498 <CL_DrepAlarmActon+0x2bc>)
   9d3ce:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   9d3d0:	4b2d      	ldr	r3, [pc, #180]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3d2:	781b      	ldrb	r3, [r3, #0]
   9d3d4:	2b06      	cmp	r3, #6
   9d3d6:	d007      	beq.n	9d3e8 <CL_DrepAlarmActon+0x20c>
   9d3d8:	4b2b      	ldr	r3, [pc, #172]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3da:	781b      	ldrb	r3, [r3, #0]
   9d3dc:	2b0e      	cmp	r3, #14
   9d3de:	d003      	beq.n	9d3e8 <CL_DrepAlarmActon+0x20c>
   9d3e0:	4b29      	ldr	r3, [pc, #164]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d3e2:	781b      	ldrb	r3, [r3, #0]
   9d3e4:	2b0d      	cmp	r3, #13
   9d3e6:	d11d      	bne.n	9d424 <CL_DrepAlarmActon+0x248>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_enable_bypass();
   9d3e8:	4b2e      	ldr	r3, [pc, #184]	; (9d4a4 <CL_DrepAlarmActon+0x2c8>)
   9d3ea:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9d3ec:	4b2f      	ldr	r3, [pc, #188]	; (9d4ac <CL_DrepAlarmActon+0x2d0>)
   9d3ee:	2201      	movs	r2, #1
   9d3f0:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   9d3f2:	4b2f      	ldr	r3, [pc, #188]	; (9d4b0 <CL_DrepAlarmActon+0x2d4>)
   9d3f4:	681b      	ldr	r3, [r3, #0]
   9d3f6:	3301      	adds	r3, #1
   9d3f8:	4a2d      	ldr	r2, [pc, #180]	; (9d4b0 <CL_DrepAlarmActon+0x2d4>)
   9d3fa:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   9d3fc:	2100      	movs	r1, #0
   9d3fe:	2008      	movs	r0, #8
   9d400:	4b2c      	ldr	r3, [pc, #176]	; (9d4b4 <CL_DrepAlarmActon+0x2d8>)
   9d402:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9d404:	2100      	movs	r1, #0
   9d406:	2007      	movs	r0, #7
   9d408:	4b2a      	ldr	r3, [pc, #168]	; (9d4b4 <CL_DrepAlarmActon+0x2d8>)
   9d40a:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   9d40c:	2100      	movs	r1, #0
   9d40e:	2013      	movs	r0, #19
   9d410:	4b28      	ldr	r3, [pc, #160]	; (9d4b4 <CL_DrepAlarmActon+0x2d8>)
   9d412:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   9d414:	2100      	movs	r1, #0
   9d416:	2014      	movs	r0, #20
   9d418:	4b26      	ldr	r3, [pc, #152]	; (9d4b4 <CL_DrepAlarmActon+0x2d8>)
   9d41a:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   9d41c:	4b1a      	ldr	r3, [pc, #104]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d41e:	220e      	movs	r2, #14
   9d420:	701a      	strb	r2, [r3, #0]
			else{
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   9d422:	e009      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   9d424:	4b1a      	ldr	r3, [pc, #104]	; (9d490 <CL_DrepAlarmActon+0x2b4>)
   9d426:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9d428:	4b17      	ldr	r3, [pc, #92]	; (9d488 <CL_DrepAlarmActon+0x2ac>)
   9d42a:	220c      	movs	r2, #12
   9d42c:	701a      	strb	r2, [r3, #0]
			}
			break;
   9d42e:	e003      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   9d430:	2300      	movs	r3, #0
   9d432:	71fb      	strb	r3, [r7, #7]
			break;
   9d434:	e000      	b.n	9d438 <CL_DrepAlarmActon+0x25c>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   9d436:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   9d438:	79fb      	ldrb	r3, [r7, #7]
   9d43a:	2b00      	cmp	r3, #0
   9d43c:	d01f      	beq.n	9d47e <CL_DrepAlarmActon+0x2a2>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   9d43e:	79fb      	ldrb	r3, [r7, #7]
   9d440:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9d442:	2301      	movs	r3, #1
   9d444:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   9d446:	2302      	movs	r3, #2
   9d448:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   9d44a:	2307      	movs	r3, #7
   9d44c:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   9d44e:	f107 0108 	add.w	r1, r7, #8
   9d452:	7bbb      	ldrb	r3, [r7, #14]
   9d454:	2203      	movs	r2, #3
   9d456:	4618      	mov	r0, r3
   9d458:	4b17      	ldr	r3, [pc, #92]	; (9d4b8 <CL_DrepAlarmActon+0x2dc>)
   9d45a:	4798      	blx	r3
   9d45c:	4603      	mov	r3, r0
   9d45e:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   9d460:	232b      	movs	r3, #43	; 0x2b
   9d462:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   9d464:	2302      	movs	r3, #2
   9d466:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   9d468:	2300      	movs	r3, #0
   9d46a:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   9d46c:	f107 0108 	add.w	r1, r7, #8
   9d470:	7bbb      	ldrb	r3, [r7, #14]
   9d472:	2202      	movs	r2, #2
   9d474:	4618      	mov	r0, r3
   9d476:	4b10      	ldr	r3, [pc, #64]	; (9d4b8 <CL_DrepAlarmActon+0x2dc>)
   9d478:	4798      	blx	r3
   9d47a:	4603      	mov	r3, r0
   9d47c:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   9d47e:	2300      	movs	r3, #0
}
   9d480:	4618      	mov	r0, r3
   9d482:	3718      	adds	r7, #24
   9d484:	46bd      	mov	sp, r7
   9d486:	bd80      	pop	{r7, pc}
   9d488:	2007282f 	.word	0x2007282f
   9d48c:	0009f161 	.word	0x0009f161
   9d490:	0009dde9 	.word	0x0009dde9
   9d494:	00097749 	.word	0x00097749
   9d498:	00097785 	.word	0x00097785
   9d49c:	00091a75 	.word	0x00091a75
   9d4a0:	0009775d 	.word	0x0009775d
   9d4a4:	0009769d 	.word	0x0009769d
   9d4a8:	00087c95 	.word	0x00087c95
   9d4ac:	20072830 	.word	0x20072830
   9d4b0:	200727f4 	.word	0x200727f4
   9d4b4:	00082f5d 	.word	0x00082f5d
   9d4b8:	0009926d 	.word	0x0009926d
   9d4bc:	00000000 	.word	0x00000000

0009d4c0 <Cl_Dprep_CheckforfillingCompletion>:
				cl_wait(10);

			 }
}	
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   9d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   9d4c2:	b087      	sub	sp, #28
   9d4c4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   9d4c6:	2304      	movs	r3, #4
   9d4c8:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   9d4ca:	2202      	movs	r2, #2
   9d4cc:	4974      	ldr	r1, [pc, #464]	; (9d6a0 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   9d4ce:	2019      	movs	r0, #25
   9d4d0:	4b74      	ldr	r3, [pc, #464]	; (9d6a4 <Cl_Dprep_CheckforfillingCompletion+0x1e4>)
   9d4d2:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   9d4d4:	4b72      	ldr	r3, [pc, #456]	; (9d6a0 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   9d4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d4da:	2b0a      	cmp	r3, #10
   9d4dc:	dd02      	ble.n	9d4e4 <Cl_Dprep_CheckforfillingCompletion+0x24>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   9d4de:	2300      	movs	r3, #0
   9d4e0:	75fb      	strb	r3, [r7, #23]
   9d4e2:	e0bd      	b.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   9d4e4:	1d3b      	adds	r3, r7, #4
   9d4e6:	4619      	mov	r1, r3
   9d4e8:	2014      	movs	r0, #20
   9d4ea:	4b6f      	ldr	r3, [pc, #444]	; (9d6a8 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   9d4ec:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   9d4ee:	1dbb      	adds	r3, r7, #6
   9d4f0:	4619      	mov	r1, r3
   9d4f2:	2007      	movs	r0, #7
   9d4f4:	4b6c      	ldr	r3, [pc, #432]	; (9d6a8 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   9d4f6:	4798      	blx	r3
// 			//temp3 = ((temp3* 4) +temp)/5;
// 			
// 							
// 			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;

		cl_temp3_cel = cl_temp3 /100;
   9d4f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   9d4fc:	4a6b      	ldr	r2, [pc, #428]	; (9d6ac <Cl_Dprep_CheckforfillingCompletion+0x1ec>)
   9d4fe:	fb82 1203 	smull	r1, r2, r2, r3
   9d502:	1152      	asrs	r2, r2, #5
   9d504:	17db      	asrs	r3, r3, #31
   9d506:	1ad3      	subs	r3, r2, r3
   9d508:	b21a      	sxth	r2, r3
   9d50a:	4b69      	ldr	r3, [pc, #420]	; (9d6b0 <Cl_Dprep_CheckforfillingCompletion+0x1f0>)
   9d50c:	4610      	mov	r0, r2
   9d50e:	4798      	blx	r3
   9d510:	4603      	mov	r3, r0
   9d512:	613b      	str	r3, [r7, #16]
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   9d514:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   9d518:	4b66      	ldr	r3, [pc, #408]	; (9d6b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   9d51a:	4610      	mov	r0, r2
   9d51c:	4798      	blx	r3
   9d51e:	4c66      	ldr	r4, [pc, #408]	; (9d6b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   9d520:	a353      	add	r3, pc, #332	; (adr r3, 9d670 <Cl_Dprep_CheckforfillingCompletion+0x1b0>)
   9d522:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d526:	47a0      	blx	r4
   9d528:	4603      	mov	r3, r0
   9d52a:	460c      	mov	r4, r1
   9d52c:	461d      	mov	r5, r3
   9d52e:	4626      	mov	r6, r4
   9d530:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   9d534:	4b5f      	ldr	r3, [pc, #380]	; (9d6b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   9d536:	4610      	mov	r0, r2
   9d538:	4798      	blx	r3
   9d53a:	4602      	mov	r2, r0
   9d53c:	460b      	mov	r3, r1
   9d53e:	4c5e      	ldr	r4, [pc, #376]	; (9d6b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   9d540:	4628      	mov	r0, r5
   9d542:	4631      	mov	r1, r6
   9d544:	47a0      	blx	r4
   9d546:	4603      	mov	r3, r0
   9d548:	460c      	mov	r4, r1
   9d54a:	461d      	mov	r5, r3
   9d54c:	4626      	mov	r6, r4
   9d54e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   9d552:	4b58      	ldr	r3, [pc, #352]	; (9d6b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   9d554:	4610      	mov	r0, r2
   9d556:	4798      	blx	r3
   9d558:	4c57      	ldr	r4, [pc, #348]	; (9d6b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   9d55a:	a347      	add	r3, pc, #284	; (adr r3, 9d678 <Cl_Dprep_CheckforfillingCompletion+0x1b8>)
   9d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d560:	47a0      	blx	r4
   9d562:	4603      	mov	r3, r0
   9d564:	460c      	mov	r4, r1
   9d566:	461a      	mov	r2, r3
   9d568:	4623      	mov	r3, r4
   9d56a:	4c54      	ldr	r4, [pc, #336]	; (9d6bc <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   9d56c:	4628      	mov	r0, r5
   9d56e:	4631      	mov	r1, r6
   9d570:	47a0      	blx	r4
   9d572:	4603      	mov	r3, r0
   9d574:	460c      	mov	r4, r1
   9d576:	4618      	mov	r0, r3
   9d578:	4621      	mov	r1, r4
   9d57a:	4c51      	ldr	r4, [pc, #324]	; (9d6c0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   9d57c:	a340      	add	r3, pc, #256	; (adr r3, 9d680 <Cl_Dprep_CheckforfillingCompletion+0x1c0>)
   9d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d582:	47a0      	blx	r4
   9d584:	4603      	mov	r3, r0
   9d586:	460c      	mov	r4, r1
   9d588:	4619      	mov	r1, r3
   9d58a:	4622      	mov	r2, r4
   9d58c:	4b4d      	ldr	r3, [pc, #308]	; (9d6c4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   9d58e:	4608      	mov	r0, r1
   9d590:	4611      	mov	r1, r2
   9d592:	4798      	blx	r3
   9d594:	4603      	mov	r3, r0
   9d596:	60fb      	str	r3, [r7, #12]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   9d598:	4b4b      	ldr	r3, [pc, #300]	; (9d6c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9d59a:	68f8      	ldr	r0, [r7, #12]
   9d59c:	4798      	blx	r3
   9d59e:	4605      	mov	r5, r0
   9d5a0:	460e      	mov	r6, r1
   9d5a2:	4b49      	ldr	r3, [pc, #292]	; (9d6c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9d5a4:	6938      	ldr	r0, [r7, #16]
   9d5a6:	4798      	blx	r3
   9d5a8:	4c45      	ldr	r4, [pc, #276]	; (9d6c0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   9d5aa:	f04f 0200 	mov.w	r2, #0
   9d5ae:	4b47      	ldr	r3, [pc, #284]	; (9d6cc <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   9d5b0:	47a0      	blx	r4
   9d5b2:	4603      	mov	r3, r0
   9d5b4:	460c      	mov	r4, r1
   9d5b6:	4618      	mov	r0, r3
   9d5b8:	4621      	mov	r1, r4
   9d5ba:	4c3f      	ldr	r4, [pc, #252]	; (9d6b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   9d5bc:	a332      	add	r3, pc, #200	; (adr r3, 9d688 <Cl_Dprep_CheckforfillingCompletion+0x1c8>)
   9d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d5c2:	47a0      	blx	r4
   9d5c4:	4603      	mov	r3, r0
   9d5c6:	460c      	mov	r4, r1
   9d5c8:	4618      	mov	r0, r3
   9d5ca:	4621      	mov	r1, r4
   9d5cc:	4c3b      	ldr	r4, [pc, #236]	; (9d6bc <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   9d5ce:	f04f 0200 	mov.w	r2, #0
   9d5d2:	4b3f      	ldr	r3, [pc, #252]	; (9d6d0 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   9d5d4:	47a0      	blx	r4
   9d5d6:	4603      	mov	r3, r0
   9d5d8:	460c      	mov	r4, r1
   9d5da:	461a      	mov	r2, r3
   9d5dc:	4623      	mov	r3, r4
   9d5de:	4c3d      	ldr	r4, [pc, #244]	; (9d6d4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   9d5e0:	4628      	mov	r0, r5
   9d5e2:	4631      	mov	r1, r6
   9d5e4:	47a0      	blx	r4
   9d5e6:	4603      	mov	r3, r0
   9d5e8:	460c      	mov	r4, r1
   9d5ea:	4618      	mov	r0, r3
   9d5ec:	4621      	mov	r1, r4
   9d5ee:	4c39      	ldr	r4, [pc, #228]	; (9d6d4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   9d5f0:	f04f 0200 	mov.w	r2, #0
   9d5f4:	4b38      	ldr	r3, [pc, #224]	; (9d6d8 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   9d5f6:	47a0      	blx	r4
   9d5f8:	4603      	mov	r3, r0
   9d5fa:	460c      	mov	r4, r1
   9d5fc:	4619      	mov	r1, r3
   9d5fe:	4622      	mov	r2, r4
   9d600:	4b30      	ldr	r3, [pc, #192]	; (9d6c4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   9d602:	4608      	mov	r0, r1
   9d604:	4611      	mov	r1, r2
   9d606:	4798      	blx	r3
   9d608:	4603      	mov	r3, r0
   9d60a:	60bb      	str	r3, [r7, #8]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   9d60c:	4b2e      	ldr	r3, [pc, #184]	; (9d6c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9d60e:	68b8      	ldr	r0, [r7, #8]
   9d610:	4798      	blx	r3
   9d612:	4c32      	ldr	r4, [pc, #200]	; (9d6dc <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   9d614:	a31e      	add	r3, pc, #120	; (adr r3, 9d690 <Cl_Dprep_CheckforfillingCompletion+0x1d0>)
   9d616:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d61a:	47a0      	blx	r4
   9d61c:	4603      	mov	r3, r0
   9d61e:	2b00      	cmp	r3, #0
   9d620:	d01e      	beq.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   9d622:	4b29      	ldr	r3, [pc, #164]	; (9d6c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   9d624:	68b8      	ldr	r0, [r7, #8]
   9d626:	4798      	blx	r3
   9d628:	4c2d      	ldr	r4, [pc, #180]	; (9d6e0 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   9d62a:	a31b      	add	r3, pc, #108	; (adr r3, 9d698 <Cl_Dprep_CheckforfillingCompletion+0x1d8>)
   9d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d630:	47a0      	blx	r4
   9d632:	4603      	mov	r3, r0
   9d634:	2b00      	cmp	r3, #0
   9d636:	d013      	beq.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   9d638:	4b2a      	ldr	r3, [pc, #168]	; (9d6e4 <Cl_Dprep_CheckforfillingCompletion+0x224>)
   9d63a:	492b      	ldr	r1, [pc, #172]	; (9d6e8 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   9d63c:	6938      	ldr	r0, [r7, #16]
   9d63e:	4798      	blx	r3
   9d640:	4603      	mov	r3, r0
   9d642:	2b00      	cmp	r3, #0
   9d644:	d00c      	beq.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   9d646:	4b29      	ldr	r3, [pc, #164]	; (9d6ec <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   9d648:	4929      	ldr	r1, [pc, #164]	; (9d6f0 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   9d64a:	6938      	ldr	r0, [r7, #16]
   9d64c:	4798      	blx	r3
   9d64e:	4603      	mov	r3, r0
   9d650:	2b00      	cmp	r3, #0
   9d652:	d005      	beq.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
				{
					if(cl_temp3_stable_confirm == true)
   9d654:	4b27      	ldr	r3, [pc, #156]	; (9d6f4 <Cl_Dprep_CheckforfillingCompletion+0x234>)
   9d656:	781b      	ldrb	r3, [r3, #0]
   9d658:	2b00      	cmp	r3, #0
   9d65a:	d001      	beq.n	9d660 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
							Cl_dprepretcode = CL_OK;
   9d65c:	2300      	movs	r3, #0
   9d65e:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   9d660:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   9d662:	4618      	mov	r0, r3
   9d664:	371c      	adds	r7, #28
   9d666:	46bd      	mov	sp, r7
   9d668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9d66a:	bf00      	nop
   9d66c:	f3af 8000 	nop.w
   9d670:	eb1c432d 	.word	0xeb1c432d
   9d674:	bf1a36e2 	.word	0xbf1a36e2
   9d678:	70a3d70a 	.word	0x70a3d70a
   9d67c:	3fd70a3d 	.word	0x3fd70a3d
   9d680:	851eb852 	.word	0x851eb852
   9d684:	404331eb 	.word	0x404331eb
   9d688:	47ae147b 	.word	0x47ae147b
   9d68c:	3f947ae1 	.word	0x3f947ae1
   9d690:	9999999a 	.word	0x9999999a
   9d694:	402a9999 	.word	0x402a9999
   9d698:	9999999a 	.word	0x9999999a
   9d69c:	402b9999 	.word	0x402b9999
   9d6a0:	20072812 	.word	0x20072812
   9d6a4:	0009926d 	.word	0x0009926d
   9d6a8:	0008d61d 	.word	0x0008d61d
   9d6ac:	51eb851f 	.word	0x51eb851f
   9d6b0:	000a33a9 	.word	0x000a33a9
   9d6b4:	000a2b05 	.word	0x000a2b05
   9d6b8:	000a2bd1 	.word	0x000a2bd1
   9d6bc:	000a286d 	.word	0x000a286d
   9d6c0:	000a2869 	.word	0x000a2869
   9d6c4:	000a3195 	.word	0x000a3195
   9d6c8:	000a2b29 	.word	0x000a2b29
   9d6cc:	40390000 	.word	0x40390000
   9d6d0:	3ff00000 	.word	0x3ff00000
   9d6d4:	000a2e25 	.word	0x000a2e25
   9d6d8:	40240000 	.word	0x40240000
   9d6dc:	000a30f1 	.word	0x000a30f1
   9d6e0:	000a30b5 	.word	0x000a30b5
   9d6e4:	000a37c9 	.word	0x000a37c9
   9d6e8:	42120000 	.word	0x42120000
   9d6ec:	000a378d 	.word	0x000a378d
   9d6f0:	42160000 	.word	0x42160000
   9d6f4:	20072828 	.word	0x20072828

0009d6f8 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   9d6f8:	b580      	push	{r7, lr}
   9d6fa:	b082      	sub	sp, #8
   9d6fc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   9d6fe:	2300      	movs	r3, #0
   9d700:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   9d702:	2012      	movs	r0, #18
   9d704:	4b03      	ldr	r3, [pc, #12]	; (9d714 <Cl_DprepSelectDialysateInlet+0x1c>)
   9d706:	4798      	blx	r3
		return Cl_RetVal;
   9d708:	79fb      	ldrb	r3, [r7, #7]
	}
   9d70a:	4618      	mov	r0, r3
   9d70c:	3708      	adds	r7, #8
   9d70e:	46bd      	mov	sp, r7
   9d710:	bd80      	pop	{r7, pc}
   9d712:	bf00      	nop
   9d714:	000974f1 	.word	0x000974f1

0009d718 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   9d718:	b480      	push	{r7}
   9d71a:	b083      	sub	sp, #12
   9d71c:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9d71e:	2300      	movs	r3, #0
   9d720:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   9d722:	4b0d      	ldr	r3, [pc, #52]	; (9d758 <UpdateDprepFillingMinuteTick+0x40>)
   9d724:	2200      	movs	r2, #0
   9d726:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   9d728:	4b0c      	ldr	r3, [pc, #48]	; (9d75c <UpdateDprepFillingMinuteTick+0x44>)
   9d72a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d72e:	b29b      	uxth	r3, r3
   9d730:	3301      	adds	r3, #1
   9d732:	b29b      	uxth	r3, r3
   9d734:	b21a      	sxth	r2, r3
   9d736:	4b09      	ldr	r3, [pc, #36]	; (9d75c <UpdateDprepFillingMinuteTick+0x44>)
   9d738:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   9d73a:	4b09      	ldr	r3, [pc, #36]	; (9d760 <UpdateDprepFillingMinuteTick+0x48>)
   9d73c:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d740:	b29b      	uxth	r3, r3
   9d742:	3301      	adds	r3, #1
   9d744:	b29b      	uxth	r3, r3
   9d746:	b21a      	sxth	r2, r3
   9d748:	4b05      	ldr	r3, [pc, #20]	; (9d760 <UpdateDprepFillingMinuteTick+0x48>)
   9d74a:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   9d74c:	79fb      	ldrb	r3, [r7, #7]
					

}
   9d74e:	4618      	mov	r0, r3
   9d750:	370c      	adds	r7, #12
   9d752:	46bd      	mov	sp, r7
   9d754:	bc80      	pop	{r7}
   9d756:	4770      	bx	lr
   9d758:	2007280e 	.word	0x2007280e
   9d75c:	20072810 	.word	0x20072810
   9d760:	20072812 	.word	0x20072812

0009d764 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   9d764:	b580      	push	{r7, lr}
   9d766:	b082      	sub	sp, #8
   9d768:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   9d76a:	2300      	movs	r3, #0
   9d76c:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9d76e:	4b0f      	ldr	r3, [pc, #60]	; (9d7ac <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   9d770:	2200      	movs	r2, #0
   9d772:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   9d774:	4b0e      	ldr	r3, [pc, #56]	; (9d7b0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9d776:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d77a:	b29b      	uxth	r3, r3
   9d77c:	3301      	adds	r3, #1
   9d77e:	b29b      	uxth	r3, r3
   9d780:	b21a      	sxth	r2, r3
   9d782:	4b0b      	ldr	r3, [pc, #44]	; (9d7b0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9d784:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   9d786:	4b0b      	ldr	r3, [pc, #44]	; (9d7b4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9d788:	f9b3 3000 	ldrsh.w	r3, [r3]
   9d78c:	b29b      	uxth	r3, r3
   9d78e:	3301      	adds	r3, #1
   9d790:	b29b      	uxth	r3, r3
   9d792:	b21a      	sxth	r2, r3
   9d794:	4b07      	ldr	r3, [pc, #28]	; (9d7b4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9d796:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   9d798:	4b07      	ldr	r3, [pc, #28]	; (9d7b8 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   9d79a:	4798      	blx	r3
   9d79c:	4603      	mov	r3, r0
   9d79e:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   9d7a0:	79fb      	ldrb	r3, [r7, #7]
	

}
   9d7a2:	4618      	mov	r0, r3
   9d7a4:	3708      	adds	r7, #8
   9d7a6:	46bd      	mov	sp, r7
   9d7a8:	bd80      	pop	{r7, pc}
   9d7aa:	bf00      	nop
   9d7ac:	2007281a 	.word	0x2007281a
   9d7b0:	2007281c 	.word	0x2007281c
   9d7b4:	2007281e 	.word	0x2007281e
   9d7b8:	00088679 	.word	0x00088679
   9d7bc:	00000000 	.word	0x00000000

0009d7c0 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   9d7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   9d7c2:	b099      	sub	sp, #100	; 0x64
   9d7c4:	af00      	add	r7, sp, #0
   9d7c6:	4603      	mov	r3, r0
   9d7c8:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9d7ca:	f107 0314 	add.w	r3, r7, #20
   9d7ce:	2228      	movs	r2, #40	; 0x28
   9d7d0:	2100      	movs	r1, #0
   9d7d2:	4618      	mov	r0, r3
   9d7d4:	4b9c      	ldr	r3, [pc, #624]	; (9da48 <Cl_Dprep_SendPrepStateData+0x288>)
   9d7d6:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0;
   9d7d8:	2300      	movs	r3, #0
   9d7da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   9d7de:	2300      	movs	r3, #0
   9d7e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
   9d7e4:	2300      	movs	r3, #0
   9d7e6:	817b      	strh	r3, [r7, #10]
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0,apt=0,vpt=0,TMP =0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9d7e8:	2300      	movs	r3, #0
   9d7ea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	Cl_Uint8Type count = 0;
   9d7ee:	2300      	movs	r3, #0
   9d7f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d7f4:	234d      	movs	r3, #77	; 0x4d
   9d7f6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   9d7fa:	232a      	movs	r3, #42	; 0x2a
   9d7fc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					systemdataarray[0] = datatype;
   9d800:	79fb      	ldrb	r3, [r7, #7]
   9d802:	753b      	strb	r3, [r7, #20]
					count++;
   9d804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9d808:	3301      	adds	r3, #1
   9d80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   9d80e:	f107 030a 	add.w	r3, r7, #10
   9d812:	4619      	mov	r1, r3
   9d814:	2014      	movs	r0, #20
   9d816:	4b8d      	ldr	r3, [pc, #564]	; (9da4c <Cl_Dprep_SendPrepStateData+0x28c>)
   9d818:	4798      	blx	r3
// 							uint16_t temp = res_temp_value/10;
// //							temp = temp - 3.1 + 1.4;										// sensor offset 
// //							temp = temp - 3.1 -2;										// sensor offset 
// //							tmp3 =(tmp3*5 + temp)/6;
// 							tmp3 = temp - 0.4;
							tmp3 = (float)sensordata/10;
   9d81a:	897a      	ldrh	r2, [r7, #10]
   9d81c:	4b8c      	ldr	r3, [pc, #560]	; (9da50 <Cl_Dprep_SendPrepStateData+0x290>)
   9d81e:	4610      	mov	r0, r2
   9d820:	4798      	blx	r3
   9d822:	4602      	mov	r2, r0
   9d824:	4b8b      	ldr	r3, [pc, #556]	; (9da54 <Cl_Dprep_SendPrepStateData+0x294>)
   9d826:	498c      	ldr	r1, [pc, #560]	; (9da58 <Cl_Dprep_SendPrepStateData+0x298>)
   9d828:	4610      	mov	r0, r2
   9d82a:	4798      	blx	r3
   9d82c:	4603      	mov	r3, r0
   9d82e:	461a      	mov	r2, r3
   9d830:	4b8a      	ldr	r3, [pc, #552]	; (9da5c <Cl_Dprep_SendPrepStateData+0x29c>)
   9d832:	601a      	str	r2, [r3, #0]

							
						}
						
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   9d834:	f107 030a 	add.w	r3, r7, #10
   9d838:	4619      	mov	r1, r3
   9d83a:	2007      	movs	r0, #7
   9d83c:	4b83      	ldr	r3, [pc, #524]	; (9da4c <Cl_Dprep_SendPrepStateData+0x28c>)
   9d83e:	4798      	blx	r3
					{
					
						float cond_comp=0;
   9d840:	f04f 0300 	mov.w	r3, #0
   9d844:	657b      	str	r3, [r7, #84]	; 0x54
						float temp2=0;
   9d846:	f04f 0300 	mov.w	r3, #0
   9d84a:	653b      	str	r3, [r7, #80]	; 0x50
						float	 cond1,	cond_final, cond1x100, cond_final_X10000;
					//	temp2 = temp * 0.8036;
					sensordata = sensordata/10;
   9d84c:	897b      	ldrh	r3, [r7, #10]
   9d84e:	4a84      	ldr	r2, [pc, #528]	; (9da60 <Cl_Dprep_SendPrepStateData+0x2a0>)
   9d850:	fba2 2303 	umull	r2, r3, r2, r3
   9d854:	08db      	lsrs	r3, r3, #3
   9d856:	b29b      	uxth	r3, r3
   9d858:	817b      	strh	r3, [r7, #10]
						if (sensordata > 50)
   9d85a:	897b      	ldrh	r3, [r7, #10]
   9d85c:	2b32      	cmp	r3, #50	; 0x32
   9d85e:	f240 811b 	bls.w	9da98 <Cl_Dprep_SendPrepStateData+0x2d8>
						//	cond =(cond*5 + cond_final_cs3)/6;
						
								
								//	sensordata  = 25600;
								
								cond1 = sensordata/100;
   9d862:	897b      	ldrh	r3, [r7, #10]
   9d864:	4a7f      	ldr	r2, [pc, #508]	; (9da64 <Cl_Dprep_SendPrepStateData+0x2a4>)
   9d866:	fba2 2303 	umull	r2, r3, r2, r3
   9d86a:	095b      	lsrs	r3, r3, #5
   9d86c:	b29b      	uxth	r3, r3
   9d86e:	461a      	mov	r2, r3
   9d870:	4b7d      	ldr	r3, [pc, #500]	; (9da68 <Cl_Dprep_SendPrepStateData+0x2a8>)
   9d872:	4610      	mov	r0, r2
   9d874:	4798      	blx	r3
   9d876:	4603      	mov	r3, r0
   9d878:	64fb      	str	r3, [r7, #76]	; 0x4c
								cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   9d87a:	4b7c      	ldr	r3, [pc, #496]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d87c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   9d87e:	4798      	blx	r3
   9d880:	4c7b      	ldr	r4, [pc, #492]	; (9da70 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9d882:	a365      	add	r3, pc, #404	; (adr r3, 9da18 <Cl_Dprep_SendPrepStateData+0x258>)
   9d884:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d888:	47a0      	blx	r4
   9d88a:	4603      	mov	r3, r0
   9d88c:	460c      	mov	r4, r1
   9d88e:	461d      	mov	r5, r3
   9d890:	4626      	mov	r6, r4
   9d892:	4b76      	ldr	r3, [pc, #472]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d894:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   9d896:	4798      	blx	r3
   9d898:	4602      	mov	r2, r0
   9d89a:	460b      	mov	r3, r1
   9d89c:	4c74      	ldr	r4, [pc, #464]	; (9da70 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9d89e:	4628      	mov	r0, r5
   9d8a0:	4631      	mov	r1, r6
   9d8a2:	47a0      	blx	r4
   9d8a4:	4603      	mov	r3, r0
   9d8a6:	460c      	mov	r4, r1
   9d8a8:	461d      	mov	r5, r3
   9d8aa:	4626      	mov	r6, r4
   9d8ac:	4b6f      	ldr	r3, [pc, #444]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d8ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   9d8b0:	4798      	blx	r3
   9d8b2:	4c6f      	ldr	r4, [pc, #444]	; (9da70 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9d8b4:	a35a      	add	r3, pc, #360	; (adr r3, 9da20 <Cl_Dprep_SendPrepStateData+0x260>)
   9d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d8ba:	47a0      	blx	r4
   9d8bc:	4603      	mov	r3, r0
   9d8be:	460c      	mov	r4, r1
   9d8c0:	461a      	mov	r2, r3
   9d8c2:	4623      	mov	r3, r4
   9d8c4:	4c6b      	ldr	r4, [pc, #428]	; (9da74 <Cl_Dprep_SendPrepStateData+0x2b4>)
   9d8c6:	4628      	mov	r0, r5
   9d8c8:	4631      	mov	r1, r6
   9d8ca:	47a0      	blx	r4
   9d8cc:	4603      	mov	r3, r0
   9d8ce:	460c      	mov	r4, r1
   9d8d0:	4618      	mov	r0, r3
   9d8d2:	4621      	mov	r1, r4
   9d8d4:	4c67      	ldr	r4, [pc, #412]	; (9da74 <Cl_Dprep_SendPrepStateData+0x2b4>)
   9d8d6:	a354      	add	r3, pc, #336	; (adr r3, 9da28 <Cl_Dprep_SendPrepStateData+0x268>)
   9d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d8dc:	47a0      	blx	r4
   9d8de:	4603      	mov	r3, r0
   9d8e0:	460c      	mov	r4, r1
   9d8e2:	4618      	mov	r0, r3
   9d8e4:	4621      	mov	r1, r4
   9d8e6:	4c63      	ldr	r4, [pc, #396]	; (9da74 <Cl_Dprep_SendPrepStateData+0x2b4>)
   9d8e8:	a351      	add	r3, pc, #324	; (adr r3, 9da30 <Cl_Dprep_SendPrepStateData+0x270>)
   9d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d8ee:	47a0      	blx	r4
   9d8f0:	4603      	mov	r3, r0
   9d8f2:	460c      	mov	r4, r1
   9d8f4:	4619      	mov	r1, r3
   9d8f6:	4622      	mov	r2, r4
   9d8f8:	4b5f      	ldr	r3, [pc, #380]	; (9da78 <Cl_Dprep_SendPrepStateData+0x2b8>)
   9d8fa:	4608      	mov	r0, r1
   9d8fc:	4611      	mov	r1, r2
   9d8fe:	4798      	blx	r3
   9d900:	4603      	mov	r3, r0
   9d902:	64bb      	str	r3, [r7, #72]	; 0x48
								cond1x100 = cond_final*100; ;
   9d904:	4b5d      	ldr	r3, [pc, #372]	; (9da7c <Cl_Dprep_SendPrepStateData+0x2bc>)
   9d906:	495e      	ldr	r1, [pc, #376]	; (9da80 <Cl_Dprep_SendPrepStateData+0x2c0>)
   9d908:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   9d90a:	4798      	blx	r3
   9d90c:	4603      	mov	r3, r0
   9d90e:	647b      	str	r3, [r7, #68]	; 0x44
								cond_final_X10000= (cond1x100/(1+(tmp3/10  -25.0)*0.021));
   9d910:	4b56      	ldr	r3, [pc, #344]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d912:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9d914:	4798      	blx	r3
   9d916:	4605      	mov	r5, r0
   9d918:	460e      	mov	r6, r1
   9d91a:	4b50      	ldr	r3, [pc, #320]	; (9da5c <Cl_Dprep_SendPrepStateData+0x29c>)
   9d91c:	681a      	ldr	r2, [r3, #0]
   9d91e:	4b4d      	ldr	r3, [pc, #308]	; (9da54 <Cl_Dprep_SendPrepStateData+0x294>)
   9d920:	494d      	ldr	r1, [pc, #308]	; (9da58 <Cl_Dprep_SendPrepStateData+0x298>)
   9d922:	4610      	mov	r0, r2
   9d924:	4798      	blx	r3
   9d926:	4603      	mov	r3, r0
   9d928:	461a      	mov	r2, r3
   9d92a:	4b50      	ldr	r3, [pc, #320]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d92c:	4610      	mov	r0, r2
   9d92e:	4798      	blx	r3
   9d930:	4c54      	ldr	r4, [pc, #336]	; (9da84 <Cl_Dprep_SendPrepStateData+0x2c4>)
   9d932:	f04f 0200 	mov.w	r2, #0
   9d936:	4b54      	ldr	r3, [pc, #336]	; (9da88 <Cl_Dprep_SendPrepStateData+0x2c8>)
   9d938:	47a0      	blx	r4
   9d93a:	4603      	mov	r3, r0
   9d93c:	460c      	mov	r4, r1
   9d93e:	4618      	mov	r0, r3
   9d940:	4621      	mov	r1, r4
   9d942:	4c4b      	ldr	r4, [pc, #300]	; (9da70 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9d944:	a33c      	add	r3, pc, #240	; (adr r3, 9da38 <Cl_Dprep_SendPrepStateData+0x278>)
   9d946:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d94a:	47a0      	blx	r4
   9d94c:	4603      	mov	r3, r0
   9d94e:	460c      	mov	r4, r1
   9d950:	4618      	mov	r0, r3
   9d952:	4621      	mov	r1, r4
   9d954:	4c47      	ldr	r4, [pc, #284]	; (9da74 <Cl_Dprep_SendPrepStateData+0x2b4>)
   9d956:	f04f 0200 	mov.w	r2, #0
   9d95a:	4b4c      	ldr	r3, [pc, #304]	; (9da8c <Cl_Dprep_SendPrepStateData+0x2cc>)
   9d95c:	47a0      	blx	r4
   9d95e:	4603      	mov	r3, r0
   9d960:	460c      	mov	r4, r1
   9d962:	461a      	mov	r2, r3
   9d964:	4623      	mov	r3, r4
   9d966:	4c4a      	ldr	r4, [pc, #296]	; (9da90 <Cl_Dprep_SendPrepStateData+0x2d0>)
   9d968:	4628      	mov	r0, r5
   9d96a:	4631      	mov	r1, r6
   9d96c:	47a0      	blx	r4
   9d96e:	4603      	mov	r3, r0
   9d970:	460c      	mov	r4, r1
   9d972:	4619      	mov	r1, r3
   9d974:	4622      	mov	r2, r4
   9d976:	4b40      	ldr	r3, [pc, #256]	; (9da78 <Cl_Dprep_SendPrepStateData+0x2b8>)
   9d978:	4608      	mov	r0, r1
   9d97a:	4611      	mov	r1, r2
   9d97c:	4798      	blx	r3
   9d97e:	4603      	mov	r3, r0
   9d980:	643b      	str	r3, [r7, #64]	; 0x40
								cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   9d982:	4b3a      	ldr	r3, [pc, #232]	; (9da6c <Cl_Dprep_SendPrepStateData+0x2ac>)
   9d984:	6c38      	ldr	r0, [r7, #64]	; 0x40
   9d986:	4798      	blx	r3
   9d988:	4c39      	ldr	r4, [pc, #228]	; (9da70 <Cl_Dprep_SendPrepStateData+0x2b0>)
   9d98a:	a32d      	add	r3, pc, #180	; (adr r3, 9da40 <Cl_Dprep_SendPrepStateData+0x280>)
   9d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d990:	47a0      	blx	r4
   9d992:	4603      	mov	r3, r0
   9d994:	460c      	mov	r4, r1
   9d996:	4619      	mov	r1, r3
   9d998:	4622      	mov	r2, r4
   9d99a:	4b37      	ldr	r3, [pc, #220]	; (9da78 <Cl_Dprep_SendPrepStateData+0x2b8>)
   9d99c:	4608      	mov	r0, r1
   9d99e:	4611      	mov	r1, r2
   9d9a0:	4798      	blx	r3
   9d9a2:	4603      	mov	r3, r0
   9d9a4:	643b      	str	r3, [r7, #64]	; 0x40
								
								
							//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
							//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
								tempdata.word = (cond_final_X10000/10);
   9d9a6:	4b2b      	ldr	r3, [pc, #172]	; (9da54 <Cl_Dprep_SendPrepStateData+0x294>)
   9d9a8:	492b      	ldr	r1, [pc, #172]	; (9da58 <Cl_Dprep_SendPrepStateData+0x298>)
   9d9aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   9d9ac:	4798      	blx	r3
   9d9ae:	4603      	mov	r3, r0
   9d9b0:	461a      	mov	r2, r3
   9d9b2:	4b38      	ldr	r3, [pc, #224]	; (9da94 <Cl_Dprep_SendPrepStateData+0x2d4>)
   9d9b4:	4610      	mov	r0, r2
   9d9b6:	4798      	blx	r3
   9d9b8:	4603      	mov	r3, r0
   9d9ba:	60fb      	str	r3, [r7, #12]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   9d9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9d9c0:	1c5a      	adds	r2, r3, #1
   9d9c2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9d9c6:	7b3a      	ldrb	r2, [r7, #12]
   9d9c8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9d9cc:	440b      	add	r3, r1
   9d9ce:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[1];
   9d9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9d9d6:	1c5a      	adds	r2, r3, #1
   9d9d8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9d9dc:	7b7a      	ldrb	r2, [r7, #13]
   9d9de:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9d9e2:	440b      	add	r3, r1
   9d9e4:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[2];
   9d9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9d9ec:	1c5a      	adds	r2, r3, #1
   9d9ee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9d9f2:	7bba      	ldrb	r2, [r7, #14]
   9d9f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9d9f8:	440b      	add	r3, r1
   9d9fa:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[3];
   9d9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9da02:	1c5a      	adds	r2, r3, #1
   9da04:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9da08:	7bfa      	ldrb	r2, [r7, #15]
   9da0a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9da0e:	440b      	add	r3, r1
   9da10:	f803 2c4c 	strb.w	r2, [r3, #-76]
   9da14:	e06e      	b.n	9daf4 <Cl_Dprep_SendPrepStateData+0x334>
   9da16:	bf00      	nop
   9da18:	eb1c432d 	.word	0xeb1c432d
   9da1c:	3f1a36e2 	.word	0x3f1a36e2
   9da20:	d2f1a9fc 	.word	0xd2f1a9fc
   9da24:	3fa0624d 	.word	0x3fa0624d
   9da28:	51eb851f 	.word	0x51eb851f
   9da2c:	3fed1eb8 	.word	0x3fed1eb8
   9da30:	9999999a 	.word	0x9999999a
   9da34:	3fd99999 	.word	0x3fd99999
   9da38:	24dd2f1b 	.word	0x24dd2f1b
   9da3c:	3f958106 	.word	0x3f958106
   9da40:	33333333 	.word	0x33333333
   9da44:	40153333 	.word	0x40153333
   9da48:	000a39a5 	.word	0x000a39a5
   9da4c:	0008d61d 	.word	0x0008d61d
   9da50:	000a33a1 	.word	0x000a33a1
   9da54:	000a35b9 	.word	0x000a35b9
   9da58:	41200000 	.word	0x41200000
   9da5c:	20072848 	.word	0x20072848
   9da60:	cccccccd 	.word	0xcccccccd
   9da64:	51eb851f 	.word	0x51eb851f
   9da68:	000a33a9 	.word	0x000a33a9
   9da6c:	000a2b29 	.word	0x000a2b29
   9da70:	000a2bd1 	.word	0x000a2bd1
   9da74:	000a286d 	.word	0x000a286d
   9da78:	000a3195 	.word	0x000a3195
   9da7c:	000a3451 	.word	0x000a3451
   9da80:	42c80000 	.word	0x42c80000
   9da84:	000a2869 	.word	0x000a2869
   9da88:	40390000 	.word	0x40390000
   9da8c:	3ff00000 	.word	0x3ff00000
   9da90:	000a2e25 	.word	0x000a2e25
   9da94:	000a3829 	.word	0x000a3829
							}
							else
							{
								tempdata.word = 0;
   9da98:	2300      	movs	r3, #0
   9da9a:	60fb      	str	r3, [r7, #12]
							systemdataarray[count++] = tempdata.bytearray[0];
   9da9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9daa0:	1c5a      	adds	r2, r3, #1
   9daa2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9daa6:	7b3a      	ldrb	r2, [r7, #12]
   9daa8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9daac:	440b      	add	r3, r1
   9daae:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[1];
   9dab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dab6:	1c5a      	adds	r2, r3, #1
   9dab8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dabc:	7b7a      	ldrb	r2, [r7, #13]
   9dabe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dac2:	440b      	add	r3, r1
   9dac4:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[2];
   9dac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dacc:	1c5a      	adds	r2, r3, #1
   9dace:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dad2:	7bba      	ldrb	r2, [r7, #14]
   9dad4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dad8:	440b      	add	r3, r1
   9dada:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[3];
   9dade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dae2:	1c5a      	adds	r2, r3, #1
   9dae4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dae8:	7bfa      	ldrb	r2, [r7, #15]
   9daea:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9daee:	440b      	add	r3, r1
   9daf0:	f803 2c4c 	strb.w	r2, [r3, #-76]
		
					}
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   9daf4:	4ba8      	ldr	r3, [pc, #672]	; (9dd98 <Cl_Dprep_SendPrepStateData+0x5d8>)
   9daf6:	681a      	ldr	r2, [r3, #0]
   9daf8:	4ba8      	ldr	r3, [pc, #672]	; (9dd9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   9dafa:	4610      	mov	r0, r2
   9dafc:	4798      	blx	r3
   9dafe:	4603      	mov	r3, r0
   9db00:	60fb      	str	r3, [r7, #12]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   9db02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9db06:	1c5a      	adds	r2, r3, #1
   9db08:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9db0c:	7b3a      	ldrb	r2, [r7, #12]
   9db0e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9db12:	440b      	add	r3, r1
   9db14:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1];
   9db18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9db1c:	1c5a      	adds	r2, r3, #1
   9db1e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9db22:	7b7a      	ldrb	r2, [r7, #13]
   9db24:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9db28:	440b      	add	r3, r1
   9db2a:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2];
   9db2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9db32:	1c5a      	adds	r2, r3, #1
   9db34:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9db38:	7bba      	ldrb	r2, [r7, #14]
   9db3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9db3e:	440b      	add	r3, r1
   9db40:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3];
   9db44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9db48:	1c5a      	adds	r2, r3, #1
   9db4a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9db4e:	7bfa      	ldrb	r2, [r7, #15]
   9db50:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9db54:	440b      	add	r3, r1
   9db56:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   9db5a:	f107 030c 	add.w	r3, r7, #12
   9db5e:	4619      	mov	r1, r3
   9db60:	200b      	movs	r0, #11
   9db62:	4b8f      	ldr	r3, [pc, #572]	; (9dda0 <Cl_Dprep_SendPrepStateData+0x5e0>)
   9db64:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9db66:	89bb      	ldrh	r3, [r7, #12]
   9db68:	461a      	mov	r2, r3
   9db6a:	4b8e      	ldr	r3, [pc, #568]	; (9dda4 <Cl_Dprep_SendPrepStateData+0x5e4>)
   9db6c:	4610      	mov	r0, r2
   9db6e:	4798      	blx	r3
   9db70:	4c8d      	ldr	r4, [pc, #564]	; (9dda8 <Cl_Dprep_SendPrepStateData+0x5e8>)
   9db72:	a387      	add	r3, pc, #540	; (adr r3, 9dd90 <Cl_Dprep_SendPrepStateData+0x5d0>)
   9db74:	e9d3 2300 	ldrd	r2, r3, [r3]
   9db78:	47a0      	blx	r4
   9db7a:	4603      	mov	r3, r0
   9db7c:	460c      	mov	r4, r1
   9db7e:	4619      	mov	r1, r3
   9db80:	4622      	mov	r2, r4
   9db82:	4b8a      	ldr	r3, [pc, #552]	; (9ddac <Cl_Dprep_SendPrepStateData+0x5ec>)
   9db84:	4608      	mov	r0, r1
   9db86:	4611      	mov	r1, r2
   9db88:	4798      	blx	r3
   9db8a:	4603      	mov	r3, r0
   9db8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_apt(sensordatamillivolts);
   9db8e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   9db92:	4618      	mov	r0, r3
   9db94:	4b86      	ldr	r3, [pc, #536]	; (9ddb0 <Cl_Dprep_SendPrepStateData+0x5f0>)
   9db96:	4798      	blx	r3
						apt =(apt*5 + pressure_final_apt)/6;
   9db98:	4b86      	ldr	r3, [pc, #536]	; (9ddb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   9db9a:	681a      	ldr	r2, [r3, #0]
   9db9c:	4b86      	ldr	r3, [pc, #536]	; (9ddb8 <Cl_Dprep_SendPrepStateData+0x5f8>)
   9db9e:	4987      	ldr	r1, [pc, #540]	; (9ddbc <Cl_Dprep_SendPrepStateData+0x5fc>)
   9dba0:	4610      	mov	r0, r2
   9dba2:	4798      	blx	r3
   9dba4:	4603      	mov	r3, r0
   9dba6:	4618      	mov	r0, r3
   9dba8:	4b85      	ldr	r3, [pc, #532]	; (9ddc0 <Cl_Dprep_SendPrepStateData+0x600>)
   9dbaa:	681a      	ldr	r2, [r3, #0]
   9dbac:	4b85      	ldr	r3, [pc, #532]	; (9ddc4 <Cl_Dprep_SendPrepStateData+0x604>)
   9dbae:	4611      	mov	r1, r2
   9dbb0:	4798      	blx	r3
   9dbb2:	4603      	mov	r3, r0
   9dbb4:	461a      	mov	r2, r3
   9dbb6:	4b84      	ldr	r3, [pc, #528]	; (9ddc8 <Cl_Dprep_SendPrepStateData+0x608>)
   9dbb8:	4984      	ldr	r1, [pc, #528]	; (9ddcc <Cl_Dprep_SendPrepStateData+0x60c>)
   9dbba:	4610      	mov	r0, r2
   9dbbc:	4798      	blx	r3
   9dbbe:	4603      	mov	r3, r0
   9dbc0:	461a      	mov	r2, r3
   9dbc2:	4b7c      	ldr	r3, [pc, #496]	; (9ddb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   9dbc4:	601a      	str	r2, [r3, #0]
						tempdata.word	 = apt;
   9dbc6:	4b7b      	ldr	r3, [pc, #492]	; (9ddb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   9dbc8:	681a      	ldr	r2, [r3, #0]
   9dbca:	4b74      	ldr	r3, [pc, #464]	; (9dd9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   9dbcc:	4610      	mov	r0, r2
   9dbce:	4798      	blx	r3
   9dbd0:	4603      	mov	r3, r0
   9dbd2:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9dbd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dbd8:	1c5a      	adds	r2, r3, #1
   9dbda:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dbde:	7b3a      	ldrb	r2, [r7, #12]
   9dbe0:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dbe4:	440b      	add	r3, r1
   9dbe6:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9dbea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dbee:	1c5a      	adds	r2, r3, #1
   9dbf0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dbf4:	7b7a      	ldrb	r2, [r7, #13]
   9dbf6:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dbfa:	440b      	add	r3, r1
   9dbfc:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9dc00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dc04:	1c5a      	adds	r2, r3, #1
   9dc06:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dc0a:	7bba      	ldrb	r2, [r7, #14]
   9dc0c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dc10:	440b      	add	r3, r1
   9dc12:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9dc16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dc1a:	1c5a      	adds	r2, r3, #1
   9dc1c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dc20:	7bfa      	ldrb	r2, [r7, #15]
   9dc22:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dc26:	440b      	add	r3, r1
   9dc28:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   9dc2c:	f107 030c 	add.w	r3, r7, #12
   9dc30:	4619      	mov	r1, r3
   9dc32:	200c      	movs	r0, #12
   9dc34:	4b5a      	ldr	r3, [pc, #360]	; (9dda0 <Cl_Dprep_SendPrepStateData+0x5e0>)
   9dc36:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9dc38:	89bb      	ldrh	r3, [r7, #12]
   9dc3a:	461a      	mov	r2, r3
   9dc3c:	4b59      	ldr	r3, [pc, #356]	; (9dda4 <Cl_Dprep_SendPrepStateData+0x5e4>)
   9dc3e:	4610      	mov	r0, r2
   9dc40:	4798      	blx	r3
   9dc42:	4c59      	ldr	r4, [pc, #356]	; (9dda8 <Cl_Dprep_SendPrepStateData+0x5e8>)
   9dc44:	a352      	add	r3, pc, #328	; (adr r3, 9dd90 <Cl_Dprep_SendPrepStateData+0x5d0>)
   9dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dc4a:	47a0      	blx	r4
   9dc4c:	4603      	mov	r3, r0
   9dc4e:	460c      	mov	r4, r1
   9dc50:	4619      	mov	r1, r3
   9dc52:	4622      	mov	r2, r4
   9dc54:	4b55      	ldr	r3, [pc, #340]	; (9ddac <Cl_Dprep_SendPrepStateData+0x5ec>)
   9dc56:	4608      	mov	r0, r1
   9dc58:	4611      	mov	r1, r2
   9dc5a:	4798      	blx	r3
   9dc5c:	4603      	mov	r3, r0
   9dc5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_vpt(sensordatamillivolts);
   9dc60:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   9dc64:	4618      	mov	r0, r3
   9dc66:	4b5a      	ldr	r3, [pc, #360]	; (9ddd0 <Cl_Dprep_SendPrepStateData+0x610>)
   9dc68:	4798      	blx	r3
						vpt =(vpt*5 + pressure_final_vpt)/6;
   9dc6a:	4b5a      	ldr	r3, [pc, #360]	; (9ddd4 <Cl_Dprep_SendPrepStateData+0x614>)
   9dc6c:	681a      	ldr	r2, [r3, #0]
   9dc6e:	4b52      	ldr	r3, [pc, #328]	; (9ddb8 <Cl_Dprep_SendPrepStateData+0x5f8>)
   9dc70:	4952      	ldr	r1, [pc, #328]	; (9ddbc <Cl_Dprep_SendPrepStateData+0x5fc>)
   9dc72:	4610      	mov	r0, r2
   9dc74:	4798      	blx	r3
   9dc76:	4603      	mov	r3, r0
   9dc78:	4618      	mov	r0, r3
   9dc7a:	4b57      	ldr	r3, [pc, #348]	; (9ddd8 <Cl_Dprep_SendPrepStateData+0x618>)
   9dc7c:	681a      	ldr	r2, [r3, #0]
   9dc7e:	4b51      	ldr	r3, [pc, #324]	; (9ddc4 <Cl_Dprep_SendPrepStateData+0x604>)
   9dc80:	4611      	mov	r1, r2
   9dc82:	4798      	blx	r3
   9dc84:	4603      	mov	r3, r0
   9dc86:	461a      	mov	r2, r3
   9dc88:	4b4f      	ldr	r3, [pc, #316]	; (9ddc8 <Cl_Dprep_SendPrepStateData+0x608>)
   9dc8a:	4950      	ldr	r1, [pc, #320]	; (9ddcc <Cl_Dprep_SendPrepStateData+0x60c>)
   9dc8c:	4610      	mov	r0, r2
   9dc8e:	4798      	blx	r3
   9dc90:	4603      	mov	r3, r0
   9dc92:	461a      	mov	r2, r3
   9dc94:	4b4f      	ldr	r3, [pc, #316]	; (9ddd4 <Cl_Dprep_SendPrepStateData+0x614>)
   9dc96:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (vpt);
   9dc98:	4b4e      	ldr	r3, [pc, #312]	; (9ddd4 <Cl_Dprep_SendPrepStateData+0x614>)
   9dc9a:	681a      	ldr	r2, [r3, #0]
   9dc9c:	4b3f      	ldr	r3, [pc, #252]	; (9dd9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   9dc9e:	4610      	mov	r0, r2
   9dca0:	4798      	blx	r3
   9dca2:	4603      	mov	r3, r0
   9dca4:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9dca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dcaa:	1c5a      	adds	r2, r3, #1
   9dcac:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dcb0:	7b3a      	ldrb	r2, [r7, #12]
   9dcb2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dcb6:	440b      	add	r3, r1
   9dcb8:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9dcbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dcc0:	1c5a      	adds	r2, r3, #1
   9dcc2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dcc6:	7b7a      	ldrb	r2, [r7, #13]
   9dcc8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dccc:	440b      	add	r3, r1
   9dcce:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9dcd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dcd6:	1c5a      	adds	r2, r3, #1
   9dcd8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dcdc:	7bba      	ldrb	r2, [r7, #14]
   9dcde:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dce2:	440b      	add	r3, r1
   9dce4:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9dce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dcec:	1c5a      	adds	r2, r3, #1
   9dcee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dcf2:	7bfa      	ldrb	r2, [r7, #15]
   9dcf4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dcf8:	440b      	add	r3, r1
   9dcfa:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   9dcfe:	79fb      	ldrb	r3, [r7, #7]
   9dd00:	2b04      	cmp	r3, #4
   9dd02:	d135      	bne.n	9dd70 <Cl_Dprep_SendPrepStateData+0x5b0>
					{
						TMP = 5000;
   9dd04:	4b35      	ldr	r3, [pc, #212]	; (9dddc <Cl_Dprep_SendPrepStateData+0x61c>)
   9dd06:	4a36      	ldr	r2, [pc, #216]	; (9dde0 <Cl_Dprep_SendPrepStateData+0x620>)
   9dd08:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (TMP);
   9dd0a:	4b34      	ldr	r3, [pc, #208]	; (9dddc <Cl_Dprep_SendPrepStateData+0x61c>)
   9dd0c:	681a      	ldr	r2, [r3, #0]
   9dd0e:	4b23      	ldr	r3, [pc, #140]	; (9dd9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   9dd10:	4610      	mov	r0, r2
   9dd12:	4798      	blx	r3
   9dd14:	4603      	mov	r3, r0
   9dd16:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   9dd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dd1c:	1c5a      	adds	r2, r3, #1
   9dd1e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dd22:	7b3a      	ldrb	r2, [r7, #12]
   9dd24:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dd28:	440b      	add	r3, r1
   9dd2a:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   9dd2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dd32:	1c5a      	adds	r2, r3, #1
   9dd34:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dd38:	7b7a      	ldrb	r2, [r7, #13]
   9dd3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dd3e:	440b      	add	r3, r1
   9dd40:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   9dd44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dd48:	1c5a      	adds	r2, r3, #1
   9dd4a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dd4e:	7bba      	ldrb	r2, [r7, #14]
   9dd50:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dd54:	440b      	add	r3, r1
   9dd56:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   9dd5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9dd5e:	1c5a      	adds	r2, r3, #1
   9dd60:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   9dd64:	7bfa      	ldrb	r2, [r7, #15]
   9dd66:	f107 0160 	add.w	r1, r7, #96	; 0x60
   9dd6a:	440b      	add	r3, r1
   9dd6c:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   9dd70:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
   9dd74:	f107 0314 	add.w	r3, r7, #20
   9dd78:	4619      	mov	r1, r3
   9dd7a:	202a      	movs	r0, #42	; 0x2a
   9dd7c:	4b19      	ldr	r3, [pc, #100]	; (9dde4 <Cl_Dprep_SendPrepStateData+0x624>)
   9dd7e:	4798      	blx	r3
   9dd80:	4603      	mov	r3, r0
   9dd82:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   9dd86:	2300      	movs	r3, #0
}
   9dd88:	4618      	mov	r0, r3
   9dd8a:	3764      	adds	r7, #100	; 0x64
   9dd8c:	46bd      	mov	sp, r7
   9dd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9dd90:	58e21965 	.word	0x58e21965
   9dd94:	3fe9b717 	.word	0x3fe9b717
   9dd98:	20072848 	.word	0x20072848
   9dd9c:	000a3829 	.word	0x000a3829
   9dda0:	0008d61d 	.word	0x0008d61d
   9dda4:	000a2b05 	.word	0x000a2b05
   9dda8:	000a2bd1 	.word	0x000a2bd1
   9ddac:	000a3155 	.word	0x000a3155
   9ddb0:	000840d1 	.word	0x000840d1
   9ddb4:	2007284c 	.word	0x2007284c
   9ddb8:	000a3451 	.word	0x000a3451
   9ddbc:	40a00000 	.word	0x40a00000
   9ddc0:	20072d64 	.word	0x20072d64
   9ddc4:	000a3241 	.word	0x000a3241
   9ddc8:	000a35b9 	.word	0x000a35b9
   9ddcc:	40c00000 	.word	0x40c00000
   9ddd0:	00084251 	.word	0x00084251
   9ddd4:	20072850 	.word	0x20072850
   9ddd8:	2007165c 	.word	0x2007165c
   9dddc:	20072854 	.word	0x20072854
   9dde0:	459c4000 	.word	0x459c4000
   9dde4:	0009926d 	.word	0x0009926d

0009dde8 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   9dde8:	b580      	push	{r7, lr}
   9ddea:	b082      	sub	sp, #8
   9ddec:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9ddee:	2300      	movs	r3, #0
   9ddf0:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   9ddf2:	4b38      	ldr	r3, [pc, #224]	; (9ded4 <Cl_Dprep_Stoppreparation+0xec>)
   9ddf4:	781b      	ldrb	r3, [r3, #0]
   9ddf6:	2b00      	cmp	r3, #0
   9ddf8:	d066      	beq.n	9dec8 <Cl_Dprep_Stoppreparation+0xe0>
   9ddfa:	4b36      	ldr	r3, [pc, #216]	; (9ded4 <Cl_Dprep_Stoppreparation+0xec>)
   9ddfc:	781b      	ldrb	r3, [r3, #0]
   9ddfe:	2b0b      	cmp	r3, #11
   9de00:	d062      	beq.n	9dec8 <Cl_Dprep_Stoppreparation+0xe0>
   9de02:	4b34      	ldr	r3, [pc, #208]	; (9ded4 <Cl_Dprep_Stoppreparation+0xec>)
   9de04:	781b      	ldrb	r3, [r3, #0]
   9de06:	2b0c      	cmp	r3, #12
   9de08:	d05e      	beq.n	9dec8 <Cl_Dprep_Stoppreparation+0xe0>
				{
					
					stability_counter = 0;
   9de0a:	4b33      	ldr	r3, [pc, #204]	; (9ded8 <Cl_Dprep_Stoppreparation+0xf0>)
   9de0c:	2200      	movs	r2, #0
   9de0e:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   9de10:	4b32      	ldr	r3, [pc, #200]	; (9dedc <Cl_Dprep_Stoppreparation+0xf4>)
   9de12:	2200      	movs	r2, #0
   9de14:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   9de16:	4b32      	ldr	r3, [pc, #200]	; (9dee0 <Cl_Dprep_Stoppreparation+0xf8>)
   9de18:	2200      	movs	r2, #0
   9de1a:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   9de1c:	4b31      	ldr	r3, [pc, #196]	; (9dee4 <Cl_Dprep_Stoppreparation+0xfc>)
   9de1e:	2200      	movs	r2, #0
   9de20:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   9de22:	4b31      	ldr	r3, [pc, #196]	; (9dee8 <Cl_Dprep_Stoppreparation+0x100>)
   9de24:	2200      	movs	r2, #0
   9de26:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   9de28:	4b30      	ldr	r3, [pc, #192]	; (9deec <Cl_Dprep_Stoppreparation+0x104>)
   9de2a:	2200      	movs	r2, #0
   9de2c:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   9de2e:	4b30      	ldr	r3, [pc, #192]	; (9def0 <Cl_Dprep_Stoppreparation+0x108>)
   9de30:	2200      	movs	r2, #0
   9de32:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   9de34:	4b2f      	ldr	r3, [pc, #188]	; (9def4 <Cl_Dprep_Stoppreparation+0x10c>)
   9de36:	2200      	movs	r2, #0
   9de38:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   9de3a:	4b2f      	ldr	r3, [pc, #188]	; (9def8 <Cl_Dprep_Stoppreparation+0x110>)
   9de3c:	2200      	movs	r2, #0
   9de3e:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   9de40:	4b2e      	ldr	r3, [pc, #184]	; (9defc <Cl_Dprep_Stoppreparation+0x114>)
   9de42:	2200      	movs	r2, #0
   9de44:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   9de46:	4b2e      	ldr	r3, [pc, #184]	; (9df00 <Cl_Dprep_Stoppreparation+0x118>)
   9de48:	2200      	movs	r2, #0
   9de4a:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   9de4c:	4b2d      	ldr	r3, [pc, #180]	; (9df04 <Cl_Dprep_Stoppreparation+0x11c>)
   9de4e:	2200      	movs	r2, #0
   9de50:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   9de52:	4b2d      	ldr	r3, [pc, #180]	; (9df08 <Cl_Dprep_Stoppreparation+0x120>)
   9de54:	2200      	movs	r2, #0
   9de56:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   9de58:	4b2c      	ldr	r3, [pc, #176]	; (9df0c <Cl_Dprep_Stoppreparation+0x124>)
   9de5a:	2200      	movs	r2, #0
   9de5c:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   9de5e:	4b2c      	ldr	r3, [pc, #176]	; (9df10 <Cl_Dprep_Stoppreparation+0x128>)
   9de60:	2200      	movs	r2, #0
   9de62:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9de64:	4b2b      	ldr	r3, [pc, #172]	; (9df14 <Cl_Dprep_Stoppreparation+0x12c>)
   9de66:	2200      	movs	r2, #0
   9de68:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9de6a:	4b2b      	ldr	r3, [pc, #172]	; (9df18 <Cl_Dprep_Stoppreparation+0x130>)
   9de6c:	2200      	movs	r2, #0
   9de6e:	801a      	strh	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   9de70:	4b2a      	ldr	r3, [pc, #168]	; (9df1c <Cl_Dprep_Stoppreparation+0x134>)
   9de72:	4798      	blx	r3
   9de74:	4603      	mov	r3, r0
   9de76:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   9de78:	2011      	movs	r0, #17
   9de7a:	4b29      	ldr	r3, [pc, #164]	; (9df20 <Cl_Dprep_Stoppreparation+0x138>)
   9de7c:	4798      	blx	r3
   9de7e:	4603      	mov	r3, r0
   9de80:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9de82:	4b28      	ldr	r3, [pc, #160]	; (9df24 <Cl_Dprep_Stoppreparation+0x13c>)
   9de84:	4798      	blx	r3
   9de86:	4603      	mov	r3, r0
   9de88:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9de8a:	2004      	movs	r0, #4
   9de8c:	4b26      	ldr	r3, [pc, #152]	; (9df28 <Cl_Dprep_Stoppreparation+0x140>)
   9de8e:	4798      	blx	r3
   9de90:	4603      	mov	r3, r0
   9de92:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9de94:	2100      	movs	r1, #0
   9de96:	2002      	movs	r0, #2
   9de98:	4b24      	ldr	r3, [pc, #144]	; (9df2c <Cl_Dprep_Stoppreparation+0x144>)
   9de9a:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   9de9c:	4b24      	ldr	r3, [pc, #144]	; (9df30 <Cl_Dprep_Stoppreparation+0x148>)
   9de9e:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   9dea0:	4b0c      	ldr	r3, [pc, #48]	; (9ded4 <Cl_Dprep_Stoppreparation+0xec>)
   9dea2:	781b      	ldrb	r3, [r3, #0]
   9dea4:	2b06      	cmp	r3, #6
   9dea6:	d104      	bne.n	9deb2 <Cl_Dprep_Stoppreparation+0xca>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9dea8:	2100      	movs	r1, #0
   9deaa:	2009      	movs	r0, #9
   9deac:	4b1f      	ldr	r3, [pc, #124]	; (9df2c <Cl_Dprep_Stoppreparation+0x144>)
   9deae:	4798      	blx	r3
   9deb0:	e007      	b.n	9dec2 <Cl_Dprep_Stoppreparation+0xda>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9deb2:	1dbb      	adds	r3, r7, #6
   9deb4:	2200      	movs	r2, #0
   9deb6:	4619      	mov	r1, r3
   9deb8:	202d      	movs	r0, #45	; 0x2d
   9deba:	4b1e      	ldr	r3, [pc, #120]	; (9df34 <Cl_Dprep_Stoppreparation+0x14c>)
   9debc:	4798      	blx	r3
   9debe:	4603      	mov	r3, r0
   9dec0:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   9dec2:	4b04      	ldr	r3, [pc, #16]	; (9ded4 <Cl_Dprep_Stoppreparation+0xec>)
   9dec4:	2200      	movs	r2, #0
   9dec6:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   9dec8:	2300      	movs	r3, #0
}
   9deca:	4618      	mov	r0, r3
   9decc:	3708      	adds	r7, #8
   9dece:	46bd      	mov	sp, r7
   9ded0:	bd80      	pop	{r7, pc}
   9ded2:	bf00      	nop
   9ded4:	2007282f 	.word	0x2007282f
   9ded8:	200727ec 	.word	0x200727ec
   9dedc:	200727f0 	.word	0x200727f0
   9dee0:	200727f4 	.word	0x200727f4
   9dee4:	200727f8 	.word	0x200727f8
   9dee8:	200727fc 	.word	0x200727fc
   9deec:	20072800 	.word	0x20072800
   9def0:	20072804 	.word	0x20072804
   9def4:	20072808 	.word	0x20072808
   9def8:	2007280e 	.word	0x2007280e
   9defc:	20072810 	.word	0x20072810
   9df00:	20072812 	.word	0x20072812
   9df04:	20072814 	.word	0x20072814
   9df08:	20072816 	.word	0x20072816
   9df0c:	20072818 	.word	0x20072818
   9df10:	2007281a 	.word	0x2007281a
   9df14:	2007281c 	.word	0x2007281c
   9df18:	2007281e 	.word	0x2007281e
   9df1c:	00097651 	.word	0x00097651
   9df20:	000976e1 	.word	0x000976e1
   9df24:	000974dd 	.word	0x000974dd
   9df28:	00088a8d 	.word	0x00088a8d
   9df2c:	00087c95 	.word	0x00087c95
   9df30:	0009f1a5 	.word	0x0009f1a5
   9df34:	0009926d 	.word	0x0009926d

0009df38 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   9df38:	b580      	push	{r7, lr}
   9df3a:	b082      	sub	sp, #8
   9df3c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9df3e:	2300      	movs	r3, #0
   9df40:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9df42:	234d      	movs	r3, #77	; 0x4d
   9df44:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9df46:	4b5f      	ldr	r3, [pc, #380]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df48:	2200      	movs	r2, #0
   9df4a:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   9df4c:	2001      	movs	r0, #1
   9df4e:	4b5e      	ldr	r3, [pc, #376]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df50:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   9df52:	4b5c      	ldr	r3, [pc, #368]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df54:	2200      	movs	r2, #0
   9df56:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   9df58:	4b5a      	ldr	r3, [pc, #360]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df5a:	2200      	movs	r2, #0
   9df5c:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9df5e:	2005      	movs	r0, #5
   9df60:	4b59      	ldr	r3, [pc, #356]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df62:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9df64:	2006      	movs	r0, #6
   9df66:	4b58      	ldr	r3, [pc, #352]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df68:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9df6a:	4b56      	ldr	r3, [pc, #344]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df6c:	2200      	movs	r2, #0
   9df6e:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9df70:	4b54      	ldr	r3, [pc, #336]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df72:	2200      	movs	r2, #0
   9df74:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9df76:	2003      	movs	r0, #3
   9df78:	4b53      	ldr	r3, [pc, #332]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df7a:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9df7c:	2004      	movs	r0, #4
   9df7e:	4b52      	ldr	r3, [pc, #328]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df80:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   9df82:	4b50      	ldr	r3, [pc, #320]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df84:	2200      	movs	r2, #0
   9df86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   9df8a:	202a      	movs	r0, #42	; 0x2a
   9df8c:	4b4e      	ldr	r3, [pc, #312]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df8e:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   9df90:	4b4c      	ldr	r3, [pc, #304]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9df92:	2200      	movs	r2, #0
   9df94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   9df98:	202c      	movs	r0, #44	; 0x2c
   9df9a:	4b4b      	ldr	r3, [pc, #300]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9df9c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   9df9e:	4b49      	ldr	r3, [pc, #292]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfa0:	2200      	movs	r2, #0
   9dfa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9dfa6:	4b47      	ldr	r3, [pc, #284]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfa8:	2200      	movs	r2, #0
   9dfaa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9dfae:	2008      	movs	r0, #8
   9dfb0:	4b45      	ldr	r3, [pc, #276]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9dfb2:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   9dfb4:	2007      	movs	r0, #7
   9dfb6:	4b44      	ldr	r3, [pc, #272]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9dfb8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   9dfba:	4b42      	ldr	r3, [pc, #264]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfbc:	2200      	movs	r2, #0
   9dfbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   9dfc2:	4b40      	ldr	r3, [pc, #256]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfc4:	2200      	movs	r2, #0
   9dfc6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   9dfca:	4b3e      	ldr	r3, [pc, #248]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfcc:	2200      	movs	r2, #0
   9dfce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   9dfd2:	4b3c      	ldr	r3, [pc, #240]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfd4:	2200      	movs	r2, #0
   9dfd6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9dfda:	4b3a      	ldr	r3, [pc, #232]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfdc:	2200      	movs	r2, #0
   9dfde:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   9dfe2:	4b38      	ldr	r3, [pc, #224]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfe4:	2200      	movs	r2, #0
   9dfe6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   9dfea:	4b36      	ldr	r3, [pc, #216]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dfec:	2200      	movs	r2, #0
   9dfee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   9dff2:	4b34      	ldr	r3, [pc, #208]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dff4:	2200      	movs	r2, #0
   9dff6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   9dffa:	4b32      	ldr	r3, [pc, #200]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9dffc:	2200      	movs	r2, #0
   9dffe:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   9e002:	4b30      	ldr	r3, [pc, #192]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e004:	2200      	movs	r2, #0
   9e006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9e00a:	4b2e      	ldr	r3, [pc, #184]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e00c:	2200      	movs	r2, #0
   9e00e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9e012:	4b2c      	ldr	r3, [pc, #176]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e014:	2200      	movs	r2, #0
   9e016:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9e01a:	2015      	movs	r0, #21
   9e01c:	4b2a      	ldr	r3, [pc, #168]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e01e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9e020:	2016      	movs	r0, #22
   9e022:	4b29      	ldr	r3, [pc, #164]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e024:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9e026:	4b27      	ldr	r3, [pc, #156]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e028:	2200      	movs	r2, #0
   9e02a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9e02e:	4b25      	ldr	r3, [pc, #148]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e030:	2200      	movs	r2, #0
   9e032:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9e036:	2017      	movs	r0, #23
   9e038:	4b23      	ldr	r3, [pc, #140]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e03a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9e03c:	2018      	movs	r0, #24
   9e03e:	4b22      	ldr	r3, [pc, #136]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e040:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9e042:	4b20      	ldr	r3, [pc, #128]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e044:	2200      	movs	r2, #0
   9e046:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9e04a:	4b1e      	ldr	r3, [pc, #120]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e04c:	2200      	movs	r2, #0
   9e04e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9e052:	2027      	movs	r0, #39	; 0x27
   9e054:	4b1c      	ldr	r3, [pc, #112]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e056:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9e058:	2028      	movs	r0, #40	; 0x28
   9e05a:	4b1b      	ldr	r3, [pc, #108]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e05c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9e05e:	4b19      	ldr	r3, [pc, #100]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e060:	2200      	movs	r2, #0
   9e062:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   9e066:	4b17      	ldr	r3, [pc, #92]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e068:	2200      	movs	r2, #0
   9e06a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   9e06e:	4b15      	ldr	r3, [pc, #84]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e070:	2200      	movs	r2, #0
   9e072:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   9e076:	200f      	movs	r0, #15
   9e078:	4b13      	ldr	r3, [pc, #76]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e07a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   9e07c:	2010      	movs	r0, #16
   9e07e:	4b12      	ldr	r3, [pc, #72]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e080:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9e082:	4b10      	ldr	r3, [pc, #64]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e084:	2200      	movs	r2, #0
   9e086:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   9e08a:	4b0e      	ldr	r3, [pc, #56]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e08c:	2200      	movs	r2, #0
   9e08e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9e092:	2011      	movs	r0, #17
   9e094:	4b0c      	ldr	r3, [pc, #48]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e096:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9e098:	2012      	movs	r0, #18
   9e09a:	4b0b      	ldr	r3, [pc, #44]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e09c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9e09e:	4b09      	ldr	r3, [pc, #36]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e0a0:	2200      	movs	r2, #0
   9e0a2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   9e0a6:	4b07      	ldr	r3, [pc, #28]	; (9e0c4 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9e0a8:	2200      	movs	r2, #0
   9e0aa:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   9e0ae:	2013      	movs	r0, #19
   9e0b0:	4b05      	ldr	r3, [pc, #20]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e0b2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   9e0b4:	2014      	movs	r0, #20
   9e0b6:	4b04      	ldr	r3, [pc, #16]	; (9e0c8 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9e0b8:	4798      	blx	r3

	return (Cl_dprepretcode);
   9e0ba:	79fb      	ldrb	r3, [r7, #7]
	
}
   9e0bc:	4618      	mov	r0, r3
   9e0be:	3708      	adds	r7, #8
   9e0c0:	46bd      	mov	sp, r7
   9e0c2:	bd80      	pop	{r7, pc}
   9e0c4:	20070abc 	.word	0x20070abc
   9e0c8:	00083051 	.word	0x00083051

0009e0cc <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   9e0cc:	b590      	push	{r4, r7, lr}
   9e0ce:	b089      	sub	sp, #36	; 0x24
   9e0d0:	af00      	add	r7, sp, #0
   9e0d2:	4604      	mov	r4, r0
   9e0d4:	1d38      	adds	r0, r7, #4
   9e0d6:	e880 0006 	stmia.w	r0, {r1, r2}
   9e0da:	461a      	mov	r2, r3
   9e0dc:	4623      	mov	r3, r4
   9e0de:	73fb      	strb	r3, [r7, #15]
   9e0e0:	4613      	mov	r3, r2
   9e0e2:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9e0e4:	2300      	movs	r3, #0
   9e0e6:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e0e8:	234d      	movs	r3, #77	; 0x4d
   9e0ea:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   9e0ec:	f107 0314 	add.w	r3, r7, #20
   9e0f0:	2200      	movs	r2, #0
   9e0f2:	601a      	str	r2, [r3, #0]
   9e0f4:	605a      	str	r2, [r3, #4]
	Cl_Uint8Type  databytecnt = 0;
   9e0f6:	2300      	movs	r3, #0
   9e0f8:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   9e0fa:	7bfb      	ldrb	r3, [r7, #15]
   9e0fc:	3b05      	subs	r3, #5
   9e0fe:	2b18      	cmp	r3, #24
   9e100:	f200 837c 	bhi.w	9e7fc <Cl_Dprep_setdata+0x730>
   9e104:	a201      	add	r2, pc, #4	; (adr r2, 9e10c <Cl_Dprep_setdata+0x40>)
   9e106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e10a:	bf00      	nop
   9e10c:	0009e171 	.word	0x0009e171
   9e110:	0009e19b 	.word	0x0009e19b
   9e114:	0009e1c5 	.word	0x0009e1c5
   9e118:	0009e219 	.word	0x0009e219
   9e11c:	0009e243 	.word	0x0009e243
   9e120:	0009e7fd 	.word	0x0009e7fd
   9e124:	0009e26d 	.word	0x0009e26d
   9e128:	0009e297 	.word	0x0009e297
   9e12c:	0009e2c1 	.word	0x0009e2c1
   9e130:	0009e1ef 	.word	0x0009e1ef
   9e134:	0009e2eb 	.word	0x0009e2eb
   9e138:	0009e7fd 	.word	0x0009e7fd
   9e13c:	0009e7fd 	.word	0x0009e7fd
   9e140:	0009e7fd 	.word	0x0009e7fd
   9e144:	0009e319 	.word	0x0009e319
   9e148:	0009e389 	.word	0x0009e389
   9e14c:	0009e3f9 	.word	0x0009e3f9
   9e150:	0009e475 	.word	0x0009e475
   9e154:	0009e4e5 	.word	0x0009e4e5
   9e158:	0009e555 	.word	0x0009e555
   9e15c:	0009e5c3 	.word	0x0009e5c3
   9e160:	0009e633 	.word	0x0009e633
   9e164:	0009e6a3 	.word	0x0009e6a3
   9e168:	0009e713 	.word	0x0009e713
   9e16c:	0009e78d 	.word	0x0009e78d
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9e170:	4bbd      	ldr	r3, [pc, #756]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e172:	78da      	ldrb	r2, [r3, #3]
   9e174:	1d3b      	adds	r3, r7, #4
   9e176:	4619      	mov	r1, r3
   9e178:	2005      	movs	r0, #5
   9e17a:	4bbc      	ldr	r3, [pc, #752]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e17c:	4798      	blx	r3
   9e17e:	4603      	mov	r3, r0
   9e180:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   9e182:	2305      	movs	r3, #5
   9e184:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   9e186:	f107 0314 	add.w	r3, r7, #20
   9e18a:	3301      	adds	r3, #1
   9e18c:	4619      	mov	r1, r3
   9e18e:	2005      	movs	r0, #5
   9e190:	4bb7      	ldr	r3, [pc, #732]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e192:	4798      	blx	r3
   9e194:	4603      	mov	r3, r0
   9e196:	77fb      	strb	r3, [r7, #31]
					
					 break;
   9e198:	e331      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e19a:	4bb3      	ldr	r3, [pc, #716]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e19c:	78da      	ldrb	r2, [r3, #3]
   9e19e:	1d3b      	adds	r3, r7, #4
   9e1a0:	4619      	mov	r1, r3
   9e1a2:	2006      	movs	r0, #6
   9e1a4:	4bb1      	ldr	r3, [pc, #708]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e1a6:	4798      	blx	r3
   9e1a8:	4603      	mov	r3, r0
   9e1aa:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   9e1ac:	2306      	movs	r3, #6
   9e1ae:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9e1b0:	f107 0314 	add.w	r3, r7, #20
   9e1b4:	3301      	adds	r3, #1
   9e1b6:	4619      	mov	r1, r3
   9e1b8:	2006      	movs	r0, #6
   9e1ba:	4bad      	ldr	r3, [pc, #692]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e1bc:	4798      	blx	r3
   9e1be:	4603      	mov	r3, r0
   9e1c0:	77fb      	strb	r3, [r7, #31]

					 break;
   9e1c2:	e31c      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e1c4:	4ba8      	ldr	r3, [pc, #672]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e1c6:	78da      	ldrb	r2, [r3, #3]
   9e1c8:	1d3b      	adds	r3, r7, #4
   9e1ca:	4619      	mov	r1, r3
   9e1cc:	200e      	movs	r0, #14
   9e1ce:	4ba7      	ldr	r3, [pc, #668]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e1d0:	4798      	blx	r3
   9e1d2:	4603      	mov	r3, r0
   9e1d4:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   9e1d6:	2307      	movs	r3, #7
   9e1d8:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9e1da:	f107 0314 	add.w	r3, r7, #20
   9e1de:	3301      	adds	r3, #1
   9e1e0:	4619      	mov	r1, r3
   9e1e2:	200e      	movs	r0, #14
   9e1e4:	4ba2      	ldr	r3, [pc, #648]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e1e6:	4798      	blx	r3
   9e1e8:	4603      	mov	r3, r0
   9e1ea:	77fb      	strb	r3, [r7, #31]
					 break;
   9e1ec:	e307      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e1ee:	4b9e      	ldr	r3, [pc, #632]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e1f0:	78da      	ldrb	r2, [r3, #3]
   9e1f2:	1d3b      	adds	r3, r7, #4
   9e1f4:	4619      	mov	r1, r3
   9e1f6:	200f      	movs	r0, #15
   9e1f8:	4b9c      	ldr	r3, [pc, #624]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e1fa:	4798      	blx	r3
   9e1fc:	4603      	mov	r3, r0
   9e1fe:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   9e200:	230e      	movs	r3, #14
   9e202:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9e204:	f107 0314 	add.w	r3, r7, #20
   9e208:	3301      	adds	r3, #1
   9e20a:	4619      	mov	r1, r3
   9e20c:	200f      	movs	r0, #15
   9e20e:	4b98      	ldr	r3, [pc, #608]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e210:	4798      	blx	r3
   9e212:	4603      	mov	r3, r0
   9e214:	77fb      	strb	r3, [r7, #31]

					break;
   9e216:	e2f2      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e218:	4b93      	ldr	r3, [pc, #588]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e21a:	78da      	ldrb	r2, [r3, #3]
   9e21c:	1d3b      	adds	r3, r7, #4
   9e21e:	4619      	mov	r1, r3
   9e220:	2007      	movs	r0, #7
   9e222:	4b92      	ldr	r3, [pc, #584]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e224:	4798      	blx	r3
   9e226:	4603      	mov	r3, r0
   9e228:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   9e22a:	2308      	movs	r3, #8
   9e22c:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9e22e:	f107 0314 	add.w	r3, r7, #20
   9e232:	3301      	adds	r3, #1
   9e234:	4619      	mov	r1, r3
   9e236:	2007      	movs	r0, #7
   9e238:	4b8d      	ldr	r3, [pc, #564]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e23a:	4798      	blx	r3
   9e23c:	4603      	mov	r3, r0
   9e23e:	77fb      	strb	r3, [r7, #31]

					 break;
   9e240:	e2dd      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e242:	4b89      	ldr	r3, [pc, #548]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e244:	78da      	ldrb	r2, [r3, #3]
   9e246:	1d3b      	adds	r3, r7, #4
   9e248:	4619      	mov	r1, r3
   9e24a:	2008      	movs	r0, #8
   9e24c:	4b87      	ldr	r3, [pc, #540]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e24e:	4798      	blx	r3
   9e250:	4603      	mov	r3, r0
   9e252:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   9e254:	2309      	movs	r3, #9
   9e256:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9e258:	f107 0314 	add.w	r3, r7, #20
   9e25c:	3301      	adds	r3, #1
   9e25e:	4619      	mov	r1, r3
   9e260:	2008      	movs	r0, #8
   9e262:	4b83      	ldr	r3, [pc, #524]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e264:	4798      	blx	r3
   9e266:	4603      	mov	r3, r0
   9e268:	77fb      	strb	r3, [r7, #31]

					 break;
   9e26a:	e2c8      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e26c:	4b7e      	ldr	r3, [pc, #504]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e26e:	78da      	ldrb	r2, [r3, #3]
   9e270:	1d3b      	adds	r3, r7, #4
   9e272:	4619      	mov	r1, r3
   9e274:	200a      	movs	r0, #10
   9e276:	4b7d      	ldr	r3, [pc, #500]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e278:	4798      	blx	r3
   9e27a:	4603      	mov	r3, r0
   9e27c:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   9e27e:	230b      	movs	r3, #11
   9e280:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9e282:	f107 0314 	add.w	r3, r7, #20
   9e286:	3301      	adds	r3, #1
   9e288:	4619      	mov	r1, r3
   9e28a:	200a      	movs	r0, #10
   9e28c:	4b78      	ldr	r3, [pc, #480]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e28e:	4798      	blx	r3
   9e290:	4603      	mov	r3, r0
   9e292:	77fb      	strb	r3, [r7, #31]

					 break;
   9e294:	e2b3      	b.n	9e7fe <Cl_Dprep_setdata+0x732>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e296:	4b74      	ldr	r3, [pc, #464]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e298:	78da      	ldrb	r2, [r3, #3]
   9e29a:	1d3b      	adds	r3, r7, #4
   9e29c:	4619      	mov	r1, r3
   9e29e:	200b      	movs	r0, #11
   9e2a0:	4b72      	ldr	r3, [pc, #456]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e2a2:	4798      	blx	r3
   9e2a4:	4603      	mov	r3, r0
   9e2a6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   9e2a8:	230c      	movs	r3, #12
   9e2aa:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9e2ac:	f107 0314 	add.w	r3, r7, #20
   9e2b0:	3301      	adds	r3, #1
   9e2b2:	4619      	mov	r1, r3
   9e2b4:	200b      	movs	r0, #11
   9e2b6:	4b6e      	ldr	r3, [pc, #440]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e2b8:	4798      	blx	r3
   9e2ba:	4603      	mov	r3, r0
   9e2bc:	77fb      	strb	r3, [r7, #31]

					 break;
   9e2be:	e29e      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9e2c0:	4b69      	ldr	r3, [pc, #420]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e2c2:	78da      	ldrb	r2, [r3, #3]
   9e2c4:	1d3b      	adds	r3, r7, #4
   9e2c6:	4619      	mov	r1, r3
   9e2c8:	200c      	movs	r0, #12
   9e2ca:	4b68      	ldr	r3, [pc, #416]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e2cc:	4798      	blx	r3
   9e2ce:	4603      	mov	r3, r0
   9e2d0:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   9e2d2:	230d      	movs	r3, #13
   9e2d4:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9e2d6:	f107 0314 	add.w	r3, r7, #20
   9e2da:	3301      	adds	r3, #1
   9e2dc:	4619      	mov	r1, r3
   9e2de:	200c      	movs	r0, #12
   9e2e0:	4b63      	ldr	r3, [pc, #396]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e2e2:	4798      	blx	r3
   9e2e4:	4603      	mov	r3, r0
   9e2e6:	77fb      	strb	r3, [r7, #31]

					 break;
   9e2e8:	e289      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9e2ea:	4b5f      	ldr	r3, [pc, #380]	; (9e468 <Cl_Dprep_setdata+0x39c>)
   9e2ec:	78da      	ldrb	r2, [r3, #3]
   9e2ee:	1d3b      	adds	r3, r7, #4
   9e2f0:	4619      	mov	r1, r3
   9e2f2:	200e      	movs	r0, #14
   9e2f4:	4b5d      	ldr	r3, [pc, #372]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e2f6:	4798      	blx	r3
   9e2f8:	4603      	mov	r3, r0
   9e2fa:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   9e2fc:	2316      	movs	r3, #22
   9e2fe:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   9e300:	230f      	movs	r3, #15
   9e302:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   9e304:	f107 0314 	add.w	r3, r7, #20
   9e308:	3301      	adds	r3, #1
   9e30a:	4619      	mov	r1, r3
   9e30c:	200d      	movs	r0, #13
   9e30e:	4b58      	ldr	r3, [pc, #352]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e310:	4798      	blx	r3
   9e312:	4603      	mov	r3, r0
   9e314:	77fb      	strb	r3, [r7, #31]
					 break;
   9e316:	e272      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   9e318:	1d3b      	adds	r3, r7, #4
   9e31a:	2202      	movs	r2, #2
   9e31c:	4619      	mov	r1, r3
   9e31e:	2005      	movs	r0, #5
   9e320:	4b52      	ldr	r3, [pc, #328]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e322:	4798      	blx	r3
   9e324:	4603      	mov	r3, r0
   9e326:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e328:	1d3b      	adds	r3, r7, #4
   9e32a:	3302      	adds	r3, #2
   9e32c:	2202      	movs	r2, #2
   9e32e:	4619      	mov	r1, r3
   9e330:	2012      	movs	r0, #18
   9e332:	4b4e      	ldr	r3, [pc, #312]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e334:	4798      	blx	r3
   9e336:	4603      	mov	r3, r0
   9e338:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e33a:	1d3b      	adds	r3, r7, #4
   9e33c:	3304      	adds	r3, #4
   9e33e:	2202      	movs	r2, #2
   9e340:	4619      	mov	r1, r3
   9e342:	2013      	movs	r0, #19
   9e344:	4b49      	ldr	r3, [pc, #292]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e346:	4798      	blx	r3
   9e348:	4603      	mov	r3, r0
   9e34a:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   9e34c:	2313      	movs	r3, #19
   9e34e:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   9e350:	f107 0314 	add.w	r3, r7, #20
   9e354:	3301      	adds	r3, #1
   9e356:	4619      	mov	r1, r3
   9e358:	2005      	movs	r0, #5
   9e35a:	4b45      	ldr	r3, [pc, #276]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e35c:	4798      	blx	r3
   9e35e:	4603      	mov	r3, r0
   9e360:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   9e362:	f107 0314 	add.w	r3, r7, #20
   9e366:	3303      	adds	r3, #3
   9e368:	4619      	mov	r1, r3
   9e36a:	2012      	movs	r0, #18
   9e36c:	4b40      	ldr	r3, [pc, #256]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e36e:	4798      	blx	r3
   9e370:	4603      	mov	r3, r0
   9e372:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   9e374:	f107 0314 	add.w	r3, r7, #20
   9e378:	3305      	adds	r3, #5
   9e37a:	4619      	mov	r1, r3
   9e37c:	2013      	movs	r0, #19
   9e37e:	4b3c      	ldr	r3, [pc, #240]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e380:	4798      	blx	r3
   9e382:	4603      	mov	r3, r0
   9e384:	77fb      	strb	r3, [r7, #31]
							
					break;
   9e386:	e23a      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   9e388:	1d3b      	adds	r3, r7, #4
   9e38a:	2202      	movs	r2, #2
   9e38c:	4619      	mov	r1, r3
   9e38e:	2006      	movs	r0, #6
   9e390:	4b36      	ldr	r3, [pc, #216]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e392:	4798      	blx	r3
   9e394:	4603      	mov	r3, r0
   9e396:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e398:	1d3b      	adds	r3, r7, #4
   9e39a:	3302      	adds	r3, #2
   9e39c:	2202      	movs	r2, #2
   9e39e:	4619      	mov	r1, r3
   9e3a0:	2014      	movs	r0, #20
   9e3a2:	4b32      	ldr	r3, [pc, #200]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e3a4:	4798      	blx	r3
   9e3a6:	4603      	mov	r3, r0
   9e3a8:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e3aa:	1d3b      	adds	r3, r7, #4
   9e3ac:	3304      	adds	r3, #4
   9e3ae:	2202      	movs	r2, #2
   9e3b0:	4619      	mov	r1, r3
   9e3b2:	2015      	movs	r0, #21
   9e3b4:	4b2d      	ldr	r3, [pc, #180]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e3b6:	4798      	blx	r3
   9e3b8:	4603      	mov	r3, r0
   9e3ba:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   9e3bc:	2314      	movs	r3, #20
   9e3be:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9e3c0:	f107 0314 	add.w	r3, r7, #20
   9e3c4:	3301      	adds	r3, #1
   9e3c6:	4619      	mov	r1, r3
   9e3c8:	2006      	movs	r0, #6
   9e3ca:	4b29      	ldr	r3, [pc, #164]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e3cc:	4798      	blx	r3
   9e3ce:	4603      	mov	r3, r0
   9e3d0:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   9e3d2:	f107 0314 	add.w	r3, r7, #20
   9e3d6:	3303      	adds	r3, #3
   9e3d8:	4619      	mov	r1, r3
   9e3da:	2014      	movs	r0, #20
   9e3dc:	4b24      	ldr	r3, [pc, #144]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e3de:	4798      	blx	r3
   9e3e0:	4603      	mov	r3, r0
   9e3e2:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   9e3e4:	f107 0314 	add.w	r3, r7, #20
   9e3e8:	3305      	adds	r3, #5
   9e3ea:	4619      	mov	r1, r3
   9e3ec:	2015      	movs	r0, #21
   9e3ee:	4b20      	ldr	r3, [pc, #128]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e3f0:	4798      	blx	r3
   9e3f2:	4603      	mov	r3, r0
   9e3f4:	77fb      	strb	r3, [r7, #31]
					break;
   9e3f6:	e202      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   9e3f8:	1d3b      	adds	r3, r7, #4
   9e3fa:	2202      	movs	r2, #2
   9e3fc:	4619      	mov	r1, r3
   9e3fe:	200e      	movs	r0, #14
   9e400:	4b1a      	ldr	r3, [pc, #104]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e402:	4798      	blx	r3
   9e404:	4603      	mov	r3, r0
   9e406:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e408:	1d3b      	adds	r3, r7, #4
   9e40a:	3302      	adds	r3, #2
   9e40c:	2202      	movs	r2, #2
   9e40e:	4619      	mov	r1, r3
   9e410:	2016      	movs	r0, #22
   9e412:	4b16      	ldr	r3, [pc, #88]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e414:	4798      	blx	r3
   9e416:	4603      	mov	r3, r0
   9e418:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e41a:	1d3b      	adds	r3, r7, #4
   9e41c:	3304      	adds	r3, #4
   9e41e:	2202      	movs	r2, #2
   9e420:	4619      	mov	r1, r3
   9e422:	2017      	movs	r0, #23
   9e424:	4b11      	ldr	r3, [pc, #68]	; (9e46c <Cl_Dprep_setdata+0x3a0>)
   9e426:	4798      	blx	r3
   9e428:	4603      	mov	r3, r0
   9e42a:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   9e42c:	2315      	movs	r3, #21
   9e42e:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9e430:	f107 0314 	add.w	r3, r7, #20
   9e434:	3301      	adds	r3, #1
   9e436:	4619      	mov	r1, r3
   9e438:	200e      	movs	r0, #14
   9e43a:	4b0d      	ldr	r3, [pc, #52]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e43c:	4798      	blx	r3
   9e43e:	4603      	mov	r3, r0
   9e440:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   9e442:	f107 0314 	add.w	r3, r7, #20
   9e446:	3303      	adds	r3, #3
   9e448:	4619      	mov	r1, r3
   9e44a:	2016      	movs	r0, #22
   9e44c:	4b08      	ldr	r3, [pc, #32]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e44e:	4798      	blx	r3
   9e450:	4603      	mov	r3, r0
   9e452:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   9e454:	f107 0314 	add.w	r3, r7, #20
   9e458:	3305      	adds	r3, #5
   9e45a:	4619      	mov	r1, r3
   9e45c:	2017      	movs	r0, #23
   9e45e:	4b04      	ldr	r3, [pc, #16]	; (9e470 <Cl_Dprep_setdata+0x3a4>)
   9e460:	4798      	blx	r3
   9e462:	4603      	mov	r3, r0
   9e464:	77fb      	strb	r3, [r7, #31]
					break;
   9e466:	e1ca      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
   9e468:	20072f88 	.word	0x20072f88
   9e46c:	00097db5 	.word	0x00097db5
   9e470:	00097d7d 	.word	0x00097d7d
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   9e474:	1d3b      	adds	r3, r7, #4
   9e476:	2202      	movs	r2, #2
   9e478:	4619      	mov	r1, r3
   9e47a:	2007      	movs	r0, #7
   9e47c:	4bc1      	ldr	r3, [pc, #772]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e47e:	4798      	blx	r3
   9e480:	4603      	mov	r3, r0
   9e482:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e484:	1d3b      	adds	r3, r7, #4
   9e486:	3302      	adds	r3, #2
   9e488:	2202      	movs	r2, #2
   9e48a:	4619      	mov	r1, r3
   9e48c:	2018      	movs	r0, #24
   9e48e:	4bbd      	ldr	r3, [pc, #756]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e490:	4798      	blx	r3
   9e492:	4603      	mov	r3, r0
   9e494:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e496:	1d3b      	adds	r3, r7, #4
   9e498:	3304      	adds	r3, #4
   9e49a:	2202      	movs	r2, #2
   9e49c:	4619      	mov	r1, r3
   9e49e:	2019      	movs	r0, #25
   9e4a0:	4bb8      	ldr	r3, [pc, #736]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e4a2:	4798      	blx	r3
   9e4a4:	4603      	mov	r3, r0
   9e4a6:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   9e4a8:	2316      	movs	r3, #22
   9e4aa:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9e4ac:	f107 0314 	add.w	r3, r7, #20
   9e4b0:	3301      	adds	r3, #1
   9e4b2:	4619      	mov	r1, r3
   9e4b4:	2007      	movs	r0, #7
   9e4b6:	4bb4      	ldr	r3, [pc, #720]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e4b8:	4798      	blx	r3
   9e4ba:	4603      	mov	r3, r0
   9e4bc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9e4be:	f107 0314 	add.w	r3, r7, #20
   9e4c2:	3303      	adds	r3, #3
   9e4c4:	4619      	mov	r1, r3
   9e4c6:	2018      	movs	r0, #24
   9e4c8:	4baf      	ldr	r3, [pc, #700]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e4ca:	4798      	blx	r3
   9e4cc:	4603      	mov	r3, r0
   9e4ce:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9e4d0:	f107 0314 	add.w	r3, r7, #20
   9e4d4:	3305      	adds	r3, #5
   9e4d6:	4619      	mov	r1, r3
   9e4d8:	2019      	movs	r0, #25
   9e4da:	4bab      	ldr	r3, [pc, #684]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e4dc:	4798      	blx	r3
   9e4de:	4603      	mov	r3, r0
   9e4e0:	77fb      	strb	r3, [r7, #31]
					break;
   9e4e2:	e18c      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   9e4e4:	1d3b      	adds	r3, r7, #4
   9e4e6:	2202      	movs	r2, #2
   9e4e8:	4619      	mov	r1, r3
   9e4ea:	2008      	movs	r0, #8
   9e4ec:	4ba5      	ldr	r3, [pc, #660]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e4ee:	4798      	blx	r3
   9e4f0:	4603      	mov	r3, r0
   9e4f2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e4f4:	1d3b      	adds	r3, r7, #4
   9e4f6:	3302      	adds	r3, #2
   9e4f8:	2202      	movs	r2, #2
   9e4fa:	4619      	mov	r1, r3
   9e4fc:	201a      	movs	r0, #26
   9e4fe:	4ba1      	ldr	r3, [pc, #644]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e500:	4798      	blx	r3
   9e502:	4603      	mov	r3, r0
   9e504:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e506:	1d3b      	adds	r3, r7, #4
   9e508:	3304      	adds	r3, #4
   9e50a:	2202      	movs	r2, #2
   9e50c:	4619      	mov	r1, r3
   9e50e:	201b      	movs	r0, #27
   9e510:	4b9c      	ldr	r3, [pc, #624]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e512:	4798      	blx	r3
   9e514:	4603      	mov	r3, r0
   9e516:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   9e518:	2317      	movs	r3, #23
   9e51a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9e51c:	f107 0314 	add.w	r3, r7, #20
   9e520:	3301      	adds	r3, #1
   9e522:	4619      	mov	r1, r3
   9e524:	2008      	movs	r0, #8
   9e526:	4b98      	ldr	r3, [pc, #608]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e528:	4798      	blx	r3
   9e52a:	4603      	mov	r3, r0
   9e52c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9e52e:	f107 0314 	add.w	r3, r7, #20
   9e532:	3303      	adds	r3, #3
   9e534:	4619      	mov	r1, r3
   9e536:	201a      	movs	r0, #26
   9e538:	4b93      	ldr	r3, [pc, #588]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e53a:	4798      	blx	r3
   9e53c:	4603      	mov	r3, r0
   9e53e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9e540:	f107 0314 	add.w	r3, r7, #20
   9e544:	3305      	adds	r3, #5
   9e546:	4619      	mov	r1, r3
   9e548:	201b      	movs	r0, #27
   9e54a:	4b8f      	ldr	r3, [pc, #572]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e54c:	4798      	blx	r3
   9e54e:	4603      	mov	r3, r0
   9e550:	77fb      	strb	r3, [r7, #31]
					break;
   9e552:	e154      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   9e554:	1d3b      	adds	r3, r7, #4
   9e556:	2202      	movs	r2, #2
   9e558:	4619      	mov	r1, r3
   9e55a:	2009      	movs	r0, #9
   9e55c:	4b89      	ldr	r3, [pc, #548]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e55e:	4798      	blx	r3
   9e560:	4603      	mov	r3, r0
   9e562:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   9e564:	1d3b      	adds	r3, r7, #4
   9e566:	2202      	movs	r2, #2
   9e568:	4619      	mov	r1, r3
   9e56a:	201c      	movs	r0, #28
   9e56c:	4b85      	ldr	r3, [pc, #532]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e56e:	4798      	blx	r3
   9e570:	4603      	mov	r3, r0
   9e572:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e574:	1d3b      	adds	r3, r7, #4
   9e576:	3304      	adds	r3, #4
   9e578:	2202      	movs	r2, #2
   9e57a:	4619      	mov	r1, r3
   9e57c:	201d      	movs	r0, #29
   9e57e:	4b81      	ldr	r3, [pc, #516]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e580:	4798      	blx	r3
   9e582:	4603      	mov	r3, r0
   9e584:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   9e586:	2318      	movs	r3, #24
   9e588:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   9e58a:	f107 0314 	add.w	r3, r7, #20
   9e58e:	3301      	adds	r3, #1
   9e590:	4619      	mov	r1, r3
   9e592:	2009      	movs	r0, #9
   9e594:	4b7c      	ldr	r3, [pc, #496]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e596:	4798      	blx	r3
   9e598:	4603      	mov	r3, r0
   9e59a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   9e59c:	f107 0314 	add.w	r3, r7, #20
   9e5a0:	3303      	adds	r3, #3
   9e5a2:	4619      	mov	r1, r3
   9e5a4:	201c      	movs	r0, #28
   9e5a6:	4b78      	ldr	r3, [pc, #480]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e5a8:	4798      	blx	r3
   9e5aa:	4603      	mov	r3, r0
   9e5ac:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   9e5ae:	f107 0314 	add.w	r3, r7, #20
   9e5b2:	3305      	adds	r3, #5
   9e5b4:	4619      	mov	r1, r3
   9e5b6:	201d      	movs	r0, #29
   9e5b8:	4b73      	ldr	r3, [pc, #460]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e5ba:	4798      	blx	r3
   9e5bc:	4603      	mov	r3, r0
   9e5be:	77fb      	strb	r3, [r7, #31]
					break;
   9e5c0:	e11d      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   9e5c2:	1d3b      	adds	r3, r7, #4
   9e5c4:	2202      	movs	r2, #2
   9e5c6:	4619      	mov	r1, r3
   9e5c8:	200a      	movs	r0, #10
   9e5ca:	4b6e      	ldr	r3, [pc, #440]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e5cc:	4798      	blx	r3
   9e5ce:	4603      	mov	r3, r0
   9e5d0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e5d2:	1d3b      	adds	r3, r7, #4
   9e5d4:	3302      	adds	r3, #2
   9e5d6:	2202      	movs	r2, #2
   9e5d8:	4619      	mov	r1, r3
   9e5da:	201e      	movs	r0, #30
   9e5dc:	4b69      	ldr	r3, [pc, #420]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e5de:	4798      	blx	r3
   9e5e0:	4603      	mov	r3, r0
   9e5e2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e5e4:	1d3b      	adds	r3, r7, #4
   9e5e6:	3304      	adds	r3, #4
   9e5e8:	2202      	movs	r2, #2
   9e5ea:	4619      	mov	r1, r3
   9e5ec:	201f      	movs	r0, #31
   9e5ee:	4b65      	ldr	r3, [pc, #404]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e5f0:	4798      	blx	r3
   9e5f2:	4603      	mov	r3, r0
   9e5f4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   9e5f6:	2319      	movs	r3, #25
   9e5f8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9e5fa:	f107 0314 	add.w	r3, r7, #20
   9e5fe:	3301      	adds	r3, #1
   9e600:	4619      	mov	r1, r3
   9e602:	200a      	movs	r0, #10
   9e604:	4b60      	ldr	r3, [pc, #384]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e606:	4798      	blx	r3
   9e608:	4603      	mov	r3, r0
   9e60a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   9e60c:	f107 0314 	add.w	r3, r7, #20
   9e610:	3303      	adds	r3, #3
   9e612:	4619      	mov	r1, r3
   9e614:	201e      	movs	r0, #30
   9e616:	4b5c      	ldr	r3, [pc, #368]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e618:	4798      	blx	r3
   9e61a:	4603      	mov	r3, r0
   9e61c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   9e61e:	f107 0314 	add.w	r3, r7, #20
   9e622:	3305      	adds	r3, #5
   9e624:	4619      	mov	r1, r3
   9e626:	201f      	movs	r0, #31
   9e628:	4b57      	ldr	r3, [pc, #348]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e62a:	4798      	blx	r3
   9e62c:	4603      	mov	r3, r0
   9e62e:	77fb      	strb	r3, [r7, #31]
					break;
   9e630:	e0e5      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   9e632:	1d3b      	adds	r3, r7, #4
   9e634:	2202      	movs	r2, #2
   9e636:	4619      	mov	r1, r3
   9e638:	200b      	movs	r0, #11
   9e63a:	4b52      	ldr	r3, [pc, #328]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e63c:	4798      	blx	r3
   9e63e:	4603      	mov	r3, r0
   9e640:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e642:	1d3b      	adds	r3, r7, #4
   9e644:	3302      	adds	r3, #2
   9e646:	2202      	movs	r2, #2
   9e648:	4619      	mov	r1, r3
   9e64a:	2020      	movs	r0, #32
   9e64c:	4b4d      	ldr	r3, [pc, #308]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e64e:	4798      	blx	r3
   9e650:	4603      	mov	r3, r0
   9e652:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e654:	1d3b      	adds	r3, r7, #4
   9e656:	3304      	adds	r3, #4
   9e658:	2202      	movs	r2, #2
   9e65a:	4619      	mov	r1, r3
   9e65c:	2021      	movs	r0, #33	; 0x21
   9e65e:	4b49      	ldr	r3, [pc, #292]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e660:	4798      	blx	r3
   9e662:	4603      	mov	r3, r0
   9e664:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   9e666:	231a      	movs	r3, #26
   9e668:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9e66a:	f107 0314 	add.w	r3, r7, #20
   9e66e:	3301      	adds	r3, #1
   9e670:	4619      	mov	r1, r3
   9e672:	200b      	movs	r0, #11
   9e674:	4b44      	ldr	r3, [pc, #272]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e676:	4798      	blx	r3
   9e678:	4603      	mov	r3, r0
   9e67a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   9e67c:	f107 0314 	add.w	r3, r7, #20
   9e680:	3303      	adds	r3, #3
   9e682:	4619      	mov	r1, r3
   9e684:	2020      	movs	r0, #32
   9e686:	4b40      	ldr	r3, [pc, #256]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e688:	4798      	blx	r3
   9e68a:	4603      	mov	r3, r0
   9e68c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   9e68e:	f107 0314 	add.w	r3, r7, #20
   9e692:	3305      	adds	r3, #5
   9e694:	4619      	mov	r1, r3
   9e696:	2021      	movs	r0, #33	; 0x21
   9e698:	4b3b      	ldr	r3, [pc, #236]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e69a:	4798      	blx	r3
   9e69c:	4603      	mov	r3, r0
   9e69e:	77fb      	strb	r3, [r7, #31]
					break;
   9e6a0:	e0ad      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   9e6a2:	1d3b      	adds	r3, r7, #4
   9e6a4:	2202      	movs	r2, #2
   9e6a6:	4619      	mov	r1, r3
   9e6a8:	200c      	movs	r0, #12
   9e6aa:	4b36      	ldr	r3, [pc, #216]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e6ac:	4798      	blx	r3
   9e6ae:	4603      	mov	r3, r0
   9e6b0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e6b2:	1d3b      	adds	r3, r7, #4
   9e6b4:	3302      	adds	r3, #2
   9e6b6:	2202      	movs	r2, #2
   9e6b8:	4619      	mov	r1, r3
   9e6ba:	2022      	movs	r0, #34	; 0x22
   9e6bc:	4b31      	ldr	r3, [pc, #196]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e6be:	4798      	blx	r3
   9e6c0:	4603      	mov	r3, r0
   9e6c2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e6c4:	1d3b      	adds	r3, r7, #4
   9e6c6:	3304      	adds	r3, #4
   9e6c8:	2202      	movs	r2, #2
   9e6ca:	4619      	mov	r1, r3
   9e6cc:	2023      	movs	r0, #35	; 0x23
   9e6ce:	4b2d      	ldr	r3, [pc, #180]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e6d0:	4798      	blx	r3
   9e6d2:	4603      	mov	r3, r0
   9e6d4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   9e6d6:	231b      	movs	r3, #27
   9e6d8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9e6da:	f107 0314 	add.w	r3, r7, #20
   9e6de:	3301      	adds	r3, #1
   9e6e0:	4619      	mov	r1, r3
   9e6e2:	200c      	movs	r0, #12
   9e6e4:	4b28      	ldr	r3, [pc, #160]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e6e6:	4798      	blx	r3
   9e6e8:	4603      	mov	r3, r0
   9e6ea:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   9e6ec:	f107 0314 	add.w	r3, r7, #20
   9e6f0:	3303      	adds	r3, #3
   9e6f2:	4619      	mov	r1, r3
   9e6f4:	2022      	movs	r0, #34	; 0x22
   9e6f6:	4b24      	ldr	r3, [pc, #144]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e6f8:	4798      	blx	r3
   9e6fa:	4603      	mov	r3, r0
   9e6fc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   9e6fe:	f107 0314 	add.w	r3, r7, #20
   9e702:	3305      	adds	r3, #5
   9e704:	4619      	mov	r1, r3
   9e706:	2023      	movs	r0, #35	; 0x23
   9e708:	4b1f      	ldr	r3, [pc, #124]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e70a:	4798      	blx	r3
   9e70c:	4603      	mov	r3, r0
   9e70e:	77fb      	strb	r3, [r7, #31]
					break;
   9e710:	e075      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   9e712:	1d3b      	adds	r3, r7, #4
   9e714:	2202      	movs	r2, #2
   9e716:	4619      	mov	r1, r3
   9e718:	200f      	movs	r0, #15
   9e71a:	4b1a      	ldr	r3, [pc, #104]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e71c:	4798      	blx	r3
   9e71e:	4603      	mov	r3, r0
   9e720:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e722:	1d3b      	adds	r3, r7, #4
   9e724:	3302      	adds	r3, #2
   9e726:	2202      	movs	r2, #2
   9e728:	4619      	mov	r1, r3
   9e72a:	2024      	movs	r0, #36	; 0x24
   9e72c:	4b15      	ldr	r3, [pc, #84]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e72e:	4798      	blx	r3
   9e730:	4603      	mov	r3, r0
   9e732:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e734:	1d3b      	adds	r3, r7, #4
   9e736:	3304      	adds	r3, #4
   9e738:	2202      	movs	r2, #2
   9e73a:	4619      	mov	r1, r3
   9e73c:	2025      	movs	r0, #37	; 0x25
   9e73e:	4b11      	ldr	r3, [pc, #68]	; (9e784 <Cl_Dprep_setdata+0x6b8>)
   9e740:	4798      	blx	r3
   9e742:	4603      	mov	r3, r0
   9e744:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   9e746:	231c      	movs	r3, #28
   9e748:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9e74a:	f107 0314 	add.w	r3, r7, #20
   9e74e:	3301      	adds	r3, #1
   9e750:	4619      	mov	r1, r3
   9e752:	200f      	movs	r0, #15
   9e754:	4b0c      	ldr	r3, [pc, #48]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e756:	4798      	blx	r3
   9e758:	4603      	mov	r3, r0
   9e75a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   9e75c:	f107 0314 	add.w	r3, r7, #20
   9e760:	3303      	adds	r3, #3
   9e762:	4619      	mov	r1, r3
   9e764:	2024      	movs	r0, #36	; 0x24
   9e766:	4b08      	ldr	r3, [pc, #32]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e768:	4798      	blx	r3
   9e76a:	4603      	mov	r3, r0
   9e76c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   9e76e:	f107 0314 	add.w	r3, r7, #20
   9e772:	3305      	adds	r3, #5
   9e774:	4619      	mov	r1, r3
   9e776:	2025      	movs	r0, #37	; 0x25
   9e778:	4b03      	ldr	r3, [pc, #12]	; (9e788 <Cl_Dprep_setdata+0x6bc>)
   9e77a:	4798      	blx	r3
   9e77c:	4603      	mov	r3, r0
   9e77e:	77fb      	strb	r3, [r7, #31]
					break;
   9e780:	e03d      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
   9e782:	bf00      	nop
   9e784:	00097db5 	.word	0x00097db5
   9e788:	00097d7d 	.word	0x00097d7d
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   9e78c:	1d3b      	adds	r3, r7, #4
   9e78e:	2202      	movs	r2, #2
   9e790:	4619      	mov	r1, r3
   9e792:	200d      	movs	r0, #13
   9e794:	4b22      	ldr	r3, [pc, #136]	; (9e820 <Cl_Dprep_setdata+0x754>)
   9e796:	4798      	blx	r3
   9e798:	4603      	mov	r3, r0
   9e79a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9e79c:	1d3b      	adds	r3, r7, #4
   9e79e:	3302      	adds	r3, #2
   9e7a0:	2202      	movs	r2, #2
   9e7a2:	4619      	mov	r1, r3
   9e7a4:	2026      	movs	r0, #38	; 0x26
   9e7a6:	4b1e      	ldr	r3, [pc, #120]	; (9e820 <Cl_Dprep_setdata+0x754>)
   9e7a8:	4798      	blx	r3
   9e7aa:	4603      	mov	r3, r0
   9e7ac:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9e7ae:	1d3b      	adds	r3, r7, #4
   9e7b0:	3304      	adds	r3, #4
   9e7b2:	2202      	movs	r2, #2
   9e7b4:	4619      	mov	r1, r3
   9e7b6:	2027      	movs	r0, #39	; 0x27
   9e7b8:	4b19      	ldr	r3, [pc, #100]	; (9e820 <Cl_Dprep_setdata+0x754>)
   9e7ba:	4798      	blx	r3
   9e7bc:	4603      	mov	r3, r0
   9e7be:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   9e7c0:	231d      	movs	r3, #29
   9e7c2:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   9e7c4:	f107 0314 	add.w	r3, r7, #20
   9e7c8:	3301      	adds	r3, #1
   9e7ca:	4619      	mov	r1, r3
   9e7cc:	200d      	movs	r0, #13
   9e7ce:	4b15      	ldr	r3, [pc, #84]	; (9e824 <Cl_Dprep_setdata+0x758>)
   9e7d0:	4798      	blx	r3
   9e7d2:	4603      	mov	r3, r0
   9e7d4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   9e7d6:	f107 0314 	add.w	r3, r7, #20
   9e7da:	3303      	adds	r3, #3
   9e7dc:	4619      	mov	r1, r3
   9e7de:	2026      	movs	r0, #38	; 0x26
   9e7e0:	4b10      	ldr	r3, [pc, #64]	; (9e824 <Cl_Dprep_setdata+0x758>)
   9e7e2:	4798      	blx	r3
   9e7e4:	4603      	mov	r3, r0
   9e7e6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   9e7e8:	f107 0314 	add.w	r3, r7, #20
   9e7ec:	3305      	adds	r3, #5
   9e7ee:	4619      	mov	r1, r3
   9e7f0:	2027      	movs	r0, #39	; 0x27
   9e7f2:	4b0c      	ldr	r3, [pc, #48]	; (9e824 <Cl_Dprep_setdata+0x758>)
   9e7f4:	4798      	blx	r3
   9e7f6:	4603      	mov	r3, r0
   9e7f8:	77fb      	strb	r3, [r7, #31]
					break;
   9e7fa:	e000      	b.n	9e7fe <Cl_Dprep_setdata+0x732>
					
					 default:
					 break;
   9e7fc:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   9e7fe:	2316      	movs	r3, #22
   9e800:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   9e802:	7bba      	ldrb	r2, [r7, #14]
   9e804:	f107 0114 	add.w	r1, r7, #20
   9e808:	7fbb      	ldrb	r3, [r7, #30]
   9e80a:	4618      	mov	r0, r3
   9e80c:	4b06      	ldr	r3, [pc, #24]	; (9e828 <Cl_Dprep_setdata+0x75c>)
   9e80e:	4798      	blx	r3
   9e810:	4603      	mov	r3, r0
   9e812:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   9e814:	2300      	movs	r3, #0
}
   9e816:	4618      	mov	r0, r3
   9e818:	3724      	adds	r7, #36	; 0x24
   9e81a:	46bd      	mov	sp, r7
   9e81c:	bd90      	pop	{r4, r7, pc}
   9e81e:	bf00      	nop
   9e820:	00097db5 	.word	0x00097db5
   9e824:	00097d7d 	.word	0x00097d7d
   9e828:	0009926d 	.word	0x0009926d

0009e82c <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   9e82c:	b590      	push	{r4, r7, lr}
   9e82e:	b085      	sub	sp, #20
   9e830:	af02      	add	r7, sp, #8
   9e832:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   9e834:	687b      	ldr	r3, [r7, #4]
   9e836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9e83a:	f000 80ab 	beq.w	9e994 <conf_activate_pressure_alarms+0x168>
   9e83e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9e842:	dc04      	bgt.n	9e84e <conf_activate_pressure_alarms+0x22>
   9e844:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9e848:	f000 80f2 	beq.w	9ea30 <conf_activate_pressure_alarms+0x204>
   9e84c:	e13e      	b.n	9eacc <conf_activate_pressure_alarms+0x2a0>
   9e84e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   9e852:	d051      	beq.n	9e8f8 <conf_activate_pressure_alarms+0xcc>
   9e854:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9e858:	f040 8138 	bne.w	9eacc <conf_activate_pressure_alarms+0x2a0>
		
		case 800 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e85c:	2300      	movs	r3, #0
   9e85e:	9300      	str	r3, [sp, #0]
   9e860:	f04f 0300 	mov.w	r3, #0
   9e864:	4a9c      	ldr	r2, [pc, #624]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e866:	2102      	movs	r1, #2
   9e868:	2015      	movs	r0, #21
   9e86a:	4c9c      	ldr	r4, [pc, #624]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e86c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e86e:	2300      	movs	r3, #0
   9e870:	9300      	str	r3, [sp, #0]
   9e872:	f04f 0300 	mov.w	r3, #0
   9e876:	4a98      	ldr	r2, [pc, #608]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e878:	2102      	movs	r1, #2
   9e87a:	2017      	movs	r0, #23
   9e87c:	4c97      	ldr	r4, [pc, #604]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e87e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   9e880:	2300      	movs	r3, #0
   9e882:	9300      	str	r3, [sp, #0]
   9e884:	f04f 0300 	mov.w	r3, #0
   9e888:	4a95      	ldr	r2, [pc, #596]	; (9eae0 <conf_activate_pressure_alarms+0x2b4>)
   9e88a:	2102      	movs	r1, #2
   9e88c:	2027      	movs	r0, #39	; 0x27
   9e88e:	4c93      	ldr	r4, [pc, #588]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e890:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9e892:	2300      	movs	r3, #0
   9e894:	9300      	str	r3, [sp, #0]
   9e896:	f04f 0300 	mov.w	r3, #0
   9e89a:	f04f 0200 	mov.w	r2, #0
   9e89e:	2103      	movs	r1, #3
   9e8a0:	2016      	movs	r0, #22
   9e8a2:	4c8e      	ldr	r4, [pc, #568]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e8a4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9e8a6:	2300      	movs	r3, #0
   9e8a8:	9300      	str	r3, [sp, #0]
   9e8aa:	f04f 0300 	mov.w	r3, #0
   9e8ae:	f04f 0200 	mov.w	r2, #0
   9e8b2:	2103      	movs	r1, #3
   9e8b4:	2018      	movs	r0, #24
   9e8b6:	4c89      	ldr	r4, [pc, #548]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e8b8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9e8ba:	2300      	movs	r3, #0
   9e8bc:	9300      	str	r3, [sp, #0]
   9e8be:	f04f 0300 	mov.w	r3, #0
   9e8c2:	f04f 0200 	mov.w	r2, #0
   9e8c6:	2103      	movs	r1, #3
   9e8c8:	2028      	movs	r0, #40	; 0x28
   9e8ca:	4c84      	ldr	r4, [pc, #528]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e8cc:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9e8ce:	2101      	movs	r1, #1
   9e8d0:	2015      	movs	r0, #21
   9e8d2:	4b84      	ldr	r3, [pc, #528]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e8d4:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9e8d6:	2101      	movs	r1, #1
   9e8d8:	2016      	movs	r0, #22
   9e8da:	4b82      	ldr	r3, [pc, #520]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e8dc:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9e8de:	2101      	movs	r1, #1
   9e8e0:	2017      	movs	r0, #23
   9e8e2:	4b80      	ldr	r3, [pc, #512]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e8e4:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9e8e6:	2101      	movs	r1, #1
   9e8e8:	2018      	movs	r0, #24
   9e8ea:	4b7e      	ldr	r3, [pc, #504]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e8ec:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   9e8ee:	2101      	movs	r1, #1
   9e8f0:	2027      	movs	r0, #39	; 0x27
   9e8f2:	4b7c      	ldr	r3, [pc, #496]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e8f4:	4798      	blx	r3
					
					break;
   9e8f6:	e0e9      	b.n	9eacc <conf_activate_pressure_alarms+0x2a0>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e8f8:	2300      	movs	r3, #0
   9e8fa:	9300      	str	r3, [sp, #0]
   9e8fc:	f04f 0300 	mov.w	r3, #0
   9e900:	4a75      	ldr	r2, [pc, #468]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e902:	2102      	movs	r1, #2
   9e904:	2015      	movs	r0, #21
   9e906:	4c75      	ldr	r4, [pc, #468]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e908:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e90a:	2300      	movs	r3, #0
   9e90c:	9300      	str	r3, [sp, #0]
   9e90e:	f04f 0300 	mov.w	r3, #0
   9e912:	4a71      	ldr	r2, [pc, #452]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e914:	2102      	movs	r1, #2
   9e916:	2017      	movs	r0, #23
   9e918:	4c70      	ldr	r4, [pc, #448]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e91a:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9e91c:	2300      	movs	r3, #0
   9e91e:	9300      	str	r3, [sp, #0]
   9e920:	f04f 0300 	mov.w	r3, #0
   9e924:	4a70      	ldr	r2, [pc, #448]	; (9eae8 <conf_activate_pressure_alarms+0x2bc>)
   9e926:	2102      	movs	r1, #2
   9e928:	2027      	movs	r0, #39	; 0x27
   9e92a:	4c6c      	ldr	r4, [pc, #432]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e92c:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9e92e:	2300      	movs	r3, #0
   9e930:	9300      	str	r3, [sp, #0]
   9e932:	f04f 0300 	mov.w	r3, #0
   9e936:	f04f 0200 	mov.w	r2, #0
   9e93a:	2103      	movs	r1, #3
   9e93c:	2016      	movs	r0, #22
   9e93e:	4c67      	ldr	r4, [pc, #412]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e940:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9e942:	2300      	movs	r3, #0
   9e944:	9300      	str	r3, [sp, #0]
   9e946:	f04f 0300 	mov.w	r3, #0
   9e94a:	f04f 0200 	mov.w	r2, #0
   9e94e:	2103      	movs	r1, #3
   9e950:	2018      	movs	r0, #24
   9e952:	4c62      	ldr	r4, [pc, #392]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e954:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9e956:	2300      	movs	r3, #0
   9e958:	9300      	str	r3, [sp, #0]
   9e95a:	f04f 0300 	mov.w	r3, #0
   9e95e:	f04f 0200 	mov.w	r2, #0
   9e962:	2103      	movs	r1, #3
   9e964:	2028      	movs	r0, #40	; 0x28
   9e966:	4c5d      	ldr	r4, [pc, #372]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e968:	47a0      	blx	r4
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9e96a:	2101      	movs	r1, #1
   9e96c:	2015      	movs	r0, #21
   9e96e:	4b5d      	ldr	r3, [pc, #372]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e970:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9e972:	2101      	movs	r1, #1
   9e974:	2016      	movs	r0, #22
   9e976:	4b5b      	ldr	r3, [pc, #364]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e978:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9e97a:	2101      	movs	r1, #1
   9e97c:	2017      	movs	r0, #23
   9e97e:	4b59      	ldr	r3, [pc, #356]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e980:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9e982:	2101      	movs	r1, #1
   9e984:	2018      	movs	r0, #24
   9e986:	4b57      	ldr	r3, [pc, #348]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e988:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9e98a:	2101      	movs	r1, #1
   9e98c:	2027      	movs	r0, #39	; 0x27
   9e98e:	4b55      	ldr	r3, [pc, #340]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9e990:	4798      	blx	r3
		
		break;
   9e992:	e09b      	b.n	9eacc <conf_activate_pressure_alarms+0x2a0>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e994:	2300      	movs	r3, #0
   9e996:	9300      	str	r3, [sp, #0]
   9e998:	f04f 0300 	mov.w	r3, #0
   9e99c:	4a4e      	ldr	r2, [pc, #312]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e99e:	2102      	movs	r1, #2
   9e9a0:	2015      	movs	r0, #21
   9e9a2:	4c4e      	ldr	r4, [pc, #312]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e9a4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9e9a6:	2300      	movs	r3, #0
   9e9a8:	9300      	str	r3, [sp, #0]
   9e9aa:	f04f 0300 	mov.w	r3, #0
   9e9ae:	4a4a      	ldr	r2, [pc, #296]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9e9b0:	2102      	movs	r1, #2
   9e9b2:	2017      	movs	r0, #23
   9e9b4:	4c49      	ldr	r4, [pc, #292]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e9b6:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9e9b8:	2300      	movs	r3, #0
   9e9ba:	9300      	str	r3, [sp, #0]
   9e9bc:	f04f 0300 	mov.w	r3, #0
   9e9c0:	4a49      	ldr	r2, [pc, #292]	; (9eae8 <conf_activate_pressure_alarms+0x2bc>)
   9e9c2:	2102      	movs	r1, #2
   9e9c4:	2027      	movs	r0, #39	; 0x27
   9e9c6:	4c45      	ldr	r4, [pc, #276]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e9c8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9e9ca:	2300      	movs	r3, #0
   9e9cc:	9300      	str	r3, [sp, #0]
   9e9ce:	f04f 0300 	mov.w	r3, #0
   9e9d2:	f04f 0200 	mov.w	r2, #0
   9e9d6:	2103      	movs	r1, #3
   9e9d8:	2016      	movs	r0, #22
   9e9da:	4c40      	ldr	r4, [pc, #256]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e9dc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9e9de:	2300      	movs	r3, #0
   9e9e0:	9300      	str	r3, [sp, #0]
   9e9e2:	f04f 0300 	mov.w	r3, #0
   9e9e6:	f04f 0200 	mov.w	r2, #0
   9e9ea:	2103      	movs	r1, #3
   9e9ec:	2018      	movs	r0, #24
   9e9ee:	4c3b      	ldr	r4, [pc, #236]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9e9f0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9e9f2:	2300      	movs	r3, #0
   9e9f4:	9300      	str	r3, [sp, #0]
   9e9f6:	f04f 0300 	mov.w	r3, #0
   9e9fa:	f04f 0200 	mov.w	r2, #0
   9e9fe:	2103      	movs	r1, #3
   9ea00:	2028      	movs	r0, #40	; 0x28
   9ea02:	4c36      	ldr	r4, [pc, #216]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea04:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   9ea06:	2100      	movs	r1, #0
   9ea08:	2015      	movs	r0, #21
   9ea0a:	4b36      	ldr	r3, [pc, #216]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9ea0c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   9ea0e:	2100      	movs	r1, #0
   9ea10:	2016      	movs	r0, #22
   9ea12:	4b34      	ldr	r3, [pc, #208]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9ea14:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   9ea16:	2100      	movs	r1, #0
   9ea18:	2017      	movs	r0, #23
   9ea1a:	4b32      	ldr	r3, [pc, #200]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9ea1c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   9ea1e:	2100      	movs	r1, #0
   9ea20:	2018      	movs	r0, #24
   9ea22:	4b30      	ldr	r3, [pc, #192]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9ea24:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   9ea26:	2100      	movs	r1, #0
   9ea28:	2027      	movs	r0, #39	; 0x27
   9ea2a:	4b2e      	ldr	r3, [pc, #184]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9ea2c:	4798      	blx	r3
					break;
   9ea2e:	e04d      	b.n	9eacc <conf_activate_pressure_alarms+0x2a0>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   9ea30:	2300      	movs	r3, #0
   9ea32:	9300      	str	r3, [sp, #0]
   9ea34:	f04f 0300 	mov.w	r3, #0
   9ea38:	4a27      	ldr	r2, [pc, #156]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9ea3a:	2102      	movs	r1, #2
   9ea3c:	2015      	movs	r0, #21
   9ea3e:	4c27      	ldr	r4, [pc, #156]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea40:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   9ea42:	2300      	movs	r3, #0
   9ea44:	9300      	str	r3, [sp, #0]
   9ea46:	f04f 0300 	mov.w	r3, #0
   9ea4a:	4a23      	ldr	r2, [pc, #140]	; (9ead8 <conf_activate_pressure_alarms+0x2ac>)
   9ea4c:	2102      	movs	r1, #2
   9ea4e:	2017      	movs	r0, #23
   9ea50:	4c22      	ldr	r4, [pc, #136]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea52:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,1000,0,0);
   9ea54:	2300      	movs	r3, #0
   9ea56:	9300      	str	r3, [sp, #0]
   9ea58:	f04f 0300 	mov.w	r3, #0
   9ea5c:	4a22      	ldr	r2, [pc, #136]	; (9eae8 <conf_activate_pressure_alarms+0x2bc>)
   9ea5e:	2102      	movs	r1, #2
   9ea60:	2027      	movs	r0, #39	; 0x27
   9ea62:	4c1e      	ldr	r4, [pc, #120]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea64:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   9ea66:	2300      	movs	r3, #0
   9ea68:	9300      	str	r3, [sp, #0]
   9ea6a:	f04f 0300 	mov.w	r3, #0
   9ea6e:	f04f 0200 	mov.w	r2, #0
   9ea72:	2103      	movs	r1, #3
   9ea74:	2016      	movs	r0, #22
   9ea76:	4c19      	ldr	r4, [pc, #100]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea78:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   9ea7a:	2300      	movs	r3, #0
   9ea7c:	9300      	str	r3, [sp, #0]
   9ea7e:	f04f 0300 	mov.w	r3, #0
   9ea82:	f04f 0200 	mov.w	r2, #0
   9ea86:	2103      	movs	r1, #3
   9ea88:	2018      	movs	r0, #24
   9ea8a:	4c14      	ldr	r4, [pc, #80]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9ea8c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   9ea8e:	2300      	movs	r3, #0
   9ea90:	9300      	str	r3, [sp, #0]
   9ea92:	f04f 0300 	mov.w	r3, #0
   9ea96:	f04f 0200 	mov.w	r2, #0
   9ea9a:	2103      	movs	r1, #3
   9ea9c:	2028      	movs	r0, #40	; 0x28
   9ea9e:	4c0f      	ldr	r4, [pc, #60]	; (9eadc <conf_activate_pressure_alarms+0x2b0>)
   9eaa0:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9eaa2:	2101      	movs	r1, #1
   9eaa4:	2015      	movs	r0, #21
   9eaa6:	4b0f      	ldr	r3, [pc, #60]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9eaa8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9eaaa:	2101      	movs	r1, #1
   9eaac:	2016      	movs	r0, #22
   9eaae:	4b0d      	ldr	r3, [pc, #52]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9eab0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9eab2:	2101      	movs	r1, #1
   9eab4:	2017      	movs	r0, #23
   9eab6:	4b0b      	ldr	r3, [pc, #44]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9eab8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9eaba:	2101      	movs	r1, #1
   9eabc:	2018      	movs	r0, #24
   9eabe:	4b09      	ldr	r3, [pc, #36]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9eac0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9eac2:	2101      	movs	r1, #1
   9eac4:	2027      	movs	r0, #39	; 0x27
   9eac6:	4b07      	ldr	r3, [pc, #28]	; (9eae4 <conf_activate_pressure_alarms+0x2b8>)
   9eac8:	4798      	blx	r3
					break;
   9eaca:	bf00      	nop
		
		
		
	}
	
}
   9eacc:	bf00      	nop
   9eace:	4618      	mov	r0, r3
   9ead0:	370c      	adds	r7, #12
   9ead2:	46bd      	mov	sp, r7
   9ead4:	bd90      	pop	{r4, r7, pc}
   9ead6:	bf00      	nop
   9ead8:	43c80000 	.word	0x43c80000
   9eadc:	00082f01 	.word	0x00082f01
   9eae0:	44fa0000 	.word	0x44fa0000
   9eae4:	00082f5d 	.word	0x00082f5d
   9eae8:	447a0000 	.word	0x447a0000

0009eaec <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   9eaec:	b590      	push	{r4, r7, lr}
   9eaee:	b089      	sub	sp, #36	; 0x24
   9eaf0:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9eaf2:	2300      	movs	r3, #0
   9eaf4:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data =0;
   9eaf6:	2300      	movs	r3, #0
   9eaf8:	717b      	strb	r3, [r7, #5]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   9eafa:	2300      	movs	r3, #0
   9eafc:	82bb      	strh	r3, [r7, #20]
   9eafe:	2300      	movs	r3, #0
   9eb00:	827b      	strh	r3, [r7, #18]
   9eb02:	2300      	movs	r3, #0
   9eb04:	823b      	strh	r3, [r7, #16]
   9eb06:	2300      	movs	r3, #0
   9eb08:	81fb      	strh	r3, [r7, #14]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   9eb0a:	2301      	movs	r3, #1
   9eb0c:	737b      	strb	r3, [r7, #13]
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
					 Cl_dprepreaduinessflag = false;
				 }		
				 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   9eb0e:	7b7b      	ldrb	r3, [r7, #13]
   9eb10:	f083 0301 	eor.w	r3, r3, #1
   9eb14:	b2db      	uxtb	r3, r3
   9eb16:	2b00      	cmp	r3, #0
   9eb18:	d001      	beq.n	9eb1e <Cl_Dprep_StartPreparation+0x32>
				 {
					 return CL_REJECTED;
   9eb1a:	2303      	movs	r3, #3
   9eb1c:	e144      	b.n	9eda8 <Cl_Dprep_StartPreparation+0x2bc>
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   9eb1e:	4ba4      	ldr	r3, [pc, #656]	; (9edb0 <Cl_Dprep_StartPreparation+0x2c4>)
   9eb20:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9eb22:	4ba4      	ldr	r3, [pc, #656]	; (9edb4 <Cl_Dprep_StartPreparation+0x2c8>)
   9eb24:	4798      	blx	r3
   9eb26:	4603      	mov	r3, r0
   9eb28:	75fb      	strb	r3, [r7, #23]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   9eb2a:	4ba3      	ldr	r3, [pc, #652]	; (9edb8 <Cl_Dprep_StartPreparation+0x2cc>)
   9eb2c:	4798      	blx	r3
							data = 1;
   9eb2e:	2301      	movs	r3, #1
   9eb30:	717b      	strb	r3, [r7, #5]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   9eb32:	1d7b      	adds	r3, r7, #5
   9eb34:	2200      	movs	r2, #0
   9eb36:	4619      	mov	r1, r3
   9eb38:	200c      	movs	r0, #12
   9eb3a:	4ba0      	ldr	r3, [pc, #640]	; (9edbc <Cl_Dprep_StartPreparation+0x2d0>)
   9eb3c:	4798      	blx	r3
   9eb3e:	4603      	mov	r3, r0
   9eb40:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   9eb42:	1d7b      	adds	r3, r7, #5
   9eb44:	2200      	movs	r2, #0
   9eb46:	4619      	mov	r1, r3
   9eb48:	201e      	movs	r0, #30
   9eb4a:	4b9c      	ldr	r3, [pc, #624]	; (9edbc <Cl_Dprep_StartPreparation+0x2d0>)
   9eb4c:	4798      	blx	r3
   9eb4e:	4603      	mov	r3, r0
   9eb50:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9eb52:	2001      	movs	r0, #1
   9eb54:	4b9a      	ldr	r3, [pc, #616]	; (9edc0 <Cl_Dprep_StartPreparation+0x2d4>)
   9eb56:	4798      	blx	r3
   9eb58:	4603      	mov	r3, r0
   9eb5a:	75fb      	strb	r3, [r7, #23]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9eb5c:	2300      	movs	r3, #0
   9eb5e:	9300      	str	r3, [sp, #0]
   9eb60:	f04f 0300 	mov.w	r3, #0
   9eb64:	f04f 0200 	mov.w	r2, #0
   9eb68:	2101      	movs	r1, #1
   9eb6a:	202a      	movs	r0, #42	; 0x2a
   9eb6c:	4c95      	ldr	r4, [pc, #596]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9eb6e:	47a0      	blx	r4
   9eb70:	4603      	mov	r3, r0
   9eb72:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9eb74:	2300      	movs	r3, #0
   9eb76:	9300      	str	r3, [sp, #0]
   9eb78:	f04f 0300 	mov.w	r3, #0
   9eb7c:	f04f 0200 	mov.w	r2, #0
   9eb80:	2101      	movs	r1, #1
   9eb82:	202c      	movs	r0, #44	; 0x2c
   9eb84:	4c8f      	ldr	r4, [pc, #572]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9eb86:	47a0      	blx	r4
   9eb88:	4603      	mov	r3, r0
   9eb8a:	75fb      	strb	r3, [r7, #23]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9eb8c:	2300      	movs	r3, #0
   9eb8e:	9300      	str	r3, [sp, #0]
   9eb90:	f04f 0300 	mov.w	r3, #0
   9eb94:	f04f 0200 	mov.w	r2, #0
   9eb98:	2101      	movs	r1, #1
   9eb9a:	2004      	movs	r0, #4
   9eb9c:	4c89      	ldr	r4, [pc, #548]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9eb9e:	47a0      	blx	r4
   9eba0:	4603      	mov	r3, r0
   9eba2:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9eba4:	2300      	movs	r3, #0
   9eba6:	9300      	str	r3, [sp, #0]
   9eba8:	f04f 0300 	mov.w	r3, #0
   9ebac:	f04f 0200 	mov.w	r2, #0
   9ebb0:	2101      	movs	r1, #1
   9ebb2:	2003      	movs	r0, #3
   9ebb4:	4c83      	ldr	r4, [pc, #524]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ebb6:	47a0      	blx	r4
   9ebb8:	4603      	mov	r3, r0
   9ebba:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,14.0,0,0);
   9ebbc:	2300      	movs	r3, #0
   9ebbe:	9300      	str	r3, [sp, #0]
   9ebc0:	f04f 0300 	mov.w	r3, #0
   9ebc4:	4a80      	ldr	r2, [pc, #512]	; (9edc8 <Cl_Dprep_StartPreparation+0x2dc>)
   9ebc6:	2102      	movs	r1, #2
   9ebc8:	2008      	movs	r0, #8
   9ebca:	4c7e      	ldr	r4, [pc, #504]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ebcc:	47a0      	blx	r4
   9ebce:	4603      	mov	r3, r0
   9ebd0:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,40,0,0);
   9ebd2:	2300      	movs	r3, #0
   9ebd4:	9300      	str	r3, [sp, #0]
   9ebd6:	f04f 0300 	mov.w	r3, #0
   9ebda:	4a7c      	ldr	r2, [pc, #496]	; (9edcc <Cl_Dprep_StartPreparation+0x2e0>)
   9ebdc:	2102      	movs	r1, #2
   9ebde:	200f      	movs	r0, #15
   9ebe0:	4c78      	ldr	r4, [pc, #480]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ebe2:	47a0      	blx	r4
   9ebe4:	4603      	mov	r3, r0
   9ebe6:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,40,0,0);
   9ebe8:	2300      	movs	r3, #0
   9ebea:	9300      	str	r3, [sp, #0]
   9ebec:	f04f 0300 	mov.w	r3, #0
   9ebf0:	4a76      	ldr	r2, [pc, #472]	; (9edcc <Cl_Dprep_StartPreparation+0x2e0>)
   9ebf2:	2102      	movs	r1, #2
   9ebf4:	2011      	movs	r0, #17
   9ebf6:	4c73      	ldr	r4, [pc, #460]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ebf8:	47a0      	blx	r4
   9ebfa:	4603      	mov	r3, r0
   9ebfc:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,40,0,0);
   9ebfe:	2300      	movs	r3, #0
   9ec00:	9300      	str	r3, [sp, #0]
   9ec02:	f04f 0300 	mov.w	r3, #0
   9ec06:	4a71      	ldr	r2, [pc, #452]	; (9edcc <Cl_Dprep_StartPreparation+0x2e0>)
   9ec08:	2102      	movs	r1, #2
   9ec0a:	2013      	movs	r0, #19
   9ec0c:	4c6d      	ldr	r4, [pc, #436]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ec0e:	47a0      	blx	r4
   9ec10:	4603      	mov	r3, r0
   9ec12:	75fb      	strb	r3, [r7, #23]
							
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   9ec14:	2300      	movs	r3, #0
   9ec16:	9300      	str	r3, [sp, #0]
   9ec18:	f04f 0300 	mov.w	r3, #0
   9ec1c:	f04f 0200 	mov.w	r2, #0
   9ec20:	2100      	movs	r1, #0
   9ec22:	200d      	movs	r0, #13
   9ec24:	4c67      	ldr	r4, [pc, #412]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ec26:	47a0      	blx	r4
   9ec28:	4603      	mov	r3, r0
   9ec2a:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   9ec2c:	2300      	movs	r3, #0
   9ec2e:	9300      	str	r3, [sp, #0]
   9ec30:	f04f 0300 	mov.w	r3, #0
   9ec34:	f04f 0200 	mov.w	r2, #0
   9ec38:	2100      	movs	r1, #0
   9ec3a:	200c      	movs	r0, #12
   9ec3c:	4c61      	ldr	r4, [pc, #388]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ec3e:	47a0      	blx	r4
   9ec40:	4603      	mov	r3, r0
   9ec42:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   9ec44:	2300      	movs	r3, #0
   9ec46:	9300      	str	r3, [sp, #0]
   9ec48:	f04f 0300 	mov.w	r3, #0
   9ec4c:	4a60      	ldr	r2, [pc, #384]	; (9edd0 <Cl_Dprep_StartPreparation+0x2e4>)
   9ec4e:	2100      	movs	r1, #0
   9ec50:	200e      	movs	r0, #14
   9ec52:	4c5c      	ldr	r4, [pc, #368]	; (9edc4 <Cl_Dprep_StartPreparation+0x2d8>)
   9ec54:	47a0      	blx	r4
   9ec56:	4603      	mov	r3, r0
   9ec58:	75fb      	strb	r3, [r7, #23]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   9ec5a:	2101      	movs	r1, #1
   9ec5c:	202a      	movs	r0, #42	; 0x2a
   9ec5e:	4b5d      	ldr	r3, [pc, #372]	; (9edd4 <Cl_Dprep_StartPreparation+0x2e8>)
   9ec60:	4798      	blx	r3
   9ec62:	4603      	mov	r3, r0
   9ec64:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   9ec66:	2101      	movs	r1, #1
   9ec68:	202c      	movs	r0, #44	; 0x2c
   9ec6a:	4b5a      	ldr	r3, [pc, #360]	; (9edd4 <Cl_Dprep_StartPreparation+0x2e8>)
   9ec6c:	4798      	blx	r3
   9ec6e:	4603      	mov	r3, r0
   9ec70:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9ec72:	2101      	movs	r1, #1
   9ec74:	2003      	movs	r0, #3
   9ec76:	4b57      	ldr	r3, [pc, #348]	; (9edd4 <Cl_Dprep_StartPreparation+0x2e8>)
   9ec78:	4798      	blx	r3
   9ec7a:	4603      	mov	r3, r0
   9ec7c:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9ec7e:	2101      	movs	r1, #1
   9ec80:	2004      	movs	r0, #4
   9ec82:	4b54      	ldr	r3, [pc, #336]	; (9edd4 <Cl_Dprep_StartPreparation+0x2e8>)
   9ec84:	4798      	blx	r3
   9ec86:	4603      	mov	r3, r0
   9ec88:	75fb      	strb	r3, [r7, #23]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 							
						
							if(Current_sense_trigger)
   9ec8a:	4b53      	ldr	r3, [pc, #332]	; (9edd8 <Cl_Dprep_StartPreparation+0x2ec>)
   9ec8c:	781b      	ldrb	r3, [r3, #0]
   9ec8e:	2b00      	cmp	r3, #0
   9ec90:	d005      	beq.n	9ec9e <Cl_Dprep_StartPreparation+0x1b2>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9ec92:	2101      	movs	r1, #1
   9ec94:	203c      	movs	r0, #60	; 0x3c
   9ec96:	4b4f      	ldr	r3, [pc, #316]	; (9edd4 <Cl_Dprep_StartPreparation+0x2e8>)
   9ec98:	4798      	blx	r3
   9ec9a:	4603      	mov	r3, r0
   9ec9c:	75fb      	strb	r3, [r7, #23]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9ec9e:	2001      	movs	r0, #1
   9eca0:	4b4e      	ldr	r3, [pc, #312]	; (9eddc <Cl_Dprep_StartPreparation+0x2f0>)
   9eca2:	4798      	blx	r3
   9eca4:	4603      	mov	r3, r0
   9eca6:	75fb      	strb	r3, [r7, #23]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9eca8:	2002      	movs	r0, #2
   9ecaa:	4b4c      	ldr	r3, [pc, #304]	; (9eddc <Cl_Dprep_StartPreparation+0x2f0>)
   9ecac:	4798      	blx	r3
   9ecae:	4603      	mov	r3, r0
   9ecb0:	75fb      	strb	r3, [r7, #23]
							sv_cntrl_enable_bypass();
   9ecb2:	4b4b      	ldr	r3, [pc, #300]	; (9ede0 <Cl_Dprep_StartPreparation+0x2f4>)
   9ecb4:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9ecb6:	4b4b      	ldr	r3, [pc, #300]	; (9ede4 <Cl_Dprep_StartPreparation+0x2f8>)
   9ecb8:	2201      	movs	r2, #1
   9ecba:	701a      	strb	r2, [r3, #0]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9ecbc:	200b      	movs	r0, #11
   9ecbe:	4b4a      	ldr	r3, [pc, #296]	; (9ede8 <Cl_Dprep_StartPreparation+0x2fc>)
   9ecc0:	4798      	blx	r3
   9ecc2:	4603      	mov	r3, r0
   9ecc4:	75fb      	strb	r3, [r7, #23]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   9ecc6:	4b49      	ldr	r3, [pc, #292]	; (9edec <Cl_Dprep_StartPreparation+0x300>)
   9ecc8:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   9ecca:	4b49      	ldr	r3, [pc, #292]	; (9edf0 <Cl_Dprep_StartPreparation+0x304>)
   9eccc:	695b      	ldr	r3, [r3, #20]
   9ecce:	60bb      	str	r3, [r7, #8]
							Cl_Uint16Type potvalue = 0;
   9ecd0:	2300      	movs	r3, #0
   9ecd2:	80fb      	strh	r3, [r7, #6]
							switch (temp)
   9ecd4:	68bb      	ldr	r3, [r7, #8]
   9ecd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9ecda:	d01c      	beq.n	9ed16 <Cl_Dprep_StartPreparation+0x22a>
   9ecdc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9ece0:	d003      	beq.n	9ecea <Cl_Dprep_StartPreparation+0x1fe>
   9ece2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9ece6:	d030      	beq.n	9ed4a <Cl_Dprep_StartPreparation+0x25e>
   9ece8:	e044      	b.n	9ed74 <Cl_Dprep_StartPreparation+0x288>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9ecea:	f44f 7161 	mov.w	r1, #900	; 0x384
   9ecee:	2002      	movs	r0, #2
   9ecf0:	4b40      	ldr	r3, [pc, #256]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ecf2:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   9ecf4:	f44f 7148 	mov.w	r1, #800	; 0x320
   9ecf8:	2001      	movs	r0, #1
   9ecfa:	4b3e      	ldr	r3, [pc, #248]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ecfc:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   9ecfe:	f44f 7385 	mov.w	r3, #266	; 0x10a
   9ed02:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9ed04:	88fb      	ldrh	r3, [r7, #6]
   9ed06:	4618      	mov	r0, r3
   9ed08:	4b3b      	ldr	r3, [pc, #236]	; (9edf8 <Cl_Dprep_StartPreparation+0x30c>)
   9ed0a:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   9ed0c:	f44f 7048 	mov.w	r0, #800	; 0x320
   9ed10:	4b3a      	ldr	r3, [pc, #232]	; (9edfc <Cl_Dprep_StartPreparation+0x310>)
   9ed12:	4798      	blx	r3
								
							
								
								break;
   9ed14:	e03f      	b.n	9ed96 <Cl_Dprep_StartPreparation+0x2aa>
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9ed16:	2203      	movs	r2, #3
   9ed18:	4939      	ldr	r1, [pc, #228]	; (9ee00 <Cl_Dprep_StartPreparation+0x314>)
   9ed1a:	2018      	movs	r0, #24
   9ed1c:	4b27      	ldr	r3, [pc, #156]	; (9edbc <Cl_Dprep_StartPreparation+0x2d0>)
   9ed1e:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9ed20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9ed24:	2002      	movs	r0, #2
   9ed26:	4b33      	ldr	r3, [pc, #204]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed28:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9ed2a:	f240 414c 	movw	r1, #1100	; 0x44c
   9ed2e:	2001      	movs	r0, #1
   9ed30:	4b30      	ldr	r3, [pc, #192]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed32:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9ed34:	2344      	movs	r3, #68	; 0x44
   9ed36:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9ed38:	88fb      	ldrh	r3, [r7, #6]
   9ed3a:	4618      	mov	r0, r3
   9ed3c:	4b2e      	ldr	r3, [pc, #184]	; (9edf8 <Cl_Dprep_StartPreparation+0x30c>)
   9ed3e:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   9ed40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   9ed44:	4b2d      	ldr	r3, [pc, #180]	; (9edfc <Cl_Dprep_StartPreparation+0x310>)
   9ed46:	4798      	blx	r3
								
								break;
   9ed48:	e025      	b.n	9ed96 <Cl_Dprep_StartPreparation+0x2aa>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   9ed4a:	f44f 618c 	mov.w	r1, #1120	; 0x460
   9ed4e:	2002      	movs	r0, #2
   9ed50:	4b28      	ldr	r3, [pc, #160]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed52:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,620);
   9ed54:	f44f 711b 	mov.w	r1, #620	; 0x26c
   9ed58:	2001      	movs	r0, #1
   9ed5a:	4b26      	ldr	r3, [pc, #152]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed5c:	4798      	blx	r3
								potvalue = (800 * 1024)/10000;
   9ed5e:	2351      	movs	r3, #81	; 0x51
   9ed60:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9ed62:	88fb      	ldrh	r3, [r7, #6]
   9ed64:	4618      	mov	r0, r3
   9ed66:	4b24      	ldr	r3, [pc, #144]	; (9edf8 <Cl_Dprep_StartPreparation+0x30c>)
   9ed68:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   9ed6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   9ed6e:	4b23      	ldr	r3, [pc, #140]	; (9edfc <Cl_Dprep_StartPreparation+0x310>)
   9ed70:	4798      	blx	r3
										
								break;
   9ed72:	e010      	b.n	9ed96 <Cl_Dprep_StartPreparation+0x2aa>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9ed74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9ed78:	2002      	movs	r0, #2
   9ed7a:	4b1e      	ldr	r3, [pc, #120]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed7c:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9ed7e:	f240 414c 	movw	r1, #1100	; 0x44c
   9ed82:	2001      	movs	r0, #1
   9ed84:	4b1b      	ldr	r3, [pc, #108]	; (9edf4 <Cl_Dprep_StartPreparation+0x308>)
   9ed86:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   9ed88:	2344      	movs	r3, #68	; 0x44
   9ed8a:	80fb      	strh	r3, [r7, #6]
								sv_cs_setpotvalue(potvalue);
   9ed8c:	88fb      	ldrh	r3, [r7, #6]
   9ed8e:	4618      	mov	r0, r3
   9ed90:	4b19      	ldr	r3, [pc, #100]	; (9edf8 <Cl_Dprep_StartPreparation+0x30c>)
   9ed92:	4798      	blx	r3
								
								break;
   9ed94:	bf00      	nop
							}
						//	#if 0
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9ed96:	2001      	movs	r0, #1
   9ed98:	4b1a      	ldr	r3, [pc, #104]	; (9ee04 <Cl_Dprep_StartPreparation+0x318>)
   9ed9a:	4798      	blx	r3
   9ed9c:	4603      	mov	r3, r0
   9ed9e:	75fb      	strb	r3, [r7, #23]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   9eda0:	4b19      	ldr	r3, [pc, #100]	; (9ee08 <Cl_Dprep_StartPreparation+0x31c>)
   9eda2:	2202      	movs	r2, #2
   9eda4:	701a      	strb	r2, [r3, #0]
							
							return 0;
   9eda6:	2300      	movs	r3, #0
				
	}
   9eda8:	4618      	mov	r0, r3
   9edaa:	371c      	adds	r7, #28
   9edac:	46bd      	mov	sp, r7
   9edae:	bd90      	pop	{r4, r7, pc}
   9edb0:	000977c1 	.word	0x000977c1
   9edb4:	0009d6f9 	.word	0x0009d6f9
   9edb8:	0009df39 	.word	0x0009df39
   9edbc:	0009926d 	.word	0x0009926d
   9edc0:	00091f6d 	.word	0x00091f6d
   9edc4:	00082f01 	.word	0x00082f01
   9edc8:	41600000 	.word	0x41600000
   9edcc:	42200000 	.word	0x42200000
   9edd0:	44bb8000 	.word	0x44bb8000
   9edd4:	00082f5d 	.word	0x00082f5d
   9edd8:	200709ee 	.word	0x200709ee
   9eddc:	00097451 	.word	0x00097451
   9ede0:	0009769d 	.word	0x0009769d
   9ede4:	20072830 	.word	0x20072830
   9ede8:	00083379 	.word	0x00083379
   9edec:	00097899 	.word	0x00097899
   9edf0:	20073194 	.word	0x20073194
   9edf4:	00097569 	.word	0x00097569
   9edf8:	00097999 	.word	0x00097999
   9edfc:	0009e82d 	.word	0x0009e82d
   9ee00:	000a5918 	.word	0x000a5918
   9ee04:	00088a8d 	.word	0x00088a8d
   9ee08:	2007282f 	.word	0x2007282f
   9ee0c:	00000000 	.word	0x00000000

0009ee10 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   9ee10:	b590      	push	{r4, r7, lr}
   9ee12:	b087      	sub	sp, #28
   9ee14:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   9ee16:	4b98      	ldr	r3, [pc, #608]	; (9f078 <Cl_Dprep_StartDialyserPrime+0x268>)
   9ee18:	4798      	blx	r3
			dialyzerprime_flag =1;
   9ee1a:	4b98      	ldr	r3, [pc, #608]	; (9f07c <Cl_Dprep_StartDialyserPrime+0x26c>)
   9ee1c:	2201      	movs	r2, #1
   9ee1e:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9ee20:	2300      	movs	r3, #0
   9ee22:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   9ee24:	2300      	movs	r3, #0
   9ee26:	73bb      	strb	r3, [r7, #14]
				
			Cl_dprepMinutescounter = 0;
   9ee28:	4b95      	ldr	r3, [pc, #596]	; (9f080 <Cl_Dprep_StartDialyserPrime+0x270>)
   9ee2a:	2200      	movs	r2, #0
   9ee2c:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   9ee2e:	4b95      	ldr	r3, [pc, #596]	; (9f084 <Cl_Dprep_StartDialyserPrime+0x274>)
   9ee30:	2200      	movs	r2, #0
   9ee32:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   9ee34:	4b94      	ldr	r3, [pc, #592]	; (9f088 <Cl_Dprep_StartDialyserPrime+0x278>)
   9ee36:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9ee38:	4b94      	ldr	r3, [pc, #592]	; (9f08c <Cl_Dprep_StartDialyserPrime+0x27c>)
   9ee3a:	4798      	blx	r3
   9ee3c:	4603      	mov	r3, r0
   9ee3e:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9ee40:	2300      	movs	r3, #0
   9ee42:	9300      	str	r3, [sp, #0]
   9ee44:	f04f 0300 	mov.w	r3, #0
   9ee48:	f04f 0200 	mov.w	r2, #0
   9ee4c:	2100      	movs	r1, #0
   9ee4e:	2005      	movs	r0, #5
   9ee50:	4c8f      	ldr	r4, [pc, #572]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9ee52:	47a0      	blx	r4
   9ee54:	4603      	mov	r3, r0
   9ee56:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9ee58:	2300      	movs	r3, #0
   9ee5a:	9300      	str	r3, [sp, #0]
   9ee5c:	f04f 0300 	mov.w	r3, #0
   9ee60:	f04f 0200 	mov.w	r2, #0
   9ee64:	2100      	movs	r1, #0
   9ee66:	2006      	movs	r0, #6
   9ee68:	4c89      	ldr	r4, [pc, #548]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9ee6a:	47a0      	blx	r4
   9ee6c:	4603      	mov	r3, r0
   9ee6e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9ee70:	2300      	movs	r3, #0
   9ee72:	9300      	str	r3, [sp, #0]
   9ee74:	f04f 0300 	mov.w	r3, #0
   9ee78:	f04f 0200 	mov.w	r2, #0
   9ee7c:	2101      	movs	r1, #1
   9ee7e:	202a      	movs	r0, #42	; 0x2a
   9ee80:	4c83      	ldr	r4, [pc, #524]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9ee82:	47a0      	blx	r4
   9ee84:	4603      	mov	r3, r0
   9ee86:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   9ee88:	2300      	movs	r3, #0
   9ee8a:	9300      	str	r3, [sp, #0]
   9ee8c:	f04f 0300 	mov.w	r3, #0
   9ee90:	f04f 0200 	mov.w	r2, #0
   9ee94:	2101      	movs	r1, #1
   9ee96:	202c      	movs	r0, #44	; 0x2c
   9ee98:	4c7d      	ldr	r4, [pc, #500]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9ee9a:	47a0      	blx	r4
   9ee9c:	4603      	mov	r3, r0
   9ee9e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   9eea0:	4b7c      	ldr	r3, [pc, #496]	; (9f094 <Cl_Dprep_StartDialyserPrime+0x284>)
   9eea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   9eea4:	4b7c      	ldr	r3, [pc, #496]	; (9f098 <Cl_Dprep_StartDialyserPrime+0x288>)
   9eea6:	4610      	mov	r0, r2
   9eea8:	4798      	blx	r3
   9eeaa:	4c7c      	ldr	r4, [pc, #496]	; (9f09c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9eeac:	a370      	add	r3, pc, #448	; (adr r3, 9f070 <Cl_Dprep_StartDialyserPrime+0x260>)
   9eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
   9eeb2:	47a0      	blx	r4
   9eeb4:	4603      	mov	r3, r0
   9eeb6:	460c      	mov	r4, r1
   9eeb8:	4619      	mov	r1, r3
   9eeba:	4622      	mov	r2, r4
   9eebc:	4b78      	ldr	r3, [pc, #480]	; (9f0a0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9eebe:	4608      	mov	r0, r1
   9eec0:	4611      	mov	r1, r2
   9eec2:	4798      	blx	r3
   9eec4:	4602      	mov	r2, r0
   9eec6:	2300      	movs	r3, #0
   9eec8:	9300      	str	r3, [sp, #0]
   9eeca:	f04f 0300 	mov.w	r3, #0
   9eece:	2103      	movs	r1, #3
   9eed0:	2007      	movs	r0, #7
   9eed2:	4c6f      	ldr	r4, [pc, #444]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9eed4:	47a0      	blx	r4
   9eed6:	4603      	mov	r3, r0
   9eed8:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   9eeda:	4b6e      	ldr	r3, [pc, #440]	; (9f094 <Cl_Dprep_StartDialyserPrime+0x284>)
   9eedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   9eede:	4b6e      	ldr	r3, [pc, #440]	; (9f098 <Cl_Dprep_StartDialyserPrime+0x288>)
   9eee0:	4610      	mov	r0, r2
   9eee2:	4798      	blx	r3
   9eee4:	4c6f      	ldr	r4, [pc, #444]	; (9f0a4 <Cl_Dprep_StartDialyserPrime+0x294>)
   9eee6:	a362      	add	r3, pc, #392	; (adr r3, 9f070 <Cl_Dprep_StartDialyserPrime+0x260>)
   9eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9eeec:	47a0      	blx	r4
   9eeee:	4603      	mov	r3, r0
   9eef0:	460c      	mov	r4, r1
   9eef2:	4619      	mov	r1, r3
   9eef4:	4622      	mov	r2, r4
   9eef6:	4b6a      	ldr	r3, [pc, #424]	; (9f0a0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9eef8:	4608      	mov	r0, r1
   9eefa:	4611      	mov	r1, r2
   9eefc:	4798      	blx	r3
   9eefe:	4602      	mov	r2, r0
   9ef00:	2300      	movs	r3, #0
   9ef02:	9300      	str	r3, [sp, #0]
   9ef04:	f04f 0300 	mov.w	r3, #0
   9ef08:	2103      	movs	r1, #3
   9ef0a:	2008      	movs	r0, #8
   9ef0c:	4c60      	ldr	r4, [pc, #384]	; (9f090 <Cl_Dprep_StartDialyserPrime+0x280>)
   9ef0e:	47a0      	blx	r4
   9ef10:	4603      	mov	r3, r0
   9ef12:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9ef14:	2100      	movs	r1, #0
   9ef16:	2029      	movs	r0, #41	; 0x29
   9ef18:	4b63      	ldr	r3, [pc, #396]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef1a:	4798      	blx	r3
   9ef1c:	4603      	mov	r3, r0
   9ef1e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9ef20:	2100      	movs	r1, #0
   9ef22:	202b      	movs	r0, #43	; 0x2b
   9ef24:	4b60      	ldr	r3, [pc, #384]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef26:	4798      	blx	r3
   9ef28:	4603      	mov	r3, r0
   9ef2a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9ef2c:	2100      	movs	r1, #0
   9ef2e:	2003      	movs	r0, #3
   9ef30:	4b5d      	ldr	r3, [pc, #372]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef32:	4798      	blx	r3
   9ef34:	4603      	mov	r3, r0
   9ef36:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9ef38:	2100      	movs	r1, #0
   9ef3a:	2004      	movs	r0, #4
   9ef3c:	4b5a      	ldr	r3, [pc, #360]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef3e:	4798      	blx	r3
   9ef40:	4603      	mov	r3, r0
   9ef42:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   9ef44:	2101      	movs	r1, #1
   9ef46:	202a      	movs	r0, #42	; 0x2a
   9ef48:	4b57      	ldr	r3, [pc, #348]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef4a:	4798      	blx	r3
   9ef4c:	4603      	mov	r3, r0
   9ef4e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   9ef50:	2101      	movs	r1, #1
   9ef52:	202c      	movs	r0, #44	; 0x2c
   9ef54:	4b54      	ldr	r3, [pc, #336]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef56:	4798      	blx	r3
   9ef58:	4603      	mov	r3, r0
   9ef5a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   9ef5c:	2101      	movs	r1, #1
   9ef5e:	2005      	movs	r0, #5
   9ef60:	4b51      	ldr	r3, [pc, #324]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef62:	4798      	blx	r3
   9ef64:	4603      	mov	r3, r0
   9ef66:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   9ef68:	2101      	movs	r1, #1
   9ef6a:	2006      	movs	r0, #6
   9ef6c:	4b4e      	ldr	r3, [pc, #312]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef6e:	4798      	blx	r3
   9ef70:	4603      	mov	r3, r0
   9ef72:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   9ef74:	4b4d      	ldr	r3, [pc, #308]	; (9f0ac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9ef76:	781b      	ldrb	r3, [r3, #0]
   9ef78:	2b00      	cmp	r3, #0
   9ef7a:	d005      	beq.n	9ef88 <Cl_Dprep_StartDialyserPrime+0x178>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9ef7c:	2101      	movs	r1, #1
   9ef7e:	203c      	movs	r0, #60	; 0x3c
   9ef80:	4b49      	ldr	r3, [pc, #292]	; (9f0a8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9ef82:	4798      	blx	r3
   9ef84:	4603      	mov	r3, r0
   9ef86:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9ef88:	2001      	movs	r0, #1
   9ef8a:	4b49      	ldr	r3, [pc, #292]	; (9f0b0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9ef8c:	4798      	blx	r3
   9ef8e:	4603      	mov	r3, r0
   9ef90:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9ef92:	2002      	movs	r0, #2
   9ef94:	4b46      	ldr	r3, [pc, #280]	; (9f0b0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9ef96:	4798      	blx	r3
   9ef98:	4603      	mov	r3, r0
   9ef9a:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   9ef9c:	4b3d      	ldr	r3, [pc, #244]	; (9f094 <Cl_Dprep_StartDialyserPrime+0x284>)
   9ef9e:	695b      	ldr	r3, [r3, #20]
   9efa0:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   9efa2:	4a44      	ldr	r2, [pc, #272]	; (9f0b4 <Cl_Dprep_StartDialyserPrime+0x2a4>)
   9efa4:	68bb      	ldr	r3, [r7, #8]
   9efa6:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   9efa8:	2300      	movs	r3, #0
   9efaa:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   9efac:	68bb      	ldr	r3, [r7, #8]
   9efae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9efb2:	d02f      	beq.n	9f014 <Cl_Dprep_StartDialyserPrime+0x204>
   9efb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9efb8:	d803      	bhi.n	9efc2 <Cl_Dprep_StartDialyserPrime+0x1b2>
   9efba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9efbe:	d043      	beq.n	9f048 <Cl_Dprep_StartDialyserPrime+0x238>
   9efc0:	e084      	b.n	9f0cc <Cl_Dprep_StartDialyserPrime+0x2bc>
   9efc2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   9efc6:	d013      	beq.n	9eff0 <Cl_Dprep_StartDialyserPrime+0x1e0>
   9efc8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9efcc:	d17e      	bne.n	9f0cc <Cl_Dprep_StartDialyserPrime+0x2bc>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9efce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9efd2:	2002      	movs	r0, #2
   9efd4:	4b38      	ldr	r3, [pc, #224]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9efd6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   9efd8:	f240 5173 	movw	r1, #1395	; 0x573
   9efdc:	2001      	movs	r0, #1
   9efde:	4b36      	ldr	r3, [pc, #216]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9efe0:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   9efe2:	233e      	movs	r3, #62	; 0x3e
   9efe4:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9efe6:	88fb      	ldrh	r3, [r7, #6]
   9efe8:	4618      	mov	r0, r3
   9efea:	4b34      	ldr	r3, [pc, #208]	; (9f0bc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9efec:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(800);
				break;
   9efee:	e083      	b.n	9f0f8 <Cl_Dprep_StartDialyserPrime+0x2e8>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9eff0:	f44f 7161 	mov.w	r1, #900	; 0x384
   9eff4:	2002      	movs	r0, #2
   9eff6:	4b30      	ldr	r3, [pc, #192]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9eff8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   9effa:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   9effe:	2001      	movs	r0, #1
   9f000:	4b2d      	ldr	r3, [pc, #180]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f002:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   9f004:	f44f 7385 	mov.w	r3, #266	; 0x10a
   9f008:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f00a:	88fb      	ldrh	r3, [r7, #6]
   9f00c:	4618      	mov	r0, r3
   9f00e:	4b2b      	ldr	r3, [pc, #172]	; (9f0bc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f010:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(700);
				break;
   9f012:	e071      	b.n	9f0f8 <Cl_Dprep_StartDialyserPrime+0x2e8>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9f014:	2203      	movs	r2, #3
   9f016:	492a      	ldr	r1, [pc, #168]	; (9f0c0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   9f018:	2018      	movs	r0, #24
   9f01a:	4b2a      	ldr	r3, [pc, #168]	; (9f0c4 <Cl_Dprep_StartDialyserPrime+0x2b4>)
   9f01c:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f01e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f022:	2002      	movs	r0, #2
   9f024:	4b24      	ldr	r3, [pc, #144]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f026:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   9f028:	f240 414c 	movw	r1, #1100	; 0x44c
   9f02c:	2001      	movs	r0, #1
   9f02e:	4b22      	ldr	r3, [pc, #136]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f030:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9f032:	2344      	movs	r3, #68	; 0x44
   9f034:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f036:	88fb      	ldrh	r3, [r7, #6]
   9f038:	4618      	mov	r0, r3
   9f03a:	4b20      	ldr	r3, [pc, #128]	; (9f0bc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f03c:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   9f03e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   9f042:	4b21      	ldr	r3, [pc, #132]	; (9f0c8 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   9f044:	4798      	blx	r3
				break;
   9f046:	e057      	b.n	9f0f8 <Cl_Dprep_StartDialyserPrime+0x2e8>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1120);
   9f048:	f44f 618c 	mov.w	r1, #1120	; 0x460
   9f04c:	2002      	movs	r0, #2
   9f04e:	4b1a      	ldr	r3, [pc, #104]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f050:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,620);
   9f052:	f44f 711b 	mov.w	r1, #620	; 0x26c
   9f056:	2001      	movs	r0, #1
   9f058:	4b17      	ldr	r3, [pc, #92]	; (9f0b8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9f05a:	4798      	blx	r3
				potvalue = (800 * 1024)/10000;
   9f05c:	2351      	movs	r3, #81	; 0x51
   9f05e:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f060:	88fb      	ldrh	r3, [r7, #6]
   9f062:	4618      	mov	r0, r3
   9f064:	4b15      	ldr	r3, [pc, #84]	; (9f0bc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9f066:	4798      	blx	r3
				
			//	conf_activate_pressure_alarms(300);
				
				break;
   9f068:	e046      	b.n	9f0f8 <Cl_Dprep_StartDialyserPrime+0x2e8>
   9f06a:	bf00      	nop
   9f06c:	f3af 8000 	nop.w
   9f070:	9999999a 	.word	0x9999999a
   9f074:	3fc99999 	.word	0x3fc99999
   9f078:	000977c1 	.word	0x000977c1
   9f07c:	200727e8 	.word	0x200727e8
   9f080:	20072838 	.word	0x20072838
   9f084:	20072834 	.word	0x20072834
   9f088:	0009df39 	.word	0x0009df39
   9f08c:	0009d6f9 	.word	0x0009d6f9
   9f090:	00082f01 	.word	0x00082f01
   9f094:	20073194 	.word	0x20073194
   9f098:	000a2ae5 	.word	0x000a2ae5
   9f09c:	000a2869 	.word	0x000a2869
   9f0a0:	000a3195 	.word	0x000a3195
   9f0a4:	000a286d 	.word	0x000a286d
   9f0a8:	00082f5d 	.word	0x00082f5d
   9f0ac:	200709ee 	.word	0x200709ee
   9f0b0:	00097451 	.word	0x00097451
   9f0b4:	200720f0 	.word	0x200720f0
   9f0b8:	00097569 	.word	0x00097569
   9f0bc:	00097999 	.word	0x00097999
   9f0c0:	000a5918 	.word	0x000a5918
   9f0c4:	0009926d 	.word	0x0009926d
   9f0c8:	0009e82d 	.word	0x0009e82d
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9f0cc:	2203      	movs	r2, #3
   9f0ce:	4919      	ldr	r1, [pc, #100]	; (9f134 <Cl_Dprep_StartDialyserPrime+0x324>)
   9f0d0:	2018      	movs	r0, #24
   9f0d2:	4b19      	ldr	r3, [pc, #100]	; (9f138 <Cl_Dprep_StartDialyserPrime+0x328>)
   9f0d4:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9f0d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9f0da:	2002      	movs	r0, #2
   9f0dc:	4b17      	ldr	r3, [pc, #92]	; (9f13c <Cl_Dprep_StartDialyserPrime+0x32c>)
   9f0de:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   9f0e0:	f240 414c 	movw	r1, #1100	; 0x44c
   9f0e4:	2001      	movs	r0, #1
   9f0e6:	4b15      	ldr	r3, [pc, #84]	; (9f13c <Cl_Dprep_StartDialyserPrime+0x32c>)
   9f0e8:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   9f0ea:	2344      	movs	r3, #68	; 0x44
   9f0ec:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   9f0ee:	88fb      	ldrh	r3, [r7, #6]
   9f0f0:	4618      	mov	r0, r3
   9f0f2:	4b13      	ldr	r3, [pc, #76]	; (9f140 <Cl_Dprep_StartDialyserPrime+0x330>)
   9f0f4:	4798      	blx	r3
				break;
   9f0f6:	bf00      	nop
			}
			
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
   9f0f8:	4b12      	ldr	r3, [pc, #72]	; (9f144 <Cl_Dprep_StartDialyserPrime+0x334>)
   9f0fa:	781b      	ldrb	r3, [r3, #0]
   9f0fc:	2b09      	cmp	r3, #9
   9f0fe:	d006      	beq.n	9f10e <Cl_Dprep_StartDialyserPrime+0x2fe>
			{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   9f100:	2100      	movs	r1, #0
   9f102:	2008      	movs	r0, #8
   9f104:	4b10      	ldr	r3, [pc, #64]	; (9f148 <Cl_Dprep_StartDialyserPrime+0x338>)
   9f106:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f108:	4b10      	ldr	r3, [pc, #64]	; (9f14c <Cl_Dprep_StartDialyserPrime+0x33c>)
   9f10a:	2200      	movs	r2, #0
   9f10c:	70da      	strb	r2, [r3, #3]
			}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   9f10e:	4b10      	ldr	r3, [pc, #64]	; (9f150 <Cl_Dprep_StartDialyserPrime+0x340>)
   9f110:	4798      	blx	r3
   9f112:	4603      	mov	r3, r0
   9f114:	73fb      	strb	r3, [r7, #15]
		//	sv_prop_startmixing();
		//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);
   9f116:	2002      	movs	r0, #2
   9f118:	4b0e      	ldr	r3, [pc, #56]	; (9f154 <Cl_Dprep_StartDialyserPrime+0x344>)
   9f11a:	4798      	blx	r3
   9f11c:	4603      	mov	r3, r0
   9f11e:	73fb      	strb	r3, [r7, #15]
			
			UpdateDprepFillingMinuteTick();
   9f120:	4b0d      	ldr	r3, [pc, #52]	; (9f158 <Cl_Dprep_StartDialyserPrime+0x348>)
   9f122:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   9f124:	4b0d      	ldr	r3, [pc, #52]	; (9f15c <Cl_Dprep_StartDialyserPrime+0x34c>)
   9f126:	220e      	movs	r2, #14
   9f128:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   9f12a:	2300      	movs	r3, #0
	}
   9f12c:	4618      	mov	r0, r3
   9f12e:	3714      	adds	r7, #20
   9f130:	46bd      	mov	sp, r7
   9f132:	bd90      	pop	{r4, r7, pc}
   9f134:	000a5918 	.word	0x000a5918
   9f138:	0009926d 	.word	0x0009926d
   9f13c:	00097569 	.word	0x00097569
   9f140:	00097999 	.word	0x00097999
   9f144:	2007212c 	.word	0x2007212c
   9f148:	00087c95 	.word	0x00087c95
   9f14c:	20070abc 	.word	0x20070abc
   9f150:	00097681 	.word	0x00097681
   9f154:	00088a8d 	.word	0x00088a8d
   9f158:	0009d719 	.word	0x0009d719
   9f15c:	2007282f 	.word	0x2007282f

0009f160 <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   9f160:	b580      	push	{r7, lr}
   9f162:	af00      	add	r7, sp, #0
	
	 Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);
   9f164:	2014      	movs	r0, #20
   9f166:	4b02      	ldr	r3, [pc, #8]	; (9f170 <Cl_Dprep_Priming_Stop+0x10>)
   9f168:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   9f16a:	bf00      	nop
   9f16c:	4618      	mov	r0, r3
   9f16e:	bd80      	pop	{r7, pc}
   9f170:	0008a479 	.word	0x0008a479

0009f174 <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   9f174:	b580      	push	{r7, lr}
   9f176:	b082      	sub	sp, #8
   9f178:	af00      	add	r7, sp, #0
	
	
	
	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
   9f17a:	4807      	ldr	r0, [pc, #28]	; (9f198 <Cl_Check_Temp_Cond_Stability+0x24>)
   9f17c:	4b07      	ldr	r3, [pc, #28]	; (9f19c <Cl_Check_Temp_Cond_Stability+0x28>)
   9f17e:	4798      	blx	r3
	Cl_Uint16Type temp = 0;
   9f180:	2300      	movs	r3, #0
   9f182:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   9f184:	1dbb      	adds	r3, r7, #6
   9f186:	4619      	mov	r1, r3
   9f188:	2007      	movs	r0, #7
   9f18a:	4b05      	ldr	r3, [pc, #20]	; (9f1a0 <Cl_Check_Temp_Cond_Stability+0x2c>)
   9f18c:	4798      	blx	r3
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	
   9f18e:	2300      	movs	r3, #0
}
   9f190:	4618      	mov	r0, r3
   9f192:	3708      	adds	r7, #8
   9f194:	46bd      	mov	sp, r7
   9f196:	bd80      	pop	{r7, pc}
   9f198:	200727e9 	.word	0x200727e9
   9f19c:	00088941 	.word	0x00088941
   9f1a0:	0008d61d 	.word	0x0008d61d

0009f1a4 <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   9f1a4:	b580      	push	{r7, lr}
   9f1a6:	b082      	sub	sp, #8
   9f1a8:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9f1aa:	2300      	movs	r3, #0
   9f1ac:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   9f1ae:	4b1e      	ldr	r3, [pc, #120]	; (9f228 <Cl_dprep_StopMixing+0x84>)
   9f1b0:	781b      	ldrb	r3, [r3, #0]
   9f1b2:	2b02      	cmp	r3, #2
   9f1b4:	d11c      	bne.n	9f1f0 <Cl_dprep_StopMixing+0x4c>
				{
					
				Cl_dprepMinutescounter = 0;
   9f1b6:	4b1d      	ldr	r3, [pc, #116]	; (9f22c <Cl_dprep_StopMixing+0x88>)
   9f1b8:	2200      	movs	r2, #0
   9f1ba:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   9f1bc:	4b1c      	ldr	r3, [pc, #112]	; (9f230 <Cl_dprep_StopMixing+0x8c>)
   9f1be:	2200      	movs	r2, #0
   9f1c0:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9f1c2:	4b1c      	ldr	r3, [pc, #112]	; (9f234 <Cl_dprep_StopMixing+0x90>)
   9f1c4:	4798      	blx	r3
   9f1c6:	4603      	mov	r3, r0
   9f1c8:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9f1ca:	2004      	movs	r0, #4
   9f1cc:	4b1a      	ldr	r3, [pc, #104]	; (9f238 <Cl_dprep_StopMixing+0x94>)
   9f1ce:	4798      	blx	r3
   9f1d0:	4603      	mov	r3, r0
   9f1d2:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9f1d4:	2005      	movs	r0, #5
   9f1d6:	4b19      	ldr	r3, [pc, #100]	; (9f23c <Cl_dprep_StopMixing+0x98>)
   9f1d8:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9f1da:	4b13      	ldr	r3, [pc, #76]	; (9f228 <Cl_dprep_StopMixing+0x84>)
   9f1dc:	220b      	movs	r2, #11
   9f1de:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9f1e0:	1dbb      	adds	r3, r7, #6
   9f1e2:	2200      	movs	r2, #0
   9f1e4:	4619      	mov	r1, r3
   9f1e6:	202d      	movs	r0, #45	; 0x2d
   9f1e8:	4b15      	ldr	r3, [pc, #84]	; (9f240 <Cl_dprep_StopMixing+0x9c>)
   9f1ea:	4798      	blx	r3
   9f1ec:	4603      	mov	r3, r0
   9f1ee:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   9f1f0:	4b0d      	ldr	r3, [pc, #52]	; (9f228 <Cl_dprep_StopMixing+0x84>)
   9f1f2:	781b      	ldrb	r3, [r3, #0]
   9f1f4:	2b06      	cmp	r3, #6
   9f1f6:	d111      	bne.n	9f21c <Cl_dprep_StopMixing+0x78>
					
					Cl_dprepMinutescounter = 0;
   9f1f8:	4b0c      	ldr	r3, [pc, #48]	; (9f22c <Cl_dprep_StopMixing+0x88>)
   9f1fa:	2200      	movs	r2, #0
   9f1fc:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   9f1fe:	4b0c      	ldr	r3, [pc, #48]	; (9f230 <Cl_dprep_StopMixing+0x8c>)
   9f200:	2200      	movs	r2, #0
   9f202:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   9f204:	4b0b      	ldr	r3, [pc, #44]	; (9f234 <Cl_dprep_StopMixing+0x90>)
   9f206:	4798      	blx	r3
   9f208:	4603      	mov	r3, r0
   9f20a:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9f20c:	2004      	movs	r0, #4
   9f20e:	4b0a      	ldr	r3, [pc, #40]	; (9f238 <Cl_dprep_StopMixing+0x94>)
   9f210:	4798      	blx	r3
   9f212:	4603      	mov	r3, r0
   9f214:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   9f216:	2005      	movs	r0, #5
   9f218:	4b08      	ldr	r3, [pc, #32]	; (9f23c <Cl_dprep_StopMixing+0x98>)
   9f21a:	4798      	blx	r3
					
					
				}

				return Cl_dprepretcode;
   9f21c:	79fb      	ldrb	r3, [r7, #7]
}
   9f21e:	4618      	mov	r0, r3
   9f220:	3708      	adds	r7, #8
   9f222:	46bd      	mov	sp, r7
   9f224:	bd80      	pop	{r7, pc}
   9f226:	bf00      	nop
   9f228:	2007282f 	.word	0x2007282f
   9f22c:	20072838 	.word	0x20072838
   9f230:	20072834 	.word	0x20072834
   9f234:	000974dd 	.word	0x000974dd
   9f238:	00088a8d 	.word	0x00088a8d
   9f23c:	00083379 	.word	0x00083379
   9f240:	0009926d 	.word	0x0009926d

0009f244 <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   9f244:	b580      	push	{r7, lr}
   9f246:	b082      	sub	sp, #8
   9f248:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   9f24a:	2300      	movs	r3, #0
   9f24c:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   9f24e:	2100      	movs	r1, #0
   9f250:	202a      	movs	r0, #42	; 0x2a
   9f252:	4b43      	ldr	r3, [pc, #268]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f254:	4798      	blx	r3
   9f256:	4603      	mov	r3, r0
   9f258:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   9f25a:	2100      	movs	r1, #0
   9f25c:	202c      	movs	r0, #44	; 0x2c
   9f25e:	4b40      	ldr	r3, [pc, #256]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f260:	4798      	blx	r3
   9f262:	4603      	mov	r3, r0
   9f264:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   9f266:	2100      	movs	r1, #0
   9f268:	2005      	movs	r0, #5
   9f26a:	4b3d      	ldr	r3, [pc, #244]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f26c:	4798      	blx	r3
   9f26e:	4603      	mov	r3, r0
   9f270:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   9f272:	2100      	movs	r1, #0
   9f274:	2006      	movs	r0, #6
   9f276:	4b3a      	ldr	r3, [pc, #232]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f278:	4798      	blx	r3
   9f27a:	4603      	mov	r3, r0
   9f27c:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9f27e:	2100      	movs	r1, #0
   9f280:	2029      	movs	r0, #41	; 0x29
   9f282:	4b37      	ldr	r3, [pc, #220]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f284:	4798      	blx	r3
   9f286:	4603      	mov	r3, r0
   9f288:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9f28a:	2100      	movs	r1, #0
   9f28c:	202b      	movs	r0, #43	; 0x2b
   9f28e:	4b34      	ldr	r3, [pc, #208]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f290:	4798      	blx	r3
   9f292:	4603      	mov	r3, r0
   9f294:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9f296:	2100      	movs	r1, #0
   9f298:	2003      	movs	r0, #3
   9f29a:	4b31      	ldr	r3, [pc, #196]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f29c:	4798      	blx	r3
   9f29e:	4603      	mov	r3, r0
   9f2a0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9f2a2:	2100      	movs	r1, #0
   9f2a4:	2004      	movs	r0, #4
   9f2a6:	4b2e      	ldr	r3, [pc, #184]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2a8:	4798      	blx	r3
   9f2aa:	4603      	mov	r3, r0
   9f2ac:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   9f2ae:	2100      	movs	r1, #0
   9f2b0:	2015      	movs	r0, #21
   9f2b2:	4b2b      	ldr	r3, [pc, #172]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2b4:	4798      	blx	r3
   9f2b6:	4603      	mov	r3, r0
   9f2b8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   9f2ba:	2100      	movs	r1, #0
   9f2bc:	2016      	movs	r0, #22
   9f2be:	4b28      	ldr	r3, [pc, #160]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2c0:	4798      	blx	r3
   9f2c2:	4603      	mov	r3, r0
   9f2c4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   9f2c6:	2100      	movs	r1, #0
   9f2c8:	2017      	movs	r0, #23
   9f2ca:	4b25      	ldr	r3, [pc, #148]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2cc:	4798      	blx	r3
   9f2ce:	4603      	mov	r3, r0
   9f2d0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   9f2d2:	2100      	movs	r1, #0
   9f2d4:	2018      	movs	r0, #24
   9f2d6:	4b22      	ldr	r3, [pc, #136]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2d8:	4798      	blx	r3
   9f2da:	4603      	mov	r3, r0
   9f2dc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   9f2de:	2100      	movs	r1, #0
   9f2e0:	2027      	movs	r0, #39	; 0x27
   9f2e2:	4b1f      	ldr	r3, [pc, #124]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2e4:	4798      	blx	r3
   9f2e6:	4603      	mov	r3, r0
   9f2e8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   9f2ea:	2100      	movs	r1, #0
   9f2ec:	2028      	movs	r0, #40	; 0x28
   9f2ee:	4b1c      	ldr	r3, [pc, #112]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2f0:	4798      	blx	r3
   9f2f2:	4603      	mov	r3, r0
   9f2f4:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9f2f6:	2100      	movs	r1, #0
   9f2f8:	200f      	movs	r0, #15
   9f2fa:	4b19      	ldr	r3, [pc, #100]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f2fc:	4798      	blx	r3
   9f2fe:	4603      	mov	r3, r0
   9f300:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   9f302:	2100      	movs	r1, #0
   9f304:	2010      	movs	r0, #16
   9f306:	4b16      	ldr	r3, [pc, #88]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f308:	4798      	blx	r3
   9f30a:	4603      	mov	r3, r0
   9f30c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   9f30e:	2100      	movs	r1, #0
   9f310:	2011      	movs	r0, #17
   9f312:	4b13      	ldr	r3, [pc, #76]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f314:	4798      	blx	r3
   9f316:	4603      	mov	r3, r0
   9f318:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   9f31a:	2100      	movs	r1, #0
   9f31c:	2012      	movs	r0, #18
   9f31e:	4b10      	ldr	r3, [pc, #64]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f320:	4798      	blx	r3
   9f322:	4603      	mov	r3, r0
   9f324:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   9f326:	2100      	movs	r1, #0
   9f328:	2013      	movs	r0, #19
   9f32a:	4b0d      	ldr	r3, [pc, #52]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f32c:	4798      	blx	r3
   9f32e:	4603      	mov	r3, r0
   9f330:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   9f332:	2100      	movs	r1, #0
   9f334:	2014      	movs	r0, #20
   9f336:	4b0a      	ldr	r3, [pc, #40]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f338:	4798      	blx	r3
   9f33a:	4603      	mov	r3, r0
   9f33c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   9f33e:	2100      	movs	r1, #0
   9f340:	2008      	movs	r0, #8
   9f342:	4b07      	ldr	r3, [pc, #28]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f344:	4798      	blx	r3
   9f346:	4603      	mov	r3, r0
   9f348:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9f34a:	2100      	movs	r1, #0
   9f34c:	2007      	movs	r0, #7
   9f34e:	4b04      	ldr	r3, [pc, #16]	; (9f360 <Cl_deactivate_prep_alarms+0x11c>)
   9f350:	4798      	blx	r3
   9f352:	4603      	mov	r3, r0
   9f354:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   9f356:	bf00      	nop
   9f358:	4618      	mov	r0, r3
   9f35a:	3708      	adds	r7, #8
   9f35c:	46bd      	mov	sp, r7
   9f35e:	bd80      	pop	{r7, pc}
   9f360:	00082f5d 	.word	0x00082f5d

0009f364 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   9f364:	b580      	push	{r7, lr}
   9f366:	b090      	sub	sp, #64	; 0x40
   9f368:	af00      	add	r7, sp, #0
   9f36a:	4603      	mov	r3, r0
   9f36c:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   9f36e:	2300      	movs	r3, #0
   9f370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   9f374:	2300      	movs	r3, #0
   9f376:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f37a:	234d      	movs	r3, #77	; 0x4d
   9f37c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9f380:	2300      	movs	r3, #0
   9f382:	637b      	str	r3, [r7, #52]	; 0x34
	Cl_Uint8Type data = 0;
   9f384:	2300      	movs	r3, #0
   9f386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9f38a:	2300      	movs	r3, #0
   9f38c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
   9f390:	2300      	movs	r3, #0
   9f392:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   9f396:	2300      	movs	r3, #0
   9f398:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
   9f39c:	2300      	movs	r3, #0
   9f39e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30




cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   9f3a2:	f107 0239 	add.w	r2, r7, #57	; 0x39
   9f3a6:	79fb      	ldrb	r3, [r7, #7]
   9f3a8:	4611      	mov	r1, r2
   9f3aa:	4618      	mov	r0, r3
   9f3ac:	4ba9      	ldr	r3, [pc, #676]	; (9f654 <Cl_Rinse_Controller+0x2f0>)
   9f3ae:	4798      	blx	r3

switch(cl_rinseevent)
   9f3b0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   9f3b4:	3b21      	subs	r3, #33	; 0x21
   9f3b6:	2b05      	cmp	r3, #5
   9f3b8:	d87d      	bhi.n	9f4b6 <Cl_Rinse_Controller+0x152>
   9f3ba:	a201      	add	r2, pc, #4	; (adr r2, 9f3c0 <Cl_Rinse_Controller+0x5c>)
   9f3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f3c0:	0009f3d9 	.word	0x0009f3d9
   9f3c4:	0009f3f1 	.word	0x0009f3f1
   9f3c8:	0009f409 	.word	0x0009f409
   9f3cc:	0009f445 	.word	0x0009f445
   9f3d0:	0009f4a3 	.word	0x0009f4a3
   9f3d4:	0009f4ad 	.word	0x0009f4ad
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9f3d8:	2101      	movs	r1, #1
   9f3da:	2001      	movs	r0, #1
   9f3dc:	4b9e      	ldr	r3, [pc, #632]	; (9f658 <Cl_Rinse_Controller+0x2f4>)
   9f3de:	4798      	blx	r3
   9f3e0:	4603      	mov	r3, r0
   9f3e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   9f3e6:	2100      	movs	r1, #0
   9f3e8:	2002      	movs	r0, #2
   9f3ea:	4b9c      	ldr	r3, [pc, #624]	; (9f65c <Cl_Rinse_Controller+0x2f8>)
   9f3ec:	4798      	blx	r3
	break;
   9f3ee:	e067      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9f3f0:	2100      	movs	r1, #0
   9f3f2:	2001      	movs	r0, #1
   9f3f4:	4b98      	ldr	r3, [pc, #608]	; (9f658 <Cl_Rinse_Controller+0x2f4>)
   9f3f6:	4798      	blx	r3
   9f3f8:	4603      	mov	r3, r0
   9f3fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   9f3fe:	2100      	movs	r1, #0
   9f400:	2004      	movs	r0, #4
   9f402:	4b96      	ldr	r3, [pc, #600]	; (9f65c <Cl_Rinse_Controller+0x2f8>)
   9f404:	4798      	blx	r3
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   9f406:	e05b      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   9f408:	4b95      	ldr	r3, [pc, #596]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f40a:	7e1b      	ldrb	r3, [r3, #24]
   9f40c:	2b00      	cmp	r3, #0
   9f40e:	d054      	beq.n	9f4ba <Cl_Rinse_Controller+0x156>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f410:	4b93      	ldr	r3, [pc, #588]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f412:	791b      	ldrb	r3, [r3, #4]
   9f414:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9f418:	4b91      	ldr	r3, [pc, #580]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f41a:	795b      	ldrb	r3, [r3, #5]
   9f41c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9f420:	4b8f      	ldr	r3, [pc, #572]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f422:	799b      	ldrb	r3, [r3, #6]
   9f424:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9f428:	4b8d      	ldr	r3, [pc, #564]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f42a:	79db      	ldrb	r3, [r3, #7]
   9f42c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9f430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   9f432:	4619      	mov	r1, r3
   9f434:	2001      	movs	r0, #1
   9f436:	4b89      	ldr	r3, [pc, #548]	; (9f65c <Cl_Rinse_Controller+0x2f8>)
   9f438:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   9f43a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   9f43c:	461a      	mov	r2, r3
   9f43e:	4b89      	ldr	r3, [pc, #548]	; (9f664 <Cl_Rinse_Controller+0x300>)
   9f440:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   9f442:	e03a      	b.n	9f4ba <Cl_Rinse_Controller+0x156>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   9f444:	4b86      	ldr	r3, [pc, #536]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f446:	7e1b      	ldrb	r3, [r3, #24]
   9f448:	2b00      	cmp	r3, #0
   9f44a:	d038      	beq.n	9f4be <Cl_Rinse_Controller+0x15a>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9f44c:	4b84      	ldr	r3, [pc, #528]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f44e:	795b      	ldrb	r3, [r3, #5]
   9f450:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9f454:	4b82      	ldr	r3, [pc, #520]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f456:	799b      	ldrb	r3, [r3, #6]
   9f458:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9f45c:	4b80      	ldr	r3, [pc, #512]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f45e:	79db      	ldrb	r3, [r3, #7]
   9f460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9f464:	4b7e      	ldr	r3, [pc, #504]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f466:	7a1b      	ldrb	r3, [r3, #8]
   9f468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9f46c:	4b7c      	ldr	r3, [pc, #496]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f46e:	791b      	ldrb	r3, [r3, #4]
   9f470:	2b01      	cmp	r3, #1
   9f472:	d104      	bne.n	9f47e <Cl_Rinse_Controller+0x11a>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9f474:	2100      	movs	r1, #0
   9f476:	2001      	movs	r0, #1
   9f478:	4b7b      	ldr	r3, [pc, #492]	; (9f668 <Cl_Rinse_Controller+0x304>)
   9f47a:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9f47c:	e01f      	b.n	9f4be <Cl_Rinse_Controller+0x15a>
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9f47e:	4b78      	ldr	r3, [pc, #480]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f480:	791b      	ldrb	r3, [r3, #4]
   9f482:	2b02      	cmp	r3, #2
   9f484:	d104      	bne.n	9f490 <Cl_Rinse_Controller+0x12c>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9f486:	2100      	movs	r1, #0
   9f488:	2004      	movs	r0, #4
   9f48a:	4b77      	ldr	r3, [pc, #476]	; (9f668 <Cl_Rinse_Controller+0x304>)
   9f48c:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9f48e:	e016      	b.n	9f4be <Cl_Rinse_Controller+0x15a>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9f490:	4b73      	ldr	r3, [pc, #460]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f492:	791b      	ldrb	r3, [r3, #4]
   9f494:	2b00      	cmp	r3, #0
   9f496:	d112      	bne.n	9f4be <Cl_Rinse_Controller+0x15a>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9f498:	2100      	movs	r1, #0
   9f49a:	200a      	movs	r0, #10
   9f49c:	4b72      	ldr	r3, [pc, #456]	; (9f668 <Cl_Rinse_Controller+0x304>)
   9f49e:	4798      	blx	r3
		}
				
	}
			
			
	break;
   9f4a0:	e00d      	b.n	9f4be <Cl_Rinse_Controller+0x15a>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9f4a2:	2100      	movs	r1, #0
   9f4a4:	200c      	movs	r0, #12
   9f4a6:	4b70      	ldr	r3, [pc, #448]	; (9f668 <Cl_Rinse_Controller+0x304>)
   9f4a8:	4798      	blx	r3
	break;
   9f4aa:	e009      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9f4ac:	2100      	movs	r1, #0
   9f4ae:	2007      	movs	r0, #7
   9f4b0:	4b6d      	ldr	r3, [pc, #436]	; (9f668 <Cl_Rinse_Controller+0x304>)
   9f4b2:	4798      	blx	r3
	break;
   9f4b4:	e004      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
	default:break;	
   9f4b6:	bf00      	nop
   9f4b8:	e002      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
	}
	break;
   9f4ba:	bf00      	nop
   9f4bc:	e000      	b.n	9f4c0 <Cl_Rinse_Controller+0x15c>
		}
				
	}
			
			
	break;
   9f4be:	bf00      	nop
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
	break;
	default:break;	
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   9f4c0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   9f4c4:	2b12      	cmp	r3, #18
   9f4c6:	d10f      	bne.n	9f4e8 <Cl_Rinse_Controller+0x184>
{
	Rinsestatedummy = cl_rinsestate;
   9f4c8:	4b68      	ldr	r3, [pc, #416]	; (9f66c <Cl_Rinse_Controller+0x308>)
   9f4ca:	781a      	ldrb	r2, [r3, #0]
   9f4cc:	4b68      	ldr	r3, [pc, #416]	; (9f670 <Cl_Rinse_Controller+0x30c>)
   9f4ce:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   9f4d0:	203d      	movs	r0, #61	; 0x3d
   9f4d2:	4b68      	ldr	r3, [pc, #416]	; (9f674 <Cl_Rinse_Controller+0x310>)
   9f4d4:	4798      	blx	r3
   9f4d6:	4603      	mov	r3, r0
   9f4d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   9f4dc:	203e      	movs	r0, #62	; 0x3e
   9f4de:	4b65      	ldr	r3, [pc, #404]	; (9f674 <Cl_Rinse_Controller+0x310>)
   9f4e0:	4798      	blx	r3
   9f4e2:	4603      	mov	r3, r0
   9f4e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


}


switch(cl_rinsestate)
   9f4e8:	4b60      	ldr	r3, [pc, #384]	; (9f66c <Cl_Rinse_Controller+0x308>)
   9f4ea:	781b      	ldrb	r3, [r3, #0]
   9f4ec:	2b09      	cmp	r3, #9
   9f4ee:	f201 8145 	bhi.w	a077c <Cl_Rinse_Controller+0x1418>
   9f4f2:	a201      	add	r2, pc, #4	; (adr r2, 9f4f8 <Cl_Rinse_Controller+0x194>)
   9f4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f4f8:	0009f521 	.word	0x0009f521
   9f4fc:	000a088d 	.word	0x000a088d
   9f500:	000a077d 	.word	0x000a077d
   9f504:	0009f749 	.word	0x0009f749
   9f508:	0009f749 	.word	0x0009f749
   9f50c:	0009f749 	.word	0x0009f749
   9f510:	000a0085 	.word	0x000a0085
   9f514:	000a077d 	.word	0x000a077d
   9f518:	000a077d 	.word	0x000a077d
   9f51c:	000a035b 	.word	0x000a035b
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   9f520:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   9f524:	3b02      	subs	r3, #2
   9f526:	2b15      	cmp	r3, #21
   9f528:	f200 8108 	bhi.w	9f73c <Cl_Rinse_Controller+0x3d8>
   9f52c:	a201      	add	r2, pc, #4	; (adr r2, 9f534 <Cl_Rinse_Controller+0x1d0>)
   9f52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f532:	bf00      	nop
   9f534:	0009f681 	.word	0x0009f681
   9f538:	0009f73d 	.word	0x0009f73d
   9f53c:	0009f70d 	.word	0x0009f70d
   9f540:	0009f71f 	.word	0x0009f71f
   9f544:	0009f73d 	.word	0x0009f73d
   9f548:	0009f73d 	.word	0x0009f73d
   9f54c:	0009f73d 	.word	0x0009f73d
   9f550:	0009f73d 	.word	0x0009f73d
   9f554:	0009f73d 	.word	0x0009f73d
   9f558:	0009f73d 	.word	0x0009f73d
   9f55c:	0009f73d 	.word	0x0009f73d
   9f560:	0009f73d 	.word	0x0009f73d
   9f564:	0009f73d 	.word	0x0009f73d
   9f568:	0009f73d 	.word	0x0009f73d
   9f56c:	0009f73d 	.word	0x0009f73d
   9f570:	0009f73d 	.word	0x0009f73d
   9f574:	0009f73d 	.word	0x0009f73d
   9f578:	0009f73d 	.word	0x0009f73d
   9f57c:	0009f73d 	.word	0x0009f73d
   9f580:	0009f73d 	.word	0x0009f73d
   9f584:	0009f731 	.word	0x0009f731
   9f588:	0009f58d 	.word	0x0009f58d
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   9f58c:	4b34      	ldr	r3, [pc, #208]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f58e:	7e1b      	ldrb	r3, [r3, #24]
   9f590:	2b00      	cmp	r3, #0
   9f592:	f000 80d6 	beq.w	9f742 <Cl_Rinse_Controller+0x3de>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   9f596:	4b32      	ldr	r3, [pc, #200]	; (9f660 <Cl_Rinse_Controller+0x2fc>)
   9f598:	791b      	ldrb	r3, [r3, #4]
   9f59a:	2b02      	cmp	r3, #2
   9f59c:	d020      	beq.n	9f5e0 <Cl_Rinse_Controller+0x27c>
   9f59e:	2b21      	cmp	r3, #33	; 0x21
   9f5a0:	d03a      	beq.n	9f618 <Cl_Rinse_Controller+0x2b4>
   9f5a2:	2b01      	cmp	r3, #1
   9f5a4:	d000      	beq.n	9f5a8 <Cl_Rinse_Controller+0x244>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   9f5a6:	e053      	b.n	9f650 <Cl_Rinse_Controller+0x2ec>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9f5a8:	2316      	movs	r3, #22
   9f5aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9f5ae:	2301      	movs	r3, #1
   9f5b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9f5b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9f5b8:	3301      	adds	r3, #1
   9f5ba:	4619      	mov	r1, r3
   9f5bc:	2001      	movs	r0, #1
   9f5be:	4b2e      	ldr	r3, [pc, #184]	; (9f678 <Cl_Rinse_Controller+0x314>)
   9f5c0:	4798      	blx	r3
   9f5c2:	4603      	mov	r3, r0
   9f5c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f5c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9f5cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f5d0:	2202      	movs	r2, #2
   9f5d2:	4618      	mov	r0, r3
   9f5d4:	4b29      	ldr	r3, [pc, #164]	; (9f67c <Cl_Rinse_Controller+0x318>)
   9f5d6:	4798      	blx	r3
   9f5d8:	4603      	mov	r3, r0
   9f5da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								
								break;
   9f5de:	e037      	b.n	9f650 <Cl_Rinse_Controller+0x2ec>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9f5e0:	2316      	movs	r3, #22
   9f5e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9f5e6:	2302      	movs	r3, #2
   9f5e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9f5ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9f5f0:	3301      	adds	r3, #1
   9f5f2:	4619      	mov	r1, r3
   9f5f4:	2002      	movs	r0, #2
   9f5f6:	4b20      	ldr	r3, [pc, #128]	; (9f678 <Cl_Rinse_Controller+0x314>)
   9f5f8:	4798      	blx	r3
   9f5fa:	4603      	mov	r3, r0
   9f5fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9f600:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9f604:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f608:	2202      	movs	r2, #2
   9f60a:	4618      	mov	r0, r3
   9f60c:	4b1b      	ldr	r3, [pc, #108]	; (9f67c <Cl_Rinse_Controller+0x318>)
   9f60e:	4798      	blx	r3
   9f610:	4603      	mov	r3, r0
   9f612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								break;
   9f616:	e01b      	b.n	9f650 <Cl_Rinse_Controller+0x2ec>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9f618:	2316      	movs	r3, #22
   9f61a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9f61e:	2323      	movs	r3, #35	; 0x23
   9f620:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9f624:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9f628:	3301      	adds	r3, #1
   9f62a:	4619      	mov	r1, r3
   9f62c:	2028      	movs	r0, #40	; 0x28
   9f62e:	4b12      	ldr	r3, [pc, #72]	; (9f678 <Cl_Rinse_Controller+0x314>)
   9f630:	4798      	blx	r3
   9f632:	4603      	mov	r3, r0
   9f634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9f638:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9f63c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f640:	2202      	movs	r2, #2
   9f642:	4618      	mov	r0, r3
   9f644:	4b0d      	ldr	r3, [pc, #52]	; (9f67c <Cl_Rinse_Controller+0x318>)
   9f646:	4798      	blx	r3
   9f648:	4603      	mov	r3, r0
   9f64a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								break;							
   9f64e:	bf00      	nop
								default:
								break;
							}
						}
				break;
   9f650:	e077      	b.n	9f742 <Cl_Rinse_Controller+0x3de>
   9f652:	bf00      	nop
   9f654:	000a08b1 	.word	0x000a08b1
   9f658:	00082f5d 	.word	0x00082f5d
   9f65c:	00091a75 	.word	0x00091a75
   9f660:	20072f88 	.word	0x20072f88
   9f664:	20073194 	.word	0x20073194
   9f668:	00092169 	.word	0x00092169
   9f66c:	2007285e 	.word	0x2007285e
   9f670:	200730f8 	.word	0x200730f8
   9f674:	00083051 	.word	0x00083051
   9f678:	00097d7d 	.word	0x00097d7d
   9f67c:	0009926d 	.word	0x0009926d
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9f680:	4bb9      	ldr	r3, [pc, #740]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f682:	7e1b      	ldrb	r3, [r3, #24]
   9f684:	2b00      	cmp	r3, #0
   9f686:	d00e      	beq.n	9f6a6 <Cl_Rinse_Controller+0x342>
					{
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f688:	4bb7      	ldr	r3, [pc, #732]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f68a:	791b      	ldrb	r3, [r3, #4]
   9f68c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						if (cl_temp.bytearray[0] == 1)
   9f690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9f694:	2b01      	cmp	r3, #1
   9f696:	d006      	beq.n	9f6a6 <Cl_Rinse_Controller+0x342>
						{
						
						}
						else if (cl_temp.bytearray[0] == 2)
   9f698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9f69c:	2b02      	cmp	r3, #2
   9f69e:	d102      	bne.n	9f6a6 <Cl_Rinse_Controller+0x342>
						{
							hotrinse_flag = 1;
   9f6a0:	4bb2      	ldr	r3, [pc, #712]	; (9f96c <Cl_Rinse_Controller+0x608>)
   9f6a2:	2201      	movs	r2, #1
   9f6a4:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   9f6a6:	4bb2      	ldr	r3, [pc, #712]	; (9f970 <Cl_Rinse_Controller+0x60c>)
   9f6a8:	4798      	blx	r3
   9f6aa:	4603      	mov	r3, r0
   9f6ac:	2b00      	cmp	r3, #0
   9f6ae:	d12a      	bne.n	9f706 <Cl_Rinse_Controller+0x3a2>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   9f6b0:	2308      	movs	r3, #8
   9f6b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9f6b6:	2301      	movs	r3, #1
   9f6b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9f6bc:	f107 0133 	add.w	r1, r7, #51	; 0x33
   9f6c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f6c4:	2201      	movs	r2, #1
   9f6c6:	4618      	mov	r0, r3
   9f6c8:	4baa      	ldr	r3, [pc, #680]	; (9f974 <Cl_Rinse_Controller+0x610>)
   9f6ca:	4798      	blx	r3
   9f6cc:	4603      	mov	r3, r0
   9f6ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						command = CON_TX_COMMAND_RINSE_STARTED;
   9f6d2:	2309      	movs	r3, #9
   9f6d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9f6d8:	f107 0133 	add.w	r1, r7, #51	; 0x33
   9f6dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f6e0:	2200      	movs	r2, #0
   9f6e2:	4618      	mov	r0, r3
   9f6e4:	4ba3      	ldr	r3, [pc, #652]	; (9f974 <Cl_Rinse_Controller+0x610>)
   9f6e6:	4798      	blx	r3
   9f6e8:	4603      	mov	r3, r0
   9f6ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9f6ee:	4ba2      	ldr	r3, [pc, #648]	; (9f978 <Cl_Rinse_Controller+0x614>)
   9f6f0:	4798      	blx	r3
   9f6f2:	4603      	mov	r3, r0
   9f6f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9f6f8:	4ba0      	ldr	r3, [pc, #640]	; (9f97c <Cl_Rinse_Controller+0x618>)
   9f6fa:	2203      	movs	r2, #3
   9f6fc:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f6fe:	4ba0      	ldr	r3, [pc, #640]	; (9f980 <Cl_Rinse_Controller+0x61c>)
   9f700:	2201      	movs	r2, #1
   9f702:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   9f704:	e01e      	b.n	9f744 <Cl_Rinse_Controller+0x3e0>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   9f706:	2303      	movs	r3, #3
   9f708:	f001 b8c5 	b.w	a0896 <Cl_Rinse_Controller+0x1532>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   9f70c:	4b98      	ldr	r3, [pc, #608]	; (9f970 <Cl_Rinse_Controller+0x60c>)
   9f70e:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9f710:	4b9a      	ldr	r3, [pc, #616]	; (9f97c <Cl_Rinse_Controller+0x618>)
   9f712:	2204      	movs	r2, #4
   9f714:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f716:	4b9a      	ldr	r3, [pc, #616]	; (9f980 <Cl_Rinse_Controller+0x61c>)
   9f718:	2201      	movs	r2, #1
   9f71a:	701a      	strb	r2, [r3, #0]
				break;
   9f71c:	e012      	b.n	9f744 <Cl_Rinse_Controller+0x3e0>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9f71e:	4b94      	ldr	r3, [pc, #592]	; (9f970 <Cl_Rinse_Controller+0x60c>)
   9f720:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9f722:	4b96      	ldr	r3, [pc, #600]	; (9f97c <Cl_Rinse_Controller+0x618>)
   9f724:	2205      	movs	r2, #5
   9f726:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9f728:	4b95      	ldr	r3, [pc, #596]	; (9f980 <Cl_Rinse_Controller+0x61c>)
   9f72a:	2201      	movs	r2, #1
   9f72c:	701a      	strb	r2, [r3, #0]
				break;
   9f72e:	e009      	b.n	9f744 <Cl_Rinse_Controller+0x3e0>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9f730:	4b94      	ldr	r3, [pc, #592]	; (9f984 <Cl_Rinse_Controller+0x620>)
   9f732:	4798      	blx	r3
   9f734:	4603      	mov	r3, r0
   9f736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				break;
   9f73a:	e003      	b.n	9f744 <Cl_Rinse_Controller+0x3e0>
				default:
				break;
   9f73c:	bf00      	nop
   9f73e:	f001 b8a8 	b.w	a0892 <Cl_Rinse_Controller+0x152e>
								break;							
								default:
								break;
							}
						}
				break;
   9f742:	bf00      	nop
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
				break;
				default:
				break;
			}                                 	
		break;
   9f744:	f001 b8a5 	b.w	a0892 <Cl_Rinse_Controller+0x152e>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   9f748:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   9f74c:	3b06      	subs	r3, #6
   9f74e:	2b21      	cmp	r3, #33	; 0x21
   9f750:	f201 809e 	bhi.w	a0890 <Cl_Rinse_Controller+0x152c>
   9f754:	a201      	add	r2, pc, #4	; (adr r2, 9f75c <Cl_Rinse_Controller+0x3f8>)
   9f756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f75a:	bf00      	nop
   9f75c:	0009fe77 	.word	0x0009fe77
   9f760:	000a0891 	.word	0x000a0891
   9f764:	000a0891 	.word	0x000a0891
   9f768:	000a0891 	.word	0x000a0891
   9f76c:	000a0891 	.word	0x000a0891
   9f770:	000a0891 	.word	0x000a0891
   9f774:	000a0891 	.word	0x000a0891
   9f778:	000a0891 	.word	0x000a0891
   9f77c:	000a0891 	.word	0x000a0891
   9f780:	0009fa31 	.word	0x0009fa31
   9f784:	000a0891 	.word	0x000a0891
   9f788:	0009fa59 	.word	0x0009fa59
   9f78c:	0009fb01 	.word	0x0009fb01
   9f790:	0009fccd 	.word	0x0009fccd
   9f794:	0009fe61 	.word	0x0009fe61
   9f798:	0009fe89 	.word	0x0009fe89
   9f79c:	0009fe7d 	.word	0x0009fe7d
   9f7a0:	0009f94d 	.word	0x0009f94d
   9f7a4:	0009f7e5 	.word	0x0009f7e5
   9f7a8:	0009ff3f 	.word	0x0009ff3f
   9f7ac:	0009febd 	.word	0x0009febd
   9f7b0:	0009fed7 	.word	0x0009fed7
   9f7b4:	0009ffb1 	.word	0x0009ffb1
   9f7b8:	0009ffbb 	.word	0x0009ffbb
   9f7bc:	0009ffc5 	.word	0x0009ffc5
   9f7c0:	0009fee7 	.word	0x0009fee7
   9f7c4:	0009ff0b 	.word	0x0009ff0b
   9f7c8:	0009ff1f 	.word	0x0009ff1f
   9f7cc:	0009ff2f 	.word	0x0009ff2f
   9f7d0:	000a0891 	.word	0x000a0891
   9f7d4:	000a0891 	.word	0x000a0891
   9f7d8:	000a0891 	.word	0x000a0891
   9f7dc:	000a0891 	.word	0x000a0891
   9f7e0:	0009fff3 	.word	0x0009fff3
				{
						case EVT_RINSE_SET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9f7e4:	4b60      	ldr	r3, [pc, #384]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f7e6:	7e1b      	ldrb	r3, [r3, #24]
   9f7e8:	2b00      	cmp	r3, #0
   9f7ea:	f000 8406 	beq.w	9fffa <Cl_Rinse_Controller+0xc96>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9f7ee:	4b5e      	ldr	r3, [pc, #376]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f7f0:	795b      	ldrb	r3, [r3, #5]
   9f7f2:	f887 3020 	strb.w	r3, [r7, #32]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9f7f6:	4b5c      	ldr	r3, [pc, #368]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f7f8:	799b      	ldrb	r3, [r3, #6]
   9f7fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9f7fe:	4b5a      	ldr	r3, [pc, #360]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f800:	79db      	ldrb	r3, [r3, #7]
   9f802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9f806:	4b58      	ldr	r3, [pc, #352]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f808:	7a1b      	ldrb	r3, [r3, #8]
   9f80a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9f80e:	4b56      	ldr	r3, [pc, #344]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f810:	791b      	ldrb	r3, [r3, #4]
   9f812:	3b05      	subs	r3, #5
   9f814:	2b20      	cmp	r3, #32
   9f816:	f200 8097 	bhi.w	9f948 <Cl_Rinse_Controller+0x5e4>
   9f81a:	a201      	add	r2, pc, #4	; (adr r2, 9f820 <Cl_Rinse_Controller+0x4bc>)
   9f81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f820:	0009f949 	.word	0x0009f949
   9f824:	0009f949 	.word	0x0009f949
   9f828:	0009f949 	.word	0x0009f949
   9f82c:	0009f949 	.word	0x0009f949
   9f830:	0009f949 	.word	0x0009f949
   9f834:	0009f949 	.word	0x0009f949
   9f838:	0009f949 	.word	0x0009f949
   9f83c:	0009f949 	.word	0x0009f949
   9f840:	0009f949 	.word	0x0009f949
   9f844:	0009f949 	.word	0x0009f949
   9f848:	0009f949 	.word	0x0009f949
   9f84c:	0009f949 	.word	0x0009f949
   9f850:	0009f949 	.word	0x0009f949
   9f854:	0009f949 	.word	0x0009f949
   9f858:	0009f949 	.word	0x0009f949
   9f85c:	0009f949 	.word	0x0009f949
   9f860:	0009f949 	.word	0x0009f949
   9f864:	0009f949 	.word	0x0009f949
   9f868:	0009f949 	.word	0x0009f949
   9f86c:	0009f8a5 	.word	0x0009f8a5
   9f870:	0009f8bd 	.word	0x0009f8bd
   9f874:	0009f8d5 	.word	0x0009f8d5
   9f878:	0009f8e5 	.word	0x0009f8e5
   9f87c:	0009f8f5 	.word	0x0009f8f5
   9f880:	0009f905 	.word	0x0009f905
   9f884:	0009f949 	.word	0x0009f949
   9f888:	0009f949 	.word	0x0009f949
   9f88c:	0009f949 	.word	0x0009f949
   9f890:	0009f949 	.word	0x0009f949
   9f894:	0009f915 	.word	0x0009f915
   9f898:	0009f91f 	.word	0x0009f91f
   9f89c:	0009f929 	.word	0x0009f929
   9f8a0:	0009f939 	.word	0x0009f939
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9f8a4:	6a3b      	ldr	r3, [r7, #32]
   9f8a6:	4a38      	ldr	r2, [pc, #224]	; (9f988 <Cl_Rinse_Controller+0x624>)
   9f8a8:	fba2 2303 	umull	r2, r3, r2, r3
   9f8ac:	08da      	lsrs	r2, r3, #3
   9f8ae:	4b37      	ldr	r3, [pc, #220]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f8b0:	4610      	mov	r0, r2
   9f8b2:	4798      	blx	r3
   9f8b4:	4602      	mov	r2, r0
   9f8b6:	4b36      	ldr	r3, [pc, #216]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f8b8:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9f8ba:	e046      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9f8bc:	6a3b      	ldr	r3, [r7, #32]
   9f8be:	4a32      	ldr	r2, [pc, #200]	; (9f988 <Cl_Rinse_Controller+0x624>)
   9f8c0:	fba2 2303 	umull	r2, r3, r2, r3
   9f8c4:	08da      	lsrs	r2, r3, #3
   9f8c6:	4b31      	ldr	r3, [pc, #196]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f8c8:	4610      	mov	r0, r2
   9f8ca:	4798      	blx	r3
   9f8cc:	4602      	mov	r2, r0
   9f8ce:	4b30      	ldr	r3, [pc, #192]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f8d0:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9f8d2:	e03a      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9f8d4:	6a3a      	ldr	r2, [r7, #32]
   9f8d6:	4b2d      	ldr	r3, [pc, #180]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f8d8:	4610      	mov	r0, r2
   9f8da:	4798      	blx	r3
   9f8dc:	4602      	mov	r2, r0
   9f8de:	4b2c      	ldr	r3, [pc, #176]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f8e0:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9f8e2:	e032      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9f8e4:	6a3a      	ldr	r2, [r7, #32]
   9f8e6:	4b29      	ldr	r3, [pc, #164]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f8e8:	4610      	mov	r0, r2
   9f8ea:	4798      	blx	r3
   9f8ec:	4602      	mov	r2, r0
   9f8ee:	4b28      	ldr	r3, [pc, #160]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f8f0:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9f8f2:	e02a      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9f8f4:	6a3a      	ldr	r2, [r7, #32]
   9f8f6:	4b25      	ldr	r3, [pc, #148]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f8f8:	4610      	mov	r0, r2
   9f8fa:	4798      	blx	r3
   9f8fc:	4602      	mov	r2, r0
   9f8fe:	4b24      	ldr	r3, [pc, #144]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f900:	615a      	str	r2, [r3, #20]
										break;
   9f902:	e022      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9f904:	6a3a      	ldr	r2, [r7, #32]
   9f906:	4b21      	ldr	r3, [pc, #132]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f908:	4610      	mov	r0, r2
   9f90a:	4798      	blx	r3
   9f90c:	4602      	mov	r2, r0
   9f90e:	4b20      	ldr	r3, [pc, #128]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f910:	611a      	str	r2, [r3, #16]
										break;
   9f912:	e01a      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9f914:	6a3b      	ldr	r3, [r7, #32]
   9f916:	b21a      	sxth	r2, r3
   9f918:	4b1d      	ldr	r3, [pc, #116]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f91a:	801a      	strh	r2, [r3, #0]
										break;
   9f91c:	e015      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9f91e:	6a3b      	ldr	r3, [r7, #32]
   9f920:	b21a      	sxth	r2, r3
   9f922:	4b1b      	ldr	r3, [pc, #108]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f924:	805a      	strh	r2, [r3, #2]
										break;
   9f926:	e010      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9f928:	6a3a      	ldr	r2, [r7, #32]
   9f92a:	4b18      	ldr	r3, [pc, #96]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f92c:	4610      	mov	r0, r2
   9f92e:	4798      	blx	r3
   9f930:	4602      	mov	r2, r0
   9f932:	4b17      	ldr	r3, [pc, #92]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f934:	60da      	str	r2, [r3, #12]
										break;
   9f936:	e008      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9f938:	6a3a      	ldr	r2, [r7, #32]
   9f93a:	4b14      	ldr	r3, [pc, #80]	; (9f98c <Cl_Rinse_Controller+0x628>)
   9f93c:	4610      	mov	r0, r2
   9f93e:	4798      	blx	r3
   9f940:	4602      	mov	r2, r0
   9f942:	4b13      	ldr	r3, [pc, #76]	; (9f990 <Cl_Rinse_Controller+0x62c>)
   9f944:	609a      	str	r2, [r3, #8]
										break;
   9f946:	e000      	b.n	9f94a <Cl_Rinse_Controller+0x5e6>

									default:break;
   9f948:	bf00      	nop
								}
							}
						
						break;
   9f94a:	e356      	b.n	9fffa <Cl_Rinse_Controller+0xc96>
						case EVT_RINSE_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9f94c:	4b06      	ldr	r3, [pc, #24]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f94e:	7e1b      	ldrb	r3, [r3, #24]
   9f950:	2b00      	cmp	r3, #0
   9f952:	f000 8355 	beq.w	a0000 <Cl_Rinse_Controller+0xc9c>
								{
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9f956:	4b04      	ldr	r3, [pc, #16]	; (9f968 <Cl_Rinse_Controller+0x604>)
   9f958:	791b      	ldrb	r3, [r3, #4]
   9f95a:	2b20      	cmp	r3, #32
   9f95c:	d036      	beq.n	9f9cc <Cl_Rinse_Controller+0x668>
   9f95e:	2b21      	cmp	r3, #33	; 0x21
   9f960:	d049      	beq.n	9f9f6 <Cl_Rinse_Controller+0x692>
   9f962:	2b02      	cmp	r3, #2
   9f964:	d016      	beq.n	9f994 <Cl_Rinse_Controller+0x630>
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
										break;			
															
										default:
										break;
   9f966:	e062      	b.n	9fa2e <Cl_Rinse_Controller+0x6ca>
   9f968:	20072f88 	.word	0x20072f88
   9f96c:	20072881 	.word	0x20072881
   9f970:	000a16c5 	.word	0x000a16c5
   9f974:	0009926d 	.word	0x0009926d
   9f978:	000a0be9 	.word	0x000a0be9
   9f97c:	2007285e 	.word	0x2007285e
   9f980:	2007285f 	.word	0x2007285f
   9f984:	000a0e35 	.word	0x000a0e35
   9f988:	cccccccd 	.word	0xcccccccd
   9f98c:	000a33a1 	.word	0x000a33a1
   9f990:	20072cf8 	.word	0x20072cf8
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{

										case CON_RX_PARAM_DATA_PRIME_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9f994:	2316      	movs	r3, #22
   9f996:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
										dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9f99a:	2302      	movs	r3, #2
   9f99c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9f9a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9f9a4:	3301      	adds	r3, #1
   9f9a6:	4619      	mov	r1, r3
   9f9a8:	2002      	movs	r0, #2
   9f9aa:	4b4a      	ldr	r3, [pc, #296]	; (9fad4 <Cl_Rinse_Controller+0x770>)
   9f9ac:	4798      	blx	r3
   9f9ae:	4603      	mov	r3, r0
   9f9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f9b4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9f9b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f9bc:	2202      	movs	r2, #2
   9f9be:	4618      	mov	r0, r3
   9f9c0:	4b45      	ldr	r3, [pc, #276]	; (9fad8 <Cl_Rinse_Controller+0x774>)
   9f9c2:	4798      	blx	r3
   9f9c4:	4603      	mov	r3, r0
   9f9c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										break;
   9f9ca:	e030      	b.n	9fa2e <Cl_Rinse_Controller+0x6ca>

										case CON_RX_PARAM_DATA_RECIRC_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9f9cc:	2316      	movs	r3, #22
   9f9ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
										dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   9f9d2:	2321      	movs	r3, #33	; 0x21
   9f9d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
										//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
										dataarray[1] = 0;
   9f9d8:	2300      	movs	r3, #0
   9f9da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f9de:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9f9e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9f9e6:	2202      	movs	r2, #2
   9f9e8:	4618      	mov	r0, r3
   9f9ea:	4b3b      	ldr	r3, [pc, #236]	; (9fad8 <Cl_Rinse_Controller+0x774>)
   9f9ec:	4798      	blx	r3
   9f9ee:	4603      	mov	r3, r0
   9f9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										break;		
   9f9f4:	e01b      	b.n	9fa2e <Cl_Rinse_Controller+0x6ca>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9f9f6:	2316      	movs	r3, #22
   9f9f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
										dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9f9fc:	2323      	movs	r3, #35	; 0x23
   9f9fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
										Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9fa02:	f107 0334 	add.w	r3, r7, #52	; 0x34
   9fa06:	3301      	adds	r3, #1
   9fa08:	4619      	mov	r1, r3
   9fa0a:	2028      	movs	r0, #40	; 0x28
   9fa0c:	4b31      	ldr	r3, [pc, #196]	; (9fad4 <Cl_Rinse_Controller+0x770>)
   9fa0e:	4798      	blx	r3
   9fa10:	4603      	mov	r3, r0
   9fa12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9fa16:	f107 0134 	add.w	r1, r7, #52	; 0x34
   9fa1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   9fa1e:	2202      	movs	r2, #2
   9fa20:	4618      	mov	r0, r3
   9fa22:	4b2d      	ldr	r3, [pc, #180]	; (9fad8 <Cl_Rinse_Controller+0x774>)
   9fa24:	4798      	blx	r3
   9fa26:	4603      	mov	r3, r0
   9fa28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										break;			
   9fa2c:	bf00      	nop
															
										default:
										break;
									}
								}
						break;
   9fa2e:	e2e7      	b.n	a0000 <Cl_Rinse_Controller+0xc9c>
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   9fa30:	4b2a      	ldr	r3, [pc, #168]	; (9fadc <Cl_Rinse_Controller+0x778>)
   9fa32:	781b      	ldrb	r3, [r3, #0]
   9fa34:	2b02      	cmp	r3, #2
   9fa36:	f040 82e6 	bne.w	a0006 <Cl_Rinse_Controller+0xca2>
						{
									cl_50ms_timer++;
   9fa3a:	4b29      	ldr	r3, [pc, #164]	; (9fae0 <Cl_Rinse_Controller+0x77c>)
   9fa3c:	881b      	ldrh	r3, [r3, #0]
   9fa3e:	3301      	adds	r3, #1
   9fa40:	b29a      	uxth	r2, r3
   9fa42:	4b27      	ldr	r3, [pc, #156]	; (9fae0 <Cl_Rinse_Controller+0x77c>)
   9fa44:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   9fa46:	4b26      	ldr	r3, [pc, #152]	; (9fae0 <Cl_Rinse_Controller+0x77c>)
   9fa48:	881b      	ldrh	r3, [r3, #0]
   9fa4a:	2b02      	cmp	r3, #2
   9fa4c:	f040 82db 	bne.w	a0006 <Cl_Rinse_Controller+0xca2>
									{
										cl_50ms_timer =0;
   9fa50:	4b23      	ldr	r3, [pc, #140]	; (9fae0 <Cl_Rinse_Controller+0x77c>)
   9fa52:	2200      	movs	r2, #0
   9fa54:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   9fa56:	e2d6      	b.n	a0006 <Cl_Rinse_Controller+0xca2>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   9fa58:	4b22      	ldr	r3, [pc, #136]	; (9fae4 <Cl_Rinse_Controller+0x780>)
   9fa5a:	681a      	ldr	r2, [r3, #0]
   9fa5c:	4b22      	ldr	r3, [pc, #136]	; (9fae8 <Cl_Rinse_Controller+0x784>)
   9fa5e:	4923      	ldr	r1, [pc, #140]	; (9faec <Cl_Rinse_Controller+0x788>)
   9fa60:	4610      	mov	r0, r2
   9fa62:	4798      	blx	r3
   9fa64:	4603      	mov	r3, r0
   9fa66:	2b00      	cmp	r3, #0
   9fa68:	d00d      	beq.n	9fa86 <Cl_Rinse_Controller+0x722>
   9fa6a:	4b1e      	ldr	r3, [pc, #120]	; (9fae4 <Cl_Rinse_Controller+0x780>)
   9fa6c:	681a      	ldr	r2, [r3, #0]
   9fa6e:	4b20      	ldr	r3, [pc, #128]	; (9faf0 <Cl_Rinse_Controller+0x78c>)
   9fa70:	4920      	ldr	r1, [pc, #128]	; (9faf4 <Cl_Rinse_Controller+0x790>)
   9fa72:	4610      	mov	r0, r2
   9fa74:	4798      	blx	r3
   9fa76:	4603      	mov	r3, r0
   9fa78:	2b00      	cmp	r3, #0
   9fa7a:	d004      	beq.n	9fa86 <Cl_Rinse_Controller+0x722>
							{
								sv_cntrl_decheater(2200);
   9fa7c:	f640 0098 	movw	r0, #2200	; 0x898
   9fa80:	4b1d      	ldr	r3, [pc, #116]	; (9faf8 <Cl_Rinse_Controller+0x794>)
   9fa82:	4798      	blx	r3
   9fa84:	e025      	b.n	9fad2 <Cl_Rinse_Controller+0x76e>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   9fa86:	4b17      	ldr	r3, [pc, #92]	; (9fae4 <Cl_Rinse_Controller+0x780>)
   9fa88:	681a      	ldr	r2, [r3, #0]
   9fa8a:	4b17      	ldr	r3, [pc, #92]	; (9fae8 <Cl_Rinse_Controller+0x784>)
   9fa8c:	4919      	ldr	r1, [pc, #100]	; (9faf4 <Cl_Rinse_Controller+0x790>)
   9fa8e:	4610      	mov	r0, r2
   9fa90:	4798      	blx	r3
   9fa92:	4603      	mov	r3, r0
   9fa94:	2b00      	cmp	r3, #0
   9fa96:	d00d      	beq.n	9fab4 <Cl_Rinse_Controller+0x750>
   9fa98:	4b12      	ldr	r3, [pc, #72]	; (9fae4 <Cl_Rinse_Controller+0x780>)
   9fa9a:	681a      	ldr	r2, [r3, #0]
   9fa9c:	4b14      	ldr	r3, [pc, #80]	; (9faf0 <Cl_Rinse_Controller+0x78c>)
   9fa9e:	4917      	ldr	r1, [pc, #92]	; (9fafc <Cl_Rinse_Controller+0x798>)
   9faa0:	4610      	mov	r0, r2
   9faa2:	4798      	blx	r3
   9faa4:	4603      	mov	r3, r0
   9faa6:	2b00      	cmp	r3, #0
   9faa8:	d004      	beq.n	9fab4 <Cl_Rinse_Controller+0x750>
							{
								sv_cntrl_decheater(2000);
   9faaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   9faae:	4b12      	ldr	r3, [pc, #72]	; (9faf8 <Cl_Rinse_Controller+0x794>)
   9fab0:	4798      	blx	r3
   9fab2:	e00e      	b.n	9fad2 <Cl_Rinse_Controller+0x76e>
							}
							else if (avgtemp2_dummy > 77)
   9fab4:	4b0b      	ldr	r3, [pc, #44]	; (9fae4 <Cl_Rinse_Controller+0x780>)
   9fab6:	681a      	ldr	r2, [r3, #0]
   9fab8:	4b0b      	ldr	r3, [pc, #44]	; (9fae8 <Cl_Rinse_Controller+0x784>)
   9faba:	4910      	ldr	r1, [pc, #64]	; (9fafc <Cl_Rinse_Controller+0x798>)
   9fabc:	4610      	mov	r0, r2
   9fabe:	4798      	blx	r3
   9fac0:	4603      	mov	r3, r0
   9fac2:	2b00      	cmp	r3, #0
   9fac4:	d100      	bne.n	9fac8 <Cl_Rinse_Controller+0x764>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   9fac6:	e2ae      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   9fac8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   9facc:	4b0a      	ldr	r3, [pc, #40]	; (9faf8 <Cl_Rinse_Controller+0x794>)
   9face:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   9fad0:	e2a9      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
   9fad2:	e2a8      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
   9fad4:	00097d7d 	.word	0x00097d7d
   9fad8:	0009926d 	.word	0x0009926d
   9fadc:	2007285f 	.word	0x2007285f
   9fae0:	2007287e 	.word	0x2007287e
   9fae4:	200725f8 	.word	0x200725f8
   9fae8:	000a37c9 	.word	0x000a37c9
   9faec:	42960000 	.word	0x42960000
   9faf0:	000a378d 	.word	0x000a378d
   9faf4:	42980000 	.word	0x42980000
   9faf8:	00097619 	.word	0x00097619
   9fafc:	429a0000 	.word	0x429a0000
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9fb00:	4b8b      	ldr	r3, [pc, #556]	; (9fd30 <Cl_Rinse_Controller+0x9cc>)
   9fb02:	781b      	ldrb	r3, [r3, #0]
   9fb04:	2b03      	cmp	r3, #3
   9fb06:	d101      	bne.n	9fb0c <Cl_Rinse_Controller+0x7a8>
						{
							Cl_Rinse_SendRinseStateData();	
   9fb08:	4b8a      	ldr	r3, [pc, #552]	; (9fd34 <Cl_Rinse_Controller+0x9d0>)
   9fb0a:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   9fb0c:	4b8a      	ldr	r3, [pc, #552]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fb0e:	681b      	ldr	r3, [r3, #0]
   9fb10:	3301      	adds	r3, #1
   9fb12:	4a89      	ldr	r2, [pc, #548]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fb14:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 40){ // activate flow alarms only after 30 seconds into rinse
   9fb16:	4b88      	ldr	r3, [pc, #544]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fb18:	681b      	ldr	r3, [r3, #0]
   9fb1a:	2b28      	cmp	r3, #40	; 0x28
   9fb1c:	d114      	bne.n	9fb48 <Cl_Rinse_Controller+0x7e4>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9fb1e:	2101      	movs	r1, #1
   9fb20:	200c      	movs	r0, #12
   9fb22:	4b86      	ldr	r3, [pc, #536]	; (9fd3c <Cl_Rinse_Controller+0x9d8>)
   9fb24:	4798      	blx	r3
   9fb26:	4603      	mov	r3, r0
   9fb28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9fb2c:	2101      	movs	r1, #1
   9fb2e:	200d      	movs	r0, #13
   9fb30:	4b82      	ldr	r3, [pc, #520]	; (9fd3c <Cl_Rinse_Controller+0x9d8>)
   9fb32:	4798      	blx	r3
   9fb34:	4603      	mov	r3, r0
   9fb36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9fb3a:	2101      	movs	r1, #1
   9fb3c:	200e      	movs	r0, #14
   9fb3e:	4b7f      	ldr	r3, [pc, #508]	; (9fd3c <Cl_Rinse_Controller+0x9d8>)
   9fb40:	4798      	blx	r3
   9fb42:	4603      	mov	r3, r0
   9fb44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   9fb48:	4b7b      	ldr	r3, [pc, #492]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fb4a:	681b      	ldr	r3, [r3, #0]
   9fb4c:	2b0a      	cmp	r3, #10
   9fb4e:	d118      	bne.n	9fb82 <Cl_Rinse_Controller+0x81e>
   9fb50:	4b7b      	ldr	r3, [pc, #492]	; (9fd40 <Cl_Rinse_Controller+0x9dc>)
   9fb52:	781b      	ldrb	r3, [r3, #0]
   9fb54:	b2db      	uxtb	r3, r3
   9fb56:	2b01      	cmp	r3, #1
   9fb58:	d113      	bne.n	9fb82 <Cl_Rinse_Controller+0x81e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   9fb5a:	2206      	movs	r2, #6
   9fb5c:	4979      	ldr	r1, [pc, #484]	; (9fd44 <Cl_Rinse_Controller+0x9e0>)
   9fb5e:	2018      	movs	r0, #24
   9fb60:	4b79      	ldr	r3, [pc, #484]	; (9fd48 <Cl_Rinse_Controller+0x9e4>)
   9fb62:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   9fb64:	2004      	movs	r0, #4
   9fb66:	4b79      	ldr	r3, [pc, #484]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fb68:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   9fb6a:	2001      	movs	r0, #1
   9fb6c:	4b78      	ldr	r3, [pc, #480]	; (9fd50 <Cl_Rinse_Controller+0x9ec>)
   9fb6e:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   9fb70:	2013      	movs	r0, #19
   9fb72:	4b78      	ldr	r3, [pc, #480]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fb74:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   9fb76:	2014      	movs	r0, #20
   9fb78:	4b76      	ldr	r3, [pc, #472]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fb7a:	4798      	blx	r3
							rinse2=1;
   9fb7c:	4b76      	ldr	r3, [pc, #472]	; (9fd58 <Cl_Rinse_Controller+0x9f4>)
   9fb7e:	2201      	movs	r2, #1
   9fb80:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   9fb82:	4b6d      	ldr	r3, [pc, #436]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fb84:	681b      	ldr	r3, [r3, #0]
   9fb86:	2b1e      	cmp	r3, #30
   9fb88:	d129      	bne.n	9fbde <Cl_Rinse_Controller+0x87a>
   9fb8a:	4b6d      	ldr	r3, [pc, #436]	; (9fd40 <Cl_Rinse_Controller+0x9dc>)
   9fb8c:	781b      	ldrb	r3, [r3, #0]
   9fb8e:	b2db      	uxtb	r3, r3
   9fb90:	2b01      	cmp	r3, #1
   9fb92:	d124      	bne.n	9fbde <Cl_Rinse_Controller+0x87a>
   9fb94:	4b70      	ldr	r3, [pc, #448]	; (9fd58 <Cl_Rinse_Controller+0x9f4>)
   9fb96:	781b      	ldrb	r3, [r3, #0]
   9fb98:	b2db      	uxtb	r3, r3
   9fb9a:	2b01      	cmp	r3, #1
   9fb9c:	d11f      	bne.n	9fbde <Cl_Rinse_Controller+0x87a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   9fb9e:	2206      	movs	r2, #6
   9fba0:	496e      	ldr	r1, [pc, #440]	; (9fd5c <Cl_Rinse_Controller+0x9f8>)
   9fba2:	2018      	movs	r0, #24
   9fba4:	4b68      	ldr	r3, [pc, #416]	; (9fd48 <Cl_Rinse_Controller+0x9e4>)
   9fba6:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   9fba8:	2002      	movs	r0, #2
   9fbaa:	4b69      	ldr	r3, [pc, #420]	; (9fd50 <Cl_Rinse_Controller+0x9ec>)
   9fbac:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   9fbae:	2013      	movs	r0, #19
   9fbb0:	4b66      	ldr	r3, [pc, #408]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fbb2:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   9fbb4:	2014      	movs	r0, #20
   9fbb6:	4b65      	ldr	r3, [pc, #404]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fbb8:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   9fbba:	2001      	movs	r0, #1
   9fbbc:	4b68      	ldr	r3, [pc, #416]	; (9fd60 <Cl_Rinse_Controller+0x9fc>)
   9fbbe:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   9fbc0:	2002      	movs	r0, #2
   9fbc2:	4b67      	ldr	r3, [pc, #412]	; (9fd60 <Cl_Rinse_Controller+0x9fc>)
   9fbc4:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   9fbc6:	2006      	movs	r0, #6
   9fbc8:	4b62      	ldr	r3, [pc, #392]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fbca:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   9fbcc:	2008      	movs	r0, #8
   9fbce:	4b61      	ldr	r3, [pc, #388]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fbd0:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   9fbd2:	2011      	movs	r0, #17
   9fbd4:	4b5f      	ldr	r3, [pc, #380]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fbd6:	4798      	blx	r3
							rinse3=1;
   9fbd8:	4b62      	ldr	r3, [pc, #392]	; (9fd64 <Cl_Rinse_Controller+0xa00>)
   9fbda:	2201      	movs	r2, #1
   9fbdc:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   9fbde:	4b56      	ldr	r3, [pc, #344]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fbe0:	681b      	ldr	r3, [r3, #0]
   9fbe2:	2b37      	cmp	r3, #55	; 0x37
   9fbe4:	d11c      	bne.n	9fc20 <Cl_Rinse_Controller+0x8bc>
   9fbe6:	4b56      	ldr	r3, [pc, #344]	; (9fd40 <Cl_Rinse_Controller+0x9dc>)
   9fbe8:	781b      	ldrb	r3, [r3, #0]
   9fbea:	b2db      	uxtb	r3, r3
   9fbec:	2b01      	cmp	r3, #1
   9fbee:	d117      	bne.n	9fc20 <Cl_Rinse_Controller+0x8bc>
   9fbf0:	4b59      	ldr	r3, [pc, #356]	; (9fd58 <Cl_Rinse_Controller+0x9f4>)
   9fbf2:	781b      	ldrb	r3, [r3, #0]
   9fbf4:	b2db      	uxtb	r3, r3
   9fbf6:	2b01      	cmp	r3, #1
   9fbf8:	d112      	bne.n	9fc20 <Cl_Rinse_Controller+0x8bc>
   9fbfa:	4b5a      	ldr	r3, [pc, #360]	; (9fd64 <Cl_Rinse_Controller+0xa00>)
   9fbfc:	781b      	ldrb	r3, [r3, #0]
   9fbfe:	b2db      	uxtb	r3, r3
   9fc00:	2b01      	cmp	r3, #1
   9fc02:	d10d      	bne.n	9fc20 <Cl_Rinse_Controller+0x8bc>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   9fc04:	2206      	movs	r2, #6
   9fc06:	4958      	ldr	r1, [pc, #352]	; (9fd68 <Cl_Rinse_Controller+0xa04>)
   9fc08:	2018      	movs	r0, #24
   9fc0a:	4b4f      	ldr	r3, [pc, #316]	; (9fd48 <Cl_Rinse_Controller+0x9e4>)
   9fc0c:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   9fc0e:	2004      	movs	r0, #4
   9fc10:	4b50      	ldr	r3, [pc, #320]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fc12:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   9fc14:	2011      	movs	r0, #17
   9fc16:	4b4d      	ldr	r3, [pc, #308]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fc18:	4798      	blx	r3
							rinse4=1;
   9fc1a:	4b54      	ldr	r3, [pc, #336]	; (9fd6c <Cl_Rinse_Controller+0xa08>)
   9fc1c:	2201      	movs	r2, #1
   9fc1e:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   9fc20:	4b45      	ldr	r3, [pc, #276]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fc22:	681b      	ldr	r3, [r3, #0]
   9fc24:	2b3c      	cmp	r3, #60	; 0x3c
   9fc26:	f040 81f1 	bne.w	a000c <Cl_Rinse_Controller+0xca8>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   9fc2a:	2100      	movs	r1, #0
   9fc2c:	2004      	movs	r0, #4
   9fc2e:	4b50      	ldr	r3, [pc, #320]	; (9fd70 <Cl_Rinse_Controller+0xa0c>)
   9fc30:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   9fc32:	4b41      	ldr	r3, [pc, #260]	; (9fd38 <Cl_Rinse_Controller+0x9d4>)
   9fc34:	2200      	movs	r2, #0
   9fc36:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   9fc38:	4b4e      	ldr	r3, [pc, #312]	; (9fd74 <Cl_Rinse_Controller+0xa10>)
   9fc3a:	681b      	ldr	r3, [r3, #0]
   9fc3c:	3301      	adds	r3, #1
   9fc3e:	4a4d      	ldr	r2, [pc, #308]	; (9fd74 <Cl_Rinse_Controller+0xa10>)
   9fc40:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   9fc42:	4b4c      	ldr	r3, [pc, #304]	; (9fd74 <Cl_Rinse_Controller+0xa10>)
   9fc44:	681b      	ldr	r3, [r3, #0]
   9fc46:	2b01      	cmp	r3, #1
   9fc48:	d10d      	bne.n	9fc66 <Cl_Rinse_Controller+0x902>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   9fc4a:	2206      	movs	r2, #6
   9fc4c:	494a      	ldr	r1, [pc, #296]	; (9fd78 <Cl_Rinse_Controller+0xa14>)
   9fc4e:	2018      	movs	r0, #24
   9fc50:	4b3d      	ldr	r3, [pc, #244]	; (9fd48 <Cl_Rinse_Controller+0x9e4>)
   9fc52:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   9fc54:	2004      	movs	r0, #4
   9fc56:	4b3f      	ldr	r3, [pc, #252]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fc58:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   9fc5a:	2011      	movs	r0, #17
   9fc5c:	4b3b      	ldr	r3, [pc, #236]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fc5e:	4798      	blx	r3
								rinse1=1;
   9fc60:	4b37      	ldr	r3, [pc, #220]	; (9fd40 <Cl_Rinse_Controller+0x9dc>)
   9fc62:	2201      	movs	r2, #1
   9fc64:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == 2)
   9fc66:	4b43      	ldr	r3, [pc, #268]	; (9fd74 <Cl_Rinse_Controller+0xa10>)
   9fc68:	681b      	ldr	r3, [r3, #0]
   9fc6a:	2b02      	cmp	r3, #2
   9fc6c:	d11e      	bne.n	9fcac <Cl_Rinse_Controller+0x948>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   9fc6e:	2206      	movs	r2, #6
   9fc70:	4942      	ldr	r1, [pc, #264]	; (9fd7c <Cl_Rinse_Controller+0xa18>)
   9fc72:	2018      	movs	r0, #24
   9fc74:	4b34      	ldr	r3, [pc, #208]	; (9fd48 <Cl_Rinse_Controller+0x9e4>)
   9fc76:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   9fc78:	2004      	movs	r0, #4
   9fc7a:	4b34      	ldr	r3, [pc, #208]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fc7c:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   9fc7e:	2011      	movs	r0, #17
   9fc80:	4b34      	ldr	r3, [pc, #208]	; (9fd54 <Cl_Rinse_Controller+0x9f0>)
   9fc82:	4798      	blx	r3
								sv_prop_stopopenfill();
   9fc84:	4b3e      	ldr	r3, [pc, #248]	; (9fd80 <Cl_Rinse_Controller+0xa1c>)
   9fc86:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9fc88:	2002      	movs	r0, #2
   9fc8a:	4b30      	ldr	r3, [pc, #192]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fc8c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9fc8e:	2003      	movs	r0, #3
   9fc90:	4b2e      	ldr	r3, [pc, #184]	; (9fd4c <Cl_Rinse_Controller+0x9e8>)
   9fc92:	4798      	blx	r3
								
								rinse1=0;
   9fc94:	4b2a      	ldr	r3, [pc, #168]	; (9fd40 <Cl_Rinse_Controller+0x9dc>)
   9fc96:	2200      	movs	r2, #0
   9fc98:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   9fc9a:	4b2f      	ldr	r3, [pc, #188]	; (9fd58 <Cl_Rinse_Controller+0x9f4>)
   9fc9c:	2200      	movs	r2, #0
   9fc9e:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   9fca0:	4b30      	ldr	r3, [pc, #192]	; (9fd64 <Cl_Rinse_Controller+0xa00>)
   9fca2:	2200      	movs	r2, #0
   9fca4:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   9fca6:	4b31      	ldr	r3, [pc, #196]	; (9fd6c <Cl_Rinse_Controller+0xa08>)
   9fca8:	2200      	movs	r2, #0
   9fcaa:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   9fcac:	4b35      	ldr	r3, [pc, #212]	; (9fd84 <Cl_Rinse_Controller+0xa20>)
   9fcae:	681b      	ldr	r3, [r3, #0]
   9fcb0:	3301      	adds	r3, #1
   9fcb2:	4a34      	ldr	r2, [pc, #208]	; (9fd84 <Cl_Rinse_Controller+0xa20>)
   9fcb4:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9fcb6:	4b1e      	ldr	r3, [pc, #120]	; (9fd30 <Cl_Rinse_Controller+0x9cc>)
   9fcb8:	781b      	ldrb	r3, [r3, #0]
   9fcba:	2b03      	cmp	r3, #3
   9fcbc:	f040 81a6 	bne.w	a000c <Cl_Rinse_Controller+0xca8>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9fcc0:	4b31      	ldr	r3, [pc, #196]	; (9fd88 <Cl_Rinse_Controller+0xa24>)
   9fcc2:	4798      	blx	r3
   9fcc4:	4603      	mov	r3, r0
   9fcc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   9fcca:	e19f      	b.n	a000c <Cl_Rinse_Controller+0xca8>
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   9fccc:	4b2f      	ldr	r3, [pc, #188]	; (9fd8c <Cl_Rinse_Controller+0xa28>)
   9fcce:	781b      	ldrb	r3, [r3, #0]
   9fcd0:	b2db      	uxtb	r3, r3
   9fcd2:	3301      	adds	r3, #1
   9fcd4:	b2da      	uxtb	r2, r3
   9fcd6:	4b2d      	ldr	r3, [pc, #180]	; (9fd8c <Cl_Rinse_Controller+0xa28>)
   9fcd8:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   9fcda:	4b2c      	ldr	r3, [pc, #176]	; (9fd8c <Cl_Rinse_Controller+0xa28>)
   9fcdc:	781b      	ldrb	r3, [r3, #0]
   9fcde:	b2db      	uxtb	r3, r3
   9fce0:	2b1e      	cmp	r3, #30
   9fce2:	d905      	bls.n	9fcf0 <Cl_Rinse_Controller+0x98c>
							{
								sv_cntrl_poweroffheater();
   9fce4:	4b2a      	ldr	r3, [pc, #168]	; (9fd90 <Cl_Rinse_Controller+0xa2c>)
   9fce6:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9fce8:	4b2a      	ldr	r3, [pc, #168]	; (9fd94 <Cl_Rinse_Controller+0xa30>)
   9fcea:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   9fcec:	4b2a      	ldr	r3, [pc, #168]	; (9fd98 <Cl_Rinse_Controller+0xa34>)
   9fcee:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   9fcf0:	4b2a      	ldr	r3, [pc, #168]	; (9fd9c <Cl_Rinse_Controller+0xa38>)
   9fcf2:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   9fcf4:	4b2a      	ldr	r3, [pc, #168]	; (9fda0 <Cl_Rinse_Controller+0xa3c>)
   9fcf6:	4798      	blx	r3
   9fcf8:	4603      	mov	r3, r0
   9fcfa:	2b00      	cmp	r3, #0
   9fcfc:	f040 8189 	bne.w	a0012 <Cl_Rinse_Controller+0xcae>
							{
								sv_cntrl_setgreenalarm();
   9fd00:	4b28      	ldr	r3, [pc, #160]	; (9fda4 <Cl_Rinse_Controller+0xa40>)
   9fd02:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   9fd04:	2001      	movs	r0, #1
   9fd06:	4b12      	ldr	r3, [pc, #72]	; (9fd50 <Cl_Rinse_Controller+0x9ec>)
   9fd08:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   9fd0a:	2002      	movs	r0, #2
   9fd0c:	4b10      	ldr	r3, [pc, #64]	; (9fd50 <Cl_Rinse_Controller+0x9ec>)
   9fd0e:	4798      	blx	r3
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   9fd10:	4b25      	ldr	r3, [pc, #148]	; (9fda8 <Cl_Rinse_Controller+0xa44>)
   9fd12:	4798      	blx	r3
   9fd14:	4603      	mov	r3, r0
   9fd16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

								if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   9fd1a:	4b05      	ldr	r3, [pc, #20]	; (9fd30 <Cl_Rinse_Controller+0x9cc>)
   9fd1c:	781b      	ldrb	r3, [r3, #0]
   9fd1e:	2b04      	cmp	r3, #4
   9fd20:	d146      	bne.n	9fdb0 <Cl_Rinse_Controller+0xa4c>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   9fd22:	2052      	movs	r0, #82	; 0x52
   9fd24:	4b21      	ldr	r3, [pc, #132]	; (9fdac <Cl_Rinse_Controller+0xa48>)
   9fd26:	4798      	blx	r3
   9fd28:	4603      	mov	r3, r0
   9fd2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   9fd2e:	e049      	b.n	9fdc4 <Cl_Rinse_Controller+0xa60>
   9fd30:	2007285e 	.word	0x2007285e
   9fd34:	000a1351 	.word	0x000a1351
   9fd38:	20072860 	.word	0x20072860
   9fd3c:	00082f5d 	.word	0x00082f5d
   9fd40:	2007285a 	.word	0x2007285a
   9fd44:	000a591c 	.word	0x000a591c
   9fd48:	0009926d 	.word	0x0009926d
   9fd4c:	00097511 	.word	0x00097511
   9fd50:	0009748d 	.word	0x0009748d
   9fd54:	000974f1 	.word	0x000974f1
   9fd58:	2007285b 	.word	0x2007285b
   9fd5c:	000a5924 	.word	0x000a5924
   9fd60:	00097451 	.word	0x00097451
   9fd64:	2007285c 	.word	0x2007285c
   9fd68:	000a592c 	.word	0x000a592c
   9fd6c:	2007285d 	.word	0x2007285d
   9fd70:	0009381d 	.word	0x0009381d
   9fd74:	20072864 	.word	0x20072864
   9fd78:	000a5934 	.word	0x000a5934
   9fd7c:	000a593c 	.word	0x000a593c
   9fd80:	00097971 	.word	0x00097971
   9fd84:	20072870 	.word	0x20072870
   9fd88:	000a0be9 	.word	0x000a0be9
   9fd8c:	20072882 	.word	0x20072882
   9fd90:	000974dd 	.word	0x000974dd
   9fd94:	00097681 	.word	0x00097681
   9fd98:	0009769d 	.word	0x0009769d
   9fd9c:	000a0e5d 	.word	0x000a0e5d
   9fda0:	000a0c35 	.word	0x000a0c35
   9fda4:	00097771 	.word	0x00097771
   9fda8:	000a0cb5 	.word	0x000a0cb5
   9fdac:	0008a479 	.word	0x0008a479
								}
								else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   9fdb0:	4b9e      	ldr	r3, [pc, #632]	; (a002c <Cl_Rinse_Controller+0xcc8>)
   9fdb2:	781b      	ldrb	r3, [r3, #0]
   9fdb4:	2b05      	cmp	r3, #5
   9fdb6:	d105      	bne.n	9fdc4 <Cl_Rinse_Controller+0xa60>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   9fdb8:	2053      	movs	r0, #83	; 0x53
   9fdba:	4b9d      	ldr	r3, [pc, #628]	; (a0030 <Cl_Rinse_Controller+0xccc>)
   9fdbc:	4798      	blx	r3
   9fdbe:	4603      	mov	r3, r0
   9fdc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								}
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   9fdc4:	2100      	movs	r1, #0
   9fdc6:	200c      	movs	r0, #12
   9fdc8:	4b9a      	ldr	r3, [pc, #616]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fdca:	4798      	blx	r3
   9fdcc:	4603      	mov	r3, r0
   9fdce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   9fdd2:	2100      	movs	r1, #0
   9fdd4:	200d      	movs	r0, #13
   9fdd6:	4b97      	ldr	r3, [pc, #604]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fdd8:	4798      	blx	r3
   9fdda:	4603      	mov	r3, r0
   9fddc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   9fde0:	2100      	movs	r1, #0
   9fde2:	200e      	movs	r0, #14
   9fde4:	4b93      	ldr	r3, [pc, #588]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fde6:	4798      	blx	r3
   9fde8:	4603      	mov	r3, r0
   9fdea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9fdee:	2100      	movs	r1, #0
   9fdf0:	2029      	movs	r0, #41	; 0x29
   9fdf2:	4b90      	ldr	r3, [pc, #576]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fdf4:	4798      	blx	r3
   9fdf6:	4603      	mov	r3, r0
   9fdf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9fdfc:	2100      	movs	r1, #0
   9fdfe:	202b      	movs	r0, #43	; 0x2b
   9fe00:	4b8c      	ldr	r3, [pc, #560]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fe02:	4798      	blx	r3
   9fe04:	4603      	mov	r3, r0
   9fe06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9fe0a:	2100      	movs	r1, #0
   9fe0c:	2003      	movs	r0, #3
   9fe0e:	4b89      	ldr	r3, [pc, #548]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fe10:	4798      	blx	r3
   9fe12:	4603      	mov	r3, r0
   9fe14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9fe18:	2100      	movs	r1, #0
   9fe1a:	2004      	movs	r0, #4
   9fe1c:	4b85      	ldr	r3, [pc, #532]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9fe1e:	4798      	blx	r3
   9fe20:	4603      	mov	r3, r0
   9fe22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9fe26:	4b81      	ldr	r3, [pc, #516]	; (a002c <Cl_Rinse_Controller+0xcc8>)
   9fe28:	2209      	movs	r2, #9
   9fe2a:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   9fe2c:	f107 031e 	add.w	r3, r7, #30
   9fe30:	4619      	mov	r1, r3
   9fe32:	2012      	movs	r0, #18
   9fe34:	4b80      	ldr	r3, [pc, #512]	; (a0038 <Cl_Rinse_Controller+0xcd4>)
   9fe36:	4798      	blx	r3
// 												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 												res_temp_lookuptable(cal_data);
// 												 uint16_t temp = res_temp_value /10;
// 												
// 					//							temp = temp - 25 +12 + 2.5;
										uint16_t temp = sensordata /10;
   9fe38:	8bfb      	ldrh	r3, [r7, #30]
   9fe3a:	4a80      	ldr	r2, [pc, #512]	; (a003c <Cl_Rinse_Controller+0xcd8>)
   9fe3c:	fba2 2303 	umull	r2, r3, r2, r3
   9fe40:	08db      	lsrs	r3, r3, #3
   9fe42:	877b      	strh	r3, [r7, #58]	; 0x3a
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   9fe44:	2300      	movs	r3, #0
   9fe46:	61bb      	str	r3, [r7, #24]
										cl_tdata.Twobyte = temp;
   9fe48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   9fe4a:	833b      	strh	r3, [r7, #24]
										cl_tdata.bytearray[2] = 11;
   9fe4c:	230b      	movs	r3, #11
   9fe4e:	76bb      	strb	r3, [r7, #26]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   9fe50:	f107 0318 	add.w	r3, r7, #24
   9fe54:	2204      	movs	r2, #4
   9fe56:	4619      	mov	r1, r3
   9fe58:	2037      	movs	r0, #55	; 0x37
   9fe5a:	4b79      	ldr	r3, [pc, #484]	; (a0040 <Cl_Rinse_Controller+0xcdc>)
   9fe5c:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   9fe5e:	e0d8      	b.n	a0012 <Cl_Rinse_Controller+0xcae>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   9fe60:	4b78      	ldr	r3, [pc, #480]	; (a0044 <Cl_Rinse_Controller+0xce0>)
   9fe62:	681b      	ldr	r3, [r3, #0]
   9fe64:	3301      	adds	r3, #1
   9fe66:	4a77      	ldr	r2, [pc, #476]	; (a0044 <Cl_Rinse_Controller+0xce0>)
   9fe68:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   9fe6a:	4b77      	ldr	r3, [pc, #476]	; (a0048 <Cl_Rinse_Controller+0xce4>)
   9fe6c:	681b      	ldr	r3, [r3, #0]
   9fe6e:	3301      	adds	r3, #1
   9fe70:	4a75      	ldr	r2, [pc, #468]	; (a0048 <Cl_Rinse_Controller+0xce4>)
   9fe72:	6013      	str	r3, [r2, #0]
						break;
   9fe74:	e0d7      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   9fe76:	4b75      	ldr	r3, [pc, #468]	; (a004c <Cl_Rinse_Controller+0xce8>)
   9fe78:	4798      	blx	r3
						break;
   9fe7a:	e0d4      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9fe7c:	4b74      	ldr	r3, [pc, #464]	; (a0050 <Cl_Rinse_Controller+0xcec>)
   9fe7e:	4798      	blx	r3
   9fe80:	4603      	mov	r3, r0
   9fe82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						break;
   9fe86:	e0ce      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9fe88:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9fe8c:	4619      	mov	r1, r3
   9fe8e:	203c      	movs	r0, #60	; 0x3c
   9fe90:	4b70      	ldr	r3, [pc, #448]	; (a0054 <Cl_Rinse_Controller+0xcf0>)
   9fe92:	4798      	blx	r3
							if(alarmstatus1)
   9fe94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   9fe98:	2b00      	cmp	r3, #0
   9fe9a:	d002      	beq.n	9fea2 <Cl_Rinse_Controller+0xb3e>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   9fe9c:	4b6e      	ldr	r3, [pc, #440]	; (a0058 <Cl_Rinse_Controller+0xcf4>)
   9fe9e:	2201      	movs	r2, #1
   9fea0:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   9fea2:	f107 0331 	add.w	r3, r7, #49	; 0x31
   9fea6:	4619      	mov	r1, r3
   9fea8:	2013      	movs	r0, #19
   9feaa:	4b6a      	ldr	r3, [pc, #424]	; (a0054 <Cl_Rinse_Controller+0xcf0>)
   9feac:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9feae:	f107 0330 	add.w	r3, r7, #48	; 0x30
   9feb2:	4619      	mov	r1, r3
   9feb4:	200c      	movs	r0, #12
   9feb6:	4b67      	ldr	r3, [pc, #412]	; (a0054 <Cl_Rinse_Controller+0xcf0>)
   9feb8:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   9feba:	e0b4      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   9febc:	4b67      	ldr	r3, [pc, #412]	; (a005c <Cl_Rinse_Controller+0xcf8>)
   9febe:	2201      	movs	r2, #1
   9fec0:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   9fec2:	4b67      	ldr	r3, [pc, #412]	; (a0060 <Cl_Rinse_Controller+0xcfc>)
   9fec4:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9fec6:	4b67      	ldr	r3, [pc, #412]	; (a0064 <Cl_Rinse_Controller+0xd00>)
   9fec8:	2200      	movs	r2, #0
   9feca:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9fecc:	2100      	movs	r1, #0
   9fece:	2001      	movs	r0, #1
   9fed0:	4b65      	ldr	r3, [pc, #404]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9fed2:	4798      	blx	r3
						}
						
						break;
   9fed4:	e0a7      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   9fed6:	4b61      	ldr	r3, [pc, #388]	; (a005c <Cl_Rinse_Controller+0xcf8>)
   9fed8:	2200      	movs	r2, #0
   9feda:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9fedc:	2100      	movs	r1, #0
   9fede:	2002      	movs	r0, #2
   9fee0:	4b61      	ldr	r3, [pc, #388]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9fee2:	4798      	blx	r3
						break;
   9fee4:	e09f      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9fee6:	4b61      	ldr	r3, [pc, #388]	; (a006c <Cl_Rinse_Controller+0xd08>)
   9fee8:	781b      	ldrb	r3, [r3, #0]
   9feea:	2b01      	cmp	r3, #1
   9feec:	f000 8094 	beq.w	a0018 <Cl_Rinse_Controller+0xcb4>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9fef0:	2206      	movs	r2, #6
   9fef2:	495f      	ldr	r1, [pc, #380]	; (a0070 <Cl_Rinse_Controller+0xd0c>)
   9fef4:	2018      	movs	r0, #24
   9fef6:	4b52      	ldr	r3, [pc, #328]	; (a0040 <Cl_Rinse_Controller+0xcdc>)
   9fef8:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9fefa:	2100      	movs	r1, #0
   9fefc:	2005      	movs	r0, #5
   9fefe:	4b5a      	ldr	r3, [pc, #360]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9ff00:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ff02:	4b58      	ldr	r3, [pc, #352]	; (a0064 <Cl_Rinse_Controller+0xd00>)
   9ff04:	2200      	movs	r2, #0
   9ff06:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9ff08:	e086      	b.n	a0018 <Cl_Rinse_Controller+0xcb4>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   9ff0a:	2206      	movs	r2, #6
   9ff0c:	4959      	ldr	r1, [pc, #356]	; (a0074 <Cl_Rinse_Controller+0xd10>)
   9ff0e:	2018      	movs	r0, #24
   9ff10:	4b4b      	ldr	r3, [pc, #300]	; (a0040 <Cl_Rinse_Controller+0xcdc>)
   9ff12:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   9ff14:	2100      	movs	r1, #0
   9ff16:	2006      	movs	r0, #6
   9ff18:	4b53      	ldr	r3, [pc, #332]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9ff1a:	4798      	blx	r3

						
						break;
   9ff1c:	e083      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   9ff1e:	2100      	movs	r1, #0
   9ff20:	2002      	movs	r0, #2
   9ff22:	4b55      	ldr	r3, [pc, #340]	; (a0078 <Cl_Rinse_Controller+0xd14>)
   9ff24:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   9ff26:	4b4f      	ldr	r3, [pc, #316]	; (a0064 <Cl_Rinse_Controller+0xd00>)
   9ff28:	2201      	movs	r2, #1
   9ff2a:	709a      	strb	r2, [r3, #2]
						break;
   9ff2c:	e07b      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   9ff2e:	2100      	movs	r1, #0
   9ff30:	2004      	movs	r0, #4
   9ff32:	4b51      	ldr	r3, [pc, #324]	; (a0078 <Cl_Rinse_Controller+0xd14>)
   9ff34:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   9ff36:	4b4b      	ldr	r3, [pc, #300]	; (a0064 <Cl_Rinse_Controller+0xd00>)
   9ff38:	2200      	movs	r2, #0
   9ff3a:	709a      	strb	r2, [r3, #2]
						break;
   9ff3c:	e073      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9ff3e:	4b3b      	ldr	r3, [pc, #236]	; (a002c <Cl_Rinse_Controller+0xcc8>)
   9ff40:	781b      	ldrb	r3, [r3, #0]
   9ff42:	2b09      	cmp	r3, #9
   9ff44:	d06b      	beq.n	a001e <Cl_Rinse_Controller+0xcba>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   9ff46:	2100      	movs	r1, #0
   9ff48:	200c      	movs	r0, #12
   9ff4a:	4b3a      	ldr	r3, [pc, #232]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff4c:	4798      	blx	r3
   9ff4e:	4603      	mov	r3, r0
   9ff50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   9ff54:	2100      	movs	r1, #0
   9ff56:	200d      	movs	r0, #13
   9ff58:	4b36      	ldr	r3, [pc, #216]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff5a:	4798      	blx	r3
   9ff5c:	4603      	mov	r3, r0
   9ff5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   9ff62:	2100      	movs	r1, #0
   9ff64:	200e      	movs	r0, #14
   9ff66:	4b33      	ldr	r3, [pc, #204]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff68:	4798      	blx	r3
   9ff6a:	4603      	mov	r3, r0
   9ff6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   9ff70:	2100      	movs	r1, #0
   9ff72:	2029      	movs	r0, #41	; 0x29
   9ff74:	4b2f      	ldr	r3, [pc, #188]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff76:	4798      	blx	r3
   9ff78:	4603      	mov	r3, r0
   9ff7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   9ff7e:	2100      	movs	r1, #0
   9ff80:	202b      	movs	r0, #43	; 0x2b
   9ff82:	4b2c      	ldr	r3, [pc, #176]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff84:	4798      	blx	r3
   9ff86:	4603      	mov	r3, r0
   9ff88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9ff8c:	2100      	movs	r1, #0
   9ff8e:	2003      	movs	r0, #3
   9ff90:	4b28      	ldr	r3, [pc, #160]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ff92:	4798      	blx	r3
   9ff94:	4603      	mov	r3, r0
   9ff96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9ff9a:	2100      	movs	r1, #0
   9ff9c:	2004      	movs	r0, #4
   9ff9e:	4b25      	ldr	r3, [pc, #148]	; (a0034 <Cl_Rinse_Controller+0xcd0>)
   9ffa0:	4798      	blx	r3
   9ffa2:	4603      	mov	r3, r0
   9ffa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9ffa8:	4b20      	ldr	r3, [pc, #128]	; (a002c <Cl_Rinse_Controller+0xcc8>)
   9ffaa:	2209      	movs	r2, #9
   9ffac:	701a      	strb	r2, [r3, #0]
						}
						break;
   9ffae:	e036      	b.n	a001e <Cl_Rinse_Controller+0xcba>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   9ffb0:	2100      	movs	r1, #0
   9ffb2:	200c      	movs	r0, #12
   9ffb4:	4b2c      	ldr	r3, [pc, #176]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9ffb6:	4798      	blx	r3
						break;
   9ffb8:	e035      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   9ffba:	2100      	movs	r1, #0
   9ffbc:	200d      	movs	r0, #13
   9ffbe:	4b2a      	ldr	r3, [pc, #168]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9ffc0:	4798      	blx	r3
						break;
   9ffc2:	e030      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   9ffc4:	4b2d      	ldr	r3, [pc, #180]	; (a007c <Cl_Rinse_Controller+0xd18>)
   9ffc6:	7e1b      	ldrb	r3, [r3, #24]
   9ffc8:	2b00      	cmp	r3, #0
   9ffca:	d02b      	beq.n	a0024 <Cl_Rinse_Controller+0xcc0>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9ffcc:	4b2b      	ldr	r3, [pc, #172]	; (a007c <Cl_Rinse_Controller+0xd18>)
   9ffce:	791b      	ldrb	r3, [r3, #4]
   9ffd0:	753b      	strb	r3, [r7, #20]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9ffd2:	4b2a      	ldr	r3, [pc, #168]	; (a007c <Cl_Rinse_Controller+0xd18>)
   9ffd4:	791b      	ldrb	r3, [r3, #4]
   9ffd6:	757b      	strb	r3, [r7, #21]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9ffd8:	4b28      	ldr	r3, [pc, #160]	; (a007c <Cl_Rinse_Controller+0xd18>)
   9ffda:	791b      	ldrb	r3, [r3, #4]
   9ffdc:	75bb      	strb	r3, [r7, #22]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9ffde:	4b27      	ldr	r3, [pc, #156]	; (a007c <Cl_Rinse_Controller+0xd18>)
   9ffe0:	791b      	ldrb	r3, [r3, #4]
   9ffe2:	75fb      	strb	r3, [r7, #23]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9ffe4:	8abb      	ldrh	r3, [r7, #20]
   9ffe6:	b21b      	sxth	r3, r3
   9ffe8:	4619      	mov	r1, r3
   9ffea:	200e      	movs	r0, #14
   9ffec:	4b1e      	ldr	r3, [pc, #120]	; (a0068 <Cl_Rinse_Controller+0xd04>)
   9ffee:	4798      	blx	r3
						}
						break;
   9fff0:	e018      	b.n	a0024 <Cl_Rinse_Controller+0xcc0>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   9fff2:	4b23      	ldr	r3, [pc, #140]	; (a0080 <Cl_Rinse_Controller+0xd1c>)
   9fff4:	2202      	movs	r2, #2
   9fff6:	701a      	strb	r2, [r3, #0]
						break;
   9fff8:	e015      	b.n	a0026 <Cl_Rinse_Controller+0xcc2>

									default:break;
								}
							}
						
						break;
   9fffa:	bf00      	nop
   9fffc:	f000 bc48 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
															
										default:
										break;
									}
								}
						break;
   a0000:	bf00      	nop
   a0002:	f000 bc45 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
										cl_50ms_timer =0;
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   a0006:	bf00      	nop
   a0008:	f000 bc42 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a000c:	bf00      	nop
   a000e:	f000 bc3f 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
										cl_tdata.bytearray[2] = 11;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a0012:	bf00      	nop
   a0014:	f000 bc3c 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   a0018:	bf00      	nop
   a001a:	f000 bc39 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
						}
						break;
   a001e:	bf00      	nop
   a0020:	f000 bc36 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
						break;
   a0024:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a0026:	f000 bc33 	b.w	a0890 <Cl_Rinse_Controller+0x152c>
   a002a:	bf00      	nop
   a002c:	2007285e 	.word	0x2007285e
   a0030:	0008a479 	.word	0x0008a479
   a0034:	00082f5d 	.word	0x00082f5d
   a0038:	0008d61d 	.word	0x0008d61d
   a003c:	cccccccd 	.word	0xcccccccd
   a0040:	0009926d 	.word	0x0009926d
   a0044:	20072868 	.word	0x20072868
   a0048:	20072874 	.word	0x20072874
   a004c:	000a1a51 	.word	0x000a1a51
   a0050:	000a0e35 	.word	0x000a0e35
   a0054:	00083095 	.word	0x00083095
   a0058:	2007287e 	.word	0x2007287e
   a005c:	20072858 	.word	0x20072858
   a0060:	000886f5 	.word	0x000886f5
   a0064:	20070bac 	.word	0x20070bac
   a0068:	00087c95 	.word	0x00087c95
   a006c:	2007212c 	.word	0x2007212c
   a0070:	000a5944 	.word	0x000a5944
   a0074:	000a594c 	.word	0x000a594c
   a0078:	00091a75 	.word	0x00091a75
   a007c:	20072f88 	.word	0x20072f88
   a0080:	2007285f 	.word	0x2007285f
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a0084:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   a0088:	3b01      	subs	r3, #1
   a008a:	2b1d      	cmp	r3, #29
   a008c:	f200 815f 	bhi.w	a034e <Cl_Rinse_Controller+0xfea>
   a0090:	a201      	add	r2, pc, #4	; (adr r2, a0098 <Cl_Rinse_Controller+0xd34>)
   a0092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0096:	bf00      	nop
   a0098:	000a02b7 	.word	0x000a02b7
   a009c:	000a0111 	.word	0x000a0111
   a00a0:	000a034f 	.word	0x000a034f
   a00a4:	000a0161 	.word	0x000a0161
   a00a8:	000a0173 	.word	0x000a0173
   a00ac:	000a0185 	.word	0x000a0185
   a00b0:	000a034f 	.word	0x000a034f
   a00b4:	000a034f 	.word	0x000a034f
   a00b8:	000a034f 	.word	0x000a034f
   a00bc:	000a034f 	.word	0x000a034f
   a00c0:	000a034f 	.word	0x000a034f
   a00c4:	000a034f 	.word	0x000a034f
   a00c8:	000a034f 	.word	0x000a034f
   a00cc:	000a034f 	.word	0x000a034f
   a00d0:	000a034f 	.word	0x000a034f
   a00d4:	000a034f 	.word	0x000a034f
   a00d8:	000a034f 	.word	0x000a034f
   a00dc:	000a0221 	.word	0x000a0221
   a00e0:	000a034f 	.word	0x000a034f
   a00e4:	000a034f 	.word	0x000a034f
   a00e8:	000a034f 	.word	0x000a034f
   a00ec:	000a0215 	.word	0x000a0215
   a00f0:	000a018b 	.word	0x000a018b
   a00f4:	000a034f 	.word	0x000a034f
   a00f8:	000a034f 	.word	0x000a034f
   a00fc:	000a034f 	.word	0x000a034f
   a0100:	000a034f 	.word	0x000a034f
   a0104:	000a034f 	.word	0x000a034f
   a0108:	000a034f 	.word	0x000a034f
   a010c:	000a0321 	.word	0x000a0321
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a0110:	4bb8      	ldr	r3, [pc, #736]	; (a03f4 <Cl_Rinse_Controller+0x1090>)
   a0112:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a0114:	2308      	movs	r3, #8
   a0116:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a011a:	2301      	movs	r3, #1
   a011c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a0120:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a0124:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0128:	2201      	movs	r2, #1
   a012a:	4618      	mov	r0, r3
   a012c:	4bb2      	ldr	r3, [pc, #712]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a012e:	4798      	blx	r3
   a0130:	4603      	mov	r3, r0
   a0132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					command = CON_TX_COMMAND_RINSE_STARTED;
   a0136:	2309      	movs	r3, #9
   a0138:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a013c:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a0140:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0144:	2200      	movs	r2, #0
   a0146:	4618      	mov	r0, r3
   a0148:	4bab      	ldr	r3, [pc, #684]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a014a:	4798      	blx	r3
   a014c:	4603      	mov	r3, r0
   a014e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a0152:	4baa      	ldr	r3, [pc, #680]	; (a03fc <Cl_Rinse_Controller+0x1098>)
   a0154:	2203      	movs	r2, #3
   a0156:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0158:	4ba9      	ldr	r3, [pc, #676]	; (a0400 <Cl_Rinse_Controller+0x109c>)
   a015a:	2201      	movs	r2, #1
   a015c:	701a      	strb	r2, [r3, #0]
					break;
   a015e:	e0fb      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a0160:	4ba4      	ldr	r3, [pc, #656]	; (a03f4 <Cl_Rinse_Controller+0x1090>)
   a0162:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a0164:	4ba5      	ldr	r3, [pc, #660]	; (a03fc <Cl_Rinse_Controller+0x1098>)
   a0166:	2204      	movs	r2, #4
   a0168:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a016a:	4ba5      	ldr	r3, [pc, #660]	; (a0400 <Cl_Rinse_Controller+0x109c>)
   a016c:	2201      	movs	r2, #1
   a016e:	701a      	strb	r2, [r3, #0]
					break;
   a0170:	e0f2      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a0172:	4ba0      	ldr	r3, [pc, #640]	; (a03f4 <Cl_Rinse_Controller+0x1090>)
   a0174:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a0176:	4ba1      	ldr	r3, [pc, #644]	; (a03fc <Cl_Rinse_Controller+0x1098>)
   a0178:	2205      	movs	r2, #5
   a017a:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a017c:	4ba0      	ldr	r3, [pc, #640]	; (a0400 <Cl_Rinse_Controller+0x109c>)
   a017e:	2201      	movs	r2, #1
   a0180:	701a      	strb	r2, [r3, #0]
					break;
   a0182:	e0e9      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a0184:	4b9f      	ldr	r3, [pc, #636]	; (a0404 <Cl_Rinse_Controller+0x10a0>)
   a0186:	4798      	blx	r3
					break;
   a0188:	e0e6      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a018a:	4b9f      	ldr	r3, [pc, #636]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a018c:	7e1b      	ldrb	r3, [r3, #24]
   a018e:	2b00      	cmp	r3, #0
   a0190:	f000 80df 	beq.w	a0352 <Cl_Rinse_Controller+0xfee>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a0194:	4b9c      	ldr	r3, [pc, #624]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a0196:	791b      	ldrb	r3, [r3, #4]
   a0198:	2b01      	cmp	r3, #1
   a019a:	d002      	beq.n	a01a2 <Cl_Rinse_Controller+0xe3e>
   a019c:	2b21      	cmp	r3, #33	; 0x21
   a019e:	d01c      	beq.n	a01da <Cl_Rinse_Controller+0xe76>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   a01a0:	e037      	b.n	a0212 <Cl_Rinse_Controller+0xeae>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a01a2:	2316      	movs	r3, #22
   a01a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a01a8:	2301      	movs	r3, #1
   a01aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a01ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a01b2:	3301      	adds	r3, #1
   a01b4:	4619      	mov	r1, r3
   a01b6:	2001      	movs	r0, #1
   a01b8:	4b94      	ldr	r3, [pc, #592]	; (a040c <Cl_Rinse_Controller+0x10a8>)
   a01ba:	4798      	blx	r3
   a01bc:	4603      	mov	r3, r0
   a01be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a01c2:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a01c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a01ca:	2202      	movs	r2, #2
   a01cc:	4618      	mov	r0, r3
   a01ce:	4b8a      	ldr	r3, [pc, #552]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a01d0:	4798      	blx	r3
   a01d2:	4603      	mov	r3, r0
   a01d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						
							break;
   a01d8:	e01b      	b.n	a0212 <Cl_Rinse_Controller+0xeae>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a01da:	2316      	movs	r3, #22
   a01dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a01e0:	2323      	movs	r3, #35	; 0x23
   a01e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a01e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a01ea:	3301      	adds	r3, #1
   a01ec:	4619      	mov	r1, r3
   a01ee:	2028      	movs	r0, #40	; 0x28
   a01f0:	4b86      	ldr	r3, [pc, #536]	; (a040c <Cl_Rinse_Controller+0x10a8>)
   a01f2:	4798      	blx	r3
   a01f4:	4603      	mov	r3, r0
   a01f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a01fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a01fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0202:	2202      	movs	r2, #2
   a0204:	4618      	mov	r0, r3
   a0206:	4b7c      	ldr	r3, [pc, #496]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a0208:	4798      	blx	r3
   a020a:	4603      	mov	r3, r0
   a020c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a0210:	bf00      	nop
							default:
							break;
						}
					}
					break;
   a0212:	e09e      	b.n	a0352 <Cl_Rinse_Controller+0xfee>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a0214:	4b7e      	ldr	r3, [pc, #504]	; (a0410 <Cl_Rinse_Controller+0x10ac>)
   a0216:	4798      	blx	r3
   a0218:	4603      	mov	r3, r0
   a021a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
   a021e:	e09b      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0220:	4b7c      	ldr	r3, [pc, #496]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a0222:	2200      	movs	r2, #0
   a0224:	801a      	strh	r2, [r3, #0]
   a0226:	e041      	b.n	a02ac <Cl_Rinse_Controller+0xf48>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a0228:	4b7a      	ldr	r3, [pc, #488]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a022a:	881b      	ldrh	r3, [r3, #0]
   a022c:	461a      	mov	r2, r3
   a022e:	4b7a      	ldr	r3, [pc, #488]	; (a0418 <Cl_Rinse_Controller+0x10b4>)
   a0230:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
   a0234:	4b77      	ldr	r3, [pc, #476]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a0236:	881b      	ldrh	r3, [r3, #0]
   a0238:	00db      	lsls	r3, r3, #3
   a023a:	4a77      	ldr	r2, [pc, #476]	; (a0418 <Cl_Rinse_Controller+0x10b4>)
   a023c:	4413      	add	r3, r2
   a023e:	3302      	adds	r3, #2
   a0240:	4619      	mov	r1, r3
   a0242:	4b76      	ldr	r3, [pc, #472]	; (a041c <Cl_Rinse_Controller+0x10b8>)
   a0244:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a0246:	4b73      	ldr	r3, [pc, #460]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a0248:	881b      	ldrh	r3, [r3, #0]
   a024a:	4a73      	ldr	r2, [pc, #460]	; (a0418 <Cl_Rinse_Controller+0x10b4>)
   a024c:	00db      	lsls	r3, r3, #3
   a024e:	4413      	add	r3, r2
   a0250:	789b      	ldrb	r3, [r3, #2]
   a0252:	2b00      	cmp	r3, #0
   a0254:	d00e      	beq.n	a0274 <Cl_Rinse_Controller+0xf10>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a0256:	2208      	movs	r2, #8
   a0258:	4971      	ldr	r1, [pc, #452]	; (a0420 <Cl_Rinse_Controller+0x10bc>)
   a025a:	2018      	movs	r0, #24
   a025c:	4b66      	ldr	r3, [pc, #408]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a025e:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a0260:	4b68      	ldr	r3, [pc, #416]	; (a0404 <Cl_Rinse_Controller+0x10a0>)
   a0262:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a0264:	4b65      	ldr	r3, [pc, #404]	; (a03fc <Cl_Rinse_Controller+0x1098>)
   a0266:	2206      	movs	r2, #6
   a0268:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a026a:	4b6a      	ldr	r3, [pc, #424]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a026c:	2200      	movs	r2, #0
   a026e:	801a      	strh	r2, [r3, #0]
										break;	
   a0270:	bf00      	nop
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a0272:	e071      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
										Cl_Rinse_StopRinse();
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a0274:	4b67      	ldr	r3, [pc, #412]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a0276:	881b      	ldrh	r3, [r3, #0]
   a0278:	2b18      	cmp	r3, #24
   a027a:	d111      	bne.n	a02a0 <Cl_Rinse_Controller+0xf3c>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a027c:	4b65      	ldr	r3, [pc, #404]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a027e:	881b      	ldrh	r3, [r3, #0]
   a0280:	4a65      	ldr	r2, [pc, #404]	; (a0418 <Cl_Rinse_Controller+0x10b4>)
   a0282:	00db      	lsls	r3, r3, #3
   a0284:	4413      	add	r3, r2
   a0286:	789b      	ldrb	r3, [r3, #2]
   a0288:	f083 0301 	eor.w	r3, r3, #1
   a028c:	b2db      	uxtb	r3, r3
   a028e:	2b00      	cmp	r3, #0
   a0290:	d006      	beq.n	a02a0 <Cl_Rinse_Controller+0xf3c>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a0292:	2208      	movs	r2, #8
   a0294:	4963      	ldr	r1, [pc, #396]	; (a0424 <Cl_Rinse_Controller+0x10c0>)
   a0296:	2018      	movs	r0, #24
   a0298:	4b57      	ldr	r3, [pc, #348]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a029a:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a029c:	4b62      	ldr	r3, [pc, #392]	; (a0428 <Cl_Rinse_Controller+0x10c4>)
   a029e:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a02a0:	4b5c      	ldr	r3, [pc, #368]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a02a2:	881b      	ldrh	r3, [r3, #0]
   a02a4:	3301      	adds	r3, #1
   a02a6:	b29a      	uxth	r2, r3
   a02a8:	4b5a      	ldr	r3, [pc, #360]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a02aa:	801a      	strh	r2, [r3, #0]
   a02ac:	4b59      	ldr	r3, [pc, #356]	; (a0414 <Cl_Rinse_Controller+0x10b0>)
   a02ae:	881b      	ldrh	r3, [r3, #0]
   a02b0:	2b18      	cmp	r3, #24
   a02b2:	d9b9      	bls.n	a0228 <Cl_Rinse_Controller+0xec4>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a02b4:	e050      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVENT_RINSE_CLR_ALARM:
										sv_cntrl_resetyellowalarm();
   a02b6:	4b5d      	ldr	r3, [pc, #372]	; (a042c <Cl_Rinse_Controller+0x10c8>)
   a02b8:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a02ba:	4b5d      	ldr	r3, [pc, #372]	; (a0430 <Cl_Rinse_Controller+0x10cc>)
   a02bc:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a02be:	4b5d      	ldr	r3, [pc, #372]	; (a0434 <Cl_Rinse_Controller+0x10d0>)
   a02c0:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a02c2:	4b59      	ldr	r3, [pc, #356]	; (a0428 <Cl_Rinse_Controller+0x10c4>)
   a02c4:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   a02c6:	4b4b      	ldr	r3, [pc, #300]	; (a03f4 <Cl_Rinse_Controller+0x1090>)
   a02c8:	4798      	blx	r3
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a02ca:	2308      	movs	r3, #8
   a02cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a02d0:	2301      	movs	r3, #1
   a02d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a02d6:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a02da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a02de:	2201      	movs	r2, #1
   a02e0:	4618      	mov	r0, r3
   a02e2:	4b45      	ldr	r3, [pc, #276]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a02e4:	4798      	blx	r3
   a02e6:	4603      	mov	r3, r0
   a02e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							command = CON_TX_COMMAND_RINSE_STARTED;
   a02ec:	2309      	movs	r3, #9
   a02ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a02f2:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a02f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a02fa:	2200      	movs	r2, #0
   a02fc:	4618      	mov	r0, r3
   a02fe:	4b3e      	ldr	r3, [pc, #248]	; (a03f8 <Cl_Rinse_Controller+0x1094>)
   a0300:	4798      	blx	r3
   a0302:	4603      	mov	r3, r0
   a0304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a0308:	4b4b      	ldr	r3, [pc, #300]	; (a0438 <Cl_Rinse_Controller+0x10d4>)
   a030a:	4798      	blx	r3
   a030c:	4603      	mov	r3, r0
   a030e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a0312:	4b3a      	ldr	r3, [pc, #232]	; (a03fc <Cl_Rinse_Controller+0x1098>)
   a0314:	2203      	movs	r2, #3
   a0316:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a0318:	4b39      	ldr	r3, [pc, #228]	; (a0400 <Cl_Rinse_Controller+0x109c>)
   a031a:	2201      	movs	r2, #1
   a031c:	701a      	strb	r2, [r3, #0]
						
						
						//alarm_flag = 1;
						break;
   a031e:	e01b      	b.n	a0358 <Cl_Rinse_Controller+0xff4>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a0320:	4b39      	ldr	r3, [pc, #228]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a0322:	7e1b      	ldrb	r3, [r3, #24]
   a0324:	2b00      	cmp	r3, #0
   a0326:	d016      	beq.n	a0356 <Cl_Rinse_Controller+0xff2>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0328:	4b37      	ldr	r3, [pc, #220]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a032a:	791b      	ldrb	r3, [r3, #4]
   a032c:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a032e:	4b36      	ldr	r3, [pc, #216]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a0330:	791b      	ldrb	r3, [r3, #4]
   a0332:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0334:	4b34      	ldr	r3, [pc, #208]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a0336:	791b      	ldrb	r3, [r3, #4]
   a0338:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a033a:	4b33      	ldr	r3, [pc, #204]	; (a0408 <Cl_Rinse_Controller+0x10a4>)
   a033c:	791b      	ldrb	r3, [r3, #4]
   a033e:	74fb      	strb	r3, [r7, #19]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a0340:	8a3b      	ldrh	r3, [r7, #16]
   a0342:	b21b      	sxth	r3, r3
   a0344:	4619      	mov	r1, r3
   a0346:	200e      	movs	r0, #14
   a0348:	4b3c      	ldr	r3, [pc, #240]	; (a043c <Cl_Rinse_Controller+0x10d8>)
   a034a:	4798      	blx	r3
						}
					break;
   a034c:	e003      	b.n	a0356 <Cl_Rinse_Controller+0xff2>
					default:break;
   a034e:	bf00      	nop
   a0350:	e29f      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
							break;
							default:
							break;
						}
					}
					break;
   a0352:	bf00      	nop
   a0354:	e29d      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
					break;
   a0356:	bf00      	nop
					default:break;
				}
		break;
   a0358:	e29b      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a035a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   a035e:	3b02      	subs	r3, #2
   a0360:	2b1e      	cmp	r3, #30
   a0362:	f200 81e3 	bhi.w	a072c <Cl_Rinse_Controller+0x13c8>
   a0366:	a201      	add	r2, pc, #4	; (adr r2, a036c <Cl_Rinse_Controller+0x1008>)
   a0368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a036c:	000a0441 	.word	0x000a0441
   a0370:	000a072d 	.word	0x000a072d
   a0374:	000a04bb 	.word	0x000a04bb
   a0378:	000a04d7 	.word	0x000a04d7
   a037c:	000a072d 	.word	0x000a072d
   a0380:	000a072d 	.word	0x000a072d
   a0384:	000a072d 	.word	0x000a072d
   a0388:	000a072d 	.word	0x000a072d
   a038c:	000a072d 	.word	0x000a072d
   a0390:	000a072d 	.word	0x000a072d
   a0394:	000a072d 	.word	0x000a072d
   a0398:	000a072d 	.word	0x000a072d
   a039c:	000a072d 	.word	0x000a072d
   a03a0:	000a072d 	.word	0x000a072d
   a03a4:	000a072d 	.word	0x000a072d
   a03a8:	000a072d 	.word	0x000a072d
   a03ac:	000a072d 	.word	0x000a072d
   a03b0:	000a072d 	.word	0x000a072d
   a03b4:	000a072d 	.word	0x000a072d
   a03b8:	000a072d 	.word	0x000a072d
   a03bc:	000a03e9 	.word	0x000a03e9
   a03c0:	000a04f3 	.word	0x000a04f3
   a03c4:	000a072d 	.word	0x000a072d
   a03c8:	000a06fb 	.word	0x000a06fb
   a03cc:	000a0695 	.word	0x000a0695
   a03d0:	000a06bb 	.word	0x000a06bb
   a03d4:	000a072d 	.word	0x000a072d
   a03d8:	000a072d 	.word	0x000a072d
   a03dc:	000a06ff 	.word	0x000a06ff
   a03e0:	000a06c5 	.word	0x000a06c5
   a03e4:	000a06e7 	.word	0x000a06e7
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a03e8:	4b09      	ldr	r3, [pc, #36]	; (a0410 <Cl_Rinse_Controller+0x10ac>)
   a03ea:	4798      	blx	r3
   a03ec:	4603      	mov	r3, r0
   a03ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
   a03f2:	e1a4      	b.n	a073e <Cl_Rinse_Controller+0x13da>
   a03f4:	000a16c5 	.word	0x000a16c5
   a03f8:	0009926d 	.word	0x0009926d
   a03fc:	2007285e 	.word	0x2007285e
   a0400:	2007285f 	.word	0x2007285f
   a0404:	000a1a51 	.word	0x000a1a51
   a0408:	20072f88 	.word	0x20072f88
   a040c:	00097d7d 	.word	0x00097d7d
   a0410:	000a0e35 	.word	0x000a0e35
   a0414:	2007334c 	.word	0x2007334c
   a0418:	20070bac 	.word	0x20070bac
   a041c:	00083095 	.word	0x00083095
   a0420:	000a5958 	.word	0x000a5958
   a0424:	000a5960 	.word	0x000a5960
   a0428:	000a0e5d 	.word	0x000a0e5d
   a042c:	000977ad 	.word	0x000977ad
   a0430:	00097799 	.word	0x00097799
   a0434:	000977d5 	.word	0x000977d5
   a0438:	000a0be9 	.word	0x000a0be9
   a043c:	00087c95 	.word	0x00087c95
					
					case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a0440:	4bbf      	ldr	r3, [pc, #764]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a0442:	7e1b      	ldrb	r3, [r3, #24]
   a0444:	2b00      	cmp	r3, #0
   a0446:	d00b      	beq.n	a0460 <Cl_Rinse_Controller+0x10fc>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0448:	4bbd      	ldr	r3, [pc, #756]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a044a:	791b      	ldrb	r3, [r3, #4]
   a044c:	733b      	strb	r3, [r7, #12]
					if (cl_temp.bytearray[0] == 1)
   a044e:	7b3b      	ldrb	r3, [r7, #12]
   a0450:	2b01      	cmp	r3, #1
   a0452:	d005      	beq.n	a0460 <Cl_Rinse_Controller+0x10fc>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a0454:	7b3b      	ldrb	r3, [r7, #12]
   a0456:	2b02      	cmp	r3, #2
   a0458:	d102      	bne.n	a0460 <Cl_Rinse_Controller+0x10fc>
					{
						hotrinse_flag = 1;
   a045a:	4bba      	ldr	r3, [pc, #744]	; (a0744 <Cl_Rinse_Controller+0x13e0>)
   a045c:	2201      	movs	r2, #1
   a045e:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a0460:	4bb9      	ldr	r3, [pc, #740]	; (a0748 <Cl_Rinse_Controller+0x13e4>)
   a0462:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a0464:	2308      	movs	r3, #8
   a0466:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a046a:	2301      	movs	r3, #1
   a046c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a0470:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a0474:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0478:	2201      	movs	r2, #1
   a047a:	4618      	mov	r0, r3
   a047c:	4bb3      	ldr	r3, [pc, #716]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a047e:	4798      	blx	r3
   a0480:	4603      	mov	r3, r0
   a0482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					command = CON_TX_COMMAND_RINSE_STARTED;
   a0486:	2309      	movs	r3, #9
   a0488:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a048c:	f107 0133 	add.w	r1, r7, #51	; 0x33
   a0490:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0494:	2200      	movs	r2, #0
   a0496:	4618      	mov	r0, r3
   a0498:	4bac      	ldr	r3, [pc, #688]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a049a:	4798      	blx	r3
   a049c:	4603      	mov	r3, r0
   a049e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a04a2:	4bab      	ldr	r3, [pc, #684]	; (a0750 <Cl_Rinse_Controller+0x13ec>)
   a04a4:	4798      	blx	r3
   a04a6:	4603      	mov	r3, r0
   a04a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a04ac:	4ba9      	ldr	r3, [pc, #676]	; (a0754 <Cl_Rinse_Controller+0x13f0>)
   a04ae:	2203      	movs	r2, #3
   a04b0:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a04b2:	4ba9      	ldr	r3, [pc, #676]	; (a0758 <Cl_Rinse_Controller+0x13f4>)
   a04b4:	2201      	movs	r2, #1
   a04b6:	701a      	strb	r2, [r3, #0]
					break;
   a04b8:	e141      	b.n	a073e <Cl_Rinse_Controller+0x13da>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a04ba:	4ba3      	ldr	r3, [pc, #652]	; (a0748 <Cl_Rinse_Controller+0x13e4>)
   a04bc:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a04be:	4ba4      	ldr	r3, [pc, #656]	; (a0750 <Cl_Rinse_Controller+0x13ec>)
   a04c0:	4798      	blx	r3
   a04c2:	4603      	mov	r3, r0
   a04c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a04c8:	4ba2      	ldr	r3, [pc, #648]	; (a0754 <Cl_Rinse_Controller+0x13f0>)
   a04ca:	2204      	movs	r2, #4
   a04cc:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a04ce:	4ba2      	ldr	r3, [pc, #648]	; (a0758 <Cl_Rinse_Controller+0x13f4>)
   a04d0:	2201      	movs	r2, #1
   a04d2:	701a      	strb	r2, [r3, #0]
					break;
   a04d4:	e133      	b.n	a073e <Cl_Rinse_Controller+0x13da>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a04d6:	4b9c      	ldr	r3, [pc, #624]	; (a0748 <Cl_Rinse_Controller+0x13e4>)
   a04d8:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a04da:	4b9d      	ldr	r3, [pc, #628]	; (a0750 <Cl_Rinse_Controller+0x13ec>)
   a04dc:	4798      	blx	r3
   a04de:	4603      	mov	r3, r0
   a04e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a04e4:	4b9b      	ldr	r3, [pc, #620]	; (a0754 <Cl_Rinse_Controller+0x13f0>)
   a04e6:	2205      	movs	r2, #5
   a04e8:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a04ea:	4b9b      	ldr	r3, [pc, #620]	; (a0758 <Cl_Rinse_Controller+0x13f4>)
   a04ec:	2201      	movs	r2, #1
   a04ee:	701a      	strb	r2, [r3, #0]
					break;
   a04f0:	e125      	b.n	a073e <Cl_Rinse_Controller+0x13da>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a04f2:	4b93      	ldr	r3, [pc, #588]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a04f4:	7e1b      	ldrb	r3, [r3, #24]
   a04f6:	2b00      	cmp	r3, #0
   a04f8:	f000 811a 	beq.w	a0730 <Cl_Rinse_Controller+0x13cc>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a04fc:	4b90      	ldr	r3, [pc, #576]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a04fe:	791b      	ldrb	r3, [r3, #4]
   a0500:	3b01      	subs	r3, #1
   a0502:	2b20      	cmp	r3, #32
   a0504:	f200 80c4 	bhi.w	a0690 <Cl_Rinse_Controller+0x132c>
   a0508:	a201      	add	r2, pc, #4	; (adr r2, a0510 <Cl_Rinse_Controller+0x11ac>)
   a050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a050e:	bf00      	nop
   a0510:	000a0595 	.word	0x000a0595
   a0514:	000a05cd 	.word	0x000a05cd
   a0518:	000a0691 	.word	0x000a0691
   a051c:	000a0691 	.word	0x000a0691
   a0520:	000a0691 	.word	0x000a0691
   a0524:	000a0691 	.word	0x000a0691
   a0528:	000a0691 	.word	0x000a0691
   a052c:	000a0691 	.word	0x000a0691
   a0530:	000a0691 	.word	0x000a0691
   a0534:	000a0691 	.word	0x000a0691
   a0538:	000a0691 	.word	0x000a0691
   a053c:	000a0691 	.word	0x000a0691
   a0540:	000a0691 	.word	0x000a0691
   a0544:	000a0691 	.word	0x000a0691
   a0548:	000a0691 	.word	0x000a0691
   a054c:	000a0691 	.word	0x000a0691
   a0550:	000a0691 	.word	0x000a0691
   a0554:	000a0691 	.word	0x000a0691
   a0558:	000a0691 	.word	0x000a0691
   a055c:	000a0691 	.word	0x000a0691
   a0560:	000a0691 	.word	0x000a0691
   a0564:	000a0691 	.word	0x000a0691
   a0568:	000a0691 	.word	0x000a0691
   a056c:	000a0691 	.word	0x000a0691
   a0570:	000a0691 	.word	0x000a0691
   a0574:	000a0691 	.word	0x000a0691
   a0578:	000a0691 	.word	0x000a0691
   a057c:	000a0691 	.word	0x000a0691
   a0580:	000a0691 	.word	0x000a0691
   a0584:	000a0605 	.word	0x000a0605
   a0588:	000a0691 	.word	0x000a0691
   a058c:	000a062f 	.word	0x000a062f
   a0590:	000a0659 	.word	0x000a0659
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0594:	2316      	movs	r3, #22
   a0596:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a059a:	2301      	movs	r3, #1
   a059c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a05a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a05a4:	3301      	adds	r3, #1
   a05a6:	4619      	mov	r1, r3
   a05a8:	2001      	movs	r0, #1
   a05aa:	4b6c      	ldr	r3, [pc, #432]	; (a075c <Cl_Rinse_Controller+0x13f8>)
   a05ac:	4798      	blx	r3
   a05ae:	4603      	mov	r3, r0
   a05b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a05b4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a05b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a05bc:	2202      	movs	r2, #2
   a05be:	4618      	mov	r0, r3
   a05c0:	4b62      	ldr	r3, [pc, #392]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a05c2:	4798      	blx	r3
   a05c4:	4603      	mov	r3, r0
   a05c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a05ca:	e062      	b.n	a0692 <Cl_Rinse_Controller+0x132e>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a05cc:	2316      	movs	r3, #22
   a05ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a05d2:	2302      	movs	r3, #2
   a05d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a05d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a05dc:	3301      	adds	r3, #1
   a05de:	4619      	mov	r1, r3
   a05e0:	2002      	movs	r0, #2
   a05e2:	4b5e      	ldr	r3, [pc, #376]	; (a075c <Cl_Rinse_Controller+0x13f8>)
   a05e4:	4798      	blx	r3
   a05e6:	4603      	mov	r3, r0
   a05e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a05ec:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a05f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a05f4:	2202      	movs	r2, #2
   a05f6:	4618      	mov	r0, r3
   a05f8:	4b54      	ldr	r3, [pc, #336]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a05fa:	4798      	blx	r3
   a05fc:	4603      	mov	r3, r0
   a05fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a0602:	e046      	b.n	a0692 <Cl_Rinse_Controller+0x132e>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0604:	2316      	movs	r3, #22
   a0606:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   a060a:	2320      	movs	r3, #32
   a060c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a0610:	2300      	movs	r3, #0
   a0612:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0616:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a061a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a061e:	2202      	movs	r2, #2
   a0620:	4618      	mov	r0, r3
   a0622:	4b4a      	ldr	r3, [pc, #296]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a0624:	4798      	blx	r3
   a0626:	4603      	mov	r3, r0
   a0628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a062c:	e031      	b.n	a0692 <Cl_Rinse_Controller+0x132e>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a062e:	2316      	movs	r3, #22
   a0630:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a0634:	2321      	movs	r3, #33	; 0x21
   a0636:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a063a:	2300      	movs	r3, #0
   a063c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0640:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a0644:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0648:	2202      	movs	r2, #2
   a064a:	4618      	mov	r0, r3
   a064c:	4b3f      	ldr	r3, [pc, #252]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a064e:	4798      	blx	r3
   a0650:	4603      	mov	r3, r0
   a0652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a0656:	e01c      	b.n	a0692 <Cl_Rinse_Controller+0x132e>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a0658:	2316      	movs	r3, #22
   a065a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a065e:	2323      	movs	r3, #35	; 0x23
   a0660:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a0664:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a0668:	3301      	adds	r3, #1
   a066a:	4619      	mov	r1, r3
   a066c:	2028      	movs	r0, #40	; 0x28
   a066e:	4b3b      	ldr	r3, [pc, #236]	; (a075c <Cl_Rinse_Controller+0x13f8>)
   a0670:	4798      	blx	r3
   a0672:	4603      	mov	r3, r0
   a0674:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a0678:	f107 0134 	add.w	r1, r7, #52	; 0x34
   a067c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   a0680:	2202      	movs	r2, #2
   a0682:	4618      	mov	r0, r3
   a0684:	4b31      	ldr	r3, [pc, #196]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a0686:	4798      	blx	r3
   a0688:	4603      	mov	r3, r0
   a068a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							break;
   a068e:	e000      	b.n	a0692 <Cl_Rinse_Controller+0x132e>
							
							default:
							break;
   a0690:	bf00      	nop
						}
					}
					break;
   a0692:	e04d      	b.n	a0730 <Cl_Rinse_Controller+0x13cc>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a0694:	4b32      	ldr	r3, [pc, #200]	; (a0760 <Cl_Rinse_Controller+0x13fc>)
   a0696:	781b      	ldrb	r3, [r3, #0]
   a0698:	2b01      	cmp	r3, #1
   a069a:	d04b      	beq.n	a0734 <Cl_Rinse_Controller+0x13d0>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a069c:	2206      	movs	r2, #6
   a069e:	4931      	ldr	r1, [pc, #196]	; (a0764 <Cl_Rinse_Controller+0x1400>)
   a06a0:	2018      	movs	r0, #24
   a06a2:	4b2a      	ldr	r3, [pc, #168]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a06a4:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a06a6:	4b30      	ldr	r3, [pc, #192]	; (a0768 <Cl_Rinse_Controller+0x1404>)
   a06a8:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a06aa:	4b30      	ldr	r3, [pc, #192]	; (a076c <Cl_Rinse_Controller+0x1408>)
   a06ac:	2200      	movs	r2, #0
   a06ae:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a06b0:	2100      	movs	r1, #0
   a06b2:	2001      	movs	r0, #1
   a06b4:	4b2e      	ldr	r3, [pc, #184]	; (a0770 <Cl_Rinse_Controller+0x140c>)
   a06b6:	4798      	blx	r3
					}
						
					break;
   a06b8:	e03c      	b.n	a0734 <Cl_Rinse_Controller+0x13d0>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a06ba:	2100      	movs	r1, #0
   a06bc:	2002      	movs	r0, #2
   a06be:	4b2c      	ldr	r3, [pc, #176]	; (a0770 <Cl_Rinse_Controller+0x140c>)
   a06c0:	4798      	blx	r3
					break;
   a06c2:	e03c      	b.n	a073e <Cl_Rinse_Controller+0x13da>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a06c4:	4b26      	ldr	r3, [pc, #152]	; (a0760 <Cl_Rinse_Controller+0x13fc>)
   a06c6:	781b      	ldrb	r3, [r3, #0]
   a06c8:	2b01      	cmp	r3, #1
   a06ca:	d035      	beq.n	a0738 <Cl_Rinse_Controller+0x13d4>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a06cc:	2206      	movs	r2, #6
   a06ce:	4929      	ldr	r1, [pc, #164]	; (a0774 <Cl_Rinse_Controller+0x1410>)
   a06d0:	2018      	movs	r0, #24
   a06d2:	4b1e      	ldr	r3, [pc, #120]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a06d4:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a06d6:	2100      	movs	r1, #0
   a06d8:	2005      	movs	r0, #5
   a06da:	4b25      	ldr	r3, [pc, #148]	; (a0770 <Cl_Rinse_Controller+0x140c>)
   a06dc:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a06de:	4b23      	ldr	r3, [pc, #140]	; (a076c <Cl_Rinse_Controller+0x1408>)
   a06e0:	2200      	movs	r2, #0
   a06e2:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a06e4:	e028      	b.n	a0738 <Cl_Rinse_Controller+0x13d4>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a06e6:	2206      	movs	r2, #6
   a06e8:	4923      	ldr	r1, [pc, #140]	; (a0778 <Cl_Rinse_Controller+0x1414>)
   a06ea:	2018      	movs	r0, #24
   a06ec:	4b17      	ldr	r3, [pc, #92]	; (a074c <Cl_Rinse_Controller+0x13e8>)
   a06ee:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a06f0:	2100      	movs	r1, #0
   a06f2:	2006      	movs	r0, #6
   a06f4:	4b1e      	ldr	r3, [pc, #120]	; (a0770 <Cl_Rinse_Controller+0x140c>)
   a06f6:	4798      	blx	r3

						
					break;
   a06f8:	e021      	b.n	a073e <Cl_Rinse_Controller+0x13da>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a06fa:	2300      	movs	r3, #0
   a06fc:	e0cb      	b.n	a0896 <Cl_Rinse_Controller+0x1532>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a06fe:	4b10      	ldr	r3, [pc, #64]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a0700:	7e1b      	ldrb	r3, [r3, #24]
   a0702:	2b00      	cmp	r3, #0
   a0704:	d01a      	beq.n	a073c <Cl_Rinse_Controller+0x13d8>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0706:	4b0e      	ldr	r3, [pc, #56]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a0708:	791b      	ldrb	r3, [r3, #4]
   a070a:	723b      	strb	r3, [r7, #8]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a070c:	4b0c      	ldr	r3, [pc, #48]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a070e:	791b      	ldrb	r3, [r3, #4]
   a0710:	727b      	strb	r3, [r7, #9]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0712:	4b0b      	ldr	r3, [pc, #44]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a0714:	791b      	ldrb	r3, [r3, #4]
   a0716:	72bb      	strb	r3, [r7, #10]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a0718:	4b09      	ldr	r3, [pc, #36]	; (a0740 <Cl_Rinse_Controller+0x13dc>)
   a071a:	791b      	ldrb	r3, [r3, #4]
   a071c:	72fb      	strb	r3, [r7, #11]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a071e:	893b      	ldrh	r3, [r7, #8]
   a0720:	b21b      	sxth	r3, r3
   a0722:	4619      	mov	r1, r3
   a0724:	200e      	movs	r0, #14
   a0726:	4b12      	ldr	r3, [pc, #72]	; (a0770 <Cl_Rinse_Controller+0x140c>)
   a0728:	4798      	blx	r3
					}
					break;
   a072a:	e007      	b.n	a073c <Cl_Rinse_Controller+0x13d8>
					default: 
					
					return(CL_REJECTED);
   a072c:	2303      	movs	r3, #3
   a072e:	e0b2      	b.n	a0896 <Cl_Rinse_Controller+0x1532>
							
							default:
							break;
						}
					}
					break;
   a0730:	bf00      	nop
   a0732:	e0ae      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
						cl_dprep_activate_prime_related_alarms();
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
					}
						
					break;
   a0734:	bf00      	nop
   a0736:	e0ac      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
					}
						
					break;
   a0738:	bf00      	nop
   a073a:	e0aa      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
					}
					break;
   a073c:	bf00      	nop
					
					return(CL_REJECTED);
					break;
				}
					
		break;
   a073e:	e0a8      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
   a0740:	20072f88 	.word	0x20072f88
   a0744:	20072881 	.word	0x20072881
   a0748:	000a16c5 	.word	0x000a16c5
   a074c:	0009926d 	.word	0x0009926d
   a0750:	000a0be9 	.word	0x000a0be9
   a0754:	2007285e 	.word	0x2007285e
   a0758:	2007285f 	.word	0x2007285f
   a075c:	00097d7d 	.word	0x00097d7d
   a0760:	2007212c 	.word	0x2007212c
   a0764:	000a5968 	.word	0x000a5968
   a0768:	000886f5 	.word	0x000886f5
   a076c:	20070bac 	.word	0x20070bac
   a0770:	00087c95 	.word	0x00087c95
   a0774:	000a5944 	.word	0x000a5944
   a0778:	000a594c 	.word	0x000a594c

	
	default:
			switch(cl_rinseevent)
   a077c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   a0780:	3b02      	subs	r3, #2
   a0782:	2b17      	cmp	r3, #23
   a0784:	d87c      	bhi.n	a0880 <Cl_Rinse_Controller+0x151c>
   a0786:	a201      	add	r2, pc, #4	; (adr r2, a078c <Cl_Rinse_Controller+0x1428>)
   a0788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a078c:	000a0881 	.word	0x000a0881
   a0790:	000a0881 	.word	0x000a0881
   a0794:	000a0881 	.word	0x000a0881
   a0798:	000a0881 	.word	0x000a0881
   a079c:	000a07ed 	.word	0x000a07ed
   a07a0:	000a0881 	.word	0x000a0881
   a07a4:	000a0881 	.word	0x000a0881
   a07a8:	000a0881 	.word	0x000a0881
   a07ac:	000a0881 	.word	0x000a0881
   a07b0:	000a0881 	.word	0x000a0881
   a07b4:	000a0881 	.word	0x000a0881
   a07b8:	000a0881 	.word	0x000a0881
   a07bc:	000a0871 	.word	0x000a0871
   a07c0:	000a0881 	.word	0x000a0881
   a07c4:	000a0881 	.word	0x000a0881
   a07c8:	000a0881 	.word	0x000a0881
   a07cc:	000a0881 	.word	0x000a0881
   a07d0:	000a0881 	.word	0x000a0881
   a07d4:	000a0881 	.word	0x000a0881
   a07d8:	000a0881 	.word	0x000a0881
   a07dc:	000a07f3 	.word	0x000a07f3
   a07e0:	000a0881 	.word	0x000a0881
   a07e4:	000a0881 	.word	0x000a0881
   a07e8:	000a07ff 	.word	0x000a07ff
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a07ec:	4b2c      	ldr	r3, [pc, #176]	; (a08a0 <Cl_Rinse_Controller+0x153c>)
   a07ee:	4798      	blx	r3
				break;
   a07f0:	e04b      	b.n	a088a <Cl_Rinse_Controller+0x1526>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a07f2:	4b2c      	ldr	r3, [pc, #176]	; (a08a4 <Cl_Rinse_Controller+0x1540>)
   a07f4:	4798      	blx	r3
   a07f6:	4603      	mov	r3, r0
   a07f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				
				break;
   a07fc:	e045      	b.n	a088a <Cl_Rinse_Controller+0x1526>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a07fe:	4b2a      	ldr	r3, [pc, #168]	; (a08a8 <Cl_Rinse_Controller+0x1544>)
   a0800:	781b      	ldrb	r3, [r3, #0]
   a0802:	2b09      	cmp	r3, #9
   a0804:	d03e      	beq.n	a0884 <Cl_Rinse_Controller+0x1520>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a0806:	2100      	movs	r1, #0
   a0808:	200c      	movs	r0, #12
   a080a:	4b28      	ldr	r3, [pc, #160]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a080c:	4798      	blx	r3
   a080e:	4603      	mov	r3, r0
   a0810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a0814:	2100      	movs	r1, #0
   a0816:	200d      	movs	r0, #13
   a0818:	4b24      	ldr	r3, [pc, #144]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a081a:	4798      	blx	r3
   a081c:	4603      	mov	r3, r0
   a081e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a0822:	2100      	movs	r1, #0
   a0824:	200e      	movs	r0, #14
   a0826:	4b21      	ldr	r3, [pc, #132]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a0828:	4798      	blx	r3
   a082a:	4603      	mov	r3, r0
   a082c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a0830:	2100      	movs	r1, #0
   a0832:	2029      	movs	r0, #41	; 0x29
   a0834:	4b1d      	ldr	r3, [pc, #116]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a0836:	4798      	blx	r3
   a0838:	4603      	mov	r3, r0
   a083a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a083e:	2100      	movs	r1, #0
   a0840:	202b      	movs	r0, #43	; 0x2b
   a0842:	4b1a      	ldr	r3, [pc, #104]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a0844:	4798      	blx	r3
   a0846:	4603      	mov	r3, r0
   a0848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a084c:	2100      	movs	r1, #0
   a084e:	2003      	movs	r0, #3
   a0850:	4b16      	ldr	r3, [pc, #88]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a0852:	4798      	blx	r3
   a0854:	4603      	mov	r3, r0
   a0856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a085a:	2100      	movs	r1, #0
   a085c:	2004      	movs	r0, #4
   a085e:	4b13      	ldr	r3, [pc, #76]	; (a08ac <Cl_Rinse_Controller+0x1548>)
   a0860:	4798      	blx	r3
   a0862:	4603      	mov	r3, r0
   a0864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a0868:	4b0f      	ldr	r3, [pc, #60]	; (a08a8 <Cl_Rinse_Controller+0x1544>)
   a086a:	2209      	movs	r2, #9
   a086c:	701a      	strb	r2, [r3, #0]
				}
				break;
   a086e:	e009      	b.n	a0884 <Cl_Rinse_Controller+0x1520>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a0870:	4b0d      	ldr	r3, [pc, #52]	; (a08a8 <Cl_Rinse_Controller+0x1544>)
   a0872:	781b      	ldrb	r3, [r3, #0]
   a0874:	2b09      	cmp	r3, #9
   a0876:	d007      	beq.n	a0888 <Cl_Rinse_Controller+0x1524>
				{
					Cl_rinseretcode = CL_ERROR;
   a0878:	2304      	movs	r3, #4
   a087a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
				break;
   a087e:	e003      	b.n	a0888 <Cl_Rinse_Controller+0x1524>
				default:
				break;
   a0880:	bf00      	nop
   a0882:	e006      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
				}
				break;
   a0884:	bf00      	nop
   a0886:	e004      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
				{
					Cl_rinseretcode = CL_ERROR;
				}
				break;
   a0888:	bf00      	nop
				default:
				break;
			}
	break;
   a088a:	e002      	b.n	a0892 <Cl_Rinse_Controller+0x152e>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a088c:	bf00      	nop
   a088e:	e000      	b.n	a0892 <Cl_Rinse_Controller+0x152e>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a0890:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a0892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
   a0896:	4618      	mov	r0, r3
   a0898:	3740      	adds	r7, #64	; 0x40
   a089a:	46bd      	mov	sp, r7
   a089c:	bd80      	pop	{r7, pc}
   a089e:	bf00      	nop
   a08a0:	000a1a51 	.word	0x000a1a51
   a08a4:	000a0e35 	.word	0x000a0e35
   a08a8:	2007285e 	.word	0x2007285e
   a08ac:	00082f5d 	.word	0x00082f5d

000a08b0 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a08b0:	b480      	push	{r7}
   a08b2:	b083      	sub	sp, #12
   a08b4:	af00      	add	r7, sp, #0
   a08b6:	4603      	mov	r3, r0
   a08b8:	6039      	str	r1, [r7, #0]
   a08ba:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a08bc:	79fb      	ldrb	r3, [r7, #7]
   a08be:	3b07      	subs	r3, #7
   a08c0:	2b4a      	cmp	r3, #74	; 0x4a
   a08c2:	f200 8109 	bhi.w	a0ad8 <cl_rinse_translatemacevent+0x228>
   a08c6:	a201      	add	r2, pc, #4	; (adr r2, a08cc <cl_rinse_translatemacevent+0x1c>)
   a08c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a08cc:	000a0a19 	.word	0x000a0a19
   a08d0:	000a0a31 	.word	0x000a0a31
   a08d4:	000a0a49 	.word	0x000a0a49
   a08d8:	000a0ac1 	.word	0x000a0ac1
   a08dc:	000a0ac9 	.word	0x000a0ac9
   a08e0:	000a0ad1 	.word	0x000a0ad1
   a08e4:	000a0a91 	.word	0x000a0a91
   a08e8:	000a0a99 	.word	0x000a0a99
   a08ec:	000a0aa1 	.word	0x000a0aa1
   a08f0:	000a0aa9 	.word	0x000a0aa9
   a08f4:	000a0ad9 	.word	0x000a0ad9
   a08f8:	000a0ad9 	.word	0x000a0ad9
   a08fc:	000a0ad9 	.word	0x000a0ad9
   a0900:	000a0ad9 	.word	0x000a0ad9
   a0904:	000a0ad9 	.word	0x000a0ad9
   a0908:	000a0ad9 	.word	0x000a0ad9
   a090c:	000a0ad9 	.word	0x000a0ad9
   a0910:	000a0ad9 	.word	0x000a0ad9
   a0914:	000a0ad9 	.word	0x000a0ad9
   a0918:	000a0ad9 	.word	0x000a0ad9
   a091c:	000a0ad9 	.word	0x000a0ad9
   a0920:	000a0ad9 	.word	0x000a0ad9
   a0924:	000a0ad9 	.word	0x000a0ad9
   a0928:	000a0ad9 	.word	0x000a0ad9
   a092c:	000a0ab1 	.word	0x000a0ab1
   a0930:	000a0ab9 	.word	0x000a0ab9
   a0934:	000a0ad9 	.word	0x000a0ad9
   a0938:	000a0ad9 	.word	0x000a0ad9
   a093c:	000a0ad9 	.word	0x000a0ad9
   a0940:	000a0ad9 	.word	0x000a0ad9
   a0944:	000a0ad9 	.word	0x000a0ad9
   a0948:	000a0a09 	.word	0x000a0a09
   a094c:	000a09f9 	.word	0x000a09f9
   a0950:	000a0a01 	.word	0x000a0a01
   a0954:	000a0a11 	.word	0x000a0a11
   a0958:	000a0ad9 	.word	0x000a0ad9
   a095c:	000a0ad9 	.word	0x000a0ad9
   a0960:	000a0ad9 	.word	0x000a0ad9
   a0964:	000a0a89 	.word	0x000a0a89
   a0968:	000a0a81 	.word	0x000a0a81
   a096c:	000a0ad9 	.word	0x000a0ad9
   a0970:	000a0ad9 	.word	0x000a0ad9
   a0974:	000a0ad9 	.word	0x000a0ad9
   a0978:	000a0ad9 	.word	0x000a0ad9
   a097c:	000a0ad9 	.word	0x000a0ad9
   a0980:	000a0ad9 	.word	0x000a0ad9
   a0984:	000a0ad9 	.word	0x000a0ad9
   a0988:	000a0ad9 	.word	0x000a0ad9
   a098c:	000a0ad9 	.word	0x000a0ad9
   a0990:	000a0a51 	.word	0x000a0a51
   a0994:	000a0a59 	.word	0x000a0a59
   a0998:	000a0a61 	.word	0x000a0a61
   a099c:	000a0a69 	.word	0x000a0a69
   a09a0:	000a0a71 	.word	0x000a0a71
   a09a4:	000a0a79 	.word	0x000a0a79
   a09a8:	000a0ad9 	.word	0x000a0ad9
   a09ac:	000a0ad9 	.word	0x000a0ad9
   a09b0:	000a0ad9 	.word	0x000a0ad9
   a09b4:	000a0ad9 	.word	0x000a0ad9
   a09b8:	000a0ad9 	.word	0x000a0ad9
   a09bc:	000a0ad9 	.word	0x000a0ad9
   a09c0:	000a0a21 	.word	0x000a0a21
   a09c4:	000a0a29 	.word	0x000a0a29
   a09c8:	000a0ad9 	.word	0x000a0ad9
   a09cc:	000a0ad9 	.word	0x000a0ad9
   a09d0:	000a0a39 	.word	0x000a0a39
   a09d4:	000a0ad9 	.word	0x000a0ad9
   a09d8:	000a0ad9 	.word	0x000a0ad9
   a09dc:	000a0ad9 	.word	0x000a0ad9
   a09e0:	000a0ad9 	.word	0x000a0ad9
   a09e4:	000a0ad9 	.word	0x000a0ad9
   a09e8:	000a0ad9 	.word	0x000a0ad9
   a09ec:	000a0ad9 	.word	0x000a0ad9
   a09f0:	000a0ad9 	.word	0x000a0ad9
   a09f4:	000a0a41 	.word	0x000a0a41
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a09f8:	683b      	ldr	r3, [r7, #0]
   a09fa:	2224      	movs	r2, #36	; 0x24
   a09fc:	701a      	strb	r2, [r3, #0]
		break;
   a09fe:	e06c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a0a00:	683b      	ldr	r3, [r7, #0]
   a0a02:	2225      	movs	r2, #37	; 0x25
   a0a04:	701a      	strb	r2, [r3, #0]
		break;
   a0a06:	e068      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a0a08:	683b      	ldr	r3, [r7, #0]
   a0a0a:	2226      	movs	r2, #38	; 0x26
   a0a0c:	701a      	strb	r2, [r3, #0]
		break;
   a0a0e:	e064      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a0a10:	683b      	ldr	r3, [r7, #0]
   a0a12:	2201      	movs	r2, #1
   a0a14:	701a      	strb	r2, [r3, #0]
		break;
   a0a16:	e060      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a0a18:	683b      	ldr	r3, [r7, #0]
   a0a1a:	2202      	movs	r2, #2
   a0a1c:	701a      	strb	r2, [r3, #0]
		break;
   a0a1e:	e05c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a0a20:	683b      	ldr	r3, [r7, #0]
   a0a22:	2204      	movs	r2, #4
   a0a24:	701a      	strb	r2, [r3, #0]
		break;
   a0a26:	e058      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a0a28:	683b      	ldr	r3, [r7, #0]
   a0a2a:	2205      	movs	r2, #5
   a0a2c:	701a      	strb	r2, [r3, #0]
		break;
   a0a2e:	e054      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a0a30:	683b      	ldr	r3, [r7, #0]
   a0a32:	2206      	movs	r2, #6
   a0a34:	701a      	strb	r2, [r3, #0]
		break;
   a0a36:	e050      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a0a38:	683b      	ldr	r3, [r7, #0]
   a0a3a:	2219      	movs	r2, #25
   a0a3c:	701a      	strb	r2, [r3, #0]
		break;
   a0a3e:	e04c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a0a40:	683b      	ldr	r3, [r7, #0]
   a0a42:	2227      	movs	r2, #39	; 0x27
   a0a44:	701a      	strb	r2, [r3, #0]
		break;
   a0a46:	e048      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a0a48:	683b      	ldr	r3, [r7, #0]
   a0a4a:	220e      	movs	r2, #14
   a0a4c:	701a      	strb	r2, [r3, #0]
		break; 
   a0a4e:	e044      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a0a50:	683b      	ldr	r3, [r7, #0]
   a0a52:	220f      	movs	r2, #15
   a0a54:	701a      	strb	r2, [r3, #0]
		break;
   a0a56:	e040      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a0a58:	683b      	ldr	r3, [r7, #0]
   a0a5a:	2210      	movs	r2, #16
   a0a5c:	701a      	strb	r2, [r3, #0]
		break;
   a0a5e:	e03c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a0a60:	683b      	ldr	r3, [r7, #0]
   a0a62:	2211      	movs	r2, #17
   a0a64:	701a      	strb	r2, [r3, #0]
		break;
   a0a66:	e038      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a0a68:	683b      	ldr	r3, [r7, #0]
   a0a6a:	2212      	movs	r2, #18
   a0a6c:	701a      	strb	r2, [r3, #0]
		break;
   a0a6e:	e034      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a0a70:	683b      	ldr	r3, [r7, #0]
   a0a72:	2213      	movs	r2, #19
   a0a74:	701a      	strb	r2, [r3, #0]
		break;			 
   a0a76:	e030      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a0a78:	683b      	ldr	r3, [r7, #0]
   a0a7a:	2214      	movs	r2, #20
   a0a7c:	701a      	strb	r2, [r3, #0]
		break;
   a0a7e:	e02c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a0a80:	683b      	ldr	r3, [r7, #0]
   a0a82:	2216      	movs	r2, #22
   a0a84:	701a      	strb	r2, [r3, #0]
		break;
   a0a86:	e028      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a0a88:	683b      	ldr	r3, [r7, #0]
   a0a8a:	2215      	movs	r2, #21
   a0a8c:	701a      	strb	r2, [r3, #0]
		break;
   a0a8e:	e024      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a0a90:	683b      	ldr	r3, [r7, #0]
   a0a92:	2218      	movs	r2, #24
   a0a94:	701a      	strb	r2, [r3, #0]
		break;
   a0a96:	e020      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a0a98:	683b      	ldr	r3, [r7, #0]
   a0a9a:	2217      	movs	r2, #23
   a0a9c:	701a      	strb	r2, [r3, #0]
		break;
   a0a9e:	e01c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a0aa0:	683b      	ldr	r3, [r7, #0]
   a0aa2:	221a      	movs	r2, #26
   a0aa4:	701a      	strb	r2, [r3, #0]
		break;
   a0aa6:	e018      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a0aa8:	683b      	ldr	r3, [r7, #0]
   a0aaa:	221b      	movs	r2, #27
   a0aac:	701a      	strb	r2, [r3, #0]
		break;
   a0aae:	e014      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a0ab0:	683b      	ldr	r3, [r7, #0]
   a0ab2:	221f      	movs	r2, #31
   a0ab4:	701a      	strb	r2, [r3, #0]
		break;
   a0ab6:	e010      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a0ab8:	683b      	ldr	r3, [r7, #0]
   a0aba:	2220      	movs	r2, #32
   a0abc:	701a      	strb	r2, [r3, #0]
		break;
   a0abe:	e00c      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a0ac0:	683b      	ldr	r3, [r7, #0]
   a0ac2:	2221      	movs	r2, #33	; 0x21
   a0ac4:	701a      	strb	r2, [r3, #0]
		break;
   a0ac6:	e008      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a0ac8:	683b      	ldr	r3, [r7, #0]
   a0aca:	2222      	movs	r2, #34	; 0x22
   a0acc:	701a      	strb	r2, [r3, #0]
		break;
   a0ace:	e004      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a0ad0:	683b      	ldr	r3, [r7, #0]
   a0ad2:	2223      	movs	r2, #35	; 0x23
   a0ad4:	701a      	strb	r2, [r3, #0]
		break;
   a0ad6:	e000      	b.n	a0ada <cl_rinse_translatemacevent+0x22a>
		
		default:
		break;
   a0ad8:	bf00      	nop
	}
		 return CL_OK;
   a0ada:	2300      	movs	r3, #0
}
   a0adc:	4618      	mov	r0, r3
   a0ade:	370c      	adds	r7, #12
   a0ae0:	46bd      	mov	sp, r7
   a0ae2:	bc80      	pop	{r7}
   a0ae4:	4770      	bx	lr
   a0ae6:	bf00      	nop

000a0ae8 <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a0ae8:	b480      	push	{r7}
   a0aea:	af00      	add	r7, sp, #0
		tempcount = 0;
   a0aec:	4b26      	ldr	r3, [pc, #152]	; (a0b88 <Cl_rinse_init+0xa0>)
   a0aee:	2200      	movs	r2, #0
   a0af0:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a0af2:	4b26      	ldr	r3, [pc, #152]	; (a0b8c <Cl_rinse_init+0xa4>)
   a0af4:	2200      	movs	r2, #0
   a0af6:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a0af8:	4b25      	ldr	r3, [pc, #148]	; (a0b90 <Cl_rinse_init+0xa8>)
   a0afa:	2200      	movs	r2, #0
   a0afc:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a0afe:	4b25      	ldr	r3, [pc, #148]	; (a0b94 <Cl_rinse_init+0xac>)
   a0b00:	2200      	movs	r2, #0
   a0b02:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a0b04:	4b24      	ldr	r3, [pc, #144]	; (a0b98 <Cl_rinse_init+0xb0>)
   a0b06:	2200      	movs	r2, #0
   a0b08:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a0b0a:	4b24      	ldr	r3, [pc, #144]	; (a0b9c <Cl_rinse_init+0xb4>)
   a0b0c:	2200      	movs	r2, #0
   a0b0e:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a0b10:	4b23      	ldr	r3, [pc, #140]	; (a0ba0 <Cl_rinse_init+0xb8>)
   a0b12:	2200      	movs	r2, #0
   a0b14:	701a      	strb	r2, [r3, #0]
	 
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a0b16:	4b23      	ldr	r3, [pc, #140]	; (a0ba4 <Cl_rinse_init+0xbc>)
   a0b18:	2200      	movs	r2, #0
   a0b1a:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a0b1c:	4b22      	ldr	r3, [pc, #136]	; (a0ba8 <Cl_rinse_init+0xc0>)
   a0b1e:	2200      	movs	r2, #0
   a0b20:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a0b22:	4b22      	ldr	r3, [pc, #136]	; (a0bac <Cl_rinse_init+0xc4>)
   a0b24:	2200      	movs	r2, #0
   a0b26:	601a      	str	r2, [r3, #0]
   a0b28:	4b21      	ldr	r3, [pc, #132]	; (a0bb0 <Cl_rinse_init+0xc8>)
   a0b2a:	2200      	movs	r2, #0
   a0b2c:	601a      	str	r2, [r3, #0]
   a0b2e:	4b21      	ldr	r3, [pc, #132]	; (a0bb4 <Cl_rinse_init+0xcc>)
   a0b30:	2200      	movs	r2, #0
   a0b32:	601a      	str	r2, [r3, #0]
   a0b34:	4b20      	ldr	r3, [pc, #128]	; (a0bb8 <Cl_rinse_init+0xd0>)
   a0b36:	2200      	movs	r2, #0
   a0b38:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a0b3a:	4b20      	ldr	r3, [pc, #128]	; (a0bbc <Cl_rinse_init+0xd4>)
   a0b3c:	2200      	movs	r2, #0
   a0b3e:	601a      	str	r2, [r3, #0]
   a0b40:	4b1f      	ldr	r3, [pc, #124]	; (a0bc0 <Cl_rinse_init+0xd8>)
   a0b42:	2200      	movs	r2, #0
   a0b44:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a0b46:	4b1f      	ldr	r3, [pc, #124]	; (a0bc4 <Cl_rinse_init+0xdc>)
   a0b48:	2200      	movs	r2, #0
   a0b4a:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a0b4c:	4b1e      	ldr	r3, [pc, #120]	; (a0bc8 <Cl_rinse_init+0xe0>)
   a0b4e:	2200      	movs	r2, #0
   a0b50:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a0b52:	4b1e      	ldr	r3, [pc, #120]	; (a0bcc <Cl_rinse_init+0xe4>)
   a0b54:	2200      	movs	r2, #0
   a0b56:	801a      	strh	r2, [r3, #0]
   a0b58:	4b1d      	ldr	r3, [pc, #116]	; (a0bd0 <Cl_rinse_init+0xe8>)
   a0b5a:	2200      	movs	r2, #0
   a0b5c:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a0b5e:	4b1d      	ldr	r3, [pc, #116]	; (a0bd4 <Cl_rinse_init+0xec>)
   a0b60:	2200      	movs	r2, #0
   a0b62:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a0b64:	4b1c      	ldr	r3, [pc, #112]	; (a0bd8 <Cl_rinse_init+0xf0>)
   a0b66:	2200      	movs	r2, #0
   a0b68:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a0b6a:	4b1c      	ldr	r3, [pc, #112]	; (a0bdc <Cl_rinse_init+0xf4>)
   a0b6c:	2200      	movs	r2, #0
   a0b6e:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a0b70:	4b1b      	ldr	r3, [pc, #108]	; (a0be0 <Cl_rinse_init+0xf8>)
   a0b72:	2200      	movs	r2, #0
   a0b74:	701a      	strb	r2, [r3, #0]
   a0b76:	4b1b      	ldr	r3, [pc, #108]	; (a0be4 <Cl_rinse_init+0xfc>)
   a0b78:	2200      	movs	r2, #0
   a0b7a:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a0b7c:	2300      	movs	r3, #0
 }
   a0b7e:	4618      	mov	r0, r3
   a0b80:	46bd      	mov	sp, r7
   a0b82:	bc80      	pop	{r7}
   a0b84:	4770      	bx	lr
   a0b86:	bf00      	nop
   a0b88:	2007334c 	.word	0x2007334c
   a0b8c:	20072858 	.word	0x20072858
   a0b90:	20072859 	.word	0x20072859
   a0b94:	2007285a 	.word	0x2007285a
   a0b98:	2007285b 	.word	0x2007285b
   a0b9c:	2007285c 	.word	0x2007285c
   a0ba0:	2007285d 	.word	0x2007285d
   a0ba4:	2007285e 	.word	0x2007285e
   a0ba8:	2007285f 	.word	0x2007285f
   a0bac:	20072860 	.word	0x20072860
   a0bb0:	20072864 	.word	0x20072864
   a0bb4:	20072868 	.word	0x20072868
   a0bb8:	2007286c 	.word	0x2007286c
   a0bbc:	20072870 	.word	0x20072870
   a0bc0:	20072874 	.word	0x20072874
   a0bc4:	20072878 	.word	0x20072878
   a0bc8:	20072879 	.word	0x20072879
   a0bcc:	2007287a 	.word	0x2007287a
   a0bd0:	2007287c 	.word	0x2007287c
   a0bd4:	2007287e 	.word	0x2007287e
   a0bd8:	20072880 	.word	0x20072880
   a0bdc:	2007334f 	.word	0x2007334f
   a0be0:	20072881 	.word	0x20072881
   a0be4:	20072882 	.word	0x20072882

000a0be8 <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a0be8:	b580      	push	{r7, lr}
   a0bea:	b084      	sub	sp, #16
   a0bec:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a0bee:	2304      	movs	r3, #4
   a0bf0:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0bf2:	234d      	movs	r3, #77	; 0x4d
   a0bf4:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a0bf6:	1d3b      	adds	r3, r7, #4
   a0bf8:	2200      	movs	r2, #0
   a0bfa:	601a      	str	r2, [r3, #0]
   a0bfc:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a0c00:	230a      	movs	r3, #10
   a0c02:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a0c04:	2301      	movs	r3, #1
   a0c06:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a0c08:	4b08      	ldr	r3, [pc, #32]	; (a0c2c <Cl_Rinse_UpdateTimeInfo+0x44>)
   a0c0a:	681b      	ldr	r3, [r3, #0]
   a0c0c:	b2db      	uxtb	r3, r3
   a0c0e:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a0c10:	1d39      	adds	r1, r7, #4
   a0c12:	7bbb      	ldrb	r3, [r7, #14]
   a0c14:	2202      	movs	r2, #2
   a0c16:	4618      	mov	r0, r3
   a0c18:	4b05      	ldr	r3, [pc, #20]	; (a0c30 <Cl_Rinse_UpdateTimeInfo+0x48>)
   a0c1a:	4798      	blx	r3
   a0c1c:	4603      	mov	r3, r0
   a0c1e:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a0c20:	2300      	movs	r3, #0
	
 }
   a0c22:	4618      	mov	r0, r3
   a0c24:	3710      	adds	r7, #16
   a0c26:	46bd      	mov	sp, r7
   a0c28:	bd80      	pop	{r7, pc}
   a0c2a:	bf00      	nop
   a0c2c:	20072870 	.word	0x20072870
   a0c30:	0009926d 	.word	0x0009926d

000a0c34 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a0c34:	b580      	push	{r7, lr}
   a0c36:	b082      	sub	sp, #8
   a0c38:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a0c3a:	2304      	movs	r3, #4
   a0c3c:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a0c3e:	4b18      	ldr	r3, [pc, #96]	; (a0ca0 <Cl_Rinse_CheckforRinseCompletion+0x6c>)
   a0c40:	781b      	ldrb	r3, [r3, #0]
   a0c42:	2b00      	cmp	r3, #0
   a0c44:	d007      	beq.n	a0c56 <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a0c46:	4b17      	ldr	r3, [pc, #92]	; (a0ca4 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a0c48:	681b      	ldr	r3, [r3, #0]
   a0c4a:	2b05      	cmp	r3, #5
   a0c4c:	dd01      	ble.n	a0c52 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a0c4e:	2300      	movs	r3, #0
   a0c50:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a0c52:	79fb      	ldrb	r3, [r7, #7]
   a0c54:	e020      	b.n	a0c98 <Cl_Rinse_CheckforRinseCompletion+0x64>
	 }
	if (hotrinse_flag == 1)
   a0c56:	4b14      	ldr	r3, [pc, #80]	; (a0ca8 <Cl_Rinse_CheckforRinseCompletion+0x74>)
   a0c58:	781b      	ldrb	r3, [r3, #0]
   a0c5a:	b2db      	uxtb	r3, r3
   a0c5c:	2b01      	cmp	r3, #1
   a0c5e:	d114      	bne.n	a0c8a <Cl_Rinse_CheckforRinseCompletion+0x56>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN - 3) )
   a0c60:	4b10      	ldr	r3, [pc, #64]	; (a0ca4 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a0c62:	681b      	ldr	r3, [r3, #0]
   a0c64:	2b15      	cmp	r3, #21
   a0c66:	dd03      	ble.n	a0c70 <Cl_Rinse_CheckforRinseCompletion+0x3c>
		{
			sv_cntrl_poweroffheater();
   a0c68:	4b10      	ldr	r3, [pc, #64]	; (a0cac <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a0c6a:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a0c6c:	4b10      	ldr	r3, [pc, #64]	; (a0cb0 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a0c6e:	4798      	blx	r3
		}
		if (Cl_RinseTotalMinutescounter >= CL_HOTRINSE_TIMEOUT_MIN )
   a0c70:	4b0c      	ldr	r3, [pc, #48]	; (a0ca4 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a0c72:	681b      	ldr	r3, [r3, #0]
   a0c74:	2b18      	cmp	r3, #24
   a0c76:	dd0e      	ble.n	a0c96 <Cl_Rinse_CheckforRinseCompletion+0x62>
		{
			Cl_rinseretcode = CL_OK;
   a0c78:	2300      	movs	r3, #0
   a0c7a:	71fb      	strb	r3, [r7, #7]
			sv_cntrl_poweroffheater();
   a0c7c:	4b0b      	ldr	r3, [pc, #44]	; (a0cac <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a0c7e:	4798      	blx	r3
			hotrinse_flag = 0;
   a0c80:	4b09      	ldr	r3, [pc, #36]	; (a0ca8 <Cl_Rinse_CheckforRinseCompletion+0x74>)
   a0c82:	2200      	movs	r2, #0
   a0c84:	701a      	strb	r2, [r3, #0]
			//HeaterState == CL_HEATER_STATE_INACTIVE;							// // added on 3.07.2017
			return Cl_rinseretcode;
   a0c86:	79fb      	ldrb	r3, [r7, #7]
   a0c88:	e006      	b.n	a0c98 <Cl_Rinse_CheckforRinseCompletion+0x64>
		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a0c8a:	4b06      	ldr	r3, [pc, #24]	; (a0ca4 <Cl_Rinse_CheckforRinseCompletion+0x70>)
   a0c8c:	681b      	ldr	r3, [r3, #0]
   a0c8e:	2b05      	cmp	r3, #5
   a0c90:	dd01      	ble.n	a0c96 <Cl_Rinse_CheckforRinseCompletion+0x62>
	{
			
		Cl_rinseretcode = CL_OK;
   a0c92:	2300      	movs	r3, #0
   a0c94:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a0c96:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a0c98:	4618      	mov	r0, r3
   a0c9a:	3708      	adds	r7, #8
   a0c9c:	46bd      	mov	sp, r7
   a0c9e:	bd80      	pop	{r7, pc}
   a0ca0:	2007263c 	.word	0x2007263c
   a0ca4:	20072870 	.word	0x20072870
   a0ca8:	20072881 	.word	0x20072881
   a0cac:	000974dd 	.word	0x000974dd
   a0cb0:	00097681 	.word	0x00097681

000a0cb4 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a0cb4:	b580      	push	{r7, lr}
   a0cb6:	b082      	sub	sp, #8
   a0cb8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a0cba:	2300      	movs	r3, #0
   a0cbc:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a0cbe:	2300      	movs	r3, #0
   a0cc0:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a0cc2:	4b1b      	ldr	r3, [pc, #108]	; (a0d30 <cl_rinse_notifydacandgotorinsestandby+0x7c>)
   a0cc4:	4798      	blx	r3
	Cl_RinseFlowOff();
   a0cc6:	4b1b      	ldr	r3, [pc, #108]	; (a0d34 <cl_rinse_notifydacandgotorinsestandby+0x80>)
   a0cc8:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a0cca:	4b1b      	ldr	r3, [pc, #108]	; (a0d38 <cl_rinse_notifydacandgotorinsestandby+0x84>)
   a0ccc:	2200      	movs	r2, #0
   a0cce:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a0cd0:	4b1a      	ldr	r3, [pc, #104]	; (a0d3c <cl_rinse_notifydacandgotorinsestandby+0x88>)
   a0cd2:	2200      	movs	r2, #0
   a0cd4:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a0cd6:	4b1a      	ldr	r3, [pc, #104]	; (a0d40 <cl_rinse_notifydacandgotorinsestandby+0x8c>)
   a0cd8:	2200      	movs	r2, #0
   a0cda:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a0cdc:	4b19      	ldr	r3, [pc, #100]	; (a0d44 <cl_rinse_notifydacandgotorinsestandby+0x90>)
   a0cde:	2200      	movs	r2, #0
   a0ce0:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a0ce2:	4b19      	ldr	r3, [pc, #100]	; (a0d48 <cl_rinse_notifydacandgotorinsestandby+0x94>)
   a0ce4:	2200      	movs	r2, #0
   a0ce6:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a0ce8:	2301      	movs	r3, #1
   a0cea:	71bb      	strb	r3, [r7, #6]
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a0cec:	4b17      	ldr	r3, [pc, #92]	; (a0d4c <cl_rinse_notifydacandgotorinsestandby+0x98>)
   a0cee:	781b      	ldrb	r3, [r3, #0]
   a0cf0:	2b03      	cmp	r3, #3
   a0cf2:	d114      	bne.n	a0d1e <cl_rinse_notifydacandgotorinsestandby+0x6a>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a0cf4:	1dbb      	adds	r3, r7, #6
   a0cf6:	2201      	movs	r2, #1
   a0cf8:	4619      	mov	r1, r3
   a0cfa:	2001      	movs	r0, #1
   a0cfc:	4b14      	ldr	r3, [pc, #80]	; (a0d50 <cl_rinse_notifydacandgotorinsestandby+0x9c>)
   a0cfe:	4798      	blx	r3
   a0d00:	4603      	mov	r3, r0
   a0d02:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a0d04:	1dbb      	adds	r3, r7, #6
   a0d06:	2200      	movs	r2, #0
   a0d08:	4619      	mov	r1, r3
   a0d0a:	200b      	movs	r0, #11
   a0d0c:	4b11      	ldr	r3, [pc, #68]	; (a0d54 <cl_rinse_notifydacandgotorinsestandby+0xa0>)
   a0d0e:	4798      	blx	r3
   a0d10:	4603      	mov	r3, r0
   a0d12:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a0d14:	2048      	movs	r0, #72	; 0x48
   a0d16:	4b10      	ldr	r3, [pc, #64]	; (a0d58 <cl_rinse_notifydacandgotorinsestandby+0xa4>)
   a0d18:	4798      	blx	r3
   a0d1a:	4603      	mov	r3, r0
   a0d1c:	71fb      	strb	r3, [r7, #7]
		
	}
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a0d1e:	2002      	movs	r0, #2
   a0d20:	4b0e      	ldr	r3, [pc, #56]	; (a0d5c <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a0d22:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a0d24:	79fb      	ldrb	r3, [r7, #7]
}
   a0d26:	4618      	mov	r0, r3
   a0d28:	3708      	adds	r7, #8
   a0d2a:	46bd      	mov	sp, r7
   a0d2c:	bd80      	pop	{r7, pc}
   a0d2e:	bf00      	nop
   a0d30:	000a1325 	.word	0x000a1325
   a0d34:	000a12fd 	.word	0x000a12fd
   a0d38:	20072860 	.word	0x20072860
   a0d3c:	20072864 	.word	0x20072864
   a0d40:	20072868 	.word	0x20072868
   a0d44:	20072870 	.word	0x20072870
   a0d48:	20072874 	.word	0x20072874
   a0d4c:	2007285e 	.word	0x2007285e
   a0d50:	00097db5 	.word	0x00097db5
   a0d54:	0009926d 	.word	0x0009926d
   a0d58:	0008a479 	.word	0x0008a479
   a0d5c:	00091f6d 	.word	0x00091f6d

000a0d60 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a0d60:	b580      	push	{r7, lr}
   a0d62:	b086      	sub	sp, #24
   a0d64:	af00      	add	r7, sp, #0
   a0d66:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a0d68:	2300      	movs	r3, #0
   a0d6a:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a0d6c:	2300      	movs	r3, #0
   a0d6e:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a0d70:	f107 030c 	add.w	r3, r7, #12
   a0d74:	2100      	movs	r1, #0
   a0d76:	460a      	mov	r2, r1
   a0d78:	801a      	strh	r2, [r3, #0]
   a0d7a:	460a      	mov	r2, r1
   a0d7c:	709a      	strb	r2, [r3, #2]
   a0d7e:	2300      	movs	r3, #0
   a0d80:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0d82:	234d      	movs	r3, #77	; 0x4d
   a0d84:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0d86:	2300      	movs	r3, #0
   a0d88:	75bb      	strb	r3, [r7, #22]
   a0d8a:	e045      	b.n	a0e18 <Cl_Rinse_UpdateAlarmTable+0xb8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a0d8c:	7dbb      	ldrb	r3, [r7, #22]
   a0d8e:	4a26      	ldr	r2, [pc, #152]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0d90:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   a0d94:	7dbb      	ldrb	r3, [r7, #22]
   a0d96:	00db      	lsls	r3, r3, #3
   a0d98:	4a23      	ldr	r2, [pc, #140]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0d9a:	4413      	add	r3, r2
   a0d9c:	3302      	adds	r3, #2
   a0d9e:	4619      	mov	r1, r3
   a0da0:	4b22      	ldr	r3, [pc, #136]	; (a0e2c <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a0da2:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a0da4:	7dbb      	ldrb	r3, [r7, #22]
   a0da6:	4a20      	ldr	r2, [pc, #128]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0da8:	00db      	lsls	r3, r3, #3
   a0daa:	4413      	add	r3, r2
   a0dac:	789b      	ldrb	r3, [r3, #2]
   a0dae:	2b00      	cmp	r3, #0
   a0db0:	d019      	beq.n	a0de6 <Cl_Rinse_UpdateAlarmTable+0x86>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a0db2:	7dbb      	ldrb	r3, [r7, #22]
   a0db4:	4a1c      	ldr	r2, [pc, #112]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0db6:	00db      	lsls	r3, r3, #3
   a0db8:	4413      	add	r3, r2
   a0dba:	78db      	ldrb	r3, [r3, #3]
   a0dbc:	f083 0301 	eor.w	r3, r3, #1
   a0dc0:	b2db      	uxtb	r3, r3
   a0dc2:	2b00      	cmp	r3, #0
   a0dc4:	d025      	beq.n	a0e12 <Cl_Rinse_UpdateAlarmTable+0xb2>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a0dc6:	7dbb      	ldrb	r3, [r7, #22]
   a0dc8:	4a17      	ldr	r2, [pc, #92]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0dca:	00db      	lsls	r3, r3, #3
   a0dcc:	4413      	add	r3, r2
   a0dce:	2201      	movs	r2, #1
   a0dd0:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a0dd2:	7dbb      	ldrb	r3, [r7, #22]
   a0dd4:	4a14      	ldr	r2, [pc, #80]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0dd6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a0dda:	4618      	mov	r0, r3
   a0ddc:	4b14      	ldr	r3, [pc, #80]	; (a0e30 <Cl_Rinse_UpdateAlarmTable+0xd0>)
   a0dde:	4798      	blx	r3
   a0de0:	4603      	mov	r3, r0
   a0de2:	75fb      	strb	r3, [r7, #23]
   a0de4:	e015      	b.n	a0e12 <Cl_Rinse_UpdateAlarmTable+0xb2>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a0de6:	7dbb      	ldrb	r3, [r7, #22]
   a0de8:	4a0f      	ldr	r2, [pc, #60]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0dea:	00db      	lsls	r3, r3, #3
   a0dec:	4413      	add	r3, r2
   a0dee:	78db      	ldrb	r3, [r3, #3]
   a0df0:	2b00      	cmp	r3, #0
   a0df2:	d00e      	beq.n	a0e12 <Cl_Rinse_UpdateAlarmTable+0xb2>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a0df4:	7dbb      	ldrb	r3, [r7, #22]
   a0df6:	4a0c      	ldr	r2, [pc, #48]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0df8:	00db      	lsls	r3, r3, #3
   a0dfa:	4413      	add	r3, r2
   a0dfc:	2200      	movs	r2, #0
   a0dfe:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a0e00:	2307      	movs	r3, #7
   a0e02:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a0e04:	7dbb      	ldrb	r3, [r7, #22]
   a0e06:	4a08      	ldr	r2, [pc, #32]	; (a0e28 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a0e08:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a0e0c:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a0e0e:	2300      	movs	r3, #0
   a0e10:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a0e12:	7dbb      	ldrb	r3, [r7, #22]
   a0e14:	3301      	adds	r3, #1
   a0e16:	75bb      	strb	r3, [r7, #22]
   a0e18:	7dbb      	ldrb	r3, [r7, #22]
   a0e1a:	2b18      	cmp	r3, #24
   a0e1c:	d9b6      	bls.n	a0d8c <Cl_Rinse_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_rinseretcode );
   a0e1e:	7dfb      	ldrb	r3, [r7, #23]
}
   a0e20:	4618      	mov	r0, r3
   a0e22:	3718      	adds	r7, #24
   a0e24:	46bd      	mov	sp, r7
   a0e26:	bd80      	pop	{r7, pc}
   a0e28:	20070bac 	.word	0x20070bac
   a0e2c:	00083095 	.word	0x00083095
   a0e30:	000a0f89 	.word	0x000a0f89

000a0e34 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a0e34:	b580      	push	{r7, lr}
   a0e36:	b082      	sub	sp, #8
   a0e38:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a0e3a:	2300      	movs	r3, #0
   a0e3c:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0e3e:	234d      	movs	r3, #77	; 0x4d
   a0e40:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a0e42:	1d7b      	adds	r3, r7, #5
   a0e44:	4618      	mov	r0, r3
   a0e46:	4b04      	ldr	r3, [pc, #16]	; (a0e58 <Cl_Rinse_ProcessAlarms+0x24>)
   a0e48:	4798      	blx	r3
   a0e4a:	4603      	mov	r3, r0
   a0e4c:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a0e4e:	79fb      	ldrb	r3, [r7, #7]
}
   a0e50:	4618      	mov	r0, r3
   a0e52:	3708      	adds	r7, #8
   a0e54:	46bd      	mov	sp, r7
   a0e56:	bd80      	pop	{r7, pc}
   a0e58:	000a0d61 	.word	0x000a0d61

000a0e5c <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a0e5c:	b580      	push	{r7, lr}
   a0e5e:	b082      	sub	sp, #8
   a0e60:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a0e62:	2300      	movs	r3, #0
   a0e64:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0e66:	234d      	movs	r3, #77	; 0x4d
   a0e68:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0e6a:	4b45      	ldr	r3, [pc, #276]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0e6c:	2200      	movs	r2, #0
   a0e6e:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a0e70:	4b43      	ldr	r3, [pc, #268]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0e72:	781b      	ldrb	r3, [r3, #0]
   a0e74:	4618      	mov	r0, r3
   a0e76:	4b43      	ldr	r3, [pc, #268]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0e78:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a0e7a:	4b41      	ldr	r3, [pc, #260]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0e7c:	2200      	movs	r2, #0
   a0e7e:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a0e80:	2029      	movs	r0, #41	; 0x29
   a0e82:	4b40      	ldr	r3, [pc, #256]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0e84:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a0e86:	4b3e      	ldr	r3, [pc, #248]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0e88:	2200      	movs	r2, #0
   a0e8a:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a0e8c:	202b      	movs	r0, #43	; 0x2b
   a0e8e:	4b3d      	ldr	r3, [pc, #244]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0e90:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a0e92:	4b3b      	ldr	r3, [pc, #236]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0e94:	2200      	movs	r2, #0
   a0e96:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a0e9a:	2008      	movs	r0, #8
   a0e9c:	4b39      	ldr	r3, [pc, #228]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0e9e:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a0ea0:	4b37      	ldr	r3, [pc, #220]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0ea2:	2200      	movs	r2, #0
   a0ea4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a0ea8:	4b35      	ldr	r3, [pc, #212]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0eaa:	2200      	movs	r2, #0
   a0eac:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a0eb0:	2015      	movs	r0, #21
   a0eb2:	4b34      	ldr	r3, [pc, #208]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0eb4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a0eb6:	2016      	movs	r0, #22
   a0eb8:	4b32      	ldr	r3, [pc, #200]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0eba:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a0ebc:	4b30      	ldr	r3, [pc, #192]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0ebe:	2200      	movs	r2, #0
   a0ec0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a0ec4:	4b2e      	ldr	r3, [pc, #184]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0ec6:	2200      	movs	r2, #0
   a0ec8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a0ecc:	2017      	movs	r0, #23
   a0ece:	4b2d      	ldr	r3, [pc, #180]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0ed0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a0ed2:	2018      	movs	r0, #24
   a0ed4:	4b2b      	ldr	r3, [pc, #172]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0ed6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a0ed8:	4b29      	ldr	r3, [pc, #164]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0eda:	2200      	movs	r2, #0
   a0edc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a0ee0:	4b27      	ldr	r3, [pc, #156]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0ee2:	2200      	movs	r2, #0
   a0ee4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a0ee8:	2028      	movs	r0, #40	; 0x28
   a0eea:	4b26      	ldr	r3, [pc, #152]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0eec:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a0eee:	2027      	movs	r0, #39	; 0x27
   a0ef0:	4b24      	ldr	r3, [pc, #144]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0ef2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a0ef4:	4b22      	ldr	r3, [pc, #136]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0ef6:	2200      	movs	r2, #0
   a0ef8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a0efc:	2012      	movs	r0, #18
   a0efe:	4b21      	ldr	r3, [pc, #132]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f00:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a0f02:	2011      	movs	r0, #17
   a0f04:	4b1f      	ldr	r3, [pc, #124]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f06:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a0f08:	4b1d      	ldr	r3, [pc, #116]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f0a:	2200      	movs	r2, #0
   a0f0c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a0f10:	4b1b      	ldr	r3, [pc, #108]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f12:	2200      	movs	r2, #0
   a0f14:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a0f18:	2013      	movs	r0, #19
   a0f1a:	4b1a      	ldr	r3, [pc, #104]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f1c:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a0f1e:	2014      	movs	r0, #20
   a0f20:	4b18      	ldr	r3, [pc, #96]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f22:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a0f24:	4b16      	ldr	r3, [pc, #88]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f26:	2200      	movs	r2, #0
   a0f28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a0f2c:	2003      	movs	r0, #3
   a0f2e:	4b15      	ldr	r3, [pc, #84]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f30:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a0f32:	4b13      	ldr	r3, [pc, #76]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f34:	2200      	movs	r2, #0
   a0f36:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a0f3a:	2004      	movs	r0, #4
   a0f3c:	4b11      	ldr	r3, [pc, #68]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f3e:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a0f40:	4b0f      	ldr	r3, [pc, #60]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f42:	2200      	movs	r2, #0
   a0f44:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a0f48:	4b0d      	ldr	r3, [pc, #52]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f4a:	2200      	movs	r2, #0
   a0f4c:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a0f50:	4b0b      	ldr	r3, [pc, #44]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f52:	2200      	movs	r2, #0
   a0f54:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a0f58:	4b09      	ldr	r3, [pc, #36]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f5a:	2200      	movs	r2, #0
   a0f5c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a0f60:	2010      	movs	r0, #16
   a0f62:	4b08      	ldr	r3, [pc, #32]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f64:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a0f66:	4b06      	ldr	r3, [pc, #24]	; (a0f80 <Cl_Rinse_ResetAlertsforReassertion+0x124>)
   a0f68:	2200      	movs	r2, #0
   a0f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a0f6e:	200f      	movs	r0, #15
   a0f70:	4b04      	ldr	r3, [pc, #16]	; (a0f84 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   a0f72:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a0f74:	79fb      	ldrb	r3, [r7, #7]
}
   a0f76:	4618      	mov	r0, r3
   a0f78:	3708      	adds	r7, #8
   a0f7a:	46bd      	mov	sp, r7
   a0f7c:	bd80      	pop	{r7, pc}
   a0f7e:	bf00      	nop
   a0f80:	20070bac 	.word	0x20070bac
   a0f84:	00083051 	.word	0x00083051

000a0f88 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a0f88:	b580      	push	{r7, lr}
   a0f8a:	b086      	sub	sp, #24
   a0f8c:	af00      	add	r7, sp, #0
   a0f8e:	4603      	mov	r3, r0
   a0f90:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a0f92:	2300      	movs	r3, #0
   a0f94:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a0f96:	f107 0308 	add.w	r3, r7, #8
   a0f9a:	2100      	movs	r1, #0
   a0f9c:	460a      	mov	r2, r1
   a0f9e:	801a      	strh	r2, [r3, #0]
   a0fa0:	460a      	mov	r2, r1
   a0fa2:	709a      	strb	r2, [r3, #2]
   a0fa4:	2300      	movs	r3, #0
   a0fa6:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0fa8:	234d      	movs	r3, #77	; 0x4d
   a0faa:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a0fac:	2300      	movs	r3, #0
   a0fae:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a0fb0:	2300      	movs	r3, #0
   a0fb2:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a0fb4:	79fb      	ldrb	r3, [r7, #7]
   a0fb6:	3b01      	subs	r3, #1
   a0fb8:	2b3a      	cmp	r3, #58	; 0x3a
   a0fba:	f200 8124 	bhi.w	a1206 <CL_RinseAlarmActon+0x27e>
   a0fbe:	a201      	add	r2, pc, #4	; (adr r2, a0fc4 <CL_RinseAlarmActon+0x3c>)
   a0fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0fc4:	000a10b1 	.word	0x000a10b1
   a0fc8:	000a1207 	.word	0x000a1207
   a0fcc:	000a10eb 	.word	0x000a10eb
   a0fd0:	000a10ff 	.word	0x000a10ff
   a0fd4:	000a1207 	.word	0x000a1207
   a0fd8:	000a1207 	.word	0x000a1207
   a0fdc:	000a1207 	.word	0x000a1207
   a0fe0:	000a11a3 	.word	0x000a11a3
   a0fe4:	000a1207 	.word	0x000a1207
   a0fe8:	000a1207 	.word	0x000a1207
   a0fec:	000a1207 	.word	0x000a1207
   a0ff0:	000a11b7 	.word	0x000a11b7
   a0ff4:	000a11c3 	.word	0x000a11c3
   a0ff8:	000a11cf 	.word	0x000a11cf
   a0ffc:	000a1113 	.word	0x000a1113
   a1000:	000a1113 	.word	0x000a1113
   a1004:	000a1127 	.word	0x000a1127
   a1008:	000a1127 	.word	0x000a1127
   a100c:	000a113b 	.word	0x000a113b
   a1010:	000a1153 	.word	0x000a1153
   a1014:	000a1167 	.word	0x000a1167
   a1018:	000a1167 	.word	0x000a1167
   a101c:	000a117b 	.word	0x000a117b
   a1020:	000a117b 	.word	0x000a117b
   a1024:	000a1207 	.word	0x000a1207
   a1028:	000a11f7 	.word	0x000a11f7
   a102c:	000a120d 	.word	0x000a120d
   a1030:	000a120d 	.word	0x000a120d
   a1034:	000a120d 	.word	0x000a120d
   a1038:	000a1207 	.word	0x000a1207
   a103c:	000a120d 	.word	0x000a120d
   a1040:	000a1207 	.word	0x000a1207
   a1044:	000a1207 	.word	0x000a1207
   a1048:	000a1207 	.word	0x000a1207
   a104c:	000a1207 	.word	0x000a1207
   a1050:	000a1207 	.word	0x000a1207
   a1054:	000a1207 	.word	0x000a1207
   a1058:	000a1207 	.word	0x000a1207
   a105c:	000a118f 	.word	0x000a118f
   a1060:	000a118f 	.word	0x000a118f
   a1064:	000a10c3 	.word	0x000a10c3
   a1068:	000a1207 	.word	0x000a1207
   a106c:	000a10d7 	.word	0x000a10d7
   a1070:	000a1207 	.word	0x000a1207
   a1074:	000a120d 	.word	0x000a120d
   a1078:	000a120d 	.word	0x000a120d
   a107c:	000a1207 	.word	0x000a1207
   a1080:	000a1207 	.word	0x000a1207
   a1084:	000a1207 	.word	0x000a1207
   a1088:	000a11db 	.word	0x000a11db
   a108c:	000a11db 	.word	0x000a11db
   a1090:	000a1207 	.word	0x000a1207
   a1094:	000a1207 	.word	0x000a1207
   a1098:	000a1207 	.word	0x000a1207
   a109c:	000a1207 	.word	0x000a1207
   a10a0:	000a1207 	.word	0x000a1207
   a10a4:	000a11e7 	.word	0x000a11e7
   a10a8:	000a11e7 	.word	0x000a11e7
   a10ac:	000a11e7 	.word	0x000a11e7
		{
			
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setredalarm();
   a10b0:	4b66      	ldr	r3, [pc, #408]	; (a124c <CL_RinseAlarmActon+0x2c4>)
   a10b2:	4798      	blx	r3
					sv_cntrl_buzzer();
   a10b4:	4b66      	ldr	r3, [pc, #408]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a10b6:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a10b8:	2100      	movs	r1, #0
   a10ba:	2004      	movs	r0, #4
   a10bc:	4b65      	ldr	r3, [pc, #404]	; (a1254 <CL_RinseAlarmActon+0x2cc>)
   a10be:	4798      	blx	r3
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a10c0:	e0a5      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case ACID_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a10c2:	4b65      	ldr	r3, [pc, #404]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a10c4:	4798      	blx	r3
			sv_cntrl_buzzer();
   a10c6:	4b62      	ldr	r3, [pc, #392]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a10c8:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a10ca:	4b64      	ldr	r3, [pc, #400]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a10cc:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a10ce:	4b64      	ldr	r3, [pc, #400]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a10d0:	2206      	movs	r2, #6
   a10d2:	701a      	strb	r2, [r3, #0]
			break;
   a10d4:	e09b      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setyellowalarm();
   a10d6:	4b60      	ldr	r3, [pc, #384]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a10d8:	4798      	blx	r3
			sv_cntrl_buzzer();
   a10da:	4b5d      	ldr	r3, [pc, #372]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a10dc:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a10de:	4b5f      	ldr	r3, [pc, #380]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a10e0:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a10e2:	4b5f      	ldr	r3, [pc, #380]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a10e4:	2206      	movs	r2, #6
   a10e6:	701a      	strb	r2, [r3, #0]
			break;
   a10e8:	e091      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a10ea:	4b5b      	ldr	r3, [pc, #364]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a10ec:	4798      	blx	r3
				sv_cntrl_buzzer();
   a10ee:	4b58      	ldr	r3, [pc, #352]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a10f0:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a10f2:	4b5a      	ldr	r3, [pc, #360]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a10f4:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a10f6:	4b5a      	ldr	r3, [pc, #360]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a10f8:	2206      	movs	r2, #6
   a10fa:	701a      	strb	r2, [r3, #0]
			break;
   a10fc:	e087      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a10fe:	4b56      	ldr	r3, [pc, #344]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1100:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1102:	4b53      	ldr	r3, [pc, #332]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1104:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1106:	4b55      	ldr	r3, [pc, #340]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1108:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a110a:	4b55      	ldr	r3, [pc, #340]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a110c:	2206      	movs	r2, #6
   a110e:	701a      	strb	r2, [r3, #0]
			break;
   a1110:	e07d      	b.n	a120e <CL_RinseAlarmActon+0x286>
			break;*/
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a1112:	4b51      	ldr	r3, [pc, #324]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1114:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1116:	4b4e      	ldr	r3, [pc, #312]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1118:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a111a:	4b50      	ldr	r3, [pc, #320]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a111c:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a111e:	4b50      	ldr	r3, [pc, #320]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1120:	2206      	movs	r2, #6
   a1122:	701a      	strb	r2, [r3, #0]
			break;
   a1124:	e073      	b.n	a120e <CL_RinseAlarmActon+0x286>
		//	Cl_Rinse_StopRinse();
		//	cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
		//	break;
			
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a1126:	4b4c      	ldr	r3, [pc, #304]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1128:	4798      	blx	r3
			sv_cntrl_buzzer();
   a112a:	4b49      	ldr	r3, [pc, #292]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a112c:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a112e:	4b4b      	ldr	r3, [pc, #300]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1130:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1132:	4b4b      	ldr	r3, [pc, #300]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1134:	2206      	movs	r2, #6
   a1136:	701a      	strb	r2, [r3, #0]
			break;
   a1138:	e069      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   a113a:	4b47      	ldr	r3, [pc, #284]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a113c:	4798      	blx	r3
					sv_cntrl_buzzer();
   a113e:	4b44      	ldr	r3, [pc, #272]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1140:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a1142:	4b46      	ldr	r3, [pc, #280]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1144:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a1146:	4b45      	ldr	r3, [pc, #276]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1148:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a114a:	4b45      	ldr	r3, [pc, #276]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a114c:	2206      	movs	r2, #6
   a114e:	701a      	strb	r2, [r3, #0]
			break;
   a1150:	e05d      	b.n	a120e <CL_RinseAlarmActon+0x286>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   a1152:	4b41      	ldr	r3, [pc, #260]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1154:	4798      	blx	r3
			sv_cntrl_buzzer();
   a1156:	4b3e      	ldr	r3, [pc, #248]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1158:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a115a:	4b40      	ldr	r3, [pc, #256]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a115c:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a115e:	4b40      	ldr	r3, [pc, #256]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1160:	2206      	movs	r2, #6
   a1162:	701a      	strb	r2, [r3, #0]
			break;
   a1164:	e053      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a1166:	4b3c      	ldr	r3, [pc, #240]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1168:	4798      	blx	r3
				sv_cntrl_buzzer();
   a116a:	4b39      	ldr	r3, [pc, #228]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a116c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a116e:	4b3b      	ldr	r3, [pc, #236]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1170:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1172:	4b3b      	ldr	r3, [pc, #236]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1174:	2206      	movs	r2, #6
   a1176:	701a      	strb	r2, [r3, #0]
			break;
   a1178:	e049      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a117a:	4b37      	ldr	r3, [pc, #220]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a117c:	4798      	blx	r3
				sv_cntrl_buzzer();
   a117e:	4b34      	ldr	r3, [pc, #208]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1180:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1182:	4b36      	ldr	r3, [pc, #216]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1184:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a1186:	4b36      	ldr	r3, [pc, #216]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1188:	2206      	movs	r2, #6
   a118a:	701a      	strb	r2, [r3, #0]
			break;
   a118c:	e03f      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   a118e:	4b32      	ldr	r3, [pc, #200]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a1190:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1192:	4b2f      	ldr	r3, [pc, #188]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a1194:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a1196:	4b31      	ldr	r3, [pc, #196]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a1198:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a119a:	4b31      	ldr	r3, [pc, #196]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a119c:	2206      	movs	r2, #6
   a119e:	701a      	strb	r2, [r3, #0]
			break;
   a11a0:	e035      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   a11a2:	4b2d      	ldr	r3, [pc, #180]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a11a4:	4798      	blx	r3
				sv_cntrl_buzzer();
   a11a6:	4b2a      	ldr	r3, [pc, #168]	; (a1250 <CL_RinseAlarmActon+0x2c8>)
   a11a8:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a11aa:	4b2c      	ldr	r3, [pc, #176]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11ac:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11ae:	4b2c      	ldr	r3, [pc, #176]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11b0:	2206      	movs	r2, #6
   a11b2:	701a      	strb	r2, [r3, #0]
			break;
   a11b4:	e02b      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   a11b6:	4b29      	ldr	r3, [pc, #164]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11b8:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11ba:	4b29      	ldr	r3, [pc, #164]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11bc:	2206      	movs	r2, #6
   a11be:	701a      	strb	r2, [r3, #0]
			break;
   a11c0:	e025      	b.n	a120e <CL_RinseAlarmActon+0x286>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   a11c2:	4b26      	ldr	r3, [pc, #152]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11c4:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11c6:	4b26      	ldr	r3, [pc, #152]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11c8:	2206      	movs	r2, #6
   a11ca:	701a      	strb	r2, [r3, #0]
			break;
   a11cc:	e01f      	b.n	a120e <CL_RinseAlarmActon+0x286>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   a11ce:	4b23      	ldr	r3, [pc, #140]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11d0:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11d2:	4b23      	ldr	r3, [pc, #140]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11d4:	2206      	movs	r2, #6
   a11d6:	701a      	strb	r2, [r3, #0]
			break;
   a11d8:	e019      	b.n	a120e <CL_RinseAlarmActon+0x286>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   a11da:	4b20      	ldr	r3, [pc, #128]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11dc:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11de:	4b20      	ldr	r3, [pc, #128]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11e0:	2206      	movs	r2, #6
   a11e2:	701a      	strb	r2, [r3, #0]
			break;
   a11e4:	e013      	b.n	a120e <CL_RinseAlarmActon+0x286>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
				sv_cntrl_setyellowalarm();                              // updated on 17.03.17
   a11e6:	4b1c      	ldr	r3, [pc, #112]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a11e8:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a11ea:	4b1c      	ldr	r3, [pc, #112]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11ec:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11ee:	4b1c      	ldr	r3, [pc, #112]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a11f0:	2206      	movs	r2, #6
   a11f2:	701a      	strb	r2, [r3, #0]
			break;
   a11f4:	e00b      	b.n	a120e <CL_RinseAlarmActon+0x286>
		//	NewAlarmId = _LEVEL_SWITCH_HIGH_TOGGLERATE;
			break;

			case BC_ALARM:
			
			sv_cntrl_setyellowalarm();                             
   a11f6:	4b18      	ldr	r3, [pc, #96]	; (a1258 <CL_RinseAlarmActon+0x2d0>)
   a11f8:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a11fa:	4b18      	ldr	r3, [pc, #96]	; (a125c <CL_RinseAlarmActon+0x2d4>)
   a11fc:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a11fe:	4b18      	ldr	r3, [pc, #96]	; (a1260 <CL_RinseAlarmActon+0x2d8>)
   a1200:	2206      	movs	r2, #6
   a1202:	701a      	strb	r2, [r3, #0]
			
			break;
   a1204:	e003      	b.n	a120e <CL_RinseAlarmActon+0x286>
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a1206:	2300      	movs	r3, #0
   a1208:	71fb      	strb	r3, [r7, #7]
			break;
   a120a:	e000      	b.n	a120e <CL_RinseAlarmActon+0x286>
// 					Cl_Rinse_StopRinse();
// 					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
// 			break;

			case DE_CHAMBER_LOW: //23
			break;
   a120c:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a120e:	79fb      	ldrb	r3, [r7, #7]
   a1210:	2b00      	cmp	r3, #0
   a1212:	d013      	beq.n	a123c <CL_RinseAlarmActon+0x2b4>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a1214:	79fb      	ldrb	r3, [r7, #7]
   a1216:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1218:	2301      	movs	r3, #1
   a121a:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a121c:	2302      	movs	r3, #2
   a121e:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a1220:	2307      	movs	r3, #7
   a1222:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a1224:	f107 0108 	add.w	r1, r7, #8
   a1228:	7bfb      	ldrb	r3, [r7, #15]
   a122a:	2203      	movs	r2, #3
   a122c:	4618      	mov	r0, r3
   a122e:	4b0d      	ldr	r3, [pc, #52]	; (a1264 <CL_RinseAlarmActon+0x2dc>)
   a1230:	4798      	blx	r3
   a1232:	4603      	mov	r3, r0
   a1234:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a1236:	200a      	movs	r0, #10
   a1238:	4b0b      	ldr	r3, [pc, #44]	; (a1268 <CL_RinseAlarmActon+0x2e0>)
   a123a:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a123c:	4a0b      	ldr	r2, [pc, #44]	; (a126c <CL_RinseAlarmActon+0x2e4>)
   a123e:	79fb      	ldrb	r3, [r7, #7]
   a1240:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a1242:	2300      	movs	r3, #0
}
   a1244:	4618      	mov	r0, r3
   a1246:	3718      	adds	r7, #24
   a1248:	46bd      	mov	sp, r7
   a124a:	bd80      	pop	{r7, pc}
   a124c:	00097749 	.word	0x00097749
   a1250:	00097785 	.word	0x00097785
   a1254:	00091a75 	.word	0x00091a75
   a1258:	0009775d 	.word	0x0009775d
   a125c:	000a1a51 	.word	0x000a1a51
   a1260:	2007285e 	.word	0x2007285e
   a1264:	0009926d 	.word	0x0009926d
   a1268:	000918fd 	.word	0x000918fd
   a126c:	20072880 	.word	0x20072880

000a1270 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a1270:	b580      	push	{r7, lr}
   a1272:	b086      	sub	sp, #24
   a1274:	af00      	add	r7, sp, #0
   a1276:	4603      	mov	r3, r0
   a1278:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a127a:	2300      	movs	r3, #0
   a127c:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a127e:	f107 030c 	add.w	r3, r7, #12
   a1282:	2100      	movs	r1, #0
   a1284:	460a      	mov	r2, r1
   a1286:	801a      	strh	r2, [r3, #0]
   a1288:	460a      	mov	r2, r1
   a128a:	709a      	strb	r2, [r3, #2]
   a128c:	2300      	movs	r3, #0
   a128e:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1290:	234d      	movs	r3, #77	; 0x4d
   a1292:	73fb      	strb	r3, [r7, #15]
			if(cl_rinsealarmId != _NO_ALARM)
   a1294:	79fb      	ldrb	r3, [r7, #7]
   a1296:	2b00      	cmp	r3, #0
   a1298:	d013      	beq.n	a12c2 <Cl_RinseSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a129a:	79fb      	ldrb	r3, [r7, #7]
   a129c:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a129e:	2301      	movs	r3, #1
   a12a0:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a12a2:	2302      	movs	r3, #2
   a12a4:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a12a6:	2307      	movs	r3, #7
   a12a8:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a12aa:	f107 010c 	add.w	r1, r7, #12
   a12ae:	7bfb      	ldrb	r3, [r7, #15]
   a12b0:	2203      	movs	r2, #3
   a12b2:	4618      	mov	r0, r3
   a12b4:	4b05      	ldr	r3, [pc, #20]	; (a12cc <Cl_RinseSendAlarm+0x5c>)
   a12b6:	4798      	blx	r3
   a12b8:	4603      	mov	r3, r0
   a12ba:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a12bc:	200a      	movs	r0, #10
   a12be:	4b04      	ldr	r3, [pc, #16]	; (a12d0 <Cl_RinseSendAlarm+0x60>)
   a12c0:	4798      	blx	r3

			 }
}
   a12c2:	bf00      	nop
   a12c4:	4618      	mov	r0, r3
   a12c6:	3718      	adds	r7, #24
   a12c8:	46bd      	mov	sp, r7
   a12ca:	bd80      	pop	{r7, pc}
   a12cc:	0009926d 	.word	0x0009926d
   a12d0:	000918fd 	.word	0x000918fd

000a12d4 <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a12d4:	b580      	push	{r7, lr}
   a12d6:	b082      	sub	sp, #8
   a12d8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a12da:	2300      	movs	r3, #0
   a12dc:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a12de:	2001      	movs	r0, #1
   a12e0:	4b04      	ldr	r3, [pc, #16]	; (a12f4 <Cl_RinseFlowOn+0x20>)
   a12e2:	4798      	blx	r3
	cl_gfillinprogress = true;
   a12e4:	4b04      	ldr	r3, [pc, #16]	; (a12f8 <Cl_RinseFlowOn+0x24>)
   a12e6:	2201      	movs	r2, #1
   a12e8:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a12ea:	79fb      	ldrb	r3, [r7, #7]
	
}
   a12ec:	4618      	mov	r0, r3
   a12ee:	3708      	adds	r7, #8
   a12f0:	46bd      	mov	sp, r7
   a12f2:	bd80      	pop	{r7, pc}
   a12f4:	000974f1 	.word	0x000974f1
   a12f8:	20072879 	.word	0x20072879

000a12fc <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a12fc:	b580      	push	{r7, lr}
   a12fe:	b082      	sub	sp, #8
   a1300:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1302:	2300      	movs	r3, #0
   a1304:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a1306:	2001      	movs	r0, #1
   a1308:	4b04      	ldr	r3, [pc, #16]	; (a131c <Cl_RinseFlowOff+0x20>)
   a130a:	4798      	blx	r3
	cl_gfillinprogress = false;
   a130c:	4b04      	ldr	r3, [pc, #16]	; (a1320 <Cl_RinseFlowOff+0x24>)
   a130e:	2200      	movs	r2, #0
   a1310:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a1312:	79fb      	ldrb	r3, [r7, #7]
	
}
   a1314:	4618      	mov	r0, r3
   a1316:	3708      	adds	r7, #8
   a1318:	46bd      	mov	sp, r7
   a131a:	bd80      	pop	{r7, pc}
   a131c:	00097511 	.word	0x00097511
   a1320:	20072879 	.word	0x20072879

000a1324 <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a1324:	b580      	push	{r7, lr}
   a1326:	b082      	sub	sp, #8
   a1328:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a132a:	2300      	movs	r3, #0
   a132c:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a132e:	2005      	movs	r0, #5
   a1330:	4b04      	ldr	r3, [pc, #16]	; (a1344 <Cl_RinseStop+0x20>)
   a1332:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a1334:	4b04      	ldr	r3, [pc, #16]	; (a1348 <Cl_RinseStop+0x24>)
   a1336:	4798      	blx	r3
	return Cl_RetVal;
   a1338:	79fb      	ldrb	r3, [r7, #7]
	
}
   a133a:	4618      	mov	r0, r3
   a133c:	3708      	adds	r7, #8
   a133e:	46bd      	mov	sp, r7
   a1340:	bd80      	pop	{r7, pc}
   a1342:	bf00      	nop
   a1344:	00083379 	.word	0x00083379
   a1348:	000974dd 	.word	0x000974dd
   a134c:	00000000 	.word	0x00000000

000a1350 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a1350:	b5f0      	push	{r4, r5, r6, r7, lr}
   a1352:	b089      	sub	sp, #36	; 0x24
   a1354:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a1356:	2300      	movs	r3, #0
   a1358:	77bb      	strb	r3, [r7, #30]
	StateDatatype data;
	Cl_Uint8Type count=0;
   a135a:	2300      	movs	r3, #0
   a135c:	77fb      	strb	r3, [r7, #31]
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0;
   a135e:	2300      	movs	r3, #0
   a1360:	81fb      	strh	r3, [r7, #14]
   a1362:	2300      	movs	r3, #0
   a1364:	83bb      	strh	r3, [r7, #28]
   a1366:	2300      	movs	r3, #0
   a1368:	81bb      	strh	r3, [r7, #12]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a136a:	463b      	mov	r3, r7
   a136c:	2200      	movs	r2, #0
   a136e:	601a      	str	r2, [r3, #0]
   a1370:	605a      	str	r2, [r3, #4]
   a1372:	609a      	str	r2, [r3, #8]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a1374:	4b7c      	ldr	r3, [pc, #496]	; (a1568 <Cl_Rinse_SendRinseStateData+0x218>)
   a1376:	681b      	ldr	r3, [r3, #0]
   a1378:	3301      	adds	r3, #1
   a137a:	4a7b      	ldr	r2, [pc, #492]	; (a1568 <Cl_Rinse_SendRinseStateData+0x218>)
   a137c:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a137e:	4b7a      	ldr	r3, [pc, #488]	; (a1568 <Cl_Rinse_SendRinseStateData+0x218>)
   a1380:	681b      	ldr	r3, [r3, #0]
   a1382:	2b04      	cmp	r3, #4
   a1384:	f340 818d 	ble.w	a16a2 <Cl_Rinse_SendRinseStateData+0x352>
	{
		return;
	}
	else
	{
		timecount = 0;
   a1388:	4b77      	ldr	r3, [pc, #476]	; (a1568 <Cl_Rinse_SendRinseStateData+0x218>)
   a138a:	2200      	movs	r2, #0
   a138c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a138e:	2301      	movs	r3, #1
   a1390:	703b      	strb	r3, [r7, #0]
	count++;
   a1392:	7ffb      	ldrb	r3, [r7, #31]
   a1394:	3301      	adds	r3, #1
   a1396:	77fb      	strb	r3, [r7, #31]
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a1398:	f107 030e 	add.w	r3, r7, #14
   a139c:	4619      	mov	r1, r3
   a139e:	2007      	movs	r0, #7
   a13a0:	4b72      	ldr	r3, [pc, #456]	; (a156c <Cl_Rinse_SendRinseStateData+0x21c>)
   a13a2:	4798      	blx	r3
		{
 			float cond_comp;
// 			float temp2;
// 			temp2 = temp * 0.8036;
			if (temp > 50)
   a13a4:	89fb      	ldrh	r3, [r7, #14]
   a13a6:	2b32      	cmp	r3, #50	; 0x32
   a13a8:	f240 8100 	bls.w	a15ac <Cl_Rinse_SendRinseStateData+0x25c>
			{
				//calibration_cond(temp2);
				cond =  -0.0001 * temp* temp  + 0.032 * temp  +0.91 + 0.4 ;
   a13ac:	89fb      	ldrh	r3, [r7, #14]
   a13ae:	461a      	mov	r2, r3
   a13b0:	4b6f      	ldr	r3, [pc, #444]	; (a1570 <Cl_Rinse_SendRinseStateData+0x220>)
   a13b2:	4610      	mov	r0, r2
   a13b4:	4798      	blx	r3
   a13b6:	4c6f      	ldr	r4, [pc, #444]	; (a1574 <Cl_Rinse_SendRinseStateData+0x224>)
   a13b8:	a361      	add	r3, pc, #388	; (adr r3, a1540 <Cl_Rinse_SendRinseStateData+0x1f0>)
   a13ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   a13be:	47a0      	blx	r4
   a13c0:	4603      	mov	r3, r0
   a13c2:	460c      	mov	r4, r1
   a13c4:	461d      	mov	r5, r3
   a13c6:	4626      	mov	r6, r4
   a13c8:	89fb      	ldrh	r3, [r7, #14]
   a13ca:	461a      	mov	r2, r3
   a13cc:	4b68      	ldr	r3, [pc, #416]	; (a1570 <Cl_Rinse_SendRinseStateData+0x220>)
   a13ce:	4610      	mov	r0, r2
   a13d0:	4798      	blx	r3
   a13d2:	4602      	mov	r2, r0
   a13d4:	460b      	mov	r3, r1
   a13d6:	4c67      	ldr	r4, [pc, #412]	; (a1574 <Cl_Rinse_SendRinseStateData+0x224>)
   a13d8:	4628      	mov	r0, r5
   a13da:	4631      	mov	r1, r6
   a13dc:	47a0      	blx	r4
   a13de:	4603      	mov	r3, r0
   a13e0:	460c      	mov	r4, r1
   a13e2:	461d      	mov	r5, r3
   a13e4:	4626      	mov	r6, r4
   a13e6:	89fb      	ldrh	r3, [r7, #14]
   a13e8:	461a      	mov	r2, r3
   a13ea:	4b61      	ldr	r3, [pc, #388]	; (a1570 <Cl_Rinse_SendRinseStateData+0x220>)
   a13ec:	4610      	mov	r0, r2
   a13ee:	4798      	blx	r3
   a13f0:	4c60      	ldr	r4, [pc, #384]	; (a1574 <Cl_Rinse_SendRinseStateData+0x224>)
   a13f2:	a355      	add	r3, pc, #340	; (adr r3, a1548 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a13f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   a13f8:	47a0      	blx	r4
   a13fa:	4603      	mov	r3, r0
   a13fc:	460c      	mov	r4, r1
   a13fe:	461a      	mov	r2, r3
   a1400:	4623      	mov	r3, r4
   a1402:	4c5d      	ldr	r4, [pc, #372]	; (a1578 <Cl_Rinse_SendRinseStateData+0x228>)
   a1404:	4628      	mov	r0, r5
   a1406:	4631      	mov	r1, r6
   a1408:	47a0      	blx	r4
   a140a:	4603      	mov	r3, r0
   a140c:	460c      	mov	r4, r1
   a140e:	4618      	mov	r0, r3
   a1410:	4621      	mov	r1, r4
   a1412:	4c59      	ldr	r4, [pc, #356]	; (a1578 <Cl_Rinse_SendRinseStateData+0x228>)
   a1414:	a34e      	add	r3, pc, #312	; (adr r3, a1550 <Cl_Rinse_SendRinseStateData+0x200>)
   a1416:	e9d3 2300 	ldrd	r2, r3, [r3]
   a141a:	47a0      	blx	r4
   a141c:	4603      	mov	r3, r0
   a141e:	460c      	mov	r4, r1
   a1420:	4618      	mov	r0, r3
   a1422:	4621      	mov	r1, r4
   a1424:	4c54      	ldr	r4, [pc, #336]	; (a1578 <Cl_Rinse_SendRinseStateData+0x228>)
   a1426:	a34c      	add	r3, pc, #304	; (adr r3, a1558 <Cl_Rinse_SendRinseStateData+0x208>)
   a1428:	e9d3 2300 	ldrd	r2, r3, [r3]
   a142c:	47a0      	blx	r4
   a142e:	4603      	mov	r3, r0
   a1430:	460c      	mov	r4, r1
   a1432:	4619      	mov	r1, r3
   a1434:	4622      	mov	r2, r4
   a1436:	4b51      	ldr	r3, [pc, #324]	; (a157c <Cl_Rinse_SendRinseStateData+0x22c>)
   a1438:	4608      	mov	r0, r1
   a143a:	4611      	mov	r1, r2
   a143c:	4798      	blx	r3
   a143e:	4602      	mov	r2, r0
   a1440:	4b4f      	ldr	r3, [pc, #316]	; (a1580 <Cl_Rinse_SendRinseStateData+0x230>)
   a1442:	601a      	str	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a1444:	f107 030c 	add.w	r3, r7, #12
   a1448:	4619      	mov	r1, r3
   a144a:	2014      	movs	r0, #20
   a144c:	4b47      	ldr	r3, [pc, #284]	; (a156c <Cl_Rinse_SendRinseStateData+0x21c>)
   a144e:	4798      	blx	r3
// 				res_temp_lookuptable(cal_data);
// 				tmp2 =	(tmp2*5 + res_temp_value)/6;
// 				uint16_t temp = tmp2/10;
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4 ;										// sensor offset
				temp = (float)sensordata /10;
   a1450:	89ba      	ldrh	r2, [r7, #12]
   a1452:	4b4c      	ldr	r3, [pc, #304]	; (a1584 <Cl_Rinse_SendRinseStateData+0x234>)
   a1454:	4610      	mov	r0, r2
   a1456:	4798      	blx	r3
   a1458:	4602      	mov	r2, r0
   a145a:	4b4b      	ldr	r3, [pc, #300]	; (a1588 <Cl_Rinse_SendRinseStateData+0x238>)
   a145c:	494b      	ldr	r1, [pc, #300]	; (a158c <Cl_Rinse_SendRinseStateData+0x23c>)
   a145e:	4610      	mov	r0, r2
   a1460:	4798      	blx	r3
   a1462:	4603      	mov	r3, r0
   a1464:	461a      	mov	r2, r3
   a1466:	4b4a      	ldr	r3, [pc, #296]	; (a1590 <Cl_Rinse_SendRinseStateData+0x240>)
   a1468:	4610      	mov	r0, r2
   a146a:	4798      	blx	r3
   a146c:	4603      	mov	r3, r0
   a146e:	b29b      	uxth	r3, r3
   a1470:	81fb      	strh	r3, [r7, #14]
				
				cond_comp= cond/(1+(temp/10-25.0)*0.021);
   a1472:	4b43      	ldr	r3, [pc, #268]	; (a1580 <Cl_Rinse_SendRinseStateData+0x230>)
   a1474:	681a      	ldr	r2, [r3, #0]
   a1476:	4b47      	ldr	r3, [pc, #284]	; (a1594 <Cl_Rinse_SendRinseStateData+0x244>)
   a1478:	4610      	mov	r0, r2
   a147a:	4798      	blx	r3
   a147c:	4605      	mov	r5, r0
   a147e:	460e      	mov	r6, r1
   a1480:	89fb      	ldrh	r3, [r7, #14]
   a1482:	4a45      	ldr	r2, [pc, #276]	; (a1598 <Cl_Rinse_SendRinseStateData+0x248>)
   a1484:	fba2 2303 	umull	r2, r3, r2, r3
   a1488:	08db      	lsrs	r3, r3, #3
   a148a:	b29b      	uxth	r3, r3
   a148c:	461a      	mov	r2, r3
   a148e:	4b38      	ldr	r3, [pc, #224]	; (a1570 <Cl_Rinse_SendRinseStateData+0x220>)
   a1490:	4610      	mov	r0, r2
   a1492:	4798      	blx	r3
   a1494:	4c41      	ldr	r4, [pc, #260]	; (a159c <Cl_Rinse_SendRinseStateData+0x24c>)
   a1496:	f04f 0200 	mov.w	r2, #0
   a149a:	4b41      	ldr	r3, [pc, #260]	; (a15a0 <Cl_Rinse_SendRinseStateData+0x250>)
   a149c:	47a0      	blx	r4
   a149e:	4603      	mov	r3, r0
   a14a0:	460c      	mov	r4, r1
   a14a2:	4618      	mov	r0, r3
   a14a4:	4621      	mov	r1, r4
   a14a6:	4c33      	ldr	r4, [pc, #204]	; (a1574 <Cl_Rinse_SendRinseStateData+0x224>)
   a14a8:	a32d      	add	r3, pc, #180	; (adr r3, a1560 <Cl_Rinse_SendRinseStateData+0x210>)
   a14aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   a14ae:	47a0      	blx	r4
   a14b0:	4603      	mov	r3, r0
   a14b2:	460c      	mov	r4, r1
   a14b4:	4618      	mov	r0, r3
   a14b6:	4621      	mov	r1, r4
   a14b8:	4c2f      	ldr	r4, [pc, #188]	; (a1578 <Cl_Rinse_SendRinseStateData+0x228>)
   a14ba:	f04f 0200 	mov.w	r2, #0
   a14be:	4b39      	ldr	r3, [pc, #228]	; (a15a4 <Cl_Rinse_SendRinseStateData+0x254>)
   a14c0:	47a0      	blx	r4
   a14c2:	4603      	mov	r3, r0
   a14c4:	460c      	mov	r4, r1
   a14c6:	461a      	mov	r2, r3
   a14c8:	4623      	mov	r3, r4
   a14ca:	4c37      	ldr	r4, [pc, #220]	; (a15a8 <Cl_Rinse_SendRinseStateData+0x258>)
   a14cc:	4628      	mov	r0, r5
   a14ce:	4631      	mov	r1, r6
   a14d0:	47a0      	blx	r4
   a14d2:	4603      	mov	r3, r0
   a14d4:	460c      	mov	r4, r1
   a14d6:	4619      	mov	r1, r3
   a14d8:	4622      	mov	r2, r4
   a14da:	4b28      	ldr	r3, [pc, #160]	; (a157c <Cl_Rinse_SendRinseStateData+0x22c>)
   a14dc:	4608      	mov	r0, r1
   a14de:	4611      	mov	r1, r2
   a14e0:	4798      	blx	r3
   a14e2:	4603      	mov	r3, r0
   a14e4:	61bb      	str	r3, [r7, #24]
// 											
// 											cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;
				
				}
				//data.fourbytedata = (cond_comp);
				data.fourbytedata = cond_comp;
   a14e6:	4b2a      	ldr	r3, [pc, #168]	; (a1590 <Cl_Rinse_SendRinseStateData+0x240>)
   a14e8:	69b8      	ldr	r0, [r7, #24]
   a14ea:	4798      	blx	r3
   a14ec:	4603      	mov	r3, r0
   a14ee:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a14f0:	7ffb      	ldrb	r3, [r7, #31]
   a14f2:	1c5a      	adds	r2, r3, #1
   a14f4:	77fa      	strb	r2, [r7, #31]
   a14f6:	7c3a      	ldrb	r2, [r7, #16]
   a14f8:	f107 0120 	add.w	r1, r7, #32
   a14fc:	440b      	add	r3, r1
   a14fe:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[1];
   a1502:	7ffb      	ldrb	r3, [r7, #31]
   a1504:	1c5a      	adds	r2, r3, #1
   a1506:	77fa      	strb	r2, [r7, #31]
   a1508:	7c7a      	ldrb	r2, [r7, #17]
   a150a:	f107 0120 	add.w	r1, r7, #32
   a150e:	440b      	add	r3, r1
   a1510:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[2];
   a1514:	7ffb      	ldrb	r3, [r7, #31]
   a1516:	1c5a      	adds	r2, r3, #1
   a1518:	77fa      	strb	r2, [r7, #31]
   a151a:	7cba      	ldrb	r2, [r7, #18]
   a151c:	f107 0120 	add.w	r1, r7, #32
   a1520:	440b      	add	r3, r1
   a1522:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[3];
   a1526:	7ffb      	ldrb	r3, [r7, #31]
   a1528:	1c5a      	adds	r2, r3, #1
   a152a:	77fa      	strb	r2, [r7, #31]
   a152c:	7cfa      	ldrb	r2, [r7, #19]
   a152e:	f107 0120 	add.w	r1, r7, #32
   a1532:	440b      	add	r3, r1
   a1534:	f803 2c20 	strb.w	r2, [r3, #-32]
   a1538:	e05e      	b.n	a15f8 <Cl_Rinse_SendRinseStateData+0x2a8>
   a153a:	bf00      	nop
   a153c:	f3af 8000 	nop.w
   a1540:	eb1c432d 	.word	0xeb1c432d
   a1544:	bf1a36e2 	.word	0xbf1a36e2
   a1548:	d2f1a9fc 	.word	0xd2f1a9fc
   a154c:	3fa0624d 	.word	0x3fa0624d
   a1550:	51eb851f 	.word	0x51eb851f
   a1554:	3fed1eb8 	.word	0x3fed1eb8
   a1558:	9999999a 	.word	0x9999999a
   a155c:	3fd99999 	.word	0x3fd99999
   a1560:	24dd2f1b 	.word	0x24dd2f1b
   a1564:	3f958106 	.word	0x3f958106
   a1568:	20072884 	.word	0x20072884
   a156c:	0008d61d 	.word	0x0008d61d
   a1570:	000a2b05 	.word	0x000a2b05
   a1574:	000a2bd1 	.word	0x000a2bd1
   a1578:	000a286d 	.word	0x000a286d
   a157c:	000a3195 	.word	0x000a3195
   a1580:	20072888 	.word	0x20072888
   a1584:	000a33a1 	.word	0x000a33a1
   a1588:	000a35b9 	.word	0x000a35b9
   a158c:	41200000 	.word	0x41200000
   a1590:	000a3829 	.word	0x000a3829
   a1594:	000a2b29 	.word	0x000a2b29
   a1598:	cccccccd 	.word	0xcccccccd
   a159c:	000a2869 	.word	0x000a2869
   a15a0:	40390000 	.word	0x40390000
   a15a4:	3ff00000 	.word	0x3ff00000
   a15a8:	000a2e25 	.word	0x000a2e25
				}
			else
			{
				data.fourbytedata = 0;
   a15ac:	2300      	movs	r3, #0
   a15ae:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a15b0:	7ffb      	ldrb	r3, [r7, #31]
   a15b2:	1c5a      	adds	r2, r3, #1
   a15b4:	77fa      	strb	r2, [r7, #31]
   a15b6:	7c3a      	ldrb	r2, [r7, #16]
   a15b8:	f107 0120 	add.w	r1, r7, #32
   a15bc:	440b      	add	r3, r1
   a15be:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[1];
   a15c2:	7ffb      	ldrb	r3, [r7, #31]
   a15c4:	1c5a      	adds	r2, r3, #1
   a15c6:	77fa      	strb	r2, [r7, #31]
   a15c8:	7c7a      	ldrb	r2, [r7, #17]
   a15ca:	f107 0120 	add.w	r1, r7, #32
   a15ce:	440b      	add	r3, r1
   a15d0:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[2];
   a15d4:	7ffb      	ldrb	r3, [r7, #31]
   a15d6:	1c5a      	adds	r2, r3, #1
   a15d8:	77fa      	strb	r2, [r7, #31]
   a15da:	7cba      	ldrb	r2, [r7, #18]
   a15dc:	f107 0120 	add.w	r1, r7, #32
   a15e0:	440b      	add	r3, r1
   a15e2:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[3];
   a15e6:	7ffb      	ldrb	r3, [r7, #31]
   a15e8:	1c5a      	adds	r2, r3, #1
   a15ea:	77fa      	strb	r2, [r7, #31]
   a15ec:	7cfa      	ldrb	r2, [r7, #19]
   a15ee:	f107 0120 	add.w	r1, r7, #32
   a15f2:	440b      	add	r3, r1
   a15f4:	f803 2c20 	strb.w	r2, [r3, #-32]
			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a15f8:	f107 030c 	add.w	r3, r7, #12
   a15fc:	4619      	mov	r1, r3
   a15fe:	2014      	movs	r0, #20
   a1600:	4b2a      	ldr	r3, [pc, #168]	; (a16ac <Cl_Rinse_SendRinseStateData+0x35c>)
   a1602:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;

				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);
   a1604:	89bb      	ldrh	r3, [r7, #12]
   a1606:	461a      	mov	r2, r3
   a1608:	f649 5308 	movw	r3, #40200	; 0x9d08
   a160c:	fb03 f302 	mul.w	r3, r3, r2
   a1610:	2b00      	cmp	r3, #0
   a1612:	da02      	bge.n	a161a <Cl_Rinse_SendRinseStateData+0x2ca>
   a1614:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   a1618:	33ff      	adds	r3, #255	; 0xff
   a161a:	141b      	asrs	r3, r3, #16
   a161c:	82fb      	strh	r3, [r7, #22]
// 				uint16_t temp = res_temp_value/10;
// //				temp = temp - 31 + 14;										// sensor offset
// //				temp = temp - 31 -20;										// sensor offset				
// //				tmp3 =(tmp3*5 + temp)/6;
// 				tmp3 = temp - 0.4;
				tmp3 = sensordata /10;
   a161e:	89bb      	ldrh	r3, [r7, #12]
   a1620:	4a23      	ldr	r2, [pc, #140]	; (a16b0 <Cl_Rinse_SendRinseStateData+0x360>)
   a1622:	fba2 2303 	umull	r2, r3, r2, r3
   a1626:	08db      	lsrs	r3, r3, #3
   a1628:	b29b      	uxth	r3, r3
   a162a:	461a      	mov	r2, r3
   a162c:	4b21      	ldr	r3, [pc, #132]	; (a16b4 <Cl_Rinse_SendRinseStateData+0x364>)
   a162e:	4610      	mov	r0, r2
   a1630:	4798      	blx	r3
   a1632:	4602      	mov	r2, r0
   a1634:	4b20      	ldr	r3, [pc, #128]	; (a16b8 <Cl_Rinse_SendRinseStateData+0x368>)
   a1636:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a1638:	4b1f      	ldr	r3, [pc, #124]	; (a16b8 <Cl_Rinse_SendRinseStateData+0x368>)
   a163a:	681a      	ldr	r2, [r3, #0]
   a163c:	4b1f      	ldr	r3, [pc, #124]	; (a16bc <Cl_Rinse_SendRinseStateData+0x36c>)
   a163e:	4610      	mov	r0, r2
   a1640:	4798      	blx	r3
   a1642:	4603      	mov	r3, r0
   a1644:	b29b      	uxth	r3, r3
   a1646:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a1648:	7ffb      	ldrb	r3, [r7, #31]
   a164a:	1c5a      	adds	r2, r3, #1
   a164c:	77fa      	strb	r2, [r7, #31]
   a164e:	7c3a      	ldrb	r2, [r7, #16]
   a1650:	f107 0120 	add.w	r1, r7, #32
   a1654:	440b      	add	r3, r1
   a1656:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[1];
   a165a:	7ffb      	ldrb	r3, [r7, #31]
   a165c:	1c5a      	adds	r2, r3, #1
   a165e:	77fa      	strb	r2, [r7, #31]
   a1660:	7c7a      	ldrb	r2, [r7, #17]
   a1662:	f107 0120 	add.w	r1, r7, #32
   a1666:	440b      	add	r3, r1
   a1668:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[2];
   a166c:	7ffb      	ldrb	r3, [r7, #31]
   a166e:	1c5a      	adds	r2, r3, #1
   a1670:	77fa      	strb	r2, [r7, #31]
   a1672:	7cba      	ldrb	r2, [r7, #18]
   a1674:	f107 0120 	add.w	r1, r7, #32
   a1678:	440b      	add	r3, r1
   a167a:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[3];
   a167e:	7ffb      	ldrb	r3, [r7, #31]
   a1680:	1c5a      	adds	r2, r3, #1
   a1682:	77fa      	strb	r2, [r7, #31]
   a1684:	7cfa      	ldrb	r2, [r7, #19]
   a1686:	f107 0120 	add.w	r1, r7, #32
   a168a:	440b      	add	r3, r1
   a168c:	f803 2c20 	strb.w	r2, [r3, #-32]
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a1690:	7ffa      	ldrb	r2, [r7, #31]
   a1692:	463b      	mov	r3, r7
   a1694:	4619      	mov	r1, r3
   a1696:	202a      	movs	r0, #42	; 0x2a
   a1698:	4b09      	ldr	r3, [pc, #36]	; (a16c0 <Cl_Rinse_SendRinseStateData+0x370>)
   a169a:	4798      	blx	r3
   a169c:	4603      	mov	r3, r0
   a169e:	77bb      	strb	r3, [r7, #30]
   a16a0:	e000      	b.n	a16a4 <Cl_Rinse_SendRinseStateData+0x354>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   a16a2:	bf00      	nop
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
		

}
   a16a4:	4618      	mov	r0, r3
   a16a6:	3724      	adds	r7, #36	; 0x24
   a16a8:	46bd      	mov	sp, r7
   a16aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a16ac:	0008d61d 	.word	0x0008d61d
   a16b0:	cccccccd 	.word	0xcccccccd
   a16b4:	000a33a9 	.word	0x000a33a9
   a16b8:	2007288c 	.word	0x2007288c
   a16bc:	000a3829 	.word	0x000a3829
   a16c0:	0009926d 	.word	0x0009926d

000a16c4 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a16c4:	b590      	push	{r4, r7, lr}
   a16c6:	b089      	sub	sp, #36	; 0x24
   a16c8:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a16ca:	2300      	movs	r3, #0
   a16cc:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a16ce:	234d      	movs	r3, #77	; 0x4d
   a16d0:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a16d2:	2300      	movs	r3, #0
   a16d4:	60bb      	str	r3, [r7, #8]
				
				Cl_Uint8Type data = 0;
   a16d6:	2300      	movs	r3, #0
   a16d8:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a16da:	2300      	movs	r3, #0
   a16dc:	80fb      	strh	r3, [r7, #6]
   a16de:	2300      	movs	r3, #0
   a16e0:	80bb      	strh	r3, [r7, #4]
   a16e2:	2300      	movs	r3, #0
   a16e4:	807b      	strh	r3, [r7, #2]
   a16e6:	2300      	movs	r3, #0
   a16e8:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a16ea:	2301      	movs	r3, #1
   a16ec:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();
				SetHeaterState(CL_HEATER_STATE_OFF);
   a16ee:	2004      	movs	r0, #4
   a16f0:	4b20      	ldr	r3, [pc, #128]	; (a1774 <Cl_Rinse_StartRinse+0xb0>)
   a16f2:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a16f4:	2001      	movs	r0, #1
   a16f6:	4b20      	ldr	r3, [pc, #128]	; (a1778 <Cl_Rinse_StartRinse+0xb4>)
   a16f8:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a16fa:	1dbb      	adds	r3, r7, #6
   a16fc:	4619      	mov	r1, r3
   a16fe:	2020      	movs	r0, #32
   a1700:	4b1e      	ldr	r3, [pc, #120]	; (a177c <Cl_Rinse_StartRinse+0xb8>)
   a1702:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a1704:	1d3b      	adds	r3, r7, #4
   a1706:	4619      	mov	r1, r3
   a1708:	2021      	movs	r0, #33	; 0x21
   a170a:	4b1c      	ldr	r3, [pc, #112]	; (a177c <Cl_Rinse_StartRinse+0xb8>)
   a170c:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a170e:	1cbb      	adds	r3, r7, #2
   a1710:	4619      	mov	r1, r3
   a1712:	2003      	movs	r0, #3
   a1714:	4b19      	ldr	r3, [pc, #100]	; (a177c <Cl_Rinse_StartRinse+0xb8>)
   a1716:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a1718:	463b      	mov	r3, r7
   a171a:	4619      	mov	r1, r3
   a171c:	2004      	movs	r0, #4
   a171e:	4b17      	ldr	r3, [pc, #92]	; (a177c <Cl_Rinse_StartRinse+0xb8>)
   a1720:	4798      	blx	r3
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )
   a1722:	88fb      	ldrh	r3, [r7, #6]
   a1724:	2b00      	cmp	r3, #0
   a1726:	d104      	bne.n	a1732 <Cl_Rinse_StartRinse+0x6e>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a1728:	2029      	movs	r0, #41	; 0x29
   a172a:	4b15      	ldr	r3, [pc, #84]	; (a1780 <Cl_Rinse_StartRinse+0xbc>)
   a172c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a172e:	2300      	movs	r3, #0
   a1730:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a1732:	88bb      	ldrh	r3, [r7, #4]
   a1734:	2b00      	cmp	r3, #0
   a1736:	d104      	bne.n	a1742 <Cl_Rinse_StartRinse+0x7e>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a1738:	202b      	movs	r0, #43	; 0x2b
   a173a:	4b11      	ldr	r3, [pc, #68]	; (a1780 <Cl_Rinse_StartRinse+0xbc>)
   a173c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a173e:	2300      	movs	r3, #0
   a1740:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a1742:	887b      	ldrh	r3, [r7, #2]
   a1744:	2b01      	cmp	r3, #1
   a1746:	d104      	bne.n	a1752 <Cl_Rinse_StartRinse+0x8e>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a1748:	2003      	movs	r0, #3
   a174a:	4b0d      	ldr	r3, [pc, #52]	; (a1780 <Cl_Rinse_StartRinse+0xbc>)
   a174c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a174e:	2300      	movs	r3, #0
   a1750:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a1752:	883b      	ldrh	r3, [r7, #0]
   a1754:	2b01      	cmp	r3, #1
   a1756:	d104      	bne.n	a1762 <Cl_Rinse_StartRinse+0x9e>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a1758:	2004      	movs	r0, #4
   a175a:	4b09      	ldr	r3, [pc, #36]	; (a1780 <Cl_Rinse_StartRinse+0xbc>)
   a175c:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a175e:	2300      	movs	r3, #0
   a1760:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a1762:	7dfb      	ldrb	r3, [r7, #23]
   a1764:	f083 0301 	eor.w	r3, r3, #1
   a1768:	b2db      	uxtb	r3, r3
   a176a:	2b00      	cmp	r3, #0
   a176c:	d00a      	beq.n	a1784 <Cl_Rinse_StartRinse+0xc0>
				 {
					 return CL_REJECTED;
   a176e:	2303      	movs	r3, #3
   a1770:	e139      	b.n	a19e6 <Cl_Rinse_StartRinse+0x322>
   a1772:	bf00      	nop
   a1774:	00088a8d 	.word	0x00088a8d
   a1778:	00091f6d 	.word	0x00091f6d
   a177c:	0008d61d 	.word	0x0008d61d
   a1780:	000a1271 	.word	0x000a1271
				 }
				 
				sv_cntrl_resetgreenalarm();
   a1784:	4b9a      	ldr	r3, [pc, #616]	; (a19f0 <Cl_Rinse_StartRinse+0x32c>)
   a1786:	4798      	blx	r3
				Cl_RinseFlowOn();
   a1788:	4b9a      	ldr	r3, [pc, #616]	; (a19f4 <Cl_Rinse_StartRinse+0x330>)
   a178a:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a178c:	2002      	movs	r0, #2
   a178e:	4b9a      	ldr	r3, [pc, #616]	; (a19f8 <Cl_Rinse_StartRinse+0x334>)
   a1790:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a1792:	2003      	movs	r0, #3
   a1794:	4b98      	ldr	r3, [pc, #608]	; (a19f8 <Cl_Rinse_StartRinse+0x334>)
   a1796:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a1798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a179c:	2002      	movs	r0, #2
   a179e:	4b97      	ldr	r3, [pc, #604]	; (a19fc <Cl_Rinse_StartRinse+0x338>)
   a17a0:	4798      	blx	r3
   a17a2:	4603      	mov	r3, r0
   a17a4:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a17a6:	f240 414c 	movw	r1, #1100	; 0x44c
   a17aa:	2001      	movs	r0, #1
   a17ac:	4b93      	ldr	r3, [pc, #588]	; (a19fc <Cl_Rinse_StartRinse+0x338>)
   a17ae:	4798      	blx	r3
   a17b0:	4603      	mov	r3, r0
   a17b2:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a17b4:	2001      	movs	r0, #1
   a17b6:	4b92      	ldr	r3, [pc, #584]	; (a1a00 <Cl_Rinse_StartRinse+0x33c>)
   a17b8:	4798      	blx	r3
   a17ba:	4603      	mov	r3, r0
   a17bc:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a17be:	2002      	movs	r0, #2
   a17c0:	4b8f      	ldr	r3, [pc, #572]	; (a1a00 <Cl_Rinse_StartRinse+0x33c>)
   a17c2:	4798      	blx	r3
   a17c4:	4603      	mov	r3, r0
   a17c6:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a17c8:	2300      	movs	r3, #0
   a17ca:	827b      	strh	r3, [r7, #18]
				potvalue = (670 * 1024)/10000;                                 // 600
   a17cc:	2344      	movs	r3, #68	; 0x44
   a17ce:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a17d0:	8a7b      	ldrh	r3, [r7, #18]
   a17d2:	4618      	mov	r0, r3
   a17d4:	4b8b      	ldr	r3, [pc, #556]	; (a1a04 <Cl_Rinse_StartRinse+0x340>)
   a17d6:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a17d8:	4b8b      	ldr	r3, [pc, #556]	; (a1a08 <Cl_Rinse_StartRinse+0x344>)
   a17da:	695b      	ldr	r3, [r3, #20]
   a17dc:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a17de:	4a8b      	ldr	r2, [pc, #556]	; (a1a0c <Cl_Rinse_StartRinse+0x348>)
   a17e0:	68fb      	ldr	r3, [r7, #12]
   a17e2:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a17e4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a17e8:	2001      	movs	r0, #1
   a17ea:	4b89      	ldr	r3, [pc, #548]	; (a1a10 <Cl_Rinse_StartRinse+0x34c>)
   a17ec:	4798      	blx	r3
					cl_wait(100);
   a17ee:	2064      	movs	r0, #100	; 0x64
   a17f0:	4b88      	ldr	r3, [pc, #544]	; (a1a14 <Cl_Rinse_StartRinse+0x350>)
   a17f2:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a17f4:	2100      	movs	r1, #0
   a17f6:	2002      	movs	r0, #2
   a17f8:	4b85      	ldr	r3, [pc, #532]	; (a1a10 <Cl_Rinse_StartRinse+0x34c>)
   a17fa:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a17fc:	4b86      	ldr	r3, [pc, #536]	; (a1a18 <Cl_Rinse_StartRinse+0x354>)
   a17fe:	4798      	blx	r3
					cl_wait(100);
   a1800:	2064      	movs	r0, #100	; 0x64
   a1802:	4b84      	ldr	r3, [pc, #528]	; (a1a14 <Cl_Rinse_StartRinse+0x350>)
   a1804:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a1806:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a180a:	2001      	movs	r0, #1
   a180c:	4b80      	ldr	r3, [pc, #512]	; (a1a10 <Cl_Rinse_StartRinse+0x34c>)
   a180e:	4798      	blx	r3
					cl_wait(100);
   a1810:	2064      	movs	r0, #100	; 0x64
   a1812:	4b80      	ldr	r3, [pc, #512]	; (a1a14 <Cl_Rinse_StartRinse+0x350>)
   a1814:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a1816:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a181a:	2001      	movs	r0, #1
   a181c:	4b7c      	ldr	r3, [pc, #496]	; (a1a10 <Cl_Rinse_StartRinse+0x34c>)
   a181e:	4798      	blx	r3
					cl_wait(100);
   a1820:	2064      	movs	r0, #100	; 0x64
   a1822:	4b7c      	ldr	r3, [pc, #496]	; (a1a14 <Cl_Rinse_StartRinse+0x350>)
   a1824:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   a1826:	2196      	movs	r1, #150	; 0x96
   a1828:	2001      	movs	r0, #1
   a182a:	4b79      	ldr	r3, [pc, #484]	; (a1a10 <Cl_Rinse_StartRinse+0x34c>)
   a182c:	4798      	blx	r3
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a182e:	2000      	movs	r0, #0
   a1830:	4b7a      	ldr	r3, [pc, #488]	; (a1a1c <Cl_Rinse_StartRinse+0x358>)
   a1832:	4798      	blx	r3
   a1834:	4603      	mov	r3, r0
   a1836:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a1838:	2004      	movs	r0, #4
   a183a:	4b79      	ldr	r3, [pc, #484]	; (a1a20 <Cl_Rinse_StartRinse+0x35c>)
   a183c:	4798      	blx	r3
   a183e:	4603      	mov	r3, r0
   a1840:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a1842:	4b78      	ldr	r3, [pc, #480]	; (a1a24 <Cl_Rinse_StartRinse+0x360>)
   a1844:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a1846:	7dbb      	ldrb	r3, [r7, #22]
   a1848:	2b00      	cmp	r3, #0
   a184a:	f040 80cb 	bne.w	a19e4 <Cl_Rinse_StartRinse+0x320>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a184e:	4b76      	ldr	r3, [pc, #472]	; (a1a28 <Cl_Rinse_StartRinse+0x364>)
   a1850:	2200      	movs	r2, #0
   a1852:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a1854:	4b75      	ldr	r3, [pc, #468]	; (a1a2c <Cl_Rinse_StartRinse+0x368>)
   a1856:	2200      	movs	r2, #0
   a1858:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a185a:	4b75      	ldr	r3, [pc, #468]	; (a1a30 <Cl_Rinse_StartRinse+0x36c>)
   a185c:	2200      	movs	r2, #0
   a185e:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a1860:	4b74      	ldr	r3, [pc, #464]	; (a1a34 <Cl_Rinse_StartRinse+0x370>)
   a1862:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a1864:	2001      	movs	r0, #1
   a1866:	4b74      	ldr	r3, [pc, #464]	; (a1a38 <Cl_Rinse_StartRinse+0x374>)
   a1868:	4798      	blx	r3
   a186a:	4603      	mov	r3, r0
   a186c:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a186e:	2300      	movs	r3, #0
   a1870:	9300      	str	r3, [sp, #0]
   a1872:	f04f 0300 	mov.w	r3, #0
   a1876:	f04f 0200 	mov.w	r2, #0
   a187a:	2101      	movs	r1, #1
   a187c:	2001      	movs	r0, #1
   a187e:	4c6f      	ldr	r4, [pc, #444]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1880:	47a0      	blx	r4
   a1882:	4603      	mov	r3, r0
   a1884:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a1886:	2300      	movs	r3, #0
   a1888:	9300      	str	r3, [sp, #0]
   a188a:	f04f 0300 	mov.w	r3, #0
   a188e:	f04f 0200 	mov.w	r2, #0
   a1892:	2100      	movs	r1, #0
   a1894:	2029      	movs	r0, #41	; 0x29
   a1896:	4c69      	ldr	r4, [pc, #420]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1898:	47a0      	blx	r4
   a189a:	4603      	mov	r3, r0
   a189c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a189e:	2300      	movs	r3, #0
   a18a0:	9300      	str	r3, [sp, #0]
   a18a2:	f04f 0300 	mov.w	r3, #0
   a18a6:	f04f 0200 	mov.w	r2, #0
   a18aa:	2100      	movs	r1, #0
   a18ac:	202b      	movs	r0, #43	; 0x2b
   a18ae:	4c63      	ldr	r4, [pc, #396]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a18b0:	47a0      	blx	r4
   a18b2:	4603      	mov	r3, r0
   a18b4:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a18b6:	2300      	movs	r3, #0
   a18b8:	9300      	str	r3, [sp, #0]
   a18ba:	f04f 0300 	mov.w	r3, #0
   a18be:	f04f 0200 	mov.w	r2, #0
   a18c2:	2101      	movs	r1, #1
   a18c4:	2003      	movs	r0, #3
   a18c6:	4c5d      	ldr	r4, [pc, #372]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a18c8:	47a0      	blx	r4
   a18ca:	4603      	mov	r3, r0
   a18cc:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a18ce:	2300      	movs	r3, #0
   a18d0:	9300      	str	r3, [sp, #0]
   a18d2:	f04f 0300 	mov.w	r3, #0
   a18d6:	f04f 0200 	mov.w	r2, #0
   a18da:	2101      	movs	r1, #1
   a18dc:	2004      	movs	r0, #4
   a18de:	4c57      	ldr	r4, [pc, #348]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a18e0:	47a0      	blx	r4
   a18e2:	4603      	mov	r3, r0
   a18e4:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a18e6:	2300      	movs	r3, #0
   a18e8:	9300      	str	r3, [sp, #0]
   a18ea:	f04f 0300 	mov.w	r3, #0
   a18ee:	f04f 0200 	mov.w	r2, #0
   a18f2:	2100      	movs	r1, #0
   a18f4:	203d      	movs	r0, #61	; 0x3d
   a18f6:	4c51      	ldr	r4, [pc, #324]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a18f8:	47a0      	blx	r4
   a18fa:	4603      	mov	r3, r0
   a18fc:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a18fe:	2300      	movs	r3, #0
   a1900:	9300      	str	r3, [sp, #0]
   a1902:	f04f 0300 	mov.w	r3, #0
   a1906:	f04f 0200 	mov.w	r2, #0
   a190a:	2101      	movs	r1, #1
   a190c:	203e      	movs	r0, #62	; 0x3e
   a190e:	4c4b      	ldr	r4, [pc, #300]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1910:	47a0      	blx	r4
   a1912:	4603      	mov	r3, r0
   a1914:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a1916:	2300      	movs	r3, #0
   a1918:	9300      	str	r3, [sp, #0]
   a191a:	f04f 0300 	mov.w	r3, #0
   a191e:	f04f 0200 	mov.w	r2, #0
   a1922:	2100      	movs	r1, #0
   a1924:	201a      	movs	r0, #26
   a1926:	4c45      	ldr	r4, [pc, #276]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1928:	47a0      	blx	r4
   a192a:	4603      	mov	r3, r0
   a192c:	75bb      	strb	r3, [r7, #22]
					
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a192e:	2300      	movs	r3, #0
   a1930:	9300      	str	r3, [sp, #0]
   a1932:	f04f 0300 	mov.w	r3, #0
   a1936:	f04f 0200 	mov.w	r2, #0
   a193a:	2100      	movs	r1, #0
   a193c:	200d      	movs	r0, #13
   a193e:	4c3f      	ldr	r4, [pc, #252]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1940:	47a0      	blx	r4
   a1942:	4603      	mov	r3, r0
   a1944:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a1946:	2300      	movs	r3, #0
   a1948:	9300      	str	r3, [sp, #0]
   a194a:	f04f 0300 	mov.w	r3, #0
   a194e:	f04f 0200 	mov.w	r2, #0
   a1952:	2100      	movs	r1, #0
   a1954:	200c      	movs	r0, #12
   a1956:	4c39      	ldr	r4, [pc, #228]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a1958:	47a0      	blx	r4
   a195a:	4603      	mov	r3, r0
   a195c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a195e:	2300      	movs	r3, #0
   a1960:	9300      	str	r3, [sp, #0]
   a1962:	f04f 0300 	mov.w	r3, #0
   a1966:	4a36      	ldr	r2, [pc, #216]	; (a1a40 <Cl_Rinse_StartRinse+0x37c>)
   a1968:	2100      	movs	r1, #0
   a196a:	200e      	movs	r0, #14
   a196c:	4c33      	ldr	r4, [pc, #204]	; (a1a3c <Cl_Rinse_StartRinse+0x378>)
   a196e:	47a0      	blx	r4
   a1970:	4603      	mov	r3, r0
   a1972:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a1974:	2101      	movs	r1, #1
   a1976:	203d      	movs	r0, #61	; 0x3d
   a1978:	4b32      	ldr	r3, [pc, #200]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a197a:	4798      	blx	r3
   a197c:	4603      	mov	r3, r0
   a197e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a1980:	2101      	movs	r1, #1
   a1982:	203e      	movs	r0, #62	; 0x3e
   a1984:	4b2f      	ldr	r3, [pc, #188]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a1986:	4798      	blx	r3
   a1988:	4603      	mov	r3, r0
   a198a:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   a198c:	2101      	movs	r1, #1
   a198e:	2029      	movs	r0, #41	; 0x29
   a1990:	4b2c      	ldr	r3, [pc, #176]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a1992:	4798      	blx	r3
   a1994:	4603      	mov	r3, r0
   a1996:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   a1998:	2101      	movs	r1, #1
   a199a:	202b      	movs	r0, #43	; 0x2b
   a199c:	4b29      	ldr	r3, [pc, #164]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a199e:	4798      	blx	r3
   a19a0:	4603      	mov	r3, r0
   a19a2:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a19a4:	2101      	movs	r1, #1
   a19a6:	2003      	movs	r0, #3
   a19a8:	4b26      	ldr	r3, [pc, #152]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a19aa:	4798      	blx	r3
   a19ac:	4603      	mov	r3, r0
   a19ae:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a19b0:	2101      	movs	r1, #1
   a19b2:	2004      	movs	r0, #4
   a19b4:	4b23      	ldr	r3, [pc, #140]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a19b6:	4798      	blx	r3
   a19b8:	4603      	mov	r3, r0
   a19ba:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true);
   a19bc:	2101      	movs	r1, #1
   a19be:	201a      	movs	r0, #26
   a19c0:	4b20      	ldr	r3, [pc, #128]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a19c2:	4798      	blx	r3
   a19c4:	4603      	mov	r3, r0
   a19c6:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a19c8:	4b1f      	ldr	r3, [pc, #124]	; (a1a48 <Cl_Rinse_StartRinse+0x384>)
   a19ca:	781b      	ldrb	r3, [r3, #0]
   a19cc:	2b00      	cmp	r3, #0
   a19ce:	d005      	beq.n	a19dc <Cl_Rinse_StartRinse+0x318>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a19d0:	2101      	movs	r1, #1
   a19d2:	203c      	movs	r0, #60	; 0x3c
   a19d4:	4b1b      	ldr	r3, [pc, #108]	; (a1a44 <Cl_Rinse_StartRinse+0x380>)
   a19d6:	4798      	blx	r3
   a19d8:	4603      	mov	r3, r0
   a19da:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a19dc:	4b1b      	ldr	r3, [pc, #108]	; (a1a4c <Cl_Rinse_StartRinse+0x388>)
   a19de:	4798      	blx	r3
   a19e0:	4603      	mov	r3, r0
   a19e2:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a19e4:	2300      	movs	r3, #0
}
   a19e6:	4618      	mov	r0, r3
   a19e8:	371c      	adds	r7, #28
   a19ea:	46bd      	mov	sp, r7
   a19ec:	bd90      	pop	{r4, r7, pc}
   a19ee:	bf00      	nop
   a19f0:	000977c1 	.word	0x000977c1
   a19f4:	000a12d5 	.word	0x000a12d5
   a19f8:	000974f1 	.word	0x000974f1
   a19fc:	00097569 	.word	0x00097569
   a1a00:	00097451 	.word	0x00097451
   a1a04:	00097999 	.word	0x00097999
   a1a08:	20073194 	.word	0x20073194
   a1a0c:	200720f0 	.word	0x200720f0
   a1a10:	0009381d 	.word	0x0009381d
   a1a14:	000918fd 	.word	0x000918fd
   a1a18:	00093785 	.word	0x00093785
   a1a1c:	00091ead 	.word	0x00091ead
   a1a20:	00083379 	.word	0x00083379
   a1a24:	00097949 	.word	0x00097949
   a1a28:	20072864 	.word	0x20072864
   a1a2c:	20072870 	.word	0x20072870
   a1a30:	20072878 	.word	0x20072878
   a1a34:	0009763d 	.word	0x0009763d
   a1a38:	00091f6d 	.word	0x00091f6d
   a1a3c:	00082f01 	.word	0x00082f01
   a1a40:	44bb8000 	.word	0x44bb8000
   a1a44:	00082f5d 	.word	0x00082f5d
   a1a48:	200709ee 	.word	0x200709ee
   a1a4c:	000a0e5d 	.word	0x000a0e5d

000a1a50 <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a1a50:	b580      	push	{r7, lr}
   a1a52:	b082      	sub	sp, #8
   a1a54:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a1a56:	2300      	movs	r3, #0
   a1a58:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a1a5a:	2100      	movs	r1, #0
   a1a5c:	2001      	movs	r0, #1
   a1a5e:	4b3d      	ldr	r3, [pc, #244]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a60:	4798      	blx	r3
   a1a62:	4603      	mov	r3, r0
   a1a64:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a1a66:	2100      	movs	r1, #0
   a1a68:	203d      	movs	r0, #61	; 0x3d
   a1a6a:	4b3a      	ldr	r3, [pc, #232]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a6c:	4798      	blx	r3
   a1a6e:	4603      	mov	r3, r0
   a1a70:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a1a72:	2100      	movs	r1, #0
   a1a74:	203e      	movs	r0, #62	; 0x3e
   a1a76:	4b37      	ldr	r3, [pc, #220]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a78:	4798      	blx	r3
   a1a7a:	4603      	mov	r3, r0
   a1a7c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a1a7e:	2100      	movs	r1, #0
   a1a80:	200d      	movs	r0, #13
   a1a82:	4b34      	ldr	r3, [pc, #208]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a84:	4798      	blx	r3
   a1a86:	4603      	mov	r3, r0
   a1a88:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a1a8a:	2100      	movs	r1, #0
   a1a8c:	200c      	movs	r0, #12
   a1a8e:	4b31      	ldr	r3, [pc, #196]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a90:	4798      	blx	r3
   a1a92:	4603      	mov	r3, r0
   a1a94:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a1a96:	2100      	movs	r1, #0
   a1a98:	200d      	movs	r0, #13
   a1a9a:	4b2e      	ldr	r3, [pc, #184]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1a9c:	4798      	blx	r3
   a1a9e:	4603      	mov	r3, r0
   a1aa0:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a1aa2:	2100      	movs	r1, #0
   a1aa4:	2029      	movs	r0, #41	; 0x29
   a1aa6:	4b2b      	ldr	r3, [pc, #172]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1aa8:	4798      	blx	r3
   a1aaa:	4603      	mov	r3, r0
   a1aac:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a1aae:	2100      	movs	r1, #0
   a1ab0:	202b      	movs	r0, #43	; 0x2b
   a1ab2:	4b28      	ldr	r3, [pc, #160]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1ab4:	4798      	blx	r3
   a1ab6:	4603      	mov	r3, r0
   a1ab8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a1aba:	2100      	movs	r1, #0
   a1abc:	2003      	movs	r0, #3
   a1abe:	4b25      	ldr	r3, [pc, #148]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1ac0:	4798      	blx	r3
   a1ac2:	4603      	mov	r3, r0
   a1ac4:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a1ac6:	2100      	movs	r1, #0
   a1ac8:	2004      	movs	r0, #4
   a1aca:	4b22      	ldr	r3, [pc, #136]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1acc:	4798      	blx	r3
   a1ace:	4603      	mov	r3, r0
   a1ad0:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a1ad2:	2100      	movs	r1, #0
   a1ad4:	201a      	movs	r0, #26
   a1ad6:	4b1f      	ldr	r3, [pc, #124]	; (a1b54 <Cl_Rinse_StopRinse+0x104>)
   a1ad8:	4798      	blx	r3
   a1ada:	4603      	mov	r3, r0
   a1adc:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a1ade:	4b1e      	ldr	r3, [pc, #120]	; (a1b58 <Cl_Rinse_StopRinse+0x108>)
   a1ae0:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a1ae2:	4b1e      	ldr	r3, [pc, #120]	; (a1b5c <Cl_Rinse_StopRinse+0x10c>)
   a1ae4:	781b      	ldrb	r3, [r3, #0]
   a1ae6:	2b00      	cmp	r3, #0
   a1ae8:	d02e      	beq.n	a1b48 <Cl_Rinse_StopRinse+0xf8>
   a1aea:	4b1c      	ldr	r3, [pc, #112]	; (a1b5c <Cl_Rinse_StopRinse+0x10c>)
   a1aec:	781b      	ldrb	r3, [r3, #0]
   a1aee:	2b08      	cmp	r3, #8
   a1af0:	d02a      	beq.n	a1b48 <Cl_Rinse_StopRinse+0xf8>
   a1af2:	4b1a      	ldr	r3, [pc, #104]	; (a1b5c <Cl_Rinse_StopRinse+0x10c>)
   a1af4:	781b      	ldrb	r3, [r3, #0]
   a1af6:	2b06      	cmp	r3, #6
   a1af8:	d026      	beq.n	a1b48 <Cl_Rinse_StopRinse+0xf8>
				{
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a1afa:	4b19      	ldr	r3, [pc, #100]	; (a1b60 <Cl_Rinse_StopRinse+0x110>)
   a1afc:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a1afe:	4b19      	ldr	r3, [pc, #100]	; (a1b64 <Cl_Rinse_StopRinse+0x114>)
   a1b00:	2200      	movs	r2, #0
   a1b02:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a1b04:	4b18      	ldr	r3, [pc, #96]	; (a1b68 <Cl_Rinse_StopRinse+0x118>)
   a1b06:	2200      	movs	r2, #0
   a1b08:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a1b0a:	4b18      	ldr	r3, [pc, #96]	; (a1b6c <Cl_Rinse_StopRinse+0x11c>)
   a1b0c:	2200      	movs	r2, #0
   a1b0e:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a1b10:	4b17      	ldr	r3, [pc, #92]	; (a1b70 <Cl_Rinse_StopRinse+0x120>)
   a1b12:	2200      	movs	r2, #0
   a1b14:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a1b16:	2005      	movs	r0, #5
   a1b18:	4b16      	ldr	r3, [pc, #88]	; (a1b74 <Cl_Rinse_StopRinse+0x124>)
   a1b1a:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a1b1c:	200d      	movs	r0, #13
   a1b1e:	4b15      	ldr	r3, [pc, #84]	; (a1b74 <Cl_Rinse_StopRinse+0x124>)
   a1b20:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a1b22:	2100      	movs	r1, #0
   a1b24:	2004      	movs	r0, #4
   a1b26:	4b14      	ldr	r3, [pc, #80]	; (a1b78 <Cl_Rinse_StopRinse+0x128>)
   a1b28:	4798      	blx	r3
				sv_cntrl_poweroffheater();
   a1b2a:	4b14      	ldr	r3, [pc, #80]	; (a1b7c <Cl_Rinse_StopRinse+0x12c>)
   a1b2c:	4798      	blx	r3
				sv_prop_stopmixing();
   a1b2e:	4b14      	ldr	r3, [pc, #80]	; (a1b80 <Cl_Rinse_StopRinse+0x130>)
   a1b30:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a1b32:	4b0a      	ldr	r3, [pc, #40]	; (a1b5c <Cl_Rinse_StopRinse+0x10c>)
   a1b34:	2200      	movs	r2, #0
   a1b36:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a1b38:	1dbb      	adds	r3, r7, #6
   a1b3a:	2200      	movs	r2, #0
   a1b3c:	4619      	mov	r1, r3
   a1b3e:	2022      	movs	r0, #34	; 0x22
   a1b40:	4b10      	ldr	r3, [pc, #64]	; (a1b84 <Cl_Rinse_StopRinse+0x134>)
   a1b42:	4798      	blx	r3
   a1b44:	4603      	mov	r3, r0
   a1b46:	71fb      	strb	r3, [r7, #7]
				
					
				}
			
				return Cl_rinseretcode;
   a1b48:	79fb      	ldrb	r3, [r7, #7]
}
   a1b4a:	4618      	mov	r0, r3
   a1b4c:	3708      	adds	r7, #8
   a1b4e:	46bd      	mov	sp, r7
   a1b50:	bd80      	pop	{r7, pc}
   a1b52:	bf00      	nop
   a1b54:	00082f5d 	.word	0x00082f5d
   a1b58:	000a0e5d 	.word	0x000a0e5d
   a1b5c:	2007285e 	.word	0x2007285e
   a1b60:	0009763d 	.word	0x0009763d
   a1b64:	20072860 	.word	0x20072860
   a1b68:	20072864 	.word	0x20072864
   a1b6c:	20072870 	.word	0x20072870
   a1b70:	20072874 	.word	0x20072874
   a1b74:	00083379 	.word	0x00083379
   a1b78:	0009381d 	.word	0x0009381d
   a1b7c:	000974dd 	.word	0x000974dd
   a1b80:	000978e5 	.word	0x000978e5
   a1b84:	0009926d 	.word	0x0009926d

000a1b88 <Cl_Standby_Controller>:
 Cl_BoolType Cl_StbRinseOpenFillTimeOut = false;
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a1b88:	b580      	push	{r7, lr}
   a1b8a:	b088      	sub	sp, #32
   a1b8c:	af00      	add	r7, sp, #0
   a1b8e:	4603      	mov	r3, r0
   a1b90:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a1b92:	234d      	movs	r3, #77	; 0x4d
   a1b94:	77fb      	strb	r3, [r7, #31]
		Cl_Uint8Type data =0;
   a1b96:	2300      	movs	r3, #0
   a1b98:	773b      	strb	r3, [r7, #28]
		ClStbyAlarmIdType ClstbyAlarmId;
		
		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a1b9a:	f107 021d 	add.w	r2, r7, #29
   a1b9e:	79fb      	ldrb	r3, [r7, #7]
   a1ba0:	4611      	mov	r1, r2
   a1ba2:	4618      	mov	r0, r3
   a1ba4:	4bbd      	ldr	r3, [pc, #756]	; (a1e9c <Cl_Standby_Controller+0x314>)
   a1ba6:	4798      	blx	r3
   a1ba8:	4603      	mov	r3, r0
   a1baa:	77bb      	strb	r3, [r7, #30]
		switch(cl_stbystate)
   a1bac:	4bbc      	ldr	r3, [pc, #752]	; (a1ea0 <Cl_Standby_Controller+0x318>)
   a1bae:	781b      	ldrb	r3, [r3, #0]
   a1bb0:	2b0a      	cmp	r3, #10
   a1bb2:	f200 83ed 	bhi.w	a2390 <Cl_Standby_Controller+0x808>
   a1bb6:	a201      	add	r2, pc, #4	; (adr r2, a1bbc <Cl_Standby_Controller+0x34>)
   a1bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1bbc:	000a2391 	.word	0x000a2391
   a1bc0:	000a1be9 	.word	0x000a1be9
   a1bc4:	000a1ca1 	.word	0x000a1ca1
   a1bc8:	000a1f47 	.word	0x000a1f47
   a1bcc:	000a206b 	.word	0x000a206b
   a1bd0:	000a2149 	.word	0x000a2149
   a1bd4:	000a21fb 	.word	0x000a21fb
   a1bd8:	000a2281 	.word	0x000a2281
   a1bdc:	000a2309 	.word	0x000a2309
   a1be0:	000a2391 	.word	0x000a2391
   a1be4:	000a2391 	.word	0x000a2391
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a1be8:	7f7b      	ldrb	r3, [r7, #29]
   a1bea:	3b01      	subs	r3, #1
   a1bec:	2b0f      	cmp	r3, #15
   a1bee:	d853      	bhi.n	a1c98 <Cl_Standby_Controller+0x110>
   a1bf0:	a201      	add	r2, pc, #4	; (adr r2, a1bf8 <Cl_Standby_Controller+0x70>)
   a1bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1bf6:	bf00      	nop
   a1bf8:	000a1c39 	.word	0x000a1c39
   a1bfc:	000a1c99 	.word	0x000a1c99
   a1c00:	000a1c99 	.word	0x000a1c99
   a1c04:	000a1c99 	.word	0x000a1c99
   a1c08:	000a1c99 	.word	0x000a1c99
   a1c0c:	000a1c99 	.word	0x000a1c99
   a1c10:	000a1c99 	.word	0x000a1c99
   a1c14:	000a1c99 	.word	0x000a1c99
   a1c18:	000a1c99 	.word	0x000a1c99
   a1c1c:	000a1c99 	.word	0x000a1c99
   a1c20:	000a1c99 	.word	0x000a1c99
   a1c24:	000a1c99 	.word	0x000a1c99
   a1c28:	000a1c99 	.word	0x000a1c99
   a1c2c:	000a1c59 	.word	0x000a1c59
   a1c30:	000a1c63 	.word	0x000a1c63
   a1c34:	000a1c6d 	.word	0x000a1c6d
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a1c38:	2316      	movs	r3, #22
   a1c3a:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a1c3c:	2311      	movs	r3, #17
   a1c3e:	763b      	strb	r3, [r7, #24]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a1c40:	230e      	movs	r3, #14
   a1c42:	767b      	strb	r3, [r7, #25]
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1c44:	f107 0118 	add.w	r1, r7, #24
   a1c48:	7ffb      	ldrb	r3, [r7, #31]
   a1c4a:	2202      	movs	r2, #2
   a1c4c:	4618      	mov	r0, r3
   a1c4e:	4b95      	ldr	r3, [pc, #596]	; (a1ea4 <Cl_Standby_Controller+0x31c>)
   a1c50:	4798      	blx	r3
   a1c52:	4603      	mov	r3, r0
   a1c54:	77bb      	strb	r3, [r7, #30]
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a1c56:	e022      	b.n	a1c9e <Cl_Standby_Controller+0x116>
				case EVENT_STBY_SET_BLDPMP_ON:
					cl_bp_controller(CL_BP_EVENT_START,0);
   a1c58:	2100      	movs	r1, #0
   a1c5a:	2002      	movs	r0, #2
   a1c5c:	4b92      	ldr	r3, [pc, #584]	; (a1ea8 <Cl_Standby_Controller+0x320>)
   a1c5e:	4798      	blx	r3
				break;
   a1c60:	e01d      	b.n	a1c9e <Cl_Standby_Controller+0x116>
				case EVENT_STBY_SET_BLDPMP_OFF:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a1c62:	2100      	movs	r1, #0
   a1c64:	2004      	movs	r0, #4
   a1c66:	4b90      	ldr	r3, [pc, #576]	; (a1ea8 <Cl_Standby_Controller+0x320>)
   a1c68:	4798      	blx	r3
				break;
   a1c6a:	e018      	b.n	a1c9e <Cl_Standby_Controller+0x116>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a1c6c:	4b8f      	ldr	r3, [pc, #572]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1c6e:	7e1b      	ldrb	r3, [r3, #24]
   a1c70:	2b00      	cmp	r3, #0
   a1c72:	d013      	beq.n	a1c9c <Cl_Standby_Controller+0x114>
					{
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a1c74:	4b8d      	ldr	r3, [pc, #564]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1c76:	791b      	ldrb	r3, [r3, #4]
   a1c78:	743b      	strb	r3, [r7, #16]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a1c7a:	4b8c      	ldr	r3, [pc, #560]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1c7c:	795b      	ldrb	r3, [r3, #5]
   a1c7e:	747b      	strb	r3, [r7, #17]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a1c80:	4b8a      	ldr	r3, [pc, #552]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1c82:	799b      	ldrb	r3, [r3, #6]
   a1c84:	74bb      	strb	r3, [r7, #18]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a1c86:	4b89      	ldr	r3, [pc, #548]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1c88:	79db      	ldrb	r3, [r3, #7]
   a1c8a:	74fb      	strb	r3, [r7, #19]
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a1c8c:	8a3b      	ldrh	r3, [r7, #16]
   a1c8e:	4619      	mov	r1, r3
   a1c90:	2001      	movs	r0, #1
   a1c92:	4b85      	ldr	r3, [pc, #532]	; (a1ea8 <Cl_Standby_Controller+0x320>)
   a1c94:	4798      	blx	r3
						
					}
				break;
   a1c96:	e001      	b.n	a1c9c <Cl_Standby_Controller+0x114>
				default:
				break;	
   a1c98:	bf00      	nop
   a1c9a:	e37a      	b.n	a2392 <Cl_Standby_Controller+0x80a>
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
						
					}
				break;
   a1c9c:	bf00      	nop
				default:
				break;	
				}


				break;
   a1c9e:	e378      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a1ca0:	7f7b      	ldrb	r3, [r7, #29]
   a1ca2:	3b01      	subs	r3, #1
   a1ca4:	2b0c      	cmp	r3, #12
   a1ca6:	f200 8148 	bhi.w	a1f3a <Cl_Standby_Controller+0x3b2>
   a1caa:	a201      	add	r2, pc, #4	; (adr r2, a1cb0 <Cl_Standby_Controller+0x128>)
   a1cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1cb0:	000a1ef9 	.word	0x000a1ef9
   a1cb4:	000a1f3b 	.word	0x000a1f3b
   a1cb8:	000a1f3b 	.word	0x000a1f3b
   a1cbc:	000a1f3b 	.word	0x000a1f3b
   a1cc0:	000a1f3b 	.word	0x000a1f3b
   a1cc4:	000a1f19 	.word	0x000a1f19
   a1cc8:	000a1f2d 	.word	0x000a1f2d
   a1ccc:	000a1f3b 	.word	0x000a1f3b
   a1cd0:	000a1f01 	.word	0x000a1f01
   a1cd4:	000a1ced 	.word	0x000a1ced
   a1cd8:	000a1d75 	.word	0x000a1d75
   a1cdc:	000a1ce5 	.word	0x000a1ce5
   a1ce0:	000a1f3b 	.word	0x000a1f3b
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a1ce4:	4b6e      	ldr	r3, [pc, #440]	; (a1ea0 <Cl_Standby_Controller+0x318>)
   a1ce6:	2201      	movs	r2, #1
   a1ce8:	701a      	strb	r2, [r3, #0]
					break;
   a1cea:	e12b      	b.n	a1f44 <Cl_Standby_Controller+0x3bc>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a1cec:	4b6f      	ldr	r3, [pc, #444]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1cee:	7e1b      	ldrb	r3, [r3, #24]
   a1cf0:	2b00      	cmp	r3, #0
   a1cf2:	f000 8124 	beq.w	a1f3e <Cl_Standby_Controller+0x3b6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a1cf6:	4b6d      	ldr	r3, [pc, #436]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1cf8:	791b      	ldrb	r3, [r3, #4]
   a1cfa:	2b01      	cmp	r3, #1
   a1cfc:	d002      	beq.n	a1d04 <Cl_Standby_Controller+0x17c>
   a1cfe:	2b21      	cmp	r3, #33	; 0x21
   a1d00:	d017      	beq.n	a1d32 <Cl_Standby_Controller+0x1aa>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a1d02:	e036      	b.n	a1d72 <Cl_Standby_Controller+0x1ea>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a1d04:	2316      	movs	r3, #22
   a1d06:	77fb      	strb	r3, [r7, #31]
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a1d08:	2301      	movs	r3, #1
   a1d0a:	763b      	strb	r3, [r7, #24]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1d0c:	f107 0318 	add.w	r3, r7, #24
   a1d10:	3301      	adds	r3, #1
   a1d12:	4619      	mov	r1, r3
   a1d14:	2001      	movs	r0, #1
   a1d16:	4b66      	ldr	r3, [pc, #408]	; (a1eb0 <Cl_Standby_Controller+0x328>)
   a1d18:	4798      	blx	r3
   a1d1a:	4603      	mov	r3, r0
   a1d1c:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1d1e:	f107 0118 	add.w	r1, r7, #24
   a1d22:	7ffb      	ldrb	r3, [r7, #31]
   a1d24:	2202      	movs	r2, #2
   a1d26:	4618      	mov	r0, r3
   a1d28:	4b5e      	ldr	r3, [pc, #376]	; (a1ea4 <Cl_Standby_Controller+0x31c>)
   a1d2a:	4798      	blx	r3
   a1d2c:	4603      	mov	r3, r0
   a1d2e:	77bb      	strb	r3, [r7, #30]
									//cl_wait(100);
							break;
   a1d30:	e01f      	b.n	a1d72 <Cl_Standby_Controller+0x1ea>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a1d32:	2316      	movs	r3, #22
   a1d34:	77fb      	strb	r3, [r7, #31]
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a1d36:	2323      	movs	r3, #35	; 0x23
   a1d38:	763b      	strb	r3, [r7, #24]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a1d3a:	f107 0318 	add.w	r3, r7, #24
   a1d3e:	3301      	adds	r3, #1
   a1d40:	4619      	mov	r1, r3
   a1d42:	2001      	movs	r0, #1
   a1d44:	4b5a      	ldr	r3, [pc, #360]	; (a1eb0 <Cl_Standby_Controller+0x328>)
   a1d46:	4798      	blx	r3
   a1d48:	4603      	mov	r3, r0
   a1d4a:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a1d4c:	f107 0318 	add.w	r3, r7, #24
   a1d50:	3301      	adds	r3, #1
   a1d52:	4619      	mov	r1, r3
   a1d54:	2028      	movs	r0, #40	; 0x28
   a1d56:	4b56      	ldr	r3, [pc, #344]	; (a1eb0 <Cl_Standby_Controller+0x328>)
   a1d58:	4798      	blx	r3
   a1d5a:	4603      	mov	r3, r0
   a1d5c:	77bb      	strb	r3, [r7, #30]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1d5e:	f107 0118 	add.w	r1, r7, #24
   a1d62:	7ffb      	ldrb	r3, [r7, #31]
   a1d64:	2202      	movs	r2, #2
   a1d66:	4618      	mov	r0, r3
   a1d68:	4b4e      	ldr	r3, [pc, #312]	; (a1ea4 <Cl_Standby_Controller+0x31c>)
   a1d6a:	4798      	blx	r3
   a1d6c:	4603      	mov	r3, r0
   a1d6e:	77bb      	strb	r3, [r7, #30]

							break;
   a1d70:	bf00      	nop
							break;
						}

					}
				}
				break;
   a1d72:	e0e4      	b.n	a1f3e <Cl_Standby_Controller+0x3b6>
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a1d74:	4b4d      	ldr	r3, [pc, #308]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d76:	7e1b      	ldrb	r3, [r3, #24]
   a1d78:	2b00      	cmp	r3, #0
   a1d7a:	f000 80e2 	beq.w	a1f42 <Cl_Standby_Controller+0x3ba>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a1d7e:	4b4b      	ldr	r3, [pc, #300]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d80:	795b      	ldrb	r3, [r3, #5]
   a1d82:	733b      	strb	r3, [r7, #12]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a1d84:	4b49      	ldr	r3, [pc, #292]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d86:	799b      	ldrb	r3, [r3, #6]
   a1d88:	737b      	strb	r3, [r7, #13]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a1d8a:	4b48      	ldr	r3, [pc, #288]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d8c:	79db      	ldrb	r3, [r3, #7]
   a1d8e:	73bb      	strb	r3, [r7, #14]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a1d90:	4b46      	ldr	r3, [pc, #280]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d92:	7a1b      	ldrb	r3, [r3, #8]
   a1d94:	73fb      	strb	r3, [r7, #15]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a1d96:	4b45      	ldr	r3, [pc, #276]	; (a1eac <Cl_Standby_Controller+0x324>)
   a1d98:	791b      	ldrb	r3, [r3, #4]
   a1d9a:	3b05      	subs	r3, #5
   a1d9c:	2b20      	cmp	r3, #32
   a1d9e:	f200 80a9 	bhi.w	a1ef4 <Cl_Standby_Controller+0x36c>
   a1da2:	a201      	add	r2, pc, #4	; (adr r2, a1da8 <Cl_Standby_Controller+0x220>)
   a1da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1da8:	000a1ef5 	.word	0x000a1ef5
   a1dac:	000a1ef5 	.word	0x000a1ef5
   a1db0:	000a1ef5 	.word	0x000a1ef5
   a1db4:	000a1ef5 	.word	0x000a1ef5
   a1db8:	000a1ef5 	.word	0x000a1ef5
   a1dbc:	000a1ef5 	.word	0x000a1ef5
   a1dc0:	000a1ef5 	.word	0x000a1ef5
   a1dc4:	000a1ef5 	.word	0x000a1ef5
   a1dc8:	000a1ef5 	.word	0x000a1ef5
   a1dcc:	000a1ef5 	.word	0x000a1ef5
   a1dd0:	000a1ef5 	.word	0x000a1ef5
   a1dd4:	000a1ef5 	.word	0x000a1ef5
   a1dd8:	000a1ef5 	.word	0x000a1ef5
   a1ddc:	000a1ef5 	.word	0x000a1ef5
   a1de0:	000a1ef5 	.word	0x000a1ef5
   a1de4:	000a1ef5 	.word	0x000a1ef5
   a1de8:	000a1ef5 	.word	0x000a1ef5
   a1dec:	000a1ef5 	.word	0x000a1ef5
   a1df0:	000a1ef5 	.word	0x000a1ef5
   a1df4:	000a1e2d 	.word	0x000a1e2d
   a1df8:	000a1e45 	.word	0x000a1e45
   a1dfc:	000a1e5d 	.word	0x000a1e5d
   a1e00:	000a1e6d 	.word	0x000a1e6d
   a1e04:	000a1e7d 	.word	0x000a1e7d
   a1e08:	000a1e8d 	.word	0x000a1e8d
   a1e0c:	000a1ef5 	.word	0x000a1ef5
   a1e10:	000a1ef5 	.word	0x000a1ef5
   a1e14:	000a1ef5 	.word	0x000a1ef5
   a1e18:	000a1ef5 	.word	0x000a1ef5
   a1e1c:	000a1ec1 	.word	0x000a1ec1
   a1e20:	000a1ecb 	.word	0x000a1ecb
   a1e24:	000a1ed5 	.word	0x000a1ed5
   a1e28:	000a1ee5 	.word	0x000a1ee5
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a1e2c:	68fb      	ldr	r3, [r7, #12]
   a1e2e:	4a21      	ldr	r2, [pc, #132]	; (a1eb4 <Cl_Standby_Controller+0x32c>)
   a1e30:	fba2 2303 	umull	r2, r3, r2, r3
   a1e34:	08da      	lsrs	r2, r3, #3
   a1e36:	4b20      	ldr	r3, [pc, #128]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e38:	4610      	mov	r0, r2
   a1e3a:	4798      	blx	r3
   a1e3c:	4602      	mov	r2, r0
   a1e3e:	4b1f      	ldr	r3, [pc, #124]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e40:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a1e42:	e058      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a1e44:	68fb      	ldr	r3, [r7, #12]
   a1e46:	4a1b      	ldr	r2, [pc, #108]	; (a1eb4 <Cl_Standby_Controller+0x32c>)
   a1e48:	fba2 2303 	umull	r2, r3, r2, r3
   a1e4c:	08da      	lsrs	r2, r3, #3
   a1e4e:	4b1a      	ldr	r3, [pc, #104]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e50:	4610      	mov	r0, r2
   a1e52:	4798      	blx	r3
   a1e54:	4602      	mov	r2, r0
   a1e56:	4b19      	ldr	r3, [pc, #100]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e58:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a1e5a:	e04c      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a1e5c:	68fa      	ldr	r2, [r7, #12]
   a1e5e:	4b16      	ldr	r3, [pc, #88]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e60:	4610      	mov	r0, r2
   a1e62:	4798      	blx	r3
   a1e64:	4602      	mov	r2, r0
   a1e66:	4b15      	ldr	r3, [pc, #84]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e68:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a1e6a:	e044      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a1e6c:	68fa      	ldr	r2, [r7, #12]
   a1e6e:	4b12      	ldr	r3, [pc, #72]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e70:	4610      	mov	r0, r2
   a1e72:	4798      	blx	r3
   a1e74:	4602      	mov	r2, r0
   a1e76:	4b11      	ldr	r3, [pc, #68]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e78:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a1e7a:	e03c      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a1e7c:	68fa      	ldr	r2, [r7, #12]
   a1e7e:	4b0e      	ldr	r3, [pc, #56]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e80:	4610      	mov	r0, r2
   a1e82:	4798      	blx	r3
   a1e84:	4602      	mov	r2, r0
   a1e86:	4b0d      	ldr	r3, [pc, #52]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e88:	615a      	str	r2, [r3, #20]
						break;
   a1e8a:	e034      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a1e8c:	68fa      	ldr	r2, [r7, #12]
   a1e8e:	4b0a      	ldr	r3, [pc, #40]	; (a1eb8 <Cl_Standby_Controller+0x330>)
   a1e90:	4610      	mov	r0, r2
   a1e92:	4798      	blx	r3
   a1e94:	4602      	mov	r2, r0
   a1e96:	4b09      	ldr	r3, [pc, #36]	; (a1ebc <Cl_Standby_Controller+0x334>)
   a1e98:	611a      	str	r2, [r3, #16]
						break;
   a1e9a:	e02c      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
   a1e9c:	000a23a9 	.word	0x000a23a9
   a1ea0:	20070c98 	.word	0x20070c98
   a1ea4:	0009926d 	.word	0x0009926d
   a1ea8:	00091a75 	.word	0x00091a75
   a1eac:	20072f88 	.word	0x20072f88
   a1eb0:	00097d7d 	.word	0x00097d7d
   a1eb4:	cccccccd 	.word	0xcccccccd
   a1eb8:	000a33a1 	.word	0x000a33a1
   a1ebc:	20072cf8 	.word	0x20072cf8
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a1ec0:	68fb      	ldr	r3, [r7, #12]
   a1ec2:	b21a      	sxth	r2, r3
   a1ec4:	4ba9      	ldr	r3, [pc, #676]	; (a216c <Cl_Standby_Controller+0x5e4>)
   a1ec6:	801a      	strh	r2, [r3, #0]
						break;
   a1ec8:	e015      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a1eca:	68fb      	ldr	r3, [r7, #12]
   a1ecc:	b21a      	sxth	r2, r3
   a1ece:	4ba7      	ldr	r3, [pc, #668]	; (a216c <Cl_Standby_Controller+0x5e4>)
   a1ed0:	805a      	strh	r2, [r3, #2]
						break;
   a1ed2:	e010      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a1ed4:	68fa      	ldr	r2, [r7, #12]
   a1ed6:	4ba6      	ldr	r3, [pc, #664]	; (a2170 <Cl_Standby_Controller+0x5e8>)
   a1ed8:	4610      	mov	r0, r2
   a1eda:	4798      	blx	r3
   a1edc:	4602      	mov	r2, r0
   a1ede:	4ba3      	ldr	r3, [pc, #652]	; (a216c <Cl_Standby_Controller+0x5e4>)
   a1ee0:	60da      	str	r2, [r3, #12]
						break;
   a1ee2:	e008      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a1ee4:	68fa      	ldr	r2, [r7, #12]
   a1ee6:	4ba2      	ldr	r3, [pc, #648]	; (a2170 <Cl_Standby_Controller+0x5e8>)
   a1ee8:	4610      	mov	r0, r2
   a1eea:	4798      	blx	r3
   a1eec:	4602      	mov	r2, r0
   a1eee:	4b9f      	ldr	r3, [pc, #636]	; (a216c <Cl_Standby_Controller+0x5e4>)
   a1ef0:	609a      	str	r2, [r3, #8]
						break;
   a1ef2:	e000      	b.n	a1ef6 <Cl_Standby_Controller+0x36e>

						default:break;
   a1ef4:	bf00      	nop
					}
				}
				break;
   a1ef6:	e024      	b.n	a1f42 <Cl_Standby_Controller+0x3ba>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a1ef8:	4b9e      	ldr	r3, [pc, #632]	; (a2174 <Cl_Standby_Controller+0x5ec>)
   a1efa:	2201      	movs	r2, #1
   a1efc:	701a      	strb	r2, [r3, #0]

				break;
   a1efe:	e021      	b.n	a1f44 <Cl_Standby_Controller+0x3bc>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a1f00:	2307      	movs	r3, #7
   a1f02:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a1f04:	f107 011c 	add.w	r1, r7, #28
   a1f08:	7ffb      	ldrb	r3, [r7, #31]
   a1f0a:	2200      	movs	r2, #0
   a1f0c:	4618      	mov	r0, r3
   a1f0e:	4b9a      	ldr	r3, [pc, #616]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a1f10:	4798      	blx	r3
   a1f12:	4603      	mov	r3, r0
   a1f14:	77bb      	strb	r3, [r7, #30]

				break;
   a1f16:	e015      	b.n	a1f44 <Cl_Standby_Controller+0x3bc>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a1f18:	4b98      	ldr	r3, [pc, #608]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a1f1a:	681b      	ldr	r3, [r3, #0]
   a1f1c:	3301      	adds	r3, #1
   a1f1e:	4a97      	ldr	r2, [pc, #604]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a1f20:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a1f22:	4b97      	ldr	r3, [pc, #604]	; (a2180 <Cl_Standby_Controller+0x5f8>)
   a1f24:	4798      	blx	r3
   a1f26:	4603      	mov	r3, r0
   a1f28:	77bb      	strb	r3, [r7, #30]
				break;
   a1f2a:	e00b      	b.n	a1f44 <Cl_Standby_Controller+0x3bc>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a1f2c:	4b93      	ldr	r3, [pc, #588]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a1f2e:	2200      	movs	r2, #0
   a1f30:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a1f32:	4b90      	ldr	r3, [pc, #576]	; (a2174 <Cl_Standby_Controller+0x5ec>)
   a1f34:	2201      	movs	r2, #1
   a1f36:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a1f38:	e004      	b.n	a1f44 <Cl_Standby_Controller+0x3bc>
			//	printf("H");
				break;

				
				default:
				break;
   a1f3a:	bf00      	nop
   a1f3c:	e229      	b.n	a2392 <Cl_Standby_Controller+0x80a>
							break;
						}

					}
				}
				break;
   a1f3e:	bf00      	nop
   a1f40:	e227      	b.n	a2392 <Cl_Standby_Controller+0x80a>
						break;

						default:break;
					}
				}
				break;
   a1f42:	bf00      	nop

				
				default:
				break;
			}
			break;
   a1f44:	e225      	b.n	a2392 <Cl_Standby_Controller+0x80a>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a1f46:	7f7b      	ldrb	r3, [r7, #29]
   a1f48:	3b06      	subs	r3, #6
   a1f4a:	2b07      	cmp	r3, #7
   a1f4c:	f200 8087 	bhi.w	a205e <Cl_Standby_Controller+0x4d6>
   a1f50:	a201      	add	r2, pc, #4	; (adr r2, a1f58 <Cl_Standby_Controller+0x3d0>)
   a1f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1f56:	bf00      	nop
   a1f58:	000a203d 	.word	0x000a203d
   a1f5c:	000a2057 	.word	0x000a2057
   a1f60:	000a205f 	.word	0x000a205f
   a1f64:	000a202f 	.word	0x000a202f
   a1f68:	000a1f79 	.word	0x000a1f79
   a1f6c:	000a1fed 	.word	0x000a1fed
   a1f70:	000a205f 	.word	0x000a205f
   a1f74:	000a205f 	.word	0x000a205f
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a1f78:	4b82      	ldr	r3, [pc, #520]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a1f7a:	7e1b      	ldrb	r3, [r3, #24]
   a1f7c:	2b00      	cmp	r3, #0
   a1f7e:	d070      	beq.n	a2062 <Cl_Standby_Controller+0x4da>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a1f80:	4b80      	ldr	r3, [pc, #512]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a1f82:	791b      	ldrb	r3, [r3, #4]
   a1f84:	2b01      	cmp	r3, #1
   a1f86:	d002      	beq.n	a1f8e <Cl_Standby_Controller+0x406>
   a1f88:	2b21      	cmp	r3, #33	; 0x21
   a1f8a:	d017      	beq.n	a1fbc <Cl_Standby_Controller+0x434>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a1f8c:	e02d      	b.n	a1fea <Cl_Standby_Controller+0x462>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a1f8e:	2316      	movs	r3, #22
   a1f90:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a1f92:	2301      	movs	r3, #1
   a1f94:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1f96:	f107 0318 	add.w	r3, r7, #24
   a1f9a:	3301      	adds	r3, #1
   a1f9c:	4619      	mov	r1, r3
   a1f9e:	2001      	movs	r0, #1
   a1fa0:	4b79      	ldr	r3, [pc, #484]	; (a2188 <Cl_Standby_Controller+0x600>)
   a1fa2:	4798      	blx	r3
   a1fa4:	4603      	mov	r3, r0
   a1fa6:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a1fa8:	f107 0118 	add.w	r1, r7, #24
   a1fac:	7ffb      	ldrb	r3, [r7, #31]
   a1fae:	2202      	movs	r2, #2
   a1fb0:	4618      	mov	r0, r3
   a1fb2:	4b71      	ldr	r3, [pc, #452]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a1fb4:	4798      	blx	r3
   a1fb6:	4603      	mov	r3, r0
   a1fb8:	77bb      	strb	r3, [r7, #30]
									//	cl_wait(
										break;
   a1fba:	e016      	b.n	a1fea <Cl_Standby_Controller+0x462>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a1fbc:	2316      	movs	r3, #22
   a1fbe:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a1fc0:	2323      	movs	r3, #35	; 0x23
   a1fc2:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a1fc4:	f107 0318 	add.w	r3, r7, #24
   a1fc8:	3301      	adds	r3, #1
   a1fca:	4619      	mov	r1, r3
   a1fcc:	2001      	movs	r0, #1
   a1fce:	4b6e      	ldr	r3, [pc, #440]	; (a2188 <Cl_Standby_Controller+0x600>)
   a1fd0:	4798      	blx	r3
   a1fd2:	4603      	mov	r3, r0
   a1fd4:	77bb      	strb	r3, [r7, #30]
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a1fd6:	f107 0118 	add.w	r1, r7, #24
   a1fda:	7ffb      	ldrb	r3, [r7, #31]
   a1fdc:	2202      	movs	r2, #2
   a1fde:	4618      	mov	r0, r3
   a1fe0:	4b65      	ldr	r3, [pc, #404]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a1fe2:	4798      	blx	r3
   a1fe4:	4603      	mov	r3, r0
   a1fe6:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
						break;
   a1fe8:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a1fea:	e03a      	b.n	a2062 <Cl_Standby_Controller+0x4da>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a1fec:	4b65      	ldr	r3, [pc, #404]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a1fee:	7e1b      	ldrb	r3, [r3, #24]
   a1ff0:	2b00      	cmp	r3, #0
   a1ff2:	d038      	beq.n	a2066 <Cl_Standby_Controller+0x4de>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a1ff4:	4b63      	ldr	r3, [pc, #396]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a1ff6:	791b      	ldrb	r3, [r3, #4]
   a1ff8:	2b01      	cmp	r3, #1
   a1ffa:	d000      	beq.n	a1ffe <Cl_Standby_Controller+0x476>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a1ffc:	e016      	b.n	a202c <Cl_Standby_Controller+0x4a4>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a1ffe:	2316      	movs	r3, #22
   a2000:	77fb      	strb	r3, [r7, #31]
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a2002:	2301      	movs	r3, #1
   a2004:	763b      	strb	r3, [r7, #24]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2006:	f107 0318 	add.w	r3, r7, #24
   a200a:	3301      	adds	r3, #1
   a200c:	4619      	mov	r1, r3
   a200e:	2001      	movs	r0, #1
   a2010:	4b5d      	ldr	r3, [pc, #372]	; (a2188 <Cl_Standby_Controller+0x600>)
   a2012:	4798      	blx	r3
   a2014:	4603      	mov	r3, r0
   a2016:	77bb      	strb	r3, [r7, #30]
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a2018:	f107 0118 	add.w	r1, r7, #24
   a201c:	7ffb      	ldrb	r3, [r7, #31]
   a201e:	2202      	movs	r2, #2
   a2020:	4618      	mov	r0, r3
   a2022:	4b55      	ldr	r3, [pc, #340]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a2024:	4798      	blx	r3
   a2026:	4603      	mov	r3, r0
   a2028:	77bb      	strb	r3, [r7, #30]
						//cl_wait(10);
						break;
   a202a:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a202c:	e01b      	b.n	a2066 <Cl_Standby_Controller+0x4de>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a202e:	2307      	movs	r3, #7
   a2030:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a2032:	4b56      	ldr	r3, [pc, #344]	; (a218c <Cl_Standby_Controller+0x604>)
   a2034:	4798      	blx	r3
   a2036:	4603      	mov	r3, r0
   a2038:	77bb      	strb	r3, [r7, #30]

				break;
   a203a:	e015      	b.n	a2068 <Cl_Standby_Controller+0x4e0>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a203c:	4b4f      	ldr	r3, [pc, #316]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a203e:	681b      	ldr	r3, [r3, #0]
   a2040:	3301      	adds	r3, #1
   a2042:	4a4e      	ldr	r2, [pc, #312]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a2044:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a2046:	f107 0317 	add.w	r3, r7, #23
   a204a:	4618      	mov	r0, r3
   a204c:	4b50      	ldr	r3, [pc, #320]	; (a2190 <Cl_Standby_Controller+0x608>)
   a204e:	4798      	blx	r3
   a2050:	4603      	mov	r3, r0
   a2052:	77bb      	strb	r3, [r7, #30]
				
				
				break;
   a2054:	e008      	b.n	a2068 <Cl_Standby_Controller+0x4e0>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a2056:	4b49      	ldr	r3, [pc, #292]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a2058:	2200      	movs	r2, #0
   a205a:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a205c:	e004      	b.n	a2068 <Cl_Standby_Controller+0x4e0>
			//	printf("H");
				break;

				
				default:
				break;
   a205e:	bf00      	nop
   a2060:	e197      	b.n	a2392 <Cl_Standby_Controller+0x80a>
										default:
										break;
									}
								}

				break;
   a2062:	bf00      	nop
   a2064:	e195      	b.n	a2392 <Cl_Standby_Controller+0x80a>
						default:
						break;
					}
					
				}
				break;
   a2066:	bf00      	nop

				
				default:
				break;
			}
			break;
   a2068:	e193      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a206a:	7f7b      	ldrb	r3, [r7, #29]
   a206c:	3b06      	subs	r3, #6
   a206e:	2b07      	cmp	r3, #7
   a2070:	d866      	bhi.n	a2140 <Cl_Standby_Controller+0x5b8>
   a2072:	a201      	add	r2, pc, #4	; (adr r2, a2078 <Cl_Standby_Controller+0x4f0>)
   a2074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2078:	000a2125 	.word	0x000a2125
   a207c:	000a2139 	.word	0x000a2139
   a2080:	000a2141 	.word	0x000a2141
   a2084:	000a210d 	.word	0x000a210d
   a2088:	000a2099 	.word	0x000a2099
   a208c:	000a2141 	.word	0x000a2141
   a2090:	000a2141 	.word	0x000a2141
   a2094:	000a2141 	.word	0x000a2141
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a2098:	4b3a      	ldr	r3, [pc, #232]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a209a:	7e1b      	ldrb	r3, [r3, #24]
   a209c:	2b00      	cmp	r3, #0
   a209e:	d051      	beq.n	a2144 <Cl_Standby_Controller+0x5bc>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a20a0:	4b38      	ldr	r3, [pc, #224]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a20a2:	791b      	ldrb	r3, [r3, #4]
   a20a4:	2b01      	cmp	r3, #1
   a20a6:	d002      	beq.n	a20ae <Cl_Standby_Controller+0x526>
   a20a8:	2b21      	cmp	r3, #33	; 0x21
   a20aa:	d017      	beq.n	a20dc <Cl_Standby_Controller+0x554>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a20ac:	e02d      	b.n	a210a <Cl_Standby_Controller+0x582>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a20ae:	2316      	movs	r3, #22
   a20b0:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a20b2:	2301      	movs	r3, #1
   a20b4:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a20b6:	f107 0318 	add.w	r3, r7, #24
   a20ba:	3301      	adds	r3, #1
   a20bc:	4619      	mov	r1, r3
   a20be:	2001      	movs	r0, #1
   a20c0:	4b31      	ldr	r3, [pc, #196]	; (a2188 <Cl_Standby_Controller+0x600>)
   a20c2:	4798      	blx	r3
   a20c4:	4603      	mov	r3, r0
   a20c6:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a20c8:	f107 0118 	add.w	r1, r7, #24
   a20cc:	7ffb      	ldrb	r3, [r7, #31]
   a20ce:	2202      	movs	r2, #2
   a20d0:	4618      	mov	r0, r3
   a20d2:	4b29      	ldr	r3, [pc, #164]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a20d4:	4798      	blx	r3
   a20d6:	4603      	mov	r3, r0
   a20d8:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a20da:	e016      	b.n	a210a <Cl_Standby_Controller+0x582>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a20dc:	2316      	movs	r3, #22
   a20de:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a20e0:	2323      	movs	r3, #35	; 0x23
   a20e2:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a20e4:	f107 0318 	add.w	r3, r7, #24
   a20e8:	3301      	adds	r3, #1
   a20ea:	4619      	mov	r1, r3
   a20ec:	2001      	movs	r0, #1
   a20ee:	4b26      	ldr	r3, [pc, #152]	; (a2188 <Cl_Standby_Controller+0x600>)
   a20f0:	4798      	blx	r3
   a20f2:	4603      	mov	r3, r0
   a20f4:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a20f6:	f107 0118 	add.w	r1, r7, #24
   a20fa:	7ffb      	ldrb	r3, [r7, #31]
   a20fc:	2202      	movs	r2, #2
   a20fe:	4618      	mov	r0, r3
   a2100:	4b1d      	ldr	r3, [pc, #116]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a2102:	4798      	blx	r3
   a2104:	4603      	mov	r3, r0
   a2106:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a2108:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a210a:	e01b      	b.n	a2144 <Cl_Standby_Controller+0x5bc>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a210c:	2307      	movs	r3, #7
   a210e:	77fb      	strb	r3, [r7, #31]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a2110:	f107 011c 	add.w	r1, r7, #28
   a2114:	7ffb      	ldrb	r3, [r7, #31]
   a2116:	2200      	movs	r2, #0
   a2118:	4618      	mov	r0, r3
   a211a:	4b17      	ldr	r3, [pc, #92]	; (a2178 <Cl_Standby_Controller+0x5f0>)
   a211c:	4798      	blx	r3
   a211e:	4603      	mov	r3, r0
   a2120:	77bb      	strb	r3, [r7, #30]

				break;
   a2122:	e010      	b.n	a2146 <Cl_Standby_Controller+0x5be>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a2124:	4b15      	ldr	r3, [pc, #84]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a2126:	681b      	ldr	r3, [r3, #0]
   a2128:	3301      	adds	r3, #1
   a212a:	4a14      	ldr	r2, [pc, #80]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a212c:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a212e:	4b14      	ldr	r3, [pc, #80]	; (a2180 <Cl_Standby_Controller+0x5f8>)
   a2130:	4798      	blx	r3
   a2132:	4603      	mov	r3, r0
   a2134:	77bb      	strb	r3, [r7, #30]
				break;
   a2136:	e006      	b.n	a2146 <Cl_Standby_Controller+0x5be>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a2138:	4b10      	ldr	r3, [pc, #64]	; (a217c <Cl_Standby_Controller+0x5f4>)
   a213a:	2200      	movs	r2, #0
   a213c:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a213e:	e002      	b.n	a2146 <Cl_Standby_Controller+0x5be>
			//	printf("H");
				break;

				
				default:
				break;
   a2140:	bf00      	nop
   a2142:	e126      	b.n	a2392 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
				break;
   a2144:	bf00      	nop

				
				default:
				break;
			}
			break;
   a2146:	e124      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a2148:	7f7b      	ldrb	r3, [r7, #29]
   a214a:	2b0a      	cmp	r3, #10
   a214c:	d002      	beq.n	a2154 <Cl_Standby_Controller+0x5cc>
   a214e:	2b0d      	cmp	r3, #13
   a2150:	d04f      	beq.n	a21f2 <Cl_Standby_Controller+0x66a>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a2152:	e051      	b.n	a21f8 <Cl_Standby_Controller+0x670>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a2154:	4b0b      	ldr	r3, [pc, #44]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a2156:	7e1b      	ldrb	r3, [r3, #24]
   a2158:	2b00      	cmp	r3, #0
   a215a:	d04c      	beq.n	a21f6 <Cl_Standby_Controller+0x66e>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a215c:	4b09      	ldr	r3, [pc, #36]	; (a2184 <Cl_Standby_Controller+0x5fc>)
   a215e:	791b      	ldrb	r3, [r3, #4]
   a2160:	2b01      	cmp	r3, #1
   a2162:	d017      	beq.n	a2194 <Cl_Standby_Controller+0x60c>
   a2164:	2b21      	cmp	r3, #33	; 0x21
   a2166:	d02c      	beq.n	a21c2 <Cl_Standby_Controller+0x63a>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a2168:	e042      	b.n	a21f0 <Cl_Standby_Controller+0x668>
   a216a:	bf00      	nop
   a216c:	20072cf8 	.word	0x20072cf8
   a2170:	000a33a1 	.word	0x000a33a1
   a2174:	20070c98 	.word	0x20070c98
   a2178:	0009926d 	.word	0x0009926d
   a217c:	20072890 	.word	0x20072890
   a2180:	000a25b5 	.word	0x000a25b5
   a2184:	20072f88 	.word	0x20072f88
   a2188:	00097d7d 	.word	0x00097d7d
   a218c:	000a2641 	.word	0x000a2641
   a2190:	000a26ad 	.word	0x000a26ad
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a2194:	2316      	movs	r3, #22
   a2196:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a2198:	2301      	movs	r3, #1
   a219a:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a219c:	f107 0318 	add.w	r3, r7, #24
   a21a0:	3301      	adds	r3, #1
   a21a2:	4619      	mov	r1, r3
   a21a4:	2001      	movs	r0, #1
   a21a6:	4b7d      	ldr	r3, [pc, #500]	; (a239c <Cl_Standby_Controller+0x814>)
   a21a8:	4798      	blx	r3
   a21aa:	4603      	mov	r3, r0
   a21ac:	77bb      	strb	r3, [r7, #30]
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a21ae:	f107 0118 	add.w	r1, r7, #24
   a21b2:	7ffb      	ldrb	r3, [r7, #31]
   a21b4:	2202      	movs	r2, #2
   a21b6:	4618      	mov	r0, r3
   a21b8:	4b79      	ldr	r3, [pc, #484]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a21ba:	4798      	blx	r3
   a21bc:	4603      	mov	r3, r0
   a21be:	77bb      	strb	r3, [r7, #30]
												//cl_wait(10);
												break;
   a21c0:	e016      	b.n	a21f0 <Cl_Standby_Controller+0x668>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a21c2:	2316      	movs	r3, #22
   a21c4:	77fb      	strb	r3, [r7, #31]
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a21c6:	2323      	movs	r3, #35	; 0x23
   a21c8:	763b      	strb	r3, [r7, #24]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a21ca:	f107 0318 	add.w	r3, r7, #24
   a21ce:	3301      	adds	r3, #1
   a21d0:	4619      	mov	r1, r3
   a21d2:	2001      	movs	r0, #1
   a21d4:	4b71      	ldr	r3, [pc, #452]	; (a239c <Cl_Standby_Controller+0x814>)
   a21d6:	4798      	blx	r3
   a21d8:	4603      	mov	r3, r0
   a21da:	77bb      	strb	r3, [r7, #30]
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a21dc:	f107 0118 	add.w	r1, r7, #24
   a21e0:	7ffb      	ldrb	r3, [r7, #31]
   a21e2:	2202      	movs	r2, #2
   a21e4:	4618      	mov	r0, r3
   a21e6:	4b6e      	ldr	r3, [pc, #440]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a21e8:	4798      	blx	r3
   a21ea:	4603      	mov	r3, r0
   a21ec:	77bb      	strb	r3, [r7, #30]
														//cl_wait(100);
												break;
   a21ee:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a21f0:	e001      	b.n	a21f6 <Cl_Standby_Controller+0x66e>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a21f2:	bf00      	nop
   a21f4:	e0cd      	b.n	a2392 <Cl_Standby_Controller+0x80a>
												break;
												default:
												break;
											}
										}
							break;
   a21f6:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a21f8:	e0cb      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a21fa:	7f7b      	ldrb	r3, [r7, #29]
   a21fc:	2b0a      	cmp	r3, #10
   a21fe:	d002      	beq.n	a2206 <Cl_Standby_Controller+0x67e>
   a2200:	2b0d      	cmp	r3, #13
   a2202:	d03a      	beq.n	a227a <Cl_Standby_Controller+0x6f2>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a2204:	e03c      	b.n	a2280 <Cl_Standby_Controller+0x6f8>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a2206:	4b67      	ldr	r3, [pc, #412]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a2208:	7e1b      	ldrb	r3, [r3, #24]
   a220a:	2b00      	cmp	r3, #0
   a220c:	d037      	beq.n	a227e <Cl_Standby_Controller+0x6f6>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a220e:	4b65      	ldr	r3, [pc, #404]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a2210:	791b      	ldrb	r3, [r3, #4]
   a2212:	2b01      	cmp	r3, #1
   a2214:	d002      	beq.n	a221c <Cl_Standby_Controller+0x694>
   a2216:	2b21      	cmp	r3, #33	; 0x21
   a2218:	d017      	beq.n	a224a <Cl_Standby_Controller+0x6c2>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a221a:	e02d      	b.n	a2278 <Cl_Standby_Controller+0x6f0>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a221c:	2316      	movs	r3, #22
   a221e:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a2220:	2301      	movs	r3, #1
   a2222:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2224:	f107 0318 	add.w	r3, r7, #24
   a2228:	3301      	adds	r3, #1
   a222a:	4619      	mov	r1, r3
   a222c:	2001      	movs	r0, #1
   a222e:	4b5b      	ldr	r3, [pc, #364]	; (a239c <Cl_Standby_Controller+0x814>)
   a2230:	4798      	blx	r3
   a2232:	4603      	mov	r3, r0
   a2234:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a2236:	f107 0118 	add.w	r1, r7, #24
   a223a:	7ffb      	ldrb	r3, [r7, #31]
   a223c:	2202      	movs	r2, #2
   a223e:	4618      	mov	r0, r3
   a2240:	4b57      	ldr	r3, [pc, #348]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a2242:	4798      	blx	r3
   a2244:	4603      	mov	r3, r0
   a2246:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a2248:	e016      	b.n	a2278 <Cl_Standby_Controller+0x6f0>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a224a:	2316      	movs	r3, #22
   a224c:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a224e:	2323      	movs	r3, #35	; 0x23
   a2250:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2252:	f107 0318 	add.w	r3, r7, #24
   a2256:	3301      	adds	r3, #1
   a2258:	4619      	mov	r1, r3
   a225a:	2001      	movs	r0, #1
   a225c:	4b4f      	ldr	r3, [pc, #316]	; (a239c <Cl_Standby_Controller+0x814>)
   a225e:	4798      	blx	r3
   a2260:	4603      	mov	r3, r0
   a2262:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a2264:	f107 0118 	add.w	r1, r7, #24
   a2268:	7ffb      	ldrb	r3, [r7, #31]
   a226a:	2202      	movs	r2, #2
   a226c:	4618      	mov	r0, r3
   a226e:	4b4c      	ldr	r3, [pc, #304]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a2270:	4798      	blx	r3
   a2272:	4603      	mov	r3, r0
   a2274:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a2276:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a2278:	e001      	b.n	a227e <Cl_Standby_Controller+0x6f6>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a227a:	bf00      	nop
   a227c:	e000      	b.n	a2280 <Cl_Standby_Controller+0x6f8>
										break;
										default:
										break;
									}
								}
							break;
   a227e:	bf00      	nop
							break;
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a2280:	7f7b      	ldrb	r3, [r7, #29]
   a2282:	2b0a      	cmp	r3, #10
   a2284:	d002      	beq.n	a228c <Cl_Standby_Controller+0x704>
   a2286:	2b0d      	cmp	r3, #13
   a2288:	d03a      	beq.n	a2300 <Cl_Standby_Controller+0x778>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a228a:	e03c      	b.n	a2306 <Cl_Standby_Controller+0x77e>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a228c:	4b45      	ldr	r3, [pc, #276]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a228e:	7e1b      	ldrb	r3, [r3, #24]
   a2290:	2b00      	cmp	r3, #0
   a2292:	d037      	beq.n	a2304 <Cl_Standby_Controller+0x77c>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a2294:	4b43      	ldr	r3, [pc, #268]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a2296:	791b      	ldrb	r3, [r3, #4]
   a2298:	2b01      	cmp	r3, #1
   a229a:	d002      	beq.n	a22a2 <Cl_Standby_Controller+0x71a>
   a229c:	2b21      	cmp	r3, #33	; 0x21
   a229e:	d017      	beq.n	a22d0 <Cl_Standby_Controller+0x748>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a22a0:	e02d      	b.n	a22fe <Cl_Standby_Controller+0x776>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a22a2:	2316      	movs	r3, #22
   a22a4:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a22a6:	2301      	movs	r3, #1
   a22a8:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a22aa:	f107 0318 	add.w	r3, r7, #24
   a22ae:	3301      	adds	r3, #1
   a22b0:	4619      	mov	r1, r3
   a22b2:	2001      	movs	r0, #1
   a22b4:	4b39      	ldr	r3, [pc, #228]	; (a239c <Cl_Standby_Controller+0x814>)
   a22b6:	4798      	blx	r3
   a22b8:	4603      	mov	r3, r0
   a22ba:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a22bc:	f107 0118 	add.w	r1, r7, #24
   a22c0:	7ffb      	ldrb	r3, [r7, #31]
   a22c2:	2202      	movs	r2, #2
   a22c4:	4618      	mov	r0, r3
   a22c6:	4b36      	ldr	r3, [pc, #216]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a22c8:	4798      	blx	r3
   a22ca:	4603      	mov	r3, r0
   a22cc:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a22ce:	e016      	b.n	a22fe <Cl_Standby_Controller+0x776>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a22d0:	2316      	movs	r3, #22
   a22d2:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a22d4:	2323      	movs	r3, #35	; 0x23
   a22d6:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a22d8:	f107 0318 	add.w	r3, r7, #24
   a22dc:	3301      	adds	r3, #1
   a22de:	4619      	mov	r1, r3
   a22e0:	2001      	movs	r0, #1
   a22e2:	4b2e      	ldr	r3, [pc, #184]	; (a239c <Cl_Standby_Controller+0x814>)
   a22e4:	4798      	blx	r3
   a22e6:	4603      	mov	r3, r0
   a22e8:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a22ea:	f107 0118 	add.w	r1, r7, #24
   a22ee:	7ffb      	ldrb	r3, [r7, #31]
   a22f0:	2202      	movs	r2, #2
   a22f2:	4618      	mov	r0, r3
   a22f4:	4b2a      	ldr	r3, [pc, #168]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a22f6:	4798      	blx	r3
   a22f8:	4603      	mov	r3, r0
   a22fa:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a22fc:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a22fe:	e001      	b.n	a2304 <Cl_Standby_Controller+0x77c>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a2300:	bf00      	nop
   a2302:	e046      	b.n	a2392 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
							break;
   a2304:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a2306:	e044      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a2308:	7f7b      	ldrb	r3, [r7, #29]
   a230a:	2b0a      	cmp	r3, #10
   a230c:	d002      	beq.n	a2314 <Cl_Standby_Controller+0x78c>
   a230e:	2b0d      	cmp	r3, #13
   a2310:	d03a      	beq.n	a2388 <Cl_Standby_Controller+0x800>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a2312:	e03c      	b.n	a238e <Cl_Standby_Controller+0x806>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a2314:	4b23      	ldr	r3, [pc, #140]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a2316:	7e1b      	ldrb	r3, [r3, #24]
   a2318:	2b00      	cmp	r3, #0
   a231a:	d037      	beq.n	a238c <Cl_Standby_Controller+0x804>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a231c:	4b21      	ldr	r3, [pc, #132]	; (a23a4 <Cl_Standby_Controller+0x81c>)
   a231e:	791b      	ldrb	r3, [r3, #4]
   a2320:	2b01      	cmp	r3, #1
   a2322:	d002      	beq.n	a232a <Cl_Standby_Controller+0x7a2>
   a2324:	2b21      	cmp	r3, #33	; 0x21
   a2326:	d017      	beq.n	a2358 <Cl_Standby_Controller+0x7d0>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a2328:	e02d      	b.n	a2386 <Cl_Standby_Controller+0x7fe>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a232a:	2316      	movs	r3, #22
   a232c:	77fb      	strb	r3, [r7, #31]
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a232e:	2301      	movs	r3, #1
   a2330:	763b      	strb	r3, [r7, #24]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2332:	f107 0318 	add.w	r3, r7, #24
   a2336:	3301      	adds	r3, #1
   a2338:	4619      	mov	r1, r3
   a233a:	2001      	movs	r0, #1
   a233c:	4b17      	ldr	r3, [pc, #92]	; (a239c <Cl_Standby_Controller+0x814>)
   a233e:	4798      	blx	r3
   a2340:	4603      	mov	r3, r0
   a2342:	77bb      	strb	r3, [r7, #30]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a2344:	f107 0118 	add.w	r1, r7, #24
   a2348:	7ffb      	ldrb	r3, [r7, #31]
   a234a:	2202      	movs	r2, #2
   a234c:	4618      	mov	r0, r3
   a234e:	4b14      	ldr	r3, [pc, #80]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a2350:	4798      	blx	r3
   a2352:	4603      	mov	r3, r0
   a2354:	77bb      	strb	r3, [r7, #30]
										//cl_wait(10);
										break;
   a2356:	e016      	b.n	a2386 <Cl_Standby_Controller+0x7fe>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a2358:	2316      	movs	r3, #22
   a235a:	77fb      	strb	r3, [r7, #31]
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a235c:	2323      	movs	r3, #35	; 0x23
   a235e:	763b      	strb	r3, [r7, #24]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2360:	f107 0318 	add.w	r3, r7, #24
   a2364:	3301      	adds	r3, #1
   a2366:	4619      	mov	r1, r3
   a2368:	2001      	movs	r0, #1
   a236a:	4b0c      	ldr	r3, [pc, #48]	; (a239c <Cl_Standby_Controller+0x814>)
   a236c:	4798      	blx	r3
   a236e:	4603      	mov	r3, r0
   a2370:	77bb      	strb	r3, [r7, #30]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a2372:	f107 0118 	add.w	r1, r7, #24
   a2376:	7ffb      	ldrb	r3, [r7, #31]
   a2378:	2202      	movs	r2, #2
   a237a:	4618      	mov	r0, r3
   a237c:	4b08      	ldr	r3, [pc, #32]	; (a23a0 <Cl_Standby_Controller+0x818>)
   a237e:	4798      	blx	r3
   a2380:	4603      	mov	r3, r0
   a2382:	77bb      	strb	r3, [r7, #30]
												//cl_wait(100);
										break;
   a2384:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a2386:	e001      	b.n	a238c <Cl_Standby_Controller+0x804>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a2388:	bf00      	nop
   a238a:	e002      	b.n	a2392 <Cl_Standby_Controller+0x80a>
										break;
										default:
										break;
									}
								}
							break;
   a238c:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a238e:	e000      	b.n	a2392 <Cl_Standby_Controller+0x80a>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a2390:	bf00      	nop
		}

	
return CL_OK;
   a2392:	2300      	movs	r3, #0
}
   a2394:	4618      	mov	r0, r3
   a2396:	3720      	adds	r7, #32
   a2398:	46bd      	mov	sp, r7
   a239a:	bd80      	pop	{r7, pc}
   a239c:	00097d7d 	.word	0x00097d7d
   a23a0:	0009926d 	.word	0x0009926d
   a23a4:	20072f88 	.word	0x20072f88

000a23a8 <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a23a8:	b480      	push	{r7}
   a23aa:	b083      	sub	sp, #12
   a23ac:	af00      	add	r7, sp, #0
   a23ae:	4603      	mov	r3, r0
   a23b0:	6039      	str	r1, [r7, #0]
   a23b2:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a23b4:	683b      	ldr	r3, [r7, #0]
   a23b6:	2200      	movs	r2, #0
   a23b8:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a23ba:	79fb      	ldrb	r3, [r7, #7]
   a23bc:	3b07      	subs	r3, #7
   a23be:	2b36      	cmp	r3, #54	; 0x36
   a23c0:	f200 80a2 	bhi.w	a2508 <cl_stby_translatemacevent+0x160>
   a23c4:	a201      	add	r2, pc, #4	; (adr r2, a23cc <cl_stby_translatemacevent+0x24>)
   a23c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a23ca:	bf00      	nop
   a23cc:	000a24d9 	.word	0x000a24d9
   a23d0:	000a2509 	.word	0x000a2509
   a23d4:	000a24e1 	.word	0x000a24e1
   a23d8:	000a24e9 	.word	0x000a24e9
   a23dc:	000a24f1 	.word	0x000a24f1
   a23e0:	000a24f9 	.word	0x000a24f9
   a23e4:	000a2509 	.word	0x000a2509
   a23e8:	000a24d1 	.word	0x000a24d1
   a23ec:	000a2509 	.word	0x000a2509
   a23f0:	000a2501 	.word	0x000a2501
   a23f4:	000a2509 	.word	0x000a2509
   a23f8:	000a2509 	.word	0x000a2509
   a23fc:	000a2509 	.word	0x000a2509
   a2400:	000a2509 	.word	0x000a2509
   a2404:	000a2509 	.word	0x000a2509
   a2408:	000a2509 	.word	0x000a2509
   a240c:	000a2509 	.word	0x000a2509
   a2410:	000a2509 	.word	0x000a2509
   a2414:	000a2509 	.word	0x000a2509
   a2418:	000a2509 	.word	0x000a2509
   a241c:	000a2509 	.word	0x000a2509
   a2420:	000a2509 	.word	0x000a2509
   a2424:	000a2509 	.word	0x000a2509
   a2428:	000a2509 	.word	0x000a2509
   a242c:	000a2509 	.word	0x000a2509
   a2430:	000a2509 	.word	0x000a2509
   a2434:	000a2509 	.word	0x000a2509
   a2438:	000a2509 	.word	0x000a2509
   a243c:	000a2509 	.word	0x000a2509
   a2440:	000a2509 	.word	0x000a2509
   a2444:	000a2509 	.word	0x000a2509
   a2448:	000a2509 	.word	0x000a2509
   a244c:	000a2509 	.word	0x000a2509
   a2450:	000a2509 	.word	0x000a2509
   a2454:	000a2509 	.word	0x000a2509
   a2458:	000a2509 	.word	0x000a2509
   a245c:	000a24a9 	.word	0x000a24a9
   a2460:	000a2509 	.word	0x000a2509
   a2464:	000a2509 	.word	0x000a2509
   a2468:	000a24c9 	.word	0x000a24c9
   a246c:	000a2509 	.word	0x000a2509
   a2470:	000a2509 	.word	0x000a2509
   a2474:	000a2509 	.word	0x000a2509
   a2478:	000a2509 	.word	0x000a2509
   a247c:	000a2509 	.word	0x000a2509
   a2480:	000a2509 	.word	0x000a2509
   a2484:	000a2509 	.word	0x000a2509
   a2488:	000a2509 	.word	0x000a2509
   a248c:	000a2509 	.word	0x000a2509
   a2490:	000a2509 	.word	0x000a2509
   a2494:	000a24b1 	.word	0x000a24b1
   a2498:	000a2509 	.word	0x000a2509
   a249c:	000a24b9 	.word	0x000a24b9
   a24a0:	000a24c1 	.word	0x000a24c1
   a24a4:	000a2509 	.word	0x000a2509
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a24a8:	683b      	ldr	r3, [r7, #0]
   a24aa:	2201      	movs	r2, #1
   a24ac:	701a      	strb	r2, [r3, #0]
		break;
   a24ae:	e02c      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a24b0:	683b      	ldr	r3, [r7, #0]
   a24b2:	2204      	movs	r2, #4
   a24b4:	701a      	strb	r2, [r3, #0]
		break;
   a24b6:	e028      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a24b8:	683b      	ldr	r3, [r7, #0]
   a24ba:	2206      	movs	r2, #6
   a24bc:	701a      	strb	r2, [r3, #0]
		break;
   a24be:	e024      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a24c0:	683b      	ldr	r3, [r7, #0]
   a24c2:	2207      	movs	r2, #7
   a24c4:	701a      	strb	r2, [r3, #0]
		break;
   a24c6:	e020      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a24c8:	683b      	ldr	r3, [r7, #0]
   a24ca:	2209      	movs	r2, #9
   a24cc:	701a      	strb	r2, [r3, #0]
		break;
   a24ce:	e01c      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a24d0:	683b      	ldr	r3, [r7, #0]
   a24d2:	220a      	movs	r2, #10
   a24d4:	701a      	strb	r2, [r3, #0]
		break;
   a24d6:	e018      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a24d8:	683b      	ldr	r3, [r7, #0]
   a24da:	220c      	movs	r2, #12
   a24dc:	701a      	strb	r2, [r3, #0]
		break;
   a24de:	e014      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a24e0:	683b      	ldr	r3, [r7, #0]
   a24e2:	220d      	movs	r2, #13
   a24e4:	701a      	strb	r2, [r3, #0]
		break; 
   a24e6:	e010      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a24e8:	683b      	ldr	r3, [r7, #0]
   a24ea:	220e      	movs	r2, #14
   a24ec:	701a      	strb	r2, [r3, #0]
		break;
   a24ee:	e00c      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a24f0:	683b      	ldr	r3, [r7, #0]
   a24f2:	220f      	movs	r2, #15
   a24f4:	701a      	strb	r2, [r3, #0]
		break;
   a24f6:	e008      	b.n	a250a <cl_stby_translatemacevent+0x162>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a24f8:	683b      	ldr	r3, [r7, #0]
   a24fa:	2210      	movs	r2, #16
   a24fc:	701a      	strb	r2, [r3, #0]
		break;
   a24fe:	e004      	b.n	a250a <cl_stby_translatemacevent+0x162>
		
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a2500:	683b      	ldr	r3, [r7, #0]
   a2502:	2210      	movs	r2, #16
   a2504:	701a      	strb	r2, [r3, #0]
		break;
   a2506:	e000      	b.n	a250a <cl_stby_translatemacevent+0x162>
		default:
		break;
   a2508:	bf00      	nop
	}
	return CL_OK;
   a250a:	2300      	movs	r3, #0
}
   a250c:	4618      	mov	r0, r3
   a250e:	370c      	adds	r7, #12
   a2510:	46bd      	mov	sp, r7
   a2512:	bc80      	pop	{r7}
   a2514:	4770      	bx	lr
   a2516:	bf00      	nop

000a2518 <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a2518:	b580      	push	{r7, lr}
   a251a:	b082      	sub	sp, #8
   a251c:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a251e:	2304      	movs	r3, #4
   a2520:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a2522:	2301      	movs	r3, #1
   a2524:	80fb      	strh	r3, [r7, #6]
   a2526:	e00a      	b.n	a253e <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a2528:	88fb      	ldrh	r3, [r7, #6]
   a252a:	b2db      	uxtb	r3, r3
   a252c:	4618      	mov	r0, r3
   a252e:	4b1b      	ldr	r3, [pc, #108]	; (a259c <Cl_stby_init+0x84>)
   a2530:	4798      	blx	r3
				cl_wait(10);
   a2532:	200a      	movs	r0, #10
   a2534:	4b1a      	ldr	r3, [pc, #104]	; (a25a0 <Cl_stby_init+0x88>)
   a2536:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a2538:	88fb      	ldrh	r3, [r7, #6]
   a253a:	3301      	adds	r3, #1
   a253c:	80fb      	strh	r3, [r7, #6]
   a253e:	88fb      	ldrh	r3, [r7, #6]
   a2540:	2b14      	cmp	r3, #20
   a2542:	d9f1      	bls.n	a2528 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a2544:	2001      	movs	r0, #1
   a2546:	4b17      	ldr	r3, [pc, #92]	; (a25a4 <Cl_stby_init+0x8c>)
   a2548:	4798      	blx	r3
   a254a:	4603      	mov	r3, r0
   a254c:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a254e:	2002      	movs	r0, #2
   a2550:	4b14      	ldr	r3, [pc, #80]	; (a25a4 <Cl_stby_init+0x8c>)
   a2552:	4798      	blx	r3
   a2554:	4603      	mov	r3, r0
   a2556:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a2558:	2004      	movs	r0, #4
   a255a:	4b12      	ldr	r3, [pc, #72]	; (a25a4 <Cl_stby_init+0x8c>)
   a255c:	4798      	blx	r3
   a255e:	4603      	mov	r3, r0
   a2560:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a2562:	2005      	movs	r0, #5
   a2564:	4b0f      	ldr	r3, [pc, #60]	; (a25a4 <Cl_stby_init+0x8c>)
   a2566:	4798      	blx	r3
   a2568:	4603      	mov	r3, r0
   a256a:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a256c:	2006      	movs	r0, #6
   a256e:	4b0d      	ldr	r3, [pc, #52]	; (a25a4 <Cl_stby_init+0x8c>)
   a2570:	4798      	blx	r3
   a2572:	4603      	mov	r3, r0
   a2574:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   a2576:	4b0c      	ldr	r3, [pc, #48]	; (a25a8 <Cl_stby_init+0x90>)
   a2578:	4798      	blx	r3
   a257a:	4603      	mov	r3, r0
   a257c:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a257e:	20e1      	movs	r0, #225	; 0xe1
   a2580:	4b0a      	ldr	r3, [pc, #40]	; (a25ac <Cl_stby_init+0x94>)
   a2582:	4798      	blx	r3
   a2584:	4603      	mov	r3, r0
   a2586:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a2588:	2000      	movs	r0, #0
   a258a:	4b09      	ldr	r3, [pc, #36]	; (a25b0 <Cl_stby_init+0x98>)
   a258c:	4798      	blx	r3
   a258e:	4603      	mov	r3, r0
   a2590:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a2592:	2300      	movs	r3, #0
 }
   a2594:	4618      	mov	r0, r3
   a2596:	3708      	adds	r7, #8
   a2598:	46bd      	mov	sp, r7
   a259a:	bd80      	pop	{r7, pc}
   a259c:	00097511 	.word	0x00097511
   a25a0:	000918fd 	.word	0x000918fd
   a25a4:	0009748d 	.word	0x0009748d
   a25a8:	000974dd 	.word	0x000974dd
   a25ac:	00097999 	.word	0x00097999
   a25b0:	0008e051 	.word	0x0008e051

000a25b4 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a25b4:	b580      	push	{r7, lr}
   a25b6:	b084      	sub	sp, #16
   a25b8:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a25ba:	2304      	movs	r3, #4
   a25bc:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a25be:	234d      	movs	r3, #77	; 0x4d
   a25c0:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a25c2:	1d3b      	adds	r3, r7, #4
   a25c4:	2200      	movs	r2, #0
   a25c6:	601a      	str	r2, [r3, #0]
   a25c8:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a25cc:	230a      	movs	r3, #10
   a25ce:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a25d0:	2300      	movs	r3, #0
   a25d2:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a25d4:	4b16      	ldr	r3, [pc, #88]	; (a2630 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a25d6:	681b      	ldr	r3, [r3, #0]
   a25d8:	b2db      	uxtb	r3, r3
   a25da:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a25dc:	4b15      	ldr	r3, [pc, #84]	; (a2634 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a25de:	681b      	ldr	r3, [r3, #0]
   a25e0:	b2db      	uxtb	r3, r3
   a25e2:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a25e4:	4b14      	ldr	r3, [pc, #80]	; (a2638 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a25e6:	681b      	ldr	r3, [r3, #0]
   a25e8:	b2db      	uxtb	r3, r3
   a25ea:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a25ec:	4b10      	ldr	r3, [pc, #64]	; (a2630 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a25ee:	681b      	ldr	r3, [r3, #0]
   a25f0:	b2db      	uxtb	r3, r3
   a25f2:	425b      	negs	r3, r3
   a25f4:	b2db      	uxtb	r3, r3
   a25f6:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a25f8:	4b0e      	ldr	r3, [pc, #56]	; (a2634 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a25fa:	681b      	ldr	r3, [r3, #0]
   a25fc:	b2db      	uxtb	r3, r3
   a25fe:	f1c3 0308 	rsb	r3, r3, #8
   a2602:	b2db      	uxtb	r3, r3
   a2604:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a2606:	4b0c      	ldr	r3, [pc, #48]	; (a2638 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a2608:	681b      	ldr	r3, [r3, #0]
   a260a:	b2db      	uxtb	r3, r3
   a260c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a2610:	b2db      	uxtb	r3, r3
   a2612:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a2614:	1d39      	adds	r1, r7, #4
   a2616:	7bbb      	ldrb	r3, [r7, #14]
   a2618:	2207      	movs	r2, #7
   a261a:	4618      	mov	r0, r3
   a261c:	4b07      	ldr	r3, [pc, #28]	; (a263c <Cl_StabyRinse_UpdateTimeInfo+0x88>)
   a261e:	4798      	blx	r3
   a2620:	4603      	mov	r3, r0
   a2622:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a2624:	2300      	movs	r3, #0
	
 }
   a2626:	4618      	mov	r0, r3
   a2628:	3710      	adds	r7, #16
   a262a:	46bd      	mov	sp, r7
   a262c:	bd80      	pop	{r7, pc}
   a262e:	bf00      	nop
   a2630:	20072898 	.word	0x20072898
   a2634:	20072894 	.word	0x20072894
   a2638:	20072890 	.word	0x20072890
   a263c:	0009926d 	.word	0x0009926d

000a2640 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a2640:	b580      	push	{r7, lr}
   a2642:	b082      	sub	sp, #8
   a2644:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a2646:	2300      	movs	r3, #0
   a2648:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a264a:	2300      	movs	r3, #0
   a264c:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a264e:	234d      	movs	r3, #77	; 0x4d
   a2650:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a2652:	2300      	movs	r3, #0
   a2654:	71fb      	strb	r3, [r7, #7]
   a2656:	e01c      	b.n	a2692 <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a2658:	79fa      	ldrb	r2, [r7, #7]
   a265a:	4912      	ldr	r1, [pc, #72]	; (a26a4 <Cl_standby_ProcessAlarms+0x64>)
   a265c:	4613      	mov	r3, r2
   a265e:	00db      	lsls	r3, r3, #3
   a2660:	4413      	add	r3, r2
   a2662:	440b      	add	r3, r1
   a2664:	7818      	ldrb	r0, [r3, #0]
   a2666:	79fa      	ldrb	r2, [r7, #7]
   a2668:	4613      	mov	r3, r2
   a266a:	00db      	lsls	r3, r3, #3
   a266c:	4413      	add	r3, r2
   a266e:	4a0d      	ldr	r2, [pc, #52]	; (a26a4 <Cl_standby_ProcessAlarms+0x64>)
   a2670:	4413      	add	r3, r2
   a2672:	3304      	adds	r3, #4
   a2674:	4619      	mov	r1, r3
   a2676:	4b0c      	ldr	r3, [pc, #48]	; (a26a8 <Cl_standby_ProcessAlarms+0x68>)
   a2678:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a267a:	79fa      	ldrb	r2, [r7, #7]
   a267c:	4909      	ldr	r1, [pc, #36]	; (a26a4 <Cl_standby_ProcessAlarms+0x64>)
   a267e:	4613      	mov	r3, r2
   a2680:	00db      	lsls	r3, r3, #3
   a2682:	4413      	add	r3, r2
   a2684:	440b      	add	r3, r1
   a2686:	3304      	adds	r3, #4
   a2688:	781b      	ldrb	r3, [r3, #0]
   a268a:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a268c:	79fb      	ldrb	r3, [r7, #7]
   a268e:	3301      	adds	r3, #1
   a2690:	71fb      	strb	r3, [r7, #7]
   a2692:	79fb      	ldrb	r3, [r7, #7]
   a2694:	2b03      	cmp	r3, #3
   a2696:	d9df      	bls.n	a2658 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a2698:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a269a:	4618      	mov	r0, r3
   a269c:	3708      	adds	r7, #8
   a269e:	46bd      	mov	sp, r7
   a26a0:	bd80      	pop	{r7, pc}
   a26a2:	bf00      	nop
   a26a4:	20070c74 	.word	0x20070c74
   a26a8:	00083095 	.word	0x00083095

000a26ac <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a26ac:	b580      	push	{r7, lr}
   a26ae:	b084      	sub	sp, #16
   a26b0:	af00      	add	r7, sp, #0
   a26b2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a26b4:	2300      	movs	r3, #0
   a26b6:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a26b8:	2300      	movs	r3, #0
   a26ba:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a26bc:	234d      	movs	r3, #77	; 0x4d
   a26be:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a26c0:	2300      	movs	r3, #0
   a26c2:	73bb      	strb	r3, [r7, #14]
   a26c4:	e0bc      	b.n	a2840 <Cl_standby_UpdateAlarmTable+0x194>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a26c6:	7bba      	ldrb	r2, [r7, #14]
   a26c8:	4962      	ldr	r1, [pc, #392]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a26ca:	4613      	mov	r3, r2
   a26cc:	00db      	lsls	r3, r3, #3
   a26ce:	4413      	add	r3, r2
   a26d0:	440b      	add	r3, r1
   a26d2:	7818      	ldrb	r0, [r3, #0]
   a26d4:	7bba      	ldrb	r2, [r7, #14]
   a26d6:	4613      	mov	r3, r2
   a26d8:	00db      	lsls	r3, r3, #3
   a26da:	4413      	add	r3, r2
   a26dc:	4a5d      	ldr	r2, [pc, #372]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a26de:	4413      	add	r3, r2
   a26e0:	3304      	adds	r3, #4
   a26e2:	4619      	mov	r1, r3
   a26e4:	4b5c      	ldr	r3, [pc, #368]	; (a2858 <Cl_standby_UpdateAlarmTable+0x1ac>)
   a26e6:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a26e8:	7bba      	ldrb	r2, [r7, #14]
   a26ea:	495a      	ldr	r1, [pc, #360]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a26ec:	4613      	mov	r3, r2
   a26ee:	00db      	lsls	r3, r3, #3
   a26f0:	4413      	add	r3, r2
   a26f2:	440b      	add	r3, r1
   a26f4:	3304      	adds	r3, #4
   a26f6:	781b      	ldrb	r3, [r3, #0]
   a26f8:	2b00      	cmp	r3, #0
   a26fa:	d076      	beq.n	a27ea <Cl_standby_UpdateAlarmTable+0x13e>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a26fc:	7bba      	ldrb	r2, [r7, #14]
   a26fe:	4955      	ldr	r1, [pc, #340]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a2700:	4613      	mov	r3, r2
   a2702:	00db      	lsls	r3, r3, #3
   a2704:	4413      	add	r3, r2
   a2706:	440b      	add	r3, r1
   a2708:	3305      	adds	r3, #5
   a270a:	781b      	ldrb	r3, [r3, #0]
   a270c:	f083 0301 	eor.w	r3, r3, #1
   a2710:	b2db      	uxtb	r3, r3
   a2712:	2b00      	cmp	r3, #0
   a2714:	d01e      	beq.n	a2754 <Cl_standby_UpdateAlarmTable+0xa8>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a2716:	7bba      	ldrb	r2, [r7, #14]
   a2718:	494e      	ldr	r1, [pc, #312]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a271a:	4613      	mov	r3, r2
   a271c:	00db      	lsls	r3, r3, #3
   a271e:	4413      	add	r3, r2
   a2720:	440b      	add	r3, r1
   a2722:	781b      	ldrb	r3, [r3, #0]
   a2724:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a2726:	2301      	movs	r3, #1
   a2728:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a272a:	2307      	movs	r3, #7
   a272c:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a272e:	f107 0108 	add.w	r1, r7, #8
   a2732:	7b7b      	ldrb	r3, [r7, #13]
   a2734:	2202      	movs	r2, #2
   a2736:	4618      	mov	r0, r3
   a2738:	4b48      	ldr	r3, [pc, #288]	; (a285c <Cl_standby_UpdateAlarmTable+0x1b0>)
   a273a:	4798      	blx	r3
   a273c:	4603      	mov	r3, r0
   a273e:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a2740:	7bba      	ldrb	r2, [r7, #14]
   a2742:	4944      	ldr	r1, [pc, #272]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a2744:	4613      	mov	r3, r2
   a2746:	00db      	lsls	r3, r3, #3
   a2748:	4413      	add	r3, r2
   a274a:	440b      	add	r3, r1
   a274c:	3305      	adds	r3, #5
   a274e:	2201      	movs	r2, #1
   a2750:	701a      	strb	r2, [r3, #0]
   a2752:	e072      	b.n	a283a <Cl_standby_UpdateAlarmTable+0x18e>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a2754:	7bba      	ldrb	r2, [r7, #14]
   a2756:	493f      	ldr	r1, [pc, #252]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a2758:	4613      	mov	r3, r2
   a275a:	00db      	lsls	r3, r3, #3
   a275c:	4413      	add	r3, r2
   a275e:	440b      	add	r3, r1
   a2760:	3301      	adds	r3, #1
   a2762:	781b      	ldrb	r3, [r3, #0]
   a2764:	3301      	adds	r3, #1
   a2766:	b2d8      	uxtb	r0, r3
   a2768:	493a      	ldr	r1, [pc, #232]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a276a:	4613      	mov	r3, r2
   a276c:	00db      	lsls	r3, r3, #3
   a276e:	4413      	add	r3, r2
   a2770:	440b      	add	r3, r1
   a2772:	3301      	adds	r3, #1
   a2774:	4602      	mov	r2, r0
   a2776:	701a      	strb	r2, [r3, #0]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a2778:	7bba      	ldrb	r2, [r7, #14]
   a277a:	4936      	ldr	r1, [pc, #216]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a277c:	4613      	mov	r3, r2
   a277e:	00db      	lsls	r3, r3, #3
   a2780:	4413      	add	r3, r2
   a2782:	440b      	add	r3, r1
   a2784:	3303      	adds	r3, #3
   a2786:	781b      	ldrb	r3, [r3, #0]
   a2788:	3301      	adds	r3, #1
   a278a:	b2d8      	uxtb	r0, r3
   a278c:	4931      	ldr	r1, [pc, #196]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a278e:	4613      	mov	r3, r2
   a2790:	00db      	lsls	r3, r3, #3
   a2792:	4413      	add	r3, r2
   a2794:	440b      	add	r3, r1
   a2796:	3303      	adds	r3, #3
   a2798:	4602      	mov	r2, r0
   a279a:	701a      	strb	r2, [r3, #0]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a279c:	7bba      	ldrb	r2, [r7, #14]
   a279e:	492d      	ldr	r1, [pc, #180]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a27a0:	4613      	mov	r3, r2
   a27a2:	00db      	lsls	r3, r3, #3
   a27a4:	4413      	add	r3, r2
   a27a6:	440b      	add	r3, r1
   a27a8:	3301      	adds	r3, #1
   a27aa:	781b      	ldrb	r3, [r3, #0]
   a27ac:	2b05      	cmp	r3, #5
   a27ae:	d908      	bls.n	a27c2 <Cl_standby_UpdateAlarmTable+0x116>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a27b0:	7bba      	ldrb	r2, [r7, #14]
   a27b2:	4928      	ldr	r1, [pc, #160]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a27b4:	4613      	mov	r3, r2
   a27b6:	00db      	lsls	r3, r3, #3
   a27b8:	4413      	add	r3, r2
   a27ba:	440b      	add	r3, r1
   a27bc:	3303      	adds	r3, #3
   a27be:	2200      	movs	r2, #0
   a27c0:	701a      	strb	r2, [r3, #0]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a27c2:	7bba      	ldrb	r2, [r7, #14]
   a27c4:	4923      	ldr	r1, [pc, #140]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a27c6:	4613      	mov	r3, r2
   a27c8:	00db      	lsls	r3, r3, #3
   a27ca:	4413      	add	r3, r2
   a27cc:	440b      	add	r3, r1
   a27ce:	3301      	adds	r3, #1
   a27d0:	781b      	ldrb	r3, [r3, #0]
   a27d2:	2b3b      	cmp	r3, #59	; 0x3b
   a27d4:	d931      	bls.n	a283a <Cl_standby_UpdateAlarmTable+0x18e>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a27d6:	7bba      	ldrb	r2, [r7, #14]
   a27d8:	491e      	ldr	r1, [pc, #120]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a27da:	4613      	mov	r3, r2
   a27dc:	00db      	lsls	r3, r3, #3
   a27de:	4413      	add	r3, r2
   a27e0:	440b      	add	r3, r1
   a27e2:	3301      	adds	r3, #1
   a27e4:	2200      	movs	r2, #0
   a27e6:	701a      	strb	r2, [r3, #0]
   a27e8:	e027      	b.n	a283a <Cl_standby_UpdateAlarmTable+0x18e>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a27ea:	7bba      	ldrb	r2, [r7, #14]
   a27ec:	4919      	ldr	r1, [pc, #100]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a27ee:	4613      	mov	r3, r2
   a27f0:	00db      	lsls	r3, r3, #3
   a27f2:	4413      	add	r3, r2
   a27f4:	440b      	add	r3, r1
   a27f6:	3305      	adds	r3, #5
   a27f8:	781b      	ldrb	r3, [r3, #0]
   a27fa:	2b00      	cmp	r3, #0
   a27fc:	d01d      	beq.n	a283a <Cl_standby_UpdateAlarmTable+0x18e>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a27fe:	7bba      	ldrb	r2, [r7, #14]
   a2800:	4914      	ldr	r1, [pc, #80]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a2802:	4613      	mov	r3, r2
   a2804:	00db      	lsls	r3, r3, #3
   a2806:	4413      	add	r3, r2
   a2808:	440b      	add	r3, r1
   a280a:	3305      	adds	r3, #5
   a280c:	2200      	movs	r2, #0
   a280e:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   a2810:	2307      	movs	r3, #7
   a2812:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a2814:	7bba      	ldrb	r2, [r7, #14]
   a2816:	490f      	ldr	r1, [pc, #60]	; (a2854 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a2818:	4613      	mov	r3, r2
   a281a:	00db      	lsls	r3, r3, #3
   a281c:	4413      	add	r3, r2
   a281e:	440b      	add	r3, r1
   a2820:	781b      	ldrb	r3, [r3, #0]
   a2822:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a2824:	2300      	movs	r3, #0
   a2826:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a2828:	f107 0108 	add.w	r1, r7, #8
   a282c:	7b7b      	ldrb	r3, [r7, #13]
   a282e:	2202      	movs	r2, #2
   a2830:	4618      	mov	r0, r3
   a2832:	4b0a      	ldr	r3, [pc, #40]	; (a285c <Cl_standby_UpdateAlarmTable+0x1b0>)
   a2834:	4798      	blx	r3
   a2836:	4603      	mov	r3, r0
   a2838:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a283a:	7bbb      	ldrb	r3, [r7, #14]
   a283c:	3301      	adds	r3, #1
   a283e:	73bb      	strb	r3, [r7, #14]
   a2840:	7bbb      	ldrb	r3, [r7, #14]
   a2842:	2b03      	cmp	r3, #3
   a2844:	f67f af3f 	bls.w	a26c6 <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a2848:	7bfb      	ldrb	r3, [r7, #15]
}
   a284a:	4618      	mov	r0, r3
   a284c:	3710      	adds	r7, #16
   a284e:	46bd      	mov	sp, r7
   a2850:	bd80      	pop	{r7, pc}
   a2852:	bf00      	nop
   a2854:	20070c74 	.word	0x20070c74
   a2858:	00083095 	.word	0x00083095
   a285c:	0009926d 	.word	0x0009926d

000a2860 <__aeabi_drsub>:
   a2860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a2864:	e002      	b.n	a286c <__adddf3>
   a2866:	bf00      	nop

000a2868 <__aeabi_dsub>:
   a2868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a286c <__adddf3>:
   a286c:	b530      	push	{r4, r5, lr}
   a286e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a2872:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a2876:	ea94 0f05 	teq	r4, r5
   a287a:	bf08      	it	eq
   a287c:	ea90 0f02 	teqeq	r0, r2
   a2880:	bf1f      	itttt	ne
   a2882:	ea54 0c00 	orrsne.w	ip, r4, r0
   a2886:	ea55 0c02 	orrsne.w	ip, r5, r2
   a288a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a288e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a2892:	f000 80e2 	beq.w	a2a5a <__adddf3+0x1ee>
   a2896:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a289a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a289e:	bfb8      	it	lt
   a28a0:	426d      	neglt	r5, r5
   a28a2:	dd0c      	ble.n	a28be <__adddf3+0x52>
   a28a4:	442c      	add	r4, r5
   a28a6:	ea80 0202 	eor.w	r2, r0, r2
   a28aa:	ea81 0303 	eor.w	r3, r1, r3
   a28ae:	ea82 0000 	eor.w	r0, r2, r0
   a28b2:	ea83 0101 	eor.w	r1, r3, r1
   a28b6:	ea80 0202 	eor.w	r2, r0, r2
   a28ba:	ea81 0303 	eor.w	r3, r1, r3
   a28be:	2d36      	cmp	r5, #54	; 0x36
   a28c0:	bf88      	it	hi
   a28c2:	bd30      	pophi	{r4, r5, pc}
   a28c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a28c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a28cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a28d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a28d4:	d002      	beq.n	a28dc <__adddf3+0x70>
   a28d6:	4240      	negs	r0, r0
   a28d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a28dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a28e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a28e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a28e8:	d002      	beq.n	a28f0 <__adddf3+0x84>
   a28ea:	4252      	negs	r2, r2
   a28ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a28f0:	ea94 0f05 	teq	r4, r5
   a28f4:	f000 80a7 	beq.w	a2a46 <__adddf3+0x1da>
   a28f8:	f1a4 0401 	sub.w	r4, r4, #1
   a28fc:	f1d5 0e20 	rsbs	lr, r5, #32
   a2900:	db0d      	blt.n	a291e <__adddf3+0xb2>
   a2902:	fa02 fc0e 	lsl.w	ip, r2, lr
   a2906:	fa22 f205 	lsr.w	r2, r2, r5
   a290a:	1880      	adds	r0, r0, r2
   a290c:	f141 0100 	adc.w	r1, r1, #0
   a2910:	fa03 f20e 	lsl.w	r2, r3, lr
   a2914:	1880      	adds	r0, r0, r2
   a2916:	fa43 f305 	asr.w	r3, r3, r5
   a291a:	4159      	adcs	r1, r3
   a291c:	e00e      	b.n	a293c <__adddf3+0xd0>
   a291e:	f1a5 0520 	sub.w	r5, r5, #32
   a2922:	f10e 0e20 	add.w	lr, lr, #32
   a2926:	2a01      	cmp	r2, #1
   a2928:	fa03 fc0e 	lsl.w	ip, r3, lr
   a292c:	bf28      	it	cs
   a292e:	f04c 0c02 	orrcs.w	ip, ip, #2
   a2932:	fa43 f305 	asr.w	r3, r3, r5
   a2936:	18c0      	adds	r0, r0, r3
   a2938:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a293c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a2940:	d507      	bpl.n	a2952 <__adddf3+0xe6>
   a2942:	f04f 0e00 	mov.w	lr, #0
   a2946:	f1dc 0c00 	rsbs	ip, ip, #0
   a294a:	eb7e 0000 	sbcs.w	r0, lr, r0
   a294e:	eb6e 0101 	sbc.w	r1, lr, r1
   a2952:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a2956:	d31b      	bcc.n	a2990 <__adddf3+0x124>
   a2958:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a295c:	d30c      	bcc.n	a2978 <__adddf3+0x10c>
   a295e:	0849      	lsrs	r1, r1, #1
   a2960:	ea5f 0030 	movs.w	r0, r0, rrx
   a2964:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a2968:	f104 0401 	add.w	r4, r4, #1
   a296c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a2970:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a2974:	f080 809a 	bcs.w	a2aac <__adddf3+0x240>
   a2978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a297c:	bf08      	it	eq
   a297e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a2982:	f150 0000 	adcs.w	r0, r0, #0
   a2986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a298a:	ea41 0105 	orr.w	r1, r1, r5
   a298e:	bd30      	pop	{r4, r5, pc}
   a2990:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a2994:	4140      	adcs	r0, r0
   a2996:	eb41 0101 	adc.w	r1, r1, r1
   a299a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a299e:	f1a4 0401 	sub.w	r4, r4, #1
   a29a2:	d1e9      	bne.n	a2978 <__adddf3+0x10c>
   a29a4:	f091 0f00 	teq	r1, #0
   a29a8:	bf04      	itt	eq
   a29aa:	4601      	moveq	r1, r0
   a29ac:	2000      	moveq	r0, #0
   a29ae:	fab1 f381 	clz	r3, r1
   a29b2:	bf08      	it	eq
   a29b4:	3320      	addeq	r3, #32
   a29b6:	f1a3 030b 	sub.w	r3, r3, #11
   a29ba:	f1b3 0220 	subs.w	r2, r3, #32
   a29be:	da0c      	bge.n	a29da <__adddf3+0x16e>
   a29c0:	320c      	adds	r2, #12
   a29c2:	dd08      	ble.n	a29d6 <__adddf3+0x16a>
   a29c4:	f102 0c14 	add.w	ip, r2, #20
   a29c8:	f1c2 020c 	rsb	r2, r2, #12
   a29cc:	fa01 f00c 	lsl.w	r0, r1, ip
   a29d0:	fa21 f102 	lsr.w	r1, r1, r2
   a29d4:	e00c      	b.n	a29f0 <__adddf3+0x184>
   a29d6:	f102 0214 	add.w	r2, r2, #20
   a29da:	bfd8      	it	le
   a29dc:	f1c2 0c20 	rsble	ip, r2, #32
   a29e0:	fa01 f102 	lsl.w	r1, r1, r2
   a29e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   a29e8:	bfdc      	itt	le
   a29ea:	ea41 010c 	orrle.w	r1, r1, ip
   a29ee:	4090      	lslle	r0, r2
   a29f0:	1ae4      	subs	r4, r4, r3
   a29f2:	bfa2      	ittt	ge
   a29f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a29f8:	4329      	orrge	r1, r5
   a29fa:	bd30      	popge	{r4, r5, pc}
   a29fc:	ea6f 0404 	mvn.w	r4, r4
   a2a00:	3c1f      	subs	r4, #31
   a2a02:	da1c      	bge.n	a2a3e <__adddf3+0x1d2>
   a2a04:	340c      	adds	r4, #12
   a2a06:	dc0e      	bgt.n	a2a26 <__adddf3+0x1ba>
   a2a08:	f104 0414 	add.w	r4, r4, #20
   a2a0c:	f1c4 0220 	rsb	r2, r4, #32
   a2a10:	fa20 f004 	lsr.w	r0, r0, r4
   a2a14:	fa01 f302 	lsl.w	r3, r1, r2
   a2a18:	ea40 0003 	orr.w	r0, r0, r3
   a2a1c:	fa21 f304 	lsr.w	r3, r1, r4
   a2a20:	ea45 0103 	orr.w	r1, r5, r3
   a2a24:	bd30      	pop	{r4, r5, pc}
   a2a26:	f1c4 040c 	rsb	r4, r4, #12
   a2a2a:	f1c4 0220 	rsb	r2, r4, #32
   a2a2e:	fa20 f002 	lsr.w	r0, r0, r2
   a2a32:	fa01 f304 	lsl.w	r3, r1, r4
   a2a36:	ea40 0003 	orr.w	r0, r0, r3
   a2a3a:	4629      	mov	r1, r5
   a2a3c:	bd30      	pop	{r4, r5, pc}
   a2a3e:	fa21 f004 	lsr.w	r0, r1, r4
   a2a42:	4629      	mov	r1, r5
   a2a44:	bd30      	pop	{r4, r5, pc}
   a2a46:	f094 0f00 	teq	r4, #0
   a2a4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a2a4e:	bf06      	itte	eq
   a2a50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a2a54:	3401      	addeq	r4, #1
   a2a56:	3d01      	subne	r5, #1
   a2a58:	e74e      	b.n	a28f8 <__adddf3+0x8c>
   a2a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a2a5e:	bf18      	it	ne
   a2a60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a2a64:	d029      	beq.n	a2aba <__adddf3+0x24e>
   a2a66:	ea94 0f05 	teq	r4, r5
   a2a6a:	bf08      	it	eq
   a2a6c:	ea90 0f02 	teqeq	r0, r2
   a2a70:	d005      	beq.n	a2a7e <__adddf3+0x212>
   a2a72:	ea54 0c00 	orrs.w	ip, r4, r0
   a2a76:	bf04      	itt	eq
   a2a78:	4619      	moveq	r1, r3
   a2a7a:	4610      	moveq	r0, r2
   a2a7c:	bd30      	pop	{r4, r5, pc}
   a2a7e:	ea91 0f03 	teq	r1, r3
   a2a82:	bf1e      	ittt	ne
   a2a84:	2100      	movne	r1, #0
   a2a86:	2000      	movne	r0, #0
   a2a88:	bd30      	popne	{r4, r5, pc}
   a2a8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a2a8e:	d105      	bne.n	a2a9c <__adddf3+0x230>
   a2a90:	0040      	lsls	r0, r0, #1
   a2a92:	4149      	adcs	r1, r1
   a2a94:	bf28      	it	cs
   a2a96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a2a9a:	bd30      	pop	{r4, r5, pc}
   a2a9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a2aa0:	bf3c      	itt	cc
   a2aa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a2aa6:	bd30      	popcc	{r4, r5, pc}
   a2aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a2aac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a2ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a2ab4:	f04f 0000 	mov.w	r0, #0
   a2ab8:	bd30      	pop	{r4, r5, pc}
   a2aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a2abe:	bf1a      	itte	ne
   a2ac0:	4619      	movne	r1, r3
   a2ac2:	4610      	movne	r0, r2
   a2ac4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a2ac8:	bf1c      	itt	ne
   a2aca:	460b      	movne	r3, r1
   a2acc:	4602      	movne	r2, r0
   a2ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a2ad2:	bf06      	itte	eq
   a2ad4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a2ad8:	ea91 0f03 	teqeq	r1, r3
   a2adc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a2ae0:	bd30      	pop	{r4, r5, pc}
   a2ae2:	bf00      	nop

000a2ae4 <__aeabi_ui2d>:
   a2ae4:	f090 0f00 	teq	r0, #0
   a2ae8:	bf04      	itt	eq
   a2aea:	2100      	moveq	r1, #0
   a2aec:	4770      	bxeq	lr
   a2aee:	b530      	push	{r4, r5, lr}
   a2af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a2af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a2af8:	f04f 0500 	mov.w	r5, #0
   a2afc:	f04f 0100 	mov.w	r1, #0
   a2b00:	e750      	b.n	a29a4 <__adddf3+0x138>
   a2b02:	bf00      	nop

000a2b04 <__aeabi_i2d>:
   a2b04:	f090 0f00 	teq	r0, #0
   a2b08:	bf04      	itt	eq
   a2b0a:	2100      	moveq	r1, #0
   a2b0c:	4770      	bxeq	lr
   a2b0e:	b530      	push	{r4, r5, lr}
   a2b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a2b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a2b18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a2b1c:	bf48      	it	mi
   a2b1e:	4240      	negmi	r0, r0
   a2b20:	f04f 0100 	mov.w	r1, #0
   a2b24:	e73e      	b.n	a29a4 <__adddf3+0x138>
   a2b26:	bf00      	nop

000a2b28 <__aeabi_f2d>:
   a2b28:	0042      	lsls	r2, r0, #1
   a2b2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a2b2e:	ea4f 0131 	mov.w	r1, r1, rrx
   a2b32:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a2b36:	bf1f      	itttt	ne
   a2b38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a2b3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a2b40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a2b44:	4770      	bxne	lr
   a2b46:	f092 0f00 	teq	r2, #0
   a2b4a:	bf14      	ite	ne
   a2b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a2b50:	4770      	bxeq	lr
   a2b52:	b530      	push	{r4, r5, lr}
   a2b54:	f44f 7460 	mov.w	r4, #896	; 0x380
   a2b58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a2b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a2b60:	e720      	b.n	a29a4 <__adddf3+0x138>
   a2b62:	bf00      	nop

000a2b64 <__aeabi_ul2d>:
   a2b64:	ea50 0201 	orrs.w	r2, r0, r1
   a2b68:	bf08      	it	eq
   a2b6a:	4770      	bxeq	lr
   a2b6c:	b530      	push	{r4, r5, lr}
   a2b6e:	f04f 0500 	mov.w	r5, #0
   a2b72:	e00a      	b.n	a2b8a <__aeabi_l2d+0x16>

000a2b74 <__aeabi_l2d>:
   a2b74:	ea50 0201 	orrs.w	r2, r0, r1
   a2b78:	bf08      	it	eq
   a2b7a:	4770      	bxeq	lr
   a2b7c:	b530      	push	{r4, r5, lr}
   a2b7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a2b82:	d502      	bpl.n	a2b8a <__aeabi_l2d+0x16>
   a2b84:	4240      	negs	r0, r0
   a2b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a2b8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a2b8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a2b92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a2b96:	f43f aedc 	beq.w	a2952 <__adddf3+0xe6>
   a2b9a:	f04f 0203 	mov.w	r2, #3
   a2b9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a2ba2:	bf18      	it	ne
   a2ba4:	3203      	addne	r2, #3
   a2ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a2baa:	bf18      	it	ne
   a2bac:	3203      	addne	r2, #3
   a2bae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a2bb2:	f1c2 0320 	rsb	r3, r2, #32
   a2bb6:	fa00 fc03 	lsl.w	ip, r0, r3
   a2bba:	fa20 f002 	lsr.w	r0, r0, r2
   a2bbe:	fa01 fe03 	lsl.w	lr, r1, r3
   a2bc2:	ea40 000e 	orr.w	r0, r0, lr
   a2bc6:	fa21 f102 	lsr.w	r1, r1, r2
   a2bca:	4414      	add	r4, r2
   a2bcc:	e6c1      	b.n	a2952 <__adddf3+0xe6>
   a2bce:	bf00      	nop

000a2bd0 <__aeabi_dmul>:
   a2bd0:	b570      	push	{r4, r5, r6, lr}
   a2bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a2bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a2bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a2bde:	bf1d      	ittte	ne
   a2be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a2be4:	ea94 0f0c 	teqne	r4, ip
   a2be8:	ea95 0f0c 	teqne	r5, ip
   a2bec:	f000 f8de 	bleq	a2dac <__aeabi_dmul+0x1dc>
   a2bf0:	442c      	add	r4, r5
   a2bf2:	ea81 0603 	eor.w	r6, r1, r3
   a2bf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a2bfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a2bfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a2c02:	bf18      	it	ne
   a2c04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a2c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a2c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a2c10:	d038      	beq.n	a2c84 <__aeabi_dmul+0xb4>
   a2c12:	fba0 ce02 	umull	ip, lr, r0, r2
   a2c16:	f04f 0500 	mov.w	r5, #0
   a2c1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   a2c1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a2c22:	fbe0 e503 	umlal	lr, r5, r0, r3
   a2c26:	f04f 0600 	mov.w	r6, #0
   a2c2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   a2c2e:	f09c 0f00 	teq	ip, #0
   a2c32:	bf18      	it	ne
   a2c34:	f04e 0e01 	orrne.w	lr, lr, #1
   a2c38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a2c3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a2c40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a2c44:	d204      	bcs.n	a2c50 <__aeabi_dmul+0x80>
   a2c46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a2c4a:	416d      	adcs	r5, r5
   a2c4c:	eb46 0606 	adc.w	r6, r6, r6
   a2c50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a2c54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a2c58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a2c5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a2c60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a2c64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a2c68:	bf88      	it	hi
   a2c6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a2c6e:	d81e      	bhi.n	a2cae <__aeabi_dmul+0xde>
   a2c70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a2c74:	bf08      	it	eq
   a2c76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a2c7a:	f150 0000 	adcs.w	r0, r0, #0
   a2c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a2c82:	bd70      	pop	{r4, r5, r6, pc}
   a2c84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a2c88:	ea46 0101 	orr.w	r1, r6, r1
   a2c8c:	ea40 0002 	orr.w	r0, r0, r2
   a2c90:	ea81 0103 	eor.w	r1, r1, r3
   a2c94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a2c98:	bfc2      	ittt	gt
   a2c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   a2c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a2ca2:	bd70      	popgt	{r4, r5, r6, pc}
   a2ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a2ca8:	f04f 0e00 	mov.w	lr, #0
   a2cac:	3c01      	subs	r4, #1
   a2cae:	f300 80ab 	bgt.w	a2e08 <__aeabi_dmul+0x238>
   a2cb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a2cb6:	bfde      	ittt	le
   a2cb8:	2000      	movle	r0, #0
   a2cba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a2cbe:	bd70      	pople	{r4, r5, r6, pc}
   a2cc0:	f1c4 0400 	rsb	r4, r4, #0
   a2cc4:	3c20      	subs	r4, #32
   a2cc6:	da35      	bge.n	a2d34 <__aeabi_dmul+0x164>
   a2cc8:	340c      	adds	r4, #12
   a2cca:	dc1b      	bgt.n	a2d04 <__aeabi_dmul+0x134>
   a2ccc:	f104 0414 	add.w	r4, r4, #20
   a2cd0:	f1c4 0520 	rsb	r5, r4, #32
   a2cd4:	fa00 f305 	lsl.w	r3, r0, r5
   a2cd8:	fa20 f004 	lsr.w	r0, r0, r4
   a2cdc:	fa01 f205 	lsl.w	r2, r1, r5
   a2ce0:	ea40 0002 	orr.w	r0, r0, r2
   a2ce4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a2ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a2cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a2cf0:	fa21 f604 	lsr.w	r6, r1, r4
   a2cf4:	eb42 0106 	adc.w	r1, r2, r6
   a2cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a2cfc:	bf08      	it	eq
   a2cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a2d02:	bd70      	pop	{r4, r5, r6, pc}
   a2d04:	f1c4 040c 	rsb	r4, r4, #12
   a2d08:	f1c4 0520 	rsb	r5, r4, #32
   a2d0c:	fa00 f304 	lsl.w	r3, r0, r4
   a2d10:	fa20 f005 	lsr.w	r0, r0, r5
   a2d14:	fa01 f204 	lsl.w	r2, r1, r4
   a2d18:	ea40 0002 	orr.w	r0, r0, r2
   a2d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a2d20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a2d24:	f141 0100 	adc.w	r1, r1, #0
   a2d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a2d2c:	bf08      	it	eq
   a2d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a2d32:	bd70      	pop	{r4, r5, r6, pc}
   a2d34:	f1c4 0520 	rsb	r5, r4, #32
   a2d38:	fa00 f205 	lsl.w	r2, r0, r5
   a2d3c:	ea4e 0e02 	orr.w	lr, lr, r2
   a2d40:	fa20 f304 	lsr.w	r3, r0, r4
   a2d44:	fa01 f205 	lsl.w	r2, r1, r5
   a2d48:	ea43 0302 	orr.w	r3, r3, r2
   a2d4c:	fa21 f004 	lsr.w	r0, r1, r4
   a2d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a2d54:	fa21 f204 	lsr.w	r2, r1, r4
   a2d58:	ea20 0002 	bic.w	r0, r0, r2
   a2d5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a2d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a2d64:	bf08      	it	eq
   a2d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a2d6a:	bd70      	pop	{r4, r5, r6, pc}
   a2d6c:	f094 0f00 	teq	r4, #0
   a2d70:	d10f      	bne.n	a2d92 <__aeabi_dmul+0x1c2>
   a2d72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a2d76:	0040      	lsls	r0, r0, #1
   a2d78:	eb41 0101 	adc.w	r1, r1, r1
   a2d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a2d80:	bf08      	it	eq
   a2d82:	3c01      	subeq	r4, #1
   a2d84:	d0f7      	beq.n	a2d76 <__aeabi_dmul+0x1a6>
   a2d86:	ea41 0106 	orr.w	r1, r1, r6
   a2d8a:	f095 0f00 	teq	r5, #0
   a2d8e:	bf18      	it	ne
   a2d90:	4770      	bxne	lr
   a2d92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a2d96:	0052      	lsls	r2, r2, #1
   a2d98:	eb43 0303 	adc.w	r3, r3, r3
   a2d9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a2da0:	bf08      	it	eq
   a2da2:	3d01      	subeq	r5, #1
   a2da4:	d0f7      	beq.n	a2d96 <__aeabi_dmul+0x1c6>
   a2da6:	ea43 0306 	orr.w	r3, r3, r6
   a2daa:	4770      	bx	lr
   a2dac:	ea94 0f0c 	teq	r4, ip
   a2db0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a2db4:	bf18      	it	ne
   a2db6:	ea95 0f0c 	teqne	r5, ip
   a2dba:	d00c      	beq.n	a2dd6 <__aeabi_dmul+0x206>
   a2dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a2dc0:	bf18      	it	ne
   a2dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a2dc6:	d1d1      	bne.n	a2d6c <__aeabi_dmul+0x19c>
   a2dc8:	ea81 0103 	eor.w	r1, r1, r3
   a2dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a2dd0:	f04f 0000 	mov.w	r0, #0
   a2dd4:	bd70      	pop	{r4, r5, r6, pc}
   a2dd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a2dda:	bf06      	itte	eq
   a2ddc:	4610      	moveq	r0, r2
   a2dde:	4619      	moveq	r1, r3
   a2de0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a2de4:	d019      	beq.n	a2e1a <__aeabi_dmul+0x24a>
   a2de6:	ea94 0f0c 	teq	r4, ip
   a2dea:	d102      	bne.n	a2df2 <__aeabi_dmul+0x222>
   a2dec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a2df0:	d113      	bne.n	a2e1a <__aeabi_dmul+0x24a>
   a2df2:	ea95 0f0c 	teq	r5, ip
   a2df6:	d105      	bne.n	a2e04 <__aeabi_dmul+0x234>
   a2df8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a2dfc:	bf1c      	itt	ne
   a2dfe:	4610      	movne	r0, r2
   a2e00:	4619      	movne	r1, r3
   a2e02:	d10a      	bne.n	a2e1a <__aeabi_dmul+0x24a>
   a2e04:	ea81 0103 	eor.w	r1, r1, r3
   a2e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a2e0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a2e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a2e14:	f04f 0000 	mov.w	r0, #0
   a2e18:	bd70      	pop	{r4, r5, r6, pc}
   a2e1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a2e1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a2e22:	bd70      	pop	{r4, r5, r6, pc}

000a2e24 <__aeabi_ddiv>:
   a2e24:	b570      	push	{r4, r5, r6, lr}
   a2e26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a2e2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a2e2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a2e32:	bf1d      	ittte	ne
   a2e34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a2e38:	ea94 0f0c 	teqne	r4, ip
   a2e3c:	ea95 0f0c 	teqne	r5, ip
   a2e40:	f000 f8a7 	bleq	a2f92 <__aeabi_ddiv+0x16e>
   a2e44:	eba4 0405 	sub.w	r4, r4, r5
   a2e48:	ea81 0e03 	eor.w	lr, r1, r3
   a2e4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a2e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a2e54:	f000 8088 	beq.w	a2f68 <__aeabi_ddiv+0x144>
   a2e58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a2e5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a2e60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a2e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a2e68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a2e6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a2e70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a2e74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a2e78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a2e7c:	429d      	cmp	r5, r3
   a2e7e:	bf08      	it	eq
   a2e80:	4296      	cmpeq	r6, r2
   a2e82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a2e86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a2e8a:	d202      	bcs.n	a2e92 <__aeabi_ddiv+0x6e>
   a2e8c:	085b      	lsrs	r3, r3, #1
   a2e8e:	ea4f 0232 	mov.w	r2, r2, rrx
   a2e92:	1ab6      	subs	r6, r6, r2
   a2e94:	eb65 0503 	sbc.w	r5, r5, r3
   a2e98:	085b      	lsrs	r3, r3, #1
   a2e9a:	ea4f 0232 	mov.w	r2, r2, rrx
   a2e9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a2ea2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a2ea6:	ebb6 0e02 	subs.w	lr, r6, r2
   a2eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2eae:	bf22      	ittt	cs
   a2eb0:	1ab6      	subcs	r6, r6, r2
   a2eb2:	4675      	movcs	r5, lr
   a2eb4:	ea40 000c 	orrcs.w	r0, r0, ip
   a2eb8:	085b      	lsrs	r3, r3, #1
   a2eba:	ea4f 0232 	mov.w	r2, r2, rrx
   a2ebe:	ebb6 0e02 	subs.w	lr, r6, r2
   a2ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2ec6:	bf22      	ittt	cs
   a2ec8:	1ab6      	subcs	r6, r6, r2
   a2eca:	4675      	movcs	r5, lr
   a2ecc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a2ed0:	085b      	lsrs	r3, r3, #1
   a2ed2:	ea4f 0232 	mov.w	r2, r2, rrx
   a2ed6:	ebb6 0e02 	subs.w	lr, r6, r2
   a2eda:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2ede:	bf22      	ittt	cs
   a2ee0:	1ab6      	subcs	r6, r6, r2
   a2ee2:	4675      	movcs	r5, lr
   a2ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a2ee8:	085b      	lsrs	r3, r3, #1
   a2eea:	ea4f 0232 	mov.w	r2, r2, rrx
   a2eee:	ebb6 0e02 	subs.w	lr, r6, r2
   a2ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   a2ef6:	bf22      	ittt	cs
   a2ef8:	1ab6      	subcs	r6, r6, r2
   a2efa:	4675      	movcs	r5, lr
   a2efc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a2f00:	ea55 0e06 	orrs.w	lr, r5, r6
   a2f04:	d018      	beq.n	a2f38 <__aeabi_ddiv+0x114>
   a2f06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a2f0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a2f0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a2f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a2f16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a2f1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a2f1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a2f22:	d1c0      	bne.n	a2ea6 <__aeabi_ddiv+0x82>
   a2f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a2f28:	d10b      	bne.n	a2f42 <__aeabi_ddiv+0x11e>
   a2f2a:	ea41 0100 	orr.w	r1, r1, r0
   a2f2e:	f04f 0000 	mov.w	r0, #0
   a2f32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a2f36:	e7b6      	b.n	a2ea6 <__aeabi_ddiv+0x82>
   a2f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a2f3c:	bf04      	itt	eq
   a2f3e:	4301      	orreq	r1, r0
   a2f40:	2000      	moveq	r0, #0
   a2f42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a2f46:	bf88      	it	hi
   a2f48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a2f4c:	f63f aeaf 	bhi.w	a2cae <__aeabi_dmul+0xde>
   a2f50:	ebb5 0c03 	subs.w	ip, r5, r3
   a2f54:	bf04      	itt	eq
   a2f56:	ebb6 0c02 	subseq.w	ip, r6, r2
   a2f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a2f5e:	f150 0000 	adcs.w	r0, r0, #0
   a2f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a2f66:	bd70      	pop	{r4, r5, r6, pc}
   a2f68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a2f6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a2f70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a2f74:	bfc2      	ittt	gt
   a2f76:	ebd4 050c 	rsbsgt	r5, r4, ip
   a2f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a2f7e:	bd70      	popgt	{r4, r5, r6, pc}
   a2f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a2f84:	f04f 0e00 	mov.w	lr, #0
   a2f88:	3c01      	subs	r4, #1
   a2f8a:	e690      	b.n	a2cae <__aeabi_dmul+0xde>
   a2f8c:	ea45 0e06 	orr.w	lr, r5, r6
   a2f90:	e68d      	b.n	a2cae <__aeabi_dmul+0xde>
   a2f92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a2f96:	ea94 0f0c 	teq	r4, ip
   a2f9a:	bf08      	it	eq
   a2f9c:	ea95 0f0c 	teqeq	r5, ip
   a2fa0:	f43f af3b 	beq.w	a2e1a <__aeabi_dmul+0x24a>
   a2fa4:	ea94 0f0c 	teq	r4, ip
   a2fa8:	d10a      	bne.n	a2fc0 <__aeabi_ddiv+0x19c>
   a2faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a2fae:	f47f af34 	bne.w	a2e1a <__aeabi_dmul+0x24a>
   a2fb2:	ea95 0f0c 	teq	r5, ip
   a2fb6:	f47f af25 	bne.w	a2e04 <__aeabi_dmul+0x234>
   a2fba:	4610      	mov	r0, r2
   a2fbc:	4619      	mov	r1, r3
   a2fbe:	e72c      	b.n	a2e1a <__aeabi_dmul+0x24a>
   a2fc0:	ea95 0f0c 	teq	r5, ip
   a2fc4:	d106      	bne.n	a2fd4 <__aeabi_ddiv+0x1b0>
   a2fc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a2fca:	f43f aefd 	beq.w	a2dc8 <__aeabi_dmul+0x1f8>
   a2fce:	4610      	mov	r0, r2
   a2fd0:	4619      	mov	r1, r3
   a2fd2:	e722      	b.n	a2e1a <__aeabi_dmul+0x24a>
   a2fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a2fd8:	bf18      	it	ne
   a2fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a2fde:	f47f aec5 	bne.w	a2d6c <__aeabi_dmul+0x19c>
   a2fe2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a2fe6:	f47f af0d 	bne.w	a2e04 <__aeabi_dmul+0x234>
   a2fea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a2fee:	f47f aeeb 	bne.w	a2dc8 <__aeabi_dmul+0x1f8>
   a2ff2:	e712      	b.n	a2e1a <__aeabi_dmul+0x24a>

000a2ff4 <__gedf2>:
   a2ff4:	f04f 3cff 	mov.w	ip, #4294967295
   a2ff8:	e006      	b.n	a3008 <__cmpdf2+0x4>
   a2ffa:	bf00      	nop

000a2ffc <__ledf2>:
   a2ffc:	f04f 0c01 	mov.w	ip, #1
   a3000:	e002      	b.n	a3008 <__cmpdf2+0x4>
   a3002:	bf00      	nop

000a3004 <__cmpdf2>:
   a3004:	f04f 0c01 	mov.w	ip, #1
   a3008:	f84d cd04 	str.w	ip, [sp, #-4]!
   a300c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a3010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a3014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a3018:	bf18      	it	ne
   a301a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a301e:	d01b      	beq.n	a3058 <__cmpdf2+0x54>
   a3020:	b001      	add	sp, #4
   a3022:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a3026:	bf0c      	ite	eq
   a3028:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a302c:	ea91 0f03 	teqne	r1, r3
   a3030:	bf02      	ittt	eq
   a3032:	ea90 0f02 	teqeq	r0, r2
   a3036:	2000      	moveq	r0, #0
   a3038:	4770      	bxeq	lr
   a303a:	f110 0f00 	cmn.w	r0, #0
   a303e:	ea91 0f03 	teq	r1, r3
   a3042:	bf58      	it	pl
   a3044:	4299      	cmppl	r1, r3
   a3046:	bf08      	it	eq
   a3048:	4290      	cmpeq	r0, r2
   a304a:	bf2c      	ite	cs
   a304c:	17d8      	asrcs	r0, r3, #31
   a304e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a3052:	f040 0001 	orr.w	r0, r0, #1
   a3056:	4770      	bx	lr
   a3058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a305c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a3060:	d102      	bne.n	a3068 <__cmpdf2+0x64>
   a3062:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a3066:	d107      	bne.n	a3078 <__cmpdf2+0x74>
   a3068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a306c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a3070:	d1d6      	bne.n	a3020 <__cmpdf2+0x1c>
   a3072:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a3076:	d0d3      	beq.n	a3020 <__cmpdf2+0x1c>
   a3078:	f85d 0b04 	ldr.w	r0, [sp], #4
   a307c:	4770      	bx	lr
   a307e:	bf00      	nop

000a3080 <__aeabi_cdrcmple>:
   a3080:	4684      	mov	ip, r0
   a3082:	4610      	mov	r0, r2
   a3084:	4662      	mov	r2, ip
   a3086:	468c      	mov	ip, r1
   a3088:	4619      	mov	r1, r3
   a308a:	4663      	mov	r3, ip
   a308c:	e000      	b.n	a3090 <__aeabi_cdcmpeq>
   a308e:	bf00      	nop

000a3090 <__aeabi_cdcmpeq>:
   a3090:	b501      	push	{r0, lr}
   a3092:	f7ff ffb7 	bl	a3004 <__cmpdf2>
   a3096:	2800      	cmp	r0, #0
   a3098:	bf48      	it	mi
   a309a:	f110 0f00 	cmnmi.w	r0, #0
   a309e:	bd01      	pop	{r0, pc}

000a30a0 <__aeabi_dcmpeq>:
   a30a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a30a4:	f7ff fff4 	bl	a3090 <__aeabi_cdcmpeq>
   a30a8:	bf0c      	ite	eq
   a30aa:	2001      	moveq	r0, #1
   a30ac:	2000      	movne	r0, #0
   a30ae:	f85d fb08 	ldr.w	pc, [sp], #8
   a30b2:	bf00      	nop

000a30b4 <__aeabi_dcmplt>:
   a30b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a30b8:	f7ff ffea 	bl	a3090 <__aeabi_cdcmpeq>
   a30bc:	bf34      	ite	cc
   a30be:	2001      	movcc	r0, #1
   a30c0:	2000      	movcs	r0, #0
   a30c2:	f85d fb08 	ldr.w	pc, [sp], #8
   a30c6:	bf00      	nop

000a30c8 <__aeabi_dcmple>:
   a30c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a30cc:	f7ff ffe0 	bl	a3090 <__aeabi_cdcmpeq>
   a30d0:	bf94      	ite	ls
   a30d2:	2001      	movls	r0, #1
   a30d4:	2000      	movhi	r0, #0
   a30d6:	f85d fb08 	ldr.w	pc, [sp], #8
   a30da:	bf00      	nop

000a30dc <__aeabi_dcmpge>:
   a30dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a30e0:	f7ff ffce 	bl	a3080 <__aeabi_cdrcmple>
   a30e4:	bf94      	ite	ls
   a30e6:	2001      	movls	r0, #1
   a30e8:	2000      	movhi	r0, #0
   a30ea:	f85d fb08 	ldr.w	pc, [sp], #8
   a30ee:	bf00      	nop

000a30f0 <__aeabi_dcmpgt>:
   a30f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a30f4:	f7ff ffc4 	bl	a3080 <__aeabi_cdrcmple>
   a30f8:	bf34      	ite	cc
   a30fa:	2001      	movcc	r0, #1
   a30fc:	2000      	movcs	r0, #0
   a30fe:	f85d fb08 	ldr.w	pc, [sp], #8
   a3102:	bf00      	nop

000a3104 <__aeabi_d2iz>:
   a3104:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a3108:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a310c:	d215      	bcs.n	a313a <__aeabi_d2iz+0x36>
   a310e:	d511      	bpl.n	a3134 <__aeabi_d2iz+0x30>
   a3110:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a3114:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a3118:	d912      	bls.n	a3140 <__aeabi_d2iz+0x3c>
   a311a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a311e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a3122:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a3126:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a312a:	fa23 f002 	lsr.w	r0, r3, r2
   a312e:	bf18      	it	ne
   a3130:	4240      	negne	r0, r0
   a3132:	4770      	bx	lr
   a3134:	f04f 0000 	mov.w	r0, #0
   a3138:	4770      	bx	lr
   a313a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a313e:	d105      	bne.n	a314c <__aeabi_d2iz+0x48>
   a3140:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a3144:	bf08      	it	eq
   a3146:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a314a:	4770      	bx	lr
   a314c:	f04f 0000 	mov.w	r0, #0
   a3150:	4770      	bx	lr
   a3152:	bf00      	nop

000a3154 <__aeabi_d2uiz>:
   a3154:	004a      	lsls	r2, r1, #1
   a3156:	d211      	bcs.n	a317c <__aeabi_d2uiz+0x28>
   a3158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a315c:	d211      	bcs.n	a3182 <__aeabi_d2uiz+0x2e>
   a315e:	d50d      	bpl.n	a317c <__aeabi_d2uiz+0x28>
   a3160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a3164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a3168:	d40e      	bmi.n	a3188 <__aeabi_d2uiz+0x34>
   a316a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a316e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a3172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a3176:	fa23 f002 	lsr.w	r0, r3, r2
   a317a:	4770      	bx	lr
   a317c:	f04f 0000 	mov.w	r0, #0
   a3180:	4770      	bx	lr
   a3182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a3186:	d102      	bne.n	a318e <__aeabi_d2uiz+0x3a>
   a3188:	f04f 30ff 	mov.w	r0, #4294967295
   a318c:	4770      	bx	lr
   a318e:	f04f 0000 	mov.w	r0, #0
   a3192:	4770      	bx	lr

000a3194 <__aeabi_d2f>:
   a3194:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a3198:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a319c:	bf24      	itt	cs
   a319e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a31a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a31a6:	d90d      	bls.n	a31c4 <__aeabi_d2f+0x30>
   a31a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a31ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a31b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a31b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a31b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a31bc:	bf08      	it	eq
   a31be:	f020 0001 	biceq.w	r0, r0, #1
   a31c2:	4770      	bx	lr
   a31c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a31c8:	d121      	bne.n	a320e <__aeabi_d2f+0x7a>
   a31ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a31ce:	bfbc      	itt	lt
   a31d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a31d4:	4770      	bxlt	lr
   a31d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a31da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a31de:	f1c2 0218 	rsb	r2, r2, #24
   a31e2:	f1c2 0c20 	rsb	ip, r2, #32
   a31e6:	fa10 f30c 	lsls.w	r3, r0, ip
   a31ea:	fa20 f002 	lsr.w	r0, r0, r2
   a31ee:	bf18      	it	ne
   a31f0:	f040 0001 	orrne.w	r0, r0, #1
   a31f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a31f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a31fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   a3200:	ea40 000c 	orr.w	r0, r0, ip
   a3204:	fa23 f302 	lsr.w	r3, r3, r2
   a3208:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a320c:	e7cc      	b.n	a31a8 <__aeabi_d2f+0x14>
   a320e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a3212:	d107      	bne.n	a3224 <__aeabi_d2f+0x90>
   a3214:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a3218:	bf1e      	ittt	ne
   a321a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a321e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a3222:	4770      	bxne	lr
   a3224:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a3228:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a322c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a3230:	4770      	bx	lr
   a3232:	bf00      	nop

000a3234 <__aeabi_frsub>:
   a3234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a3238:	e002      	b.n	a3240 <__addsf3>
   a323a:	bf00      	nop

000a323c <__aeabi_fsub>:
   a323c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a3240 <__addsf3>:
   a3240:	0042      	lsls	r2, r0, #1
   a3242:	bf1f      	itttt	ne
   a3244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a3248:	ea92 0f03 	teqne	r2, r3
   a324c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a3250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a3254:	d06a      	beq.n	a332c <__addsf3+0xec>
   a3256:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a325a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a325e:	bfc1      	itttt	gt
   a3260:	18d2      	addgt	r2, r2, r3
   a3262:	4041      	eorgt	r1, r0
   a3264:	4048      	eorgt	r0, r1
   a3266:	4041      	eorgt	r1, r0
   a3268:	bfb8      	it	lt
   a326a:	425b      	neglt	r3, r3
   a326c:	2b19      	cmp	r3, #25
   a326e:	bf88      	it	hi
   a3270:	4770      	bxhi	lr
   a3272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a3276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a327a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a327e:	bf18      	it	ne
   a3280:	4240      	negne	r0, r0
   a3282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a3286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a328a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a328e:	bf18      	it	ne
   a3290:	4249      	negne	r1, r1
   a3292:	ea92 0f03 	teq	r2, r3
   a3296:	d03f      	beq.n	a3318 <__addsf3+0xd8>
   a3298:	f1a2 0201 	sub.w	r2, r2, #1
   a329c:	fa41 fc03 	asr.w	ip, r1, r3
   a32a0:	eb10 000c 	adds.w	r0, r0, ip
   a32a4:	f1c3 0320 	rsb	r3, r3, #32
   a32a8:	fa01 f103 	lsl.w	r1, r1, r3
   a32ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a32b0:	d502      	bpl.n	a32b8 <__addsf3+0x78>
   a32b2:	4249      	negs	r1, r1
   a32b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a32b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a32bc:	d313      	bcc.n	a32e6 <__addsf3+0xa6>
   a32be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a32c2:	d306      	bcc.n	a32d2 <__addsf3+0x92>
   a32c4:	0840      	lsrs	r0, r0, #1
   a32c6:	ea4f 0131 	mov.w	r1, r1, rrx
   a32ca:	f102 0201 	add.w	r2, r2, #1
   a32ce:	2afe      	cmp	r2, #254	; 0xfe
   a32d0:	d251      	bcs.n	a3376 <__addsf3+0x136>
   a32d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a32d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a32da:	bf08      	it	eq
   a32dc:	f020 0001 	biceq.w	r0, r0, #1
   a32e0:	ea40 0003 	orr.w	r0, r0, r3
   a32e4:	4770      	bx	lr
   a32e6:	0049      	lsls	r1, r1, #1
   a32e8:	eb40 0000 	adc.w	r0, r0, r0
   a32ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a32f0:	f1a2 0201 	sub.w	r2, r2, #1
   a32f4:	d1ed      	bne.n	a32d2 <__addsf3+0x92>
   a32f6:	fab0 fc80 	clz	ip, r0
   a32fa:	f1ac 0c08 	sub.w	ip, ip, #8
   a32fe:	ebb2 020c 	subs.w	r2, r2, ip
   a3302:	fa00 f00c 	lsl.w	r0, r0, ip
   a3306:	bfaa      	itet	ge
   a3308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a330c:	4252      	neglt	r2, r2
   a330e:	4318      	orrge	r0, r3
   a3310:	bfbc      	itt	lt
   a3312:	40d0      	lsrlt	r0, r2
   a3314:	4318      	orrlt	r0, r3
   a3316:	4770      	bx	lr
   a3318:	f092 0f00 	teq	r2, #0
   a331c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a3320:	bf06      	itte	eq
   a3322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a3326:	3201      	addeq	r2, #1
   a3328:	3b01      	subne	r3, #1
   a332a:	e7b5      	b.n	a3298 <__addsf3+0x58>
   a332c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a3330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a3334:	bf18      	it	ne
   a3336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a333a:	d021      	beq.n	a3380 <__addsf3+0x140>
   a333c:	ea92 0f03 	teq	r2, r3
   a3340:	d004      	beq.n	a334c <__addsf3+0x10c>
   a3342:	f092 0f00 	teq	r2, #0
   a3346:	bf08      	it	eq
   a3348:	4608      	moveq	r0, r1
   a334a:	4770      	bx	lr
   a334c:	ea90 0f01 	teq	r0, r1
   a3350:	bf1c      	itt	ne
   a3352:	2000      	movne	r0, #0
   a3354:	4770      	bxne	lr
   a3356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a335a:	d104      	bne.n	a3366 <__addsf3+0x126>
   a335c:	0040      	lsls	r0, r0, #1
   a335e:	bf28      	it	cs
   a3360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a3364:	4770      	bx	lr
   a3366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a336a:	bf3c      	itt	cc
   a336c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a3370:	4770      	bxcc	lr
   a3372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a3376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a337a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a337e:	4770      	bx	lr
   a3380:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a3384:	bf16      	itet	ne
   a3386:	4608      	movne	r0, r1
   a3388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a338c:	4601      	movne	r1, r0
   a338e:	0242      	lsls	r2, r0, #9
   a3390:	bf06      	itte	eq
   a3392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a3396:	ea90 0f01 	teqeq	r0, r1
   a339a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a339e:	4770      	bx	lr

000a33a0 <__aeabi_ui2f>:
   a33a0:	f04f 0300 	mov.w	r3, #0
   a33a4:	e004      	b.n	a33b0 <__aeabi_i2f+0x8>
   a33a6:	bf00      	nop

000a33a8 <__aeabi_i2f>:
   a33a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a33ac:	bf48      	it	mi
   a33ae:	4240      	negmi	r0, r0
   a33b0:	ea5f 0c00 	movs.w	ip, r0
   a33b4:	bf08      	it	eq
   a33b6:	4770      	bxeq	lr
   a33b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a33bc:	4601      	mov	r1, r0
   a33be:	f04f 0000 	mov.w	r0, #0
   a33c2:	e01c      	b.n	a33fe <__aeabi_l2f+0x2a>

000a33c4 <__aeabi_ul2f>:
   a33c4:	ea50 0201 	orrs.w	r2, r0, r1
   a33c8:	bf08      	it	eq
   a33ca:	4770      	bxeq	lr
   a33cc:	f04f 0300 	mov.w	r3, #0
   a33d0:	e00a      	b.n	a33e8 <__aeabi_l2f+0x14>
   a33d2:	bf00      	nop

000a33d4 <__aeabi_l2f>:
   a33d4:	ea50 0201 	orrs.w	r2, r0, r1
   a33d8:	bf08      	it	eq
   a33da:	4770      	bxeq	lr
   a33dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a33e0:	d502      	bpl.n	a33e8 <__aeabi_l2f+0x14>
   a33e2:	4240      	negs	r0, r0
   a33e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a33e8:	ea5f 0c01 	movs.w	ip, r1
   a33ec:	bf02      	ittt	eq
   a33ee:	4684      	moveq	ip, r0
   a33f0:	4601      	moveq	r1, r0
   a33f2:	2000      	moveq	r0, #0
   a33f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a33f8:	bf08      	it	eq
   a33fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a33fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a3402:	fabc f28c 	clz	r2, ip
   a3406:	3a08      	subs	r2, #8
   a3408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a340c:	db10      	blt.n	a3430 <__aeabi_l2f+0x5c>
   a340e:	fa01 fc02 	lsl.w	ip, r1, r2
   a3412:	4463      	add	r3, ip
   a3414:	fa00 fc02 	lsl.w	ip, r0, r2
   a3418:	f1c2 0220 	rsb	r2, r2, #32
   a341c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a3420:	fa20 f202 	lsr.w	r2, r0, r2
   a3424:	eb43 0002 	adc.w	r0, r3, r2
   a3428:	bf08      	it	eq
   a342a:	f020 0001 	biceq.w	r0, r0, #1
   a342e:	4770      	bx	lr
   a3430:	f102 0220 	add.w	r2, r2, #32
   a3434:	fa01 fc02 	lsl.w	ip, r1, r2
   a3438:	f1c2 0220 	rsb	r2, r2, #32
   a343c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a3440:	fa21 f202 	lsr.w	r2, r1, r2
   a3444:	eb43 0002 	adc.w	r0, r3, r2
   a3448:	bf08      	it	eq
   a344a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a344e:	4770      	bx	lr

000a3450 <__aeabi_fmul>:
   a3450:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a3454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a3458:	bf1e      	ittt	ne
   a345a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a345e:	ea92 0f0c 	teqne	r2, ip
   a3462:	ea93 0f0c 	teqne	r3, ip
   a3466:	d06f      	beq.n	a3548 <__aeabi_fmul+0xf8>
   a3468:	441a      	add	r2, r3
   a346a:	ea80 0c01 	eor.w	ip, r0, r1
   a346e:	0240      	lsls	r0, r0, #9
   a3470:	bf18      	it	ne
   a3472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a3476:	d01e      	beq.n	a34b6 <__aeabi_fmul+0x66>
   a3478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a347c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a3480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a3484:	fba0 3101 	umull	r3, r1, r0, r1
   a3488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a348c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a3490:	bf3e      	ittt	cc
   a3492:	0049      	lslcc	r1, r1, #1
   a3494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a3498:	005b      	lslcc	r3, r3, #1
   a349a:	ea40 0001 	orr.w	r0, r0, r1
   a349e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a34a2:	2afd      	cmp	r2, #253	; 0xfd
   a34a4:	d81d      	bhi.n	a34e2 <__aeabi_fmul+0x92>
   a34a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a34aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a34ae:	bf08      	it	eq
   a34b0:	f020 0001 	biceq.w	r0, r0, #1
   a34b4:	4770      	bx	lr
   a34b6:	f090 0f00 	teq	r0, #0
   a34ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a34be:	bf08      	it	eq
   a34c0:	0249      	lsleq	r1, r1, #9
   a34c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a34c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a34ca:	3a7f      	subs	r2, #127	; 0x7f
   a34cc:	bfc2      	ittt	gt
   a34ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a34d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a34d6:	4770      	bxgt	lr
   a34d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a34dc:	f04f 0300 	mov.w	r3, #0
   a34e0:	3a01      	subs	r2, #1
   a34e2:	dc5d      	bgt.n	a35a0 <__aeabi_fmul+0x150>
   a34e4:	f112 0f19 	cmn.w	r2, #25
   a34e8:	bfdc      	itt	le
   a34ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a34ee:	4770      	bxle	lr
   a34f0:	f1c2 0200 	rsb	r2, r2, #0
   a34f4:	0041      	lsls	r1, r0, #1
   a34f6:	fa21 f102 	lsr.w	r1, r1, r2
   a34fa:	f1c2 0220 	rsb	r2, r2, #32
   a34fe:	fa00 fc02 	lsl.w	ip, r0, r2
   a3502:	ea5f 0031 	movs.w	r0, r1, rrx
   a3506:	f140 0000 	adc.w	r0, r0, #0
   a350a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a350e:	bf08      	it	eq
   a3510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a3514:	4770      	bx	lr
   a3516:	f092 0f00 	teq	r2, #0
   a351a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a351e:	bf02      	ittt	eq
   a3520:	0040      	lsleq	r0, r0, #1
   a3522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a3526:	3a01      	subeq	r2, #1
   a3528:	d0f9      	beq.n	a351e <__aeabi_fmul+0xce>
   a352a:	ea40 000c 	orr.w	r0, r0, ip
   a352e:	f093 0f00 	teq	r3, #0
   a3532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a3536:	bf02      	ittt	eq
   a3538:	0049      	lsleq	r1, r1, #1
   a353a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a353e:	3b01      	subeq	r3, #1
   a3540:	d0f9      	beq.n	a3536 <__aeabi_fmul+0xe6>
   a3542:	ea41 010c 	orr.w	r1, r1, ip
   a3546:	e78f      	b.n	a3468 <__aeabi_fmul+0x18>
   a3548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a354c:	ea92 0f0c 	teq	r2, ip
   a3550:	bf18      	it	ne
   a3552:	ea93 0f0c 	teqne	r3, ip
   a3556:	d00a      	beq.n	a356e <__aeabi_fmul+0x11e>
   a3558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a355c:	bf18      	it	ne
   a355e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a3562:	d1d8      	bne.n	a3516 <__aeabi_fmul+0xc6>
   a3564:	ea80 0001 	eor.w	r0, r0, r1
   a3568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a356c:	4770      	bx	lr
   a356e:	f090 0f00 	teq	r0, #0
   a3572:	bf17      	itett	ne
   a3574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a3578:	4608      	moveq	r0, r1
   a357a:	f091 0f00 	teqne	r1, #0
   a357e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a3582:	d014      	beq.n	a35ae <__aeabi_fmul+0x15e>
   a3584:	ea92 0f0c 	teq	r2, ip
   a3588:	d101      	bne.n	a358e <__aeabi_fmul+0x13e>
   a358a:	0242      	lsls	r2, r0, #9
   a358c:	d10f      	bne.n	a35ae <__aeabi_fmul+0x15e>
   a358e:	ea93 0f0c 	teq	r3, ip
   a3592:	d103      	bne.n	a359c <__aeabi_fmul+0x14c>
   a3594:	024b      	lsls	r3, r1, #9
   a3596:	bf18      	it	ne
   a3598:	4608      	movne	r0, r1
   a359a:	d108      	bne.n	a35ae <__aeabi_fmul+0x15e>
   a359c:	ea80 0001 	eor.w	r0, r0, r1
   a35a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a35a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a35a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a35ac:	4770      	bx	lr
   a35ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a35b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a35b6:	4770      	bx	lr

000a35b8 <__aeabi_fdiv>:
   a35b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a35bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a35c0:	bf1e      	ittt	ne
   a35c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a35c6:	ea92 0f0c 	teqne	r2, ip
   a35ca:	ea93 0f0c 	teqne	r3, ip
   a35ce:	d069      	beq.n	a36a4 <__aeabi_fdiv+0xec>
   a35d0:	eba2 0203 	sub.w	r2, r2, r3
   a35d4:	ea80 0c01 	eor.w	ip, r0, r1
   a35d8:	0249      	lsls	r1, r1, #9
   a35da:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a35de:	d037      	beq.n	a3650 <__aeabi_fdiv+0x98>
   a35e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a35e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a35e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a35ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a35f0:	428b      	cmp	r3, r1
   a35f2:	bf38      	it	cc
   a35f4:	005b      	lslcc	r3, r3, #1
   a35f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a35fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a35fe:	428b      	cmp	r3, r1
   a3600:	bf24      	itt	cs
   a3602:	1a5b      	subcs	r3, r3, r1
   a3604:	ea40 000c 	orrcs.w	r0, r0, ip
   a3608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a360c:	bf24      	itt	cs
   a360e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a3612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a3616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a361a:	bf24      	itt	cs
   a361c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a3620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a3624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a3628:	bf24      	itt	cs
   a362a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a362e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a3632:	011b      	lsls	r3, r3, #4
   a3634:	bf18      	it	ne
   a3636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a363a:	d1e0      	bne.n	a35fe <__aeabi_fdiv+0x46>
   a363c:	2afd      	cmp	r2, #253	; 0xfd
   a363e:	f63f af50 	bhi.w	a34e2 <__aeabi_fmul+0x92>
   a3642:	428b      	cmp	r3, r1
   a3644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a3648:	bf08      	it	eq
   a364a:	f020 0001 	biceq.w	r0, r0, #1
   a364e:	4770      	bx	lr
   a3650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a3654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a3658:	327f      	adds	r2, #127	; 0x7f
   a365a:	bfc2      	ittt	gt
   a365c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a3660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a3664:	4770      	bxgt	lr
   a3666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a366a:	f04f 0300 	mov.w	r3, #0
   a366e:	3a01      	subs	r2, #1
   a3670:	e737      	b.n	a34e2 <__aeabi_fmul+0x92>
   a3672:	f092 0f00 	teq	r2, #0
   a3676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a367a:	bf02      	ittt	eq
   a367c:	0040      	lsleq	r0, r0, #1
   a367e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a3682:	3a01      	subeq	r2, #1
   a3684:	d0f9      	beq.n	a367a <__aeabi_fdiv+0xc2>
   a3686:	ea40 000c 	orr.w	r0, r0, ip
   a368a:	f093 0f00 	teq	r3, #0
   a368e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a3692:	bf02      	ittt	eq
   a3694:	0049      	lsleq	r1, r1, #1
   a3696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a369a:	3b01      	subeq	r3, #1
   a369c:	d0f9      	beq.n	a3692 <__aeabi_fdiv+0xda>
   a369e:	ea41 010c 	orr.w	r1, r1, ip
   a36a2:	e795      	b.n	a35d0 <__aeabi_fdiv+0x18>
   a36a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a36a8:	ea92 0f0c 	teq	r2, ip
   a36ac:	d108      	bne.n	a36c0 <__aeabi_fdiv+0x108>
   a36ae:	0242      	lsls	r2, r0, #9
   a36b0:	f47f af7d 	bne.w	a35ae <__aeabi_fmul+0x15e>
   a36b4:	ea93 0f0c 	teq	r3, ip
   a36b8:	f47f af70 	bne.w	a359c <__aeabi_fmul+0x14c>
   a36bc:	4608      	mov	r0, r1
   a36be:	e776      	b.n	a35ae <__aeabi_fmul+0x15e>
   a36c0:	ea93 0f0c 	teq	r3, ip
   a36c4:	d104      	bne.n	a36d0 <__aeabi_fdiv+0x118>
   a36c6:	024b      	lsls	r3, r1, #9
   a36c8:	f43f af4c 	beq.w	a3564 <__aeabi_fmul+0x114>
   a36cc:	4608      	mov	r0, r1
   a36ce:	e76e      	b.n	a35ae <__aeabi_fmul+0x15e>
   a36d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a36d4:	bf18      	it	ne
   a36d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a36da:	d1ca      	bne.n	a3672 <__aeabi_fdiv+0xba>
   a36dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a36e0:	f47f af5c 	bne.w	a359c <__aeabi_fmul+0x14c>
   a36e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a36e8:	f47f af3c 	bne.w	a3564 <__aeabi_fmul+0x114>
   a36ec:	e75f      	b.n	a35ae <__aeabi_fmul+0x15e>
   a36ee:	bf00      	nop

000a36f0 <__gesf2>:
   a36f0:	f04f 3cff 	mov.w	ip, #4294967295
   a36f4:	e006      	b.n	a3704 <__cmpsf2+0x4>
   a36f6:	bf00      	nop

000a36f8 <__lesf2>:
   a36f8:	f04f 0c01 	mov.w	ip, #1
   a36fc:	e002      	b.n	a3704 <__cmpsf2+0x4>
   a36fe:	bf00      	nop

000a3700 <__cmpsf2>:
   a3700:	f04f 0c01 	mov.w	ip, #1
   a3704:	f84d cd04 	str.w	ip, [sp, #-4]!
   a3708:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a370c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a3710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a3714:	bf18      	it	ne
   a3716:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a371a:	d011      	beq.n	a3740 <__cmpsf2+0x40>
   a371c:	b001      	add	sp, #4
   a371e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a3722:	bf18      	it	ne
   a3724:	ea90 0f01 	teqne	r0, r1
   a3728:	bf58      	it	pl
   a372a:	ebb2 0003 	subspl.w	r0, r2, r3
   a372e:	bf88      	it	hi
   a3730:	17c8      	asrhi	r0, r1, #31
   a3732:	bf38      	it	cc
   a3734:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a3738:	bf18      	it	ne
   a373a:	f040 0001 	orrne.w	r0, r0, #1
   a373e:	4770      	bx	lr
   a3740:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a3744:	d102      	bne.n	a374c <__cmpsf2+0x4c>
   a3746:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a374a:	d105      	bne.n	a3758 <__cmpsf2+0x58>
   a374c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a3750:	d1e4      	bne.n	a371c <__cmpsf2+0x1c>
   a3752:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a3756:	d0e1      	beq.n	a371c <__cmpsf2+0x1c>
   a3758:	f85d 0b04 	ldr.w	r0, [sp], #4
   a375c:	4770      	bx	lr
   a375e:	bf00      	nop

000a3760 <__aeabi_cfrcmple>:
   a3760:	4684      	mov	ip, r0
   a3762:	4608      	mov	r0, r1
   a3764:	4661      	mov	r1, ip
   a3766:	e7ff      	b.n	a3768 <__aeabi_cfcmpeq>

000a3768 <__aeabi_cfcmpeq>:
   a3768:	b50f      	push	{r0, r1, r2, r3, lr}
   a376a:	f7ff ffc9 	bl	a3700 <__cmpsf2>
   a376e:	2800      	cmp	r0, #0
   a3770:	bf48      	it	mi
   a3772:	f110 0f00 	cmnmi.w	r0, #0
   a3776:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a3778 <__aeabi_fcmpeq>:
   a3778:	f84d ed08 	str.w	lr, [sp, #-8]!
   a377c:	f7ff fff4 	bl	a3768 <__aeabi_cfcmpeq>
   a3780:	bf0c      	ite	eq
   a3782:	2001      	moveq	r0, #1
   a3784:	2000      	movne	r0, #0
   a3786:	f85d fb08 	ldr.w	pc, [sp], #8
   a378a:	bf00      	nop

000a378c <__aeabi_fcmplt>:
   a378c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a3790:	f7ff ffea 	bl	a3768 <__aeabi_cfcmpeq>
   a3794:	bf34      	ite	cc
   a3796:	2001      	movcc	r0, #1
   a3798:	2000      	movcs	r0, #0
   a379a:	f85d fb08 	ldr.w	pc, [sp], #8
   a379e:	bf00      	nop

000a37a0 <__aeabi_fcmple>:
   a37a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a37a4:	f7ff ffe0 	bl	a3768 <__aeabi_cfcmpeq>
   a37a8:	bf94      	ite	ls
   a37aa:	2001      	movls	r0, #1
   a37ac:	2000      	movhi	r0, #0
   a37ae:	f85d fb08 	ldr.w	pc, [sp], #8
   a37b2:	bf00      	nop

000a37b4 <__aeabi_fcmpge>:
   a37b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a37b8:	f7ff ffd2 	bl	a3760 <__aeabi_cfrcmple>
   a37bc:	bf94      	ite	ls
   a37be:	2001      	movls	r0, #1
   a37c0:	2000      	movhi	r0, #0
   a37c2:	f85d fb08 	ldr.w	pc, [sp], #8
   a37c6:	bf00      	nop

000a37c8 <__aeabi_fcmpgt>:
   a37c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a37cc:	f7ff ffc8 	bl	a3760 <__aeabi_cfrcmple>
   a37d0:	bf34      	ite	cc
   a37d2:	2001      	movcc	r0, #1
   a37d4:	2000      	movcs	r0, #0
   a37d6:	f85d fb08 	ldr.w	pc, [sp], #8
   a37da:	bf00      	nop

000a37dc <__aeabi_f2iz>:
   a37dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a37e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a37e4:	d30f      	bcc.n	a3806 <__aeabi_f2iz+0x2a>
   a37e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a37ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a37ee:	d90d      	bls.n	a380c <__aeabi_f2iz+0x30>
   a37f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a37f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a37f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a37fc:	fa23 f002 	lsr.w	r0, r3, r2
   a3800:	bf18      	it	ne
   a3802:	4240      	negne	r0, r0
   a3804:	4770      	bx	lr
   a3806:	f04f 0000 	mov.w	r0, #0
   a380a:	4770      	bx	lr
   a380c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a3810:	d101      	bne.n	a3816 <__aeabi_f2iz+0x3a>
   a3812:	0242      	lsls	r2, r0, #9
   a3814:	d105      	bne.n	a3822 <__aeabi_f2iz+0x46>
   a3816:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a381a:	bf08      	it	eq
   a381c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a3820:	4770      	bx	lr
   a3822:	f04f 0000 	mov.w	r0, #0
   a3826:	4770      	bx	lr

000a3828 <__aeabi_f2uiz>:
   a3828:	0042      	lsls	r2, r0, #1
   a382a:	d20e      	bcs.n	a384a <__aeabi_f2uiz+0x22>
   a382c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a3830:	d30b      	bcc.n	a384a <__aeabi_f2uiz+0x22>
   a3832:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a3836:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a383a:	d409      	bmi.n	a3850 <__aeabi_f2uiz+0x28>
   a383c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a3840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a3844:	fa23 f002 	lsr.w	r0, r3, r2
   a3848:	4770      	bx	lr
   a384a:	f04f 0000 	mov.w	r0, #0
   a384e:	4770      	bx	lr
   a3850:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a3854:	d101      	bne.n	a385a <__aeabi_f2uiz+0x32>
   a3856:	0242      	lsls	r2, r0, #9
   a3858:	d102      	bne.n	a3860 <__aeabi_f2uiz+0x38>
   a385a:	f04f 30ff 	mov.w	r0, #4294967295
   a385e:	4770      	bx	lr
   a3860:	f04f 0000 	mov.w	r0, #0
   a3864:	4770      	bx	lr
   a3866:	bf00      	nop

000a3868 <__libc_init_array>:
   a3868:	b570      	push	{r4, r5, r6, lr}
   a386a:	4e0f      	ldr	r6, [pc, #60]	; (a38a8 <__libc_init_array+0x40>)
   a386c:	4d0f      	ldr	r5, [pc, #60]	; (a38ac <__libc_init_array+0x44>)
   a386e:	1b76      	subs	r6, r6, r5
   a3870:	10b6      	asrs	r6, r6, #2
   a3872:	bf18      	it	ne
   a3874:	2400      	movne	r4, #0
   a3876:	d005      	beq.n	a3884 <__libc_init_array+0x1c>
   a3878:	3401      	adds	r4, #1
   a387a:	f855 3b04 	ldr.w	r3, [r5], #4
   a387e:	4798      	blx	r3
   a3880:	42a6      	cmp	r6, r4
   a3882:	d1f9      	bne.n	a3878 <__libc_init_array+0x10>
   a3884:	4e0a      	ldr	r6, [pc, #40]	; (a38b0 <__libc_init_array+0x48>)
   a3886:	4d0b      	ldr	r5, [pc, #44]	; (a38b4 <__libc_init_array+0x4c>)
   a3888:	f002 f878 	bl	a597c <_init>
   a388c:	1b76      	subs	r6, r6, r5
   a388e:	10b6      	asrs	r6, r6, #2
   a3890:	bf18      	it	ne
   a3892:	2400      	movne	r4, #0
   a3894:	d006      	beq.n	a38a4 <__libc_init_array+0x3c>
   a3896:	3401      	adds	r4, #1
   a3898:	f855 3b04 	ldr.w	r3, [r5], #4
   a389c:	4798      	blx	r3
   a389e:	42a6      	cmp	r6, r4
   a38a0:	d1f9      	bne.n	a3896 <__libc_init_array+0x2e>
   a38a2:	bd70      	pop	{r4, r5, r6, pc}
   a38a4:	bd70      	pop	{r4, r5, r6, pc}
   a38a6:	bf00      	nop
   a38a8:	000a5988 	.word	0x000a5988
   a38ac:	000a5988 	.word	0x000a5988
   a38b0:	000a5990 	.word	0x000a5990
   a38b4:	000a5988 	.word	0x000a5988

000a38b8 <memcpy>:
   a38b8:	4684      	mov	ip, r0
   a38ba:	ea41 0300 	orr.w	r3, r1, r0
   a38be:	f013 0303 	ands.w	r3, r3, #3
   a38c2:	d149      	bne.n	a3958 <memcpy+0xa0>
   a38c4:	3a40      	subs	r2, #64	; 0x40
   a38c6:	d323      	bcc.n	a3910 <memcpy+0x58>
   a38c8:	680b      	ldr	r3, [r1, #0]
   a38ca:	6003      	str	r3, [r0, #0]
   a38cc:	684b      	ldr	r3, [r1, #4]
   a38ce:	6043      	str	r3, [r0, #4]
   a38d0:	688b      	ldr	r3, [r1, #8]
   a38d2:	6083      	str	r3, [r0, #8]
   a38d4:	68cb      	ldr	r3, [r1, #12]
   a38d6:	60c3      	str	r3, [r0, #12]
   a38d8:	690b      	ldr	r3, [r1, #16]
   a38da:	6103      	str	r3, [r0, #16]
   a38dc:	694b      	ldr	r3, [r1, #20]
   a38de:	6143      	str	r3, [r0, #20]
   a38e0:	698b      	ldr	r3, [r1, #24]
   a38e2:	6183      	str	r3, [r0, #24]
   a38e4:	69cb      	ldr	r3, [r1, #28]
   a38e6:	61c3      	str	r3, [r0, #28]
   a38e8:	6a0b      	ldr	r3, [r1, #32]
   a38ea:	6203      	str	r3, [r0, #32]
   a38ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a38ee:	6243      	str	r3, [r0, #36]	; 0x24
   a38f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a38f2:	6283      	str	r3, [r0, #40]	; 0x28
   a38f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a38f6:	62c3      	str	r3, [r0, #44]	; 0x2c
   a38f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a38fa:	6303      	str	r3, [r0, #48]	; 0x30
   a38fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a38fe:	6343      	str	r3, [r0, #52]	; 0x34
   a3900:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a3902:	6383      	str	r3, [r0, #56]	; 0x38
   a3904:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a3906:	63c3      	str	r3, [r0, #60]	; 0x3c
   a3908:	3040      	adds	r0, #64	; 0x40
   a390a:	3140      	adds	r1, #64	; 0x40
   a390c:	3a40      	subs	r2, #64	; 0x40
   a390e:	d2db      	bcs.n	a38c8 <memcpy+0x10>
   a3910:	3230      	adds	r2, #48	; 0x30
   a3912:	d30b      	bcc.n	a392c <memcpy+0x74>
   a3914:	680b      	ldr	r3, [r1, #0]
   a3916:	6003      	str	r3, [r0, #0]
   a3918:	684b      	ldr	r3, [r1, #4]
   a391a:	6043      	str	r3, [r0, #4]
   a391c:	688b      	ldr	r3, [r1, #8]
   a391e:	6083      	str	r3, [r0, #8]
   a3920:	68cb      	ldr	r3, [r1, #12]
   a3922:	60c3      	str	r3, [r0, #12]
   a3924:	3010      	adds	r0, #16
   a3926:	3110      	adds	r1, #16
   a3928:	3a10      	subs	r2, #16
   a392a:	d2f3      	bcs.n	a3914 <memcpy+0x5c>
   a392c:	320c      	adds	r2, #12
   a392e:	d305      	bcc.n	a393c <memcpy+0x84>
   a3930:	f851 3b04 	ldr.w	r3, [r1], #4
   a3934:	f840 3b04 	str.w	r3, [r0], #4
   a3938:	3a04      	subs	r2, #4
   a393a:	d2f9      	bcs.n	a3930 <memcpy+0x78>
   a393c:	3204      	adds	r2, #4
   a393e:	d008      	beq.n	a3952 <memcpy+0x9a>
   a3940:	07d2      	lsls	r2, r2, #31
   a3942:	bf1c      	itt	ne
   a3944:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a3948:	f800 3b01 	strbne.w	r3, [r0], #1
   a394c:	d301      	bcc.n	a3952 <memcpy+0x9a>
   a394e:	880b      	ldrh	r3, [r1, #0]
   a3950:	8003      	strh	r3, [r0, #0]
   a3952:	4660      	mov	r0, ip
   a3954:	4770      	bx	lr
   a3956:	bf00      	nop
   a3958:	2a08      	cmp	r2, #8
   a395a:	d313      	bcc.n	a3984 <memcpy+0xcc>
   a395c:	078b      	lsls	r3, r1, #30
   a395e:	d0b1      	beq.n	a38c4 <memcpy+0xc>
   a3960:	f010 0303 	ands.w	r3, r0, #3
   a3964:	d0ae      	beq.n	a38c4 <memcpy+0xc>
   a3966:	f1c3 0304 	rsb	r3, r3, #4
   a396a:	1ad2      	subs	r2, r2, r3
   a396c:	07db      	lsls	r3, r3, #31
   a396e:	bf1c      	itt	ne
   a3970:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a3974:	f800 3b01 	strbne.w	r3, [r0], #1
   a3978:	d3a4      	bcc.n	a38c4 <memcpy+0xc>
   a397a:	f831 3b02 	ldrh.w	r3, [r1], #2
   a397e:	f820 3b02 	strh.w	r3, [r0], #2
   a3982:	e79f      	b.n	a38c4 <memcpy+0xc>
   a3984:	3a04      	subs	r2, #4
   a3986:	d3d9      	bcc.n	a393c <memcpy+0x84>
   a3988:	3a01      	subs	r2, #1
   a398a:	f811 3b01 	ldrb.w	r3, [r1], #1
   a398e:	f800 3b01 	strb.w	r3, [r0], #1
   a3992:	d2f9      	bcs.n	a3988 <memcpy+0xd0>
   a3994:	780b      	ldrb	r3, [r1, #0]
   a3996:	7003      	strb	r3, [r0, #0]
   a3998:	784b      	ldrb	r3, [r1, #1]
   a399a:	7043      	strb	r3, [r0, #1]
   a399c:	788b      	ldrb	r3, [r1, #2]
   a399e:	7083      	strb	r3, [r0, #2]
   a39a0:	4660      	mov	r0, ip
   a39a2:	4770      	bx	lr

000a39a4 <memset>:
   a39a4:	b470      	push	{r4, r5, r6}
   a39a6:	0784      	lsls	r4, r0, #30
   a39a8:	d046      	beq.n	a3a38 <memset+0x94>
   a39aa:	1e54      	subs	r4, r2, #1
   a39ac:	2a00      	cmp	r2, #0
   a39ae:	d041      	beq.n	a3a34 <memset+0x90>
   a39b0:	b2cd      	uxtb	r5, r1
   a39b2:	4603      	mov	r3, r0
   a39b4:	e002      	b.n	a39bc <memset+0x18>
   a39b6:	1e62      	subs	r2, r4, #1
   a39b8:	b3e4      	cbz	r4, a3a34 <memset+0x90>
   a39ba:	4614      	mov	r4, r2
   a39bc:	f803 5b01 	strb.w	r5, [r3], #1
   a39c0:	079a      	lsls	r2, r3, #30
   a39c2:	d1f8      	bne.n	a39b6 <memset+0x12>
   a39c4:	2c03      	cmp	r4, #3
   a39c6:	d92e      	bls.n	a3a26 <memset+0x82>
   a39c8:	b2cd      	uxtb	r5, r1
   a39ca:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a39ce:	2c0f      	cmp	r4, #15
   a39d0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a39d4:	d919      	bls.n	a3a0a <memset+0x66>
   a39d6:	4626      	mov	r6, r4
   a39d8:	f103 0210 	add.w	r2, r3, #16
   a39dc:	3e10      	subs	r6, #16
   a39de:	2e0f      	cmp	r6, #15
   a39e0:	f842 5c10 	str.w	r5, [r2, #-16]
   a39e4:	f842 5c0c 	str.w	r5, [r2, #-12]
   a39e8:	f842 5c08 	str.w	r5, [r2, #-8]
   a39ec:	f842 5c04 	str.w	r5, [r2, #-4]
   a39f0:	f102 0210 	add.w	r2, r2, #16
   a39f4:	d8f2      	bhi.n	a39dc <memset+0x38>
   a39f6:	f1a4 0210 	sub.w	r2, r4, #16
   a39fa:	f022 020f 	bic.w	r2, r2, #15
   a39fe:	f004 040f 	and.w	r4, r4, #15
   a3a02:	3210      	adds	r2, #16
   a3a04:	2c03      	cmp	r4, #3
   a3a06:	4413      	add	r3, r2
   a3a08:	d90d      	bls.n	a3a26 <memset+0x82>
   a3a0a:	461e      	mov	r6, r3
   a3a0c:	4622      	mov	r2, r4
   a3a0e:	3a04      	subs	r2, #4
   a3a10:	2a03      	cmp	r2, #3
   a3a12:	f846 5b04 	str.w	r5, [r6], #4
   a3a16:	d8fa      	bhi.n	a3a0e <memset+0x6a>
   a3a18:	1f22      	subs	r2, r4, #4
   a3a1a:	f022 0203 	bic.w	r2, r2, #3
   a3a1e:	3204      	adds	r2, #4
   a3a20:	4413      	add	r3, r2
   a3a22:	f004 0403 	and.w	r4, r4, #3
   a3a26:	b12c      	cbz	r4, a3a34 <memset+0x90>
   a3a28:	b2c9      	uxtb	r1, r1
   a3a2a:	441c      	add	r4, r3
   a3a2c:	f803 1b01 	strb.w	r1, [r3], #1
   a3a30:	42a3      	cmp	r3, r4
   a3a32:	d1fb      	bne.n	a3a2c <memset+0x88>
   a3a34:	bc70      	pop	{r4, r5, r6}
   a3a36:	4770      	bx	lr
   a3a38:	4614      	mov	r4, r2
   a3a3a:	4603      	mov	r3, r0
   a3a3c:	e7c2      	b.n	a39c4 <memset+0x20>
   a3a3e:	bf00      	nop

000a3a40 <_puts_r>:
   a3a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   a3a42:	4605      	mov	r5, r0
   a3a44:	b089      	sub	sp, #36	; 0x24
   a3a46:	4608      	mov	r0, r1
   a3a48:	460c      	mov	r4, r1
   a3a4a:	f000 f8e5 	bl	a3c18 <strlen>
   a3a4e:	1c43      	adds	r3, r0, #1
   a3a50:	4f14      	ldr	r7, [pc, #80]	; (a3aa4 <_puts_r+0x64>)
   a3a52:	9303      	str	r3, [sp, #12]
   a3a54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a3a56:	2601      	movs	r6, #1
   a3a58:	a904      	add	r1, sp, #16
   a3a5a:	2202      	movs	r2, #2
   a3a5c:	9404      	str	r4, [sp, #16]
   a3a5e:	9005      	str	r0, [sp, #20]
   a3a60:	68ac      	ldr	r4, [r5, #8]
   a3a62:	9706      	str	r7, [sp, #24]
   a3a64:	9607      	str	r6, [sp, #28]
   a3a66:	9101      	str	r1, [sp, #4]
   a3a68:	9202      	str	r2, [sp, #8]
   a3a6a:	b1b3      	cbz	r3, a3a9a <_puts_r+0x5a>
   a3a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3a70:	049a      	lsls	r2, r3, #18
   a3a72:	d406      	bmi.n	a3a82 <_puts_r+0x42>
   a3a74:	6e62      	ldr	r2, [r4, #100]	; 0x64
   a3a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a3a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   a3a7e:	81a3      	strh	r3, [r4, #12]
   a3a80:	6662      	str	r2, [r4, #100]	; 0x64
   a3a82:	4621      	mov	r1, r4
   a3a84:	4628      	mov	r0, r5
   a3a86:	aa01      	add	r2, sp, #4
   a3a88:	f000 fbf4 	bl	a4274 <__sfvwrite_r>
   a3a8c:	2800      	cmp	r0, #0
   a3a8e:	bf14      	ite	ne
   a3a90:	f04f 30ff 	movne.w	r0, #4294967295
   a3a94:	200a      	moveq	r0, #10
   a3a96:	b009      	add	sp, #36	; 0x24
   a3a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a3a9a:	4628      	mov	r0, r5
   a3a9c:	f000 fa96 	bl	a3fcc <__sinit>
   a3aa0:	e7e4      	b.n	a3a6c <_puts_r+0x2c>
   a3aa2:	bf00      	nop
   a3aa4:	000a5978 	.word	0x000a5978

000a3aa8 <puts>:
   a3aa8:	4b02      	ldr	r3, [pc, #8]	; (a3ab4 <puts+0xc>)
   a3aaa:	4601      	mov	r1, r0
   a3aac:	6818      	ldr	r0, [r3, #0]
   a3aae:	f7ff bfc7 	b.w	a3a40 <_puts_r>
   a3ab2:	bf00      	nop
   a3ab4:	200710c8 	.word	0x200710c8

000a3ab8 <setbuf>:
   a3ab8:	2900      	cmp	r1, #0
   a3aba:	bf0c      	ite	eq
   a3abc:	2202      	moveq	r2, #2
   a3abe:	2200      	movne	r2, #0
   a3ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a3ac4:	f000 b800 	b.w	a3ac8 <setvbuf>

000a3ac8 <setvbuf>:
   a3ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a3acc:	4d51      	ldr	r5, [pc, #324]	; (a3c14 <setvbuf+0x14c>)
   a3ace:	b083      	sub	sp, #12
   a3ad0:	682d      	ldr	r5, [r5, #0]
   a3ad2:	4604      	mov	r4, r0
   a3ad4:	460f      	mov	r7, r1
   a3ad6:	4690      	mov	r8, r2
   a3ad8:	461e      	mov	r6, r3
   a3ada:	b115      	cbz	r5, a3ae2 <setvbuf+0x1a>
   a3adc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a3ade:	2b00      	cmp	r3, #0
   a3ae0:	d079      	beq.n	a3bd6 <setvbuf+0x10e>
   a3ae2:	f1b8 0f02 	cmp.w	r8, #2
   a3ae6:	d004      	beq.n	a3af2 <setvbuf+0x2a>
   a3ae8:	f1b8 0f01 	cmp.w	r8, #1
   a3aec:	d87f      	bhi.n	a3bee <setvbuf+0x126>
   a3aee:	2e00      	cmp	r6, #0
   a3af0:	db7d      	blt.n	a3bee <setvbuf+0x126>
   a3af2:	4621      	mov	r1, r4
   a3af4:	4628      	mov	r0, r5
   a3af6:	f000 f9d5 	bl	a3ea4 <_fflush_r>
   a3afa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a3afc:	b141      	cbz	r1, a3b10 <setvbuf+0x48>
   a3afe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a3b02:	4299      	cmp	r1, r3
   a3b04:	d002      	beq.n	a3b0c <setvbuf+0x44>
   a3b06:	4628      	mov	r0, r5
   a3b08:	f000 facc 	bl	a40a4 <_free_r>
   a3b0c:	2300      	movs	r3, #0
   a3b0e:	6323      	str	r3, [r4, #48]	; 0x30
   a3b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3b14:	2200      	movs	r2, #0
   a3b16:	61a2      	str	r2, [r4, #24]
   a3b18:	6062      	str	r2, [r4, #4]
   a3b1a:	061a      	lsls	r2, r3, #24
   a3b1c:	d454      	bmi.n	a3bc8 <setvbuf+0x100>
   a3b1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   a3b22:	f023 0303 	bic.w	r3, r3, #3
   a3b26:	f1b8 0f02 	cmp.w	r8, #2
   a3b2a:	81a3      	strh	r3, [r4, #12]
   a3b2c:	d039      	beq.n	a3ba2 <setvbuf+0xda>
   a3b2e:	ab01      	add	r3, sp, #4
   a3b30:	466a      	mov	r2, sp
   a3b32:	4621      	mov	r1, r4
   a3b34:	4628      	mov	r0, r5
   a3b36:	f000 fd49 	bl	a45cc <__swhatbuf_r>
   a3b3a:	89a3      	ldrh	r3, [r4, #12]
   a3b3c:	4318      	orrs	r0, r3
   a3b3e:	81a0      	strh	r0, [r4, #12]
   a3b40:	b326      	cbz	r6, a3b8c <setvbuf+0xc4>
   a3b42:	b327      	cbz	r7, a3b8e <setvbuf+0xc6>
   a3b44:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a3b46:	2b00      	cmp	r3, #0
   a3b48:	d04d      	beq.n	a3be6 <setvbuf+0x11e>
   a3b4a:	9b00      	ldr	r3, [sp, #0]
   a3b4c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   a3b50:	429e      	cmp	r6, r3
   a3b52:	bf1c      	itt	ne
   a3b54:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   a3b58:	81a0      	strhne	r0, [r4, #12]
   a3b5a:	f1b8 0f01 	cmp.w	r8, #1
   a3b5e:	bf08      	it	eq
   a3b60:	f040 0001 	orreq.w	r0, r0, #1
   a3b64:	b283      	uxth	r3, r0
   a3b66:	bf08      	it	eq
   a3b68:	81a0      	strheq	r0, [r4, #12]
   a3b6a:	f003 0008 	and.w	r0, r3, #8
   a3b6e:	b280      	uxth	r0, r0
   a3b70:	6027      	str	r7, [r4, #0]
   a3b72:	6127      	str	r7, [r4, #16]
   a3b74:	6166      	str	r6, [r4, #20]
   a3b76:	b318      	cbz	r0, a3bc0 <setvbuf+0xf8>
   a3b78:	f013 0001 	ands.w	r0, r3, #1
   a3b7c:	d02f      	beq.n	a3bde <setvbuf+0x116>
   a3b7e:	2000      	movs	r0, #0
   a3b80:	4276      	negs	r6, r6
   a3b82:	61a6      	str	r6, [r4, #24]
   a3b84:	60a0      	str	r0, [r4, #8]
   a3b86:	b003      	add	sp, #12
   a3b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a3b8c:	9e00      	ldr	r6, [sp, #0]
   a3b8e:	4630      	mov	r0, r6
   a3b90:	f000 fd90 	bl	a46b4 <malloc>
   a3b94:	4607      	mov	r7, r0
   a3b96:	b368      	cbz	r0, a3bf4 <setvbuf+0x12c>
   a3b98:	89a3      	ldrh	r3, [r4, #12]
   a3b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a3b9e:	81a3      	strh	r3, [r4, #12]
   a3ba0:	e7d0      	b.n	a3b44 <setvbuf+0x7c>
   a3ba2:	2000      	movs	r0, #0
   a3ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a3ba8:	f043 0302 	orr.w	r3, r3, #2
   a3bac:	2500      	movs	r5, #0
   a3bae:	2101      	movs	r1, #1
   a3bb0:	81a3      	strh	r3, [r4, #12]
   a3bb2:	60a5      	str	r5, [r4, #8]
   a3bb4:	6022      	str	r2, [r4, #0]
   a3bb6:	6122      	str	r2, [r4, #16]
   a3bb8:	6161      	str	r1, [r4, #20]
   a3bba:	b003      	add	sp, #12
   a3bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a3bc0:	60a0      	str	r0, [r4, #8]
   a3bc2:	b003      	add	sp, #12
   a3bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a3bc8:	6921      	ldr	r1, [r4, #16]
   a3bca:	4628      	mov	r0, r5
   a3bcc:	f000 fa6a 	bl	a40a4 <_free_r>
   a3bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3bd4:	e7a3      	b.n	a3b1e <setvbuf+0x56>
   a3bd6:	4628      	mov	r0, r5
   a3bd8:	f000 f9f8 	bl	a3fcc <__sinit>
   a3bdc:	e781      	b.n	a3ae2 <setvbuf+0x1a>
   a3bde:	60a6      	str	r6, [r4, #8]
   a3be0:	b003      	add	sp, #12
   a3be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a3be6:	4628      	mov	r0, r5
   a3be8:	f000 f9f0 	bl	a3fcc <__sinit>
   a3bec:	e7ad      	b.n	a3b4a <setvbuf+0x82>
   a3bee:	f04f 30ff 	mov.w	r0, #4294967295
   a3bf2:	e7e2      	b.n	a3bba <setvbuf+0xf2>
   a3bf4:	f8dd 9000 	ldr.w	r9, [sp]
   a3bf8:	45b1      	cmp	r9, r6
   a3bfa:	d006      	beq.n	a3c0a <setvbuf+0x142>
   a3bfc:	4648      	mov	r0, r9
   a3bfe:	f000 fd59 	bl	a46b4 <malloc>
   a3c02:	4607      	mov	r7, r0
   a3c04:	b108      	cbz	r0, a3c0a <setvbuf+0x142>
   a3c06:	464e      	mov	r6, r9
   a3c08:	e7c6      	b.n	a3b98 <setvbuf+0xd0>
   a3c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3c0e:	f04f 30ff 	mov.w	r0, #4294967295
   a3c12:	e7c7      	b.n	a3ba4 <setvbuf+0xdc>
   a3c14:	200710c8 	.word	0x200710c8

000a3c18 <strlen>:
   a3c18:	f020 0103 	bic.w	r1, r0, #3
   a3c1c:	f010 0003 	ands.w	r0, r0, #3
   a3c20:	f1c0 0000 	rsb	r0, r0, #0
   a3c24:	f851 3b04 	ldr.w	r3, [r1], #4
   a3c28:	f100 0c04 	add.w	ip, r0, #4
   a3c2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a3c30:	f06f 0200 	mvn.w	r2, #0
   a3c34:	bf1c      	itt	ne
   a3c36:	fa22 f20c 	lsrne.w	r2, r2, ip
   a3c3a:	4313      	orrne	r3, r2
   a3c3c:	f04f 0c01 	mov.w	ip, #1
   a3c40:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a3c44:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a3c48:	eba3 020c 	sub.w	r2, r3, ip
   a3c4c:	ea22 0203 	bic.w	r2, r2, r3
   a3c50:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a3c54:	bf04      	itt	eq
   a3c56:	f851 3b04 	ldreq.w	r3, [r1], #4
   a3c5a:	3004      	addeq	r0, #4
   a3c5c:	d0f4      	beq.n	a3c48 <strlen+0x30>
   a3c5e:	f1c2 0100 	rsb	r1, r2, #0
   a3c62:	ea02 0201 	and.w	r2, r2, r1
   a3c66:	fab2 f282 	clz	r2, r2
   a3c6a:	f1c2 021f 	rsb	r2, r2, #31
   a3c6e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a3c72:	4770      	bx	lr

000a3c74 <__swsetup_r>:
   a3c74:	b538      	push	{r3, r4, r5, lr}
   a3c76:	4b30      	ldr	r3, [pc, #192]	; (a3d38 <__swsetup_r+0xc4>)
   a3c78:	4605      	mov	r5, r0
   a3c7a:	6818      	ldr	r0, [r3, #0]
   a3c7c:	460c      	mov	r4, r1
   a3c7e:	b110      	cbz	r0, a3c86 <__swsetup_r+0x12>
   a3c80:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a3c82:	2b00      	cmp	r3, #0
   a3c84:	d038      	beq.n	a3cf8 <__swsetup_r+0x84>
   a3c86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a3c8a:	b293      	uxth	r3, r2
   a3c8c:	0718      	lsls	r0, r3, #28
   a3c8e:	d50c      	bpl.n	a3caa <__swsetup_r+0x36>
   a3c90:	6920      	ldr	r0, [r4, #16]
   a3c92:	b1a8      	cbz	r0, a3cc0 <__swsetup_r+0x4c>
   a3c94:	f013 0201 	ands.w	r2, r3, #1
   a3c98:	d01e      	beq.n	a3cd8 <__swsetup_r+0x64>
   a3c9a:	6963      	ldr	r3, [r4, #20]
   a3c9c:	2200      	movs	r2, #0
   a3c9e:	425b      	negs	r3, r3
   a3ca0:	61a3      	str	r3, [r4, #24]
   a3ca2:	60a2      	str	r2, [r4, #8]
   a3ca4:	b1f0      	cbz	r0, a3ce4 <__swsetup_r+0x70>
   a3ca6:	2000      	movs	r0, #0
   a3ca8:	bd38      	pop	{r3, r4, r5, pc}
   a3caa:	06d9      	lsls	r1, r3, #27
   a3cac:	d53b      	bpl.n	a3d26 <__swsetup_r+0xb2>
   a3cae:	0758      	lsls	r0, r3, #29
   a3cb0:	d425      	bmi.n	a3cfe <__swsetup_r+0x8a>
   a3cb2:	6920      	ldr	r0, [r4, #16]
   a3cb4:	f042 0308 	orr.w	r3, r2, #8
   a3cb8:	81a3      	strh	r3, [r4, #12]
   a3cba:	b29b      	uxth	r3, r3
   a3cbc:	2800      	cmp	r0, #0
   a3cbe:	d1e9      	bne.n	a3c94 <__swsetup_r+0x20>
   a3cc0:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a3cc4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a3cc8:	d0e4      	beq.n	a3c94 <__swsetup_r+0x20>
   a3cca:	4628      	mov	r0, r5
   a3ccc:	4621      	mov	r1, r4
   a3cce:	f000 fcad 	bl	a462c <__smakebuf_r>
   a3cd2:	89a3      	ldrh	r3, [r4, #12]
   a3cd4:	6920      	ldr	r0, [r4, #16]
   a3cd6:	e7dd      	b.n	a3c94 <__swsetup_r+0x20>
   a3cd8:	0799      	lsls	r1, r3, #30
   a3cda:	bf58      	it	pl
   a3cdc:	6962      	ldrpl	r2, [r4, #20]
   a3cde:	60a2      	str	r2, [r4, #8]
   a3ce0:	2800      	cmp	r0, #0
   a3ce2:	d1e0      	bne.n	a3ca6 <__swsetup_r+0x32>
   a3ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a3ce8:	061a      	lsls	r2, r3, #24
   a3cea:	d5dd      	bpl.n	a3ca8 <__swsetup_r+0x34>
   a3cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a3cf0:	81a3      	strh	r3, [r4, #12]
   a3cf2:	f04f 30ff 	mov.w	r0, #4294967295
   a3cf6:	bd38      	pop	{r3, r4, r5, pc}
   a3cf8:	f000 f968 	bl	a3fcc <__sinit>
   a3cfc:	e7c3      	b.n	a3c86 <__swsetup_r+0x12>
   a3cfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a3d00:	b151      	cbz	r1, a3d18 <__swsetup_r+0xa4>
   a3d02:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a3d06:	4299      	cmp	r1, r3
   a3d08:	d004      	beq.n	a3d14 <__swsetup_r+0xa0>
   a3d0a:	4628      	mov	r0, r5
   a3d0c:	f000 f9ca 	bl	a40a4 <_free_r>
   a3d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a3d14:	2300      	movs	r3, #0
   a3d16:	6323      	str	r3, [r4, #48]	; 0x30
   a3d18:	6920      	ldr	r0, [r4, #16]
   a3d1a:	2300      	movs	r3, #0
   a3d1c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a3d20:	e884 0009 	stmia.w	r4, {r0, r3}
   a3d24:	e7c6      	b.n	a3cb4 <__swsetup_r+0x40>
   a3d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a3d2a:	2309      	movs	r3, #9
   a3d2c:	602b      	str	r3, [r5, #0]
   a3d2e:	f04f 30ff 	mov.w	r0, #4294967295
   a3d32:	81a2      	strh	r2, [r4, #12]
   a3d34:	bd38      	pop	{r3, r4, r5, pc}
   a3d36:	bf00      	nop
   a3d38:	200710c8 	.word	0x200710c8

000a3d3c <register_fini>:
   a3d3c:	4b02      	ldr	r3, [pc, #8]	; (a3d48 <register_fini+0xc>)
   a3d3e:	b113      	cbz	r3, a3d46 <register_fini+0xa>
   a3d40:	4802      	ldr	r0, [pc, #8]	; (a3d4c <register_fini+0x10>)
   a3d42:	f000 b805 	b.w	a3d50 <atexit>
   a3d46:	4770      	bx	lr
   a3d48:	00000000 	.word	0x00000000
   a3d4c:	000a3fe1 	.word	0x000a3fe1

000a3d50 <atexit>:
   a3d50:	2300      	movs	r3, #0
   a3d52:	4601      	mov	r1, r0
   a3d54:	461a      	mov	r2, r3
   a3d56:	4618      	mov	r0, r3
   a3d58:	f001 ba64 	b.w	a5224 <__register_exitproc>

000a3d5c <__sflush_r>:
   a3d5c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   a3d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a3d64:	b29a      	uxth	r2, r3
   a3d66:	460d      	mov	r5, r1
   a3d68:	0711      	lsls	r1, r2, #28
   a3d6a:	4680      	mov	r8, r0
   a3d6c:	d43c      	bmi.n	a3de8 <__sflush_r+0x8c>
   a3d6e:	686a      	ldr	r2, [r5, #4]
   a3d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a3d74:	2a00      	cmp	r2, #0
   a3d76:	81ab      	strh	r3, [r5, #12]
   a3d78:	dd73      	ble.n	a3e62 <__sflush_r+0x106>
   a3d7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a3d7c:	2c00      	cmp	r4, #0
   a3d7e:	d04b      	beq.n	a3e18 <__sflush_r+0xbc>
   a3d80:	b29b      	uxth	r3, r3
   a3d82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a3d86:	2100      	movs	r1, #0
   a3d88:	b292      	uxth	r2, r2
   a3d8a:	f8d8 6000 	ldr.w	r6, [r8]
   a3d8e:	f8c8 1000 	str.w	r1, [r8]
   a3d92:	2a00      	cmp	r2, #0
   a3d94:	d069      	beq.n	a3e6a <__sflush_r+0x10e>
   a3d96:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a3d98:	075f      	lsls	r7, r3, #29
   a3d9a:	d505      	bpl.n	a3da8 <__sflush_r+0x4c>
   a3d9c:	6869      	ldr	r1, [r5, #4]
   a3d9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a3da0:	1a52      	subs	r2, r2, r1
   a3da2:	b10b      	cbz	r3, a3da8 <__sflush_r+0x4c>
   a3da4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a3da6:	1ad2      	subs	r2, r2, r3
   a3da8:	2300      	movs	r3, #0
   a3daa:	69e9      	ldr	r1, [r5, #28]
   a3dac:	4640      	mov	r0, r8
   a3dae:	47a0      	blx	r4
   a3db0:	1c44      	adds	r4, r0, #1
   a3db2:	d03c      	beq.n	a3e2e <__sflush_r+0xd2>
   a3db4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a3db8:	6929      	ldr	r1, [r5, #16]
   a3dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a3dbe:	2200      	movs	r2, #0
   a3dc0:	81ab      	strh	r3, [r5, #12]
   a3dc2:	04db      	lsls	r3, r3, #19
   a3dc4:	e885 0006 	stmia.w	r5, {r1, r2}
   a3dc8:	d449      	bmi.n	a3e5e <__sflush_r+0x102>
   a3dca:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a3dcc:	f8c8 6000 	str.w	r6, [r8]
   a3dd0:	b311      	cbz	r1, a3e18 <__sflush_r+0xbc>
   a3dd2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a3dd6:	4299      	cmp	r1, r3
   a3dd8:	d002      	beq.n	a3de0 <__sflush_r+0x84>
   a3dda:	4640      	mov	r0, r8
   a3ddc:	f000 f962 	bl	a40a4 <_free_r>
   a3de0:	2000      	movs	r0, #0
   a3de2:	6328      	str	r0, [r5, #48]	; 0x30
   a3de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3de8:	692e      	ldr	r6, [r5, #16]
   a3dea:	b1ae      	cbz	r6, a3e18 <__sflush_r+0xbc>
   a3dec:	0790      	lsls	r0, r2, #30
   a3dee:	682c      	ldr	r4, [r5, #0]
   a3df0:	bf0c      	ite	eq
   a3df2:	696b      	ldreq	r3, [r5, #20]
   a3df4:	2300      	movne	r3, #0
   a3df6:	602e      	str	r6, [r5, #0]
   a3df8:	1ba4      	subs	r4, r4, r6
   a3dfa:	60ab      	str	r3, [r5, #8]
   a3dfc:	e00a      	b.n	a3e14 <__sflush_r+0xb8>
   a3dfe:	4623      	mov	r3, r4
   a3e00:	4632      	mov	r2, r6
   a3e02:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a3e04:	69e9      	ldr	r1, [r5, #28]
   a3e06:	4640      	mov	r0, r8
   a3e08:	47b8      	blx	r7
   a3e0a:	2800      	cmp	r0, #0
   a3e0c:	eba4 0400 	sub.w	r4, r4, r0
   a3e10:	4406      	add	r6, r0
   a3e12:	dd04      	ble.n	a3e1e <__sflush_r+0xc2>
   a3e14:	2c00      	cmp	r4, #0
   a3e16:	dcf2      	bgt.n	a3dfe <__sflush_r+0xa2>
   a3e18:	2000      	movs	r0, #0
   a3e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3e1e:	89ab      	ldrh	r3, [r5, #12]
   a3e20:	f04f 30ff 	mov.w	r0, #4294967295
   a3e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a3e28:	81ab      	strh	r3, [r5, #12]
   a3e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3e2e:	f8d8 2000 	ldr.w	r2, [r8]
   a3e32:	2a1d      	cmp	r2, #29
   a3e34:	d8f3      	bhi.n	a3e1e <__sflush_r+0xc2>
   a3e36:	4b1a      	ldr	r3, [pc, #104]	; (a3ea0 <__sflush_r+0x144>)
   a3e38:	40d3      	lsrs	r3, r2
   a3e3a:	f003 0301 	and.w	r3, r3, #1
   a3e3e:	f083 0401 	eor.w	r4, r3, #1
   a3e42:	2b00      	cmp	r3, #0
   a3e44:	d0eb      	beq.n	a3e1e <__sflush_r+0xc2>
   a3e46:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a3e4a:	6929      	ldr	r1, [r5, #16]
   a3e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a3e50:	6029      	str	r1, [r5, #0]
   a3e52:	04d9      	lsls	r1, r3, #19
   a3e54:	606c      	str	r4, [r5, #4]
   a3e56:	81ab      	strh	r3, [r5, #12]
   a3e58:	d5b7      	bpl.n	a3dca <__sflush_r+0x6e>
   a3e5a:	2a00      	cmp	r2, #0
   a3e5c:	d1b5      	bne.n	a3dca <__sflush_r+0x6e>
   a3e5e:	6528      	str	r0, [r5, #80]	; 0x50
   a3e60:	e7b3      	b.n	a3dca <__sflush_r+0x6e>
   a3e62:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a3e64:	2a00      	cmp	r2, #0
   a3e66:	dc88      	bgt.n	a3d7a <__sflush_r+0x1e>
   a3e68:	e7d6      	b.n	a3e18 <__sflush_r+0xbc>
   a3e6a:	2301      	movs	r3, #1
   a3e6c:	69e9      	ldr	r1, [r5, #28]
   a3e6e:	4640      	mov	r0, r8
   a3e70:	47a0      	blx	r4
   a3e72:	1c43      	adds	r3, r0, #1
   a3e74:	4602      	mov	r2, r0
   a3e76:	d002      	beq.n	a3e7e <__sflush_r+0x122>
   a3e78:	89ab      	ldrh	r3, [r5, #12]
   a3e7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a3e7c:	e78c      	b.n	a3d98 <__sflush_r+0x3c>
   a3e7e:	f8d8 3000 	ldr.w	r3, [r8]
   a3e82:	2b00      	cmp	r3, #0
   a3e84:	d0f8      	beq.n	a3e78 <__sflush_r+0x11c>
   a3e86:	2b1d      	cmp	r3, #29
   a3e88:	d001      	beq.n	a3e8e <__sflush_r+0x132>
   a3e8a:	2b16      	cmp	r3, #22
   a3e8c:	d102      	bne.n	a3e94 <__sflush_r+0x138>
   a3e8e:	f8c8 6000 	str.w	r6, [r8]
   a3e92:	e7c1      	b.n	a3e18 <__sflush_r+0xbc>
   a3e94:	89ab      	ldrh	r3, [r5, #12]
   a3e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a3e9a:	81ab      	strh	r3, [r5, #12]
   a3e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a3ea0:	20400001 	.word	0x20400001

000a3ea4 <_fflush_r>:
   a3ea4:	b510      	push	{r4, lr}
   a3ea6:	4604      	mov	r4, r0
   a3ea8:	b082      	sub	sp, #8
   a3eaa:	b108      	cbz	r0, a3eb0 <_fflush_r+0xc>
   a3eac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a3eae:	b153      	cbz	r3, a3ec6 <_fflush_r+0x22>
   a3eb0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a3eb4:	b908      	cbnz	r0, a3eba <_fflush_r+0x16>
   a3eb6:	b002      	add	sp, #8
   a3eb8:	bd10      	pop	{r4, pc}
   a3eba:	4620      	mov	r0, r4
   a3ebc:	b002      	add	sp, #8
   a3ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a3ec2:	f7ff bf4b 	b.w	a3d5c <__sflush_r>
   a3ec6:	9101      	str	r1, [sp, #4]
   a3ec8:	f000 f880 	bl	a3fcc <__sinit>
   a3ecc:	9901      	ldr	r1, [sp, #4]
   a3ece:	e7ef      	b.n	a3eb0 <_fflush_r+0xc>

000a3ed0 <_cleanup_r>:
   a3ed0:	4901      	ldr	r1, [pc, #4]	; (a3ed8 <_cleanup_r+0x8>)
   a3ed2:	f000 bb53 	b.w	a457c <_fwalk_reent>
   a3ed6:	bf00      	nop
   a3ed8:	000a52ed 	.word	0x000a52ed

000a3edc <__sinit.part.1>:
   a3edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a3ee0:	4607      	mov	r7, r0
   a3ee2:	4835      	ldr	r0, [pc, #212]	; (a3fb8 <__sinit.part.1+0xdc>)
   a3ee4:	687d      	ldr	r5, [r7, #4]
   a3ee6:	2400      	movs	r4, #0
   a3ee8:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a3eec:	2304      	movs	r3, #4
   a3eee:	2103      	movs	r1, #3
   a3ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
   a3ef2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a3ef6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a3efa:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a3efe:	b083      	sub	sp, #12
   a3f00:	602c      	str	r4, [r5, #0]
   a3f02:	606c      	str	r4, [r5, #4]
   a3f04:	60ac      	str	r4, [r5, #8]
   a3f06:	666c      	str	r4, [r5, #100]	; 0x64
   a3f08:	81ec      	strh	r4, [r5, #14]
   a3f0a:	612c      	str	r4, [r5, #16]
   a3f0c:	616c      	str	r4, [r5, #20]
   a3f0e:	61ac      	str	r4, [r5, #24]
   a3f10:	81ab      	strh	r3, [r5, #12]
   a3f12:	4621      	mov	r1, r4
   a3f14:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a3f18:	2208      	movs	r2, #8
   a3f1a:	f7ff fd43 	bl	a39a4 <memset>
   a3f1e:	f8df b09c 	ldr.w	fp, [pc, #156]	; a3fbc <__sinit.part.1+0xe0>
   a3f22:	68be      	ldr	r6, [r7, #8]
   a3f24:	f8df a098 	ldr.w	sl, [pc, #152]	; a3fc0 <__sinit.part.1+0xe4>
   a3f28:	f8df 9098 	ldr.w	r9, [pc, #152]	; a3fc4 <__sinit.part.1+0xe8>
   a3f2c:	f8df 8098 	ldr.w	r8, [pc, #152]	; a3fc8 <__sinit.part.1+0xec>
   a3f30:	2301      	movs	r3, #1
   a3f32:	2209      	movs	r2, #9
   a3f34:	f8c5 b020 	str.w	fp, [r5, #32]
   a3f38:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a3f3c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a3f40:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a3f44:	61ed      	str	r5, [r5, #28]
   a3f46:	4621      	mov	r1, r4
   a3f48:	81f3      	strh	r3, [r6, #14]
   a3f4a:	81b2      	strh	r2, [r6, #12]
   a3f4c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a3f50:	6034      	str	r4, [r6, #0]
   a3f52:	6074      	str	r4, [r6, #4]
   a3f54:	60b4      	str	r4, [r6, #8]
   a3f56:	6674      	str	r4, [r6, #100]	; 0x64
   a3f58:	6134      	str	r4, [r6, #16]
   a3f5a:	6174      	str	r4, [r6, #20]
   a3f5c:	61b4      	str	r4, [r6, #24]
   a3f5e:	2208      	movs	r2, #8
   a3f60:	9301      	str	r3, [sp, #4]
   a3f62:	f7ff fd1f 	bl	a39a4 <memset>
   a3f66:	68fd      	ldr	r5, [r7, #12]
   a3f68:	2012      	movs	r0, #18
   a3f6a:	2202      	movs	r2, #2
   a3f6c:	61f6      	str	r6, [r6, #28]
   a3f6e:	f8c6 b020 	str.w	fp, [r6, #32]
   a3f72:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a3f76:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a3f7a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a3f7e:	4621      	mov	r1, r4
   a3f80:	81a8      	strh	r0, [r5, #12]
   a3f82:	81ea      	strh	r2, [r5, #14]
   a3f84:	602c      	str	r4, [r5, #0]
   a3f86:	606c      	str	r4, [r5, #4]
   a3f88:	60ac      	str	r4, [r5, #8]
   a3f8a:	666c      	str	r4, [r5, #100]	; 0x64
   a3f8c:	612c      	str	r4, [r5, #16]
   a3f8e:	616c      	str	r4, [r5, #20]
   a3f90:	61ac      	str	r4, [r5, #24]
   a3f92:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a3f96:	2208      	movs	r2, #8
   a3f98:	f7ff fd04 	bl	a39a4 <memset>
   a3f9c:	9b01      	ldr	r3, [sp, #4]
   a3f9e:	61ed      	str	r5, [r5, #28]
   a3fa0:	f8c5 b020 	str.w	fp, [r5, #32]
   a3fa4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a3fa8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a3fac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a3fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   a3fb2:	b003      	add	sp, #12
   a3fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a3fb8:	000a3ed1 	.word	0x000a3ed1
   a3fbc:	000a5171 	.word	0x000a5171
   a3fc0:	000a5195 	.word	0x000a5195
   a3fc4:	000a51d1 	.word	0x000a51d1
   a3fc8:	000a51f1 	.word	0x000a51f1

000a3fcc <__sinit>:
   a3fcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a3fce:	b103      	cbz	r3, a3fd2 <__sinit+0x6>
   a3fd0:	4770      	bx	lr
   a3fd2:	f7ff bf83 	b.w	a3edc <__sinit.part.1>
   a3fd6:	bf00      	nop

000a3fd8 <__sfp_lock_acquire>:
   a3fd8:	4770      	bx	lr
   a3fda:	bf00      	nop

000a3fdc <__sfp_lock_release>:
   a3fdc:	4770      	bx	lr
   a3fde:	bf00      	nop

000a3fe0 <__libc_fini_array>:
   a3fe0:	b538      	push	{r3, r4, r5, lr}
   a3fe2:	4d07      	ldr	r5, [pc, #28]	; (a4000 <__libc_fini_array+0x20>)
   a3fe4:	4c07      	ldr	r4, [pc, #28]	; (a4004 <__libc_fini_array+0x24>)
   a3fe6:	1b2c      	subs	r4, r5, r4
   a3fe8:	10a4      	asrs	r4, r4, #2
   a3fea:	d005      	beq.n	a3ff8 <__libc_fini_array+0x18>
   a3fec:	3c01      	subs	r4, #1
   a3fee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a3ff2:	4798      	blx	r3
   a3ff4:	2c00      	cmp	r4, #0
   a3ff6:	d1f9      	bne.n	a3fec <__libc_fini_array+0xc>
   a3ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a3ffc:	f001 bcc8 	b.w	a5990 <_fini>
   a4000:	000a59a0 	.word	0x000a59a0
   a4004:	000a599c 	.word	0x000a599c

000a4008 <_malloc_trim_r>:
   a4008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a400a:	460c      	mov	r4, r1
   a400c:	4f22      	ldr	r7, [pc, #136]	; (a4098 <_malloc_trim_r+0x90>)
   a400e:	4606      	mov	r6, r0
   a4010:	f000 feae 	bl	a4d70 <__malloc_lock>
   a4014:	68bb      	ldr	r3, [r7, #8]
   a4016:	685d      	ldr	r5, [r3, #4]
   a4018:	f025 0503 	bic.w	r5, r5, #3
   a401c:	1b29      	subs	r1, r5, r4
   a401e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a4022:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a4026:	f021 010f 	bic.w	r1, r1, #15
   a402a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a402e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a4032:	db07      	blt.n	a4044 <_malloc_trim_r+0x3c>
   a4034:	2100      	movs	r1, #0
   a4036:	4630      	mov	r0, r6
   a4038:	f001 f888 	bl	a514c <_sbrk_r>
   a403c:	68bb      	ldr	r3, [r7, #8]
   a403e:	442b      	add	r3, r5
   a4040:	4298      	cmp	r0, r3
   a4042:	d004      	beq.n	a404e <_malloc_trim_r+0x46>
   a4044:	4630      	mov	r0, r6
   a4046:	f000 fe95 	bl	a4d74 <__malloc_unlock>
   a404a:	2000      	movs	r0, #0
   a404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a404e:	4261      	negs	r1, r4
   a4050:	4630      	mov	r0, r6
   a4052:	f001 f87b 	bl	a514c <_sbrk_r>
   a4056:	3001      	adds	r0, #1
   a4058:	d00d      	beq.n	a4076 <_malloc_trim_r+0x6e>
   a405a:	4b10      	ldr	r3, [pc, #64]	; (a409c <_malloc_trim_r+0x94>)
   a405c:	68ba      	ldr	r2, [r7, #8]
   a405e:	6819      	ldr	r1, [r3, #0]
   a4060:	1b2d      	subs	r5, r5, r4
   a4062:	f045 0501 	orr.w	r5, r5, #1
   a4066:	4630      	mov	r0, r6
   a4068:	1b09      	subs	r1, r1, r4
   a406a:	6055      	str	r5, [r2, #4]
   a406c:	6019      	str	r1, [r3, #0]
   a406e:	f000 fe81 	bl	a4d74 <__malloc_unlock>
   a4072:	2001      	movs	r0, #1
   a4074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a4076:	2100      	movs	r1, #0
   a4078:	4630      	mov	r0, r6
   a407a:	f001 f867 	bl	a514c <_sbrk_r>
   a407e:	68ba      	ldr	r2, [r7, #8]
   a4080:	1a83      	subs	r3, r0, r2
   a4082:	2b0f      	cmp	r3, #15
   a4084:	ddde      	ble.n	a4044 <_malloc_trim_r+0x3c>
   a4086:	4c06      	ldr	r4, [pc, #24]	; (a40a0 <_malloc_trim_r+0x98>)
   a4088:	4904      	ldr	r1, [pc, #16]	; (a409c <_malloc_trim_r+0x94>)
   a408a:	6824      	ldr	r4, [r4, #0]
   a408c:	f043 0301 	orr.w	r3, r3, #1
   a4090:	1b00      	subs	r0, r0, r4
   a4092:	6053      	str	r3, [r2, #4]
   a4094:	6008      	str	r0, [r1, #0]
   a4096:	e7d5      	b.n	a4044 <_malloc_trim_r+0x3c>
   a4098:	200710cc 	.word	0x200710cc
   a409c:	200728a8 	.word	0x200728a8
   a40a0:	200714d8 	.word	0x200714d8

000a40a4 <_free_r>:
   a40a4:	2900      	cmp	r1, #0
   a40a6:	d045      	beq.n	a4134 <_free_r+0x90>
   a40a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a40ac:	460d      	mov	r5, r1
   a40ae:	4680      	mov	r8, r0
   a40b0:	f000 fe5e 	bl	a4d70 <__malloc_lock>
   a40b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a40b8:	496a      	ldr	r1, [pc, #424]	; (a4264 <_free_r+0x1c0>)
   a40ba:	f1a5 0408 	sub.w	r4, r5, #8
   a40be:	f027 0301 	bic.w	r3, r7, #1
   a40c2:	18e2      	adds	r2, r4, r3
   a40c4:	688e      	ldr	r6, [r1, #8]
   a40c6:	6850      	ldr	r0, [r2, #4]
   a40c8:	42b2      	cmp	r2, r6
   a40ca:	f020 0003 	bic.w	r0, r0, #3
   a40ce:	d062      	beq.n	a4196 <_free_r+0xf2>
   a40d0:	07fe      	lsls	r6, r7, #31
   a40d2:	6050      	str	r0, [r2, #4]
   a40d4:	d40b      	bmi.n	a40ee <_free_r+0x4a>
   a40d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a40da:	f101 0e08 	add.w	lr, r1, #8
   a40de:	1be4      	subs	r4, r4, r7
   a40e0:	68a5      	ldr	r5, [r4, #8]
   a40e2:	443b      	add	r3, r7
   a40e4:	4575      	cmp	r5, lr
   a40e6:	d06f      	beq.n	a41c8 <_free_r+0x124>
   a40e8:	68e7      	ldr	r7, [r4, #12]
   a40ea:	60ef      	str	r7, [r5, #12]
   a40ec:	60bd      	str	r5, [r7, #8]
   a40ee:	1815      	adds	r5, r2, r0
   a40f0:	686d      	ldr	r5, [r5, #4]
   a40f2:	07ed      	lsls	r5, r5, #31
   a40f4:	d542      	bpl.n	a417c <_free_r+0xd8>
   a40f6:	f043 0201 	orr.w	r2, r3, #1
   a40fa:	6062      	str	r2, [r4, #4]
   a40fc:	50e3      	str	r3, [r4, r3]
   a40fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a4102:	d218      	bcs.n	a4136 <_free_r+0x92>
   a4104:	08db      	lsrs	r3, r3, #3
   a4106:	6848      	ldr	r0, [r1, #4]
   a4108:	109d      	asrs	r5, r3, #2
   a410a:	2201      	movs	r2, #1
   a410c:	3301      	adds	r3, #1
   a410e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a4112:	fa02 f505 	lsl.w	r5, r2, r5
   a4116:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   a411a:	4328      	orrs	r0, r5
   a411c:	3a08      	subs	r2, #8
   a411e:	60e2      	str	r2, [r4, #12]
   a4120:	60a7      	str	r7, [r4, #8]
   a4122:	6048      	str	r0, [r1, #4]
   a4124:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a4128:	60fc      	str	r4, [r7, #12]
   a412a:	4640      	mov	r0, r8
   a412c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a4130:	f000 be20 	b.w	a4d74 <__malloc_unlock>
   a4134:	4770      	bx	lr
   a4136:	0a5a      	lsrs	r2, r3, #9
   a4138:	2a04      	cmp	r2, #4
   a413a:	d853      	bhi.n	a41e4 <_free_r+0x140>
   a413c:	099a      	lsrs	r2, r3, #6
   a413e:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a4142:	007f      	lsls	r7, r7, #1
   a4144:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a4148:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   a414c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   a4150:	3808      	subs	r0, #8
   a4152:	4290      	cmp	r0, r2
   a4154:	4943      	ldr	r1, [pc, #268]	; (a4264 <_free_r+0x1c0>)
   a4156:	d04d      	beq.n	a41f4 <_free_r+0x150>
   a4158:	6851      	ldr	r1, [r2, #4]
   a415a:	f021 0103 	bic.w	r1, r1, #3
   a415e:	428b      	cmp	r3, r1
   a4160:	d202      	bcs.n	a4168 <_free_r+0xc4>
   a4162:	6892      	ldr	r2, [r2, #8]
   a4164:	4290      	cmp	r0, r2
   a4166:	d1f7      	bne.n	a4158 <_free_r+0xb4>
   a4168:	68d0      	ldr	r0, [r2, #12]
   a416a:	60e0      	str	r0, [r4, #12]
   a416c:	60a2      	str	r2, [r4, #8]
   a416e:	6084      	str	r4, [r0, #8]
   a4170:	60d4      	str	r4, [r2, #12]
   a4172:	4640      	mov	r0, r8
   a4174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a4178:	f000 bdfc 	b.w	a4d74 <__malloc_unlock>
   a417c:	6895      	ldr	r5, [r2, #8]
   a417e:	4f3a      	ldr	r7, [pc, #232]	; (a4268 <_free_r+0x1c4>)
   a4180:	4403      	add	r3, r0
   a4182:	42bd      	cmp	r5, r7
   a4184:	d03f      	beq.n	a4206 <_free_r+0x162>
   a4186:	68d0      	ldr	r0, [r2, #12]
   a4188:	f043 0201 	orr.w	r2, r3, #1
   a418c:	60e8      	str	r0, [r5, #12]
   a418e:	6085      	str	r5, [r0, #8]
   a4190:	6062      	str	r2, [r4, #4]
   a4192:	50e3      	str	r3, [r4, r3]
   a4194:	e7b3      	b.n	a40fe <_free_r+0x5a>
   a4196:	07ff      	lsls	r7, r7, #31
   a4198:	4403      	add	r3, r0
   a419a:	d407      	bmi.n	a41ac <_free_r+0x108>
   a419c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a41a0:	1b64      	subs	r4, r4, r5
   a41a2:	68e2      	ldr	r2, [r4, #12]
   a41a4:	68a0      	ldr	r0, [r4, #8]
   a41a6:	442b      	add	r3, r5
   a41a8:	60c2      	str	r2, [r0, #12]
   a41aa:	6090      	str	r0, [r2, #8]
   a41ac:	4a2f      	ldr	r2, [pc, #188]	; (a426c <_free_r+0x1c8>)
   a41ae:	f043 0001 	orr.w	r0, r3, #1
   a41b2:	6812      	ldr	r2, [r2, #0]
   a41b4:	6060      	str	r0, [r4, #4]
   a41b6:	4293      	cmp	r3, r2
   a41b8:	608c      	str	r4, [r1, #8]
   a41ba:	d3b6      	bcc.n	a412a <_free_r+0x86>
   a41bc:	4b2c      	ldr	r3, [pc, #176]	; (a4270 <_free_r+0x1cc>)
   a41be:	4640      	mov	r0, r8
   a41c0:	6819      	ldr	r1, [r3, #0]
   a41c2:	f7ff ff21 	bl	a4008 <_malloc_trim_r>
   a41c6:	e7b0      	b.n	a412a <_free_r+0x86>
   a41c8:	1811      	adds	r1, r2, r0
   a41ca:	6849      	ldr	r1, [r1, #4]
   a41cc:	07c9      	lsls	r1, r1, #31
   a41ce:	d444      	bmi.n	a425a <_free_r+0x1b6>
   a41d0:	6891      	ldr	r1, [r2, #8]
   a41d2:	4403      	add	r3, r0
   a41d4:	68d2      	ldr	r2, [r2, #12]
   a41d6:	f043 0001 	orr.w	r0, r3, #1
   a41da:	60ca      	str	r2, [r1, #12]
   a41dc:	6091      	str	r1, [r2, #8]
   a41de:	6060      	str	r0, [r4, #4]
   a41e0:	50e3      	str	r3, [r4, r3]
   a41e2:	e7a2      	b.n	a412a <_free_r+0x86>
   a41e4:	2a14      	cmp	r2, #20
   a41e6:	d817      	bhi.n	a4218 <_free_r+0x174>
   a41e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a41ec:	007f      	lsls	r7, r7, #1
   a41ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a41f2:	e7a9      	b.n	a4148 <_free_r+0xa4>
   a41f4:	10aa      	asrs	r2, r5, #2
   a41f6:	684b      	ldr	r3, [r1, #4]
   a41f8:	2501      	movs	r5, #1
   a41fa:	fa05 f202 	lsl.w	r2, r5, r2
   a41fe:	4313      	orrs	r3, r2
   a4200:	604b      	str	r3, [r1, #4]
   a4202:	4602      	mov	r2, r0
   a4204:	e7b1      	b.n	a416a <_free_r+0xc6>
   a4206:	f043 0201 	orr.w	r2, r3, #1
   a420a:	614c      	str	r4, [r1, #20]
   a420c:	610c      	str	r4, [r1, #16]
   a420e:	60e5      	str	r5, [r4, #12]
   a4210:	60a5      	str	r5, [r4, #8]
   a4212:	6062      	str	r2, [r4, #4]
   a4214:	50e3      	str	r3, [r4, r3]
   a4216:	e788      	b.n	a412a <_free_r+0x86>
   a4218:	2a54      	cmp	r2, #84	; 0x54
   a421a:	d806      	bhi.n	a422a <_free_r+0x186>
   a421c:	0b1a      	lsrs	r2, r3, #12
   a421e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a4222:	007f      	lsls	r7, r7, #1
   a4224:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a4228:	e78e      	b.n	a4148 <_free_r+0xa4>
   a422a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a422e:	d806      	bhi.n	a423e <_free_r+0x19a>
   a4230:	0bda      	lsrs	r2, r3, #15
   a4232:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a4236:	007f      	lsls	r7, r7, #1
   a4238:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a423c:	e784      	b.n	a4148 <_free_r+0xa4>
   a423e:	f240 5054 	movw	r0, #1364	; 0x554
   a4242:	4282      	cmp	r2, r0
   a4244:	d806      	bhi.n	a4254 <_free_r+0x1b0>
   a4246:	0c9a      	lsrs	r2, r3, #18
   a4248:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a424c:	007f      	lsls	r7, r7, #1
   a424e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a4252:	e779      	b.n	a4148 <_free_r+0xa4>
   a4254:	27fe      	movs	r7, #254	; 0xfe
   a4256:	257e      	movs	r5, #126	; 0x7e
   a4258:	e776      	b.n	a4148 <_free_r+0xa4>
   a425a:	f043 0201 	orr.w	r2, r3, #1
   a425e:	6062      	str	r2, [r4, #4]
   a4260:	50e3      	str	r3, [r4, r3]
   a4262:	e762      	b.n	a412a <_free_r+0x86>
   a4264:	200710cc 	.word	0x200710cc
   a4268:	200710d4 	.word	0x200710d4
   a426c:	200714d4 	.word	0x200714d4
   a4270:	200728a4 	.word	0x200728a4

000a4274 <__sfvwrite_r>:
   a4274:	6893      	ldr	r3, [r2, #8]
   a4276:	2b00      	cmp	r3, #0
   a4278:	f000 80ab 	beq.w	a43d2 <__sfvwrite_r+0x15e>
   a427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a4280:	898b      	ldrh	r3, [r1, #12]
   a4282:	b085      	sub	sp, #20
   a4284:	460c      	mov	r4, r1
   a4286:	0719      	lsls	r1, r3, #28
   a4288:	9002      	str	r0, [sp, #8]
   a428a:	4616      	mov	r6, r2
   a428c:	d528      	bpl.n	a42e0 <__sfvwrite_r+0x6c>
   a428e:	6922      	ldr	r2, [r4, #16]
   a4290:	b332      	cbz	r2, a42e0 <__sfvwrite_r+0x6c>
   a4292:	f003 0802 	and.w	r8, r3, #2
   a4296:	fa1f f088 	uxth.w	r0, r8
   a429a:	6835      	ldr	r5, [r6, #0]
   a429c:	b378      	cbz	r0, a42fe <__sfvwrite_r+0x8a>
   a429e:	f04f 0900 	mov.w	r9, #0
   a42a2:	46c8      	mov	r8, r9
   a42a4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a4578 <__sfvwrite_r+0x304>
   a42a8:	f1b8 0f00 	cmp.w	r8, #0
   a42ac:	f000 808b 	beq.w	a43c6 <__sfvwrite_r+0x152>
   a42b0:	45d0      	cmp	r8, sl
   a42b2:	4643      	mov	r3, r8
   a42b4:	464a      	mov	r2, r9
   a42b6:	bf28      	it	cs
   a42b8:	4653      	movcs	r3, sl
   a42ba:	69e1      	ldr	r1, [r4, #28]
   a42bc:	9802      	ldr	r0, [sp, #8]
   a42be:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a42c0:	47b8      	blx	r7
   a42c2:	2800      	cmp	r0, #0
   a42c4:	f340 80a5 	ble.w	a4412 <__sfvwrite_r+0x19e>
   a42c8:	68b3      	ldr	r3, [r6, #8]
   a42ca:	4481      	add	r9, r0
   a42cc:	1a1b      	subs	r3, r3, r0
   a42ce:	ebc0 0808 	rsb	r8, r0, r8
   a42d2:	60b3      	str	r3, [r6, #8]
   a42d4:	2b00      	cmp	r3, #0
   a42d6:	d1e7      	bne.n	a42a8 <__sfvwrite_r+0x34>
   a42d8:	2000      	movs	r0, #0
   a42da:	b005      	add	sp, #20
   a42dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a42e0:	4621      	mov	r1, r4
   a42e2:	9802      	ldr	r0, [sp, #8]
   a42e4:	f7ff fcc6 	bl	a3c74 <__swsetup_r>
   a42e8:	2800      	cmp	r0, #0
   a42ea:	f040 813c 	bne.w	a4566 <__sfvwrite_r+0x2f2>
   a42ee:	89a3      	ldrh	r3, [r4, #12]
   a42f0:	6835      	ldr	r5, [r6, #0]
   a42f2:	f003 0802 	and.w	r8, r3, #2
   a42f6:	fa1f f088 	uxth.w	r0, r8
   a42fa:	2800      	cmp	r0, #0
   a42fc:	d1cf      	bne.n	a429e <__sfvwrite_r+0x2a>
   a42fe:	f013 0901 	ands.w	r9, r3, #1
   a4302:	f040 8090 	bne.w	a4426 <__sfvwrite_r+0x1b2>
   a4306:	464f      	mov	r7, r9
   a4308:	9601      	str	r6, [sp, #4]
   a430a:	2f00      	cmp	r7, #0
   a430c:	d056      	beq.n	a43bc <__sfvwrite_r+0x148>
   a430e:	059a      	lsls	r2, r3, #22
   a4310:	f8d4 8008 	ldr.w	r8, [r4, #8]
   a4314:	d55f      	bpl.n	a43d6 <__sfvwrite_r+0x162>
   a4316:	4547      	cmp	r7, r8
   a4318:	46c2      	mov	sl, r8
   a431a:	f0c0 80bf 	bcc.w	a449c <__sfvwrite_r+0x228>
   a431e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   a4322:	f000 80bd 	beq.w	a44a0 <__sfvwrite_r+0x22c>
   a4326:	6962      	ldr	r2, [r4, #20]
   a4328:	6820      	ldr	r0, [r4, #0]
   a432a:	6921      	ldr	r1, [r4, #16]
   a432c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   a4330:	ebc1 0a00 	rsb	sl, r1, r0
   a4334:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   a4338:	f10a 0001 	add.w	r0, sl, #1
   a433c:	ea4f 0868 	mov.w	r8, r8, asr #1
   a4340:	4438      	add	r0, r7
   a4342:	4540      	cmp	r0, r8
   a4344:	4642      	mov	r2, r8
   a4346:	bf84      	itt	hi
   a4348:	4680      	movhi	r8, r0
   a434a:	4642      	movhi	r2, r8
   a434c:	055b      	lsls	r3, r3, #21
   a434e:	f140 80f2 	bpl.w	a4536 <__sfvwrite_r+0x2c2>
   a4352:	4611      	mov	r1, r2
   a4354:	9802      	ldr	r0, [sp, #8]
   a4356:	f000 f9b5 	bl	a46c4 <_malloc_r>
   a435a:	4683      	mov	fp, r0
   a435c:	2800      	cmp	r0, #0
   a435e:	f000 8105 	beq.w	a456c <__sfvwrite_r+0x2f8>
   a4362:	4652      	mov	r2, sl
   a4364:	6921      	ldr	r1, [r4, #16]
   a4366:	f7ff faa7 	bl	a38b8 <memcpy>
   a436a:	89a3      	ldrh	r3, [r4, #12]
   a436c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   a4370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a4374:	81a3      	strh	r3, [r4, #12]
   a4376:	ebca 0308 	rsb	r3, sl, r8
   a437a:	eb0b 000a 	add.w	r0, fp, sl
   a437e:	f8c4 8014 	str.w	r8, [r4, #20]
   a4382:	46ba      	mov	sl, r7
   a4384:	46b8      	mov	r8, r7
   a4386:	f8c4 b010 	str.w	fp, [r4, #16]
   a438a:	6020      	str	r0, [r4, #0]
   a438c:	60a3      	str	r3, [r4, #8]
   a438e:	4652      	mov	r2, sl
   a4390:	4649      	mov	r1, r9
   a4392:	f000 fc89 	bl	a4ca8 <memmove>
   a4396:	68a0      	ldr	r0, [r4, #8]
   a4398:	6823      	ldr	r3, [r4, #0]
   a439a:	ebc8 0000 	rsb	r0, r8, r0
   a439e:	60a0      	str	r0, [r4, #8]
   a43a0:	4638      	mov	r0, r7
   a43a2:	4453      	add	r3, sl
   a43a4:	6023      	str	r3, [r4, #0]
   a43a6:	9a01      	ldr	r2, [sp, #4]
   a43a8:	4481      	add	r9, r0
   a43aa:	6893      	ldr	r3, [r2, #8]
   a43ac:	1a3f      	subs	r7, r7, r0
   a43ae:	1a1b      	subs	r3, r3, r0
   a43b0:	6093      	str	r3, [r2, #8]
   a43b2:	2b00      	cmp	r3, #0
   a43b4:	d090      	beq.n	a42d8 <__sfvwrite_r+0x64>
   a43b6:	89a3      	ldrh	r3, [r4, #12]
   a43b8:	2f00      	cmp	r7, #0
   a43ba:	d1a8      	bne.n	a430e <__sfvwrite_r+0x9a>
   a43bc:	f8d5 9000 	ldr.w	r9, [r5]
   a43c0:	686f      	ldr	r7, [r5, #4]
   a43c2:	3508      	adds	r5, #8
   a43c4:	e7a1      	b.n	a430a <__sfvwrite_r+0x96>
   a43c6:	f8d5 9000 	ldr.w	r9, [r5]
   a43ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a43ce:	3508      	adds	r5, #8
   a43d0:	e76a      	b.n	a42a8 <__sfvwrite_r+0x34>
   a43d2:	2000      	movs	r0, #0
   a43d4:	4770      	bx	lr
   a43d6:	6820      	ldr	r0, [r4, #0]
   a43d8:	6923      	ldr	r3, [r4, #16]
   a43da:	4298      	cmp	r0, r3
   a43dc:	d803      	bhi.n	a43e6 <__sfvwrite_r+0x172>
   a43de:	6962      	ldr	r2, [r4, #20]
   a43e0:	4297      	cmp	r7, r2
   a43e2:	f080 8083 	bcs.w	a44ec <__sfvwrite_r+0x278>
   a43e6:	45b8      	cmp	r8, r7
   a43e8:	bf28      	it	cs
   a43ea:	46b8      	movcs	r8, r7
   a43ec:	4649      	mov	r1, r9
   a43ee:	4642      	mov	r2, r8
   a43f0:	f000 fc5a 	bl	a4ca8 <memmove>
   a43f4:	68a3      	ldr	r3, [r4, #8]
   a43f6:	6822      	ldr	r2, [r4, #0]
   a43f8:	ebc8 0303 	rsb	r3, r8, r3
   a43fc:	4442      	add	r2, r8
   a43fe:	60a3      	str	r3, [r4, #8]
   a4400:	6022      	str	r2, [r4, #0]
   a4402:	2b00      	cmp	r3, #0
   a4404:	d148      	bne.n	a4498 <__sfvwrite_r+0x224>
   a4406:	4621      	mov	r1, r4
   a4408:	9802      	ldr	r0, [sp, #8]
   a440a:	f7ff fd4b 	bl	a3ea4 <_fflush_r>
   a440e:	2800      	cmp	r0, #0
   a4410:	d042      	beq.n	a4498 <__sfvwrite_r+0x224>
   a4412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a441a:	f04f 30ff 	mov.w	r0, #4294967295
   a441e:	81a3      	strh	r3, [r4, #12]
   a4420:	b005      	add	sp, #20
   a4422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4426:	4680      	mov	r8, r0
   a4428:	4682      	mov	sl, r0
   a442a:	4681      	mov	r9, r0
   a442c:	9001      	str	r0, [sp, #4]
   a442e:	f1b9 0f00 	cmp.w	r9, #0
   a4432:	d029      	beq.n	a4488 <__sfvwrite_r+0x214>
   a4434:	9b01      	ldr	r3, [sp, #4]
   a4436:	2b00      	cmp	r3, #0
   a4438:	d04b      	beq.n	a44d2 <__sfvwrite_r+0x25e>
   a443a:	45c8      	cmp	r8, r9
   a443c:	46c3      	mov	fp, r8
   a443e:	bf28      	it	cs
   a4440:	46cb      	movcs	fp, r9
   a4442:	6820      	ldr	r0, [r4, #0]
   a4444:	6923      	ldr	r3, [r4, #16]
   a4446:	465f      	mov	r7, fp
   a4448:	4298      	cmp	r0, r3
   a444a:	6962      	ldr	r2, [r4, #20]
   a444c:	d903      	bls.n	a4456 <__sfvwrite_r+0x1e2>
   a444e:	68a3      	ldr	r3, [r4, #8]
   a4450:	4413      	add	r3, r2
   a4452:	459b      	cmp	fp, r3
   a4454:	dc5c      	bgt.n	a4510 <__sfvwrite_r+0x29c>
   a4456:	4593      	cmp	fp, r2
   a4458:	db24      	blt.n	a44a4 <__sfvwrite_r+0x230>
   a445a:	4613      	mov	r3, r2
   a445c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a445e:	4652      	mov	r2, sl
   a4460:	69e1      	ldr	r1, [r4, #28]
   a4462:	9802      	ldr	r0, [sp, #8]
   a4464:	47b8      	blx	r7
   a4466:	1e07      	subs	r7, r0, #0
   a4468:	ddd3      	ble.n	a4412 <__sfvwrite_r+0x19e>
   a446a:	ebb8 0807 	subs.w	r8, r8, r7
   a446e:	d027      	beq.n	a44c0 <__sfvwrite_r+0x24c>
   a4470:	68b3      	ldr	r3, [r6, #8]
   a4472:	44ba      	add	sl, r7
   a4474:	1bdb      	subs	r3, r3, r7
   a4476:	ebc7 0909 	rsb	r9, r7, r9
   a447a:	60b3      	str	r3, [r6, #8]
   a447c:	2b00      	cmp	r3, #0
   a447e:	f43f af2b 	beq.w	a42d8 <__sfvwrite_r+0x64>
   a4482:	f1b9 0f00 	cmp.w	r9, #0
   a4486:	d1d5      	bne.n	a4434 <__sfvwrite_r+0x1c0>
   a4488:	2300      	movs	r3, #0
   a448a:	f8d5 a000 	ldr.w	sl, [r5]
   a448e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   a4492:	9301      	str	r3, [sp, #4]
   a4494:	3508      	adds	r5, #8
   a4496:	e7ca      	b.n	a442e <__sfvwrite_r+0x1ba>
   a4498:	4640      	mov	r0, r8
   a449a:	e784      	b.n	a43a6 <__sfvwrite_r+0x132>
   a449c:	46b8      	mov	r8, r7
   a449e:	46ba      	mov	sl, r7
   a44a0:	6820      	ldr	r0, [r4, #0]
   a44a2:	e774      	b.n	a438e <__sfvwrite_r+0x11a>
   a44a4:	465a      	mov	r2, fp
   a44a6:	4651      	mov	r1, sl
   a44a8:	f000 fbfe 	bl	a4ca8 <memmove>
   a44ac:	68a2      	ldr	r2, [r4, #8]
   a44ae:	6823      	ldr	r3, [r4, #0]
   a44b0:	ebcb 0202 	rsb	r2, fp, r2
   a44b4:	445b      	add	r3, fp
   a44b6:	ebb8 0807 	subs.w	r8, r8, r7
   a44ba:	60a2      	str	r2, [r4, #8]
   a44bc:	6023      	str	r3, [r4, #0]
   a44be:	d1d7      	bne.n	a4470 <__sfvwrite_r+0x1fc>
   a44c0:	4621      	mov	r1, r4
   a44c2:	9802      	ldr	r0, [sp, #8]
   a44c4:	f7ff fcee 	bl	a3ea4 <_fflush_r>
   a44c8:	2800      	cmp	r0, #0
   a44ca:	d1a2      	bne.n	a4412 <__sfvwrite_r+0x19e>
   a44cc:	f8cd 8004 	str.w	r8, [sp, #4]
   a44d0:	e7ce      	b.n	a4470 <__sfvwrite_r+0x1fc>
   a44d2:	464a      	mov	r2, r9
   a44d4:	210a      	movs	r1, #10
   a44d6:	4650      	mov	r0, sl
   a44d8:	f000 fba0 	bl	a4c1c <memchr>
   a44dc:	2800      	cmp	r0, #0
   a44de:	d03d      	beq.n	a455c <__sfvwrite_r+0x2e8>
   a44e0:	3001      	adds	r0, #1
   a44e2:	2301      	movs	r3, #1
   a44e4:	ebca 0800 	rsb	r8, sl, r0
   a44e8:	9301      	str	r3, [sp, #4]
   a44ea:	e7a6      	b.n	a443a <__sfvwrite_r+0x1c6>
   a44ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a44f0:	42bb      	cmp	r3, r7
   a44f2:	bf28      	it	cs
   a44f4:	463b      	movcs	r3, r7
   a44f6:	fb93 f3f2 	sdiv	r3, r3, r2
   a44fa:	69e1      	ldr	r1, [r4, #28]
   a44fc:	fb02 f303 	mul.w	r3, r2, r3
   a4500:	9802      	ldr	r0, [sp, #8]
   a4502:	464a      	mov	r2, r9
   a4504:	6a66      	ldr	r6, [r4, #36]	; 0x24
   a4506:	47b0      	blx	r6
   a4508:	2800      	cmp	r0, #0
   a450a:	f73f af4c 	bgt.w	a43a6 <__sfvwrite_r+0x132>
   a450e:	e780      	b.n	a4412 <__sfvwrite_r+0x19e>
   a4510:	461a      	mov	r2, r3
   a4512:	4651      	mov	r1, sl
   a4514:	9303      	str	r3, [sp, #12]
   a4516:	f000 fbc7 	bl	a4ca8 <memmove>
   a451a:	6822      	ldr	r2, [r4, #0]
   a451c:	9b03      	ldr	r3, [sp, #12]
   a451e:	4621      	mov	r1, r4
   a4520:	441a      	add	r2, r3
   a4522:	6022      	str	r2, [r4, #0]
   a4524:	9802      	ldr	r0, [sp, #8]
   a4526:	f7ff fcbd 	bl	a3ea4 <_fflush_r>
   a452a:	9b03      	ldr	r3, [sp, #12]
   a452c:	2800      	cmp	r0, #0
   a452e:	f47f af70 	bne.w	a4412 <__sfvwrite_r+0x19e>
   a4532:	461f      	mov	r7, r3
   a4534:	e799      	b.n	a446a <__sfvwrite_r+0x1f6>
   a4536:	9802      	ldr	r0, [sp, #8]
   a4538:	f000 fc1e 	bl	a4d78 <_realloc_r>
   a453c:	4683      	mov	fp, r0
   a453e:	2800      	cmp	r0, #0
   a4540:	f47f af19 	bne.w	a4376 <__sfvwrite_r+0x102>
   a4544:	9d02      	ldr	r5, [sp, #8]
   a4546:	6921      	ldr	r1, [r4, #16]
   a4548:	4628      	mov	r0, r5
   a454a:	f7ff fdab 	bl	a40a4 <_free_r>
   a454e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4552:	220c      	movs	r2, #12
   a4554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a4558:	602a      	str	r2, [r5, #0]
   a455a:	e75c      	b.n	a4416 <__sfvwrite_r+0x1a2>
   a455c:	2301      	movs	r3, #1
   a455e:	f109 0801 	add.w	r8, r9, #1
   a4562:	9301      	str	r3, [sp, #4]
   a4564:	e769      	b.n	a443a <__sfvwrite_r+0x1c6>
   a4566:	f04f 30ff 	mov.w	r0, #4294967295
   a456a:	e6b6      	b.n	a42da <__sfvwrite_r+0x66>
   a456c:	9a02      	ldr	r2, [sp, #8]
   a456e:	230c      	movs	r3, #12
   a4570:	6013      	str	r3, [r2, #0]
   a4572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4576:	e74e      	b.n	a4416 <__sfvwrite_r+0x1a2>
   a4578:	7ffffc00 	.word	0x7ffffc00

000a457c <_fwalk_reent>:
   a457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a4580:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a4584:	d01e      	beq.n	a45c4 <_fwalk_reent+0x48>
   a4586:	4688      	mov	r8, r1
   a4588:	4607      	mov	r7, r0
   a458a:	f04f 0900 	mov.w	r9, #0
   a458e:	6875      	ldr	r5, [r6, #4]
   a4590:	68b4      	ldr	r4, [r6, #8]
   a4592:	3d01      	subs	r5, #1
   a4594:	d410      	bmi.n	a45b8 <_fwalk_reent+0x3c>
   a4596:	89a3      	ldrh	r3, [r4, #12]
   a4598:	3d01      	subs	r5, #1
   a459a:	2b01      	cmp	r3, #1
   a459c:	d908      	bls.n	a45b0 <_fwalk_reent+0x34>
   a459e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a45a2:	3301      	adds	r3, #1
   a45a4:	d004      	beq.n	a45b0 <_fwalk_reent+0x34>
   a45a6:	4621      	mov	r1, r4
   a45a8:	4638      	mov	r0, r7
   a45aa:	47c0      	blx	r8
   a45ac:	ea49 0900 	orr.w	r9, r9, r0
   a45b0:	1c6b      	adds	r3, r5, #1
   a45b2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a45b6:	d1ee      	bne.n	a4596 <_fwalk_reent+0x1a>
   a45b8:	6836      	ldr	r6, [r6, #0]
   a45ba:	2e00      	cmp	r6, #0
   a45bc:	d1e7      	bne.n	a458e <_fwalk_reent+0x12>
   a45be:	4648      	mov	r0, r9
   a45c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a45c4:	46b1      	mov	r9, r6
   a45c6:	4648      	mov	r0, r9
   a45c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a45cc <__swhatbuf_r>:
   a45cc:	b570      	push	{r4, r5, r6, lr}
   a45ce:	460e      	mov	r6, r1
   a45d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a45d4:	b090      	sub	sp, #64	; 0x40
   a45d6:	2900      	cmp	r1, #0
   a45d8:	4614      	mov	r4, r2
   a45da:	461d      	mov	r5, r3
   a45dc:	db14      	blt.n	a4608 <__swhatbuf_r+0x3c>
   a45de:	aa01      	add	r2, sp, #4
   a45e0:	f000 fec6 	bl	a5370 <_fstat_r>
   a45e4:	2800      	cmp	r0, #0
   a45e6:	db0f      	blt.n	a4608 <__swhatbuf_r+0x3c>
   a45e8:	9a02      	ldr	r2, [sp, #8]
   a45ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a45ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   a45f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   a45f6:	fab2 f282 	clz	r2, r2
   a45fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   a45fe:	0952      	lsrs	r2, r2, #5
   a4600:	602a      	str	r2, [r5, #0]
   a4602:	6023      	str	r3, [r4, #0]
   a4604:	b010      	add	sp, #64	; 0x40
   a4606:	bd70      	pop	{r4, r5, r6, pc}
   a4608:	89b2      	ldrh	r2, [r6, #12]
   a460a:	2000      	movs	r0, #0
   a460c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   a4610:	b292      	uxth	r2, r2
   a4612:	6028      	str	r0, [r5, #0]
   a4614:	b11a      	cbz	r2, a461e <__swhatbuf_r+0x52>
   a4616:	2340      	movs	r3, #64	; 0x40
   a4618:	6023      	str	r3, [r4, #0]
   a461a:	b010      	add	sp, #64	; 0x40
   a461c:	bd70      	pop	{r4, r5, r6, pc}
   a461e:	4610      	mov	r0, r2
   a4620:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a4624:	6023      	str	r3, [r4, #0]
   a4626:	b010      	add	sp, #64	; 0x40
   a4628:	bd70      	pop	{r4, r5, r6, pc}
   a462a:	bf00      	nop

000a462c <__smakebuf_r>:
   a462c:	898a      	ldrh	r2, [r1, #12]
   a462e:	460b      	mov	r3, r1
   a4630:	0792      	lsls	r2, r2, #30
   a4632:	d506      	bpl.n	a4642 <__smakebuf_r+0x16>
   a4634:	f101 0243 	add.w	r2, r1, #67	; 0x43
   a4638:	2101      	movs	r1, #1
   a463a:	601a      	str	r2, [r3, #0]
   a463c:	611a      	str	r2, [r3, #16]
   a463e:	6159      	str	r1, [r3, #20]
   a4640:	4770      	bx	lr
   a4642:	b5f0      	push	{r4, r5, r6, r7, lr}
   a4644:	b083      	sub	sp, #12
   a4646:	ab01      	add	r3, sp, #4
   a4648:	466a      	mov	r2, sp
   a464a:	460c      	mov	r4, r1
   a464c:	4605      	mov	r5, r0
   a464e:	f7ff ffbd 	bl	a45cc <__swhatbuf_r>
   a4652:	9900      	ldr	r1, [sp, #0]
   a4654:	4606      	mov	r6, r0
   a4656:	4628      	mov	r0, r5
   a4658:	f000 f834 	bl	a46c4 <_malloc_r>
   a465c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a4660:	b1d0      	cbz	r0, a4698 <__smakebuf_r+0x6c>
   a4662:	e89d 0006 	ldmia.w	sp, {r1, r2}
   a4666:	4f12      	ldr	r7, [pc, #72]	; (a46b0 <__smakebuf_r+0x84>)
   a4668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a466c:	63ef      	str	r7, [r5, #60]	; 0x3c
   a466e:	81a3      	strh	r3, [r4, #12]
   a4670:	6020      	str	r0, [r4, #0]
   a4672:	6120      	str	r0, [r4, #16]
   a4674:	6161      	str	r1, [r4, #20]
   a4676:	b91a      	cbnz	r2, a4680 <__smakebuf_r+0x54>
   a4678:	4333      	orrs	r3, r6
   a467a:	81a3      	strh	r3, [r4, #12]
   a467c:	b003      	add	sp, #12
   a467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a4680:	4628      	mov	r0, r5
   a4682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a4686:	f000 fe87 	bl	a5398 <_isatty_r>
   a468a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a468e:	2800      	cmp	r0, #0
   a4690:	d0f2      	beq.n	a4678 <__smakebuf_r+0x4c>
   a4692:	f043 0301 	orr.w	r3, r3, #1
   a4696:	e7ef      	b.n	a4678 <__smakebuf_r+0x4c>
   a4698:	059a      	lsls	r2, r3, #22
   a469a:	d4ef      	bmi.n	a467c <__smakebuf_r+0x50>
   a469c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a46a0:	f043 0302 	orr.w	r3, r3, #2
   a46a4:	2101      	movs	r1, #1
   a46a6:	81a3      	strh	r3, [r4, #12]
   a46a8:	6022      	str	r2, [r4, #0]
   a46aa:	6122      	str	r2, [r4, #16]
   a46ac:	6161      	str	r1, [r4, #20]
   a46ae:	e7e5      	b.n	a467c <__smakebuf_r+0x50>
   a46b0:	000a3ed1 	.word	0x000a3ed1

000a46b4 <malloc>:
   a46b4:	4b02      	ldr	r3, [pc, #8]	; (a46c0 <malloc+0xc>)
   a46b6:	4601      	mov	r1, r0
   a46b8:	6818      	ldr	r0, [r3, #0]
   a46ba:	f000 b803 	b.w	a46c4 <_malloc_r>
   a46be:	bf00      	nop
   a46c0:	200710c8 	.word	0x200710c8

000a46c4 <_malloc_r>:
   a46c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a46c8:	f101 050b 	add.w	r5, r1, #11
   a46cc:	2d16      	cmp	r5, #22
   a46ce:	b083      	sub	sp, #12
   a46d0:	4606      	mov	r6, r0
   a46d2:	f240 80a0 	bls.w	a4816 <_malloc_r+0x152>
   a46d6:	f035 0507 	bics.w	r5, r5, #7
   a46da:	f100 80c0 	bmi.w	a485e <_malloc_r+0x19a>
   a46de:	42a9      	cmp	r1, r5
   a46e0:	f200 80bd 	bhi.w	a485e <_malloc_r+0x19a>
   a46e4:	f000 fb44 	bl	a4d70 <__malloc_lock>
   a46e8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a46ec:	f0c0 8290 	bcc.w	a4c10 <_malloc_r+0x54c>
   a46f0:	0a6b      	lsrs	r3, r5, #9
   a46f2:	f000 80bb 	beq.w	a486c <_malloc_r+0x1a8>
   a46f6:	2b04      	cmp	r3, #4
   a46f8:	f200 8177 	bhi.w	a49ea <_malloc_r+0x326>
   a46fc:	09a8      	lsrs	r0, r5, #6
   a46fe:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   a4702:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a4706:	3038      	adds	r0, #56	; 0x38
   a4708:	4fbe      	ldr	r7, [pc, #760]	; (a4a04 <_malloc_r+0x340>)
   a470a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a470e:	684c      	ldr	r4, [r1, #4]
   a4710:	3908      	subs	r1, #8
   a4712:	42a1      	cmp	r1, r4
   a4714:	d107      	bne.n	a4726 <_malloc_r+0x62>
   a4716:	e0ae      	b.n	a4876 <_malloc_r+0x1b2>
   a4718:	2a00      	cmp	r2, #0
   a471a:	f280 80ae 	bge.w	a487a <_malloc_r+0x1b6>
   a471e:	68e4      	ldr	r4, [r4, #12]
   a4720:	42a1      	cmp	r1, r4
   a4722:	f000 80a8 	beq.w	a4876 <_malloc_r+0x1b2>
   a4726:	6863      	ldr	r3, [r4, #4]
   a4728:	f023 0303 	bic.w	r3, r3, #3
   a472c:	1b5a      	subs	r2, r3, r5
   a472e:	2a0f      	cmp	r2, #15
   a4730:	ddf2      	ble.n	a4718 <_malloc_r+0x54>
   a4732:	49b4      	ldr	r1, [pc, #720]	; (a4a04 <_malloc_r+0x340>)
   a4734:	693c      	ldr	r4, [r7, #16]
   a4736:	f101 0e08 	add.w	lr, r1, #8
   a473a:	4574      	cmp	r4, lr
   a473c:	f000 81a8 	beq.w	a4a90 <_malloc_r+0x3cc>
   a4740:	6863      	ldr	r3, [r4, #4]
   a4742:	f023 0303 	bic.w	r3, r3, #3
   a4746:	1b5a      	subs	r2, r3, r5
   a4748:	2a0f      	cmp	r2, #15
   a474a:	f300 818e 	bgt.w	a4a6a <_malloc_r+0x3a6>
   a474e:	2a00      	cmp	r2, #0
   a4750:	f8c1 e014 	str.w	lr, [r1, #20]
   a4754:	f8c1 e010 	str.w	lr, [r1, #16]
   a4758:	f280 8093 	bge.w	a4882 <_malloc_r+0x1be>
   a475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a4760:	f080 815c 	bcs.w	a4a1c <_malloc_r+0x358>
   a4764:	08db      	lsrs	r3, r3, #3
   a4766:	684a      	ldr	r2, [r1, #4]
   a4768:	ea4f 09a3 	mov.w	r9, r3, asr #2
   a476c:	f04f 0c01 	mov.w	ip, #1
   a4770:	3301      	adds	r3, #1
   a4772:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   a4776:	fa0c f909 	lsl.w	r9, ip, r9
   a477a:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   a477e:	ea49 0202 	orr.w	r2, r9, r2
   a4782:	f1ac 0c08 	sub.w	ip, ip, #8
   a4786:	f8c4 c00c 	str.w	ip, [r4, #12]
   a478a:	f8c4 8008 	str.w	r8, [r4, #8]
   a478e:	604a      	str	r2, [r1, #4]
   a4790:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a4794:	f8c8 400c 	str.w	r4, [r8, #12]
   a4798:	1083      	asrs	r3, r0, #2
   a479a:	2401      	movs	r4, #1
   a479c:	409c      	lsls	r4, r3
   a479e:	4294      	cmp	r4, r2
   a47a0:	d87c      	bhi.n	a489c <_malloc_r+0x1d8>
   a47a2:	4214      	tst	r4, r2
   a47a4:	d106      	bne.n	a47b4 <_malloc_r+0xf0>
   a47a6:	f020 0003 	bic.w	r0, r0, #3
   a47aa:	0064      	lsls	r4, r4, #1
   a47ac:	4214      	tst	r4, r2
   a47ae:	f100 0004 	add.w	r0, r0, #4
   a47b2:	d0fa      	beq.n	a47aa <_malloc_r+0xe6>
   a47b4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a47b8:	46cc      	mov	ip, r9
   a47ba:	4680      	mov	r8, r0
   a47bc:	f8dc 100c 	ldr.w	r1, [ip, #12]
   a47c0:	458c      	cmp	ip, r1
   a47c2:	d107      	bne.n	a47d4 <_malloc_r+0x110>
   a47c4:	e166      	b.n	a4a94 <_malloc_r+0x3d0>
   a47c6:	2a00      	cmp	r2, #0
   a47c8:	f280 8174 	bge.w	a4ab4 <_malloc_r+0x3f0>
   a47cc:	68c9      	ldr	r1, [r1, #12]
   a47ce:	458c      	cmp	ip, r1
   a47d0:	f000 8160 	beq.w	a4a94 <_malloc_r+0x3d0>
   a47d4:	684b      	ldr	r3, [r1, #4]
   a47d6:	f023 0303 	bic.w	r3, r3, #3
   a47da:	1b5a      	subs	r2, r3, r5
   a47dc:	2a0f      	cmp	r2, #15
   a47de:	ddf2      	ble.n	a47c6 <_malloc_r+0x102>
   a47e0:	460c      	mov	r4, r1
   a47e2:	68cb      	ldr	r3, [r1, #12]
   a47e4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a47e8:	f045 0801 	orr.w	r8, r5, #1
   a47ec:	f8c1 8004 	str.w	r8, [r1, #4]
   a47f0:	440d      	add	r5, r1
   a47f2:	f042 0101 	orr.w	r1, r2, #1
   a47f6:	f8cc 300c 	str.w	r3, [ip, #12]
   a47fa:	4630      	mov	r0, r6
   a47fc:	f8c3 c008 	str.w	ip, [r3, #8]
   a4800:	617d      	str	r5, [r7, #20]
   a4802:	613d      	str	r5, [r7, #16]
   a4804:	f8c5 e00c 	str.w	lr, [r5, #12]
   a4808:	f8c5 e008 	str.w	lr, [r5, #8]
   a480c:	6069      	str	r1, [r5, #4]
   a480e:	50aa      	str	r2, [r5, r2]
   a4810:	f000 fab0 	bl	a4d74 <__malloc_unlock>
   a4814:	e01f      	b.n	a4856 <_malloc_r+0x192>
   a4816:	2910      	cmp	r1, #16
   a4818:	d821      	bhi.n	a485e <_malloc_r+0x19a>
   a481a:	f000 faa9 	bl	a4d70 <__malloc_lock>
   a481e:	2510      	movs	r5, #16
   a4820:	2306      	movs	r3, #6
   a4822:	2002      	movs	r0, #2
   a4824:	4f77      	ldr	r7, [pc, #476]	; (a4a04 <_malloc_r+0x340>)
   a4826:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   a482a:	685c      	ldr	r4, [r3, #4]
   a482c:	f1a3 0208 	sub.w	r2, r3, #8
   a4830:	4294      	cmp	r4, r2
   a4832:	f000 8138 	beq.w	a4aa6 <_malloc_r+0x3e2>
   a4836:	6863      	ldr	r3, [r4, #4]
   a4838:	68e1      	ldr	r1, [r4, #12]
   a483a:	f023 0303 	bic.w	r3, r3, #3
   a483e:	4423      	add	r3, r4
   a4840:	685a      	ldr	r2, [r3, #4]
   a4842:	68a5      	ldr	r5, [r4, #8]
   a4844:	f042 0201 	orr.w	r2, r2, #1
   a4848:	60e9      	str	r1, [r5, #12]
   a484a:	4630      	mov	r0, r6
   a484c:	608d      	str	r5, [r1, #8]
   a484e:	605a      	str	r2, [r3, #4]
   a4850:	f000 fa90 	bl	a4d74 <__malloc_unlock>
   a4854:	3408      	adds	r4, #8
   a4856:	4620      	mov	r0, r4
   a4858:	b003      	add	sp, #12
   a485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a485e:	2400      	movs	r4, #0
   a4860:	4620      	mov	r0, r4
   a4862:	230c      	movs	r3, #12
   a4864:	6033      	str	r3, [r6, #0]
   a4866:	b003      	add	sp, #12
   a4868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a486c:	2180      	movs	r1, #128	; 0x80
   a486e:	f04f 0e40 	mov.w	lr, #64	; 0x40
   a4872:	203f      	movs	r0, #63	; 0x3f
   a4874:	e748      	b.n	a4708 <_malloc_r+0x44>
   a4876:	4670      	mov	r0, lr
   a4878:	e75b      	b.n	a4732 <_malloc_r+0x6e>
   a487a:	4423      	add	r3, r4
   a487c:	685a      	ldr	r2, [r3, #4]
   a487e:	68e1      	ldr	r1, [r4, #12]
   a4880:	e7df      	b.n	a4842 <_malloc_r+0x17e>
   a4882:	4423      	add	r3, r4
   a4884:	685a      	ldr	r2, [r3, #4]
   a4886:	4630      	mov	r0, r6
   a4888:	f042 0201 	orr.w	r2, r2, #1
   a488c:	605a      	str	r2, [r3, #4]
   a488e:	3408      	adds	r4, #8
   a4890:	f000 fa70 	bl	a4d74 <__malloc_unlock>
   a4894:	4620      	mov	r0, r4
   a4896:	b003      	add	sp, #12
   a4898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a489c:	68bc      	ldr	r4, [r7, #8]
   a489e:	6863      	ldr	r3, [r4, #4]
   a48a0:	f023 0803 	bic.w	r8, r3, #3
   a48a4:	45a8      	cmp	r8, r5
   a48a6:	d304      	bcc.n	a48b2 <_malloc_r+0x1ee>
   a48a8:	ebc5 0308 	rsb	r3, r5, r8
   a48ac:	2b0f      	cmp	r3, #15
   a48ae:	f300 808c 	bgt.w	a49ca <_malloc_r+0x306>
   a48b2:	4b55      	ldr	r3, [pc, #340]	; (a4a08 <_malloc_r+0x344>)
   a48b4:	f8df 9160 	ldr.w	r9, [pc, #352]	; a4a18 <_malloc_r+0x354>
   a48b8:	681a      	ldr	r2, [r3, #0]
   a48ba:	f8d9 3000 	ldr.w	r3, [r9]
   a48be:	442a      	add	r2, r5
   a48c0:	3301      	adds	r3, #1
   a48c2:	eb04 0a08 	add.w	sl, r4, r8
   a48c6:	f000 8160 	beq.w	a4b8a <_malloc_r+0x4c6>
   a48ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a48ce:	320f      	adds	r2, #15
   a48d0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a48d4:	f022 020f 	bic.w	r2, r2, #15
   a48d8:	4611      	mov	r1, r2
   a48da:	4630      	mov	r0, r6
   a48dc:	9201      	str	r2, [sp, #4]
   a48de:	f000 fc35 	bl	a514c <_sbrk_r>
   a48e2:	f1b0 3fff 	cmp.w	r0, #4294967295
   a48e6:	4683      	mov	fp, r0
   a48e8:	9a01      	ldr	r2, [sp, #4]
   a48ea:	f000 8158 	beq.w	a4b9e <_malloc_r+0x4da>
   a48ee:	4582      	cmp	sl, r0
   a48f0:	f200 80fc 	bhi.w	a4aec <_malloc_r+0x428>
   a48f4:	4b45      	ldr	r3, [pc, #276]	; (a4a0c <_malloc_r+0x348>)
   a48f6:	45da      	cmp	sl, fp
   a48f8:	6819      	ldr	r1, [r3, #0]
   a48fa:	4411      	add	r1, r2
   a48fc:	6019      	str	r1, [r3, #0]
   a48fe:	f000 8153 	beq.w	a4ba8 <_malloc_r+0x4e4>
   a4902:	f8d9 0000 	ldr.w	r0, [r9]
   a4906:	f8df e110 	ldr.w	lr, [pc, #272]	; a4a18 <_malloc_r+0x354>
   a490a:	3001      	adds	r0, #1
   a490c:	bf1b      	ittet	ne
   a490e:	ebca 0a0b 	rsbne	sl, sl, fp
   a4912:	4451      	addne	r1, sl
   a4914:	f8ce b000 	streq.w	fp, [lr]
   a4918:	6019      	strne	r1, [r3, #0]
   a491a:	f01b 0107 	ands.w	r1, fp, #7
   a491e:	f000 8117 	beq.w	a4b50 <_malloc_r+0x48c>
   a4922:	f1c1 0008 	rsb	r0, r1, #8
   a4926:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a492a:	4483      	add	fp, r0
   a492c:	3108      	adds	r1, #8
   a492e:	445a      	add	r2, fp
   a4930:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a4934:	ebc2 0901 	rsb	r9, r2, r1
   a4938:	4649      	mov	r1, r9
   a493a:	4630      	mov	r0, r6
   a493c:	9301      	str	r3, [sp, #4]
   a493e:	f000 fc05 	bl	a514c <_sbrk_r>
   a4942:	1c43      	adds	r3, r0, #1
   a4944:	9b01      	ldr	r3, [sp, #4]
   a4946:	f000 813f 	beq.w	a4bc8 <_malloc_r+0x504>
   a494a:	ebcb 0200 	rsb	r2, fp, r0
   a494e:	444a      	add	r2, r9
   a4950:	f042 0201 	orr.w	r2, r2, #1
   a4954:	6819      	ldr	r1, [r3, #0]
   a4956:	42bc      	cmp	r4, r7
   a4958:	4449      	add	r1, r9
   a495a:	f8c7 b008 	str.w	fp, [r7, #8]
   a495e:	6019      	str	r1, [r3, #0]
   a4960:	f8cb 2004 	str.w	r2, [fp, #4]
   a4964:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a4a0c <_malloc_r+0x348>
   a4968:	d016      	beq.n	a4998 <_malloc_r+0x2d4>
   a496a:	f1b8 0f0f 	cmp.w	r8, #15
   a496e:	f240 80fd 	bls.w	a4b6c <_malloc_r+0x4a8>
   a4972:	6862      	ldr	r2, [r4, #4]
   a4974:	f1a8 030c 	sub.w	r3, r8, #12
   a4978:	f023 0307 	bic.w	r3, r3, #7
   a497c:	f002 0201 	and.w	r2, r2, #1
   a4980:	18e0      	adds	r0, r4, r3
   a4982:	f04f 0e05 	mov.w	lr, #5
   a4986:	431a      	orrs	r2, r3
   a4988:	2b0f      	cmp	r3, #15
   a498a:	6062      	str	r2, [r4, #4]
   a498c:	f8c0 e004 	str.w	lr, [r0, #4]
   a4990:	f8c0 e008 	str.w	lr, [r0, #8]
   a4994:	f200 811c 	bhi.w	a4bd0 <_malloc_r+0x50c>
   a4998:	4b1d      	ldr	r3, [pc, #116]	; (a4a10 <_malloc_r+0x34c>)
   a499a:	68bc      	ldr	r4, [r7, #8]
   a499c:	681a      	ldr	r2, [r3, #0]
   a499e:	4291      	cmp	r1, r2
   a49a0:	bf88      	it	hi
   a49a2:	6019      	strhi	r1, [r3, #0]
   a49a4:	4b1b      	ldr	r3, [pc, #108]	; (a4a14 <_malloc_r+0x350>)
   a49a6:	681a      	ldr	r2, [r3, #0]
   a49a8:	4291      	cmp	r1, r2
   a49aa:	6862      	ldr	r2, [r4, #4]
   a49ac:	bf88      	it	hi
   a49ae:	6019      	strhi	r1, [r3, #0]
   a49b0:	f022 0203 	bic.w	r2, r2, #3
   a49b4:	4295      	cmp	r5, r2
   a49b6:	eba2 0305 	sub.w	r3, r2, r5
   a49ba:	d801      	bhi.n	a49c0 <_malloc_r+0x2fc>
   a49bc:	2b0f      	cmp	r3, #15
   a49be:	dc04      	bgt.n	a49ca <_malloc_r+0x306>
   a49c0:	4630      	mov	r0, r6
   a49c2:	f000 f9d7 	bl	a4d74 <__malloc_unlock>
   a49c6:	2400      	movs	r4, #0
   a49c8:	e745      	b.n	a4856 <_malloc_r+0x192>
   a49ca:	f045 0201 	orr.w	r2, r5, #1
   a49ce:	f043 0301 	orr.w	r3, r3, #1
   a49d2:	4425      	add	r5, r4
   a49d4:	6062      	str	r2, [r4, #4]
   a49d6:	4630      	mov	r0, r6
   a49d8:	60bd      	str	r5, [r7, #8]
   a49da:	3408      	adds	r4, #8
   a49dc:	606b      	str	r3, [r5, #4]
   a49de:	f000 f9c9 	bl	a4d74 <__malloc_unlock>
   a49e2:	4620      	mov	r0, r4
   a49e4:	b003      	add	sp, #12
   a49e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a49ea:	2b14      	cmp	r3, #20
   a49ec:	d971      	bls.n	a4ad2 <_malloc_r+0x40e>
   a49ee:	2b54      	cmp	r3, #84	; 0x54
   a49f0:	f200 80a4 	bhi.w	a4b3c <_malloc_r+0x478>
   a49f4:	0b28      	lsrs	r0, r5, #12
   a49f6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   a49fa:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a49fe:	306e      	adds	r0, #110	; 0x6e
   a4a00:	e682      	b.n	a4708 <_malloc_r+0x44>
   a4a02:	bf00      	nop
   a4a04:	200710cc 	.word	0x200710cc
   a4a08:	200728a4 	.word	0x200728a4
   a4a0c:	200728a8 	.word	0x200728a8
   a4a10:	200728a0 	.word	0x200728a0
   a4a14:	2007289c 	.word	0x2007289c
   a4a18:	200714d8 	.word	0x200714d8
   a4a1c:	0a5a      	lsrs	r2, r3, #9
   a4a1e:	2a04      	cmp	r2, #4
   a4a20:	d95e      	bls.n	a4ae0 <_malloc_r+0x41c>
   a4a22:	2a14      	cmp	r2, #20
   a4a24:	f200 80b3 	bhi.w	a4b8e <_malloc_r+0x4ca>
   a4a28:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a4a2c:	0049      	lsls	r1, r1, #1
   a4a2e:	325b      	adds	r2, #91	; 0x5b
   a4a30:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   a4a34:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   a4a38:	f1ac 0c08 	sub.w	ip, ip, #8
   a4a3c:	458c      	cmp	ip, r1
   a4a3e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; a4c18 <_malloc_r+0x554>
   a4a42:	f000 8088 	beq.w	a4b56 <_malloc_r+0x492>
   a4a46:	684a      	ldr	r2, [r1, #4]
   a4a48:	f022 0203 	bic.w	r2, r2, #3
   a4a4c:	4293      	cmp	r3, r2
   a4a4e:	d202      	bcs.n	a4a56 <_malloc_r+0x392>
   a4a50:	6889      	ldr	r1, [r1, #8]
   a4a52:	458c      	cmp	ip, r1
   a4a54:	d1f7      	bne.n	a4a46 <_malloc_r+0x382>
   a4a56:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   a4a5a:	687a      	ldr	r2, [r7, #4]
   a4a5c:	f8c4 c00c 	str.w	ip, [r4, #12]
   a4a60:	60a1      	str	r1, [r4, #8]
   a4a62:	f8cc 4008 	str.w	r4, [ip, #8]
   a4a66:	60cc      	str	r4, [r1, #12]
   a4a68:	e696      	b.n	a4798 <_malloc_r+0xd4>
   a4a6a:	f045 0701 	orr.w	r7, r5, #1
   a4a6e:	f042 0301 	orr.w	r3, r2, #1
   a4a72:	4425      	add	r5, r4
   a4a74:	6067      	str	r7, [r4, #4]
   a4a76:	4630      	mov	r0, r6
   a4a78:	614d      	str	r5, [r1, #20]
   a4a7a:	610d      	str	r5, [r1, #16]
   a4a7c:	f8c5 e00c 	str.w	lr, [r5, #12]
   a4a80:	f8c5 e008 	str.w	lr, [r5, #8]
   a4a84:	606b      	str	r3, [r5, #4]
   a4a86:	50aa      	str	r2, [r5, r2]
   a4a88:	3408      	adds	r4, #8
   a4a8a:	f000 f973 	bl	a4d74 <__malloc_unlock>
   a4a8e:	e6e2      	b.n	a4856 <_malloc_r+0x192>
   a4a90:	684a      	ldr	r2, [r1, #4]
   a4a92:	e681      	b.n	a4798 <_malloc_r+0xd4>
   a4a94:	f108 0801 	add.w	r8, r8, #1
   a4a98:	f018 0f03 	tst.w	r8, #3
   a4a9c:	f10c 0c08 	add.w	ip, ip, #8
   a4aa0:	f47f ae8c 	bne.w	a47bc <_malloc_r+0xf8>
   a4aa4:	e030      	b.n	a4b08 <_malloc_r+0x444>
   a4aa6:	68dc      	ldr	r4, [r3, #12]
   a4aa8:	42a3      	cmp	r3, r4
   a4aaa:	bf08      	it	eq
   a4aac:	3002      	addeq	r0, #2
   a4aae:	f43f ae40 	beq.w	a4732 <_malloc_r+0x6e>
   a4ab2:	e6c0      	b.n	a4836 <_malloc_r+0x172>
   a4ab4:	460c      	mov	r4, r1
   a4ab6:	440b      	add	r3, r1
   a4ab8:	685a      	ldr	r2, [r3, #4]
   a4aba:	68c9      	ldr	r1, [r1, #12]
   a4abc:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a4ac0:	f042 0201 	orr.w	r2, r2, #1
   a4ac4:	605a      	str	r2, [r3, #4]
   a4ac6:	4630      	mov	r0, r6
   a4ac8:	60e9      	str	r1, [r5, #12]
   a4aca:	608d      	str	r5, [r1, #8]
   a4acc:	f000 f952 	bl	a4d74 <__malloc_unlock>
   a4ad0:	e6c1      	b.n	a4856 <_malloc_r+0x192>
   a4ad2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   a4ad6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   a4ada:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a4ade:	e613      	b.n	a4708 <_malloc_r+0x44>
   a4ae0:	099a      	lsrs	r2, r3, #6
   a4ae2:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a4ae6:	0049      	lsls	r1, r1, #1
   a4ae8:	3238      	adds	r2, #56	; 0x38
   a4aea:	e7a1      	b.n	a4a30 <_malloc_r+0x36c>
   a4aec:	42bc      	cmp	r4, r7
   a4aee:	4b4a      	ldr	r3, [pc, #296]	; (a4c18 <_malloc_r+0x554>)
   a4af0:	f43f af00 	beq.w	a48f4 <_malloc_r+0x230>
   a4af4:	689c      	ldr	r4, [r3, #8]
   a4af6:	6862      	ldr	r2, [r4, #4]
   a4af8:	f022 0203 	bic.w	r2, r2, #3
   a4afc:	e75a      	b.n	a49b4 <_malloc_r+0x2f0>
   a4afe:	f859 3908 	ldr.w	r3, [r9], #-8
   a4b02:	4599      	cmp	r9, r3
   a4b04:	f040 8082 	bne.w	a4c0c <_malloc_r+0x548>
   a4b08:	f010 0f03 	tst.w	r0, #3
   a4b0c:	f100 30ff 	add.w	r0, r0, #4294967295
   a4b10:	d1f5      	bne.n	a4afe <_malloc_r+0x43a>
   a4b12:	687b      	ldr	r3, [r7, #4]
   a4b14:	ea23 0304 	bic.w	r3, r3, r4
   a4b18:	607b      	str	r3, [r7, #4]
   a4b1a:	0064      	lsls	r4, r4, #1
   a4b1c:	429c      	cmp	r4, r3
   a4b1e:	f63f aebd 	bhi.w	a489c <_malloc_r+0x1d8>
   a4b22:	2c00      	cmp	r4, #0
   a4b24:	f43f aeba 	beq.w	a489c <_malloc_r+0x1d8>
   a4b28:	421c      	tst	r4, r3
   a4b2a:	4640      	mov	r0, r8
   a4b2c:	f47f ae42 	bne.w	a47b4 <_malloc_r+0xf0>
   a4b30:	0064      	lsls	r4, r4, #1
   a4b32:	421c      	tst	r4, r3
   a4b34:	f100 0004 	add.w	r0, r0, #4
   a4b38:	d0fa      	beq.n	a4b30 <_malloc_r+0x46c>
   a4b3a:	e63b      	b.n	a47b4 <_malloc_r+0xf0>
   a4b3c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a4b40:	d818      	bhi.n	a4b74 <_malloc_r+0x4b0>
   a4b42:	0be8      	lsrs	r0, r5, #15
   a4b44:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   a4b48:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a4b4c:	3077      	adds	r0, #119	; 0x77
   a4b4e:	e5db      	b.n	a4708 <_malloc_r+0x44>
   a4b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a4b54:	e6eb      	b.n	a492e <_malloc_r+0x26a>
   a4b56:	2101      	movs	r1, #1
   a4b58:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a4b5c:	1092      	asrs	r2, r2, #2
   a4b5e:	fa01 f202 	lsl.w	r2, r1, r2
   a4b62:	431a      	orrs	r2, r3
   a4b64:	f8c8 2004 	str.w	r2, [r8, #4]
   a4b68:	4661      	mov	r1, ip
   a4b6a:	e777      	b.n	a4a5c <_malloc_r+0x398>
   a4b6c:	2301      	movs	r3, #1
   a4b6e:	f8cb 3004 	str.w	r3, [fp, #4]
   a4b72:	e725      	b.n	a49c0 <_malloc_r+0x2fc>
   a4b74:	f240 5254 	movw	r2, #1364	; 0x554
   a4b78:	4293      	cmp	r3, r2
   a4b7a:	d820      	bhi.n	a4bbe <_malloc_r+0x4fa>
   a4b7c:	0ca8      	lsrs	r0, r5, #18
   a4b7e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   a4b82:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a4b86:	307c      	adds	r0, #124	; 0x7c
   a4b88:	e5be      	b.n	a4708 <_malloc_r+0x44>
   a4b8a:	3210      	adds	r2, #16
   a4b8c:	e6a4      	b.n	a48d8 <_malloc_r+0x214>
   a4b8e:	2a54      	cmp	r2, #84	; 0x54
   a4b90:	d826      	bhi.n	a4be0 <_malloc_r+0x51c>
   a4b92:	0b1a      	lsrs	r2, r3, #12
   a4b94:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a4b98:	0049      	lsls	r1, r1, #1
   a4b9a:	326e      	adds	r2, #110	; 0x6e
   a4b9c:	e748      	b.n	a4a30 <_malloc_r+0x36c>
   a4b9e:	68bc      	ldr	r4, [r7, #8]
   a4ba0:	6862      	ldr	r2, [r4, #4]
   a4ba2:	f022 0203 	bic.w	r2, r2, #3
   a4ba6:	e705      	b.n	a49b4 <_malloc_r+0x2f0>
   a4ba8:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a4bac:	2800      	cmp	r0, #0
   a4bae:	f47f aea8 	bne.w	a4902 <_malloc_r+0x23e>
   a4bb2:	4442      	add	r2, r8
   a4bb4:	68bb      	ldr	r3, [r7, #8]
   a4bb6:	f042 0201 	orr.w	r2, r2, #1
   a4bba:	605a      	str	r2, [r3, #4]
   a4bbc:	e6ec      	b.n	a4998 <_malloc_r+0x2d4>
   a4bbe:	21fe      	movs	r1, #254	; 0xfe
   a4bc0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   a4bc4:	207e      	movs	r0, #126	; 0x7e
   a4bc6:	e59f      	b.n	a4708 <_malloc_r+0x44>
   a4bc8:	2201      	movs	r2, #1
   a4bca:	f04f 0900 	mov.w	r9, #0
   a4bce:	e6c1      	b.n	a4954 <_malloc_r+0x290>
   a4bd0:	f104 0108 	add.w	r1, r4, #8
   a4bd4:	4630      	mov	r0, r6
   a4bd6:	f7ff fa65 	bl	a40a4 <_free_r>
   a4bda:	f8d9 1000 	ldr.w	r1, [r9]
   a4bde:	e6db      	b.n	a4998 <_malloc_r+0x2d4>
   a4be0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a4be4:	d805      	bhi.n	a4bf2 <_malloc_r+0x52e>
   a4be6:	0bda      	lsrs	r2, r3, #15
   a4be8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a4bec:	0049      	lsls	r1, r1, #1
   a4bee:	3277      	adds	r2, #119	; 0x77
   a4bf0:	e71e      	b.n	a4a30 <_malloc_r+0x36c>
   a4bf2:	f240 5154 	movw	r1, #1364	; 0x554
   a4bf6:	428a      	cmp	r2, r1
   a4bf8:	d805      	bhi.n	a4c06 <_malloc_r+0x542>
   a4bfa:	0c9a      	lsrs	r2, r3, #18
   a4bfc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a4c00:	0049      	lsls	r1, r1, #1
   a4c02:	327c      	adds	r2, #124	; 0x7c
   a4c04:	e714      	b.n	a4a30 <_malloc_r+0x36c>
   a4c06:	21fe      	movs	r1, #254	; 0xfe
   a4c08:	227e      	movs	r2, #126	; 0x7e
   a4c0a:	e711      	b.n	a4a30 <_malloc_r+0x36c>
   a4c0c:	687b      	ldr	r3, [r7, #4]
   a4c0e:	e784      	b.n	a4b1a <_malloc_r+0x456>
   a4c10:	08e8      	lsrs	r0, r5, #3
   a4c12:	1c43      	adds	r3, r0, #1
   a4c14:	005b      	lsls	r3, r3, #1
   a4c16:	e605      	b.n	a4824 <_malloc_r+0x160>
   a4c18:	200710cc 	.word	0x200710cc

000a4c1c <memchr>:
   a4c1c:	0783      	lsls	r3, r0, #30
   a4c1e:	b470      	push	{r4, r5, r6}
   a4c20:	b2cd      	uxtb	r5, r1
   a4c22:	d03d      	beq.n	a4ca0 <memchr+0x84>
   a4c24:	1e53      	subs	r3, r2, #1
   a4c26:	b302      	cbz	r2, a4c6a <memchr+0x4e>
   a4c28:	7802      	ldrb	r2, [r0, #0]
   a4c2a:	42aa      	cmp	r2, r5
   a4c2c:	d01e      	beq.n	a4c6c <memchr+0x50>
   a4c2e:	1c42      	adds	r2, r0, #1
   a4c30:	e004      	b.n	a4c3c <memchr+0x20>
   a4c32:	b1d3      	cbz	r3, a4c6a <memchr+0x4e>
   a4c34:	7804      	ldrb	r4, [r0, #0]
   a4c36:	3b01      	subs	r3, #1
   a4c38:	42ac      	cmp	r4, r5
   a4c3a:	d017      	beq.n	a4c6c <memchr+0x50>
   a4c3c:	f012 0f03 	tst.w	r2, #3
   a4c40:	4610      	mov	r0, r2
   a4c42:	f102 0201 	add.w	r2, r2, #1
   a4c46:	d1f4      	bne.n	a4c32 <memchr+0x16>
   a4c48:	2b03      	cmp	r3, #3
   a4c4a:	d811      	bhi.n	a4c70 <memchr+0x54>
   a4c4c:	b353      	cbz	r3, a4ca4 <memchr+0x88>
   a4c4e:	7802      	ldrb	r2, [r0, #0]
   a4c50:	42aa      	cmp	r2, r5
   a4c52:	d00b      	beq.n	a4c6c <memchr+0x50>
   a4c54:	4403      	add	r3, r0
   a4c56:	1c42      	adds	r2, r0, #1
   a4c58:	e002      	b.n	a4c60 <memchr+0x44>
   a4c5a:	7801      	ldrb	r1, [r0, #0]
   a4c5c:	42a9      	cmp	r1, r5
   a4c5e:	d005      	beq.n	a4c6c <memchr+0x50>
   a4c60:	4293      	cmp	r3, r2
   a4c62:	4610      	mov	r0, r2
   a4c64:	f102 0201 	add.w	r2, r2, #1
   a4c68:	d1f7      	bne.n	a4c5a <memchr+0x3e>
   a4c6a:	2000      	movs	r0, #0
   a4c6c:	bc70      	pop	{r4, r5, r6}
   a4c6e:	4770      	bx	lr
   a4c70:	4604      	mov	r4, r0
   a4c72:	020e      	lsls	r6, r1, #8
   a4c74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   a4c78:	432e      	orrs	r6, r5
   a4c7a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a4c7e:	6822      	ldr	r2, [r4, #0]
   a4c80:	4620      	mov	r0, r4
   a4c82:	4072      	eors	r2, r6
   a4c84:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   a4c88:	ea21 0202 	bic.w	r2, r1, r2
   a4c8c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a4c90:	f104 0404 	add.w	r4, r4, #4
   a4c94:	d1db      	bne.n	a4c4e <memchr+0x32>
   a4c96:	3b04      	subs	r3, #4
   a4c98:	2b03      	cmp	r3, #3
   a4c9a:	4620      	mov	r0, r4
   a4c9c:	d8ef      	bhi.n	a4c7e <memchr+0x62>
   a4c9e:	e7d5      	b.n	a4c4c <memchr+0x30>
   a4ca0:	4613      	mov	r3, r2
   a4ca2:	e7d1      	b.n	a4c48 <memchr+0x2c>
   a4ca4:	4618      	mov	r0, r3
   a4ca6:	e7e1      	b.n	a4c6c <memchr+0x50>

000a4ca8 <memmove>:
   a4ca8:	4288      	cmp	r0, r1
   a4caa:	b5f0      	push	{r4, r5, r6, r7, lr}
   a4cac:	d90d      	bls.n	a4cca <memmove+0x22>
   a4cae:	188b      	adds	r3, r1, r2
   a4cb0:	4298      	cmp	r0, r3
   a4cb2:	d20a      	bcs.n	a4cca <memmove+0x22>
   a4cb4:	1881      	adds	r1, r0, r2
   a4cb6:	2a00      	cmp	r2, #0
   a4cb8:	d051      	beq.n	a4d5e <memmove+0xb6>
   a4cba:	1a9a      	subs	r2, r3, r2
   a4cbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a4cc0:	4293      	cmp	r3, r2
   a4cc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a4cc6:	d1f9      	bne.n	a4cbc <memmove+0x14>
   a4cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a4cca:	2a0f      	cmp	r2, #15
   a4ccc:	d948      	bls.n	a4d60 <memmove+0xb8>
   a4cce:	ea41 0300 	orr.w	r3, r1, r0
   a4cd2:	079b      	lsls	r3, r3, #30
   a4cd4:	d146      	bne.n	a4d64 <memmove+0xbc>
   a4cd6:	4615      	mov	r5, r2
   a4cd8:	f100 0410 	add.w	r4, r0, #16
   a4cdc:	f101 0310 	add.w	r3, r1, #16
   a4ce0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a4ce4:	3d10      	subs	r5, #16
   a4ce6:	f844 6c10 	str.w	r6, [r4, #-16]
   a4cea:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a4cee:	2d0f      	cmp	r5, #15
   a4cf0:	f844 6c0c 	str.w	r6, [r4, #-12]
   a4cf4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a4cf8:	f104 0410 	add.w	r4, r4, #16
   a4cfc:	f844 6c18 	str.w	r6, [r4, #-24]
   a4d00:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a4d04:	f103 0310 	add.w	r3, r3, #16
   a4d08:	f844 6c14 	str.w	r6, [r4, #-20]
   a4d0c:	d8e8      	bhi.n	a4ce0 <memmove+0x38>
   a4d0e:	f1a2 0310 	sub.w	r3, r2, #16
   a4d12:	f023 030f 	bic.w	r3, r3, #15
   a4d16:	f002 0e0f 	and.w	lr, r2, #15
   a4d1a:	3310      	adds	r3, #16
   a4d1c:	f1be 0f03 	cmp.w	lr, #3
   a4d20:	4419      	add	r1, r3
   a4d22:	4403      	add	r3, r0
   a4d24:	d921      	bls.n	a4d6a <memmove+0xc2>
   a4d26:	460e      	mov	r6, r1
   a4d28:	4674      	mov	r4, lr
   a4d2a:	1f1d      	subs	r5, r3, #4
   a4d2c:	f856 7b04 	ldr.w	r7, [r6], #4
   a4d30:	3c04      	subs	r4, #4
   a4d32:	2c03      	cmp	r4, #3
   a4d34:	f845 7f04 	str.w	r7, [r5, #4]!
   a4d38:	d8f8      	bhi.n	a4d2c <memmove+0x84>
   a4d3a:	f1ae 0404 	sub.w	r4, lr, #4
   a4d3e:	f024 0403 	bic.w	r4, r4, #3
   a4d42:	3404      	adds	r4, #4
   a4d44:	4423      	add	r3, r4
   a4d46:	4421      	add	r1, r4
   a4d48:	f002 0203 	and.w	r2, r2, #3
   a4d4c:	b162      	cbz	r2, a4d68 <memmove+0xc0>
   a4d4e:	3b01      	subs	r3, #1
   a4d50:	440a      	add	r2, r1
   a4d52:	f811 4b01 	ldrb.w	r4, [r1], #1
   a4d56:	428a      	cmp	r2, r1
   a4d58:	f803 4f01 	strb.w	r4, [r3, #1]!
   a4d5c:	d1f9      	bne.n	a4d52 <memmove+0xaa>
   a4d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a4d60:	4603      	mov	r3, r0
   a4d62:	e7f3      	b.n	a4d4c <memmove+0xa4>
   a4d64:	4603      	mov	r3, r0
   a4d66:	e7f2      	b.n	a4d4e <memmove+0xa6>
   a4d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a4d6a:	4672      	mov	r2, lr
   a4d6c:	e7ee      	b.n	a4d4c <memmove+0xa4>
   a4d6e:	bf00      	nop

000a4d70 <__malloc_lock>:
   a4d70:	4770      	bx	lr
   a4d72:	bf00      	nop

000a4d74 <__malloc_unlock>:
   a4d74:	4770      	bx	lr
   a4d76:	bf00      	nop

000a4d78 <_realloc_r>:
   a4d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a4d7c:	4617      	mov	r7, r2
   a4d7e:	b083      	sub	sp, #12
   a4d80:	2900      	cmp	r1, #0
   a4d82:	f000 808f 	beq.w	a4ea4 <_realloc_r+0x12c>
   a4d86:	460d      	mov	r5, r1
   a4d88:	4681      	mov	r9, r0
   a4d8a:	f107 040b 	add.w	r4, r7, #11
   a4d8e:	f7ff ffef 	bl	a4d70 <__malloc_lock>
   a4d92:	f855 ec04 	ldr.w	lr, [r5, #-4]
   a4d96:	2c16      	cmp	r4, #22
   a4d98:	f02e 0603 	bic.w	r6, lr, #3
   a4d9c:	f1a5 0808 	sub.w	r8, r5, #8
   a4da0:	d83c      	bhi.n	a4e1c <_realloc_r+0xa4>
   a4da2:	2210      	movs	r2, #16
   a4da4:	4614      	mov	r4, r2
   a4da6:	42a7      	cmp	r7, r4
   a4da8:	d83d      	bhi.n	a4e26 <_realloc_r+0xae>
   a4daa:	4296      	cmp	r6, r2
   a4dac:	da42      	bge.n	a4e34 <_realloc_r+0xbc>
   a4dae:	4bc6      	ldr	r3, [pc, #792]	; (a50c8 <_realloc_r+0x350>)
   a4db0:	eb08 0006 	add.w	r0, r8, r6
   a4db4:	6899      	ldr	r1, [r3, #8]
   a4db6:	4288      	cmp	r0, r1
   a4db8:	6841      	ldr	r1, [r0, #4]
   a4dba:	f000 80d7 	beq.w	a4f6c <_realloc_r+0x1f4>
   a4dbe:	f021 0301 	bic.w	r3, r1, #1
   a4dc2:	4403      	add	r3, r0
   a4dc4:	685b      	ldr	r3, [r3, #4]
   a4dc6:	07db      	lsls	r3, r3, #31
   a4dc8:	d54c      	bpl.n	a4e64 <_realloc_r+0xec>
   a4dca:	f01e 0f01 	tst.w	lr, #1
   a4dce:	f000 809d 	beq.w	a4f0c <_realloc_r+0x194>
   a4dd2:	4639      	mov	r1, r7
   a4dd4:	4648      	mov	r0, r9
   a4dd6:	f7ff fc75 	bl	a46c4 <_malloc_r>
   a4dda:	4607      	mov	r7, r0
   a4ddc:	2800      	cmp	r0, #0
   a4dde:	d03a      	beq.n	a4e56 <_realloc_r+0xde>
   a4de0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a4de4:	f1a0 0208 	sub.w	r2, r0, #8
   a4de8:	f023 0301 	bic.w	r3, r3, #1
   a4dec:	4443      	add	r3, r8
   a4dee:	429a      	cmp	r2, r3
   a4df0:	f000 813e 	beq.w	a5070 <_realloc_r+0x2f8>
   a4df4:	1f32      	subs	r2, r6, #4
   a4df6:	2a24      	cmp	r2, #36	; 0x24
   a4df8:	f200 812b 	bhi.w	a5052 <_realloc_r+0x2da>
   a4dfc:	2a13      	cmp	r2, #19
   a4dfe:	f200 80ff 	bhi.w	a5000 <_realloc_r+0x288>
   a4e02:	4603      	mov	r3, r0
   a4e04:	462a      	mov	r2, r5
   a4e06:	6811      	ldr	r1, [r2, #0]
   a4e08:	6019      	str	r1, [r3, #0]
   a4e0a:	6851      	ldr	r1, [r2, #4]
   a4e0c:	6059      	str	r1, [r3, #4]
   a4e0e:	6892      	ldr	r2, [r2, #8]
   a4e10:	609a      	str	r2, [r3, #8]
   a4e12:	4629      	mov	r1, r5
   a4e14:	4648      	mov	r0, r9
   a4e16:	f7ff f945 	bl	a40a4 <_free_r>
   a4e1a:	e01c      	b.n	a4e56 <_realloc_r+0xde>
   a4e1c:	f024 0407 	bic.w	r4, r4, #7
   a4e20:	2c00      	cmp	r4, #0
   a4e22:	4622      	mov	r2, r4
   a4e24:	dabf      	bge.n	a4da6 <_realloc_r+0x2e>
   a4e26:	230c      	movs	r3, #12
   a4e28:	2000      	movs	r0, #0
   a4e2a:	f8c9 3000 	str.w	r3, [r9]
   a4e2e:	b003      	add	sp, #12
   a4e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4e34:	462f      	mov	r7, r5
   a4e36:	1b33      	subs	r3, r6, r4
   a4e38:	2b0f      	cmp	r3, #15
   a4e3a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   a4e3e:	d81d      	bhi.n	a4e7c <_realloc_r+0x104>
   a4e40:	f002 0201 	and.w	r2, r2, #1
   a4e44:	4332      	orrs	r2, r6
   a4e46:	eb08 0106 	add.w	r1, r8, r6
   a4e4a:	f8c8 2004 	str.w	r2, [r8, #4]
   a4e4e:	684b      	ldr	r3, [r1, #4]
   a4e50:	f043 0301 	orr.w	r3, r3, #1
   a4e54:	604b      	str	r3, [r1, #4]
   a4e56:	4648      	mov	r0, r9
   a4e58:	f7ff ff8c 	bl	a4d74 <__malloc_unlock>
   a4e5c:	4638      	mov	r0, r7
   a4e5e:	b003      	add	sp, #12
   a4e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a4e64:	f021 0103 	bic.w	r1, r1, #3
   a4e68:	4431      	add	r1, r6
   a4e6a:	4291      	cmp	r1, r2
   a4e6c:	db20      	blt.n	a4eb0 <_realloc_r+0x138>
   a4e6e:	68c3      	ldr	r3, [r0, #12]
   a4e70:	6882      	ldr	r2, [r0, #8]
   a4e72:	462f      	mov	r7, r5
   a4e74:	60d3      	str	r3, [r2, #12]
   a4e76:	460e      	mov	r6, r1
   a4e78:	609a      	str	r2, [r3, #8]
   a4e7a:	e7dc      	b.n	a4e36 <_realloc_r+0xbe>
   a4e7c:	f002 0201 	and.w	r2, r2, #1
   a4e80:	eb08 0104 	add.w	r1, r8, r4
   a4e84:	4314      	orrs	r4, r2
   a4e86:	f043 0201 	orr.w	r2, r3, #1
   a4e8a:	f8c8 4004 	str.w	r4, [r8, #4]
   a4e8e:	440b      	add	r3, r1
   a4e90:	604a      	str	r2, [r1, #4]
   a4e92:	685a      	ldr	r2, [r3, #4]
   a4e94:	3108      	adds	r1, #8
   a4e96:	f042 0201 	orr.w	r2, r2, #1
   a4e9a:	605a      	str	r2, [r3, #4]
   a4e9c:	4648      	mov	r0, r9
   a4e9e:	f7ff f901 	bl	a40a4 <_free_r>
   a4ea2:	e7d8      	b.n	a4e56 <_realloc_r+0xde>
   a4ea4:	4611      	mov	r1, r2
   a4ea6:	b003      	add	sp, #12
   a4ea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a4eac:	f7ff bc0a 	b.w	a46c4 <_malloc_r>
   a4eb0:	f01e 0f01 	tst.w	lr, #1
   a4eb4:	d18d      	bne.n	a4dd2 <_realloc_r+0x5a>
   a4eb6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a4eba:	ebc3 0a08 	rsb	sl, r3, r8
   a4ebe:	f8da 3004 	ldr.w	r3, [sl, #4]
   a4ec2:	f023 0c03 	bic.w	ip, r3, #3
   a4ec6:	eb01 0e0c 	add.w	lr, r1, ip
   a4eca:	4596      	cmp	lr, r2
   a4ecc:	db26      	blt.n	a4f1c <_realloc_r+0x1a4>
   a4ece:	4657      	mov	r7, sl
   a4ed0:	68c3      	ldr	r3, [r0, #12]
   a4ed2:	6881      	ldr	r1, [r0, #8]
   a4ed4:	1f32      	subs	r2, r6, #4
   a4ed6:	60cb      	str	r3, [r1, #12]
   a4ed8:	6099      	str	r1, [r3, #8]
   a4eda:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a4ede:	f8da 300c 	ldr.w	r3, [sl, #12]
   a4ee2:	2a24      	cmp	r2, #36	; 0x24
   a4ee4:	60cb      	str	r3, [r1, #12]
   a4ee6:	6099      	str	r1, [r3, #8]
   a4ee8:	f200 80c9 	bhi.w	a507e <_realloc_r+0x306>
   a4eec:	2a13      	cmp	r2, #19
   a4eee:	f240 8092 	bls.w	a5016 <_realloc_r+0x29e>
   a4ef2:	682b      	ldr	r3, [r5, #0]
   a4ef4:	2a1b      	cmp	r2, #27
   a4ef6:	f8ca 3008 	str.w	r3, [sl, #8]
   a4efa:	686b      	ldr	r3, [r5, #4]
   a4efc:	f8ca 300c 	str.w	r3, [sl, #12]
   a4f00:	f200 80cd 	bhi.w	a509e <_realloc_r+0x326>
   a4f04:	3508      	adds	r5, #8
   a4f06:	f10a 0310 	add.w	r3, sl, #16
   a4f0a:	e085      	b.n	a5018 <_realloc_r+0x2a0>
   a4f0c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a4f10:	ebc3 0a08 	rsb	sl, r3, r8
   a4f14:	f8da 3004 	ldr.w	r3, [sl, #4]
   a4f18:	f023 0c03 	bic.w	ip, r3, #3
   a4f1c:	eb06 030c 	add.w	r3, r6, ip
   a4f20:	4293      	cmp	r3, r2
   a4f22:	f6ff af56 	blt.w	a4dd2 <_realloc_r+0x5a>
   a4f26:	4657      	mov	r7, sl
   a4f28:	f8da 100c 	ldr.w	r1, [sl, #12]
   a4f2c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a4f30:	1f32      	subs	r2, r6, #4
   a4f32:	2a24      	cmp	r2, #36	; 0x24
   a4f34:	60c1      	str	r1, [r0, #12]
   a4f36:	6088      	str	r0, [r1, #8]
   a4f38:	f200 80aa 	bhi.w	a5090 <_realloc_r+0x318>
   a4f3c:	2a13      	cmp	r2, #19
   a4f3e:	f240 80a5 	bls.w	a508c <_realloc_r+0x314>
   a4f42:	6829      	ldr	r1, [r5, #0]
   a4f44:	2a1b      	cmp	r2, #27
   a4f46:	f8ca 1008 	str.w	r1, [sl, #8]
   a4f4a:	6869      	ldr	r1, [r5, #4]
   a4f4c:	f8ca 100c 	str.w	r1, [sl, #12]
   a4f50:	f200 80bc 	bhi.w	a50cc <_realloc_r+0x354>
   a4f54:	3508      	adds	r5, #8
   a4f56:	f10a 0210 	add.w	r2, sl, #16
   a4f5a:	6829      	ldr	r1, [r5, #0]
   a4f5c:	461e      	mov	r6, r3
   a4f5e:	6011      	str	r1, [r2, #0]
   a4f60:	6869      	ldr	r1, [r5, #4]
   a4f62:	46d0      	mov	r8, sl
   a4f64:	6051      	str	r1, [r2, #4]
   a4f66:	68ab      	ldr	r3, [r5, #8]
   a4f68:	6093      	str	r3, [r2, #8]
   a4f6a:	e764      	b.n	a4e36 <_realloc_r+0xbe>
   a4f6c:	f021 0b03 	bic.w	fp, r1, #3
   a4f70:	f104 0010 	add.w	r0, r4, #16
   a4f74:	44b3      	add	fp, r6
   a4f76:	4583      	cmp	fp, r0
   a4f78:	da57      	bge.n	a502a <_realloc_r+0x2b2>
   a4f7a:	f01e 0f01 	tst.w	lr, #1
   a4f7e:	f47f af28 	bne.w	a4dd2 <_realloc_r+0x5a>
   a4f82:	f855 1c08 	ldr.w	r1, [r5, #-8]
   a4f86:	ebc1 0a08 	rsb	sl, r1, r8
   a4f8a:	f8da 1004 	ldr.w	r1, [sl, #4]
   a4f8e:	f021 0c03 	bic.w	ip, r1, #3
   a4f92:	44e3      	add	fp, ip
   a4f94:	4558      	cmp	r0, fp
   a4f96:	dcc1      	bgt.n	a4f1c <_realloc_r+0x1a4>
   a4f98:	4657      	mov	r7, sl
   a4f9a:	f8da 100c 	ldr.w	r1, [sl, #12]
   a4f9e:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a4fa2:	1f32      	subs	r2, r6, #4
   a4fa4:	2a24      	cmp	r2, #36	; 0x24
   a4fa6:	60c1      	str	r1, [r0, #12]
   a4fa8:	6088      	str	r0, [r1, #8]
   a4faa:	f200 80b1 	bhi.w	a5110 <_realloc_r+0x398>
   a4fae:	2a13      	cmp	r2, #19
   a4fb0:	f240 80a2 	bls.w	a50f8 <_realloc_r+0x380>
   a4fb4:	6829      	ldr	r1, [r5, #0]
   a4fb6:	2a1b      	cmp	r2, #27
   a4fb8:	f8ca 1008 	str.w	r1, [sl, #8]
   a4fbc:	6869      	ldr	r1, [r5, #4]
   a4fbe:	f8ca 100c 	str.w	r1, [sl, #12]
   a4fc2:	f200 80ac 	bhi.w	a511e <_realloc_r+0x3a6>
   a4fc6:	3508      	adds	r5, #8
   a4fc8:	f10a 0210 	add.w	r2, sl, #16
   a4fcc:	6829      	ldr	r1, [r5, #0]
   a4fce:	6011      	str	r1, [r2, #0]
   a4fd0:	6869      	ldr	r1, [r5, #4]
   a4fd2:	6051      	str	r1, [r2, #4]
   a4fd4:	68a9      	ldr	r1, [r5, #8]
   a4fd6:	6091      	str	r1, [r2, #8]
   a4fd8:	ebc4 020b 	rsb	r2, r4, fp
   a4fdc:	eb0a 0104 	add.w	r1, sl, r4
   a4fe0:	f042 0201 	orr.w	r2, r2, #1
   a4fe4:	6099      	str	r1, [r3, #8]
   a4fe6:	604a      	str	r2, [r1, #4]
   a4fe8:	f8da 3004 	ldr.w	r3, [sl, #4]
   a4fec:	4648      	mov	r0, r9
   a4fee:	f003 0301 	and.w	r3, r3, #1
   a4ff2:	431c      	orrs	r4, r3
   a4ff4:	f8ca 4004 	str.w	r4, [sl, #4]
   a4ff8:	f7ff febc 	bl	a4d74 <__malloc_unlock>
   a4ffc:	4638      	mov	r0, r7
   a4ffe:	e72e      	b.n	a4e5e <_realloc_r+0xe6>
   a5000:	682b      	ldr	r3, [r5, #0]
   a5002:	2a1b      	cmp	r2, #27
   a5004:	6003      	str	r3, [r0, #0]
   a5006:	686b      	ldr	r3, [r5, #4]
   a5008:	6043      	str	r3, [r0, #4]
   a500a:	d826      	bhi.n	a505a <_realloc_r+0x2e2>
   a500c:	f100 0308 	add.w	r3, r0, #8
   a5010:	f105 0208 	add.w	r2, r5, #8
   a5014:	e6f7      	b.n	a4e06 <_realloc_r+0x8e>
   a5016:	463b      	mov	r3, r7
   a5018:	682a      	ldr	r2, [r5, #0]
   a501a:	4676      	mov	r6, lr
   a501c:	601a      	str	r2, [r3, #0]
   a501e:	686a      	ldr	r2, [r5, #4]
   a5020:	46d0      	mov	r8, sl
   a5022:	605a      	str	r2, [r3, #4]
   a5024:	68aa      	ldr	r2, [r5, #8]
   a5026:	609a      	str	r2, [r3, #8]
   a5028:	e705      	b.n	a4e36 <_realloc_r+0xbe>
   a502a:	ebc4 0b0b 	rsb	fp, r4, fp
   a502e:	eb08 0104 	add.w	r1, r8, r4
   a5032:	f04b 0201 	orr.w	r2, fp, #1
   a5036:	6099      	str	r1, [r3, #8]
   a5038:	604a      	str	r2, [r1, #4]
   a503a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a503e:	4648      	mov	r0, r9
   a5040:	f003 0301 	and.w	r3, r3, #1
   a5044:	431c      	orrs	r4, r3
   a5046:	f845 4c04 	str.w	r4, [r5, #-4]
   a504a:	f7ff fe93 	bl	a4d74 <__malloc_unlock>
   a504e:	4628      	mov	r0, r5
   a5050:	e705      	b.n	a4e5e <_realloc_r+0xe6>
   a5052:	4629      	mov	r1, r5
   a5054:	f7ff fe28 	bl	a4ca8 <memmove>
   a5058:	e6db      	b.n	a4e12 <_realloc_r+0x9a>
   a505a:	68ab      	ldr	r3, [r5, #8]
   a505c:	2a24      	cmp	r2, #36	; 0x24
   a505e:	6083      	str	r3, [r0, #8]
   a5060:	68eb      	ldr	r3, [r5, #12]
   a5062:	60c3      	str	r3, [r0, #12]
   a5064:	d027      	beq.n	a50b6 <_realloc_r+0x33e>
   a5066:	f100 0310 	add.w	r3, r0, #16
   a506a:	f105 0210 	add.w	r2, r5, #16
   a506e:	e6ca      	b.n	a4e06 <_realloc_r+0x8e>
   a5070:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a5074:	462f      	mov	r7, r5
   a5076:	f023 0303 	bic.w	r3, r3, #3
   a507a:	441e      	add	r6, r3
   a507c:	e6db      	b.n	a4e36 <_realloc_r+0xbe>
   a507e:	4629      	mov	r1, r5
   a5080:	4638      	mov	r0, r7
   a5082:	4676      	mov	r6, lr
   a5084:	46d0      	mov	r8, sl
   a5086:	f7ff fe0f 	bl	a4ca8 <memmove>
   a508a:	e6d4      	b.n	a4e36 <_realloc_r+0xbe>
   a508c:	463a      	mov	r2, r7
   a508e:	e764      	b.n	a4f5a <_realloc_r+0x1e2>
   a5090:	4629      	mov	r1, r5
   a5092:	4638      	mov	r0, r7
   a5094:	461e      	mov	r6, r3
   a5096:	46d0      	mov	r8, sl
   a5098:	f7ff fe06 	bl	a4ca8 <memmove>
   a509c:	e6cb      	b.n	a4e36 <_realloc_r+0xbe>
   a509e:	68ab      	ldr	r3, [r5, #8]
   a50a0:	2a24      	cmp	r2, #36	; 0x24
   a50a2:	f8ca 3010 	str.w	r3, [sl, #16]
   a50a6:	68eb      	ldr	r3, [r5, #12]
   a50a8:	f8ca 3014 	str.w	r3, [sl, #20]
   a50ac:	d01a      	beq.n	a50e4 <_realloc_r+0x36c>
   a50ae:	3510      	adds	r5, #16
   a50b0:	f10a 0318 	add.w	r3, sl, #24
   a50b4:	e7b0      	b.n	a5018 <_realloc_r+0x2a0>
   a50b6:	692a      	ldr	r2, [r5, #16]
   a50b8:	f100 0318 	add.w	r3, r0, #24
   a50bc:	6102      	str	r2, [r0, #16]
   a50be:	6969      	ldr	r1, [r5, #20]
   a50c0:	f105 0218 	add.w	r2, r5, #24
   a50c4:	6141      	str	r1, [r0, #20]
   a50c6:	e69e      	b.n	a4e06 <_realloc_r+0x8e>
   a50c8:	200710cc 	.word	0x200710cc
   a50cc:	68a9      	ldr	r1, [r5, #8]
   a50ce:	2a24      	cmp	r2, #36	; 0x24
   a50d0:	f8ca 1010 	str.w	r1, [sl, #16]
   a50d4:	68e9      	ldr	r1, [r5, #12]
   a50d6:	f8ca 1014 	str.w	r1, [sl, #20]
   a50da:	d00f      	beq.n	a50fc <_realloc_r+0x384>
   a50dc:	3510      	adds	r5, #16
   a50de:	f10a 0218 	add.w	r2, sl, #24
   a50e2:	e73a      	b.n	a4f5a <_realloc_r+0x1e2>
   a50e4:	692a      	ldr	r2, [r5, #16]
   a50e6:	f10a 0320 	add.w	r3, sl, #32
   a50ea:	f8ca 2018 	str.w	r2, [sl, #24]
   a50ee:	696a      	ldr	r2, [r5, #20]
   a50f0:	3518      	adds	r5, #24
   a50f2:	f8ca 201c 	str.w	r2, [sl, #28]
   a50f6:	e78f      	b.n	a5018 <_realloc_r+0x2a0>
   a50f8:	463a      	mov	r2, r7
   a50fa:	e767      	b.n	a4fcc <_realloc_r+0x254>
   a50fc:	6929      	ldr	r1, [r5, #16]
   a50fe:	f10a 0220 	add.w	r2, sl, #32
   a5102:	f8ca 1018 	str.w	r1, [sl, #24]
   a5106:	6969      	ldr	r1, [r5, #20]
   a5108:	3518      	adds	r5, #24
   a510a:	f8ca 101c 	str.w	r1, [sl, #28]
   a510e:	e724      	b.n	a4f5a <_realloc_r+0x1e2>
   a5110:	4629      	mov	r1, r5
   a5112:	4638      	mov	r0, r7
   a5114:	9301      	str	r3, [sp, #4]
   a5116:	f7ff fdc7 	bl	a4ca8 <memmove>
   a511a:	9b01      	ldr	r3, [sp, #4]
   a511c:	e75c      	b.n	a4fd8 <_realloc_r+0x260>
   a511e:	68a9      	ldr	r1, [r5, #8]
   a5120:	2a24      	cmp	r2, #36	; 0x24
   a5122:	f8ca 1010 	str.w	r1, [sl, #16]
   a5126:	68e9      	ldr	r1, [r5, #12]
   a5128:	f8ca 1014 	str.w	r1, [sl, #20]
   a512c:	d003      	beq.n	a5136 <_realloc_r+0x3be>
   a512e:	3510      	adds	r5, #16
   a5130:	f10a 0218 	add.w	r2, sl, #24
   a5134:	e74a      	b.n	a4fcc <_realloc_r+0x254>
   a5136:	6929      	ldr	r1, [r5, #16]
   a5138:	f10a 0220 	add.w	r2, sl, #32
   a513c:	f8ca 1018 	str.w	r1, [sl, #24]
   a5140:	6969      	ldr	r1, [r5, #20]
   a5142:	3518      	adds	r5, #24
   a5144:	f8ca 101c 	str.w	r1, [sl, #28]
   a5148:	e740      	b.n	a4fcc <_realloc_r+0x254>
   a514a:	bf00      	nop

000a514c <_sbrk_r>:
   a514c:	b538      	push	{r3, r4, r5, lr}
   a514e:	4c07      	ldr	r4, [pc, #28]	; (a516c <_sbrk_r+0x20>)
   a5150:	2300      	movs	r3, #0
   a5152:	4605      	mov	r5, r0
   a5154:	4608      	mov	r0, r1
   a5156:	6023      	str	r3, [r4, #0]
   a5158:	f7f3 fe62 	bl	98e20 <_sbrk>
   a515c:	1c43      	adds	r3, r0, #1
   a515e:	d000      	beq.n	a5162 <_sbrk_r+0x16>
   a5160:	bd38      	pop	{r3, r4, r5, pc}
   a5162:	6823      	ldr	r3, [r4, #0]
   a5164:	2b00      	cmp	r3, #0
   a5166:	d0fb      	beq.n	a5160 <_sbrk_r+0x14>
   a5168:	602b      	str	r3, [r5, #0]
   a516a:	bd38      	pop	{r3, r4, r5, pc}
   a516c:	20073350 	.word	0x20073350

000a5170 <__sread>:
   a5170:	b510      	push	{r4, lr}
   a5172:	460c      	mov	r4, r1
   a5174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a5178:	f000 f936 	bl	a53e8 <_read_r>
   a517c:	2800      	cmp	r0, #0
   a517e:	db03      	blt.n	a5188 <__sread+0x18>
   a5180:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a5182:	4403      	add	r3, r0
   a5184:	6523      	str	r3, [r4, #80]	; 0x50
   a5186:	bd10      	pop	{r4, pc}
   a5188:	89a3      	ldrh	r3, [r4, #12]
   a518a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a518e:	81a3      	strh	r3, [r4, #12]
   a5190:	bd10      	pop	{r4, pc}
   a5192:	bf00      	nop

000a5194 <__swrite>:
   a5194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a5198:	460c      	mov	r4, r1
   a519a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   a519e:	461f      	mov	r7, r3
   a51a0:	05cb      	lsls	r3, r1, #23
   a51a2:	4616      	mov	r6, r2
   a51a4:	4605      	mov	r5, r0
   a51a6:	d507      	bpl.n	a51b8 <__swrite+0x24>
   a51a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a51ac:	2302      	movs	r3, #2
   a51ae:	2200      	movs	r2, #0
   a51b0:	f000 f904 	bl	a53bc <_lseek_r>
   a51b4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   a51b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a51bc:	81a1      	strh	r1, [r4, #12]
   a51be:	463b      	mov	r3, r7
   a51c0:	4632      	mov	r2, r6
   a51c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a51c6:	4628      	mov	r0, r5
   a51c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a51cc:	f000 b814 	b.w	a51f8 <_write_r>

000a51d0 <__sseek>:
   a51d0:	b510      	push	{r4, lr}
   a51d2:	460c      	mov	r4, r1
   a51d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a51d8:	f000 f8f0 	bl	a53bc <_lseek_r>
   a51dc:	89a3      	ldrh	r3, [r4, #12]
   a51de:	1c42      	adds	r2, r0, #1
   a51e0:	bf0e      	itee	eq
   a51e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a51e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a51ea:	6520      	strne	r0, [r4, #80]	; 0x50
   a51ec:	81a3      	strh	r3, [r4, #12]
   a51ee:	bd10      	pop	{r4, pc}

000a51f0 <__sclose>:
   a51f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a51f4:	f000 b868 	b.w	a52c8 <_close_r>

000a51f8 <_write_r>:
   a51f8:	b570      	push	{r4, r5, r6, lr}
   a51fa:	460d      	mov	r5, r1
   a51fc:	4c08      	ldr	r4, [pc, #32]	; (a5220 <_write_r+0x28>)
   a51fe:	4611      	mov	r1, r2
   a5200:	4606      	mov	r6, r0
   a5202:	461a      	mov	r2, r3
   a5204:	4628      	mov	r0, r5
   a5206:	2300      	movs	r3, #0
   a5208:	6023      	str	r3, [r4, #0]
   a520a:	f7f2 fe19 	bl	97e40 <_write>
   a520e:	1c43      	adds	r3, r0, #1
   a5210:	d000      	beq.n	a5214 <_write_r+0x1c>
   a5212:	bd70      	pop	{r4, r5, r6, pc}
   a5214:	6823      	ldr	r3, [r4, #0]
   a5216:	2b00      	cmp	r3, #0
   a5218:	d0fb      	beq.n	a5212 <_write_r+0x1a>
   a521a:	6033      	str	r3, [r6, #0]
   a521c:	bd70      	pop	{r4, r5, r6, pc}
   a521e:	bf00      	nop
   a5220:	20073350 	.word	0x20073350

000a5224 <__register_exitproc>:
   a5224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a5228:	4c25      	ldr	r4, [pc, #148]	; (a52c0 <__register_exitproc+0x9c>)
   a522a:	4606      	mov	r6, r0
   a522c:	6825      	ldr	r5, [r4, #0]
   a522e:	4688      	mov	r8, r1
   a5230:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a5234:	4692      	mov	sl, r2
   a5236:	4699      	mov	r9, r3
   a5238:	b3c4      	cbz	r4, a52ac <__register_exitproc+0x88>
   a523a:	6860      	ldr	r0, [r4, #4]
   a523c:	281f      	cmp	r0, #31
   a523e:	dc17      	bgt.n	a5270 <__register_exitproc+0x4c>
   a5240:	1c41      	adds	r1, r0, #1
   a5242:	b176      	cbz	r6, a5262 <__register_exitproc+0x3e>
   a5244:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a5248:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a524c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a5250:	2201      	movs	r2, #1
   a5252:	4082      	lsls	r2, r0
   a5254:	4315      	orrs	r5, r2
   a5256:	2e02      	cmp	r6, #2
   a5258:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a525c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a5260:	d01e      	beq.n	a52a0 <__register_exitproc+0x7c>
   a5262:	1c83      	adds	r3, r0, #2
   a5264:	6061      	str	r1, [r4, #4]
   a5266:	2000      	movs	r0, #0
   a5268:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a5270:	4b14      	ldr	r3, [pc, #80]	; (a52c4 <__register_exitproc+0xa0>)
   a5272:	b303      	cbz	r3, a52b6 <__register_exitproc+0x92>
   a5274:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a5278:	f7ff fa1c 	bl	a46b4 <malloc>
   a527c:	4604      	mov	r4, r0
   a527e:	b1d0      	cbz	r0, a52b6 <__register_exitproc+0x92>
   a5280:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a5284:	2700      	movs	r7, #0
   a5286:	e884 0088 	stmia.w	r4, {r3, r7}
   a528a:	4638      	mov	r0, r7
   a528c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a5290:	2101      	movs	r1, #1
   a5292:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a5296:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a529a:	2e00      	cmp	r6, #0
   a529c:	d0e1      	beq.n	a5262 <__register_exitproc+0x3e>
   a529e:	e7d1      	b.n	a5244 <__register_exitproc+0x20>
   a52a0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a52a4:	431a      	orrs	r2, r3
   a52a6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a52aa:	e7da      	b.n	a5262 <__register_exitproc+0x3e>
   a52ac:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a52b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a52b4:	e7c1      	b.n	a523a <__register_exitproc+0x16>
   a52b6:	f04f 30ff 	mov.w	r0, #4294967295
   a52ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a52be:	bf00      	nop
   a52c0:	000a5974 	.word	0x000a5974
   a52c4:	000a46b5 	.word	0x000a46b5

000a52c8 <_close_r>:
   a52c8:	b538      	push	{r3, r4, r5, lr}
   a52ca:	4c07      	ldr	r4, [pc, #28]	; (a52e8 <_close_r+0x20>)
   a52cc:	2300      	movs	r3, #0
   a52ce:	4605      	mov	r5, r0
   a52d0:	4608      	mov	r0, r1
   a52d2:	6023      	str	r3, [r4, #0]
   a52d4:	f7f3 fdc2 	bl	98e5c <_close>
   a52d8:	1c43      	adds	r3, r0, #1
   a52da:	d000      	beq.n	a52de <_close_r+0x16>
   a52dc:	bd38      	pop	{r3, r4, r5, pc}
   a52de:	6823      	ldr	r3, [r4, #0]
   a52e0:	2b00      	cmp	r3, #0
   a52e2:	d0fb      	beq.n	a52dc <_close_r+0x14>
   a52e4:	602b      	str	r3, [r5, #0]
   a52e6:	bd38      	pop	{r3, r4, r5, pc}
   a52e8:	20073350 	.word	0x20073350

000a52ec <_fclose_r>:
   a52ec:	2900      	cmp	r1, #0
   a52ee:	d03d      	beq.n	a536c <_fclose_r+0x80>
   a52f0:	b570      	push	{r4, r5, r6, lr}
   a52f2:	4605      	mov	r5, r0
   a52f4:	460c      	mov	r4, r1
   a52f6:	b108      	cbz	r0, a52fc <_fclose_r+0x10>
   a52f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a52fa:	b37b      	cbz	r3, a535c <_fclose_r+0x70>
   a52fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a5300:	b90b      	cbnz	r3, a5306 <_fclose_r+0x1a>
   a5302:	2000      	movs	r0, #0
   a5304:	bd70      	pop	{r4, r5, r6, pc}
   a5306:	4621      	mov	r1, r4
   a5308:	4628      	mov	r0, r5
   a530a:	f7fe fd27 	bl	a3d5c <__sflush_r>
   a530e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a5310:	4606      	mov	r6, r0
   a5312:	b133      	cbz	r3, a5322 <_fclose_r+0x36>
   a5314:	69e1      	ldr	r1, [r4, #28]
   a5316:	4628      	mov	r0, r5
   a5318:	4798      	blx	r3
   a531a:	2800      	cmp	r0, #0
   a531c:	bfb8      	it	lt
   a531e:	f04f 36ff 	movlt.w	r6, #4294967295
   a5322:	89a3      	ldrh	r3, [r4, #12]
   a5324:	061b      	lsls	r3, r3, #24
   a5326:	d41c      	bmi.n	a5362 <_fclose_r+0x76>
   a5328:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a532a:	b141      	cbz	r1, a533e <_fclose_r+0x52>
   a532c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a5330:	4299      	cmp	r1, r3
   a5332:	d002      	beq.n	a533a <_fclose_r+0x4e>
   a5334:	4628      	mov	r0, r5
   a5336:	f7fe feb5 	bl	a40a4 <_free_r>
   a533a:	2300      	movs	r3, #0
   a533c:	6323      	str	r3, [r4, #48]	; 0x30
   a533e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a5340:	b121      	cbz	r1, a534c <_fclose_r+0x60>
   a5342:	4628      	mov	r0, r5
   a5344:	f7fe feae 	bl	a40a4 <_free_r>
   a5348:	2300      	movs	r3, #0
   a534a:	6463      	str	r3, [r4, #68]	; 0x44
   a534c:	f7fe fe44 	bl	a3fd8 <__sfp_lock_acquire>
   a5350:	2300      	movs	r3, #0
   a5352:	81a3      	strh	r3, [r4, #12]
   a5354:	f7fe fe42 	bl	a3fdc <__sfp_lock_release>
   a5358:	4630      	mov	r0, r6
   a535a:	bd70      	pop	{r4, r5, r6, pc}
   a535c:	f7fe fe36 	bl	a3fcc <__sinit>
   a5360:	e7cc      	b.n	a52fc <_fclose_r+0x10>
   a5362:	6921      	ldr	r1, [r4, #16]
   a5364:	4628      	mov	r0, r5
   a5366:	f7fe fe9d 	bl	a40a4 <_free_r>
   a536a:	e7dd      	b.n	a5328 <_fclose_r+0x3c>
   a536c:	2000      	movs	r0, #0
   a536e:	4770      	bx	lr

000a5370 <_fstat_r>:
   a5370:	b538      	push	{r3, r4, r5, lr}
   a5372:	460b      	mov	r3, r1
   a5374:	4c07      	ldr	r4, [pc, #28]	; (a5394 <_fstat_r+0x24>)
   a5376:	4605      	mov	r5, r0
   a5378:	4611      	mov	r1, r2
   a537a:	4618      	mov	r0, r3
   a537c:	2300      	movs	r3, #0
   a537e:	6023      	str	r3, [r4, #0]
   a5380:	f7f3 fd78 	bl	98e74 <_fstat>
   a5384:	1c43      	adds	r3, r0, #1
   a5386:	d000      	beq.n	a538a <_fstat_r+0x1a>
   a5388:	bd38      	pop	{r3, r4, r5, pc}
   a538a:	6823      	ldr	r3, [r4, #0]
   a538c:	2b00      	cmp	r3, #0
   a538e:	d0fb      	beq.n	a5388 <_fstat_r+0x18>
   a5390:	602b      	str	r3, [r5, #0]
   a5392:	bd38      	pop	{r3, r4, r5, pc}
   a5394:	20073350 	.word	0x20073350

000a5398 <_isatty_r>:
   a5398:	b538      	push	{r3, r4, r5, lr}
   a539a:	4c07      	ldr	r4, [pc, #28]	; (a53b8 <_isatty_r+0x20>)
   a539c:	2300      	movs	r3, #0
   a539e:	4605      	mov	r5, r0
   a53a0:	4608      	mov	r0, r1
   a53a2:	6023      	str	r3, [r4, #0]
   a53a4:	f7f3 fd76 	bl	98e94 <_isatty>
   a53a8:	1c43      	adds	r3, r0, #1
   a53aa:	d000      	beq.n	a53ae <_isatty_r+0x16>
   a53ac:	bd38      	pop	{r3, r4, r5, pc}
   a53ae:	6823      	ldr	r3, [r4, #0]
   a53b0:	2b00      	cmp	r3, #0
   a53b2:	d0fb      	beq.n	a53ac <_isatty_r+0x14>
   a53b4:	602b      	str	r3, [r5, #0]
   a53b6:	bd38      	pop	{r3, r4, r5, pc}
   a53b8:	20073350 	.word	0x20073350

000a53bc <_lseek_r>:
   a53bc:	b570      	push	{r4, r5, r6, lr}
   a53be:	460d      	mov	r5, r1
   a53c0:	4c08      	ldr	r4, [pc, #32]	; (a53e4 <_lseek_r+0x28>)
   a53c2:	4611      	mov	r1, r2
   a53c4:	4606      	mov	r6, r0
   a53c6:	461a      	mov	r2, r3
   a53c8:	4628      	mov	r0, r5
   a53ca:	2300      	movs	r3, #0
   a53cc:	6023      	str	r3, [r4, #0]
   a53ce:	f7f3 fd6b 	bl	98ea8 <_lseek>
   a53d2:	1c43      	adds	r3, r0, #1
   a53d4:	d000      	beq.n	a53d8 <_lseek_r+0x1c>
   a53d6:	bd70      	pop	{r4, r5, r6, pc}
   a53d8:	6823      	ldr	r3, [r4, #0]
   a53da:	2b00      	cmp	r3, #0
   a53dc:	d0fb      	beq.n	a53d6 <_lseek_r+0x1a>
   a53de:	6033      	str	r3, [r6, #0]
   a53e0:	bd70      	pop	{r4, r5, r6, pc}
   a53e2:	bf00      	nop
   a53e4:	20073350 	.word	0x20073350

000a53e8 <_read_r>:
   a53e8:	b570      	push	{r4, r5, r6, lr}
   a53ea:	460d      	mov	r5, r1
   a53ec:	4c08      	ldr	r4, [pc, #32]	; (a5410 <_read_r+0x28>)
   a53ee:	4611      	mov	r1, r2
   a53f0:	4606      	mov	r6, r0
   a53f2:	461a      	mov	r2, r3
   a53f4:	4628      	mov	r0, r5
   a53f6:	2300      	movs	r3, #0
   a53f8:	6023      	str	r3, [r4, #0]
   a53fa:	f7f2 fcf7 	bl	97dec <_read>
   a53fe:	1c43      	adds	r3, r0, #1
   a5400:	d000      	beq.n	a5404 <_read_r+0x1c>
   a5402:	bd70      	pop	{r4, r5, r6, pc}
   a5404:	6823      	ldr	r3, [r4, #0]
   a5406:	2b00      	cmp	r3, #0
   a5408:	d0fb      	beq.n	a5402 <_read_r+0x1a>
   a540a:	6033      	str	r3, [r6, #0]
   a540c:	bd70      	pop	{r4, r5, r6, pc}
   a540e:	bf00      	nop
   a5410:	20073350 	.word	0x20073350
   a5414:	54534554 	.word	0x54534554
   a5418:	00315350 	.word	0x00315350
   a541c:	54534554 	.word	0x54534554
   a5420:	00325350 	.word	0x00325350
   a5424:	54534554 	.word	0x54534554
   a5428:	00335350 	.word	0x00335350
   a542c:	54534554 	.word	0x54534554
   a5430:	00545041 	.word	0x00545041
   a5434:	54534554 	.word	0x54534554
   a5438:	00003154 	.word	0x00003154
   a543c:	54534554 	.word	0x54534554
   a5440:	00003254 	.word	0x00003254
   a5444:	54534554 	.word	0x54534554
   a5448:	00003354 	.word	0x00003354
   a544c:	54534554 	.word	0x54534554
   a5450:	444e4f43 	.word	0x444e4f43
   a5454:	00000000 	.word	0x00000000
   a5458:	45544544 	.word	0x45544544
   a545c:	4c5f5443 	.word	0x4c5f5443
   a5460:	0000574f 	.word	0x0000574f
   a5464:	48545056 	.word	0x48545056
   a5468:	00484749 	.word	0x00484749
   a546c:	4f4f4c42 	.word	0x4f4f4c42
   a5470:	4c445f44 	.word	0x4c445f44
   a5474:	00000000 	.word	0x00000000
   a5478:	00545041 	.word	0x00545041
   a547c:	45544e45 	.word	0x45544e45
   a5480:	00325f52 	.word	0x00325f52
   a5484:	45544e45 	.word	0x45544e45
   a5488:	00335f52 	.word	0x00335f52
   a548c:	45544e45 	.word	0x45544e45
   a5490:	00345f52 	.word	0x00345f52
   a5494:	00574c46 	.word	0x00574c46
   a5498:	00004442 	.word	0x00004442
   a549c:	00444241 	.word	0x00444241
   a54a0:	00303035 	.word	0x00303035
   a54a4:	41505942 	.word	0x41505942
   a54a8:	00005353 	.word	0x00005353
   a54ac:	4d495250 	.word	0x4d495250
   a54b0:	00003245 	.word	0x00003245
   a54b4:	52494352 	.word	0x52494352
   a54b8:	00003243 	.word	0x00003243
   a54bc:	4f5f4548 	.word	0x4f5f4548
   a54c0:	0000004e 	.word	0x0000004e
   a54c4:	4f5f4548 	.word	0x4f5f4548
   a54c8:	00004646 	.word	0x00004646
   a54cc:	4f5f5046 	.word	0x4f5f5046
   a54d0:	0000004e 	.word	0x0000004e
   a54d4:	4f5f5046 	.word	0x4f5f5046
   a54d8:	00004646 	.word	0x00004646
   a54dc:	505f5343 	.word	0x505f5343
   a54e0:	535f544f 	.word	0x535f544f
   a54e4:	00005445 	.word	0x00005445
   a54e8:	525f5046 	.word	0x525f5046
   a54ec:	00455441 	.word	0x00455441
   a54f0:	465f5046 	.word	0x465f5046
   a54f4:	00005152 	.word	0x00005152
   a54f8:	5f504744 	.word	0x5f504744
   a54fc:	00004e4f 	.word	0x00004e4f
   a5500:	5f504744 	.word	0x5f504744
   a5504:	0046464f 	.word	0x0046464f
   a5508:	5f504744 	.word	0x5f504744
   a550c:	45544152 	.word	0x45544152
   a5510:	00000000 	.word	0x00000000
   a5514:	5f504744 	.word	0x5f504744
   a5518:	00515246 	.word	0x00515246
   a551c:	545f5350 	.word	0x545f5350
   a5520:	00000000 	.word	0x00000000
   a5524:	5f504655 	.word	0x5f504655
   a5528:	0046464f 	.word	0x0046464f
   a552c:	5f504655 	.word	0x5f504655
   a5530:	45544152 	.word	0x45544152
   a5534:	00000000 	.word	0x00000000
   a5538:	5f414c56 	.word	0x5f414c56
   a553c:	504d5550 	.word	0x504d5550
   a5540:	004e4f5f 	.word	0x004e4f5f
   a5544:	5f414c56 	.word	0x5f414c56
   a5548:	504d5550 	.word	0x504d5550
   a554c:	46464f5f 	.word	0x46464f5f
   a5550:	00000000 	.word	0x00000000
   a5554:	525f5042 	.word	0x525f5042
   a5558:	00455441 	.word	0x00455441
   a555c:	4f5f4356 	.word	0x4f5f4356
   a5560:	00004646 	.word	0x00004646
   a5564:	4f5f4957 	.word	0x4f5f4957
   a5568:	0000004e 	.word	0x0000004e
   a556c:	4f5f4957 	.word	0x4f5f4957
   a5570:	00004646 	.word	0x00004646
   a5574:	49415244 	.word	0x49415244
   a5578:	4e4f5f4e 	.word	0x4e4f5f4e
   a557c:	00000000 	.word	0x00000000
   a5580:	49415244 	.word	0x49415244
   a5584:	464f5f4e 	.word	0x464f5f4e
   a5588:	00000046 	.word	0x00000046
   a558c:	504f5f56 	.word	0x504f5f56
   a5590:	00004e45 	.word	0x00004e45
   a5594:	4c435f56 	.word	0x4c435f56
   a5598:	0045534f 	.word	0x0045534f
   a559c:	4c415f56 	.word	0x4c415f56
   a55a0:	45504f4c 	.word	0x45504f4c
   a55a4:	0000004e 	.word	0x0000004e
   a55a8:	4f5f5048 	.word	0x4f5f5048
   a55ac:	0000004e 	.word	0x0000004e
   a55b0:	4f5f5048 	.word	0x4f5f5048
   a55b4:	00004646 	.word	0x00004646
   a55b8:	525f5048 	.word	0x525f5048
   a55bc:	00455441 	.word	0x00455441
   a55c0:	565f4342 	.word	0x565f4342
   a55c4:	45532031 	.word	0x45532031
   a55c8:	00000054 	.word	0x00000054
   a55cc:	565f4342 	.word	0x565f4342
   a55d0:	45532032 	.word	0x45532032
   a55d4:	00000054 	.word	0x00000054
   a55d8:	565f4342 	.word	0x565f4342
   a55dc:	33315f31 	.word	0x33315f31
   a55e0:	53203431 	.word	0x53203431
   a55e4:	00005445 	.word	0x00005445
   a55e8:	565f4342 	.word	0x565f4342
   a55ec:	33315f32 	.word	0x33315f32
   a55f0:	53203431 	.word	0x53203431
   a55f4:	00005445 	.word	0x00005445
   a55f8:	565f4342 	.word	0x565f4342
   a55fc:	20345f31 	.word	0x20345f31
   a5600:	00544553 	.word	0x00544553
   a5604:	565f4342 	.word	0x565f4342
   a5608:	20345f32 	.word	0x20345f32
   a560c:	00544553 	.word	0x00544553
   a5610:	525f4342 	.word	0x525f4342
   a5614:	54455345 	.word	0x54455345
   a5618:	00000000 	.word	0x00000000
   a561c:	465f4342 	.word	0x465f4342
   a5620:	5a454552 	.word	0x5a454552
   a5624:	00000045 	.word	0x00000045
   a5628:	555f4342 	.word	0x555f4342
   a562c:	4552464e 	.word	0x4552464e
   a5630:	00455a45 	.word	0x00455a45
   a5634:	4e45504f 	.word	0x4e45504f
   a5638:	4c4c4946 	.word	0x4c4c4946
   a563c:	00000000 	.word	0x00000000
   a5640:	0052544a 	.word	0x0052544a
   a5644:	4f5f4356 	.word	0x4f5f4356
   a5648:	0000004e 	.word	0x0000004e
   a564c:	545f5343 	.word	0x545f5343
   a5650:	47474952 	.word	0x47474952
   a5654:	00005245 	.word	0x00005245
   a5658:	545f5350 	.word	0x545f5350
   a565c:	47474952 	.word	0x47474952
   a5660:	00005245 	.word	0x00005245
   a5664:	3a726556 	.word	0x3a726556
   a5668:	00342e54 	.word	0x00342e54
   a566c:	574f4c46 	.word	0x574f4c46
   a5670:	004e455f 	.word	0x004e455f
   a5674:	574f4c46 	.word	0x574f4c46
   a5678:	5349445f 	.word	0x5349445f
   a567c:	00000000 	.word	0x00000000
   a5680:	504d4554 	.word	0x504d4554
   a5684:	49485f31 	.word	0x49485f31
   a5688:	00004847 	.word	0x00004847
   a568c:	504d4554 	.word	0x504d4554
   a5690:	4f4c5f31 	.word	0x4f4c5f31
   a5694:	00000057 	.word	0x00000057
   a5698:	504d4554 	.word	0x504d4554
   a569c:	00000031 	.word	0x00000031
   a56a0:	504d4554 	.word	0x504d4554
   a56a4:	49485f32 	.word	0x49485f32
   a56a8:	00004847 	.word	0x00004847
   a56ac:	504d4554 	.word	0x504d4554
   a56b0:	4f4c5f32 	.word	0x4f4c5f32
   a56b4:	00000057 	.word	0x00000057
   a56b8:	54534554 	.word	0x54534554
   a56bc:	00000000 	.word	0x00000000
   a56c0:	504d4554 	.word	0x504d4554
   a56c4:	00000032 	.word	0x00000032
   a56c8:	504d4554 	.word	0x504d4554
   a56cc:	4749485f 	.word	0x4749485f
   a56d0:	00000048 	.word	0x00000048
   a56d4:	504d4554 	.word	0x504d4554
   a56d8:	574f4c5f 	.word	0x574f4c5f
   a56dc:	00000000 	.word	0x00000000
   a56e0:	504d4554 	.word	0x504d4554
   a56e4:	00000033 	.word	0x00000033
   a56e8:	5f545041 	.word	0x5f545041
   a56ec:	48474948 	.word	0x48474948
   a56f0:	00000000 	.word	0x00000000
   a56f4:	5f545041 	.word	0x5f545041
   a56f8:	3d574f4c 	.word	0x3d574f4c
   a56fc:	292d2820 	.word	0x292d2820
   a5700:	00000000 	.word	0x00000000
   a5704:	5f545041 	.word	0x5f545041
   a5708:	00574f4c 	.word	0x00574f4c
   a570c:	5f545056 	.word	0x5f545056
   a5710:	48474948 	.word	0x48474948
   a5714:	00000000 	.word	0x00000000
   a5718:	5f545056 	.word	0x5f545056
   a571c:	3d574f4c 	.word	0x3d574f4c
   a5720:	292d2820 	.word	0x292d2820
   a5724:	00000000 	.word	0x00000000
   a5728:	5f325350 	.word	0x5f325350
   a572c:	00574f4c 	.word	0x00574f4c
   a5730:	444e4f43 	.word	0x444e4f43
   a5734:	4749485f 	.word	0x4749485f
   a5738:	00000048 	.word	0x00000048
   a573c:	444e4f43 	.word	0x444e4f43
   a5740:	574f4c5f 	.word	0x574f4c5f
   a5744:	00000000 	.word	0x00000000
   a5748:	5f4e4f43 	.word	0x5f4e4f43
   a574c:	00574f4c 	.word	0x00574f4c
   a5750:	5f315350 	.word	0x5f315350
   a5754:	48474948 	.word	0x48474948
   a5758:	00000000 	.word	0x00000000
   a575c:	5f315350 	.word	0x5f315350
   a5760:	3d574f4c 	.word	0x3d574f4c
   a5764:	292d2820 	.word	0x292d2820
   a5768:	00000000 	.word	0x00000000
   a576c:	00325350 	.word	0x00325350
   a5770:	5f325350 	.word	0x5f325350
   a5774:	3d574f4c 	.word	0x3d574f4c
   a5778:	292d2820 	.word	0x292d2820
   a577c:	00000000 	.word	0x00000000
   a5780:	00335350 	.word	0x00335350
   a5784:	5f335350 	.word	0x5f335350
   a5788:	3d574f4c 	.word	0x3d574f4c
   a578c:	292d2820 	.word	0x292d2820
   a5790:	00000000 	.word	0x00000000
   a5794:	5f335350 	.word	0x5f335350
   a5798:	00574f4c 	.word	0x00574f4c
   a579c:	535f5048 	.word	0x535f5048
   a57a0:	54524154 	.word	0x54524154
   a57a4:	0000003d 	.word	0x0000003d
   a57a8:	455f5048 	.word	0x455f5048
   a57ac:	003d444e 	.word	0x003d444e
   a57b0:	3d315350 	.word	0x3d315350
   a57b4:	00000000 	.word	0x00000000
   a57b8:	3d325350 	.word	0x3d325350
   a57bc:	00000000 	.word	0x00000000
   a57c0:	3d335350 	.word	0x3d335350
   a57c4:	00000000 	.word	0x00000000
   a57c8:	3d545041 	.word	0x3d545041
   a57cc:	00000000 	.word	0x00000000
   a57d0:	3d545056 	.word	0x3d545056
   a57d4:	00000000 	.word	0x00000000
   a57d8:	31504d54 	.word	0x31504d54
   a57dc:	0000003d 	.word	0x0000003d
   a57e0:	32504d54 	.word	0x32504d54
   a57e4:	0000003d 	.word	0x0000003d
   a57e8:	504d4554 	.word	0x504d4554
   a57ec:	00003d31 	.word	0x00003d31
   a57f0:	504d4554 	.word	0x504d4554
   a57f4:	00003d32 	.word	0x00003d32
   a57f8:	504d4554 	.word	0x504d4554
   a57fc:	00003d33 	.word	0x00003d33
   a5800:	544e4328 	.word	0x544e4328
   a5804:	00000029 	.word	0x00000029

000a5808 <can_bit_time>:
   a5808:	02020308 02094b03 43020303 0303030a     .....K.....C....
   a5818:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   a5828:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   a5838:	05050510 06114504 47040505 06060512     .....E.....G....
   a5848:	06134304 44040606 06060714 08154604     .C.....D.....F..
   a5858:	47040606 07070716 08174404 46040708     ...G.....D.....F
   a5868:	08080718 08194304 44040808 00006325     .....C.....D%c..
   a5878:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   a5888:	74737953 206b6369 666e6f63 72756769     Systick configur
   a5898:	6f697461 7265206e 0d726f72 00000000     ation error.....

000a58a8 <uart_serial_options>:
   a58a8:	0001c200 00000000 00000800 00000001     ................
   a58b8:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a58c8:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a58d8:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   a58e8:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   a58f8:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   a5908:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   a5918:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   a5928:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   a5938:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   a5948:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   a5958:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a5968:	4d495250 00003145 00000043              PRIME1..C...

000a5974 <_global_impure_ptr>:
   a5974:	20070ca0 0000000a                       ... ....

000a597c <_init>:
   a597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a597e:	bf00      	nop
   a5980:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a5982:	bc08      	pop	{r3}
   a5984:	469e      	mov	lr, r3
   a5986:	4770      	bx	lr

000a5988 <__init_array_start>:
   a5988:	000a3d3d 	.word	0x000a3d3d

000a598c <__frame_dummy_init_array_entry>:
   a598c:	00080119                                ....

000a5990 <_fini>:
   a5990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a5992:	bf00      	nop
   a5994:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a5996:	bc08      	pop	{r3}
   a5998:	469e      	mov	lr, r3
   a599a:	4770      	bx	lr

000a599c <__fini_array_start>:
   a599c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a27      	ldr	r2, [pc, #156]	; (200700b0 <efc_perform_read_sequence+0xb0>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00

200700b4 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b4:	b480      	push	{r7}
200700b6:	b083      	sub	sp, #12
200700b8:	af00      	add	r7, sp, #0
200700ba:	6078      	str	r0, [r7, #4]
200700bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700be:	687b      	ldr	r3, [r7, #4]
200700c0:	683a      	ldr	r2, [r7, #0]
200700c2:	601a      	str	r2, [r3, #0]
}
200700c4:	bf00      	nop
200700c6:	370c      	adds	r7, #12
200700c8:	46bd      	mov	sp, r7
200700ca:	bc80      	pop	{r7}
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop

200700d0 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d0:	b480      	push	{r7}
200700d2:	b085      	sub	sp, #20
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700da:	687b      	ldr	r3, [r7, #4]
200700dc:	683a      	ldr	r2, [r7, #0]
200700de:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e0:	687b      	ldr	r3, [r7, #4]
200700e2:	689b      	ldr	r3, [r3, #8]
200700e4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700e6:	68fb      	ldr	r3, [r7, #12]
200700e8:	f003 0301 	and.w	r3, r3, #1
200700ec:	2b00      	cmp	r3, #0
200700ee:	d0f7      	beq.n	200700e0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f0:	68fb      	ldr	r3, [r7, #12]
200700f2:	f003 0306 	and.w	r3, r3, #6
}
200700f6:	4618      	mov	r0, r3
200700f8:	3714      	adds	r7, #20
200700fa:	46bd      	mov	sp, r7
200700fc:	bc80      	pop	{r7}
200700fe:	4770      	bx	lr

20070100 <levelswitchprevstatus>:
20070100:	0001                                        ..

20070102 <ps3_threshold>:
20070102:	1000                                        ..

20070104 <cl_flowpathtable>:
20070104:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

2007011c <apt2>:
2007011c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007012c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007013c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007014c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007015c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007016c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
2007017c:	0168 12e1 01a4 1630                         h.....0.

20070184 <vpt2>:
20070184:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
20070194:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
200701a4:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
200701b4:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
200701c4:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
200701d4:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200701e4:	0168 12e1 01a4 1630                         h.....0.

200701ec <ufp>:
200701ec:	0028 05dc 003c 041a 0046 02bc 0050 028a     (...<...F...P...
200701fc:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
2007020c:	0082 0190 0096 015e 00aa 012c 00c8 00fa     ......^...,.....
2007021c:	00fa 00c8 0154 0096                         ....T...

20070224 <ps_1_2>:
20070224:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
20070234:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
20070244:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
20070254:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
20070264:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
20070274:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
20070284:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070290 <ps_2_2>:
20070290:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
200702a0:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
200702b0:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
200702c0:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
200702d0:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200702e0:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200702f0:	02ee 1612 0320 1900 0000 0000               .... .......

200702fc <ps_3_2>:
200702fc:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
2007030c:	ff38 df0d ff6a e172 ff9c e563 ffce e769     8...j.r...c...i.
2007031c:	0000 eb06 0032 ed32 0064 f08a 0096 f3fb     ....2.2.d.......
2007032c:	00c8 f6ce 00fa f941 012c fc1b 015e ff10     ......A.,...^...
2007033c:	0190 026c 01c2 053f 01da 06a4 01f4 0708     ..l...?.........
2007034c:	0226 0ab7 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007035c:	02ee 1676 0320 1964 0352 1c6d 0384 1f40     ..v. .d.R.m...@.
2007036c:	03b6 2260 03e8 25e4 041a 29cc 044c 2db4     ..`"...%...)L..-
2007037c:	047e 3200 04b0 36b0 04e2 3b60 0514 4074     ~..2...6..`;..t@
2007038c:	0546 4588 0578 4b00 05aa 50dc 05dc 571c     F..Ex..K...P...W

2007039c <Cl_DlsisAlarmTable>:
2007039c:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
200703ac:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
200703bc:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
200703cc:	1500 0001 0000 0000 0116 0000 0000 1700     ................
200703dc:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
200703ec:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
200703fc:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
2007040c:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
2007041c:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
2007042c:	0001 0800 0001 0100 0000 0113 0000 0000     ................
2007043c:	1400 0001 0000 0000 0111 0000 0000 1200     ................
2007044c:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070470 <heater_duty>:
20070470:	0555 0000                                   U...

20070474 <prescribed_temp>:
20070474:	0000 4214                                   ...B

20070478 <wait_4_TS2Stability>:
20070478:	00b4                                        ..

2007047a <wait_4_stability>:
2007047a:	00f0                                        ..

2007047c <Prescribed_T2>:
2007047c:	0000 4214                                   ...B

20070480 <Prescribed_T3>:
20070480:	0000 4214                                   ...B

20070484 <SYSTEM_FLOW>:
20070484:	012c 0000                                   ,...

20070488 <gram_test_buffer.9544>:
20070488:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070498:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
200704a8:	aaaa 0000 0000 0000                         ........

200704b0 <Cl_MacState>:
200704b0:	0101                                             .

200704b1 <ConsoleSync>:
200704b1:	0001 0000                                        ...

200704b4 <array>:
	...
200704bc:	01d4 0000 0001 0000 01d4 0000 01d4 0000     ................
200704cc:	0002 0000 03a8 0000 01d4 0000 0003 0000     ................
200704dc:	057c 0000 0094 0000 0004 0000 0610 0000     |...............
200704ec:	0094 0000 0005 0000 06a4 0000 0094 0000     ................
200704fc:	0006 0000 0738 0000 0038 0000 0007 0000     ....8...8.......
2007050c:	0770 0000 0038 0000 0008 0000 07a8 0000     p...8...........
2007051c:	005c 0000 0009 0000 0804 0000 002c 0000     \...........,...
2007052c:	000a 0000 0830 0000 0014 0000               ....0.......

20070538 <cond_pot_val_2volts.9568>:
20070538:	02cc 0000                                   ....

2007053c <res_temp>:
2007053c:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
2007054c:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
2007055c:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
2007056c:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
2007057c:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
2007058c:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
2007059c:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
200705ac:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
200705bc:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
200705cc:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
200705dc:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
200705ec:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
200705fc:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
2007060c:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
2007061c:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
2007062c:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
2007063c:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
2007064c:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
2007065c:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
2007066c:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
2007067c:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
2007068c:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
2007069c:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
200706ac:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
200706bc:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
200706cc:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
200706dc:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
200706ec:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
200706fc:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
2007070c:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
2007071c:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
2007072c:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
2007073c:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
2007074c:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
2007075c:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
2007076c:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
2007077c:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

200709ec <TEST_STUB_ENABLEGATE>:
200709ec:	0101                                             .

200709ed <prev_gate_status>:
200709ed:	0101                                             .

200709ee <Current_sense_trigger>:
200709ee:	0001                                        ..

200709f0 <pwm_period>:
200709f0:	00c8 0000                                   ....

200709f4 <bp_rotataion_marker>:
200709f4:	0001                                        ..

200709f6 <prev_bp_rotataion_marker>:
200709f6:	0001                                        ..

200709f8 <cl_hep_deliveryrate>:
200709f8:	0064 0000                                   d...

200709fc <hep_rotataion_marker>:
200709fc:	0001                                        ..

200709fe <prev_hep_rotataion_marker>:
200709fe:	0001                                        ..

20070a00 <opt>:
20070a00:	0000 0000 86a0 0001 002c 0000               ........,...

20070a0c <nvmarray>:
	...
20070a14:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070a24:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070a60 <SystemCoreClock>:
20070a60:	0900 003d                                   ..=.

20070a64 <Cl_ConsoleState>:
20070a64:	0101                                             .

20070a65 <g_b_led0_active>:
20070a65:	0101                                             .

20070a66 <Cl_disinfOpenFillTimeOut>:
20070a66:	0001                                        ..

20070a68 <Cl_DisinfAlarmTable>:
20070a68:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070a78:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070a88:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070a98:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070aa8:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070ab8:	0000 0000                                   ....

20070abc <Cl_DprepAlarmTable>:
20070abc:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070acc:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070adc:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070aec:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070afc:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070b0c:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070b1c:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
20070b2c:	0122 0000 0000 2400 0001 0000 0000 0126     "......$......&.
20070b3c:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070b4c:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070b5c:	2700 0001 0000 0000 0128 0000 0000 0f00     .'......(.......
20070b6c:	0001 0000 0000 0110 0000 0000 1100 0001     ................
20070b7c:	0000 0000 0112 0000 0000 1300 0001 0000     ................
20070b8c:	0000 0114 0000 0000 3c00 0001 0000 0000     .........<......
	...

20070bac <Cl_RinseAlarmTable>:
20070bac:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070bbc:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070bcc:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070bdc:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070bec:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070bfc:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070c0c:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070c1c:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070c2c:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070c3c:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070c4c:	010c 0000 0000 0000 010d 0000 0000 0000     ................
20070c5c:	010e 0000 0000 0000 0121 0000 0000 0000     ........!.......
20070c6c:	011a 0000 0000 0000                         ........

20070c74 <Cl_StandbyAlarmTable>:
20070c74:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070c84:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070c94:	0000 0000                                   ....

20070c98 <cl_stbystate>:
20070c98:	0001 0000 0000 0000                         ........

20070ca0 <impure_data>:
20070ca0:	0000 0000 0f8c 2007 0ff4 2007 105c 2007     ....... ... \.. 
	...
20070cd4:	5970 000a 0000 0000 0000 0000 0000 0000     pY..............
	...
20070d48:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070d58:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200710c8 <_impure_ptr>:
200710c8:	0ca0 2007                                   ... 

200710cc <__malloc_av_>:
	...
200710d4:	10cc 2007 10cc 2007 10d4 2007 10d4 2007     ... ... ... ... 
200710e4:	10dc 2007 10dc 2007 10e4 2007 10e4 2007     ... ... ... ... 
200710f4:	10ec 2007 10ec 2007 10f4 2007 10f4 2007     ... ... ... ... 
20071104:	10fc 2007 10fc 2007 1104 2007 1104 2007     ... ... ... ... 
20071114:	110c 2007 110c 2007 1114 2007 1114 2007     ... ... ... ... 
20071124:	111c 2007 111c 2007 1124 2007 1124 2007     ... ... $.. $.. 
20071134:	112c 2007 112c 2007 1134 2007 1134 2007     ,.. ,.. 4.. 4.. 
20071144:	113c 2007 113c 2007 1144 2007 1144 2007     <.. <.. D.. D.. 
20071154:	114c 2007 114c 2007 1154 2007 1154 2007     L.. L.. T.. T.. 
20071164:	115c 2007 115c 2007 1164 2007 1164 2007     \.. \.. d.. d.. 
20071174:	116c 2007 116c 2007 1174 2007 1174 2007     l.. l.. t.. t.. 
20071184:	117c 2007 117c 2007 1184 2007 1184 2007     |.. |.. ... ... 
20071194:	118c 2007 118c 2007 1194 2007 1194 2007     ... ... ... ... 
200711a4:	119c 2007 119c 2007 11a4 2007 11a4 2007     ... ... ... ... 
200711b4:	11ac 2007 11ac 2007 11b4 2007 11b4 2007     ... ... ... ... 
200711c4:	11bc 2007 11bc 2007 11c4 2007 11c4 2007     ... ... ... ... 
200711d4:	11cc 2007 11cc 2007 11d4 2007 11d4 2007     ... ... ... ... 
200711e4:	11dc 2007 11dc 2007 11e4 2007 11e4 2007     ... ... ... ... 
200711f4:	11ec 2007 11ec 2007 11f4 2007 11f4 2007     ... ... ... ... 
20071204:	11fc 2007 11fc 2007 1204 2007 1204 2007     ... ... ... ... 
20071214:	120c 2007 120c 2007 1214 2007 1214 2007     ... ... ... ... 
20071224:	121c 2007 121c 2007 1224 2007 1224 2007     ... ... $.. $.. 
20071234:	122c 2007 122c 2007 1234 2007 1234 2007     ,.. ,.. 4.. 4.. 
20071244:	123c 2007 123c 2007 1244 2007 1244 2007     <.. <.. D.. D.. 
20071254:	124c 2007 124c 2007 1254 2007 1254 2007     L.. L.. T.. T.. 
20071264:	125c 2007 125c 2007 1264 2007 1264 2007     \.. \.. d.. d.. 
20071274:	126c 2007 126c 2007 1274 2007 1274 2007     l.. l.. t.. t.. 
20071284:	127c 2007 127c 2007 1284 2007 1284 2007     |.. |.. ... ... 
20071294:	128c 2007 128c 2007 1294 2007 1294 2007     ... ... ... ... 
200712a4:	129c 2007 129c 2007 12a4 2007 12a4 2007     ... ... ... ... 
200712b4:	12ac 2007 12ac 2007 12b4 2007 12b4 2007     ... ... ... ... 
200712c4:	12bc 2007 12bc 2007 12c4 2007 12c4 2007     ... ... ... ... 
200712d4:	12cc 2007 12cc 2007 12d4 2007 12d4 2007     ... ... ... ... 
200712e4:	12dc 2007 12dc 2007 12e4 2007 12e4 2007     ... ... ... ... 
200712f4:	12ec 2007 12ec 2007 12f4 2007 12f4 2007     ... ... ... ... 
20071304:	12fc 2007 12fc 2007 1304 2007 1304 2007     ... ... ... ... 
20071314:	130c 2007 130c 2007 1314 2007 1314 2007     ... ... ... ... 
20071324:	131c 2007 131c 2007 1324 2007 1324 2007     ... ... $.. $.. 
20071334:	132c 2007 132c 2007 1334 2007 1334 2007     ,.. ,.. 4.. 4.. 
20071344:	133c 2007 133c 2007 1344 2007 1344 2007     <.. <.. D.. D.. 
20071354:	134c 2007 134c 2007 1354 2007 1354 2007     L.. L.. T.. T.. 
20071364:	135c 2007 135c 2007 1364 2007 1364 2007     \.. \.. d.. d.. 
20071374:	136c 2007 136c 2007 1374 2007 1374 2007     l.. l.. t.. t.. 
20071384:	137c 2007 137c 2007 1384 2007 1384 2007     |.. |.. ... ... 
20071394:	138c 2007 138c 2007 1394 2007 1394 2007     ... ... ... ... 
200713a4:	139c 2007 139c 2007 13a4 2007 13a4 2007     ... ... ... ... 
200713b4:	13ac 2007 13ac 2007 13b4 2007 13b4 2007     ... ... ... ... 
200713c4:	13bc 2007 13bc 2007 13c4 2007 13c4 2007     ... ... ... ... 
200713d4:	13cc 2007 13cc 2007 13d4 2007 13d4 2007     ... ... ... ... 
200713e4:	13dc 2007 13dc 2007 13e4 2007 13e4 2007     ... ... ... ... 
200713f4:	13ec 2007 13ec 2007 13f4 2007 13f4 2007     ... ... ... ... 
20071404:	13fc 2007 13fc 2007 1404 2007 1404 2007     ... ... ... ... 
20071414:	140c 2007 140c 2007 1414 2007 1414 2007     ... ... ... ... 
20071424:	141c 2007 141c 2007 1424 2007 1424 2007     ... ... $.. $.. 
20071434:	142c 2007 142c 2007 1434 2007 1434 2007     ,.. ,.. 4.. 4.. 
20071444:	143c 2007 143c 2007 1444 2007 1444 2007     <.. <.. D.. D.. 
20071454:	144c 2007 144c 2007 1454 2007 1454 2007     L.. L.. T.. T.. 
20071464:	145c 2007 145c 2007 1464 2007 1464 2007     \.. \.. d.. d.. 
20071474:	146c 2007 146c 2007 1474 2007 1474 2007     l.. l.. t.. t.. 
20071484:	147c 2007 147c 2007 1484 2007 1484 2007     |.. |.. ... ... 
20071494:	148c 2007 148c 2007 1494 2007 1494 2007     ... ... ... ... 
200714a4:	149c 2007 149c 2007 14a4 2007 14a4 2007     ... ... ... ... 
200714b4:	14ac 2007 14ac 2007 14b4 2007 14b4 2007     ... ... ... ... 
200714c4:	14bc 2007 14bc 2007 14c4 2007 14c4 2007     ... ... ... ... 

200714d4 <__malloc_trim_threshold>:
200714d4:	0000 0002                                   ....

200714d8 <__malloc_sbrk_base>:
200714d8:	ffff ffff                                   ....
